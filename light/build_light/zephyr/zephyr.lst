
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	08 df 00 20 1d d5 00 00 e9 a1 02 00 f1 d4 00 00     ... ............
    8010:	f1 d4 00 00 f1 d4 00 00 f1 d4 00 00 f1 d4 00 00     ................
	...
    802c:	e1 cd 00 00 f1 d4 00 00 00 00 00 00 81 cd 00 00     ................
    803c:	f1 d4 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8050:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8060:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8070:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8080:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8090:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80a0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80b0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80c0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80d0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80e0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    80f0:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8100:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8110:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8120:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8130:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8140:	69 ce 00 00 69 ce 00 00 69 ce 00 00 69 ce 00 00     i...i...i...i...
    8150:	69 ce 00 00                                         i...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <bt_ready>:
#include <dk_buttons_and_leds.h>
#include "model_handler.h"
#include "smp_dfu.h"

static void bt_ready(int err)
{
    8424:	b510      	push	{r4, lr}
	if (err) {
    8426:	4604      	mov	r4, r0
    8428:	b128      	cbz	r0, 8436 <bt_ready+0x12>
		printk("Bluetooth init failed (err %d)\n", err);
    842a:	4601      	mov	r1, r0
    842c:	4811      	ldr	r0, [pc, #68]	; (8474 <bt_ready+0x50>)
		err = smp_dfu_init();
		if (err) {
			printk("Unable to initialize DFU (err %d)\n", err);
		}
	}
}
    842e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Initializing mesh failed (err %d)\n", err);
    8432:	f020 b9bf 	b.w	287b4 <printk>
	printk("Bluetooth initialized\n");
    8436:	4810      	ldr	r0, [pc, #64]	; (8478 <bt_ready+0x54>)
    8438:	f020 f9bc 	bl	287b4 <printk>
	dk_leds_init();
    843c:	f01a fa8e 	bl	2295c <dk_leds_init>
	dk_buttons_init(NULL);
    8440:	4620      	mov	r0, r4
    8442:	f01a fb17 	bl	22a74 <dk_buttons_init>
	err = bt_mesh_init(bt_mesh_dk_prov_init(), model_handler_init());
    8446:	f01a fcfb 	bl	22e40 <bt_mesh_dk_prov_init>
    844a:	4604      	mov	r4, r0
    844c:	f000 f8f8 	bl	8640 <model_handler_init>
    8450:	4601      	mov	r1, r0
    8452:	4620      	mov	r0, r4
    8454:	f00c f9b6 	bl	147c4 <bt_mesh_init>
	if (err) {
    8458:	4601      	mov	r1, r0
    845a:	b108      	cbz	r0, 8460 <bt_ready+0x3c>
		printk("Initializing mesh failed (err %d)\n", err);
    845c:	4807      	ldr	r0, [pc, #28]	; (847c <bt_ready+0x58>)
    845e:	e7e6      	b.n	842e <bt_ready+0xa>
		settings_load();
    8460:	f021 f975 	bl	2974e <settings_load>
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    8464:	2003      	movs	r0, #3
    8466:	f015 fe89 	bl	1e17c <bt_mesh_prov_enable>
}
    846a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Mesh initialized\n");
    846e:	4804      	ldr	r0, [pc, #16]	; (8480 <bt_ready+0x5c>)
    8470:	f020 b9a0 	b.w	287b4 <printk>
    8474:	00030cfa 	.word	0x00030cfa
    8478:	00030d1a 	.word	0x00030d1a
    847c:	00030d31 	.word	0x00030d31
    8480:	00030d54 	.word	0x00030d54

00008484 <main>:

void main(void)
{
    8484:	b508      	push	{r3, lr}
	int err;

	printk("Initializing...\n");
    8486:	4807      	ldr	r0, [pc, #28]	; (84a4 <main+0x20>)
    8488:	f020 f994 	bl	287b4 <printk>

	err = bt_enable(bt_ready);
    848c:	4806      	ldr	r0, [pc, #24]	; (84a8 <main+0x24>)
    848e:	f006 feb7 	bl	f200 <bt_enable>
	if (err) {
    8492:	4601      	mov	r1, r0
    8494:	b120      	cbz	r0, 84a0 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
	}
}
    8496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    849a:	4804      	ldr	r0, [pc, #16]	; (84ac <main+0x28>)
    849c:	f020 b98a 	b.w	287b4 <printk>
}
    84a0:	bd08      	pop	{r3, pc}
    84a2:	bf00      	nop
    84a4:	00030d66 	.word	0x00030d66
    84a8:	00008425 	.word	0x00008425
    84ac:	00030cfa 	.word	0x00030cfa

000084b0 <attention_off>:
}

static void attention_off(struct bt_mesh_model *mod)
{
	/* Will stop rescheduling blink timer */
	attention = false;
    84b0:	2200      	movs	r2, #0
    84b2:	4b01      	ldr	r3, [pc, #4]	; (84b8 <attention_off+0x8>)
    84b4:	701a      	strb	r2, [r3, #0]
}
    84b6:	4770      	bx	lr
    84b8:	2000b1da 	.word	0x2000b1da

000084bc <attention_on>:
	attention = true;
    84bc:	2201      	movs	r2, #1
    84be:	4b03      	ldr	r3, [pc, #12]	; (84cc <attention_on+0x10>)
	k_work_reschedule(&attention_blink_work, K_NO_WAIT);
    84c0:	4803      	ldr	r0, [pc, #12]	; (84d0 <attention_on+0x14>)
	attention = true;
    84c2:	701a      	strb	r2, [r3, #0]
	k_work_reschedule(&attention_blink_work, K_NO_WAIT);
    84c4:	2200      	movs	r2, #0
    84c6:	2300      	movs	r3, #0
    84c8:	f01e b8d6 	b.w	26678 <k_work_reschedule>
    84cc:	2000b1da 	.word	0x2000b1da
    84d0:	200090f8 	.word	0x200090f8

000084d4 <led_transition_start>:
{
    84d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    84d6:	2500      	movs	r5, #0
	int led_idx = led - &led_ctx[0];
    84d8:	4b10      	ldr	r3, [pc, #64]	; (851c <led_transition_start+0x48>)
    84da:	4a11      	ldr	r2, [pc, #68]	; (8520 <led_transition_start+0x4c>)
    84dc:	1ac3      	subs	r3, r0, r3
    84de:	119b      	asrs	r3, r3, #6
    84e0:	4353      	muls	r3, r2
{
    84e2:	4604      	mov	r4, r0
	dk_set_led(led_idx, true);
    84e4:	2101      	movs	r1, #1
    84e6:	b2d8      	uxtb	r0, r3
    84e8:	f01a fb58 	bl	22b9c <dk_set_led>
    84ec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    84f0:	f240 30e7 	movw	r0, #999	; 0x3e7
    84f4:	4629      	mov	r1, r5
    84f6:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
    84fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    84fe:	2300      	movs	r3, #0
    8500:	fbe7 0106 	umlal	r0, r1, r7, r6
    8504:	f7ff fe26 	bl	8154 <__aeabi_uldivmod>
    8508:	4602      	mov	r2, r0
    850a:	460b      	mov	r3, r1
	k_work_reschedule(&led->work, K_MSEC(led->remaining));
    850c:	f104 0088 	add.w	r0, r4, #136	; 0x88
    8510:	f01e f8b2 	bl	26678 <k_work_reschedule>
	led->remaining = 0;
    8514:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
    8518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    851a:	bf00      	nop
    851c:	20008080 	.word	0x20008080
    8520:	aaaaaaab 	.word	0xaaaaaaab

00008524 <led_work>:
{
    8524:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (led->remaining) {
    8526:	6b05      	ldr	r5, [r0, #48]	; 0x30
	struct led_ctx *led = CONTAINER_OF(work, struct led_ctx, work.work);
    8528:	f1a0 0488 	sub.w	r4, r0, #136	; 0x88
	if (led->remaining) {
    852c:	b12d      	cbz	r5, 853a <led_work+0x16>
		led_transition_start(led);
    852e:	4620      	mov	r0, r4
}
    8530:	b003      	add	sp, #12
    8532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		led_transition_start(led);
    8536:	f7ff bfcd 	b.w	84d4 <led_transition_start>
	int led_idx = led - &led_ctx[0];
    853a:	4b0a      	ldr	r3, [pc, #40]	; (8564 <led_work+0x40>)
    853c:	4a0a      	ldr	r2, [pc, #40]	; (8568 <led_work+0x44>)
    853e:	1ae3      	subs	r3, r4, r3
    8540:	119b      	asrs	r3, r3, #6
    8542:	4353      	muls	r3, r2
		dk_set_led(led_idx, led->value);
    8544:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
    8548:	b2d8      	uxtb	r0, r3
    854a:	f01a fb27 	bl	22b9c <dk_set_led>
		led_status(led, &status);
    854e:	4669      	mov	r1, sp
    8550:	4620      	mov	r0, r4
    8552:	f020 f821 	bl	28598 <led_status>
		bt_mesh_onoff_srv_pub(&led->srv, NULL, &status);
    8556:	466a      	mov	r2, sp
    8558:	4629      	mov	r1, r5
    855a:	4620      	mov	r0, r4
    855c:	f026 f87a 	bl	2e654 <bt_mesh_onoff_srv_pub>
}
    8560:	b003      	add	sp, #12
    8562:	bd30      	pop	{r4, r5, pc}
    8564:	20008080 	.word	0x20008080
    8568:	aaaaaaab 	.word	0xaaaaaaab

0000856c <led_set>:
{
    856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    856e:	461d      	mov	r5, r3
	if (set->on_off == led->value) {
    8570:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    8574:	7813      	ldrb	r3, [r2, #0]
{
    8576:	4604      	mov	r4, r0
	if (set->on_off == led->value) {
    8578:	4299      	cmp	r1, r3
    857a:	d014      	beq.n	85a6 <led_set+0x3a>
	led->value = set->on_off;
    857c:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
	if (!bt_mesh_model_transition_time(set->transition)) {
    8580:	6853      	ldr	r3, [r2, #4]
 *          @p trans is NULL.
 */
static inline int32_t
bt_mesh_model_transition_time(const struct bt_mesh_model_transition *trans)
{
	if (!trans) {
    8582:	b11b      	cbz	r3, 858c <led_set+0x20>
		return 0;
	}

	return trans->delay + trans->time;
    8584:	e9d3 1300 	ldrd	r1, r3, [r3]
    8588:	42d9      	cmn	r1, r3
    858a:	d113      	bne.n	85b4 <led_set+0x48>
		led->remaining = 0;
    858c:	2300      	movs	r3, #0
	int led_idx = led - &led_ctx[0];
    858e:	4817      	ldr	r0, [pc, #92]	; (85ec <led_set+0x80>)
		led->remaining = 0;
    8590:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	int led_idx = led - &led_ctx[0];
    8594:	1a20      	subs	r0, r4, r0
    8596:	1180      	asrs	r0, r0, #6
    8598:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
    859c:	4358      	muls	r0, r3
		dk_set_led(led_idx, set->on_off);
    859e:	7811      	ldrb	r1, [r2, #0]
    85a0:	b2c0      	uxtb	r0, r0
    85a2:	f01a fafb 	bl	22b9c <dk_set_led>
	if (rsp) {
    85a6:	b305      	cbz	r5, 85ea <led_set+0x7e>
		led_status(led, rsp);
    85a8:	4629      	mov	r1, r5
    85aa:	4620      	mov	r0, r4
}
    85ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		led_status(led, rsp);
    85b0:	f01f bff2 	b.w	28598 <led_status>
	led->remaining = set->transition->time;
    85b4:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
	if (set->transition->delay) {
    85b8:	6853      	ldr	r3, [r2, #4]
    85ba:	685e      	ldr	r6, [r3, #4]
    85bc:	b196      	cbz	r6, 85e4 <led_set+0x78>
    85be:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    85c2:	f240 30e7 	movw	r0, #999	; 0x3e7
    85c6:	2100      	movs	r1, #0
    85c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    85cc:	2300      	movs	r3, #0
    85ce:	fbe6 0107 	umlal	r0, r1, r6, r7
    85d2:	f7ff fdbf 	bl	8154 <__aeabi_uldivmod>
    85d6:	4602      	mov	r2, r0
    85d8:	460b      	mov	r3, r1
		k_work_reschedule(&led->work, K_MSEC(set->transition->delay));
    85da:	f104 0088 	add.w	r0, r4, #136	; 0x88
    85de:	f01e f84b 	bl	26678 <k_work_reschedule>
    85e2:	e7e0      	b.n	85a6 <led_set+0x3a>
		led_transition_start(led);
    85e4:	f7ff ff76 	bl	84d4 <led_transition_start>
    85e8:	e7dd      	b.n	85a6 <led_set+0x3a>
}
    85ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85ec:	20008080 	.word	0x20008080

000085f0 <attention_blink>:
{
    85f0:	b507      	push	{r0, r1, r2, lr}
	const uint8_t pattern[] = {
    85f2:	4b0f      	ldr	r3, [pc, #60]	; (8630 <attention_blink+0x40>)
    85f4:	9301      	str	r3, [sp, #4]
	if (attention) {
    85f6:	4b0f      	ldr	r3, [pc, #60]	; (8634 <attention_blink+0x44>)
    85f8:	7818      	ldrb	r0, [r3, #0]
    85fa:	b1a0      	cbz	r0, 8626 <attention_blink+0x36>
		dk_set_leds(pattern[idx++ % ARRAY_SIZE(pattern)]);
    85fc:	4a0e      	ldr	r2, [pc, #56]	; (8638 <attention_blink+0x48>)
    85fe:	6813      	ldr	r3, [r2, #0]
    8600:	1c59      	adds	r1, r3, #1
    8602:	f003 0303 	and.w	r3, r3, #3
    8606:	3308      	adds	r3, #8
    8608:	446b      	add	r3, sp
    860a:	f813 0c04 	ldrb.w	r0, [r3, #-4]
    860e:	6011      	str	r1, [r2, #0]
    8610:	f025 ff86 	bl	2e520 <dk_set_leds>
		k_work_reschedule(&attention_blink_work, K_MSEC(30));
    8614:	f44f 7276 	mov.w	r2, #984	; 0x3d8
    8618:	2300      	movs	r3, #0
    861a:	4808      	ldr	r0, [pc, #32]	; (863c <attention_blink+0x4c>)
}
    861c:	b003      	add	sp, #12
    861e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&attention_blink_work, K_MSEC(30));
    8622:	f01e b829 	b.w	26678 <k_work_reschedule>
}
    8626:	b003      	add	sp, #12
    8628:	f85d eb04 	ldr.w	lr, [sp], #4
		dk_set_leds(DK_NO_LEDS_MSK);
    862c:	f025 bf78 	b.w	2e520 <dk_set_leds>
    8630:	08040201 	.word	0x08040201
    8634:	2000b1da 	.word	0x2000b1da
    8638:	2000a5b8 	.word	0x2000a5b8
    863c:	200090f8 	.word	0x200090f8

00008640 <model_handler_init>:
	.elem = elements,
	.elem_count = ARRAY_SIZE(elements),
};

const struct bt_mesh_comp *model_handler_init(void)
{
    8640:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&attention_blink_work, attention_blink);

	for (int i = 0; i < ARRAY_SIZE(led_ctx); ++i) {
		k_work_init_delayable(&led_ctx[i].work, led_work);
    8642:	4d0d      	ldr	r5, [pc, #52]	; (8678 <model_handler_init+0x38>)
    8644:	4c0d      	ldr	r4, [pc, #52]	; (867c <model_handler_init+0x3c>)
	k_work_init_delayable(&attention_blink_work, attention_blink);
    8646:	490e      	ldr	r1, [pc, #56]	; (8680 <model_handler_init+0x40>)
    8648:	480e      	ldr	r0, [pc, #56]	; (8684 <model_handler_init+0x44>)
    864a:	f01d ff2b 	bl	264a4 <k_work_init_delayable>
		k_work_init_delayable(&led_ctx[i].work, led_work);
    864e:	4629      	mov	r1, r5
    8650:	4620      	mov	r0, r4
    8652:	f01d ff27 	bl	264a4 <k_work_init_delayable>
    8656:	4629      	mov	r1, r5
    8658:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    865c:	f01d ff22 	bl	264a4 <k_work_init_delayable>
    8660:	4629      	mov	r1, r5
    8662:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    8666:	f01d ff1d 	bl	264a4 <k_work_init_delayable>
    866a:	f504 7010 	add.w	r0, r4, #576	; 0x240
    866e:	4629      	mov	r1, r5
    8670:	f01d ff18 	bl	264a4 <k_work_init_delayable>
	}

	return &comp;
}
    8674:	4804      	ldr	r0, [pc, #16]	; (8688 <model_handler_init+0x48>)
    8676:	bd38      	pop	{r3, r4, r5, pc}
    8678:	00008525 	.word	0x00008525
    867c:	20008108 	.word	0x20008108
    8680:	000085f1 	.word	0x000085f1
    8684:	200090f8 	.word	0x200090f8
    8688:	0002fff8 	.word	0x0002fff8

0000868c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8690:	b091      	sub	sp, #68	; 0x44
    8692:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    8694:	f002 0304 	and.w	r3, r2, #4
    8698:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    869a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    869e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    86a0:	0784      	lsls	r4, r0, #30
{
    86a2:	4605      	mov	r5, r0
    86a4:	460e      	mov	r6, r1
    86a6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    86aa:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    86ac:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    86ae:	f040 81e3 	bne.w	8a78 <cbvprintf_package+0x3ec>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    86b2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    86b4:	b130      	cbz	r0, 86c4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    86b6:	2907      	cmp	r1, #7
    86b8:	d809      	bhi.n	86ce <cbvprintf_package+0x42>
		return -ENOSPC;
    86ba:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    86be:	b011      	add	sp, #68	; 0x44
    86c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    86c4:	f001 0607 	and.w	r6, r1, #7
    86c8:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    86ca:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    86ce:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    86d0:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    86d4:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    86d8:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    86da:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    86de:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    86e0:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    86e2:	46cb      	mov	fp, r9
	size = sizeof(char *);
    86e4:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    86e6:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    86ea:	b10d      	cbz	r5, 86f0 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    86ec:	9a00      	ldr	r2, [sp, #0]
    86ee:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    86f0:	9805      	ldr	r0, [sp, #20]
    86f2:	2800      	cmp	r0, #0
    86f4:	f300 80da 	bgt.w	88ac <cbvprintf_package+0x220>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    86f8:	4896      	ldr	r0, [pc, #600]	; (8954 <cbvprintf_package+0x2c8>)
    86fa:	9a00      	ldr	r2, [sp, #0]
    86fc:	4282      	cmp	r2, r0
    86fe:	d303      	bcc.n	8708 <cbvprintf_package+0x7c>
    8700:	4895      	ldr	r0, [pc, #596]	; (8958 <cbvprintf_package+0x2cc>)
    8702:	4282      	cmp	r2, r0
    8704:	f0c0 80d2 	bcc.w	88ac <cbvprintf_package+0x220>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8708:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    870a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    870e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8710:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8714:	f140 80e1 	bpl.w	88da <cbvprintf_package+0x24e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8718:	f04f 0c00 	mov.w	ip, #0
    871c:	e0cf      	b.n	88be <cbvprintf_package+0x232>
			switch (*fmt) {
    871e:	287a      	cmp	r0, #122	; 0x7a
    8720:	d860      	bhi.n	87e4 <cbvprintf_package+0x158>
    8722:	284b      	cmp	r0, #75	; 0x4b
    8724:	d80e      	bhi.n	8744 <cbvprintf_package+0xb8>
    8726:	2847      	cmp	r0, #71	; 0x47
    8728:	d85c      	bhi.n	87e4 <cbvprintf_package+0x158>
    872a:	2829      	cmp	r0, #41	; 0x29
    872c:	d82f      	bhi.n	878e <cbvprintf_package+0x102>
    872e:	2825      	cmp	r0, #37	; 0x25
    8730:	d055      	beq.n	87de <cbvprintf_package+0x152>
    8732:	d857      	bhi.n	87e4 <cbvprintf_package+0x158>
    8734:	2820      	cmp	r0, #32
    8736:	d07d      	beq.n	8834 <cbvprintf_package+0x1a8>
    8738:	3823      	subs	r0, #35	; 0x23
    873a:	f1d0 0b00 	rsbs	fp, r0, #0
    873e:	eb4b 0b00 	adc.w	fp, fp, r0
    8742:	e077      	b.n	8834 <cbvprintf_package+0x1a8>
    8744:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    8748:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    874c:	d84a      	bhi.n	87e4 <cbvprintf_package+0x158>
    874e:	e8df f00c 	tbb	[pc, ip]
    8752:	4971      	.short	0x4971
    8754:	49494949 	.word	0x49494949
    8758:	49494949 	.word	0x49494949
    875c:	494c4949 	.word	0x494c4949
    8760:	49494949 	.word	0x49494949
    8764:	5a494949 	.word	0x5a494949
    8768:	5a4c4c49 	.word	0x5a4c4c49
    876c:	4c715a5a 	.word	0x4c715a5a
    8770:	4971496e 	.word	0x4971496e
    8774:	49184c18 	.word	0x49184c18
    8778:	4c818449 	.word	0x4c818449
    877c:	494c4949 	.word	0x494c4949
    8780:	81          	.byte	0x81
    8781:	00          	.byte	0x00
    8782:	2000      	movs	r0, #0
    8784:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    8788:	f04f 0a04 	mov.w	sl, #4
    878c:	e039      	b.n	8802 <cbvprintf_package+0x176>
    878e:	2201      	movs	r2, #1
			switch (*fmt) {
    8790:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    8794:	fa5f fc8c 	uxtb.w	ip, ip
    8798:	fa02 fc0c 	lsl.w	ip, r2, ip
    879c:	ea1c 0f0e 	tst.w	ip, lr
    87a0:	d148      	bne.n	8834 <cbvprintf_package+0x1a8>
    87a2:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    87a6:	d12e      	bne.n	8806 <cbvprintf_package+0x17a>
    87a8:	ea1c 0b02 	ands.w	fp, ip, r2
    87ac:	d042      	beq.n	8834 <cbvprintf_package+0x1a8>
		buf = (void *) ROUND_UP(buf, align);
    87ae:	3c01      	subs	r4, #1
    87b0:	4454      	add	r4, sl
    87b2:	f1ca 0c00 	rsb	ip, sl, #0
    87b6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    87ba:	2d00      	cmp	r5, #0
    87bc:	d060      	beq.n	8880 <cbvprintf_package+0x1f4>
    87be:	eba3 0c05 	sub.w	ip, r3, r5
    87c2:	44a4      	add	ip, r4
    87c4:	45b4      	cmp	ip, r6
    87c6:	f63f af78 	bhi.w	86ba <cbvprintf_package+0x2e>
		if (is_str_arg) {
    87ca:	2800      	cmp	r0, #0
    87cc:	d167      	bne.n	889e <cbvprintf_package+0x212>
		} else if (size == sizeof(int)) {
    87ce:	2b04      	cmp	r3, #4
    87d0:	d148      	bne.n	8864 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    87d2:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    87d6:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    87d8:	2304      	movs	r3, #4
    87da:	3404      	adds	r4, #4
    87dc:	e02a      	b.n	8834 <cbvprintf_package+0x1a8>
				arg_idx--;
    87de:	9a01      	ldr	r2, [sp, #4]
    87e0:	3a01      	subs	r2, #1
    87e2:	9201      	str	r2, [sp, #4]
				parsing = false;
    87e4:	f04f 0b00 	mov.w	fp, #0
				continue;
    87e8:	e024      	b.n	8834 <cbvprintf_package+0x1a8>
				if (fmt[-1] == 'l') {
    87ea:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    87ee:	286c      	cmp	r0, #108	; 0x6c
    87f0:	d135      	bne.n	885e <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    87f2:	2000      	movs	r0, #0
    87f4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    87f8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    87fa:	2b6c      	cmp	r3, #108	; 0x6c
    87fc:	d1c4      	bne.n	8788 <cbvprintf_package+0xfc>
						align = VA_STACK_ALIGN(long long);
    87fe:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    8802:	4653      	mov	r3, sl
    8804:	e7d3      	b.n	87ae <cbvprintf_package+0x122>
					v.ld = va_arg(ap, long double);
    8806:	f108 0807 	add.w	r8, r8, #7
    880a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    880e:	3407      	adds	r4, #7
    8810:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    8814:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    8818:	b135      	cbz	r5, 8828 <cbvprintf_package+0x19c>
					if (BUF_OFFSET + size > len) {
    881a:	9806      	ldr	r0, [sp, #24]
    881c:	4420      	add	r0, r4
    881e:	42b0      	cmp	r0, r6
    8820:	f63f af4b 	bhi.w	86ba <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    8824:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    8828:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    882c:	3408      	adds	r4, #8
			switch (*fmt) {
    882e:	f04f 0a08 	mov.w	sl, #8
    8832:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    8834:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8838:	2800      	cmp	r0, #0
    883a:	f000 80a9 	beq.w	8990 <cbvprintf_package+0x304>
			if (!parsing) {
    883e:	f1bb 0f00 	cmp.w	fp, #0
    8842:	f47f af6c 	bne.w	871e <cbvprintf_package+0x92>
				if (*fmt == '%') {
    8846:	2825      	cmp	r0, #37	; 0x25
    8848:	d1f4      	bne.n	8834 <cbvprintf_package+0x1a8>
					parsing = true;
    884a:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    884e:	9b01      	ldr	r3, [sp, #4]
    8850:	3301      	adds	r3, #1
    8852:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    8854:	f04f 0a04 	mov.w	sl, #4
    8858:	e7eb      	b.n	8832 <cbvprintf_package+0x1a6>
			switch (*fmt) {
    885a:	4658      	mov	r0, fp
    885c:	e792      	b.n	8784 <cbvprintf_package+0xf8>
    885e:	2000      	movs	r0, #0
				parsing = false;
    8860:	4683      	mov	fp, r0
    8862:	e7a4      	b.n	87ae <cbvprintf_package+0x122>
		} else if (size == sizeof(long long)) {
    8864:	2b08      	cmp	r3, #8
    8866:	f040 808a 	bne.w	897e <cbvprintf_package+0x2f2>
			long long v = va_arg(ap, long long);
    886a:	f108 0807 	add.w	r8, r8, #7
    886e:	f028 0807 	bic.w	r8, r8, #7
    8872:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    8876:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    887a:	2308      	movs	r3, #8
    887c:	3408      	adds	r4, #8
    887e:	e7d9      	b.n	8834 <cbvprintf_package+0x1a8>
		if (is_str_arg) {
    8880:	b968      	cbnz	r0, 889e <cbvprintf_package+0x212>
		} else if (size == sizeof(int)) {
    8882:	2b04      	cmp	r3, #4
    8884:	d102      	bne.n	888c <cbvprintf_package+0x200>
			int v = va_arg(ap, int);
    8886:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    888a:	e7a5      	b.n	87d8 <cbvprintf_package+0x14c>
		} else if (size == sizeof(long long)) {
    888c:	2b08      	cmp	r3, #8
    888e:	d176      	bne.n	897e <cbvprintf_package+0x2f2>
			long long v = va_arg(ap, long long);
    8890:	f108 0807 	add.w	r8, r8, #7
    8894:	f028 0807 	bic.w	r8, r8, #7
    8898:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    889c:	e7ed      	b.n	887a <cbvprintf_package+0x1ee>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    889e:	9a05      	ldr	r2, [sp, #20]
    88a0:	3a01      	subs	r2, #1
    88a2:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    88a4:	f858 2b04 	ldr.w	r2, [r8], #4
    88a8:	9200      	str	r2, [sp, #0]
    88aa:	e71e      	b.n	86ea <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    88ac:	9a03      	ldr	r2, [sp, #12]
    88ae:	0790      	lsls	r0, r2, #30
    88b0:	d544      	bpl.n	893c <cbvprintf_package+0x2b0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    88b2:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    88b6:	eba4 0e05 	sub.w	lr, r4, r5
    88ba:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    88be:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    88c2:	d31b      	bcc.n	88fc <cbvprintf_package+0x270>
					__ASSERT(false, "String with too many arguments");
    88c4:	4925      	ldr	r1, [pc, #148]	; (895c <cbvprintf_package+0x2d0>)
    88c6:	f240 227b 	movw	r2, #635	; 0x27b
    88ca:	4825      	ldr	r0, [pc, #148]	; (8960 <cbvprintf_package+0x2d4>)
    88cc:	f020 f97a 	bl	28bc4 <assert_print>
    88d0:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    88d4:	4821      	ldr	r0, [pc, #132]	; (895c <cbvprintf_package+0x2d0>)
    88d6:	f020 f96e 	bl	28bb6 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    88da:	2f0f      	cmp	r7, #15
    88dc:	d810      	bhi.n	8900 <cbvprintf_package+0x274>
				if (buf0 != NULL) {
    88de:	2d00      	cmp	r5, #0
    88e0:	d040      	beq.n	8964 <cbvprintf_package+0x2d8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    88e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    88e6:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    88ea:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    88ec:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    88f0:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    88f4:	9804      	ldr	r0, [sp, #16]
    88f6:	3001      	adds	r0, #1
    88f8:	9004      	str	r0, [sp, #16]
    88fa:	e01e      	b.n	893a <cbvprintf_package+0x2ae>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    88fc:	2f0f      	cmp	r7, #15
    88fe:	d908      	bls.n	8912 <cbvprintf_package+0x286>
					__ASSERT(false, "str_ptr_pos[] too small");
    8900:	4916      	ldr	r1, [pc, #88]	; (895c <cbvprintf_package+0x2d0>)
    8902:	f44f 7220 	mov.w	r2, #640	; 0x280
    8906:	4816      	ldr	r0, [pc, #88]	; (8960 <cbvprintf_package+0x2d4>)
    8908:	f020 f95c 	bl	28bc4 <assert_print>
    890c:	f44f 7120 	mov.w	r1, #640	; 0x280
    8910:	e7e0      	b.n	88d4 <cbvprintf_package+0x248>
				if (buf0 != NULL) {
    8912:	b1d5      	cbz	r5, 894a <cbvprintf_package+0x2be>
					str_ptr_pos[s_idx] = s_ptr_idx;
    8914:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8918:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    891c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    891e:	b2c0      	uxtb	r0, r0
    8920:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    8924:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    8928:	f1bc 0f00 	cmp.w	ip, #0
    892c:	d0e2      	beq.n	88f4 <cbvprintf_package+0x268>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    892e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    8932:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    8936:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    893a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    893c:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    8940:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    8944:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    8946:	9206      	str	r2, [sp, #24]
    8948:	e774      	b.n	8834 <cbvprintf_package+0x1a8>
				} else if (is_ro) {
    894a:	f1bc 0f00 	cmp.w	ip, #0
    894e:	d009      	beq.n	8964 <cbvprintf_package+0x2d8>
					len += 1;
    8950:	3601      	adds	r6, #1
    8952:	e7f2      	b.n	893a <cbvprintf_package+0x2ae>
    8954:	0002f764 	.word	0x0002f764
    8958:	000354d8 	.word	0x000354d8
    895c:	00030d77 	.word	0x00030d77
    8960:	00030da5 	.word	0x00030da5
				} else if (rws_pos_en) {
    8964:	9802      	ldr	r0, [sp, #8]
					len += 2;
    8966:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    8968:	2800      	cmp	r0, #0
    896a:	d1e6      	bne.n	893a <cbvprintf_package+0x2ae>
					len += strlen(s) + 1 + 1;
    896c:	9800      	ldr	r0, [sp, #0]
    896e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    8972:	f021 fd7c 	bl	2a46e <strlen>
    8976:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    897a:	4406      	add	r6, r0
    897c:	e7dd      	b.n	893a <cbvprintf_package+0x2ae>
			__ASSERT(false, "unexpected size %u", size);
    897e:	4940      	ldr	r1, [pc, #256]	; (8a80 <cbvprintf_package+0x3f4>)
    8980:	f240 22c5 	movw	r2, #709	; 0x2c5
    8984:	483f      	ldr	r0, [pc, #252]	; (8a84 <cbvprintf_package+0x3f8>)
    8986:	f020 f91d 	bl	28bc4 <assert_print>
    898a:	f240 21c5 	movw	r1, #709	; 0x2c5
    898e:	e7a1      	b.n	88d4 <cbvprintf_package+0x248>
	if (BUF_OFFSET / sizeof(int) > 255) {
    8990:	1b63      	subs	r3, r4, r5
    8992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8996:	d308      	bcc.n	89aa <cbvprintf_package+0x31e>
		__ASSERT(false, "too many format args");
    8998:	4939      	ldr	r1, [pc, #228]	; (8a80 <cbvprintf_package+0x3f4>)
    899a:	f240 22d1 	movw	r2, #721	; 0x2d1
    899e:	4839      	ldr	r0, [pc, #228]	; (8a84 <cbvprintf_package+0x3f8>)
    89a0:	f020 f910 	bl	28bc4 <assert_print>
    89a4:	f240 21d1 	movw	r1, #721	; 0x2d1
    89a8:	e794      	b.n	88d4 <cbvprintf_package+0x248>
	if (buf0 == NULL) {
    89aa:	b91d      	cbnz	r5, 89b4 <cbvprintf_package+0x328>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    89ac:	f1a6 0408 	sub.w	r4, r6, #8
    89b0:	18e0      	adds	r0, r4, r3
    89b2:	e684      	b.n	86be <cbvprintf_package+0x32>
	if (rws_pos_en) {
    89b4:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    89b6:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    89b8:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    89ba:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    89bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    89c0:	b1c2      	cbz	r2, 89f4 <cbvprintf_package+0x368>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    89c2:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    89c4:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    89c8:	f1b9 0f00 	cmp.w	r9, #0
    89cc:	d005      	beq.n	89da <cbvprintf_package+0x34e>
		for (i = 0; i < s_idx; i++) {
    89ce:	2200      	movs	r2, #0
    89d0:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    89d2:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    89d6:	4297      	cmp	r7, r2
    89d8:	d10e      	bne.n	89f8 <cbvprintf_package+0x36c>
			*buf++ = str_ptr_arg[i];
    89da:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    89de:	f1c5 0301 	rsb	r3, r5, #1
    89e2:	f10d 0820 	add.w	r8, sp, #32
    89e6:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    89e8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    89ec:	4557      	cmp	r7, sl
    89ee:	d112      	bne.n	8a16 <cbvprintf_package+0x38a>
	return BUF_OFFSET;
    89f0:	1b60      	subs	r0, r4, r5
    89f2:	e664      	b.n	86be <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    89f4:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    89f6:	e7e5      	b.n	89c4 <cbvprintf_package+0x338>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    89f8:	f810 3b01 	ldrb.w	r3, [r0], #1
    89fc:	0619      	lsls	r1, r3, #24
    89fe:	d508      	bpl.n	8a12 <cbvprintf_package+0x386>
			if (BUF_OFFSET + 1 > len) {
    8a00:	eb04 0e0c 	add.w	lr, r4, ip
    8a04:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    8a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    8a0a:	f63f ae56 	bhi.w	86ba <cbvprintf_package+0x2e>
			*buf++ = pos;
    8a0e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    8a12:	3201      	adds	r2, #1
    8a14:	e7df      	b.n	89d6 <cbvprintf_package+0x34a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    8a16:	f1b9 0f00 	cmp.w	r9, #0
    8a1a:	d003      	beq.n	8a24 <cbvprintf_package+0x398>
    8a1c:	f998 2000 	ldrsb.w	r2, [r8]
    8a20:	2a00      	cmp	r2, #0
    8a22:	db17      	blt.n	8a54 <cbvprintf_package+0x3c8>
		if (rws_pos_en) {
    8a24:	9b02      	ldr	r3, [sp, #8]
    8a26:	b1d3      	cbz	r3, 8a5e <cbvprintf_package+0x3d2>
			*buf++ = str_ptr_arg[i];
    8a28:	f81a 200b 	ldrb.w	r2, [sl, fp]
    8a2c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    8a30:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    8a32:	9b01      	ldr	r3, [sp, #4]
    8a34:	1898      	adds	r0, r3, r2
    8a36:	4420      	add	r0, r4
    8a38:	42b0      	cmp	r0, r6
    8a3a:	f63f ae3e 	bhi.w	86ba <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    8a3e:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
    8a42:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
    8a44:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    8a48:	4620      	mov	r0, r4
    8a4a:	9203      	str	r2, [sp, #12]
    8a4c:	f021 fd65 	bl	2a51a <memcpy>
		buf += size;
    8a50:	9a03      	ldr	r2, [sp, #12]
    8a52:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    8a54:	f10a 0a01 	add.w	sl, sl, #1
    8a58:	f108 0801 	add.w	r8, r8, #1
    8a5c:	e7c6      	b.n	89ec <cbvprintf_package+0x360>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    8a5e:	f898 2000 	ldrb.w	r2, [r8]
    8a62:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    8a66:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8a68:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    8a6a:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8a6c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    8a70:	f021 fcfd 	bl	2a46e <strlen>
    8a74:	1c42      	adds	r2, r0, #1
    8a76:	e7dc      	b.n	8a32 <cbvprintf_package+0x3a6>
		return -EFAULT;
    8a78:	f06f 000d 	mvn.w	r0, #13
    8a7c:	e61f      	b.n	86be <cbvprintf_package+0x32>
    8a7e:	bf00      	nop
    8a80:	00030d77 	.word	0x00030d77
    8a84:	00030da5 	.word	0x00030da5

00008a88 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    8a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a8c:	b095      	sub	sp, #84	; 0x54
    8a8e:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    8a90:	4604      	mov	r4, r0
{
    8a92:	e9c7 1208 	strd	r1, r2, [r7, #32]
    8a96:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    8a9a:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    8a9c:	b950      	cbnz	r0, 8ab4 <cbprintf_package_convert+0x2c>
    8a9e:	49ab      	ldr	r1, [pc, #684]	; (8d4c <cbprintf_package_convert+0x2c4>)
    8aa0:	f44f 7265 	mov.w	r2, #916	; 0x394
    8aa4:	48aa      	ldr	r0, [pc, #680]	; (8d50 <cbprintf_package_convert+0x2c8>)
    8aa6:	f020 f88d 	bl	28bc4 <assert_print>
    8aaa:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8aae:	48a7      	ldr	r0, [pc, #668]	; (8d4c <cbprintf_package_convert+0x2c4>)
    8ab0:	f020 f881 	bl	28bb6 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    8ab4:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    8ab8:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    8aba:	6a3b      	ldr	r3, [r7, #32]
    8abc:	b953      	cbnz	r3, 8ad4 <cbprintf_package_convert+0x4c>
	buf += ros_nbr;
    8abe:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8ac0:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    8ac2:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    8ac4:	6a3d      	ldr	r5, [r7, #32]
	buf += ros_nbr;
    8ac6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8aca:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    8acc:	42ae      	cmp	r6, r5
    8ace:	d81a      	bhi.n	8b06 <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    8ad0:	1b03      	subs	r3, r0, r4
    8ad2:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
    8ad4:	f894 9002 	ldrb.w	r9, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    8ad8:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    8ada:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
    8adc:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    8ade:	f1b9 0f00 	cmp.w	r9, #0
    8ae2:	d002      	beq.n	8aea <cbprintf_package_convert+0x62>
    8ae4:	f01b 0f01 	tst.w	fp, #1
    8ae8:	d116      	bne.n	8b18 <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    8aea:	697b      	ldr	r3, [r7, #20]
    8aec:	bb53      	cbnz	r3, 8b44 <cbprintf_package_convert+0xbc>
		if (cb) {
    8aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8af0:	b11b      	cbz	r3, 8afa <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    8af2:	4620      	mov	r0, r4
    8af4:	69ba      	ldr	r2, [r7, #24]
    8af6:	6a39      	ldr	r1, [r7, #32]
    8af8:	4798      	blx	r3
		return in_len;
    8afa:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8afc:	4628      	mov	r0, r5
    8afe:	3754      	adds	r7, #84	; 0x54
    8b00:	46bd      	mov	sp, r7
    8b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    8b06:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    8b0a:	4640      	mov	r0, r8
    8b0c:	f021 fcaf 	bl	2a46e <strlen>
    8b10:	3001      	adds	r0, #1
    8b12:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    8b14:	3501      	adds	r5, #1
    8b16:	e7d9      	b.n	8acc <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
    8b18:	6863      	ldr	r3, [r4, #4]
    8b1a:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b1e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    8b22:	ea4f 028a 	mov.w	r2, sl, lsl #2
    8b26:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    8b28:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	f040 8104 	bne.w	8d3a <cbprintf_package_convert+0x2b2>
		out_len = (int)in_len;
    8b32:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
    8b34:	2600      	movs	r6, #0
		out_len = (int)in_len;
    8b36:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    8b38:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
    8b3c:	4598      	cmp	r8, r3
    8b3e:	d14e      	bne.n	8bde <cbprintf_package_convert+0x156>
    8b40:	44ca      	add	sl, r9
    8b42:	e013      	b.n	8b6c <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    8b44:	f01b 0f02 	tst.w	fp, #2
    8b48:	d0d1      	beq.n	8aee <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    8b4a:	f894 a000 	ldrb.w	sl, [r4]
    8b4e:	ea4f 038a 	mov.w	r3, sl, lsl #2
    8b52:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b54:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    8b56:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b5a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d178      	bne.n	8c54 <cbprintf_package_convert+0x1cc>
		out_len = (int)in_len;
    8b62:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8b64:	f1b9 0f00 	cmp.w	r9, #0
    8b68:	d14e      	bne.n	8c08 <cbprintf_package_convert+0x180>
	size_t strl_cnt = 0;
    8b6a:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    8b6c:	f01b 0f05 	tst.w	fp, #5
    8b70:	bf0c      	ite	eq
    8b72:	2302      	moveq	r3, #2
    8b74:	2301      	movne	r3, #1
    8b76:	627b      	str	r3, [r7, #36]	; 0x24
    8b78:	697b      	ldr	r3, [r7, #20]
    8b7a:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8b7e:	f00b 0302 	and.w	r3, fp, #2
    8b82:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    8b84:	45ca      	cmp	sl, r9
    8b86:	d0b9      	beq.n	8afc <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    8b88:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    8b8c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    8b90:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    8b94:	4b6f      	ldr	r3, [pc, #444]	; (8d54 <cbprintf_package_convert+0x2cc>)
    8b96:	4598      	cmp	r8, r3
    8b98:	d302      	bcc.n	8ba0 <cbprintf_package_convert+0x118>
    8b9a:	4b6f      	ldr	r3, [pc, #444]	; (8d58 <cbprintf_package_convert+0x2d0>)
    8b9c:	4598      	cmp	r8, r3
    8b9e:	d339      	bcc.n	8c14 <cbprintf_package_convert+0x18c>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8ba0:	693b      	ldr	r3, [r7, #16]
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d043      	beq.n	8c2e <cbprintf_package_convert+0x1a6>
    8ba6:	69f8      	ldr	r0, [r7, #28]
    8ba8:	f01f fd4f 	bl	2864a <is_ptr>
    8bac:	2800      	cmp	r0, #0
    8bae:	d03e      	beq.n	8c2e <cbprintf_package_convert+0x1a6>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    8bb0:	46e8      	mov	r8, sp
    8bb2:	b08a      	sub	sp, #40	; 0x28
    8bb4:	466a      	mov	r2, sp
    8bb6:	4b69      	ldr	r3, [pc, #420]	; (8d5c <cbprintf_package_convert+0x2d4>)
    8bb8:	6153      	str	r3, [r2, #20]
    8bba:	69fb      	ldr	r3, [r7, #28]
    8bbc:	e9c2 3106 	strd	r3, r1, [r2, #24]
    8bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
    8bc4:	8413      	strh	r3, [r2, #32]
    8bc6:	4b66      	ldr	r3, [pc, #408]	; (8d60 <cbprintf_package_convert+0x2d8>)
    8bc8:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    8bcc:	2300      	movs	r3, #0
    8bce:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    8bd2:	4864      	ldr	r0, [pc, #400]	; (8d64 <cbprintf_package_convert+0x2dc>)
    8bd4:	f001 ffc2 	bl	ab5c <z_impl_z_log_msg_static_create>
				out_len -= 2;
    8bd8:	3d02      	subs	r5, #2
    8bda:	46c5      	mov	sp, r8
				continue;
    8bdc:	e7d2      	b.n	8b84 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    8bde:	f818 2b01 	ldrb.w	r2, [r8], #1
    8be2:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8be4:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8be8:	f021 fc41 	bl	2a46e <strlen>
				if (strl && strl_cnt < strl_len) {
    8bec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8bf0:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8bf2:	b13a      	cbz	r2, 8c04 <cbprintf_package_convert+0x17c>
    8bf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    8bf8:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    8bfa:	bf3e      	ittt	cc
    8bfc:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    8bfe:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    8c02:	3601      	addcc	r6, #1
				out_len += len;
    8c04:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    8c06:	e799      	b.n	8b3c <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8c08:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    8c0c:	bf1c      	itt	ne
    8c0e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    8c10:	44ca      	addne	sl, r9
    8c12:	e7ab      	b.n	8b6c <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8c14:	693b      	ldr	r3, [r7, #16]
    8c16:	b123      	cbz	r3, 8c22 <cbprintf_package_convert+0x19a>
    8c18:	69f8      	ldr	r0, [r7, #28]
    8c1a:	f01f fd16 	bl	2864a <is_ptr>
    8c1e:	2800      	cmp	r0, #0
    8c20:	d1c6      	bne.n	8bb0 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8c22:	f01b 0f01 	tst.w	fp, #1
    8c26:	d105      	bne.n	8c34 <cbprintf_package_convert+0x1ac>
					out_len -= drop_ro_str_pos ? 2 : 1;
    8c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c2a:	1aed      	subs	r5, r5, r3
    8c2c:	e7aa      	b.n	8b84 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8c2e:	6a3b      	ldr	r3, [r7, #32]
    8c30:	2b00      	cmp	r3, #0
    8c32:	d0a7      	beq.n	8b84 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    8c34:	4640      	mov	r0, r8
    8c36:	f021 fc1a 	bl	2a46e <strlen>
				if (strl && strl_cnt < strl_len) {
    8c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8c3c:	b143      	cbz	r3, 8c50 <cbprintf_package_convert+0x1c8>
    8c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    8c42:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    8c44:	bf3f      	itttt	cc
    8c46:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    8c48:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    8c4a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    8c4e:	3601      	addcc	r6, #1
				out_len += (len - 1);
    8c50:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    8c52:	e797      	b.n	8b84 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8c54:	f1b9 0f00 	cmp.w	r9, #0
    8c58:	d074      	beq.n	8d44 <cbprintf_package_convert+0x2bc>
    8c5a:	f01b 0604 	ands.w	r6, fp, #4
    8c5e:	f000 8083 	beq.w	8d68 <cbprintf_package_convert+0x2e0>
		keep_cnt = ros_nbr;
    8c62:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    8c64:	2600      	movs	r6, #0
		dst = keep_str_pos;
    8c66:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    8c6a:	464a      	mov	r2, r9
    8c6c:	4651      	mov	r1, sl
    8c6e:	f021 fc54 	bl	2a51a <memcpy>
	str_pos += ros_nbr;
    8c72:	697b      	ldr	r3, [r7, #20]
    8c74:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    8c76:	005b      	lsls	r3, r3, #1
    8c78:	60bb      	str	r3, [r7, #8]
    8c7a:	697b      	ldr	r3, [r7, #20]
    8c7c:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    8c80:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8c82:	f00b 0302 	and.w	r3, fp, #2
    8c86:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    8c88:	697b      	ldr	r3, [r7, #20]
    8c8a:	459a      	cmp	sl, r3
    8c8c:	d16e      	bne.n	8d6c <cbprintf_package_convert+0x2e4>
	out_desc.len = in_desc->len;
    8c8e:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8c90:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    8c94:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8c96:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8c98:	bf18      	it	ne
    8c9a:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8c9c:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8ca0:	bf08      	it	eq
    8ca2:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8ca6:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8caa:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8cac:	f040 80dd 	bne.w	8e6a <cbprintf_package_convert+0x3e2>
    8cb0:	f01b 0f04 	tst.w	fp, #4
    8cb4:	bf14      	ite	ne
    8cb6:	4640      	movne	r0, r8
    8cb8:	2000      	moveq	r0, #0
    8cba:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    8cbc:	78a3      	ldrb	r3, [r4, #2]
    8cbe:	f894 b003 	ldrb.w	fp, [r4, #3]
    8cc2:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    8cc4:	7062      	strb	r2, [r4, #1]
    8cc6:	70a0      	strb	r0, [r4, #2]
    8cc8:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    8cca:	4620      	mov	r0, r4
    8ccc:	69ba      	ldr	r2, [r7, #24]
    8cce:	68f9      	ldr	r1, [r7, #12]
    8cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cd2:	4798      	blx	r3
	if (rv < 0) {
    8cd4:	1e05      	subs	r5, r0, #0
    8cd6:	f6ff af11 	blt.w	8afc <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    8cda:	697b      	ldr	r3, [r7, #20]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8cdc:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    8cde:	7023      	strb	r3, [r4, #0]
    8ce0:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8ce2:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    8ce4:	7063      	strb	r3, [r4, #1]
    8ce6:	69fb      	ldr	r3, [r7, #28]
    8ce8:	f884 b003 	strb.w	fp, [r4, #3]
    8cec:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8cee:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cf4:	4798      	blx	r3
	if (rv < 0) {
    8cf6:	f1b0 0800 	subs.w	r8, r0, #0
    8cfa:	f2c0 80e3 	blt.w	8ec4 <cbprintf_package_convert+0x43c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8cfe:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    8d00:	4650      	mov	r0, sl
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8d02:	eba3 0109 	sub.w	r1, r3, r9
    8d06:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    8d08:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8d0a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    8d0c:	68bb      	ldr	r3, [r7, #8]
    8d0e:	1ac9      	subs	r1, r1, r3
    8d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d12:	4798      	blx	r3
	if (rv < 0) {
    8d14:	2800      	cmp	r0, #0
    8d16:	f2c0 80d7 	blt.w	8ec8 <cbprintf_package_convert+0x440>
	for (int i = 0; i < scpy_cnt; i++) {
    8d1a:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    8d1e:	44a8      	add	r8, r5
	out_len += rv;
    8d20:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    8d24:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    8d28:	45b3      	cmp	fp, r6
    8d2a:	f2c0 80a0 	blt.w	8e6e <cbprintf_package_convert+0x3e6>
	(void)cb(NULL, 0, ctx);
    8d2e:	2100      	movs	r1, #0
    8d30:	69ba      	ldr	r2, [r7, #24]
    8d32:	4608      	mov	r0, r1
    8d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d36:	4798      	blx	r3
	return out_len;
    8d38:	e6e0      	b.n	8afc <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    8d3a:	f04f 0800 	mov.w	r8, #0
    8d3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
    8d42:	e792      	b.n	8c6a <cbprintf_package_convert+0x1e2>
		scpy_cnt = 0;
    8d44:	464e      	mov	r6, r9
		keep_cnt = 0;
    8d46:	46c8      	mov	r8, r9
    8d48:	e793      	b.n	8c72 <cbprintf_package_convert+0x1ea>
    8d4a:	bf00      	nop
    8d4c:	00030d77 	.word	0x00030d77
    8d50:	00030da5 	.word	0x00030da5
    8d54:	0002f764 	.word	0x0002f764
    8d58:	000354d8 	.word	0x000354d8
    8d5c:	00030dbd 	.word	0x00030dbd
    8d60:	01000004 	.word	0x01000004
    8d64:	0002fd44 	.word	0x0002fd44
    8d68:	46b0      	mov	r8, r6
    8d6a:	e782      	b.n	8c72 <cbprintf_package_convert+0x1ea>
		uint8_t arg_idx = *str_pos++;
    8d6c:	f81a 1b02 	ldrb.w	r1, [sl], #2
    8d70:	4b56      	ldr	r3, [pc, #344]	; (8ecc <cbprintf_package_convert+0x444>)
		uint8_t arg_pos = *str_pos++;
    8d72:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    8d76:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    8d7a:	429a      	cmp	r2, r3
    8d7c:	d302      	bcc.n	8d84 <cbprintf_package_convert+0x2fc>
    8d7e:	4b54      	ldr	r3, [pc, #336]	; (8ed0 <cbprintf_package_convert+0x448>)
    8d80:	429a      	cmp	r2, r3
    8d82:	d315      	bcc.n	8db0 <cbprintf_package_convert+0x328>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8d84:	693b      	ldr	r3, [r7, #16]
    8d86:	b12b      	cbz	r3, 8d94 <cbprintf_package_convert+0x30c>
    8d88:	69f8      	ldr	r0, [r7, #28]
    8d8a:	f01f fc5e 	bl	2864a <is_ptr>
    8d8e:	2800      	cmp	r0, #0
    8d90:	f47f af7a 	bne.w	8c88 <cbprintf_package_convert+0x200>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	2b00      	cmp	r3, #0
    8d98:	d047      	beq.n	8e2a <cbprintf_package_convert+0x3a2>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8d9a:	2e0f      	cmp	r6, #15
    8d9c:	d93b      	bls.n	8e16 <cbprintf_package_convert+0x38e>
    8d9e:	494d      	ldr	r1, [pc, #308]	; (8ed4 <cbprintf_package_convert+0x44c>)
    8da0:	f44f 6289 	mov.w	r2, #1096	; 0x448
    8da4:	484c      	ldr	r0, [pc, #304]	; (8ed8 <cbprintf_package_convert+0x450>)
    8da6:	f01f ff0d 	bl	28bc4 <assert_print>
    8daa:	f44f 6189 	mov.w	r1, #1096	; 0x448
    8dae:	e67e      	b.n	8aae <cbprintf_package_convert+0x26>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8db0:	693b      	ldr	r3, [r7, #16]
    8db2:	b12b      	cbz	r3, 8dc0 <cbprintf_package_convert+0x338>
    8db4:	69f8      	ldr	r0, [r7, #28]
    8db6:	f01f fc48 	bl	2864a <is_ptr>
    8dba:	2800      	cmp	r0, #0
    8dbc:	f47f af64 	bne.w	8c88 <cbprintf_package_convert+0x200>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8dc0:	f01b 0f01 	tst.w	fp, #1
    8dc4:	d00a      	beq.n	8ddc <cbprintf_package_convert+0x354>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    8dc6:	2e0f      	cmp	r6, #15
    8dc8:	d925      	bls.n	8e16 <cbprintf_package_convert+0x38e>
    8dca:	4942      	ldr	r1, [pc, #264]	; (8ed4 <cbprintf_package_convert+0x44c>)
    8dcc:	f240 423e 	movw	r2, #1086	; 0x43e
    8dd0:	4841      	ldr	r0, [pc, #260]	; (8ed8 <cbprintf_package_convert+0x450>)
    8dd2:	f01f fef7 	bl	28bc4 <assert_print>
    8dd6:	f240 413e 	movw	r1, #1086	; 0x43e
    8dda:	e668      	b.n	8aae <cbprintf_package_convert+0x26>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8ddc:	f01b 0f04 	tst.w	fp, #4
    8de0:	f43f af52 	beq.w	8c88 <cbprintf_package_convert+0x200>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    8de4:	f1b8 0f0f 	cmp.w	r8, #15
    8de8:	d908      	bls.n	8dfc <cbprintf_package_convert+0x374>
    8dea:	493a      	ldr	r1, [pc, #232]	; (8ed4 <cbprintf_package_convert+0x44c>)
    8dec:	f240 4241 	movw	r2, #1089	; 0x441
    8df0:	4839      	ldr	r0, [pc, #228]	; (8ed8 <cbprintf_package_convert+0x450>)
    8df2:	f01f fee7 	bl	28bc4 <assert_print>
    8df6:	f240 4141 	movw	r1, #1089	; 0x441
    8dfa:	e658      	b.n	8aae <cbprintf_package_convert+0x26>
				keep_str_pos[keep_cnt++] = arg_pos;
    8dfc:	f108 0328 	add.w	r3, r8, #40	; 0x28
    8e00:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8e04:	f108 0201 	add.w	r2, r8, #1
    8e08:	eb03 0801 	add.w	r8, r3, r1
    8e0c:	f808 5c10 	strb.w	r5, [r8, #-16]
    8e10:	fa5f f882 	uxtb.w	r8, r2
    8e14:	e738      	b.n	8c88 <cbprintf_package_convert+0x200>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    8e16:	f106 0328 	add.w	r3, r6, #40	; 0x28
    8e1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8e1e:	1c72      	adds	r2, r6, #1
    8e20:	185e      	adds	r6, r3, r1
    8e22:	f806 5c20 	strb.w	r5, [r6, #-32]
    8e26:	b2d6      	uxtb	r6, r2
    8e28:	e72e      	b.n	8c88 <cbprintf_package_convert+0x200>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    8e2a:	f1b8 0f0f 	cmp.w	r8, #15
    8e2e:	d908      	bls.n	8e42 <cbprintf_package_convert+0x3ba>
    8e30:	4928      	ldr	r1, [pc, #160]	; (8ed4 <cbprintf_package_convert+0x44c>)
    8e32:	f240 424b 	movw	r2, #1099	; 0x44b
    8e36:	4828      	ldr	r0, [pc, #160]	; (8ed8 <cbprintf_package_convert+0x450>)
    8e38:	f01f fec4 	bl	28bc4 <assert_print>
    8e3c:	f240 414b 	movw	r1, #1099	; 0x44b
    8e40:	e635      	b.n	8aae <cbprintf_package_convert+0x26>
				keep_str_pos[keep_cnt++] = arg_idx;
    8e42:	f108 0328 	add.w	r3, r8, #40	; 0x28
    8e46:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8e4a:	f108 0201 	add.w	r2, r8, #1
    8e4e:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
    8e50:	f107 0350 	add.w	r3, r7, #80	; 0x50
    8e54:	f108 0802 	add.w	r8, r8, #2
    8e58:	fa53 f282 	uxtab	r2, r3, r2
				keep_str_pos[keep_cnt++] = arg_idx;
    8e5c:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    8e60:	fa5f f888 	uxtb.w	r8, r8
    8e64:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    8e68:	e70e      	b.n	8c88 <cbprintf_package_convert+0x200>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8e6a:	2000      	movs	r0, #0
    8e6c:	e725      	b.n	8cba <cbprintf_package_convert+0x232>
		uint8_t loc = cpy_str_pos[i];
    8e6e:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    8e72:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    8e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    8e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8e7c:	b1fb      	cbz	r3, 8ebe <cbprintf_package_convert+0x436>
    8e7e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    8e82:	2101      	movs	r1, #1
    8e84:	69ba      	ldr	r2, [r7, #24]
    8e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e88:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    8e8c:	4798      	blx	r3
		if (rv < 0) {
    8e8e:	2800      	cmp	r0, #0
    8e90:	db1a      	blt.n	8ec8 <cbprintf_package_convert+0x440>
		out_len += rv;
    8e92:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    8e94:	f1b8 0f00 	cmp.w	r8, #0
    8e98:	d106      	bne.n	8ea8 <cbprintf_package_convert+0x420>
    8e9a:	4648      	mov	r0, r9
    8e9c:	f021 fae7 	bl	2a46e <strlen>
    8ea0:	f100 0801 	add.w	r8, r0, #1
    8ea4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    8ea8:	4641      	mov	r1, r8
    8eaa:	4648      	mov	r0, r9
    8eac:	69ba      	ldr	r2, [r7, #24]
    8eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8eb0:	4798      	blx	r3
		if (rv < 0) {
    8eb2:	2800      	cmp	r0, #0
    8eb4:	db08      	blt.n	8ec8 <cbprintf_package_convert+0x440>
		out_len += rv;
    8eb6:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    8eb8:	f10b 0b01 	add.w	fp, fp, #1
    8ebc:	e734      	b.n	8d28 <cbprintf_package_convert+0x2a0>
		uint16_t str_len = strl ? strl[i] : 0;
    8ebe:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    8ec2:	e7de      	b.n	8e82 <cbprintf_package_convert+0x3fa>
    8ec4:	4645      	mov	r5, r8
    8ec6:	e619      	b.n	8afc <cbprintf_package_convert+0x74>
    8ec8:	4605      	mov	r5, r0
    8eca:	e617      	b.n	8afc <cbprintf_package_convert+0x74>
    8ecc:	0002f764 	.word	0x0002f764
    8ed0:	000354d8 	.word	0x000354d8
    8ed4:	00030d77 	.word	0x00030d77
    8ed8:	00030da5 	.word	0x00030da5

00008edc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    8edc:	4b01      	ldr	r3, [pc, #4]	; (8ee4 <__printk_hook_install+0x8>)
    8ede:	6018      	str	r0, [r3, #0]
}
    8ee0:	4770      	bx	lr
    8ee2:	bf00      	nop
    8ee4:	20008674 	.word	0x20008674

00008ee8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    8ee8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    8eea:	2500      	movs	r5, #0
{
    8eec:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    8eee:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    8ef2:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8ef4:	9500      	str	r5, [sp, #0]
    8ef6:	a903      	add	r1, sp, #12
    8ef8:	4805      	ldr	r0, [pc, #20]	; (8f10 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    8efa:	9505      	str	r5, [sp, #20]
    8efc:	f000 fbaa 	bl	9654 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    8f00:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    8f04:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    8f06:	bfb8      	it	lt
    8f08:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    8f0a:	b007      	add	sp, #28
    8f0c:	bd30      	pop	{r4, r5, pc}
    8f0e:	bf00      	nop
    8f10:	0002878b 	.word	0x0002878b

00008f14 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    8f14:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
    8f16:	b351      	cbz	r1, 8f6e <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    8f18:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8f1a:	1f0b      	subs	r3, r1, #4
    8f1c:	1a9b      	subs	r3, r3, r2
    8f1e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    8f20:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8f24:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8f26:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    8f28:	07e0      	lsls	r0, r4, #31
    8f2a:	d408      	bmi.n	8f3e <sys_heap_free+0x2a>
    8f2c:	4910      	ldr	r1, [pc, #64]	; (8f70 <sys_heap_free+0x5c>)
    8f2e:	22af      	movs	r2, #175	; 0xaf
    8f30:	4810      	ldr	r0, [pc, #64]	; (8f74 <sys_heap_free+0x60>)
    8f32:	f01f fe47 	bl	28bc4 <assert_print>
    8f36:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    8f38:	480d      	ldr	r0, [pc, #52]	; (8f70 <sys_heap_free+0x5c>)
    8f3a:	f01f fe3c 	bl	28bb6 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    8f3e:	4610      	mov	r0, r2
    8f40:	f01f fc5c 	bl	287fc <chunk_size>
    8f44:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    8f46:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8f4a:	1b40      	subs	r0, r0, r5
    8f4c:	4281      	cmp	r1, r0
    8f4e:	d006      	beq.n	8f5e <sys_heap_free+0x4a>
    8f50:	4907      	ldr	r1, [pc, #28]	; (8f70 <sys_heap_free+0x5c>)
    8f52:	22b7      	movs	r2, #183	; 0xb7
    8f54:	4807      	ldr	r0, [pc, #28]	; (8f74 <sys_heap_free+0x60>)
    8f56:	f01f fe35 	bl	28bc4 <assert_print>
    8f5a:	21b7      	movs	r1, #183	; 0xb7
    8f5c:	e7ec      	b.n	8f38 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    8f5e:	f024 0401 	bic.w	r4, r4, #1
    8f62:	805c      	strh	r4, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    8f64:	4610      	mov	r0, r2
}
    8f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
    8f6a:	f01f bd04 	b.w	28976 <free_chunk>
}
    8f6e:	bd38      	pop	{r3, r4, r5, pc}
    8f70:	00030e71 	.word	0x00030e71
    8f74:	00030da5 	.word	0x00030da5

00008f78 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f7c:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    8f7e:	400b      	ands	r3, r1
{
    8f80:	460f      	mov	r7, r1
    8f82:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    8f84:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    8f86:	d010      	beq.n	8faa <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    8f88:	f1c1 0900 	rsb	r9, r1, #0
    8f8c:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    8f90:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8f92:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    8f94:	2a04      	cmp	r2, #4
    8f96:	bf28      	it	cs
    8f98:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8f9a:	4219      	tst	r1, r3
    8f9c:	d10c      	bne.n	8fb8 <sys_heap_aligned_alloc+0x40>
    8f9e:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    8fa0:	b9c4      	cbnz	r4, 8fd4 <sys_heap_aligned_alloc+0x5c>
		return NULL;
    8fa2:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    8fa4:	4628      	mov	r0, r5
    8fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    8faa:	2904      	cmp	r1, #4
    8fac:	d80f      	bhi.n	8fce <sys_heap_aligned_alloc+0x56>
}
    8fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    8fb2:	4611      	mov	r1, r2
    8fb4:	f01f bd10 	b.w	289d8 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    8fb8:	492a      	ldr	r1, [pc, #168]	; (9064 <sys_heap_aligned_alloc+0xec>)
    8fba:	482b      	ldr	r0, [pc, #172]	; (9068 <sys_heap_aligned_alloc+0xf0>)
    8fbc:	f44f 72a2 	mov.w	r2, #324	; 0x144
    8fc0:	f01f fe00 	bl	28bc4 <assert_print>
    8fc4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8fc8:	4826      	ldr	r0, [pc, #152]	; (9064 <sys_heap_aligned_alloc+0xec>)
    8fca:	f01f fdf4 	bl	28bb6 <assert_post_action>
		rew = 0;
    8fce:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    8fd0:	2204      	movs	r2, #4
    8fd2:	e7e5      	b.n	8fa0 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    8fd4:	68b3      	ldr	r3, [r6, #8]
    8fd6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    8fda:	d9e2      	bls.n	8fa2 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8fdc:	f104 010b 	add.w	r1, r4, #11
    8fe0:	4439      	add	r1, r7
    8fe2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    8fe4:	4630      	mov	r0, r6
    8fe6:	08c9      	lsrs	r1, r1, #3
    8fe8:	f01f fc5e 	bl	288a8 <alloc_chunk>
	if (c0 == 0) {
    8fec:	4680      	mov	r8, r0
    8fee:	2800      	cmp	r0, #0
    8ff0:	d0d7      	beq.n	8fa2 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    8ff2:	f109 0504 	add.w	r5, r9, #4
    8ff6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    8ffa:	1e7b      	subs	r3, r7, #1
    8ffc:	4435      	add	r5, r6
    8ffe:	441d      	add	r5, r3
    9000:	427f      	negs	r7, r7
    9002:	403d      	ands	r5, r7
    9004:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9008:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    900a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    900c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    900e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9010:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9014:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9016:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    901a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    901e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9022:	d208      	bcs.n	9036 <sys_heap_aligned_alloc+0xbe>
		split_chunks(h, c0, c);
    9024:	4601      	mov	r1, r0
    9026:	463a      	mov	r2, r7
    9028:	4630      	mov	r0, r6
    902a:	f01f fc8a 	bl	28942 <split_chunks>
		free_list_add(h, c0);
    902e:	4641      	mov	r1, r8
    9030:	4630      	mov	r0, r6
    9032:	f01f fbe8 	bl	28806 <free_list_add>
	return c + chunk_size(h, c);
    9036:	4639      	mov	r1, r7
    9038:	4630      	mov	r0, r6
    903a:	f01f fbdf 	bl	287fc <chunk_size>
    903e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9040:	4284      	cmp	r4, r0
    9042:	d207      	bcs.n	9054 <sys_heap_aligned_alloc+0xdc>
		split_chunks(h, c, c_end);
    9044:	4630      	mov	r0, r6
    9046:	4622      	mov	r2, r4
    9048:	f01f fc7b 	bl	28942 <split_chunks>
		free_list_add(h, c_end);
    904c:	4621      	mov	r1, r4
    904e:	4630      	mov	r0, r6
    9050:	f01f fbd9 	bl	28806 <free_list_add>
	void *cmem = &buf[c];
    9054:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9058:	8873      	ldrh	r3, [r6, #2]
    905a:	f043 0301 	orr.w	r3, r3, #1
    905e:	8073      	strh	r3, [r6, #2]
    9060:	e7a0      	b.n	8fa4 <sys_heap_aligned_alloc+0x2c>
    9062:	bf00      	nop
    9064:	00030e71 	.word	0x00030e71
    9068:	00030da5 	.word	0x00030da5

0000906c <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    906c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    9070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9072:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    9074:	d30a      	bcc.n	908c <sys_heap_init+0x20>
    9076:	4932      	ldr	r1, [pc, #200]	; (9140 <sys_heap_init+0xd4>)
    9078:	f240 12eb 	movw	r2, #491	; 0x1eb
    907c:	4831      	ldr	r0, [pc, #196]	; (9144 <sys_heap_init+0xd8>)
    907e:	f01f fda1 	bl	28bc4 <assert_print>
    9082:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    9086:	482e      	ldr	r0, [pc, #184]	; (9140 <sys_heap_init+0xd4>)
    9088:	f01f fd95 	bl	28bb6 <assert_post_action>
    908c:	2a04      	cmp	r2, #4
    908e:	d808      	bhi.n	90a2 <sys_heap_init+0x36>
    9090:	492b      	ldr	r1, [pc, #172]	; (9140 <sys_heap_init+0xd4>)
    9092:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    9096:	482b      	ldr	r0, [pc, #172]	; (9144 <sys_heap_init+0xd8>)
    9098:	f01f fd94 	bl	28bc4 <assert_print>
    909c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    90a0:	e7f1      	b.n	9086 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
    90a2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    90a4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    90a6:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    90a8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    90ac:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    90b0:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    90b2:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    90b4:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    90b8:	d808      	bhi.n	90cc <sys_heap_init+0x60>
    90ba:	4921      	ldr	r1, [pc, #132]	; (9140 <sys_heap_init+0xd4>)
    90bc:	f240 12fb 	movw	r2, #507	; 0x1fb
    90c0:	4820      	ldr	r0, [pc, #128]	; (9144 <sys_heap_init+0xd8>)
    90c2:	f01f fd7f 	bl	28bc4 <assert_print>
    90c6:	f240 11fb 	movw	r1, #507	; 0x1fb
    90ca:	e7dc      	b.n	9086 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    90cc:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    90d0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    90d2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    90d4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    90d8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    90dc:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    90de:	3107      	adds	r1, #7
    90e0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    90e2:	1c4d      	adds	r5, r1, #1
    90e4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    90e6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    90e8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    90ea:	d908      	bls.n	90fe <sys_heap_init+0x92>
    90ec:	4914      	ldr	r1, [pc, #80]	; (9140 <sys_heap_init+0xd4>)
    90ee:	f44f 7203 	mov.w	r2, #524	; 0x20c
    90f2:	4814      	ldr	r0, [pc, #80]	; (9144 <sys_heap_init+0xd8>)
    90f4:	f01f fd66 	bl	28bc4 <assert_print>
    90f8:	f44f 7103 	mov.w	r1, #524	; 0x20c
    90fc:	e7c3      	b.n	9086 <sys_heap_init+0x1a>
    90fe:	f100 050c 	add.w	r5, r0, #12
    9102:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    9106:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    910a:	42b5      	cmp	r5, r6
    910c:	d1fb      	bne.n	9106 <sys_heap_init+0x9a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    910e:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9110:	f045 0501 	orr.w	r5, r5, #1
    9114:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    9116:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    9118:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    911c:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    911e:	8004      	strh	r4, [r0, #0]
    9120:	8077      	strh	r7, [r6, #2]
    9122:	1886      	adds	r6, r0, r2
    9124:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    9128:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    912c:	8074      	strh	r4, [r6, #2]
    912e:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9130:	885a      	ldrh	r2, [r3, #2]
    9132:	f042 0201 	orr.w	r2, r2, #1
    9136:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    9138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    913c:	f01f bb63 	b.w	28806 <free_list_add>
    9140:	00030e71 	.word	0x00030e71
    9144:	00030da5 	.word	0x00030da5

00009148 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    914c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    914e:	8ba3      	ldrh	r3, [r4, #28]
{
    9150:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9152:	0719      	lsls	r1, r3, #28
{
    9154:	4616      	mov	r6, r2
	if (processing) {
    9156:	d412      	bmi.n	917e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    9158:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    915a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    915e:	d162      	bne.n	9226 <process_event+0xde>
			evt = process_recheck(mgr);
    9160:	4620      	mov	r0, r4
    9162:	f01f fc62 	bl	28a2a <process_recheck>
		}

		if (evt == EVT_NOP) {
    9166:	b188      	cbz	r0, 918c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    9168:	3801      	subs	r0, #1
    916a:	2804      	cmp	r0, #4
    916c:	f200 8121 	bhi.w	93b2 <process_event+0x26a>
    9170:	e8df f010 	tbh	[pc, r0, lsl #1]
    9174:	011f0059 	.word	0x011f0059
    9178:	00c4007e 	.word	0x00c4007e
    917c:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
    917e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9180:	bf0c      	ite	eq
    9182:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9186:	f043 0120 	orrne.w	r1, r3, #32
    918a:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    918c:	f104 0014 	add.w	r0, r4, #20
    9190:	f01c fb58 	bl	25844 <z_spin_unlock_valid>
    9194:	2800      	cmp	r0, #0
    9196:	f000 80a9 	beq.w	92ec <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    919a:	f386 8811 	msr	BASEPRI, r6
    919e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    91a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91a6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    91aa:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    91ac:	2801      	cmp	r0, #1
    91ae:	d81e      	bhi.n	91ee <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    91b0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    91b2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    91b4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    91b6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    91ba:	d114      	bne.n	91e6 <process_event+0x9e>
		*clients = mgr->clients;
    91bc:	463a      	mov	r2, r7
    91be:	e003      	b.n	91c8 <process_event+0x80>
				mgr->refs += 1U;
    91c0:	8be0      	ldrh	r0, [r4, #30]
    91c2:	3001      	adds	r0, #1
    91c4:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    91c6:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    91c8:	2a00      	cmp	r2, #0
    91ca:	d1f9      	bne.n	91c0 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91cc:	f023 0307 	bic.w	r3, r3, #7
    91d0:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    91d4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    91d6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    91d8:	f01f fc27 	bl	28a2a <process_recheck>
    91dc:	b390      	cbz	r0, 9244 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    91de:	f042 0220 	orr.w	r2, r2, #32
    91e2:	83a2      	strh	r2, [r4, #28]
    91e4:	e02e      	b.n	9244 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91e6:	f023 0307 	bic.w	r3, r3, #7
    91ea:	b29a      	uxth	r2, r3
}
    91ec:	e7f2      	b.n	91d4 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
    91ee:	2a04      	cmp	r2, #4
    91f0:	d133      	bne.n	925a <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91f2:	f023 0307 	bic.w	r3, r3, #7
    91f6:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    91f8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    91fa:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    91fc:	f01f fc15 	bl	28a2a <process_recheck>
    9200:	b110      	cbz	r0, 9208 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9202:	f042 0220 	orr.w	r2, r2, #32
    9206:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9208:	8ba3      	ldrh	r3, [r4, #28]
    920a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    920e:	4589      	cmp	r9, r1
    9210:	f040 80d8 	bne.w	93c4 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9214:	8ba1      	ldrh	r1, [r4, #28]
    9216:	06ca      	lsls	r2, r1, #27
    9218:	f140 811e 	bpl.w	9458 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    921c:	f021 0310 	bic.w	r3, r1, #16
    9220:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9222:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    9226:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    922a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    922c:	f1b8 0f00 	cmp.w	r8, #0
    9230:	dab9      	bge.n	91a6 <process_event+0x5e>
	list->head = NULL;
    9232:	2200      	movs	r2, #0
		*clients = mgr->clients;
    9234:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9236:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    923a:	e9c4 2200 	strd	r2, r2, [r4]
    923e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9242:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9244:	8ba3      	ldrh	r3, [r4, #28]
    9246:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    924a:	4589      	cmp	r9, r1
    924c:	f040 80bb 	bne.w	93c6 <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
    9250:	2f00      	cmp	r7, #0
    9252:	d0df      	beq.n	9214 <process_event+0xcc>
    9254:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9256:	46aa      	mov	sl, r5
    9258:	e03e      	b.n	92d8 <process_event+0x190>
		__ASSERT_NO_MSG(false);
    925a:	4984      	ldr	r1, [pc, #528]	; (946c <process_event+0x324>)
    925c:	f240 121b 	movw	r2, #283	; 0x11b
    9260:	4883      	ldr	r0, [pc, #524]	; (9470 <process_event+0x328>)
    9262:	f01f fcaf 	bl	28bc4 <assert_print>
    9266:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    926a:	4880      	ldr	r0, [pc, #512]	; (946c <process_event+0x324>)
    926c:	f01f fca3 	bl	28bb6 <assert_post_action>
    9270:	b141      	cbz	r1, 9284 <process_event+0x13c>
    9272:	497e      	ldr	r1, [pc, #504]	; (946c <process_event+0x324>)
    9274:	f44f 72ab 	mov.w	r2, #342	; 0x156
    9278:	487d      	ldr	r0, [pc, #500]	; (9470 <process_event+0x328>)
    927a:	f01f fca3 	bl	28bc4 <assert_print>
    927e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    9282:	e7f2      	b.n	926a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    9284:	6823      	ldr	r3, [r4, #0]
    9286:	b943      	cbnz	r3, 929a <process_event+0x152>
    9288:	4978      	ldr	r1, [pc, #480]	; (946c <process_event+0x324>)
    928a:	f240 1257 	movw	r2, #343	; 0x157
    928e:	4878      	ldr	r0, [pc, #480]	; (9470 <process_event+0x328>)
    9290:	f01f fc98 	bl	28bc4 <assert_print>
    9294:	f240 1157 	movw	r1, #343	; 0x157
    9298:	e7e7      	b.n	926a <process_event+0x122>
			transit = mgr->transitions->start;
    929a:	6923      	ldr	r3, [r4, #16]
    929c:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    929e:	b945      	cbnz	r5, 92b2 <process_event+0x16a>
    92a0:	4972      	ldr	r1, [pc, #456]	; (946c <process_event+0x324>)
    92a2:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    92a6:	4872      	ldr	r0, [pc, #456]	; (9470 <process_event+0x328>)
    92a8:	f01f fc8c 	bl	28bc4 <assert_print>
    92ac:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    92b0:	e7db      	b.n	926a <process_event+0x122>
	mgr->flags = (state & ONOFF_STATE_MASK)
    92b2:	460f      	mov	r7, r1
		res = 0;
    92b4:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92b6:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    92ba:	8ba3      	ldrh	r3, [r4, #28]
    92bc:	f023 0307 	bic.w	r3, r3, #7
    92c0:	f043 0306 	orr.w	r3, r3, #6
    92c4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    92c6:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    92c8:	68a2      	ldr	r2, [r4, #8]
    92ca:	2a00      	cmp	r2, #0
    92cc:	d17d      	bne.n	93ca <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
    92ce:	2f00      	cmp	r7, #0
    92d0:	d17e      	bne.n	93d0 <process_event+0x288>
		    || (transit != NULL)) {
    92d2:	2d00      	cmp	r5, #0
    92d4:	d09e      	beq.n	9214 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    92d6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    92d8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    92dc:	f104 0b14 	add.w	fp, r4, #20
    92e0:	4658      	mov	r0, fp
			mgr->flags = flags;
    92e2:	83a3      	strh	r3, [r4, #28]
    92e4:	f01c faae 	bl	25844 <z_spin_unlock_valid>
    92e8:	2800      	cmp	r0, #0
    92ea:	d173      	bne.n	93d4 <process_event+0x28c>
    92ec:	4961      	ldr	r1, [pc, #388]	; (9474 <process_event+0x32c>)
    92ee:	22c2      	movs	r2, #194	; 0xc2
    92f0:	485f      	ldr	r0, [pc, #380]	; (9470 <process_event+0x328>)
    92f2:	f01f fc67 	bl	28bc4 <assert_print>
    92f6:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92f8:	485e      	ldr	r0, [pc, #376]	; (9474 <process_event+0x32c>)
    92fa:	e7b7      	b.n	926c <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    92fc:	2902      	cmp	r1, #2
    92fe:	d008      	beq.n	9312 <process_event+0x1ca>
    9300:	495a      	ldr	r1, [pc, #360]	; (946c <process_event+0x324>)
    9302:	f240 125d 	movw	r2, #349	; 0x15d
    9306:	485a      	ldr	r0, [pc, #360]	; (9470 <process_event+0x328>)
    9308:	f01f fc5c 	bl	28bc4 <assert_print>
    930c:	f240 115d 	movw	r1, #349	; 0x15d
    9310:	e7ab      	b.n	926a <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
    9312:	8be7      	ldrh	r7, [r4, #30]
    9314:	b147      	cbz	r7, 9328 <process_event+0x1e0>
    9316:	4955      	ldr	r1, [pc, #340]	; (946c <process_event+0x324>)
    9318:	f44f 72af 	mov.w	r2, #350	; 0x15e
    931c:	4854      	ldr	r0, [pc, #336]	; (9470 <process_event+0x328>)
    931e:	f01f fc51 	bl	28bc4 <assert_print>
    9322:	f44f 71af 	mov.w	r1, #350	; 0x15e
    9326:	e7a0      	b.n	926a <process_event+0x122>
			transit = mgr->transitions->stop;
    9328:	6923      	ldr	r3, [r4, #16]
    932a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    932c:	b945      	cbnz	r5, 9340 <process_event+0x1f8>
    932e:	494f      	ldr	r1, [pc, #316]	; (946c <process_event+0x324>)
    9330:	f240 1261 	movw	r2, #353	; 0x161
    9334:	484e      	ldr	r0, [pc, #312]	; (9470 <process_event+0x328>)
    9336:	f01f fc45 	bl	28bc4 <assert_print>
    933a:	f240 1161 	movw	r1, #353	; 0x161
    933e:	e794      	b.n	926a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9340:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    9342:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9344:	f023 0307 	bic.w	r3, r3, #7
    9348:	f043 0304 	orr.w	r3, r3, #4
    934c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    934e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9352:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9354:	e7b8      	b.n	92c8 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9356:	2901      	cmp	r1, #1
    9358:	d008      	beq.n	936c <process_event+0x224>
    935a:	4944      	ldr	r1, [pc, #272]	; (946c <process_event+0x324>)
    935c:	f44f 72b2 	mov.w	r2, #356	; 0x164
    9360:	4843      	ldr	r0, [pc, #268]	; (9470 <process_event+0x328>)
    9362:	f01f fc2f 	bl	28bc4 <assert_print>
    9366:	f44f 71b2 	mov.w	r1, #356	; 0x164
    936a:	e77e      	b.n	926a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    936c:	6823      	ldr	r3, [r4, #0]
    936e:	b943      	cbnz	r3, 9382 <process_event+0x23a>
    9370:	493e      	ldr	r1, [pc, #248]	; (946c <process_event+0x324>)
    9372:	f240 1265 	movw	r2, #357	; 0x165
    9376:	483e      	ldr	r0, [pc, #248]	; (9470 <process_event+0x328>)
    9378:	f01f fc24 	bl	28bc4 <assert_print>
    937c:	f240 1165 	movw	r1, #357	; 0x165
    9380:	e773      	b.n	926a <process_event+0x122>
			transit = mgr->transitions->reset;
    9382:	6923      	ldr	r3, [r4, #16]
    9384:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    9386:	b945      	cbnz	r5, 939a <process_event+0x252>
    9388:	4938      	ldr	r1, [pc, #224]	; (946c <process_event+0x324>)
    938a:	f44f 72b4 	mov.w	r2, #360	; 0x168
    938e:	4838      	ldr	r0, [pc, #224]	; (9470 <process_event+0x328>)
    9390:	f01f fc18 	bl	28bc4 <assert_print>
    9394:	f44f 71b4 	mov.w	r1, #360	; 0x168
    9398:	e767      	b.n	926a <process_event+0x122>
	mgr->flags = (state & ONOFF_STATE_MASK)
    939a:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    939c:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    939e:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    93a0:	f023 0307 	bic.w	r3, r3, #7
    93a4:	f043 0305 	orr.w	r3, r3, #5
    93a8:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    93aa:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    93ae:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    93b0:	e78a      	b.n	92c8 <process_event+0x180>
			__ASSERT_NO_MSG(false);
    93b2:	492e      	ldr	r1, [pc, #184]	; (946c <process_event+0x324>)
    93b4:	f240 126b 	movw	r2, #363	; 0x16b
    93b8:	482d      	ldr	r0, [pc, #180]	; (9470 <process_event+0x328>)
    93ba:	f01f fc03 	bl	28bc4 <assert_print>
    93be:	f240 116b 	movw	r1, #363	; 0x16b
    93c2:	e752      	b.n	926a <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
    93c4:	2700      	movs	r7, #0
    93c6:	2500      	movs	r5, #0
    93c8:	e77e      	b.n	92c8 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    93ca:	f04f 0a01 	mov.w	sl, #1
    93ce:	e783      	b.n	92d8 <process_event+0x190>
    93d0:	4692      	mov	sl, r2
    93d2:	e781      	b.n	92d8 <process_event+0x190>
    93d4:	f386 8811 	msr	BASEPRI, r6
    93d8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    93dc:	f1ba 0f00 	cmp.w	sl, #0
    93e0:	d117      	bne.n	9412 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
    93e2:	bb4f      	cbnz	r7, 9438 <process_event+0x2f0>
			if (transit != NULL) {
    93e4:	b115      	cbz	r5, 93ec <process_event+0x2a4>
				transit(mgr, transition_complete);
    93e6:	4620      	mov	r0, r4
    93e8:	4923      	ldr	r1, [pc, #140]	; (9478 <process_event+0x330>)
    93ea:	47a8      	blx	r5
	__asm__ volatile(
    93ec:	f04f 0320 	mov.w	r3, #32
    93f0:	f3ef 8611 	mrs	r6, BASEPRI
    93f4:	f383 8812 	msr	BASEPRI_MAX, r3
    93f8:	f3bf 8f6f 	isb	sy
    93fc:	4658      	mov	r0, fp
    93fe:	f01c fa13 	bl	25828 <z_spin_lock_valid>
    9402:	bb08      	cbnz	r0, 9448 <process_event+0x300>
    9404:	491b      	ldr	r1, [pc, #108]	; (9474 <process_event+0x32c>)
    9406:	2294      	movs	r2, #148	; 0x94
    9408:	4819      	ldr	r0, [pc, #100]	; (9470 <process_event+0x328>)
    940a:	f01f fbdb 	bl	28bc4 <assert_print>
    940e:	2194      	movs	r1, #148	; 0x94
    9410:	e772      	b.n	92f8 <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9412:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9414:	2900      	cmp	r1, #0
    9416:	d0e4      	beq.n	93e2 <process_event+0x29a>
	return node->next;
    9418:	680e      	ldr	r6, [r1, #0]
    941a:	2900      	cmp	r1, #0
    941c:	d0e1      	beq.n	93e2 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
    941e:	4643      	mov	r3, r8
    9420:	464a      	mov	r2, r9
    9422:	4620      	mov	r0, r4
    9424:	f8d1 a004 	ldr.w	sl, [r1, #4]
    9428:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    942a:	b11e      	cbz	r6, 9434 <process_event+0x2ec>
    942c:	6833      	ldr	r3, [r6, #0]
    942e:	4631      	mov	r1, r6
    9430:	461e      	mov	r6, r3
    9432:	e7f2      	b.n	941a <process_event+0x2d2>
    9434:	4633      	mov	r3, r6
    9436:	e7fa      	b.n	942e <process_event+0x2e6>
    9438:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    943a:	4643      	mov	r3, r8
    943c:	464a      	mov	r2, r9
    943e:	4620      	mov	r0, r4
    9440:	683f      	ldr	r7, [r7, #0]
    9442:	f01f fb1e 	bl	28a82 <notify_one>
    9446:	e7cc      	b.n	93e2 <process_event+0x29a>
	z_spin_lock_set_owner(l);
    9448:	4658      	mov	r0, fp
    944a:	f01c fa09 	bl	25860 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    944e:	8ba3      	ldrh	r3, [r4, #28]
    9450:	f023 0308 	bic.w	r3, r3, #8
    9454:	83a3      	strh	r3, [r4, #28]
    9456:	e6dd      	b.n	9214 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    9458:	068b      	lsls	r3, r1, #26
    945a:	f57f ae97 	bpl.w	918c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    945e:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9462:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    9464:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    9468:	e67a      	b.n	9160 <process_event+0x18>
    946a:	bf00      	nop
    946c:	00030e92 	.word	0x00030e92
    9470:	00030da5 	.word	0x00030da5
    9474:	00030eb4 	.word	0x00030eb4
    9478:	0000947d 	.word	0x0000947d

0000947c <transition_complete>:
{
    947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    947e:	4604      	mov	r4, r0
    9480:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    9482:	f100 0614 	add.w	r6, r0, #20
    9486:	f04f 0320 	mov.w	r3, #32
    948a:	f3ef 8711 	mrs	r7, BASEPRI
    948e:	f383 8812 	msr	BASEPRI_MAX, r3
    9492:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9496:	4630      	mov	r0, r6
    9498:	f01c f9c6 	bl	25828 <z_spin_lock_valid>
    949c:	b940      	cbnz	r0, 94b0 <transition_complete+0x34>
    949e:	490a      	ldr	r1, [pc, #40]	; (94c8 <transition_complete+0x4c>)
    94a0:	480a      	ldr	r0, [pc, #40]	; (94cc <transition_complete+0x50>)
    94a2:	2294      	movs	r2, #148	; 0x94
    94a4:	f01f fb8e 	bl	28bc4 <assert_print>
    94a8:	2194      	movs	r1, #148	; 0x94
    94aa:	4807      	ldr	r0, [pc, #28]	; (94c8 <transition_complete+0x4c>)
    94ac:	f01f fb83 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    94b0:	4630      	mov	r0, r6
    94b2:	f01c f9d5 	bl	25860 <z_spin_lock_set_owner>
	mgr->last_res = res;
    94b6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    94b8:	463a      	mov	r2, r7
    94ba:	4620      	mov	r0, r4
}
    94bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    94c0:	2101      	movs	r1, #1
    94c2:	f7ff be41 	b.w	9148 <process_event>
    94c6:	bf00      	nop
    94c8:	00030eb4 	.word	0x00030eb4
    94cc:	00030da5 	.word	0x00030da5

000094d0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    94d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94d4:	4604      	mov	r4, r0
    94d6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    94d8:	f01f fac3 	bl	28a62 <validate_args>

	if (rv < 0) {
    94dc:	1e05      	subs	r5, r0, #0
    94de:	db5c      	blt.n	959a <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    94e0:	f104 0914 	add.w	r9, r4, #20
    94e4:	f04f 0320 	mov.w	r3, #32
    94e8:	f3ef 8a11 	mrs	sl, BASEPRI
    94ec:	f383 8812 	msr	BASEPRI_MAX, r3
    94f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94f4:	4648      	mov	r0, r9
    94f6:	f01c f997 	bl	25828 <z_spin_lock_valid>
    94fa:	4680      	mov	r8, r0
    94fc:	b938      	cbnz	r0, 950e <onoff_request+0x3e>
    94fe:	4932      	ldr	r1, [pc, #200]	; (95c8 <onoff_request+0xf8>)
    9500:	2294      	movs	r2, #148	; 0x94
    9502:	4832      	ldr	r0, [pc, #200]	; (95cc <onoff_request+0xfc>)
    9504:	f01f fb5e 	bl	28bc4 <assert_print>
    9508:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    950a:	482f      	ldr	r0, [pc, #188]	; (95c8 <onoff_request+0xf8>)
    950c:	e03a      	b.n	9584 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
    950e:	4648      	mov	r0, r9
    9510:	f01c f9a6 	bl	25860 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9514:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9518:	8be3      	ldrh	r3, [r4, #30]
    951a:	8ba6      	ldrh	r6, [r4, #28]
    951c:	4293      	cmp	r3, r2
    951e:	f006 0607 	and.w	r6, r6, #7
    9522:	d03d      	beq.n	95a0 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    9524:	2e02      	cmp	r6, #2
    9526:	d10e      	bne.n	9546 <onoff_request+0x76>
	rv = state;
    9528:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    952a:	3301      	adds	r3, #1
    952c:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    952e:	4648      	mov	r0, r9
    9530:	f01c f988 	bl	25844 <z_spin_unlock_valid>
    9534:	2800      	cmp	r0, #0
    9536:	d139      	bne.n	95ac <onoff_request+0xdc>
    9538:	4923      	ldr	r1, [pc, #140]	; (95c8 <onoff_request+0xf8>)
    953a:	22c2      	movs	r2, #194	; 0xc2
    953c:	4823      	ldr	r0, [pc, #140]	; (95cc <onoff_request+0xfc>)
    953e:	f01f fb41 	bl	28bc4 <assert_print>
    9542:	21c2      	movs	r1, #194	; 0xc2
    9544:	e7e1      	b.n	950a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    9546:	2e06      	cmp	r6, #6
    9548:	d813      	bhi.n	9572 <onoff_request+0xa2>
    954a:	e8df f006 	tbb	[pc, r6]
    954e:	2c09      	.short	0x2c09
    9550:	04091212 	.word	0x04091212
    9554:	09          	.byte	0x09
    9555:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    9556:	f06f 0585 	mvn.w	r5, #133	; 0x85
    955a:	f04f 0800 	mov.w	r8, #0
    955e:	e7e6      	b.n	952e <onoff_request+0x5e>
	parent->next = child;
    9560:	2300      	movs	r3, #0
    9562:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    9564:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    9566:	b97b      	cbnz	r3, 9588 <onoff_request+0xb8>
	list->head = node;
    9568:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    956c:	b17e      	cbz	r6, 958e <onoff_request+0xbe>
	rv = state;
    956e:	4635      	mov	r5, r6
    9570:	e7f3      	b.n	955a <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    9572:	4917      	ldr	r1, [pc, #92]	; (95d0 <onoff_request+0x100>)
    9574:	4815      	ldr	r0, [pc, #84]	; (95cc <onoff_request+0xfc>)
    9576:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    957a:	f01f fb23 	bl	28bc4 <assert_print>
    957e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    9582:	4813      	ldr	r0, [pc, #76]	; (95d0 <onoff_request+0x100>)
    9584:	f01f fb17 	bl	28bb6 <assert_post_action>
	parent->next = child;
    9588:	601f      	str	r7, [r3, #0]
	list->tail = node;
    958a:	6067      	str	r7, [r4, #4]
}
    958c:	e7ee      	b.n	956c <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
    958e:	4652      	mov	r2, sl
    9590:	2102      	movs	r1, #2
    9592:	4620      	mov	r0, r4
    9594:	f7ff fdd8 	bl	9148 <process_event>
    9598:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    959a:	4628      	mov	r0, r5
    959c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    95a0:	f06f 050a 	mvn.w	r5, #10
    95a4:	e7d9      	b.n	955a <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
    95a6:	f06f 0504 	mvn.w	r5, #4
    95aa:	e7d6      	b.n	955a <onoff_request+0x8a>
	__asm__ volatile(
    95ac:	f38a 8811 	msr	BASEPRI, sl
    95b0:	f3bf 8f6f 	isb	sy
		if (notify) {
    95b4:	f1b8 0f00 	cmp.w	r8, #0
    95b8:	d0ef      	beq.n	959a <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
    95ba:	2300      	movs	r3, #0
    95bc:	4632      	mov	r2, r6
    95be:	4639      	mov	r1, r7
    95c0:	4620      	mov	r0, r4
    95c2:	f01f fa5e 	bl	28a82 <notify_one>
    95c6:	e7e8      	b.n	959a <onoff_request+0xca>
    95c8:	00030eb4 	.word	0x00030eb4
    95cc:	00030da5 	.word	0x00030da5
    95d0:	00030e92 	.word	0x00030e92

000095d4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    95d4:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    95d6:	6842      	ldr	r2, [r0, #4]
    95d8:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    95da:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    95de:	2a02      	cmp	r2, #2
	notify->result = res;
    95e0:	6081      	str	r1, [r0, #8]
	switch (method) {
    95e2:	d00a      	beq.n	95fa <sys_notify_finalize+0x26>
    95e4:	2a03      	cmp	r2, #3
    95e6:	f04f 0100 	mov.w	r1, #0
    95ea:	d003      	beq.n	95f4 <sys_notify_finalize+0x20>
    95ec:	2a01      	cmp	r2, #1
    95ee:	d10a      	bne.n	9606 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    95f0:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    95f2:	e006      	b.n	9602 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    95f4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    95f6:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    95f8:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    95fa:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    95fc:	2200      	movs	r2, #0
    95fe:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9600:	b950      	cbnz	r0, 9618 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
    9602:	2000      	movs	r0, #0
    9604:	e7f8      	b.n	95f8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9606:	4906      	ldr	r1, [pc, #24]	; (9620 <sys_notify_finalize+0x4c>)
    9608:	4806      	ldr	r0, [pc, #24]	; (9624 <sys_notify_finalize+0x50>)
    960a:	2245      	movs	r2, #69	; 0x45
    960c:	f01f fada 	bl	28bc4 <assert_print>
    9610:	2145      	movs	r1, #69	; 0x45
    9612:	4803      	ldr	r0, [pc, #12]	; (9620 <sys_notify_finalize+0x4c>)
    9614:	f01f facf 	bl	28bb6 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    9618:	f01e ff08 	bl	2842c <z_impl_k_poll_signal_raise>
    961c:	e7f1      	b.n	9602 <sys_notify_finalize+0x2e>
    961e:	bf00      	nop
    9620:	00030ee1 	.word	0x00030ee1
    9624:	00030da5 	.word	0x00030da5

00009628 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    9628:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    962a:	4c09      	ldr	r4, [pc, #36]	; (9650 <crc8_ccitt+0x28>)
    962c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    962e:	4291      	cmp	r1, r2
    9630:	d100      	bne.n	9634 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    9632:	bd10      	pop	{r4, pc}
		val ^= p[i];
    9634:	f811 3b01 	ldrb.w	r3, [r1], #1
    9638:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    963a:	0903      	lsrs	r3, r0, #4
    963c:	5ce3      	ldrb	r3, [r4, r3]
    963e:	0100      	lsls	r0, r0, #4
    9640:	b2c0      	uxtb	r0, r0
    9642:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    9644:	0918      	lsrs	r0, r3, #4
    9646:	5c20      	ldrb	r0, [r4, r0]
    9648:	011b      	lsls	r3, r3, #4
    964a:	b2db      	uxtb	r3, r3
    964c:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    964e:	e7ee      	b.n	962e <crc8_ccitt+0x6>
    9650:	00030f04 	.word	0x00030f04

00009654 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    9654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9658:	4681      	mov	r9, r0
    965a:	468b      	mov	fp, r1
    965c:	4617      	mov	r7, r2
    965e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    9660:	2500      	movs	r5, #0
{
    9662:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    9664:	7838      	ldrb	r0, [r7, #0]
    9666:	b908      	cbnz	r0, 966c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    9668:	4628      	mov	r0, r5
    966a:	e357      	b.n	9d1c <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    966c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    966e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    9670:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    9672:	d006      	beq.n	9682 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    9674:	4659      	mov	r1, fp
    9676:	47c8      	blx	r9
    9678:	2800      	cmp	r0, #0
    967a:	f2c0 834f 	blt.w	9d1c <z_cbvprintf_impl+0x6c8>
    967e:	3501      	adds	r5, #1
		if (bps == NULL) {
    9680:	e1fb      	b.n	9a7a <z_cbvprintf_impl+0x426>
		} state = {
    9682:	2218      	movs	r2, #24
    9684:	2100      	movs	r1, #0
    9686:	a80e      	add	r0, sp, #56	; 0x38
    9688:	f020 ff52 	bl	2a530 <memset>
	if (*sp == '%') {
    968c:	787b      	ldrb	r3, [r7, #1]
    968e:	2b25      	cmp	r3, #37	; 0x25
    9690:	d07d      	beq.n	978e <z_cbvprintf_impl+0x13a>
    9692:	2300      	movs	r3, #0
    9694:	4698      	mov	r8, r3
    9696:	469e      	mov	lr, r3
    9698:	469c      	mov	ip, r3
    969a:	461e      	mov	r6, r3
    969c:	1c78      	adds	r0, r7, #1
    969e:	4601      	mov	r1, r0
		switch (*sp) {
    96a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    96a4:	2a2b      	cmp	r2, #43	; 0x2b
    96a6:	f000 80a1 	beq.w	97ec <z_cbvprintf_impl+0x198>
    96aa:	f200 8098 	bhi.w	97de <z_cbvprintf_impl+0x18a>
    96ae:	2a20      	cmp	r2, #32
    96b0:	f000 809f 	beq.w	97f2 <z_cbvprintf_impl+0x19e>
    96b4:	2a23      	cmp	r2, #35	; 0x23
    96b6:	f000 809f 	beq.w	97f8 <z_cbvprintf_impl+0x1a4>
    96ba:	b12b      	cbz	r3, 96c8 <z_cbvprintf_impl+0x74>
    96bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    96c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    96c4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    96c8:	f1b8 0f00 	cmp.w	r8, #0
    96cc:	d005      	beq.n	96da <z_cbvprintf_impl+0x86>
    96ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    96d2:	f043 0320 	orr.w	r3, r3, #32
    96d6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    96da:	f1be 0f00 	cmp.w	lr, #0
    96de:	d005      	beq.n	96ec <z_cbvprintf_impl+0x98>
    96e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    96e4:	f043 0310 	orr.w	r3, r3, #16
    96e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    96ec:	f1bc 0f00 	cmp.w	ip, #0
    96f0:	d005      	beq.n	96fe <z_cbvprintf_impl+0xaa>
    96f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    96f6:	f043 0308 	orr.w	r3, r3, #8
    96fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    96fe:	b12e      	cbz	r6, 970c <z_cbvprintf_impl+0xb8>
    9700:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9704:	f043 0304 	orr.w	r3, r3, #4
    9708:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    970c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9710:	f003 0044 	and.w	r0, r3, #68	; 0x44
    9714:	2844      	cmp	r0, #68	; 0x44
    9716:	d103      	bne.n	9720 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    9718:	f36f 1386 	bfc	r3, #6, #1
    971c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    9720:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    9724:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    9726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    972a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    972e:	d17f      	bne.n	9830 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    9730:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    9734:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    9736:	f042 0201 	orr.w	r2, r2, #1
    973a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    973e:	781a      	ldrb	r2, [r3, #0]
    9740:	2a2e      	cmp	r2, #46	; 0x2e
    9742:	bf0c      	ite	eq
    9744:	2101      	moveq	r1, #1
    9746:	2100      	movne	r1, #0
    9748:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    974c:	f361 0241 	bfi	r2, r1, #1, #1
    9750:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    9754:	d178      	bne.n	9848 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    9756:	785a      	ldrb	r2, [r3, #1]
    9758:	2a2a      	cmp	r2, #42	; 0x2a
    975a:	d06e      	beq.n	983a <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    975c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    975e:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    9762:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9764:	4619      	mov	r1, r3
    9766:	f811 0b01 	ldrb.w	r0, [r1], #1
    976a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    976e:	2e09      	cmp	r6, #9
    9770:	f240 8095 	bls.w	989e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    9774:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    9778:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    977a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    977e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    9782:	460a      	mov	r2, r1
    9784:	f360 0241 	bfi	r2, r0, #1, #1
    9788:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    978c:	e05c      	b.n	9848 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    978e:	1cba      	adds	r2, r7, #2
    9790:	9203      	str	r2, [sp, #12]
    9792:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    9796:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    979a:	07da      	lsls	r2, r3, #31
    979c:	f140 812e 	bpl.w	99fc <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    97a0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    97a4:	f1b8 0f00 	cmp.w	r8, #0
    97a8:	da07      	bge.n	97ba <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    97aa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    97ae:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    97b2:	f042 0204 	orr.w	r2, r2, #4
    97b6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    97ba:	075e      	lsls	r6, r3, #29
    97bc:	f140 8127 	bpl.w	9a0e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    97c0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    97c4:	f1ba 0f00 	cmp.w	sl, #0
    97c8:	f280 8126 	bge.w	9a18 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    97cc:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    97d0:	f36f 0341 	bfc	r3, #1, #1
    97d4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    97d8:	f04f 3aff 	mov.w	sl, #4294967295
    97dc:	e11c      	b.n	9a18 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    97de:	2a2d      	cmp	r2, #45	; 0x2d
    97e0:	d00d      	beq.n	97fe <z_cbvprintf_impl+0x1aa>
    97e2:	2a30      	cmp	r2, #48	; 0x30
    97e4:	f47f af69 	bne.w	96ba <z_cbvprintf_impl+0x66>
    97e8:	2301      	movs	r3, #1
	} while (loop);
    97ea:	e758      	b.n	969e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    97ec:	f04f 0c01 	mov.w	ip, #1
    97f0:	e755      	b.n	969e <z_cbvprintf_impl+0x4a>
    97f2:	f04f 0e01 	mov.w	lr, #1
    97f6:	e752      	b.n	969e <z_cbvprintf_impl+0x4a>
    97f8:	f04f 0801 	mov.w	r8, #1
    97fc:	e74f      	b.n	969e <z_cbvprintf_impl+0x4a>
    97fe:	2601      	movs	r6, #1
    9800:	e74d      	b.n	969e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    9802:	4603      	mov	r3, r0
    9804:	fb0e 6202 	mla	r2, lr, r2, r6
    9808:	3a30      	subs	r2, #48	; 0x30
    980a:	4618      	mov	r0, r3
    980c:	f810 6b01 	ldrb.w	r6, [r0], #1
    9810:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9814:	f1bc 0f09 	cmp.w	ip, #9
    9818:	d9f3      	bls.n	9802 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    981a:	4299      	cmp	r1, r3
    981c:	d08f      	beq.n	973e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    981e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    9822:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    9824:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    9826:	f362 0141 	bfi	r1, r2, #1, #1
    982a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    982e:	e786      	b.n	973e <z_cbvprintf_impl+0xea>
    9830:	460b      	mov	r3, r1
	size_t val = 0;
    9832:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    9834:	f04f 0e0a 	mov.w	lr, #10
    9838:	e7e7      	b.n	980a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    983a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    983e:	3302      	adds	r3, #2
		conv->prec_star = true;
    9840:	f042 0204 	orr.w	r2, r2, #4
    9844:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    9848:	781a      	ldrb	r2, [r3, #0]
    984a:	2a6c      	cmp	r2, #108	; 0x6c
    984c:	d047      	beq.n	98de <z_cbvprintf_impl+0x28a>
    984e:	d82b      	bhi.n	98a8 <z_cbvprintf_impl+0x254>
    9850:	2a68      	cmp	r2, #104	; 0x68
    9852:	d031      	beq.n	98b8 <z_cbvprintf_impl+0x264>
    9854:	2a6a      	cmp	r2, #106	; 0x6a
    9856:	d04b      	beq.n	98f0 <z_cbvprintf_impl+0x29c>
    9858:	2a4c      	cmp	r2, #76	; 0x4c
    985a:	d051      	beq.n	9900 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    985c:	461a      	mov	r2, r3
    985e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    9862:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    9864:	9203      	str	r2, [sp, #12]
    9866:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    986a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    986e:	f200 80be 	bhi.w	99ee <z_cbvprintf_impl+0x39a>
    9872:	2b6d      	cmp	r3, #109	; 0x6d
    9874:	d851      	bhi.n	991a <z_cbvprintf_impl+0x2c6>
    9876:	2b69      	cmp	r3, #105	; 0x69
    9878:	f200 80b9 	bhi.w	99ee <z_cbvprintf_impl+0x39a>
    987c:	2b57      	cmp	r3, #87	; 0x57
    987e:	d867      	bhi.n	9950 <z_cbvprintf_impl+0x2fc>
    9880:	2b41      	cmp	r3, #65	; 0x41
    9882:	d003      	beq.n	988c <z_cbvprintf_impl+0x238>
    9884:	3b45      	subs	r3, #69	; 0x45
    9886:	2b02      	cmp	r3, #2
    9888:	f200 80b1 	bhi.w	99ee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    988c:	2204      	movs	r2, #4
    988e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9892:	f362 0302 	bfi	r3, r2, #0, #3
    9896:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    989a:	2301      	movs	r3, #1
			break;
    989c:	e073      	b.n	9986 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    989e:	fb0c 0202 	mla	r2, ip, r2, r0
    98a2:	460b      	mov	r3, r1
    98a4:	3a30      	subs	r2, #48	; 0x30
    98a6:	e75d      	b.n	9764 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    98a8:	2a74      	cmp	r2, #116	; 0x74
    98aa:	d025      	beq.n	98f8 <z_cbvprintf_impl+0x2a4>
    98ac:	2a7a      	cmp	r2, #122	; 0x7a
    98ae:	d1d5      	bne.n	985c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    98b0:	2106      	movs	r1, #6
    98b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    98b6:	e00c      	b.n	98d2 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    98b8:	785a      	ldrb	r2, [r3, #1]
    98ba:	2a68      	cmp	r2, #104	; 0x68
    98bc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    98c0:	d106      	bne.n	98d0 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    98c2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    98c4:	f361 02c6 	bfi	r2, r1, #3, #4
    98c8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    98cc:	3302      	adds	r3, #2
    98ce:	e7c5      	b.n	985c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    98d0:	2102      	movs	r1, #2
    98d2:	f361 02c6 	bfi	r2, r1, #3, #4
    98d6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    98da:	3301      	adds	r3, #1
    98dc:	e7be      	b.n	985c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    98de:	785a      	ldrb	r2, [r3, #1]
    98e0:	2a6c      	cmp	r2, #108	; 0x6c
    98e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    98e6:	d101      	bne.n	98ec <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    98e8:	2104      	movs	r1, #4
    98ea:	e7eb      	b.n	98c4 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    98ec:	2103      	movs	r1, #3
    98ee:	e7f0      	b.n	98d2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    98f0:	2105      	movs	r1, #5
    98f2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    98f6:	e7ec      	b.n	98d2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    98f8:	2107      	movs	r1, #7
    98fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    98fe:	e7e8      	b.n	98d2 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    9900:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    9904:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    9908:	f022 0202 	bic.w	r2, r2, #2
    990c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    9910:	f042 0202 	orr.w	r2, r2, #2
    9914:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    9918:	e7df      	b.n	98da <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    991a:	3b6e      	subs	r3, #110	; 0x6e
    991c:	b2d9      	uxtb	r1, r3
    991e:	2301      	movs	r3, #1
    9920:	408b      	lsls	r3, r1
    9922:	f240 4182 	movw	r1, #1154	; 0x482
    9926:	420b      	tst	r3, r1
    9928:	d137      	bne.n	999a <z_cbvprintf_impl+0x346>
    992a:	f013 0f24 	tst.w	r3, #36	; 0x24
    992e:	d151      	bne.n	99d4 <z_cbvprintf_impl+0x380>
    9930:	07d8      	lsls	r0, r3, #31
    9932:	d55c      	bpl.n	99ee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    9934:	2103      	movs	r1, #3
    9936:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    993a:	f361 0302 	bfi	r3, r1, #0, #3
    993e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9942:	f002 0378 	and.w	r3, r2, #120	; 0x78
    9946:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    994a:	424b      	negs	r3, r1
    994c:	414b      	adcs	r3, r1
    994e:	e01a      	b.n	9986 <z_cbvprintf_impl+0x332>
    9950:	2001      	movs	r0, #1
	switch (conv->specifier) {
    9952:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    9956:	b2c9      	uxtb	r1, r1
    9958:	fa00 f101 	lsl.w	r1, r0, r1
    995c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    9960:	d194      	bne.n	988c <z_cbvprintf_impl+0x238>
    9962:	f640 0601 	movw	r6, #2049	; 0x801
    9966:	4231      	tst	r1, r6
    9968:	d11d      	bne.n	99a6 <z_cbvprintf_impl+0x352>
    996a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    996e:	d03e      	beq.n	99ee <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    9970:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9974:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9978:	f002 0278 	and.w	r2, r2, #120	; 0x78
    997c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    997e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9982:	d034      	beq.n	99ee <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    9984:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    9986:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    998a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    998e:	430b      	orrs	r3, r1
    9990:	f363 0241 	bfi	r2, r3, #1, #1
    9994:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9998:	e6fd      	b.n	9796 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    999a:	2102      	movs	r1, #2
    999c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    99a0:	f361 0302 	bfi	r3, r1, #0, #3
    99a4:	e7e8      	b.n	9978 <z_cbvprintf_impl+0x324>
    99a6:	2002      	movs	r0, #2
    99a8:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    99ac:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    99b0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    99b4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    99b6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    99ba:	bf02      	ittt	eq
    99bc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    99c0:	f041 0101 	orreq.w	r1, r1, #1
    99c4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    99c8:	2b63      	cmp	r3, #99	; 0x63
    99ca:	d1db      	bne.n	9984 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    99cc:	1e13      	subs	r3, r2, #0
    99ce:	bf18      	it	ne
    99d0:	2301      	movne	r3, #1
    99d2:	e7d8      	b.n	9986 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    99d4:	2103      	movs	r1, #3
    99d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    99da:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    99de:	f361 0302 	bfi	r3, r1, #0, #3
    99e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    99e6:	bf14      	ite	ne
    99e8:	2301      	movne	r3, #1
    99ea:	2300      	moveq	r3, #0
    99ec:	e7cb      	b.n	9986 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    99ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    99f2:	f043 0301 	orr.w	r3, r3, #1
    99f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    99fa:	e7c3      	b.n	9984 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    99fc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9a00:	2a00      	cmp	r2, #0
		int width = -1;
    9a02:	bfac      	ite	ge
    9a04:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    9a08:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    9a0c:	e6d5      	b.n	97ba <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    9a0e:	0798      	lsls	r0, r3, #30
    9a10:	f57f aee2 	bpl.w	97d8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    9a14:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    9a18:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    9a1a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    9a1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    9a22:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    9a26:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9a2a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9a2c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    9a30:	d133      	bne.n	9a9a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    9a32:	1ecb      	subs	r3, r1, #3
    9a34:	2b04      	cmp	r3, #4
    9a36:	d804      	bhi.n	9a42 <z_cbvprintf_impl+0x3ee>
    9a38:	e8df f003 	tbb	[pc, r3]
    9a3c:	21464621 	.word	0x21464621
    9a40:	21          	.byte	0x21
    9a41:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    9a42:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    9a44:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    9a46:	ea4f 72e3 	mov.w	r2, r3, asr #31
    9a4a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9a4e:	d11c      	bne.n	9a8a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    9a50:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    9a54:	17da      	asrs	r2, r3, #31
    9a56:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    9a5a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    9a5c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9a60:	f013 0603 	ands.w	r6, r3, #3
    9a64:	d050      	beq.n	9b08 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    9a66:	463a      	mov	r2, r7
    9a68:	4659      	mov	r1, fp
    9a6a:	4648      	mov	r0, r9
    9a6c:	9b03      	ldr	r3, [sp, #12]
    9a6e:	f01f f88b 	bl	28b88 <outs>
    9a72:	2800      	cmp	r0, #0
    9a74:	f2c0 8152 	blt.w	9d1c <z_cbvprintf_impl+0x6c8>
    9a78:	4405      	add	r5, r0
			continue;
    9a7a:	9f03      	ldr	r7, [sp, #12]
    9a7c:	e5f2      	b.n	9664 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9a7e:	f854 3b04 	ldr.w	r3, [r4], #4
    9a82:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    9a84:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    9a88:	e7e8      	b.n	9a5c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    9a8a:	2902      	cmp	r1, #2
    9a8c:	d1e5      	bne.n	9a5a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    9a8e:	b21a      	sxth	r2, r3
    9a90:	f343 33c0 	sbfx	r3, r3, #15, #1
    9a94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9a98:	e7df      	b.n	9a5a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9a9a:	2b02      	cmp	r3, #2
    9a9c:	d124      	bne.n	9ae8 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    9a9e:	1ecb      	subs	r3, r1, #3
    9aa0:	2b04      	cmp	r3, #4
    9aa2:	d804      	bhi.n	9aae <z_cbvprintf_impl+0x45a>
    9aa4:	e8df f003 	tbb	[pc, r3]
    9aa8:	18101018 	.word	0x18101018
    9aac:	18          	.byte	0x18
    9aad:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9aae:	2901      	cmp	r1, #1
    9ab0:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    9ab4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    9ab8:	d014      	beq.n	9ae4 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    9aba:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9abc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    9ac0:	d1cc      	bne.n	9a5c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    9ac2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9ac4:	930e      	str	r3, [sp, #56]	; 0x38
    9ac6:	e7c9      	b.n	9a5c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    9ac8:	3407      	adds	r4, #7
    9aca:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9ace:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9ad2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9ad6:	e7c1      	b.n	9a5c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    9ad8:	f854 3b04 	ldr.w	r3, [r4], #4
    9adc:	930e      	str	r3, [sp, #56]	; 0x38
    9ade:	2300      	movs	r3, #0
    9ae0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    9ae2:	e7bb      	b.n	9a5c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9ae4:	b2db      	uxtb	r3, r3
    9ae6:	e7cd      	b.n	9a84 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    9ae8:	2b04      	cmp	r3, #4
    9aea:	d108      	bne.n	9afe <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9aec:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    9aee:	f024 0407 	bic.w	r4, r4, #7
    9af2:	e9d4 2300 	ldrd	r2, r3, [r4]
    9af6:	3408      	adds	r4, #8
    9af8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9afc:	e7ae      	b.n	9a5c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    9afe:	2b03      	cmp	r3, #3
    9b00:	d1ac      	bne.n	9a5c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    9b02:	f854 3b04 	ldr.w	r3, [r4], #4
    9b06:	e7dd      	b.n	9ac4 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    9b08:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9b0c:	2878      	cmp	r0, #120	; 0x78
    9b0e:	d8b4      	bhi.n	9a7a <z_cbvprintf_impl+0x426>
    9b10:	2862      	cmp	r0, #98	; 0x62
    9b12:	d81c      	bhi.n	9b4e <z_cbvprintf_impl+0x4fa>
    9b14:	2825      	cmp	r0, #37	; 0x25
    9b16:	f43f adad 	beq.w	9674 <z_cbvprintf_impl+0x20>
    9b1a:	2858      	cmp	r0, #88	; 0x58
    9b1c:	d1ad      	bne.n	9a7a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    9b1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9b22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9b26:	9300      	str	r3, [sp, #0]
    9b28:	aa10      	add	r2, sp, #64	; 0x40
    9b2a:	ab08      	add	r3, sp, #32
    9b2c:	f01e ffe6 	bl	28afc <encode_uint>
			if (precision >= 0) {
    9b30:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    9b34:	4607      	mov	r7, r0
			if (precision >= 0) {
    9b36:	f280 8099 	bge.w	9c6c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    9b3a:	2f00      	cmp	r7, #0
    9b3c:	d09d      	beq.n	9a7a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    9b3e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9b42:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    9b44:	2e00      	cmp	r6, #0
    9b46:	f000 80c0 	beq.w	9cca <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    9b4a:	3001      	adds	r0, #1
    9b4c:	e0bd      	b.n	9cca <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    9b4e:	3863      	subs	r0, #99	; 0x63
    9b50:	2815      	cmp	r0, #21
    9b52:	d892      	bhi.n	9a7a <z_cbvprintf_impl+0x426>
    9b54:	a201      	add	r2, pc, #4	; (adr r2, 9b5c <z_cbvprintf_impl+0x508>)
    9b56:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    9b5a:	bf00      	nop
    9b5c:	00009c31 	.word	0x00009c31
    9b60:	00009c43 	.word	0x00009c43
    9b64:	00009a7b 	.word	0x00009a7b
    9b68:	00009a7b 	.word	0x00009a7b
    9b6c:	00009a7b 	.word	0x00009a7b
    9b70:	00009a7b 	.word	0x00009a7b
    9b74:	00009c43 	.word	0x00009c43
    9b78:	00009a7b 	.word	0x00009a7b
    9b7c:	00009a7b 	.word	0x00009a7b
    9b80:	00009a7b 	.word	0x00009a7b
    9b84:	00009a7b 	.word	0x00009a7b
    9b88:	00009ccf 	.word	0x00009ccf
    9b8c:	00009c67 	.word	0x00009c67
    9b90:	00009c8d 	.word	0x00009c8d
    9b94:	00009a7b 	.word	0x00009a7b
    9b98:	00009a7b 	.word	0x00009a7b
    9b9c:	00009bb5 	.word	0x00009bb5
    9ba0:	00009a7b 	.word	0x00009a7b
    9ba4:	00009c67 	.word	0x00009c67
    9ba8:	00009a7b 	.word	0x00009a7b
    9bac:	00009a7b 	.word	0x00009a7b
    9bb0:	00009c67 	.word	0x00009c67
			if (precision >= 0) {
    9bb4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    9bb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    9bba:	db35      	blt.n	9c28 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9bbc:	4651      	mov	r1, sl
    9bbe:	4638      	mov	r0, r7
    9bc0:	f020 fc5c 	bl	2a47c <strnlen>
			bpe = bps + len;
    9bc4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    9bc8:	2f00      	cmp	r7, #0
    9bca:	f43f af56 	beq.w	9a7a <z_cbvprintf_impl+0x426>
		char sign = 0;
    9bce:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    9bd0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9bd4:	f013 0210 	ands.w	r2, r3, #16
    9bd8:	9205      	str	r2, [sp, #20]
    9bda:	f000 8092 	beq.w	9d02 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    9bde:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    9be0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    9be2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9be4:	bf48      	it	mi
    9be6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    9be8:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    9bea:	bf48      	it	mi
    9bec:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    9bee:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    9bf2:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9bf4:	f340 809f 	ble.w	9d36 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    9bf8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9bfc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    9c00:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9c04:	0750      	lsls	r0, r2, #29
    9c06:	9306      	str	r3, [sp, #24]
    9c08:	f100 8095 	bmi.w	9d36 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    9c0c:	0651      	lsls	r1, r2, #25
    9c0e:	f140 8088 	bpl.w	9d22 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    9c12:	b13e      	cbz	r6, 9c24 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9c14:	4659      	mov	r1, fp
    9c16:	4630      	mov	r0, r6
    9c18:	47c8      	blx	r9
    9c1a:	2800      	cmp	r0, #0
    9c1c:	db7e      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9c1e:	9b06      	ldr	r3, [sp, #24]
    9c20:	3501      	adds	r5, #1
    9c22:	461e      	mov	r6, r3
					pad = '0';
    9c24:	2230      	movs	r2, #48	; 0x30
    9c26:	e07d      	b.n	9d24 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    9c28:	4638      	mov	r0, r7
    9c2a:	f020 fc20 	bl	2a46e <strlen>
    9c2e:	e7c9      	b.n	9bc4 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    9c32:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9c34:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    9c36:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    9c3a:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    9c3c:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    9c40:	e7c6      	b.n	9bd0 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    9c42:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    9c44:	bf5a      	itte	pl
    9c46:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    9c4a:	015e      	lslpl	r6, r3, #5
				sign = '+';
    9c4c:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    9c4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    9c52:	2b00      	cmp	r3, #0
    9c54:	f6bf af63 	bge.w	9b1e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    9c58:	4252      	negs	r2, r2
    9c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    9c5e:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    9c60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9c64:	e75b      	b.n	9b1e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    9c66:	2600      	movs	r6, #0
    9c68:	e759      	b.n	9b1e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    9c6a:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9c6c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    9c70:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9c74:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    9c76:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    9c7a:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    9c7c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    9c80:	f67f af5b 	bls.w	9b3a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    9c84:	ebaa 0303 	sub.w	r3, sl, r3
    9c88:	9311      	str	r3, [sp, #68]	; 0x44
    9c8a:	e756      	b.n	9b3a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    9c8c:	980e      	ldr	r0, [sp, #56]	; 0x38
    9c8e:	b390      	cbz	r0, 9cf6 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9c90:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9c94:	9300      	str	r3, [sp, #0]
    9c96:	2100      	movs	r1, #0
    9c98:	ab08      	add	r3, sp, #32
    9c9a:	aa10      	add	r2, sp, #64	; 0x40
    9c9c:	f01e ff2e 	bl	28afc <encode_uint>
				conv->altform_0c = true;
    9ca0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9ca4:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    9ca8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9cac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9cb0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9cb4:	4607      	mov	r7, r0
				conv->altform_0c = true;
    9cb6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9cba:	dad6      	bge.n	9c6a <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9cbc:	2800      	cmp	r0, #0
    9cbe:	f43f aedc 	beq.w	9a7a <z_cbvprintf_impl+0x426>
		char sign = 0;
    9cc2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9cc4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9cc8:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    9cca:	469a      	mov	sl, r3
    9ccc:	e780      	b.n	9bd0 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    9cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    9cd0:	2907      	cmp	r1, #7
    9cd2:	f63f aed2 	bhi.w	9a7a <z_cbvprintf_impl+0x426>
    9cd6:	e8df f001 	tbb	[pc, r1]
    9cda:	040c      	.short	0x040c
    9cdc:	08080c06 	.word	0x08080c06
    9ce0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9ce2:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9ce4:	e6c9      	b.n	9a7a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    9ce6:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9ce8:	e6c7      	b.n	9a7a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    9cea:	17ea      	asrs	r2, r5, #31
    9cec:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9cf0:	e6c3      	b.n	9a7a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9cf2:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9cf4:	e6c1      	b.n	9a7a <z_cbvprintf_impl+0x426>
    9cf6:	4f2f      	ldr	r7, [pc, #188]	; (9db4 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    9cf8:	4606      	mov	r6, r0
			bpe = bps + 5;
    9cfa:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    9cfe:	2005      	movs	r0, #5
    9d00:	e766      	b.n	9bd0 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    9d02:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9d04:	bf48      	it	mi
    9d06:	3001      	addmi	r0, #1
    9d08:	e76a      	b.n	9be0 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    9d0a:	4610      	mov	r0, r2
    9d0c:	9307      	str	r3, [sp, #28]
    9d0e:	9206      	str	r2, [sp, #24]
    9d10:	4659      	mov	r1, fp
    9d12:	47c8      	blx	r9
    9d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9d18:	2800      	cmp	r0, #0
    9d1a:	da04      	bge.n	9d26 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    9d1c:	b015      	add	sp, #84	; 0x54
    9d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    9d22:	2220      	movs	r2, #32
					pad = '0';
    9d24:	4643      	mov	r3, r8
				while (width-- > 0) {
    9d26:	4619      	mov	r1, r3
    9d28:	2900      	cmp	r1, #0
    9d2a:	f103 33ff 	add.w	r3, r3, #4294967295
    9d2e:	dcec      	bgt.n	9d0a <z_cbvprintf_impl+0x6b6>
    9d30:	4445      	add	r5, r8
    9d32:	4698      	mov	r8, r3
    9d34:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    9d36:	b12e      	cbz	r6, 9d44 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    9d38:	4659      	mov	r1, fp
    9d3a:	4630      	mov	r0, r6
    9d3c:	47c8      	blx	r9
    9d3e:	2800      	cmp	r0, #0
    9d40:	dbec      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9d42:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    9d44:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9d48:	06da      	lsls	r2, r3, #27
    9d4a:	d401      	bmi.n	9d50 <z_cbvprintf_impl+0x6fc>
    9d4c:	071b      	lsls	r3, r3, #28
    9d4e:	d505      	bpl.n	9d5c <z_cbvprintf_impl+0x708>
				OUTC('0');
    9d50:	4659      	mov	r1, fp
    9d52:	2030      	movs	r0, #48	; 0x30
    9d54:	47c8      	blx	r9
    9d56:	2800      	cmp	r0, #0
    9d58:	dbe0      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9d5a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    9d5c:	9b05      	ldr	r3, [sp, #20]
    9d5e:	b133      	cbz	r3, 9d6e <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    9d60:	4659      	mov	r1, fp
    9d62:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9d66:	47c8      	blx	r9
    9d68:	2800      	cmp	r0, #0
    9d6a:	dbd7      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9d6c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9d6e:	9e04      	ldr	r6, [sp, #16]
    9d70:	442e      	add	r6, r5
    9d72:	e005      	b.n	9d80 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    9d74:	4659      	mov	r1, fp
    9d76:	2030      	movs	r0, #48	; 0x30
    9d78:	47c8      	blx	r9
    9d7a:	2800      	cmp	r0, #0
    9d7c:	dbce      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9d7e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9d80:	1b73      	subs	r3, r6, r5
    9d82:	2b00      	cmp	r3, #0
    9d84:	dcf6      	bgt.n	9d74 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    9d86:	4653      	mov	r3, sl
    9d88:	463a      	mov	r2, r7
    9d8a:	4659      	mov	r1, fp
    9d8c:	4648      	mov	r0, r9
    9d8e:	f01e fefb 	bl	28b88 <outs>
    9d92:	2800      	cmp	r0, #0
    9d94:	dbc2      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9d96:	4405      	add	r5, r0
		while (width > 0) {
    9d98:	44a8      	add	r8, r5
    9d9a:	eba8 0305 	sub.w	r3, r8, r5
    9d9e:	2b00      	cmp	r3, #0
    9da0:	f77f ae6b 	ble.w	9a7a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    9da4:	4659      	mov	r1, fp
    9da6:	2020      	movs	r0, #32
    9da8:	47c8      	blx	r9
    9daa:	2800      	cmp	r0, #0
    9dac:	dbb6      	blt.n	9d1c <z_cbvprintf_impl+0x6c8>
    9dae:	3501      	adds	r5, #1
			--width;
    9db0:	e7f3      	b.n	9d9a <z_cbvprintf_impl+0x746>
    9db2:	bf00      	nop
    9db4:	00030f14 	.word	0x00030f14

00009db8 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    9db8:	b538      	push	{r3, r4, r5, lr}
    9dba:	460d      	mov	r5, r1
    9dbc:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    9dbe:	2220      	movs	r2, #32
    9dc0:	2100      	movs	r1, #0
    9dc2:	f020 fbb5 	bl	2a530 <memset>
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    9dc6:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    9dc8:	68eb      	ldr	r3, [r5, #12]
    9dca:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    9dcc:	68ab      	ldr	r3, [r5, #8]
    9dce:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    9dd0:	682b      	ldr	r3, [r5, #0]
    9dd2:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    9dd4:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    9dd6:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    9dd8:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    9dda:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    9ddc:	b123      	cbz	r3, 9de8 <mpsc_pbuf_init+0x30>
    9dde:	1e59      	subs	r1, r3, #1
    9de0:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    9de2:	bf08      	it	eq
    9de4:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    9de8:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9dea:	2201      	movs	r2, #1
    9dec:	2100      	movs	r1, #0
    9dee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9df2:	f025 fb0f 	bl	2f414 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    9df6:	b140      	cbz	r0, 9e0a <mpsc_pbuf_init+0x52>
    9df8:	4904      	ldr	r1, [pc, #16]	; (9e0c <mpsc_pbuf_init+0x54>)
    9dfa:	4805      	ldr	r0, [pc, #20]	; (9e10 <mpsc_pbuf_init+0x58>)
    9dfc:	222e      	movs	r2, #46	; 0x2e
    9dfe:	f01e fee1 	bl	28bc4 <assert_print>
    9e02:	212e      	movs	r1, #46	; 0x2e
    9e04:	4801      	ldr	r0, [pc, #4]	; (9e0c <mpsc_pbuf_init+0x54>)
    9e06:	f01e fed6 	bl	28bb6 <assert_post_action>
	ARG_UNUSED(err);
}
    9e0a:	bd38      	pop	{r3, r4, r5, pc}
    9e0c:	00030f1a 	.word	0x00030f1a
    9e10:	00030da5 	.word	0x00030da5

00009e14 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    9e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e18:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    9e1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    9e1c:	b085      	sub	sp, #20
	if (wlen > (buffer->size - 1)) {
    9e1e:	3b01      	subs	r3, #1
    9e20:	428b      	cmp	r3, r1
{
    9e22:	4604      	mov	r4, r0
    9e24:	4688      	mov	r8, r1
    9e26:	9200      	str	r2, [sp, #0]
	if (wlen > (buffer->size - 1)) {
    9e28:	f0c0 8095 	bcc.w	9f56 <mpsc_pbuf_alloc+0x142>
	union mpsc_pbuf_generic *dropped_item = NULL;
    9e2c:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    9e2e:	46ab      	mov	fp, r5
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    9e30:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    9e34:	f04f 0320 	mov.w	r3, #32
    9e38:	f3ef 8611 	mrs	r6, BASEPRI
    9e3c:	f383 8812 	msr	BASEPRI_MAX, r3
    9e40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e44:	4638      	mov	r0, r7
    9e46:	f01b fcef 	bl	25828 <z_spin_lock_valid>
    9e4a:	b940      	cbnz	r0, 9e5e <mpsc_pbuf_alloc+0x4a>
    9e4c:	4945      	ldr	r1, [pc, #276]	; (9f64 <mpsc_pbuf_alloc+0x150>)
    9e4e:	2294      	movs	r2, #148	; 0x94
    9e50:	4845      	ldr	r0, [pc, #276]	; (9f68 <mpsc_pbuf_alloc+0x154>)
    9e52:	f01e feb7 	bl	28bc4 <assert_print>
    9e56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e58:	4842      	ldr	r0, [pc, #264]	; (9f64 <mpsc_pbuf_alloc+0x150>)
    9e5a:	f01e feac 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9e5e:	4638      	mov	r0, r7
    9e60:	f01b fcfe 	bl	25860 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    9e64:	a903      	add	r1, sp, #12
    9e66:	4620      	mov	r0, r4
    9e68:	f01e feb9 	bl	28bde <free_space>

		if (free_wlen >= wlen) {
    9e6c:	9903      	ldr	r1, [sp, #12]
		wrap = free_space(buffer, &free_wlen);
    9e6e:	4681      	mov	r9, r0
		if (free_wlen >= wlen) {
    9e70:	4541      	cmp	r1, r8
    9e72:	d328      	bcc.n	9ec6 <mpsc_pbuf_alloc+0xb2>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    9e74:	6822      	ldr	r2, [r4, #0]
			item =
    9e76:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    9e78:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    9e7a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    9e7e:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    9e82:	f021 0103 	bic.w	r1, r1, #3
    9e86:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    9e8a:	6821      	ldr	r1, [r4, #0]
    9e8c:	4642      	mov	r2, r8
    9e8e:	f01e fec8 	bl	28c22 <idx_inc>
		cont = false;
    9e92:	f04f 0900 	mov.w	r9, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    9e96:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e98:	4638      	mov	r0, r7
    9e9a:	f01b fcd3 	bl	25844 <z_spin_unlock_valid>
    9e9e:	b320      	cbz	r0, 9eea <mpsc_pbuf_alloc+0xd6>
	__asm__ volatile(
    9ea0:	f386 8811 	msr	BASEPRI, r6
    9ea4:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    9ea8:	f1b9 0f00 	cmp.w	r9, #0
    9eac:	d055      	beq.n	9f5a <mpsc_pbuf_alloc+0x146>
    9eae:	b145      	cbz	r5, 9ec2 <mpsc_pbuf_alloc+0xae>
    9eb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d0bd      	beq.n	9e34 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    9eb8:	69a3      	ldr	r3, [r4, #24]
    9eba:	b113      	cbz	r3, 9ec2 <mpsc_pbuf_alloc+0xae>
				buffer->notify_drop(buffer, dropped_item);
    9ebc:	4629      	mov	r1, r5
    9ebe:	4620      	mov	r0, r4
    9ec0:	4798      	blx	r3
{
    9ec2:	2500      	movs	r5, #0
    9ec4:	e7b6      	b.n	9e34 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    9ec6:	b118      	cbz	r0, 9ed0 <mpsc_pbuf_alloc+0xbc>
			add_skip_item(buffer, free_wlen);
    9ec8:	4620      	mov	r0, r4
    9eca:	f01e feb8 	bl	28c3e <add_skip_item>
			cont = true;
    9ece:	e7e3      	b.n	9e98 <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9ed0:	9b00      	ldr	r3, [sp, #0]
    9ed2:	ea53 030a 	orrs.w	r3, r3, sl
    9ed6:	d02f      	beq.n	9f38 <mpsc_pbuf_alloc+0x124>
    9ed8:	9101      	str	r1, [sp, #4]
			   !k_is_in_isr()) {
    9eda:	f025 fa4a 	bl	2f372 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9ede:	9901      	ldr	r1, [sp, #4]
    9ee0:	bb50      	cbnz	r0, 9f38 <mpsc_pbuf_alloc+0x124>
    9ee2:	4638      	mov	r0, r7
    9ee4:	f01b fcae 	bl	25844 <z_spin_unlock_valid>
    9ee8:	b930      	cbnz	r0, 9ef8 <mpsc_pbuf_alloc+0xe4>
    9eea:	491e      	ldr	r1, [pc, #120]	; (9f64 <mpsc_pbuf_alloc+0x150>)
    9eec:	22c2      	movs	r2, #194	; 0xc2
    9eee:	481e      	ldr	r0, [pc, #120]	; (9f68 <mpsc_pbuf_alloc+0x154>)
    9ef0:	f01e fe68 	bl	28bc4 <assert_print>
    9ef4:	21c2      	movs	r1, #194	; 0xc2
    9ef6:	e7af      	b.n	9e58 <mpsc_pbuf_alloc+0x44>
    9ef8:	f386 8811 	msr	BASEPRI, r6
    9efc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    9f00:	4653      	mov	r3, sl
    9f02:	9a00      	ldr	r2, [sp, #0]
    9f04:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9f08:	f01b ff20 	bl	25d4c <z_impl_k_sem_take>
    9f0c:	4681      	mov	r9, r0
	__asm__ volatile(
    9f0e:	f04f 0320 	mov.w	r3, #32
    9f12:	f3ef 8611 	mrs	r6, BASEPRI
    9f16:	f383 8812 	msr	BASEPRI_MAX, r3
    9f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f1e:	4638      	mov	r0, r7
    9f20:	f01b fc82 	bl	25828 <z_spin_lock_valid>
    9f24:	2800      	cmp	r0, #0
    9f26:	d091      	beq.n	9e4c <mpsc_pbuf_alloc+0x38>
			if (err == 0) {
    9f28:	fab9 f989 	clz	r9, r9
	z_spin_lock_set_owner(l);
    9f2c:	4638      	mov	r0, r7
    9f2e:	f01b fc97 	bl	25860 <z_spin_lock_set_owner>
    9f32:	ea4f 1959 	mov.w	r9, r9, lsr #5
    9f36:	e7af      	b.n	9e98 <mpsc_pbuf_alloc+0x84>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    9f38:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    9f3a:	4620      	mov	r0, r4
    9f3c:	f10d 030b 	add.w	r3, sp, #11
    9f40:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9f44:	f01e fe9e 	bl	28c84 <drop_item_locked>
			cont = dropped_item != NULL;
    9f48:	f1b0 0900 	subs.w	r9, r0, #0
    9f4c:	4605      	mov	r5, r0
    9f4e:	bf18      	it	ne
    9f50:	f04f 0901 	movne.w	r9, #1
    9f54:	e7a0      	b.n	9e98 <mpsc_pbuf_alloc+0x84>
		return NULL;
    9f56:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    9f5a:	4658      	mov	r0, fp
    9f5c:	b005      	add	sp, #20
    9f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f62:	bf00      	nop
    9f64:	00030eb4 	.word	0x00030eb4
    9f68:	00030da5 	.word	0x00030da5

00009f6c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    9f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f70:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    9f72:	69c3      	ldr	r3, [r0, #28]
    9f74:	4608      	mov	r0, r1
{
    9f76:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9f78:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    9f7a:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    9f7e:	4607      	mov	r7, r0
    9f80:	f04f 0320 	mov.w	r3, #32
    9f84:	f3ef 8811 	mrs	r8, BASEPRI
    9f88:	f383 8812 	msr	BASEPRI_MAX, r3
    9f8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f90:	4630      	mov	r0, r6
    9f92:	f01b fc49 	bl	25828 <z_spin_lock_valid>
    9f96:	b940      	cbnz	r0, 9faa <mpsc_pbuf_commit+0x3e>
    9f98:	4914      	ldr	r1, [pc, #80]	; (9fec <mpsc_pbuf_commit+0x80>)
    9f9a:	2294      	movs	r2, #148	; 0x94
    9f9c:	4814      	ldr	r0, [pc, #80]	; (9ff0 <mpsc_pbuf_commit+0x84>)
    9f9e:	f01e fe11 	bl	28bc4 <assert_print>
    9fa2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fa4:	4811      	ldr	r0, [pc, #68]	; (9fec <mpsc_pbuf_commit+0x80>)
    9fa6:	f01e fe06 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9faa:	4630      	mov	r0, r6
    9fac:	f01b fc58 	bl	25860 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    9fb0:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9fb2:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    9fb4:	f043 0301 	orr.w	r3, r3, #1
    9fb8:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9fba:	6861      	ldr	r1, [r4, #4]
    9fbc:	4620      	mov	r0, r4
    9fbe:	f01e fe30 	bl	28c22 <idx_inc>
    9fc2:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    9fc4:	4620      	mov	r0, r4
    9fc6:	f01e fe50 	bl	28c6a <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fca:	4630      	mov	r0, r6
    9fcc:	f01b fc3a 	bl	25844 <z_spin_unlock_valid>
    9fd0:	b930      	cbnz	r0, 9fe0 <mpsc_pbuf_commit+0x74>
    9fd2:	4906      	ldr	r1, [pc, #24]	; (9fec <mpsc_pbuf_commit+0x80>)
    9fd4:	22c2      	movs	r2, #194	; 0xc2
    9fd6:	4806      	ldr	r0, [pc, #24]	; (9ff0 <mpsc_pbuf_commit+0x84>)
    9fd8:	f01e fdf4 	bl	28bc4 <assert_print>
    9fdc:	21c2      	movs	r1, #194	; 0xc2
    9fde:	e7e1      	b.n	9fa4 <mpsc_pbuf_commit+0x38>
	__asm__ volatile(
    9fe0:	f388 8811 	msr	BASEPRI, r8
    9fe4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    9fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fec:	00030eb4 	.word	0x00030eb4
    9ff0:	00030da5 	.word	0x00030da5

00009ff4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    9ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ff8:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    9ffa:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    9ffe:	f04f 0320 	mov.w	r3, #32
    a002:	f3ef 8811 	mrs	r8, BASEPRI
    a006:	f383 8812 	msr	BASEPRI_MAX, r3
    a00a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a00e:	4638      	mov	r0, r7
    a010:	f01b fc0a 	bl	25828 <z_spin_lock_valid>
    a014:	4605      	mov	r5, r0
    a016:	b940      	cbnz	r0, a02a <mpsc_pbuf_claim+0x36>
    a018:	492e      	ldr	r1, [pc, #184]	; (a0d4 <mpsc_pbuf_claim+0xe0>)
    a01a:	2294      	movs	r2, #148	; 0x94
    a01c:	482e      	ldr	r0, [pc, #184]	; (a0d8 <mpsc_pbuf_claim+0xe4>)
    a01e:	f01e fdd1 	bl	28bc4 <assert_print>
    a022:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a024:	482b      	ldr	r0, [pc, #172]	; (a0d4 <mpsc_pbuf_claim+0xe0>)
    a026:	f01e fdc6 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    a02a:	4638      	mov	r0, r7
    a02c:	f01b fc18 	bl	25860 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a030:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    a034:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a036:	bf88      	it	hi
    a038:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    a03a:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    a03c:	2b00      	cmp	r3, #0
    a03e:	d03a      	beq.n	a0b6 <mpsc_pbuf_claim+0xc2>
		item = (union mpsc_pbuf_generic *)
    a040:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    a042:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    a046:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    a04a:	f013 0003 	ands.w	r0, r3, #3
    a04e:	d035      	beq.n	a0bc <mpsc_pbuf_claim+0xc8>
	if (item->hdr.busy && !item->hdr.valid) {
    a050:	2802      	cmp	r0, #2
    a052:	d103      	bne.n	a05c <mpsc_pbuf_claim+0x68>
		return item->skip.len;
    a054:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    a058:	08b6      	lsrs	r6, r6, #2
    a05a:	d105      	bne.n	a068 <mpsc_pbuf_claim+0x74>
    a05c:	07d8      	lsls	r0, r3, #31
    a05e:	d41a      	bmi.n	a096 <mpsc_pbuf_claim+0xa2>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    a060:	4648      	mov	r0, r9
    a062:	69e3      	ldr	r3, [r4, #28]
    a064:	4798      	blx	r3
    a066:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    a068:	68a1      	ldr	r1, [r4, #8]
    a06a:	4632      	mov	r2, r6
    a06c:	4620      	mov	r0, r4
    a06e:	f01e fdd8 	bl	28c22 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    a072:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    a074:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    a076:	4632      	mov	r2, r6
    a078:	4620      	mov	r0, r4
    a07a:	f01e fdd2 	bl	28c22 <idx_inc>
				buffer->rd_idx =
    a07e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a080:	4638      	mov	r0, r7
    a082:	f01b fbdf 	bl	25844 <z_spin_unlock_valid>
    a086:	b9d8      	cbnz	r0, a0c0 <mpsc_pbuf_claim+0xcc>
    a088:	4912      	ldr	r1, [pc, #72]	; (a0d4 <mpsc_pbuf_claim+0xe0>)
    a08a:	22c2      	movs	r2, #194	; 0xc2
    a08c:	4812      	ldr	r0, [pc, #72]	; (a0d8 <mpsc_pbuf_claim+0xe4>)
    a08e:	f01e fd99 	bl	28bc4 <assert_print>
    a092:	21c2      	movs	r1, #194	; 0xc2
    a094:	e7c6      	b.n	a024 <mpsc_pbuf_claim+0x30>
				cont = true;
			} else {
				item->hdr.busy = 1;
    a096:	f043 0302 	orr.w	r3, r3, #2
    a09a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    a09e:	69e3      	ldr	r3, [r4, #28]
    a0a0:	4648      	mov	r0, r9
    a0a2:	68a5      	ldr	r5, [r4, #8]
    a0a4:	4798      	blx	r3
    a0a6:	4629      	mov	r1, r5
    a0a8:	4602      	mov	r2, r0
    a0aa:	4620      	mov	r0, r4
    a0ac:	f01e fdb9 	bl	28c22 <idx_inc>
		cont = false;
    a0b0:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    a0b2:	60a0      	str	r0, [r4, #8]
    a0b4:	e7e4      	b.n	a080 <mpsc_pbuf_claim+0x8c>
		cont = false;
    a0b6:	461d      	mov	r5, r3
			item = NULL;
    a0b8:	46a9      	mov	r9, r5
    a0ba:	e7e1      	b.n	a080 <mpsc_pbuf_claim+0x8c>
		cont = false;
    a0bc:	4605      	mov	r5, r0
    a0be:	e7fb      	b.n	a0b8 <mpsc_pbuf_claim+0xc4>
	__asm__ volatile(
    a0c0:	f388 8811 	msr	BASEPRI, r8
    a0c4:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    a0c8:	2d00      	cmp	r5, #0
    a0ca:	d198      	bne.n	9ffe <mpsc_pbuf_claim+0xa>

	return item;
}
    a0cc:	4648      	mov	r0, r9
    a0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0d2:	bf00      	nop
    a0d4:	00030eb4 	.word	0x00030eb4
    a0d8:	00030da5 	.word	0x00030da5

0000a0dc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0e0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a0e2:	69c3      	ldr	r3, [r0, #28]
    a0e4:	4608      	mov	r0, r1
{
    a0e6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a0e8:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    a0ea:	f104 0714 	add.w	r7, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    a0ee:	4606      	mov	r6, r0
	__asm__ volatile(
    a0f0:	f04f 0320 	mov.w	r3, #32
    a0f4:	f3ef 8811 	mrs	r8, BASEPRI
    a0f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a0fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a100:	4638      	mov	r0, r7
    a102:	f01b fb91 	bl	25828 <z_spin_lock_valid>
    a106:	b940      	cbnz	r0, a11a <mpsc_pbuf_free+0x3e>
    a108:	491e      	ldr	r1, [pc, #120]	; (a184 <mpsc_pbuf_free+0xa8>)
    a10a:	2294      	movs	r2, #148	; 0x94
    a10c:	481e      	ldr	r0, [pc, #120]	; (a188 <mpsc_pbuf_free+0xac>)
    a10e:	f01e fd59 	bl	28bc4 <assert_print>
    a112:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a114:	481b      	ldr	r0, [pc, #108]	; (a184 <mpsc_pbuf_free+0xa8>)
    a116:	f01e fd4e 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    a11a:	4638      	mov	r0, r7
    a11c:	f01b fba0 	bl	25860 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    a120:	782b      	ldrb	r3, [r5, #0]
    a122:	f36f 0300 	bfc	r3, #0, #1
    a126:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a128:	6923      	ldr	r3, [r4, #16]
    a12a:	079b      	lsls	r3, r3, #30
    a12c:	d505      	bpl.n	a13a <mpsc_pbuf_free+0x5e>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    a12e:	68e2      	ldr	r2, [r4, #12]
    a130:	6a23      	ldr	r3, [r4, #32]
    a132:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a136:	429d      	cmp	r5, r3
    a138:	d114      	bne.n	a164 <mpsc_pbuf_free+0x88>
		witem->hdr.busy = 0;
    a13a:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a13c:	4632      	mov	r2, r6
		witem->hdr.busy = 0;
    a13e:	f36f 0341 	bfc	r3, #1, #1
    a142:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a144:	68e1      	ldr	r1, [r4, #12]
    a146:	4620      	mov	r0, r4
    a148:	f01e fd6b 	bl	28c22 <idx_inc>
    a14c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a14e:	4638      	mov	r0, r7
    a150:	f01b fb78 	bl	25844 <z_spin_unlock_valid>
    a154:	b958      	cbnz	r0, a16e <mpsc_pbuf_free+0x92>
    a156:	490b      	ldr	r1, [pc, #44]	; (a184 <mpsc_pbuf_free+0xa8>)
    a158:	22c2      	movs	r2, #194	; 0xc2
    a15a:	480b      	ldr	r0, [pc, #44]	; (a188 <mpsc_pbuf_free+0xac>)
    a15c:	f01e fd32 	bl	28bc4 <assert_print>
    a160:	21c2      	movs	r1, #194	; 0xc2
    a162:	e7d7      	b.n	a114 <mpsc_pbuf_free+0x38>
	} else {
		witem->skip.len = wlen;
    a164:	682b      	ldr	r3, [r5, #0]
    a166:	f366 039f 	bfi	r3, r6, #2, #30
    a16a:	602b      	str	r3, [r5, #0]
    a16c:	e7ef      	b.n	a14e <mpsc_pbuf_free+0x72>
	__asm__ volatile(
    a16e:	f388 8811 	msr	BASEPRI, r8
    a172:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a176:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    a17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a17e:	f01b bdab 	b.w	25cd8 <z_impl_k_sem_give>
    a182:	bf00      	nop
    a184:	00030eb4 	.word	0x00030eb4
    a188:	00030da5 	.word	0x00030da5

0000a18c <z_arm_on_enter_cpu_idle>:
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static bool suppress_warning;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    a18c:	2305      	movs	r3, #5
{
    a18e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    a190:	4d1d      	ldr	r5, [pc, #116]	; (a208 <z_arm_on_enter_cpu_idle+0x7c>)
{
    a192:	b087      	sub	sp, #28
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    a194:	782c      	ldrb	r4, [r5, #0]
    a196:	4f1d      	ldr	r7, [pc, #116]	; (a20c <z_arm_on_enter_cpu_idle+0x80>)
    a198:	3401      	adds	r4, #1
    a19a:	fbb4 f3f3 	udiv	r3, r4, r3
    a19e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a1a2:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a1a4:	f024 f8d5 	bl	2e352 <sys_clock_cycle_get_32>
	uint32_t now = k_cycle_get_32();

	if (timestamps_filled &&
    a1a8:	4a19      	ldr	r2, [pc, #100]	; (a210 <z_arm_on_enter_cpu_idle+0x84>)
    a1aa:	4e1a      	ldr	r6, [pc, #104]	; (a214 <z_arm_on_enter_cpu_idle+0x88>)
    a1ac:	7813      	ldrb	r3, [r2, #0]
    a1ae:	b1ab      	cbz	r3, a1dc <z_arm_on_enter_cpu_idle+0x50>
	    /* + 1 because only fully elapsed cycles need to be counted. */
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    a1b0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    a1b4:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    a1b6:	2807      	cmp	r0, #7
    a1b8:	d810      	bhi.n	a1dc <z_arm_on_enter_cpu_idle+0x50>
		if (!suppress_warning) {
    a1ba:	7833      	ldrb	r3, [r6, #0]
    a1bc:	b95b      	cbnz	r3, a1d6 <z_arm_on_enter_cpu_idle+0x4a>
			LOG_WRN("Anomaly 160 trigger conditions detected.");
    a1be:	4a16      	ldr	r2, [pc, #88]	; (a218 <z_arm_on_enter_cpu_idle+0x8c>)
    a1c0:	9205      	str	r2, [sp, #20]
    a1c2:	2202      	movs	r2, #2
    a1c4:	9204      	str	r2, [sp, #16]
    a1c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a1ca:	4814      	ldr	r0, [pc, #80]	; (a21c <z_arm_on_enter_cpu_idle+0x90>)
    a1cc:	aa04      	add	r2, sp, #16
    a1ce:	f000 fcc5 	bl	ab5c <z_impl_z_log_msg_static_create>
			suppress_warning = true;
    a1d2:	2301      	movs	r3, #1
    a1d4:	7033      	strb	r3, [r6, #0]
		}
		return false;
    a1d6:	2000      	movs	r0, #0
	}

	timestamps[current] = k_cycle_get_32();

	return true;
}
    a1d8:	b007      	add	sp, #28
    a1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	suppress_warning = false;
    a1dc:	2100      	movs	r1, #0
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a1de:	4b10      	ldr	r3, [pc, #64]	; (a220 <z_arm_on_enter_cpu_idle+0x94>)
    a1e0:	7031      	strb	r1, [r6, #0]
    a1e2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    a1e6:	b138      	cbz	r0, a1f8 <z_arm_on_enter_cpu_idle+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a1e8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    a1ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    a1f0:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    a1f2:	b90c      	cbnz	r4, a1f8 <z_arm_on_enter_cpu_idle+0x6c>
			timestamps_filled = true;
    a1f4:	2301      	movs	r3, #1
    a1f6:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    a1f8:	782c      	ldrb	r4, [r5, #0]
    a1fa:	f024 f8aa 	bl	2e352 <sys_clock_cycle_get_32>
    a1fe:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	return true;
    a202:	2001      	movs	r0, #1
    a204:	e7e8      	b.n	a1d8 <z_arm_on_enter_cpu_idle+0x4c>
    a206:	bf00      	nop
    a208:	2000b1dd 	.word	0x2000b1dd
    a20c:	2000a5bc 	.word	0x2000a5bc
    a210:	2000b1dc 	.word	0x2000b1dc
    a214:	2000b1db 	.word	0x2000b1db
    a218:	00030f40 	.word	0x00030f40
    a21c:	0002fddc 	.word	0x0002fddc
    a220:	40005000 	.word	0x40005000

0000a224 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    a224:	b148      	cbz	r0, a23a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    a226:	4b05      	ldr	r3, [pc, #20]	; (a23c <arch_busy_wait+0x18>)
    a228:	4a05      	ldr	r2, [pc, #20]	; (a240 <arch_busy_wait+0x1c>)
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    a230:	4358      	muls	r0, r3
    a232:	4b04      	ldr	r3, [pc, #16]	; (a244 <arch_busy_wait+0x20>)
    a234:	f043 0301 	orr.w	r3, r3, #1
    a238:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    a23a:	4770      	bx	lr
    a23c:	20008b00 	.word	0x20008b00
    a240:	000f4240 	.word	0x000f4240
    a244:	0002fff0 	.word	0x0002fff0

0000a248 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    a248:	b5f0      	push	{r4, r5, r6, r7, lr}
    a24a:	b083      	sub	sp, #12
    a24c:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    a24e:	1d38      	adds	r0, r7, #4
    a250:	f019 f8f6 	bl	23440 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    a254:	4b33      	ldr	r3, [pc, #204]	; (a324 <sync_rtc_setup+0xdc>)
    a256:	4298      	cmp	r0, r3
    a258:	d161      	bne.n	a31e <sync_rtc_setup+0xd6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    a25a:	f017 ff41 	bl	220e0 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    a25e:	1e04      	subs	r4, r0, #0
    a260:	da13      	bge.n	a28a <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    a262:	7938      	ldrb	r0, [r7, #4]
    a264:	f019 f8f2 	bl	2344c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    a268:	466d      	mov	r5, sp
    a26a:	b088      	sub	sp, #32
    a26c:	466a      	mov	r2, sp
    a26e:	4b2e      	ldr	r3, [pc, #184]	; (a328 <sync_rtc_setup+0xe0>)
    a270:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a274:	2303      	movs	r3, #3
    a276:	f842 3f10 	str.w	r3, [r2, #16]!
    a27a:	2300      	movs	r3, #0
    a27c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a280:	482a      	ldr	r0, [pc, #168]	; (a32c <sync_rtc_setup+0xe4>)
    a282:	f000 fc6b 	bl	ab5c <z_impl_z_log_msg_static_create>
    a286:	46ad      	mov	sp, r5
	}

	return rv;
    a288:	e045      	b.n	a316 <sync_rtc_setup+0xce>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a28a:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    a28e:	4d28      	ldr	r5, [pc, #160]	; (a330 <sync_rtc_setup+0xe8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    a290:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    a292:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    a294:	80fb      	strh	r3, [r7, #6]
    a296:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	b914      	cbnz	r4, a2a2 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    a29c:	f06f 0457 	mvn.w	r4, #87	; 0x57
    a2a0:	e7e2      	b.n	a268 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    a2a2:	2108      	movs	r1, #8
    a2a4:	4628      	mov	r0, r5
    a2a6:	4a23      	ldr	r2, [pc, #140]	; (a334 <sync_rtc_setup+0xec>)
    a2a8:	47a0      	blx	r4
	if (err < 0) {
    a2aa:	1e04      	subs	r4, r0, #0
    a2ac:	dbdc      	blt.n	a268 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    a2ae:	6933      	ldr	r3, [r6, #16]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d0f3      	beq.n	a29c <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    a2b4:	2201      	movs	r2, #1
    a2b6:	2108      	movs	r1, #8
    a2b8:	4628      	mov	r0, r5
    a2ba:	4798      	blx	r3
	if (rv < 0) {
    a2bc:	1e04      	subs	r4, r0, #0
    a2be:	dbd3      	blt.n	a268 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    a2c0:	2301      	movs	r3, #1
    a2c2:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a2c4:	4a1c      	ldr	r2, [pc, #112]	; (a338 <sync_rtc_setup+0xf0>)
    a2c6:	40ab      	lsls	r3, r5
    a2c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    a2cc:	79fb      	ldrb	r3, [r7, #7]
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    a2ce:	7978      	ldrb	r0, [r7, #5]
    a2d0:	2b0f      	cmp	r3, #15
    a2d2:	d90a      	bls.n	a2ea <sync_rtc_setup+0xa2>
    a2d4:	4919      	ldr	r1, [pc, #100]	; (a33c <sync_rtc_setup+0xf4>)
    a2d6:	481a      	ldr	r0, [pc, #104]	; (a340 <sync_rtc_setup+0xf8>)
    a2d8:	f240 12e7 	movw	r2, #487	; 0x1e7
    a2dc:	f01e fc72 	bl	28bc4 <assert_print>
    a2e0:	f240 11e7 	movw	r1, #487	; 0x1e7
    a2e4:	4815      	ldr	r0, [pc, #84]	; (a33c <sync_rtc_setup+0xf4>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    a2e6:	f01e fc66 	bl	28bb6 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a2ea:	009e      	lsls	r6, r3, #2
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    a2ec:	f017 fd3c 	bl	21d68 <z_nrf_rtc_timer_capture_task_address_get>
    a2f0:	b948      	cbnz	r0, a306 <sync_rtc_setup+0xbe>
    a2f2:	4914      	ldr	r1, [pc, #80]	; (a344 <sync_rtc_setup+0xfc>)
    a2f4:	4812      	ldr	r0, [pc, #72]	; (a340 <sync_rtc_setup+0xf8>)
    a2f6:	f240 224e 	movw	r2, #590	; 0x24e
    a2fa:	f01e fc63 	bl	28bc4 <assert_print>
    a2fe:	f240 214e 	movw	r1, #590	; 0x24e
    a302:	4810      	ldr	r0, [pc, #64]	; (a344 <sync_rtc_setup+0xfc>)
    a304:	e7ef      	b.n	a2e6 <sync_rtc_setup+0x9e>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    a306:	4b10      	ldr	r3, [pc, #64]	; (a348 <sync_rtc_setup+0x100>)
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a308:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    a30c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    a310:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    a312:	2c00      	cmp	r4, #0
    a314:	d1a8      	bne.n	a268 <sync_rtc_setup+0x20>
}
    a316:	4620      	mov	r0, r4
    a318:	370c      	adds	r7, #12
    a31a:	46bd      	mov	sp, r7
    a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    a31e:	f06f 0412 	mvn.w	r4, #18
    a322:	e7a1      	b.n	a268 <sync_rtc_setup+0x20>
    a324:	0bad0000 	.word	0x0bad0000
    a328:	00030fd7 	.word	0x00030fd7
    a32c:	0002fde4 	.word	0x0002fde4
    a330:	0002f8e4 	.word	0x0002f8e4
    a334:	0000a3e9 	.word	0x0000a3e9
    a338:	40017000 	.word	0x40017000
    a33c:	00030f6d 	.word	0x00030f6d
    a340:	00030da5 	.word	0x00030da5
    a344:	00030f9f 	.word	0x00030f9f
    a348:	4002a180 	.word	0x4002a180

0000a34c <rtc_cb>:
{
    a34c:	b570      	push	{r4, r5, r6, lr}
    a34e:	9e04      	ldr	r6, [sp, #16]
    a350:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    a354:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a356:	f3c6 2607 	ubfx	r6, r6, #8, #8
    a35a:	4630      	mov	r0, r6
    a35c:	f017 fcee 	bl	21d3c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    a360:	2c0f      	cmp	r4, #15
    a362:	d90a      	bls.n	a37a <rtc_cb+0x2e>
    a364:	4919      	ldr	r1, [pc, #100]	; (a3cc <rtc_cb+0x80>)
    a366:	481a      	ldr	r0, [pc, #104]	; (a3d0 <rtc_cb+0x84>)
    a368:	f240 12e1 	movw	r2, #481	; 0x1e1
    a36c:	f01e fc2a 	bl	28bc4 <assert_print>
    a370:	f240 11e1 	movw	r1, #481	; 0x1e1
    a374:	4815      	ldr	r0, [pc, #84]	; (a3cc <rtc_cb+0x80>)
    nrfx_gppi_task_endpoint_setup(channel, tep);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    a376:	f01e fc1e 	bl	28bb6 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a37a:	00a4      	lsls	r4, r4, #2
    a37c:	b2e4      	uxtb	r4, r4
    a37e:	b948      	cbnz	r0, a394 <rtc_cb+0x48>
    a380:	4914      	ldr	r1, [pc, #80]	; (a3d4 <rtc_cb+0x88>)
    a382:	4813      	ldr	r0, [pc, #76]	; (a3d0 <rtc_cb+0x84>)
    a384:	f44f 7217 	mov.w	r2, #604	; 0x25c
    a388:	f01e fc1c 	bl	28bc4 <assert_print>
    a38c:	f44f 7117 	mov.w	r1, #604	; 0x25c
    a390:	4810      	ldr	r0, [pc, #64]	; (a3d4 <rtc_cb+0x88>)
    a392:	e7f0      	b.n	a376 <rtc_cb+0x2a>
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    a394:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    a396:	4b10      	ldr	r3, [pc, #64]	; (a3d8 <rtc_cb+0x8c>)
    a398:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    a39c:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    a39e:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    a3a0:	4a0e      	ldr	r2, [pc, #56]	; (a3dc <rtc_cb+0x90>)
    a3a2:	40ab      	lsls	r3, r5
    a3a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    a3a8:	4630      	mov	r0, r6
    a3aa:	f017 feb7 	bl	2211c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    a3ae:	4628      	mov	r0, r5
    a3b0:	f019 f84c 	bl	2344c <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    a3b4:	4b0a      	ldr	r3, [pc, #40]	; (a3e0 <rtc_cb+0x94>)
    a3b6:	4298      	cmp	r0, r3
    a3b8:	d007      	beq.n	a3ca <rtc_cb+0x7e>
    a3ba:	490a      	ldr	r1, [pc, #40]	; (a3e4 <rtc_cb+0x98>)
    a3bc:	4804      	ldr	r0, [pc, #16]	; (a3d0 <rtc_cb+0x84>)
    a3be:	2274      	movs	r2, #116	; 0x74
    a3c0:	f01e fc00 	bl	28bc4 <assert_print>
    a3c4:	2174      	movs	r1, #116	; 0x74
    a3c6:	4807      	ldr	r0, [pc, #28]	; (a3e4 <rtc_cb+0x98>)
    a3c8:	e7d5      	b.n	a376 <rtc_cb+0x2a>
}
    a3ca:	bd70      	pop	{r4, r5, r6, pc}
    a3cc:	00030f6d 	.word	0x00030f6d
    a3d0:	00030da5 	.word	0x00030da5
    a3d4:	00030f9f 	.word	0x00030f9f
    a3d8:	4002a080 	.word	0x4002a080
    a3dc:	40017000 	.word	0x40017000
    a3e0:	0bad0000 	.word	0x0bad0000
    a3e4:	00030fff 	.word	0x00030fff

0000a3e8 <mbox_callback>:
{
    a3e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a3ec:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    a3ee:	6883      	ldr	r3, [r0, #8]
    a3f0:	691b      	ldr	r3, [r3, #16]
    a3f2:	b943      	cbnz	r3, a406 <mbox_callback+0x1e>
	__ASSERT_NO_MSG(err == 0);
    a3f4:	4932      	ldr	r1, [pc, #200]	; (a4c0 <mbox_callback+0xd8>)
    a3f6:	4833      	ldr	r0, [pc, #204]	; (a4c4 <mbox_callback+0xdc>)
    a3f8:	22ca      	movs	r2, #202	; 0xca
    a3fa:	f01e fbe3 	bl	28bc4 <assert_print>
    a3fe:	21ca      	movs	r1, #202	; 0xca
    a400:	482f      	ldr	r0, [pc, #188]	; (a4c0 <mbox_callback+0xd8>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    a402:	f01e fbd8 	bl	28bb6 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    a406:	2200      	movs	r2, #0
    a408:	4798      	blx	r3
    a40a:	4605      	mov	r5, r0
    a40c:	2800      	cmp	r0, #0
    a40e:	d1f1      	bne.n	a3f4 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    a410:	f3c4 2807 	ubfx	r8, r4, #8, #8
    a414:	4640      	mov	r0, r8
    a416:	f017 fcbf 	bl	21d98 <z_nrf_rtc_timer_compare_read>
    a41a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
    a41e:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    a420:	ea4f 6614 	mov.w	r6, r4, lsr #24
    a424:	d309      	bcc.n	a43a <mbox_callback+0x52>
    a426:	4928      	ldr	r1, [pc, #160]	; (a4c8 <mbox_callback+0xe0>)
    a428:	f240 12e7 	movw	r2, #487	; 0x1e7
    a42c:	4825      	ldr	r0, [pc, #148]	; (a4c4 <mbox_callback+0xdc>)
    a42e:	f01e fbc9 	bl	28bc4 <assert_print>
    a432:	f240 11e7 	movw	r1, #487	; 0x1e7
    a436:	4824      	ldr	r0, [pc, #144]	; (a4c8 <mbox_callback+0xe0>)
    a438:	e7e3      	b.n	a402 <mbox_callback+0x1a>
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    a43a:	4640      	mov	r0, r8
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    a43c:	00b6      	lsls	r6, r6, #2
    a43e:	f017 fc93 	bl	21d68 <z_nrf_rtc_timer_capture_task_address_get>
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    a442:	b948      	cbnz	r0, a458 <mbox_callback+0x70>
    a444:	4921      	ldr	r1, [pc, #132]	; (a4cc <mbox_callback+0xe4>)
    a446:	f240 2263 	movw	r2, #611	; 0x263
    a44a:	481e      	ldr	r0, [pc, #120]	; (a4c4 <mbox_callback+0xdc>)
    a44c:	f01e fbba 	bl	28bc4 <assert_print>
    a450:	f240 2163 	movw	r1, #611	; 0x263
    NRFX_ASSERT(eep);
    a454:	481d      	ldr	r0, [pc, #116]	; (a4cc <mbox_callback+0xe4>)
    a456:	e7d4      	b.n	a402 <mbox_callback+0x1a>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    a458:	4b1d      	ldr	r3, [pc, #116]	; (a4d0 <mbox_callback+0xe8>)
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    a45a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    a45e:	519d      	str	r5, [r3, r6]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    a460:	4640      	mov	r0, r8
    a462:	f3c4 4607 	ubfx	r6, r4, #16, #8
    a466:	f017 fc69 	bl	21d3c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    a46a:	2e0f      	cmp	r6, #15
    a46c:	d908      	bls.n	a480 <mbox_callback+0x98>
    a46e:	4916      	ldr	r1, [pc, #88]	; (a4c8 <mbox_callback+0xe0>)
    a470:	f240 12e1 	movw	r2, #481	; 0x1e1
    a474:	4813      	ldr	r0, [pc, #76]	; (a4c4 <mbox_callback+0xdc>)
    a476:	f01e fba5 	bl	28bc4 <assert_print>
    a47a:	f240 11e1 	movw	r1, #481	; 0x1e1
    a47e:	e7da      	b.n	a436 <mbox_callback+0x4e>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a480:	4a14      	ldr	r2, [pc, #80]	; (a4d4 <mbox_callback+0xec>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    a482:	00b6      	lsls	r6, r6, #2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    a484:	b2e3      	uxtb	r3, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a486:	b2f6      	uxtb	r6, r6
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    a488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    a48c:	5193      	str	r3, [r2, r6]
    NRFX_ASSERT(eep);
    a48e:	b940      	cbnz	r0, a4a2 <mbox_callback+0xba>
    a490:	490e      	ldr	r1, [pc, #56]	; (a4cc <mbox_callback+0xe4>)
    a492:	f44f 7212 	mov.w	r2, #584	; 0x248
    a496:	480b      	ldr	r0, [pc, #44]	; (a4c4 <mbox_callback+0xdc>)
    a498:	f01e fb94 	bl	28bc4 <assert_print>
    a49c:	f44f 7112 	mov.w	r1, #584	; 0x248
    a4a0:	e7d8      	b.n	a454 <mbox_callback+0x6c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a4a2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    a4a6:	4b0c      	ldr	r3, [pc, #48]	; (a4d8 <mbox_callback+0xf0>)
    a4a8:	f107 0232 	add.w	r2, r7, #50	; 0x32
    a4ac:	9300      	str	r3, [sp, #0]
    a4ae:	4640      	mov	r0, r8
    a4b0:	462b      	mov	r3, r5
    a4b2:	9401      	str	r4, [sp, #4]
    a4b4:	0052      	lsls	r2, r2, #1
    a4b6:	f017 fd33 	bl	21f20 <z_nrf_rtc_timer_set>
}
    a4ba:	b002      	add	sp, #8
    a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4c0:	00030fff 	.word	0x00030fff
    a4c4:	00030da5 	.word	0x00030da5
    a4c8:	00030f6d 	.word	0x00030f6d
    a4cc:	00030f9f 	.word	0x00030f9f
    a4d0:	4002a180 	.word	0x4002a180
    a4d4:	4002a080 	.word	0x4002a080
    a4d8:	0000a34d 	.word	0x0000a34d

0000a4dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a4dc:	f024 b9b4 	b.w	2e848 <SystemInit>

0000a4e0 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    a4e0:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    a4e2:	aa01      	add	r2, sp, #4
    a4e4:	f024 f997 	bl	2e816 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    a4e8:	b140      	cbz	r0, a4fc <soc_secure_gpio_pin_mcu_select+0x1c>
    a4ea:	490a      	ldr	r1, [pc, #40]	; (a514 <soc_secure_gpio_pin_mcu_select+0x34>)
    a4ec:	2216      	movs	r2, #22
    a4ee:	480a      	ldr	r0, [pc, #40]	; (a518 <soc_secure_gpio_pin_mcu_select+0x38>)
    a4f0:	f01e fb68 	bl	28bc4 <assert_print>
    a4f4:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    a4f6:	4807      	ldr	r0, [pc, #28]	; (a514 <soc_secure_gpio_pin_mcu_select+0x34>)
    a4f8:	f01e fb5d 	bl	28bb6 <assert_post_action>
    a4fc:	9b01      	ldr	r3, [sp, #4]
    a4fe:	b133      	cbz	r3, a50e <soc_secure_gpio_pin_mcu_select+0x2e>
    a500:	4904      	ldr	r1, [pc, #16]	; (a514 <soc_secure_gpio_pin_mcu_select+0x34>)
    a502:	2217      	movs	r2, #23
    a504:	4804      	ldr	r0, [pc, #16]	; (a518 <soc_secure_gpio_pin_mcu_select+0x38>)
    a506:	f01e fb5d 	bl	28bc4 <assert_print>
    a50a:	2117      	movs	r1, #23
    a50c:	e7f3      	b.n	a4f6 <soc_secure_gpio_pin_mcu_select+0x16>
}
    a50e:	b003      	add	sp, #12
    a510:	f85d fb04 	ldr.w	pc, [sp], #4
    a514:	0003103f 	.word	0x0003103f
    a518:	00030da5 	.word	0x00030da5

0000a51c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a51c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    a51e:	2200      	movs	r2, #0
{
    a520:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    a522:	490f      	ldr	r1, [pc, #60]	; (a560 <enable_logger+0x44>)
    a524:	480f      	ldr	r0, [pc, #60]	; (a564 <enable_logger+0x48>)
    a526:	f025 f846 	bl	2f5b6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a52a:	2200      	movs	r2, #0
    a52c:	2300      	movs	r3, #0
    a52e:	2400      	movs	r4, #0
    a530:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a534:	230e      	movs	r3, #14
    a536:	4d0c      	ldr	r5, [pc, #48]	; (a568 <enable_logger+0x4c>)
    a538:	e9cd 3403 	strd	r3, r4, [sp, #12]
    a53c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a540:	4628      	mov	r0, r5
    a542:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a546:	4b09      	ldr	r3, [pc, #36]	; (a56c <enable_logger+0x50>)
    a548:	4909      	ldr	r1, [pc, #36]	; (a570 <enable_logger+0x54>)
    a54a:	9400      	str	r4, [sp, #0]
    a54c:	f01b f8b6 	bl	256bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a550:	4908      	ldr	r1, [pc, #32]	; (a574 <enable_logger+0x58>)
    a552:	4628      	mov	r0, r5
    a554:	f024 ff13 	bl	2f37e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    a558:	4620      	mov	r0, r4
    a55a:	b009      	add	sp, #36	; 0x24
    a55c:	bd30      	pop	{r4, r5, pc}
    a55e:	bf00      	nop
    a560:	0000a6a5 	.word	0x0000a6a5
    a564:	200095b8 	.word	0x200095b8
    a568:	20009128 	.word	0x20009128
    a56c:	0000a945 	.word	0x0000a945
    a570:	2000b350 	.word	0x2000b350
    a574:	00031079 	.word	0x00031079

0000a578 <activate_foreach_backend>:
{
    a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a57c:	4604      	mov	r4, r0
	while (mask_cpy) {
    a57e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    a580:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a584:	f8df 8050 	ldr.w	r8, [pc, #80]	; a5d8 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    a588:	b914      	cbnz	r4, a590 <activate_foreach_backend+0x18>
}
    a58a:	4638      	mov	r0, r7
    a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    a590:	fa94 f5a4 	rbit	r5, r4
    a594:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    a598:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a59c:	012e      	lsls	r6, r5, #4
    a59e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    a5a2:	ea6f 0a03 	mvn.w	sl, r3
    a5a6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a5aa:	7b2b      	ldrb	r3, [r5, #12]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d0eb      	beq.n	a588 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a5b0:	f858 3006 	ldr.w	r3, [r8, r6]
    a5b4:	691b      	ldr	r3, [r3, #16]
    a5b6:	b94b      	cbnz	r3, a5cc <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    a5b8:	4446      	add	r6, r8
			log_backend_enable(backend,
    a5ba:	6873      	ldr	r3, [r6, #4]
    a5bc:	2204      	movs	r2, #4
    a5be:	4628      	mov	r0, r5
    a5c0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a5c2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    a5c6:	f000 faa5 	bl	ab14 <log_backend_enable>
    a5ca:	e7dd      	b.n	a588 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    a5cc:	4628      	mov	r0, r5
    a5ce:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a5d0:	2800      	cmp	r0, #0
    a5d2:	d1d9      	bne.n	a588 <activate_foreach_backend+0x10>
    a5d4:	e7f0      	b.n	a5b8 <activate_foreach_backend+0x40>
    a5d6:	bf00      	nop
    a5d8:	0002fdf4 	.word	0x0002fdf4

0000a5dc <z_log_init>:
{
    a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    a5e0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; a690 <z_log_init+0xb4>
    a5e4:	4c2b      	ldr	r4, [pc, #172]	; (a694 <z_log_init+0xb8>)
    a5e6:	4680      	mov	r8, r0
    a5e8:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    a5ec:	2b9f      	cmp	r3, #159	; 0x9f
{
    a5ee:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    a5f0:	d90a      	bls.n	a608 <z_log_init+0x2c>
    a5f2:	4929      	ldr	r1, [pc, #164]	; (a698 <z_log_init+0xbc>)
    a5f4:	f240 1215 	movw	r2, #277	; 0x115
    a5f8:	4828      	ldr	r0, [pc, #160]	; (a69c <z_log_init+0xc0>)
    a5fa:	f01e fae3 	bl	28bc4 <assert_print>
    a5fe:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a602:	4825      	ldr	r0, [pc, #148]	; (a698 <z_log_init+0xbc>)
    a604:	f01e fad7 	bl	28bb6 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    a608:	4825      	ldr	r0, [pc, #148]	; (a6a0 <z_log_init+0xc4>)
    a60a:	f01e fc0c 	bl	28e26 <atomic_inc>
    a60e:	4606      	mov	r6, r0
    a610:	b340      	cbz	r0, a664 <z_log_init+0x88>
	uint32_t mask = 0;
    a612:	2500      	movs	r5, #0
}
    a614:	4628      	mov	r0, r5
    a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    a61a:	7b23      	ldrb	r3, [r4, #12]
    a61c:	b173      	cbz	r3, a63c <z_log_init+0x60>
	if (backend->api->init) {
    a61e:	6823      	ldr	r3, [r4, #0]
    a620:	68db      	ldr	r3, [r3, #12]
    a622:	b10b      	cbz	r3, a628 <z_log_init+0x4c>
		backend->api->init(backend);
    a624:	4620      	mov	r0, r4
    a626:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    a628:	6823      	ldr	r3, [r4, #0]
    a62a:	691b      	ldr	r3, [r3, #16]
    a62c:	b993      	cbnz	r3, a654 <z_log_init+0x78>
				log_backend_enable(backend,
    a62e:	6863      	ldr	r3, [r4, #4]
    a630:	2204      	movs	r2, #4
    a632:	4620      	mov	r0, r4
    a634:	6819      	ldr	r1, [r3, #0]
    a636:	f000 fa6d 	bl	ab14 <log_backend_enable>
			i++;
    a63a:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a63c:	3410      	adds	r4, #16
    a63e:	454c      	cmp	r4, r9
    a640:	d914      	bls.n	a66c <z_log_init+0x90>
    a642:	4915      	ldr	r1, [pc, #84]	; (a698 <z_log_init+0xbc>)
    a644:	f44f 7291 	mov.w	r2, #290	; 0x122
    a648:	4814      	ldr	r0, [pc, #80]	; (a69c <z_log_init+0xc0>)
    a64a:	f01e fabb 	bl	28bc4 <assert_print>
    a64e:	f44f 7191 	mov.w	r1, #290	; 0x122
    a652:	e7d6      	b.n	a602 <z_log_init+0x26>
		return backend->api->is_ready(backend);
    a654:	4620      	mov	r0, r4
    a656:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    a658:	2800      	cmp	r0, #0
    a65a:	d0e8      	beq.n	a62e <z_log_init+0x52>
				mask |= BIT(i);
    a65c:	fa0a f306 	lsl.w	r3, sl, r6
    a660:	431d      	orrs	r5, r3
    a662:	e7ea      	b.n	a63a <z_log_init+0x5e>
	uint32_t mask = 0;
    a664:	4605      	mov	r5, r0
				mask |= BIT(i);
    a666:	f04f 0a01 	mov.w	sl, #1
    a66a:	e7e8      	b.n	a63e <z_log_init+0x62>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a66c:	d3d5      	bcc.n	a61a <z_log_init+0x3e>
	if (blocking) {
    a66e:	f1b8 0f00 	cmp.w	r8, #0
    a672:	d0cf      	beq.n	a614 <z_log_init+0x38>
		while (mask) {
    a674:	2d00      	cmp	r5, #0
    a676:	d0cc      	beq.n	a612 <z_log_init+0x36>
			mask = activate_foreach_backend(mask);
    a678:	4628      	mov	r0, r5
    a67a:	f7ff ff7d 	bl	a578 <activate_foreach_backend>
    a67e:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    a680:	2f00      	cmp	r7, #0
    a682:	d0f7      	beq.n	a674 <z_log_init+0x98>
	return z_impl_k_sleep(timeout);
    a684:	2100      	movs	r1, #0
    a686:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a68a:	f01c ff95 	bl	275b8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    a68e:	e7f1      	b.n	a674 <z_log_init+0x98>
    a690:	0002fe04 	.word	0x0002fe04
    a694:	0002fdf4 	.word	0x0002fdf4
    a698:	00031081 	.word	0x00031081
    a69c:	00030da5 	.word	0x00030da5
    a6a0:	2000a5e4 	.word	0x2000a5e4

0000a6a4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    a6a4:	4801      	ldr	r0, [pc, #4]	; (a6ac <log_process_thread_timer_expiry_fn+0x8>)
    a6a6:	f01b bb17 	b.w	25cd8 <z_impl_k_sem_give>
    a6aa:	bf00      	nop
    a6ac:	20008e84 	.word	0x20008e84

0000a6b0 <log_format_func_t_get>:
}
    a6b0:	4b01      	ldr	r3, [pc, #4]	; (a6b8 <log_format_func_t_get+0x8>)
    a6b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a6b6:	4770      	bx	lr
    a6b8:	0003003c 	.word	0x0003003c

0000a6bc <log_set_timestamp_func>:
{
    a6bc:	b508      	push	{r3, lr}
    a6be:	4603      	mov	r3, r0
    a6c0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    a6c2:	b12b      	cbz	r3, a6d0 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    a6c4:	4a04      	ldr	r2, [pc, #16]	; (a6d8 <log_set_timestamp_func+0x1c>)
    a6c6:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    a6c8:	f000 fd1a 	bl	b100 <log_output_timestamp_freq_set>
	return 0;
    a6cc:	2000      	movs	r0, #0
}
    a6ce:	bd08      	pop	{r3, pc}
		return -EINVAL;
    a6d0:	f06f 0015 	mvn.w	r0, #21
    a6d4:	e7fb      	b.n	a6ce <log_set_timestamp_func+0x12>
    a6d6:	bf00      	nop
    a6d8:	20008678 	.word	0x20008678

0000a6dc <z_log_notify_backend_enabled>:
{
    a6dc:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    a6de:	4c04      	ldr	r4, [pc, #16]	; (a6f0 <z_log_notify_backend_enabled+0x14>)
    a6e0:	7823      	ldrb	r3, [r4, #0]
    a6e2:	b913      	cbnz	r3, a6ea <z_log_notify_backend_enabled+0xe>
    a6e4:	4803      	ldr	r0, [pc, #12]	; (a6f4 <z_log_notify_backend_enabled+0x18>)
    a6e6:	f01b faf7 	bl	25cd8 <z_impl_k_sem_give>
	backend_attached = true;
    a6ea:	2301      	movs	r3, #1
    a6ec:	7023      	strb	r3, [r4, #0]
}
    a6ee:	bd10      	pop	{r4, pc}
    a6f0:	2000b1de 	.word	0x2000b1de
    a6f4:	20008e84 	.word	0x20008e84

0000a6f8 <z_log_dropped>:
{
    a6f8:	b510      	push	{r4, lr}
    a6fa:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    a6fc:	4806      	ldr	r0, [pc, #24]	; (a718 <z_log_dropped+0x20>)
    a6fe:	f01e fb92 	bl	28e26 <atomic_inc>
	if (buffered) {
    a702:	b13c      	cbz	r4, a714 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a704:	4b05      	ldr	r3, [pc, #20]	; (a71c <z_log_dropped+0x24>)
    a706:	e8d3 1fef 	ldaex	r1, [r3]
    a70a:	3901      	subs	r1, #1
    a70c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a710:	2a00      	cmp	r2, #0
    a712:	d1f8      	bne.n	a706 <z_log_dropped+0xe>
}
    a714:	bd10      	pop	{r4, pc}
    a716:	bf00      	nop
    a718:	2000a5dc 	.word	0x2000a5dc
    a71c:	2000a5e0 	.word	0x2000a5e0

0000a720 <z_log_dropped_read_and_clear>:
}
    a720:	2000      	movs	r0, #0
    a722:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a724:	4b03      	ldr	r3, [pc, #12]	; (a734 <z_log_dropped_read_and_clear+0x14>)
    a726:	e8d3 0fef 	ldaex	r0, [r3]
    a72a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a72e:	2a00      	cmp	r2, #0
    a730:	d1f9      	bne.n	a726 <z_log_dropped_read_and_clear+0x6>
    a732:	4770      	bx	lr
    a734:	2000a5dc 	.word	0x2000a5dc

0000a738 <dropped_notify>:
{
    a738:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    a73a:	f7ff fff1 	bl	a720 <z_log_dropped_read_and_clear>
    a73e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a740:	4c0d      	ldr	r4, [pc, #52]	; (a778 <dropped_notify+0x40>)
    a742:	4e0e      	ldr	r6, [pc, #56]	; (a77c <dropped_notify+0x44>)
    a744:	42b4      	cmp	r4, r6
    a746:	d915      	bls.n	a774 <dropped_notify+0x3c>
    a748:	490d      	ldr	r1, [pc, #52]	; (a780 <dropped_notify+0x48>)
    a74a:	480e      	ldr	r0, [pc, #56]	; (a784 <dropped_notify+0x4c>)
    a74c:	f240 12cd 	movw	r2, #461	; 0x1cd
    a750:	f01e fa38 	bl	28bc4 <assert_print>
    a754:	f240 11cd 	movw	r1, #461	; 0x1cd
    a758:	4809      	ldr	r0, [pc, #36]	; (a780 <dropped_notify+0x48>)
    a75a:	f01e fa2c 	bl	28bb6 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a75e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a760:	795b      	ldrb	r3, [r3, #5]
    a762:	b12b      	cbz	r3, a770 <dropped_notify+0x38>
	if (backend->api->dropped != NULL) {
    a764:	6823      	ldr	r3, [r4, #0]
    a766:	685b      	ldr	r3, [r3, #4]
    a768:	b113      	cbz	r3, a770 <dropped_notify+0x38>
		backend->api->dropped(backend, cnt);
    a76a:	4629      	mov	r1, r5
    a76c:	4620      	mov	r0, r4
    a76e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a770:	3410      	adds	r4, #16
    a772:	e7e7      	b.n	a744 <dropped_notify+0xc>
    a774:	d3f3      	bcc.n	a75e <dropped_notify+0x26>
}
    a776:	bd70      	pop	{r4, r5, r6, pc}
    a778:	0002fdf4 	.word	0x0002fdf4
    a77c:	0002fe04 	.word	0x0002fe04
    a780:	00031081 	.word	0x00031081
    a784:	00030da5 	.word	0x00030da5

0000a788 <z_log_msg_init>:
{
    a788:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    a78a:	4c04      	ldr	r4, [pc, #16]	; (a79c <z_log_msg_init+0x14>)
    a78c:	4904      	ldr	r1, [pc, #16]	; (a7a0 <z_log_msg_init+0x18>)
    a78e:	4620      	mov	r0, r4
    a790:	f7ff fb12 	bl	9db8 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    a794:	4b03      	ldr	r3, [pc, #12]	; (a7a4 <z_log_msg_init+0x1c>)
    a796:	601c      	str	r4, [r3, #0]
}
    a798:	bd10      	pop	{r4, pc}
    a79a:	bf00      	nop
    a79c:	20008d44 	.word	0x20008d44
    a7a0:	00030028 	.word	0x00030028
    a7a4:	2000a5d4 	.word	0x2000a5d4

0000a7a8 <log_core_init>:
{
    a7a8:	b508      	push	{r3, lr}
	panic_mode = false;
    a7aa:	2300      	movs	r3, #0
    a7ac:	4a06      	ldr	r2, [pc, #24]	; (a7c8 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    a7ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    a7b2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    a7b4:	4a05      	ldr	r2, [pc, #20]	; (a7cc <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    a7b6:	4806      	ldr	r0, [pc, #24]	; (a7d0 <log_core_init+0x28>)
	dropped_cnt = 0;
    a7b8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    a7ba:	f7ff ff7f 	bl	a6bc <log_set_timestamp_func>
}
    a7be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    a7c2:	f7ff bfe1 	b.w	a788 <z_log_msg_init>
    a7c6:	bf00      	nop
    a7c8:	2000b1df 	.word	0x2000b1df
    a7cc:	2000a5dc 	.word	0x2000a5dc
    a7d0:	00028e23 	.word	0x00028e23

0000a7d4 <z_log_msg_alloc>:
{
    a7d4:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    a7d6:	2200      	movs	r2, #0
    a7d8:	2300      	movs	r3, #0
    a7da:	4801      	ldr	r0, [pc, #4]	; (a7e0 <z_log_msg_alloc+0xc>)
    a7dc:	f7ff bb1a 	b.w	9e14 <mpsc_pbuf_alloc>
    a7e0:	20008d44 	.word	0x20008d44

0000a7e4 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    a7e4:	4801      	ldr	r0, [pc, #4]	; (a7ec <z_log_msg_local_claim+0x8>)
    a7e6:	f7ff bc05 	b.w	9ff4 <mpsc_pbuf_claim>
    a7ea:	bf00      	nop
    a7ec:	20008d44 	.word	0x20008d44

0000a7f0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    a7f0:	4b02      	ldr	r3, [pc, #8]	; (a7fc <z_log_msg_free+0xc>)
{
    a7f2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    a7f4:	6818      	ldr	r0, [r3, #0]
    a7f6:	f7ff bc71 	b.w	a0dc <mpsc_pbuf_free>
    a7fa:	bf00      	nop
    a7fc:	2000a5d4 	.word	0x2000a5d4

0000a800 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    a800:	4801      	ldr	r0, [pc, #4]	; (a808 <z_log_msg_pending+0x8>)
    a802:	f01e ba99 	b.w	28d38 <mpsc_pbuf_is_pending>
    a806:	bf00      	nop
    a808:	20008d44 	.word	0x20008d44

0000a80c <z_impl_log_process>:
{
    a80c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    a80e:	4b2c      	ldr	r3, [pc, #176]	; (a8c0 <z_impl_log_process+0xb4>)
    a810:	7818      	ldrb	r0, [r3, #0]
    a812:	2800      	cmp	r0, #0
    a814:	d053      	beq.n	a8be <z_impl_log_process+0xb2>
	return z_log_msg_local_claim();
    a816:	f7ff ffe5 	bl	a7e4 <z_log_msg_local_claim>
	if (msg) {
    a81a:	4605      	mov	r5, r0
    a81c:	b320      	cbz	r0, a868 <z_impl_log_process+0x5c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a81e:	4b29      	ldr	r3, [pc, #164]	; (a8c4 <z_impl_log_process+0xb8>)
    a820:	e8d3 1fef 	ldaex	r1, [r3]
    a824:	3901      	subs	r1, #1
    a826:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a82a:	2a00      	cmp	r2, #0
    a82c:	d1f8      	bne.n	a820 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a82e:	4c26      	ldr	r4, [pc, #152]	; (a8c8 <z_impl_log_process+0xbc>)
    a830:	4e26      	ldr	r6, [pc, #152]	; (a8cc <z_impl_log_process+0xc0>)
    a832:	42b4      	cmp	r4, r6
    a834:	d914      	bls.n	a860 <z_impl_log_process+0x54>
    a836:	4926      	ldr	r1, [pc, #152]	; (a8d0 <z_impl_log_process+0xc4>)
    a838:	4826      	ldr	r0, [pc, #152]	; (a8d4 <z_impl_log_process+0xc8>)
    a83a:	f240 12c1 	movw	r2, #449	; 0x1c1
    a83e:	f01e f9c1 	bl	28bc4 <assert_print>
    a842:	f240 11c1 	movw	r1, #449	; 0x1c1
    a846:	4822      	ldr	r0, [pc, #136]	; (a8d0 <z_impl_log_process+0xc4>)
    a848:	f01e f9b5 	bl	28bb6 <assert_post_action>
	return backend->cb->active;
    a84c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    a84e:	795b      	ldrb	r3, [r3, #5]
    a850:	b123      	cbz	r3, a85c <z_impl_log_process+0x50>
	backend->api->process(backend, msg);
    a852:	6823      	ldr	r3, [r4, #0]
    a854:	4629      	mov	r1, r5
    a856:	4620      	mov	r0, r4
    a858:	681b      	ldr	r3, [r3, #0]
    a85a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a85c:	3410      	adds	r4, #16
    a85e:	e7e8      	b.n	a832 <z_impl_log_process+0x26>
    a860:	d3f4      	bcc.n	a84c <z_impl_log_process+0x40>
		z_log_msg_free(msg);
    a862:	4628      	mov	r0, r5
    a864:	f7ff ffc4 	bl	a7f0 <z_log_msg_free>
	return dropped_cnt > 0;
    a868:	4b1b      	ldr	r3, [pc, #108]	; (a8d8 <z_impl_log_process+0xcc>)
    a86a:	4c1c      	ldr	r4, [pc, #112]	; (a8dc <z_impl_log_process+0xd0>)
		if ((dropped_pend || unordered_pend) &&
    a86c:	681b      	ldr	r3, [r3, #0]
    a86e:	2b00      	cmp	r3, #0
    a870:	dd19      	ble.n	a8a6 <z_impl_log_process+0x9a>
	return z_impl_k_uptime_ticks();
    a872:	f024 fe78 	bl	2f566 <z_impl_k_uptime_ticks>
    a876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a87a:	fba0 0302 	umull	r0, r3, r0, r2
    a87e:	fb02 3101 	mla	r1, r2, r1, r3
    a882:	0bc3      	lsrs	r3, r0, #15
    a884:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a888:	e9d4 2000 	ldrd	r2, r0, [r4]
    a88c:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    a88e:	f240 32e9 	movw	r2, #1001	; 0x3e9
    a892:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a896:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    a89a:	4293      	cmp	r3, r2
    a89c:	f171 0100 	sbcs.w	r1, r1, #0
    a8a0:	d301      	bcc.n	a8a6 <z_impl_log_process+0x9a>
				dropped_notify();
    a8a2:	f7ff ff49 	bl	a738 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    a8a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    a8aa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    a8ae:	f142 0200 	adc.w	r2, r2, #0
    a8b2:	e9c4 3200 	strd	r3, r2, [r4]
}
    a8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    a8ba:	f7ff bfa1 	b.w	a800 <z_log_msg_pending>
}
    a8be:	bd70      	pop	{r4, r5, r6, pc}
    a8c0:	2000b1de 	.word	0x2000b1de
    a8c4:	2000a5e0 	.word	0x2000a5e0
    a8c8:	0002fdf4 	.word	0x0002fdf4
    a8cc:	0002fe04 	.word	0x0002fe04
    a8d0:	00031081 	.word	0x00031081
    a8d4:	00030da5 	.word	0x00030da5
    a8d8:	2000a5dc 	.word	0x2000a5dc
    a8dc:	200095b0 	.word	0x200095b0

0000a8e0 <z_impl_log_panic>:
{
    a8e0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    a8e2:	4d13      	ldr	r5, [pc, #76]	; (a930 <z_impl_log_panic+0x50>)
    a8e4:	7829      	ldrb	r1, [r5, #0]
    a8e6:	bb09      	cbnz	r1, a92c <z_impl_log_panic+0x4c>
	(void)z_log_init(true, false);
    a8e8:	2001      	movs	r0, #1
    a8ea:	f7ff fe77 	bl	a5dc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a8ee:	4c11      	ldr	r4, [pc, #68]	; (a934 <z_impl_log_panic+0x54>)
    a8f0:	4e11      	ldr	r6, [pc, #68]	; (a938 <z_impl_log_panic+0x58>)
    a8f2:	42b4      	cmp	r4, r6
    a8f4:	d913      	bls.n	a91e <z_impl_log_panic+0x3e>
    a8f6:	4911      	ldr	r1, [pc, #68]	; (a93c <z_impl_log_panic+0x5c>)
    a8f8:	4811      	ldr	r0, [pc, #68]	; (a940 <z_impl_log_panic+0x60>)
    a8fa:	f44f 72c2 	mov.w	r2, #388	; 0x184
    a8fe:	f01e f961 	bl	28bc4 <assert_print>
    a902:	f44f 71c2 	mov.w	r1, #388	; 0x184
    a906:	480d      	ldr	r0, [pc, #52]	; (a93c <z_impl_log_panic+0x5c>)
    a908:	f01e f955 	bl	28bb6 <assert_post_action>
	return backend->cb->active;
    a90c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a90e:	795b      	ldrb	r3, [r3, #5]
    a910:	b11b      	cbz	r3, a91a <z_impl_log_panic+0x3a>
	backend->api->panic(backend);
    a912:	6823      	ldr	r3, [r4, #0]
    a914:	4620      	mov	r0, r4
    a916:	689b      	ldr	r3, [r3, #8]
    a918:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a91a:	3410      	adds	r4, #16
    a91c:	e7e9      	b.n	a8f2 <z_impl_log_panic+0x12>
    a91e:	d3f5      	bcc.n	a90c <z_impl_log_panic+0x2c>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    a920:	f7ff ff74 	bl	a80c <z_impl_log_process>
		while (log_process() == true) {
    a924:	2800      	cmp	r0, #0
    a926:	d1fb      	bne.n	a920 <z_impl_log_panic+0x40>
	panic_mode = true;
    a928:	2301      	movs	r3, #1
    a92a:	702b      	strb	r3, [r5, #0]
}
    a92c:	bd70      	pop	{r4, r5, r6, pc}
    a92e:	bf00      	nop
    a930:	2000b1df 	.word	0x2000b1df
    a934:	0002fdf4 	.word	0x0002fdf4
    a938:	0002fe04 	.word	0x0002fe04
    a93c:	00031081 	.word	0x00031081
    a940:	00030da5 	.word	0x00030da5

0000a944 <log_process_thread_func>:
{
    a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    a948:	4b2c      	ldr	r3, [pc, #176]	; (a9fc <log_process_thread_func+0xb8>)
    a94a:	4f2d      	ldr	r7, [pc, #180]	; (aa00 <log_process_thread_func+0xbc>)
    a94c:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    a94e:	091b      	lsrs	r3, r3, #4
    a950:	d10a      	bne.n	a968 <log_process_thread_func+0x24>
    a952:	492c      	ldr	r1, [pc, #176]	; (aa04 <log_process_thread_func+0xc0>)
    a954:	f240 3247 	movw	r2, #839	; 0x347
    a958:	482b      	ldr	r0, [pc, #172]	; (aa08 <log_process_thread_func+0xc4>)
    a95a:	f01e f933 	bl	28bc4 <assert_print>
    a95e:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a962:	4828      	ldr	r0, [pc, #160]	; (aa04 <log_process_thread_func+0xc0>)
    a964:	f01e f927 	bl	28bb6 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    a968:	2100      	movs	r1, #0
    a96a:	4608      	mov	r0, r1
    a96c:	f7ff fe36 	bl	a5dc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a970:	4604      	mov	r4, r0
    a972:	b340      	cbz	r0, a9c6 <log_process_thread_func+0x82>
    a974:	f240 6867 	movw	r8, #1639	; 0x667
    a978:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    a97c:	f01c fe48 	bl	27610 <z_impl_z_current_get>
	proc_tid = process_tid;
    a980:	4b22      	ldr	r3, [pc, #136]	; (aa0c <log_process_thread_func+0xc8>)
    a982:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a984:	b130      	cbz	r0, a994 <log_process_thread_func+0x50>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    a986:	4b22      	ldr	r3, [pc, #136]	; (aa10 <log_process_thread_func+0xcc>)
	    process_tid &&
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	2b09      	cmp	r3, #9
    a98c:	dd02      	ble.n	a994 <log_process_thread_func+0x50>
	z_impl_k_sem_give(sem);
    a98e:	4821      	ldr	r0, [pc, #132]	; (aa14 <log_process_thread_func+0xd0>)
    a990:	f01b f9a2 	bl	25cd8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a994:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    a996:	f8df a07c 	ldr.w	sl, [pc, #124]	; aa14 <log_process_thread_func+0xd0>
		if (activate_mask) {
    a99a:	b144      	cbz	r4, a9ae <log_process_thread_func+0x6a>
			activate_mask = activate_foreach_backend(activate_mask);
    a99c:	4620      	mov	r0, r4
    a99e:	f7ff fdeb 	bl	a578 <activate_foreach_backend>
			if (!activate_mask) {
    a9a2:	4604      	mov	r4, r0
    a9a4:	b918      	cbnz	r0, a9ae <log_process_thread_func+0x6a>
				timeout = K_FOREVER;
    a9a6:	f04f 38ff 	mov.w	r8, #4294967295
    a9aa:	f04f 39ff 	mov.w	r9, #4294967295
    a9ae:	f7ff ff2d 	bl	a80c <z_impl_log_process>
		if (log_process() == false) {
    a9b2:	4606      	mov	r6, r0
    a9b4:	b928      	cbnz	r0, a9c2 <log_process_thread_func+0x7e>
			if (processed_any) {
    a9b6:	b95d      	cbnz	r5, a9d0 <log_process_thread_func+0x8c>
    a9b8:	4642      	mov	r2, r8
    a9ba:	464b      	mov	r3, r9
    a9bc:	4650      	mov	r0, sl
    a9be:	f01b f9c5 	bl	25d4c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a9c2:	4635      	mov	r5, r6
    a9c4:	e7e9      	b.n	a99a <log_process_thread_func+0x56>
    a9c6:	f04f 38ff 	mov.w	r8, #4294967295
    a9ca:	f04f 39ff 	mov.w	r9, #4294967295
    a9ce:	e7d5      	b.n	a97c <log_process_thread_func+0x38>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a9d0:	4d0a      	ldr	r5, [pc, #40]	; (a9fc <log_process_thread_func+0xb8>)
    a9d2:	e008      	b.n	a9e6 <log_process_thread_func+0xa2>
    a9d4:	d2f0      	bcs.n	a9b8 <log_process_thread_func+0x74>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    a9d6:	682b      	ldr	r3, [r5, #0]
    a9d8:	699b      	ldr	r3, [r3, #24]
    a9da:	b11b      	cbz	r3, a9e4 <log_process_thread_func+0xa0>
		backend->api->notify(backend, event, arg);
    a9dc:	2200      	movs	r2, #0
    a9de:	4628      	mov	r0, r5
    a9e0:	4611      	mov	r1, r2
    a9e2:	4798      	blx	r3
    a9e4:	3510      	adds	r5, #16
    a9e6:	42bd      	cmp	r5, r7
    a9e8:	d9f4      	bls.n	a9d4 <log_process_thread_func+0x90>
    a9ea:	4906      	ldr	r1, [pc, #24]	; (aa04 <log_process_thread_func+0xc0>)
    a9ec:	f240 323b 	movw	r2, #827	; 0x33b
    a9f0:	4805      	ldr	r0, [pc, #20]	; (aa08 <log_process_thread_func+0xc4>)
    a9f2:	f01e f8e7 	bl	28bc4 <assert_print>
    a9f6:	f240 313b 	movw	r1, #827	; 0x33b
    a9fa:	e7b2      	b.n	a962 <log_process_thread_func+0x1e>
    a9fc:	0002fdf4 	.word	0x0002fdf4
    aa00:	0002fe04 	.word	0x0002fe04
    aa04:	00031081 	.word	0x00031081
    aa08:	00030da5 	.word	0x00030da5
    aa0c:	2000a5d8 	.word	0x2000a5d8
    aa10:	2000a5e0 	.word	0x2000a5e0
    aa14:	20008e84 	.word	0x20008e84

0000aa18 <z_log_msg_post_finalize>:
{
    aa18:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    aa1a:	4826      	ldr	r0, [pc, #152]	; (aab4 <z_log_msg_post_finalize+0x9c>)
    aa1c:	f01e fa03 	bl	28e26 <atomic_inc>
	if (panic_mode) {
    aa20:	4b25      	ldr	r3, [pc, #148]	; (aab8 <z_log_msg_post_finalize+0xa0>)
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	b353      	cbz	r3, aa7c <z_log_msg_post_finalize+0x64>
	__asm__ volatile(
    aa26:	f04f 0320 	mov.w	r3, #32
    aa2a:	f3ef 8411 	mrs	r4, BASEPRI
    aa2e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa36:	4821      	ldr	r0, [pc, #132]	; (aabc <z_log_msg_post_finalize+0xa4>)
    aa38:	f01a fef6 	bl	25828 <z_spin_lock_valid>
    aa3c:	b940      	cbnz	r0, aa50 <z_log_msg_post_finalize+0x38>
    aa3e:	4920      	ldr	r1, [pc, #128]	; (aac0 <z_log_msg_post_finalize+0xa8>)
    aa40:	2294      	movs	r2, #148	; 0x94
    aa42:	4820      	ldr	r0, [pc, #128]	; (aac4 <z_log_msg_post_finalize+0xac>)
    aa44:	f01e f8be 	bl	28bc4 <assert_print>
    aa48:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa4a:	481d      	ldr	r0, [pc, #116]	; (aac0 <z_log_msg_post_finalize+0xa8>)
    aa4c:	f01e f8b3 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    aa50:	481a      	ldr	r0, [pc, #104]	; (aabc <z_log_msg_post_finalize+0xa4>)
    aa52:	f01a ff05 	bl	25860 <z_spin_lock_set_owner>
    aa56:	f7ff fed9 	bl	a80c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa5a:	4818      	ldr	r0, [pc, #96]	; (aabc <z_log_msg_post_finalize+0xa4>)
    aa5c:	f01a fef2 	bl	25844 <z_spin_unlock_valid>
    aa60:	b930      	cbnz	r0, aa70 <z_log_msg_post_finalize+0x58>
    aa62:	4917      	ldr	r1, [pc, #92]	; (aac0 <z_log_msg_post_finalize+0xa8>)
    aa64:	22c2      	movs	r2, #194	; 0xc2
    aa66:	4817      	ldr	r0, [pc, #92]	; (aac4 <z_log_msg_post_finalize+0xac>)
    aa68:	f01e f8ac 	bl	28bc4 <assert_print>
    aa6c:	21c2      	movs	r1, #194	; 0xc2
    aa6e:	e7ec      	b.n	aa4a <z_log_msg_post_finalize+0x32>
	__asm__ volatile(
    aa70:	f384 8811 	msr	BASEPRI, r4
    aa74:	f3bf 8f6f 	isb	sy
}
    aa78:	b002      	add	sp, #8
    aa7a:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    aa7c:	4b12      	ldr	r3, [pc, #72]	; (aac8 <z_log_msg_post_finalize+0xb0>)
    aa7e:	681b      	ldr	r3, [r3, #0]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d0f9      	beq.n	aa78 <z_log_msg_post_finalize+0x60>
		if (cnt == 0) {
    aa84:	b950      	cbnz	r0, aa9c <z_log_msg_post_finalize+0x84>
	z_impl_k_timer_start(timer, duration, period);
    aa86:	2200      	movs	r2, #0
    aa88:	2300      	movs	r3, #0
    aa8a:	4810      	ldr	r0, [pc, #64]	; (aacc <z_log_msg_post_finalize+0xb4>)
    aa8c:	e9cd 2300 	strd	r2, r3, [sp]
    aa90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    aa94:	2300      	movs	r3, #0
    aa96:	f01d fa43 	bl	27f20 <z_impl_k_timer_start>
    aa9a:	e7ed      	b.n	aa78 <z_log_msg_post_finalize+0x60>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    aa9c:	280a      	cmp	r0, #10
    aa9e:	d1eb      	bne.n	aa78 <z_log_msg_post_finalize+0x60>
	z_impl_k_timer_stop(timer);
    aaa0:	480a      	ldr	r0, [pc, #40]	; (aacc <z_log_msg_post_finalize+0xb4>)
    aaa2:	f024 fd94 	bl	2f5ce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    aaa6:	480a      	ldr	r0, [pc, #40]	; (aad0 <z_log_msg_post_finalize+0xb8>)
}
    aaa8:	b002      	add	sp, #8
    aaaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aaae:	f01b b913 	b.w	25cd8 <z_impl_k_sem_give>
    aab2:	bf00      	nop
    aab4:	2000a5e0 	.word	0x2000a5e0
    aab8:	2000b1df 	.word	0x2000b1df
    aabc:	2000a5d0 	.word	0x2000a5d0
    aac0:	00030eb4 	.word	0x00030eb4
    aac4:	00030da5 	.word	0x00030da5
    aac8:	2000a5d8 	.word	0x2000a5d8
    aacc:	200095b8 	.word	0x200095b8
    aad0:	20008e84 	.word	0x20008e84

0000aad4 <z_log_msg_commit>:
{
    aad4:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    aad6:	4b06      	ldr	r3, [pc, #24]	; (aaf0 <z_log_msg_commit+0x1c>)
{
    aad8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    aada:	681b      	ldr	r3, [r3, #0]
    aadc:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    aade:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    aae0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    aae2:	4804      	ldr	r0, [pc, #16]	; (aaf4 <z_log_msg_commit+0x20>)
    aae4:	f7ff fa42 	bl	9f6c <mpsc_pbuf_commit>
}
    aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    aaec:	f7ff bf94 	b.w	aa18 <z_log_msg_post_finalize>
    aaf0:	20008678 	.word	0x20008678
    aaf4:	20008d44 	.word	0x20008d44

0000aaf8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    aaf8:	4a04      	ldr	r2, [pc, #16]	; (ab0c <log_source_name_get+0x14>)
    aafa:	4b05      	ldr	r3, [pc, #20]	; (ab10 <log_source_name_get+0x18>)
    aafc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    aafe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    ab02:	bf34      	ite	cc
    ab04:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    ab08:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    ab0a:	4770      	bx	lr
    ab0c:	0002fbec 	.word	0x0002fbec
    ab10:	0002fdf4 	.word	0x0002fdf4

0000ab14 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    ab14:	4b0e      	ldr	r3, [pc, #56]	; (ab50 <log_backend_enable+0x3c>)
{
    ab16:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    ab18:	1ac3      	subs	r3, r0, r3
    ab1a:	111b      	asrs	r3, r3, #4
    ab1c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    ab1e:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    ab20:	b940      	cbnz	r0, ab34 <log_backend_enable+0x20>
    ab22:	490c      	ldr	r1, [pc, #48]	; (ab54 <log_backend_enable+0x40>)
    ab24:	480c      	ldr	r0, [pc, #48]	; (ab58 <log_backend_enable+0x44>)
    ab26:	22de      	movs	r2, #222	; 0xde
    ab28:	f01e f84c 	bl	28bc4 <assert_print>
    ab2c:	21de      	movs	r1, #222	; 0xde
    ab2e:	4809      	ldr	r0, [pc, #36]	; (ab54 <log_backend_enable+0x40>)
    ab30:	f01e f841 	bl	28bb6 <assert_post_action>
	backend->cb->id = id;
    ab34:	6844      	ldr	r4, [r0, #4]
    ab36:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    ab38:	6843      	ldr	r3, [r0, #4]
    ab3a:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    ab3c:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    ab3e:	6843      	ldr	r3, [r0, #4]
    ab40:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    ab42:	6843      	ldr	r3, [r0, #4]
    ab44:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    ab46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    ab4a:	f7ff bdc7 	b.w	a6dc <z_log_notify_backend_enabled>
    ab4e:	bf00      	nop
    ab50:	0002fdf4 	.word	0x0002fdf4
    ab54:	000310df 	.word	0x000310df
    ab58:	00030da5 	.word	0x00030da5

0000ab5c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ab60:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    ab64:	b08f      	sub	sp, #60	; 0x3c
    ab66:	f3c1 2649 	ubfx	r6, r1, #9, #10
    ab6a:	460d      	mov	r5, r1
    ab6c:	4690      	mov	r8, r2
    ab6e:	4699      	mov	r9, r3
    ab70:	9005      	str	r0, [sp, #20]
    ab72:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    ab74:	2e00      	cmp	r6, #0
    ab76:	d03c      	beq.n	abf2 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    ab78:	f04f 0b04 	mov.w	fp, #4
    ab7c:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    ab80:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    ab82:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    ab84:	4631      	mov	r1, r6
    ab86:	ab0b      	add	r3, sp, #44	; 0x2c
    ab88:	4640      	mov	r0, r8
    ab8a:	f8cd b008 	str.w	fp, [sp, #8]
    ab8e:	9701      	str	r7, [sp, #4]
    ab90:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    ab94:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    ab98:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    ab9a:	9607      	str	r6, [sp, #28]
    ab9c:	f7fd ff74 	bl	8a88 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    aba0:	f3c0 0309 	ubfx	r3, r0, #0, #10
    aba4:	1918      	adds	r0, r3, r4
    aba6:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    abaa:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    abac:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    abae:	f363 2552 	bfi	r5, r3, #9, #10
    abb2:	9306      	str	r3, [sp, #24]
    abb4:	f7ff fe0e 	bl	a7d4 <z_log_msg_alloc>
		if (msg) {
    abb8:	4604      	mov	r4, r0
    abba:	b300      	cbz	r0, abfe <z_impl_z_log_msg_static_create+0xa2>
	struct z_cbprintf_buf_desc buf_desc = {
    abbc:	2200      	movs	r2, #0
    abbe:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    abc0:	3010      	adds	r0, #16
    abc2:	900b      	str	r0, [sp, #44]	; 0x2c
    abc4:	930c      	str	r3, [sp, #48]	; 0x30
    abc6:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    abc8:	4640      	mov	r0, r8
    abca:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    abce:	4a11      	ldr	r2, [pc, #68]	; (ac14 <z_impl_z_log_msg_static_create+0xb8>)
    abd0:	9907      	ldr	r1, [sp, #28]
    abd2:	f8cd a000 	str.w	sl, [sp]
    abd6:	ab0b      	add	r3, sp, #44	; 0x2c
    abd8:	f7fd ff56 	bl	8a88 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    abdc:	2800      	cmp	r0, #0
    abde:	da0e      	bge.n	abfe <z_impl_z_log_msg_static_create+0xa2>
    abe0:	490d      	ldr	r1, [pc, #52]	; (ac18 <z_impl_z_log_msg_static_create+0xbc>)
    abe2:	480e      	ldr	r0, [pc, #56]	; (ac1c <z_impl_z_log_msg_static_create+0xc0>)
    abe4:	2249      	movs	r2, #73	; 0x49
    abe6:	f01d ffed 	bl	28bc4 <assert_print>
    abea:	2149      	movs	r1, #73	; 0x49
    abec:	480a      	ldr	r0, [pc, #40]	; (ac18 <z_impl_z_log_msg_static_create+0xbc>)
    abee:	f01d ffe2 	bl	28bb6 <assert_post_action>
    abf2:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    abf6:	0880      	lsrs	r0, r0, #2
    abf8:	f7ff fdec 	bl	a7d4 <z_log_msg_alloc>
    abfc:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    abfe:	f366 2552 	bfi	r5, r6, #9, #10
    ac02:	464b      	mov	r3, r9
    ac04:	462a      	mov	r2, r5
    ac06:	4620      	mov	r0, r4
    ac08:	9905      	ldr	r1, [sp, #20]
}
    ac0a:	b00f      	add	sp, #60	; 0x3c
    ac0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    ac10:	f01e b93b 	b.w	28e8a <z_log_msg_finalize>
    ac14:	00028e5f 	.word	0x00028e5f
    ac18:	00031120 	.word	0x00031120
    ac1c:	00030da5 	.word	0x00030da5

0000ac20 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac24:	b087      	sub	sp, #28
    ac26:	4604      	mov	r4, r0
    ac28:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    ac2c:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    ac30:	460f      	mov	r7, r1
    ac32:	4693      	mov	fp, r2
    ac34:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    ac36:	b1a6      	cbz	r6, ac62 <z_impl_z_log_msg_runtime_vcreate+0x42>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    ac38:	2110      	movs	r1, #16
    ac3a:	4633      	mov	r3, r6
    ac3c:	4652      	mov	r2, sl
    ac3e:	2000      	movs	r0, #0
    ac40:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    ac44:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    ac48:	f7fd fd20 	bl	868c <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    ac4c:	1e01      	subs	r1, r0, #0
    ac4e:	da09      	bge.n	ac64 <z_impl_z_log_msg_runtime_vcreate+0x44>
    ac50:	491f      	ldr	r1, [pc, #124]	; (acd0 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    ac52:	2268      	movs	r2, #104	; 0x68
    ac54:	481f      	ldr	r0, [pc, #124]	; (acd4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    ac56:	f01d ffb5 	bl	28bc4 <assert_print>
    ac5a:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    ac5c:	481c      	ldr	r0, [pc, #112]	; (acd0 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    ac5e:	f01d ffaa 	bl	28bb6 <assert_post_action>
		plen = 0;
    ac62:	4631      	mov	r1, r6
	struct log_msg_desc desc =
    ac64:	4b1c      	ldr	r3, [pc, #112]	; (acd8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    ac66:	f004 0407 	and.w	r4, r4, #7
    ac6a:	f00b 0b07 	and.w	fp, fp, #7
    ac6e:	00e4      	lsls	r4, r4, #3
    ac70:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    ac74:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
    ac78:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    ac7c:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    ac7e:	4408      	add	r0, r1
	struct log_msg_desc desc =
    ac80:	4b16      	ldr	r3, [pc, #88]	; (acdc <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    ac82:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    ac86:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		msg = z_log_msg_alloc(msg_wlen);
    ac8a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    ac8c:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    ac8e:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    ac90:	f7ff fda0 	bl	a7d4 <z_log_msg_alloc>
			pkg = msg ? msg->data : NULL;
    ac94:	4605      	mov	r5, r0
    ac96:	b188      	cbz	r0, acbc <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
    ac98:	b186      	cbz	r6, acbc <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    ac9a:	4633      	mov	r3, r6
    ac9c:	4652      	mov	r2, sl
    ac9e:	9903      	ldr	r1, [sp, #12]
    aca0:	f8cd 9000 	str.w	r9, [sp]
    aca4:	3010      	adds	r0, #16
    aca6:	f7fd fcf1 	bl	868c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    acaa:	2800      	cmp	r0, #0
    acac:	da06      	bge.n	acbc <z_impl_z_log_msg_runtime_vcreate+0x9c>
    acae:	4908      	ldr	r1, [pc, #32]	; (acd0 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
    acb0:	2282      	movs	r2, #130	; 0x82
    acb2:	4808      	ldr	r0, [pc, #32]	; (acd4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    acb4:	f01d ff86 	bl	28bc4 <assert_print>
    acb8:	2182      	movs	r1, #130	; 0x82
    acba:	e7cf      	b.n	ac5c <z_impl_z_log_msg_runtime_vcreate+0x3c>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    acbc:	4643      	mov	r3, r8
    acbe:	4622      	mov	r2, r4
    acc0:	4639      	mov	r1, r7
    acc2:	4628      	mov	r0, r5
	}
}
    acc4:	b007      	add	sp, #28
    acc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    acca:	f01e b8de 	b.w	28e8a <z_log_msg_finalize>
    acce:	bf00      	nop
    acd0:	00031120 	.word	0x00031120
    acd4:	00030da5 	.word	0x00030da5
    acd8:	0007fe00 	.word	0x0007fe00
    acdc:	7ff80000 	.word	0x7ff80000

0000ace0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    ace0:	b40e      	push	{r1, r2, r3}
    ace2:	b503      	push	{r0, r1, lr}
    ace4:	ab03      	add	r3, sp, #12
    ace6:	f853 2b04 	ldr.w	r2, [r3], #4
    acea:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    acec:	4804      	ldr	r0, [pc, #16]	; (ad00 <print_formatted+0x20>)
	va_start(args, fmt);
    acee:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    acf0:	f01e f8f2 	bl	28ed8 <cbvprintf>
	va_end(args);

	return length;
}
    acf4:	b002      	add	sp, #8
    acf6:	f85d eb04 	ldr.w	lr, [sp], #4
    acfa:	b003      	add	sp, #12
    acfc:	4770      	bx	lr
    acfe:	bf00      	nop
    ad00:	0000ad21 	.word	0x0000ad21

0000ad04 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ad04:	06ca      	lsls	r2, r1, #27
    ad06:	d405      	bmi.n	ad14 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ad08:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    ad0a:	bf4c      	ite	mi
    ad0c:	4902      	ldrmi	r1, [pc, #8]	; (ad18 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    ad0e:	4903      	ldrpl	r1, [pc, #12]	; (ad1c <newline_print+0x18>)
    ad10:	f7ff bfe6 	b.w	ace0 <print_formatted>
	}
}
    ad14:	4770      	bx	lr
    ad16:	bf00      	nop
    ad18:	000351c0 	.word	0x000351c0
    ad1c:	000351bf 	.word	0x000351bf

0000ad20 <out_func>:
{
    ad20:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    ad22:	684b      	ldr	r3, [r1, #4]
{
    ad24:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    ad26:	681a      	ldr	r2, [r3, #0]
    ad28:	68cb      	ldr	r3, [r1, #12]
{
    ad2a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    ad2c:	429a      	cmp	r2, r3
    ad2e:	d102      	bne.n	ad36 <out_func+0x16>
		log_output_flush(out_ctx);
    ad30:	4608      	mov	r0, r1
    ad32:	f01e f8d8 	bl	28ee6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ad36:	6863      	ldr	r3, [r4, #4]
    ad38:	e8d3 2fef 	ldaex	r2, [r3]
    ad3c:	1c51      	adds	r1, r2, #1
    ad3e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ad42:	2800      	cmp	r0, #0
    ad44:	d1f8      	bne.n	ad38 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    ad46:	68a3      	ldr	r3, [r4, #8]
    ad48:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    ad4a:	6863      	ldr	r3, [r4, #4]
    ad4c:	681a      	ldr	r2, [r3, #0]
    ad4e:	68e3      	ldr	r3, [r4, #12]
    ad50:	429a      	cmp	r2, r3
    ad52:	d908      	bls.n	ad66 <out_func+0x46>
    ad54:	4905      	ldr	r1, [pc, #20]	; (ad6c <out_func+0x4c>)
    ad56:	4806      	ldr	r0, [pc, #24]	; (ad70 <out_func+0x50>)
    ad58:	2279      	movs	r2, #121	; 0x79
    ad5a:	f01d ff33 	bl	28bc4 <assert_print>
    ad5e:	2179      	movs	r1, #121	; 0x79
    ad60:	4802      	ldr	r0, [pc, #8]	; (ad6c <out_func+0x4c>)
    ad62:	f01d ff28 	bl	28bb6 <assert_post_action>
}
    ad66:	2000      	movs	r0, #0
    ad68:	bd38      	pop	{r3, r4, r5, pc}
    ad6a:	bf00      	nop
    ad6c:	0003114c 	.word	0x0003114c
    ad70:	00030da5 	.word	0x00030da5

0000ad74 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad78:	b089      	sub	sp, #36	; 0x24
    ad7a:	469b      	mov	fp, r3
    ad7c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    ad80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ad84:	4604      	mov	r4, r0
    ad86:	9304      	str	r3, [sp, #16]
    ad88:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    ad8c:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ad8e:	9b04      	ldr	r3, [sp, #16]
{
    ad90:	460d      	mov	r5, r1
    ad92:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    ad94:	2b00      	cmp	r3, #0
    ad96:	f000 8087 	beq.w	aea8 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ad9a:	f006 0308 	and.w	r3, r6, #8
    ad9e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ada0:	f01e f85b 	bl	28e5a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ada4:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    ada8:	4602      	mov	r2, r0
    adaa:	2800      	cmp	r0, #0
    adac:	d04b      	beq.n	ae46 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    adae:	4620      	mov	r0, r4
    adb0:	498c      	ldr	r1, [pc, #560]	; (afe4 <log_output_process+0x270>)
    adb2:	f7ff ff95 	bl	ace0 <print_formatted>
    adb6:	4680      	mov	r8, r0
	if (stamp) {
    adb8:	f1ba 0f00 	cmp.w	sl, #0
    adbc:	d008      	beq.n	add0 <log_output_process+0x5c>
	if (!format) {
    adbe:	f016 0f44 	tst.w	r6, #68	; 0x44
    adc2:	d142      	bne.n	ae4a <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    adc4:	462a      	mov	r2, r5
    adc6:	4620      	mov	r0, r4
    adc8:	4987      	ldr	r1, [pc, #540]	; (afe8 <log_output_process+0x274>)
    adca:	f7ff ff89 	bl	ace0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    adce:	4480      	add	r8, r0
	if (color) {
    add0:	f006 0301 	and.w	r3, r6, #1
    add4:	b15b      	cbz	r3, adee <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    add6:	4b85      	ldr	r3, [pc, #532]	; (afec <log_output_process+0x278>)
    add8:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    adda:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    addc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    ade0:	4b83      	ldr	r3, [pc, #524]	; (aff0 <log_output_process+0x27c>)
    ade2:	4984      	ldr	r1, [pc, #528]	; (aff4 <log_output_process+0x280>)
    ade4:	2a00      	cmp	r2, #0
    ade6:	bf08      	it	eq
    ade8:	461a      	moveq	r2, r3
    adea:	f7ff ff79 	bl	ace0 <print_formatted>
	if (level_on) {
    adee:	f006 0308 	and.w	r3, r6, #8
    adf2:	2b00      	cmp	r3, #0
    adf4:	d055      	beq.n	aea2 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    adf6:	4b80      	ldr	r3, [pc, #512]	; (aff8 <log_output_process+0x284>)
    adf8:	9a04      	ldr	r2, [sp, #16]
    adfa:	4620      	mov	r0, r4
    adfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ae00:	497e      	ldr	r1, [pc, #504]	; (affc <log_output_process+0x288>)
    ae02:	f7ff ff6d 	bl	ace0 <print_formatted>
    ae06:	4605      	mov	r5, r0
	if (domain) {
    ae08:	9b06      	ldr	r3, [sp, #24]
    ae0a:	b12b      	cbz	r3, ae18 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    ae0c:	461a      	mov	r2, r3
    ae0e:	4620      	mov	r0, r4
    ae10:	497b      	ldr	r1, [pc, #492]	; (b000 <log_output_process+0x28c>)
    ae12:	f7ff ff65 	bl	ace0 <print_formatted>
    ae16:	4405      	add	r5, r0
	if (source) {
    ae18:	f1bb 0f00 	cmp.w	fp, #0
    ae1c:	d005      	beq.n	ae2a <log_output_process+0xb6>
		total += print_formatted(output,
    ae1e:	465a      	mov	r2, fp
    ae20:	4620      	mov	r0, r4
    ae22:	4978      	ldr	r1, [pc, #480]	; (b004 <log_output_process+0x290>)
    ae24:	f7ff ff5c 	bl	ace0 <print_formatted>
    ae28:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    ae2a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    ae2c:	f1b9 0f00 	cmp.w	r9, #0
    ae30:	d14a      	bne.n	aec8 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    ae32:	2f00      	cmp	r7, #0
    ae34:	d160      	bne.n	aef8 <log_output_process+0x184>
	if (color) {
    ae36:	07f3      	lsls	r3, r6, #31
    ae38:	f100 80ce 	bmi.w	afd8 <log_output_process+0x264>
	newline_print(output, flags);
    ae3c:	4631      	mov	r1, r6
    ae3e:	4620      	mov	r0, r4
    ae40:	f7ff ff60 	bl	ad04 <newline_print>
}
    ae44:	e0c2      	b.n	afcc <log_output_process+0x258>
	uint32_t length = 0U;
    ae46:	4680      	mov	r8, r0
    ae48:	e7b6      	b.n	adb8 <log_output_process+0x44>
	} else if (freq != 0U) {
    ae4a:	4b6f      	ldr	r3, [pc, #444]	; (b008 <log_output_process+0x294>)
    ae4c:	6818      	ldr	r0, [r3, #0]
    ae4e:	2800      	cmp	r0, #0
    ae50:	d0bd      	beq.n	adce <log_output_process+0x5a>
		timestamp /= timestamp_div;
    ae52:	4b6e      	ldr	r3, [pc, #440]	; (b00c <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    ae54:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ae58:	681b      	ldr	r3, [r3, #0]
    ae5a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ae5e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    ae62:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    ae66:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    ae6a:	fb0e f505 	mul.w	r5, lr, r5
    ae6e:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ae72:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    ae76:	213c      	movs	r1, #60	; 0x3c
    ae78:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ae7c:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    ae80:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ae84:	fb0e f505 	mul.w	r5, lr, r5
    ae88:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    ae8c:	fb01 2213 	mls	r2, r1, r3, r2
    ae90:	4620      	mov	r0, r4
    ae92:	9200      	str	r2, [sp, #0]
    ae94:	e9cd c501 	strd	ip, r5, [sp, #4]
    ae98:	4652      	mov	r2, sl
    ae9a:	495d      	ldr	r1, [pc, #372]	; (b010 <log_output_process+0x29c>)
    ae9c:	f7ff ff20 	bl	ace0 <print_formatted>
    aea0:	e795      	b.n	adce <log_output_process+0x5a>
	int total = 0;
    aea2:	f006 0508 	and.w	r5, r6, #8
    aea6:	e7af      	b.n	ae08 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    aea8:	f1bb 0f01 	cmp.w	fp, #1
    aeac:	d107      	bne.n	aebe <log_output_process+0x14a>
	if (package) {
    aeae:	f1b9 0f00 	cmp.w	r9, #0
    aeb2:	d11c      	bne.n	aeee <log_output_process+0x17a>
	if (data_len) {
    aeb4:	2f00      	cmp	r7, #0
    aeb6:	f000 8089 	beq.w	afcc <log_output_process+0x258>
		prefix_offset = 0;
    aeba:	2500      	movs	r5, #0
    aebc:	e01c      	b.n	aef8 <log_output_process+0x184>
	if (package) {
    aebe:	f1b9 0f00 	cmp.w	r9, #0
    aec2:	d0f7      	beq.n	aeb4 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    aec4:	4853      	ldr	r0, [pc, #332]	; (b014 <log_output_process+0x2a0>)
    aec6:	e013      	b.n	aef0 <log_output_process+0x17c>
		cb = out_func;
    aec8:	4853      	ldr	r0, [pc, #332]	; (b018 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    aeca:	464b      	mov	r3, r9
    aecc:	4622      	mov	r2, r4
    aece:	4953      	ldr	r1, [pc, #332]	; (b01c <log_output_process+0x2a8>)
    aed0:	f01d fb8a 	bl	285e8 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    aed4:	2800      	cmp	r0, #0
    aed6:	da0d      	bge.n	aef4 <log_output_process+0x180>
    aed8:	4951      	ldr	r1, [pc, #324]	; (b020 <log_output_process+0x2ac>)
    aeda:	4852      	ldr	r0, [pc, #328]	; (b024 <log_output_process+0x2b0>)
    aedc:	f44f 7200 	mov.w	r2, #512	; 0x200
    aee0:	f01d fe70 	bl	28bc4 <assert_print>
    aee4:	f44f 7100 	mov.w	r1, #512	; 0x200
    aee8:	484d      	ldr	r0, [pc, #308]	; (b020 <log_output_process+0x2ac>)
    aeea:	f01d fe64 	bl	28bb6 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    aeee:	484a      	ldr	r0, [pc, #296]	; (b018 <log_output_process+0x2a4>)
		prefix_offset = 0;
    aef0:	9d04      	ldr	r5, [sp, #16]
    aef2:	e7ea      	b.n	aeca <log_output_process+0x156>
	if (data_len) {
    aef4:	2f00      	cmp	r7, #0
    aef6:	d065      	beq.n	afc4 <log_output_process+0x250>
		print_formatted(output, " ");
    aef8:	f8df 912c 	ldr.w	r9, [pc, #300]	; b028 <log_output_process+0x2b4>
			print_formatted(output, "%02x ", data[i]);
    aefc:	f8df a12c 	ldr.w	sl, [pc, #300]	; b02c <log_output_process+0x2b8>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    af00:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    af02:	4631      	mov	r1, r6
    af04:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    af06:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    af08:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    af0c:	bf28      	it	cs
    af0e:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    af12:	f7ff fef7 	bl	ad04 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    af16:	455d      	cmp	r5, fp
    af18:	dc42      	bgt.n	afa0 <log_output_process+0x22c>
			print_formatted(output, "%02x ", data[i]);
    af1a:	9b05      	ldr	r3, [sp, #20]
    af1c:	4651      	mov	r1, sl
    af1e:	4620      	mov	r0, r4
    af20:	781a      	ldrb	r2, [r3, #0]
    af22:	f7ff fedd 	bl	ace0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    af26:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    af2a:	f01b 0f07 	tst.w	fp, #7
    af2e:	d103      	bne.n	af38 <log_output_process+0x1c4>
			print_formatted(output, " ");
    af30:	4649      	mov	r1, r9
    af32:	4620      	mov	r0, r4
    af34:	f7ff fed4 	bl	ace0 <print_formatted>
		if (i < length) {
    af38:	45d8      	cmp	r8, fp
    af3a:	d938      	bls.n	afae <log_output_process+0x23a>
			print_formatted(output, "%02x ", data[i]);
    af3c:	9b05      	ldr	r3, [sp, #20]
    af3e:	4651      	mov	r1, sl
    af40:	4620      	mov	r0, r4
    af42:	f813 200b 	ldrb.w	r2, [r3, fp]
    af46:	f7ff fecb 	bl	ace0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    af4a:	f10b 0b01 	add.w	fp, fp, #1
    af4e:	f1bb 0f10 	cmp.w	fp, #16
    af52:	d1ea      	bne.n	af2a <log_output_process+0x1b6>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    af54:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    af58:	4620      	mov	r0, r4
    af5a:	4935      	ldr	r1, [pc, #212]	; (b030 <log_output_process+0x2bc>)
    af5c:	f7ff fec0 	bl	ace0 <print_formatted>
		if (i < length) {
    af60:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    af62:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    af64:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    af66:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    af68:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    af6c:	295f      	cmp	r1, #95	; 0x5f
    af6e:	bf28      	it	cs
    af70:	222e      	movcs	r2, #46	; 0x2e
    af72:	4930      	ldr	r1, [pc, #192]	; (b034 <log_output_process+0x2c0>)
    af74:	f7ff feb4 	bl	ace0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    af78:	f10b 0b01 	add.w	fp, fp, #1
    af7c:	f1bb 0f10 	cmp.w	fp, #16
    af80:	d01a      	beq.n	afb8 <log_output_process+0x244>
		if (i > 0 && !(i % 8)) {
    af82:	f01b 0f07 	tst.w	fp, #7
    af86:	d103      	bne.n	af90 <log_output_process+0x21c>
			print_formatted(output, " ");
    af88:	4649      	mov	r1, r9
    af8a:	4620      	mov	r0, r4
    af8c:	f7ff fea8 	bl	ace0 <print_formatted>
		if (i < length) {
    af90:	45d8      	cmp	r8, fp
    af92:	465a      	mov	r2, fp
    af94:	d8e5      	bhi.n	af62 <log_output_process+0x1ee>
			print_formatted(output, " ");
    af96:	4649      	mov	r1, r9
    af98:	4620      	mov	r0, r4
    af9a:	f7ff fea1 	bl	ace0 <print_formatted>
    af9e:	e7eb      	b.n	af78 <log_output_process+0x204>
		print_formatted(output, " ");
    afa0:	4649      	mov	r1, r9
    afa2:	4620      	mov	r0, r4
    afa4:	f7ff fe9c 	bl	ace0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    afa8:	f10b 0b01 	add.w	fp, fp, #1
    afac:	e7b3      	b.n	af16 <log_output_process+0x1a2>
			print_formatted(output, "   ");
    afae:	4620      	mov	r0, r4
    afb0:	4921      	ldr	r1, [pc, #132]	; (b038 <log_output_process+0x2c4>)
    afb2:	f7ff fe95 	bl	ace0 <print_formatted>
    afb6:	e7c8      	b.n	af4a <log_output_process+0x1d6>
		data += length;
    afb8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    afba:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    afbe:	4443      	add	r3, r8
    afc0:	9305      	str	r3, [sp, #20]
	} while (len);
    afc2:	d19d      	bne.n	af00 <log_output_process+0x18c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    afc4:	9b04      	ldr	r3, [sp, #16]
    afc6:	2b00      	cmp	r3, #0
    afc8:	f47f af35 	bne.w	ae36 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    afcc:	4620      	mov	r0, r4
}
    afce:	b009      	add	sp, #36	; 0x24
    afd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    afd4:	f01d bf87 	b.w	28ee6 <log_output_flush>
		print_formatted(output, "%s", log_color);
    afd8:	4620      	mov	r0, r4
    afda:	4a05      	ldr	r2, [pc, #20]	; (aff0 <log_output_process+0x27c>)
    afdc:	4905      	ldr	r1, [pc, #20]	; (aff4 <log_output_process+0x280>)
    afde:	f7ff fe7f 	bl	ace0 <print_formatted>
}
    afe2:	e72b      	b.n	ae3c <log_output_process+0xc8>
    afe4:	00031180 	.word	0x00031180
    afe8:	00031184 	.word	0x00031184
    afec:	0003004c 	.word	0x0003004c
    aff0:	0003117b 	.word	0x0003117b
    aff4:	00031e14 	.word	0x00031e14
    aff8:	00030060 	.word	0x00030060
    affc:	000311a9 	.word	0x000311a9
    b000:	000311af 	.word	0x000311af
    b004:	000311b3 	.word	0x000311b3
    b008:	2000a5ec 	.word	0x2000a5ec
    b00c:	2000a5e8 	.word	0x2000a5e8
    b010:	0003118d 	.word	0x0003118d
    b014:	00028f01 	.word	0x00028f01
    b018:	0000ad21 	.word	0x0000ad21
    b01c:	00028ed9 	.word	0x00028ed9
    b020:	0003114c 	.word	0x0003114c
    b024:	00030da5 	.word	0x00030da5
    b028:	0003518b 	.word	0x0003518b
    b02c:	000311b8 	.word	0x000311b8
    b030:	000311be 	.word	0x000311be
    b034:	000311c0 	.word	0x000311c0
    b038:	00035189 	.word	0x00035189

0000b03c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    b040:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    b042:	684b      	ldr	r3, [r1, #4]
    b044:	4605      	mov	r5, r0
    b046:	460c      	mov	r4, r1
    b048:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    b04a:	688e      	ldr	r6, [r1, #8]
    b04c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    b04e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    b052:	b15b      	cbz	r3, b06c <log_output_msg_process+0x30>
    b054:	4a13      	ldr	r2, [pc, #76]	; (b0a4 <log_output_msg_process+0x68>)
    b056:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    b058:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b05c:	2900      	cmp	r1, #0
    b05e:	db1f      	blt.n	b0a0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    b060:	7820      	ldrb	r0, [r4, #0]
    b062:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    b066:	f7ff fd47 	bl	aaf8 <log_source_name_get>
    b06a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    b06c:	4621      	mov	r1, r4
    b06e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    b072:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    b074:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    b078:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    b07a:	eb01 0402 	add.w	r4, r1, r2
    b07e:	bf08      	it	eq
    b080:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    b082:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    b086:	e9cd 0803 	strd	r0, r8, [sp, #12]
    b08a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    b08e:	2200      	movs	r2, #0
    b090:	4631      	mov	r1, r6
    b092:	4628      	mov	r0, r5
    b094:	9700      	str	r7, [sp, #0]
    b096:	f7ff fe6d 	bl	ad74 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    b09a:	b006      	add	sp, #24
    b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    b0a0:	2300      	movs	r3, #0
    b0a2:	e7e3      	b.n	b06c <log_output_msg_process+0x30>
    b0a4:	0002fbec 	.word	0x0002fbec

0000b0a8 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b0a8:	f242 730f 	movw	r3, #9999	; 0x270f
{
    b0ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b0ae:	428b      	cmp	r3, r1
    b0b0:	bf28      	it	cs
    b0b2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    b0b4:	6805      	ldr	r5, [r0, #0]
{
    b0b6:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    b0b8:	2105      	movs	r1, #5
    b0ba:	4668      	mov	r0, sp
    b0bc:	4a0d      	ldr	r2, [pc, #52]	; (b0f4 <log_output_dropped_process+0x4c>)
    b0be:	f01d fb86 	bl	287ce <snprintk>
    b0c2:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    b0c4:	6863      	ldr	r3, [r4, #4]
    b0c6:	4628      	mov	r0, r5
    b0c8:	220b      	movs	r2, #11
    b0ca:	685b      	ldr	r3, [r3, #4]
    b0cc:	490a      	ldr	r1, [pc, #40]	; (b0f8 <log_output_dropped_process+0x50>)
    b0ce:	f01d fef6 	bl	28ebe <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    b0d2:	6863      	ldr	r3, [r4, #4]
    b0d4:	4632      	mov	r2, r6
    b0d6:	4669      	mov	r1, sp
    b0d8:	4628      	mov	r0, r5
    b0da:	685b      	ldr	r3, [r3, #4]
    b0dc:	f01d feef 	bl	28ebe <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    b0e0:	6863      	ldr	r3, [r4, #4]
    b0e2:	221b      	movs	r2, #27
    b0e4:	4628      	mov	r0, r5
    b0e6:	685b      	ldr	r3, [r3, #4]
    b0e8:	4904      	ldr	r1, [pc, #16]	; (b0fc <log_output_dropped_process+0x54>)
    b0ea:	f01d fee8 	bl	28ebe <buffer_write>
		     output->control_block->ctx);
}
    b0ee:	b002      	add	sp, #8
    b0f0:	bd70      	pop	{r4, r5, r6, pc}
    b0f2:	bf00      	nop
    b0f4:	00033bef 	.word	0x00033bef
    b0f8:	000311df 	.word	0x000311df
    b0fc:	000311c3 	.word	0x000311c3

0000b100 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    b100:	2100      	movs	r1, #0
    b102:	2301      	movs	r3, #1
    b104:	4a06      	ldr	r2, [pc, #24]	; (b120 <log_output_timestamp_freq_set+0x20>)
    b106:	4290      	cmp	r0, r2
    b108:	d806      	bhi.n	b118 <log_output_timestamp_freq_set+0x18>
    b10a:	4a06      	ldr	r2, [pc, #24]	; (b124 <log_output_timestamp_freq_set+0x24>)
    b10c:	b901      	cbnz	r1, b110 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    b10e:	2301      	movs	r3, #1
    b110:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    b112:	4b05      	ldr	r3, [pc, #20]	; (b128 <log_output_timestamp_freq_set+0x28>)
    b114:	6018      	str	r0, [r3, #0]
}
    b116:	4770      	bx	lr
		timestamp_div *= 2U;
    b118:	2101      	movs	r1, #1
		frequency /= 2U;
    b11a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    b11c:	005b      	lsls	r3, r3, #1
    b11e:	e7f2      	b.n	b106 <log_output_timestamp_freq_set+0x6>
    b120:	000f4240 	.word	0x000f4240
    b124:	2000a5e8 	.word	0x2000a5e8
    b128:	2000a5ec 	.word	0x2000a5ec

0000b12c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    b12c:	4b01      	ldr	r3, [pc, #4]	; (b134 <format_set+0x8>)
	return 0;
}
    b12e:	2000      	movs	r0, #0
	log_format_current = log_type;
    b130:	6019      	str	r1, [r3, #0]
}
    b132:	4770      	bx	lr
    b134:	2000a604 	.word	0x2000a604

0000b138 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    b138:	2201      	movs	r2, #1
    b13a:	4b02      	ldr	r3, [pc, #8]	; (b144 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    b13c:	4802      	ldr	r0, [pc, #8]	; (b148 <panic+0x10>)
    b13e:	701a      	strb	r2, [r3, #0]
    b140:	f01d bed1 	b.w	28ee6 <log_output_flush>
    b144:	2000b1e1 	.word	0x2000b1e1
    b148:	00030090 	.word	0x00030090

0000b14c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    b14c:	4801      	ldr	r0, [pc, #4]	; (b154 <dropped+0x8>)
    b14e:	f7ff bfab 	b.w	b0a8 <log_output_dropped_process>
    b152:	bf00      	nop
    b154:	00030090 	.word	0x00030090

0000b158 <process>:
{
    b158:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b15a:	4b06      	ldr	r3, [pc, #24]	; (b174 <process+0x1c>)
{
    b15c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b15e:	6818      	ldr	r0, [r3, #0]
    b160:	f7ff faa6 	bl	a6b0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    b164:	4621      	mov	r1, r4
}
    b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    b16a:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    b16c:	220f      	movs	r2, #15
    b16e:	4802      	ldr	r0, [pc, #8]	; (b178 <process+0x20>)
    b170:	4718      	bx	r3
    b172:	bf00      	nop
    b174:	2000a604 	.word	0x2000a604
    b178:	00030090 	.word	0x00030090

0000b17c <char_out>:
{
    b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b17e:	460d      	mov	r5, r1
    b180:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    b182:	4f06      	ldr	r7, [pc, #24]	; (b19c <char_out+0x20>)
    b184:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    b186:	42b4      	cmp	r4, r6
    b188:	d101      	bne.n	b18e <char_out+0x12>
}
    b18a:	4628      	mov	r0, r5
    b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    b18e:	f814 1b01 	ldrb.w	r1, [r4], #1
    b192:	68bb      	ldr	r3, [r7, #8]
    b194:	4801      	ldr	r0, [pc, #4]	; (b19c <char_out+0x20>)
    b196:	685b      	ldr	r3, [r3, #4]
    b198:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    b19a:	e7f4      	b.n	b186 <char_out+0xa>
    b19c:	0002f89c 	.word	0x0002f89c

0000b1a0 <log_backend_uart_init>:
{
    b1a0:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b1a2:	4807      	ldr	r0, [pc, #28]	; (b1c0 <log_backend_uart_init+0x20>)
    b1a4:	f024 f8b8 	bl	2f318 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    b1a8:	b940      	cbnz	r0, b1bc <log_backend_uart_init+0x1c>
    b1aa:	4906      	ldr	r1, [pc, #24]	; (b1c4 <log_backend_uart_init+0x24>)
    b1ac:	4806      	ldr	r0, [pc, #24]	; (b1c8 <log_backend_uart_init+0x28>)
    b1ae:	2270      	movs	r2, #112	; 0x70
    b1b0:	f01d fd08 	bl	28bc4 <assert_print>
    b1b4:	2170      	movs	r1, #112	; 0x70
    b1b6:	4803      	ldr	r0, [pc, #12]	; (b1c4 <log_backend_uart_init+0x24>)
    b1b8:	f01d fcfd 	bl	28bb6 <assert_post_action>
}
    b1bc:	bd08      	pop	{r3, pc}
    b1be:	bf00      	nop
    b1c0:	0002f89c 	.word	0x0002f89c
    b1c4:	0003120b 	.word	0x0003120b
    b1c8:	00030da5 	.word	0x00030da5

0000b1cc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    b1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b1d0:	460f      	mov	r7, r1
    b1d2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b1d4:	2108      	movs	r1, #8
    b1d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b1d8:	f01d ff30 	bl	2903c <nvs_al_size.isra.0>
    b1dc:	4680      	mov	r8, r0

	*addr -= ate_size;
    b1de:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    b1e0:	f8df 9048 	ldr.w	r9, [pc, #72]	; b22c <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    b1e4:	1a24      	subs	r4, r4, r0
    b1e6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    b1e8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    b1ec:	42ac      	cmp	r4, r5
    b1ee:	d803      	bhi.n	b1f8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    b1f0:	2000      	movs	r0, #0
}
    b1f2:	b003      	add	sp, #12
    b1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b1f8:	2308      	movs	r3, #8
    b1fa:	466a      	mov	r2, sp
    b1fc:	4621      	mov	r1, r4
    b1fe:	4630      	mov	r0, r6
    b200:	f01d fe8c 	bl	28f1c <nvs_flash_rd>
		if (rc) {
    b204:	2800      	cmp	r0, #0
    b206:	d1f4      	bne.n	b1f2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    b208:	4669      	mov	r1, sp
    b20a:	4630      	mov	r0, r6
    b20c:	f01d ff20 	bl	29050 <nvs_ate_valid>
    b210:	b140      	cbz	r0, b224 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    b212:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b216:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    b21a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    b21e:	4413      	add	r3, r2
    b220:	441d      	add	r5, r3
			*addr = ate_end_addr;
    b222:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    b224:	eba4 0408 	sub.w	r4, r4, r8
    b228:	e7e0      	b.n	b1ec <nvs_recover_last_ate+0x20>
    b22a:	bf00      	nop
    b22c:	ffff0000 	.word	0xffff0000

0000b230 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b234:	b08f      	sub	sp, #60	; 0x3c
    b236:	4604      	mov	r4, r0
    b238:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    b23a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    b23e:	4640      	mov	r0, r8
    b240:	f024 f8b3 	bl	2f3aa <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    b244:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    b246:	6883      	ldr	r3, [r0, #8]
    b248:	68db      	ldr	r3, [r3, #12]
    b24a:	4798      	blx	r3
    b24c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    b24e:	b988      	cbnz	r0, b274 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    b250:	4b8d      	ldr	r3, [pc, #564]	; (b488 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    b252:	637b      	str	r3, [r7, #52]	; 0x34
    b254:	2302      	movs	r3, #2
		return -EINVAL;
    b256:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    b25a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b25e:	488b      	ldr	r0, [pc, #556]	; (b48c <nvs_mount+0x25c>)
    b260:	633b      	str	r3, [r7, #48]	; 0x30
    b262:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b266:	f01d fee6 	bl	29036 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    b26a:	4628      	mov	r0, r5
    b26c:	373c      	adds	r7, #60	; 0x3c
    b26e:	46bd      	mov	sp, r7
    b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    b274:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    b276:	6883      	ldr	r3, [r0, #8]
    b278:	68db      	ldr	r3, [r3, #12]
    b27a:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    b27c:	6803      	ldr	r3, [r0, #0]
    b27e:	3b01      	subs	r3, #1
    b280:	2b1f      	cmp	r3, #31
    b282:	d901      	bls.n	b288 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    b284:	4b82      	ldr	r3, [pc, #520]	; (b490 <nvs_mount+0x260>)
    b286:	e7e4      	b.n	b252 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    b288:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b28a:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b28c:	f107 0214 	add.w	r2, r7, #20
    b290:	f022 ff90 	bl	2e1b4 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b294:	b108      	cbz	r0, b29a <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    b296:	4b7f      	ldr	r3, [pc, #508]	; (b494 <nvs_mount+0x264>)
    b298:	e7db      	b.n	b252 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    b29a:	89a5      	ldrh	r5, [r4, #12]
    b29c:	b12d      	cbz	r5, b2aa <nvs_mount+0x7a>
    b29e:	69bb      	ldr	r3, [r7, #24]
    b2a0:	fbb5 f2f3 	udiv	r2, r5, r3
    b2a4:	fb03 5512 	mls	r5, r3, r2, r5
    b2a8:	b10d      	cbz	r5, b2ae <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    b2aa:	4b7b      	ldr	r3, [pc, #492]	; (b498 <nvs_mount+0x268>)
    b2ac:	e7d1      	b.n	b252 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    b2ae:	89e3      	ldrh	r3, [r4, #14]
    b2b0:	2b01      	cmp	r3, #1
    b2b2:	d801      	bhi.n	b2b8 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    b2b4:	4b79      	ldr	r3, [pc, #484]	; (b49c <nvs_mount+0x26c>)
    b2b6:	e7cc      	b.n	b252 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b2b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    b2ba:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    b2bc:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b2c0:	f04f 33ff 	mov.w	r3, #4294967295
    b2c4:	f04f 32ff 	mov.w	r2, #4294967295
    b2c8:	4640      	mov	r0, r8
    b2ca:	f01a faff 	bl	258cc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b2ce:	2108      	movs	r1, #8
    b2d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b2d2:	f01d feb3 	bl	2903c <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    b2d6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b2d8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    b2da:	89e3      	ldrh	r3, [r4, #14]
    b2dc:	fa1f fb85 	uxth.w	fp, r5
    b2e0:	455b      	cmp	r3, fp
    b2e2:	d808      	bhi.n	b2f6 <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    b2e4:	89e3      	ldrh	r3, [r4, #14]
    b2e6:	454b      	cmp	r3, r9
    b2e8:	d123      	bne.n	b332 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    b2ea:	4640      	mov	r0, r8
    b2ec:	f01a fba4 	bl	25a38 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    b2f0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    b2f4:	e7b9      	b.n	b26a <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    b2f6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    b2f8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    b2fa:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    b2fc:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b300:	4652      	mov	r2, sl
    b302:	2308      	movs	r3, #8
    b304:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    b306:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b308:	f01d fe4d 	bl	28fa6 <nvs_flash_cmp_const>
		if (rc) {
    b30c:	b178      	cbz	r0, b32e <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    b30e:	4639      	mov	r1, r7
    b310:	4620      	mov	r0, r4
    b312:	f01d fe11 	bl	28f38 <nvs_sector_advance>
			closed_sectors++;
    b316:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b31a:	2308      	movs	r3, #8
    b31c:	4652      	mov	r2, sl
    b31e:	4620      	mov	r0, r4
    b320:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    b322:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    b326:	f01d fe3e 	bl	28fa6 <nvs_flash_cmp_const>
			if (!rc) {
    b32a:	2800      	cmp	r0, #0
    b32c:	d0da      	beq.n	b2e4 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    b32e:	3501      	adds	r5, #1
    b330:	e7d3      	b.n	b2da <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    b332:	455b      	cmp	r3, fp
    b334:	d10b      	bne.n	b34e <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    b336:	6839      	ldr	r1, [r7, #0]
    b338:	2308      	movs	r3, #8
    b33a:	4652      	mov	r2, sl
    b33c:	4620      	mov	r0, r4
    b33e:	1b89      	subs	r1, r1, r6
    b340:	f01d fe31 	bl	28fa6 <nvs_flash_cmp_const>
		if (!rc) {
    b344:	b918      	cbnz	r0, b34e <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    b346:	4639      	mov	r1, r7
    b348:	4620      	mov	r0, r4
    b34a:	f01d fdf5 	bl	28f38 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    b34e:	4639      	mov	r1, r7
    b350:	4620      	mov	r0, r4
    b352:	f7ff ff3b 	bl	b1cc <nvs_recover_last_ate>
	if (rc) {
    b356:	4605      	mov	r5, r0
    b358:	b118      	cbz	r0, b362 <nvs_mount+0x132>
    b35a:	4640      	mov	r0, r8
    b35c:	f01a fb6c 	bl	25a38 <z_impl_k_mutex_unlock>
	if (rc) {
    b360:	e783      	b.n	b26a <nvs_mount+0x3a>
	fs->ate_wra = addr;
    b362:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b364:	ea4f 4913 	mov.w	r9, r3, lsr #16
    b368:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    b36c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    b36e:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    b372:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    b376:	4299      	cmp	r1, r3
    b378:	d30f      	bcc.n	b39a <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b37a:	2308      	movs	r3, #8
    b37c:	4620      	mov	r0, r4
    b37e:	1d3a      	adds	r2, r7, #4
    b380:	f01d fdcc 	bl	28f1c <nvs_flash_rd>
		if (rc) {
    b384:	4605      	mov	r5, r0
    b386:	2800      	cmp	r0, #0
    b388:	d1e7      	bne.n	b35a <nvs_mount+0x12a>
    b38a:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    b38c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b390:	4592      	cmp	sl, r2
    b392:	d144      	bne.n	b41e <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    b394:	3501      	adds	r5, #1
    b396:	2d08      	cmp	r5, #8
    b398:	d1f8      	bne.n	b38c <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b39a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    b39c:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b39e:	0c1b      	lsrs	r3, r3, #16
    b3a0:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    b3a2:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    b3a4:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    b3a6:	f01d fdc7 	bl	28f38 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    b3aa:	4652      	mov	r2, sl
    b3ac:	4620      	mov	r0, r4
    b3ae:	89a3      	ldrh	r3, [r4, #12]
    b3b0:	6839      	ldr	r1, [r7, #0]
    b3b2:	f01d fdf8 	bl	28fa6 <nvs_flash_cmp_const>
	if (rc < 0) {
    b3b6:	1e05      	subs	r5, r0, #0
    b3b8:	dbcf      	blt.n	b35a <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    b3ba:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    b3bc:	f000 8082 	beq.w	b4c4 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    b3c0:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    b3c4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    b3c8:	89a3      	ldrh	r3, [r4, #12]
    b3ca:	fa1f f289 	uxth.w	r2, r9
    b3ce:	1b9b      	subs	r3, r3, r6
    b3d0:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    b3d2:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    b3d6:	d33c      	bcc.n	b452 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    b3d8:	4b31      	ldr	r3, [pc, #196]	; (b4a0 <nvs_mount+0x270>)
    b3da:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b3de:	637b      	str	r3, [r7, #52]	; 0x34
    b3e0:	2302      	movs	r3, #2
    b3e2:	482a      	ldr	r0, [pc, #168]	; (b48c <nvs_mount+0x25c>)
    b3e4:	633b      	str	r3, [r7, #48]	; 0x30
    b3e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b3ea:	f01d fe24 	bl	29036 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    b3ee:	4620      	mov	r0, r4
    b3f0:	6861      	ldr	r1, [r4, #4]
    b3f2:	f01d fdfd 	bl	28ff0 <nvs_flash_erase_sector>
		if (rc) {
    b3f6:	4605      	mov	r5, r0
    b3f8:	2800      	cmp	r0, #0
    b3fa:	d1ae      	bne.n	b35a <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    b3fc:	6863      	ldr	r3, [r4, #4]
    b3fe:	4a29      	ldr	r2, [pc, #164]	; (b4a4 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b400:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    b402:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    b404:	440b      	add	r3, r1
    b406:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    b40a:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    b40c:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    b40e:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    b410:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    b412:	f01d feff 	bl	29214 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    b416:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    b418:	2d00      	cmp	r5, #0
    b41a:	d06f      	beq.n	b4fc <nvs_mount+0x2cc>
    b41c:	e79d      	b.n	b35a <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    b41e:	4620      	mov	r0, r4
    b420:	1d39      	adds	r1, r7, #4
    b422:	f01d fe15 	bl	29050 <nvs_ate_valid>
    b426:	6862      	ldr	r2, [r4, #4]
    b428:	b910      	cbnz	r0, b430 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    b42a:	1b92      	subs	r2, r2, r6
    b42c:	6062      	str	r2, [r4, #4]
    b42e:	e7a0      	b.n	b372 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    b430:	893d      	ldrh	r5, [r7, #8]
    b432:	88f9      	ldrh	r1, [r7, #6]
    b434:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    b436:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    b43a:	4429      	add	r1, r5
    b43c:	f01d fdfe 	bl	2903c <nvs_al_size.isra.0>
    b440:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b442:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    b444:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    b446:	d1f0      	bne.n	b42a <nvs_mount+0x1fa>
    b448:	2d00      	cmp	r5, #0
    b44a:	d0ee      	beq.n	b42a <nvs_mount+0x1fa>
				rc = -ESPIPE;
    b44c:	f06f 051c 	mvn.w	r5, #28
    b450:	e09c      	b.n	b58c <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    b452:	2308      	movs	r3, #8
    b454:	4649      	mov	r1, r9
    b456:	4620      	mov	r0, r4
    b458:	f107 020c 	add.w	r2, r7, #12
    b45c:	f01d fd5e 	bl	28f1c <nvs_flash_rd>
			if (rc) {
    b460:	4605      	mov	r5, r0
    b462:	2800      	cmp	r0, #0
    b464:	f47f af79 	bne.w	b35a <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    b468:	4620      	mov	r0, r4
    b46a:	f107 010c 	add.w	r1, r7, #12
    b46e:	f01d fdef 	bl	29050 <nvs_ate_valid>
    b472:	b130      	cbz	r0, b482 <nvs_mount+0x252>
    b474:	89bb      	ldrh	r3, [r7, #12]
    b476:	4553      	cmp	r3, sl
    b478:	d103      	bne.n	b482 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    b47a:	8a3b      	ldrh	r3, [r7, #16]
    b47c:	2b00      	cmp	r3, #0
    b47e:	f000 808b 	beq.w	b598 <nvs_mount+0x368>
			addr += ate_size;
    b482:	44b1      	add	r9, r6
    b484:	e7a0      	b.n	b3c8 <nvs_mount+0x198>
    b486:	bf00      	nop
    b488:	00031277 	.word	0x00031277
    b48c:	0002fd74 	.word	0x0002fd74
    b490:	00031299 	.word	0x00031299
    b494:	000312b6 	.word	0x000312b6
    b498:	000312ce 	.word	0x000312ce
    b49c:	000312e2 	.word	0x000312e2
    b4a0:	0003133f 	.word	0x0003133f
    b4a4:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    b4a8:	4652      	mov	r2, sl
    b4aa:	4620      	mov	r0, r4
    b4ac:	1a5b      	subs	r3, r3, r1
    b4ae:	f01d fd7a 	bl	28fa6 <nvs_flash_cmp_const>
		if (rc < 0) {
    b4b2:	1e05      	subs	r5, r0, #0
    b4b4:	f6ff af51 	blt.w	b35a <nvs_mount+0x12a>
		if (!rc) {
    b4b8:	d008      	beq.n	b4cc <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    b4ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b4bc:	68a3      	ldr	r3, [r4, #8]
    b4be:	6812      	ldr	r2, [r2, #0]
    b4c0:	4413      	add	r3, r2
    b4c2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    b4c4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    b4c8:	428b      	cmp	r3, r1
    b4ca:	d8ed      	bhi.n	b4a8 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    b4cc:	6861      	ldr	r1, [r4, #4]
    b4ce:	89a3      	ldrh	r3, [r4, #12]
    b4d0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    b4d4:	429a      	cmp	r2, r3
    b4d6:	d19f      	bne.n	b418 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    b4d8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5c8 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    b4dc:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    b4de:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    b4e2:	4293      	cmp	r3, r2
    b4e4:	d098      	beq.n	b418 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    b4e6:	4620      	mov	r0, r4
    b4e8:	f01d fd82 	bl	28ff0 <nvs_flash_erase_sector>
		if (rc) {
    b4ec:	4605      	mov	r5, r0
    b4ee:	2800      	cmp	r0, #0
    b4f0:	f47f af33 	bne.w	b35a <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b4f4:	6863      	ldr	r3, [r4, #4]
    b4f6:	ea03 0309 	and.w	r3, r3, r9
    b4fa:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    b4fc:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    b4fe:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    b500:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    b504:	429a      	cmp	r2, r3
    b506:	d03d      	beq.n	b584 <nvs_mount+0x354>
    b508:	4640      	mov	r0, r8
    b50a:	f01a fa95 	bl	25a38 <z_impl_k_mutex_unlock>
	fs->ready = true;
    b50e:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b510:	46e8      	mov	r8, sp
    b512:	b088      	sub	sp, #32
	fs->ready = true;
    b514:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    b516:	466d      	mov	r5, sp
    b518:	89e2      	ldrh	r2, [r4, #14]
    b51a:	89a3      	ldrh	r3, [r4, #12]
    b51c:	f04f 0904 	mov.w	r9, #4
    b520:	462e      	mov	r6, r5
    b522:	492a      	ldr	r1, [pc, #168]	; (b5cc <nvs_mount+0x39c>)
    b524:	61eb      	str	r3, [r5, #28]
    b526:	e9c5 1205 	strd	r1, r2, [r5, #20]
    b52a:	f846 9f10 	str.w	r9, [r6, #16]!
    b52e:	4632      	mov	r2, r6
    b530:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b534:	4826      	ldr	r0, [pc, #152]	; (b5d0 <nvs_mount+0x3a0>)
    b536:	f01d fd7e 	bl	29036 <z_log_msg_static_create.constprop.0>
    b53a:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    b53c:	6863      	ldr	r3, [r4, #4]
    b53e:	46ad      	mov	sp, r5
    b540:	4a24      	ldr	r2, [pc, #144]	; (b5d4 <nvs_mount+0x3a4>)
    b542:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b546:	616a      	str	r2, [r5, #20]
    b548:	0c1a      	lsrs	r2, r3, #16
    b54a:	b29b      	uxth	r3, r3
    b54c:	61aa      	str	r2, [r5, #24]
    b54e:	61eb      	str	r3, [r5, #28]
    b550:	4632      	mov	r2, r6
    b552:	481f      	ldr	r0, [pc, #124]	; (b5d0 <nvs_mount+0x3a0>)
    b554:	f8c5 9010 	str.w	r9, [r5, #16]
    b558:	f01d fd6d 	bl	29036 <z_log_msg_static_create.constprop.0>
    b55c:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    b55e:	68a3      	ldr	r3, [r4, #8]
    b560:	46ad      	mov	sp, r5
    b562:	4a1d      	ldr	r2, [pc, #116]	; (b5d8 <nvs_mount+0x3a8>)
    b564:	f8c5 9010 	str.w	r9, [r5, #16]
    b568:	616a      	str	r2, [r5, #20]
    b56a:	0c1a      	lsrs	r2, r3, #16
    b56c:	b29b      	uxth	r3, r3
    b56e:	61aa      	str	r2, [r5, #24]
    b570:	61eb      	str	r3, [r5, #28]
    b572:	4632      	mov	r2, r6
    b574:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b578:	4815      	ldr	r0, [pc, #84]	; (b5d0 <nvs_mount+0x3a0>)
    b57a:	f01d fd5c 	bl	29036 <z_log_msg_static_create.constprop.0>
	return 0;
    b57e:	2500      	movs	r5, #0
    b580:	46c5      	mov	sp, r8
    b582:	e672      	b.n	b26a <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    b584:	4620      	mov	r0, r4
    b586:	f01d fe30 	bl	291ea <nvs_add_gc_done_ate>
    b58a:	4605      	mov	r5, r0
    b58c:	4640      	mov	r0, r8
    b58e:	f01a fa53 	bl	25a38 <z_impl_k_mutex_unlock>
	if (rc) {
    b592:	2d00      	cmp	r5, #0
    b594:	d0bb      	beq.n	b50e <nvs_mount+0x2de>
    b596:	e668      	b.n	b26a <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    b598:	4b10      	ldr	r3, [pc, #64]	; (b5dc <nvs_mount+0x3ac>)
    b59a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b59e:	637b      	str	r3, [r7, #52]	; 0x34
    b5a0:	2302      	movs	r3, #2
    b5a2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b5a6:	633b      	str	r3, [r7, #48]	; 0x30
    b5a8:	4809      	ldr	r0, [pc, #36]	; (b5d0 <nvs_mount+0x3a0>)
    b5aa:	f01d fd44 	bl	29036 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    b5ae:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    b5b0:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    b5b2:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    b5b4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    b5b6:	041b      	lsls	r3, r3, #16
    b5b8:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    b5ba:	f01d fcbd 	bl	28f38 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    b5be:	4620      	mov	r0, r4
    b5c0:	6839      	ldr	r1, [r7, #0]
    b5c2:	f01d fd15 	bl	28ff0 <nvs_flash_erase_sector>
    b5c6:	e726      	b.n	b416 <nvs_mount+0x1e6>
    b5c8:	ffff0000 	.word	0xffff0000
    b5cc:	00031305 	.word	0x00031305
    b5d0:	0002fd74 	.word	0x0002fd74
    b5d4:	0003131c 	.word	0x0003131c
    b5d8:	0003132e 	.word	0x0003132e
    b5dc:	00031366 	.word	0x00031366

0000b5e0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5e4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    b5e6:	7c03      	ldrb	r3, [r0, #16]
{
    b5e8:	4604      	mov	r4, r0
    b5ea:	4689      	mov	r9, r1
    b5ec:	4690      	mov	r8, r2
    b5ee:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    b5f0:	b97b      	cbnz	r3, b612 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    b5f2:	4b66      	ldr	r3, [pc, #408]	; (b78c <nvs_write+0x1ac>)
		return -EACCES;
    b5f4:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    b5f8:	930b      	str	r3, [sp, #44]	; 0x2c
    b5fa:	2302      	movs	r3, #2
    b5fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b600:	4863      	ldr	r0, [pc, #396]	; (b790 <nvs_write+0x1b0>)
    b602:	aa0a      	add	r2, sp, #40	; 0x28
    b604:	930a      	str	r3, [sp, #40]	; 0x28
    b606:	f01d fd16 	bl	29036 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    b60a:	4630      	mov	r0, r6
    b60c:	b00d      	add	sp, #52	; 0x34
    b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b612:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b614:	2108      	movs	r1, #8
    b616:	4610      	mov	r0, r2
    b618:	f01d fd10 	bl	2903c <nvs_al_size.isra.0>
    b61c:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    b61e:	4629      	mov	r1, r5
    b620:	4610      	mov	r0, r2
    b622:	f01d fd0b 	bl	2903c <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    b626:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    b628:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    b62a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    b62e:	42ab      	cmp	r3, r5
    b630:	f0c0 80a9 	bcc.w	b786 <nvs_write+0x1a6>
    b634:	b11d      	cbz	r5, b63e <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    b636:	f1b8 0f00 	cmp.w	r8, #0
    b63a:	f000 80a4 	beq.w	b786 <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    b63e:	6863      	ldr	r3, [r4, #4]
    b640:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b642:	4620      	mov	r0, r4
    b644:	aa04      	add	r2, sp, #16
    b646:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    b648:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b64c:	f01d fd38 	bl	290c0 <nvs_prev_ate>
		if (rc) {
    b650:	4606      	mov	r6, r0
    b652:	2800      	cmp	r0, #0
    b654:	d1d9      	bne.n	b60a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    b656:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b65a:	454b      	cmp	r3, r9
    b65c:	d005      	beq.n	b66a <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    b65e:	6862      	ldr	r2, [r4, #4]
    b660:	9b03      	ldr	r3, [sp, #12]
    b662:	429a      	cmp	r2, r3
    b664:	d1ed      	bne.n	b642 <nvs_write+0x62>
		if (len == 0) {
    b666:	b9e5      	cbnz	r5, b6a2 <nvs_write+0xc2>
    b668:	e7cf      	b.n	b60a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    b66a:	4620      	mov	r0, r4
    b66c:	a904      	add	r1, sp, #16
    b66e:	f01d fcef 	bl	29050 <nvs_ate_valid>
    b672:	2800      	cmp	r0, #0
    b674:	d0f3      	beq.n	b65e <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    b676:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    b67a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    b67e:	b175      	cbz	r5, b69e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    b680:	42ab      	cmp	r3, r5
    b682:	d10e      	bne.n	b6a2 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    b684:	ea4f 411b 	mov.w	r1, fp, lsr #16
    b688:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    b68a:	4401      	add	r1, r0
    b68c:	462b      	mov	r3, r5
    b68e:	4642      	mov	r2, r8
    b690:	4620      	mov	r0, r4
    b692:	f01d fc5e 	bl	28f52 <nvs_flash_block_cmp>
			if (rc <= 0) {
    b696:	2800      	cmp	r0, #0
    b698:	dc03      	bgt.n	b6a2 <nvs_write+0xc2>
    b69a:	4606      	mov	r6, r0
    b69c:	e7b5      	b.n	b60a <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    b69e:	2b00      	cmp	r3, #0
    b6a0:	d0b3      	beq.n	b60a <nvs_write+0x2a>
	if (data_size) {
    b6a2:	2f00      	cmp	r7, #0
    b6a4:	d13e      	bne.n	b724 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    b6a6:	f104 0314 	add.w	r3, r4, #20
    b6aa:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b6ac:	f04f 32ff 	mov.w	r2, #4294967295
    b6b0:	f04f 33ff 	mov.w	r3, #4294967295
    b6b4:	f104 0014 	add.w	r0, r4, #20
    b6b8:	f01a f908 	bl	258cc <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    b6bc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b794 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    b6c0:	89e3      	ldrh	r3, [r4, #14]
    b6c2:	429e      	cmp	r6, r3
    b6c4:	d05c      	beq.n	b780 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    b6c6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    b6ca:	18f9      	adds	r1, r7, r3
    b6cc:	428a      	cmp	r2, r1
    b6ce:	d32c      	bcc.n	b72a <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    b6d0:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    b6d4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    b6d6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    b6d8:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    b6dc:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    b6e0:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    b6e4:	f01d fc9e 	bl	29024 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    b6e8:	462b      	mov	r3, r5
    b6ea:	4642      	mov	r2, r8
    b6ec:	68a1      	ldr	r1, [r4, #8]
    b6ee:	4620      	mov	r0, r4
    b6f0:	f01d fd30 	bl	29154 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    b6f4:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    b6f6:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    b6f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b6fa:	f01d fc9f 	bl	2903c <nvs_al_size.isra.0>
    b6fe:	68a2      	ldr	r2, [r4, #8]
    b700:	4402      	add	r2, r0
    b702:	60a2      	str	r2, [r4, #8]
	if (rc) {
    b704:	f1ba 0f00 	cmp.w	sl, #0
    b708:	d107      	bne.n	b71a <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    b70a:	4620      	mov	r0, r4
    b70c:	a906      	add	r1, sp, #24
    b70e:	f01d fd5b 	bl	291c8 <nvs_flash_ate_wrt>
	rc = len;
    b712:	2800      	cmp	r0, #0
    b714:	bf14      	ite	ne
    b716:	4682      	movne	sl, r0
    b718:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    b71a:	9801      	ldr	r0, [sp, #4]
    b71c:	f01a f98c 	bl	25a38 <z_impl_k_mutex_unlock>
	return rc;
    b720:	4656      	mov	r6, sl
    b722:	e772      	b.n	b60a <nvs_write+0x2a>
		required_space = data_size + ate_size;
    b724:	4457      	add	r7, sl
    b726:	b2bf      	uxth	r7, r7
    b728:	e7bd      	b.n	b6a6 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b72a:	2108      	movs	r1, #8
    b72c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b72e:	f01d fc85 	bl	2903c <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    b732:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b736:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    b73a:	2300      	movs	r3, #0
    b73c:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    b740:	1813      	adds	r3, r2, r0
    b742:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    b746:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    b748:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    b74c:	441a      	add	r2, r3
    b74e:	1a10      	subs	r0, r2, r0
    b750:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    b752:	a806      	add	r0, sp, #24
    b754:	f01d fc66 	bl	29024 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    b758:	a906      	add	r1, sp, #24
    b75a:	4620      	mov	r0, r4
    b75c:	f01d fd34 	bl	291c8 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    b760:	4620      	mov	r0, r4
    b762:	1d21      	adds	r1, r4, #4
    b764:	f01d fbe8 	bl	28f38 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b768:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    b76a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    b76c:	ea03 030b 	and.w	r3, r3, fp
    b770:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    b772:	f01d fd4f 	bl	29214 <nvs_gc>
		if (rc) {
    b776:	4682      	mov	sl, r0
    b778:	2800      	cmp	r0, #0
    b77a:	d1ce      	bne.n	b71a <nvs_write+0x13a>
		gc_count++;
    b77c:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    b77e:	e79f      	b.n	b6c0 <nvs_write+0xe0>
			rc = -ENOSPC;
    b780:	f06f 0a1b 	mvn.w	sl, #27
    b784:	e7c9      	b.n	b71a <nvs_write+0x13a>
		return -EINVAL;
    b786:	f06f 0615 	mvn.w	r6, #21
    b78a:	e73e      	b.n	b60a <nvs_write+0x2a>
    b78c:	00031263 	.word	0x00031263
    b790:	0002fd74 	.word	0x0002fd74
    b794:	ffff0000 	.word	0xffff0000

0000b798 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b79c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    b79e:	7c03      	ldrb	r3, [r0, #16]
{
    b7a0:	b088      	sub	sp, #32
    b7a2:	4604      	mov	r4, r0
    b7a4:	460f      	mov	r7, r1
    b7a6:	4690      	mov	r8, r2
    b7a8:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    b7ac:	b973      	cbnz	r3, b7cc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    b7ae:	4b2f      	ldr	r3, [pc, #188]	; (b86c <nvs_read_hist+0xd4>)
    b7b0:	482f      	ldr	r0, [pc, #188]	; (b870 <nvs_read_hist+0xd8>)
    b7b2:	9307      	str	r3, [sp, #28]
    b7b4:	2302      	movs	r3, #2
    b7b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7ba:	aa06      	add	r2, sp, #24
    b7bc:	9306      	str	r3, [sp, #24]
    b7be:	f01d fc3a 	bl	29036 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    b7c2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    b7c6:	b008      	add	sp, #32
    b7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    b7cc:	2108      	movs	r1, #8
    b7ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b7d0:	f01d fc34 	bl	2903c <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    b7d4:	89a3      	ldrh	r3, [r4, #12]
    b7d6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    b7da:	42b3      	cmp	r3, r6
    b7dc:	d343      	bcc.n	b866 <nvs_read_hist+0xce>
	cnt_his = 0U;
    b7de:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    b7e0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    b7e4:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    b7e8:	454d      	cmp	r5, r9
    b7ea:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    b7ec:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    b7f0:	d909      	bls.n	b806 <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b7f2:	6863      	ldr	r3, [r4, #4]
    b7f4:	4553      	cmp	r3, sl
    b7f6:	d11e      	bne.n	b836 <nvs_read_hist+0x9e>
    b7f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b7fc:	42bb      	cmp	r3, r7
    b7fe:	d01a      	beq.n	b836 <nvs_read_hist+0x9e>
		return -ENOENT;
    b800:	f06f 0001 	mvn.w	r0, #1
    b804:	e7df      	b.n	b7c6 <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    b806:	4620      	mov	r0, r4
    b808:	aa02      	add	r2, sp, #8
    b80a:	a901      	add	r1, sp, #4
    b80c:	f01d fc58 	bl	290c0 <nvs_prev_ate>
		if (rc) {
    b810:	2800      	cmp	r0, #0
    b812:	d1d8      	bne.n	b7c6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    b814:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b818:	42bb      	cmp	r3, r7
    b81a:	d106      	bne.n	b82a <nvs_read_hist+0x92>
    b81c:	4620      	mov	r0, r4
    b81e:	a902      	add	r1, sp, #8
    b820:	f01d fc16 	bl	29050 <nvs_ate_valid>
    b824:	b108      	cbz	r0, b82a <nvs_read_hist+0x92>
			cnt_his++;
    b826:	3501      	adds	r5, #1
    b828:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    b82a:	6862      	ldr	r2, [r4, #4]
    b82c:	9b01      	ldr	r3, [sp, #4]
    b82e:	429a      	cmp	r2, r3
    b830:	d1da      	bne.n	b7e8 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    b832:	4651      	mov	r1, sl
    b834:	e7e0      	b.n	b7f8 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b836:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    b83a:	2b00      	cmp	r3, #0
    b83c:	d0e0      	beq.n	b800 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    b83e:	45a9      	cmp	r9, r5
    b840:	d8de      	bhi.n	b800 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    b842:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    b846:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b848:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    b84a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    b84e:	bf28      	it	cs
    b850:	4633      	movcs	r3, r6
    b852:	4401      	add	r1, r0
    b854:	4642      	mov	r2, r8
    b856:	4620      	mov	r0, r4
    b858:	f01d fb60 	bl	28f1c <nvs_flash_rd>
	if (rc) {
    b85c:	2800      	cmp	r0, #0
    b85e:	d1b2      	bne.n	b7c6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    b860:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b864:	e7af      	b.n	b7c6 <nvs_read_hist+0x2e>
		return -EINVAL;
    b866:	f06f 0015 	mvn.w	r0, #21
    b86a:	e7ac      	b.n	b7c6 <nvs_read_hist+0x2e>
    b86c:	00031263 	.word	0x00031263
    b870:	0002fd74 	.word	0x0002fd74

0000b874 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    b874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    b876:	b970      	cbnz	r0, b896 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    b878:	4b12      	ldr	r3, [pc, #72]	; (b8c4 <ipc_service_open_instance+0x50>)
    b87a:	4813      	ldr	r0, [pc, #76]	; (b8c8 <ipc_service_open_instance+0x54>)
    b87c:	9305      	str	r3, [sp, #20]
    b87e:	2302      	movs	r3, #2
    b880:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b884:	aa04      	add	r2, sp, #16
    b886:	9304      	str	r3, [sp, #16]
    b888:	f01d fd9c 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b88c:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    b890:	b007      	add	sp, #28
    b892:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    b896:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    b898:	b963      	cbnz	r3, b8b4 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    b89a:	4b0c      	ldr	r3, [pc, #48]	; (b8cc <ipc_service_open_instance+0x58>)
    b89c:	480a      	ldr	r0, [pc, #40]	; (b8c8 <ipc_service_open_instance+0x54>)
    b89e:	9305      	str	r3, [sp, #20]
    b8a0:	2302      	movs	r3, #2
    b8a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8a6:	aa04      	add	r2, sp, #16
    b8a8:	9304      	str	r3, [sp, #16]
    b8aa:	f01d fd8b 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b8ae:	f06f 0004 	mvn.w	r0, #4
    b8b2:	e7ed      	b.n	b890 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    b8b4:	681b      	ldr	r3, [r3, #0]
    b8b6:	b11b      	cbz	r3, b8c0 <ipc_service_open_instance+0x4c>
}
    b8b8:	b007      	add	sp, #28
    b8ba:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    b8be:	4718      	bx	r3
		return 0;
    b8c0:	4618      	mov	r0, r3
    b8c2:	e7e5      	b.n	b890 <ipc_service_open_instance+0x1c>
    b8c4:	00031382 	.word	0x00031382
    b8c8:	0002fd7c 	.word	0x0002fd7c
    b8cc:	00031393 	.word	0x00031393

0000b8d0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    b8d0:	b530      	push	{r4, r5, lr}
    b8d2:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    b8d4:	b108      	cbz	r0, b8da <ipc_service_register_endpoint+0xa>
    b8d6:	b101      	cbz	r1, b8da <ipc_service_register_endpoint+0xa>
    b8d8:	b96a      	cbnz	r2, b8f6 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    b8da:	4b13      	ldr	r3, [pc, #76]	; (b928 <ipc_service_register_endpoint+0x58>)
    b8dc:	4813      	ldr	r0, [pc, #76]	; (b92c <ipc_service_register_endpoint+0x5c>)
    b8de:	9305      	str	r3, [sp, #20]
    b8e0:	2302      	movs	r3, #2
    b8e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8e6:	aa04      	add	r2, sp, #16
    b8e8:	9304      	str	r3, [sp, #16]
    b8ea:	f01d fd6b 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b8ee:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    b8f2:	b007      	add	sp, #28
    b8f4:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    b8f6:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    b8f8:	b10c      	cbz	r4, b8fe <ipc_service_register_endpoint+0x2e>
    b8fa:	68e5      	ldr	r5, [r4, #12]
    b8fc:	b965      	cbnz	r5, b918 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    b8fe:	4b0c      	ldr	r3, [pc, #48]	; (b930 <ipc_service_register_endpoint+0x60>)
    b900:	480a      	ldr	r0, [pc, #40]	; (b92c <ipc_service_register_endpoint+0x5c>)
    b902:	9305      	str	r3, [sp, #20]
    b904:	2302      	movs	r3, #2
    b906:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b90a:	aa04      	add	r2, sp, #16
    b90c:	9304      	str	r3, [sp, #16]
    b90e:	f01d fd59 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b912:	f06f 0004 	mvn.w	r0, #4
    b916:	e7ec      	b.n	b8f2 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    b918:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    b91c:	68e3      	ldr	r3, [r4, #12]
}
    b91e:	b007      	add	sp, #28
    b920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    b924:	4718      	bx	r3
    b926:	bf00      	nop
    b928:	000313b1 	.word	0x000313b1
    b92c:	0002fd7c 	.word	0x0002fd7c
    b930:	00031393 	.word	0x00031393

0000b934 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    b934:	b530      	push	{r4, r5, lr}
    b936:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    b938:	4604      	mov	r4, r0
{
    b93a:	b087      	sub	sp, #28
	if (!ept) {
    b93c:	b968      	cbnz	r0, b95a <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    b93e:	4b1a      	ldr	r3, [pc, #104]	; (b9a8 <ipc_service_send+0x74>)
    b940:	481a      	ldr	r0, [pc, #104]	; (b9ac <ipc_service_send+0x78>)
    b942:	9305      	str	r3, [sp, #20]
    b944:	2302      	movs	r3, #2
    b946:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b94a:	aa04      	add	r2, sp, #16
    b94c:	9304      	str	r3, [sp, #16]
    b94e:	f01d fd39 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    b952:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    b956:	b007      	add	sp, #28
    b958:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    b95a:	6800      	ldr	r0, [r0, #0]
    b95c:	b960      	cbnz	r0, b978 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    b95e:	4b14      	ldr	r3, [pc, #80]	; (b9b0 <ipc_service_send+0x7c>)
    b960:	4812      	ldr	r0, [pc, #72]	; (b9ac <ipc_service_send+0x78>)
    b962:	9305      	str	r3, [sp, #20]
    b964:	2302      	movs	r3, #2
    b966:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b96a:	aa04      	add	r2, sp, #16
    b96c:	9304      	str	r3, [sp, #16]
    b96e:	f01d fd29 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    b972:	f06f 0001 	mvn.w	r0, #1
    b976:	e7ee      	b.n	b956 <ipc_service_send+0x22>
	backend = ept->instance->api;
    b978:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    b97a:	b10a      	cbz	r2, b980 <ipc_service_send+0x4c>
    b97c:	6895      	ldr	r5, [r2, #8]
    b97e:	b965      	cbnz	r5, b99a <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    b980:	4b0c      	ldr	r3, [pc, #48]	; (b9b4 <ipc_service_send+0x80>)
    b982:	480a      	ldr	r0, [pc, #40]	; (b9ac <ipc_service_send+0x78>)
    b984:	9305      	str	r3, [sp, #20]
    b986:	2302      	movs	r3, #2
    b988:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b98c:	aa04      	add	r2, sp, #16
    b98e:	9304      	str	r3, [sp, #16]
    b990:	f01d fd18 	bl	293c4 <z_log_msg_static_create.constprop.0>
		return -EIO;
    b994:	f06f 0004 	mvn.w	r0, #4
    b998:	e7dd      	b.n	b956 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    b99a:	460a      	mov	r2, r1
    b99c:	46ac      	mov	ip, r5
    b99e:	6861      	ldr	r1, [r4, #4]
}
    b9a0:	b007      	add	sp, #28
    b9a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    b9a6:	4760      	bx	ip
    b9a8:	000313dd 	.word	0x000313dd
    b9ac:	0002fd7c 	.word	0x0002fd7c
    b9b0:	000313ee 	.word	0x000313ee
    b9b4:	00031393 	.word	0x00031393

0000b9b8 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    b9b8:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    b9ba:	2204      	movs	r2, #4
    b9bc:	2100      	movs	r1, #0
    b9be:	4802      	ldr	r0, [pc, #8]	; (b9c8 <shared_memory_prepare+0x10>)
    b9c0:	f01e fdb6 	bl	2a530 <memset>
		}
	}

	return 0;
}
    b9c4:	2000      	movs	r0, #0
    b9c6:	bd08      	pop	{r3, pc}
    b9c8:	20070000 	.word	0x20070000

0000b9cc <advertise_ept>:
{
    b9cc:	b530      	push	{r4, r5, lr}
    b9ce:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b9d0:	490e      	ldr	r1, [pc, #56]	; (ba0c <advertise_ept+0x40>)
{
    b9d2:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b9d4:	9102      	str	r1, [sp, #8]
    b9d6:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    b9da:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    b9dc:	e9cd 3100 	strd	r3, r1, [sp]
    b9e0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b9e4:	f04f 33ff 	mov.w	r3, #4294967295
    b9e8:	4620      	mov	r0, r4
    b9ea:	f018 ffef 	bl	249cc <rpmsg_create_ept>
	if (err != 0) {
    b9ee:	b950      	cbnz	r0, ba06 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    b9f0:	2301      	movs	r3, #1
    b9f2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    b9f6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    b9fa:	b123      	cbz	r3, ba06 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    b9fc:	4620      	mov	r0, r4
}
    b9fe:	b005      	add	sp, #20
    ba00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    ba04:	4718      	bx	r3
}
    ba06:	b005      	add	sp, #20
    ba08:	bd30      	pop	{r4, r5, pc}
    ba0a:	bf00      	nop
    ba0c:	000294bb 	.word	0x000294bb

0000ba10 <get_ept>:
{
    ba10:	b538      	push	{r3, r4, r5, lr}
    ba12:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    ba14:	4611      	mov	r1, r2
{
    ba16:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    ba18:	f01d fd51 	bl	294be <get_ept_slot_with_name>
	if (ept != NULL) {
    ba1c:	4603      	mov	r3, r0
    ba1e:	b938      	cbnz	r0, ba30 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    ba20:	4628      	mov	r0, r5
    ba22:	4904      	ldr	r1, [pc, #16]	; (ba34 <get_ept+0x24>)
    ba24:	f01d fd4b 	bl	294be <get_ept_slot_with_name>
    ba28:	4603      	mov	r3, r0
	if (ept != NULL) {
    ba2a:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    ba2c:	6023      	str	r3, [r4, #0]
}
    ba2e:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    ba30:	2001      	movs	r0, #1
    ba32:	e7fb      	b.n	ba2c <get_ept+0x1c>
    ba34:	00033113 	.word	0x00033113

0000ba38 <open>:
{
    ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ba3c:	2301      	movs	r3, #1
    ba3e:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    ba40:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    ba42:	6846      	ldr	r6, [r0, #4]
{
    ba44:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    ba46:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    ba4a:	e8d7 2fef 	ldaex	r2, [r7]
    ba4e:	2a00      	cmp	r2, #0
    ba50:	d103      	bne.n	ba5a <open+0x22>
    ba52:	e8c7 3fe1 	stlex	r1, r3, [r7]
    ba56:	2900      	cmp	r1, #0
    ba58:	d1f7      	bne.n	ba4a <open+0x12>
    ba5a:	f040 80b8 	bne.w	bbce <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    ba5e:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    ba60:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    ba62:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    ba64:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    ba66:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    ba6a:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    ba6e:	bf26      	itte	cs
    ba70:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    ba74:	fab3 f383 	clzcs	r3, r3
		return 0;
    ba78:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    ba7a:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    ba7e:	bf28      	it	cs
    ba80:	f1c3 0320 	rsbcs	r3, r3, #32
    ba84:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    ba86:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    ba88:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    ba8c:	f000 8099 	beq.w	bbc2 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    ba90:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    ba92:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    ba94:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    ba96:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    ba98:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    ba9c:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    ba9e:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    baa0:	3209      	adds	r2, #9
    baa2:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    baa6:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    baa8:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    baac:	440a      	add	r2, r1
	return (buf_size * num);
    baae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    bab0:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    bab4:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    bab6:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    baba:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    babe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    bac0:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    bac2:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    bac6:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    baca:	3303      	adds	r3, #3
    bacc:	4413      	add	r3, r2
    bace:	f023 0303 	bic.w	r3, r3, #3
    bad2:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    bad6:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    bad8:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    badc:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    bae0:	4b3c      	ldr	r3, [pc, #240]	; (bbd4 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    bae2:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    bae4:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    bae8:	6831      	ldr	r1, [r6, #0]
    baea:	f000 fa1d 	bl	bf28 <ipc_static_vrings_init>
	if (err != 0) {
    baee:	4604      	mov	r4, r0
    baf0:	bb30      	cbnz	r0, bb40 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    baf2:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    baf6:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    bafa:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    bafe:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    bb02:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    bb04:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    bb06:	bf08      	it	eq
    bb08:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    bb0a:	f01a fbdf 	bl	262cc <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    bb0e:	2300      	movs	r3, #0
    bb10:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    bb14:	4930      	ldr	r1, [pc, #192]	; (bbd8 <open+0x1a0>)
    bb16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bb1a:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    bb1e:	9300      	str	r3, [sp, #0]
    bb20:	4658      	mov	r0, fp
    bb22:	4623      	mov	r3, r4
    bb24:	f01a fbe8 	bl	262f8 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    bb28:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    bb2c:	492b      	ldr	r1, [pc, #172]	; (bbdc <open+0x1a4>)
    bb2e:	f01a fb2d 	bl	2618c <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    bb32:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    bb36:	6883      	ldr	r3, [r0, #8]
    bb38:	685c      	ldr	r4, [r3, #4]
    bb3a:	b91c      	cbnz	r4, bb44 <open+0x10c>
		return -ENOSYS;
    bb3c:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    bb40:	2100      	movs	r1, #0
    bb42:	e037      	b.n	bbb4 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    bb44:	464b      	mov	r3, r9
    bb46:	4a26      	ldr	r2, [pc, #152]	; (bbe0 <open+0x1a8>)
    bb48:	f8da 1018 	ldr.w	r1, [sl, #24]
    bb4c:	47a0      	blx	r4
	if (err != 0) {
    bb4e:	4604      	mov	r4, r0
    bb50:	2800      	cmp	r0, #0
    bb52:	d1f5      	bne.n	bb40 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    bb54:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    bb58:	6883      	ldr	r3, [r0, #8]
    bb5a:	691b      	ldr	r3, [r3, #16]
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	d0ed      	beq.n	bb3c <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    bb60:	2201      	movs	r2, #1
    bb62:	f8da 1018 	ldr.w	r1, [sl, #24]
    bb66:	4798      	blx	r3
	if (err != 0) {
    bb68:	4604      	mov	r4, r0
    bb6a:	2800      	cmp	r0, #0
    bb6c:	d1e8      	bne.n	bb40 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    bb6e:	4b1d      	ldr	r3, [pc, #116]	; (bbe4 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    bb70:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    bb72:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    bb76:	4b1c      	ldr	r3, [pc, #112]	; (bbe8 <open+0x1b0>)
    bb78:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    bb7c:	4b1b      	ldr	r3, [pc, #108]	; (bbec <open+0x1b4>)
    bb7e:	9303      	str	r3, [sp, #12]
    bb80:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    bb84:	9302      	str	r3, [sp, #8]
    bb86:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    bb8a:	e9cd 8300 	strd	r8, r3, [sp]
    bb8e:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    bb92:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    bb94:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    bb98:	f000 f98e 	bl	beb8 <ipc_rpmsg_init>
	if (err != 0) {
    bb9c:	4604      	mov	r4, r0
    bb9e:	2800      	cmp	r0, #0
    bba0:	d1ce      	bne.n	bb40 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    bba2:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    bba6:	f019 f8ab 	bl	24d00 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    bbaa:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    bbac:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    bbb0:	db0a      	blt.n	bbc8 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    bbb2:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    bbb4:	4638      	mov	r0, r7
    bbb6:	f01d fcb7 	bl	29528 <atomic_set.isra.0>
}
    bbba:	4620      	mov	r0, r4
    bbbc:	b005      	add	sp, #20
    bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    bbc2:	f06f 040b 	mvn.w	r4, #11
    bbc6:	e7bb      	b.n	bb40 <open+0x108>
		err = -EINVAL;
    bbc8:	f06f 0415 	mvn.w	r4, #21
    bbcc:	e7b8      	b.n	bb40 <open+0x108>
		return -EALREADY;
    bbce:	f06f 0477 	mvn.w	r4, #119	; 0x77
    bbd2:	e7f2      	b.n	bbba <open+0x182>
    bbd4:	00029511 	.word	0x00029511
    bbd8:	2000bb50 	.word	0x2000bb50
    bbdc:	000294f7 	.word	0x000294f7
    bbe0:	000294eb 	.word	0x000294eb
    bbe4:	0000bcb5 	.word	0x0000bcb5
    bbe8:	000295c9 	.word	0x000295c9
    bbec:	00029559 	.word	0x00029559

0000bbf0 <close>:
{
    bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bbf4:	4606      	mov	r6, r0
    bbf6:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    bbfa:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    bbfc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    bc00:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    bc04:	e8d7 3fef 	ldaex	r3, [r7]
    bc08:	2b02      	cmp	r3, #2
    bc0a:	d103      	bne.n	bc14 <close+0x24>
    bc0c:	e8c7 9fe2 	stlex	r2, r9, [r7]
    bc10:	2a00      	cmp	r2, #0
    bc12:	d1f7      	bne.n	bc04 <close+0x14>
    bc14:	d149      	bne.n	bcaa <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    bc16:	4826      	ldr	r0, [pc, #152]	; (bcb0 <close+0xc0>)
    bc18:	f105 0140 	add.w	r1, r5, #64	; 0x40
    bc1c:	f01e fc37 	bl	2a48e <strcmp>
    bc20:	b120      	cbz	r0, bc2c <close+0x3c>
		return -EBUSY;
    bc22:	f06f 040f 	mvn.w	r4, #15
}
    bc26:	4620      	mov	r0, r4
    bc28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    bc2c:	4820      	ldr	r0, [pc, #128]	; (bcb0 <close+0xc0>)
    bc2e:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    bc32:	f01e fc2c 	bl	2a48e <strcmp>
    bc36:	2800      	cmp	r0, #0
    bc38:	d1f3      	bne.n	bc22 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    bc3a:	4628      	mov	r0, r5
    bc3c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    bc40:	f01d fcf5 	bl	2962e <ipc_rpmsg_deinit>
	if (err != 0) {
    bc44:	4604      	mov	r4, r0
    bc46:	bb70      	cbnz	r0, bca6 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    bc48:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    bc4a:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    bc4c:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    bc4e:	6883      	ldr	r3, [r0, #8]
    bc50:	691b      	ldr	r3, [r3, #16]
    bc52:	b333      	cbz	r3, bca2 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    bc54:	4622      	mov	r2, r4
    bc56:	6989      	ldr	r1, [r1, #24]
    bc58:	4798      	blx	r3
	if (err != 0) {
    bc5a:	4604      	mov	r4, r0
    bc5c:	bb18      	cbnz	r0, bca6 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    bc5e:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    bc62:	4649      	mov	r1, r9
    bc64:	4630      	mov	r0, r6
    bc66:	f01a fba7 	bl	263b8 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    bc6a:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    bc6c:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    bc70:	f001 fcce 	bl	d610 <z_impl_k_thread_abort>
    bc74:	4630      	mov	r0, r6
    bc76:	f8d8 1000 	ldr.w	r1, [r8]
    bc7a:	f01d fd15 	bl	296a8 <ipc_static_vrings_deinit>
	if (err != 0) {
    bc7e:	4604      	mov	r4, r0
    bc80:	b988      	cbnz	r0, bca6 <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    bc82:	4601      	mov	r1, r0
    bc84:	22e8      	movs	r2, #232	; 0xe8
    bc86:	4630      	mov	r0, r6
    bc88:	f01e fc52 	bl	2a530 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    bc8c:	4621      	mov	r1, r4
    bc8e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    bc92:	4628      	mov	r0, r5
    bc94:	f01e fc4c 	bl	2a530 <memset>
	atomic_set(&data->state, STATE_READY);
    bc98:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    bc9a:	4638      	mov	r0, r7
    bc9c:	f01d fc44 	bl	29528 <atomic_set.isra.0>
	return err;
    bca0:	e7c1      	b.n	bc26 <close+0x36>
		return -ENOSYS;
    bca2:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    bca6:	2102      	movs	r1, #2
    bca8:	e7f7      	b.n	bc9a <close+0xaa>
		return -EALREADY;
    bcaa:	f06f 0477 	mvn.w	r4, #119	; 0x77
    bcae:	e7ba      	b.n	bc26 <close+0x36>
    bcb0:	00033113 	.word	0x00033113

0000bcb4 <bound_cb>:
{
    bcb4:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    bcb6:	4604      	mov	r4, r0
    bcb8:	b140      	cbz	r0, bccc <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bcba:	2300      	movs	r3, #0
    bcbc:	2201      	movs	r2, #1
    bcbe:	e9cd 3200 	strd	r3, r2, [sp]
    bcc2:	4b07      	ldr	r3, [pc, #28]	; (bce0 <bound_cb+0x2c>)
    bcc4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    bcc8:	f018 fe34 	bl	24934 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    bccc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bcce:	681b      	ldr	r3, [r3, #0]
    bcd0:	b123      	cbz	r3, bcdc <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    bcd2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    bcd4:	b002      	add	sp, #8
    bcd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    bcda:	4718      	bx	r3
}
    bcdc:	b002      	add	sp, #8
    bcde:	bd10      	pop	{r4, pc}
    bce0:	00033113 	.word	0x00033113

0000bce4 <send>:
{
    bce4:	b513      	push	{r0, r1, r4, lr}
    bce6:	4604      	mov	r4, r0
    bce8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bcea:	6921      	ldr	r1, [r4, #16]
    bcec:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    bcf0:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    bcf4:	2902      	cmp	r1, #2
    bcf6:	d110      	bne.n	bd1a <send+0x36>
	if (len == 0) {
    bcf8:	b193      	cbz	r3, bd20 <send+0x3c>
	if (!rpmsg_ept) {
    bcfa:	b1a0      	cbz	r0, bd26 <send+0x42>
    bcfc:	2101      	movs	r1, #1
    bcfe:	e9cd 3100 	strd	r3, r1, [sp]
    bd02:	4613      	mov	r3, r2
    bd04:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    bd08:	f018 fe14 	bl	24934 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    bd0c:	4b07      	ldr	r3, [pc, #28]	; (bd2c <send+0x48>)
		return -ENOMEM;
    bd0e:	4298      	cmp	r0, r3
    bd10:	bf08      	it	eq
    bd12:	f06f 000b 	mvneq.w	r0, #11
}
    bd16:	b002      	add	sp, #8
    bd18:	bd10      	pop	{r4, pc}
		return -EBUSY;
    bd1a:	f06f 000f 	mvn.w	r0, #15
    bd1e:	e7fa      	b.n	bd16 <send+0x32>
		return -EBADMSG;
    bd20:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    bd24:	e7f7      	b.n	bd16 <send+0x32>
		return -ENOENT;
    bd26:	f06f 0001 	mvn.w	r0, #1
    bd2a:	e7f4      	b.n	bd16 <send+0x32>
    bd2c:	fffff82e 	.word	0xfffff82e

0000bd30 <register_ept>:
{
    bd30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bd34:	4688      	mov	r8, r1
    bd36:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    bd38:	6906      	ldr	r6, [r0, #16]
    bd3a:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    bd3e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    bd42:	2b02      	cmp	r3, #2
    bd44:	d15f      	bne.n	be06 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    bd46:	6813      	ldr	r3, [r2, #0]
    bd48:	b923      	cbnz	r3, bd54 <register_ept+0x24>
		return -EINVAL;
    bd4a:	f06f 0015 	mvn.w	r0, #21
}
    bd4e:	b003      	add	sp, #12
    bd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d0f7      	beq.n	bd4a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    bd5a:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    bd5e:	f1b9 0f00 	cmp.w	r9, #0
    bd62:	d133      	bne.n	bdcc <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    bd64:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    bd68:	f04f 32ff 	mov.w	r2, #4294967295
    bd6c:	f04f 33ff 	mov.w	r3, #4294967295
    bd70:	4638      	mov	r0, r7
    bd72:	f019 fdab 	bl	258cc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    bd76:	4630      	mov	r0, r6
    bd78:	682a      	ldr	r2, [r5, #0]
    bd7a:	a901      	add	r1, sp, #4
    bd7c:	f7ff fe48 	bl	ba10 <get_ept>
	if (rpmsg_ept == NULL) {
    bd80:	9c01      	ldr	r4, [sp, #4]
    bd82:	b91c      	cbnz	r4, bd8c <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    bd84:	4638      	mov	r0, r7
    bd86:	f01d fbcd 	bl	29524 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    bd8a:	e7de      	b.n	bd4a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    bd8c:	f105 0308 	add.w	r3, r5, #8
    bd90:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    bd92:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    bd94:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    bd98:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    bd9a:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    bd9c:	b160      	cbz	r0, bdb8 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    bd9e:	4638      	mov	r0, r7
    bda0:	f01d fbc0 	bl	29524 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    bda4:	4621      	mov	r1, r4
    bda6:	4630      	mov	r0, r6
    bda8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    bdaa:	682a      	ldr	r2, [r5, #0]
    bdac:	f7ff fe0e 	bl	b9cc <advertise_ept>
	return 0;
    bdb0:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    bdb2:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    bdb6:	e7ca      	b.n	bd4e <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    bdb8:	2220      	movs	r2, #32
    bdba:	6829      	ldr	r1, [r5, #0]
    bdbc:	f104 0040 	add.w	r0, r4, #64	; 0x40
    bdc0:	f01e fb41 	bl	2a446 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    bdc4:	4638      	mov	r0, r7
    bdc6:	f01d fbad 	bl	29524 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    bdca:	e7f1      	b.n	bdb0 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    bdcc:	4630      	mov	r0, r6
    bdce:	490f      	ldr	r1, [pc, #60]	; (be0c <register_ept+0xdc>)
    bdd0:	f01d fb75 	bl	294be <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    bdd4:	4604      	mov	r4, r0
    bdd6:	2800      	cmp	r0, #0
    bdd8:	d0b7      	beq.n	bd4a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    bdda:	f105 0308 	add.w	r3, r5, #8
    bdde:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    bde0:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    bde2:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    bde4:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    bde6:	2300      	movs	r3, #0
    bde8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    bdec:	2220      	movs	r2, #32
    bdee:	6829      	ldr	r1, [r5, #0]
    bdf0:	3040      	adds	r0, #64	; 0x40
    bdf2:	f01e fb28 	bl	2a446 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    bdf6:	4622      	mov	r2, r4
    bdf8:	2101      	movs	r1, #1
    bdfa:	4630      	mov	r0, r6
    bdfc:	f000 f83e 	bl	be7c <ipc_rpmsg_register_ept>
	if (err != 0) {
    be00:	2800      	cmp	r0, #0
    be02:	d0d5      	beq.n	bdb0 <register_ept+0x80>
    be04:	e7a1      	b.n	bd4a <register_ept+0x1a>
		return -EBUSY;
    be06:	f06f 000f 	mvn.w	r0, #15
    be0a:	e7a0      	b.n	bd4e <register_ept+0x1e>
    be0c:	00033113 	.word	0x00033113

0000be10 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be14:	4605      	mov	r5, r0
    be16:	460e      	mov	r6, r1
    be18:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    be1a:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    be1c:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    be20:	b085      	sub	sp, #20
    be22:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    be26:	4621      	mov	r1, r4
    be28:	4630      	mov	r0, r6
    be2a:	f01e fb30 	bl	2a48e <strcmp>
    be2e:	b9e0      	cbnz	r0, be6a <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    be30:	4b11      	ldr	r3, [pc, #68]	; (be78 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    be32:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    be36:	9302      	str	r3, [sp, #8]
    be38:	f8da 3010 	ldr.w	r3, [sl, #16]
    be3c:	4632      	mov	r2, r6
    be3e:	e9cd 8300 	strd	r8, r3, [sp]
    be42:	4629      	mov	r1, r5
    be44:	f04f 33ff 	mov.w	r3, #4294967295
    be48:	4658      	mov	r0, fp
    be4a:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    be4e:	f018 fdbd 	bl	249cc <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    be52:	b960      	cbnz	r0, be6e <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    be54:	2370      	movs	r3, #112	; 0x70
    be56:	2201      	movs	r2, #1
    be58:	fb03 9307 	mla	r3, r3, r7, r9
    be5c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    be60:	f8da 300c 	ldr.w	r3, [sl, #12]
    be64:	b10b      	cbz	r3, be6a <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    be66:	4658      	mov	r0, fp
    be68:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    be6a:	3470      	adds	r4, #112	; 0x70
    be6c:	b117      	cbz	r7, be74 <ns_bind_cb+0x64>
			}
		}
	}
}
    be6e:	b005      	add	sp, #20
    be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    be74:	2701      	movs	r7, #1
    be76:	e7d6      	b.n	be26 <ns_bind_cb+0x16>
    be78:	0002962b 	.word	0x0002962b

0000be7c <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    be7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    be7e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    be80:	b190      	cbz	r0, bea8 <ipc_rpmsg_register_ept+0x2c>
    be82:	b18a      	cbz	r2, bea8 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    be84:	2901      	cmp	r1, #1
    be86:	d112      	bne.n	beae <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    be88:	4b0a      	ldr	r3, [pc, #40]	; (beb4 <ipc_rpmsg_register_ept+0x38>)
    be8a:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    be8e:	9302      	str	r3, [sp, #8]
    be90:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    be94:	3240      	adds	r2, #64	; 0x40
    be96:	9301      	str	r3, [sp, #4]
    be98:	f04f 33ff 	mov.w	r3, #4294967295
    be9c:	4620      	mov	r0, r4
    be9e:	9300      	str	r3, [sp, #0]
    bea0:	f018 fd94 	bl	249cc <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    bea4:	b004      	add	sp, #16
    bea6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    bea8:	f06f 0015 	mvn.w	r0, #21
    beac:	e7fa      	b.n	bea4 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    beae:	2000      	movs	r0, #0
    beb0:	e7f8      	b.n	bea4 <ipc_rpmsg_register_ept+0x28>
    beb2:	bf00      	nop
    beb4:	0002962b 	.word	0x0002962b

0000beb8 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    beb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bebc:	b087      	sub	sp, #28
    bebe:	460e      	mov	r6, r1
    bec0:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    bec4:	4614      	mov	r4, r2
    bec6:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    beca:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    becc:	b330      	cbz	r0, bf1c <ipc_rpmsg_init+0x64>
    bece:	b329      	cbz	r1, bf1c <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    bed0:	f8df c050 	ldr.w	ip, [pc, #80]	; bf24 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    bed4:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    bed8:	2d00      	cmp	r5, #0
    beda:	bf08      	it	eq
    bedc:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    bede:	b99e      	cbnz	r6, bf08 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    bee0:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    bee4:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    bee8:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    beea:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    beec:	f023 f9fe 	bl	2f2ec <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    bef0:	ab03      	add	r3, sp, #12
    bef2:	e9cd 4300 	strd	r4, r3, [sp]
    bef6:	462a      	mov	r2, r5
    bef8:	463b      	mov	r3, r7
    befa:	4641      	mov	r1, r8
    befc:	4648      	mov	r0, r9
    befe:	f018 ff25 	bl	24d4c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    bf02:	b007      	add	sp, #28
    bf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    bf08:	2200      	movs	r2, #0
    bf0a:	4641      	mov	r1, r8
    bf0c:	920e      	str	r2, [sp, #56]	; 0x38
    bf0e:	4648      	mov	r0, r9
    bf10:	462a      	mov	r2, r5
}
    bf12:	b007      	add	sp, #28
    bf14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    bf18:	f019 b842 	b.w	24fa0 <rpmsg_init_vdev>
		return -EINVAL;
    bf1c:	f06f 0015 	mvn.w	r0, #21
    bf20:	e7ef      	b.n	bf02 <ipc_rpmsg_init+0x4a>
    bf22:	bf00      	nop
    bf24:	0000be11 	.word	0x0000be11

0000bf28 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    bf28:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf2a:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    bf2c:	4604      	mov	r4, r0
{
    bf2e:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    bf30:	2800      	cmp	r0, #0
    bf32:	d06f      	beq.n	c014 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    bf34:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    bf36:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    bf38:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    bf3a:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    bf3c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    bf40:	4f36      	ldr	r7, [pc, #216]	; (c01c <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    bf42:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    bf44:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    bf48:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    bf4c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    bf50:	f04f 33ff 	mov.w	r3, #4294967295
    bf54:	9300      	str	r3, [sp, #0]
    bf56:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    bf58:	f022 fd31 	bl	2e9be <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    bf5c:	4a30      	ldr	r2, [pc, #192]	; (c020 <ipc_static_vrings_init+0xf8>)
    bf5e:	ab06      	add	r3, sp, #24
    bf60:	e892 0003 	ldmia.w	r2, {r0, r1}
    bf64:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    bf68:	4618      	mov	r0, r3
    bf6a:	f018 fc03 	bl	24774 <metal_init>
	if (err != 0) {
    bf6e:	4605      	mov	r5, r0
    bf70:	b9d8      	cbnz	r0, bfaa <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    bf72:	f104 0034 	add.w	r0, r4, #52	; 0x34
    bf76:	f018 fbdd 	bl	24734 <metal_register_generic_device>
	if (err != 0) {
    bf7a:	4605      	mov	r5, r0
    bf7c:	b9a8      	cbnz	r0, bfaa <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    bf7e:	4639      	mov	r1, r7
    bf80:	4828      	ldr	r0, [pc, #160]	; (c024 <ipc_static_vrings_init+0xfc>)
    bf82:	aa05      	add	r2, sp, #20
    bf84:	f022 fcf3 	bl	2e96e <metal_device_open>
	if (err != 0) {
    bf88:	4605      	mov	r5, r0
    bf8a:	b970      	cbnz	r0, bfaa <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    bf8c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    bf8e:	689a      	ldr	r2, [r3, #8]
    bf90:	b172      	cbz	r2, bfb0 <ipc_static_vrings_init+0x88>
    bf92:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    bf94:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    bf98:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    bf9c:	f01d fb76 	bl	2968c <virtqueue_allocate>
    bfa0:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    bfa4:	b930      	cbnz	r0, bfb4 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    bfa6:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    bfaa:	4628      	mov	r0, r5
    bfac:	b009      	add	sp, #36	; 0x24
    bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb0:	4603      	mov	r3, r0
    bfb2:	e7ef      	b.n	bf94 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    bfb4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    bfb8:	f01d fb68 	bl	2968c <virtqueue_allocate>
    bfbc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    bfc0:	2800      	cmp	r0, #0
    bfc2:	d0f0      	beq.n	bfa6 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    bfc4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    bfc8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    bfcc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    bfd0:	2304      	movs	r3, #4
    bfd2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    bfd6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    bfda:	2302      	movs	r3, #2
    bfdc:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    bfde:	4b12      	ldr	r3, [pc, #72]	; (c028 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    bfe0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    bfe4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    bfe8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    bfec:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    bff0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    bff4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    bff6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    bffa:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    bffe:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    c002:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    c006:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    c00a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    c00e:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    c010:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    c012:	e7ca      	b.n	bfaa <ipc_static_vrings_init+0x82>
		return -EINVAL;
    c014:	f06f 0515 	mvn.w	r5, #21
    c018:	e7c7      	b.n	bfaa <ipc_static_vrings_init+0x82>
    c01a:	bf00      	nop
    c01c:	00031418 	.word	0x00031418
    c020:	0002ff60 	.word	0x0002ff60
    c024:	00031422 	.word	0x00031422
    c028:	000300cc 	.word	0x000300cc

0000c02c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    c02c:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    c02e:	4b11      	ldr	r3, [pc, #68]	; (c074 <flash_area_open+0x48>)
{
    c030:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    c032:	681c      	ldr	r4, [r3, #0]
    c034:	b1dc      	cbz	r4, c06e <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    c036:	4b10      	ldr	r3, [pc, #64]	; (c078 <flash_area_open+0x4c>)
    c038:	6819      	ldr	r1, [r3, #0]
    c03a:	2300      	movs	r3, #0
    c03c:	428b      	cmp	r3, r1
    c03e:	db02      	blt.n	c046 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    c040:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    c044:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    c046:	4622      	mov	r2, r4
    c048:	f812 6b10 	ldrb.w	r6, [r2], #16
    c04c:	4286      	cmp	r6, r0
    c04e:	d002      	beq.n	c056 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    c050:	4614      	mov	r4, r2
    c052:	3301      	adds	r3, #1
    c054:	e7f2      	b.n	c03c <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    c056:	68e0      	ldr	r0, [r4, #12]
    c058:	b910      	cbnz	r0, c060 <flash_area_open+0x34>
		return -ENODEV;
    c05a:	f06f 0012 	mvn.w	r0, #18
    c05e:	e7f1      	b.n	c044 <flash_area_open+0x18>
    c060:	f023 f95a 	bl	2f318 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    c064:	2800      	cmp	r0, #0
    c066:	d0f8      	beq.n	c05a <flash_area_open+0x2e>
	return 0;
    c068:	2000      	movs	r0, #0
	*fap = area;
    c06a:	602c      	str	r4, [r5, #0]
	return 0;
    c06c:	e7ea      	b.n	c044 <flash_area_open+0x18>
		return -EACCES;
    c06e:	f06f 000c 	mvn.w	r0, #12
    c072:	e7e7      	b.n	c044 <flash_area_open+0x18>
    c074:	200086c0 	.word	0x200086c0
    c078:	000300f0 	.word	0x000300f0

0000c07c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    c07c:	b570      	push	{r4, r5, r6, lr}
    c07e:	b088      	sub	sp, #32
    c080:	4605      	mov	r5, r0
    c082:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    c084:	b2c0      	uxtb	r0, r0
    c086:	4669      	mov	r1, sp
{
    c088:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    c08a:	f7ff ffcf 	bl	c02c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    c08e:	2800      	cmp	r0, #0
    c090:	db1b      	blt.n	c0ca <flash_area_get_sectors+0x4e>
    c092:	9800      	ldr	r0, [sp, #0]
    c094:	b1c8      	cbz	r0, c0ca <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    c096:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    c098:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    c09a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    c09c:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    c09e:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    c0a0:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    c0a4:	2300      	movs	r3, #0
	cb_data->status = 0;
    c0a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    c0aa:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    c0ac:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    c0ae:	f01d fb2b 	bl	29708 <flash_area_close>
	if (flash_dev == NULL) {
    c0b2:	b16d      	cbz	r5, c0d0 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    c0b4:	4628      	mov	r0, r5
    c0b6:	4908      	ldr	r1, [pc, #32]	; (c0d8 <flash_area_get_sectors+0x5c>)
    c0b8:	aa01      	add	r2, sp, #4
    c0ba:	f022 f87f 	bl	2e1bc <flash_page_foreach>
	if (cb_data->status == 0) {
    c0be:	9807      	ldr	r0, [sp, #28]
    c0c0:	b908      	cbnz	r0, c0c6 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    c0c2:	9b05      	ldr	r3, [sp, #20]
    c0c4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    c0c6:	b008      	add	sp, #32
    c0c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c0ca:	f06f 0015 	mvn.w	r0, #21
    c0ce:	e7fa      	b.n	c0c6 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    c0d0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    c0d4:	e7f7      	b.n	c0c6 <flash_area_get_sectors+0x4a>
    c0d6:	bf00      	nop
    c0d8:	0002970b 	.word	0x0002970b

0000c0dc <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    c0e0:	4b0f      	ldr	r3, [pc, #60]	; (c120 <settings_save_one+0x44>)
{
    c0e2:	4605      	mov	r5, r0
	cs = settings_save_dst;
    c0e4:	681c      	ldr	r4, [r3, #0]
{
    c0e6:	460e      	mov	r6, r1
    c0e8:	4617      	mov	r7, r2
	if (!cs) {
    c0ea:	b1ac      	cbz	r4, c118 <settings_save_one+0x3c>
    c0ec:	f04f 32ff 	mov.w	r2, #4294967295
    c0f0:	f04f 33ff 	mov.w	r3, #4294967295
    c0f4:	480b      	ldr	r0, [pc, #44]	; (c124 <settings_save_one+0x48>)
    c0f6:	f019 fbe9 	bl	258cc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    c0fa:	6863      	ldr	r3, [r4, #4]
    c0fc:	4632      	mov	r2, r6
    c0fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    c102:	4629      	mov	r1, r5
    c104:	463b      	mov	r3, r7
    c106:	4620      	mov	r0, r4
    c108:	47c0      	blx	r8
    c10a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    c10c:	4805      	ldr	r0, [pc, #20]	; (c124 <settings_save_one+0x48>)
    c10e:	f019 fc93 	bl	25a38 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    c112:	4620      	mov	r0, r4
    c114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    c118:	f06f 0401 	mvn.w	r4, #1
    c11c:	e7f9      	b.n	c112 <settings_save_one+0x36>
    c11e:	bf00      	nop
    c120:	2000a608 	.word	0x2000a608
    c124:	20008e44 	.word	0x20008e44

0000c128 <settings_src_register>:
	parent->next = child;
    c128:	2300      	movs	r3, #0
    c12a:	6003      	str	r3, [r0, #0]
	return list->tail;
    c12c:	4b04      	ldr	r3, [pc, #16]	; (c140 <settings_src_register+0x18>)
    c12e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    c130:	b912      	cbnz	r2, c138 <settings_src_register+0x10>
	list->head = node;
    c132:	e9c3 0000 	strd	r0, r0, [r3]
}
    c136:	4770      	bx	lr
	parent->next = child;
    c138:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c13a:	6058      	str	r0, [r3, #4]
}
    c13c:	4770      	bx	lr
    c13e:	bf00      	nop
    c140:	2000a60c 	.word	0x2000a60c

0000c144 <settings_dst_register>:
	settings_save_dst = cs;
    c144:	4b01      	ldr	r3, [pc, #4]	; (c14c <settings_dst_register+0x8>)
    c146:	6018      	str	r0, [r3, #0]
}
    c148:	4770      	bx	lr
    c14a:	bf00      	nop
    c14c:	2000a608 	.word	0x2000a608

0000c150 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    c150:	2300      	movs	r3, #0
{
    c152:	b530      	push	{r4, r5, lr}
    c154:	b085      	sub	sp, #20
    c156:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    c158:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c15c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    c15e:	f04f 33ff 	mov.w	r3, #4294967295
    c162:	f04f 32ff 	mov.w	r2, #4294967295
    c166:	480b      	ldr	r0, [pc, #44]	; (c194 <settings_load_subtree+0x44>)
    c168:	f019 fbb0 	bl	258cc <z_impl_k_mutex_lock>
	return list->head;
    c16c:	4b0a      	ldr	r3, [pc, #40]	; (c198 <settings_load_subtree+0x48>)
    c16e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    c170:	b94c      	cbnz	r4, c186 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    c172:	4628      	mov	r0, r5
    c174:	f000 f8ee 	bl	c354 <settings_commit_subtree>
    c178:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    c17a:	4806      	ldr	r0, [pc, #24]	; (c194 <settings_load_subtree+0x44>)
    c17c:	f019 fc5c 	bl	25a38 <z_impl_k_mutex_unlock>
}
    c180:	4620      	mov	r0, r4
    c182:	b005      	add	sp, #20
    c184:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    c186:	6863      	ldr	r3, [r4, #4]
    c188:	4620      	mov	r0, r4
    c18a:	681b      	ldr	r3, [r3, #0]
    c18c:	a901      	add	r1, sp, #4
    c18e:	4798      	blx	r3
	return node->next;
    c190:	6824      	ldr	r4, [r4, #0]
    c192:	e7ed      	b.n	c170 <settings_load_subtree+0x20>
    c194:	20008e44 	.word	0x20008e44
    c198:	2000a60c 	.word	0x2000a60c

0000c19c <settings_load_subtree_direct>:
{
    c19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    c19e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    c1a2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    c1a4:	f04f 33ff 	mov.w	r3, #4294967295
    c1a8:	f04f 32ff 	mov.w	r2, #4294967295
    c1ac:	4809      	ldr	r0, [pc, #36]	; (c1d4 <settings_load_subtree_direct+0x38>)
    c1ae:	f019 fb8d 	bl	258cc <z_impl_k_mutex_lock>
	return list->head;
    c1b2:	4b09      	ldr	r3, [pc, #36]	; (c1d8 <settings_load_subtree_direct+0x3c>)
    c1b4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    c1b6:	b92c      	cbnz	r4, c1c4 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    c1b8:	4806      	ldr	r0, [pc, #24]	; (c1d4 <settings_load_subtree_direct+0x38>)
    c1ba:	f019 fc3d 	bl	25a38 <z_impl_k_mutex_unlock>
}
    c1be:	4620      	mov	r0, r4
    c1c0:	b004      	add	sp, #16
    c1c2:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    c1c4:	6863      	ldr	r3, [r4, #4]
    c1c6:	4620      	mov	r0, r4
    c1c8:	681b      	ldr	r3, [r3, #0]
    c1ca:	a901      	add	r1, sp, #4
    c1cc:	4798      	blx	r3
	return node->next;
    c1ce:	6824      	ldr	r4, [r4, #0]
    c1d0:	e7f1      	b.n	c1b6 <settings_load_subtree_direct+0x1a>
    c1d2:	bf00      	nop
    c1d4:	20008e44 	.word	0x20008e44
    c1d8:	2000a60c 	.word	0x2000a60c

0000c1dc <settings_store_init>:
	list->head = NULL;
    c1dc:	2200      	movs	r2, #0
    c1de:	4b02      	ldr	r3, [pc, #8]	; (c1e8 <settings_store_init+0xc>)
	list->tail = NULL;
    c1e0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2000a60c 	.word	0x2000a60c

0000c1ec <settings_init>:
	list->head = NULL;
    c1ec:	2200      	movs	r2, #0
    c1ee:	4b02      	ldr	r3, [pc, #8]	; (c1f8 <settings_init+0xc>)
	list->tail = NULL;
    c1f0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    c1f4:	f7ff bff2 	b.w	c1dc <settings_store_init>
    c1f8:	2000a614 	.word	0x2000a614

0000c1fc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    c1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c200:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    c202:	460c      	mov	r4, r1
    c204:	b109      	cbz	r1, c20a <settings_parse_and_lookup+0xe>
		*next = NULL;
    c206:	2300      	movs	r3, #0
    c208:	600b      	str	r3, [r1, #0]
{
    c20a:	2600      	movs	r6, #0
    c20c:	4d23      	ldr	r5, [pc, #140]	; (c29c <settings_parse_and_lookup+0xa0>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c20e:	f8df 9090 	ldr.w	r9, [pc, #144]	; c2a0 <settings_parse_and_lookup+0xa4>
    c212:	454d      	cmp	r5, r9
    c214:	d920      	bls.n	c258 <settings_parse_and_lookup+0x5c>
    c216:	4923      	ldr	r1, [pc, #140]	; (c2a4 <settings_parse_and_lookup+0xa8>)
    c218:	4823      	ldr	r0, [pc, #140]	; (c2a8 <settings_parse_and_lookup+0xac>)
    c21a:	2294      	movs	r2, #148	; 0x94
    c21c:	f01c fcd2 	bl	28bc4 <assert_print>
    c220:	2194      	movs	r1, #148	; 0x94
    c222:	4820      	ldr	r0, [pc, #128]	; (c2a4 <settings_parse_and_lookup+0xa8>)
    c224:	f01c fcc7 	bl	28bb6 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    c228:	f8d5 8000 	ldr.w	r8, [r5]
    c22c:	4638      	mov	r0, r7
    c22e:	4641      	mov	r1, r8
    c230:	aa01      	add	r2, sp, #4
    c232:	f01d fa93 	bl	2975c <settings_name_steq>
    c236:	b150      	cbz	r0, c24e <settings_parse_and_lookup+0x52>
			continue;
		}
		if (!bestmatch) {
    c238:	b916      	cbnz	r6, c240 <settings_parse_and_lookup+0x44>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    c23a:	b954      	cbnz	r4, c252 <settings_parse_and_lookup+0x56>
{
    c23c:	462e      	mov	r6, r5
    c23e:	e006      	b.n	c24e <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    c240:	2200      	movs	r2, #0
    c242:	4640      	mov	r0, r8
    c244:	6831      	ldr	r1, [r6, #0]
    c246:	f01d fa89 	bl	2975c <settings_name_steq>
    c24a:	2800      	cmp	r0, #0
    c24c:	d1f5      	bne.n	c23a <settings_parse_and_lookup+0x3e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c24e:	3514      	adds	r5, #20
    c250:	e7df      	b.n	c212 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
    c252:	9b01      	ldr	r3, [sp, #4]
    c254:	6023      	str	r3, [r4, #0]
    c256:	e7f1      	b.n	c23c <settings_parse_and_lookup+0x40>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c258:	d3e6      	bcc.n	c228 <settings_parse_and_lookup+0x2c>
	return list->head;
    c25a:	4b14      	ldr	r3, [pc, #80]	; (c2ac <settings_parse_and_lookup+0xb0>)
    c25c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    c25e:	b1c5      	cbz	r5, c292 <settings_parse_and_lookup+0x96>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    c260:	f855 8c14 	ldr.w	r8, [r5, #-20]
    c264:	4638      	mov	r0, r7
    c266:	4641      	mov	r1, r8
    c268:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    c26a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    c26c:	f01d fa76 	bl	2975c <settings_name_steq>
    c270:	b150      	cbz	r0, c288 <settings_parse_and_lookup+0x8c>
			continue;
		}
		if (!bestmatch) {
    c272:	b916      	cbnz	r6, c27a <settings_parse_and_lookup+0x7e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    c274:	b954      	cbnz	r4, c28c <settings_parse_and_lookup+0x90>
{
    c276:	462e      	mov	r6, r5
    c278:	e006      	b.n	c288 <settings_parse_and_lookup+0x8c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    c27a:	2200      	movs	r2, #0
    c27c:	4640      	mov	r0, r8
    c27e:	6831      	ldr	r1, [r6, #0]
    c280:	f01d fa6c 	bl	2975c <settings_name_steq>
    c284:	2800      	cmp	r0, #0
    c286:	d1f5      	bne.n	c274 <settings_parse_and_lookup+0x78>
	return node->next;
    c288:	696d      	ldr	r5, [r5, #20]
    c28a:	e7e8      	b.n	c25e <settings_parse_and_lookup+0x62>
				*next = tmpnext;
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	6023      	str	r3, [r4, #0]
    c290:	e7f1      	b.n	c276 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    c292:	4630      	mov	r0, r6
    c294:	b003      	add	sp, #12
    c296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c29a:	bf00      	nop
    c29c:	0002fe04 	.word	0x0002fe04
    c2a0:	0002ff58 	.word	0x0002ff58
    c2a4:	0003142a 	.word	0x0003142a
    c2a8:	00030da5 	.word	0x00030da5
    c2ac:	2000a614 	.word	0x2000a614

0000c2b0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2b4:	b084      	sub	sp, #16
    c2b6:	af02      	add	r7, sp, #8
    c2b8:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    c2bc:	4604      	mov	r4, r0
    c2be:	460d      	mov	r5, r1
    c2c0:	4616      	mov	r6, r2
    c2c2:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
    c2c4:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
    c2c6:	f1b9 0f00 	cmp.w	r9, #0
    c2ca:	d007      	beq.n	c2dc <settings_call_set_handler+0x2c>
    c2cc:	f8d9 1000 	ldr.w	r1, [r9]
    c2d0:	bb31      	cbnz	r1, c320 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
    c2d2:	f8d9 a004 	ldr.w	sl, [r9, #4]
    c2d6:	f1ba 0f00 	cmp.w	sl, #0
    c2da:	d128      	bne.n	c32e <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
    c2dc:	4620      	mov	r0, r4
    c2de:	1d39      	adds	r1, r7, #4
    c2e0:	f7ff ff8c 	bl	c1fc <settings_parse_and_lookup>
		if (!ch) {
    c2e4:	b308      	cbz	r0, c32a <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    c2e6:	f8d0 9008 	ldr.w	r9, [r0, #8]
    c2ea:	4643      	mov	r3, r8
    c2ec:	4632      	mov	r2, r6
    c2ee:	4629      	mov	r1, r5
    c2f0:	6878      	ldr	r0, [r7, #4]
    c2f2:	47c8      	blx	r9

		if (rc != 0) {
    c2f4:	b1c8      	cbz	r0, c32a <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
    c2f6:	466d      	mov	r5, sp
    c2f8:	b08a      	sub	sp, #40	; 0x28
    c2fa:	aa02      	add	r2, sp, #8
    c2fc:	4b12      	ldr	r3, [pc, #72]	; (c348 <settings_call_set_handler+0x98>)
    c2fe:	61d0      	str	r0, [r2, #28]
    c300:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c304:	f44f 7300 	mov.w	r3, #512	; 0x200
    c308:	8413      	strh	r3, [r2, #32]
    c30a:	4b10      	ldr	r3, [pc, #64]	; (c34c <settings_call_set_handler+0x9c>)
    c30c:	f842 3f10 	str.w	r3, [r2, #16]!
    c310:	2300      	movs	r3, #0
    c312:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    c316:	480e      	ldr	r0, [pc, #56]	; (c350 <settings_call_set_handler+0xa0>)
    c318:	f7fe fc20 	bl	ab5c <z_impl_z_log_msg_static_create>
    c31c:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
    c31e:	e004      	b.n	c32a <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    c320:	1d3a      	adds	r2, r7, #4
    c322:	f01d fa1b 	bl	2975c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    c326:	2800      	cmp	r0, #0
    c328:	d1d3      	bne.n	c2d2 <settings_call_set_handler+0x22>
		return 0;
    c32a:	2000      	movs	r0, #0
    c32c:	e007      	b.n	c33e <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    c32e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c332:	4632      	mov	r2, r6
    c334:	9300      	str	r3, [sp, #0]
    c336:	4629      	mov	r1, r5
    c338:	4643      	mov	r3, r8
    c33a:	6878      	ldr	r0, [r7, #4]
    c33c:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
    c33e:	3708      	adds	r7, #8
    c340:	46bd      	mov	sp, r7
    c342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c346:	bf00      	nop
    c348:	0003145c 	.word	0x0003145c
    c34c:	01000004 	.word	0x01000004
    c350:	0002fdd4 	.word	0x0002fdd4

0000c354 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c356:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    c358:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c35a:	4c1c      	ldr	r4, [pc, #112]	; (c3cc <settings_commit_subtree+0x78>)
    c35c:	4f1c      	ldr	r7, [pc, #112]	; (c3d0 <settings_commit_subtree+0x7c>)
    c35e:	42bc      	cmp	r4, r7
    c360:	d91b      	bls.n	c39a <settings_commit_subtree+0x46>
    c362:	491c      	ldr	r1, [pc, #112]	; (c3d4 <settings_commit_subtree+0x80>)
    c364:	481c      	ldr	r0, [pc, #112]	; (c3d8 <settings_commit_subtree+0x84>)
    c366:	22f4      	movs	r2, #244	; 0xf4
    c368:	f01c fc2c 	bl	28bc4 <assert_print>
    c36c:	21f4      	movs	r1, #244	; 0xf4
    c36e:	4819      	ldr	r0, [pc, #100]	; (c3d4 <settings_commit_subtree+0x80>)
    c370:	f01c fc21 	bl	28bb6 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    c374:	b92e      	cbnz	r6, c382 <settings_commit_subtree+0x2e>
			continue;
		}
		if (ch->h_commit) {
    c376:	68e3      	ldr	r3, [r4, #12]
    c378:	b95b      	cbnz	r3, c392 <settings_commit_subtree+0x3e>
{
    c37a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c37c:	4605      	mov	r5, r0
    c37e:	3414      	adds	r4, #20
    c380:	e7ed      	b.n	c35e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    c382:	2200      	movs	r2, #0
    c384:	4631      	mov	r1, r6
    c386:	6820      	ldr	r0, [r4, #0]
    c388:	f01d f9e8 	bl	2975c <settings_name_steq>
    c38c:	2800      	cmp	r0, #0
    c38e:	d1f2      	bne.n	c376 <settings_commit_subtree+0x22>
    c390:	e7f3      	b.n	c37a <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
    c392:	4798      	blx	r3
			if (!rc) {
    c394:	2d00      	cmp	r5, #0
    c396:	d1f0      	bne.n	c37a <settings_commit_subtree+0x26>
    c398:	e7f0      	b.n	c37c <settings_commit_subtree+0x28>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    c39a:	d3eb      	bcc.n	c374 <settings_commit_subtree+0x20>
	return list->head;
    c39c:	4b0f      	ldr	r3, [pc, #60]	; (c3dc <settings_commit_subtree+0x88>)
    c39e:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    c3a0:	b194      	cbz	r4, c3c8 <settings_commit_subtree+0x74>
    c3a2:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    c3a4:	b91e      	cbnz	r6, c3ae <settings_commit_subtree+0x5a>
			continue;
		}
		if (ch->h_commit) {
    c3a6:	68e3      	ldr	r3, [r4, #12]
    c3a8:	b94b      	cbnz	r3, c3be <settings_commit_subtree+0x6a>
	return node->next;
    c3aa:	6964      	ldr	r4, [r4, #20]
    c3ac:	e7f8      	b.n	c3a0 <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    c3ae:	2200      	movs	r2, #0
    c3b0:	4631      	mov	r1, r6
    c3b2:	6820      	ldr	r0, [r4, #0]
    c3b4:	f01d f9d2 	bl	2975c <settings_name_steq>
    c3b8:	2800      	cmp	r0, #0
    c3ba:	d1f4      	bne.n	c3a6 <settings_commit_subtree+0x52>
    c3bc:	e7f5      	b.n	c3aa <settings_commit_subtree+0x56>
			rc2 = ch->h_commit();
    c3be:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
    c3c0:	2d00      	cmp	r5, #0
    c3c2:	bf08      	it	eq
    c3c4:	4605      	moveq	r5, r0
    c3c6:	e7f0      	b.n	c3aa <settings_commit_subtree+0x56>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    c3c8:	4628      	mov	r0, r5
    c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3cc:	0002fe04 	.word	0x0002fe04
    c3d0:	0002ff58 	.word	0x0002ff58
    c3d4:	0003142a 	.word	0x0003142a
    c3d8:	00030da5 	.word	0x00030da5
    c3dc:	2000a614 	.word	0x2000a614

0000c3e0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    c3e0:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
    c3e2:	4d0c      	ldr	r5, [pc, #48]	; (c414 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
    c3e4:	f04f 33ff 	mov.w	r3, #4294967295
    c3e8:	f04f 32ff 	mov.w	r2, #4294967295
    c3ec:	480a      	ldr	r0, [pc, #40]	; (c418 <settings_subsys_init+0x38>)
    c3ee:	f019 fa6d 	bl	258cc <z_impl_k_mutex_lock>
    c3f2:	782b      	ldrb	r3, [r5, #0]
    c3f4:	b93b      	cbnz	r3, c406 <settings_subsys_init+0x26>
		settings_init();
    c3f6:	f7ff fef9 	bl	c1ec <settings_init>

		err = settings_backend_init(); /* func rises kernel panic once error */
    c3fa:	f000 f86d 	bl	c4d8 <settings_backend_init>

		if (!err) {
    c3fe:	4604      	mov	r4, r0
    c400:	b910      	cbnz	r0, c408 <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
    c402:	2301      	movs	r3, #1
    c404:	702b      	strb	r3, [r5, #0]
	int err = 0;
    c406:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    c408:	4803      	ldr	r0, [pc, #12]	; (c418 <settings_subsys_init+0x38>)
    c40a:	f019 fb15 	bl	25a38 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
    c40e:	4620      	mov	r0, r4
    c410:	bd38      	pop	{r3, r4, r5, pc}
    c412:	bf00      	nop
    c414:	2000b1e2 	.word	0x2000b1e2
    c418:	20008e44 	.word	0x20008e44

0000c41c <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    c41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c420:	4680      	mov	r8, r0
    c422:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    c424:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
    c426:	f8df a0ac 	ldr.w	sl, [pc, #172]	; c4d4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
    c42a:	3401      	adds	r4, #1
{
    c42c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
    c42e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    c430:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    c434:	1e65      	subs	r5, r4, #1
    c436:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    c438:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c43c:	d047      	beq.n	c4ce <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    c43e:	234a      	movs	r3, #74	; 0x4a
    c440:	4629      	mov	r1, r5
    c442:	aa05      	add	r2, sp, #20
    c444:	4630      	mov	r0, r6
    c446:	f01c ffb6 	bl	293b6 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    c44a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    c44e:	343f      	adds	r4, #63	; 0x3f
    c450:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    c452:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    c454:	4621      	mov	r1, r4
    c456:	2301      	movs	r3, #1
    c458:	4630      	mov	r0, r6
    c45a:	f10d 020b 	add.w	r2, sp, #11
    c45e:	f01c ffaa 	bl	293b6 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    c462:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    c464:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    c466:	dc03      	bgt.n	c470 <settings_nvs_load+0x54>
    c468:	2800      	cmp	r0, #0
    c46a:	dc03      	bgt.n	c474 <settings_nvs_load+0x58>
{
    c46c:	462c      	mov	r4, r5
    c46e:	e7e1      	b.n	c434 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    c470:	2800      	cmp	r0, #0
    c472:	dc16      	bgt.n	c4a2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    c474:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    c478:	42ab      	cmp	r3, r5
    c47a:	d109      	bne.n	c490 <settings_nvs_load+0x74>
				cf->last_name_id--;
    c47c:	4642      	mov	r2, r8
    c47e:	1e6b      	subs	r3, r5, #1
    c480:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    c484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    c488:	2302      	movs	r3, #2
    c48a:	4630      	mov	r0, r6
    c48c:	f7ff f8a8 	bl	b5e0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    c490:	4629      	mov	r1, r5
    c492:	4630      	mov	r0, r6
    c494:	f01c ff8b 	bl	293ae <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    c498:	4621      	mov	r1, r4
    c49a:	4630      	mov	r0, r6
    c49c:	f01c ff87 	bl	293ae <nvs_delete>
			continue;
    c4a0:	e7e4      	b.n	c46c <settings_nvs_load+0x50>
		name[rc1] = '\0';
    c4a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
    c4a6:	eb0d 0703 	add.w	r7, sp, r3
    c4aa:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
    c4ac:	4652      	mov	r2, sl
		name[rc1] = '\0';
    c4ae:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    c4b2:	a805      	add	r0, sp, #20
    c4b4:	f8cd 9000 	str.w	r9, [sp]
    c4b8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
    c4ba:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    c4bc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    c4c0:	f7ff fef6 	bl	c2b0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    c4c4:	2800      	cmp	r0, #0
    c4c6:	d0d1      	beq.n	c46c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    c4c8:	b018      	add	sp, #96	; 0x60
    c4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ce:	2000      	movs	r0, #0
	return ret;
    c4d0:	e7fa      	b.n	c4c8 <settings_nvs_load+0xac>
    c4d2:	bf00      	nop
    c4d4:	000297cd 	.word	0x000297cd

0000c4d8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    c4d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    c4da:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    c4dc:	4669      	mov	r1, sp
    c4de:	2005      	movs	r0, #5
	uint32_t sector_cnt = 1;
    c4e0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
    c4e2:	f7ff fda3 	bl	c02c <flash_area_open>
	if (rc) {
    c4e6:	4604      	mov	r4, r0
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d134      	bne.n	c556 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    c4ec:	2005      	movs	r0, #5
    c4ee:	aa02      	add	r2, sp, #8
    c4f0:	a901      	add	r1, sp, #4
    c4f2:	f7ff fdc3 	bl	c07c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    c4f6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
    c4fa:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    c4fc:	d02b      	beq.n	c556 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    c4fe:	b138      	cbz	r0, c510 <settings_backend_init+0x38>
    c500:	340c      	adds	r4, #12
    c502:	d005      	beq.n	c510 <settings_backend_init+0x38>
		k_panic();
    c504:	4040      	eors	r0, r0
    c506:	f380 8811 	msr	BASEPRI, r0
    c50a:	f04f 0004 	mov.w	r0, #4
    c50e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    c510:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    c512:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    c516:	d223      	bcs.n	c560 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    c518:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
    c51a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
    c51c:	9a00      	ldr	r2, [sp, #0]
    c51e:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
    c520:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    c522:	4284      	cmp	r4, r0
    c524:	d31a      	bcc.n	c55c <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    c526:	3301      	adds	r3, #1
    c528:	2b08      	cmp	r3, #8
    c52a:	d1f9      	bne.n	c520 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    c52c:	4d0e      	ldr	r5, [pc, #56]	; (c568 <settings_backend_init+0x90>)
    c52e:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    c530:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    c532:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    c534:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    c536:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
    c538:	68d3      	ldr	r3, [r2, #12]
    c53a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    c53c:	f01d f9e0 	bl	29900 <settings_nvs_backend_init>
	if (rc) {
    c540:	4604      	mov	r4, r0
    c542:	b940      	cbnz	r0, c556 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    c544:	4e09      	ldr	r6, [pc, #36]	; (c56c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
    c546:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    c548:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    c54a:	f7ff fded 	bl	c128 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    c54e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    c550:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    c552:	f7ff fdf7 	bl	c144 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    c556:	4620      	mov	r0, r4
    c558:	b004      	add	sp, #16
    c55a:	bd70      	pop	{r4, r5, r6, pc}
    c55c:	b29b      	uxth	r3, r3
    c55e:	e7e5      	b.n	c52c <settings_backend_init+0x54>
		return -EDOM;
    c560:	f06f 0420 	mvn.w	r4, #32
    c564:	e7f7      	b.n	c556 <settings_backend_init+0x7e>
    c566:	bf00      	nop
    c568:	2000a61c 	.word	0x2000a61c
    c56c:	200086a8 	.word	0x200086a8

0000c570 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c574:	4605      	mov	r5, r0
	__asm__ volatile(
    c576:	f04f 0320 	mov.w	r3, #32
    c57a:	f3ef 8611 	mrs	r6, BASEPRI
    c57e:	f383 8812 	msr	BASEPRI_MAX, r3
    c582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c586:	481b      	ldr	r0, [pc, #108]	; (c5f4 <pm_state_notify+0x84>)
    c588:	f019 f94e 	bl	25828 <z_spin_lock_valid>
    c58c:	b940      	cbnz	r0, c5a0 <pm_state_notify+0x30>
    c58e:	491a      	ldr	r1, [pc, #104]	; (c5f8 <pm_state_notify+0x88>)
    c590:	2294      	movs	r2, #148	; 0x94
    c592:	481a      	ldr	r0, [pc, #104]	; (c5fc <pm_state_notify+0x8c>)
    c594:	f01c fb16 	bl	28bc4 <assert_print>
    c598:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c59a:	4817      	ldr	r0, [pc, #92]	; (c5f8 <pm_state_notify+0x88>)
    c59c:	f01c fb0b 	bl	28bb6 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c5a0:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    c5a4:	4813      	ldr	r0, [pc, #76]	; (c5f4 <pm_state_notify+0x84>)
    c5a6:	f019 f95b 	bl	25860 <z_spin_lock_set_owner>
	return list->head;
    c5aa:	4b15      	ldr	r3, [pc, #84]	; (c600 <pm_state_notify+0x90>)
    c5ac:	4f15      	ldr	r7, [pc, #84]	; (c604 <pm_state_notify+0x94>)
    c5ae:	681c      	ldr	r4, [r3, #0]
    c5b0:	f8df 8054 	ldr.w	r8, [pc, #84]	; c608 <pm_state_notify+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c5b4:	b954      	cbnz	r4, c5cc <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c5b6:	480f      	ldr	r0, [pc, #60]	; (c5f4 <pm_state_notify+0x84>)
    c5b8:	f019 f944 	bl	25844 <z_spin_unlock_valid>
    c5bc:	b9a0      	cbnz	r0, c5e8 <pm_state_notify+0x78>
    c5be:	490e      	ldr	r1, [pc, #56]	; (c5f8 <pm_state_notify+0x88>)
    c5c0:	22c2      	movs	r2, #194	; 0xc2
    c5c2:	480e      	ldr	r0, [pc, #56]	; (c5fc <pm_state_notify+0x8c>)
    c5c4:	f01c fafe 	bl	28bc4 <assert_print>
    c5c8:	21c2      	movs	r1, #194	; 0xc2
    c5ca:	e7e6      	b.n	c59a <pm_state_notify+0x2a>
			callback = notifier->state_exit;
    c5cc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c5d0:	2d00      	cmp	r5, #0
    c5d2:	bf18      	it	ne
    c5d4:	4613      	movne	r3, r2
		if (callback) {
    c5d6:	b12b      	cbz	r3, c5e4 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c5d8:	f898 2014 	ldrb.w	r2, [r8, #20]
    c5dc:	fb09 f202 	mul.w	r2, r9, r2
    c5e0:	5cb8      	ldrb	r0, [r7, r2]
    c5e2:	4798      	blx	r3
	return node->next;
    c5e4:	6824      	ldr	r4, [r4, #0]
    c5e6:	e7e5      	b.n	c5b4 <pm_state_notify+0x44>
	__asm__ volatile(
    c5e8:	f386 8811 	msr	BASEPRI, r6
    c5ec:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c5f4:	2000a65c 	.word	0x2000a65c
    c5f8:	00030eb4 	.word	0x00030eb4
    c5fc:	00030da5 	.word	0x00030da5
    c600:	2000a67c 	.word	0x2000a67c
    c604:	2000a670 	.word	0x2000a670
    c608:	2000b0c0 	.word	0x2000b0c0

0000c60c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c60c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    c60e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c610:	4b16      	ldr	r3, [pc, #88]	; (c66c <pm_system_resume+0x60>)
    c612:	7d1c      	ldrb	r4, [r3, #20]
    c614:	f004 031f 	and.w	r3, r4, #31
    c618:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c61a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c61c:	4b14      	ldr	r3, [pc, #80]	; (c670 <pm_system_resume+0x64>)
    c61e:	0961      	lsrs	r1, r4, #5
    c620:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c624:	e8d3 1fef 	ldaex	r1, [r3]
    c628:	ea01 0500 	and.w	r5, r1, r0
    c62c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    c630:	2e00      	cmp	r6, #0
    c632:	d1f7      	bne.n	c624 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c634:	420a      	tst	r2, r1
    c636:	d013      	beq.n	c660 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    c638:	4b0e      	ldr	r3, [pc, #56]	; (c674 <pm_system_resume+0x68>)
    c63a:	4d0f      	ldr	r5, [pc, #60]	; (c678 <pm_system_resume+0x6c>)
    c63c:	b18b      	cbz	r3, c662 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c63e:	230c      	movs	r3, #12
    c640:	4363      	muls	r3, r4
    c642:	18ea      	adds	r2, r5, r3
    c644:	7851      	ldrb	r1, [r2, #1]
    c646:	5ce8      	ldrb	r0, [r5, r3]
    c648:	f01c fbb8 	bl	28dbc <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c64c:	2000      	movs	r0, #0
    c64e:	f7ff ff8f 	bl	c570 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c652:	230c      	movs	r3, #12
    c654:	435c      	muls	r4, r3
    c656:	2300      	movs	r3, #0
    c658:	192a      	adds	r2, r5, r4
    c65a:	512b      	str	r3, [r5, r4]
    c65c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c660:	bd70      	pop	{r4, r5, r6, pc}
    c662:	f383 8811 	msr	BASEPRI, r3
    c666:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c66a:	e7ef      	b.n	c64c <pm_system_resume+0x40>
    c66c:	2000b0c0 	.word	0x2000b0c0
    c670:	2000a684 	.word	0x2000a684
    c674:	00028dbd 	.word	0x00028dbd
    c678:	2000a670 	.word	0x2000a670

0000c67c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c680:	4b40      	ldr	r3, [pc, #256]	; (c784 <pm_system_suspend+0x108>)
{
    c682:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c684:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    c686:	f04f 0320 	mov.w	r3, #32
    c68a:	f3ef 8811 	mrs	r8, BASEPRI
    c68e:	f383 8812 	msr	BASEPRI_MAX, r3
    c692:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c696:	483c      	ldr	r0, [pc, #240]	; (c788 <pm_system_suspend+0x10c>)
    c698:	f019 f8c6 	bl	25828 <z_spin_lock_valid>
    c69c:	b940      	cbnz	r0, c6b0 <pm_system_suspend+0x34>
    c69e:	493b      	ldr	r1, [pc, #236]	; (c78c <pm_system_suspend+0x110>)
    c6a0:	2294      	movs	r2, #148	; 0x94
    c6a2:	483b      	ldr	r0, [pc, #236]	; (c790 <pm_system_suspend+0x114>)
    c6a4:	f01c fa8e 	bl	28bc4 <assert_print>
    c6a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6aa:	4838      	ldr	r0, [pc, #224]	; (c78c <pm_system_suspend+0x110>)
    c6ac:	f01c fa83 	bl	28bb6 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c6b0:	240c      	movs	r4, #12
    c6b2:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    c6b4:	4834      	ldr	r0, [pc, #208]	; (c788 <pm_system_suspend+0x10c>)
    c6b6:	f019 f8d3 	bl	25860 <z_spin_lock_set_owner>
    c6ba:	4b36      	ldr	r3, [pc, #216]	; (c794 <pm_system_suspend+0x118>)
    c6bc:	4e36      	ldr	r6, [pc, #216]	; (c798 <pm_system_suspend+0x11c>)
    c6be:	5d19      	ldrb	r1, [r3, r4]
    c6c0:	191a      	adds	r2, r3, r4
    c6c2:	b191      	cbz	r1, c6ea <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c6c4:	ca07      	ldmia	r2, {r0, r1, r2}
    c6c6:	eb06 0c04 	add.w	ip, r6, r4
    c6ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c6ce:	2200      	movs	r2, #0
    c6d0:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6d2:	482d      	ldr	r0, [pc, #180]	; (c788 <pm_system_suspend+0x10c>)
    c6d4:	f019 f8b6 	bl	25844 <z_spin_unlock_valid>
    c6d8:	4604      	mov	r4, r0
    c6da:	b988      	cbnz	r0, c700 <pm_system_suspend+0x84>
    c6dc:	492b      	ldr	r1, [pc, #172]	; (c78c <pm_system_suspend+0x110>)
    c6de:	22c2      	movs	r2, #194	; 0xc2
    c6e0:	482b      	ldr	r0, [pc, #172]	; (c790 <pm_system_suspend+0x114>)
    c6e2:	f01c fa6f 	bl	28bc4 <assert_print>
    c6e6:	21c2      	movs	r1, #194	; 0xc2
    c6e8:	e7df      	b.n	c6aa <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    c6ea:	4639      	mov	r1, r7
    c6ec:	4628      	mov	r0, r5
    c6ee:	f000 f85d 	bl	c7ac <pm_policy_next_state>
		if (info != NULL) {
    c6f2:	2800      	cmp	r0, #0
    c6f4:	d0ed      	beq.n	c6d2 <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
    c6f6:	c807      	ldmia	r0, {r0, r1, r2}
    c6f8:	4434      	add	r4, r6
    c6fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c6fe:	e7e8      	b.n	c6d2 <pm_system_suspend+0x56>
	__asm__ volatile(
    c700:	f388 8811 	msr	BASEPRI, r8
    c704:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c708:	230c      	movs	r3, #12
    c70a:	436b      	muls	r3, r5
    c70c:	18f2      	adds	r2, r6, r3
    c70e:	5cf3      	ldrb	r3, [r6, r3]
    c710:	b3ab      	cbz	r3, c77e <pm_system_suspend+0x102>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c712:	1c7b      	adds	r3, r7, #1
    c714:	d00f      	beq.n	c736 <pm_system_suspend+0xba>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c716:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    c71a:	2100      	movs	r1, #0
    c71c:	f8d2 e008 	ldr.w	lr, [r2, #8]
    c720:	481e      	ldr	r0, [pc, #120]	; (c79c <pm_system_suspend+0x120>)
    c722:	2300      	movs	r3, #0
    c724:	fbee 010c 	umlal	r0, r1, lr, ip
    c728:	4a1d      	ldr	r2, [pc, #116]	; (c7a0 <pm_system_suspend+0x124>)
    c72a:	f7fb fd13 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    c72e:	2101      	movs	r1, #1
    c730:	1a38      	subs	r0, r7, r0
    c732:	f01b fa51 	bl	27bd8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c736:	f01a fa15 	bl	26b64 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c73a:	2001      	movs	r0, #1
    c73c:	f7ff ff18 	bl	c570 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c740:	4b18      	ldr	r3, [pc, #96]	; (c7a4 <pm_system_suspend+0x128>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c742:	096a      	lsrs	r2, r5, #5
    c744:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c748:	2201      	movs	r2, #1
    c74a:	f005 011f 	and.w	r1, r5, #31
    c74e:	408a      	lsls	r2, r1
    c750:	e8d3 0fef 	ldaex	r0, [r3]
    c754:	4310      	orrs	r0, r2
    c756:	e8c3 0fe1 	stlex	r1, r0, [r3]
    c75a:	2900      	cmp	r1, #0
    c75c:	d1f8      	bne.n	c750 <pm_system_suspend+0xd4>
	if (pm_state_set != NULL) {
    c75e:	4b12      	ldr	r3, [pc, #72]	; (c7a8 <pm_system_suspend+0x12c>)
    c760:	b133      	cbz	r3, c770 <pm_system_suspend+0xf4>
		pm_state_set(info->state, info->substate_id);
    c762:	230c      	movs	r3, #12
    c764:	436b      	muls	r3, r5
    c766:	18f2      	adds	r2, r6, r3
    c768:	7851      	ldrb	r1, [r2, #1]
    c76a:	5cf0      	ldrb	r0, [r6, r3]
    c76c:	f01c fb1a 	bl	28da4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c770:	f7ff ff4c 	bl	c60c <pm_system_resume>
	k_sched_unlock();
    c774:	f01a fa42 	bl	26bfc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    c778:	4620      	mov	r0, r4
    c77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c77e:	461c      	mov	r4, r3
    c780:	e7fa      	b.n	c778 <pm_system_suspend+0xfc>
    c782:	bf00      	nop
    c784:	2000b0c0 	.word	0x2000b0c0
    c788:	2000a660 	.word	0x2000a660
    c78c:	00030eb4 	.word	0x00030eb4
    c790:	00030da5 	.word	0x00030da5
    c794:	2000a664 	.word	0x2000a664
    c798:	2000a670 	.word	0x2000a670
    c79c:	000f423f 	.word	0x000f423f
    c7a0:	000f4240 	.word	0x000f4240
    c7a4:	2000a684 	.word	0x2000a684
    c7a8:	00028da5 	.word	0x00028da5

0000c7ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7b0:	b085      	sub	sp, #20
    c7b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c7b4:	a903      	add	r1, sp, #12
    c7b6:	f000 f843 	bl	c840 <pm_state_cpu_get_all>
    c7ba:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c7be:	4604      	mov	r4, r0
    c7c0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c7c4:	4b1b      	ldr	r3, [pc, #108]	; (c834 <pm_policy_next_state+0x88>)
    c7c6:	9d03      	ldr	r5, [sp, #12]
    c7c8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c7cc:	1e43      	subs	r3, r0, #1
    c7ce:	b21b      	sxth	r3, r3
    c7d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c7d4:	f8df 8060 	ldr.w	r8, [pc, #96]	; c838 <pm_policy_next_state+0x8c>
    c7d8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c7dc:	b924      	cbnz	r4, c7e8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c7de:	46a1      	mov	r9, r4
}
    c7e0:	4648      	mov	r0, r9
    c7e2:	b005      	add	sp, #20
    c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7e8:	46c4      	mov	ip, r8
    c7ea:	4659      	mov	r1, fp
    c7ec:	6868      	ldr	r0, [r5, #4]
    c7ee:	2300      	movs	r3, #0
    c7f0:	fbe0 c107 	umlal	ip, r1, r0, r7
    c7f4:	4a11      	ldr	r2, [pc, #68]	; (c83c <pm_policy_next_state+0x90>)
    c7f6:	4660      	mov	r0, ip
    c7f8:	f7fb fcac 	bl	8154 <__aeabi_uldivmod>
    c7fc:	46c4      	mov	ip, r8
    c7fe:	4659      	mov	r1, fp
    c800:	9001      	str	r0, [sp, #4]
    c802:	68a8      	ldr	r0, [r5, #8]
    c804:	2300      	movs	r3, #0
    c806:	fbe0 c107 	umlal	ip, r1, r0, r7
    c80a:	4a0c      	ldr	r2, [pc, #48]	; (c83c <pm_policy_next_state+0x90>)
    c80c:	4660      	mov	r0, ip
    c80e:	f7fb fca1 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c812:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c816:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c818:	d001      	beq.n	c81e <pm_policy_next_state+0x72>
    c81a:	4582      	cmp	sl, r0
    c81c:	d905      	bls.n	c82a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c81e:	1c73      	adds	r3, r6, #1
    c820:	d0de      	beq.n	c7e0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c822:	9b01      	ldr	r3, [sp, #4]
    c824:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c826:	42b0      	cmp	r0, r6
    c828:	d9da      	bls.n	c7e0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c82a:	3c01      	subs	r4, #1
    c82c:	b2a4      	uxth	r4, r4
    c82e:	3d0c      	subs	r5, #12
    c830:	e7d4      	b.n	c7dc <pm_policy_next_state+0x30>
    c832:	bf00      	nop
    c834:	200086bc 	.word	0x200086bc
    c838:	000f423f 	.word	0x000f423f
    c83c:	000f4240 	.word	0x000f4240

0000c840 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c840:	b908      	cbnz	r0, c846 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c842:	4b02      	ldr	r3, [pc, #8]	; (c84c <pm_state_cpu_get_all+0xc>)
    c844:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c846:	2000      	movs	r0, #0
    c848:	4770      	bx	lr
    c84a:	bf00      	nop
    c84c:	000300f0 	.word	0x000300f0

0000c850 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c850:	4904      	ldr	r1, [pc, #16]	; (c864 <sub_bytes+0x14>)
    c852:	1e43      	subs	r3, r0, #1
    c854:	300f      	adds	r0, #15
    c856:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c85a:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c85c:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c85e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c860:	d1f9      	bne.n	c856 <sub_bytes+0x6>
	}
}
    c862:	4770      	bx	lr
    c864:	00031484 	.word	0x00031484

0000c868 <tc_aes128_set_encrypt_key>:
{
    c868:	b5f0      	push	{r4, r5, r6, r7, lr}
    c86a:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c86c:	4e26      	ldr	r6, [pc, #152]	; (c908 <tc_aes128_set_encrypt_key+0xa0>)
{
    c86e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c870:	ad01      	add	r5, sp, #4
{
    c872:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c878:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c87a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c87c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c880:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c884:	4638      	mov	r0, r7
    c886:	2f00      	cmp	r7, #0
    c888:	d039      	beq.n	c8fe <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c88a:	2c00      	cmp	r4, #0
    c88c:	d039      	beq.n	c902 <tc_aes128_set_encrypt_key+0x9a>
    c88e:	1f38      	subs	r0, r7, #4
    c890:	4602      	mov	r2, r0
    c892:	4621      	mov	r1, r4
    c894:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c896:	784b      	ldrb	r3, [r1, #1]
    c898:	780d      	ldrb	r5, [r1, #0]
    c89a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c89c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c8a0:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c8a2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c8a4:	432b      	orrs	r3, r5
    c8a6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    c8aa:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c8ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c8b0:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    c8b4:	d1ef      	bne.n	c896 <tc_aes128_set_encrypt_key+0x2e>
    c8b6:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c8b8:	4c14      	ldr	r4, [pc, #80]	; (c90c <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    c8ba:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    c8bc:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    c8be:	d116      	bne.n	c8ee <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c8c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
    c8c4:	5ca5      	ldrb	r5, [r4, r2]
    c8c6:	0e1a      	lsrs	r2, r3, #24
    c8c8:	5ca2      	ldrb	r2, [r4, r2]
    c8ca:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c8ce:	f3c3 2507 	ubfx	r5, r3, #8, #8
    c8d2:	5d65      	ldrb	r5, [r4, r5]
    c8d4:	b2db      	uxtb	r3, r3
    c8d6:	5ce3      	ldrb	r3, [r4, r3]
    c8d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    c8dc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c8e0:	f021 0303 	bic.w	r3, r1, #3
    c8e4:	3330      	adds	r3, #48	; 0x30
    c8e6:	446b      	add	r3, sp
    c8e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    c8ec:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    c8ee:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    c8f2:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    c8f4:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    c8f6:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    c8f8:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    c8fa:	d1de      	bne.n	c8ba <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    c8fc:	2001      	movs	r0, #1
}
    c8fe:	b00d      	add	sp, #52	; 0x34
    c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    c902:	4620      	mov	r0, r4
    c904:	e7fb      	b.n	c8fe <tc_aes128_set_encrypt_key+0x96>
    c906:	bf00      	nop
    c908:	0002ff68 	.word	0x0002ff68
    c90c:	00031484 	.word	0x00031484

0000c910 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c914:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c916:	6803      	ldr	r3, [r0, #0]
{
    c918:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c91a:	9302      	str	r3, [sp, #8]
    c91c:	6843      	ldr	r3, [r0, #4]
    c91e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; cadc <compress+0x1cc>
    c922:	9303      	str	r3, [sp, #12]
    c924:	6883      	ldr	r3, [r0, #8]
    c926:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    c92a:	9304      	str	r3, [sp, #16]
    c92c:	68c3      	ldr	r3, [r0, #12]
    c92e:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c930:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    c932:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    c936:	9306      	str	r3, [sp, #24]
    c938:	6943      	ldr	r3, [r0, #20]
    c93a:	9307      	str	r3, [sp, #28]
    c93c:	6983      	ldr	r3, [r0, #24]
    c93e:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    c942:	9308      	str	r3, [sp, #32]
    c944:	69c3      	ldr	r3, [r0, #28]
    c946:	4698      	mov	r8, r3
    c948:	9309      	str	r3, [sp, #36]	; 0x24
    c94a:	9b08      	ldr	r3, [sp, #32]
    c94c:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    c94e:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    c950:	ab0c      	add	r3, sp, #48	; 0x30
    c952:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c954:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    c958:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    c95a:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    c95e:	44a9      	add	r9, r5
    c960:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    c964:	9d00      	ldr	r5, [sp, #0]
    c966:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    c96a:	444b      	add	r3, r9
    c96c:	ea25 0502 	bic.w	r5, r5, r2
    c970:	ea02 090c 	and.w	r9, r2, ip
    c974:	ea85 0509 	eor.w	r5, r5, r9
    c978:	442b      	add	r3, r5
    c97a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    c97c:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    c980:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    c984:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    c988:	4025      	ands	r5, r4
    c98a:	ea06 090b 	and.w	r9, r6, fp
    c98e:	ea85 0509 	eor.w	r5, r5, r9
    c992:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    c996:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    c998:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    c99a:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    c99c:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    c9a0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    c9a2:	46de      	mov	lr, fp
    c9a4:	f8dd 8000 	ldr.w	r8, [sp]
    c9a8:	f040 8088 	bne.w	cabc <compress+0x1ac>
    c9ac:	f04f 0a10 	mov.w	sl, #16
    c9b0:	494b      	ldr	r1, [pc, #300]	; (cae0 <compress+0x1d0>)
    c9b2:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    c9b4:	4651      	mov	r1, sl
    c9b6:	f10a 0a01 	add.w	sl, sl, #1
    c9ba:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c9be:	f00a 070f 	and.w	r7, sl, #15
    c9c2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c9c6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c9ca:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    c9ce:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    c9d2:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    c9d4:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    c9d8:	f101 070e 	add.w	r7, r1, #14
    c9dc:	f007 070f 	and.w	r7, r7, #15
    c9e0:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c9e4:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c9e8:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    c9ea:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    c9ee:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    c9f2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    c9f6:	f001 010f 	and.w	r1, r1, #15
    c9fa:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    c9fe:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    ca02:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    ca06:	f859 ec40 	ldr.w	lr, [r9, #-64]
    ca0a:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    ca0e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca12:	4471      	add	r1, lr
		s0 = sigma0(s0);
    ca14:	f8dd e004 	ldr.w	lr, [sp, #4]
    ca18:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    ca1c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca20:	4441      	add	r1, r8
		s1 = sigma1(s1);
    ca22:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca26:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca28:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    ca2c:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca30:	ea2c 0705 	bic.w	r7, ip, r5
    ca34:	ea87 0708 	eor.w	r7, r7, r8
    ca38:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    ca3c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ca40:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    ca44:	4477      	add	r7, lr
    ca46:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    ca4a:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca4e:	4477      	add	r7, lr
    ca50:	440f      	add	r7, r1
    ca52:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    ca54:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca58:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    ca5a:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca5e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    ca62:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    ca66:	ea07 0703 	and.w	r7, r7, r3
    ca6a:	ea04 0806 	and.w	r8, r4, r6
    ca6e:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    ca72:	ea87 0708 	eor.w	r7, r7, r8
    ca76:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    ca78:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    ca7a:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    ca7e:	f8cd c000 	str.w	ip, [sp]
    ca82:	46b3      	mov	fp, r6
    ca84:	d122      	bne.n	cacc <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    ca86:	9902      	ldr	r1, [sp, #8]
    ca88:	4439      	add	r1, r7
    ca8a:	6001      	str	r1, [r0, #0]
    ca8c:	9903      	ldr	r1, [sp, #12]
    ca8e:	4419      	add	r1, r3
    ca90:	9b04      	ldr	r3, [sp, #16]
    ca92:	6041      	str	r1, [r0, #4]
    ca94:	4423      	add	r3, r4
    ca96:	6083      	str	r3, [r0, #8]
    ca98:	9b05      	ldr	r3, [sp, #20]
    ca9a:	4433      	add	r3, r6
    ca9c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    ca9e:	9b06      	ldr	r3, [sp, #24]
    caa0:	4473      	add	r3, lr
    caa2:	6103      	str	r3, [r0, #16]
    caa4:	9b07      	ldr	r3, [sp, #28]
    caa6:	442b      	add	r3, r5
    caa8:	6143      	str	r3, [r0, #20]
    caaa:	9b08      	ldr	r3, [sp, #32]
    caac:	4413      	add	r3, r2
    caae:	6183      	str	r3, [r0, #24]
    cab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cab2:	4463      	add	r3, ip
    cab4:	61c3      	str	r3, [r0, #28]
}
    cab6:	b01d      	add	sp, #116	; 0x74
    cab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cabc:	46b3      	mov	fp, r6
    cabe:	f8cd c000 	str.w	ip, [sp]
    cac2:	4626      	mov	r6, r4
    cac4:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    cac6:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cac8:	462a      	mov	r2, r5
    caca:	e740      	b.n	c94e <compress+0x3e>
    cacc:	4694      	mov	ip, r2
    cace:	4626      	mov	r6, r4
    cad0:	462a      	mov	r2, r5
    cad2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cad4:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    cad6:	463b      	mov	r3, r7
    cad8:	e76c      	b.n	c9b4 <compress+0xa4>
    cada:	bf00      	nop
    cadc:	00030154 	.word	0x00030154
    cae0:	00030190 	.word	0x00030190

0000cae4 <tc_sha256_init>:
{
    cae4:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cae6:	4604      	mov	r4, r0
    cae8:	b1c8      	cbz	r0, cb1e <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    caea:	2270      	movs	r2, #112	; 0x70
    caec:	2100      	movs	r1, #0
    caee:	f01c ff35 	bl	2995c <_set>
	s->iv[1] = 0xbb67ae85;
    caf2:	4b0b      	ldr	r3, [pc, #44]	; (cb20 <tc_sha256_init+0x3c>)
    caf4:	4a0b      	ldr	r2, [pc, #44]	; (cb24 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    caf6:	490c      	ldr	r1, [pc, #48]	; (cb28 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    caf8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cafc:	4b0b      	ldr	r3, [pc, #44]	; (cb2c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cafe:	480c      	ldr	r0, [pc, #48]	; (cb30 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cb00:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cb04:	4b0b      	ldr	r3, [pc, #44]	; (cb34 <tc_sha256_init+0x50>)
    cb06:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cb0a:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cb0c:	4b0a      	ldr	r3, [pc, #40]	; (cb38 <tc_sha256_init+0x54>)
    cb0e:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cb10:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cb14:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    cb18:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    cb1c:	61e3      	str	r3, [r4, #28]
}
    cb1e:	bd10      	pop	{r4, pc}
    cb20:	bb67ae85 	.word	0xbb67ae85
    cb24:	6a09e667 	.word	0x6a09e667
    cb28:	3c6ef372 	.word	0x3c6ef372
    cb2c:	a54ff53a 	.word	0xa54ff53a
    cb30:	510e527f 	.word	0x510e527f
    cb34:	9b05688c 	.word	0x9b05688c
    cb38:	1f83d9ab 	.word	0x1f83d9ab

0000cb3c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cb3c:	4901      	ldr	r1, [pc, #4]	; (cb44 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cb3e:	2210      	movs	r2, #16
	str	r2, [r1]
    cb40:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cb42:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cb44:	e000ed10 	.word	0xe000ed10

0000cb48 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cb48:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cb4a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cb4c:	f380 8811 	msr	BASEPRI, r0
	isb
    cb50:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    cb54:	b501      	push	{r0, lr}
    cb56:	f7fd fb19 	bl	a18c <z_arm_on_enter_cpu_idle>
    cb5a:	2800      	cmp	r0, #0
    cb5c:	d002      	beq.n	cb64 <_skip_0>
    cb5e:	f3bf 8f4f 	dsb	sy
    cb62:	bf30      	wfi

0000cb64 <_skip_0>:
    cb64:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    cb68:	b662      	cpsie	i
	isb
    cb6a:	f3bf 8f6f 	isb	sy

	bx	lr
    cb6e:	4770      	bx	lr

0000cb70 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cb70:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cb72:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cb74:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    cb78:	b501      	push	{r0, lr}
    cb7a:	f7fd fb07 	bl	a18c <z_arm_on_enter_cpu_idle>
    cb7e:	2800      	cmp	r0, #0
    cb80:	d002      	beq.n	cb88 <_skip_1>
    cb82:	f3bf 8f4f 	dsb	sy
    cb86:	bf20      	wfe

0000cb88 <_skip_1>:
    cb88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    cb8c:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    cb90:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    cb92:	4770      	bx	lr

0000cb94 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb98:	4681      	mov	r9, r0

	if (esf != NULL) {
    cb9a:	460c      	mov	r4, r1
{
    cb9c:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    cb9e:	2900      	cmp	r1, #0
    cba0:	d04c      	beq.n	cc3c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cba2:	e9d1 1200 	ldrd	r1, r2, [r1]
    cba6:	466e      	mov	r6, sp
    cba8:	b08a      	sub	sp, #40	; 0x28
    cbaa:	68a3      	ldr	r3, [r4, #8]
    cbac:	466d      	mov	r5, sp
    cbae:	f04f 0a05 	mov.w	sl, #5
    cbb2:	46a8      	mov	r8, r5
    cbb4:	4825      	ldr	r0, [pc, #148]	; (cc4c <z_arm_fatal_error+0xb8>)
    cbb6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    cbba:	e9c5 0105 	strd	r0, r1, [r5, #20]
    cbbe:	f848 af10 	str.w	sl, [r8, #16]!
    cbc2:	2300      	movs	r3, #0
    cbc4:	4642      	mov	r2, r8
    cbc6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cbca:	4821      	ldr	r0, [pc, #132]	; (cc50 <z_arm_fatal_error+0xbc>)
    cbcc:	f7fd ffc6 	bl	ab5c <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cbd0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    cbd4:	46b5      	mov	sp, r6
    cbd6:	6963      	ldr	r3, [r4, #20]
    cbd8:	46ad      	mov	sp, r5
    cbda:	481e      	ldr	r0, [pc, #120]	; (cc54 <z_arm_fatal_error+0xc0>)
    cbdc:	e9c5 2307 	strd	r2, r3, [r5, #28]
    cbe0:	e9c5 0105 	strd	r0, r1, [r5, #20]
    cbe4:	f8c5 a010 	str.w	sl, [r5, #16]
    cbe8:	2300      	movs	r3, #0
    cbea:	4642      	mov	r2, r8
    cbec:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cbf0:	4817      	ldr	r0, [pc, #92]	; (cc50 <z_arm_fatal_error+0xbc>)
    cbf2:	f7fd ffb3 	bl	ab5c <z_impl_z_log_msg_static_create>
    cbf6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cbf8:	b088      	sub	sp, #32
    cbfa:	69e3      	ldr	r3, [r4, #28]
    cbfc:	466d      	mov	r5, sp
    cbfe:	f04f 0a03 	mov.w	sl, #3
    cc02:	46a8      	mov	r8, r5
    cc04:	4a14      	ldr	r2, [pc, #80]	; (cc58 <z_arm_fatal_error+0xc4>)
    cc06:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cc0a:	f848 af10 	str.w	sl, [r8, #16]!
    cc0e:	2300      	movs	r3, #0
    cc10:	4642      	mov	r2, r8
    cc12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc16:	480e      	ldr	r0, [pc, #56]	; (cc50 <z_arm_fatal_error+0xbc>)
    cc18:	f7fd ffa0 	bl	ab5c <z_impl_z_log_msg_static_create>
    cc1c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    cc1e:	69a3      	ldr	r3, [r4, #24]
    cc20:	46ad      	mov	sp, r5
    cc22:	4a0e      	ldr	r2, [pc, #56]	; (cc5c <z_arm_fatal_error+0xc8>)
    cc24:	f8c5 a010 	str.w	sl, [r5, #16]
    cc28:	e9c5 2305 	strd	r2, r3, [r5, #20]
    cc2c:	2300      	movs	r3, #0
    cc2e:	4642      	mov	r2, r8
    cc30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cc34:	4806      	ldr	r0, [pc, #24]	; (cc50 <z_arm_fatal_error+0xbc>)
    cc36:	f7fd ff91 	bl	ab5c <z_impl_z_log_msg_static_create>
    cc3a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    cc3c:	4621      	mov	r1, r4
    cc3e:	4648      	mov	r0, r9
    cc40:	f018 f9ca 	bl	24fd8 <z_fatal_error>
}
    cc44:	46bd      	mov	sp, r7
    cc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc4a:	bf00      	nop
    cc4c:	00031584 	.word	0x00031584
    cc50:	0002fdbc 	.word	0x0002fdbc
    cc54:	000315b3 	.word	0x000315b3
    cc58:	000315e2 	.word	0x000315e2
    cc5c:	000315f1 	.word	0x000315f1

0000cc60 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cc60:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cc62:	2800      	cmp	r0, #0
    cc64:	db07      	blt.n	cc76 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc66:	2301      	movs	r3, #1
    cc68:	0941      	lsrs	r1, r0, #5
    cc6a:	4a03      	ldr	r2, [pc, #12]	; (cc78 <arch_irq_enable+0x18>)
    cc6c:	f000 001f 	and.w	r0, r0, #31
    cc70:	4083      	lsls	r3, r0
    cc72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    cc76:	4770      	bx	lr
    cc78:	e000e100 	.word	0xe000e100

0000cc7c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    cc7c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    cc7e:	2800      	cmp	r0, #0
    cc80:	db0c      	blt.n	cc9c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc82:	2201      	movs	r2, #1
    cc84:	4906      	ldr	r1, [pc, #24]	; (cca0 <arch_irq_disable+0x24>)
    cc86:	0943      	lsrs	r3, r0, #5
    cc88:	f000 001f 	and.w	r0, r0, #31
    cc8c:	4082      	lsls	r2, r0
    cc8e:	3320      	adds	r3, #32
    cc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cc94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc98:	f3bf 8f6f 	isb	sy
}
    cc9c:	4770      	bx	lr
    cc9e:	bf00      	nop
    cca0:	e000e100 	.word	0xe000e100

0000cca4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cca4:	4b05      	ldr	r3, [pc, #20]	; (ccbc <arch_irq_is_enabled+0x18>)
    cca6:	0942      	lsrs	r2, r0, #5
    cca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ccac:	2301      	movs	r3, #1
    ccae:	f000 001f 	and.w	r0, r0, #31
    ccb2:	fa03 f000 	lsl.w	r0, r3, r0
}
    ccb6:	4010      	ands	r0, r2
    ccb8:	4770      	bx	lr
    ccba:	bf00      	nop
    ccbc:	e000e100 	.word	0xe000e100

0000ccc0 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    ccc0:	3101      	adds	r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    ccc2:	2907      	cmp	r1, #7
{
    ccc4:	b508      	push	{r3, lr}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    ccc6:	d908      	bls.n	ccda <z_arm_irq_priority_set+0x1a>
    ccc8:	490d      	ldr	r1, [pc, #52]	; (cd00 <z_arm_irq_priority_set+0x40>)
    ccca:	480e      	ldr	r0, [pc, #56]	; (cd04 <z_arm_irq_priority_set+0x44>)
    cccc:	225b      	movs	r2, #91	; 0x5b
    ccce:	f01b ff79 	bl	28bc4 <assert_print>
    ccd2:	215b      	movs	r1, #91	; 0x5b
    ccd4:	480a      	ldr	r0, [pc, #40]	; (cd00 <z_arm_irq_priority_set+0x40>)
    ccd6:	f01b ff6e 	bl	28bb6 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ccda:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ccdc:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ccde:	bfac      	ite	ge
    cce0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cce4:	4b08      	ldrlt	r3, [pc, #32]	; (cd08 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cce6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    ccea:	b2c9      	uxtb	r1, r1
    ccec:	bfab      	itete	ge
    ccee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ccf2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ccf6:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ccfa:	5419      	strblt	r1, [r3, r0]
}
    ccfc:	bd08      	pop	{r3, pc}
    ccfe:	bf00      	nop
    cd00:	0003161f 	.word	0x0003161f
    cd04:	00030da5 	.word	0x00030da5
    cd08:	e000ed14 	.word	0xe000ed14

0000cd0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cd0c:	bf30      	wfi
    b z_SysNmiOnReset
    cd0e:	f7ff bffd 	b.w	cd0c <z_SysNmiOnReset>
    cd12:	bf00      	nop

0000cd14 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cd14:	4a0b      	ldr	r2, [pc, #44]	; (cd44 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    cd16:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cd18:	4b0b      	ldr	r3, [pc, #44]	; (cd48 <z_arm_prep_c+0x34>)
    cd1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cd1e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    cd20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cd28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cd2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cd34:	f018 fa1a 	bl	2516c <z_bss_zero>
	z_data_copy();
    cd38:	f01a fd70 	bl	2781c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cd3c:	f000 fbe2 	bl	d504 <z_arm_interrupt_init>
	z_cstart();
    cd40:	f018 fa54 	bl	251ec <z_cstart>
    cd44:	00008000 	.word	0x00008000
    cd48:	e000ed00 	.word	0xe000ed00

0000cd4c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cd4c:	4a09      	ldr	r2, [pc, #36]	; (cd74 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cd4e:	490a      	ldr	r1, [pc, #40]	; (cd78 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cd50:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cd52:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cd54:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    cd56:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cd58:	4908      	ldr	r1, [pc, #32]	; (cd7c <arch_swap+0x30>)
    cd5a:	684b      	ldr	r3, [r1, #4]
    cd5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cd60:	604b      	str	r3, [r1, #4]
    cd62:	2300      	movs	r3, #0
    cd64:	f383 8811 	msr	BASEPRI, r3
    cd68:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cd6c:	6893      	ldr	r3, [r2, #8]
}
    cd6e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cd70:	4770      	bx	lr
    cd72:	bf00      	nop
    cd74:	2000b0c0 	.word	0x2000b0c0
    cd78:	00030cb4 	.word	0x00030cb4
    cd7c:	e000ed00 	.word	0xe000ed00

0000cd80 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cd80:	4915      	ldr	r1, [pc, #84]	; (cdd8 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cd82:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    cd84:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cd88:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    cd8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cd8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cd92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cd96:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    cd98:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cd9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cda0:	4f0e      	ldr	r7, [pc, #56]	; (cddc <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cda2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cda6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    cda8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cdaa:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    cdac:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cdb0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    cdb2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cdb4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cdb6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cdba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    cdbe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cdc2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    cdc6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    cdca:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cdcc:	f01d fa13 	bl	2a1f6 <configure_builtin_stack_guard>
    pop {r2, lr}
    cdd0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    cdd4:	4770      	bx	lr
    cdd6:	0000      	.short	0x0000
    ldr r1, =_kernel
    cdd8:	2000b0c0 	.word	0x2000b0c0
    ldr v4, =_SCS_ICSR
    cddc:	e000ed04 	.word	0xe000ed04

0000cde0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    cde0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cde4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cde6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cdea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cdee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cdf0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cdf4:	2902      	cmp	r1, #2
    beq _oops
    cdf6:	d0ff      	beq.n	cdf8 <_oops>

0000cdf8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cdf8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    cdfa:	f01d f9ed 	bl	2a1d8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    cdfe:	bd01      	pop	{r0, pc}

0000ce00 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ce00:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ce04:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ce06:	490d      	ldr	r1, [pc, #52]	; (ce3c <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    ce08:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ce0c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ce0e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ce12:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ce16:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ce18:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ce1c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ce20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ce24:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ce28:	2300      	movs	r3, #0
    ce2a:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    ce2c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ce30:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ce32:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    ce34:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ce38:	4770      	bx	lr
    ce3a:	bf00      	nop
    ce3c:	000287e9 	.word	0x000287e9

0000ce40 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ce40:	4b08      	ldr	r3, [pc, #32]	; (ce64 <arch_switch_to_main_thread+0x24>)
    ce42:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ce44:	6e83      	ldr	r3, [r0, #104]	; 0x68
    ce46:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ce4a:	4610      	mov	r0, r2
    ce4c:	f381 8809 	msr	PSP, r1
    ce50:	2100      	movs	r1, #0
    ce52:	b663      	cpsie	if
    ce54:	f381 8811 	msr	BASEPRI, r1
    ce58:	f3bf 8f6f 	isb	sy
    ce5c:	2200      	movs	r2, #0
    ce5e:	2300      	movs	r3, #0
    ce60:	f01b fcc2 	bl	287e8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ce64:	2000b0c0 	.word	0x2000b0c0

0000ce68 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ce68:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ce6a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ce6c:	4a0b      	ldr	r2, [pc, #44]	; (ce9c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ce6e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    ce70:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ce72:	bf1e      	ittt	ne
	movne	r1, #0
    ce74:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ce76:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    ce78:	f022 fa88 	blne	2f38c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ce7c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ce7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ce82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ce86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ce8a:	4905      	ldr	r1, [pc, #20]	; (cea0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ce8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ce8e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ce90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ce92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ce96:	4903      	ldr	r1, [pc, #12]	; (cea4 <_isr_wrapper+0x3c>)
	bx r1
    ce98:	4708      	bx	r1
    ce9a:	0000      	.short	0x0000
	ldr r2, =_kernel
    ce9c:	2000b0c0 	.word	0x2000b0c0
	ldr r1, =_sw_isr_table
    cea0:	0002f914 	.word	0x0002f914
	ldr r1, =z_arm_int_exit
    cea4:	0000cea9 	.word	0x0000cea9

0000cea8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    cea8:	4b04      	ldr	r3, [pc, #16]	; (cebc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ceaa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ceac:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    ceae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ceb0:	d003      	beq.n	ceba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ceb2:	4903      	ldr	r1, [pc, #12]	; (cec0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ceb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ceb8:	600a      	str	r2, [r1, #0]

0000ceba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ceba:	4770      	bx	lr
	ldr r3, =_kernel
    cebc:	2000b0c0 	.word	0x2000b0c0
	ldr r1, =_SCS_ICSR
    cec0:	e000ed04 	.word	0xe000ed04

0000cec4 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cec8:	b086      	sub	sp, #24
    ceca:	4606      	mov	r6, r0
    cecc:	460d      	mov	r5, r1
    cece:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    ced0:	2402      	movs	r4, #2
    ced2:	4b49      	ldr	r3, [pc, #292]	; (cff8 <mem_manage_fault.constprop.0+0x134>)
    ced4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ced8:	617b      	str	r3, [r7, #20]
    ceda:	4848      	ldr	r0, [pc, #288]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cedc:	613c      	str	r4, [r7, #16]
    cede:	f107 0210 	add.w	r2, r7, #16
    cee2:	f01d f98c 	bl	2a1fe <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    cee6:	4b46      	ldr	r3, [pc, #280]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ceea:	06db      	lsls	r3, r3, #27
    ceec:	d509      	bpl.n	cf02 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ceee:	4b45      	ldr	r3, [pc, #276]	; (d004 <mem_manage_fault.constprop.0+0x140>)
    cef0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cef4:	e9c7 4304 	strd	r4, r3, [r7, #16]
    cef8:	4840      	ldr	r0, [pc, #256]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cefa:	f107 0210 	add.w	r2, r7, #16
    cefe:	f01d f97e 	bl	2a1fe <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    cf02:	4b3f      	ldr	r3, [pc, #252]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf06:	0718      	lsls	r0, r3, #28
    cf08:	d50a      	bpl.n	cf20 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    cf0a:	4b3f      	ldr	r3, [pc, #252]	; (d008 <mem_manage_fault.constprop.0+0x144>)
    cf0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf10:	617b      	str	r3, [r7, #20]
    cf12:	2302      	movs	r3, #2
    cf14:	4839      	ldr	r0, [pc, #228]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cf16:	613b      	str	r3, [r7, #16]
    cf18:	f107 0210 	add.w	r2, r7, #16
    cf1c:	f01d f96f 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    cf20:	4c37      	ldr	r4, [pc, #220]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cf22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf24:	0799      	lsls	r1, r3, #30
    cf26:	d522      	bpl.n	cf6e <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    cf28:	46e8      	mov	r8, sp
    cf2a:	4b38      	ldr	r3, [pc, #224]	; (d00c <mem_manage_fault.constprop.0+0x148>)
    cf2c:	f107 0210 	add.w	r2, r7, #16
    cf30:	617b      	str	r3, [r7, #20]
    cf32:	2302      	movs	r3, #2
    cf34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf38:	613b      	str	r3, [r7, #16]
    cf3a:	4830      	ldr	r0, [pc, #192]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cf3c:	f01d f95f 	bl	2a1fe <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    cf40:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    cf42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cf44:	0612      	lsls	r2, r2, #24
    cf46:	d512      	bpl.n	cf6e <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    cf48:	b088      	sub	sp, #32
    cf4a:	466a      	mov	r2, sp
    cf4c:	4930      	ldr	r1, [pc, #192]	; (d010 <mem_manage_fault.constprop.0+0x14c>)
    cf4e:	482b      	ldr	r0, [pc, #172]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cf50:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cf54:	2303      	movs	r3, #3
    cf56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf5a:	f842 3f10 	str.w	r3, [r2, #16]!
    cf5e:	f01d f94e 	bl	2a1fe <z_log_msg_static_create.constprop.0>
    cf62:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    cf64:	b11e      	cbz	r6, cf6e <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    cf66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cf6c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    cf6e:	4b24      	ldr	r3, [pc, #144]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cf70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf72:	07db      	lsls	r3, r3, #31
    cf74:	d50a      	bpl.n	cf8c <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    cf76:	4b27      	ldr	r3, [pc, #156]	; (d014 <mem_manage_fault.constprop.0+0x150>)
    cf78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf7c:	617b      	str	r3, [r7, #20]
    cf7e:	2302      	movs	r3, #2
    cf80:	481e      	ldr	r0, [pc, #120]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cf82:	613b      	str	r3, [r7, #16]
    cf84:	f107 0210 	add.w	r2, r7, #16
    cf88:	f01d f939 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cf8c:	4b1c      	ldr	r3, [pc, #112]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf90:	069e      	lsls	r6, r3, #26
    cf92:	d50a      	bpl.n	cfaa <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    cf94:	4b20      	ldr	r3, [pc, #128]	; (d018 <mem_manage_fault.constprop.0+0x154>)
    cf96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf9a:	617b      	str	r3, [r7, #20]
    cf9c:	2302      	movs	r3, #2
    cf9e:	4817      	ldr	r0, [pc, #92]	; (cffc <mem_manage_fault.constprop.0+0x138>)
    cfa0:	613b      	str	r3, [r7, #16]
    cfa2:	f107 0210 	add.w	r2, r7, #16
    cfa6:	f01d f92a 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cfaa:	4b15      	ldr	r3, [pc, #84]	; (d000 <mem_manage_fault.constprop.0+0x13c>)
    cfac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cfae:	06d4      	lsls	r4, r2, #27
    cfb0:	d402      	bmi.n	cfb8 <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    cfb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cfb4:	0790      	lsls	r0, r2, #30
    cfb6:	d50d      	bpl.n	cfd4 <mem_manage_fault.constprop.0+0x110>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    cfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfba:	06d9      	lsls	r1, r3, #27
    cfbc:	d50a      	bpl.n	cfd4 <mem_manage_fault.constprop.0+0x110>
    cfbe:	4917      	ldr	r1, [pc, #92]	; (d01c <mem_manage_fault.constprop.0+0x158>)
    cfc0:	4817      	ldr	r0, [pc, #92]	; (d020 <mem_manage_fault.constprop.0+0x15c>)
    cfc2:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    cfc6:	f01b fdfd 	bl	28bc4 <assert_print>
    cfca:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    cfce:	4813      	ldr	r0, [pc, #76]	; (d01c <mem_manage_fault.constprop.0+0x158>)
    cfd0:	f01b fdf1 	bl	28bb6 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    cfd4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cfd6:	4b0a      	ldr	r3, [pc, #40]	; (d000 <mem_manage_fault.constprop.0+0x13c>)

	return reason;
}
    cfd8:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cfda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cfdc:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    cfde:	bf42      	ittt	mi
    cfe0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    cfe2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    cfe6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    cfe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cfea:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    cfee:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    cff0:	7028      	strb	r0, [r5, #0]
}
    cff2:	46bd      	mov	sp, r7
    cff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cff8:	00031655 	.word	0x00031655
    cffc:	0002fdbc 	.word	0x0002fdbc
    d000:	e000ed00 	.word	0xe000ed00
    d004:	0003166b 	.word	0x0003166b
    d008:	0003169e 	.word	0x0003169e
    d00c:	000316b1 	.word	0x000316b1
    d010:	000316c9 	.word	0x000316c9
    d014:	000316df 	.word	0x000316df
    d018:	000316fe 	.word	0x000316fe
    d01c:	0003172d 	.word	0x0003172d
    d020:	00030da5 	.word	0x00030da5

0000d024 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d028:	b086      	sub	sp, #24
    d02a:	4606      	mov	r6, r0
    d02c:	460d      	mov	r5, r1
    d02e:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    d030:	2402      	movs	r4, #2
    d032:	4b3e      	ldr	r3, [pc, #248]	; (d12c <bus_fault.constprop.0+0x108>)
    d034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d038:	617b      	str	r3, [r7, #20]
    d03a:	483d      	ldr	r0, [pc, #244]	; (d130 <bus_fault.constprop.0+0x10c>)
    d03c:	613c      	str	r4, [r7, #16]
    d03e:	f107 0210 	add.w	r2, r7, #16
    d042:	f01d f8dc 	bl	2a1fe <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d046:	4b3b      	ldr	r3, [pc, #236]	; (d134 <bus_fault.constprop.0+0x110>)
    d048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d04a:	04d9      	lsls	r1, r3, #19
    d04c:	d509      	bpl.n	d062 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    d04e:	4b3a      	ldr	r3, [pc, #232]	; (d138 <bus_fault.constprop.0+0x114>)
    d050:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d054:	e9c7 4304 	strd	r4, r3, [r7, #16]
    d058:	4835      	ldr	r0, [pc, #212]	; (d130 <bus_fault.constprop.0+0x10c>)
    d05a:	f107 0210 	add.w	r2, r7, #16
    d05e:	f01d f8ce 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d062:	4b34      	ldr	r3, [pc, #208]	; (d134 <bus_fault.constprop.0+0x110>)
    d064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d066:	051a      	lsls	r2, r3, #20
    d068:	d50a      	bpl.n	d080 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    d06a:	4b34      	ldr	r3, [pc, #208]	; (d13c <bus_fault.constprop.0+0x118>)
    d06c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d070:	617b      	str	r3, [r7, #20]
    d072:	2302      	movs	r3, #2
    d074:	482e      	ldr	r0, [pc, #184]	; (d130 <bus_fault.constprop.0+0x10c>)
    d076:	613b      	str	r3, [r7, #16]
    d078:	f107 0210 	add.w	r2, r7, #16
    d07c:	f01d f8bf 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d080:	4c2c      	ldr	r4, [pc, #176]	; (d134 <bus_fault.constprop.0+0x110>)
    d082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d084:	059b      	lsls	r3, r3, #22
    d086:	d522      	bpl.n	d0ce <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    d088:	46e8      	mov	r8, sp
    d08a:	4b2d      	ldr	r3, [pc, #180]	; (d140 <bus_fault.constprop.0+0x11c>)
    d08c:	4828      	ldr	r0, [pc, #160]	; (d130 <bus_fault.constprop.0+0x10c>)
    d08e:	617b      	str	r3, [r7, #20]
    d090:	2302      	movs	r3, #2
    d092:	f107 0210 	add.w	r2, r7, #16
    d096:	613b      	str	r3, [r7, #16]
    d098:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d09c:	f01d f8af 	bl	2a1fe <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d0a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d0a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d0a4:	0410      	lsls	r0, r2, #16
    d0a6:	d512      	bpl.n	d0ce <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d0a8:	b088      	sub	sp, #32
    d0aa:	466a      	mov	r2, sp
    d0ac:	4925      	ldr	r1, [pc, #148]	; (d144 <bus_fault.constprop.0+0x120>)
    d0ae:	4820      	ldr	r0, [pc, #128]	; (d130 <bus_fault.constprop.0+0x10c>)
    d0b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d0b4:	2303      	movs	r3, #3
    d0b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d0ba:	f842 3f10 	str.w	r3, [r2, #16]!
    d0be:	f01d f89e 	bl	2a1fe <z_log_msg_static_create.constprop.0>
    d0c2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    d0c4:	b11e      	cbz	r6, d0ce <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d0c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d0cc:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d0ce:	4b19      	ldr	r3, [pc, #100]	; (d134 <bus_fault.constprop.0+0x110>)
    d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0d2:	0559      	lsls	r1, r3, #21
    d0d4:	d50a      	bpl.n	d0ec <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    d0d6:	4b1c      	ldr	r3, [pc, #112]	; (d148 <bus_fault.constprop.0+0x124>)
    d0d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0dc:	617b      	str	r3, [r7, #20]
    d0de:	2302      	movs	r3, #2
    d0e0:	4813      	ldr	r0, [pc, #76]	; (d130 <bus_fault.constprop.0+0x10c>)
    d0e2:	613b      	str	r3, [r7, #16]
    d0e4:	f107 0210 	add.w	r2, r7, #16
    d0e8:	f01d f889 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d0ec:	4b11      	ldr	r3, [pc, #68]	; (d134 <bus_fault.constprop.0+0x110>)
    d0ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d0f0:	05d2      	lsls	r2, r2, #23
    d0f2:	d515      	bpl.n	d120 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    d0f4:	4b15      	ldr	r3, [pc, #84]	; (d14c <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d0f6:	617b      	str	r3, [r7, #20]
    d0f8:	2302      	movs	r3, #2
    d0fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d0fe:	480c      	ldr	r0, [pc, #48]	; (d130 <bus_fault.constprop.0+0x10c>)
    d100:	613b      	str	r3, [r7, #16]
    d102:	f107 0210 	add.w	r2, r7, #16
    d106:	f01d f87a 	bl	2a1fe <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    d10a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d10c:	4a09      	ldr	r2, [pc, #36]	; (d134 <bus_fault.constprop.0+0x110>)

	return reason;
}
    d10e:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d110:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d112:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d116:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    d118:	7028      	strb	r0, [r5, #0]
}
    d11a:	46bd      	mov	sp, r7
    d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d122:	049b      	lsls	r3, r3, #18
    d124:	d5f1      	bpl.n	d10a <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d126:	4b0a      	ldr	r3, [pc, #40]	; (d150 <bus_fault.constprop.0+0x12c>)
    d128:	e7e5      	b.n	d0f6 <bus_fault.constprop.0+0xd2>
    d12a:	bf00      	nop
    d12c:	00031767 	.word	0x00031767
    d130:	0002fdbc 	.word	0x0002fdbc
    d134:	e000ed00 	.word	0xe000ed00
    d138:	0003177d 	.word	0x0003177d
    d13c:	0003169e 	.word	0x0003169e
    d140:	0003178e 	.word	0x0003178e
    d144:	000317a7 	.word	0x000317a7
    d148:	000317bc 	.word	0x000317bc
    d14c:	000317d7 	.word	0x000317d7
    d150:	000316fe 	.word	0x000316fe

0000d154 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    d154:	b510      	push	{r4, lr}
    d156:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    d158:	2402      	movs	r4, #2
    d15a:	4b3a      	ldr	r3, [pc, #232]	; (d244 <usage_fault.constprop.0+0xf0>)
    d15c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d160:	4839      	ldr	r0, [pc, #228]	; (d248 <usage_fault.constprop.0+0xf4>)
    d162:	aa04      	add	r2, sp, #16
    d164:	9305      	str	r3, [sp, #20]
    d166:	9404      	str	r4, [sp, #16]
    d168:	f01d f849 	bl	2a1fe <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d16c:	4b37      	ldr	r3, [pc, #220]	; (d24c <usage_fault.constprop.0+0xf8>)
    d16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d170:	019b      	lsls	r3, r3, #6
    d172:	d508      	bpl.n	d186 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    d174:	4b36      	ldr	r3, [pc, #216]	; (d250 <usage_fault.constprop.0+0xfc>)
    d176:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d17a:	4833      	ldr	r0, [pc, #204]	; (d248 <usage_fault.constprop.0+0xf4>)
    d17c:	aa04      	add	r2, sp, #16
    d17e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    d182:	f01d f83c 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d186:	4b31      	ldr	r3, [pc, #196]	; (d24c <usage_fault.constprop.0+0xf8>)
    d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d18a:	01dc      	lsls	r4, r3, #7
    d18c:	d509      	bpl.n	d1a2 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    d18e:	4b31      	ldr	r3, [pc, #196]	; (d254 <usage_fault.constprop.0+0x100>)
    d190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d194:	9305      	str	r3, [sp, #20]
    d196:	2302      	movs	r3, #2
    d198:	482b      	ldr	r0, [pc, #172]	; (d248 <usage_fault.constprop.0+0xf4>)
    d19a:	aa04      	add	r2, sp, #16
    d19c:	9304      	str	r3, [sp, #16]
    d19e:	f01d f82e 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d1a2:	4b2a      	ldr	r3, [pc, #168]	; (d24c <usage_fault.constprop.0+0xf8>)
    d1a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d1a6:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d1aa:	d009      	beq.n	d1c0 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d1ac:	2402      	movs	r4, #2
    d1ae:	4b2a      	ldr	r3, [pc, #168]	; (d258 <usage_fault.constprop.0+0x104>)
    d1b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1b4:	4824      	ldr	r0, [pc, #144]	; (d248 <usage_fault.constprop.0+0xf4>)
    d1b6:	aa04      	add	r2, sp, #16
    d1b8:	9305      	str	r3, [sp, #20]
    d1ba:	9404      	str	r4, [sp, #16]
    d1bc:	f01d f81f 	bl	2a1fe <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d1c0:	4b22      	ldr	r3, [pc, #136]	; (d24c <usage_fault.constprop.0+0xf8>)
    d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1c4:	0318      	lsls	r0, r3, #12
    d1c6:	d509      	bpl.n	d1dc <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    d1c8:	4b24      	ldr	r3, [pc, #144]	; (d25c <usage_fault.constprop.0+0x108>)
    d1ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1ce:	9305      	str	r3, [sp, #20]
    d1d0:	2302      	movs	r3, #2
    d1d2:	481d      	ldr	r0, [pc, #116]	; (d248 <usage_fault.constprop.0+0xf4>)
    d1d4:	aa04      	add	r2, sp, #16
    d1d6:	9304      	str	r3, [sp, #16]
    d1d8:	f01d f811 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d1dc:	4b1b      	ldr	r3, [pc, #108]	; (d24c <usage_fault.constprop.0+0xf8>)
    d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1e0:	0359      	lsls	r1, r3, #13
    d1e2:	d509      	bpl.n	d1f8 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d1e4:	4b1e      	ldr	r3, [pc, #120]	; (d260 <usage_fault.constprop.0+0x10c>)
    d1e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d1ea:	9305      	str	r3, [sp, #20]
    d1ec:	2302      	movs	r3, #2
    d1ee:	4816      	ldr	r0, [pc, #88]	; (d248 <usage_fault.constprop.0+0xf4>)
    d1f0:	aa04      	add	r2, sp, #16
    d1f2:	9304      	str	r3, [sp, #16]
    d1f4:	f01d f803 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d1f8:	4b14      	ldr	r3, [pc, #80]	; (d24c <usage_fault.constprop.0+0xf8>)
    d1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1fc:	039a      	lsls	r2, r3, #14
    d1fe:	d509      	bpl.n	d214 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d200:	4b18      	ldr	r3, [pc, #96]	; (d264 <usage_fault.constprop.0+0x110>)
    d202:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d206:	9305      	str	r3, [sp, #20]
    d208:	2302      	movs	r3, #2
    d20a:	480f      	ldr	r0, [pc, #60]	; (d248 <usage_fault.constprop.0+0xf4>)
    d20c:	aa04      	add	r2, sp, #16
    d20e:	9304      	str	r3, [sp, #16]
    d210:	f01c fff5 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d214:	4b0d      	ldr	r3, [pc, #52]	; (d24c <usage_fault.constprop.0+0xf8>)
    d216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d218:	03db      	lsls	r3, r3, #15
    d21a:	d509      	bpl.n	d230 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d21c:	4b12      	ldr	r3, [pc, #72]	; (d268 <usage_fault.constprop.0+0x114>)
    d21e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d222:	9305      	str	r3, [sp, #20]
    d224:	2302      	movs	r3, #2
    d226:	4808      	ldr	r0, [pc, #32]	; (d248 <usage_fault.constprop.0+0xf4>)
    d228:	aa04      	add	r2, sp, #16
    d22a:	9304      	str	r3, [sp, #16]
    d22c:	f01c ffe7 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d230:	4a06      	ldr	r2, [pc, #24]	; (d24c <usage_fault.constprop.0+0xf8>)

	return reason;
}
    d232:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d234:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d236:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d23a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d23e:	6293      	str	r3, [r2, #40]	; 0x28
}
    d240:	b006      	add	sp, #24
    d242:	bd10      	pop	{r4, pc}
    d244:	000317ef 	.word	0x000317ef
    d248:	0002fdbc 	.word	0x0002fdbc
    d24c:	e000ed00 	.word	0xe000ed00
    d250:	00031807 	.word	0x00031807
    d254:	0003181a 	.word	0x0003181a
    d258:	00031834 	.word	0x00031834
    d25c:	0003185e 	.word	0x0003185e
    d260:	0003187c 	.word	0x0003187c
    d264:	000318a1 	.word	0x000318a1
    d268:	000318bb 	.word	0x000318bb

0000d26c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d270:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d272:	4b8a      	ldr	r3, [pc, #552]	; (d49c <z_arm_fault+0x230>)
{
    d274:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d276:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    d27a:	4688      	mov	r8, r1
    d27c:	4616      	mov	r6, r2
    d27e:	2300      	movs	r3, #0
    d280:	af00      	add	r7, sp, #0
    d282:	f3ca 0908 	ubfx	r9, sl, #0, #9
    d286:	f383 8811 	msr	BASEPRI, r3
    d28a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d28e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d292:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d296:	d00a      	beq.n	d2ae <z_arm_fault+0x42>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d298:	4981      	ldr	r1, [pc, #516]	; (d4a0 <z_arm_fault+0x234>)
    d29a:	f44f 6284 	mov.w	r2, #1056	; 0x420
    d29e:	4881      	ldr	r0, [pc, #516]	; (d4a4 <z_arm_fault+0x238>)
    d2a0:	f01b fc90 	bl	28bc4 <assert_print>
    d2a4:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    d2a8:	487d      	ldr	r0, [pc, #500]	; (d4a0 <z_arm_fault+0x234>)
    d2aa:	f01b fc84 	bl	28bb6 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d2ae:	f012 0401 	ands.w	r4, r2, #1
    d2b2:	d1f1      	bne.n	d298 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d2b4:	0653      	lsls	r3, r2, #25
    d2b6:	d404      	bmi.n	d2c2 <z_arm_fault+0x56>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d2b8:	0710      	lsls	r0, r2, #28
    d2ba:	d40f      	bmi.n	d2dc <z_arm_fault+0x70>
			*nested_exc = true;
    d2bc:	f04f 0801 	mov.w	r8, #1
    d2c0:	e00f      	b.n	d2e2 <z_arm_fault+0x76>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d2c2:	4b79      	ldr	r3, [pc, #484]	; (d4a8 <z_arm_fault+0x23c>)
    d2c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d2c8:	61fb      	str	r3, [r7, #28]
    d2ca:	2302      	movs	r3, #2
    d2cc:	4877      	ldr	r0, [pc, #476]	; (d4ac <z_arm_fault+0x240>)
    d2ce:	61bb      	str	r3, [r7, #24]
    d2d0:	f107 0218 	add.w	r2, r7, #24
    d2d4:	f01c ff93 	bl	2a1fe <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d2d8:	0771      	lsls	r1, r6, #29
    d2da:	d500      	bpl.n	d2de <z_arm_fault+0x72>
			ptr_esf = (z_arch_esf_t *)psp;
    d2dc:	4645      	mov	r5, r8
	*nested_exc = false;
    d2de:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
    d2e2:	2d00      	cmp	r5, #0
    d2e4:	d0d8      	beq.n	d298 <z_arm_fault+0x2c>
	*recoverable = false;
    d2e6:	2300      	movs	r3, #0
    d2e8:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    d2ea:	f1a9 0303 	sub.w	r3, r9, #3
    d2ee:	2b09      	cmp	r3, #9
    d2f0:	f200 80b2 	bhi.w	d458 <z_arm_fault+0x1ec>
    d2f4:	e8df f003 	tbb	[pc, r3]
    d2f8:	90a8a505 	.word	0x90a8a505
    d2fc:	b0b0b0b0 	.word	0xb0b0b0b0
    d300:	abb0      	.short	0xabb0
	PR_FAULT_INFO("***** HARD FAULT *****");
    d302:	46e9      	mov	r9, sp
    d304:	f04f 0a02 	mov.w	sl, #2
    d308:	4b69      	ldr	r3, [pc, #420]	; (d4b0 <z_arm_fault+0x244>)
    d30a:	f107 0218 	add.w	r2, r7, #24
    d30e:	61fb      	str	r3, [r7, #28]
    d310:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d314:	4865      	ldr	r0, [pc, #404]	; (d4ac <z_arm_fault+0x240>)
    d316:	f8c7 a018 	str.w	sl, [r7, #24]
    d31a:	f01c ff70 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    d31e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d320:	4e5e      	ldr	r6, [pc, #376]	; (d49c <z_arm_fault+0x230>)
	*recoverable = false;
    d322:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d324:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d326:	079a      	lsls	r2, r3, #30
    d328:	d50a      	bpl.n	d340 <z_arm_fault+0xd4>
		PR_EXC("  Bus fault on vector table read");
    d32a:	4b62      	ldr	r3, [pc, #392]	; (d4b4 <z_arm_fault+0x248>)
		PR_EXC("  Debug event");
    d32c:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    d330:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d334:	485d      	ldr	r0, [pc, #372]	; (d4ac <z_arm_fault+0x240>)
    d336:	f107 0218 	add.w	r2, r7, #24
    d33a:	f01c ff60 	bl	2a1fe <z_log_msg_static_create.constprop.0>
}
    d33e:	e041      	b.n	d3c4 <z_arm_fault+0x158>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    d340:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d342:	2b00      	cmp	r3, #0
    d344:	da01      	bge.n	d34a <z_arm_fault+0xde>
		PR_EXC("  Debug event");
    d346:	4b5c      	ldr	r3, [pc, #368]	; (d4b8 <z_arm_fault+0x24c>)
    d348:	e7f0      	b.n	d32c <z_arm_fault+0xc0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d34a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d34c:	005b      	lsls	r3, r3, #1
    d34e:	d56f      	bpl.n	d430 <z_arm_fault+0x1c4>
		PR_EXC("  Fault escalation (see below)");
    d350:	4b5a      	ldr	r3, [pc, #360]	; (d4bc <z_arm_fault+0x250>)
    d352:	f107 0218 	add.w	r2, r7, #24
    d356:	e9c7 a306 	strd	sl, r3, [r7, #24]
    d35a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d35e:	4853      	ldr	r0, [pc, #332]	; (d4ac <z_arm_fault+0x240>)
    d360:	f01c ff4d 	bl	2a1fe <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d364:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    d366:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    d368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d36c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d36e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d372:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d376:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    d378:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    d37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d380:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    d382:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d386:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    d38a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    d38e:	429a      	cmp	r2, r3
    d390:	d008      	beq.n	d3a4 <z_arm_fault+0x138>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    d392:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d394:	b2db      	uxtb	r3, r3
    d396:	b393      	cbz	r3, d3fe <z_arm_fault+0x192>
			reason = mem_manage_fault(esf, 1, recoverable);
    d398:	2001      	movs	r0, #1
    d39a:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d39c:	f7ff fd92 	bl	cec4 <mem_manage_fault.constprop.0>
    d3a0:	4604      	mov	r4, r0
		break;
    d3a2:	e00f      	b.n	d3c4 <z_arm_fault+0x158>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    d3a4:	b088      	sub	sp, #32
    d3a6:	682b      	ldr	r3, [r5, #0]
    d3a8:	466a      	mov	r2, sp
    d3aa:	4945      	ldr	r1, [pc, #276]	; (d4c0 <z_arm_fault+0x254>)
    d3ac:	483f      	ldr	r0, [pc, #252]	; (d4ac <z_arm_fault+0x240>)
    d3ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d3b2:	2303      	movs	r3, #3
    d3b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d3b8:	f842 3f10 	str.w	r3, [r2, #16]!
    d3bc:	f01c ff1f 	bl	2a1fe <z_log_msg_static_create.constprop.0>
    d3c0:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    d3c2:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d3c4:	79fb      	ldrb	r3, [r7, #7]
    d3c6:	b9b3      	cbnz	r3, d3f6 <z_arm_fault+0x18a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d3c8:	2220      	movs	r2, #32
    d3ca:	4629      	mov	r1, r5
    d3cc:	f107 0008 	add.w	r0, r7, #8
    d3d0:	f01d f8a3 	bl	2a51a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d3d6:	f1b8 0f00 	cmp.w	r8, #0
    d3da:	d059      	beq.n	d490 <z_arm_fault+0x224>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d3dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d3e0:	b922      	cbnz	r2, d3ec <z_arm_fault+0x180>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d3e2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d3e6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d3ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d3ec:	4620      	mov	r0, r4
    d3ee:	f107 0108 	add.w	r1, r7, #8
    d3f2:	f7ff fbcf 	bl	cb94 <z_arm_fatal_error>
}
    d3f6:	3728      	adds	r7, #40	; 0x28
    d3f8:	46bd      	mov	sp, r7
    d3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    d3fe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d400:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    d404:	d004      	beq.n	d410 <z_arm_fault+0x1a4>
			reason = bus_fault(esf, 1, recoverable);
    d406:	2001      	movs	r0, #1
    d408:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    d40a:	f7ff fe0b 	bl	d024 <bus_fault.constprop.0>
    d40e:	e7c7      	b.n	d3a0 <z_arm_fault+0x134>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    d410:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d416:	d302      	bcc.n	d41e <z_arm_fault+0x1b2>
		reason = usage_fault(esf);
    d418:	f7ff fe9c 	bl	d154 <usage_fault.constprop.0>
    d41c:	e7c0      	b.n	d3a0 <z_arm_fault+0x134>
			__ASSERT(0,
    d41e:	4920      	ldr	r1, [pc, #128]	; (d4a0 <z_arm_fault+0x234>)
    d420:	f240 22f2 	movw	r2, #754	; 0x2f2
    d424:	481f      	ldr	r0, [pc, #124]	; (d4a4 <z_arm_fault+0x238>)
    d426:	f01b fbcd 	bl	28bc4 <assert_print>
    d42a:	f240 21f2 	movw	r1, #754	; 0x2f2
    d42e:	e73b      	b.n	d2a8 <z_arm_fault+0x3c>
		__ASSERT(0,
    d430:	491b      	ldr	r1, [pc, #108]	; (d4a0 <z_arm_fault+0x234>)
    d432:	f240 22f6 	movw	r2, #758	; 0x2f6
    d436:	481b      	ldr	r0, [pc, #108]	; (d4a4 <z_arm_fault+0x238>)
    d438:	f01b fbc4 	bl	28bc4 <assert_print>
    d43c:	f240 21f6 	movw	r1, #758	; 0x2f6
    d440:	e732      	b.n	d2a8 <z_arm_fault+0x3c>
		reason = mem_manage_fault(esf, 0, recoverable);
    d442:	2000      	movs	r0, #0
    d444:	1df9      	adds	r1, r7, #7
    d446:	e7a9      	b.n	d39c <z_arm_fault+0x130>
		reason = bus_fault(esf, 0, recoverable);
    d448:	2000      	movs	r0, #0
    d44a:	1df9      	adds	r1, r7, #7
    d44c:	e7dd      	b.n	d40a <z_arm_fault+0x19e>
	PR_FAULT_INFO(
    d44e:	4b1d      	ldr	r3, [pc, #116]	; (d4c4 <z_arm_fault+0x258>)
    d450:	61fb      	str	r3, [r7, #28]
    d452:	2302      	movs	r3, #2
    d454:	61bb      	str	r3, [r7, #24]
    d456:	e76b      	b.n	d330 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    d458:	4a1b      	ldr	r2, [pc, #108]	; (d4c8 <z_arm_fault+0x25c>)
    d45a:	466e      	mov	r6, sp
    d45c:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
    d460:	b08a      	sub	sp, #40	; 0x28
    d462:	4b1a      	ldr	r3, [pc, #104]	; (d4cc <z_arm_fault+0x260>)
    d464:	bf18      	it	ne
    d466:	4613      	movne	r3, r2
    d468:	466a      	mov	r2, sp
    d46a:	4919      	ldr	r1, [pc, #100]	; (d4d0 <z_arm_fault+0x264>)
    d46c:	480f      	ldr	r0, [pc, #60]	; (d4ac <z_arm_fault+0x240>)
    d46e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d472:	f1a9 0310 	sub.w	r3, r9, #16
    d476:	61d3      	str	r3, [r2, #28]
    d478:	f44f 7300 	mov.w	r3, #512	; 0x200
    d47c:	8413      	strh	r3, [r2, #32]
    d47e:	4b15      	ldr	r3, [pc, #84]	; (d4d4 <z_arm_fault+0x268>)
    d480:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    d484:	f842 3f10 	str.w	r3, [r2, #16]!
    d488:	f01c feb9 	bl	2a1fe <z_log_msg_static_create.constprop.0>
    d48c:	46b5      	mov	sp, r6
}
    d48e:	e799      	b.n	d3c4 <z_arm_fault+0x158>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d490:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d494:	f023 0301 	bic.w	r3, r3, #1
    d498:	e7a7      	b.n	d3ea <z_arm_fault+0x17e>
    d49a:	bf00      	nop
    d49c:	e000ed00 	.word	0xe000ed00
    d4a0:	0003172d 	.word	0x0003172d
    d4a4:	00030da5 	.word	0x00030da5
    d4a8:	00031914 	.word	0x00031914
    d4ac:	0002fdbc 	.word	0x0002fdbc
    d4b0:	00031937 	.word	0x00031937
    d4b4:	0003194e 	.word	0x0003194e
    d4b8:	0003196f 	.word	0x0003196f
    d4bc:	0003197d 	.word	0x0003197d
    d4c0:	0003199c 	.word	0x0003199c
    d4c4:	000319b8 	.word	0x000319b8
    d4c8:	000318fb 	.word	0x000318fb
    d4cc:	000318e6 	.word	0x000318e6
    d4d0:	000319dc 	.word	0x000319dc
    d4d4:	01000004 	.word	0x01000004

0000d4d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d4d8:	4b04      	ldr	r3, [pc, #16]	; (d4ec <z_arm_fault_init+0x14>)
    d4da:	695a      	ldr	r2, [r3, #20]
    d4dc:	f042 0210 	orr.w	r2, r2, #16
    d4e0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d4e2:	695a      	ldr	r2, [r3, #20]
    d4e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d4e8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d4ea:	4770      	bx	lr
    d4ec:	e000ed00 	.word	0xe000ed00

0000d4f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d4f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d4f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d4f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d4fa:	4672      	mov	r2, lr
	bl z_arm_fault
    d4fc:	f7ff feb6 	bl	d26c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d500:	bd01      	pop	{r0, pc}
    d502:	bf00      	nop

0000d504 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d504:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d506:	2120      	movs	r1, #32
    d508:	4803      	ldr	r0, [pc, #12]	; (d518 <z_arm_interrupt_init+0x14>)
    d50a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d50c:	3301      	adds	r3, #1
    d50e:	2b45      	cmp	r3, #69	; 0x45
    d510:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d514:	d1f9      	bne.n	d50a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d516:	4770      	bx	lr
    d518:	e000e100 	.word	0xe000e100

0000d51c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    d51c:	2000      	movs	r0, #0
    msr CONTROL, r0
    d51e:	f380 8814 	msr	CONTROL, r0
    isb
    d522:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    d526:	2000      	movs	r0, #0
    msr MSPLIM, r0
    d528:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    d52c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    d530:	f7fc ffd4 	bl	a4dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    d534:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    d536:	490e      	ldr	r1, [pc, #56]	; (d570 <__start+0x54>)
    str r0, [r1]
    d538:	6008      	str	r0, [r1, #0]
    dsb
    d53a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d53e:	480d      	ldr	r0, [pc, #52]	; (d574 <__start+0x58>)
    msr msp, r0
    d540:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    d544:	f000 f83e 	bl	d5c4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d548:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d54a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d54e:	480a      	ldr	r0, [pc, #40]	; (d578 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d550:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d554:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d556:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d55a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d55e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d560:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d562:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d566:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d56a:	f7ff fbd3 	bl	cd14 <z_arm_prep_c>
    d56e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    d570:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d574:	2000df08 	.word	0x2000df08
    ldr r0, =z_interrupt_stacks
    d578:	2000d1c8 	.word	0x2000d1c8

0000d57c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d57c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d580:	4905      	ldr	r1, [pc, #20]	; (d598 <sys_arch_reboot+0x1c>)
    d582:	4b06      	ldr	r3, [pc, #24]	; (d59c <sys_arch_reboot+0x20>)
    d584:	68ca      	ldr	r2, [r1, #12]
    d586:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d58a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d58c:	60cb      	str	r3, [r1, #12]
    d58e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d592:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d594:	e7fd      	b.n	d592 <sys_arch_reboot+0x16>
    d596:	bf00      	nop
    d598:	e000ed00 	.word	0xe000ed00
    d59c:	05fa0004 	.word	0x05fa0004

0000d5a0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    d5a0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    d5a2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    d5a4:	4906      	ldr	r1, [pc, #24]	; (d5c0 <z_arm_clear_arm_mpu_config+0x20>)
    d5a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    d5aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    d5ae:	4293      	cmp	r3, r2
    d5b0:	db00      	blt.n	d5b4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    d5b2:	4770      	bx	lr
  mpu->RNR = rnr;
    d5b4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    d5b8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    d5bc:	3301      	adds	r3, #1
    d5be:	e7f6      	b.n	d5ae <z_arm_clear_arm_mpu_config+0xe>
    d5c0:	e000ed00 	.word	0xe000ed00

0000d5c4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    d5c4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    d5c6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    d5c8:	2400      	movs	r4, #0
    d5ca:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    d5ce:	f7ff ffe7 	bl	d5a0 <z_arm_clear_arm_mpu_config>
    d5d2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    d5d4:	f04f 30ff 	mov.w	r0, #4294967295
    d5d8:	4a0c      	ldr	r2, [pc, #48]	; (d60c <z_arm_init_arch_hw_at_boot+0x48>)
    d5da:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d5de:	3301      	adds	r3, #1
    d5e0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    d5e2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    d5e6:	d1f8      	bne.n	d5da <z_arm_init_arch_hw_at_boot+0x16>
    d5e8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d5ea:	f04f 30ff 	mov.w	r0, #4294967295
    d5ee:	4a07      	ldr	r2, [pc, #28]	; (d60c <z_arm_init_arch_hw_at_boot+0x48>)
    d5f0:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d5f4:	3301      	adds	r3, #1
    d5f6:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d5f8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    d5fc:	d1f8      	bne.n	d5f0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    d5fe:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    d600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d604:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    d608:	bd10      	pop	{r4, pc}
    d60a:	bf00      	nop
    d60c:	e000e100 	.word	0xe000e100

0000d610 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    d610:	4b08      	ldr	r3, [pc, #32]	; (d634 <z_impl_k_thread_abort+0x24>)
    d612:	689b      	ldr	r3, [r3, #8]
    d614:	4283      	cmp	r3, r0
    d616:	d10b      	bne.n	d630 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d618:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d61c:	b143      	cbz	r3, d630 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d61e:	4b06      	ldr	r3, [pc, #24]	; (d638 <z_impl_k_thread_abort+0x28>)
    d620:	685a      	ldr	r2, [r3, #4]
    d622:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d626:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    d628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d62a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d62e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    d630:	f019 bff4 	b.w	2761c <z_thread_abort>
    d634:	2000b0c0 	.word	0x2000b0c0
    d638:	e000ed00 	.word	0xe000ed00

0000d63c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d63e:	4c09      	ldr	r4, [pc, #36]	; (d664 <z_arm_configure_static_mpu_regions+0x28>)
    d640:	4a09      	ldr	r2, [pc, #36]	; (d668 <z_arm_configure_static_mpu_regions+0x2c>)
    d642:	4623      	mov	r3, r4
    d644:	2101      	movs	r1, #1
    d646:	4809      	ldr	r0, [pc, #36]	; (d66c <z_arm_configure_static_mpu_regions+0x30>)
    d648:	f000 f92a 	bl	d8a0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d64c:	2300      	movs	r3, #0
    d64e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d650:	4b07      	ldr	r3, [pc, #28]	; (d670 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d652:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d654:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d656:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d658:	9301      	str	r3, [sp, #4]
    d65a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d65c:	f000 f93a 	bl	d8d4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d660:	b004      	add	sp, #16
    d662:	bd10      	pop	{r4, pc}
    d664:	20070000 	.word	0x20070000
    d668:	20008000 	.word	0x20008000
    d66c:	00030254 	.word	0x00030254
    d670:	200090f8 	.word	0x200090f8

0000d674 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d674:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    d676:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d678:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d67a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d67e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    d682:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d684:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d686:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d688:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    d68c:	4905      	ldr	r1, [pc, #20]	; (d6a4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d68e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d692:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    d696:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    d69a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    d69e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d6a2:	bd10      	pop	{r4, pc}
    d6a4:	e000ed00 	.word	0xe000ed00

0000d6a8 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    d6a8:	b580      	push	{r7, lr}
    d6aa:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d6ac:	b088      	sub	sp, #32
    d6ae:	466a      	mov	r2, sp
    d6b0:	4b07      	ldr	r3, [pc, #28]	; (d6d0 <region_allocate_and_init.part.0+0x28>)
    d6b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d6b6:	2303      	movs	r3, #3
    d6b8:	f842 3f10 	str.w	r3, [r2, #16]!
    d6bc:	2300      	movs	r3, #0
    d6be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d6c2:	4804      	ldr	r0, [pc, #16]	; (d6d4 <region_allocate_and_init.part.0+0x2c>)
    d6c4:	f7fd fa4a 	bl	ab5c <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    d6c8:	f06f 0015 	mvn.w	r0, #21
    d6cc:	46bd      	mov	sp, r7
    d6ce:	bd80      	pop	{r7, pc}
    d6d0:	000319f3 	.word	0x000319f3
    d6d4:	0002fda4 	.word	0x0002fda4

0000d6d8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6dc:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d6de:	4606      	mov	r6, r0
    d6e0:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d6e4:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    d6e6:	4d5f      	ldr	r5, [pc, #380]	; (d864 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    d6ec:	687b      	ldr	r3, [r7, #4]
    d6ee:	4599      	cmp	r9, r3
    d6f0:	da35      	bge.n	d75e <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    d6f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
    d6f6:	f1b8 0f00 	cmp.w	r8, #0
    d6fa:	d054      	beq.n	d7a6 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    d6fc:	f1b8 0f1f 	cmp.w	r8, #31
    d700:	d91b      	bls.n	d73a <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    d702:	f018 0f1f 	tst.w	r8, #31
    d706:	d118      	bne.n	d73a <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    d708:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d70c:	f01b 0f1f 	tst.w	fp, #31
    d710:	d113      	bne.n	d73a <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d712:	4658      	mov	r0, fp
    d714:	f01c fd78 	bl	2a208 <arm_cmse_mpu_region_get>
    d718:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d71a:	eb08 000b 	add.w	r0, r8, fp
    d71e:	3801      	subs	r0, #1
    d720:	f01c fd72 	bl	2a208 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d724:	4582      	cmp	sl, r0
    d726:	d01f      	beq.n	d768 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    d728:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d72c:	466c      	mov	r4, sp
    d72e:	b088      	sub	sp, #32
    d730:	466a      	mov	r2, sp
    d732:	494d      	ldr	r1, [pc, #308]	; (d868 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    d734:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    d738:	e005      	b.n	d746 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d73a:	466c      	mov	r4, sp
    d73c:	b088      	sub	sp, #32
    d73e:	466a      	mov	r2, sp
    d740:	4b4a      	ldr	r3, [pc, #296]	; (d86c <mpu_configure_regions_and_partition.constprop.0+0x194>)
    d742:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    d746:	2303      	movs	r3, #3
    d748:	f842 3f10 	str.w	r3, [r2, #16]!
    d74c:	2300      	movs	r3, #0
    d74e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d752:	4847      	ldr	r0, [pc, #284]	; (d870 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    d754:	f7fd fa02 	bl	ab5c <z_impl_z_log_msg_static_create>
    d758:	46a5      	mov	sp, r4
			return -EINVAL;
    d75a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d75e:	4620      	mov	r0, r4
    d760:	371c      	adds	r7, #28
    d762:	46bd      	mov	sp, r7
    d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d768:	f11a 0f16 	cmn.w	sl, #22
    d76c:	d0de      	beq.n	d72c <mpu_configure_regions_and_partition.constprop.0+0x54>
    d76e:	4554      	cmp	r4, sl
    d770:	dddc      	ble.n	d72c <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    d772:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d776:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    d77a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    d77e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d782:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d786:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d78a:	e9d6 2100 	ldrd	r2, r1, [r6]
    d78e:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    d790:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d792:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d796:	d11e      	bne.n	d7d6 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    d798:	45d8      	cmp	r8, fp
    d79a:	d108      	bne.n	d7ae <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    d79c:	4631      	mov	r1, r6
    d79e:	fa5f f08a 	uxtb.w	r0, sl
    d7a2:	f01c fd3a 	bl	2a21a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d7a6:	f109 0901 	add.w	r9, r9, #1
    d7aa:	360c      	adds	r6, #12
    d7ac:	e79e      	b.n	d6ec <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    d7ae:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d7b2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    d7b6:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    d7ba:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    d7be:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    d7c0:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    d7c2:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d7c6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d7c8:	f01c fd27 	bl	2a21a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d7cc:	f110 0f16 	cmn.w	r0, #22
    d7d0:	d0c3      	beq.n	d75a <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    d7d2:	1c44      	adds	r4, r0, #1
    d7d4:	e7e7      	b.n	d7a6 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    d7d6:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    d7d8:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    d7da:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d7dc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    d7e0:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d7e4:	d108      	bne.n	d7f8 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    d7e6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d7ea:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d7ec:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d7f0:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    d7f2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d7f6:	e7e7      	b.n	d7c8 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    d7f8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    d7fc:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    d800:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    d802:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d806:	4631      	mov	r1, r6
    d808:	f01c fd07 	bl	2a21a <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d80c:	f110 0f16 	cmn.w	r0, #22
    d810:	d0a3      	beq.n	d75a <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    d812:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    d816:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d81a:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    d81c:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    d820:	f362 0304 	bfi	r3, r2, #0, #5
    d824:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    d826:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d82a:	7c3a      	ldrb	r2, [r7, #16]
    d82c:	085b      	lsrs	r3, r3, #1
    d82e:	f363 1247 	bfi	r2, r3, #5, #3
    d832:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    d834:	e9d6 3200 	ldrd	r3, r2, [r6]
    d838:	4413      	add	r3, r2
    d83a:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d83c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d840:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d842:	4443      	add	r3, r8
    d844:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    d848:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    d84a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d84e:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    d850:	617b      	str	r3, [r7, #20]
    d852:	d902      	bls.n	d85a <mpu_configure_regions_and_partition.constprop.0+0x182>
    d854:	f7ff ff28 	bl	d6a8 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    d858:	e7b8      	b.n	d7cc <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    d85a:	f107 0108 	add.w	r1, r7, #8
    d85e:	f7ff ff09 	bl	d674 <region_init>
    d862:	e7b6      	b.n	d7d2 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    d864:	e000ed00 	.word	0xe000ed00
    d868:	00031a3c 	.word	0x00031a3c
    d86c:	00031a19 	.word	0x00031a19
    d870:	0002fda4 	.word	0x0002fda4

0000d874 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d874:	2205      	movs	r2, #5
    d876:	4b04      	ldr	r3, [pc, #16]	; (d888 <arm_core_mpu_enable+0x14>)
    d878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d87c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d880:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d884:	4770      	bx	lr
    d886:	bf00      	nop
    d888:	e000ed00 	.word	0xe000ed00

0000d88c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    d88c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d890:	2200      	movs	r2, #0
    d892:	4b02      	ldr	r3, [pc, #8]	; (d89c <arm_core_mpu_disable+0x10>)
    d894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d898:	4770      	bx	lr
    d89a:	bf00      	nop
    d89c:	e000ed00 	.word	0xe000ed00

0000d8a0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    d8a0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d8a2:	4c09      	ldr	r4, [pc, #36]	; (d8c8 <arm_core_mpu_configure_static_mpu_regions+0x28>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d8a4:	7822      	ldrb	r2, [r4, #0]
    d8a6:	f7ff ff17 	bl	d6d8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d8aa:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d8ac:	3016      	adds	r0, #22
    d8ae:	d10a      	bne.n	d8c6 <arm_core_mpu_configure_static_mpu_regions+0x26>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d8b0:	4906      	ldr	r1, [pc, #24]	; (d8cc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
    d8b2:	4807      	ldr	r0, [pc, #28]	; (d8d0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d8b4:	f44f 728d 	mov.w	r2, #282	; 0x11a
    d8b8:	f01b f984 	bl	28bc4 <assert_print>
    d8bc:	f44f 718d 	mov.w	r1, #282	; 0x11a
    d8c0:	4802      	ldr	r0, [pc, #8]	; (d8cc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
    d8c2:	f01b f978 	bl	28bb6 <assert_post_action>
			regions_num);
	}
}
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	2000b1e3 	.word	0x2000b1e3
    d8cc:	00031a5f 	.word	0x00031a5f
    d8d0:	00030da5 	.word	0x00030da5

0000d8d4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    d8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8d8:	4d2e      	ldr	r5, [pc, #184]	; (d994 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    d8da:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d8dc:	4606      	mov	r6, r0
    d8de:	f04f 0800 	mov.w	r8, #0
    d8e2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    d8e4:	4f2c      	ldr	r7, [pc, #176]	; (d998 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d8e6:	45d0      	cmp	r8, sl
    d8e8:	db02      	blt.n	d8f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    d8ea:	b003      	add	sp, #12
    d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d8f0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d8f4:	f1b9 0f00 	cmp.w	r9, #0
    d8f8:	d047      	beq.n	d98a <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d8fa:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d8fc:	4608      	mov	r0, r1
    d8fe:	9101      	str	r1, [sp, #4]
    d900:	f01c fc82 	bl	2a208 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d904:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d906:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d908:	eb09 0001 	add.w	r0, r9, r1
    d90c:	3801      	subs	r0, #1
    d90e:	f01c fc7b 	bl	2a208 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d912:	4284      	cmp	r4, r0
    d914:	f04f 0214 	mov.w	r2, #20
    d918:	4b20      	ldr	r3, [pc, #128]	; (d99c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d91a:	d010      	beq.n	d93e <arm_core_mpu_mark_areas_for_dynamic_regions+0x6a>
		dyn_reg_info[i].index =
    d91c:	fb02 f308 	mul.w	r3, r2, r8
    d920:	f06f 0215 	mvn.w	r2, #21
    d924:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d928:	491d      	ldr	r1, [pc, #116]	; (d9a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    d92a:	481e      	ldr	r0, [pc, #120]	; (d9a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d92c:	f44f 7295 	mov.w	r2, #298	; 0x12a
    d930:	f01b f948 	bl	28bc4 <assert_print>
    d934:	f44f 7195 	mov.w	r1, #298	; 0x12a
    d938:	4819      	ldr	r0, [pc, #100]	; (d9a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    d93a:	f01b f93c 	bl	28bb6 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d93e:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d942:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d944:	d0f0      	beq.n	d928 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d946:	7819      	ldrb	r1, [r3, #0]
    d948:	42a1      	cmp	r1, r4
    d94a:	dded      	ble.n	d928 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    d94c:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    d950:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    d954:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    d958:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    d95c:	f100 0108 	add.w	r1, r0, #8
    d960:	7b00      	ldrb	r0, [r0, #12]
    d962:	f364 0004 	bfi	r0, r4, #0, #5
    d966:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    d968:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    d96c:	790c      	ldrb	r4, [r1, #4]
    d96e:	0840      	lsrs	r0, r0, #1
    d970:	f360 1447 	bfi	r4, r0, #5, #3
    d974:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    d976:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    d97a:	f021 011f 	bic.w	r1, r1, #31
    d97e:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    d980:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    d984:	f021 011f 	bic.w	r1, r1, #31
    d988:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d98a:	f108 0801 	add.w	r8, r8, #1
    d98e:	3514      	adds	r5, #20
    d990:	360c      	adds	r6, #12
    d992:	e7a8      	b.n	d8e6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d994:	2000a688 	.word	0x2000a688
    d998:	e000ed00 	.word	0xe000ed00
    d99c:	2000b1e3 	.word	0x2000b1e3
    d9a0:	00031a5f 	.word	0x00031a5f
    d9a4:	00030da5 	.word	0x00030da5

0000d9a8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    d9a8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d9aa:	4d1a      	ldr	r5, [pc, #104]	; (da14 <z_arm_mpu_init+0x6c>)
    d9ac:	682c      	ldr	r4, [r5, #0]
    d9ae:	2c08      	cmp	r4, #8
    d9b0:	d90a      	bls.n	d9c8 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d9b2:	4919      	ldr	r1, [pc, #100]	; (da18 <z_arm_mpu_init+0x70>)
    d9b4:	f240 1251 	movw	r2, #337	; 0x151
    d9b8:	4818      	ldr	r0, [pc, #96]	; (da1c <z_arm_mpu_init+0x74>)
    d9ba:	f01b f903 	bl	28bc4 <assert_print>
    d9be:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    d9c2:	4815      	ldr	r0, [pc, #84]	; (da18 <z_arm_mpu_init+0x70>)
    d9c4:	f01b f8f7 	bl	28bb6 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d9c8:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d9ca:	f7ff ff5f 	bl	d88c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    d9ce:	4b14      	ldr	r3, [pc, #80]	; (da20 <z_arm_mpu_init+0x78>)
    d9d0:	4a14      	ldr	r2, [pc, #80]	; (da24 <z_arm_mpu_init+0x7c>)
    d9d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d9d6:	4284      	cmp	r4, r0
    d9d8:	d113      	bne.n	da02 <z_arm_mpu_init+0x5a>
	static_regions_num = mpu_config.num_regions;
    d9da:	4b13      	ldr	r3, [pc, #76]	; (da28 <z_arm_mpu_init+0x80>)
    d9dc:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d9de:	f7ff ff49 	bl	d874 <arm_core_mpu_enable>
	__ASSERT(
    d9e2:	4b0f      	ldr	r3, [pc, #60]	; (da20 <z_arm_mpu_init+0x78>)
    d9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d9e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d9ec:	2b08      	cmp	r3, #8
    d9ee:	d00f      	beq.n	da10 <z_arm_mpu_init+0x68>
    d9f0:	4909      	ldr	r1, [pc, #36]	; (da18 <z_arm_mpu_init+0x70>)
    d9f2:	f240 12bb 	movw	r2, #443	; 0x1bb
    d9f6:	4809      	ldr	r0, [pc, #36]	; (da1c <z_arm_mpu_init+0x74>)
    d9f8:	f01b f8e4 	bl	28bc4 <assert_print>
    d9fc:	f240 11bb 	movw	r1, #443	; 0x1bb
    da00:	e7df      	b.n	d9c2 <z_arm_mpu_init+0x1a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    da02:	6869      	ldr	r1, [r5, #4]
    da04:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    da08:	f7ff fe34 	bl	d674 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    da0c:	3001      	adds	r0, #1
    da0e:	e7e2      	b.n	d9d6 <z_arm_mpu_init+0x2e>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    da10:	2000      	movs	r0, #0
    da12:	bd38      	pop	{r3, r4, r5, pc}
    da14:	00030260 	.word	0x00030260
    da18:	00031a5f 	.word	0x00031a5f
    da1c:	00030da5 	.word	0x00030da5
    da20:	e000ed00 	.word	0xe000ed00
    da24:	0044ffaa 	.word	0x0044ffaa
    da28:	2000b1e3 	.word	0x2000b1e3

0000da2c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    da2c:	4b01      	ldr	r3, [pc, #4]	; (da34 <__stdout_hook_install+0x8>)
    da2e:	6018      	str	r0, [r3, #0]
}
    da30:	4770      	bx	lr
    da32:	bf00      	nop
    da34:	200086c4 	.word	0x200086c4

0000da38 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    da38:	2000      	movs	r0, #0
    da3a:	4b02      	ldr	r3, [pc, #8]	; (da44 <remoteproc_mgr_boot+0xc>)
    da3c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    da40:	4770      	bx	lr
    da42:	bf00      	nop
    da44:	40005000 	.word	0x40005000

0000da48 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    da48:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    da4a:	7803      	ldrb	r3, [r0, #0]
    da4c:	b08b      	sub	sp, #44	; 0x2c
    da4e:	4604      	mov	r4, r0
    da50:	ad07      	add	r5, sp, #28
    da52:	2b03      	cmp	r3, #3
    da54:	d821      	bhi.n	da9a <bt_addr_le_str+0x52>
    da56:	e8df f003 	tbb	[pc, r3]
    da5a:	1a02      	.short	0x1a02
    da5c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    da5e:	4912      	ldr	r1, [pc, #72]	; (daa8 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    da60:	4628      	mov	r0, r5
    da62:	f01c fce6 	bl	2a432 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    da66:	9505      	str	r5, [sp, #20]
    da68:	7863      	ldrb	r3, [r4, #1]
    da6a:	211e      	movs	r1, #30
    da6c:	9304      	str	r3, [sp, #16]
    da6e:	78a3      	ldrb	r3, [r4, #2]
    da70:	4a0e      	ldr	r2, [pc, #56]	; (daac <bt_addr_le_str+0x64>)
    da72:	9303      	str	r3, [sp, #12]
    da74:	78e3      	ldrb	r3, [r4, #3]
    da76:	480e      	ldr	r0, [pc, #56]	; (dab0 <bt_addr_le_str+0x68>)
    da78:	9302      	str	r3, [sp, #8]
    da7a:	7923      	ldrb	r3, [r4, #4]
    da7c:	9301      	str	r3, [sp, #4]
    da7e:	7963      	ldrb	r3, [r4, #5]
    da80:	9300      	str	r3, [sp, #0]
    da82:	79a3      	ldrb	r3, [r4, #6]
    da84:	f01a fea3 	bl	287ce <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    da88:	4809      	ldr	r0, [pc, #36]	; (dab0 <bt_addr_le_str+0x68>)
    da8a:	b00b      	add	sp, #44	; 0x2c
    da8c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    da8e:	4909      	ldr	r1, [pc, #36]	; (dab4 <bt_addr_le_str+0x6c>)
    da90:	e7e6      	b.n	da60 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    da92:	4909      	ldr	r1, [pc, #36]	; (dab8 <bt_addr_le_str+0x70>)
    da94:	e7e4      	b.n	da60 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    da96:	4909      	ldr	r1, [pc, #36]	; (dabc <bt_addr_le_str+0x74>)
    da98:	e7e2      	b.n	da60 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    da9a:	210a      	movs	r1, #10
    da9c:	4628      	mov	r0, r5
    da9e:	4a08      	ldr	r2, [pc, #32]	; (dac0 <bt_addr_le_str+0x78>)
    daa0:	f01a fe95 	bl	287ce <snprintk>
		break;
    daa4:	e7df      	b.n	da66 <bt_addr_le_str+0x1e>
    daa6:	bf00      	nop
    daa8:	00031ad8 	.word	0x00031ad8
    daac:	00031afa 	.word	0x00031afa
    dab0:	2000b1e4 	.word	0x2000b1e4
    dab4:	00031adf 	.word	0x00031adf
    dab8:	00031ae6 	.word	0x00031ae6
    dabc:	00031af0 	.word	0x00031af0
    dac0:	000343de 	.word	0x000343de

0000dac4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    dac4:	b598      	push	{r3, r4, r7, lr}
	int err;
	LOG_INF("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    dac6:	490d      	ldr	r1, [pc, #52]	; (dafc <save_id+0x38>)
{
    dac8:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    daca:	79ca      	ldrb	r2, [r1, #7]
    dacc:	480c      	ldr	r0, [pc, #48]	; (db00 <save_id+0x3c>)
    dace:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    dad2:	f7fe fb03 	bl	c0dc <settings_save_one>
	if (err) {
    dad6:	b178      	cbz	r0, daf8 <save_id+0x34>
		LOG_ERR("Failed to save ID (err %d)", err);
    dad8:	466c      	mov	r4, sp
    dada:	b088      	sub	sp, #32
    dadc:	466a      	mov	r2, sp
    dade:	4b09      	ldr	r3, [pc, #36]	; (db04 <save_id+0x40>)
    dae0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    dae4:	2303      	movs	r3, #3
    dae6:	f842 3f10 	str.w	r3, [r2, #16]!
    daea:	2300      	movs	r3, #0
    daec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    daf0:	4805      	ldr	r0, [pc, #20]	; (db08 <save_id+0x44>)
    daf2:	f7fd f833 	bl	ab5c <z_impl_z_log_msg_static_create>
    daf6:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    daf8:	46bd      	mov	sp, r7
    dafa:	bd98      	pop	{r3, r4, r7, pc}
    dafc:	20008380 	.word	0x20008380
    db00:	00031b1d 	.word	0x00031b1d
    db04:	00031b23 	.word	0x00031b23
    db08:	0002fd34 	.word	0x0002fd34

0000db0c <set_setting>:
{
    db0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db0e:	4605      	mov	r5, r0
    db10:	4616      	mov	r6, r2
    db12:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db14:	4c22      	ldr	r4, [pc, #136]	; (dba0 <set_setting+0x94>)
    db16:	b089      	sub	sp, #36	; 0x24
    db18:	e8d4 3faf 	lda	r3, [r4]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    db1c:	07da      	lsls	r2, r3, #31
    db1e:	d537      	bpl.n	db90 <set_setting+0x84>
	if (!name) {
    db20:	b970      	cbnz	r0, db40 <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
    db22:	4b20      	ldr	r3, [pc, #128]	; (dba4 <set_setting+0x98>)
    db24:	9307      	str	r3, [sp, #28]
    db26:	2302      	movs	r3, #2
    db28:	9306      	str	r3, [sp, #24]
    db2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    db2e:	4603      	mov	r3, r0
    db30:	aa06      	add	r2, sp, #24
    db32:	481d      	ldr	r0, [pc, #116]	; (dba8 <set_setting+0x9c>)
    db34:	f7fd f812 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -ENOENT;
    db38:	f06f 0001 	mvn.w	r0, #1
}
    db3c:	b009      	add	sp, #36	; 0x24
    db3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
    db40:	a901      	add	r1, sp, #4
    db42:	f01b fe2f 	bl	297a4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    db46:	4919      	ldr	r1, [pc, #100]	; (dbac <set_setting+0xa0>)
	len = settings_name_next(name, &next);
    db48:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    db4a:	4628      	mov	r0, r5
    db4c:	f01c fcab 	bl	2a4a6 <strncmp>
    db50:	2800      	cmp	r0, #0
    db52:	d1f1      	bne.n	db38 <set_setting+0x2c>
    db54:	e8d4 3faf 	lda	r3, [r4]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    db58:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    db5c:	071b      	lsls	r3, r3, #28
    db5e:	d417      	bmi.n	db90 <set_setting+0x84>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    db60:	3c88      	subs	r4, #136	; 0x88
    db62:	2207      	movs	r2, #7
    db64:	4621      	mov	r1, r4
    db66:	4638      	mov	r0, r7
    db68:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    db6a:	2806      	cmp	r0, #6
    db6c:	d812      	bhi.n	db94 <set_setting+0x88>
				LOG_ERR("Invalid length ID address in storage");
    db6e:	4b10      	ldr	r3, [pc, #64]	; (dbb0 <set_setting+0xa4>)
    db70:	9307      	str	r3, [sp, #28]
    db72:	2302      	movs	r3, #2
    db74:	9306      	str	r3, [sp, #24]
    db76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    db7a:	462b      	mov	r3, r5
    db7c:	480a      	ldr	r0, [pc, #40]	; (dba8 <set_setting+0x9c>)
    db7e:	aa06      	add	r2, sp, #24
    db80:	f7fc ffec 	bl	ab5c <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
    db84:	2207      	movs	r2, #7
    db86:	4629      	mov	r1, r5
    db88:	4620      	mov	r0, r4
    db8a:	f01c fcd1 	bl	2a530 <memset>
			bt_dev.id_count = 0U;
    db8e:	71e5      	strb	r5, [r4, #7]
		return 0;
    db90:	2000      	movs	r0, #0
    db92:	e7d3      	b.n	db3c <set_setting+0x30>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    db94:	2307      	movs	r3, #7
    db96:	fbb0 f0f3 	udiv	r0, r0, r3
    db9a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    db9c:	e7f8      	b.n	db90 <set_setting+0x84>
    db9e:	bf00      	nop
    dba0:	20008408 	.word	0x20008408
    dba4:	00031b3e 	.word	0x00031b3e
    dba8:	0002fd34 	.word	0x0002fd34
    dbac:	00031aed 	.word	0x00031aed
    dbb0:	00031b5f 	.word	0x00031b5f

0000dbb4 <bt_settings_encode_key>:
{
    dbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbb8:	b088      	sub	sp, #32
    dbba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    dbbe:	799c      	ldrb	r4, [r3, #6]
    dbc0:	795d      	ldrb	r5, [r3, #5]
    dbc2:	791e      	ldrb	r6, [r3, #4]
    dbc4:	78df      	ldrb	r7, [r3, #3]
    dbc6:	f893 c002 	ldrb.w	ip, [r3, #2]
    dbca:	f893 e001 	ldrb.w	lr, [r3, #1]
    dbce:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    dbd0:	f1b8 0f00 	cmp.w	r8, #0
    dbd4:	d00e      	beq.n	dbf4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    dbd6:	e9cd 3806 	strd	r3, r8, [sp, #24]
    dbda:	e9cd ce04 	strd	ip, lr, [sp, #16]
    dbde:	4613      	mov	r3, r2
    dbe0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    dbe4:	e9cd 4500 	strd	r4, r5, [sp]
    dbe8:	4a08      	ldr	r2, [pc, #32]	; (dc0c <bt_settings_encode_key+0x58>)
    dbea:	f01a fdf0 	bl	287ce <snprintk>
}
    dbee:	b008      	add	sp, #32
    dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    dbf4:	e9cd e305 	strd	lr, r3, [sp, #20]
    dbf8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    dbfc:	4613      	mov	r3, r2
    dbfe:	e9cd 5601 	strd	r5, r6, [sp, #4]
    dc02:	4a03      	ldr	r2, [pc, #12]	; (dc10 <bt_settings_encode_key+0x5c>)
    dc04:	9400      	str	r4, [sp, #0]
    dc06:	f01a fde2 	bl	287ce <snprintk>
}
    dc0a:	e7f0      	b.n	dbee <bt_settings_encode_key+0x3a>
    dc0c:	00031b84 	.word	0x00031b84
    dc10:	00031ba8 	.word	0x00031ba8

0000dc14 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
    dc14:	4801      	ldr	r0, [pc, #4]	; (dc1c <bt_settings_save_id+0x8>)
    dc16:	f018 bb53 	b.w	262c0 <k_work_submit>
    dc1a:	bf00      	nop
    dc1c:	200086c8 	.word	0x200086c8

0000dc20 <commit_settings>:
}

static int commit_settings(void)
{
    dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc24:	4d1d      	ldr	r5, [pc, #116]	; (dc9c <commit_settings+0x7c>)
    dc26:	b086      	sub	sp, #24
    dc28:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    dc2c:	f013 0f01 	tst.w	r3, #1
    dc30:	462f      	mov	r7, r5
    dc32:	d031      	beq.n	dc98 <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    dc34:	f815 6c81 	ldrb.w	r6, [r5, #-129]
    dc38:	f1a5 0888 	sub.w	r8, r5, #136	; 0x88
    dc3c:	b9d6      	cbnz	r6, dc74 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
    dc3e:	f001 fc97 	bl	f570 <bt_setup_public_id_addr>
		if (err) {
    dc42:	4604      	mov	r4, r0
    dc44:	b170      	cbz	r0, dc64 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
    dc46:	4b16      	ldr	r3, [pc, #88]	; (dca0 <commit_settings+0x80>)
    dc48:	9305      	str	r3, [sp, #20]
    dc4a:	2302      	movs	r3, #2
    dc4c:	9304      	str	r3, [sp, #16]
    dc4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dc52:	4633      	mov	r3, r6
    dc54:	4813      	ldr	r0, [pc, #76]	; (dca4 <commit_settings+0x84>)
    dc56:	aa04      	add	r2, sp, #16
    dc58:	f7fc ff80 	bl	ab5c <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    dc5c:	4620      	mov	r0, r4
    dc5e:	b006      	add	sp, #24
    dc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
    dc64:	f898 6007 	ldrb.w	r6, [r8, #7]
    dc68:	b926      	cbnz	r6, dc74 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
    dc6a:	f001 fcc3 	bl	f5f4 <bt_setup_random_id_addr>
		if (err) {
    dc6e:	4604      	mov	r4, r0
    dc70:	2800      	cmp	r0, #0
    dc72:	d1e8      	bne.n	dc46 <commit_settings+0x26>
    dc74:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dc78:	075a      	lsls	r2, r3, #29
    dc7a:	d401      	bmi.n	dc80 <commit_settings+0x60>
		bt_finalize_init();
    dc7c:	f001 f8a4 	bl	edc8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dc80:	e8d7 3fef 	ldaex	r3, [r7]
    dc84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    dc88:	e8c7 2fe1 	stlex	r1, r2, [r7]
    dc8c:	2900      	cmp	r1, #0
    dc8e:	d1f7      	bne.n	dc80 <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    dc90:	03db      	lsls	r3, r3, #15
    dc92:	d501      	bpl.n	dc98 <commit_settings+0x78>
		bt_settings_save_id();
    dc94:	f7ff ffbe 	bl	dc14 <bt_settings_save_id>
		return 0;
    dc98:	2400      	movs	r4, #0
    dc9a:	e7df      	b.n	dc5c <commit_settings+0x3c>
    dc9c:	20008408 	.word	0x20008408
    dca0:	00031bc9 	.word	0x00031bc9
    dca4:	0002fd34 	.word	0x0002fd34

0000dca8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
    dca8:	b5b0      	push	{r4, r5, r7, lr}
    dcaa:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
    dcac:	f7fe fb98 	bl	c3e0 <settings_subsys_init>
	if (err) {
    dcb0:	4604      	mov	r4, r0
    dcb2:	b178      	cbz	r0, dcd4 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
    dcb4:	466d      	mov	r5, sp
    dcb6:	b088      	sub	sp, #32
    dcb8:	466a      	mov	r2, sp
    dcba:	4b08      	ldr	r3, [pc, #32]	; (dcdc <bt_settings_init+0x34>)
    dcbc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    dcc0:	2303      	movs	r3, #3
    dcc2:	f842 3f10 	str.w	r3, [r2, #16]!
    dcc6:	2300      	movs	r3, #0
    dcc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dccc:	4804      	ldr	r0, [pc, #16]	; (dce0 <bt_settings_init+0x38>)
    dcce:	f7fc ff45 	bl	ab5c <z_impl_z_log_msg_static_create>
    dcd2:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
    dcd4:	4620      	mov	r0, r4
    dcd6:	46bd      	mov	sp, r7
    dcd8:	bdb0      	pop	{r4, r5, r7, pc}
    dcda:	bf00      	nop
    dcdc:	00031bed 	.word	0x00031bed
    dce0:	0002fd34 	.word	0x0002fd34

0000dce4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    dce4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dce6:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    dce8:	4d09      	ldr	r5, [pc, #36]	; (dd10 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dcea:	4b0a      	ldr	r3, [pc, #40]	; (dd14 <long_wq_init+0x30>)
{
    dcec:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    dcee:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    dcf0:	9302      	str	r3, [sp, #8]
    dcf2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    dcf4:	f018 faea 	bl	262cc <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    dcf8:	ab02      	add	r3, sp, #8
    dcfa:	4628      	mov	r0, r5
    dcfc:	9300      	str	r3, [sp, #0]
    dcfe:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    dd02:	230a      	movs	r3, #10
    dd04:	4904      	ldr	r1, [pc, #16]	; (dd18 <long_wq_init+0x34>)
    dd06:	f018 faf7 	bl	262f8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    dd0a:	4620      	mov	r0, r4
    dd0c:	b005      	add	sp, #20
    dd0e:	bd30      	pop	{r4, r5, pc}
    dd10:	20009968 	.word	0x20009968
    dd14:	00031c2c 	.word	0x00031c2c
    dd18:	2000bf50 	.word	0x2000bf50

0000dd1c <bt_long_wq_schedule>:
{
    dd1c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    dd1e:	4801      	ldr	r0, [pc, #4]	; (dd24 <bt_long_wq_schedule+0x8>)
    dd20:	f018 bbe6 	b.w	264f0 <k_work_schedule_for_queue>
    dd24:	20009968 	.word	0x20009968

0000dd28 <bt_long_wq_reschedule>:
{
    dd28:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
    dd2a:	4801      	ldr	r0, [pc, #4]	; (dd30 <bt_long_wq_reschedule+0x8>)
    dd2c:	f018 bc46 	b.w	265bc <k_work_reschedule_for_queue>
    dd30:	20009968 	.word	0x20009968

0000dd34 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    dd34:	4603      	mov	r3, r0
    dd36:	b430      	push	{r4, r5}
	switch (src->type) {
    dd38:	781a      	ldrb	r2, [r3, #0]
{
    dd3a:	4608      	mov	r0, r1
	switch (src->type) {
    dd3c:	2a01      	cmp	r2, #1
    dd3e:	d013      	beq.n	dd68 <uuid_to_uuid128+0x34>
    dd40:	2a02      	cmp	r2, #2
    dd42:	d026      	beq.n	dd92 <uuid_to_uuid128+0x5e>
    dd44:	b972      	cbnz	r2, dd64 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    dd46:	4a15      	ldr	r2, [pc, #84]	; (dd9c <uuid_to_uuid128+0x68>)
    dd48:	f102 0410 	add.w	r4, r2, #16
    dd4c:	f852 5b04 	ldr.w	r5, [r2], #4
    dd50:	42a2      	cmp	r2, r4
    dd52:	f841 5b04 	str.w	r5, [r1], #4
    dd56:	d1f9      	bne.n	dd4c <uuid_to_uuid128+0x18>
    dd58:	7812      	ldrb	r2, [r2, #0]
    dd5a:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    dd5c:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    dd5e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    dd60:	0a1b      	lsrs	r3, r3, #8
    dd62:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    dd64:	bc30      	pop	{r4, r5}
    dd66:	4770      	bx	lr
		*dst = uuid128_base;
    dd68:	4a0c      	ldr	r2, [pc, #48]	; (dd9c <uuid_to_uuid128+0x68>)
    dd6a:	f102 0410 	add.w	r4, r2, #16
    dd6e:	f852 5b04 	ldr.w	r5, [r2], #4
    dd72:	42a2      	cmp	r2, r4
    dd74:	f841 5b04 	str.w	r5, [r1], #4
    dd78:	d1f9      	bne.n	dd6e <uuid_to_uuid128+0x3a>
    dd7a:	7812      	ldrb	r2, [r2, #0]
    dd7c:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    dd7e:	685b      	ldr	r3, [r3, #4]
    dd80:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    dd84:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    dd86:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dd88:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    dd8a:	0a1b      	lsrs	r3, r3, #8
    dd8c:	7382      	strb	r2, [r0, #14]
    dd8e:	7403      	strb	r3, [r0, #16]
}
    dd90:	e7e8      	b.n	dd64 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    dd92:	2211      	movs	r2, #17
}
    dd94:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    dd96:	4619      	mov	r1, r3
    dd98:	f01c bbbf 	b.w	2a51a <memcpy>
    dd9c:	00031c35 	.word	0x00031c35

0000dda0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    dda0:	b538      	push	{r3, r4, r5, lr}
    dda2:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dda4:	2d01      	cmp	r5, #1
{
    dda6:	4610      	mov	r0, r2
    dda8:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    ddaa:	d00c      	beq.n	ddc6 <bt_buf_get_rx+0x26>
    ddac:	2d03      	cmp	r5, #3
    ddae:	d016      	beq.n	ddde <bt_buf_get_rx+0x3e>
    ddb0:	2d05      	cmp	r5, #5
    ddb2:	d014      	beq.n	ddde <bt_buf_get_rx+0x3e>
    ddb4:	490c      	ldr	r1, [pc, #48]	; (dde8 <bt_buf_get_rx+0x48>)
    ddb6:	480d      	ldr	r0, [pc, #52]	; (ddec <bt_buf_get_rx+0x4c>)
    ddb8:	223d      	movs	r2, #61	; 0x3d
    ddba:	f01a ff03 	bl	28bc4 <assert_print>
    ddbe:	213d      	movs	r1, #61	; 0x3d
    ddc0:	4809      	ldr	r0, [pc, #36]	; (dde8 <bt_buf_get_rx+0x48>)
    ddc2:	f01a fef8 	bl	28bb6 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    ddc6:	480a      	ldr	r0, [pc, #40]	; (ddf0 <bt_buf_get_rx+0x50>)
    ddc8:	f020 f829 	bl	2de1e <net_buf_alloc_fixed>
    ddcc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    ddce:	b120      	cbz	r0, ddda <bt_buf_get_rx+0x3a>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    ddd0:	2101      	movs	r1, #1
    ddd2:	300c      	adds	r0, #12
    ddd4:	f012 f8aa 	bl	1ff2c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ddd8:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    ddda:	4620      	mov	r0, r4
    dddc:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    ddde:	4602      	mov	r2, r0
    dde0:	460b      	mov	r3, r1
    dde2:	4804      	ldr	r0, [pc, #16]	; (ddf4 <bt_buf_get_rx+0x54>)
    dde4:	e7f0      	b.n	ddc8 <bt_buf_get_rx+0x28>
    dde6:	bf00      	nop
    dde8:	00031c46 	.word	0x00031c46
    ddec:	00030da5 	.word	0x00030da5
    ddf0:	20008fc0 	.word	0x20008fc0
    ddf4:	20008ef0 	.word	0x20008ef0

0000ddf8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    ddf8:	b510      	push	{r4, lr}
    ddfa:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    ddfc:	490a      	ldr	r1, [pc, #40]	; (de28 <bt_buf_get_cmd_complete+0x30>)
{
    ddfe:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    de00:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
    de04:	b920      	cbnz	r0, de10 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    de06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de0a:	2001      	movs	r0, #1
    de0c:	f7ff bfc8 	b.w	dda0 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    de10:	f012 f9a6 	bl	20160 <net_buf_ref>
    de14:	2101      	movs	r1, #1
		buf->len = 0U;
    de16:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    de18:	4604      	mov	r4, r0
    de1a:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
    de1c:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
    de1e:	300c      	adds	r0, #12
    de20:	f012 f884 	bl	1ff2c <net_buf_simple_reserve>
}
    de24:	4620      	mov	r0, r4
    de26:	bd10      	pop	{r4, pc}
    de28:	20008380 	.word	0x20008380

0000de2c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    de2c:	b570      	push	{r4, r5, r6, lr}
    de2e:	4604      	mov	r4, r0
	switch (evt) {
    de30:	2c0f      	cmp	r4, #15
{
    de32:	460d      	mov	r5, r1
    de34:	4610      	mov	r0, r2
    de36:	4619      	mov	r1, r3
	switch (evt) {
    de38:	d805      	bhi.n	de46 <bt_buf_get_evt+0x1a>
    de3a:	2c0d      	cmp	r4, #13
    de3c:	d90d      	bls.n	de5a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    de3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    de42:	f7ff bfd9 	b.w	ddf8 <bt_buf_get_cmd_complete>
	switch (evt) {
    de46:	2c13      	cmp	r4, #19
    de48:	d107      	bne.n	de5a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    de4a:	480c      	ldr	r0, [pc, #48]	; (de7c <bt_buf_get_evt+0x50>)
    de4c:	f01f ffe7 	bl	2de1e <net_buf_alloc_fixed>
			if (buf) {
    de50:	4604      	mov	r4, r0
    de52:	b938      	cbnz	r0, de64 <bt_buf_get_evt+0x38>
{
    de54:	2400      	movs	r4, #0
}
    de56:	4620      	mov	r0, r4
    de58:	bd70      	pop	{r4, r5, r6, pc}
    de5a:	4602      	mov	r2, r0
    de5c:	460b      	mov	r3, r1
		if (discardable) {
    de5e:	b145      	cbz	r5, de72 <bt_buf_get_evt+0x46>
    de60:	4807      	ldr	r0, [pc, #28]	; (de80 <bt_buf_get_evt+0x54>)
    de62:	e7f3      	b.n	de4c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    de64:	2101      	movs	r1, #1
    de66:	300c      	adds	r0, #12
    de68:	f012 f860 	bl	1ff2c <net_buf_simple_reserve>
    de6c:	2301      	movs	r3, #1
    de6e:	7623      	strb	r3, [r4, #24]
}
    de70:	e7f1      	b.n	de56 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de72:	2001      	movs	r0, #1
}
    de74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    de78:	f7ff bf92 	b.w	dda0 <bt_buf_get_rx>
    de7c:	20009090 	.word	0x20009090
    de80:	20008f8c 	.word	0x20008f8c

0000de84 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    de84:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    de86:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    de88:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	b963      	cbnz	r3, deaa <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    de90:	4620      	mov	r0, r4
    de92:	f003 f97b 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    de96:	4605      	mov	r5, r0
    de98:	b940      	cbnz	r0, deac <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    de9a:	4b08      	ldr	r3, [pc, #32]	; (debc <hci_disconn_complete_prio+0x38>)
    de9c:	881a      	ldrh	r2, [r3, #0]
    de9e:	b922      	cbnz	r2, deaa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    dea0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    dea4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    dea8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    deaa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    deac:	2101      	movs	r1, #1
    deae:	f003 f975 	bl	1119c <bt_conn_set_state>
	bt_conn_unref(conn);
    deb2:	4628      	mov	r0, r5
}
    deb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    deb8:	f003 b940 	b.w	1113c <bt_conn_unref>
    debc:	2000b126 	.word	0x2000b126

0000dec0 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    dec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		LOG_ERR("Unable to allocate buffer");
    dec2:	4b06      	ldr	r3, [pc, #24]	; (dedc <le_conn_param_neg_reply.part.0+0x1c>)
    dec4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dec8:	9305      	str	r3, [sp, #20]
    deca:	2302      	movs	r3, #2
    decc:	4804      	ldr	r0, [pc, #16]	; (dee0 <le_conn_param_neg_reply.part.0+0x20>)
    dece:	aa04      	add	r2, sp, #16
    ded0:	9304      	str	r3, [sp, #16]
    ded2:	f01c fd80 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    ded6:	b007      	add	sp, #28
    ded8:	f85d fb04 	ldr.w	pc, [sp], #4
    dedc:	00031c75 	.word	0x00031c75
    dee0:	0002fc34 	.word	0x0002fc34

0000dee4 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    dee4:	b598      	push	{r3, r4, r7, lr}
    dee6:	4601      	mov	r1, r0
    dee8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    deea:	480d      	ldr	r0, [pc, #52]	; (df20 <rx_queue_put+0x3c>)
    deec:	f012 f83e 	bl	1ff6c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    def0:	490c      	ldr	r1, [pc, #48]	; (df24 <rx_queue_put+0x40>)
    def2:	480d      	ldr	r0, [pc, #52]	; (df28 <rx_queue_put+0x44>)
    def4:	f021 faf1 	bl	2f4da <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    def8:	2800      	cmp	r0, #0
    defa:	da0e      	bge.n	df1a <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
    defc:	466c      	mov	r4, sp
    defe:	b088      	sub	sp, #32
    df00:	466a      	mov	r2, sp
    df02:	4b0a      	ldr	r3, [pc, #40]	; (df2c <rx_queue_put+0x48>)
    df04:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df08:	e9c2 3005 	strd	r3, r0, [r2, #20]
    df0c:	2303      	movs	r3, #3
    df0e:	4808      	ldr	r0, [pc, #32]	; (df30 <rx_queue_put+0x4c>)
    df10:	f842 3f10 	str.w	r3, [r2, #16]!
    df14:	f01c fd5f 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    df18:	46a5      	mov	sp, r4
	}
}
    df1a:	46bd      	mov	sp, r7
    df1c:	bd98      	pop	{r3, r4, r7, pc}
    df1e:	bf00      	nop
    df20:	20008474 	.word	0x20008474
    df24:	20008714 	.word	0x20008714
    df28:	20009a98 	.word	0x20009a98
    df2c:	00031c8f 	.word	0x00031c8f
    df30:	0002fc34 	.word	0x0002fc34

0000df34 <hci_hardware_error>:
{
    df34:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    df36:	2101      	movs	r1, #1
    df38:	af00      	add	r7, sp, #0
    df3a:	300c      	adds	r0, #12
    df3c:	f012 f9ee 	bl	2031c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    df40:	b088      	sub	sp, #32
    df42:	466a      	mov	r2, sp
    df44:	7803      	ldrb	r3, [r0, #0]
    df46:	4906      	ldr	r1, [pc, #24]	; (df60 <hci_hardware_error+0x2c>)
    df48:	4806      	ldr	r0, [pc, #24]	; (df64 <hci_hardware_error+0x30>)
    df4a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    df4e:	2303      	movs	r3, #3
    df50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df54:	f842 3f10 	str.w	r3, [r2, #16]!
    df58:	f01c fd3d 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
}
    df5c:	46bd      	mov	sp, r7
    df5e:	bd80      	pop	{r7, pc}
    df60:	00031cac 	.word	0x00031cac
    df64:	0002fc34 	.word	0x0002fc34

0000df68 <hci_disconn_complete>:
{
    df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    df6c:	68c5      	ldr	r5, [r0, #12]
{
    df6e:	af00      	add	r7, sp, #0
	if (evt->status) {
    df70:	782e      	ldrb	r6, [r5, #0]
    df72:	b9ae      	cbnz	r6, dfa0 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    df74:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    df78:	4640      	mov	r0, r8
    df7a:	f003 f907 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    df7e:	4604      	mov	r4, r0
    df80:	b988      	cbnz	r0, dfa6 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    df82:	466c      	mov	r4, sp
    df84:	b088      	sub	sp, #32
    df86:	466a      	mov	r2, sp
    df88:	4b0b      	ldr	r3, [pc, #44]	; (dfb8 <hci_disconn_complete+0x50>)
    df8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df8e:	e9c2 3805 	strd	r3, r8, [r2, #20]
    df92:	2303      	movs	r3, #3
    df94:	4809      	ldr	r0, [pc, #36]	; (dfbc <hci_disconn_complete+0x54>)
    df96:	f842 3f10 	str.w	r3, [r2, #16]!
    df9a:	f01c fd1c 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    df9e:	46a5      	mov	sp, r4
}
    dfa0:	46bd      	mov	sp, r7
    dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    dfa6:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    dfa8:	4631      	mov	r1, r6
	conn->err = evt->reason;
    dfaa:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    dfac:	f003 f8f6 	bl	1119c <bt_conn_set_state>
		bt_conn_unref(conn);
    dfb0:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    dfb2:	f003 f8c3 	bl	1113c <bt_conn_unref>
    dfb6:	e7f3      	b.n	dfa0 <hci_disconn_complete+0x38>
    dfb8:	00031cce 	.word	0x00031cce
    dfbc:	0002fc34 	.word	0x0002fc34

0000dfc0 <le_remote_feat_complete>:
{
    dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    dfc2:	68c5      	ldr	r5, [r0, #12]
{
    dfc4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dfc6:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    dfca:	4630      	mov	r0, r6
    dfcc:	f003 f8de 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    dfd0:	4604      	mov	r4, r0
    dfd2:	b980      	cbnz	r0, dff6 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    dfd4:	466c      	mov	r4, sp
    dfd6:	b088      	sub	sp, #32
    dfd8:	466a      	mov	r2, sp
    dfda:	4b0f      	ldr	r3, [pc, #60]	; (e018 <le_remote_feat_complete+0x58>)
    dfdc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dfe0:	e9c2 3605 	strd	r3, r6, [r2, #20]
    dfe4:	2303      	movs	r3, #3
    dfe6:	480d      	ldr	r0, [pc, #52]	; (e01c <le_remote_feat_complete+0x5c>)
    dfe8:	f842 3f10 	str.w	r3, [r2, #16]!
    dfec:	f01c fcf3 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    dff0:	46a5      	mov	sp, r4
}
    dff2:	46bd      	mov	sp, r7
    dff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    dff6:	782b      	ldrb	r3, [r5, #0]
    dff8:	b923      	cbnz	r3, e004 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    dffa:	2208      	movs	r2, #8
    dffc:	1ce9      	adds	r1, r5, #3
    dffe:	30b5      	adds	r0, #181	; 0xb5
    e000:	f01c fa8b 	bl	2a51a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    e008:	1d20      	adds	r0, r4, #4
    e00a:	f01c fcd9 	bl	2a9c0 <atomic_or>
	bt_conn_unref(conn);
    e00e:	4620      	mov	r0, r4
    e010:	f003 f894 	bl	1113c <bt_conn_unref>
    e014:	e7ed      	b.n	dff2 <le_remote_feat_complete+0x32>
    e016:	bf00      	nop
    e018:	00031cf4 	.word	0x00031cf4
    e01c:	0002fc34 	.word	0x0002fc34

0000e020 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
    e020:	b5b0      	push	{r4, r5, r7, lr}
    e022:	4604      	mov	r4, r0
    e024:	4608      	mov	r0, r1
    e026:	af00      	add	r7, sp, #0
    e028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    e02c:	429a      	cmp	r2, r3
    e02e:	d018      	beq.n	e062 <handle_event_common.isra.0+0x42>
		if (handler->event != event) {
    e030:	4611      	mov	r1, r2
    e032:	f811 5b08 	ldrb.w	r5, [r1], #8
    e036:	42a5      	cmp	r5, r4
    e038:	d118      	bne.n	e06c <handle_event_common.isra.0+0x4c>
		if (buf->len < handler->min_len) {
    e03a:	8a03      	ldrh	r3, [r0, #16]
    e03c:	7851      	ldrb	r1, [r2, #1]
    e03e:	4299      	cmp	r1, r3
    e040:	d911      	bls.n	e066 <handle_event_common.isra.0+0x46>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    e042:	466d      	mov	r5, sp
    e044:	b088      	sub	sp, #32
    e046:	466a      	mov	r2, sp
    e048:	4909      	ldr	r1, [pc, #36]	; (e070 <handle_event_common.isra.0+0x50>)
    e04a:	61d4      	str	r4, [r2, #28]
    e04c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    e050:	2304      	movs	r3, #4
    e052:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e056:	4807      	ldr	r0, [pc, #28]	; (e074 <handle_event_common.isra.0+0x54>)
    e058:	f842 3f10 	str.w	r3, [r2, #16]!
    e05c:	f01c fcbb 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e060:	46ad      	mov	sp, r5
}
    e062:	46bd      	mov	sp, r7
    e064:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    e066:	6853      	ldr	r3, [r2, #4]
    e068:	4798      	blx	r3
		return 0;
    e06a:	e7fa      	b.n	e062 <handle_event_common.isra.0+0x42>
    e06c:	460a      	mov	r2, r1
    e06e:	e7dd      	b.n	e02c <handle_event_common.isra.0+0xc>
    e070:	00031d18 	.word	0x00031d18
    e074:	0002fc34 	.word	0x0002fc34

0000e078 <hci_le_meta_event>:
{
    e078:	b510      	push	{r4, lr}
    e07a:	2101      	movs	r1, #1
    e07c:	4604      	mov	r4, r0
    e07e:	300c      	adds	r0, #12
    e080:	f012 f94c 	bl	2031c <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    e084:	4621      	mov	r1, r4
}
    e086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    e08a:	230c      	movs	r3, #12
    e08c:	4a01      	ldr	r2, [pc, #4]	; (e094 <hci_le_meta_event+0x1c>)
    e08e:	7800      	ldrb	r0, [r0, #0]
    e090:	f7ff bfc6 	b.w	e020 <handle_event_common.isra.0>
    e094:	00030310 	.word	0x00030310

0000e098 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e09a:	4854      	ldr	r0, [pc, #336]	; (e1ec <rx_work_handler+0x154>)
{
    e09c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    e09e:	f011 ffb7 	bl	20010 <net_buf_slist_get>
	if (!buf) {
    e0a2:	4604      	mov	r4, r0
    e0a4:	2800      	cmp	r0, #0
    e0a6:	d069      	beq.n	e17c <rx_work_handler+0xe4>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e0a8:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    e0aa:	2b01      	cmp	r3, #1
    e0ac:	d068      	beq.n	e180 <rx_work_handler+0xe8>
    e0ae:	2b03      	cmp	r3, #3
    e0b0:	f040 8096 	bne.w	e1e0 <rx_work_handler+0x148>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e0b4:	8a03      	ldrh	r3, [r0, #16]
    e0b6:	2b03      	cmp	r3, #3
    e0b8:	d80b      	bhi.n	e0d2 <rx_work_handler+0x3a>
    e0ba:	f240 12ed 	movw	r2, #493	; 0x1ed
    e0be:	494c      	ldr	r1, [pc, #304]	; (e1f0 <rx_work_handler+0x158>)
    e0c0:	484c      	ldr	r0, [pc, #304]	; (e1f4 <rx_work_handler+0x15c>)
    e0c2:	f01a fd7f 	bl	28bc4 <assert_print>
    e0c6:	4040      	eors	r0, r0
    e0c8:	f380 8811 	msr	BASEPRI, r0
    e0cc:	f04f 0003 	mov.w	r0, #3
    e0d0:	df02      	svc	2
    e0d2:	2104      	movs	r1, #4
    e0d4:	f104 000c 	add.w	r0, r4, #12
    e0d8:	f012 f920 	bl	2031c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e0dc:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    e0de:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    e0e0:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    e0e2:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    e0e4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    e0e8:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    e0ea:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    e0ec:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    e0ee:	d010      	beq.n	e112 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    e0f0:	466d      	mov	r5, sp
    e0f2:	b088      	sub	sp, #32
    e0f4:	466a      	mov	r2, sp
    e0f6:	4840      	ldr	r0, [pc, #256]	; (e1f8 <rx_work_handler+0x160>)
    e0f8:	61d3      	str	r3, [r2, #28]
    e0fa:	2304      	movs	r3, #4
    e0fc:	e9c2 0105 	strd	r0, r1, [r2, #20]
    e100:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e104:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e108:	483c      	ldr	r0, [pc, #240]	; (e1fc <rx_work_handler+0x164>)
    e10a:	f01c fc64 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e10e:	46ad      	mov	sp, r5
    e110:	e062      	b.n	e1d8 <rx_work_handler+0x140>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    e112:	f003 f83b 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    e116:	4605      	mov	r5, r0
    e118:	b960      	cbnz	r0, e134 <rx_work_handler+0x9c>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    e11a:	466d      	mov	r5, sp
    e11c:	b088      	sub	sp, #32
    e11e:	8b63      	ldrh	r3, [r4, #26]
    e120:	466a      	mov	r2, sp
    e122:	4937      	ldr	r1, [pc, #220]	; (e200 <rx_work_handler+0x168>)
	switch (bt_buf_get_type(buf)) {
    e124:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e128:	2303      	movs	r3, #3
    e12a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e12e:	f842 3f10 	str.w	r3, [r2, #16]!
    e132:	e7e9      	b.n	e108 <rx_work_handler+0x70>
	acl(buf)->index = bt_conn_index(conn);
    e134:	f003 f8e4 	bl	11300 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    e138:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    e13a:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    e13c:	0b32      	lsrs	r2, r6, #12
    e13e:	4628      	mov	r0, r5
    e140:	f002 fea2 	bl	10e88 <bt_conn_recv>
	bt_conn_unref(conn);
    e144:	4628      	mov	r0, r5
    e146:	f002 fff9 	bl	1113c <bt_conn_unref>
	return list->head;
    e14a:	4b2e      	ldr	r3, [pc, #184]	; (e204 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    e14c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
    e150:	b1a3      	cbz	r3, e17c <rx_work_handler+0xe4>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    e152:	492d      	ldr	r1, [pc, #180]	; (e208 <rx_work_handler+0x170>)
    e154:	482d      	ldr	r0, [pc, #180]	; (e20c <rx_work_handler+0x174>)
    e156:	f021 f9c0 	bl	2f4da <k_work_submit_to_queue>
#endif
		if (err < 0) {
    e15a:	2800      	cmp	r0, #0
    e15c:	da0e      	bge.n	e17c <rx_work_handler+0xe4>
			LOG_ERR("Could not submit rx_work: %d", err);
    e15e:	466c      	mov	r4, sp
    e160:	b088      	sub	sp, #32
    e162:	466a      	mov	r2, sp
    e164:	4b2a      	ldr	r3, [pc, #168]	; (e210 <rx_work_handler+0x178>)
    e166:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e16a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e16e:	2303      	movs	r3, #3
    e170:	4822      	ldr	r0, [pc, #136]	; (e1fc <rx_work_handler+0x164>)
    e172:	f842 3f10 	str.w	r3, [r2, #16]!
    e176:	f01c fc2e 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e17a:	46a5      	mov	sp, r4
		}
	}
}
    e17c:	46bd      	mov	sp, r7
    e17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e180:	8a03      	ldrh	r3, [r0, #16]
    e182:	2b01      	cmp	r3, #1
    e184:	d80b      	bhi.n	e19e <rx_work_handler+0x106>
    e186:	f640 126d 	movw	r2, #2413	; 0x96d
    e18a:	4919      	ldr	r1, [pc, #100]	; (e1f0 <rx_work_handler+0x158>)
    e18c:	4819      	ldr	r0, [pc, #100]	; (e1f4 <rx_work_handler+0x15c>)
    e18e:	f01a fd19 	bl	28bc4 <assert_print>
    e192:	4040      	eors	r0, r0
    e194:	f380 8811 	msr	BASEPRI, r0
    e198:	f04f 0003 	mov.w	r0, #3
    e19c:	df02      	svc	2
    e19e:	2102      	movs	r1, #2
    e1a0:	f104 000c 	add.w	r0, r4, #12
    e1a4:	f012 f8ba 	bl	2031c <net_buf_simple_pull_mem>
    e1a8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e1aa:	7800      	ldrb	r0, [r0, #0]
    e1ac:	f01c fbf5 	bl	2a99a <bt_hci_evt_get_flags>
    e1b0:	0783      	lsls	r3, r0, #30
    e1b2:	d40b      	bmi.n	e1cc <rx_work_handler+0x134>
    e1b4:	f640 1271 	movw	r2, #2417	; 0x971
    e1b8:	490d      	ldr	r1, [pc, #52]	; (e1f0 <rx_work_handler+0x158>)
    e1ba:	480e      	ldr	r0, [pc, #56]	; (e1f4 <rx_work_handler+0x15c>)
    e1bc:	f01a fd02 	bl	28bc4 <assert_print>
    e1c0:	4040      	eors	r0, r0
    e1c2:	f380 8811 	msr	BASEPRI, r0
    e1c6:	f04f 0003 	mov.w	r0, #3
    e1ca:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    e1cc:	2304      	movs	r3, #4
    e1ce:	4621      	mov	r1, r4
    e1d0:	4a10      	ldr	r2, [pc, #64]	; (e214 <rx_work_handler+0x17c>)
    e1d2:	7828      	ldrb	r0, [r5, #0]
    e1d4:	f7ff ff24 	bl	e020 <handle_event_common.isra.0>
		net_buf_unref(buf);
    e1d8:	4620      	mov	r0, r4
    e1da:	f011 ff7f 	bl	200dc <net_buf_unref>
		break;
    e1de:	e7b4      	b.n	e14a <rx_work_handler+0xb2>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e1e0:	466d      	mov	r5, sp
    e1e2:	b088      	sub	sp, #32
    e1e4:	466a      	mov	r2, sp
    e1e6:	490c      	ldr	r1, [pc, #48]	; (e218 <rx_work_handler+0x180>)
    e1e8:	e79c      	b.n	e124 <rx_work_handler+0x8c>
    e1ea:	bf00      	nop
    e1ec:	20008474 	.word	0x20008474
    e1f0:	00031d3a 	.word	0x00031d3a
    e1f4:	00030da5 	.word	0x00030da5
    e1f8:	00031d6e 	.word	0x00031d6e
    e1fc:	0002fc34 	.word	0x0002fc34
    e200:	00031d92 	.word	0x00031d92
    e204:	20008380 	.word	0x20008380
    e208:	20008714 	.word	0x20008714
    e20c:	20009a98 	.word	0x20009a98
    e210:	00031c8f 	.word	0x00031c8f
    e214:	000302f0 	.word	0x000302f0
    e218:	00031db4 	.word	0x00031db4

0000e21c <le_conn_update_complete>:
{
    e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e21e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e220:	68c5      	ldr	r5, [r0, #12]
{
    e222:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    e224:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e228:	4630      	mov	r0, r6
    e22a:	f002 ffaf 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    e22e:	4604      	mov	r4, r0
    e230:	b988      	cbnz	r0, e256 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    e232:	466c      	mov	r4, sp
    e234:	b088      	sub	sp, #32
    e236:	466a      	mov	r2, sp
    e238:	4b2b      	ldr	r3, [pc, #172]	; (e2e8 <le_conn_update_complete+0xcc>)
    e23a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e23e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    e242:	2303      	movs	r3, #3
    e244:	4829      	ldr	r0, [pc, #164]	; (e2ec <le_conn_update_complete+0xd0>)
    e246:	f842 3f10 	str.w	r3, [r2, #16]!
    e24a:	f01c fbc4 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e24e:	46a5      	mov	sp, r4
}
    e250:	370c      	adds	r7, #12
    e252:	46bd      	mov	sp, r7
    e254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e256:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
    e258:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e25a:	2b1a      	cmp	r3, #26
    e25c:	d117      	bne.n	e28e <le_conn_update_complete+0x72>
    e25e:	78c3      	ldrb	r3, [r0, #3]
    e260:	2b01      	cmp	r3, #1
    e262:	d128      	bne.n	e2b6 <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e264:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e268:	4630      	mov	r0, r6
    e26a:	f01c fba9 	bl	2a9c0 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    e26e:	0542      	lsls	r2, r0, #21
    e270:	d40d      	bmi.n	e28e <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
    e272:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    e276:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    e278:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    e27a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
    e27e:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    e280:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    e282:	f003 fc97 	bl	11bb4 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    e286:	4620      	mov	r0, r4
    e288:	f002 ff58 	bl	1113c <bt_conn_unref>
    e28c:	e7e0      	b.n	e250 <le_conn_update_complete+0x34>
		if (!evt->status) {
    e28e:	782b      	ldrb	r3, [r5, #0]
    e290:	b98b      	cbnz	r3, e2b6 <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    e292:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    e296:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    e29a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    e29e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e2a2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    e2a6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e2aa:	f46f 7180 	mvn.w	r1, #256	; 0x100
    e2ae:	4630      	mov	r0, r6
    e2b0:	f01c fb94 	bl	2a9dc <atomic_and.isra.0>
}
    e2b4:	e014      	b.n	e2e0 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2b6:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
    e2ba:	05db      	lsls	r3, r3, #23
    e2bc:	d5f5      	bpl.n	e2aa <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    e2be:	782b      	ldrb	r3, [r5, #0]
    e2c0:	2b20      	cmp	r3, #32
    e2c2:	d1f2      	bne.n	e2aa <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
    e2c4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    e2c8:	2b00      	cmp	r3, #0
    e2ca:	d0ee      	beq.n	e2aa <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
    e2cc:	3b01      	subs	r3, #1
    e2ce:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
    e2d2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    e2d6:	2300      	movs	r3, #0
    e2d8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    e2dc:	f018 f968 	bl	265b0 <k_work_schedule>
		notify_le_param_updated(conn);
    e2e0:	4620      	mov	r0, r4
    e2e2:	f003 f855 	bl	11390 <notify_le_param_updated>
    e2e6:	e7ce      	b.n	e286 <le_conn_update_complete+0x6a>
    e2e8:	00031cf4 	.word	0x00031cf4
    e2ec:	0002fc34 	.word	0x0002fc34

0000e2f0 <hci_cmd_done>:
{
    e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2f2:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e2f4:	7a90      	ldrb	r0, [r2, #10]
{
    e2f6:	460e      	mov	r6, r1
    e2f8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e2fa:	f011 fd0d 	bl	1fd18 <net_buf_pool_get>
    e2fe:	4b28      	ldr	r3, [pc, #160]	; (e3a0 <hci_cmd_done+0xb0>)
    e300:	4283      	cmp	r3, r0
    e302:	d14b      	bne.n	e39c <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    e304:	4620      	mov	r0, r4
    e306:	f011 fd0f 	bl	1fd28 <net_buf_id>
    e30a:	230c      	movs	r3, #12
    e30c:	4d25      	ldr	r5, [pc, #148]	; (e3a4 <hci_cmd_done+0xb4>)
    e30e:	fb03 5000 	mla	r0, r3, r0, r5
    e312:	8843      	ldrh	r3, [r0, #2]
    e314:	42bb      	cmp	r3, r7
    e316:	d141      	bne.n	e39c <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    e318:	4f23      	ldr	r7, [pc, #140]	; (e3a8 <hci_cmd_done+0xb8>)
    e31a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
    e31e:	b120      	cbz	r0, e32a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    e320:	f011 fedc 	bl	200dc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e324:	2300      	movs	r3, #0
    e326:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (cmd(buf)->state && !status) {
    e32a:	4620      	mov	r0, r4
    e32c:	f011 fcfc 	bl	1fd28 <net_buf_id>
    e330:	270c      	movs	r7, #12
    e332:	fb07 5000 	mla	r0, r7, r0, r5
    e336:	6843      	ldr	r3, [r0, #4]
    e338:	b19b      	cbz	r3, e362 <hci_cmd_done+0x72>
    e33a:	b996      	cbnz	r6, e362 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e33c:	4620      	mov	r0, r4
    e33e:	f011 fcf3 	bl	1fd28 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    e342:	2101      	movs	r1, #1
    e344:	fb07 5000 	mla	r0, r7, r0, r5
    e348:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e34a:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    e34e:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    e350:	f003 071f 	and.w	r7, r3, #31
    e354:	40b9      	lsls	r1, r7
	if (val) {
    e356:	095b      	lsrs	r3, r3, #5
    e358:	b1d2      	cbz	r2, e390 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e35a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e35e:	f01c fb2f 	bl	2a9c0 <atomic_or>
	if (cmd(buf)->sync) {
    e362:	4620      	mov	r0, r4
    e364:	f011 fce0 	bl	1fd28 <net_buf_id>
    e368:	270c      	movs	r7, #12
    e36a:	fb07 5000 	mla	r0, r7, r0, r5
    e36e:	6883      	ldr	r3, [r0, #8]
    e370:	b1a3      	cbz	r3, e39c <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    e372:	4620      	mov	r0, r4
    e374:	f011 fcd8 	bl	1fd28 <net_buf_id>
    e378:	4378      	muls	r0, r7
    e37a:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e37c:	4620      	mov	r0, r4
    e37e:	f011 fcd3 	bl	1fd28 <net_buf_id>
    e382:	fb07 5500 	mla	r5, r7, r0, r5
    e386:	68a8      	ldr	r0, [r5, #8]
}
    e388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    e38c:	f017 bca4 	b.w	25cd8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e390:	43c9      	mvns	r1, r1
    e392:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e396:	f01c fb21 	bl	2a9dc <atomic_and.isra.0>
    e39a:	e7e2      	b.n	e362 <hci_cmd_done+0x72>
    e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e39e:	bf00      	nop
    e3a0:	2000905c 	.word	0x2000905c
    e3a4:	2000a69c 	.word	0x2000a69c
    e3a8:	20008380 	.word	0x20008380

0000e3ac <hci_cmd_status>:
{
    e3ac:	b538      	push	{r3, r4, r5, lr}
    e3ae:	2104      	movs	r1, #4
    e3b0:	4604      	mov	r4, r0
    e3b2:	300c      	adds	r0, #12
    e3b4:	f011 ffb2 	bl	2031c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e3b8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e3ba:	7801      	ldrb	r1, [r0, #0]
    e3bc:	4622      	mov	r2, r4
    e3be:	8840      	ldrh	r0, [r0, #2]
    e3c0:	f7ff ff96 	bl	e2f0 <hci_cmd_done>
	if (ncmd) {
    e3c4:	b125      	cbz	r5, e3d0 <hci_cmd_status+0x24>
}
    e3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e3ca:	4802      	ldr	r0, [pc, #8]	; (e3d4 <hci_cmd_status+0x28>)
    e3cc:	f017 bc84 	b.w	25cd8 <z_impl_k_sem_give>
    e3d0:	bd38      	pop	{r3, r4, r5, pc}
    e3d2:	bf00      	nop
    e3d4:	20008458 	.word	0x20008458

0000e3d8 <hci_cmd_complete>:
{
    e3d8:	b538      	push	{r3, r4, r5, lr}
    e3da:	2103      	movs	r1, #3
    e3dc:	4604      	mov	r4, r0
    e3de:	300c      	adds	r0, #12
    e3e0:	f011 ff9c 	bl	2031c <net_buf_simple_pull_mem>
	status = buf->data[0];
    e3e4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    e3e6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e3e8:	4622      	mov	r2, r4
    e3ea:	7819      	ldrb	r1, [r3, #0]
    e3ec:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e3f0:	f7ff ff7e 	bl	e2f0 <hci_cmd_done>
	if (ncmd) {
    e3f4:	b125      	cbz	r5, e400 <hci_cmd_complete+0x28>
}
    e3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e3fa:	4802      	ldr	r0, [pc, #8]	; (e404 <hci_cmd_complete+0x2c>)
    e3fc:	f017 bc6c 	b.w	25cd8 <z_impl_k_sem_give>
    e400:	bd38      	pop	{r3, r4, r5, pc}
    e402:	bf00      	nop
    e404:	20008458 	.word	0x20008458

0000e408 <hci_num_completed_packets>:
{
    e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e40c:	2500      	movs	r5, #0
{
    e40e:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
    e410:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e412:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
    e416:	f8df a0fc 	ldr.w	sl, [pc, #252]	; e514 <hci_num_completed_packets+0x10c>
{
    e41a:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
    e41c:	f898 3000 	ldrb.w	r3, [r8]
    e420:	429d      	cmp	r5, r3
    e422:	db03      	blt.n	e42c <hci_num_completed_packets+0x24>
}
    e424:	371c      	adds	r7, #28
    e426:	46bd      	mov	sp, r7
    e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e42c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    e430:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e434:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e438:	4658      	mov	r0, fp
    e43a:	f002 fea7 	bl	1118c <bt_conn_lookup_handle>
		if (!conn) {
    e43e:	4604      	mov	r4, r0
    e440:	b1d8      	cbz	r0, e47a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    e442:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    e446:	2e00      	cmp	r6, #0
    e448:	d039      	beq.n	e4be <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    e44a:	f04f 0320 	mov.w	r3, #32
    e44e:	f3ef 8211 	mrs	r2, BASEPRI
    e452:	f383 8812 	msr	BASEPRI_MAX, r3
    e456:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e45a:	69e3      	ldr	r3, [r4, #28]
    e45c:	b1f3      	cbz	r3, e49c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
    e45e:	3b01      	subs	r3, #1
    e460:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e462:	f382 8811 	msr	BASEPRI, r2
    e466:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e46a:	4620      	mov	r0, r4
    e46c:	f002 fc9a 	bl	10da4 <bt_conn_get_pkts>
    e470:	3e01      	subs	r6, #1
    e472:	f017 fc31 	bl	25cd8 <z_impl_k_sem_give>
    e476:	b2b6      	uxth	r6, r6
    e478:	e7e5      	b.n	e446 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
    e47a:	466c      	mov	r4, sp
    e47c:	b088      	sub	sp, #32
    e47e:	466a      	mov	r2, sp
    e480:	4b25      	ldr	r3, [pc, #148]	; (e518 <hci_num_completed_packets+0x110>)
    e482:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e486:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    e48a:	2303      	movs	r3, #3
    e48c:	4823      	ldr	r0, [pc, #140]	; (e51c <hci_num_completed_packets+0x114>)
    e48e:	f842 3f10 	str.w	r3, [r2, #16]!
    e492:	f01c faa0 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e496:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    e498:	3501      	adds	r5, #1
    e49a:	e7bf      	b.n	e41c <hci_num_completed_packets+0x14>
    e49c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e49e:	b993      	cbnz	r3, e4c6 <hci_num_completed_packets+0xbe>
    e4a0:	f382 8811 	msr	BASEPRI, r2
    e4a4:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    e4a8:	2302      	movs	r3, #2
    e4aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e4ae:	481b      	ldr	r0, [pc, #108]	; (e51c <hci_num_completed_packets+0x114>)
    e4b0:	f8c7 a014 	str.w	sl, [r7, #20]
    e4b4:	613b      	str	r3, [r7, #16]
    e4b6:	f107 0210 	add.w	r2, r7, #16
    e4ba:	f01c fa8c 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    e4be:	4620      	mov	r0, r4
    e4c0:	f002 fe3c 	bl	1113c <bt_conn_unref>
    e4c4:	e7e8      	b.n	e498 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4c6:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e4c8:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4ca:	428b      	cmp	r3, r1
	list->head = node;
    e4cc:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e4ce:	bf08      	it	eq
    e4d0:	61a0      	streq	r0, [r4, #24]
    e4d2:	f382 8811 	msr	BASEPRI, r2
    e4d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e4da:	f04f 0220 	mov.w	r2, #32
    e4de:	f3ef 8111 	mrs	r1, BASEPRI
    e4e2:	f382 8812 	msr	BASEPRI_MAX, r2
    e4e6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e4ea:	68da      	ldr	r2, [r3, #12]
    e4ec:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    e4ee:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    e4f2:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    e4f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    e4f8:	b94a      	cbnz	r2, e50e <hci_num_completed_packets+0x106>
	list->head = node;
    e4fa:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e4fe:	f381 8811 	msr	BASEPRI, r1
    e502:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    e506:	4658      	mov	r0, fp
    e508:	f017 feda 	bl	262c0 <k_work_submit>
    e50c:	e7ad      	b.n	e46a <hci_num_completed_packets+0x62>
	parent->next = child;
    e50e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e510:	6263      	str	r3, [r4, #36]	; 0x24
}
    e512:	e7f4      	b.n	e4fe <hci_num_completed_packets+0xf6>
    e514:	00031de4 	.word	0x00031de4
    e518:	00031dc8 	.word	0x00031dc8
    e51c:	0002fc34 	.word	0x0002fc34

0000e520 <bt_hci_cmd_state_set_init>:
{
    e520:	b510      	push	{r4, lr}
	state->bit = bit;
    e522:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    e526:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    e52a:	460c      	mov	r4, r1
	state->val = val;
    e52c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    e52e:	f011 fbfb 	bl	1fd28 <net_buf_id>
    e532:	220c      	movs	r2, #12
    e534:	4b02      	ldr	r3, [pc, #8]	; (e540 <bt_hci_cmd_state_set_init+0x20>)
    e536:	fb02 3300 	mla	r3, r2, r0, r3
    e53a:	605c      	str	r4, [r3, #4]
}
    e53c:	bd10      	pop	{r4, pc}
    e53e:	bf00      	nop
    e540:	2000a69c 	.word	0x2000a69c

0000e544 <bt_hci_cmd_create>:
{
    e544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e548:	f04f 32ff 	mov.w	r2, #4294967295
    e54c:	4606      	mov	r6, r0
    e54e:	f04f 33ff 	mov.w	r3, #4294967295
    e552:	481d      	ldr	r0, [pc, #116]	; (e5c8 <bt_hci_cmd_create+0x84>)
    e554:	460f      	mov	r7, r1
    e556:	f01f fc62 	bl	2de1e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e55a:	4604      	mov	r4, r0
    e55c:	b950      	cbnz	r0, e574 <bt_hci_cmd_create+0x30>
    e55e:	491b      	ldr	r1, [pc, #108]	; (e5cc <bt_hci_cmd_create+0x88>)
    e560:	481b      	ldr	r0, [pc, #108]	; (e5d0 <bt_hci_cmd_create+0x8c>)
    e562:	f240 1201 	movw	r2, #257	; 0x101
    e566:	f01a fb2d 	bl	28bc4 <assert_print>
    e56a:	f240 1101 	movw	r1, #257	; 0x101
    e56e:	4817      	ldr	r0, [pc, #92]	; (e5cc <bt_hci_cmd_create+0x88>)
    e570:	f01a fb21 	bl	28bb6 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e574:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e578:	f100 0a0c 	add.w	sl, r0, #12
    e57c:	2101      	movs	r1, #1
    e57e:	4650      	mov	r0, sl
    e580:	f011 fcd4 	bl	1ff2c <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e584:	4620      	mov	r0, r4
    e586:	f884 8018 	strb.w	r8, [r4, #24]
    e58a:	f011 fbcd 	bl	1fd28 <net_buf_id>
    e58e:	f04f 090c 	mov.w	r9, #12
    e592:	4d10      	ldr	r5, [pc, #64]	; (e5d4 <bt_hci_cmd_create+0x90>)
    e594:	fb09 5000 	mla	r0, r9, r0, r5
    e598:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e59a:	4620      	mov	r0, r4
    e59c:	f011 fbc4 	bl	1fd28 <net_buf_id>
    e5a0:	fb09 5000 	mla	r0, r9, r0, r5
    e5a4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e5a8:	4620      	mov	r0, r4
    e5aa:	f011 fbbd 	bl	1fd28 <net_buf_id>
    e5ae:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e5b2:	2103      	movs	r1, #3
    e5b4:	4650      	mov	r0, sl
    e5b6:	f8c5 8004 	str.w	r8, [r5, #4]
    e5ba:	f011 fec9 	bl	20350 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    e5be:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    e5c0:	7087      	strb	r7, [r0, #2]
}
    e5c2:	4620      	mov	r0, r4
    e5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5c8:	2000905c 	.word	0x2000905c
    e5cc:	00031d3a 	.word	0x00031d3a
    e5d0:	00030da5 	.word	0x00030da5
    e5d4:	2000a69c 	.word	0x2000a69c

0000e5d8 <bt_hci_cmd_send_sync>:
{
    e5d8:	b570      	push	{r4, r5, r6, lr}
    e5da:	4615      	mov	r5, r2
	if (!buf) {
    e5dc:	460c      	mov	r4, r1
{
    e5de:	b086      	sub	sp, #24
	if (!buf) {
    e5e0:	b921      	cbnz	r1, e5ec <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    e5e2:	f7ff ffaf 	bl	e544 <bt_hci_cmd_create>
		if (!buf) {
    e5e6:	4604      	mov	r4, r0
    e5e8:	2800      	cmp	r0, #0
    e5ea:	d041      	beq.n	e670 <bt_hci_cmd_send_sync+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e5ec:	2201      	movs	r2, #1
    e5ee:	2100      	movs	r1, #0
    e5f0:	4668      	mov	r0, sp
    e5f2:	f020 ff0f 	bl	2f414 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e5f6:	4620      	mov	r0, r4
    e5f8:	f011 fb96 	bl	1fd28 <net_buf_id>
    e5fc:	230c      	movs	r3, #12
    e5fe:	4e1e      	ldr	r6, [pc, #120]	; (e678 <bt_hci_cmd_send_sync+0xa0>)
    e600:	fb03 6000 	mla	r0, r3, r0, r6
    e604:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    e608:	4620      	mov	r0, r4
    e60a:	f011 fda9 	bl	20160 <net_buf_ref>
    e60e:	4601      	mov	r1, r0
    e610:	481a      	ldr	r0, [pc, #104]	; (e67c <bt_hci_cmd_send_sync+0xa4>)
    e612:	f011 fd43 	bl	2009c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e616:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e61a:	2300      	movs	r3, #0
    e61c:	4668      	mov	r0, sp
    e61e:	f017 fb95 	bl	25d4c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e622:	b158      	cbz	r0, e63c <bt_hci_cmd_send_sync+0x64>
    e624:	f240 1249 	movw	r2, #329	; 0x149
    e628:	4915      	ldr	r1, [pc, #84]	; (e680 <bt_hci_cmd_send_sync+0xa8>)
    e62a:	4816      	ldr	r0, [pc, #88]	; (e684 <bt_hci_cmd_send_sync+0xac>)
    e62c:	f01a faca 	bl	28bc4 <assert_print>
    e630:	4040      	eors	r0, r0
    e632:	f380 8811 	msr	BASEPRI, r0
    e636:	f04f 0003 	mov.w	r0, #3
    e63a:	df02      	svc	2
	status = cmd(buf)->status;
    e63c:	4620      	mov	r0, r4
    e63e:	f011 fb73 	bl	1fd28 <net_buf_id>
    e642:	230c      	movs	r3, #12
    e644:	4358      	muls	r0, r3
    e646:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    e648:	b156      	cbz	r6, e660 <bt_hci_cmd_send_sync+0x88>
		net_buf_unref(buf);
    e64a:	4620      	mov	r0, r4
    e64c:	f011 fd46 	bl	200dc <net_buf_unref>
			return -ECONNREFUSED;
    e650:	2e09      	cmp	r6, #9
    e652:	bf14      	ite	ne
    e654:	f06f 0004 	mvnne.w	r0, #4
    e658:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    e65c:	b006      	add	sp, #24
    e65e:	bd70      	pop	{r4, r5, r6, pc}
	if (rsp) {
    e660:	b115      	cbz	r5, e668 <bt_hci_cmd_send_sync+0x90>
		*rsp = buf;
    e662:	602c      	str	r4, [r5, #0]
	return 0;
    e664:	2000      	movs	r0, #0
    e666:	e7f9      	b.n	e65c <bt_hci_cmd_send_sync+0x84>
		net_buf_unref(buf);
    e668:	4620      	mov	r0, r4
    e66a:	f011 fd37 	bl	200dc <net_buf_unref>
    e66e:	e7f9      	b.n	e664 <bt_hci_cmd_send_sync+0x8c>
			return -ENOBUFS;
    e670:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e674:	e7f2      	b.n	e65c <bt_hci_cmd_send_sync+0x84>
    e676:	bf00      	nop
    e678:	2000a69c 	.word	0x2000a69c
    e67c:	2000847c 	.word	0x2000847c
    e680:	00031d3a 	.word	0x00031d3a
    e684:	00030da5 	.word	0x00030da5

0000e688 <bt_hci_le_rand>:
{
    e688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e68a:	4b14      	ldr	r3, [pc, #80]	; (e6dc <bt_hci_le_rand+0x54>)
{
    e68c:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e68e:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
{
    e692:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    e694:	2b00      	cmp	r3, #0
    e696:	da1d      	bge.n	e6d4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    e698:	b914      	cbnz	r4, e6a0 <bt_hci_le_rand+0x18>
	return 0;
    e69a:	4620      	mov	r0, r4
}
    e69c:	b003      	add	sp, #12
    e69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    e6a0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e6a2:	f04f 0100 	mov.w	r1, #0
    e6a6:	f242 0018 	movw	r0, #8216	; 0x2018
    e6aa:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    e6ac:	4626      	mov	r6, r4
    e6ae:	bf28      	it	cs
    e6b0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    e6b2:	f7ff ff91 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    e6b6:	2800      	cmp	r0, #0
    e6b8:	d1f0      	bne.n	e69c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    e6ba:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    e6bc:	4632      	mov	r2, r6
    e6be:	68f9      	ldr	r1, [r7, #12]
    e6c0:	4628      	mov	r0, r5
    e6c2:	3101      	adds	r1, #1
    e6c4:	f01b ff29 	bl	2a51a <memcpy>
		net_buf_unref(rsp);
    e6c8:	4638      	mov	r0, r7
    e6ca:	f011 fd07 	bl	200dc <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    e6ce:	4435      	add	r5, r6
		len -= count;
    e6d0:	1ba4      	subs	r4, r4, r6
    e6d2:	e7e1      	b.n	e698 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    e6d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e6d8:	e7e0      	b.n	e69c <bt_hci_le_rand+0x14>
    e6da:	bf00      	nop
    e6dc:	20008380 	.word	0x20008380

0000e6e0 <bt_get_phy>:
	switch (hci_phy) {
    e6e0:	3801      	subs	r0, #1
    e6e2:	b2c0      	uxtb	r0, r0
    e6e4:	2802      	cmp	r0, #2
    e6e6:	bf9a      	itte	ls
    e6e8:	4b01      	ldrls	r3, [pc, #4]	; (e6f0 <bt_get_phy+0x10>)
    e6ea:	5c18      	ldrbls	r0, [r3, r0]
{
    e6ec:	2000      	movhi	r0, #0
}
    e6ee:	4770      	bx	lr
    e6f0:	00031f41 	.word	0x00031f41

0000e6f4 <bt_hci_le_enh_conn_complete>:
{
    e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6f8:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e6fa:	f8b0 9001 	ldrh.w	r9, [r0, #1]
    e6fe:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
    e700:	ea6f 5309 	mvn.w	r3, r9, lsl #20
    e704:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    e708:	4a6f      	ldr	r2, [pc, #444]	; (e8c8 <bt_hci_le_enh_conn_complete+0x1d4>)
    e70a:	b29b      	uxth	r3, r3
    e70c:	8811      	ldrh	r1, [r2, #0]
{
    e70e:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
    e710:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    e712:	bf08      	it	eq
    e714:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
    e716:	7800      	ldrb	r0, [r0, #0]
			return true;
    e718:	bf08      	it	eq
    e71a:	2601      	moveq	r6, #1
{
    e71c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e71e:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
    e722:	bb90      	cbnz	r0, e78a <bt_hci_le_enh_conn_complete+0x96>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e724:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    e726:	f105 0b04 	add.w	fp, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    e72a:	3b02      	subs	r3, #2
    e72c:	2b01      	cmp	r3, #1
    e72e:	d830      	bhi.n	e792 <bt_hci_le_enh_conn_complete+0x9e>
	memcpy(dst, src, sizeof(*dst));
    e730:	2207      	movs	r2, #7
    e732:	4659      	mov	r1, fp
    e734:	f107 0008 	add.w	r0, r7, #8
    e738:	f01b feef 	bl	2a51a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    e73c:	7a3b      	ldrb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
    e73e:	2206      	movs	r2, #6
    e740:	3b02      	subs	r3, #2
    e742:	f105 0111 	add.w	r1, r5, #17
    e746:	1c78      	adds	r0, r7, #1
    e748:	723b      	strb	r3, [r7, #8]
    e74a:	f01b fee6 	bl	2a51a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    e74e:	2301      	movs	r3, #1
    e750:	703b      	strb	r3, [r7, #0]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    e752:	78eb      	ldrb	r3, [r5, #3]
    e754:	2b01      	cmp	r3, #1
    e756:	d031      	beq.n	e7bc <bt_hci_le_enh_conn_complete+0xc8>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    e758:	4658      	mov	r0, fp
    e75a:	f7ff f975 	bl	da48 <bt_addr_le_str>
    e75e:	466c      	mov	r4, sp
    e760:	b088      	sub	sp, #32
    e762:	466a      	mov	r2, sp
    e764:	4b59      	ldr	r3, [pc, #356]	; (e8cc <bt_hci_le_enh_conn_complete+0x1d8>)
    e766:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    e76a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e76e:	f44f 7300 	mov.w	r3, #512	; 0x200
    e772:	8393      	strh	r3, [r2, #28]
    e774:	4b56      	ldr	r3, [pc, #344]	; (e8d0 <bt_hci_le_enh_conn_complete+0x1dc>)
    e776:	4857      	ldr	r0, [pc, #348]	; (e8d4 <bt_hci_le_enh_conn_complete+0x1e0>)
    e778:	f842 3f10 	str.w	r3, [r2, #16]!
    e77c:	f01c f92b 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    e780:	211f      	movs	r1, #31
    e782:	46a5      	mov	sp, r4
    e784:	4640      	mov	r0, r8
    e786:	f01c f932 	bl	2a9ee <bt_hci_disconnect>
}
    e78a:	3714      	adds	r7, #20
    e78c:	46bd      	mov	sp, r7
    e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e792:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
    e794:	4659      	mov	r1, fp
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    e796:	2b01      	cmp	r3, #1
    e798:	bf04      	itt	eq
    e79a:	4b4f      	ldreq	r3, [pc, #316]	; (e8d8 <bt_hci_le_enh_conn_complete+0x1e4>)
    e79c:	f893 0023 	ldrbeq.w	r0, [r3, #35]	; 0x23
		bt_addr_le_copy(&id_addr,
    e7a0:	f01c f98b 	bl	2aaba <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    e7a4:	2207      	movs	r2, #7
    e7a6:	4601      	mov	r1, r0
    e7a8:	f107 0008 	add.w	r0, r7, #8
    e7ac:	f01b feb5 	bl	2a51a <memcpy>
    e7b0:	2207      	movs	r2, #7
    e7b2:	4659      	mov	r1, fp
    e7b4:	4638      	mov	r0, r7
    e7b6:	f01b feb0 	bl	2a51a <memcpy>
}
    e7ba:	e7ca      	b.n	e752 <bt_hci_le_enh_conn_complete+0x5e>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e7bc:	f8df a118 	ldr.w	sl, [pc, #280]	; e8d8 <bt_hci_le_enh_conn_complete+0x1e4>
    e7c0:	2205      	movs	r2, #5
    e7c2:	f89a 0023 	ldrb.w	r0, [sl, #35]	; 0x23
    e7c6:	f107 0108 	add.w	r1, r7, #8
    e7ca:	f002 feb3 	bl	11534 <bt_conn_lookup_state_le>
		if (!conn) {
    e7ce:	4604      	mov	r4, r0
    e7d0:	b940      	cbnz	r0, e7e4 <bt_hci_le_enh_conn_complete+0xf0>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e7d2:	2204      	movs	r2, #4
    e7d4:	4941      	ldr	r1, [pc, #260]	; (e8dc <bt_hci_le_enh_conn_complete+0x1e8>)
    e7d6:	f89a 0023 	ldrb.w	r0, [sl, #35]	; 0x23
    e7da:	f002 feab 	bl	11534 <bt_conn_lookup_state_le>
	if (!conn) {
    e7de:	4604      	mov	r4, r0
    e7e0:	2800      	cmp	r0, #0
    e7e2:	d0b9      	beq.n	e758 <bt_hci_le_enh_conn_complete+0x64>
	conn->handle = handle;
    e7e4:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    e7e6:	2207      	movs	r2, #7
    e7e8:	f820 9b90 	strh.w	r9, [r0], #144
    e7ec:	f107 0108 	add.w	r1, r7, #8
    e7f0:	f01b fe93 	bl	2a51a <memcpy>
	conn->err = 0U;
    e7f4:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    e7f6:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    e7fa:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    e7fe:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    e802:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e806:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    e80a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
    e80e:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    e810:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e812:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    e814:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e816:	d112      	bne.n	e83e <bt_hci_le_enh_conn_complete+0x14a>
    e818:	2207      	movs	r2, #7
    e81a:	4639      	mov	r1, r7
    e81c:	f104 0097 	add.w	r0, r4, #151	; 0x97
    e820:	f01b fe7b 	bl	2a51a <memcpy>
	memcpy(dst, src, sizeof(*dst));
    e824:	f105 010b 	add.w	r1, r5, #11
    e828:	2206      	movs	r2, #6
    e82a:	f104 009f 	add.w	r0, r4, #159	; 0x9f
    e82e:	f01b fe74 	bl	2a51a <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    e832:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
    e836:	0659      	lsls	r1, r3, #25
    e838:	d501      	bpl.n	e83e <bt_hci_le_enh_conn_complete+0x14a>
			bt_le_adv_resume();
    e83a:	f001 fadb 	bl	fdf4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    e83e:	2107      	movs	r1, #7
    e840:	4620      	mov	r0, r4
    e842:	f002 fcab 	bl	1119c <bt_conn_set_state>
	if (is_disconnected) {
    e846:	b11e      	cbz	r6, e850 <bt_hci_le_enh_conn_complete+0x15c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e848:	2101      	movs	r1, #1
    e84a:	4620      	mov	r0, r4
    e84c:	f002 fca6 	bl	1119c <bt_conn_set_state>
	bt_conn_connected(conn);
    e850:	4620      	mov	r0, r4
    e852:	f01c fb96 	bl	2af82 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    e856:	7aa3      	ldrb	r3, [r4, #10]
    e858:	2b07      	cmp	r3, #7
    e85a:	d12d      	bne.n	e8b8 <bt_hci_le_enh_conn_complete+0x1c4>
    e85c:	1d23      	adds	r3, r4, #4
    e85e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    e862:	04da      	lsls	r2, r3, #19
    e864:	d428      	bmi.n	e8b8 <bt_hci_le_enh_conn_complete+0x1c4>
    e866:	78e3      	ldrb	r3, [r4, #3]
    e868:	b11b      	cbz	r3, e872 <bt_hci_le_enh_conn_complete+0x17e>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    e86a:	f89a 3090 	ldrb.w	r3, [sl, #144]	; 0x90
    e86e:	071b      	lsls	r3, r3, #28
    e870:	d522      	bpl.n	e8b8 <bt_hci_le_enh_conn_complete+0x1c4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    e872:	2102      	movs	r1, #2
    e874:	f242 0016 	movw	r0, #8214	; 0x2016
    e878:	f7ff fe64 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    e87c:	4605      	mov	r5, r0
    e87e:	b1f8      	cbz	r0, e8c0 <bt_hci_le_enh_conn_complete+0x1cc>
    e880:	2102      	movs	r1, #2
    e882:	300c      	adds	r0, #12
    e884:	f011 fd64 	bl	20350 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    e888:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    e88a:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    e88c:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    e88e:	4629      	mov	r1, r5
    e890:	f242 0016 	movw	r0, #8214	; 0x2016
    e894:	f7ff fea0 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    e898:	b170      	cbz	r0, e8b8 <bt_hci_le_enh_conn_complete+0x1c4>
			LOG_ERR("Failed read remote features (%d)", err);
    e89a:	466d      	mov	r5, sp
    e89c:	b088      	sub	sp, #32
    e89e:	466a      	mov	r2, sp
    e8a0:	4b0f      	ldr	r3, [pc, #60]	; (e8e0 <bt_hci_le_enh_conn_complete+0x1ec>)
    e8a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e8a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e8aa:	2303      	movs	r3, #3
    e8ac:	4809      	ldr	r0, [pc, #36]	; (e8d4 <bt_hci_le_enh_conn_complete+0x1e0>)
    e8ae:	f842 3f10 	str.w	r3, [r2, #16]!
    e8b2:	f01c f890 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    e8b6:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    e8b8:	4620      	mov	r0, r4
    e8ba:	f002 fc3f 	bl	1113c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e8be:	e764      	b.n	e78a <bt_hci_le_enh_conn_complete+0x96>
		return -ENOBUFS;
    e8c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e8c4:	e7e9      	b.n	e89a <bt_hci_le_enh_conn_complete+0x1a6>
    e8c6:	bf00      	nop
    e8c8:	2000b126 	.word	0x2000b126
    e8cc:	00031dfb 	.word	0x00031dfb
    e8d0:	01000003 	.word	0x01000003
    e8d4:	0002fc34 	.word	0x0002fc34
    e8d8:	20008380 	.word	0x20008380
    e8dc:	00031abe 	.word	0x00031abe
    e8e0:	00031e17 	.word	0x00031e17

0000e8e4 <le_legacy_conn_complete>:
{
    e8e4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    e8e6:	68c1      	ldr	r1, [r0, #12]
{
    e8e8:	b088      	sub	sp, #32
	enh.status         = evt->status;
    e8ea:	780b      	ldrb	r3, [r1, #0]
    e8ec:	4c17      	ldr	r4, [pc, #92]	; (e94c <le_legacy_conn_complete+0x68>)
    e8ee:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    e8f2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	memcpy(dst, src, sizeof(*dst));
    e8f6:	2207      	movs	r2, #7
    e8f8:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    e8fc:	78cb      	ldrb	r3, [r1, #3]
    e8fe:	a801      	add	r0, sp, #4
    e900:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    e904:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    e908:	3104      	adds	r1, #4
    e90a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    e90e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    e912:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    e916:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    e91a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    e91e:	7b4b      	ldrb	r3, [r1, #13]
    e920:	f88d 301d 	strb.w	r3, [sp, #29]
    e924:	f01b fdf9 	bl	2a51a <memcpy>
	memcpy(dst, src, sizeof(*dst));
    e928:	4621      	mov	r1, r4
    e92a:	2206      	movs	r2, #6
    e92c:	f10d 000b 	add.w	r0, sp, #11
    e930:	f01b fdf3 	bl	2a51a <memcpy>
    e934:	2206      	movs	r2, #6
    e936:	4621      	mov	r1, r4
    e938:	f10d 0011 	add.w	r0, sp, #17
    e93c:	f01b fded 	bl	2a51a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    e940:	4668      	mov	r0, sp
    e942:	f7ff fed7 	bl	e6f4 <bt_hci_le_enh_conn_complete>
}
    e946:	b008      	add	sp, #32
    e948:	bd10      	pop	{r4, pc}
    e94a:	bf00      	nop
    e94c:	00031ad2 	.word	0x00031ad2

0000e950 <bt_send>:
	return bt_dev.drv->send(buf);
    e950:	4b02      	ldr	r3, [pc, #8]	; (e95c <bt_send+0xc>)
    e952:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    e956:	695b      	ldr	r3, [r3, #20]
    e958:	4718      	bx	r3
    e95a:	bf00      	nop
    e95c:	20008380 	.word	0x20008380

0000e960 <bt_hci_cmd_send>:
{
    e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e962:	4605      	mov	r5, r0
	if (!buf) {
    e964:	460c      	mov	r4, r1
{
    e966:	af00      	add	r7, sp, #0
	if (!buf) {
    e968:	b919      	cbnz	r1, e972 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    e96a:	f7ff fdeb 	bl	e544 <bt_hci_cmd_create>
		if (!buf) {
    e96e:	4604      	mov	r4, r0
    e970:	b318      	cbz	r0, e9ba <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    e972:	f640 4335 	movw	r3, #3125	; 0xc35
    e976:	429d      	cmp	r5, r3
    e978:	d119      	bne.n	e9ae <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    e97a:	4620      	mov	r0, r4
    e97c:	f7ff ffe8 	bl	e950 <bt_send>
		if (err) {
    e980:	4605      	mov	r5, r0
    e982:	b188      	cbz	r0, e9a8 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
    e984:	466e      	mov	r6, sp
    e986:	b088      	sub	sp, #32
    e988:	466a      	mov	r2, sp
    e98a:	4b0d      	ldr	r3, [pc, #52]	; (e9c0 <bt_hci_cmd_send+0x60>)
    e98c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e990:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e994:	2303      	movs	r3, #3
    e996:	480b      	ldr	r0, [pc, #44]	; (e9c4 <bt_hci_cmd_send+0x64>)
    e998:	f842 3f10 	str.w	r3, [r2, #16]!
    e99c:	f01c f81b 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    e9a0:	4620      	mov	r0, r4
    e9a2:	46b5      	mov	sp, r6
    e9a4:	f011 fb9a 	bl	200dc <net_buf_unref>
}
    e9a8:	4628      	mov	r0, r5
    e9aa:	46bd      	mov	sp, r7
    e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e9ae:	4621      	mov	r1, r4
    e9b0:	4805      	ldr	r0, [pc, #20]	; (e9c8 <bt_hci_cmd_send+0x68>)
    e9b2:	f011 fb73 	bl	2009c <net_buf_put>
	return 0;
    e9b6:	2500      	movs	r5, #0
    e9b8:	e7f6      	b.n	e9a8 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    e9ba:	f06f 0568 	mvn.w	r5, #104	; 0x68
    e9be:	e7f3      	b.n	e9a8 <bt_hci_cmd_send+0x48>
    e9c0:	00031e38 	.word	0x00031e38
    e9c4:	0002fc34 	.word	0x0002fc34
    e9c8:	2000847c 	.word	0x2000847c

0000e9cc <bt_hci_host_num_completed_packets>:
{
    e9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ce:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    e9d0:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
    e9d2:	7e46      	ldrb	r6, [r0, #25]
{
    e9d4:	b087      	sub	sp, #28
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    e9d6:	7a80      	ldrb	r0, [r0, #10]
    e9d8:	f011 f99e 	bl	1fd18 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    e9dc:	4621      	mov	r1, r4
    e9de:	f020 fd0f 	bl	2f400 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    e9e2:	4b1f      	ldr	r3, [pc, #124]	; (ea60 <bt_hci_host_num_completed_packets+0x94>)
    e9e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    e9e8:	069b      	lsls	r3, r3, #26
    e9ea:	d51f      	bpl.n	ea2c <bt_hci_host_num_completed_packets+0x60>
	conn = bt_conn_lookup_index(index);
    e9ec:	4630      	mov	r0, r6
    e9ee:	f002 ff75 	bl	118dc <bt_conn_lookup_index>
	if (!conn) {
    e9f2:	b1d8      	cbz	r0, ea2c <bt_hci_host_num_completed_packets+0x60>
	if (conn->state != BT_CONN_CONNECTED &&
    e9f4:	7a83      	ldrb	r3, [r0, #10]
    e9f6:	3b07      	subs	r3, #7
    e9f8:	2b01      	cmp	r3, #1
    e9fa:	d904      	bls.n	ea06 <bt_hci_host_num_completed_packets+0x3a>
}
    e9fc:	b007      	add	sp, #28
    e9fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    ea02:	f002 bb9b 	b.w	1113c <bt_conn_unref>
	bt_conn_unref(conn);
    ea06:	f002 fb99 	bl	1113c <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ea0a:	2105      	movs	r1, #5
    ea0c:	f640 4035 	movw	r0, #3125	; 0xc35
    ea10:	f7ff fd98 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    ea14:	4604      	mov	r4, r0
    ea16:	b958      	cbnz	r0, ea30 <bt_hci_host_num_completed_packets+0x64>
		LOG_ERR("Unable to allocate new HCI command");
    ea18:	4b12      	ldr	r3, [pc, #72]	; (ea64 <bt_hci_host_num_completed_packets+0x98>)
    ea1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ea1e:	9305      	str	r3, [sp, #20]
    ea20:	2302      	movs	r3, #2
    ea22:	4811      	ldr	r0, [pc, #68]	; (ea68 <bt_hci_host_num_completed_packets+0x9c>)
    ea24:	aa04      	add	r2, sp, #16
    ea26:	9304      	str	r3, [sp, #16]
    ea28:	f01b ffd5 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
}
    ea2c:	b007      	add	sp, #28
    ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    ea30:	f100 070c 	add.w	r7, r0, #12
    ea34:	2101      	movs	r1, #1
    ea36:	4638      	mov	r0, r7
    ea38:	f011 fc8a 	bl	20350 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ea3c:	2601      	movs	r6, #1
    ea3e:	2104      	movs	r1, #4
    ea40:	7006      	strb	r6, [r0, #0]
    ea42:	4638      	mov	r0, r7
    ea44:	f011 fc84 	bl	20350 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ea48:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ea4a:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ea4c:	7086      	strb	r6, [r0, #2]
    ea4e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ea50:	4621      	mov	r1, r4
    ea52:	f640 4035 	movw	r0, #3125	; 0xc35
}
    ea56:	b007      	add	sp, #28
    ea58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ea5c:	f7ff bf80 	b.w	e960 <bt_hci_cmd_send>
    ea60:	20008380 	.word	0x20008380
    ea64:	00031e5a 	.word	0x00031e5a
    ea68:	0002fc34 	.word	0x0002fc34

0000ea6c <le_conn_param_req>:
{
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ea72:	68c3      	ldr	r3, [r0, #12]
{
    ea74:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ea76:	78d9      	ldrb	r1, [r3, #3]
    ea78:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ea7a:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ea7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea82:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ea84:	7959      	ldrb	r1, [r3, #5]
    ea86:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ea88:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ea8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea90:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ea92:	799a      	ldrb	r2, [r3, #6]
    ea94:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ea96:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ea98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea9c:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ea9e:	7a1a      	ldrb	r2, [r3, #8]
    eaa0:	7a5b      	ldrb	r3, [r3, #9]
    eaa2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    eaa6:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    eaa8:	f002 fb70 	bl	1118c <bt_conn_lookup_handle>
	if (!conn) {
    eaac:	4606      	mov	r6, r0
    eaae:	b9b0      	cbnz	r0, eade <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    eab0:	466d      	mov	r5, sp
    eab2:	b088      	sub	sp, #32
    eab4:	466a      	mov	r2, sp
    eab6:	4b20      	ldr	r3, [pc, #128]	; (eb38 <le_conn_param_req+0xcc>)
    eab8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eabc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    eac0:	2303      	movs	r3, #3
    eac2:	481e      	ldr	r0, [pc, #120]	; (eb3c <le_conn_param_req+0xd0>)
    eac4:	f842 3f10 	str.w	r3, [r2, #16]!
    eac8:	f01b ff85 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    eacc:	2102      	movs	r1, #2
    eace:	46ad      	mov	sp, r5
    ead0:	4620      	mov	r0, r4
    ead2:	f01b ffcb 	bl	2aa6c <le_conn_param_neg_reply>
}
    ead6:	3708      	adds	r7, #8
    ead8:	46bd      	mov	sp, r7
    eada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    eade:	4639      	mov	r1, r7
    eae0:	f002 fcaa 	bl	11438 <le_param_req>
    eae4:	b938      	cbnz	r0, eaf6 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    eae6:	211e      	movs	r1, #30
    eae8:	4620      	mov	r0, r4
    eaea:	f01b ffbf 	bl	2aa6c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    eaee:	4630      	mov	r0, r6
    eaf0:	f002 fb24 	bl	1113c <bt_conn_unref>
    eaf4:	e7ef      	b.n	ead6 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    eaf6:	210e      	movs	r1, #14
    eaf8:	f242 0020 	movw	r0, #8224	; 0x2020
    eafc:	f7ff fd22 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    eb00:	4605      	mov	r5, r0
    eb02:	2800      	cmp	r0, #0
    eb04:	d0f3      	beq.n	eaee <le_conn_param_req+0x82>
    eb06:	210e      	movs	r1, #14
    eb08:	300c      	adds	r0, #12
    eb0a:	f011 fc21 	bl	20350 <net_buf_simple_add>
    eb0e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    eb10:	220e      	movs	r2, #14
    eb12:	2100      	movs	r1, #0
    eb14:	f01b fd0c 	bl	2a530 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    eb18:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    eb1c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    eb1e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    eb20:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    eb22:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    eb24:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    eb28:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    eb2a:	88bb      	ldrh	r3, [r7, #4]
    eb2c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    eb2e:	88fb      	ldrh	r3, [r7, #6]
    eb30:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    eb32:	f7ff ff15 	bl	e960 <bt_hci_cmd_send>
    eb36:	e7da      	b.n	eaee <le_conn_param_req+0x82>
    eb38:	00031cf4 	.word	0x00031cf4
    eb3c:	0002fc34 	.word	0x0002fc34

0000eb40 <hci_tx_thread>:
{
    eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    eb44:	f8df 8130 	ldr.w	r8, [pc, #304]	; ec78 <hci_tx_thread+0x138>
{
    eb48:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    eb4a:	f8df 9130 	ldr.w	r9, [pc, #304]	; ec7c <hci_tx_thread+0x13c>
			ev_count += bt_conn_prepare_events(&events[1]);
    eb4e:	f108 0a14 	add.w	sl, r8, #20
{
    eb52:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    eb54:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    eb58:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    eb5a:	f36f 3394 	bfc	r3, #14, #7
    eb5e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    eb62:	f002 fa8d 	bl	11080 <bt_conn_prepare_events>
    eb66:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    eb68:	f04f 32ff 	mov.w	r2, #4294967295
    eb6c:	f04f 33ff 	mov.w	r3, #4294967295
    eb70:	4629      	mov	r1, r5
    eb72:	4841      	ldr	r0, [pc, #260]	; (ec78 <hci_tx_thread+0x138>)
    eb74:	f019 fba8 	bl	282c8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    eb78:	b158      	cbz	r0, eb92 <hci_tx_thread+0x52>
    eb7a:	f640 12e6 	movw	r2, #2534	; 0x9e6
    eb7e:	4649      	mov	r1, r9
    eb80:	483f      	ldr	r0, [pc, #252]	; (ec80 <hci_tx_thread+0x140>)
    eb82:	f01a f81f 	bl	28bc4 <assert_print>
    eb86:	4040      	eors	r0, r0
    eb88:	f380 8811 	msr	BASEPRI, r0
    eb8c:	f04f 0003 	mov.w	r0, #3
    eb90:	df02      	svc	2
{
    eb92:	4e39      	ldr	r6, [pc, #228]	; (ec78 <hci_tx_thread+0x138>)
	for (; count; ev++, count--) {
    eb94:	b915      	cbnz	r5, eb9c <hci_tx_thread+0x5c>
	z_impl_k_yield();
    eb96:	f018 fc11 	bl	273bc <z_impl_k_yield>
	while (1) {
    eb9a:	e7db      	b.n	eb54 <hci_tx_thread+0x14>
		switch (ev->state) {
    eb9c:	68f3      	ldr	r3, [r6, #12]
    eb9e:	f3c3 3386 	ubfx	r3, r3, #14, #7
    eba2:	2b04      	cmp	r3, #4
    eba4:	d15d      	bne.n	ec62 <hci_tx_thread+0x122>
			if (ev->tag == BT_EVENT_CMD_TX) {
    eba6:	7b33      	ldrb	r3, [r6, #12]
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d15d      	bne.n	ec68 <hci_tx_thread+0x128>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    ebac:	2200      	movs	r2, #0
    ebae:	2300      	movs	r3, #0
    ebb0:	4834      	ldr	r0, [pc, #208]	; (ec84 <hci_tx_thread+0x144>)
    ebb2:	f01f f939 	bl	2de28 <net_buf_get>
	BT_ASSERT(buf);
    ebb6:	4604      	mov	r4, r0
    ebb8:	b958      	cbnz	r0, ebd2 <hci_tx_thread+0x92>
    ebba:	f44f 6218 	mov.w	r2, #2432	; 0x980
    ebbe:	4649      	mov	r1, r9
    ebc0:	482f      	ldr	r0, [pc, #188]	; (ec80 <hci_tx_thread+0x140>)
    ebc2:	f019 ffff 	bl	28bc4 <assert_print>
    ebc6:	4040      	eors	r0, r0
    ebc8:	f380 8811 	msr	BASEPRI, r0
    ebcc:	f04f 0003 	mov.w	r0, #3
    ebd0:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    ebd2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; ec88 <hci_tx_thread+0x148>
	return z_impl_k_sem_take(sem, timeout);
    ebd6:	f04f 33ff 	mov.w	r3, #4294967295
    ebda:	f04f 32ff 	mov.w	r2, #4294967295
    ebde:	482b      	ldr	r0, [pc, #172]	; (ec8c <hci_tx_thread+0x14c>)
    ebe0:	f017 f8b4 	bl	25d4c <z_impl_k_sem_take>
    ebe4:	f8db 30f0 	ldr.w	r3, [fp, #240]	; 0xf0
    ebe8:	b18b      	cbz	r3, ec0e <hci_tx_thread+0xce>
		LOG_ERR("Uncleared pending sent_cmd");
    ebea:	4b29      	ldr	r3, [pc, #164]	; (ec90 <hci_tx_thread+0x150>)
    ebec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ebf0:	617b      	str	r3, [r7, #20]
    ebf2:	2302      	movs	r3, #2
    ebf4:	4827      	ldr	r0, [pc, #156]	; (ec94 <hci_tx_thread+0x154>)
    ebf6:	613b      	str	r3, [r7, #16]
    ebf8:	f107 0210 	add.w	r2, r7, #16
    ebfc:	f01b feeb 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    ec00:	f8db 00f0 	ldr.w	r0, [fp, #240]	; 0xf0
    ec04:	f011 fa6a 	bl	200dc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ec08:	2300      	movs	r3, #0
    ec0a:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
	bt_dev.sent_cmd = net_buf_ref(buf);
    ec0e:	4620      	mov	r0, r4
    ec10:	f011 faa6 	bl	20160 <net_buf_ref>
    ec14:	f8cb 00f0 	str.w	r0, [fp, #240]	; 0xf0
	err = bt_send(buf);
    ec18:	4620      	mov	r0, r4
    ec1a:	f7ff fe99 	bl	e950 <bt_send>
	if (err) {
    ec1e:	b300      	cbz	r0, ec62 <hci_tx_thread+0x122>
		LOG_ERR("Unable to send to driver (err %d)", err);
    ec20:	46eb      	mov	fp, sp
    ec22:	b088      	sub	sp, #32
    ec24:	466a      	mov	r2, sp
    ec26:	4b1c      	ldr	r3, [pc, #112]	; (ec98 <hci_tx_thread+0x158>)
    ec28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ec2c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ec30:	2303      	movs	r3, #3
    ec32:	4818      	ldr	r0, [pc, #96]	; (ec94 <hci_tx_thread+0x154>)
    ec34:	f842 3f10 	str.w	r3, [r2, #16]!
    ec38:	f01b fecd 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    ec3c:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    ec3e:	4813      	ldr	r0, [pc, #76]	; (ec8c <hci_tx_thread+0x14c>)
    ec40:	f017 f84a 	bl	25cd8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    ec44:	4620      	mov	r0, r4
    ec46:	f011 f86f 	bl	1fd28 <net_buf_id>
    ec4a:	220c      	movs	r2, #12
    ec4c:	4b13      	ldr	r3, [pc, #76]	; (ec9c <hci_tx_thread+0x15c>)
    ec4e:	211f      	movs	r1, #31
    ec50:	fb02 3000 	mla	r0, r2, r0, r3
    ec54:	4622      	mov	r2, r4
    ec56:	8840      	ldrh	r0, [r0, #2]
    ec58:	f7ff fb4a 	bl	e2f0 <hci_cmd_done>
		net_buf_unref(buf);
    ec5c:	4620      	mov	r0, r4
    ec5e:	f011 fa3d 	bl	200dc <net_buf_unref>
	for (; count; ev++, count--) {
    ec62:	3614      	adds	r6, #20
    ec64:	3d01      	subs	r5, #1
    ec66:	e795      	b.n	eb94 <hci_tx_thread+0x54>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    ec68:	2b01      	cmp	r3, #1
    ec6a:	d1fa      	bne.n	ec62 <hci_tx_thread+0x122>
					conn = CONTAINER_OF(ev->fifo,
    ec6c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    ec6e:	3838      	subs	r0, #56	; 0x38
    ec70:	f002 fdcc 	bl	1180c <bt_conn_process_tx>
    ec74:	e7f5      	b.n	ec62 <hci_tx_thread+0x122>
    ec76:	bf00      	nop
    ec78:	200086d8 	.word	0x200086d8
    ec7c:	00031d3a 	.word	0x00031d3a
    ec80:	00030da5 	.word	0x00030da5
    ec84:	2000847c 	.word	0x2000847c
    ec88:	20008380 	.word	0x20008380
    ec8c:	20008458 	.word	0x20008458
    ec90:	00031e7d 	.word	0x00031e7d
    ec94:	0002fc34 	.word	0x0002fc34
    ec98:	00031e38 	.word	0x00031e38
    ec9c:	2000a69c 	.word	0x2000a69c

0000eca0 <hci_event_prio>:
{
    eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eca4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    eca6:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    ecaa:	4630      	mov	r0, r6
    ecac:	f01f f909 	bl	2dec2 <net_buf_simple_headroom>
	state->len = buf->len;
    ecb0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    ecb4:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ecb6:	f1b8 0f01 	cmp.w	r8, #1
    ecba:	d80b      	bhi.n	ecd4 <hci_event_prio+0x34>
    ecbc:	f640 527b 	movw	r2, #3451	; 0xd7b
    ecc0:	491a      	ldr	r1, [pc, #104]	; (ed2c <hci_event_prio+0x8c>)
    ecc2:	481b      	ldr	r0, [pc, #108]	; (ed30 <hci_event_prio+0x90>)
    ecc4:	f019 ff7e 	bl	28bc4 <assert_print>
    ecc8:	4040      	eors	r0, r0
    ecca:	f380 8811 	msr	BASEPRI, r0
    ecce:	f04f 0003 	mov.w	r0, #3
    ecd2:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    ecd4:	4630      	mov	r0, r6
    ecd6:	2102      	movs	r1, #2
    ecd8:	f011 fb20 	bl	2031c <net_buf_simple_pull_mem>
    ecdc:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ecde:	7800      	ldrb	r0, [r0, #0]
    ece0:	f01b fe5b 	bl	2a99a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ece4:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ece6:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ece8:	d40b      	bmi.n	ed02 <hci_event_prio+0x62>
    ecea:	f640 527f 	movw	r2, #3455	; 0xd7f
    ecee:	490f      	ldr	r1, [pc, #60]	; (ed2c <hci_event_prio+0x8c>)
    ecf0:	480f      	ldr	r0, [pc, #60]	; (ed30 <hci_event_prio+0x90>)
    ecf2:	f019 ff67 	bl	28bc4 <assert_print>
    ecf6:	4040      	eors	r0, r0
    ecf8:	f380 8811 	msr	BASEPRI, r0
    ecfc:	f04f 0003 	mov.w	r0, #3
    ed00:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    ed02:	2305      	movs	r3, #5
    ed04:	4621      	mov	r1, r4
    ed06:	4a0b      	ldr	r2, [pc, #44]	; (ed34 <hci_event_prio+0x94>)
    ed08:	7838      	ldrb	r0, [r7, #0]
    ed0a:	f7ff f989 	bl	e020 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ed0e:	07b3      	lsls	r3, r6, #30
    ed10:	d507      	bpl.n	ed22 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    ed12:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    ed14:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ed18:	fa13 f585 	uxtah	r5, r3, r5
    ed1c:	60e5      	str	r5, [r4, #12]
}
    ed1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    ed22:	4620      	mov	r0, r4
}
    ed24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    ed28:	f011 b9d8 	b.w	200dc <net_buf_unref>
    ed2c:	00031d3a 	.word	0x00031d3a
    ed30:	00030da5 	.word	0x00030da5
    ed34:	000302c8 	.word	0x000302c8

0000ed38 <bt_recv>:
{
    ed38:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ed3a:	7e03      	ldrb	r3, [r0, #24]
    ed3c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    ed3e:	2b01      	cmp	r3, #1
{
    ed40:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    ed42:	d006      	beq.n	ed52 <bt_recv+0x1a>
    ed44:	2b03      	cmp	r3, #3
    ed46:	d112      	bne.n	ed6e <bt_recv+0x36>
			rx_queue_put(buf);
    ed48:	f7ff f8cc 	bl	dee4 <rx_queue_put>
		return 0;
    ed4c:	2000      	movs	r0, #0
}
    ed4e:	46bd      	mov	sp, r7
    ed50:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ed52:	68c3      	ldr	r3, [r0, #12]
    ed54:	7818      	ldrb	r0, [r3, #0]
    ed56:	f01b fe20 	bl	2a99a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ed5a:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ed5c:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ed5e:	d502      	bpl.n	ed66 <bt_recv+0x2e>
			hci_event_prio(buf);
    ed60:	4620      	mov	r0, r4
    ed62:	f7ff ff9d 	bl	eca0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ed66:	07ab      	lsls	r3, r5, #30
    ed68:	d5f0      	bpl.n	ed4c <bt_recv+0x14>
			rx_queue_put(buf);
    ed6a:	4620      	mov	r0, r4
    ed6c:	e7ec      	b.n	ed48 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    ed6e:	466d      	mov	r5, sp
    ed70:	b088      	sub	sp, #32
    ed72:	466a      	mov	r2, sp
    ed74:	4908      	ldr	r1, [pc, #32]	; (ed98 <bt_recv+0x60>)
    ed76:	4809      	ldr	r0, [pc, #36]	; (ed9c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    ed78:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    ed7c:	2303      	movs	r3, #3
    ed7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ed82:	f842 3f10 	str.w	r3, [r2, #16]!
    ed86:	f01b fe26 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    ed8a:	4620      	mov	r0, r4
    ed8c:	46ad      	mov	sp, r5
    ed8e:	f011 f9a5 	bl	200dc <net_buf_unref>
		return -EINVAL;
    ed92:	f06f 0015 	mvn.w	r0, #21
    ed96:	e7da      	b.n	ed4e <bt_recv+0x16>
    ed98:	00031e98 	.word	0x00031e98
    ed9c:	0002fc34 	.word	0x0002fc34

0000eda0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    eda0:	4a08      	ldr	r2, [pc, #32]	; (edc4 <bt_hci_driver_register+0x24>)
{
    eda2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    eda4:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
    eda8:	b930      	cbnz	r0, edb8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    edaa:	68d9      	ldr	r1, [r3, #12]
    edac:	b139      	cbz	r1, edbe <bt_hci_driver_register+0x1e>
    edae:	6959      	ldr	r1, [r3, #20]
    edb0:	b129      	cbz	r1, edbe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    edb2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	return 0;
    edb6:	4770      	bx	lr
		return -EALREADY;
    edb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    edbc:	4770      	bx	lr
		return -EINVAL;
    edbe:	f06f 0015 	mvn.w	r0, #21
}
    edc2:	4770      	bx	lr
    edc4:	20008380 	.word	0x20008380

0000edc8 <bt_finalize_init>:
{
    edc8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    edca:	2104      	movs	r1, #4
    edcc:	4803      	ldr	r0, [pc, #12]	; (eddc <bt_finalize_init+0x14>)
    edce:	f01b fdf7 	bl	2a9c0 <atomic_or>
}
    edd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    edd6:	2000      	movs	r0, #0
    edd8:	f001 baa4 	b.w	10324 <bt_le_scan_update>
    eddc:	20008408 	.word	0x20008408

0000ede0 <bt_init>:
{
    ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    ede2:	4dc2      	ldr	r5, [pc, #776]	; (f0ec <bt_init+0x30c>)
{
    ede4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    ede6:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    edea:	6899      	ldr	r1, [r3, #8]
    edec:	f011 0101 	ands.w	r1, r1, #1
    edf0:	d11d      	bne.n	ee2e <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    edf2:	466a      	mov	r2, sp
    edf4:	f640 4003 	movw	r0, #3075	; 0xc03
    edf8:	f7ff fbee 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    edfc:	4604      	mov	r4, r0
    edfe:	2800      	cmp	r0, #0
    ee00:	f040 80a5 	bne.w	ef4e <bt_init+0x16e>
		hci_reset_complete(rsp);
    ee04:	9c00      	ldr	r4, [sp, #0]
	uint8_t status = buf->data[0];
    ee06:	68e3      	ldr	r3, [r4, #12]
	if (status) {
    ee08:	781b      	ldrb	r3, [r3, #0]
    ee0a:	b96b      	cbnz	r3, ee28 <bt_init+0x48>
		bt_scan_reset();
    ee0c:	f001 fa82 	bl	10314 <bt_scan_reset>
    ee10:	f105 0388 	add.w	r3, r5, #136	; 0x88
    ee14:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ee18:	f002 0209 	and.w	r2, r2, #9
    ee1c:	e8d3 1fef 	ldaex	r1, [r3]
    ee20:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ee24:	2800      	cmp	r0, #0
    ee26:	d1f9      	bne.n	ee1c <bt_init+0x3c>
		net_buf_unref(rsp);
    ee28:	4620      	mov	r0, r4
    ee2a:	f011 f957 	bl	200dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    ee2e:	466a      	mov	r2, sp
    ee30:	2100      	movs	r1, #0
    ee32:	f241 0003 	movw	r0, #4099	; 0x1003
    ee36:	f7ff fbcf 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ee3a:	4604      	mov	r4, r0
    ee3c:	2800      	cmp	r0, #0
    ee3e:	f040 8086 	bne.w	ef4e <bt_init+0x16e>
	read_local_features_complete(rsp);
    ee42:	9e00      	ldr	r6, [sp, #0]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    ee44:	2208      	movs	r2, #8
    ee46:	68f1      	ldr	r1, [r6, #12]
    ee48:	48a9      	ldr	r0, [pc, #676]	; (f0f0 <bt_init+0x310>)
    ee4a:	3101      	adds	r1, #1
    ee4c:	f01b fb65 	bl	2a51a <memcpy>
	net_buf_unref(rsp);
    ee50:	4630      	mov	r0, r6
    ee52:	f011 f943 	bl	200dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    ee56:	4621      	mov	r1, r4
    ee58:	466a      	mov	r2, sp
    ee5a:	f241 0001 	movw	r0, #4097	; 0x1001
    ee5e:	f7ff fbbb 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ee62:	4604      	mov	r4, r0
    ee64:	2800      	cmp	r0, #0
    ee66:	d172      	bne.n	ef4e <bt_init+0x16e>
	read_local_ver_complete(rsp);
    ee68:	9800      	ldr	r0, [sp, #0]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    ee6a:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    ee6c:	785a      	ldrb	r2, [r3, #1]
    ee6e:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    ee72:	885a      	ldrh	r2, [r3, #2]
    ee74:	84ea      	strh	r2, [r5, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
    ee76:	791a      	ldrb	r2, [r3, #4]
    ee78:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    ee7c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    ee80:	852a      	strh	r2, [r5, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    ee82:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    ee86:	856b      	strh	r3, [r5, #42]	; 0x2a
	net_buf_unref(rsp);
    ee88:	f011 f928 	bl	200dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    ee8c:	4621      	mov	r1, r4
    ee8e:	466a      	mov	r2, sp
    ee90:	f241 0002 	movw	r0, #4098	; 0x1002
    ee94:	f7ff fba0 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ee98:	4604      	mov	r4, r0
    ee9a:	2800      	cmp	r0, #0
    ee9c:	d157      	bne.n	ef4e <bt_init+0x16e>
	read_supported_commands_complete(rsp);
    ee9e:	9c00      	ldr	r4, [sp, #0]
	memcpy(bt_dev.supported_commands, rp->commands,
    eea0:	2240      	movs	r2, #64	; 0x40
    eea2:	68e1      	ldr	r1, [r4, #12]
    eea4:	4893      	ldr	r0, [pc, #588]	; (f0f4 <bt_init+0x314>)
    eea6:	3101      	adds	r1, #1
    eea8:	f01b fb37 	bl	2a51a <memcpy>
	net_buf_unref(rsp);
    eeac:	4620      	mov	r0, r4
    eeae:	f011 f915 	bl	200dc <net_buf_unref>
		err = prng_init();
    eeb2:	f001 fced 	bl	10890 <prng_init>
		if (err) {
    eeb6:	4604      	mov	r4, r0
    eeb8:	2800      	cmp	r0, #0
    eeba:	d148      	bne.n	ef4e <bt_init+0x16e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    eebc:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    eec0:	069e      	lsls	r6, r3, #26
    eec2:	d534      	bpl.n	ef2e <bt_init+0x14e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    eec4:	2107      	movs	r1, #7
    eec6:	f640 4033 	movw	r0, #3123	; 0xc33
    eeca:	f7ff fb3b 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    eece:	4607      	mov	r7, r0
    eed0:	2800      	cmp	r0, #0
    eed2:	f000 80f8 	beq.w	f0c6 <bt_init+0x2e6>
	return net_buf_simple_add(&buf->b, len);
    eed6:	2107      	movs	r1, #7
    eed8:	300c      	adds	r0, #12
    eeda:	f011 fa39 	bl	20350 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    eede:	4621      	mov	r1, r4
    eee0:	2207      	movs	r2, #7
    eee2:	4606      	mov	r6, r0
    eee4:	f01b fb24 	bl	2a530 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    eee8:	2349      	movs	r3, #73	; 0x49
    eeea:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    eeec:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    eeee:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    eef0:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    eef2:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    eef4:	4639      	mov	r1, r7
    eef6:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    eefa:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    eefc:	f7ff fb6c 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ef00:	4604      	mov	r4, r0
    ef02:	bb20      	cbnz	r0, ef4e <bt_init+0x16e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    ef04:	2101      	movs	r1, #1
    ef06:	f640 4031 	movw	r0, #3121	; 0xc31
    ef0a:	f7ff fb1b 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    ef0e:	4606      	mov	r6, r0
    ef10:	2800      	cmp	r0, #0
    ef12:	f000 80d8 	beq.w	f0c6 <bt_init+0x2e6>
	return net_buf_simple_add_u8(&buf->b, val);
    ef16:	2101      	movs	r1, #1
    ef18:	300c      	adds	r0, #12
    ef1a:	f01e ffea 	bl	2def2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    ef1e:	4622      	mov	r2, r4
    ef20:	4631      	mov	r1, r6
    ef22:	f640 4031 	movw	r0, #3121	; 0xc31
    ef26:	f7ff fb57 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ef2a:	4604      	mov	r4, r0
    ef2c:	b978      	cbnz	r0, ef4e <bt_init+0x16e>
	if (!BT_FEAT_LE(bt_dev.features)) {
    ef2e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    ef32:	0658      	lsls	r0, r3, #25
    ef34:	d40e      	bmi.n	ef54 <bt_init+0x174>
		LOG_ERR("Non-LE capable controller detected!");
    ef36:	4b70      	ldr	r3, [pc, #448]	; (f0f8 <bt_init+0x318>)
		return -ENODEV;
    ef38:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    ef3c:	9305      	str	r3, [sp, #20]
    ef3e:	2302      	movs	r3, #2
    ef40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef44:	486d      	ldr	r0, [pc, #436]	; (f0fc <bt_init+0x31c>)
    ef46:	aa04      	add	r2, sp, #16
    ef48:	9304      	str	r3, [sp, #16]
    ef4a:	f01b fd44 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
}
    ef4e:	4620      	mov	r0, r4
    ef50:	b007      	add	sp, #28
    ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ef54:	466a      	mov	r2, sp
    ef56:	2100      	movs	r1, #0
    ef58:	f242 0003 	movw	r0, #8195	; 0x2003
    ef5c:	f7ff fb3c 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    ef60:	4604      	mov	r4, r0
    ef62:	2800      	cmp	r0, #0
    ef64:	d1f3      	bne.n	ef4e <bt_init+0x16e>
	read_le_features_complete(rsp);
    ef66:	9e00      	ldr	r6, [sp, #0]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    ef68:	2208      	movs	r2, #8
    ef6a:	68f1      	ldr	r1, [r6, #12]
    ef6c:	4864      	ldr	r0, [pc, #400]	; (f100 <bt_init+0x320>)
    ef6e:	3101      	adds	r1, #1
    ef70:	f01b fad3 	bl	2a51a <memcpy>
	net_buf_unref(rsp);
    ef74:	4630      	mov	r0, r6
    ef76:	f011 f8b1 	bl	200dc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    ef7a:	4621      	mov	r1, r4
    ef7c:	466a      	mov	r2, sp
    ef7e:	f242 0002 	movw	r0, #8194	; 0x2002
    ef82:	f7ff fb29 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    ef86:	4604      	mov	r4, r0
    ef88:	2800      	cmp	r0, #0
    ef8a:	d1e0      	bne.n	ef4e <bt_init+0x16e>
		le_read_buffer_size_complete(rsp);
    ef8c:	9c00      	ldr	r4, [sp, #0]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    ef8e:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    ef90:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    ef94:	b291      	uxth	r1, r2
    ef96:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	if (!bt_dev.le.acl_mtu) {
    ef9a:	b121      	cbz	r1, efa6 <bt_init+0x1c6>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    ef9c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ef9e:	4859      	ldr	r0, [pc, #356]	; (f104 <bt_init+0x324>)
    efa0:	4611      	mov	r1, r2
    efa2:	f020 fa37 	bl	2f414 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    efa6:	4620      	mov	r0, r4
    efa8:	f011 f898 	bl	200dc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    efac:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    efb0:	f016 0620 	ands.w	r6, r6, #32
    efb4:	d117      	bne.n	efe6 <bt_init+0x206>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    efb6:	2102      	movs	r1, #2
    efb8:	f640 406d 	movw	r0, #3181	; 0xc6d
    efbc:	f7ff fac2 	bl	e544 <bt_hci_cmd_create>
		if (!buf) {
    efc0:	4604      	mov	r4, r0
    efc2:	2800      	cmp	r0, #0
    efc4:	d07f      	beq.n	f0c6 <bt_init+0x2e6>
	return net_buf_simple_add(&buf->b, len);
    efc6:	2102      	movs	r1, #2
    efc8:	300c      	adds	r0, #12
    efca:	f011 f9c1 	bl	20350 <net_buf_simple_add>
		cp_le->le = 0x01;
    efce:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    efd0:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    efd2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    efd4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    efd6:	4632      	mov	r2, r6
    efd8:	f640 406d 	movw	r0, #3181	; 0xc6d
    efdc:	f7ff fafc 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    efe0:	4604      	mov	r4, r0
    efe2:	2800      	cmp	r0, #0
    efe4:	d1b3      	bne.n	ef4e <bt_init+0x16e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    efe6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
    efea:	0719      	lsls	r1, r3, #28
    efec:	d512      	bpl.n	f014 <bt_init+0x234>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    efee:	466a      	mov	r2, sp
    eff0:	2100      	movs	r1, #0
    eff2:	f242 001c 	movw	r0, #8220	; 0x201c
    eff6:	f7ff faef 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    effa:	4604      	mov	r4, r0
    effc:	2800      	cmp	r0, #0
    effe:	d1a6      	bne.n	ef4e <bt_init+0x16e>
		le_read_supp_states_complete(rsp);
    f000:	9800      	ldr	r0, [sp, #0]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f002:	68c3      	ldr	r3, [r0, #12]
    f004:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f008:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f00c:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
		net_buf_unref(rsp);
    f010:	f011 f864 	bl	200dc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f014:	2108      	movs	r1, #8
    f016:	f242 0001 	movw	r0, #8193	; 0x2001
    f01a:	f7ff fa93 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    f01e:	4604      	mov	r4, r0
    f020:	2800      	cmp	r0, #0
    f022:	d050      	beq.n	f0c6 <bt_init+0x2e6>
    f024:	2108      	movs	r1, #8
    f026:	300c      	adds	r0, #12
    f028:	f011 f992 	bl	20350 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f02c:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    f030:	4a35      	ldr	r2, [pc, #212]	; (f108 <bt_init+0x328>)
    f032:	f013 0f02 	tst.w	r3, #2
    f036:	4b35      	ldr	r3, [pc, #212]	; (f10c <bt_init+0x32c>)
    f038:	bf08      	it	eq
    f03a:	4613      	moveq	r3, r2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f03c:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f040:	4621      	mov	r1, r4
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    f042:	f002 0206 	and.w	r2, r2, #6
    f046:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    f048:	bf08      	it	eq
    f04a:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    f04e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f050:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f054:	2200      	movs	r2, #0
    f056:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f058:	2307      	movs	r3, #7
	dst[1] = val >> 8;
    f05a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f05c:	7083      	strb	r3, [r0, #2]
    f05e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f060:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f062:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f064:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f066:	f242 0001 	movw	r0, #8193	; 0x2001
    f06a:	f7ff fab5 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f06e:	4604      	mov	r4, r0
    f070:	2800      	cmp	r0, #0
    f072:	f47f af6c 	bne.w	ef4e <bt_init+0x16e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f076:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	if (bt_dev.le.acl_mtu) {
    f07a:	f8b5 10bc 	ldrh.w	r1, [r5, #188]	; 0xbc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f07e:	069a      	lsls	r2, r3, #26
    f080:	d424      	bmi.n	f0cc <bt_init+0x2ec>
	if (bt_dev.le.acl_mtu) {
    f082:	b9c9      	cbnz	r1, f0b8 <bt_init+0x2d8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f084:	466a      	mov	r2, sp
    f086:	f241 0005 	movw	r0, #4101	; 0x1005
    f08a:	f7ff faa5 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f08e:	4604      	mov	r4, r0
    f090:	2800      	cmp	r0, #0
    f092:	f47f af5c 	bne.w	ef4e <bt_init+0x16e>
	if (bt_dev.le.acl_mtu) {
    f096:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
	read_buffer_size_complete(rsp);
    f09a:	9c00      	ldr	r4, [sp, #0]
	if (bt_dev.le.acl_mtu) {
    f09c:	b94b      	cbnz	r3, f0b2 <bt_init+0x2d2>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    f09e:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f0a0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f0a4:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f0a8:	889a      	ldrh	r2, [r3, #4]
    f0aa:	4816      	ldr	r0, [pc, #88]	; (f104 <bt_init+0x324>)
    f0ac:	4611      	mov	r1, r2
    f0ae:	f020 f9b1 	bl	2f414 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f0b2:	4620      	mov	r0, r4
    f0b4:	f011 f812 	bl	200dc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f0b8:	2108      	movs	r1, #8
    f0ba:	f640 4001 	movw	r0, #3073	; 0xc01
    f0be:	f7ff fa41 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    f0c2:	4604      	mov	r4, r0
    f0c4:	bb30      	cbnz	r0, f114 <bt_init+0x334>
		return -ENOBUFS;
    f0c6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f0ca:	e740      	b.n	ef4e <bt_init+0x16e>
	else if (!bt_dev.le.acl_mtu) {
    f0cc:	2900      	cmp	r1, #0
    f0ce:	d1f3      	bne.n	f0b8 <bt_init+0x2d8>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    f0d0:	4b0f      	ldr	r3, [pc, #60]	; (f110 <bt_init+0x330>)
    f0d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f0d6:	9305      	str	r3, [sp, #20]
    f0d8:	2302      	movs	r3, #2
    f0da:	4808      	ldr	r0, [pc, #32]	; (f0fc <bt_init+0x31c>)
    f0dc:	aa04      	add	r2, sp, #16
    f0de:	9304      	str	r3, [sp, #16]
		return -EIO;
    f0e0:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    f0e4:	f01b fc77 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
	if (err) {
    f0e8:	e731      	b.n	ef4e <bt_init+0x16e>
    f0ea:	bf00      	nop
    f0ec:	20008380 	.word	0x20008380
    f0f0:	200083ac 	.word	0x200083ac
    f0f4:	200083b4 	.word	0x200083b4
    f0f8:	00031eac 	.word	0x00031eac
    f0fc:	0002fc34 	.word	0x0002fc34
    f100:	20008410 	.word	0x20008410
    f104:	20008440 	.word	0x20008440
    f108:	0007120e 	.word	0x0007120e
    f10c:	0007122e 	.word	0x0007122e
    f110:	00031ed0 	.word	0x00031ed0
    f114:	2108      	movs	r1, #8
    f116:	300c      	adds	r0, #12
    f118:	f011 f91a 	bl	20350 <net_buf_simple_add>
	dst[0] = val;
    f11c:	2310      	movs	r3, #16
    f11e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f120:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f122:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f124:	7043      	strb	r3, [r0, #1]
    f126:	2602      	movs	r6, #2
    f128:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f12a:	4621      	mov	r1, r4
	dst[0] = val;
    f12c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f12e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f130:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f132:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f134:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f136:	71c3      	strb	r3, [r0, #7]
    f138:	f640 4001 	movw	r0, #3073	; 0xc01
    f13c:	f7ff fa4c 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f140:	4604      	mov	r4, r0
    f142:	2800      	cmp	r0, #0
    f144:	f47f af03 	bne.w	ef4e <bt_init+0x16e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f148:	4601      	mov	r1, r0
    f14a:	466a      	mov	r2, sp
    f14c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f150:	f7ff fa42 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f154:	4604      	mov	r4, r0
    f156:	bb48      	cbnz	r0, f1ac <bt_init+0x3cc>
	net_buf_unref(rsp);
    f158:	9800      	ldr	r0, [sp, #0]
    f15a:	f010 ffbf 	bl	200dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f15e:	4621      	mov	r1, r4
    f160:	466a      	mov	r2, sp
    f162:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f166:	f7ff fa37 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f16a:	4604      	mov	r4, r0
    f16c:	b9f0      	cbnz	r0, f1ac <bt_init+0x3cc>
	rp.cmds = (void *)rsp->data;
    f16e:	9f00      	ldr	r7, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f170:	4632      	mov	r2, r6
    f172:	68f9      	ldr	r1, [r7, #12]
    f174:	4819      	ldr	r0, [pc, #100]	; (f1dc <bt_init+0x3fc>)
    f176:	3101      	adds	r1, #1
    f178:	f01b f9cf 	bl	2a51a <memcpy>
	net_buf_unref(rsp);
    f17c:	4638      	mov	r0, r7
    f17e:	f010 ffad 	bl	200dc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f182:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f186:	075b      	lsls	r3, r3, #29
    f188:	d510      	bpl.n	f1ac <bt_init+0x3cc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f18a:	466a      	mov	r2, sp
    f18c:	4621      	mov	r1, r4
    f18e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f192:	f7ff fa21 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    f196:	b948      	cbnz	r0, f1ac <bt_init+0x3cc>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f198:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f19a:	9c00      	ldr	r4, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f19c:	4810      	ldr	r0, [pc, #64]	; (f1e0 <bt_init+0x400>)
    f19e:	68e1      	ldr	r1, [r4, #12]
    f1a0:	4411      	add	r1, r2
    f1a2:	f01b f9ba 	bl	2a51a <memcpy>
		net_buf_unref(rsp);
    f1a6:	4620      	mov	r0, r4
    f1a8:	f010 ff98 	bl	200dc <net_buf_unref>
	err = bt_id_init();
    f1ac:	f01b fcf2 	bl	2ab94 <bt_id_init>
	if (err) {
    f1b0:	4604      	mov	r4, r0
    f1b2:	2800      	cmp	r0, #0
    f1b4:	f47f aecb 	bne.w	ef4e <bt_init+0x16e>
		err = bt_conn_init();
    f1b8:	f002 fb98 	bl	118ec <bt_conn_init>
		if (err) {
    f1bc:	4604      	mov	r4, r0
    f1be:	2800      	cmp	r0, #0
    f1c0:	f47f aec5 	bne.w	ef4e <bt_init+0x16e>
		if (!bt_dev.id_count) {
    f1c4:	79eb      	ldrb	r3, [r5, #7]
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	f43f aec1 	beq.w	ef4e <bt_init+0x16e>
    f1cc:	2108      	movs	r1, #8
    f1ce:	4805      	ldr	r0, [pc, #20]	; (f1e4 <bt_init+0x404>)
    f1d0:	f01b fbf6 	bl	2a9c0 <atomic_or>
	bt_finalize_init();
    f1d4:	f7ff fdf8 	bl	edc8 <bt_finalize_init>
	return 0;
    f1d8:	e6b9      	b.n	ef4e <bt_init+0x16e>
    f1da:	bf00      	nop
    f1dc:	200083f5 	.word	0x200083f5
    f1e0:	200083f4 	.word	0x200083f4
    f1e4:	20008408 	.word	0x20008408

0000f1e8 <init_work>:
{
    f1e8:	b510      	push	{r4, lr}
	err = bt_init();
    f1ea:	f7ff fdf9 	bl	ede0 <bt_init>
	if (ready_cb) {
    f1ee:	4b03      	ldr	r3, [pc, #12]	; (f1fc <init_work+0x14>)
    f1f0:	681b      	ldr	r3, [r3, #0]
    f1f2:	b113      	cbz	r3, f1fa <init_work+0x12>
}
    f1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f1f8:	4718      	bx	r3
}
    f1fa:	bd10      	pop	{r4, pc}
    f1fc:	2000a714 	.word	0x2000a714

0000f200 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    f200:	b5f0      	push	{r4, r5, r6, r7, lr}
    f202:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    f204:	4d3d      	ldr	r5, [pc, #244]	; (f2fc <bt_enable+0xfc>)
{
    f206:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f208:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    f20c:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    f20e:	b983      	cbnz	r3, f232 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
    f210:	4b3b      	ldr	r3, [pc, #236]	; (f300 <bt_enable+0x100>)
		return -ENODEV;
    f212:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
    f216:	617b      	str	r3, [r7, #20]
    f218:	2302      	movs	r3, #2
    f21a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f21e:	4839      	ldr	r0, [pc, #228]	; (f304 <bt_enable+0x104>)
    f220:	613b      	str	r3, [r7, #16]
    f222:	f107 0210 	add.w	r2, r7, #16
    f226:	f01b fbd6 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    f22a:	4620      	mov	r0, r4
    f22c:	371c      	adds	r7, #28
    f22e:	46bd      	mov	sp, r7
    f230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f232:	f06f 0102 	mvn.w	r1, #2
    f236:	f105 0088 	add.w	r0, r5, #136	; 0x88
    f23a:	f01b fbcf 	bl	2a9dc <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f23e:	2101      	movs	r1, #1
    f240:	f01b fbbe 	bl	2a9c0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f244:	07c3      	lsls	r3, r0, #31
    f246:	d456      	bmi.n	f2f6 <bt_enable+0xf6>
		err = bt_settings_init();
    f248:	f7fe fd2e 	bl	dca8 <bt_settings_init>
		if (err) {
    f24c:	4604      	mov	r4, r0
    f24e:	2800      	cmp	r0, #0
    f250:	d1eb      	bne.n	f22a <bt_enable+0x2a>
	ready_cb = cb;
    f252:	4b2d      	ldr	r3, [pc, #180]	; (f308 <bt_enable+0x108>)
    f254:	601e      	str	r6, [r3, #0]
    f256:	2201      	movs	r2, #1
    f258:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    f25c:	4611      	mov	r1, r2
    f25e:	f020 f8d9 	bl	2f414 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    f262:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
    f266:	f020 f8b3 	bl	2f3d0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f26a:	2200      	movs	r2, #0
    f26c:	2300      	movs	r3, #0
    f26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f272:	f06f 0308 	mvn.w	r3, #8
    f276:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f27a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f27e:	e9cd 4400 	strd	r4, r4, [sp]
    f282:	4b22      	ldr	r3, [pc, #136]	; (f30c <bt_enable+0x10c>)
    f284:	4922      	ldr	r1, [pc, #136]	; (f310 <bt_enable+0x110>)
    f286:	9404      	str	r4, [sp, #16]
    f288:	4822      	ldr	r0, [pc, #136]	; (f314 <bt_enable+0x114>)
    f28a:	f016 fa17 	bl	256bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    f28e:	4922      	ldr	r1, [pc, #136]	; (f318 <bt_enable+0x118>)
    f290:	4820      	ldr	r0, [pc, #128]	; (f314 <bt_enable+0x114>)
    f292:	f020 f874 	bl	2f37e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    f296:	4821      	ldr	r0, [pc, #132]	; (f31c <bt_enable+0x11c>)
    f298:	f017 f818 	bl	262cc <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    f29c:	f06f 0307 	mvn.w	r3, #7
    f2a0:	f640 0266 	movw	r2, #2150	; 0x866
    f2a4:	491e      	ldr	r1, [pc, #120]	; (f320 <bt_enable+0x120>)
    f2a6:	481d      	ldr	r0, [pc, #116]	; (f31c <bt_enable+0x11c>)
    f2a8:	9400      	str	r4, [sp, #0]
    f2aa:	f017 f825 	bl	262f8 <k_work_queue_start>
    f2ae:	491d      	ldr	r1, [pc, #116]	; (f324 <bt_enable+0x124>)
    f2b0:	481a      	ldr	r0, [pc, #104]	; (f31c <bt_enable+0x11c>)
    f2b2:	f020 f864 	bl	2f37e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f2b6:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    f2ba:	68db      	ldr	r3, [r3, #12]
    f2bc:	4798      	blx	r3
	if (err) {
    f2be:	4604      	mov	r4, r0
    f2c0:	b178      	cbz	r0, f2e2 <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
    f2c2:	466d      	mov	r5, sp
    f2c4:	b088      	sub	sp, #32
    f2c6:	462a      	mov	r2, r5
    f2c8:	4b17      	ldr	r3, [pc, #92]	; (f328 <bt_enable+0x128>)
    f2ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f2ce:	e9c5 3005 	strd	r3, r0, [r5, #20]
    f2d2:	2303      	movs	r3, #3
    f2d4:	480b      	ldr	r0, [pc, #44]	; (f304 <bt_enable+0x104>)
    f2d6:	f842 3f10 	str.w	r3, [r2, #16]!
    f2da:	f01b fb7c 	bl	2a9d6 <z_log_msg_static_create.constprop.0>
    f2de:	46ad      	mov	sp, r5
		return err;
    f2e0:	e7a3      	b.n	f22a <bt_enable+0x2a>
	if (!cb) {
    f2e2:	b91e      	cbnz	r6, f2ec <bt_enable+0xec>
		return bt_init();
    f2e4:	f7ff fd7c 	bl	ede0 <bt_init>
    f2e8:	4604      	mov	r4, r0
    f2ea:	e79e      	b.n	f22a <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    f2ec:	f105 0078 	add.w	r0, r5, #120	; 0x78
    f2f0:	f016 ffe6 	bl	262c0 <k_work_submit>
	return 0;
    f2f4:	e799      	b.n	f22a <bt_enable+0x2a>
		return -EALREADY;
    f2f6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f2fa:	e796      	b.n	f22a <bt_enable+0x2a>
    f2fc:	20008380 	.word	0x20008380
    f300:	00031ef3 	.word	0x00031ef3
    f304:	0002fc34 	.word	0x0002fc34
    f308:	2000a714 	.word	0x2000a714
    f30c:	0000eb41 	.word	0x0000eb41
    f310:	2000c468 	.word	0x2000c468
    f314:	20009a10 	.word	0x20009a10
    f318:	00031f0c 	.word	0x00031f0c
    f31c:	20009a98 	.word	0x20009a98
    f320:	2000c868 	.word	0x2000c868
    f324:	00031f12 	.word	0x00031f12
    f328:	00031f18 	.word	0x00031f18

0000f32c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f32c:	4b02      	ldr	r3, [pc, #8]	; (f338 <bt_is_ready+0xc>)
    f32e:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    f332:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f336:	4770      	bx	lr
    f338:	20008408 	.word	0x20008408

0000f33c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    f33c:	4800      	ldr	r0, [pc, #0]	; (f340 <bt_get_name+0x4>)
    f33e:	4770      	bx	lr
    f340:	00031f34 	.word	0x00031f34

0000f344 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f346:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    f348:	2500      	movs	r5, #0
    f34a:	4f09      	ldr	r7, [pc, #36]	; (f370 <id_find+0x2c>)
    f34c:	79fb      	ldrb	r3, [r7, #7]
    f34e:	b2ec      	uxtb	r4, r5
    f350:	42a3      	cmp	r3, r4
    f352:	d802      	bhi.n	f35a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    f354:	f06f 0001 	mvn.w	r0, #1
    f358:	e009      	b.n	f36e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    f35a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    f35e:	4630      	mov	r0, r6
    f360:	4439      	add	r1, r7
    f362:	f01b fba2 	bl	2aaaa <bt_addr_le_eq>
    f366:	3501      	adds	r5, #1
    f368:	2800      	cmp	r0, #0
    f36a:	d0ef      	beq.n	f34c <id_find+0x8>
    f36c:	4620      	mov	r0, r4
}
    f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f370:	20008380 	.word	0x20008380

0000f374 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    f374:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f376:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f378:	460d      	mov	r5, r1
    f37a:	b1b1      	cbz	r1, f3aa <id_create.constprop.0+0x36>
    f37c:	4628      	mov	r0, r5
    f37e:	4917      	ldr	r1, [pc, #92]	; (f3dc <id_create.constprop.0+0x68>)
    f380:	f01b fb93 	bl	2aaaa <bt_addr_le_eq>
    f384:	b988      	cbnz	r0, f3aa <id_create.constprop.0+0x36>
	memcpy(dst, src, sizeof(*dst));
    f386:	2207      	movs	r2, #7
    f388:	4629      	mov	r1, r5
    f38a:	4815      	ldr	r0, [pc, #84]	; (f3e0 <id_create.constprop.0+0x6c>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    f38c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f390:	4420      	add	r0, r4
    f392:	f01b f8c2 	bl	2a51a <memcpy>
    f396:	4b13      	ldr	r3, [pc, #76]	; (f3e4 <id_create.constprop.0+0x70>)
    f398:	e8d3 3faf 	lda	r3, [r3]
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    f39c:	075b      	lsls	r3, r3, #29
    f39e:	d501      	bpl.n	f3a4 <id_create.constprop.0+0x30>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
    f3a0:	f7fe fc38 	bl	dc14 <bt_settings_save_id>
	}

	return 0;
    f3a4:	2000      	movs	r0, #0
}
    f3a6:	b003      	add	sp, #12
    f3a8:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    f3aa:	4668      	mov	r0, sp
    f3ac:	f01b fae7 	bl	2a97e <bt_addr_le_create_static>
			if (err) {
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d1f8      	bne.n	f3a6 <id_create.constprop.0+0x32>
		} while (id_find(&new_addr) >= 0);
    f3b4:	4668      	mov	r0, sp
    f3b6:	f7ff ffc5 	bl	f344 <id_find>
    f3ba:	2800      	cmp	r0, #0
    f3bc:	daf5      	bge.n	f3aa <id_create.constprop.0+0x36>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    f3be:	4b08      	ldr	r3, [pc, #32]	; (f3e0 <id_create.constprop.0+0x6c>)
    f3c0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f3c4:	441c      	add	r4, r3
    f3c6:	2207      	movs	r2, #7
    f3c8:	4669      	mov	r1, sp
    f3ca:	4620      	mov	r0, r4
    f3cc:	f01b f8a5 	bl	2a51a <memcpy>
		if (addr) {
    f3d0:	2d00      	cmp	r5, #0
    f3d2:	d0e0      	beq.n	f396 <id_create.constprop.0+0x22>
    f3d4:	2207      	movs	r2, #7
    f3d6:	4621      	mov	r1, r4
    f3d8:	4628      	mov	r0, r5
    f3da:	e7da      	b.n	f392 <id_create.constprop.0+0x1e>
    f3dc:	00031ac5 	.word	0x00031ac5
    f3e0:	20008380 	.word	0x20008380
    f3e4:	20008408 	.word	0x20008408

0000f3e8 <bt_id_set_private_addr>:
{
    f3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
    f3ea:	bb78      	cbnz	r0, f44c <bt_id_set_private_addr+0x64>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f3ec:	2106      	movs	r1, #6
    f3ee:	4668      	mov	r0, sp
    f3f0:	f001 fa76 	bl	108e0 <bt_rand>
	if (err) {
    f3f4:	4604      	mov	r4, r0
    f3f6:	bb30      	cbnz	r0, f446 <bt_id_set_private_addr+0x5e>
	BT_ADDR_SET_NRPA(&nrpa);
    f3f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return memcmp(a, b, sizeof(*a));
    f3fc:	2206      	movs	r2, #6
    f3fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f402:	4668      	mov	r0, sp
    f404:	4915      	ldr	r1, [pc, #84]	; (f45c <bt_id_set_private_addr+0x74>)
    f406:	f88d 3005 	strb.w	r3, [sp, #5]
    f40a:	f01b f85f 	bl	2a4cc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f40e:	b1d0      	cbz	r0, f446 <bt_id_set_private_addr+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f410:	2106      	movs	r1, #6
    f412:	f242 0005 	movw	r0, #8197	; 0x2005
    f416:	f7ff f895 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    f41a:	4605      	mov	r5, r0
    f41c:	b1c8      	cbz	r0, f452 <bt_id_set_private_addr+0x6a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f41e:	2206      	movs	r2, #6
    f420:	4669      	mov	r1, sp
    f422:	300c      	adds	r0, #12
    f424:	f01e fd59 	bl	2deda <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f428:	4622      	mov	r2, r4
    f42a:	4629      	mov	r1, r5
    f42c:	f242 0005 	movw	r0, #8197	; 0x2005
    f430:	f7ff f8d2 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f434:	b980      	cbnz	r0, f458 <bt_id_set_private_addr+0x70>
	memcpy(dst, src, sizeof(*dst));
    f436:	2206      	movs	r2, #6
    f438:	4669      	mov	r1, sp
    f43a:	4808      	ldr	r0, [pc, #32]	; (f45c <bt_id_set_private_addr+0x74>)
    f43c:	f01b f86d 	bl	2a51a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f440:	2201      	movs	r2, #1
    f442:	4b07      	ldr	r3, [pc, #28]	; (f460 <bt_id_set_private_addr+0x78>)
    f444:	771a      	strb	r2, [r3, #28]
}
    f446:	4620      	mov	r0, r4
    f448:	b003      	add	sp, #12
    f44a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    f44c:	f06f 0415 	mvn.w	r4, #21
    f450:	e7f9      	b.n	f446 <bt_id_set_private_addr+0x5e>
		return -ENOBUFS;
    f452:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f456:	e7f6      	b.n	f446 <bt_id_set_private_addr+0x5e>
    f458:	4604      	mov	r4, r0
    f45a:	e7f4      	b.n	f446 <bt_id_set_private_addr+0x5e>
    f45c:	2000839d 	.word	0x2000839d
    f460:	20008380 	.word	0x20008380

0000f464 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    f464:	b570      	push	{r4, r5, r6, lr}
    f466:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f468:	4604      	mov	r4, r0
{
    f46a:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f46c:	b920      	cbnz	r0, f478 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f46e:	b325      	cbz	r5, f4ba <bt_id_create+0x56>
			return -EINVAL;
    f470:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    f474:	b006      	add	sp, #24
    f476:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    f478:	4921      	ldr	r1, [pc, #132]	; (f500 <bt_id_create+0x9c>)
    f47a:	f01b fb16 	bl	2aaaa <bt_addr_le_eq>
    f47e:	2800      	cmp	r0, #0
    f480:	d1f5      	bne.n	f46e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f482:	7823      	ldrb	r3, [r4, #0]
    f484:	2b01      	cmp	r3, #1
    f486:	d104      	bne.n	f492 <bt_id_create+0x2e>
    f488:	79a3      	ldrb	r3, [r4, #6]
    f48a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f48e:	2bc0      	cmp	r3, #192	; 0xc0
    f490:	d00b      	beq.n	f4aa <bt_id_create+0x46>
			LOG_ERR("Only static random identity address supported");
    f492:	4b1c      	ldr	r3, [pc, #112]	; (f504 <bt_id_create+0xa0>)
    f494:	9305      	str	r3, [sp, #20]
    f496:	2302      	movs	r3, #2
    f498:	9304      	str	r3, [sp, #16]
    f49a:	2300      	movs	r3, #0
    f49c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f4a0:	4819      	ldr	r0, [pc, #100]	; (f508 <bt_id_create+0xa4>)
    f4a2:	aa04      	add	r2, sp, #16
    f4a4:	f7fb fb5a 	bl	ab5c <z_impl_z_log_msg_static_create>
			return -EINVAL;
    f4a8:	e7e2      	b.n	f470 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    f4aa:	4620      	mov	r0, r4
    f4ac:	f7ff ff4a 	bl	f344 <id_find>
    f4b0:	2800      	cmp	r0, #0
    f4b2:	dbdc      	blt.n	f46e <bt_id_create+0xa>
			return -EALREADY;
    f4b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f4b8:	e7dc      	b.n	f474 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f4ba:	4d14      	ldr	r5, [pc, #80]	; (f50c <bt_id_create+0xa8>)
    f4bc:	79eb      	ldrb	r3, [r5, #7]
    f4be:	2b01      	cmp	r3, #1
    f4c0:	d01a      	beq.n	f4f8 <bt_id_create+0x94>
    f4c2:	f105 0388 	add.w	r3, r5, #136	; 0x88
    f4c6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f4ca:	07db      	lsls	r3, r3, #31
    f4cc:	d50b      	bpl.n	f4e6 <bt_id_create+0x82>
	new_id = bt_dev.id_count;
    f4ce:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    f4d0:	4621      	mov	r1, r4
    f4d2:	4630      	mov	r0, r6
    f4d4:	f7ff ff4e 	bl	f374 <id_create.constprop.0>
	if (err) {
    f4d8:	2800      	cmp	r0, #0
    f4da:	d1cb      	bne.n	f474 <bt_id_create+0x10>
		bt_dev.id_count++;
    f4dc:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    f4de:	4630      	mov	r0, r6
		bt_dev.id_count++;
    f4e0:	3301      	adds	r3, #1
    f4e2:	71eb      	strb	r3, [r5, #7]
	return new_id;
    f4e4:	e7c6      	b.n	f474 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    f4e6:	2c00      	cmp	r4, #0
    f4e8:	d0c2      	beq.n	f470 <bt_id_create+0xc>
    f4ea:	4620      	mov	r0, r4
    f4ec:	4904      	ldr	r1, [pc, #16]	; (f500 <bt_id_create+0x9c>)
    f4ee:	f01b fadc 	bl	2aaaa <bt_addr_le_eq>
    f4f2:	2800      	cmp	r0, #0
    f4f4:	d0eb      	beq.n	f4ce <bt_id_create+0x6a>
    f4f6:	e7bb      	b.n	f470 <bt_id_create+0xc>
		return -ENOMEM;
    f4f8:	f06f 000b 	mvn.w	r0, #11
    f4fc:	e7ba      	b.n	f474 <bt_id_create+0x10>
    f4fe:	bf00      	nop
    f500:	00031ac5 	.word	0x00031ac5
    f504:	00031f50 	.word	0x00031f50
    f508:	0002fc4c 	.word	0x0002fc4c
    f50c:	20008380 	.word	0x20008380

0000f510 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    f510:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    f512:	4604      	mov	r4, r0
    f514:	b198      	cbz	r0, f53e <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f516:	2100      	movs	r1, #0
    f518:	f241 0009 	movw	r0, #4105	; 0x1009
    f51c:	aa01      	add	r2, sp, #4
    f51e:	f7ff f85b 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f522:	4606      	mov	r6, r0
    f524:	b958      	cbnz	r0, f53e <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    f526:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    f528:	2206      	movs	r2, #6

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f52a:	68dd      	ldr	r5, [r3, #12]
    f52c:	490e      	ldr	r1, [pc, #56]	; (f568 <bt_id_read_public_addr+0x58>)
    f52e:	3501      	adds	r5, #1
    f530:	4628      	mov	r0, r5
    f532:	f01a ffcb 	bl	2a4cc <memcmp>
    f536:	b928      	cbnz	r0, f544 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
    f538:	9801      	ldr	r0, [sp, #4]
    f53a:	f010 fdcf 	bl	200dc <net_buf_unref>
		return 0U;
    f53e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    f540:	b002      	add	sp, #8
    f542:	bd70      	pop	{r4, r5, r6, pc}
    f544:	2206      	movs	r2, #6
    f546:	4628      	mov	r0, r5
    f548:	4908      	ldr	r1, [pc, #32]	; (f56c <bt_id_read_public_addr+0x5c>)
    f54a:	f01a ffbf 	bl	2a4cc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f54e:	2800      	cmp	r0, #0
    f550:	d0f2      	beq.n	f538 <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    f552:	2206      	movs	r2, #6
    f554:	4629      	mov	r1, r5
    f556:	1c60      	adds	r0, r4, #1
    f558:	f01a ffdf 	bl	2a51a <memcpy>
	net_buf_unref(rsp);
    f55c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f55e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    f560:	f010 fdbc 	bl	200dc <net_buf_unref>
	return 1U;
    f564:	2001      	movs	r0, #1
    f566:	e7eb      	b.n	f540 <bt_id_read_public_addr+0x30>
    f568:	00031ad2 	.word	0x00031ad2
    f56c:	00031acc 	.word	0x00031acc

0000f570 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    f570:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    f572:	4668      	mov	r0, sp
    f574:	f7ff ffcc 	bl	f510 <bt_id_read_public_addr>
    f578:	4b04      	ldr	r3, [pc, #16]	; (f58c <bt_setup_public_id_addr+0x1c>)
    f57a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    f57c:	b118      	cbz	r0, f586 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    f57e:	4669      	mov	r1, sp
    f580:	2000      	movs	r0, #0
    f582:	f7ff fef7 	bl	f374 <id_create.constprop.0>
}
    f586:	b003      	add	sp, #12
    f588:	f85d fb04 	ldr.w	pc, [sp], #4
    f58c:	20008380 	.word	0x20008380

0000f590 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    f590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f594:	4b16      	ldr	r3, [pc, #88]	; (f5f0 <bt_read_static_addr+0x60>)
{
    f596:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f598:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
{
    f59c:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    f59e:	07db      	lsls	r3, r3, #31
    f5a0:	d404      	bmi.n	f5ac <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
    f5a2:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    f5a4:	4630      	mov	r0, r6
    f5a6:	b002      	add	sp, #8
    f5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    f5ac:	2100      	movs	r1, #0
    f5ae:	f64f 4009 	movw	r0, #64521	; 0xfc09
    f5b2:	aa01      	add	r2, sp, #4
    f5b4:	f7ff f810 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    f5b8:	4604      	mov	r4, r0
    f5ba:	2800      	cmp	r0, #0
    f5bc:	d1f1      	bne.n	f5a2 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    f5be:	9b01      	ldr	r3, [sp, #4]
    f5c0:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    f5c2:	786e      	ldrb	r6, [r5, #1]
    f5c4:	3502      	adds	r5, #2
    f5c6:	4546      	cmp	r6, r8
    f5c8:	bf28      	it	cs
    f5ca:	4646      	movcs	r6, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f5cc:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    f5d0:	42a6      	cmp	r6, r4
    f5d2:	dc03      	bgt.n	f5dc <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	f010 fd81 	bl	200dc <net_buf_unref>
	if (!cnt) {
    f5da:	e7e3      	b.n	f5a4 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    f5dc:	4629      	mov	r1, r5
    f5de:	fb08 7004 	mla	r0, r8, r4, r7
    f5e2:	2216      	movs	r2, #22
    f5e4:	f01a ff99 	bl	2a51a <memcpy>
	for (i = 0; i < cnt; i++) {
    f5e8:	3401      	adds	r4, #1
    f5ea:	3516      	adds	r5, #22
    f5ec:	e7f0      	b.n	f5d0 <bt_read_static_addr+0x40>
    f5ee:	bf00      	nop
    f5f0:	20008380 	.word	0x20008380

0000f5f4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    f5f6:	4e15      	ldr	r6, [pc, #84]	; (f64c <bt_setup_random_id_addr+0x58>)
{
    f5f8:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    f5fa:	79f4      	ldrb	r4, [r6, #7]
    f5fc:	b92c      	cbnz	r4, f60a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    f5fe:	2101      	movs	r1, #1
    f600:	a802      	add	r0, sp, #8
    f602:	f7ff ffc5 	bl	f590 <bt_read_static_addr>
    f606:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    f608:	b9c8      	cbnz	r0, f63e <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    f60a:	2100      	movs	r1, #0
    f60c:	4608      	mov	r0, r1
}
    f60e:	b009      	add	sp, #36	; 0x24
    f610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    f614:	f7ff bf26 	b.w	f464 <bt_id_create>
    f618:	ab02      	add	r3, sp, #8
    f61a:	fb07 3105 	mla	r1, r7, r5, r3
    f61e:	2206      	movs	r2, #6
    f620:	f10d 0001 	add.w	r0, sp, #1
    f624:	f01a ff79 	bl	2a51a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    f628:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    f62a:	4669      	mov	r1, sp
    f62c:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    f62e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    f632:	f7ff fe9f 	bl	f374 <id_create.constprop.0>
				if (err) {
    f636:	3401      	adds	r4, #1
    f638:	b110      	cbz	r0, f640 <bt_setup_random_id_addr+0x4c>
}
    f63a:	b009      	add	sp, #36	; 0x24
    f63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    f63e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    f640:	79f3      	ldrb	r3, [r6, #7]
    f642:	b2e5      	uxtb	r5, r4
    f644:	42ab      	cmp	r3, r5
    f646:	d8e7      	bhi.n	f618 <bt_setup_random_id_addr+0x24>
			return 0;
    f648:	2000      	movs	r0, #0
    f64a:	e7f6      	b.n	f63a <bt_setup_random_id_addr+0x46>
    f64c:	20008380 	.word	0x20008380

0000f650 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    f650:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
    f652:	460c      	mov	r4, r1
    f654:	b149      	cbz	r1, f66a <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    f656:	4b06      	ldr	r3, [pc, #24]	; (f670 <bt_id_set_scan_own_addr+0x20>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    f658:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    f65e:	f7ff fec3 	bl	f3e8 <bt_id_set_private_addr>
			if (err) {
    f662:	b908      	cbnz	r0, f668 <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    f664:	2301      	movs	r3, #1
    f666:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    f668:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f66a:	f06f 0015 	mvn.w	r0, #21
    f66e:	e7fb      	b.n	f668 <bt_id_set_scan_own_addr+0x18>
    f670:	20008380 	.word	0x20008380

0000f674 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f678:	4690      	mov	r8, r2
    f67a:	460e      	mov	r6, r1
    f67c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    f67e:	4602      	mov	r2, r0
    f680:	2800      	cmp	r0, #0
    f682:	d04b      	beq.n	f71c <bt_id_set_adv_own_addr+0xa8>
    f684:	2b00      	cmp	r3, #0
    f686:	d049      	beq.n	f71c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f688:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    f68a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f68c:	d531      	bpl.n	f6f2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f68e:	4f25      	ldr	r7, [pc, #148]	; (f724 <bt_id_set_adv_own_addr+0xb0>)
    f690:	f1b8 0f00 	cmp.w	r8, #0
    f694:	d013      	beq.n	f6be <bt_id_set_adv_own_addr+0x4a>
    f696:	0688      	lsls	r0, r1, #26
    f698:	d40a      	bmi.n	f6b0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f69a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    f69e:	5cfb      	ldrb	r3, [r7, r3]
    f6a0:	2b01      	cmp	r3, #1
    f6a2:	d015      	beq.n	f6d0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    f6a4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f6a6:	06b2      	lsls	r2, r6, #26
    f6a8:	d50f      	bpl.n	f6ca <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f6aa:	f043 0302 	orr.w	r3, r3, #2
    f6ae:	e00b      	b.n	f6c8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f6b0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
    f6b4:	0659      	lsls	r1, r3, #25
    f6b6:	d4f0      	bmi.n	f69a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    f6b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f6bc:	e006      	b.n	f6cc <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f6be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    f6c2:	5cfb      	ldrb	r3, [r7, r3]
    f6c4:	2b01      	cmp	r3, #1
    f6c6:	d003      	beq.n	f6d0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    f6c8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    f6ca:	2000      	movs	r0, #0
}
    f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    f6d0:	2107      	movs	r1, #7
    f6d2:	fb01 7104 	mla	r1, r1, r4, r7
    f6d6:	4610      	mov	r0, r2
    f6d8:	3101      	adds	r1, #1
    f6da:	f01b f9f3 	bl	2aac4 <bt_id_set_adv_random_addr>
				if (err) {
    f6de:	2800      	cmp	r0, #0
    f6e0:	d1f4      	bne.n	f6cc <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    f6e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f6e6:	5d3b      	ldrb	r3, [r7, r4]
    f6e8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f6ea:	f1b8 0f00 	cmp.w	r8, #0
    f6ee:	d0ec      	beq.n	f6ca <bt_id_set_adv_own_addr+0x56>
    f6f0:	e7d9      	b.n	f6a6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f6f2:	074b      	lsls	r3, r1, #29
    f6f4:	d50e      	bpl.n	f714 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f6f6:	4e0b      	ldr	r6, [pc, #44]	; (f724 <bt_id_set_adv_own_addr+0xb0>)
    f6f8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    f6fc:	5df3      	ldrb	r3, [r6, r7]
    f6fe:	2b01      	cmp	r3, #1
    f700:	d1e2      	bne.n	f6c8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    f702:	2107      	movs	r1, #7
    f704:	fb11 3104 	smlabb	r1, r1, r4, r3
    f708:	4431      	add	r1, r6
    f70a:	f01b f9db 	bl	2aac4 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    f70e:	5df3      	ldrb	r3, [r6, r7]
    f710:	702b      	strb	r3, [r5, #0]
		if (err) {
    f712:	e7db      	b.n	f6cc <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    f714:	f01b fa1b 	bl	2ab4e <bt_id_set_adv_private_addr>
    f718:	2301      	movs	r3, #1
    f71a:	e7f9      	b.n	f710 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    f71c:	f06f 0015 	mvn.w	r0, #21
    f720:	e7d4      	b.n	f6cc <bt_id_set_adv_own_addr+0x58>
    f722:	bf00      	nop
    f724:	20008380 	.word	0x20008380

0000f728 <le_adv_stop_free_conn>:
	*out_conn = conn;
	return 0;
}

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
    f728:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f72a:	f100 0609 	add.w	r6, r0, #9
{
    f72e:	4604      	mov	r4, r0
    f730:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    f732:	2207      	movs	r2, #7
    f734:	4630      	mov	r0, r6
    f736:	490c      	ldr	r1, [pc, #48]	; (f768 <le_adv_stop_free_conn+0x40>)
    f738:	f01a fec8 	bl	2a4cc <memcmp>
    f73c:	4603      	mov	r3, r0
    f73e:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f740:	b973      	cbnz	r3, f760 <le_adv_stop_free_conn+0x38>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    f742:	2204      	movs	r2, #4
    f744:	4909      	ldr	r1, [pc, #36]	; (f76c <le_adv_stop_free_conn+0x44>)
					       BT_CONN_CONNECTING_ADV);
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    f746:	f001 fef5 	bl	11534 <bt_conn_lookup_state_le>
    f74a:	4604      	mov	r4, r0
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
    f74c:	b158      	cbz	r0, f766 <le_adv_stop_free_conn+0x3e>
		conn->err = status;
    f74e:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f750:	2100      	movs	r1, #0
    f752:	f001 fd23 	bl	1119c <bt_conn_set_state>
		bt_conn_unref(conn);
    f756:	4620      	mov	r0, r4
	}
}
    f758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    f75c:	f001 bcee 	b.w	1113c <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    f760:	2205      	movs	r2, #5
    f762:	4631      	mov	r1, r6
    f764:	e7ef      	b.n	f746 <le_adv_stop_free_conn+0x1e>
}
    f766:	bd70      	pop	{r4, r5, r6, pc}
    f768:	00031ac5 	.word	0x00031ac5
    f76c:	00031abe 	.word	0x00031abe

0000f770 <adv_new>:
{
    f770:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f772:	4e0d      	ldr	r6, [pc, #52]	; (f7a8 <adv_new+0x38>)
    f774:	4630      	mov	r0, r6
    f776:	f01b fa1e 	bl	2abb6 <atomic_get>
		if (!atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
    f77a:	f010 0501 	ands.w	r5, r0, #1
    f77e:	d111      	bne.n	f7a4 <adv_new+0x34>
	(void)memset(adv, 0, sizeof(*adv));
    f780:	f1a6 0410 	sub.w	r4, r6, #16
    f784:	2250      	movs	r2, #80	; 0x50
    f786:	4629      	mov	r1, r5
    f788:	4620      	mov	r0, r4
    f78a:	f01a fed1 	bl	2a530 <memset>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f78e:	e8d6 3fef 	ldaex	r3, [r6]
    f792:	f043 0301 	orr.w	r3, r3, #1
    f796:	e8c6 3fe2 	stlex	r2, r3, [r6]
    f79a:	2a00      	cmp	r2, #0
    f79c:	d1f7      	bne.n	f78e <adv_new+0x1e>
	adv->handle = i;
    f79e:	4620      	mov	r0, r4
    f7a0:	7065      	strb	r5, [r4, #1]
}
    f7a2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    f7a4:	2000      	movs	r0, #0
    f7a6:	e7fc      	b.n	f7a2 <adv_new+0x32>
    f7a8:	20009b50 	.word	0x20009b50

0000f7ac <valid_adv_ext_param>:
{
    f7ac:	b538      	push	{r3, r4, r5, lr}
		if (param->peer &&
    f7ae:	6902      	ldr	r2, [r0, #16]
{
    f7b0:	4604      	mov	r4, r0
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    f7b2:	6843      	ldr	r3, [r0, #4]
		if (param->peer &&
    f7b4:	b152      	cbz	r2, f7cc <valid_adv_ext_param+0x20>
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    f7b6:	f240 4201 	movw	r2, #1025	; 0x401
    f7ba:	4213      	tst	r3, r2
    f7bc:	d101      	bne.n	f7c2 <valid_adv_ext_param+0x16>
			return false;
    f7be:	2000      	movs	r0, #0
}
    f7c0:	bd38      	pop	{r3, r4, r5, pc}
		    (param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    f7c2:	f403 6282 	and.w	r2, r3, #1040	; 0x410
    f7c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    f7ca:	d0f8      	beq.n	f7be <valid_adv_ext_param+0x12>
		if (!(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    f7cc:	0559      	lsls	r1, r3, #21
    f7ce:	d402      	bmi.n	f7d6 <valid_adv_ext_param+0x2a>
    f7d0:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
    f7d4:	d1f3      	bne.n	f7be <valid_adv_ext_param+0x12>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    f7d6:	4a1a      	ldr	r2, [pc, #104]	; (f840 <valid_adv_ext_param+0x94>)
    f7d8:	439a      	bics	r2, r3
    f7da:	d0f0      	beq.n	f7be <valid_adv_ext_param+0x12>
	if (param->id >= bt_dev.id_count ||
    f7dc:	4d19      	ldr	r5, [pc, #100]	; (f844 <valid_adv_ext_param+0x98>)
    f7de:	7820      	ldrb	r0, [r4, #0]
    f7e0:	79eb      	ldrb	r3, [r5, #7]
    f7e2:	4283      	cmp	r3, r0
    f7e4:	d9eb      	bls.n	f7be <valid_adv_ext_param+0x12>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    f7e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    f7ea:	2207      	movs	r2, #7
    f7ec:	4916      	ldr	r1, [pc, #88]	; (f848 <valid_adv_ext_param+0x9c>)
    f7ee:	4428      	add	r0, r5
    f7f0:	f01a fe6c 	bl	2a4cc <memcmp>
	if (param->id >= bt_dev.id_count ||
    f7f4:	2800      	cmp	r0, #0
    f7f6:	d0e2      	beq.n	f7be <valid_adv_ext_param+0x12>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    f7f8:	6860      	ldr	r0, [r4, #4]
    f7fa:	07c2      	lsls	r2, r0, #31
    f7fc:	d406      	bmi.n	f80c <valid_adv_ext_param+0x60>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    f7fe:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    f802:	2b08      	cmp	r3, #8
    f804:	d802      	bhi.n	f80c <valid_adv_ext_param+0x60>
    f806:	68a3      	ldr	r3, [r4, #8]
    f808:	2b9f      	cmp	r3, #159	; 0x9f
    f80a:	d9d8      	bls.n	f7be <valid_adv_ext_param+0x12>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    f80c:	f010 0f30 	tst.w	r0, #48	; 0x30
    f810:	d002      	beq.n	f818 <valid_adv_ext_param+0x6c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    f812:	6923      	ldr	r3, [r4, #16]
    f814:	2b00      	cmp	r3, #0
    f816:	d0d2      	beq.n	f7be <valid_adv_ext_param+0x12>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    f818:	06c3      	lsls	r3, r0, #27
    f81a:	d401      	bmi.n	f820 <valid_adv_ext_param+0x74>
    f81c:	6923      	ldr	r3, [r4, #16]
    f81e:	b943      	cbnz	r3, f832 <valid_adv_ext_param+0x86>
		if (param->interval_min > param->interval_max ||
    f820:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    f824:	429a      	cmp	r2, r3
    f826:	d8ca      	bhi.n	f7be <valid_adv_ext_param+0x12>
    f828:	2a1f      	cmp	r2, #31
    f82a:	d9c8      	bls.n	f7be <valid_adv_ext_param+0x12>
		    param->interval_min < 0x0020 ||
    f82c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    f830:	d8c5      	bhi.n	f7be <valid_adv_ext_param+0x12>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    f832:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    f836:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    f83a:	bf18      	it	ne
    f83c:	2001      	movne	r0, #1
    f83e:	e7bf      	b.n	f7c0 <valid_adv_ext_param+0x14>
    f840:	00040600 	.word	0x00040600
    f844:	20008380 	.word	0x20008380
    f848:	00031ac5 	.word	0x00031ac5

0000f84c <le_adv_start_add_conn>:
{
    f84c:	b570      	push	{r4, r5, r6, lr}
	bt_dev.adv_conn_id = adv->id;
    f84e:	4605      	mov	r5, r0
    f850:	4b16      	ldr	r3, [pc, #88]	; (f8ac <le_adv_start_add_conn+0x60>)
    f852:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    f856:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    f858:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
{
    f85c:	460e      	mov	r6, r1
    f85e:	2207      	movs	r2, #7
    f860:	4628      	mov	r0, r5
    f862:	4913      	ldr	r1, [pc, #76]	; (f8b0 <le_adv_start_add_conn+0x64>)
    f864:	f01a fe32 	bl	2a4cc <memcmp>
    f868:	4603      	mov	r3, r0
    f86a:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f86c:	b96b      	cbnz	r3, f88a <le_adv_start_add_conn+0x3e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    f86e:	4911      	ldr	r1, [pc, #68]	; (f8b4 <le_adv_start_add_conn+0x68>)
    f870:	f001 fe2c 	bl	114cc <bt_conn_add_le>
		if (!conn) {
    f874:	4604      	mov	r4, r0
    f876:	b910      	cbnz	r0, f87e <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    f878:	f06f 000b 	mvn.w	r0, #11
}
    f87c:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    f87e:	2104      	movs	r1, #4
    f880:	f001 fc8c 	bl	1119c <bt_conn_set_state>
		return 0;
    f884:	2000      	movs	r0, #0
		*out_conn = conn;
    f886:	6034      	str	r4, [r6, #0]
    f888:	e7f8      	b.n	f87c <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    f88a:	4629      	mov	r1, r5
    f88c:	f01b fbc4 	bl	2b018 <bt_conn_exists_le>
    f890:	b940      	cbnz	r0, f8a4 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    f892:	7820      	ldrb	r0, [r4, #0]
    f894:	4629      	mov	r1, r5
    f896:	f001 fe19 	bl	114cc <bt_conn_add_le>
	if (!conn) {
    f89a:	4604      	mov	r4, r0
    f89c:	2800      	cmp	r0, #0
    f89e:	d0eb      	beq.n	f878 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    f8a0:	2105      	movs	r1, #5
    f8a2:	e7ed      	b.n	f880 <le_adv_start_add_conn+0x34>
		return -EINVAL;
    f8a4:	f06f 0015 	mvn.w	r0, #21
    f8a8:	e7e8      	b.n	f87c <le_adv_start_add_conn+0x30>
    f8aa:	bf00      	nop
    f8ac:	20008380 	.word	0x20008380
    f8b0:	00031ac5 	.word	0x00031ac5
    f8b4:	00031abe 	.word	0x00031abe

0000f8b8 <hci_set_ad_ext>:
{
    f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8bc:	4698      	mov	r8, r3
	for (size_t i = 0; i < ad_len; i++) {
    f8be:	2300      	movs	r3, #0
{
    f8c0:	4614      	mov	r4, r2
	size_t total_len_bytes = 0;
    f8c2:	461d      	mov	r5, r3
{
    f8c4:	b08b      	sub	sp, #44	; 0x2c
    f8c6:	e9cd 1000 	strd	r1, r0, [sp]
		for (size_t j = 0; j < ad[i].len; j++) {
    f8ca:	1d16      	adds	r6, r2, #4
    f8cc:	2200      	movs	r2, #0
    f8ce:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    f8d2:	e007      	b.n	f8e4 <hci_set_ad_ext+0x2c>
			total_len_bytes += ad[i].data[j].data_len + 2;
    f8d4:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    f8d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    f8dc:	7849      	ldrb	r1, [r1, #1]
		for (size_t j = 0; j < ad[i].len; j++) {
    f8de:	3201      	adds	r2, #1
			total_len_bytes += ad[i].data[j].data_len + 2;
    f8e0:	3102      	adds	r1, #2
    f8e2:	440d      	add	r5, r1
		for (size_t j = 0; j < ad[i].len; j++) {
    f8e4:	4290      	cmp	r0, r2
    f8e6:	d1f5      	bne.n	f8d4 <hci_set_ad_ext+0x1c>
	for (size_t i = 0; i < ad_len; i++) {
    f8e8:	3301      	adds	r3, #1
    f8ea:	4598      	cmp	r8, r3
    f8ec:	d1ee      	bne.n	f8cc <hci_set_ad_ext+0x14>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f8ee:	9b01      	ldr	r3, [sp, #4]
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    f8f0:	2dfb      	cmp	r5, #251	; 0xfb
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f8f2:	f103 0010 	add.w	r0, r3, #16
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    f8f6:	d908      	bls.n	f90a <hci_set_ad_ext+0x52>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    f8f8:	2107      	movs	r1, #7
    f8fa:	f01b f95f 	bl	2abbc <atomic_test_bit>
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    f8fe:	4605      	mov	r5, r0
    f900:	2800      	cmp	r0, #0
    f902:	d07e      	beq.n	fa02 <hci_set_ad_ext+0x14a>
		return -EAGAIN;
    f904:	f06f 000a 	mvn.w	r0, #10
    f908:	e132      	b.n	fb70 <hci_set_ad_ext+0x2b8>
	if (!atomic_test_bit(adv->flags, BT_ADV_EXT_ADV) &&
    f90a:	210c      	movs	r1, #12
    f90c:	f01b f956 	bl	2abbc <atomic_test_bit>
    f910:	b910      	cbnz	r0, f918 <hci_set_ad_ext+0x60>
    f912:	2d1f      	cmp	r5, #31
    f914:	bf28      	it	cs
    f916:	251f      	movcs	r5, #31
	cmd_size = sizeof(*set_data) + total_data_len;
    f918:	f105 0904 	add.w	r9, r5, #4
	buf = bt_hci_cmd_create(hci_op, cmd_size);
    f91c:	9800      	ldr	r0, [sp, #0]
    f91e:	fa5f f189 	uxtb.w	r1, r9
    f922:	f7fe fe0f 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    f926:	4607      	mov	r7, r0
    f928:	2800      	cmp	r0, #0
    f92a:	f000 8129 	beq.w	fb80 <hci_set_ad_ext+0x2c8>
	return net_buf_simple_add(&buf->b, len);
    f92e:	4649      	mov	r1, r9
    f930:	300c      	adds	r0, #12
    f932:	f010 fd0d 	bl	20350 <net_buf_simple_add>
	(void)memset(set_data, 0, cmd_size);
    f936:	464a      	mov	r2, r9
    f938:	4606      	mov	r6, r0
    f93a:	2100      	movs	r1, #0
    f93c:	f01a fdf8 	bl	2a530 <memset>
	err = set_data_add_complete(set_data->data, total_data_len,
    f940:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	uint8_t set_data_len = 0;
    f944:	f04f 0800 	mov.w	r8, #0
	err = set_data_add_complete(set_data->data, total_data_len,
    f948:	f106 0b04 	add.w	fp, r6, #4
	for (size_t i = 0; i < ad_len; i++) {
    f94c:	9302      	str	r3, [sp, #8]
		for (size_t j = 0; j < ad[i].len; j++) {
    f94e:	2300      	movs	r3, #0
    f950:	f8d4 a000 	ldr.w	sl, [r4]
    f954:	6862      	ldr	r2, [r4, #4]
    f956:	4293      	cmp	r3, r2
    f958:	d314      	bcc.n	f984 <hci_set_ad_ext+0xcc>
	for (size_t i = 0; i < ad_len; i++) {
    f95a:	9b02      	ldr	r3, [sp, #8]
    f95c:	3408      	adds	r4, #8
    f95e:	42a3      	cmp	r3, r4
    f960:	d1f5      	bne.n	f94e <hci_set_ad_ext+0x96>
	set_data->handle = adv->handle;
    f962:	9b01      	ldr	r3, [sp, #4]
	*data_len = set_data_len;
    f964:	f886 8003 	strb.w	r8, [r6, #3]
	set_data->handle = adv->handle;
    f968:	785b      	ldrb	r3, [r3, #1]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f96a:	2200      	movs	r2, #0
	set_data->handle = adv->handle;
    f96c:	7033      	strb	r3, [r6, #0]
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    f96e:	2303      	movs	r3, #3
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f970:	4639      	mov	r1, r7
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    f972:	7073      	strb	r3, [r6, #1]
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
    f974:	2301      	movs	r3, #1
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f976:	9800      	ldr	r0, [sp, #0]
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
    f978:	70b3      	strb	r3, [r6, #2]
}
    f97a:	b00b      	add	sp, #44	; 0x2c
    f97c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f980:	f7fe be2a 	b.w	e5d8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f984:	f89a 2001 	ldrb.w	r2, [sl, #1]
			uint8_t type = data[j].type;
    f988:	f108 0002 	add.w	r0, r8, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f98c:	1811      	adds	r1, r2, r0
    f98e:	428d      	cmp	r5, r1
			uint8_t type = data[j].type;
    f990:	f89a c000 	ldrb.w	ip, [sl]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f994:	d219      	bcs.n	f9ca <hci_set_ad_ext+0x112>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f996:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f99a:	eba5 0200 	sub.w	r2, r5, r0
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f99e:	d101      	bne.n	f9a4 <hci_set_ad_ext+0xec>
    f9a0:	2a00      	cmp	r2, #0
    f9a2:	dc10      	bgt.n	f9c6 <hci_set_ad_ext+0x10e>
					LOG_ERR("Too big advertising data");
    f9a4:	4b78      	ldr	r3, [pc, #480]	; (fb88 <hci_set_ad_ext+0x2d0>)
    f9a6:	9309      	str	r3, [sp, #36]	; 0x24
    f9a8:	2302      	movs	r3, #2
    f9aa:	9308      	str	r3, [sp, #32]
    f9ac:	4877      	ldr	r0, [pc, #476]	; (fb8c <hci_set_ad_ext+0x2d4>)
    f9ae:	2300      	movs	r3, #0
    f9b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f9b4:	aa08      	add	r2, sp, #32
    f9b6:	f7fb f8d1 	bl	ab5c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    f9ba:	4638      	mov	r0, r7
    f9bc:	f010 fb8e 	bl	200dc <net_buf_unref>
				return -EINVAL;
    f9c0:	f06f 0015 	mvn.w	r0, #21
    f9c4:	e0d4      	b.n	fb70 <hci_set_ad_ext+0x2b8>
				type = BT_DATA_NAME_SHORTENED;
    f9c6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f9ca:	fa5f f982 	uxtb.w	r9, r2
    f9ce:	f109 0101 	add.w	r1, r9, #1
    f9d2:	f80b 1008 	strb.w	r1, [fp, r8]
    f9d6:	f108 0101 	add.w	r1, r8, #1
			set_data[set_data_len++] = type;
    f9da:	b2c9      	uxtb	r1, r1
    f9dc:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f9e0:	f8da 1004 	ldr.w	r1, [sl, #4]
    f9e4:	fa5b f080 	uxtab	r0, fp, r0
    f9e8:	9303      	str	r3, [sp, #12]
			set_data_len += len;
    f9ea:	f109 0902 	add.w	r9, r9, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f9ee:	f01a fd94 	bl	2a51a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f9f2:	9b03      	ldr	r3, [sp, #12]
			set_data_len += len;
    f9f4:	44c1      	add	r9, r8
    f9f6:	fa5f f889 	uxtb.w	r8, r9
		for (size_t j = 0; j < ad[i].len; j++) {
    f9fa:	3301      	adds	r3, #1
    f9fc:	f10a 0a08 	add.w	sl, sl, #8
    fa00:	e7a8      	b.n	f954 <hci_set_ad_ext+0x9c>
	(void)memset(stream, 0, sizeof(*stream));
    fa02:	4601      	mov	r1, r0
    fa04:	2218      	movs	r2, #24
    fa06:	a804      	add	r0, sp, #16
    fa08:	f01a fd92 	bl	2a530 <memset>
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
    fa0c:	f240 6772 	movw	r7, #1650	; 0x672
	for (size_t i = 0; i < ad_len; i++) {
    fa10:	4628      	mov	r0, r5
	stream->ad_len = ad_len;
    fa12:	e9cd 4804 	strd	r4, r8, [sp, #16]
		for (size_t j = 0; j < ad[i].len; j++) {
    fa16:	2300      	movs	r3, #0
    fa18:	f856 5030 	ldr.w	r5, [r6, r0, lsl #3]
    fa1c:	e00b      	b.n	fa36 <hci_set_ad_ext+0x17e>
			stream->remaining_size += ad[i].data[j].data_len + 2;
    fa1e:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
    fa22:	9909      	ldr	r1, [sp, #36]	; 0x24
    fa24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    fa28:	7852      	ldrb	r2, [r2, #1]
    fa2a:	3102      	adds	r1, #2
    fa2c:	440a      	add	r2, r1
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
    fa2e:	42ba      	cmp	r2, r7
			stream->remaining_size += ad[i].data[j].data_len + 2;
    fa30:	9209      	str	r2, [sp, #36]	; 0x24
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
    fa32:	d8c5      	bhi.n	f9c0 <hci_set_ad_ext+0x108>
		for (size_t j = 0; j < ad[i].len; j++) {
    fa34:	3301      	adds	r3, #1
    fa36:	42ab      	cmp	r3, r5
    fa38:	d1f1      	bne.n	fa1e <hci_set_ad_ext+0x166>
	for (size_t i = 0; i < ad_len; i++) {
    fa3a:	3001      	adds	r0, #1
    fa3c:	4580      	cmp	r8, r0
    fa3e:	d1ea      	bne.n	fa16 <hci_set_ad_ext+0x15e>
    fa40:	f04f 0901 	mov.w	r9, #1
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
    fa44:	f04f 0800 	mov.w	r8, #0
    fa48:	e08e      	b.n	fb68 <hci_set_ad_ext+0x2b0>
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
    fa4a:	28fb      	cmp	r0, #251	; 0xfb
    fa4c:	bf28      	it	cs
    fa4e:	20fb      	movcs	r0, #251	; 0xfb
		const size_t cmd_size = sizeof(*set_data) + data_len;
    fa50:	1d05      	adds	r5, r0, #4
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
    fa52:	4604      	mov	r4, r0
		buf = bt_hci_cmd_create(hci_op, cmd_size);
    fa54:	b2e9      	uxtb	r1, r5
    fa56:	9800      	ldr	r0, [sp, #0]
    fa58:	f7fe fd74 	bl	e544 <bt_hci_cmd_create>
		if (!buf) {
    fa5c:	4607      	mov	r7, r0
    fa5e:	2800      	cmp	r0, #0
    fa60:	f000 808e 	beq.w	fb80 <hci_set_ad_ext+0x2c8>
    fa64:	4629      	mov	r1, r5
    fa66:	300c      	adds	r0, #12
    fa68:	f010 fc72 	bl	20350 <net_buf_simple_add>
	uint8_t read_len = 0;
    fa6c:	2500      	movs	r5, #0
    fa6e:	4606      	mov	r6, r0
		set_data->handle = adv->handle;
    fa70:	9b01      	ldr	r3, [sp, #4]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    fa72:	f100 0a04 	add.w	sl, r0, #4
		set_data->handle = adv->handle;
    fa76:	785b      	ldrb	r3, [r3, #1]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    fa78:	fa5f fb84 	uxtb.w	fp, r4
		set_data->handle = adv->handle;
    fa7c:	7003      	strb	r3, [r0, #0]
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
    fa7e:	f880 8002 	strb.w	r8, [r0, #2]
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
    fa82:	9804      	ldr	r0, [sp, #16]
    fa84:	9a06      	ldr	r2, [sp, #24]
    fa86:	9b07      	ldr	r3, [sp, #28]
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
    fa88:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
    fa8c:	f8bd e020 	ldrh.w	lr, [sp, #32]
    fa90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    fa94:	7849      	ldrb	r1, [r1, #1]
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
    fa96:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
    fa9a:	3102      	adds	r1, #2
	if (done_reading_ltv) {
    fa9c:	458e      	cmp	lr, r1
    fa9e:	d10b      	bne.n	fab8 <hci_set_ad_ext+0x200>
		stream->current_ltv_offset = 0;
    faa0:	f8ad 8020 	strh.w	r8, [sp, #32]
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
    faa4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    faa8:	3301      	adds	r3, #1
    faaa:	428b      	cmp	r3, r1
			stream->ad_index++;
    faac:	bf03      	ittte	eq
    faae:	3201      	addeq	r2, #1
			stream->data_index = 0;
    fab0:	f8cd 801c 	streq.w	r8, [sp, #28]
			stream->ad_index++;
    fab4:	9206      	streq	r2, [sp, #24]
			stream->data_index++;
    fab6:	9307      	strne	r3, [sp, #28]
	if (stream->ad_index == stream->ad_len) {
    fab8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    fabc:	4293      	cmp	r3, r2
    fabe:	d018      	beq.n	faf2 <hci_set_ad_ext+0x23a>
		return &stream->ad[stream->ad_index].data[stream->data_index];
    fac0:	9a07      	ldr	r2, [sp, #28]
    fac2:	f850 c033 	ldr.w	ip, [r0, r3, lsl #3]
		if (!current_ltv) {
    fac6:	eb1c 03c2 	adds.w	r3, ip, r2, lsl #3
    faca:	d012      	beq.n	faf2 <hci_set_ad_ext+0x23a>
		if (stream->current_ltv_offset == 0) {
    facc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
			buf[read_len] = current_ltv->data_len + 1;
    fad0:	eb0a 0005 	add.w	r0, sl, r5
		if (stream->current_ltv_offset == 0) {
    fad4:	b9c9      	cbnz	r1, fb0a <hci_set_ad_ext+0x252>
			buf[read_len] = current_ltv->data_len + 1;
    fad6:	785b      	ldrb	r3, [r3, #1]
    fad8:	3301      	adds	r3, #1
    fada:	f80a 3005 	strb.w	r3, [sl, r5]
			stream->current_ltv_offset++;
    fade:	f8bd 3020 	ldrh.w	r3, [sp, #32]
			read_len++;
    fae2:	3501      	adds	r5, #1
			stream->current_ltv_offset++;
    fae4:	3301      	adds	r3, #1
    fae6:	b29b      	uxth	r3, r3
			read_len++;
    fae8:	b2ed      	uxtb	r5, r5
	while (read_len < buf_len) {
    faea:	455d      	cmp	r5, fp
			stream->current_ltv_offset++;
    faec:	f8ad 3020 	strh.w	r3, [sp, #32]
	while (read_len < buf_len) {
    faf0:	d3c7      	bcc.n	fa82 <hci_set_ad_ext+0x1ca>
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
    faf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    faf4:	42ab      	cmp	r3, r5
    faf6:	d224      	bcs.n	fb42 <hci_set_ad_ext+0x28a>
    faf8:	4925      	ldr	r1, [pc, #148]	; (fb90 <hci_set_ad_ext+0x2d8>)
    fafa:	4826      	ldr	r0, [pc, #152]	; (fb94 <hci_set_ad_ext+0x2dc>)
    fafc:	22a7      	movs	r2, #167	; 0xa7
    fafe:	f019 f861 	bl	28bc4 <assert_print>
    fb02:	21a7      	movs	r1, #167	; 0xa7
    fb04:	4822      	ldr	r0, [pc, #136]	; (fb90 <hci_set_ad_ext+0x2d8>)
    fb06:	f019 f856 	bl	28bb6 <assert_post_action>
		} else if (stream->current_ltv_offset == 1) {
    fb0a:	2901      	cmp	r1, #1
    fb0c:	d103      	bne.n	fb16 <hci_set_ad_ext+0x25e>
			buf[read_len] = current_ltv->type;
    fb0e:	f81c 3032 	ldrb.w	r3, [ip, r2, lsl #3]
    fb12:	7003      	strb	r3, [r0, #0]
    fb14:	e7e3      	b.n	fade <hci_set_ad_ext+0x226>
					current_ltv->data_len - stream->current_ltv_offset + 2;
    fb16:	785a      	ldrb	r2, [r3, #1]
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
    fb18:	eba4 0c05 	sub.w	ip, r4, r5
					current_ltv->data_len - stream->current_ltv_offset + 2;
    fb1c:	1a52      	subs	r2, r2, r1
    fb1e:	3202      	adds	r2, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
    fb20:	4562      	cmp	r2, ip
    fb22:	bf28      	it	cs
    fb24:	4662      	movcs	r2, ip
				&current_ltv->data[stream->current_ltv_offset - 2],
    fb26:	685b      	ldr	r3, [r3, #4]
    fb28:	3902      	subs	r1, #2
			(void)memcpy(&buf[read_len],
    fb2a:	4419      	add	r1, r3
    fb2c:	9202      	str	r2, [sp, #8]
    fb2e:	f01a fcf4 	bl	2a51a <memcpy>
			stream->current_ltv_offset += size_to_copy;
    fb32:	9a02      	ldr	r2, [sp, #8]
    fb34:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fb38:	4413      	add	r3, r2
			read_len += size_to_copy;
    fb3a:	442a      	add	r2, r5
			stream->current_ltv_offset += size_to_copy;
    fb3c:	b29b      	uxth	r3, r3
			read_len += size_to_copy;
    fb3e:	b2d5      	uxtb	r5, r2
    fb40:	e7d3      	b.n	faea <hci_set_ad_ext+0x232>
	stream->remaining_size -= read_len;
    fb42:	1b5b      	subs	r3, r3, r5
    fb44:	9309      	str	r3, [sp, #36]	; 0x24
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    fb46:	70f5      	strb	r5, [r6, #3]
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
    fb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb4a:	f1b9 0f00 	cmp.w	r9, #0
    fb4e:	d012      	beq.n	fb76 <hci_set_ad_ext+0x2be>
    fb50:	2b00      	cmp	r3, #0
    fb52:	bf0c      	ite	eq
    fb54:	2303      	moveq	r3, #3
    fb56:	2301      	movne	r3, #1
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fb58:	2200      	movs	r2, #0
    fb5a:	4639      	mov	r1, r7
    fb5c:	9800      	ldr	r0, [sp, #0]
			set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    fb5e:	7073      	strb	r3, [r6, #1]
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
    fb60:	f7fe fd3a 	bl	e5d8 <bt_hci_cmd_send_sync>
		if (err) {
    fb64:	b920      	cbnz	r0, fb70 <hci_set_ad_ext+0x2b8>
		is_first_iteration = false;
    fb66:	4681      	mov	r9, r0
	return stream->remaining_size == 0;
    fb68:	9809      	ldr	r0, [sp, #36]	; 0x24
	while (!ad_stream_is_empty(&stream)) {
    fb6a:	2800      	cmp	r0, #0
    fb6c:	f47f af6d 	bne.w	fa4a <hci_set_ad_ext+0x192>
}
    fb70:	b00b      	add	sp, #44	; 0x2c
    fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (ad_stream_is_empty(&stream)) {
    fb76:	fab3 f383 	clz	r3, r3
    fb7a:	095b      	lsrs	r3, r3, #5
    fb7c:	005b      	lsls	r3, r3, #1
    fb7e:	e7eb      	b.n	fb58 <hci_set_ad_ext+0x2a0>
		return -ENOBUFS;
    fb80:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fb84:	e7f4      	b.n	fb70 <hci_set_ad_ext+0x2b8>
    fb86:	bf00      	nop
    fb88:	00031f84 	.word	0x00031f84
    fb8c:	0002fc04 	.word	0x0002fc04
    fb90:	00031f9d 	.word	0x00031f9d
    fb94:	00030da5 	.word	0x00030da5

0000fb98 <le_ext_adv_param_set>:
}

static int le_ext_adv_param_set(struct bt_le_ext_adv *adv,
				const struct bt_le_adv_param *param,
				bool  has_scan_data)
{
    fb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_ext_adv_param *cp;
	bool dir_adv = param->peer != NULL, scannable;
    fb9c:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    fba0:	4607      	mov	r7, r0
	bool dir_adv = param->peer != NULL, scannable;
    fba2:	f1ba 0400 	subs.w	r4, sl, #0
{
    fba6:	460e      	mov	r6, r1
	struct net_buf *buf, *rsp;
	int err;
	enum adv_name_type name_type;
	uint16_t props = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
    fba8:	f242 0036 	movw	r0, #8246	; 0x2036
    fbac:	f04f 0119 	mov.w	r1, #25
{
    fbb0:	4693      	mov	fp, r2
	bool dir_adv = param->peer != NULL, scannable;
    fbb2:	bf18      	it	ne
    fbb4:	2401      	movne	r4, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
    fbb6:	f7fe fcc5 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
    fbba:	4681      	mov	r9, r0
    fbbc:	2800      	cmp	r0, #0
    fbbe:	f000 8105 	beq.w	fdcc <le_ext_adv_param_set+0x234>
    fbc2:	2119      	movs	r1, #25
    fbc4:	300c      	adds	r0, #12
    fbc6:	f010 fbc3 	bl	20350 <net_buf_simple_add>
    fbca:	4605      	mov	r5, r0
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	(void)memset(cp, 0, sizeof(*cp));
    fbcc:	2219      	movs	r2, #25
    fbce:	2100      	movs	r1, #0
    fbd0:	f01a fcae 	bl	2a530 <memset>

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    fbd4:	4622      	mov	r2, r4
    fbd6:	4638      	mov	r0, r7
    fbd8:	6871      	ldr	r1, [r6, #4]
    fbda:	f105 030a 	add.w	r3, r5, #10
    fbde:	f7ff fd49 	bl	f674 <bt_id_set_adv_own_addr>
				     &cp->own_addr_type);
	if (err) {
    fbe2:	4604      	mov	r4, r0
    fbe4:	2800      	cmp	r0, #0
    fbe6:	f040 80c0 	bne.w	fd6a <le_ext_adv_param_set+0x1d2>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fbea:	f107 0009 	add.w	r0, r7, #9
	if (dir_adv) {
    fbee:	f1ba 0f00 	cmp.w	sl, #0
    fbf2:	f000 80be 	beq.w	fd72 <le_ext_adv_param_set+0x1da>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fbf6:	6931      	ldr	r1, [r6, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fbf8:	f01a fff2 	bl	2abe0 <bt_addr_le_copy>
	}

	name_type = get_adv_name_type_param(param);
    fbfc:	4630      	mov	r0, r6
    fbfe:	f01b f898 	bl	2ad32 <get_adv_name_type_param>

	cp->handle = adv->handle;
    fc02:	787b      	ldrb	r3, [r7, #1]
	name_type = get_adv_name_type_param(param);
    fc04:	4680      	mov	r8, r0
	cp->handle = adv->handle;
    fc06:	702b      	strb	r3, [r5, #0]
	sys_put_le24(param->interval_min, cp->prim_min_interval);
    fc08:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val;
    fc0a:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    fc0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    fc10:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    fc12:	712a      	strb	r2, [r5, #4]
	dst[2] = val >> 16;
    fc14:	716b      	strb	r3, [r5, #5]
	sys_put_le24(param->interval_max, cp->prim_max_interval);
    fc16:	68f3      	ldr	r3, [r6, #12]
	dst[1] = val >> 8;
    fc18:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    fc1c:	71ab      	strb	r3, [r5, #6]
	dst[2] = val >> 16;
    fc1e:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    fc20:	71ea      	strb	r2, [r5, #7]
	dst[2] = val >> 16;
    fc22:	722b      	strb	r3, [r5, #8]
	cp->prim_channel_map = get_adv_channel_map(param->options);
    fc24:	6870      	ldr	r0, [r6, #4]
    fc26:	f01a ffb7 	bl	2ab98 <get_adv_channel_map>
	cp->filter_policy = get_filter_policy(param->options);
    fc2a:	2300      	movs	r3, #0
    fc2c:	74ab      	strb	r3, [r5, #18]
	cp->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    fc2e:	237f      	movs	r3, #127	; 0x7f
    fc30:	74eb      	strb	r3, [r5, #19]

	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
    fc32:	2301      	movs	r3, #1
	cp->prim_channel_map = get_adv_channel_map(param->options);
    fc34:	7268      	strb	r0, [r5, #9]
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
    fc36:	752b      	strb	r3, [r5, #20]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    fc38:	6872      	ldr	r2, [r6, #4]
    fc3a:	0551      	lsls	r1, r2, #21
    fc3c:	d503      	bpl.n	fc46 <le_ext_adv_param_set+0xae>
		if (param->options & BT_LE_ADV_OPT_NO_2M) {
    fc3e:	0514      	lsls	r4, r2, #20
			cp->sec_adv_phy = BT_HCI_LE_PHY_1M;
		} else {
			cp->sec_adv_phy = BT_HCI_LE_PHY_2M;
    fc40:	bf58      	it	pl
    fc42:	2302      	movpl	r3, #2
    fc44:	75ab      	strb	r3, [r5, #22]
		}
	}

	if (param->options & BT_LE_ADV_OPT_CODED) {
    fc46:	6873      	ldr	r3, [r6, #4]
    fc48:	04d8      	lsls	r0, r3, #19
		cp->prim_adv_phy = BT_HCI_LE_PHY_CODED;
    fc4a:	bf42      	ittt	mi
    fc4c:	2303      	movmi	r3, #3
    fc4e:	752b      	strbmi	r3, [r5, #20]
		cp->sec_adv_phy = BT_HCI_LE_PHY_CODED;
    fc50:	75ab      	strbmi	r3, [r5, #22]
	}

	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    fc52:	6873      	ldr	r3, [r6, #4]
    fc54:	f483 6480 	eor.w	r4, r3, #1024	; 0x400
    fc58:	f3c4 2480 	ubfx	r4, r4, #10, #1
		props |= BT_HCI_LE_ADV_PROP_LEGACY;
	}

	if (param->options & BT_LE_ADV_OPT_USE_TX_POWER) {
    fc5c:	0459      	lsls	r1, r3, #17
	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    fc5e:	ea4f 1404 	mov.w	r4, r4, lsl #4
		props |= BT_HCI_LE_ADV_PROP_TX_POWER;
    fc62:	bf48      	it	mi
    fc64:	f044 0440 	orrmi.w	r4, r4, #64	; 0x40
	}

	if (param->options & BT_LE_ADV_OPT_ANONYMOUS) {
    fc68:	049a      	lsls	r2, r3, #18
		props |= BT_HCI_LE_ADV_PROP_ANON;
    fc6a:	bf44      	itt	mi
    fc6c:	f044 0420 	orrmi.w	r4, r4, #32
    fc70:	b2a4      	uxthmi	r4, r4
	}

	if (param->options & BT_LE_ADV_OPT_NOTIFY_SCAN_REQ) {
    fc72:	05db      	lsls	r3, r3, #23
		cp->scan_req_notify_enable = BT_HCI_LE_ADV_SCAN_REQ_ENABLE;
    fc74:	bf44      	itt	mi
    fc76:	2301      	movmi	r3, #1
    fc78:	762b      	strbmi	r3, [r5, #24]
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fc7a:	6873      	ldr	r3, [r6, #4]
    fc7c:	f013 0f01 	tst.w	r3, #1
    fc80:	f403 7100 	and.w	r1, r3, #512	; 0x200
    fc84:	f000 8092 	beq.w	fdac <le_ext_adv_param_set+0x214>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    fc88:	f044 0201 	orr.w	r2, r4, #1
    fc8c:	b292      	uxth	r2, r2
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    fc8e:	f1ba 0f00 	cmp.w	sl, #0
    fc92:	d075      	beq.n	fd80 <le_ext_adv_param_set+0x1e8>
			 */
			props |= BT_HCI_LE_ADV_PROP_SCAN;
		}
	}

	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fc94:	b911      	cbnz	r1, fc9c <le_ext_adv_param_set+0x104>
    fc96:	f1bb 0f00 	cmp.w	fp, #0
    fc9a:	d06c      	beq.n	fd76 <le_ext_adv_param_set+0x1de>
	    (name_type == ADV_NAME_TYPE_SD)) {
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    fc9c:	f044 0403 	orr.w	r4, r4, #3
    fca0:	b2a4      	uxth	r4, r4

	scannable = !!(props & BT_HCI_LE_ADV_PROP_SCAN);

	if (dir_adv) {
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
		if (!(param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY)) {
    fca2:	06db      	lsls	r3, r3, #27
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
    fca4:	bf4c      	ite	mi
    fca6:	f044 0b04 	orrmi.w	fp, r4, #4
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
    fcaa:	f044 0b0c 	orrpl.w	fp, r4, #12
		}

		bt_addr_le_copy(&cp->peer_addr, param->peer);
    fcae:	6931      	ldr	r1, [r6, #16]
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
    fcb0:	fa1f fb8b 	uxth.w	fp, fp
		bt_addr_le_copy(&cp->peer_addr, param->peer);
    fcb4:	f105 000b 	add.w	r0, r5, #11
    fcb8:	46a2      	mov	sl, r4
    fcba:	f01a ff91 	bl	2abe0 <bt_addr_le_copy>
    fcbe:	465c      	mov	r4, fp
	}

	cp->sid = param->sid;
    fcc0:	7873      	ldrb	r3, [r6, #1]

	cp->props = sys_cpu_to_le16(props);
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    fcc2:	4649      	mov	r1, r9
	cp->props = sys_cpu_to_le16(props);
    fcc4:	f8a5 4001 	strh.w	r4, [r5, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    fcc8:	f242 0036 	movw	r0, #8246	; 0x2036
	cp->sid = param->sid;
    fccc:	75eb      	strb	r3, [r5, #23]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    fcce:	aa01      	add	r2, sp, #4
    fcd0:	f7fe fc82 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
    fcd4:	4604      	mov	r4, r0
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d147      	bne.n	fd6a <le_ext_adv_param_set+0x1d2>
		return err;
	}

#if defined(CONFIG_BT_EXT_ADV)
	struct bt_hci_rp_le_set_ext_adv_param *rp = (void *)rsp->data;
    fcda:	9801      	ldr	r0, [sp, #4]
	adv->tx_power = rp->tx_power;
#endif /* defined(CONFIG_BT_EXT_ADV) */

	net_buf_unref(rsp);

	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
    fcdc:	f107 0510 	add.w	r5, r7, #16
	adv->tx_power = rp->tx_power;
    fce0:	68c3      	ldr	r3, [r0, #12]
    fce2:	f993 3001 	ldrsb.w	r3, [r3, #1]
    fce6:	763b      	strb	r3, [r7, #24]
	net_buf_unref(rsp);
    fce8:	f010 f9f8 	bl	200dc <net_buf_unref>
    fcec:	e8d5 3fef 	ldaex	r3, [r5]
    fcf0:	f043 0302 	orr.w	r3, r3, #2
    fcf4:	e8c5 3fe2 	stlex	r2, r3, [r5]
    fcf8:	2a00      	cmp	r2, #0
    fcfa:	d1f7      	bne.n	fcec <le_ext_adv_param_set+0x154>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fcfc:	f06f 0108 	mvn.w	r1, #8
    fd00:	4628      	mov	r0, r5
    fd02:	f01a ff62 	bl	2abca <atomic_and>

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_RANDOM_ADDR_PENDING)) {
    fd06:	0700      	lsls	r0, r0, #28
    fd08:	d458      	bmi.n	fdbc <le_ext_adv_param_set+0x224>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fd0a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    fd0e:	4628      	mov	r0, r5
    fd10:	f01a ff5b 	bl	2abca <atomic_and>
	}

	/* Flag only used by bt_le_adv_start API. */
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, false);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    fd14:	f108 33ff 	add.w	r3, r8, #4294967295
    fd18:	425a      	negs	r2, r3
    fd1a:	415a      	adcs	r2, r3
    fd1c:	2108      	movs	r1, #8
    fd1e:	4628      	mov	r0, r5
    fd20:	f01a ff61 	bl	2abe6 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    fd24:	f1a8 0102 	sub.w	r1, r8, #2
    fd28:	424a      	negs	r2, r1
    fd2a:	414a      	adcs	r2, r1
    fd2c:	4628      	mov	r0, r5
    fd2e:	2109      	movs	r1, #9
    fd30:	f01a ff59 	bl	2abe6 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fd34:	6872      	ldr	r2, [r6, #4]
    fd36:	210a      	movs	r1, #10
    fd38:	4628      	mov	r0, r5
    fd3a:	f002 0201 	and.w	r2, r2, #1
    fd3e:	f01a ff52 	bl	2abe6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    fd42:	210b      	movs	r1, #11
    fd44:	4628      	mov	r0, r5
    fd46:	f3ca 0240 	ubfx	r2, sl, #1, #1
    fd4a:	f01a ff4c 	bl	2abe6 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fd4e:	6872      	ldr	r2, [r6, #4]
    fd50:	210d      	movs	r1, #13
    fd52:	4628      	mov	r0, r5
    fd54:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fd58:	f01a ff45 	bl	2abe6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	atomic_set_bit_to(adv->flags, BT_ADV_EXT_ADV,
    fd5c:	6872      	ldr	r2, [r6, #4]
    fd5e:	210c      	movs	r1, #12
    fd60:	4628      	mov	r0, r5
    fd62:	f3c2 2280 	ubfx	r2, r2, #10, #1
    fd66:	f01a ff3e 	bl	2abe6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_EXT_ADV);

	return 0;
}
    fd6a:	4620      	mov	r0, r4
    fd6c:	b003      	add	sp, #12
    fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fd72:	4918      	ldr	r1, [pc, #96]	; (fdd4 <le_ext_adv_param_set+0x23c>)
    fd74:	e740      	b.n	fbf8 <le_ext_adv_param_set+0x60>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fd76:	f1b8 0f02 	cmp.w	r8, #2
    fd7a:	d08f      	beq.n	fc9c <le_ext_adv_param_set+0x104>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    fd7c:	4614      	mov	r4, r2
    fd7e:	e790      	b.n	fca2 <le_ext_adv_param_set+0x10a>
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    fd80:	0558      	lsls	r0, r3, #21
    fd82:	d40d      	bmi.n	fda0 <le_ext_adv_param_set+0x208>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fd84:	f044 0403 	orr.w	r4, r4, #3
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    fd88:	b2a4      	uxth	r4, r4
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fd8a:	b969      	cbnz	r1, fda8 <le_ext_adv_param_set+0x210>
    fd8c:	f1bb 0f00 	cmp.w	fp, #0
    fd90:	d10e      	bne.n	fdb0 <le_ext_adv_param_set+0x218>
    fd92:	f1b8 0f02 	cmp.w	r8, #2
    fd96:	d00b      	beq.n	fdb0 <le_ext_adv_param_set+0x218>
	if (dir_adv) {
    fd98:	f1ba 0f00 	cmp.w	sl, #0
    fd9c:	d181      	bne.n	fca2 <le_ext_adv_param_set+0x10a>
    fd9e:	e003      	b.n	fda8 <le_ext_adv_param_set+0x210>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fda0:	b151      	cbz	r1, fdb8 <le_ext_adv_param_set+0x220>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    fda2:	f044 0403 	orr.w	r4, r4, #3
    fda6:	b2a4      	uxth	r4, r4
	if (dir_adv) {
    fda8:	46a2      	mov	sl, r4
    fdaa:	e789      	b.n	fcc0 <le_ext_adv_param_set+0x128>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    fdac:	2900      	cmp	r1, #0
    fdae:	d0ed      	beq.n	fd8c <le_ext_adv_param_set+0x1f4>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    fdb0:	f044 0402 	orr.w	r4, r4, #2
    fdb4:	b2a4      	uxth	r4, r4
    fdb6:	e7ef      	b.n	fd98 <le_ext_adv_param_set+0x200>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    fdb8:	4614      	mov	r4, r2
    fdba:	e7e7      	b.n	fd8c <le_ext_adv_param_set+0x1f4>
		err = bt_id_set_adv_random_addr(adv, &adv->random_addr.a);
    fdbc:	4638      	mov	r0, r7
    fdbe:	1cf9      	adds	r1, r7, #3
    fdc0:	f01a fe80 	bl	2aac4 <bt_id_set_adv_random_addr>
		if (err) {
    fdc4:	2800      	cmp	r0, #0
    fdc6:	d0a0      	beq.n	fd0a <le_ext_adv_param_set+0x172>
    fdc8:	4604      	mov	r4, r0
    fdca:	e7ce      	b.n	fd6a <le_ext_adv_param_set+0x1d2>
		return -ENOBUFS;
    fdcc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    fdd0:	e7cb      	b.n	fd6a <le_ext_adv_param_set+0x1d2>
    fdd2:	bf00      	nop
    fdd4:	00031ac5 	.word	0x00031ac5

0000fdd8 <bt_le_adv_delete_legacy>:
{
    fdd8:	b510      	push	{r4, lr}
	if (bt_dev.adv) {
    fdda:	4c05      	ldr	r4, [pc, #20]	; (fdf0 <bt_le_adv_delete_legacy+0x18>)
    fddc:	69a0      	ldr	r0, [r4, #24]
    fdde:	b130      	cbz	r0, fdee <bt_le_adv_delete_legacy+0x16>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fde0:	f06f 0101 	mvn.w	r1, #1
    fde4:	3010      	adds	r0, #16
    fde6:	f01a fef0 	bl	2abca <atomic_and>
		bt_dev.adv = NULL;
    fdea:	2300      	movs	r3, #0
    fdec:	61a3      	str	r3, [r4, #24]
}
    fdee:	bd10      	pop	{r4, pc}
    fdf0:	20008380 	.word	0x20008380

0000fdf4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    fdf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return bt_dev.adv;
    fdf6:	4b1f      	ldr	r3, [pc, #124]	; (fe74 <bt_le_adv_resume+0x80>)
    fdf8:	699e      	ldr	r6, [r3, #24]
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
    fdfa:	b3ce      	cbz	r6, fe70 <bt_le_adv_resume+0x7c>
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    fdfc:	f106 0410 	add.w	r4, r6, #16
    fe00:	210e      	movs	r1, #14
    fe02:	4620      	mov	r0, r4
    fe04:	f01a feda 	bl	2abbc <atomic_test_bit>
    fe08:	b390      	cbz	r0, fe70 <bt_le_adv_resume+0x7c>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    fe0a:	2107      	movs	r1, #7
    fe0c:	4620      	mov	r0, r4
    fe0e:	f01a fed5 	bl	2abbc <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    fe12:	bb68      	cbnz	r0, fe70 <bt_le_adv_resume+0x7c>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    fe14:	210a      	movs	r1, #10
    fe16:	4620      	mov	r0, r4
    fe18:	f01a fed0 	bl	2abbc <atomic_test_bit>
    fe1c:	b340      	cbz	r0, fe70 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    fe1e:	4630      	mov	r0, r6
    fe20:	a901      	add	r1, sp, #4
    fe22:	f7ff fd13 	bl	f84c <le_adv_start_add_conn>
	if (err) {
    fe26:	4605      	mov	r5, r0
    fe28:	bb10      	cbnz	r0, fe70 <bt_le_adv_resume+0x7c>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
    fe2a:	4630      	mov	r0, r6
    fe2c:	2101      	movs	r1, #1
    fe2e:	f01a ffd2 	bl	2add6 <bt_le_adv_set_enable>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    fe32:	9e01      	ldr	r6, [sp, #4]
	if (err) {
    fe34:	b928      	cbnz	r0, fe42 <bt_le_adv_resume+0x4e>
	bt_conn_unref(conn);
    fe36:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    fe38:	b002      	add	sp, #8
    fe3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fe3e:	f001 b97d 	b.w	1113c <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fe42:	4629      	mov	r1, r5
    fe44:	4630      	mov	r0, r6
    fe46:	f001 f9a9 	bl	1119c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe4a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    fe4e:	4620      	mov	r0, r4
    fe50:	f01a febb 	bl	2abca <atomic_and>
    fe54:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    fe56:	4630      	mov	r0, r6
    fe58:	f001 f970 	bl	1113c <bt_conn_unref>
	if (persist_paused) {
    fe5c:	046b      	lsls	r3, r5, #17
    fe5e:	d507      	bpl.n	fe70 <bt_le_adv_resume+0x7c>
    fe60:	e8d4 3fef 	ldaex	r3, [r4]
    fe64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    fe68:	e8c4 3fe2 	stlex	r2, r3, [r4]
    fe6c:	2a00      	cmp	r2, #0
    fe6e:	d1f7      	bne.n	fe60 <bt_le_adv_resume+0x6c>
}
    fe70:	b002      	add	sp, #8
    fe72:	bd70      	pop	{r4, r5, r6, pc}
    fe74:	20008380 	.word	0x20008380

0000fe78 <bt_le_ext_adv_create>:
}

int bt_le_ext_adv_create(const struct bt_le_adv_param *param,
			 const struct bt_le_ext_adv_cb *cb,
			 struct bt_le_ext_adv **out_adv)
{
    fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7a:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe7c:	4815      	ldr	r0, [pc, #84]	; (fed4 <bt_le_ext_adv_create+0x5c>)
    fe7e:	f01a fe9a 	bl	2abb6 <atomic_get>
	struct bt_le_ext_adv *adv;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fe82:	0743      	lsls	r3, r0, #29
{
    fe84:	460f      	mov	r7, r1
    fe86:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fe88:	d51a      	bpl.n	fec0 <bt_le_ext_adv_create+0x48>
		return -EAGAIN;
	}

	if (!valid_adv_ext_param(param)) {
    fe8a:	4620      	mov	r0, r4
    fe8c:	f7ff fc8e 	bl	f7ac <valid_adv_ext_param>
    fe90:	b1c8      	cbz	r0, fec6 <bt_le_ext_adv_create+0x4e>
		return -EINVAL;
	}

	adv = adv_new();
    fe92:	f7ff fc6d 	bl	f770 <adv_new>
    fe96:	4605      	mov	r5, r0
	if (!adv) {
    fe98:	b1c0      	cbz	r0, fecc <bt_le_ext_adv_create+0x54>
		return -ENOMEM;
	}

	adv->id = param->id;
    fe9a:	7823      	ldrb	r3, [r4, #0]
	adv->cb = cb;

	err = le_ext_adv_param_set(adv, param, false);
    fe9c:	4621      	mov	r1, r4
    fe9e:	2200      	movs	r2, #0
	adv->id = param->id;
    fea0:	7003      	strb	r3, [r0, #0]
	adv->cb = cb;
    fea2:	6147      	str	r7, [r0, #20]
	err = le_ext_adv_param_set(adv, param, false);
    fea4:	f7ff fe78 	bl	fb98 <le_ext_adv_param_set>
	if (err) {
    fea8:	4604      	mov	r4, r0
    feaa:	b138      	cbz	r0, febc <bt_le_ext_adv_create+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    feac:	f06f 0101 	mvn.w	r1, #1
    feb0:	f105 0010 	add.w	r0, r5, #16
    feb4:	f01a fe89 	bl	2abca <atomic_and>
		return err;
	}

	*out_adv = adv;
	return 0;
}
    feb8:	4620      	mov	r0, r4
    feba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*out_adv = adv;
    febc:	6035      	str	r5, [r6, #0]
	return 0;
    febe:	e7fb      	b.n	feb8 <bt_le_ext_adv_create+0x40>
		return -EAGAIN;
    fec0:	f06f 040a 	mvn.w	r4, #10
    fec4:	e7f8      	b.n	feb8 <bt_le_ext_adv_create+0x40>
		return -EINVAL;
    fec6:	f06f 0415 	mvn.w	r4, #21
    feca:	e7f5      	b.n	feb8 <bt_le_ext_adv_create+0x40>
		return -ENOMEM;
    fecc:	f06f 040b 	mvn.w	r4, #11
    fed0:	e7f2      	b.n	feb8 <bt_le_ext_adv_create+0x40>
    fed2:	bf00      	nop
    fed4:	20008408 	.word	0x20008408

0000fed8 <bt_le_ext_adv_start>:
}

int bt_le_ext_adv_start(struct bt_le_ext_adv *adv,
			struct bt_le_ext_adv_start_param *param)
{
	struct bt_conn *conn = NULL;
    fed8:	2300      	movs	r3, #0
{
    feda:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fedc:	f100 0710 	add.w	r7, r0, #16
{
    fee0:	b08b      	sub	sp, #44	; 0x2c
    fee2:	4605      	mov	r5, r0
    fee4:	460e      	mov	r6, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fee6:	4638      	mov	r0, r7
    fee8:	2107      	movs	r1, #7
	struct bt_conn *conn = NULL;
    feea:	9303      	str	r3, [sp, #12]
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    feec:	f01a fe66 	bl	2abbc <atomic_test_bit>
    fef0:	2800      	cmp	r0, #0
    fef2:	d15c      	bne.n	ffae <bt_le_ext_adv_start+0xd6>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    fef4:	210a      	movs	r1, #10
    fef6:	4638      	mov	r0, r7
    fef8:	f01a fe60 	bl	2abbc <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fefc:	2800      	cmp	r0, #0
    fefe:	d13f      	bne.n	ff80 <bt_le_ext_adv_start+0xa8>
		if (err) {
			return err;
		}
	}

	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    ff00:	2e00      	cmp	r6, #0
    ff02:	d147      	bne.n	ff94 <bt_le_ext_adv_start+0xbc>
    ff04:	4632      	mov	r2, r6
    ff06:	2106      	movs	r1, #6
    ff08:	4638      	mov	r0, r7
    ff0a:	f01a fe6c 	bl	2abe6 <atomic_set_bit_to>
			  (param->timeout > 0 || param->num_events > 0));

	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ff0e:	210a      	movs	r1, #10
    ff10:	4638      	mov	r0, r7
    ff12:	f01a fe53 	bl	2abbc <atomic_test_bit>
    ff16:	b938      	cbnz	r0, ff28 <bt_le_ext_adv_start+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
			bt_id_set_adv_private_addr(adv);
		}
	} else {
		if (!atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    ff18:	210d      	movs	r1, #13
    ff1a:	4638      	mov	r0, r7
    ff1c:	f01a fe4e 	bl	2abbc <atomic_test_bit>
    ff20:	b910      	cbnz	r0, ff28 <bt_le_ext_adv_start+0x50>
			bt_id_set_adv_private_addr(adv);
    ff22:	4628      	mov	r0, r5
    ff24:	f01a fe13 	bl	2ab4e <bt_id_set_adv_private_addr>
		}
	}

	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
    ff28:	4628      	mov	r0, r5
    ff2a:	f01a fef2 	bl	2ad12 <get_adv_name_type>
    ff2e:	b158      	cbz	r0, ff48 <bt_le_ext_adv_start+0x70>
	    !atomic_test_bit(adv->flags, BT_ADV_DATA_SET)) {
    ff30:	2102      	movs	r1, #2
    ff32:	4638      	mov	r0, r7
    ff34:	f01a fe42 	bl	2abbc <atomic_test_bit>
	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
    ff38:	4603      	mov	r3, r0
    ff3a:	b928      	cbnz	r0, ff48 <bt_le_ext_adv_start+0x70>
		/* Set the advertiser name */
		bt_le_ext_adv_set_data(adv, NULL, 0, NULL, 0);
    ff3c:	4602      	mov	r2, r0
    ff3e:	4601      	mov	r1, r0
    ff40:	9000      	str	r0, [sp, #0]
    ff42:	4628      	mov	r0, r5
    ff44:	f01a ff99 	bl	2ae7a <bt_le_ext_adv_set_data>
	}

	err = bt_le_adv_set_enable_ext(adv, true, param);
    ff48:	4632      	mov	r2, r6
    ff4a:	2101      	movs	r1, #1
    ff4c:	4628      	mov	r0, r5
    ff4e:	f01a ff00 	bl	2ad52 <bt_le_adv_set_enable_ext>
	if (err) {
    ff52:	4604      	mov	r4, r0
    ff54:	b338      	cbz	r0, ffa6 <bt_le_ext_adv_start+0xce>
		LOG_ERR("Failed to start advertiser");
    ff56:	4b17      	ldr	r3, [pc, #92]	; (ffb4 <bt_le_ext_adv_start+0xdc>)
    ff58:	9309      	str	r3, [sp, #36]	; 0x24
    ff5a:	2302      	movs	r3, #2
    ff5c:	9308      	str	r3, [sp, #32]
    ff5e:	2300      	movs	r3, #0
    ff60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ff64:	4814      	ldr	r0, [pc, #80]	; (ffb8 <bt_le_ext_adv_start+0xe0>)
    ff66:	aa08      	add	r2, sp, #32
    ff68:	f7fa fdf8 	bl	ab5c <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ff6c:	9d03      	ldr	r5, [sp, #12]
    ff6e:	b175      	cbz	r5, ff8e <bt_le_ext_adv_start+0xb6>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ff70:	4628      	mov	r0, r5
    ff72:	2100      	movs	r1, #0
    ff74:	f001 f912 	bl	1119c <bt_conn_set_state>
			bt_conn_unref(conn);
    ff78:	4628      	mov	r0, r5
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
    ff7a:	f001 f8df 	bl	1113c <bt_conn_unref>
    ff7e:	e006      	b.n	ff8e <bt_le_ext_adv_start+0xb6>
		err = le_adv_start_add_conn(adv, &conn);
    ff80:	4628      	mov	r0, r5
    ff82:	a903      	add	r1, sp, #12
    ff84:	f7ff fc62 	bl	f84c <le_adv_start_add_conn>
		if (err) {
    ff88:	4604      	mov	r4, r0
    ff8a:	2800      	cmp	r0, #0
    ff8c:	d0b8      	beq.n	ff00 <bt_le_ext_adv_start+0x28>
	}

	return 0;
}
    ff8e:	4620      	mov	r0, r4
    ff90:	b00b      	add	sp, #44	; 0x2c
    ff92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    ff94:	8833      	ldrh	r3, [r6, #0]
    ff96:	b923      	cbnz	r3, ffa2 <bt_le_ext_adv_start+0xca>
			  (param->timeout > 0 || param->num_events > 0));
    ff98:	78b2      	ldrb	r2, [r6, #2]
    ff9a:	3a00      	subs	r2, #0
    ff9c:	bf18      	it	ne
    ff9e:	2201      	movne	r2, #1
    ffa0:	e7b1      	b.n	ff06 <bt_le_ext_adv_start+0x2e>
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    ffa2:	2201      	movs	r2, #1
    ffa4:	e7af      	b.n	ff06 <bt_le_ext_adv_start+0x2e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ffa6:	9803      	ldr	r0, [sp, #12]
    ffa8:	2800      	cmp	r0, #0
    ffaa:	d1e6      	bne.n	ff7a <bt_le_ext_adv_start+0xa2>
    ffac:	e7ef      	b.n	ff8e <bt_le_ext_adv_start+0xb6>
		return -EALREADY;
    ffae:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ffb2:	e7ec      	b.n	ff8e <bt_le_ext_adv_start+0xb6>
    ffb4:	00031fcc 	.word	0x00031fcc
    ffb8:	0002fc04 	.word	0x0002fc04

0000ffbc <bt_hci_le_adv_set_terminated>:
#endif /* CONFIG_BT_PER_ADV */

#if defined(CONFIG_BT_EXT_ADV)
#if defined(CONFIG_BT_BROADCASTER)
void bt_hci_le_adv_set_terminated(struct net_buf *buf)
{
    ffbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t conn_handle;
#if defined(CONFIG_BT_CONN) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bool was_adv_enabled;
#endif

	evt = (void *)buf->data;
    ffbe:	68c6      	ldr	r6, [r0, #12]
{
    ffc0:	b087      	sub	sp, #28
	adv = bt_adv_lookup_handle(evt->adv_handle);
    ffc2:	7875      	ldrb	r5, [r6, #1]
	if (handle < ARRAY_SIZE(adv_pool) &&
    ffc4:	2d00      	cmp	r5, #0
    ffc6:	d13a      	bne.n	1003e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ffc8:	4837      	ldr	r0, [pc, #220]	; (100a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa8>)
    ffca:	f01a fdf4 	bl	2abb6 <atomic_get>
    ffce:	07c2      	lsls	r2, r0, #31
    ffd0:	d535      	bpl.n	1003e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x3e>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    ffd2:	4c36      	ldr	r4, [pc, #216]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
	conn_handle = sys_le16_to_cpu(evt->conn_handle);
    ffd4:	8877      	ldrh	r7, [r6, #2]
	(void)bt_le_lim_adv_cancel_timeout(adv);
    ffd6:	4620      	mov	r0, r4
    ffd8:	f01a ff00 	bl	2addc <bt_le_lim_adv_cancel_timeout>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ffdc:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ffe0:	f104 0010 	add.w	r0, r4, #16
    ffe4:	f01a fdf1 	bl	2abca <atomic_and>
			bt_dev.cached_conn_complete[i].valid = false;
		}
	}
#endif

	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ffe8:	7833      	ldrb	r3, [r6, #0]
    ffea:	2b00      	cmp	r3, #0
    ffec:	d134      	bne.n	10058 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x58>
		 */
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
	}

	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
		struct bt_conn *conn = bt_conn_lookup_handle(conn_handle);
    ffee:	4638      	mov	r0, r7
    fff0:	f001 f8cc 	bl	1118c <bt_conn_lookup_handle>

		if (conn) {
    fff4:	4605      	mov	r5, r0
    fff6:	2800      	cmp	r0, #0
    fff8:	d141      	bne.n	1007e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fffa:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fffe:	482a      	ldr	r0, [pc, #168]	; (100a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa8>)
   10000:	f01a fde3 	bl	2abca <atomic_and>

			bt_conn_unref(conn);
		}
	}

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   10004:	0643      	lsls	r3, r0, #25
   10006:	d50c      	bpl.n	10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
		bt_id_adv_limited_stopped(adv);
   10008:	4828      	ldr	r0, [pc, #160]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   1000a:	f01a fdb9 	bl	2ab80 <bt_id_adv_limited_stopped>

#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif

		if (adv->cb && adv->cb->sent) {
   1000e:	6963      	ldr	r3, [r4, #20]
   10010:	b13b      	cbz	r3, 10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
   10012:	681b      	ldr	r3, [r3, #0]
   10014:	b12b      	cbz	r3, 10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
			struct bt_le_ext_adv_sent_info info = {
   10016:	7932      	ldrb	r2, [r6, #4]
				.num_sent = evt->num_completed_ext_adv_evts,
			};

			adv->cb->sent(adv, &info);
   10018:	4669      	mov	r1, sp
   1001a:	4824      	ldr	r0, [pc, #144]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
			struct bt_le_ext_adv_sent_info info = {
   1001c:	f88d 2000 	strb.w	r2, [sp]
			adv->cb->sent(adv, &info);
   10020:	4798      	blx	r3
		}
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST) && adv == bt_dev.adv) {
   10022:	210e      	movs	r1, #14
   10024:	4820      	ldr	r0, [pc, #128]	; (100a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa8>)
   10026:	f01a fdc9 	bl	2abbc <atomic_test_bit>
   1002a:	b998      	cbnz	r0, 10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>
   1002c:	4b20      	ldr	r3, [pc, #128]	; (100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>)
   1002e:	699b      	ldr	r3, [r3, #24]
   10030:	42a3      	cmp	r3, r4
   10032:	d10f      	bne.n	10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>
		bt_le_adv_delete_legacy();
	}
}
   10034:	b007      	add	sp, #28
   10036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_adv_delete_legacy();
   1003a:	f7ff becd 	b.w	fdd8 <bt_le_adv_delete_legacy>
		LOG_ERR("No valid adv");
   1003e:	4b1d      	ldr	r3, [pc, #116]	; (100b4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb4>)
   10040:	9305      	str	r3, [sp, #20]
   10042:	2302      	movs	r3, #2
   10044:	9304      	str	r3, [sp, #16]
   10046:	2300      	movs	r3, #0
   10048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1004c:	481a      	ldr	r0, [pc, #104]	; (100b8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb8>)
   1004e:	aa04      	add	r2, sp, #16
   10050:	f7fa fd84 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   10054:	b007      	add	sp, #28
   10056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10058:	210a      	movs	r1, #10
   1005a:	f104 0010 	add.w	r0, r4, #16
   1005e:	f01a fdad 	bl	2abbc <atomic_test_bit>
	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10062:	b140      	cbz	r0, 10076 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x76>
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
   10064:	4b12      	ldr	r3, [pc, #72]	; (100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>)
   10066:	4811      	ldr	r0, [pc, #68]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
   10068:	699b      	ldr	r3, [r3, #24]
   1006a:	42a3      	cmp	r3, r4
   1006c:	bf08      	it	eq
   1006e:	7835      	ldrbeq	r5, [r6, #0]
   10070:	4629      	mov	r1, r5
   10072:	f7ff fb59 	bl	f728 <le_adv_stop_free_conn>
	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
   10076:	7833      	ldrb	r3, [r6, #0]
   10078:	2b00      	cmp	r3, #0
   1007a:	d1be      	bne.n	fffa <bt_hci_le_adv_set_terminated+0x3e>
   1007c:	e7b7      	b.n	ffee <bt_hci_le_adv_set_terminated+0x32>
					&bt_dev.id_addr[conn->id]);
   1007e:	7a01      	ldrb	r1, [r0, #8]
				bt_addr_le_copy(&conn->le.resp_addr,
   10080:	4b0b      	ldr	r3, [pc, #44]	; (100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>)
					&bt_dev.id_addr[conn->id]);
   10082:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10086:	4419      	add	r1, r3
   10088:	309e      	adds	r0, #158	; 0x9e
   1008a:	f01a fda9 	bl	2abe0 <bt_addr_le_copy>
			if (adv->cb && adv->cb->connected) {
   1008e:	6963      	ldr	r3, [r4, #20]
   10090:	b12b      	cbz	r3, 1009e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9e>
   10092:	685b      	ldr	r3, [r3, #4]
   10094:	b11b      	cbz	r3, 1009e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x9e>
				adv->cb->connected(adv, &info);
   10096:	4669      	mov	r1, sp
   10098:	4804      	ldr	r0, [pc, #16]	; (100ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xac>)
				struct bt_le_ext_adv_connected_info info = {
   1009a:	9500      	str	r5, [sp, #0]
				adv->cb->connected(adv, &info);
   1009c:	4798      	blx	r3
			bt_conn_unref(conn);
   1009e:	4628      	mov	r0, r5
   100a0:	f001 f84c 	bl	1113c <bt_conn_unref>
   100a4:	e7a9      	b.n	fffa <bt_hci_le_adv_set_terminated+0x3e>
   100a6:	bf00      	nop
   100a8:	20009b50 	.word	0x20009b50
   100ac:	20009b40 	.word	0x20009b40
   100b0:	20008380 	.word	0x20008380
   100b4:	00031fe7 	.word	0x00031fe7
   100b8:	0002fc04 	.word	0x0002fc04

000100bc <bt_hci_le_scan_req_received>:

void bt_hci_le_scan_req_received(struct net_buf *buf)
{
   100bc:	b530      	push	{r4, r5, lr}
	struct bt_hci_evt_le_scan_req_received *evt;
	struct bt_le_ext_adv *adv;

	evt = (void *)buf->data;
   100be:	68c2      	ldr	r2, [r0, #12]
{
   100c0:	b089      	sub	sp, #36	; 0x24
	if (handle < ARRAY_SIZE(adv_pool) &&
   100c2:	7813      	ldrb	r3, [r2, #0]
   100c4:	b95b      	cbnz	r3, 100de <bt_hci_le_scan_req_received+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   100c6:	4b1c      	ldr	r3, [pc, #112]	; (10138 <bt_hci_le_scan_req_received+0x7c>)
   100c8:	4618      	mov	r0, r3
   100ca:	f01a fd74 	bl	2abb6 <atomic_get>
   100ce:	07c1      	lsls	r1, r0, #31
   100d0:	d505      	bpl.n	100de <bt_hci_le_scan_req_received+0x22>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	if (adv->cb && adv->cb->scanned) {
   100d2:	6859      	ldr	r1, [r3, #4]
   100d4:	f1a3 0510 	sub.w	r5, r3, #16
   100d8:	b969      	cbnz	r1, 100f6 <bt_hci_le_scan_req_received+0x3a>
		}

		info.addr = &id_addr;
		adv->cb->scanned(adv, &info);
	}
}
   100da:	b009      	add	sp, #36	; 0x24
   100dc:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid adv");
   100de:	4b17      	ldr	r3, [pc, #92]	; (1013c <bt_hci_le_scan_req_received+0x80>)
   100e0:	9307      	str	r3, [sp, #28]
   100e2:	2302      	movs	r3, #2
   100e4:	9306      	str	r3, [sp, #24]
   100e6:	2300      	movs	r3, #0
   100e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   100ec:	4814      	ldr	r0, [pc, #80]	; (10140 <bt_hci_le_scan_req_received+0x84>)
   100ee:	aa06      	add	r2, sp, #24
   100f0:	f7fa fd34 	bl	ab5c <z_impl_z_log_msg_static_create>
		return;
   100f4:	e7f1      	b.n	100da <bt_hci_le_scan_req_received+0x1e>
	if (adv->cb && adv->cb->scanned) {
   100f6:	6889      	ldr	r1, [r1, #8]
   100f8:	2900      	cmp	r1, #0
   100fa:	d0ee      	beq.n	100da <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr, &evt->addr);
   100fc:	1c51      	adds	r1, r2, #1
		if (evt->addr.type == BT_ADDR_LE_PUBLIC_ID ||
   100fe:	7852      	ldrb	r2, [r2, #1]
   10100:	ac02      	add	r4, sp, #8
   10102:	3a02      	subs	r2, #2
   10104:	2a01      	cmp	r2, #1
   10106:	d80e      	bhi.n	10126 <bt_hci_le_scan_req_received+0x6a>
			bt_addr_le_copy(&id_addr, &evt->addr);
   10108:	4620      	mov	r0, r4
   1010a:	f01a fd69 	bl	2abe0 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1010e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10112:	3b02      	subs	r3, #2
   10114:	f88d 3008 	strb.w	r3, [sp, #8]
		adv->cb->scanned(adv, &info);
   10118:	696b      	ldr	r3, [r5, #20]
   1011a:	480a      	ldr	r0, [pc, #40]	; (10144 <bt_hci_le_scan_req_received+0x88>)
   1011c:	689b      	ldr	r3, [r3, #8]
		info.addr = &id_addr;
   1011e:	9401      	str	r4, [sp, #4]
		adv->cb->scanned(adv, &info);
   10120:	a901      	add	r1, sp, #4
   10122:	4798      	blx	r3
   10124:	e7d9      	b.n	100da <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr,
   10126:	f813 0c10 	ldrb.w	r0, [r3, #-16]
   1012a:	f01a fcc6 	bl	2aaba <bt_lookup_id_addr>
   1012e:	4601      	mov	r1, r0
   10130:	4620      	mov	r0, r4
   10132:	f01a fd55 	bl	2abe0 <bt_addr_le_copy>
   10136:	e7ef      	b.n	10118 <bt_hci_le_scan_req_received+0x5c>
   10138:	20009b50 	.word	0x20009b50
   1013c:	00031fe7 	.word	0x00031fe7
   10140:	0002fc04 	.word	0x0002fc04
   10144:	20009b40 	.word	0x20009b40

00010148 <reset_reassembling_advertiser>:
	buf->len  = 0U;
   10148:	2200      	movs	r2, #0
   1014a:	4b03      	ldr	r3, [pc, #12]	; (10158 <reset_reassembling_advertiser+0x10>)
	buf->data = buf->__buf;
   1014c:	6899      	ldr	r1, [r3, #8]
	buf->len  = 0U;
   1014e:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   10150:	6019      	str	r1, [r3, #0]
}

static void reset_reassembling_advertiser(void)
{
	net_buf_simple_reset(&ext_scan_buf);
	reassembling_advertiser.state = FRAG_ADV_INACTIVE;
   10152:	4b02      	ldr	r3, [pc, #8]	; (1015c <reset_reassembling_advertiser+0x14>)
   10154:	721a      	strb	r2, [r3, #8]
}
   10156:	4770      	bx	lr
   10158:	20008724 	.word	0x20008724
   1015c:	2000b202 	.word	0x2000b202

00010160 <create_ext_adv_info>:
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
}

static void create_ext_adv_info(struct bt_hci_evt_le_ext_advertising_info const *const evt,
				struct bt_le_scan_recv_info *const scan_info)
{
   10160:	b538      	push	{r3, r4, r5, lr}
   10162:	4605      	mov	r5, r0
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
   10164:	7a40      	ldrb	r0, [r0, #9]
{
   10166:	460c      	mov	r4, r1
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
   10168:	f7fe faba 	bl	e6e0 <bt_get_phy>
   1016c:	7320      	strb	r0, [r4, #12]
	scan_info->secondary_phy = bt_get_phy(evt->sec_phy);
   1016e:	7aa8      	ldrb	r0, [r5, #10]
   10170:	f7fe fab6 	bl	e6e0 <bt_get_phy>
   10174:	7360      	strb	r0, [r4, #13]
	scan_info->tx_power = evt->tx_power;
   10176:	f995 300c 	ldrsb.w	r3, [r5, #12]
   1017a:	71a3      	strb	r3, [r4, #6]
	scan_info->rssi = evt->rssi;
   1017c:	f995 300d 	ldrsb.w	r3, [r5, #13]
   10180:	7163      	strb	r3, [r4, #5]
	scan_info->sid = evt->sid;
   10182:	7aeb      	ldrb	r3, [r5, #11]
   10184:	7123      	strb	r3, [r4, #4]
	scan_info->interval = sys_le16_to_cpu(evt->interval);
   10186:	89eb      	ldrh	r3, [r5, #14]
   10188:	8163      	strh	r3, [r4, #10]
	scan_info->adv_type = get_adv_type(evt->evt_type);
   1018a:	882b      	ldrh	r3, [r5, #0]
   1018c:	3b10      	subs	r3, #16
   1018e:	b2db      	uxtb	r3, r3
   10190:	2b0b      	cmp	r3, #11
   10192:	bf8e      	itee	hi
   10194:	2305      	movhi	r3, #5
   10196:	4a05      	ldrls	r2, [pc, #20]	; (101ac <create_ext_adv_info+0x4c>)
   10198:	5cd3      	ldrbls	r3, [r2, r3]
   1019a:	71e3      	strb	r3, [r4, #7]
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
   1019c:	882b      	ldrh	r3, [r5, #0]
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
   1019e:	f083 0310 	eor.w	r3, r3, #16
   101a2:	f003 031f 	and.w	r3, r3, #31
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
   101a6:	8123      	strh	r3, [r4, #8]
}
   101a8:	bd38      	pop	{r3, r4, r5, pc}
   101aa:	bf00      	nop
   101ac:	00032044 	.word	0x00032044

000101b0 <set_le_ext_scan_enable>:
{
   101b0:	b570      	push	{r4, r5, r6, lr}
   101b2:	4604      	mov	r4, r0
   101b4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
   101b6:	f242 0042 	movw	r0, #8258	; 0x2042
   101ba:	2106      	movs	r1, #6
{
   101bc:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
   101be:	f7fe f9c1 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   101c2:	4605      	mov	r5, r0
   101c4:	b320      	cbz	r0, 10210 <set_le_ext_scan_enable+0x60>
	return net_buf_simple_add(&buf->b, len);
   101c6:	2106      	movs	r1, #6
   101c8:	300c      	adds	r0, #12
   101ca:	f010 f8c1 	bl	20350 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   101ce:	2c01      	cmp	r4, #1
   101d0:	d11c      	bne.n	1020c <set_le_ext_scan_enable+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   101d2:	4b11      	ldr	r3, [pc, #68]	; (10218 <set_le_ext_scan_enable+0x68>)
   101d4:	e8d3 3faf 	lda	r3, [r3]
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   101d8:	f3c3 2340 	ubfx	r3, r3, #9, #1
	cp->duration = sys_cpu_to_le16(duration);
   101dc:	8046      	strh	r6, [r0, #2]
	cp->period = 0;
   101de:	2600      	movs	r6, #0
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   101e0:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   101e2:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   101e4:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   101e6:	425c      	negs	r4, r3
   101e8:	415c      	adcs	r4, r3
	cp->period = 0;
   101ea:	7106      	strb	r6, [r0, #4]
   101ec:	7146      	strb	r6, [r0, #5]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   101ee:	4a0a      	ldr	r2, [pc, #40]	; (10218 <set_le_ext_scan_enable+0x68>)
   101f0:	4628      	mov	r0, r5
   101f2:	a903      	add	r1, sp, #12
   101f4:	2306      	movs	r3, #6
   101f6:	9400      	str	r4, [sp, #0]
   101f8:	f7fe f992 	bl	e520 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, buf, NULL);
   101fc:	4632      	mov	r2, r6
   101fe:	4629      	mov	r1, r5
   10200:	f242 0042 	movw	r0, #8258	; 0x2042
   10204:	f7fe f9e8 	bl	e5d8 <bt_hci_cmd_send_sync>
}
   10208:	b006      	add	sp, #24
   1020a:	bd70      	pop	{r4, r5, r6, pc}
   1020c:	2300      	movs	r3, #0
   1020e:	e7e5      	b.n	101dc <set_le_ext_scan_enable+0x2c>
		return -ENOBUFS;
   10210:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10214:	e7f8      	b.n	10208 <set_le_ext_scan_enable+0x58>
   10216:	bf00      	nop
   10218:	20008408 	.word	0x20008408

0001021c <le_adv_recv>:
{
   1021c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10220:	460e      	mov	r6, r1
   10222:	4614      	mov	r4, r2
   10224:	4699      	mov	r9, r3
   10226:	4b37      	ldr	r3, [pc, #220]	; (10304 <le_adv_recv+0xe8>)
   10228:	e8d3 3faf 	lda	r3, [r3]
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1022c:	061a      	lsls	r2, r3, #24
   1022e:	d502      	bpl.n	10236 <le_adv_recv+0x1a>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   10230:	890b      	ldrh	r3, [r1, #8]
   10232:	075b      	lsls	r3, r3, #29
   10234:	d463      	bmi.n	102fe <le_adv_recv+0xe2>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   10236:	7803      	ldrb	r3, [r0, #0]
   10238:	1e9a      	subs	r2, r3, #2
   1023a:	2a01      	cmp	r2, #1
   1023c:	d84c      	bhi.n	102d8 <le_adv_recv+0xbc>
	memcpy(dst, src, sizeof(*dst));
   1023e:	4601      	mov	r1, r0
   10240:	2207      	movs	r2, #7
   10242:	4668      	mov	r0, sp
   10244:	f01a f969 	bl	2a51a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10248:	f89d 3000 	ldrb.w	r3, [sp]
   1024c:	3b02      	subs	r3, #2
   1024e:	f88d 3000 	strb.w	r3, [sp]
	if (scan_dev_found_cb) {
   10252:	4f2d      	ldr	r7, [pc, #180]	; (10308 <le_adv_recv+0xec>)
   10254:	683b      	ldr	r3, [r7, #0]
   10256:	b1a3      	cbz	r3, 10282 <le_adv_recv+0x66>
	state->offset = net_buf_simple_headroom(buf);
   10258:	4620      	mov	r0, r4
   1025a:	f01d fe32 	bl	2dec2 <net_buf_simple_headroom>
   1025e:	4605      	mov	r5, r0
	state->len = buf->len;
   10260:	f8b4 8004 	ldrh.w	r8, [r4, #4]
		buf->len = len;
   10264:	f8a4 9004 	strh.w	r9, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   10268:	4623      	mov	r3, r4
   1026a:	4668      	mov	r0, sp
   1026c:	683f      	ldr	r7, [r7, #0]
   1026e:	79f2      	ldrb	r2, [r6, #7]
   10270:	f996 1005 	ldrsb.w	r1, [r6, #5]
   10274:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   10276:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   10278:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   1027c:	fa13 f585 	uxtah	r5, r3, r5
   10280:	6025      	str	r5, [r4, #0]
	return list->head;
   10282:	4b22      	ldr	r3, [pc, #136]	; (1030c <le_adv_recv+0xf0>)
	info->addr = &id_addr;
   10284:	f8c6 d000 	str.w	sp, [r6]
   10288:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1028a:	2b00      	cmp	r3, #0
   1028c:	d035      	beq.n	102fa <le_adv_recv+0xde>
	return node->next;
   1028e:	681d      	ldr	r5, [r3, #0]
   10290:	b105      	cbz	r5, 10294 <le_adv_recv+0x78>
   10292:	3d08      	subs	r5, #8
		if (listener->recv) {
   10294:	f853 2c08 	ldr.w	r2, [r3, #-8]
   10298:	b1aa      	cbz	r2, 102c6 <le_adv_recv+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1029a:	462f      	mov	r7, r5
   1029c:	f1a3 0508 	sub.w	r5, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   102a0:	4620      	mov	r0, r4
   102a2:	f01d fe0e 	bl	2dec2 <net_buf_simple_headroom>
   102a6:	4680      	mov	r8, r0
	state->len = buf->len;
   102a8:	f8b4 a004 	ldrh.w	sl, [r4, #4]
			buf->len = len;
   102ac:	f8a4 9004 	strh.w	r9, [r4, #4]
			listener->recv(info, buf);
   102b0:	682b      	ldr	r3, [r5, #0]
}
   102b2:	463d      	mov	r5, r7
   102b4:	4621      	mov	r1, r4
   102b6:	4630      	mov	r0, r6
   102b8:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   102ba:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   102bc:	f8a4 a004 	strh.w	sl, [r4, #4]
	buf->data = buf->__buf + state->offset;
   102c0:	fa13 f388 	uxtah	r3, r3, r8
   102c4:	6023      	str	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   102c6:	b1c5      	cbz	r5, 102fa <le_adv_recv+0xde>
   102c8:	68af      	ldr	r7, [r5, #8]
   102ca:	682b      	ldr	r3, [r5, #0]
   102cc:	b19f      	cbz	r7, 102f6 <le_adv_recv+0xda>
   102ce:	3f08      	subs	r7, #8
		if (listener->recv) {
   102d0:	2b00      	cmp	r3, #0
   102d2:	d1e5      	bne.n	102a0 <le_adv_recv+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   102d4:	463d      	mov	r5, r7
   102d6:	e7f7      	b.n	102c8 <le_adv_recv+0xac>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   102d8:	2bff      	cmp	r3, #255	; 0xff
   102da:	d105      	bne.n	102e8 <le_adv_recv+0xcc>
   102dc:	2207      	movs	r2, #7
   102de:	490c      	ldr	r1, [pc, #48]	; (10310 <le_adv_recv+0xf4>)
   102e0:	4668      	mov	r0, sp
   102e2:	f01a f91a 	bl	2a51a <memcpy>
}
   102e6:	e7b4      	b.n	10252 <le_adv_recv+0x36>
		bt_addr_le_copy(&id_addr,
   102e8:	4601      	mov	r1, r0
   102ea:	2000      	movs	r0, #0
   102ec:	f01a fbe5 	bl	2aaba <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   102f0:	2207      	movs	r2, #7
   102f2:	4601      	mov	r1, r0
   102f4:	e7f4      	b.n	102e0 <le_adv_recv+0xc4>
		if (listener->recv) {
   102f6:	2b00      	cmp	r3, #0
   102f8:	d1d2      	bne.n	102a0 <le_adv_recv+0x84>
	info->addr = NULL;
   102fa:	2300      	movs	r3, #0
   102fc:	6033      	str	r3, [r6, #0]
}
   102fe:	b002      	add	sp, #8
   10300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10304:	20008408 	.word	0x20008408
   10308:	2000a720 	.word	0x2000a720
   1030c:	2000a718 	.word	0x2000a718
   10310:	00031ac5 	.word	0x00031ac5

00010314 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   10314:	2200      	movs	r2, #0
   10316:	4b02      	ldr	r3, [pc, #8]	; (10320 <bt_scan_reset+0xc>)
   10318:	601a      	str	r2, [r3, #0]
	reset_reassembling_advertiser();
   1031a:	f7ff bf15 	b.w	10148 <reset_reassembling_advertiser>
   1031e:	bf00      	nop
   10320:	2000a720 	.word	0x2000a720

00010324 <bt_le_scan_update>:
   10324:	4b07      	ldr	r3, [pc, #28]	; (10344 <bt_le_scan_update+0x20>)
   10326:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1032a:	f3c2 10c0 	ubfx	r0, r2, #7, #1
   1032e:	0612      	lsls	r2, r2, #24
   10330:	d405      	bmi.n	1033e <bt_le_scan_update+0x1a>
   10332:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10336:	065b      	lsls	r3, r3, #25
   10338:	d501      	bpl.n	1033e <bt_le_scan_update+0x1a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1033a:	f01a bdd7 	b.w	2aeec <bt_le_scan_set_enable>
}
   1033e:	2000      	movs	r0, #0
   10340:	4770      	bx	lr
   10342:	bf00      	nop
   10344:	20008408 	.word	0x20008408

00010348 <bt_hci_le_scan_timeout>:
{
   10348:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1034a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1034e:	4816      	ldr	r0, [pc, #88]	; (103a8 <bt_hci_le_scan_timeout+0x60>)
   10350:	f01a fdc1 	bl	2aed6 <atomic_and>
   10354:	f06f 0180 	mvn.w	r1, #128	; 0x80
   10358:	4813      	ldr	r0, [pc, #76]	; (103a8 <bt_hci_le_scan_timeout+0x60>)
   1035a:	f01a fdbc 	bl	2aed6 <atomic_and>
   1035e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10362:	4811      	ldr	r0, [pc, #68]	; (103a8 <bt_hci_le_scan_timeout+0x60>)
   10364:	f01a fdb7 	bl	2aed6 <atomic_and>
   10368:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1036c:	480e      	ldr	r0, [pc, #56]	; (103a8 <bt_hci_le_scan_timeout+0x60>)
   1036e:	f01a fdb2 	bl	2aed6 <atomic_and>
	return list->head;
   10372:	4b0e      	ldr	r3, [pc, #56]	; (103ac <bt_hci_le_scan_timeout+0x64>)
   10374:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10376:	b1b3      	cbz	r3, 103a6 <bt_hci_le_scan_timeout+0x5e>
	return node->next;
   10378:	681c      	ldr	r4, [r3, #0]
   1037a:	b104      	cbz	r4, 1037e <bt_hci_le_scan_timeout+0x36>
   1037c:	3c08      	subs	r4, #8
		if (listener->timeout) {
   1037e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   10382:	b103      	cbz	r3, 10386 <bt_hci_le_scan_timeout+0x3e>
			listener->timeout();
   10384:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10386:	b174      	cbz	r4, 103a6 <bt_hci_le_scan_timeout+0x5e>
   10388:	68a2      	ldr	r2, [r4, #8]
   1038a:	4623      	mov	r3, r4
   1038c:	b142      	cbz	r2, 103a0 <bt_hci_le_scan_timeout+0x58>
		if (listener->timeout) {
   1038e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   10390:	f1a2 0408 	sub.w	r4, r2, #8
		if (listener->timeout) {
   10394:	2b00      	cmp	r3, #0
   10396:	d1f5      	bne.n	10384 <bt_hci_le_scan_timeout+0x3c>
   10398:	e7f6      	b.n	10388 <bt_hci_le_scan_timeout+0x40>
}
   1039a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			listener->timeout();
   1039e:	4718      	bx	r3
		if (listener->timeout) {
   103a0:	6863      	ldr	r3, [r4, #4]
   103a2:	2b00      	cmp	r3, #0
   103a4:	d1f9      	bne.n	1039a <bt_hci_le_scan_timeout+0x52>
}
   103a6:	bd10      	pop	{r4, pc}
   103a8:	20008408 	.word	0x20008408
   103ac:	2000a718 	.word	0x2000a718

000103b0 <bt_hci_le_adv_ext_report>:

void bt_hci_le_adv_ext_report(struct net_buf *buf)
{
   103b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   103b4:	f100 050c 	add.w	r5, r0, #12
   103b8:	4681      	mov	r9, r0
   103ba:	b087      	sub	sp, #28
   103bc:	4628      	mov	r0, r5
   103be:	f01d fd5d 	bl	2de7c <net_buf_simple_pull_u8>
   103c2:	4607      	mov	r7, r0
			create_ext_adv_info(evt, &scan_info);
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
			continue;
		}

		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
   103c4:	4e52      	ldr	r6, [pc, #328]	; (10510 <bt_hci_le_adv_ext_report+0x160>)
			 */
			__ASSERT_NO_MSG(reassembling_advertiser.state == FRAG_ADV_INACTIVE);
			init_reassembling_advertiser(&evt->addr, evt->sid);
		}

		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
   103c6:	f8df a14c 	ldr.w	sl, [pc, #332]	; 10514 <bt_hci_le_adv_ext_report+0x164>
	while (num_reports--) {
   103ca:	b177      	cbz	r7, 103ea <bt_hci_le_adv_ext_report+0x3a>
		if (buf->len < sizeof(*evt)) {
   103cc:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   103d0:	2b17      	cmp	r3, #23
   103d2:	d80d      	bhi.n	103f0 <bt_hci_le_adv_ext_report+0x40>
			LOG_ERR("Unexpected end of buffer");
   103d4:	4b50      	ldr	r3, [pc, #320]	; (10518 <bt_hci_le_adv_ext_report+0x168>)
   103d6:	9305      	str	r3, [sp, #20]
   103d8:	2302      	movs	r3, #2
   103da:	9304      	str	r3, [sp, #16]
   103dc:	2300      	movs	r3, #0
   103de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   103e2:	484e      	ldr	r0, [pc, #312]	; (1051c <bt_hci_le_adv_ext_report+0x16c>)
   103e4:	aa04      	add	r2, sp, #16
   103e6:	f7fa fbb9 	bl	ab5c <z_impl_z_log_msg_static_create>
		/* We do no longer need to keep track of this advertiser. */
		reset_reassembling_advertiser();

		net_buf_pull(buf, evt->length);
	}
}
   103ea:	b007      	add	sp, #28
   103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   103f0:	2118      	movs	r1, #24
   103f2:	4628      	mov	r0, r5
   103f4:	f00f ff92 	bl	2031c <net_buf_simple_pull_mem>
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS(evt->evt_type);
   103f8:	8803      	ldrh	r3, [r0, #0]
   103fa:	4604      	mov	r4, r0
   103fc:	f3c3 1841 	ubfx	r8, r3, #5, #2
		if (evt->evt_type & BT_HCI_LE_ADV_EVT_TYPE_LEGACY) {
   10400:	06db      	lsls	r3, r3, #27
   10402:	d50b      	bpl.n	1041c <bt_hci_le_adv_ext_report+0x6c>
			create_ext_adv_info(evt, &scan_info);
   10404:	4669      	mov	r1, sp
			create_ext_adv_info(evt, &scan_info);
   10406:	f7ff feab 	bl	10160 <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
   1040a:	462a      	mov	r2, r5
   1040c:	4669      	mov	r1, sp
   1040e:	7de3      	ldrb	r3, [r4, #23]
   10410:	1ca0      	adds	r0, r4, #2
   10412:	f7ff ff03 	bl	1021c <le_adv_recv>
			continue;
   10416:	3f01      	subs	r7, #1
   10418:	b2ff      	uxtb	r7, r7
   1041a:	e7d6      	b.n	103ca <bt_hci_le_adv_ext_report+0x1a>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
   1041c:	7a33      	ldrb	r3, [r6, #8]
   1041e:	b19b      	cbz	r3, 10448 <bt_hci_le_adv_ext_report+0x98>
	return a->sid == sid && bt_addr_le_eq(&a->addr, addr);
   10420:	7ac2      	ldrb	r2, [r0, #11]
   10422:	79f3      	ldrb	r3, [r6, #7]
   10424:	429a      	cmp	r2, r3
   10426:	d10f      	bne.n	10448 <bt_hci_le_adv_ext_report+0x98>
	return memcmp(a, b, sizeof(*a));
   10428:	1c81      	adds	r1, r0, #2
   1042a:	2207      	movs	r2, #7
   1042c:	4838      	ldr	r0, [pc, #224]	; (10510 <bt_hci_le_adv_ext_report+0x160>)
   1042e:	f01a f84d 	bl	2a4cc <memcmp>
   10432:	b948      	cbnz	r0, 10448 <bt_hci_le_adv_ext_report+0x98>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
   10434:	f1b8 0f02 	cmp.w	r8, #2
   10438:	d12e      	bne.n	10498 <bt_hci_le_adv_ext_report+0xe8>
   1043a:	4628      	mov	r0, r5
   1043c:	7de1      	ldrb	r1, [r4, #23]
   1043e:	f00f ff6d 	bl	2031c <net_buf_simple_pull_mem>
				reset_reassembling_advertiser();
   10442:	f7ff fe81 	bl	10148 <reset_reassembling_advertiser>
   10446:	e7e6      	b.n	10416 <bt_hci_le_adv_ext_report+0x66>
		if (is_new_advertiser && is_report_complete) {
   10448:	f1b8 0f00 	cmp.w	r8, #0
   1044c:	d102      	bne.n	10454 <bt_hci_le_adv_ext_report+0xa4>
			create_ext_adv_info(evt, &scan_info);
   1044e:	4669      	mov	r1, sp
   10450:	4620      	mov	r0, r4
   10452:	e7d8      	b.n	10406 <bt_hci_le_adv_ext_report+0x56>
		if (is_new_advertiser && reassembling_advertiser.state == FRAG_ADV_REASSEMBLING) {
   10454:	7a33      	ldrb	r3, [r6, #8]
   10456:	2b01      	cmp	r3, #1
   10458:	d104      	bne.n	10464 <bt_hci_le_adv_ext_report+0xb4>
   1045a:	4628      	mov	r0, r5
   1045c:	7de1      	ldrb	r1, [r4, #23]
   1045e:	f00f ff5d 	bl	2031c <net_buf_simple_pull_mem>
			continue;
   10462:	e7d8      	b.n	10416 <bt_hci_le_adv_ext_report+0x66>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
   10464:	f1b8 0f02 	cmp.w	r8, #2
   10468:	d0e7      	beq.n	1043a <bt_hci_le_adv_ext_report+0x8a>
			__ASSERT_NO_MSG(reassembling_advertiser.state == FRAG_ADV_INACTIVE);
   1046a:	b153      	cbz	r3, 10482 <bt_hci_le_adv_ext_report+0xd2>
   1046c:	492c      	ldr	r1, [pc, #176]	; (10520 <bt_hci_le_adv_ext_report+0x170>)
   1046e:	f240 228b 	movw	r2, #651	; 0x28b
   10472:	482c      	ldr	r0, [pc, #176]	; (10524 <bt_hci_le_adv_ext_report+0x174>)
   10474:	f018 fba6 	bl	28bc4 <assert_print>
   10478:	f240 218b 	movw	r1, #651	; 0x28b
		__ASSERT_NO_MSG(is_report_complete);
   1047c:	4828      	ldr	r0, [pc, #160]	; (10520 <bt_hci_le_adv_ext_report+0x170>)
   1047e:	f018 fb9a 	bl	28bb6 <assert_post_action>
	memcpy(dst, src, sizeof(*dst));
   10482:	2207      	movs	r2, #7
   10484:	4630      	mov	r0, r6
   10486:	1ca1      	adds	r1, r4, #2
			init_reassembling_advertiser(&evt->addr, evt->sid);
   10488:	f894 b00b 	ldrb.w	fp, [r4, #11]
   1048c:	f01a f845 	bl	2a51a <memcpy>
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
   10490:	2301      	movs	r3, #1
	reassembling_advertiser.sid = sid;
   10492:	f886 b007 	strb.w	fp, [r6, #7]
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
   10496:	7233      	strb	r3, [r6, #8]
		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
   10498:	7de2      	ldrb	r2, [r4, #23]
   1049a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
   1049e:	f8ba 1006 	ldrh.w	r1, [sl, #6]
   104a2:	4413      	add	r3, r2
   104a4:	428b      	cmp	r3, r1
   104a6:	dd09      	ble.n	104bc <bt_hci_le_adv_ext_report+0x10c>
			reassembling_advertiser.state = FRAG_ADV_DISCARDING;
   104a8:	2302      	movs	r3, #2
   104aa:	7233      	strb	r3, [r6, #8]
   104ac:	4611      	mov	r1, r2
   104ae:	4628      	mov	r0, r5
   104b0:	f00f ff34 	bl	2031c <net_buf_simple_pull_mem>
			if (!more_to_come) {
   104b4:	f1b8 0f01 	cmp.w	r8, #1
   104b8:	d0ad      	beq.n	10416 <bt_hci_le_adv_ext_report+0x66>
   104ba:	e7c2      	b.n	10442 <bt_hci_le_adv_ext_report+0x92>
		if (reassembling_advertiser.state == FRAG_ADV_DISCARDING) {
   104bc:	7a33      	ldrb	r3, [r6, #8]
   104be:	2b02      	cmp	r3, #2
   104c0:	d0f4      	beq.n	104ac <bt_hci_le_adv_ext_report+0xfc>
		net_buf_simple_add_mem(&ext_scan_buf, buf->data, evt->length);
   104c2:	4650      	mov	r0, sl
   104c4:	f8d9 100c 	ldr.w	r1, [r9, #12]
   104c8:	f01d fd07 	bl	2deda <net_buf_simple_add_mem>
		if (more_to_come) {
   104cc:	f1b8 0f01 	cmp.w	r8, #1
   104d0:	d0a1      	beq.n	10416 <bt_hci_le_adv_ext_report+0x66>
		__ASSERT_NO_MSG(is_report_complete);
   104d2:	f1b8 0f00 	cmp.w	r8, #0
   104d6:	d008      	beq.n	104ea <bt_hci_le_adv_ext_report+0x13a>
   104d8:	4911      	ldr	r1, [pc, #68]	; (10520 <bt_hci_le_adv_ext_report+0x170>)
   104da:	f240 22aa 	movw	r2, #682	; 0x2aa
   104de:	4811      	ldr	r0, [pc, #68]	; (10524 <bt_hci_le_adv_ext_report+0x174>)
   104e0:	f018 fb70 	bl	28bc4 <assert_print>
   104e4:	f240 21aa 	movw	r1, #682	; 0x2aa
   104e8:	e7c8      	b.n	1047c <bt_hci_le_adv_ext_report+0xcc>
		create_ext_adv_info(evt, &scan_info);
   104ea:	4669      	mov	r1, sp
   104ec:	4620      	mov	r0, r4
   104ee:	f7ff fe37 	bl	10160 <create_ext_adv_info>
		le_adv_recv(&evt->addr, &scan_info, &ext_scan_buf, ext_scan_buf.len);
   104f2:	4669      	mov	r1, sp
   104f4:	4652      	mov	r2, sl
   104f6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
   104fa:	1ca0      	adds	r0, r4, #2
   104fc:	f7ff fe8e 	bl	1021c <le_adv_recv>
		reset_reassembling_advertiser();
   10500:	f7ff fe22 	bl	10148 <reset_reassembling_advertiser>
	return net_buf_simple_pull(&buf->b, len);
   10504:	4628      	mov	r0, r5
   10506:	7de1      	ldrb	r1, [r4, #23]
   10508:	f00f feee 	bl	202e8 <net_buf_simple_pull>
   1050c:	e783      	b.n	10416 <bt_hci_le_adv_ext_report+0x66>
   1050e:	bf00      	nop
   10510:	2000b202 	.word	0x2000b202
   10514:	20008724 	.word	0x20008724
   10518:	00031ffb 	.word	0x00031ffb
   1051c:	0002fd2c 	.word	0x0002fd2c
   10520:	00032014 	.word	0x00032014
   10524:	00030da5 	.word	0x00030da5

00010528 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   10528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return net_buf_simple_pull_u8(&buf->b);
   1052c:	f100 060c 	add.w	r6, r0, #12
   10530:	4607      	mov	r7, r0
   10532:	b087      	sub	sp, #28
   10534:	4630      	mov	r0, r6
   10536:	f01d fca1 	bl	2de7c <net_buf_simple_pull_u8>
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1053a:	f04f 0801 	mov.w	r8, #1
   1053e:	4605      	mov	r5, r0
	LOG_DBG("Adv number of reports %u",  num_reports);
   10540:	f8df 907c 	ldr.w	r9, [pc, #124]	; 105c0 <bt_hci_le_adv_report+0x98>
	while (num_reports--) {
   10544:	b16d      	cbz	r5, 10562 <bt_hci_le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
   10546:	8a3b      	ldrh	r3, [r7, #16]
   10548:	2b08      	cmp	r3, #8
   1054a:	d80d      	bhi.n	10568 <bt_hci_le_adv_report+0x40>
			LOG_ERR("Unexpected end of buffer");
   1054c:	4b1d      	ldr	r3, [pc, #116]	; (105c4 <bt_hci_le_adv_report+0x9c>)
   1054e:	9305      	str	r3, [sp, #20]
   10550:	2302      	movs	r3, #2
   10552:	9304      	str	r3, [sp, #16]
   10554:	2300      	movs	r3, #0
   10556:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1055a:	481b      	ldr	r0, [pc, #108]	; (105c8 <bt_hci_le_adv_report+0xa0>)
   1055c:	aa04      	add	r2, sp, #16
   1055e:	f7fa fafd 	bl	ab5c <z_impl_z_log_msg_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   10562:	b007      	add	sp, #28
   10564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10568:	2109      	movs	r1, #9
   1056a:	4630      	mov	r0, r6
   1056c:	f00f fed6 	bl	2031c <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   10570:	237f      	movs	r3, #127	; 0x7f
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   10572:	f8ad 800c 	strh.w	r8, [sp, #12]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   10576:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   1057a:	7a03      	ldrb	r3, [r0, #8]
   1057c:	4604      	mov	r4, r0
   1057e:	4403      	add	r3, r0
   10580:	7a5b      	ldrb	r3, [r3, #9]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   10582:	4669      	mov	r1, sp
		adv_info.rssi = evt->data[evt->length];
   10584:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   10588:	23ff      	movs	r3, #255	; 0xff
   1058a:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   1058e:	2300      	movs	r3, #0
   10590:	f8ad 300a 	strh.w	r3, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   10594:	7802      	ldrb	r2, [r0, #0]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   10596:	3001      	adds	r0, #1
   10598:	2a04      	cmp	r2, #4
   1059a:	bf98      	it	ls
   1059c:	f819 3002 	ldrbls.w	r3, [r9, r2]
		adv_info.adv_type = evt->evt_type;
   105a0:	f88d 2007 	strb.w	r2, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   105a4:	f8ad 3008 	strh.w	r3, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   105a8:	79c3      	ldrb	r3, [r0, #7]
   105aa:	4632      	mov	r2, r6
   105ac:	f7ff fe36 	bl	1021c <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   105b0:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   105b2:	4630      	mov	r0, r6
   105b4:	3101      	adds	r1, #1
   105b6:	3d01      	subs	r5, #1
   105b8:	f00f fe96 	bl	202e8 <net_buf_simple_pull>
   105bc:	b2ed      	uxtb	r5, r5
   105be:	e7c1      	b.n	10544 <bt_hci_le_adv_report+0x1c>
   105c0:	00032050 	.word	0x00032050
   105c4:	00031ffb 	.word	0x00031ffb
   105c8:	0002fd2c 	.word	0x0002fd2c

000105cc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   105cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105d0:	b089      	sub	sp, #36	; 0x24
   105d2:	4680      	mov	r8, r0
   105d4:	4f81      	ldr	r7, [pc, #516]	; (107dc <bt_le_scan_start+0x210>)
   105d6:	9100      	str	r1, [sp, #0]
   105d8:	e8d7 3faf 	lda	r3, [r7]
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105dc:	f013 0f04 	tst.w	r3, #4
   105e0:	463c      	mov	r4, r7
   105e2:	f000 80f7 	beq.w	107d4 <bt_le_scan_start+0x208>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   105e6:	7802      	ldrb	r2, [r0, #0]
   105e8:	2a01      	cmp	r2, #1
   105ea:	d905      	bls.n	105f8 <bt_le_scan_start+0x2c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   105ec:	f06f 0915 	mvn.w	r9, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   105f0:	4648      	mov	r0, r9
   105f2:	b009      	add	sp, #36	; 0x24
   105f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   105f8:	6843      	ldr	r3, [r0, #4]
   105fa:	2b0f      	cmp	r3, #15
   105fc:	d8f6      	bhi.n	105ec <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   105fe:	f643 75fc 	movw	r5, #16380	; 0x3ffc
   10602:	8900      	ldrh	r0, [r0, #8]
   10604:	1f03      	subs	r3, r0, #4
   10606:	b29b      	uxth	r3, r3
   10608:	42ab      	cmp	r3, r5
   1060a:	d8ef      	bhi.n	105ec <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1060c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   10610:	1f0b      	subs	r3, r1, #4
   10612:	b29b      	uxth	r3, r3
   10614:	42ab      	cmp	r3, r5
   10616:	d8e9      	bhi.n	105ec <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
   10618:	4288      	cmp	r0, r1
   1061a:	d3e7      	bcc.n	105ec <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1061c:	b96a      	cbnz	r2, 1063a <bt_le_scan_start+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1061e:	e8d4 0fef 	ldaex	r0, [r4]
   10622:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   10626:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1062a:	2a00      	cmp	r2, #0
   1062c:	d1f7      	bne.n	1061e <bt_le_scan_start+0x52>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1062e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   10632:	d007      	beq.n	10644 <bt_le_scan_start+0x78>
		return -EALREADY;
   10634:	f06f 0977 	mvn.w	r9, #119	; 0x77
   10638:	e7da      	b.n	105f0 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1063a:	f01a fa9f 	bl	2ab7c <bt_id_scan_random_addr_check>
   1063e:	2800      	cmp	r0, #0
   10640:	d1ed      	bne.n	1061e <bt_le_scan_start+0x52>
   10642:	e7d3      	b.n	105ec <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10644:	e8d7 3faf 	lda	r3, [r7]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10648:	065c      	lsls	r4, r3, #25
   1064a:	d509      	bpl.n	10660 <bt_le_scan_start+0x94>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1064c:	f01a fc4e 	bl	2aeec <bt_le_scan_set_enable>
		if (err) {
   10650:	4681      	mov	r9, r0
   10652:	b128      	cbz	r0, 10660 <bt_le_scan_start+0x94>
   10654:	f06f 0180 	mvn.w	r1, #128	; 0x80
   10658:	4860      	ldr	r0, [pc, #384]	; (107dc <bt_le_scan_start+0x210>)
   1065a:	f01a fc3c 	bl	2aed6 <atomic_and>
		return err;
   1065e:	e7c7      	b.n	105f0 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10660:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (val) {
   10664:	07d8      	lsls	r0, r3, #31
   10666:	d576      	bpl.n	10756 <bt_le_scan_start+0x18a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10668:	e8d7 3fef 	ldaex	r3, [r7]
   1066c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10670:	e8c7 3fe2 	stlex	r2, r3, [r7]
   10674:	2a00      	cmp	r2, #0
   10676:	d1f7      	bne.n	10668 <bt_le_scan_start+0x9c>
		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
   10678:	f8d8 3004 	ldr.w	r3, [r8, #4]
		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
   1067c:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
   10680:	0719      	lsls	r1, r3, #28
		if (param->options & BT_LE_SCAN_OPT_CODED) {
   10682:	f003 0404 	and.w	r4, r3, #4
		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
   10686:	d56c      	bpl.n	10762 <bt_le_scan_start+0x196>
		if (param->options & BT_LE_SCAN_OPT_CODED) {
   10688:	2c00      	cmp	r4, #0
   1068a:	d17c      	bne.n	10786 <bt_le_scan_start+0x1ba>
		struct bt_hci_ext_scan_phy *phy_1m = NULL;
   1068c:	4625      	mov	r5, r4
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   1068e:	4626      	mov	r6, r4
   10690:	4630      	mov	r0, r6
	if (duration > 0) {
   10692:	f1bb 0f00 	cmp.w	fp, #0
   10696:	d007      	beq.n	106a8 <bt_le_scan_start+0xdc>
   10698:	e8d7 3fef 	ldaex	r3, [r7]
   1069c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   106a0:	e8c7 3fe2 	stlex	r2, r3, [r7]
   106a4:	2a00      	cmp	r2, #0
   106a6:	d1f7      	bne.n	10698 <bt_le_scan_start+0xcc>
	err = bt_id_set_scan_own_addr(active_scan, &own_addr_type);
   106a8:	f10d 010f 	add.w	r1, sp, #15
   106ac:	f7fe ffd0 	bl	f650 <bt_id_set_scan_own_addr>
	if (err) {
   106b0:	4681      	mov	r9, r0
   106b2:	2800      	cmp	r0, #0
   106b4:	d1ce      	bne.n	10654 <bt_le_scan_start+0x88>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
   106b6:	2d00      	cmp	r5, #0
   106b8:	bf14      	ite	ne
   106ba:	2108      	movne	r1, #8
   106bc:	2103      	moveq	r1, #3
   106be:	2c00      	cmp	r4, #0
   106c0:	bf14      	ite	ne
   106c2:	2305      	movne	r3, #5
   106c4:	2300      	moveq	r3, #0
   106c6:	f242 0041 	movw	r0, #8257	; 0x2041
   106ca:	4419      	add	r1, r3
   106cc:	f7fd ff3a 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   106d0:	4680      	mov	r8, r0
   106d2:	2800      	cmp	r0, #0
   106d4:	d07b      	beq.n	107ce <bt_le_scan_start+0x202>
	return net_buf_simple_add(&buf->b, len);
   106d6:	f100 0a0c 	add.w	sl, r0, #12
   106da:	2103      	movs	r1, #3
   106dc:	4650      	mov	r0, sl
   106de:	f00f fe37 	bl	20350 <net_buf_simple_add>
	set_param->own_addr_type = own_addr_type;
   106e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
   106e6:	4603      	mov	r3, r0
   106e8:	7001      	strb	r1, [r0, #0]
	set_param->phys = 0;
   106ea:	f880 9002 	strb.w	r9, [r0, #2]
		set_param->filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   106ee:	f880 9001 	strb.w	r9, [r0, #1]
	if (phy_1m) {
   106f2:	b145      	cbz	r5, 10706 <bt_le_scan_start+0x13a>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_1M;
   106f4:	2201      	movs	r2, #1
   106f6:	9001      	str	r0, [sp, #4]
   106f8:	7082      	strb	r2, [r0, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   106fa:	4629      	mov	r1, r5
   106fc:	2205      	movs	r2, #5
   106fe:	4650      	mov	r0, sl
   10700:	f01d fbeb 	bl	2deda <net_buf_simple_add_mem>
   10704:	9b01      	ldr	r3, [sp, #4]
	if (phy_coded) {
   10706:	b144      	cbz	r4, 1071a <bt_le_scan_start+0x14e>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_CODED;
   10708:	789a      	ldrb	r2, [r3, #2]
   1070a:	4621      	mov	r1, r4
   1070c:	f042 0204 	orr.w	r2, r2, #4
   10710:	709a      	strb	r2, [r3, #2]
   10712:	4650      	mov	r0, sl
   10714:	2205      	movs	r2, #5
   10716:	f01d fbe0 	bl	2deda <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM, buf, NULL);
   1071a:	2200      	movs	r2, #0
   1071c:	4641      	mov	r1, r8
   1071e:	f242 0041 	movw	r0, #8257	; 0x2041
   10722:	f7fd ff59 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
   10726:	4681      	mov	r9, r0
   10728:	2800      	cmp	r0, #0
   1072a:	d193      	bne.n	10654 <bt_le_scan_start+0x88>
	err = set_le_ext_scan_enable(BT_HCI_LE_SCAN_ENABLE, duration);
   1072c:	4659      	mov	r1, fp
   1072e:	2001      	movs	r0, #1
   10730:	f7ff fd3e 	bl	101b0 <set_le_ext_scan_enable>
	if (err) {
   10734:	4681      	mov	r9, r0
   10736:	2800      	cmp	r0, #0
   10738:	d18c      	bne.n	10654 <bt_le_scan_start+0x88>
   1073a:	2e00      	cmp	r6, #0
   1073c:	d041      	beq.n	107c2 <bt_le_scan_start+0x1f6>
   1073e:	e8d7 3fef 	ldaex	r3, [r7]
   10742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10746:	e8c7 3fe1 	stlex	r1, r3, [r7]
   1074a:	2900      	cmp	r1, #0
   1074c:	d1f7      	bne.n	1073e <bt_le_scan_start+0x172>
	scan_dev_found_cb = cb;
   1074e:	4b24      	ldr	r3, [pc, #144]	; (107e0 <bt_le_scan_start+0x214>)
   10750:	9a00      	ldr	r2, [sp, #0]
   10752:	601a      	str	r2, [r3, #0]
	return 0;
   10754:	e74c      	b.n	105f0 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10756:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1075a:	4820      	ldr	r0, [pc, #128]	; (107dc <bt_le_scan_start+0x210>)
   1075c:	f01a fbbb 	bl	2aed6 <atomic_and>
   10760:	e78a      	b.n	10678 <bt_le_scan_start+0xac>
			param_1m.interval = sys_cpu_to_le16(param->interval);
   10762:	f8b8 3008 	ldrh.w	r3, [r8, #8]
			param_1m.type = param->type;
   10766:	f898 6000 	ldrb.w	r6, [r8]
			param_1m.interval = sys_cpu_to_le16(param->interval);
   1076a:	f8ad 3011 	strh.w	r3, [sp, #17]
			param_1m.window = sys_cpu_to_le16(param->window);
   1076e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
			param_1m.type = param->type;
   10772:	f88d 6010 	strb.w	r6, [sp, #16]
			param_1m.window = sys_cpu_to_le16(param->window);
   10776:	f8ad 3013 	strh.w	r3, [sp, #19]
		if (param->options & BT_LE_SCAN_OPT_CODED) {
   1077a:	bb04      	cbnz	r4, 107be <bt_le_scan_start+0x1f2>
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   1077c:	1e72      	subs	r2, r6, #1
   1077e:	4256      	negs	r6, r2
   10780:	4156      	adcs	r6, r2
			phy_1m = &param_1m;
   10782:	ad04      	add	r5, sp, #16
   10784:	e784      	b.n	10690 <bt_le_scan_start+0xc4>
		struct bt_hci_ext_scan_phy *phy_1m = NULL;
   10786:	2500      	movs	r5, #0
			uint16_t interval = param->interval_coded ?
   10788:	f8b8 200e 	ldrh.w	r2, [r8, #14]
   1078c:	b90a      	cbnz	r2, 10792 <bt_le_scan_start+0x1c6>
   1078e:	f8b8 2008 	ldrh.w	r2, [r8, #8]
			uint16_t window = param->window_coded ?
   10792:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   10796:	b90b      	cbnz	r3, 1079c <bt_le_scan_start+0x1d0>
   10798:	f8b8 300a 	ldrh.w	r3, [r8, #10]
			param_coded.type = param->type;
   1079c:	f898 1000 	ldrb.w	r1, [r8]
			param_coded.interval = sys_cpu_to_le16(interval);
   107a0:	f8ad 2019 	strh.w	r2, [sp, #25]
			param_coded.type = param->type;
   107a4:	f88d 1018 	strb.w	r1, [sp, #24]
			param_coded.window = sys_cpu_to_le16(window);
   107a8:	f8ad 301b 	strh.w	r3, [sp, #27]
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
   107ac:	b115      	cbz	r5, 107b4 <bt_le_scan_start+0x1e8>
   107ae:	782e      	ldrb	r6, [r5, #0]
   107b0:	2e01      	cmp	r6, #1
   107b2:	d002      	beq.n	107ba <bt_le_scan_start+0x1ee>
		      (phy_coded && phy_coded->type == BT_HCI_LE_SCAN_ACTIVE);
   107b4:	1e4b      	subs	r3, r1, #1
   107b6:	425e      	negs	r6, r3
   107b8:	415e      	adcs	r6, r3
			phy_coded = &param_coded;
   107ba:	ac06      	add	r4, sp, #24
   107bc:	e768      	b.n	10690 <bt_le_scan_start+0xc4>
			phy_1m = &param_1m;
   107be:	ad04      	add	r5, sp, #16
   107c0:	e7e2      	b.n	10788 <bt_le_scan_start+0x1bc>
   107c2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   107c6:	4805      	ldr	r0, [pc, #20]	; (107dc <bt_le_scan_start+0x210>)
   107c8:	f01a fb85 	bl	2aed6 <atomic_and>
	if (err) {
   107cc:	e7bf      	b.n	1074e <bt_le_scan_start+0x182>
		return -ENOBUFS;
   107ce:	f06f 0968 	mvn.w	r9, #104	; 0x68
   107d2:	e73f      	b.n	10654 <bt_le_scan_start+0x88>
		return -EAGAIN;
   107d4:	f06f 090a 	mvn.w	r9, #10
   107d8:	e70a      	b.n	105f0 <bt_le_scan_start+0x24>
   107da:	bf00      	nop
   107dc:	20008408 	.word	0x20008408
   107e0:	2000a720 	.word	0x2000a720

000107e4 <bt_le_scan_stop>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   107e4:	f06f 0180 	mvn.w	r1, #128	; 0x80

int bt_le_scan_stop(void)
{
   107e8:	b508      	push	{r3, lr}
   107ea:	480d      	ldr	r0, [pc, #52]	; (10820 <bt_le_scan_stop+0x3c>)
   107ec:	f01a fb73 	bl	2aed6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   107f0:	0602      	lsls	r2, r0, #24
   107f2:	d512      	bpl.n	1081a <bt_le_scan_stop+0x36>
		return -EALREADY;
	}

	bt_scan_reset();
   107f4:	f7ff fd8e 	bl	10314 <bt_scan_reset>
   107f8:	4809      	ldr	r0, [pc, #36]	; (10820 <bt_le_scan_stop+0x3c>)
   107fa:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   107fe:	f01a fb6a 	bl	2aed6 <atomic_and>

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
   10802:	0503      	lsls	r3, r0, #20
   10804:	d504      	bpl.n	10810 <bt_le_scan_stop+0x2c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10806:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1080a:	4805      	ldr	r0, [pc, #20]	; (10820 <bt_le_scan_stop+0x3c>)
   1080c:	f01a fb63 	bl	2aed6 <atomic_and>
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10814:	2000      	movs	r0, #0
   10816:	f7ff bd85 	b.w	10324 <bt_le_scan_update>
}
   1081a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1081e:	bd08      	pop	{r3, pc}
   10820:	20008408 	.word	0x20008408

00010824 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10824:	b530      	push	{r4, r5, lr}
   10826:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   10828:	2120      	movs	r1, #32
   1082a:	a80a      	add	r0, sp, #40	; 0x28
   1082c:	f7fd ff2c 	bl	e688 <bt_hci_le_rand>
	if (ret) {
   10830:	4604      	mov	r4, r0
   10832:	bb18      	cbnz	r0, 1087c <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   10834:	f01e fe97 	bl	2f566 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   10838:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1083c:	fba0 2305 	umull	r2, r3, r0, r5
   10840:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10844:	2308      	movs	r3, #8
   10846:	0bd2      	lsrs	r2, r2, #15
   10848:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1084c:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1084e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10852:	9300      	str	r3, [sp, #0]
   10854:	2220      	movs	r2, #32
   10856:	480b      	ldr	r0, [pc, #44]	; (10884 <prng_reseed.constprop.0+0x60>)
   10858:	446b      	add	r3, sp
   1085a:	a90a      	add	r1, sp, #40	; 0x28
   1085c:	f019 fc5c 	bl	2a118 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10860:	b960      	cbnz	r0, 1087c <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   10862:	4b09      	ldr	r3, [pc, #36]	; (10888 <prng_reseed.constprop.0+0x64>)
   10864:	9309      	str	r3, [sp, #36]	; 0x24
   10866:	2302      	movs	r3, #2
   10868:	9308      	str	r3, [sp, #32]
   1086a:	4623      	mov	r3, r4
   1086c:	f06f 0404 	mvn.w	r4, #4
   10870:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10874:	4805      	ldr	r0, [pc, #20]	; (1088c <prng_reseed.constprop.0+0x68>)
   10876:	aa08      	add	r2, sp, #32
   10878:	f7fa f970 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   1087c:	4620      	mov	r0, r4
   1087e:	b013      	add	sp, #76	; 0x4c
   10880:	bd30      	pop	{r4, r5, pc}
   10882:	bf00      	nop
   10884:	20009b90 	.word	0x20009b90
   10888:	0003205d 	.word	0x0003205d
   1088c:	0002fc44 	.word	0x0002fc44

00010890 <prng_init>:

int prng_init(void)
{
   10890:	b510      	push	{r4, lr}
   10892:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   10894:	2108      	movs	r1, #8
   10896:	4668      	mov	r0, sp
   10898:	f7fd fef6 	bl	e688 <bt_hci_le_rand>
	if (ret) {
   1089c:	4604      	mov	r4, r0
   1089e:	b990      	cbnz	r0, 108c6 <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   108a0:	2208      	movs	r2, #8
   108a2:	4669      	mov	r1, sp
   108a4:	480b      	ldr	r0, [pc, #44]	; (108d4 <prng_init+0x44>)
   108a6:	f019 fc17 	bl	2a0d8 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   108aa:	b978      	cbnz	r0, 108cc <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   108ac:	4b0a      	ldr	r3, [pc, #40]	; (108d8 <prng_init+0x48>)
   108ae:	9307      	str	r3, [sp, #28]
   108b0:	2302      	movs	r3, #2
   108b2:	9306      	str	r3, [sp, #24]
   108b4:	4623      	mov	r3, r4
		return -EIO;
   108b6:	f06f 0404 	mvn.w	r4, #4
   108ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   108be:	4807      	ldr	r0, [pc, #28]	; (108dc <prng_init+0x4c>)
   108c0:	aa06      	add	r2, sp, #24
   108c2:	f7fa f94b 	bl	ab5c <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   108c6:	4620      	mov	r0, r4
   108c8:	b008      	add	sp, #32
   108ca:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   108cc:	f7ff ffaa 	bl	10824 <prng_reseed.constprop.0>
   108d0:	4604      	mov	r4, r0
   108d2:	e7f8      	b.n	108c6 <prng_init+0x36>
   108d4:	20009b90 	.word	0x20009b90
   108d8:	00032074 	.word	0x00032074
   108dc:	0002fc44 	.word	0x0002fc44

000108e0 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   108e0:	b538      	push	{r3, r4, r5, lr}
   108e2:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   108e4:	4604      	mov	r4, r0
   108e6:	b198      	cbz	r0, 10910 <bt_rand+0x30>
   108e8:	b191      	cbz	r1, 10910 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   108ea:	4a0b      	ldr	r2, [pc, #44]	; (10918 <bt_rand+0x38>)
   108ec:	f019 fc2d 	bl	2a14a <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   108f0:	1c43      	adds	r3, r0, #1
   108f2:	d107      	bne.n	10904 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   108f4:	f7ff ff96 	bl	10824 <prng_reseed.constprop.0>
		if (ret) {
   108f8:	b948      	cbnz	r0, 1090e <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   108fa:	4629      	mov	r1, r5
   108fc:	4620      	mov	r0, r4
   108fe:	4a06      	ldr	r2, [pc, #24]	; (10918 <bt_rand+0x38>)
   10900:	f019 fc23 	bl	2a14a <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   10904:	2801      	cmp	r0, #1
   10906:	bf0c      	ite	eq
   10908:	2000      	moveq	r0, #0
   1090a:	f06f 0004 	mvnne.w	r0, #4
}
   1090e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10910:	f06f 0015 	mvn.w	r0, #21
   10914:	e7fb      	b.n	1090e <bt_rand+0x2e>
   10916:	bf00      	nop
   10918:	20009b90 	.word	0x20009b90

0001091c <bt_pub_key_gen>:
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1091c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1091e:	4b32      	ldr	r3, [pc, #200]	; (109e8 <bt_pub_key_gen+0xcc>)
{
   10920:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   10922:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
   10926:	f003 0306 	and.w	r3, r3, #6
   1092a:	2b06      	cmp	r3, #6
   1092c:	d153      	bne.n	109d6 <bt_pub_key_gen+0xba>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   1092e:	2800      	cmp	r0, #0
   10930:	d054      	beq.n	109dc <bt_pub_key_gen+0xc0>
	return list->head;
   10932:	4e2e      	ldr	r6, [pc, #184]	; (109ec <bt_pub_key_gen+0xd0>)
   10934:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10936:	b132      	cbz	r2, 10946 <bt_pub_key_gen+0x2a>
   10938:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1093a:	4283      	cmp	r3, r0
   1093c:	d051      	beq.n	109e2 <bt_pub_key_gen+0xc6>
	return node->next;
   1093e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10940:	b10b      	cbz	r3, 10946 <bt_pub_key_gen+0x2a>
   10942:	3b04      	subs	r3, #4
   10944:	e7f9      	b.n	1093a <bt_pub_key_gen+0x1e>
	parent->next = child;
   10946:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   10948:	6872      	ldr	r2, [r6, #4]
			LOG_WRN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1094a:	1d03      	adds	r3, r0, #4
	list->head = node;
   1094c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1094e:	b902      	cbnz	r2, 10952 <bt_pub_key_gen+0x36>
	list->tail = node;
   10950:	6073      	str	r3, [r6, #4]
   10952:	4c27      	ldr	r4, [pc, #156]	; (109f0 <bt_pub_key_gen+0xd4>)
   10954:	e8d4 7fef 	ldaex	r7, [r4]
   10958:	f047 0320 	orr.w	r3, r7, #32
   1095c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10960:	2a00      	cmp	r2, #0
   10962:	d1f7      	bne.n	10954 <bt_pub_key_gen+0x38>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10964:	f017 0720 	ands.w	r7, r7, #32
   10968:	d003      	beq.n	10972 <bt_pub_key_gen+0x56>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   1096a:	2500      	movs	r5, #0
}
   1096c:	4628      	mov	r0, r5
   1096e:	b007      	add	sp, #28
   10970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10972:	e8d4 3fef 	ldaex	r3, [r4]
   10976:	f023 0310 	bic.w	r3, r3, #16
   1097a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1097e:	2a00      	cmp	r2, #0
   10980:	d1f7      	bne.n	10972 <bt_pub_key_gen+0x56>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   10982:	463a      	mov	r2, r7
   10984:	4639      	mov	r1, r7
   10986:	f242 0025 	movw	r0, #8229	; 0x2025
   1098a:	f7fd fe25 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
   1098e:	4605      	mov	r5, r0
   10990:	2800      	cmp	r0, #0
   10992:	d0ea      	beq.n	1096a <bt_pub_key_gen+0x4e>
		LOG_ERR("Sending LE P256 Public Key command failed");
   10994:	4b17      	ldr	r3, [pc, #92]	; (109f4 <bt_pub_key_gen+0xd8>)
   10996:	9305      	str	r3, [sp, #20]
   10998:	2302      	movs	r3, #2
   1099a:	9304      	str	r3, [sp, #16]
   1099c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   109a0:	463b      	mov	r3, r7
   109a2:	4815      	ldr	r0, [pc, #84]	; (109f8 <bt_pub_key_gen+0xdc>)
   109a4:	aa04      	add	r2, sp, #16
   109a6:	f7fa f8d9 	bl	ab5c <z_impl_z_log_msg_static_create>
   109aa:	e8d4 3fef 	ldaex	r3, [r4]
   109ae:	f023 0320 	bic.w	r3, r3, #32
   109b2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   109b6:	2a00      	cmp	r2, #0
   109b8:	d1f7      	bne.n	109aa <bt_pub_key_gen+0x8e>
	return list->head;
   109ba:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   109bc:	b13c      	cbz	r4, 109ce <bt_pub_key_gen+0xb2>
			if (cb->func) {
   109be:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   109c2:	3c04      	subs	r4, #4
			if (cb->func) {
   109c4:	b10b      	cbz	r3, 109ca <bt_pub_key_gen+0xae>
				cb->func(NULL);
   109c6:	2000      	movs	r0, #0
   109c8:	4798      	blx	r3
	return node->next;
   109ca:	6864      	ldr	r4, [r4, #4]
   109cc:	e7f6      	b.n	109bc <bt_pub_key_gen+0xa0>
	list->head = NULL;
   109ce:	2300      	movs	r3, #0
	list->tail = NULL;
   109d0:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   109d4:	e7ca      	b.n	1096c <bt_pub_key_gen+0x50>
		return -ENOTSUP;
   109d6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   109da:	e7c7      	b.n	1096c <bt_pub_key_gen+0x50>
		return -EINVAL;
   109dc:	f06f 0515 	mvn.w	r5, #21
   109e0:	e7c4      	b.n	1096c <bt_pub_key_gen+0x50>
			return -EALREADY;
   109e2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   109e6:	e7c1      	b.n	1096c <bt_pub_key_gen+0x50>
   109e8:	20008380 	.word	0x20008380
   109ec:	2000a728 	.word	0x2000a728
   109f0:	20008408 	.word	0x20008408
   109f4:	0003209d 	.word	0x0003209d
   109f8:	0002fc24 	.word	0x0002fc24

000109fc <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   109fc:	4b04      	ldr	r3, [pc, #16]	; (10a10 <bt_pub_key_get+0x14>)
   109fe:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   10a02:	f013 0f10 	tst.w	r3, #16
}
   10a06:	4803      	ldr	r0, [pc, #12]	; (10a14 <bt_pub_key_get+0x18>)
   10a08:	bf08      	it	eq
   10a0a:	2000      	moveq	r0, #0
   10a0c:	4770      	bx	lr
   10a0e:	bf00      	nop
   10a10:	20008408 	.word	0x20008408
   10a14:	2000b2f0 	.word	0x2000b2f0

00010a18 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   10a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   10a1a:	4d1c      	ldr	r5, [pc, #112]	; (10a8c <bt_dh_key_gen+0x74>)
{
   10a1c:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   10a1e:	682b      	ldr	r3, [r5, #0]
   10a20:	428b      	cmp	r3, r1
   10a22:	d02c      	beq.n	10a7e <bt_dh_key_gen+0x66>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10a24:	b113      	cbz	r3, 10a2c <bt_dh_key_gen+0x14>
		return -EBUSY;
   10a26:	f06f 000f 	mvn.w	r0, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   10a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a2c:	4b18      	ldr	r3, [pc, #96]	; (10a90 <bt_dh_key_gen+0x78>)
   10a2e:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   10a32:	f3c2 1740 	ubfx	r7, r2, #5, #1
   10a36:	0692      	lsls	r2, r2, #26
   10a38:	d4f5      	bmi.n	10a26 <bt_dh_key_gen+0xe>
   10a3a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   10a3e:	06db      	lsls	r3, r3, #27
   10a40:	d520      	bpl.n	10a84 <bt_dh_key_gen+0x6c>
	dh_key_cb = cb;
   10a42:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   10a44:	f242 0026 	movw	r0, #8230	; 0x2026
   10a48:	2140      	movs	r1, #64	; 0x40
   10a4a:	f7fd fd7b 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   10a4e:	4604      	mov	r4, r0
   10a50:	b190      	cbz	r0, 10a78 <bt_dh_key_gen+0x60>
	return net_buf_simple_add(&buf->b, len);
   10a52:	2140      	movs	r1, #64	; 0x40
   10a54:	300c      	adds	r0, #12
   10a56:	f00f fc7b 	bl	20350 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   10a5a:	2240      	movs	r2, #64	; 0x40
   10a5c:	4631      	mov	r1, r6
   10a5e:	f019 fd5c 	bl	2a51a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   10a62:	463a      	mov	r2, r7
   10a64:	4621      	mov	r1, r4
   10a66:	f242 0026 	movw	r0, #8230	; 0x2026
   10a6a:	f7fd fdb5 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
   10a6e:	2800      	cmp	r0, #0
   10a70:	d0db      	beq.n	10a2a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   10a72:	2300      	movs	r3, #0
   10a74:	602b      	str	r3, [r5, #0]
		return err;
   10a76:	e7d8      	b.n	10a2a <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   10a78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10a7c:	e7f9      	b.n	10a72 <bt_dh_key_gen+0x5a>
		return -EALREADY;
   10a7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   10a82:	e7d2      	b.n	10a2a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   10a84:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   10a88:	e7cf      	b.n	10a2a <bt_dh_key_gen+0x12>
   10a8a:	bf00      	nop
   10a8c:	2000a724 	.word	0x2000a724
   10a90:	20008408 	.word	0x20008408

00010a94 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   10a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a96:	4c17      	ldr	r4, [pc, #92]	; (10af4 <bt_hci_evt_le_pkey_complete+0x60>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   10a98:	68c6      	ldr	r6, [r0, #12]
   10a9a:	e8d4 3fef 	ldaex	r3, [r4]
   10a9e:	f023 0320 	bic.w	r3, r3, #32
   10aa2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10aa6:	2a00      	cmp	r2, #0
   10aa8:	d1f7      	bne.n	10a9a <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   10aaa:	7833      	ldrb	r3, [r6, #0]
   10aac:	b963      	cbnz	r3, 10ac8 <bt_hci_evt_le_pkey_complete+0x34>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   10aae:	2240      	movs	r2, #64	; 0x40
   10ab0:	4811      	ldr	r0, [pc, #68]	; (10af8 <bt_hci_evt_le_pkey_complete+0x64>)
   10ab2:	1c71      	adds	r1, r6, #1
   10ab4:	f019 fd31 	bl	2a51a <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10ab8:	e8d4 3fef 	ldaex	r3, [r4]
   10abc:	f043 0310 	orr.w	r3, r3, #16
   10ac0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10ac4:	2a00      	cmp	r2, #0
   10ac6:	d1f7      	bne.n	10ab8 <bt_hci_evt_le_pkey_complete+0x24>
	return list->head;
   10ac8:	4d0c      	ldr	r5, [pc, #48]	; (10afc <bt_hci_evt_le_pkey_complete+0x68>)
   10aca:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10acc:	b16c      	cbz	r4, 10aea <bt_hci_evt_le_pkey_complete+0x56>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   10ace:	4f0a      	ldr	r7, [pc, #40]	; (10af8 <bt_hci_evt_le_pkey_complete+0x64>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10ad0:	3c04      	subs	r4, #4
		if (cb->func) {
   10ad2:	6823      	ldr	r3, [r4, #0]
   10ad4:	b12b      	cbz	r3, 10ae2 <bt_hci_evt_le_pkey_complete+0x4e>
			cb->func(evt->status ? NULL : pub_key);
   10ad6:	7832      	ldrb	r2, [r6, #0]
   10ad8:	2a00      	cmp	r2, #0
   10ada:	bf0c      	ite	eq
   10adc:	4638      	moveq	r0, r7
   10ade:	2000      	movne	r0, #0
   10ae0:	4798      	blx	r3
	return node->next;
   10ae2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   10ae4:	b10c      	cbz	r4, 10aea <bt_hci_evt_le_pkey_complete+0x56>
   10ae6:	3c04      	subs	r4, #4
   10ae8:	e7f3      	b.n	10ad2 <bt_hci_evt_le_pkey_complete+0x3e>
	list->head = NULL;
   10aea:	2300      	movs	r3, #0
	list->tail = NULL;
   10aec:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   10af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10af2:	bf00      	nop
   10af4:	20008408 	.word	0x20008408
   10af8:	2000b2f0 	.word	0x2000b2f0
   10afc:	2000a728 	.word	0x2000a728

00010b00 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   10b00:	4905      	ldr	r1, [pc, #20]	; (10b18 <bt_hci_evt_le_dhkey_complete+0x18>)
   10b02:	680b      	ldr	r3, [r1, #0]
   10b04:	b133      	cbz	r3, 10b14 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   10b06:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   10b08:	2000      	movs	r0, #0
   10b0a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   10b0c:	7811      	ldrb	r1, [r2, #0]
   10b0e:	b901      	cbnz	r1, 10b12 <bt_hci_evt_le_dhkey_complete+0x12>
   10b10:	1c50      	adds	r0, r2, #1
   10b12:	4718      	bx	r3
	}
}
   10b14:	4770      	bx	lr
   10b16:	bf00      	nop
   10b18:	2000a724 	.word	0x2000a724

00010b1c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   10b1c:	b570      	push	{r4, r5, r6, lr}
   10b1e:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   10b20:	4b10      	ldr	r3, [pc, #64]	; (10b64 <notify_connected+0x48>)
   10b22:	681d      	ldr	r5, [r3, #0]
   10b24:	b975      	cbnz	r5, 10b44 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10b26:	4d10      	ldr	r5, [pc, #64]	; (10b68 <notify_connected+0x4c>)
   10b28:	4e10      	ldr	r6, [pc, #64]	; (10b6c <notify_connected+0x50>)
   10b2a:	42b5      	cmp	r5, r6
   10b2c:	d918      	bls.n	10b60 <notify_connected+0x44>
   10b2e:	4910      	ldr	r1, [pc, #64]	; (10b70 <notify_connected+0x54>)
   10b30:	4810      	ldr	r0, [pc, #64]	; (10b74 <notify_connected+0x58>)
   10b32:	f240 525b 	movw	r2, #1371	; 0x55b
   10b36:	f018 f845 	bl	28bc4 <assert_print>
   10b3a:	f240 515b 	movw	r1, #1371	; 0x55b
   10b3e:	480c      	ldr	r0, [pc, #48]	; (10b70 <notify_connected+0x54>)
   10b40:	f018 f839 	bl	28bb6 <assert_post_action>
		if (cb->connected) {
   10b44:	682b      	ldr	r3, [r5, #0]
   10b46:	b113      	cbz	r3, 10b4e <notify_connected+0x32>
			cb->connected(conn, conn->err);
   10b48:	4620      	mov	r0, r4
   10b4a:	7a61      	ldrb	r1, [r4, #9]
   10b4c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10b4e:	692d      	ldr	r5, [r5, #16]
   10b50:	e7e8      	b.n	10b24 <notify_connected+0x8>
		if (cb->connected) {
   10b52:	682b      	ldr	r3, [r5, #0]
   10b54:	b113      	cbz	r3, 10b5c <notify_connected+0x40>
			cb->connected(conn, conn->err);
   10b56:	4620      	mov	r0, r4
   10b58:	7a61      	ldrb	r1, [r4, #9]
   10b5a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   10b5c:	3514      	adds	r5, #20
   10b5e:	e7e4      	b.n	10b2a <notify_connected+0xe>
   10b60:	d3f7      	bcc.n	10b52 <notify_connected+0x36>
		}
	}
}
   10b62:	bd70      	pop	{r4, r5, r6, pc}
   10b64:	2000a7b0 	.word	0x2000a7b0
   10b68:	0002fba0 	.word	0x0002fba0
   10b6c:	0002fbc8 	.word	0x0002fbc8
   10b70:	000320ce 	.word	0x000320ce
   10b74:	00030da5 	.word	0x00030da5

00010b78 <tx_notify>:
{
   10b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b7c:	4604      	mov	r4, r0
	tx->cb = NULL;
   10b7e:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   10b82:	4f14      	ldr	r7, [pc, #80]	; (10bd4 <tx_notify+0x5c>)
	__asm__ volatile(
   10b84:	f04f 0220 	mov.w	r2, #32
   10b88:	f3ef 8311 	mrs	r3, BASEPRI
   10b8c:	f382 8812 	msr	BASEPRI_MAX, r2
   10b90:	f3bf 8f6f 	isb	sy
	return list->head;
   10b94:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   10b96:	b929      	cbnz	r1, 10ba4 <tx_notify+0x2c>
	__asm__ volatile(
   10b98:	f383 8811 	msr	BASEPRI, r3
   10b9c:	f3bf 8f6f 	isb	sy
}
   10ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10ba4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   10ba6:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10ba8:	4281      	cmp	r1, r0
	list->tail = node;
   10baa:	bf08      	it	eq
   10bac:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   10bae:	6222      	str	r2, [r4, #32]
   10bb0:	f383 8811 	msr	BASEPRI, r3
   10bb4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   10bb8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   10bbc:	4638      	mov	r0, r7
	tx->user_data = NULL;
   10bbe:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   10bc2:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   10bc6:	f01e fc10 	bl	2f3ea <k_queue_append>
		cb(conn, user_data, 0);
   10bca:	2200      	movs	r2, #0
   10bcc:	4631      	mov	r1, r6
   10bce:	4620      	mov	r0, r4
   10bd0:	47a8      	blx	r5
	while (1) {
   10bd2:	e7d7      	b.n	10b84 <tx_notify+0xc>
   10bd4:	20008ed4 	.word	0x20008ed4

00010bd8 <conn_tx_destroy>:
{
   10bd8:	b570      	push	{r4, r5, r6, lr}
   10bda:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   10bdc:	b941      	cbnz	r1, 10bf0 <conn_tx_destroy+0x18>
   10bde:	490d      	ldr	r1, [pc, #52]	; (10c14 <conn_tx_destroy+0x3c>)
   10be0:	480d      	ldr	r0, [pc, #52]	; (10c18 <conn_tx_destroy+0x40>)
   10be2:	2239      	movs	r2, #57	; 0x39
   10be4:	f017 ffee 	bl	28bc4 <assert_print>
   10be8:	2139      	movs	r1, #57	; 0x39
   10bea:	480a      	ldr	r0, [pc, #40]	; (10c14 <conn_tx_destroy+0x3c>)
   10bec:	f017 ffe3 	bl	28bb6 <assert_post_action>
	tx->cb = NULL;
   10bf0:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   10bf2:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   10bf6:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   10bf8:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   10bfc:	4807      	ldr	r0, [pc, #28]	; (10c1c <conn_tx_destroy+0x44>)
   10bfe:	f01e fbf4 	bl	2f3ea <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   10c02:	4631      	mov	r1, r6
   10c04:	4620      	mov	r0, r4
   10c06:	462b      	mov	r3, r5
}
   10c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   10c0c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   10c10:	4718      	bx	r3
   10c12:	bf00      	nop
   10c14:	000320ce 	.word	0x000320ce
   10c18:	00030da5 	.word	0x00030da5
   10c1c:	20008ed4 	.word	0x20008ed4

00010c20 <send_frag>:
{
   10c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c24:	4604      	mov	r4, r0
   10c26:	460e      	mov	r6, r1
   10c28:	4692      	mov	sl, r2
   10c2a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10c2c:	698d      	ldr	r5, [r1, #24]
{
   10c2e:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   10c30:	f04f 33ff 	mov.w	r3, #4294967295
   10c34:	f04f 32ff 	mov.w	r2, #4294967295
   10c38:	4855      	ldr	r0, [pc, #340]	; (10d90 <send_frag+0x170>)
   10c3a:	f015 f887 	bl	25d4c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   10c3e:	7aa3      	ldrb	r3, [r4, #10]
   10c40:	2b07      	cmp	r3, #7
   10c42:	f040 8099 	bne.w	10d78 <send_frag+0x158>
	__asm__ volatile(
   10c46:	f04f 0320 	mov.w	r3, #32
   10c4a:	f3ef 8211 	mrs	r2, BASEPRI
   10c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   10c52:	f3bf 8f6f 	isb	sy
	if (tx) {
   10c56:	2d00      	cmp	r5, #0
   10c58:	d059      	beq.n	10d0e <send_frag+0xee>
	parent->next = child;
   10c5a:	2300      	movs	r3, #0
   10c5c:	602b      	str	r3, [r5, #0]
	return list->tail;
   10c5e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   10c60:	2b00      	cmp	r3, #0
   10c62:	d151      	bne.n	10d08 <send_frag+0xe8>
	list->head = node;
   10c64:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10c68:	f382 8811 	msr	BASEPRI, r2
   10c6c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10c70:	2104      	movs	r1, #4
   10c72:	f106 000c 	add.w	r0, r6, #12
   10c76:	f00f fb1b 	bl	202b0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10c7a:	8823      	ldrh	r3, [r4, #0]
   10c7c:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   10c80:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   10c84:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10c88:	8a33      	ldrh	r3, [r6, #16]
   10c8a:	3b04      	subs	r3, #4
   10c8c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10c8e:	2302      	movs	r3, #2
	return bt_send(buf);
   10c90:	4630      	mov	r0, r6
   10c92:	7633      	strb	r3, [r6, #24]
   10c94:	f7fd fe5c 	bl	e950 <bt_send>
	if (err) {
   10c98:	2800      	cmp	r0, #0
   10c9a:	d077      	beq.n	10d8c <send_frag+0x16c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   10c9c:	46ea      	mov	sl, sp
   10c9e:	b088      	sub	sp, #32
   10ca0:	466a      	mov	r2, sp
   10ca2:	4b3c      	ldr	r3, [pc, #240]	; (10d94 <send_frag+0x174>)
   10ca4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10ca8:	2303      	movs	r3, #3
   10caa:	f842 3f10 	str.w	r3, [r2, #16]!
   10cae:	2300      	movs	r3, #0
   10cb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10cb4:	4838      	ldr	r0, [pc, #224]	; (10d98 <send_frag+0x178>)
   10cb6:	f7f9 ff51 	bl	ab5c <z_impl_z_log_msg_static_create>
   10cba:	46d5      	mov	sp, sl
	__asm__ volatile(
   10cbc:	f04f 0320 	mov.w	r3, #32
   10cc0:	f3ef 8111 	mrs	r1, BASEPRI
   10cc4:	f383 8812 	msr	BASEPRI_MAX, r3
   10cc8:	f3bf 8f6f 	isb	sy
		if (tx) {
   10ccc:	2d00      	cmp	r5, #0
   10cce:	d034      	beq.n	10d3a <send_frag+0x11a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10cd0:	2200      	movs	r2, #0
	return list->head;
   10cd2:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10cd4:	b153      	cbz	r3, 10cec <send_frag+0xcc>
   10cd6:	429d      	cmp	r5, r3
   10cd8:	d12c      	bne.n	10d34 <send_frag+0x114>
	return node->next;
   10cda:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   10cdc:	bb22      	cbnz	r2, 10d28 <send_frag+0x108>
   10cde:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   10ce0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10ce2:	4295      	cmp	r5, r2
   10ce4:	d100      	bne.n	10ce8 <send_frag+0xc8>
	list->tail = node;
   10ce6:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   10ce8:	2300      	movs	r3, #0
   10cea:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10cec:	f381 8811 	msr	BASEPRI, r1
   10cf0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10cf4:	4826      	ldr	r0, [pc, #152]	; (10d90 <send_frag+0x170>)
   10cf6:	f014 ffef 	bl	25cd8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   10cfa:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   10cfc:	4629      	mov	r1, r5
   10cfe:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   10d00:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   10d02:	f7ff ff69 	bl	10bd8 <conn_tx_destroy>
   10d06:	e030      	b.n	10d6a <send_frag+0x14a>
   10d08:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10d0a:	61a5      	str	r5, [r4, #24]
}
   10d0c:	e7ac      	b.n	10c68 <send_frag+0x48>
	return list->tail;
   10d0e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   10d10:	b133      	cbz	r3, 10d20 <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
   10d12:	f103 080c 	add.w	r8, r3, #12
   10d16:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10d18:	3301      	adds	r3, #1
   10d1a:	f8c8 3000 	str.w	r3, [r8]
   10d1e:	e7a3      	b.n	10c68 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   10d20:	69e3      	ldr	r3, [r4, #28]
   10d22:	f104 081c 	add.w	r8, r4, #28
   10d26:	e7f7      	b.n	10d18 <send_frag+0xf8>
	parent->next = child;
   10d28:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   10d2a:	69a3      	ldr	r3, [r4, #24]
   10d2c:	429d      	cmp	r5, r3
	list->tail = node;
   10d2e:	bf08      	it	eq
   10d30:	61a2      	streq	r2, [r4, #24]
}
   10d32:	e7d9      	b.n	10ce8 <send_frag+0xc8>
	return node->next;
   10d34:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10d36:	681b      	ldr	r3, [r3, #0]
   10d38:	e7cc      	b.n	10cd4 <send_frag+0xb4>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   10d3a:	f8d8 3000 	ldr.w	r3, [r8]
   10d3e:	b953      	cbnz	r3, 10d56 <send_frag+0x136>
   10d40:	4916      	ldr	r1, [pc, #88]	; (10d9c <send_frag+0x17c>)
   10d42:	4817      	ldr	r0, [pc, #92]	; (10da0 <send_frag+0x180>)
   10d44:	f240 2227 	movw	r2, #551	; 0x227
   10d48:	f017 ff3c 	bl	28bc4 <assert_print>
   10d4c:	f240 2127 	movw	r1, #551	; 0x227
   10d50:	4812      	ldr	r0, [pc, #72]	; (10d9c <send_frag+0x17c>)
   10d52:	f017 ff30 	bl	28bb6 <assert_post_action>
			(*pending_no_cb)--;
   10d56:	3b01      	subs	r3, #1
   10d58:	f8c8 3000 	str.w	r3, [r8]
   10d5c:	f381 8811 	msr	BASEPRI, r1
   10d60:	f3bf 8f6f 	isb	sy
   10d64:	480a      	ldr	r0, [pc, #40]	; (10d90 <send_frag+0x170>)
   10d66:	f014 ffb7 	bl	25cd8 <z_impl_k_sem_give>
	if (always_consume) {
   10d6a:	f1b9 0f00 	cmp.w	r9, #0
   10d6e:	d109      	bne.n	10d84 <send_frag+0x164>
	return false;
   10d70:	2000      	movs	r0, #0
}
   10d72:	46bd      	mov	sp, r7
   10d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d78:	4805      	ldr	r0, [pc, #20]	; (10d90 <send_frag+0x170>)
   10d7a:	f014 ffad 	bl	25cd8 <z_impl_k_sem_give>
	if (tx) {
   10d7e:	2d00      	cmp	r5, #0
   10d80:	d1bb      	bne.n	10cfa <send_frag+0xda>
   10d82:	e7f2      	b.n	10d6a <send_frag+0x14a>
		net_buf_unref(buf);
   10d84:	4630      	mov	r0, r6
   10d86:	f00f f9a9 	bl	200dc <net_buf_unref>
   10d8a:	e7f1      	b.n	10d70 <send_frag+0x150>
	return true;
   10d8c:	2001      	movs	r0, #1
   10d8e:	e7f0      	b.n	10d72 <send_frag+0x152>
   10d90:	20008440 	.word	0x20008440
   10d94:	00031e38 	.word	0x00031e38
   10d98:	0002fc1c 	.word	0x0002fc1c
   10d9c:	000320ce 	.word	0x000320ce
   10da0:	00030da5 	.word	0x00030da5

00010da4 <bt_conn_get_pkts>:
}
   10da4:	4800      	ldr	r0, [pc, #0]	; (10da8 <bt_conn_get_pkts+0x4>)
   10da6:	4770      	bx	lr
   10da8:	20008440 	.word	0x20008440

00010dac <bt_conn_new>:
{
   10dac:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   10dae:	2200      	movs	r2, #0
   10db0:	4604      	mov	r4, r0
   10db2:	428a      	cmp	r2, r1
   10db4:	d102      	bne.n	10dbc <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   10db6:	2400      	movs	r4, #0
}
   10db8:	4620      	mov	r0, r4
   10dba:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10dbc:	2001      	movs	r0, #1
   10dbe:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   10dc2:	e8d3 5fef 	ldaex	r5, [r3]
   10dc6:	2d00      	cmp	r5, #0
   10dc8:	d104      	bne.n	10dd4 <bt_conn_new+0x28>
   10dca:	e8c3 0fec 	stlex	ip, r0, [r3]
   10dce:	f1bc 0f00 	cmp.w	ip, #0
   10dd2:	d1f6      	bne.n	10dc2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   10dd4:	d002      	beq.n	10ddc <bt_conn_new+0x30>
   10dd6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   10dd8:	4402      	add	r2, r0
   10dda:	e7ea      	b.n	10db2 <bt_conn_new+0x6>
	if (!conn) {
   10ddc:	2c00      	cmp	r4, #0
   10dde:	d0ea      	beq.n	10db6 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   10de0:	22c4      	movs	r2, #196	; 0xc4
   10de2:	2100      	movs	r1, #0
   10de4:	4620      	mov	r0, r4
   10de6:	f019 fba3 	bl	2a530 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   10dea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10dee:	4904      	ldr	r1, [pc, #16]	; (10e00 <bt_conn_new+0x54>)
   10df0:	f015 fb58 	bl	264a4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   10df4:	4903      	ldr	r1, [pc, #12]	; (10e04 <bt_conn_new+0x58>)
   10df6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10dfa:	f015 f9c7 	bl	2618c <k_work_init>
	return conn;
   10dfe:	e7db      	b.n	10db8 <bt_conn_new+0xc>
   10e00:	00011699 	.word	0x00011699
   10e04:	0002af27 	.word	0x0002af27

00010e08 <conn_cleanup>:
{
   10e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e0c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   10e0e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10e10:	f104 0638 	add.w	r6, r4, #56	; 0x38
   10e14:	2300      	movs	r3, #0
   10e16:	2200      	movs	r2, #0
   10e18:	4630      	mov	r0, r6
   10e1a:	f01d f805 	bl	2de28 <net_buf_get>
   10e1e:	4603      	mov	r3, r0
   10e20:	b960      	cbnz	r0, 10e3c <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   10e22:	6963      	ldr	r3, [r4, #20]
   10e24:	b1ab      	cbz	r3, 10e52 <conn_cleanup+0x4a>
   10e26:	4916      	ldr	r1, [pc, #88]	; (10e80 <conn_cleanup+0x78>)
   10e28:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   10e2c:	4815      	ldr	r0, [pc, #84]	; (10e84 <conn_cleanup+0x7c>)
   10e2e:	f017 fec9 	bl	28bc4 <assert_print>
   10e32:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10e36:	4812      	ldr	r0, [pc, #72]	; (10e80 <conn_cleanup+0x78>)
   10e38:	f017 febd 	bl	28bb6 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   10e3c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   10e3e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   10e40:	f00f f94c 	bl	200dc <net_buf_unref>
		if (tx) {
   10e44:	2d00      	cmp	r5, #0
   10e46:	d0e5      	beq.n	10e14 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   10e48:	4629      	mov	r1, r5
   10e4a:	4620      	mov	r0, r4
   10e4c:	f7ff fec4 	bl	10bd8 <conn_tx_destroy>
   10e50:	e7de      	b.n	10e10 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10e52:	69e3      	ldr	r3, [r4, #28]
   10e54:	b143      	cbz	r3, 10e68 <conn_cleanup+0x60>
   10e56:	490a      	ldr	r1, [pc, #40]	; (10e80 <conn_cleanup+0x78>)
   10e58:	f240 22b5 	movw	r2, #693	; 0x2b5
   10e5c:	4809      	ldr	r0, [pc, #36]	; (10e84 <conn_cleanup+0x7c>)
   10e5e:	f017 feb1 	bl	28bc4 <assert_print>
   10e62:	f240 21b5 	movw	r1, #693	; 0x2b5
   10e66:	e7e6      	b.n	10e36 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   10e68:	4620      	mov	r0, r4
   10e6a:	f01a f85f 	bl	2af2c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   10e6e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10e72:	2200      	movs	r2, #0
}
   10e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   10e78:	2300      	movs	r3, #0
   10e7a:	f015 bbfd 	b.w	26678 <k_work_reschedule>
   10e7e:	bf00      	nop
   10e80:	000320ce 	.word	0x000320ce
   10e84:	00030da5 	.word	0x00030da5

00010e88 <bt_conn_recv>:
{
   10e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e8c:	4616      	mov	r6, r2
   10e8e:	b086      	sub	sp, #24
   10e90:	af00      	add	r7, sp, #0
   10e92:	4604      	mov	r4, r0
   10e94:	460d      	mov	r5, r1
	tx_notify(conn);
   10e96:	f7ff fe6f 	bl	10b78 <tx_notify>
	switch (flags) {
   10e9a:	2e01      	cmp	r6, #1
   10e9c:	d032      	beq.n	10f04 <bt_conn_recv+0x7c>
   10e9e:	2e02      	cmp	r6, #2
   10ea0:	d16e      	bne.n	10f80 <bt_conn_recv+0xf8>
		if (conn->rx) {
   10ea2:	6923      	ldr	r3, [r4, #16]
   10ea4:	b16b      	cbz	r3, 10ec2 <bt_conn_recv+0x3a>
			LOG_ERR("Unexpected first L2CAP frame");
   10ea6:	4b42      	ldr	r3, [pc, #264]	; (10fb0 <bt_conn_recv+0x128>)
   10ea8:	e9c7 6304 	strd	r6, r3, [r7, #16]
   10eac:	4841      	ldr	r0, [pc, #260]	; (10fb4 <bt_conn_recv+0x12c>)
   10eae:	2300      	movs	r3, #0
   10eb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10eb4:	f107 0210 	add.w	r2, r7, #16
   10eb8:	f7f9 fe50 	bl	ab5c <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   10ebc:	4620      	mov	r0, r4
   10ebe:	f01a f835 	bl	2af2c <bt_conn_reset_rx_state>
		conn->rx = buf;
   10ec2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   10ec4:	6921      	ldr	r1, [r4, #16]
   10ec6:	8a08      	ldrh	r0, [r1, #16]
   10ec8:	2801      	cmp	r0, #1
   10eca:	d931      	bls.n	10f30 <bt_conn_recv+0xa8>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   10ecc:	68cb      	ldr	r3, [r1, #12]
   10ece:	881b      	ldrh	r3, [r3, #0]
   10ed0:	3304      	adds	r3, #4
   10ed2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   10ed4:	4298      	cmp	r0, r3
   10ed6:	d32b      	bcc.n	10f30 <bt_conn_recv+0xa8>
	if (conn->rx->len > acl_total_len) {
   10ed8:	d963      	bls.n	10fa2 <bt_conn_recv+0x11a>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   10eda:	466d      	mov	r5, sp
   10edc:	b088      	sub	sp, #32
   10ede:	466a      	mov	r2, sp
   10ee0:	61d3      	str	r3, [r2, #28]
   10ee2:	2304      	movs	r3, #4
   10ee4:	4934      	ldr	r1, [pc, #208]	; (10fb8 <bt_conn_recv+0x130>)
   10ee6:	e9c2 1005 	strd	r1, r0, [r2, #20]
   10eea:	f842 3f10 	str.w	r3, [r2, #16]!
   10eee:	2300      	movs	r3, #0
   10ef0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10ef4:	482f      	ldr	r0, [pc, #188]	; (10fb4 <bt_conn_recv+0x12c>)
   10ef6:	f7f9 fe31 	bl	ab5c <z_impl_z_log_msg_static_create>
		bt_conn_reset_rx_state(conn);
   10efa:	4620      	mov	r0, r4
   10efc:	46ad      	mov	sp, r5
   10efe:	f01a f815 	bl	2af2c <bt_conn_reset_rx_state>
		return;
   10f02:	e015      	b.n	10f30 <bt_conn_recv+0xa8>
		if (!conn->rx) {
   10f04:	6923      	ldr	r3, [r4, #16]
   10f06:	b973      	cbnz	r3, 10f26 <bt_conn_recv+0x9e>
			LOG_ERR("Unexpected L2CAP continuation");
   10f08:	4a2c      	ldr	r2, [pc, #176]	; (10fbc <bt_conn_recv+0x134>)
   10f0a:	617a      	str	r2, [r7, #20]
   10f0c:	2202      	movs	r2, #2
   10f0e:	613a      	str	r2, [r7, #16]
   10f10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f14:	4827      	ldr	r0, [pc, #156]	; (10fb4 <bt_conn_recv+0x12c>)
   10f16:	f107 0210 	add.w	r2, r7, #16
   10f1a:	f7f9 fe1f 	bl	ab5c <z_impl_z_log_msg_static_create>
		bt_conn_reset_rx_state(conn);
   10f1e:	4620      	mov	r0, r4
   10f20:	f01a f804 	bl	2af2c <bt_conn_reset_rx_state>
   10f24:	e001      	b.n	10f2a <bt_conn_recv+0xa2>
		if (!buf->len) {
   10f26:	8a2e      	ldrh	r6, [r5, #16]
   10f28:	b936      	cbnz	r6, 10f38 <bt_conn_recv+0xb0>
		net_buf_unref(buf);
   10f2a:	4628      	mov	r0, r5
   10f2c:	f00f f8d6 	bl	200dc <net_buf_unref>
}
   10f30:	3718      	adds	r7, #24
   10f32:	46bd      	mov	sp, r7
   10f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   10f38:	f103 000c 	add.w	r0, r3, #12
   10f3c:	f01c ffc5 	bl	2deca <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   10f40:	4286      	cmp	r6, r0
   10f42:	d913      	bls.n	10f6c <bt_conn_recv+0xe4>
			LOG_ERR("Not enough buffer space for L2CAP data");
   10f44:	4b1e      	ldr	r3, [pc, #120]	; (10fc0 <bt_conn_recv+0x138>)
   10f46:	617b      	str	r3, [r7, #20]
   10f48:	2302      	movs	r3, #2
   10f4a:	613b      	str	r3, [r7, #16]
   10f4c:	2300      	movs	r3, #0
   10f4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f52:	4818      	ldr	r0, [pc, #96]	; (10fb4 <bt_conn_recv+0x12c>)
   10f54:	f107 0210 	add.w	r2, r7, #16
   10f58:	f7f9 fe00 	bl	ab5c <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   10f5c:	2200      	movs	r2, #0
   10f5e:	4620      	mov	r0, r4
   10f60:	6921      	ldr	r1, [r4, #16]
   10f62:	f000 fde9 	bl	11b38 <bt_l2cap_recv>
			conn->rx = NULL;
   10f66:	2300      	movs	r3, #0
   10f68:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   10f6a:	e7de      	b.n	10f2a <bt_conn_recv+0xa2>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10f6c:	6920      	ldr	r0, [r4, #16]
   10f6e:	8a2a      	ldrh	r2, [r5, #16]
   10f70:	68e9      	ldr	r1, [r5, #12]
   10f72:	300c      	adds	r0, #12
   10f74:	f01c ffb1 	bl	2deda <net_buf_simple_add_mem>
		net_buf_unref(buf);
   10f78:	4628      	mov	r0, r5
   10f7a:	f00f f8af 	bl	200dc <net_buf_unref>
		break;
   10f7e:	e7a1      	b.n	10ec4 <bt_conn_recv+0x3c>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   10f80:	46e8      	mov	r8, sp
   10f82:	b088      	sub	sp, #32
   10f84:	466a      	mov	r2, sp
   10f86:	4b0f      	ldr	r3, [pc, #60]	; (10fc4 <bt_conn_recv+0x13c>)
	switch (flags) {
   10f88:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   10f8c:	2303      	movs	r3, #3
   10f8e:	f842 3f10 	str.w	r3, [r2, #16]!
   10f92:	2300      	movs	r3, #0
   10f94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10f98:	4806      	ldr	r0, [pc, #24]	; (10fb4 <bt_conn_recv+0x12c>)
   10f9a:	f7f9 fddf 	bl	ab5c <z_impl_z_log_msg_static_create>
   10f9e:	46c5      	mov	sp, r8
   10fa0:	e7bd      	b.n	10f1e <bt_conn_recv+0x96>
	conn->rx = NULL;
   10fa2:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   10fa4:	2201      	movs	r2, #1
   10fa6:	4620      	mov	r0, r4
	conn->rx = NULL;
   10fa8:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   10faa:	f000 fdc5 	bl	11b38 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   10fae:	e7bf      	b.n	10f30 <bt_conn_recv+0xa8>
   10fb0:	000320fe 	.word	0x000320fe
   10fb4:	0002fc1c 	.word	0x0002fc1c
   10fb8:	0003217e 	.word	0x0003217e
   10fbc:	0003211b 	.word	0x0003211b
   10fc0:	00032139 	.word	0x00032139
   10fc4:	00032160 	.word	0x00032160

00010fc8 <bt_conn_send_cb>:
{
   10fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fca:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   10fcc:	7a83      	ldrb	r3, [r0, #10]
{
   10fce:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10fd0:	2b07      	cmp	r3, #7
{
   10fd2:	460e      	mov	r6, r1
   10fd4:	4615      	mov	r5, r2
   10fd6:	b087      	sub	sp, #28
	if (conn->state != BT_CONN_CONNECTED) {
   10fd8:	d00d      	beq.n	10ff6 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   10fda:	4b24      	ldr	r3, [pc, #144]	; (1106c <bt_conn_send_cb+0xa4>)
   10fdc:	9305      	str	r3, [sp, #20]
   10fde:	2302      	movs	r3, #2
   10fe0:	9304      	str	r3, [sp, #16]
   10fe2:	2300      	movs	r3, #0
   10fe4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fe8:	4821      	ldr	r0, [pc, #132]	; (11070 <bt_conn_send_cb+0xa8>)
   10fea:	aa04      	add	r2, sp, #16
   10fec:	f7f9 fdb6 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   10ff0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10ff4:	e01d      	b.n	11032 <bt_conn_send_cb+0x6a>
	if (cb) {
   10ff6:	2a00      	cmp	r2, #0
   10ff8:	d035      	beq.n	11066 <bt_conn_send_cb+0x9e>
	return z_impl_z_current_get();
   10ffa:	f016 fb09 	bl	27610 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10ffe:	4b1d      	ldr	r3, [pc, #116]	; (11074 <bt_conn_send_cb+0xac>)
   11000:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11002:	481d      	ldr	r0, [pc, #116]	; (11078 <bt_conn_send_cb+0xb0>)
   11004:	bf0b      	itete	eq
   11006:	2300      	moveq	r3, #0
   11008:	f04f 33ff 	movne.w	r3, #4294967295
   1100c:	2200      	moveq	r2, #0
   1100e:	f04f 32ff 	movne.w	r2, #4294967295
   11012:	f014 fe09 	bl	25c28 <z_impl_k_queue_get>
   11016:	4603      	mov	r3, r0
		if (!tx) {
   11018:	b968      	cbnz	r0, 11036 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   1101a:	4a18      	ldr	r2, [pc, #96]	; (1107c <bt_conn_send_cb+0xb4>)
   1101c:	9205      	str	r2, [sp, #20]
   1101e:	2202      	movs	r2, #2
   11020:	9204      	str	r2, [sp, #16]
   11022:	4813      	ldr	r0, [pc, #76]	; (11070 <bt_conn_send_cb+0xa8>)
   11024:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11028:	aa04      	add	r2, sp, #16
   1102a:	f7f9 fd97 	bl	ab5c <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   1102e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   11032:	b007      	add	sp, #28
   11034:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11036:	7aa2      	ldrb	r2, [r4, #10]
   11038:	2a07      	cmp	r2, #7
   1103a:	f04f 0200 	mov.w	r2, #0
   1103e:	d007      	beq.n	11050 <bt_conn_send_cb+0x88>
	k_fifo_put(&free_tx, tx);
   11040:	4601      	mov	r1, r0
	tx->user_data = NULL;
   11042:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   11046:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   11048:	480b      	ldr	r0, [pc, #44]	; (11078 <bt_conn_send_cb+0xb0>)
   1104a:	f01e f9ce 	bl	2f3ea <k_queue_append>
}
   1104e:	e7cf      	b.n	10ff0 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   11050:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   11054:	60c2      	str	r2, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   11056:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1105a:	4631      	mov	r1, r6
		tx_data(buf)->tx = tx;
   1105c:	61b3      	str	r3, [r6, #24]
	net_buf_put(&conn->tx_queue, buf);
   1105e:	f00f f81d 	bl	2009c <net_buf_put>
	return 0;
   11062:	2000      	movs	r0, #0
   11064:	e7e5      	b.n	11032 <bt_conn_send_cb+0x6a>
   11066:	4613      	mov	r3, r2
   11068:	e7f5      	b.n	11056 <bt_conn_send_cb+0x8e>
   1106a:	bf00      	nop
   1106c:	00032199 	.word	0x00032199
   11070:	0002fc1c 	.word	0x0002fc1c
   11074:	2000a508 	.word	0x2000a508
   11078:	20008ed4 	.word	0x20008ed4
   1107c:	000321a8 	.word	0x000321a8

00011080 <bt_conn_prepare_events>:
{
   11080:	b570      	push	{r4, r5, r6, lr}
   11082:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   11084:	4818      	ldr	r0, [pc, #96]	; (110e8 <bt_conn_prepare_events+0x68>)
   11086:	f01e fb58 	bl	2f73a <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1108a:	4620      	mov	r0, r4
   1108c:	2200      	movs	r2, #0
   1108e:	2101      	movs	r1, #1
   11090:	4b15      	ldr	r3, [pc, #84]	; (110e8 <bt_conn_prepare_events+0x68>)
   11092:	f017 f8ef 	bl	28274 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11096:	4a15      	ldr	r2, [pc, #84]	; (110ec <bt_conn_prepare_events+0x6c>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   11098:	f104 0014 	add.w	r0, r4, #20
   1109c:	e8d2 3faf 	lda	r3, [r2]
	if (!atomic_get(&conn->ref)) {
   110a0:	b90b      	cbnz	r3, 110a6 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   110a2:	2001      	movs	r0, #1
}
   110a4:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   110a6:	f1a2 03c4 	sub.w	r3, r2, #196	; 0xc4
   110aa:	f812 2cba 	ldrb.w	r2, [r2, #-186]
   110ae:	b972      	cbnz	r2, 110ce <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   110b0:	1d1a      	adds	r2, r3, #4
   110b2:	e8d2 1fef 	ldaex	r1, [r2]
   110b6:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   110ba:	e8c2 5fe6 	stlex	r6, r5, [r2]
   110be:	2e00      	cmp	r6, #0
   110c0:	d1f7      	bne.n	110b2 <bt_conn_prepare_events+0x32>
   110c2:	064a      	lsls	r2, r1, #25
   110c4:	d503      	bpl.n	110ce <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
   110c6:	4618      	mov	r0, r3
   110c8:	f7ff fe9e 	bl	10e08 <conn_cleanup>
		return -ENOTCONN;
   110cc:	e7e9      	b.n	110a2 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   110ce:	7a9b      	ldrb	r3, [r3, #10]
   110d0:	2b07      	cmp	r3, #7
   110d2:	d1e6      	bne.n	110a2 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   110d4:	4b06      	ldr	r3, [pc, #24]	; (110f0 <bt_conn_prepare_events+0x70>)
   110d6:	2200      	movs	r2, #0
   110d8:	2104      	movs	r1, #4
   110da:	f017 f8cb 	bl	28274 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   110de:	2301      	movs	r3, #1
			ev_count++;
   110e0:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   110e2:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   110e6:	e7dd      	b.n	110a4 <bt_conn_prepare_events+0x24>
   110e8:	20008730 	.word	0x20008730
   110ec:	20009d8c 	.word	0x20009d8c
   110f0:	20009d00 	.word	0x20009d00

000110f4 <bt_conn_ref>:
{
   110f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   110f6:	b180      	cbz	r0, 1111a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   110f8:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   110fc:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   11100:	b1b3      	cbz	r3, 11130 <bt_conn_ref+0x3c>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   11102:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11104:	e8d2 4fef 	ldaex	r4, [r2]
   11108:	429c      	cmp	r4, r3
   1110a:	d104      	bne.n	11116 <bt_conn_ref+0x22>
   1110c:	e8c2 1fec 	stlex	ip, r1, [r2]
   11110:	f1bc 0f00 	cmp.w	ip, #0
   11114:	d1f6      	bne.n	11104 <bt_conn_ref+0x10>
   11116:	d1f1      	bne.n	110fc <bt_conn_ref+0x8>
}
   11118:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1111a:	4906      	ldr	r1, [pc, #24]	; (11134 <bt_conn_ref+0x40>)
   1111c:	4806      	ldr	r0, [pc, #24]	; (11138 <bt_conn_ref+0x44>)
   1111e:	f240 427c 	movw	r2, #1148	; 0x47c
   11122:	f017 fd4f 	bl	28bc4 <assert_print>
   11126:	f240 417c 	movw	r1, #1148	; 0x47c
   1112a:	4802      	ldr	r0, [pc, #8]	; (11134 <bt_conn_ref+0x40>)
   1112c:	f017 fd43 	bl	28bb6 <assert_post_action>
			return NULL;
   11130:	4618      	mov	r0, r3
   11132:	e7f1      	b.n	11118 <bt_conn_ref+0x24>
   11134:	000320ce 	.word	0x000320ce
   11138:	00030da5 	.word	0x00030da5

0001113c <bt_conn_unref>:
{
   1113c:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1113e:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11142:	e8d3 2fef 	ldaex	r2, [r3]
   11146:	1e51      	subs	r1, r2, #1
   11148:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1114c:	2c00      	cmp	r4, #0
   1114e:	d1f8      	bne.n	11142 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   11150:	2a00      	cmp	r2, #0
   11152:	dc0a      	bgt.n	1116a <bt_conn_unref+0x2e>
   11154:	490b      	ldr	r1, [pc, #44]	; (11184 <bt_conn_unref+0x48>)
   11156:	480c      	ldr	r0, [pc, #48]	; (11188 <bt_conn_unref+0x4c>)
   11158:	f44f 6293 	mov.w	r2, #1176	; 0x498
   1115c:	f017 fd32 	bl	28bc4 <assert_print>
   11160:	f44f 6193 	mov.w	r1, #1176	; 0x498
   11164:	4807      	ldr	r0, [pc, #28]	; (11184 <bt_conn_unref+0x48>)
   11166:	f017 fd26 	bl	28bb6 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1116a:	f240 1201 	movw	r2, #257	; 0x101
   1116e:	8841      	ldrh	r1, [r0, #2]
   11170:	4291      	cmp	r1, r2
   11172:	d106      	bne.n	11182 <bt_conn_unref+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11174:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   11178:	b91b      	cbnz	r3, 11182 <bt_conn_unref+0x46>
}
   1117a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1117e:	f7fe be39 	b.w	fdf4 <bt_le_adv_resume>
}
   11182:	bd10      	pop	{r4, pc}
   11184:	000320ce 	.word	0x000320ce
   11188:	00030da5 	.word	0x00030da5

0001118c <bt_conn_lookup_handle>:
{
   1118c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1118e:	2101      	movs	r1, #1
   11190:	4801      	ldr	r0, [pc, #4]	; (11198 <bt_conn_lookup_handle+0xc>)
   11192:	f019 bed4 	b.w	2af3e <conn_lookup_handle>
   11196:	bf00      	nop
   11198:	20009cc8 	.word	0x20009cc8

0001119c <bt_conn_set_state>:
{
   1119c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1119e:	7a85      	ldrb	r5, [r0, #10]
{
   111a0:	4604      	mov	r4, r0
	if (conn->state == state) {
   111a2:	428d      	cmp	r5, r1
   111a4:	f000 8089 	beq.w	112ba <bt_conn_set_state+0x11e>
	conn->state = state;
   111a8:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   111aa:	b925      	cbnz	r5, 111b6 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   111ac:	7883      	ldrb	r3, [r0, #2]
   111ae:	2b08      	cmp	r3, #8
   111b0:	d001      	beq.n	111b6 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   111b2:	f7ff ff9f 	bl	110f4 <bt_conn_ref>
	switch (conn->state) {
   111b6:	7aa3      	ldrb	r3, [r4, #10]
   111b8:	2b01      	cmp	r3, #1
   111ba:	d116      	bne.n	111ea <bt_conn_set_state+0x4e>
		tx->pending_no_cb = 0U;
   111bc:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   111be:	4d4e      	ldr	r5, [pc, #312]	; (112f8 <bt_conn_set_state+0x15c>)
	__asm__ volatile(
   111c0:	f04f 0220 	mov.w	r2, #32
   111c4:	f3ef 8311 	mrs	r3, BASEPRI
   111c8:	f382 8812 	msr	BASEPRI_MAX, r2
   111cc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   111d0:	69e2      	ldr	r2, [r4, #28]
   111d2:	2a00      	cmp	r2, #0
   111d4:	d06b      	beq.n	112ae <bt_conn_set_state+0x112>
			conn->pending_no_cb--;
   111d6:	3a01      	subs	r2, #1
   111d8:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   111da:	f383 8811 	msr	BASEPRI, r3
   111de:	f3bf 8f6f 	isb	sy
   111e2:	4628      	mov	r0, r5
   111e4:	f014 fd78 	bl	25cd8 <z_impl_k_sem_give>
}
   111e8:	e7ea      	b.n	111c0 <bt_conn_set_state+0x24>
	switch (conn->state) {
   111ea:	2b07      	cmp	r3, #7
   111ec:	d009      	beq.n	11202 <bt_conn_set_state+0x66>
   111ee:	2b00      	cmp	r3, #0
   111f0:	d163      	bne.n	112ba <bt_conn_set_state+0x11e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   111f2:	78a3      	ldrb	r3, [r4, #2]
   111f4:	2b04      	cmp	r3, #4
   111f6:	d121      	bne.n	1123c <bt_conn_set_state+0xa0>
			bt_conn_unref(conn);
   111f8:	4620      	mov	r0, r4
}
   111fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   111fe:	f7ff bf9d 	b.w	1113c <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11202:	78a3      	ldrb	r3, [r4, #2]
   11204:	2b04      	cmp	r3, #4
   11206:	d058      	beq.n	112ba <bt_conn_set_state+0x11e>
	z_impl_k_queue_init(queue);
   11208:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1120c:	f01e f8e0 	bl	2f3d0 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   11210:	2100      	movs	r1, #0
   11212:	483a      	ldr	r0, [pc, #232]	; (112fc <bt_conn_set_state+0x160>)
   11214:	f017 f90a 	bl	2842c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11218:	2300      	movs	r3, #0
	list->tail = NULL;
   1121a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1121e:	78e3      	ldrb	r3, [r4, #3]
   11220:	2b01      	cmp	r3, #1
   11222:	d14a      	bne.n	112ba <bt_conn_set_state+0x11e>
			conn->le.conn_param_retry_countdown =
   11224:	2303      	movs	r3, #3
   11226:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1122a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1122e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   11232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   11236:	2300      	movs	r3, #0
   11238:	f015 b9ba 	b.w	265b0 <k_work_schedule>
		switch (old_state) {
   1123c:	3d01      	subs	r5, #1
   1123e:	2d05      	cmp	r5, #5
   11240:	d83b      	bhi.n	112ba <bt_conn_set_state+0x11e>
   11242:	a301      	add	r3, pc, #4	; (adr r3, 11248 <bt_conn_set_state+0xac>)
   11244:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11248:	00011261 	.word	0x00011261
   1124c:	000112a1 	.word	0x000112a1
   11250:	000111f9 	.word	0x000111f9
   11254:	000111f9 	.word	0x000111f9
   11258:	000112a1 	.word	0x000112a1
   1125c:	000112a1 	.word	0x000112a1
			tx_notify(conn);
   11260:	4620      	mov	r0, r4
   11262:	f7ff fc89 	bl	10b78 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   11266:	78a3      	ldrb	r3, [r4, #2]
   11268:	2b01      	cmp	r3, #1
   1126a:	d10a      	bne.n	11282 <bt_conn_set_state+0xe6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1126c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   11270:	4628      	mov	r0, r5
   11272:	f01e f943 	bl	2f4fc <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   11276:	f010 0f0c 	tst.w	r0, #12
   1127a:	d002      	beq.n	11282 <bt_conn_set_state+0xe6>
				k_work_cancel_delayable(&conn->deferred_work);
   1127c:	4628      	mov	r0, r5
   1127e:	f015 fa01 	bl	26684 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11282:	3404      	adds	r4, #4
   11284:	e8d4 3fef 	ldaex	r3, [r4]
   11288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1128c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11290:	2a00      	cmp	r2, #0
   11292:	d1f7      	bne.n	11284 <bt_conn_set_state+0xe8>
}
   11294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11298:	2100      	movs	r1, #0
   1129a:	4818      	ldr	r0, [pc, #96]	; (112fc <bt_conn_set_state+0x160>)
   1129c:	f017 b8c6 	b.w	2842c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   112a0:	7a63      	ldrb	r3, [r4, #9]
   112a2:	2b00      	cmp	r3, #0
   112a4:	d0a8      	beq.n	111f8 <bt_conn_set_state+0x5c>
				notify_connected(conn);
   112a6:	4620      	mov	r0, r4
   112a8:	f7ff fc38 	bl	10b1c <notify_connected>
   112ac:	e7a4      	b.n	111f8 <bt_conn_set_state+0x5c>
	return list->head;
   112ae:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   112b0:	b921      	cbnz	r1, 112bc <bt_conn_set_state+0x120>
   112b2:	f383 8811 	msr	BASEPRI, r3
   112b6:	f3bf 8f6f 	isb	sy
}
   112ba:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   112bc:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   112be:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   112c0:	4281      	cmp	r1, r0
	list->tail = node;
   112c2:	bf08      	it	eq
   112c4:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   112c6:	6162      	str	r2, [r4, #20]
   112c8:	f383 8811 	msr	BASEPRI, r3
   112cc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   112d0:	f04f 0220 	mov.w	r2, #32
   112d4:	f3ef 8311 	mrs	r3, BASEPRI
   112d8:	f382 8812 	msr	BASEPRI_MAX, r2
   112dc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   112e0:	68ca      	ldr	r2, [r1, #12]
   112e2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   112e4:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   112e6:	f383 8811 	msr	BASEPRI, r3
   112ea:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   112ee:	4620      	mov	r0, r4
   112f0:	f7ff fc72 	bl	10bd8 <conn_tx_destroy>
   112f4:	e775      	b.n	111e2 <bt_conn_set_state+0x46>
   112f6:	bf00      	nop
   112f8:	20008440 	.word	0x20008440
   112fc:	20008730 	.word	0x20008730

00011300 <bt_conn_index>:
		index = conn - acl_conns;
   11300:	4a0a      	ldr	r2, [pc, #40]	; (1132c <bt_conn_index+0x2c>)
{
   11302:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   11304:	490a      	ldr	r1, [pc, #40]	; (11330 <bt_conn_index+0x30>)
   11306:	1a83      	subs	r3, r0, r2
   11308:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1130a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1130c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   11310:	d00a      	beq.n	11328 <bt_conn_index+0x28>
   11312:	4908      	ldr	r1, [pc, #32]	; (11334 <bt_conn_index+0x34>)
   11314:	4808      	ldr	r0, [pc, #32]	; (11338 <bt_conn_index+0x38>)
   11316:	f240 42b6 	movw	r2, #1206	; 0x4b6
   1131a:	f017 fc53 	bl	28bc4 <assert_print>
   1131e:	f240 41b6 	movw	r1, #1206	; 0x4b6
   11322:	4804      	ldr	r0, [pc, #16]	; (11334 <bt_conn_index+0x34>)
   11324:	f017 fc47 	bl	28bb6 <assert_post_action>
}
   11328:	b2d8      	uxtb	r0, r3
   1132a:	bd08      	pop	{r3, pc}
   1132c:	20009cc8 	.word	0x20009cc8
   11330:	c28f5c29 	.word	0xc28f5c29
   11334:	000320ce 	.word	0x000320ce
   11338:	00030da5 	.word	0x00030da5

0001133c <bt_conn_create_pdu_timeout>:
{
   1133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1133e:	4604      	mov	r4, r0
   11340:	460d      	mov	r5, r1
   11342:	4617      	mov	r7, r2
   11344:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   11346:	f01e f814 	bl	2f372 <k_is_in_isr>
   1134a:	b150      	cbz	r0, 11362 <bt_conn_create_pdu_timeout+0x26>
   1134c:	490d      	ldr	r1, [pc, #52]	; (11384 <bt_conn_create_pdu_timeout+0x48>)
   1134e:	480e      	ldr	r0, [pc, #56]	; (11388 <bt_conn_create_pdu_timeout+0x4c>)
   11350:	f240 42d2 	movw	r2, #1234	; 0x4d2
   11354:	f017 fc36 	bl	28bc4 <assert_print>
   11358:	f240 41d2 	movw	r1, #1234	; 0x4d2
   1135c:	4809      	ldr	r0, [pc, #36]	; (11384 <bt_conn_create_pdu_timeout+0x48>)
   1135e:	f017 fc2a 	bl	28bb6 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11362:	490a      	ldr	r1, [pc, #40]	; (1138c <bt_conn_create_pdu_timeout+0x50>)
   11364:	463a      	mov	r2, r7
   11366:	2c00      	cmp	r4, #0
   11368:	bf14      	ite	ne
   1136a:	4620      	movne	r0, r4
   1136c:	4608      	moveq	r0, r1
   1136e:	4633      	mov	r3, r6
   11370:	f01c fd55 	bl	2de1e <net_buf_alloc_fixed>
	if (!buf) {
   11374:	4604      	mov	r4, r0
   11376:	b118      	cbz	r0, 11380 <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   11378:	1d69      	adds	r1, r5, #5
   1137a:	300c      	adds	r0, #12
   1137c:	f00e fdd6 	bl	1ff2c <net_buf_simple_reserve>
}
   11380:	4620      	mov	r0, r4
   11382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11384:	000320ce 	.word	0x000320ce
   11388:	00030da5 	.word	0x00030da5
   1138c:	20008f24 	.word	0x20008f24

00011390 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   11390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11392:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   11394:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11396:	e8d3 2faf 	lda	r2, [r3]
   1139a:	0592      	lsls	r2, r2, #22
   1139c:	d515      	bpl.n	113ca <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   1139e:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   113a2:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   113a6:	4291      	cmp	r1, r2
   113a8:	d80f      	bhi.n	113ca <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   113aa:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   113ae:	4291      	cmp	r1, r2
   113b0:	d30b      	bcc.n	113ca <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   113b2:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   113b6:	4291      	cmp	r1, r2
   113b8:	d107      	bne.n	113ca <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   113ba:	e8d3 1fef 	ldaex	r1, [r3]
   113be:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   113c2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   113c6:	2a00      	cmp	r2, #0
   113c8:	d1f7      	bne.n	113ba <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   113ca:	4b16      	ldr	r3, [pc, #88]	; (11424 <notify_le_param_updated+0x94>)
   113cc:	681d      	ldr	r5, [r3, #0]
   113ce:	b975      	cbnz	r5, 113ee <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   113d0:	4d15      	ldr	r5, [pc, #84]	; (11428 <notify_le_param_updated+0x98>)
   113d2:	4f16      	ldr	r7, [pc, #88]	; (1142c <notify_le_param_updated+0x9c>)
   113d4:	42bd      	cmp	r5, r7
   113d6:	d922      	bls.n	1141e <notify_le_param_updated+0x8e>
   113d8:	4915      	ldr	r1, [pc, #84]	; (11430 <notify_le_param_updated+0xa0>)
   113da:	4816      	ldr	r0, [pc, #88]	; (11434 <notify_le_param_updated+0xa4>)
   113dc:	f240 52a5 	movw	r2, #1445	; 0x5a5
   113e0:	f017 fbf0 	bl	28bc4 <assert_print>
   113e4:	f240 51a5 	movw	r1, #1445	; 0x5a5
   113e8:	4811      	ldr	r0, [pc, #68]	; (11430 <notify_le_param_updated+0xa0>)
   113ea:	f017 fbe4 	bl	28bb6 <assert_post_action>
		if (cb->le_param_updated) {
   113ee:	68ee      	ldr	r6, [r5, #12]
   113f0:	b13e      	cbz	r6, 11402 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   113f2:	4620      	mov	r0, r4
   113f4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   113f8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   113fc:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   11400:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   11402:	692d      	ldr	r5, [r5, #16]
   11404:	e7e3      	b.n	113ce <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   11406:	68ee      	ldr	r6, [r5, #12]
   11408:	b13e      	cbz	r6, 1141a <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   1140a:	4620      	mov	r0, r4
   1140c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   11410:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   11414:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   11418:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1141a:	3514      	adds	r5, #20
   1141c:	e7da      	b.n	113d4 <notify_le_param_updated+0x44>
   1141e:	d3f2      	bcc.n	11406 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   11420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11422:	bf00      	nop
   11424:	2000a7b0 	.word	0x2000a7b0
   11428:	0002fba0 	.word	0x0002fba0
   1142c:	0002fbc8 	.word	0x0002fbc8
   11430:	000320ce 	.word	0x000320ce
   11434:	00030da5 	.word	0x00030da5

00011438 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   11438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1143c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1143e:	4608      	mov	r0, r1
{
   11440:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   11442:	f019 faf2 	bl	2aa2a <bt_le_conn_params_valid>
   11446:	4605      	mov	r5, r0
   11448:	b918      	cbnz	r0, 11452 <le_param_req+0x1a>
		return false;
   1144a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1144c:	4628      	mov	r0, r5
   1144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   11452:	4b19      	ldr	r3, [pc, #100]	; (114b8 <le_param_req+0x80>)
   11454:	681e      	ldr	r6, [r3, #0]
   11456:	b97e      	cbnz	r6, 11478 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   11458:	4e18      	ldr	r6, [pc, #96]	; (114bc <le_param_req+0x84>)
   1145a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 114c0 <le_param_req+0x88>
   1145e:	4546      	cmp	r6, r8
   11460:	d923      	bls.n	114aa <le_param_req+0x72>
   11462:	4918      	ldr	r1, [pc, #96]	; (114c4 <le_param_req+0x8c>)
   11464:	4818      	ldr	r0, [pc, #96]	; (114c8 <le_param_req+0x90>)
   11466:	f240 52ed 	movw	r2, #1517	; 0x5ed
   1146a:	f017 fbab 	bl	28bc4 <assert_print>
   1146e:	f240 51ed 	movw	r1, #1517	; 0x5ed
   11472:	4814      	ldr	r0, [pc, #80]	; (114c4 <le_param_req+0x8c>)
   11474:	f017 fb9f 	bl	28bb6 <assert_post_action>
		if (!cb->le_param_req) {
   11478:	68b3      	ldr	r3, [r6, #8]
   1147a:	b90b      	cbnz	r3, 11480 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   1147c:	6936      	ldr	r6, [r6, #16]
   1147e:	e7ea      	b.n	11456 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   11480:	4621      	mov	r1, r4
   11482:	4638      	mov	r0, r7
   11484:	4798      	blx	r3
   11486:	2800      	cmp	r0, #0
   11488:	d0df      	beq.n	1144a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1148a:	4620      	mov	r0, r4
   1148c:	f019 facd 	bl	2aa2a <bt_le_conn_params_valid>
   11490:	2800      	cmp	r0, #0
   11492:	d1f3      	bne.n	1147c <le_param_req+0x44>
   11494:	e7d9      	b.n	1144a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   11496:	4621      	mov	r1, r4
   11498:	4638      	mov	r0, r7
   1149a:	4798      	blx	r3
   1149c:	2800      	cmp	r0, #0
   1149e:	d0d4      	beq.n	1144a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   114a0:	4620      	mov	r0, r4
   114a2:	f019 fac2 	bl	2aa2a <bt_le_conn_params_valid>
   114a6:	b920      	cbnz	r0, 114b2 <le_param_req+0x7a>
   114a8:	e7cf      	b.n	1144a <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   114aa:	d2cf      	bcs.n	1144c <le_param_req+0x14>
		if (!cb->le_param_req) {
   114ac:	68b3      	ldr	r3, [r6, #8]
   114ae:	2b00      	cmp	r3, #0
   114b0:	d1f1      	bne.n	11496 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   114b2:	3614      	adds	r6, #20
   114b4:	e7d3      	b.n	1145e <le_param_req+0x26>
   114b6:	bf00      	nop
   114b8:	2000a7b0 	.word	0x2000a7b0
   114bc:	0002fba0 	.word	0x0002fba0
   114c0:	0002fbc8 	.word	0x0002fbc8
   114c4:	000320ce 	.word	0x000320ce
   114c8:	00030da5 	.word	0x00030da5

000114cc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   114cc:	b570      	push	{r4, r5, r6, lr}
   114ce:	4606      	mov	r6, r0
   114d0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   114d2:	4809      	ldr	r0, [pc, #36]	; (114f8 <bt_conn_add_le+0x2c>)
   114d4:	2101      	movs	r1, #1
   114d6:	f7ff fc69 	bl	10dac <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   114da:	4604      	mov	r4, r0
   114dc:	b150      	cbz	r0, 114f4 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   114de:	7206      	strb	r6, [r0, #8]
   114e0:	2207      	movs	r2, #7
   114e2:	4629      	mov	r1, r5
   114e4:	3090      	adds	r0, #144	; 0x90
   114e6:	f019 f818 	bl	2a51a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   114ea:	2301      	movs	r3, #1
   114ec:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   114ee:	4b03      	ldr	r3, [pc, #12]	; (114fc <bt_conn_add_le+0x30>)
   114f0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   114f4:	4620      	mov	r0, r4
   114f6:	bd70      	pop	{r4, r5, r6, pc}
   114f8:	20009cc8 	.word	0x20009cc8
   114fc:	00280018 	.word	0x00280018

00011500 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   11500:	b570      	push	{r4, r5, r6, lr}
   11502:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11504:	480a      	ldr	r0, [pc, #40]	; (11530 <bt_conn_lookup_addr_le+0x30>)
{
   11506:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11508:	f7ff fdf4 	bl	110f4 <bt_conn_ref>
   1150c:	4604      	mov	r4, r0

		if (!conn) {
   1150e:	b120      	cbz	r0, 1151a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11510:	7883      	ldrb	r3, [r0, #2]
   11512:	2b01      	cmp	r3, #1
   11514:	d004      	beq.n	11520 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   11516:	f7ff fe11 	bl	1113c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1151a:	2400      	movs	r4, #0
}
   1151c:	4620      	mov	r0, r4
   1151e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   11520:	4632      	mov	r2, r6
   11522:	4629      	mov	r1, r5
   11524:	f019 fd58 	bl	2afd8 <bt_conn_is_peer_addr_le>
   11528:	2800      	cmp	r0, #0
   1152a:	d1f7      	bne.n	1151c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1152c:	4620      	mov	r0, r4
   1152e:	e7f2      	b.n	11516 <bt_conn_lookup_addr_le+0x16>
   11530:	20009cc8 	.word	0x20009cc8

00011534 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   11534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11536:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11538:	480e      	ldr	r0, [pc, #56]	; (11574 <bt_conn_lookup_state_le+0x40>)
{
   1153a:	460e      	mov	r6, r1
   1153c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1153e:	f7ff fdd9 	bl	110f4 <bt_conn_ref>

		if (!conn) {
   11542:	4604      	mov	r4, r0
   11544:	b120      	cbz	r0, 11550 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   11546:	7883      	ldrb	r3, [r0, #2]
   11548:	2b01      	cmp	r3, #1
   1154a:	d003      	beq.n	11554 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1154c:	f7ff fdf6 	bl	1113c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   11550:	2400      	movs	r4, #0
   11552:	e00d      	b.n	11570 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11554:	b136      	cbz	r6, 11564 <bt_conn_lookup_state_le+0x30>
   11556:	4632      	mov	r2, r6
   11558:	4629      	mov	r1, r5
   1155a:	f019 fd3d 	bl	2afd8 <bt_conn_is_peer_addr_le>
   1155e:	b908      	cbnz	r0, 11564 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   11560:	4620      	mov	r0, r4
   11562:	e7f3      	b.n	1154c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   11564:	7aa3      	ldrb	r3, [r4, #10]
   11566:	42bb      	cmp	r3, r7
   11568:	d1fa      	bne.n	11560 <bt_conn_lookup_state_le+0x2c>
   1156a:	7a23      	ldrb	r3, [r4, #8]
   1156c:	42ab      	cmp	r3, r5
   1156e:	d1f7      	bne.n	11560 <bt_conn_lookup_state_le+0x2c>
}
   11570:	4620      	mov	r0, r4
   11572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11574:	20009cc8 	.word	0x20009cc8

00011578 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   11578:	b510      	push	{r4, lr}
	info->type = conn->type;
   1157a:	7883      	ldrb	r3, [r0, #2]
   1157c:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   1157e:	78c3      	ldrb	r3, [r0, #3]
   11580:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   11582:	7a03      	ldrb	r3, [r0, #8]
   11584:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   11586:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   11588:	2b08      	cmp	r3, #8
   1158a:	d80c      	bhi.n	115a6 <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   1158c:	4a24      	ldr	r2, [pc, #144]	; (11620 <bt_conn_get_info+0xa8>)
   1158e:	5cd3      	ldrb	r3, [r2, r3]
   11590:	770b      	strb	r3, [r1, #28]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   11592:	2301      	movs	r3, #1
   11594:	774b      	strb	r3, [r1, #29]
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   11596:	2300      	movs	r3, #0
   11598:	83cb      	strh	r3, [r1, #30]
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   1159a:	7883      	ldrb	r3, [r0, #2]
   1159c:	2b01      	cmp	r3, #1
   1159e:	d00d      	beq.n	115bc <bt_conn_get_info+0x44>
		}
		return 0;
#endif
	}

	return -EINVAL;
   115a0:	f06f 0015 	mvn.w	r0, #21
}
   115a4:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   115a6:	491f      	ldr	r1, [pc, #124]	; (11624 <bt_conn_get_info+0xac>)
   115a8:	481f      	ldr	r0, [pc, #124]	; (11628 <bt_conn_get_info+0xb0>)
   115aa:	f640 120e 	movw	r2, #2318	; 0x90e
   115ae:	f017 fb09 	bl	28bc4 <assert_print>
   115b2:	f640 110e 	movw	r1, #2318	; 0x90e
   115b6:	481b      	ldr	r0, [pc, #108]	; (11624 <bt_conn_get_info+0xac>)
   115b8:	f017 fafd 	bl	28bb6 <assert_post_action>
		info->le.dst = &conn->le.dst;
   115bc:	f100 0390 	add.w	r3, r0, #144	; 0x90
   115c0:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   115c2:	7a03      	ldrb	r3, [r0, #8]
   115c4:	4a19      	ldr	r2, [pc, #100]	; (1162c <bt_conn_get_info+0xb4>)
   115c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   115ca:	4413      	add	r3, r2
   115cc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   115ce:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   115d0:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   115d4:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   115d8:	b114      	cbz	r4, 115e0 <bt_conn_get_info+0x68>
   115da:	461c      	mov	r4, r3
   115dc:	4613      	mov	r3, r2
   115de:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   115e0:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   115e4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   115e8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   115ea:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   115ee:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   115f0:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   115f4:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   115f6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   115fa:	b123      	cbz	r3, 11606 <bt_conn_get_info+0x8e>
   115fc:	7b5b      	ldrb	r3, [r3, #13]
   115fe:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   11600:	bf44      	itt	mi
   11602:	2301      	movmi	r3, #1
   11604:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   11606:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1160a:	b113      	cbz	r3, 11612 <bt_conn_get_info+0x9a>
   1160c:	7b5b      	ldrb	r3, [r3, #13]
   1160e:	069b      	lsls	r3, r3, #26
   11610:	d401      	bmi.n	11616 <bt_conn_get_info+0x9e>
		return 0;
   11612:	2000      	movs	r0, #0
   11614:	e7c6      	b.n	115a4 <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   11616:	7fcb      	ldrb	r3, [r1, #31]
   11618:	f043 0302 	orr.w	r3, r3, #2
   1161c:	77cb      	strb	r3, [r1, #31]
   1161e:	e7f8      	b.n	11612 <bt_conn_get_info+0x9a>
   11620:	000321c6 	.word	0x000321c6
   11624:	000320ce 	.word	0x000320ce
   11628:	00030da5 	.word	0x00030da5
   1162c:	20008380 	.word	0x20008380

00011630 <send_conn_le_param_update>:
{
   11630:	b538      	push	{r3, r4, r5, lr}
   11632:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11634:	4608      	mov	r0, r1
{
   11636:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11638:	f019 f9f7 	bl	2aa2a <bt_le_conn_params_valid>
   1163c:	b338      	cbz	r0, 1168e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1163e:	4b15      	ldr	r3, [pc, #84]	; (11694 <send_conn_le_param_update+0x64>)
   11640:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   11644:	0799      	lsls	r1, r3, #30
   11646:	d407      	bmi.n	11658 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   11648:	78e3      	ldrb	r3, [r4, #3]
   1164a:	b173      	cbz	r3, 1166a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1164c:	4629      	mov	r1, r5
   1164e:	4620      	mov	r0, r4
}
   11650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11654:	f000 baae 	b.w	11bb4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11658:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   1165c:	079a      	lsls	r2, r3, #30
   1165e:	d5f3      	bpl.n	11648 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11660:	1d23      	adds	r3, r4, #4
   11662:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11666:	055b      	lsls	r3, r3, #21
   11668:	d4ee      	bmi.n	11648 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1166a:	4629      	mov	r1, r5
   1166c:	4620      	mov	r0, r4
   1166e:	f019 fcdb 	bl	2b028 <bt_conn_le_conn_update>
		if (rc == 0) {
   11672:	b958      	cbnz	r0, 1168c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   11674:	882b      	ldrh	r3, [r5, #0]
   11676:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1167a:	886b      	ldrh	r3, [r5, #2]
   1167c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   11680:	88ab      	ldrh	r3, [r5, #4]
   11682:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   11686:	88eb      	ldrh	r3, [r5, #6]
   11688:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1168c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1168e:	f06f 0015 	mvn.w	r0, #21
   11692:	e7fb      	b.n	1168c <send_conn_le_param_update+0x5c>
   11694:	20008380 	.word	0x20008380

00011698 <deferred_work>:
{
   11698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1169a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1169e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   116a0:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   116a4:	bb5b      	cbnz	r3, 116fe <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   116a6:	4630      	mov	r0, r6
   116a8:	f019 fd1b 	bl	2b0e2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   116ac:	4b33      	ldr	r3, [pc, #204]	; (1177c <deferred_work+0xe4>)
   116ae:	681d      	ldr	r5, [r3, #0]
   116b0:	b975      	cbnz	r5, 116d0 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   116b2:	4d33      	ldr	r5, [pc, #204]	; (11780 <deferred_work+0xe8>)
   116b4:	4f33      	ldr	r7, [pc, #204]	; (11784 <deferred_work+0xec>)
   116b6:	42bd      	cmp	r5, r7
   116b8:	d91a      	bls.n	116f0 <deferred_work+0x58>
   116ba:	4933      	ldr	r1, [pc, #204]	; (11788 <deferred_work+0xf0>)
   116bc:	4833      	ldr	r0, [pc, #204]	; (1178c <deferred_work+0xf4>)
   116be:	f240 526c 	movw	r2, #1388	; 0x56c
   116c2:	f017 fa7f 	bl	28bc4 <assert_print>
   116c6:	f240 516c 	movw	r1, #1388	; 0x56c
   116ca:	482f      	ldr	r0, [pc, #188]	; (11788 <deferred_work+0xf0>)
   116cc:	f017 fa73 	bl	28bb6 <assert_post_action>
		if (cb->disconnected) {
   116d0:	686b      	ldr	r3, [r5, #4]
   116d2:	b11b      	cbz	r3, 116dc <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   116d4:	4630      	mov	r0, r6
   116d6:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   116da:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   116dc:	692d      	ldr	r5, [r5, #16]
   116de:	e7e7      	b.n	116b0 <deferred_work+0x18>
		if (cb->disconnected) {
   116e0:	686b      	ldr	r3, [r5, #4]
   116e2:	b11b      	cbz	r3, 116ec <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   116e4:	4630      	mov	r0, r6
   116e6:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   116ea:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   116ec:	3514      	adds	r5, #20
   116ee:	e7e2      	b.n	116b6 <deferred_work+0x1e>
   116f0:	d3f6      	bcc.n	116e0 <deferred_work+0x48>
		bt_conn_unref(conn);
   116f2:	4630      	mov	r0, r6
}
   116f4:	b003      	add	sp, #12
   116f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   116fa:	f7ff bd1f 	b.w	1113c <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   116fe:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   11702:	2b01      	cmp	r3, #1
   11704:	d124      	bne.n	11750 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   11706:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1170a:	e8d5 3fef 	ldaex	r3, [r5]
   1170e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11712:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11716:	2900      	cmp	r1, #0
   11718:	d1f7      	bne.n	1170a <deferred_work+0x72>
   1171a:	059b      	lsls	r3, r3, #22
   1171c:	d51a      	bpl.n	11754 <deferred_work+0xbc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1171e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   11720:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11722:	9300      	str	r3, [sp, #0]
   11724:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   11726:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11728:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   1172a:	f7ff ff81 	bl	11630 <send_conn_le_param_update>
		if (!err) {
   1172e:	b938      	cbnz	r0, 11740 <deferred_work+0xa8>
   11730:	e8d5 3fef 	ldaex	r3, [r5]
   11734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11738:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1173c:	2a00      	cmp	r2, #0
   1173e:	d1f7      	bne.n	11730 <deferred_work+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11740:	e8d5 3fef 	ldaex	r3, [r5]
   11744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11748:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1174c:	2a00      	cmp	r2, #0
   1174e:	d1f7      	bne.n	11740 <deferred_work+0xa8>
}
   11750:	b003      	add	sp, #12
   11752:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   11754:	466b      	mov	r3, sp
   11756:	4a0e      	ldr	r2, [pc, #56]	; (11790 <deferred_work+0xf8>)
   11758:	6810      	ldr	r0, [r2, #0]
   1175a:	6851      	ldr	r1, [r2, #4]
   1175c:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1175e:	4669      	mov	r1, sp
   11760:	4630      	mov	r0, r6
   11762:	f7ff ff65 	bl	11630 <send_conn_le_param_update>
		if (!err) {
   11766:	2800      	cmp	r0, #0
   11768:	d1ea      	bne.n	11740 <deferred_work+0xa8>
   1176a:	e8d5 3fef 	ldaex	r3, [r5]
   1176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11772:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11776:	2a00      	cmp	r2, #0
   11778:	d0e2      	beq.n	11740 <deferred_work+0xa8>
   1177a:	e7f6      	b.n	1176a <deferred_work+0xd2>
   1177c:	2000a7b0 	.word	0x2000a7b0
   11780:	0002fba0 	.word	0x0002fba0
   11784:	0002fbc8 	.word	0x0002fbc8
   11788:	000320ce 	.word	0x000320ce
   1178c:	00030da5 	.word	0x00030da5
   11790:	0002ffd0 	.word	0x0002ffd0

00011794 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   11794:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11796:	4801      	ldr	r0, [pc, #4]	; (1179c <bt_conn_create_frag_timeout+0x8>)
   11798:	f7ff bdd0 	b.w	1133c <bt_conn_create_pdu_timeout>
   1179c:	20008ff4 	.word	0x20008ff4

000117a0 <create_frag>:
{
   117a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117a4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   117a6:	f04f 33ff 	mov.w	r3, #4294967295
   117aa:	f04f 32ff 	mov.w	r2, #4294967295
   117ae:	2000      	movs	r0, #0
{
   117b0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   117b2:	f7ff ffef 	bl	11794 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   117b6:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   117b8:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   117ba:	2b07      	cmp	r3, #7
   117bc:	f04f 0600 	mov.w	r6, #0
   117c0:	d005      	beq.n	117ce <create_frag+0x2e>
		net_buf_unref(frag);
   117c2:	f00e fc8b 	bl	200dc <net_buf_unref>
		return NULL;
   117c6:	4635      	mov	r5, r6
}
   117c8:	4628      	mov	r0, r5
   117ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   117ce:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   117d0:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   117d4:	4e0c      	ldr	r6, [pc, #48]	; (11808 <create_frag+0x68>)
   117d6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   117d8:	f8b6 80bc 	ldrh.w	r8, [r6, #188]	; 0xbc
   117dc:	f01c fb75 	bl	2deca <net_buf_simple_tailroom>
   117e0:	4580      	cmp	r8, r0
   117e2:	d20c      	bcs.n	117fe <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   117e4:	f8b6 60bc 	ldrh.w	r6, [r6, #188]	; 0xbc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   117e8:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   117ec:	4632      	mov	r2, r6
   117ee:	4638      	mov	r0, r7
   117f0:	f01c fb73 	bl	2deda <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   117f4:	4631      	mov	r1, r6
   117f6:	4620      	mov	r0, r4
   117f8:	f00e fd76 	bl	202e8 <net_buf_simple_pull>
   117fc:	e7e4      	b.n	117c8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   117fe:	4638      	mov	r0, r7
   11800:	f01c fb63 	bl	2deca <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11804:	b286      	uxth	r6, r0
   11806:	e7ef      	b.n	117e8 <create_frag+0x48>
   11808:	20008380 	.word	0x20008380

0001180c <bt_conn_process_tx>:
{
   1180c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1180e:	7a83      	ldrb	r3, [r0, #10]
{
   11810:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11812:	b973      	cbnz	r3, 11832 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11814:	1d03      	adds	r3, r0, #4
   11816:	e8d3 2fef 	ldaex	r2, [r3]
   1181a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1181e:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11822:	2d00      	cmp	r5, #0
   11824:	d1f7      	bne.n	11816 <bt_conn_process_tx+0xa>
   11826:	0653      	lsls	r3, r2, #25
   11828:	d503      	bpl.n	11832 <bt_conn_process_tx+0x26>
}
   1182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1182e:	f7ff baeb 	b.w	10e08 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11832:	2200      	movs	r2, #0
   11834:	2300      	movs	r3, #0
   11836:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1183a:	f01c faf5 	bl	2de28 <net_buf_get>
	BT_ASSERT(buf);
   1183e:	4605      	mov	r5, r0
   11840:	b958      	cbnz	r0, 1185a <bt_conn_process_tx+0x4e>
   11842:	f240 321a 	movw	r2, #794	; 0x31a
   11846:	4922      	ldr	r1, [pc, #136]	; (118d0 <bt_conn_process_tx+0xc4>)
   11848:	4822      	ldr	r0, [pc, #136]	; (118d4 <bt_conn_process_tx+0xc8>)
   1184a:	f017 f9bb 	bl	28bc4 <assert_print>
   1184e:	4040      	eors	r0, r0
   11850:	f380 8811 	msr	BASEPRI, r0
   11854:	f04f 0003 	mov.w	r0, #3
   11858:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1185a:	4e1f      	ldr	r6, [pc, #124]	; (118d8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1185c:	8a2a      	ldrh	r2, [r5, #16]
   1185e:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   11862:	429a      	cmp	r2, r3
   11864:	d807      	bhi.n	11876 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11866:	2300      	movs	r3, #0
   11868:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1186a:	4629      	mov	r1, r5
   1186c:	4620      	mov	r0, r4
   1186e:	f7ff f9d7 	bl	10c20 <send_frag>
	if (!send_buf(conn, buf)) {
   11872:	b968      	cbnz	r0, 11890 <bt_conn_process_tx+0x84>
   11874:	e005      	b.n	11882 <bt_conn_process_tx+0x76>
	frag = create_frag(conn, buf);
   11876:	4629      	mov	r1, r5
   11878:	4620      	mov	r0, r4
   1187a:	f7ff ff91 	bl	117a0 <create_frag>
	if (!frag) {
   1187e:	4601      	mov	r1, r0
   11880:	b938      	cbnz	r0, 11892 <bt_conn_process_tx+0x86>
		tx_data(buf)->tx = NULL;
   11882:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   11884:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   11886:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   11888:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1188a:	f00e fc27 	bl	200dc <net_buf_unref>
		if (tx) {
   1188e:	b9ce      	cbnz	r6, 118c4 <bt_conn_process_tx+0xb8>
}
   11890:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11892:	2301      	movs	r3, #1
   11894:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11896:	4620      	mov	r0, r4
   11898:	f7ff f9c2 	bl	10c20 <send_frag>
   1189c:	2800      	cmp	r0, #0
   1189e:	d0f0      	beq.n	11882 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   118a0:	8a2a      	ldrh	r2, [r5, #16]
   118a2:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   118a6:	429a      	cmp	r2, r3
   118a8:	d802      	bhi.n	118b0 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
   118aa:	2300      	movs	r3, #0
   118ac:	2203      	movs	r2, #3
   118ae:	e7dc      	b.n	1186a <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   118b0:	4629      	mov	r1, r5
   118b2:	4620      	mov	r0, r4
   118b4:	f7ff ff74 	bl	117a0 <create_frag>
		if (!frag) {
   118b8:	4601      	mov	r1, r0
   118ba:	2800      	cmp	r0, #0
   118bc:	d0e1      	beq.n	11882 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   118be:	2301      	movs	r3, #1
   118c0:	461a      	mov	r2, r3
   118c2:	e7e8      	b.n	11896 <bt_conn_process_tx+0x8a>
			conn_tx_destroy(conn, tx);
   118c4:	4631      	mov	r1, r6
   118c6:	4620      	mov	r0, r4
}
   118c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   118cc:	f7ff b984 	b.w	10bd8 <conn_tx_destroy>
   118d0:	000320ce 	.word	0x000320ce
   118d4:	00030da5 	.word	0x00030da5
   118d8:	20008380 	.word	0x20008380

000118dc <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   118dc:	b910      	cbnz	r0, 118e4 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   118de:	4802      	ldr	r0, [pc, #8]	; (118e8 <bt_conn_lookup_index+0xc>)
   118e0:	f7ff bc08 	b.w	110f4 <bt_conn_ref>
}
   118e4:	2000      	movs	r0, #0
   118e6:	4770      	bx	lr
   118e8:	20009cc8 	.word	0x20009cc8

000118ec <bt_conn_init>:

int bt_conn_init(void)
{
   118ec:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   118ee:	480c      	ldr	r0, [pc, #48]	; (11920 <bt_conn_init+0x34>)
   118f0:	f01d fd6e 	bl	2f3d0 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   118f4:	2400      	movs	r4, #0
   118f6:	4d0b      	ldr	r5, [pc, #44]	; (11924 <bt_conn_init+0x38>)
		k_fifo_put(&free_tx, &conn_tx[i]);
   118f8:	4e09      	ldr	r6, [pc, #36]	; (11920 <bt_conn_init+0x34>)
   118fa:	4629      	mov	r1, r5
   118fc:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   118fe:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   11900:	f01d fd73 	bl	2f3ea <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   11904:	2c08      	cmp	r4, #8
   11906:	f105 0510 	add.w	r5, r5, #16
   1190a:	d1f6      	bne.n	118fa <bt_conn_init+0xe>
	}

	bt_att_init();
   1190c:	f000 ffaa 	bl	12864 <bt_att_init>

	err = bt_smp_init();
   11910:	f01a fc1b 	bl	2c14a <bt_smp_init>
	if (err) {
   11914:	4604      	mov	r4, r0
   11916:	b908      	cbnz	r0, 1191c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   11918:	f019 fc20 	bl	2b15c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1191c:	4620      	mov	r0, r4
   1191e:	bd70      	pop	{r4, r5, r6, pc}
   11920:	20008ed4 	.word	0x20008ed4
   11924:	2000a730 	.word	0x2000a730

00011928 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11928:	b580      	push	{r7, lr}
   1192a:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1192c:	b088      	sub	sp, #32
   1192e:	466a      	mov	r2, sp
   11930:	4b06      	ldr	r3, [pc, #24]	; (1194c <l2cap_create_le_sig_pdu.part.0+0x24>)
   11932:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11936:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1193a:	2303      	movs	r3, #3
   1193c:	4804      	ldr	r0, [pc, #16]	; (11950 <l2cap_create_le_sig_pdu.part.0+0x28>)
   1193e:	f842 3f10 	str.w	r3, [r2, #16]!
   11942:	f019 fb9a 	bl	2b07a <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   11946:	2000      	movs	r0, #0
   11948:	46bd      	mov	sp, r7
   1194a:	bd80      	pop	{r7, pc}
   1194c:	000321d7 	.word	0x000321d7
   11950:	0002fc54 	.word	0x0002fc54

00011954 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   11954:	b580      	push	{r7, lr}
   11956:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   11958:	b088      	sub	sp, #32
   1195a:	466a      	mov	r2, sp
   1195c:	4b07      	ldr	r3, [pc, #28]	; (1197c <l2cap_accept.part.0+0x28>)
   1195e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11962:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11966:	2303      	movs	r3, #3
   11968:	4805      	ldr	r0, [pc, #20]	; (11980 <l2cap_accept.part.0+0x2c>)
   1196a:	f842 3f10 	str.w	r3, [r2, #16]!
   1196e:	f019 fb84 	bl	2b07a <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   11972:	f06f 000b 	mvn.w	r0, #11
   11976:	46bd      	mov	sp, r7
   11978:	bd80      	pop	{r7, pc}
   1197a:	bf00      	nop
   1197c:	000321ff 	.word	0x000321ff
   11980:	0002fc54 	.word	0x0002fc54

00011984 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   11984:	4b04      	ldr	r3, [pc, #16]	; (11998 <l2cap_accept+0x14>)
   11986:	681a      	ldr	r2, [r3, #0]
   11988:	b10a      	cbz	r2, 1198e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1198a:	f7ff bfe3 	b.w	11954 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1198e:	4803      	ldr	r0, [pc, #12]	; (1199c <l2cap_accept+0x18>)
   11990:	6058      	str	r0, [r3, #4]
}
   11992:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   11994:	600b      	str	r3, [r1, #0]
}
   11996:	4770      	bx	lr
   11998:	2000a7b4 	.word	0x2000a7b4
   1199c:	000303a0 	.word	0x000303a0

000119a0 <bt_l2cap_connected>:
{
   119a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   119a2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   119a4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   119a6:	4d25      	ldr	r5, [pc, #148]	; (11a3c <bt_l2cap_connected+0x9c>)
   119a8:	4f25      	ldr	r7, [pc, #148]	; (11a40 <bt_l2cap_connected+0xa0>)
   119aa:	42bd      	cmp	r5, r7
   119ac:	d942      	bls.n	11a34 <bt_l2cap_connected+0x94>
   119ae:	4925      	ldr	r1, [pc, #148]	; (11a44 <bt_l2cap_connected+0xa4>)
   119b0:	4825      	ldr	r0, [pc, #148]	; (11a48 <bt_l2cap_connected+0xa8>)
   119b2:	f240 1281 	movw	r2, #385	; 0x181
   119b6:	f017 f905 	bl	28bc4 <assert_print>
   119ba:	f240 1181 	movw	r1, #385	; 0x181
   119be:	4821      	ldr	r0, [pc, #132]	; (11a44 <bt_l2cap_connected+0xa4>)
   119c0:	f017 f8f9 	bl	28bb6 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   119c4:	4620      	mov	r0, r4
   119c6:	686b      	ldr	r3, [r5, #4]
   119c8:	a901      	add	r1, sp, #4
   119ca:	4798      	blx	r3
   119cc:	2800      	cmp	r0, #0
   119ce:	db2c      	blt.n	11a2a <bt_l2cap_connected+0x8a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   119d0:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   119d2:	882a      	ldrh	r2, [r5, #0]
   119d4:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   119d6:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   119d8:	68a8      	ldr	r0, [r5, #8]
   119da:	f103 0210 	add.w	r2, r3, #16
   119de:	e8d2 1fef 	ldaex	r1, [r2]
   119e2:	e8c2 6fec 	stlex	ip, r6, [r2]
   119e6:	f1bc 0f00 	cmp.w	ip, #0
   119ea:	d1f8      	bne.n	119de <bt_l2cap_connected+0x3e>
	parent->next = child;
   119ec:	609e      	str	r6, [r3, #8]
	return list->tail;
   119ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   119f0:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   119f4:	b9d9      	cbnz	r1, 11a2e <bt_l2cap_connected+0x8e>
	list->head = node;
   119f6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   119fa:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   119fc:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   119fe:	9801      	ldr	r0, [sp, #4]
   11a00:	6843      	ldr	r3, [r0, #4]
   11a02:	681b      	ldr	r3, [r3, #0]
   11a04:	b103      	cbz	r3, 11a08 <bt_l2cap_connected+0x68>
			chan->ops->connected(chan);
   11a06:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11a08:	9b01      	ldr	r3, [sp, #4]
   11a0a:	3310      	adds	r3, #16
   11a0c:	e8d3 1fef 	ldaex	r1, [r3]
   11a10:	f041 0101 	orr.w	r1, r1, #1
   11a14:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11a18:	2a00      	cmp	r2, #0
   11a1a:	d1f7      	bne.n	11a0c <bt_l2cap_connected+0x6c>
		if (chan->ops->status) {
   11a1c:	9801      	ldr	r0, [sp, #4]
   11a1e:	6843      	ldr	r3, [r0, #4]
   11a20:	69db      	ldr	r3, [r3, #28]
   11a22:	b113      	cbz	r3, 11a2a <bt_l2cap_connected+0x8a>
			chan->ops->status(chan, chan->status);
   11a24:	f100 0110 	add.w	r1, r0, #16
   11a28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11a2a:	350c      	adds	r5, #12
   11a2c:	e7bd      	b.n	119aa <bt_l2cap_connected+0xa>
	parent->next = child;
   11a2e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11a30:	65a2      	str	r2, [r4, #88]	; 0x58
}
   11a32:	e7e2      	b.n	119fa <bt_l2cap_connected+0x5a>
   11a34:	d3c6      	bcc.n	119c4 <bt_l2cap_connected+0x24>
}
   11a36:	b003      	add	sp, #12
   11a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a3a:	bf00      	nop
   11a3c:	0002fb7c 	.word	0x0002fb7c
   11a40:	0002fba0 	.word	0x0002fba0
   11a44:	00032226 	.word	0x00032226
   11a48:	00030da5 	.word	0x00030da5

00011a4c <l2cap_recv>:
{
   11a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a4e:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   11a50:	8a0b      	ldrh	r3, [r1, #16]
{
   11a52:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11a54:	2b03      	cmp	r3, #3
{
   11a56:	460d      	mov	r5, r1
   11a58:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   11a5a:	d80b      	bhi.n	11a74 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   11a5c:	4b30      	ldr	r3, [pc, #192]	; (11b20 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   11a5e:	617b      	str	r3, [r7, #20]
   11a60:	2302      	movs	r3, #2
   11a62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11a66:	482f      	ldr	r0, [pc, #188]	; (11b24 <l2cap_recv+0xd8>)
   11a68:	613b      	str	r3, [r7, #16]
   11a6a:	f107 0210 	add.w	r2, r7, #16
   11a6e:	f019 fb04 	bl	2b07a <z_log_msg_static_create.constprop.0>
		return 0;
   11a72:	e019      	b.n	11aa8 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   11a74:	2104      	movs	r1, #4
   11a76:	f105 000c 	add.w	r0, r5, #12
   11a7a:	f00e fc4f 	bl	2031c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11a7e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   11a80:	8843      	ldrh	r3, [r0, #2]
   11a82:	4604      	mov	r4, r0
	if (buf->len != len) {
   11a84:	4299      	cmp	r1, r3
   11a86:	d013      	beq.n	11ab0 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11a88:	466c      	mov	r4, sp
   11a8a:	b088      	sub	sp, #32
   11a8c:	aa02      	add	r2, sp, #8
   11a8e:	61d3      	str	r3, [r2, #28]
   11a90:	2304      	movs	r3, #4
   11a92:	4825      	ldr	r0, [pc, #148]	; (11b28 <l2cap_recv+0xdc>)
   11a94:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11a98:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11a9c:	4821      	ldr	r0, [pc, #132]	; (11b24 <l2cap_recv+0xd8>)
   11a9e:	f842 3f10 	str.w	r3, [r2, #16]!
   11aa2:	f019 faea 	bl	2b07a <z_log_msg_static_create.constprop.0>
   11aa6:	46a5      	mov	sp, r4
}
   11aa8:	2000      	movs	r0, #0
   11aaa:	371c      	adds	r7, #28
   11aac:	46bd      	mov	sp, r7
   11aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11ab0:	7843      	ldrb	r3, [r0, #1]
   11ab2:	b90b      	cbnz	r3, 11ab8 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   11ab4:	4b1d      	ldr	r3, [pc, #116]	; (11b2c <l2cap_recv+0xe0>)
   11ab6:	e7d2      	b.n	11a5e <l2cap_recv+0x12>
	switch (hdr->code) {
   11ab8:	7803      	ldrb	r3, [r0, #0]
   11aba:	2b01      	cmp	r3, #1
   11abc:	d0f4      	beq.n	11aa8 <l2cap_recv+0x5c>
   11abe:	2b13      	cmp	r3, #19
   11ac0:	d103      	bne.n	11aca <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   11ac2:	2901      	cmp	r1, #1
   11ac4:	d8f0      	bhi.n	11aa8 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   11ac6:	4b1a      	ldr	r3, [pc, #104]	; (11b30 <l2cap_recv+0xe4>)
   11ac8:	e7c9      	b.n	11a5e <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   11aca:	466d      	mov	r5, sp
   11acc:	b088      	sub	sp, #32
   11ace:	aa02      	add	r2, sp, #8
   11ad0:	4918      	ldr	r1, [pc, #96]	; (11b34 <l2cap_recv+0xe8>)
   11ad2:	4814      	ldr	r0, [pc, #80]	; (11b24 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   11ad4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   11ad8:	2303      	movs	r3, #3
   11ada:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11ade:	f842 3f10 	str.w	r3, [r2, #16]!
   11ae2:	f019 faca 	bl	2b07a <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   11ae6:	2202      	movs	r2, #2
   11ae8:	46ad      	mov	sp, r5
   11aea:	7861      	ldrb	r1, [r4, #1]
   11aec:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   11aee:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   11af0:	f019 fac6 	bl	2b080 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11af4:	4604      	mov	r4, r0
   11af6:	2800      	cmp	r0, #0
   11af8:	d0d6      	beq.n	11aa8 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   11afa:	2102      	movs	r1, #2
   11afc:	300c      	adds	r0, #12
   11afe:	f00e fc27 	bl	20350 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   11b02:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11b04:	4622      	mov	r2, r4
   11b06:	7003      	strb	r3, [r0, #0]
   11b08:	7043      	strb	r3, [r0, #1]
   11b0a:	2105      	movs	r1, #5
   11b0c:	4628      	mov	r0, r5
   11b0e:	9300      	str	r3, [sp, #0]
   11b10:	f019 fb02 	bl	2b118 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   11b14:	2800      	cmp	r0, #0
   11b16:	d0c7      	beq.n	11aa8 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   11b18:	4620      	mov	r0, r4
   11b1a:	f00e fadf 	bl	200dc <net_buf_unref>
   11b1e:	e7c3      	b.n	11aa8 <l2cap_recv+0x5c>
   11b20:	00032257 	.word	0x00032257
   11b24:	0002fc54 	.word	0x0002fc54
   11b28:	00032275 	.word	0x00032275
   11b2c:	00032296 	.word	0x00032296
   11b30:	000322b7 	.word	0x000322b7
   11b34:	000322d3 	.word	0x000322d3

00011b38 <bt_l2cap_recv>:
{
   11b38:	b5b0      	push	{r4, r5, r7, lr}
   11b3a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   11b3c:	8a0b      	ldrh	r3, [r1, #16]
{
   11b3e:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11b40:	2b03      	cmp	r3, #3
{
   11b42:	460c      	mov	r4, r1
   11b44:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   11b46:	d810      	bhi.n	11b6a <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   11b48:	4b17      	ldr	r3, [pc, #92]	; (11ba8 <bt_l2cap_recv+0x70>)
   11b4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11b4e:	617b      	str	r3, [r7, #20]
   11b50:	2302      	movs	r3, #2
   11b52:	4816      	ldr	r0, [pc, #88]	; (11bac <bt_l2cap_recv+0x74>)
   11b54:	613b      	str	r3, [r7, #16]
   11b56:	f107 0210 	add.w	r2, r7, #16
   11b5a:	f019 fa8e 	bl	2b07a <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   11b5e:	4620      	mov	r0, r4
   11b60:	f00e fabc 	bl	200dc <net_buf_unref>
}
   11b64:	3718      	adds	r7, #24
   11b66:	46bd      	mov	sp, r7
   11b68:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11b6a:	2104      	movs	r1, #4
   11b6c:	f104 000c 	add.w	r0, r4, #12
   11b70:	f00e fbd4 	bl	2031c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11b74:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   11b76:	4628      	mov	r0, r5
   11b78:	f019 fae7 	bl	2b14a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11b7c:	b978      	cbnz	r0, 11b9e <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   11b7e:	466d      	mov	r5, sp
   11b80:	b088      	sub	sp, #32
   11b82:	466a      	mov	r2, sp
   11b84:	4b0a      	ldr	r3, [pc, #40]	; (11bb0 <bt_l2cap_recv+0x78>)
   11b86:	4809      	ldr	r0, [pc, #36]	; (11bac <bt_l2cap_recv+0x74>)
   11b88:	e9c2 3105 	strd	r3, r1, [r2, #20]
   11b8c:	2303      	movs	r3, #3
   11b8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11b92:	f842 3f10 	str.w	r3, [r2, #16]!
   11b96:	f019 fa70 	bl	2b07a <z_log_msg_static_create.constprop.0>
   11b9a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   11b9c:	e7df      	b.n	11b5e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   11b9e:	6843      	ldr	r3, [r0, #4]
   11ba0:	4621      	mov	r1, r4
   11ba2:	695b      	ldr	r3, [r3, #20]
   11ba4:	4798      	blx	r3
   11ba6:	e7da      	b.n	11b5e <bt_l2cap_recv+0x26>
   11ba8:	000322fb 	.word	0x000322fb
   11bac:	0002fc54 	.word	0x0002fc54
   11bb0:	00032318 	.word	0x00032318

00011bb4 <bt_l2cap_update_conn_param>:
{
   11bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   11bb6:	4b17      	ldr	r3, [pc, #92]	; (11c14 <bt_l2cap_update_conn_param+0x60>)
{
   11bb8:	460e      	mov	r6, r1
	ident++;
   11bba:	7819      	ldrb	r1, [r3, #0]
{
   11bbc:	4605      	mov	r5, r0
	ident++;
   11bbe:	3101      	adds	r1, #1
   11bc0:	b2c9      	uxtb	r1, r1
   11bc2:	2901      	cmp	r1, #1
   11bc4:	bf38      	it	cc
   11bc6:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11bc8:	2208      	movs	r2, #8
   11bca:	2012      	movs	r0, #18
	ident++;
   11bcc:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11bce:	f019 fa57 	bl	2b080 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11bd2:	4604      	mov	r4, r0
   11bd4:	b1d0      	cbz	r0, 11c0c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   11bd6:	2108      	movs	r1, #8
   11bd8:	300c      	adds	r0, #12
   11bda:	f00e fbb9 	bl	20350 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11bde:	8833      	ldrh	r3, [r6, #0]
   11be0:	4622      	mov	r2, r4
   11be2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11be4:	8873      	ldrh	r3, [r6, #2]
   11be6:	2105      	movs	r1, #5
   11be8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   11bea:	88b3      	ldrh	r3, [r6, #4]
   11bec:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11bee:	88f3      	ldrh	r3, [r6, #6]
   11bf0:	80c3      	strh	r3, [r0, #6]
   11bf2:	2300      	movs	r3, #0
   11bf4:	4628      	mov	r0, r5
   11bf6:	9300      	str	r3, [sp, #0]
   11bf8:	f019 fa8e 	bl	2b118 <bt_l2cap_send_cb>
	if (err) {
   11bfc:	4605      	mov	r5, r0
   11bfe:	b110      	cbz	r0, 11c06 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   11c00:	4620      	mov	r0, r4
   11c02:	f00e fa6b 	bl	200dc <net_buf_unref>
}
   11c06:	4628      	mov	r0, r5
   11c08:	b002      	add	sp, #8
   11c0a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11c0c:	f06f 050b 	mvn.w	r5, #11
   11c10:	e7f9      	b.n	11c06 <bt_l2cap_update_conn_param+0x52>
   11c12:	bf00      	nop
   11c14:	2000b330 	.word	0x2000b330

00011c18 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   11c18:	2823      	cmp	r0, #35	; 0x23
   11c1a:	d81f      	bhi.n	11c5c <att_op_get_type+0x44>
   11c1c:	281a      	cmp	r0, #26
   11c1e:	d804      	bhi.n	11c2a <att_op_get_type+0x12>
   11c20:	1e43      	subs	r3, r0, #1
   11c22:	2b18      	cmp	r3, #24
   11c24:	d90e      	bls.n	11c44 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   11c26:	2006      	movs	r0, #6
   11c28:	4770      	bx	lr
	switch (op) {
   11c2a:	f1a0 031b 	sub.w	r3, r0, #27
   11c2e:	2b08      	cmp	r3, #8
   11c30:	d81e      	bhi.n	11c70 <att_op_get_type+0x58>
   11c32:	e8df f003 	tbb	[pc, r3]
   11c36:	1d05      	.short	0x1d05
   11c38:	191d231b 	.word	0x191d231b
   11c3c:	1d25      	.short	0x1d25
   11c3e:	05          	.byte	0x05
   11c3f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   11c40:	2003      	movs	r0, #3
   11c42:	4770      	bx	lr
   11c44:	2301      	movs	r3, #1
	switch (op) {
   11c46:	4a0f      	ldr	r2, [pc, #60]	; (11c84 <att_op_get_type+0x6c>)
   11c48:	4083      	lsls	r3, r0
   11c4a:	401a      	ands	r2, r3
   11c4c:	b9c2      	cbnz	r2, 11c80 <att_op_get_type+0x68>
   11c4e:	4a0e      	ldr	r2, [pc, #56]	; (11c88 <att_op_get_type+0x70>)
   11c50:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   11c52:	2a00      	cmp	r2, #0
   11c54:	bf14      	ite	ne
   11c56:	2001      	movne	r0, #1
   11c58:	2006      	moveq	r0, #6
   11c5a:	4770      	bx	lr
	switch (op) {
   11c5c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   11c60:	2b52      	cmp	r3, #82	; 0x52
   11c62:	d105      	bne.n	11c70 <att_op_get_type+0x58>
		return ATT_COMMAND;
   11c64:	2000      	movs	r0, #0
}
   11c66:	4770      	bx	lr
		return ATT_REQUEST;
   11c68:	2001      	movs	r0, #1
   11c6a:	4770      	bx	lr
		return ATT_INDICATION;
   11c6c:	2005      	movs	r0, #5
   11c6e:	4770      	bx	lr
		return ATT_COMMAND;
   11c70:	f010 0f40 	tst.w	r0, #64	; 0x40
   11c74:	bf0c      	ite	eq
   11c76:	2006      	moveq	r0, #6
   11c78:	2000      	movne	r0, #0
   11c7a:	4770      	bx	lr
	switch (op) {
   11c7c:	2004      	movs	r0, #4
   11c7e:	4770      	bx	lr
		return ATT_RESPONSE;
   11c80:	2002      	movs	r0, #2
   11c82:	4770      	bx	lr
   11c84:	028aaaaa 	.word	0x028aaaaa
   11c88:	01455554 	.word	0x01455554

00011c8c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   11c8c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   11c8e:	3804      	subs	r0, #4
   11c90:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11c92:	a901      	add	r1, sp, #4
   11c94:	4802      	ldr	r0, [pc, #8]	; (11ca0 <bt_att_released+0x14>)
   11c96:	f013 fc79 	bl	2558c <k_mem_slab_free>
}
   11c9a:	b003      	add	sp, #12
   11c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca0:	20008dac 	.word	0x20008dac

00011ca4 <tx_meta_data_free>:
{
   11ca4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   11ca6:	4604      	mov	r4, r0
   11ca8:	b940      	cbnz	r0, 11cbc <tx_meta_data_free+0x18>
   11caa:	4909      	ldr	r1, [pc, #36]	; (11cd0 <tx_meta_data_free+0x2c>)
   11cac:	4809      	ldr	r0, [pc, #36]	; (11cd4 <tx_meta_data_free+0x30>)
   11cae:	22a6      	movs	r2, #166	; 0xa6
   11cb0:	f016 ff88 	bl	28bc4 <assert_print>
   11cb4:	21a6      	movs	r1, #166	; 0xa6
   11cb6:	4806      	ldr	r0, [pc, #24]	; (11cd0 <tx_meta_data_free+0x2c>)
   11cb8:	f016 ff7d 	bl	28bb6 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   11cbc:	2100      	movs	r1, #0
   11cbe:	2214      	movs	r2, #20
   11cc0:	f018 fc36 	bl	2a530 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   11cc4:	4621      	mov	r1, r4
}
   11cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   11cca:	4803      	ldr	r0, [pc, #12]	; (11cd8 <tx_meta_data_free+0x34>)
   11ccc:	f01d bb8d 	b.w	2f3ea <k_queue_append>
   11cd0:	0003236f 	.word	0x0003236f
   11cd4:	00030da5 	.word	0x00030da5
   11cd8:	20008eb8 	.word	0x20008eb8

00011cdc <bt_att_connected>:
{
   11cdc:	b510      	push	{r4, lr}
   11cde:	4604      	mov	r4, r0
   11ce0:	f100 0394 	add.w	r3, r0, #148	; 0x94
   11ce4:	e8d3 1fef 	ldaex	r1, [r3]
   11ce8:	f041 0104 	orr.w	r1, r1, #4
   11cec:	e8c3 1fe2 	stlex	r2, r1, [r3]
   11cf0:	2a00      	cmp	r2, #0
   11cf2:	d1f7      	bne.n	11ce4 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11cf4:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   11cf6:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11cf8:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11cfa:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   11cfc:	f019 fb75 	bl	2b3ea <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   11d00:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   11d04:	4903      	ldr	r1, [pc, #12]	; (11d14 <bt_att_connected+0x38>)
   11d06:	f014 fbcd 	bl	264a4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   11d0a:	6820      	ldr	r0, [r4, #0]
}
   11d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   11d10:	f002 bb26 	b.w	14360 <bt_gatt_connected>
   11d14:	00012a41 	.word	0x00012a41

00011d18 <read_group_cb>:
{
   11d18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11d1c:	f04f 0800 	mov.w	r8, #0
   11d20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   11d24:	4605      	mov	r5, r0
   11d26:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11d28:	6800      	ldr	r0, [r0, #0]
   11d2a:	a902      	add	r1, sp, #8
{
   11d2c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   11d2e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11d30:	f88d 8008 	strb.w	r8, [sp, #8]
   11d34:	f8ad 300a 	strh.w	r3, [sp, #10]
   11d38:	f018 fdd8 	bl	2a8ec <bt_uuid_cmp>
   11d3c:	b1a0      	cbz	r0, 11d68 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11d3e:	f642 0301 	movw	r3, #10241	; 0x2801
   11d42:	6828      	ldr	r0, [r5, #0]
   11d44:	a903      	add	r1, sp, #12
   11d46:	f88d 800c 	strb.w	r8, [sp, #12]
   11d4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   11d4e:	f018 fdcd 	bl	2a8ec <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11d52:	b148      	cbz	r0, 11d68 <read_group_cb+0x50>
		if (data->group &&
   11d54:	6923      	ldr	r3, [r4, #16]
   11d56:	b11b      	cbz	r3, 11d60 <read_group_cb+0x48>
   11d58:	885a      	ldrh	r2, [r3, #2]
   11d5a:	42b2      	cmp	r2, r6
   11d5c:	d200      	bcs.n	11d60 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11d5e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11d60:	2001      	movs	r0, #1
}
   11d62:	b004      	add	sp, #16
   11d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11d68:	6861      	ldr	r1, [r4, #4]
   11d6a:	6828      	ldr	r0, [r5, #0]
   11d6c:	f018 fdbe 	bl	2a8ec <bt_uuid_cmp>
   11d70:	b110      	cbz	r0, 11d78 <read_group_cb+0x60>
		data->group = NULL;
   11d72:	2300      	movs	r3, #0
   11d74:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11d76:	e7f3      	b.n	11d60 <read_group_cb+0x48>
	if (data->rsp->len &&
   11d78:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11d7a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   11d7c:	781a      	ldrb	r2, [r3, #0]
   11d7e:	b132      	cbz	r2, 11d8e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11d80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11d82:	8a01      	ldrh	r1, [r0, #16]
   11d84:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11d86:	4293      	cmp	r3, r2
   11d88:	da01      	bge.n	11d8e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   11d8a:	2000      	movs	r0, #0
   11d8c:	e7e9      	b.n	11d62 <read_group_cb+0x4a>
   11d8e:	2104      	movs	r1, #4
   11d90:	300c      	adds	r0, #12
   11d92:	f00e fadd 	bl	20350 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11d96:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11d98:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11d9a:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11d9c:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   11d9e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11da0:	4b07      	ldr	r3, [pc, #28]	; (11dc0 <read_group_cb+0xa8>)
   11da2:	9401      	str	r4, [sp, #4]
   11da4:	9300      	str	r3, [sp, #0]
   11da6:	4638      	mov	r0, r7
   11da8:	2300      	movs	r3, #0
   11daa:	68a2      	ldr	r2, [r4, #8]
   11dac:	f019 fb60 	bl	2b470 <att_chan_read>
	if (read < 0) {
   11db0:	2800      	cmp	r0, #0
   11db2:	dbea      	blt.n	11d8a <read_group_cb+0x72>
	if (!data->group) {
   11db4:	6920      	ldr	r0, [r4, #16]
   11db6:	3800      	subs	r0, #0
   11db8:	bf18      	it	ne
   11dba:	2001      	movne	r0, #1
   11dbc:	e7d1      	b.n	11d62 <read_group_cb+0x4a>
   11dbe:	bf00      	nop
   11dc0:	0002b451 	.word	0x0002b451

00011dc4 <att_get>:
{
   11dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   11dc6:	7a83      	ldrb	r3, [r0, #10]
   11dc8:	2b07      	cmp	r3, #7
   11dca:	d10e      	bne.n	11dea <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11dcc:	2104      	movs	r1, #4
   11dce:	f019 f9bc 	bl	2b14a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11dd2:	4603      	mov	r3, r0
   11dd4:	b968      	cbnz	r0, 11df2 <att_get+0x2e>
		LOG_ERR("Unable to find ATT channel");
   11dd6:	4a10      	ldr	r2, [pc, #64]	; (11e18 <att_get+0x54>)
   11dd8:	9205      	str	r2, [sp, #20]
   11dda:	2202      	movs	r2, #2
   11ddc:	9204      	str	r2, [sp, #16]
   11dde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11de2:	480e      	ldr	r0, [pc, #56]	; (11e1c <att_get+0x58>)
   11de4:	aa04      	add	r2, sp, #16
   11de6:	f7f8 feb9 	bl	ab5c <z_impl_z_log_msg_static_create>
		return NULL;
   11dea:	2000      	movs	r0, #0
}
   11dec:	b007      	add	sp, #28
   11dee:	f85d fb04 	ldr.w	pc, [sp], #4
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   11df2:	2102      	movs	r1, #2
   11df4:	3094      	adds	r0, #148	; 0x94
   11df6:	f019 f9d6 	bl	2b1a6 <atomic_test_bit>
   11dfa:	b950      	cbnz	r0, 11e12 <att_get+0x4e>
   11dfc:	4908      	ldr	r1, [pc, #32]	; (11e20 <att_get+0x5c>)
   11dfe:	4809      	ldr	r0, [pc, #36]	; (11e24 <att_get+0x60>)
   11e00:	f640 322a 	movw	r2, #2858	; 0xb2a
   11e04:	f016 fede 	bl	28bc4 <assert_print>
   11e08:	f640 312a 	movw	r1, #2858	; 0xb2a
   11e0c:	4804      	ldr	r0, [pc, #16]	; (11e20 <att_get+0x5c>)
   11e0e:	f016 fed2 	bl	28bb6 <assert_post_action>
	return att_chan->att;
   11e12:	f853 0c04 	ldr.w	r0, [r3, #-4]
   11e16:	e7e9      	b.n	11dec <att_get+0x28>
   11e18:	0003239e 	.word	0x0003239e
   11e1c:	0002fc14 	.word	0x0002fc14
   11e20:	0003236f 	.word	0x0003236f
   11e24:	00030da5 	.word	0x00030da5

00011e28 <chan_send>:
{
   11e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11e2c:	4606      	mov	r6, r0
   11e2e:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   11e30:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   11e34:	68cb      	ldr	r3, [r1, #12]
{
   11e36:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   11e38:	2102      	movs	r1, #2
   11e3a:	3098      	adds	r0, #152	; 0x98
   11e3c:	f019 f9b3 	bl	2b1a6 <atomic_test_bit>
   11e40:	2800      	cmp	r0, #0
   11e42:	d04e      	beq.n	11ee2 <chan_send+0xba>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11e44:	781b      	ldrb	r3, [r3, #0]
   11e46:	2bd2      	cmp	r3, #210	; 0xd2
   11e48:	d11b      	bne.n	11e82 <chan_send+0x5a>
		err = bt_smp_sign(chan->att->conn, buf);
   11e4a:	6833      	ldr	r3, [r6, #0]
   11e4c:	4621      	mov	r1, r4
   11e4e:	6818      	ldr	r0, [r3, #0]
   11e50:	f01a f978 	bl	2c144 <bt_smp_sign>
		if (err) {
   11e54:	4605      	mov	r5, r0
   11e56:	b1a0      	cbz	r0, 11e82 <chan_send+0x5a>
			LOG_ERR("Error signing data");
   11e58:	4b23      	ldr	r3, [pc, #140]	; (11ee8 <chan_send+0xc0>)
   11e5a:	9307      	str	r3, [sp, #28]
   11e5c:	2302      	movs	r3, #2
   11e5e:	9306      	str	r3, [sp, #24]
   11e60:	2300      	movs	r3, #0
   11e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11e66:	4821      	ldr	r0, [pc, #132]	; (11eec <chan_send+0xc4>)
   11e68:	aa06      	add	r2, sp, #24
   11e6a:	f7f8 fe77 	bl	ab5c <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   11e6e:	69a0      	ldr	r0, [r4, #24]
   11e70:	f7ff ff18 	bl	11ca4 <tx_meta_data_free>
			net_buf_unref(buf);
   11e74:	4620      	mov	r0, r4
   11e76:	f00e f931 	bl	200dc <net_buf_unref>
}
   11e7a:	4628      	mov	r0, r5
   11e7c:	b009      	add	sp, #36	; 0x24
   11e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   11e82:	f104 000c 	add.w	r0, r4, #12
   11e86:	f01c f81c 	bl	2dec2 <net_buf_simple_headroom>
	state->len = buf->len;
   11e8a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   11e8e:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11e92:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   11e94:	4607      	mov	r7, r0
   11e96:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   11e98:	68e3      	ldr	r3, [r4, #12]
   11e9a:	7818      	ldrb	r0, [r3, #0]
   11e9c:	f7ff febc 	bl	11c18 <att_op_get_type>
	switch (op_type) {
   11ea0:	2805      	cmp	r0, #5
   11ea2:	d813      	bhi.n	11ecc <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11ea4:	4b12      	ldr	r3, [pc, #72]	; (11ef0 <chan_send+0xc8>)
   11ea6:	4622      	mov	r2, r4
   11ea8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   11eac:	2104      	movs	r1, #4
   11eae:	4628      	mov	r0, r5
   11eb0:	f8cd 9000 	str.w	r9, [sp]
   11eb4:	f019 f930 	bl	2b118 <bt_l2cap_send_cb>
	if (err) {
   11eb8:	4605      	mov	r5, r0
   11eba:	2800      	cmp	r0, #0
   11ebc:	d0dd      	beq.n	11e7a <chan_send+0x52>
	buf->data = buf->__buf + state->offset;
   11ebe:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   11ec0:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   11ec4:	fa13 f787 	uxtah	r7, r3, r7
   11ec8:	60e7      	str	r7, [r4, #12]
}
   11eca:	e7d6      	b.n	11e7a <chan_send+0x52>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   11ecc:	4909      	ldr	r1, [pc, #36]	; (11ef4 <chan_send+0xcc>)
   11ece:	480a      	ldr	r0, [pc, #40]	; (11ef8 <chan_send+0xd0>)
   11ed0:	f240 2257 	movw	r2, #599	; 0x257
   11ed4:	f016 fe76 	bl	28bc4 <assert_print>
   11ed8:	f240 2157 	movw	r1, #599	; 0x257
   11edc:	4805      	ldr	r0, [pc, #20]	; (11ef4 <chan_send+0xcc>)
   11ede:	f016 fe6a 	bl	28bb6 <assert_post_action>
		return -EINVAL;
   11ee2:	f06f 0515 	mvn.w	r5, #21
   11ee6:	e7c8      	b.n	11e7a <chan_send+0x52>
   11ee8:	000323b9 	.word	0x000323b9
   11eec:	0002fc14 	.word	0x0002fc14
   11ef0:	000303c8 	.word	0x000303c8
   11ef4:	0003236f 	.word	0x0003236f
   11ef8:	00030da5 	.word	0x00030da5

00011efc <bt_att_chan_req_send>:
{
   11efc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   11efe:	b950      	cbnz	r0, 11f16 <bt_att_chan_req_send+0x1a>
   11f00:	4917      	ldr	r1, [pc, #92]	; (11f60 <bt_att_chan_req_send+0x64>)
   11f02:	f44f 7246 	mov.w	r2, #792	; 0x318
   11f06:	4817      	ldr	r0, [pc, #92]	; (11f64 <bt_att_chan_req_send+0x68>)
   11f08:	f016 fe5c 	bl	28bc4 <assert_print>
   11f0c:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   11f10:	4813      	ldr	r0, [pc, #76]	; (11f60 <bt_att_chan_req_send+0x64>)
   11f12:	f016 fe50 	bl	28bb6 <assert_post_action>
   11f16:	b941      	cbnz	r1, 11f2a <bt_att_chan_req_send+0x2e>
   11f18:	4911      	ldr	r1, [pc, #68]	; (11f60 <bt_att_chan_req_send+0x64>)
   11f1a:	f240 3219 	movw	r2, #793	; 0x319
   11f1e:	4811      	ldr	r0, [pc, #68]	; (11f64 <bt_att_chan_req_send+0x68>)
   11f20:	f016 fe50 	bl	28bc4 <assert_print>
   11f24:	f240 3119 	movw	r1, #793	; 0x319
   11f28:	e7f2      	b.n	11f10 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   11f2a:	684a      	ldr	r2, [r1, #4]
   11f2c:	b942      	cbnz	r2, 11f40 <bt_att_chan_req_send+0x44>
   11f2e:	490c      	ldr	r1, [pc, #48]	; (11f60 <bt_att_chan_req_send+0x64>)
   11f30:	f240 321a 	movw	r2, #794	; 0x31a
   11f34:	480b      	ldr	r0, [pc, #44]	; (11f64 <bt_att_chan_req_send+0x68>)
   11f36:	f016 fe45 	bl	28bc4 <assert_print>
   11f3a:	f240 311a 	movw	r1, #794	; 0x31a
   11f3e:	e7e7      	b.n	11f10 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   11f40:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   11f44:	b143      	cbz	r3, 11f58 <bt_att_chan_req_send+0x5c>
   11f46:	4906      	ldr	r1, [pc, #24]	; (11f60 <bt_att_chan_req_send+0x64>)
   11f48:	f240 321b 	movw	r2, #795	; 0x31b
   11f4c:	4805      	ldr	r0, [pc, #20]	; (11f64 <bt_att_chan_req_send+0x68>)
   11f4e:	f016 fe39 	bl	28bc4 <assert_print>
   11f52:	f240 311b 	movw	r1, #795	; 0x31b
   11f56:	e7db      	b.n	11f10 <bt_att_chan_req_send+0x14>
}
   11f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   11f5c:	f019 bb3f 	b.w	2b5de <chan_req_send>
   11f60:	0003236f 	.word	0x0003236f
   11f64:	00030da5 	.word	0x00030da5

00011f68 <read_type_cb>:
{
   11f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11f6c:	6817      	ldr	r7, [r2, #0]
{
   11f6e:	4605      	mov	r5, r0
   11f70:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11f72:	6800      	ldr	r0, [r0, #0]
   11f74:	6851      	ldr	r1, [r2, #4]
{
   11f76:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   11f78:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11f7a:	f018 fcb7 	bl	2a8ec <bt_uuid_cmp>
   11f7e:	4681      	mov	r9, r0
   11f80:	2800      	cmp	r0, #0
   11f82:	d13c      	bne.n	11ffe <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11f84:	4630      	mov	r0, r6
   11f86:	2295      	movs	r2, #149	; 0x95
   11f88:	4629      	mov	r1, r5
   11f8a:	f01a f801 	bl	2bf90 <bt_gatt_check_perm>
   11f8e:	4606      	mov	r6, r0
   11f90:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   11f92:	b140      	cbz	r0, 11fa6 <read_type_cb+0x3e>
		if (data->rsp->len) {
   11f94:	68e3      	ldr	r3, [r4, #12]
   11f96:	781b      	ldrb	r3, [r3, #0]
   11f98:	b10b      	cbz	r3, 11f9e <read_type_cb+0x36>
			data->err = 0x00;
   11f9a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   11f9e:	2000      	movs	r0, #0
}
   11fa0:	b003      	add	sp, #12
   11fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11fa6:	68a0      	ldr	r0, [r4, #8]
   11fa8:	f00e f8f0 	bl	2018c <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   11fac:	2102      	movs	r1, #2
   11fae:	300c      	adds	r0, #12
   11fb0:	f00e f9ce 	bl	20350 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11fb4:	4b13      	ldr	r3, [pc, #76]	; (12004 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   11fb6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   11fb8:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11fbc:	9300      	str	r3, [sp, #0]
   11fbe:	9401      	str	r4, [sp, #4]
   11fc0:	4633      	mov	r3, r6
   11fc2:	4629      	mov	r1, r5
   11fc4:	4638      	mov	r0, r7
   11fc6:	68a2      	ldr	r2, [r4, #8]
   11fc8:	f019 fa52 	bl	2b470 <att_chan_read>
	if (read < 0) {
   11fcc:	2800      	cmp	r0, #0
   11fce:	da07      	bge.n	11fe0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   11fd0:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   11fd4:	bf32      	itee	cc
   11fd6:	200e      	movcc	r0, #14
		return -err;
   11fd8:	4240      	negcs	r0, r0
   11fda:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   11fdc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   11fde:	e7de      	b.n	11f9e <read_type_cb+0x36>
	if (!data->item) {
   11fe0:	6923      	ldr	r3, [r4, #16]
   11fe2:	2b00      	cmp	r3, #0
   11fe4:	d0db      	beq.n	11f9e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11fe6:	68a0      	ldr	r0, [r4, #8]
   11fe8:	f019 f8c3 	bl	2b172 <net_buf_frags_len>
   11fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   11fee:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11ff0:	68e3      	ldr	r3, [r4, #12]
   11ff2:	781b      	ldrb	r3, [r3, #0]
   11ff4:	4298      	cmp	r0, r3
   11ff6:	bf94      	ite	ls
   11ff8:	2000      	movls	r0, #0
   11ffa:	2001      	movhi	r0, #1
   11ffc:	e7d0      	b.n	11fa0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   11ffe:	2001      	movs	r0, #1
   12000:	e7ce      	b.n	11fa0 <read_type_cb+0x38>
   12002:	bf00      	nop
   12004:	0002b183 	.word	0x0002b183

00012008 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   12008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1200c:	b082      	sub	sp, #8
   1200e:	af00      	add	r7, sp, #0
   12010:	4604      	mov	r4, r0
   12012:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12014:	2200      	movs	r2, #0
   12016:	2300      	movs	r3, #0
   12018:	4639      	mov	r1, r7
   1201a:	4831      	ldr	r0, [pc, #196]	; (120e0 <bt_att_accept+0xd8>)
   1201c:	f013 fa5e 	bl	254dc <k_mem_slab_alloc>
   12020:	4605      	mov	r5, r0
   12022:	b1b0      	cbz	r0, 12052 <bt_att_accept+0x4a>
		LOG_ERR("No available ATT context for conn %p", conn);
   12024:	466d      	mov	r5, sp
   12026:	b088      	sub	sp, #32
   12028:	466a      	mov	r2, sp
   1202a:	4b2e      	ldr	r3, [pc, #184]	; (120e4 <bt_att_accept+0xdc>)
   1202c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12030:	2303      	movs	r3, #3
   12032:	f842 3f10 	str.w	r3, [r2, #16]!
   12036:	2300      	movs	r3, #0
   12038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1203c:	482a      	ldr	r0, [pc, #168]	; (120e8 <bt_att_accept+0xe0>)
   1203e:	f7f8 fd8d 	bl	ab5c <z_impl_z_log_msg_static_create>
   12042:	46ad      	mov	sp, r5
		return -ENOMEM;
   12044:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   12048:	4628      	mov	r0, r5
   1204a:	3708      	adds	r7, #8
   1204c:	46bd      	mov	sp, r7
   1204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   12052:	f015 fadd 	bl	27610 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   12056:	4b25      	ldr	r3, [pc, #148]	; (120ec <bt_att_accept+0xe4>)
	(void)memset(att, 0, sizeof(*att));
   12058:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1205a:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1205c:	2230      	movs	r2, #48	; 0x30
   1205e:	6838      	ldr	r0, [r7, #0]
   12060:	f018 fa66 	bl	2a530 <memset>
	att->conn = conn;
   12064:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12066:	2200      	movs	r2, #0
	att->conn = conn;
   12068:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1206a:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1206c:	2300      	movs	r3, #0
	list->tail = NULL;
   1206e:	e9c4 5501 	strd	r5, r5, [r4, #4]
   12072:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   12076:	481e      	ldr	r0, [pc, #120]	; (120f0 <bt_att_accept+0xe8>)
   12078:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1207a:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1207c:	f013 fa2e 	bl	254dc <k_mem_slab_alloc>
   12080:	4605      	mov	r5, r0
   12082:	2800      	cmp	r0, #0
   12084:	d1de      	bne.n	12044 <bt_att_accept+0x3c>
	(void)memset(chan, 0, sizeof(*chan));
   12086:	4601      	mov	r1, r0
   12088:	22f8      	movs	r2, #248	; 0xf8
   1208a:	6878      	ldr	r0, [r7, #4]
   1208c:	f018 fa50 	bl	2a530 <memset>
	chan->chan.chan.ops = &ops;
   12090:	6878      	ldr	r0, [r7, #4]
   12092:	4b18      	ldr	r3, [pc, #96]	; (120f4 <bt_att_accept+0xec>)
   12094:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   12096:	30a0      	adds	r0, #160	; 0xa0
   12098:	f01d f99a 	bl	2f3d0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1209c:	687b      	ldr	r3, [r7, #4]
   1209e:	3398      	adds	r3, #152	; 0x98
   120a0:	e8d3 2fef 	ldaex	r2, [r3]
   120a4:	e8c3 5fe1 	stlex	r1, r5, [r3]
   120a8:	2900      	cmp	r1, #0
   120aa:	d1f9      	bne.n	120a0 <bt_att_accept+0x98>
	chan->att = att;
   120ac:	687b      	ldr	r3, [r7, #4]
   120ae:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   120b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   120b2:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   120b6:	b91b      	cbnz	r3, 120c0 <bt_att_accept+0xb8>
   120b8:	f104 000c 	add.w	r0, r4, #12
   120bc:	f01d f988 	bl	2f3d0 <z_impl_k_queue_init>
	return list->head;
   120c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   120c2:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   120c6:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   120ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   120cc:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   120ce:	b902      	cbnz	r2, 120d2 <bt_att_accept+0xca>
	list->tail = node;
   120d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   120d2:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   120d4:	2b00      	cmp	r3, #0
   120d6:	d0b5      	beq.n	12044 <bt_att_accept+0x3c>
	*ch = &chan->chan.chan;
   120d8:	3304      	adds	r3, #4
   120da:	6033      	str	r3, [r6, #0]
	return 0;
   120dc:	e7b4      	b.n	12048 <bt_att_accept+0x40>
   120de:	bf00      	nop
   120e0:	20008d8c 	.word	0x20008d8c
   120e4:	000323cc 	.word	0x000323cc
   120e8:	0002fc14 	.word	0x0002fc14
   120ec:	2000a8e8 	.word	0x2000a8e8
   120f0:	20008dac 	.word	0x20008dac
   120f4:	20008740 	.word	0x20008740

000120f8 <bt_att_chan_create_pdu>:
{
   120f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   120fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   120fe:	3201      	adds	r2, #1
   12100:	429a      	cmp	r2, r3
{
   12102:	460d      	mov	r5, r1
   12104:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12106:	d822      	bhi.n	1214e <bt_att_chan_create_pdu+0x56>
	switch (att_op_get_type(op)) {
   12108:	4608      	mov	r0, r1
   1210a:	f7ff fd85 	bl	11c18 <att_op_get_type>
   1210e:	2802      	cmp	r0, #2
   12110:	d022      	beq.n	12158 <bt_att_chan_create_pdu+0x60>
   12112:	2804      	cmp	r0, #4
   12114:	d020      	beq.n	12158 <bt_att_chan_create_pdu+0x60>
		timeout = K_FOREVER;
   12116:	f04f 38ff 	mov.w	r8, #4294967295
   1211a:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1211e:	2100      	movs	r1, #0
   12120:	4642      	mov	r2, r8
   12122:	464b      	mov	r3, r9
   12124:	4608      	mov	r0, r1
   12126:	f018 fff4 	bl	2b112 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1212a:	4604      	mov	r4, r0
   1212c:	b9c8      	cbnz	r0, 12162 <bt_att_chan_create_pdu+0x6a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1212e:	466e      	mov	r6, sp
   12130:	b088      	sub	sp, #32
   12132:	466a      	mov	r2, sp
   12134:	4b14      	ldr	r3, [pc, #80]	; (12188 <bt_att_chan_create_pdu+0x90>)
   12136:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1213a:	2303      	movs	r3, #3
   1213c:	f842 3f10 	str.w	r3, [r2, #16]!
   12140:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12144:	4603      	mov	r3, r0
   12146:	4811      	ldr	r0, [pc, #68]	; (1218c <bt_att_chan_create_pdu+0x94>)
   12148:	f7f8 fd08 	bl	ab5c <z_impl_z_log_msg_static_create>
   1214c:	46b5      	mov	sp, r6
		return NULL;
   1214e:	2400      	movs	r4, #0
}
   12150:	4620      	mov	r0, r4
   12152:	46bd      	mov	sp, r7
   12154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   12158:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1215c:	f04f 0900 	mov.w	r9, #0
   12160:	e7dd      	b.n	1211e <bt_att_chan_create_pdu+0x26>
	return z_impl_k_queue_get(queue, timeout);
   12162:	480b      	ldr	r0, [pc, #44]	; (12190 <bt_att_chan_create_pdu+0x98>)
   12164:	4642      	mov	r2, r8
   12166:	464b      	mov	r3, r9
   12168:	f013 fd5e 	bl	25c28 <z_impl_k_queue_get>
	if (!data) {
   1216c:	b918      	cbnz	r0, 12176 <bt_att_chan_create_pdu+0x7e>
		net_buf_unref(buf);
   1216e:	4620      	mov	r0, r4
   12170:	f00d ffb4 	bl	200dc <net_buf_unref>
		return NULL;
   12174:	e7eb      	b.n	1214e <bt_att_chan_create_pdu+0x56>
	bt_att_tx_meta_data(buf) = data;
   12176:	61a0      	str	r0, [r4, #24]
   12178:	2101      	movs	r1, #1
   1217a:	f104 000c 	add.w	r0, r4, #12
   1217e:	f00e f8e7 	bl	20350 <net_buf_simple_add>
	hdr->code = op;
   12182:	7005      	strb	r5, [r0, #0]
	return buf;
   12184:	e7e4      	b.n	12150 <bt_att_chan_create_pdu+0x58>
   12186:	bf00      	nop
   12188:	000321d7 	.word	0x000321d7
   1218c:	0002fc14 	.word	0x0002fc14
   12190:	20008eb8 	.word	0x20008eb8

00012194 <bt_att_recv>:
{
   12194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12198:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1219a:	8a0b      	ldrh	r3, [r1, #16]
{
   1219c:	4682      	mov	sl, r0
   1219e:	460c      	mov	r4, r1
   121a0:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   121a2:	b97b      	cbnz	r3, 121c4 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   121a4:	4a3b      	ldr	r2, [pc, #236]	; (12294 <bt_att_recv+0x100>)
   121a6:	617a      	str	r2, [r7, #20]
   121a8:	2202      	movs	r2, #2
   121aa:	613a      	str	r2, [r7, #16]
   121ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121b0:	4839      	ldr	r0, [pc, #228]	; (12298 <bt_att_recv+0x104>)
   121b2:	f107 0210 	add.w	r2, r7, #16
   121b6:	f7f8 fcd1 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   121ba:	2000      	movs	r0, #0
   121bc:	371c      	adds	r7, #28
   121be:	46bd      	mov	sp, r7
   121c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   121c4:	2101      	movs	r1, #1
   121c6:	f104 000c 	add.w	r0, r4, #12
   121ca:	f00e f8a7 	bl	2031c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   121ce:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   121d2:	4605      	mov	r5, r0
   121d4:	2b00      	cmp	r3, #0
   121d6:	d0f0      	beq.n	121ba <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   121d8:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   121da:	7801      	ldrb	r1, [r0, #0]
   121dc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1229c <bt_att_recv+0x108>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   121e0:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   121e4:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   121e8:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   121ec:	4288      	cmp	r0, r1
   121ee:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   121f2:	d129      	bne.n	12248 <bt_att_recv+0xb4>
		if (handler->type == ATT_REQUEST &&
   121f4:	f892 9002 	ldrb.w	r9, [r2, #2]
   121f8:	f1b9 0f01 	cmp.w	r9, #1
   121fc:	d136      	bne.n	1226c <bt_att_recv+0xd8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   121fe:	2100      	movs	r1, #0
   12200:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   12204:	f019 f9da 	bl	2b5bc <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   12208:	2800      	cmp	r0, #0
   1220a:	d1d6      	bne.n	121ba <bt_att_recv+0x26>
	if (buf->len < handler->expect_len) {
   1220c:	44d8      	add	r8, fp
   1220e:	8a23      	ldrh	r3, [r4, #16]
   12210:	f898 2001 	ldrb.w	r2, [r8, #1]
   12214:	429a      	cmp	r2, r3
   12216:	d92e      	bls.n	12276 <bt_att_recv+0xe2>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12218:	46e9      	mov	r9, sp
   1221a:	b088      	sub	sp, #32
   1221c:	466a      	mov	r2, sp
   1221e:	7829      	ldrb	r1, [r5, #0]
   12220:	2404      	movs	r4, #4
   12222:	481f      	ldr	r0, [pc, #124]	; (122a0 <bt_att_recv+0x10c>)
   12224:	61d1      	str	r1, [r2, #28]
   12226:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1222a:	f842 4f10 	str.w	r4, [r2, #16]!
   1222e:	2300      	movs	r3, #0
   12230:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12234:	4818      	ldr	r0, [pc, #96]	; (12298 <bt_att_recv+0x104>)
   12236:	f7f8 fc91 	bl	ab5c <z_impl_z_log_msg_static_create>
	if (handler->type == ATT_REQUEST && err) {
   1223a:	f898 3002 	ldrb.w	r3, [r8, #2]
   1223e:	46cd      	mov	sp, r9
   12240:	2b01      	cmp	r3, #1
   12242:	d1ba      	bne.n	121ba <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   12244:	4623      	mov	r3, r4
   12246:	e021      	b.n	1228c <bt_att_recv+0xf8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12248:	3301      	adds	r3, #1
   1224a:	2b0e      	cmp	r3, #14
   1224c:	d1ca      	bne.n	121e4 <bt_att_recv+0x50>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1224e:	4608      	mov	r0, r1
   12250:	f7ff fce2 	bl	11c18 <att_op_get_type>
   12254:	2800      	cmp	r0, #0
   12256:	d0b0      	beq.n	121ba <bt_att_recv+0x26>
   12258:	2805      	cmp	r0, #5
   1225a:	d0ae      	beq.n	121ba <bt_att_recv+0x26>
	if (!req) {
   1225c:	2900      	cmp	r1, #0
   1225e:	d0ac      	beq.n	121ba <bt_att_recv+0x26>
   12260:	2306      	movs	r3, #6
   12262:	2200      	movs	r2, #0
   12264:	4630      	mov	r0, r6
   12266:	f019 fb4e 	bl	2b906 <send_err_rsp.part.0>
   1226a:	e7a6      	b.n	121ba <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1226c:	f1b9 0f05 	cmp.w	r9, #5
   12270:	d1cc      	bne.n	1220c <bt_att_recv+0x78>
			   atomic_test_and_set_bit(att_chan->flags,
   12272:	2101      	movs	r1, #1
   12274:	e7c4      	b.n	12200 <bt_att_recv+0x6c>
		err = handler->func(att_chan, buf);
   12276:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1227a:	4621      	mov	r1, r4
   1227c:	4630      	mov	r0, r6
   1227e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12280:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   12284:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12286:	d198      	bne.n	121ba <bt_att_recv+0x26>
   12288:	2800      	cmp	r0, #0
   1228a:	d096      	beq.n	121ba <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1228c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1228e:	2900      	cmp	r1, #0
   12290:	d093      	beq.n	121ba <bt_att_recv+0x26>
   12292:	e7e6      	b.n	12262 <bt_att_recv+0xce>
   12294:	000323f1 	.word	0x000323f1
   12298:	0002fc14 	.word	0x0002fc14
   1229c:	000303e0 	.word	0x000303e0
   122a0:	0003240c 	.word	0x0003240c

000122a4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   122a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122a6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   122a8:	6803      	ldr	r3, [r0, #0]
   122aa:	460d      	mov	r5, r1
   122ac:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   122ae:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   122b0:	bf18      	it	ne
   122b2:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   122b4:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   122b6:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   122b8:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   122ba:	f019 fed2 	bl	2c062 <bt_gatt_change_aware>
   122be:	b948      	cbnz	r0, 122d4 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   122c0:	2105      	movs	r1, #5
   122c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   122c6:	f019 f979 	bl	2b5bc <atomic_test_and_set_bit>
   122ca:	2800      	cmp	r0, #0
   122cc:	d048      	beq.n	12360 <att_write_rsp.constprop.0+0xbc>
			return 0;
   122ce:	2000      	movs	r0, #0
}
   122d0:	b007      	add	sp, #28
   122d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   122d4:	2e00      	cmp	r6, #0
   122d6:	d045      	beq.n	12364 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   122d8:	2218      	movs	r2, #24
   122da:	2100      	movs	r1, #0
   122dc:	4668      	mov	r0, sp
   122de:	f018 f927 	bl	2a530 <memset>
	if (rsp) {
   122e2:	bb67      	cbnz	r7, 1233e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   122e4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   122e6:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   122e8:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   122ea:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   122ec:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   122ee:	2300      	movs	r3, #0
   122f0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   122f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   122f6:	4a1c      	ldr	r2, [pc, #112]	; (12368 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   122f8:	9303      	str	r3, [sp, #12]
	data.len = len;
   122fa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   122fe:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   12302:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12306:	2301      	movs	r3, #1
   12308:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1230c:	466b      	mov	r3, sp
   1230e:	f018 ff81 	bl	2b214 <bt_gatt_foreach_attr>
	if (data.err) {
   12312:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12316:	b1e3      	cbz	r3, 12352 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   12318:	2f00      	cmp	r7, #0
   1231a:	d0d8      	beq.n	122ce <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	6998      	ldr	r0, [r3, #24]
   12320:	f7ff fcc0 	bl	11ca4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12324:	9801      	ldr	r0, [sp, #4]
   12326:	f00d fed9 	bl	200dc <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1232a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1232e:	2d00      	cmp	r5, #0
   12330:	d0cd      	beq.n	122ce <att_write_rsp.constprop.0+0x2a>
   12332:	4632      	mov	r2, r6
   12334:	4629      	mov	r1, r5
   12336:	4620      	mov	r0, r4
   12338:	f019 fae5 	bl	2b906 <send_err_rsp.part.0>
   1233c:	e7c7      	b.n	122ce <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1233e:	2200      	movs	r2, #0
   12340:	4639      	mov	r1, r7
   12342:	4620      	mov	r0, r4
   12344:	f7ff fed8 	bl	120f8 <bt_att_chan_create_pdu>
   12348:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1234a:	2800      	cmp	r0, #0
   1234c:	d1ca      	bne.n	122e4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1234e:	200e      	movs	r0, #14
   12350:	e7be      	b.n	122d0 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   12352:	9901      	ldr	r1, [sp, #4]
   12354:	2900      	cmp	r1, #0
   12356:	d0ba      	beq.n	122ce <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   12358:	4620      	mov	r0, r4
   1235a:	f019 f973 	bl	2b644 <bt_att_chan_send_rsp>
   1235e:	e7b6      	b.n	122ce <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12360:	2012      	movs	r0, #18
   12362:	e7b5      	b.n	122d0 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12364:	2001      	movs	r0, #1
   12366:	e7b3      	b.n	122d0 <att_write_rsp.constprop.0+0x2c>
   12368:	0002b1b3 	.word	0x0002b1b3

0001236c <att_read_group_req>:
{
   1236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12370:	8a0e      	ldrh	r6, [r1, #16]
{
   12372:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12374:	3e04      	subs	r6, #4
   12376:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   12378:	2e02      	cmp	r6, #2
{
   1237a:	4608      	mov	r0, r1
   1237c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1237e:	d001      	beq.n	12384 <att_read_group_req+0x18>
   12380:	2e10      	cmp	r6, #16
   12382:	d16a      	bne.n	1245a <att_read_group_req+0xee>
   12384:	2104      	movs	r1, #4
   12386:	300c      	adds	r0, #12
   12388:	f00d ffc8 	bl	2031c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1238c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12390:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12392:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12394:	1d01      	adds	r1, r0, #4
   12396:	4632      	mov	r2, r6
   12398:	4640      	mov	r0, r8
   1239a:	f018 fad5 	bl	2a948 <bt_uuid_create>
   1239e:	2800      	cmp	r0, #0
   123a0:	d05d      	beq.n	1245e <att_read_group_req+0xf2>
	if (!start || !end) {
   123a2:	2d00      	cmp	r5, #0
   123a4:	d03a      	beq.n	1241c <att_read_group_req+0xb0>
   123a6:	2600      	movs	r6, #0
   123a8:	2f00      	cmp	r7, #0
   123aa:	d036      	beq.n	1241a <att_read_group_req+0xae>
	if (start > end) {
   123ac:	42bd      	cmp	r5, r7
   123ae:	d835      	bhi.n	1241c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   123b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   123b4:	4640      	mov	r0, r8
   123b6:	a901      	add	r1, sp, #4
   123b8:	f88d 6004 	strb.w	r6, [sp, #4]
   123bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   123c0:	f018 fa94 	bl	2a8ec <bt_uuid_cmp>
   123c4:	bb70      	cbnz	r0, 12424 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   123c6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   123c8:	2214      	movs	r2, #20
   123ca:	2100      	movs	r1, #0
   123cc:	a807      	add	r0, sp, #28
   123ce:	f018 f8af 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   123d2:	2201      	movs	r2, #1
   123d4:	2111      	movs	r1, #17
   123d6:	4630      	mov	r0, r6
   123d8:	f019 fad8 	bl	2b98c <bt_att_create_pdu>
   123dc:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   123de:	2800      	cmp	r0, #0
   123e0:	d03d      	beq.n	1245e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   123e2:	2101      	movs	r1, #1
   123e4:	300c      	adds	r0, #12
	data.uuid = uuid;
   123e6:	e9cd 4807 	strd	r4, r8, [sp, #28]
   123ea:	f00d ffb1 	bl	20350 <net_buf_simple_add>
	data.rsp->len = 0U;
   123ee:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   123f0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   123f2:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   123f4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   123f6:	4a1b      	ldr	r2, [pc, #108]	; (12464 <att_read_group_req+0xf8>)
	data.group = NULL;
   123f8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   123fa:	4628      	mov	r0, r5
   123fc:	ab07      	add	r3, sp, #28
   123fe:	f018 ff09 	bl	2b214 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12404:	781b      	ldrb	r3, [r3, #0]
   12406:	bb1b      	cbnz	r3, 12450 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12408:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1240a:	6998      	ldr	r0, [r3, #24]
   1240c:	f7ff fc4a 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   12410:	9809      	ldr	r0, [sp, #36]	; 0x24
   12412:	f00d fe63 	bl	200dc <net_buf_unref>
	if (!req) {
   12416:	230a      	movs	r3, #10
   12418:	e001      	b.n	1241e <att_read_group_req+0xb2>
			*err = 0U;
   1241a:	463d      	mov	r5, r7
	if (!req) {
   1241c:	2301      	movs	r3, #1
   1241e:	462a      	mov	r2, r5
   12420:	2110      	movs	r1, #16
   12422:	e00e      	b.n	12442 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12424:	f642 0301 	movw	r3, #10241	; 0x2801
   12428:	4640      	mov	r0, r8
   1242a:	a907      	add	r1, sp, #28
   1242c:	f88d 601c 	strb.w	r6, [sp, #28]
   12430:	f8ad 301e 	strh.w	r3, [sp, #30]
   12434:	f018 fa5a 	bl	2a8ec <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12438:	2800      	cmp	r0, #0
   1243a:	d0c4      	beq.n	123c6 <att_read_group_req+0x5a>
	if (!req) {
   1243c:	2310      	movs	r3, #16
   1243e:	462a      	mov	r2, r5
   12440:	4619      	mov	r1, r3
   12442:	4620      	mov	r0, r4
   12444:	f019 fa5f 	bl	2b906 <send_err_rsp.part.0>
		return 0;
   12448:	2000      	movs	r0, #0
}
   1244a:	b00c      	add	sp, #48	; 0x30
   1244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   12450:	4620      	mov	r0, r4
   12452:	9909      	ldr	r1, [sp, #36]	; 0x24
   12454:	f019 f8f6 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   12458:	e7f6      	b.n	12448 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1245a:	2004      	movs	r0, #4
   1245c:	e7f5      	b.n	1244a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1245e:	200e      	movs	r0, #14
   12460:	e7f3      	b.n	1244a <att_read_group_req+0xde>
   12462:	bf00      	nop
   12464:	00011d19 	.word	0x00011d19

00012468 <att_read_mult_vl_req>:
{
   12468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1246c:	6846      	ldr	r6, [r0, #4]
{
   1246e:	4604      	mov	r4, r0
   12470:	460d      	mov	r5, r1
   12472:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   12474:	2101      	movs	r1, #1
   12476:	4630      	mov	r0, r6
   12478:	f019 fdf3 	bl	2c062 <bt_gatt_change_aware>
   1247c:	b950      	cbnz	r0, 12494 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1247e:	2105      	movs	r1, #5
   12480:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12484:	f019 f89a 	bl	2b5bc <atomic_test_and_set_bit>
   12488:	2800      	cmp	r0, #0
   1248a:	d13b      	bne.n	12504 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1248c:	2012      	movs	r0, #18
}
   1248e:	b005      	add	sp, #20
   12490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   12494:	2210      	movs	r2, #16
   12496:	2100      	movs	r1, #0
   12498:	4668      	mov	r0, sp
   1249a:	f018 f849 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1249e:	2200      	movs	r2, #0
   124a0:	2121      	movs	r1, #33	; 0x21
   124a2:	4630      	mov	r0, r6
   124a4:	f019 fa72 	bl	2b98c <bt_att_create_pdu>
   124a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   124aa:	b368      	cbz	r0, 12508 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   124ac:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   124b0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1250c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   124b4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   124b6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   124ba:	8a2b      	ldrh	r3, [r5, #16]
   124bc:	2b01      	cmp	r3, #1
   124be:	d804      	bhi.n	124ca <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   124c0:	4620      	mov	r0, r4
   124c2:	9902      	ldr	r1, [sp, #8]
   124c4:	f019 f8be 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   124c8:	e01c      	b.n	12504 <att_read_mult_vl_req+0x9c>
   124ca:	4638      	mov	r0, r7
   124cc:	f01b fcde 	bl	2de8c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   124d0:	466b      	mov	r3, sp
   124d2:	464a      	mov	r2, r9
   124d4:	4601      	mov	r1, r0
   124d6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   124d8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   124dc:	f018 fe9a 	bl	2b214 <bt_gatt_foreach_attr>
		if (data.err) {
   124e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   124e4:	2b00      	cmp	r3, #0
   124e6:	d0e8      	beq.n	124ba <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   124e8:	9b02      	ldr	r3, [sp, #8]
   124ea:	6998      	ldr	r0, [r3, #24]
   124ec:	f7ff fbda 	bl	11ca4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   124f0:	9802      	ldr	r0, [sp, #8]
   124f2:	f00d fdf3 	bl	200dc <net_buf_unref>
	if (!req) {
   124f6:	4632      	mov	r2, r6
   124f8:	2120      	movs	r1, #32
   124fa:	4620      	mov	r0, r4
   124fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12500:	f019 fa01 	bl	2b906 <send_err_rsp.part.0>
			return 0;
   12504:	2000      	movs	r0, #0
   12506:	e7c2      	b.n	1248e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   12508:	200e      	movs	r0, #14
   1250a:	e7c0      	b.n	1248e <att_read_mult_vl_req+0x26>
   1250c:	0002b6a7 	.word	0x0002b6a7

00012510 <att_read_mult_req>:
{
   12510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12514:	6846      	ldr	r6, [r0, #4]
{
   12516:	4604      	mov	r4, r0
   12518:	460d      	mov	r5, r1
   1251a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1251c:	2101      	movs	r1, #1
   1251e:	4630      	mov	r0, r6
   12520:	f019 fd9f 	bl	2c062 <bt_gatt_change_aware>
   12524:	b950      	cbnz	r0, 1253c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   12526:	2105      	movs	r1, #5
   12528:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1252c:	f019 f846 	bl	2b5bc <atomic_test_and_set_bit>
   12530:	2800      	cmp	r0, #0
   12532:	d13b      	bne.n	125ac <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12534:	2012      	movs	r0, #18
}
   12536:	b005      	add	sp, #20
   12538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1253c:	2210      	movs	r2, #16
   1253e:	2100      	movs	r1, #0
   12540:	4668      	mov	r0, sp
   12542:	f017 fff5 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12546:	2200      	movs	r2, #0
   12548:	210f      	movs	r1, #15
   1254a:	4630      	mov	r0, r6
   1254c:	f019 fa1e 	bl	2b98c <bt_att_create_pdu>
   12550:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12552:	b368      	cbz	r0, 125b0 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12554:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12558:	f8df 9058 	ldr.w	r9, [pc, #88]	; 125b4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1255c:	9400      	str	r4, [sp, #0]
   1255e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   12562:	8a2b      	ldrh	r3, [r5, #16]
   12564:	2b01      	cmp	r3, #1
   12566:	d804      	bhi.n	12572 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   12568:	4620      	mov	r0, r4
   1256a:	9902      	ldr	r1, [sp, #8]
   1256c:	f019 f86a 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   12570:	e01c      	b.n	125ac <att_read_mult_req+0x9c>
   12572:	4638      	mov	r0, r7
   12574:	f01b fc8a 	bl	2de8c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12578:	466b      	mov	r3, sp
   1257a:	464a      	mov	r2, r9
   1257c:	4601      	mov	r1, r0
   1257e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12580:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12584:	f018 fe46 	bl	2b214 <bt_gatt_foreach_attr>
		if (data.err) {
   12588:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1258c:	2b00      	cmp	r3, #0
   1258e:	d0e8      	beq.n	12562 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12590:	9b02      	ldr	r3, [sp, #8]
   12592:	6998      	ldr	r0, [r3, #24]
   12594:	f7ff fb86 	bl	11ca4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   12598:	9802      	ldr	r0, [sp, #8]
   1259a:	f00d fd9f 	bl	200dc <net_buf_unref>
	if (!req) {
   1259e:	4632      	mov	r2, r6
   125a0:	210e      	movs	r1, #14
   125a2:	4620      	mov	r0, r4
   125a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   125a8:	f019 f9ad 	bl	2b906 <send_err_rsp.part.0>
			return 0;
   125ac:	2000      	movs	r0, #0
   125ae:	e7c2      	b.n	12536 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   125b0:	200e      	movs	r0, #14
   125b2:	e7c0      	b.n	12536 <att_read_mult_req+0x26>
   125b4:	0002b661 	.word	0x0002b661

000125b8 <att_read_rsp>:
{
   125b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   125bc:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   125c0:	4604      	mov	r4, r0
   125c2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   125c4:	4640      	mov	r0, r8
   125c6:	2101      	movs	r1, #1
{
   125c8:	4617      	mov	r7, r2
   125ca:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   125cc:	f019 fd49 	bl	2c062 <bt_gatt_change_aware>
   125d0:	b948      	cbnz	r0, 125e6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   125d2:	2105      	movs	r1, #5
   125d4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   125d8:	f018 fff0 	bl	2b5bc <atomic_test_and_set_bit>
   125dc:	bb78      	cbnz	r0, 1263e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   125de:	2012      	movs	r0, #18
}
   125e0:	b004      	add	sp, #16
   125e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   125e6:	b38d      	cbz	r5, 1264c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   125e8:	2210      	movs	r2, #16
   125ea:	2100      	movs	r1, #0
   125ec:	4668      	mov	r0, sp
   125ee:	f017 ff9f 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   125f2:	2200      	movs	r2, #0
   125f4:	4639      	mov	r1, r7
   125f6:	4640      	mov	r0, r8
   125f8:	f019 f9c8 	bl	2b98c <bt_att_create_pdu>
   125fc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   125fe:	b338      	cbz	r0, 12650 <att_read_rsp+0x98>
	data.offset = offset;
   12600:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12604:	4629      	mov	r1, r5
	data.offset = offset;
   12606:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1260a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1260c:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1260e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12612:	4a10      	ldr	r2, [pc, #64]	; (12654 <att_read_rsp+0x9c>)
   12614:	466b      	mov	r3, sp
	data.chan = chan;
   12616:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12618:	f018 fdfc 	bl	2b214 <bt_gatt_foreach_attr>
	if (data.err) {
   1261c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12620:	b17b      	cbz	r3, 12642 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12622:	9b02      	ldr	r3, [sp, #8]
   12624:	6998      	ldr	r0, [r3, #24]
   12626:	f7ff fb3d 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1262a:	9802      	ldr	r0, [sp, #8]
   1262c:	f00d fd56 	bl	200dc <net_buf_unref>
	if (!req) {
   12630:	462a      	mov	r2, r5
   12632:	4631      	mov	r1, r6
   12634:	4620      	mov	r0, r4
   12636:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1263a:	f019 f964 	bl	2b906 <send_err_rsp.part.0>
			return 0;
   1263e:	2000      	movs	r0, #0
   12640:	e7ce      	b.n	125e0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   12642:	4620      	mov	r0, r4
   12644:	9902      	ldr	r1, [sp, #8]
   12646:	f018 fffd 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   1264a:	e7f8      	b.n	1263e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1264c:	2001      	movs	r0, #1
   1264e:	e7c7      	b.n	125e0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   12650:	200e      	movs	r0, #14
   12652:	e7c5      	b.n	125e0 <att_read_rsp+0x28>
   12654:	0002b661 	.word	0x0002b661

00012658 <att_read_type_req>:
{
   12658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1265c:	8a0d      	ldrh	r5, [r1, #16]
{
   1265e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12660:	3d04      	subs	r5, #4
   12662:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   12664:	2d02      	cmp	r5, #2
{
   12666:	4608      	mov	r0, r1
   12668:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1266a:	d001      	beq.n	12670 <att_read_type_req+0x18>
   1266c:	2d10      	cmp	r5, #16
   1266e:	d150      	bne.n	12712 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12670:	2104      	movs	r1, #4
   12672:	300c      	adds	r0, #12
   12674:	f00d fe52 	bl	2031c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12678:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1267c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1267e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12680:	1d01      	adds	r1, r0, #4
   12682:	462a      	mov	r2, r5
   12684:	4640      	mov	r0, r8
   12686:	f018 f95f 	bl	2a948 <bt_uuid_create>
   1268a:	b188      	cbz	r0, 126b0 <att_read_type_req+0x58>
	if (!start || !end) {
   1268c:	b19e      	cbz	r6, 126b6 <att_read_type_req+0x5e>
   1268e:	b18f      	cbz	r7, 126b4 <att_read_type_req+0x5c>
	if (start > end) {
   12690:	42b7      	cmp	r7, r6
   12692:	d310      	bcc.n	126b6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12694:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12696:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   12698:	2100      	movs	r1, #0
   1269a:	eb0d 0002 	add.w	r0, sp, r2
   1269e:	f017 ff47 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   126a2:	2201      	movs	r2, #1
   126a4:	2109      	movs	r1, #9
   126a6:	4628      	mov	r0, r5
   126a8:	f019 f970 	bl	2b98c <bt_att_create_pdu>
   126ac:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   126ae:	b960      	cbnz	r0, 126ca <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   126b0:	200e      	movs	r0, #14
   126b2:	e007      	b.n	126c4 <att_read_type_req+0x6c>
			*err = 0U;
   126b4:	463e      	mov	r6, r7
	if (!req) {
   126b6:	2301      	movs	r3, #1
   126b8:	4632      	mov	r2, r6
   126ba:	2108      	movs	r1, #8
   126bc:	4620      	mov	r0, r4
   126be:	f019 f922 	bl	2b906 <send_err_rsp.part.0>
		return 0;
   126c2:	2000      	movs	r0, #0
}
   126c4:	b00c      	add	sp, #48	; 0x30
   126c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   126ca:	2101      	movs	r1, #1
   126cc:	300c      	adds	r0, #12
	data.uuid = uuid;
   126ce:	e9cd 4806 	strd	r4, r8, [sp, #24]
   126d2:	f00d fe3d 	bl	20350 <net_buf_simple_add>
	data.rsp->len = 0U;
   126d6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   126d8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   126da:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   126dc:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   126de:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   126e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   126e4:	4630      	mov	r0, r6
   126e6:	ab06      	add	r3, sp, #24
   126e8:	4a0b      	ldr	r2, [pc, #44]	; (12718 <att_read_type_req+0xc0>)
   126ea:	f018 fd93 	bl	2b214 <bt_gatt_foreach_attr>
	if (data.err) {
   126ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   126f2:	b14b      	cbz	r3, 12708 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   126f4:	9b08      	ldr	r3, [sp, #32]
   126f6:	6998      	ldr	r0, [r3, #24]
   126f8:	f7ff fad4 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   126fc:	9808      	ldr	r0, [sp, #32]
   126fe:	f00d fced 	bl	200dc <net_buf_unref>
	if (!req) {
   12702:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12706:	e7d7      	b.n	126b8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   12708:	4620      	mov	r0, r4
   1270a:	9908      	ldr	r1, [sp, #32]
   1270c:	f018 ff9a 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   12710:	e7d7      	b.n	126c2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   12712:	2004      	movs	r0, #4
   12714:	e7d6      	b.n	126c4 <att_read_type_req+0x6c>
   12716:	bf00      	nop
   12718:	00011f69 	.word	0x00011f69

0001271c <att_find_type_req>:
{
   1271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12720:	460f      	mov	r7, r1
   12722:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12724:	2106      	movs	r1, #6
   12726:	b086      	sub	sp, #24
   12728:	f107 000c 	add.w	r0, r7, #12
   1272c:	f00d fdf6 	bl	2031c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12730:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12732:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   12736:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   12738:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1273c:	b1c5      	cbz	r5, 12770 <att_find_type_req+0x54>
   1273e:	2300      	movs	r3, #0
   12740:	f1b8 0f00 	cmp.w	r8, #0
   12744:	d013      	beq.n	1276e <att_find_type_req+0x52>
	if (start > end) {
   12746:	4545      	cmp	r5, r8
   12748:	d812      	bhi.n	12770 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1274a:	f88d 3000 	strb.w	r3, [sp]
   1274e:	f88d 3004 	strb.w	r3, [sp, #4]
   12752:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12756:	4668      	mov	r0, sp
   12758:	a901      	add	r1, sp, #4
   1275a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1275e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12762:	f018 f8c3 	bl	2a8ec <bt_uuid_cmp>
   12766:	4606      	mov	r6, r0
   12768:	b160      	cbz	r0, 12784 <att_find_type_req+0x68>
	if (!req) {
   1276a:	230a      	movs	r3, #10
   1276c:	e001      	b.n	12772 <att_find_type_req+0x56>
			*err = 0U;
   1276e:	4645      	mov	r5, r8
	if (!req) {
   12770:	2301      	movs	r3, #1
   12772:	462a      	mov	r2, r5
   12774:	2106      	movs	r1, #6
   12776:	4620      	mov	r0, r4
   12778:	f019 f8c5 	bl	2b906 <send_err_rsp.part.0>
		return 0;
   1277c:	2000      	movs	r0, #0
}
   1277e:	b006      	add	sp, #24
   12780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   12784:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   12788:	4601      	mov	r1, r0
   1278a:	2214      	movs	r2, #20
   1278c:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1278e:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   12790:	f017 fece 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12794:	4632      	mov	r2, r6
   12796:	2107      	movs	r1, #7
   12798:	4650      	mov	r0, sl
   1279a:	f019 f8f7 	bl	2b98c <bt_att_create_pdu>
   1279e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   127a0:	b1f8      	cbz	r0, 127e2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   127a2:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   127a4:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   127a6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   127aa:	4628      	mov	r0, r5
   127ac:	ab01      	add	r3, sp, #4
   127ae:	4a0e      	ldr	r2, [pc, #56]	; (127e8 <att_find_type_req+0xcc>)
	data.value = value;
   127b0:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   127b4:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   127b6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   127ba:	f018 fd2b 	bl	2b214 <bt_gatt_foreach_attr>
	if (data.err) {
   127be:	f89d 3015 	ldrb.w	r3, [sp, #21]
   127c2:	b14b      	cbz	r3, 127d8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   127c4:	9b02      	ldr	r3, [sp, #8]
   127c6:	6998      	ldr	r0, [r3, #24]
   127c8:	f7ff fa6c 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   127cc:	9802      	ldr	r0, [sp, #8]
   127ce:	f00d fc85 	bl	200dc <net_buf_unref>
	if (!req) {
   127d2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   127d6:	e7cc      	b.n	12772 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   127d8:	4620      	mov	r0, r4
   127da:	9902      	ldr	r1, [sp, #8]
   127dc:	f018 ff32 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   127e0:	e7cc      	b.n	1277c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   127e2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   127e4:	e7cb      	b.n	1277e <att_find_type_req+0x62>
   127e6:	bf00      	nop
   127e8:	0002b22b 	.word	0x0002b22b

000127ec <att_find_info_req>:
{
   127ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   127ee:	68cb      	ldr	r3, [r1, #12]
{
   127f0:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   127f2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   127f4:	885e      	ldrh	r6, [r3, #2]
{
   127f6:	b085      	sub	sp, #20
	if (!start || !end) {
   127f8:	b195      	cbz	r5, 12820 <att_find_info_req+0x34>
   127fa:	b186      	cbz	r6, 1281e <att_find_info_req+0x32>
	if (start > end) {
   127fc:	42b5      	cmp	r5, r6
   127fe:	d80f      	bhi.n	12820 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12800:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   12802:	2210      	movs	r2, #16
   12804:	2100      	movs	r1, #0
   12806:	4668      	mov	r0, sp
   12808:	f017 fe92 	bl	2a530 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1280c:	2200      	movs	r2, #0
   1280e:	2105      	movs	r1, #5
   12810:	4638      	mov	r0, r7
   12812:	f019 f8bb 	bl	2b98c <bt_att_create_pdu>
   12816:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12818:	b958      	cbnz	r0, 12832 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1281a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1281c:	e007      	b.n	1282e <att_find_info_req+0x42>
			*err = 0U;
   1281e:	4635      	mov	r5, r6
	if (!req) {
   12820:	2301      	movs	r3, #1
   12822:	462a      	mov	r2, r5
   12824:	2104      	movs	r1, #4
   12826:	4620      	mov	r0, r4
   12828:	f019 f86d 	bl	2b906 <send_err_rsp.part.0>
		return 0;
   1282c:	2000      	movs	r0, #0
}
   1282e:	b005      	add	sp, #20
   12830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12832:	466b      	mov	r3, sp
   12834:	4631      	mov	r1, r6
   12836:	4628      	mov	r0, r5
   12838:	4a09      	ldr	r2, [pc, #36]	; (12860 <att_find_info_req+0x74>)
	data.chan = chan;
   1283a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1283c:	f018 fcea 	bl	2b214 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12840:	9b02      	ldr	r3, [sp, #8]
   12842:	b943      	cbnz	r3, 12856 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   12844:	9b01      	ldr	r3, [sp, #4]
   12846:	6998      	ldr	r0, [r3, #24]
   12848:	f7ff fa2c 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1284c:	9801      	ldr	r0, [sp, #4]
   1284e:	f00d fc45 	bl	200dc <net_buf_unref>
	if (!req) {
   12852:	230a      	movs	r3, #10
   12854:	e7e5      	b.n	12822 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   12856:	4620      	mov	r0, r4
   12858:	9901      	ldr	r1, [sp, #4]
   1285a:	f018 fef3 	bl	2b644 <bt_att_chan_send_rsp>
	return 0;
   1285e:	e7e5      	b.n	1282c <att_find_info_req+0x40>
   12860:	0002b353 	.word	0x0002b353

00012864 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   12864:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   12866:	4809      	ldr	r0, [pc, #36]	; (1288c <bt_att_init+0x28>)
   12868:	f01c fdb2 	bl	2f3d0 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1286c:	2400      	movs	r4, #0
   1286e:	4d08      	ldr	r5, [pc, #32]	; (12890 <bt_att_init+0x2c>)
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   12870:	4e06      	ldr	r6, [pc, #24]	; (1288c <bt_att_init+0x28>)
   12872:	4629      	mov	r1, r5
   12874:	4630      	mov	r0, r6
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   12876:	3401      	adds	r4, #1
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   12878:	f01c fdb7 	bl	2f3ea <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   1287c:	2c08      	cmp	r4, #8
   1287e:	f105 0514 	add.w	r5, r5, #20
   12882:	d1f6      	bne.n	12872 <bt_att_init+0xe>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   12884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_init();
   12888:	f000 beb0 	b.w	135ec <bt_gatt_init>
   1288c:	20008eb8 	.word	0x20008eb8
   12890:	2000a848 	.word	0x2000a848

00012894 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   12894:	2300      	movs	r3, #0
{
   12896:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12898:	4605      	mov	r5, r0
   1289a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1289c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1289e:	f014 feb7 	bl	27610 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   128a2:	4b0b      	ldr	r3, [pc, #44]	; (128d0 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   128a4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   128a6:	681b      	ldr	r3, [r3, #0]
   128a8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   128aa:	bf04      	itt	eq
   128ac:	2500      	moveq	r5, #0
   128ae:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   128b0:	462a      	mov	r2, r5
   128b2:	4623      	mov	r3, r4
   128b4:	4807      	ldr	r0, [pc, #28]	; (128d4 <bt_att_req_alloc+0x40>)
   128b6:	f012 fe11 	bl	254dc <k_mem_slab_alloc>
   128ba:	4601      	mov	r1, r0
   128bc:	b930      	cbnz	r0, 128cc <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   128be:	2210      	movs	r2, #16
   128c0:	9801      	ldr	r0, [sp, #4]
   128c2:	f017 fe35 	bl	2a530 <memset>

	return req;
   128c6:	9801      	ldr	r0, [sp, #4]
}
   128c8:	b003      	add	sp, #12
   128ca:	bd30      	pop	{r4, r5, pc}
		return NULL;
   128cc:	2000      	movs	r0, #0
   128ce:	e7fb      	b.n	128c8 <bt_att_req_alloc+0x34>
   128d0:	2000a8e8 	.word	0x2000a8e8
   128d4:	20008dec 	.word	0x20008dec

000128d8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   128d8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   128da:	6883      	ldr	r3, [r0, #8]
{
   128dc:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   128de:	b14b      	cbz	r3, 128f4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   128e0:	6998      	ldr	r0, [r3, #24]
   128e2:	f7ff f9df 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   128e6:	9b01      	ldr	r3, [sp, #4]
   128e8:	6898      	ldr	r0, [r3, #8]
   128ea:	f00d fbf7 	bl	200dc <net_buf_unref>
		req->buf = NULL;
   128ee:	2200      	movs	r2, #0
   128f0:	9b01      	ldr	r3, [sp, #4]
   128f2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   128f4:	4803      	ldr	r0, [pc, #12]	; (12904 <bt_att_req_free+0x2c>)
   128f6:	a901      	add	r1, sp, #4
   128f8:	f012 fe48 	bl	2558c <k_mem_slab_free>
}
   128fc:	b003      	add	sp, #12
   128fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12902:	bf00      	nop
   12904:	20008dec 	.word	0x20008dec

00012908 <att_handle_rsp>:
{
   12908:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1290c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1290e:	30c0      	adds	r0, #192	; 0xc0
{
   12910:	460e      	mov	r6, r1
   12912:	4617      	mov	r7, r2
   12914:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   12916:	f013 feb5 	bl	26684 <k_work_cancel_delayable>
	if (!chan->req) {
   1291a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1291e:	b930      	cbnz	r0, 1292e <att_handle_rsp+0x26>
	att_req_send_process(chan->att);
   12920:	6820      	ldr	r0, [r4, #0]
   12922:	f018 ff28 	bl	2b776 <att_req_send_process>
}
   12926:	2000      	movs	r0, #0
   12928:	b002      	add	sp, #8
   1292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1292e:	4b11      	ldr	r3, [pc, #68]	; (12974 <att_handle_rsp+0x6c>)
   12930:	f04f 0800 	mov.w	r8, #0
   12934:	4298      	cmp	r0, r3
   12936:	d102      	bne.n	1293e <att_handle_rsp+0x36>
		chan->req = NULL;
   12938:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   1293c:	e7f0      	b.n	12920 <att_handle_rsp+0x18>
	func = chan->req->func;
   1293e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   12942:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   12946:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1294a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1294e:	f7ff ffc3 	bl	128d8 <bt_att_req_free>
	att_req_send_process(chan->att);
   12952:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   12954:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   12958:	f018 ff0d 	bl	2b776 <att_req_send_process>
	if (func) {
   1295c:	f1b9 0f00 	cmp.w	r9, #0
   12960:	d0e1      	beq.n	12926 <att_handle_rsp+0x1e>
		func(chan->att->conn, err, pdu, len, params);
   12962:	6820      	ldr	r0, [r4, #0]
   12964:	f8cd a000 	str.w	sl, [sp]
   12968:	463b      	mov	r3, r7
   1296a:	4632      	mov	r2, r6
   1296c:	4629      	mov	r1, r5
   1296e:	6800      	ldr	r0, [r0, #0]
   12970:	47c8      	blx	r9
   12972:	e7d8      	b.n	12926 <att_handle_rsp+0x1e>
   12974:	2000a8ec 	.word	0x2000a8ec

00012978 <bt_att_disconnected>:
{
   12978:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1297c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   12980:	4604      	mov	r4, r0
	if (!att_chan->att) {
   12982:	2e00      	cmp	r6, #0
   12984:	d056      	beq.n	12a34 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   12986:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   1298a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1298e:	f018 fdfa 	bl	2b586 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   12992:	1f27      	subs	r7, r4, #4
   12994:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   12998:	2200      	movs	r2, #0
   1299a:	2300      	movs	r3, #0
   1299c:	4640      	mov	r0, r8
   1299e:	f01b fa43 	bl	2de28 <net_buf_get>
   129a2:	4605      	mov	r5, r0
   129a4:	bb28      	cbnz	r0, 129f2 <bt_att_disconnected+0x7a>
	if (chan->req) {
   129a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   129aa:	b12b      	cbz	r3, 129b8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   129ac:	4602      	mov	r2, r0
   129ae:	4601      	mov	r1, r0
   129b0:	230e      	movs	r3, #14
   129b2:	4638      	mov	r0, r7
   129b4:	f7ff ffa8 	bl	12908 <att_handle_rsp>
	chan->att = NULL;
   129b8:	2300      	movs	r3, #0
   129ba:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   129be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   129c0:	2b00      	cmp	r3, #0
   129c2:	d137      	bne.n	12a34 <bt_att_disconnected+0xbc>
	att_reset(att);
   129c4:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   129c6:	9803      	ldr	r0, [sp, #12]
   129c8:	2200      	movs	r2, #0
   129ca:	2300      	movs	r3, #0
   129cc:	300c      	adds	r0, #12
   129ce:	f01b fa2b 	bl	2de28 <net_buf_get>
   129d2:	4605      	mov	r5, r0
   129d4:	b9a0      	cbnz	r0, 12a00 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   129d6:	9803      	ldr	r0, [sp, #12]
	return list->head;
   129d8:	6845      	ldr	r5, [r0, #4]
   129da:	b9c5      	cbnz	r5, 12a0e <bt_att_disconnected+0x96>
	att->conn = NULL;
   129dc:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   129de:	a903      	add	r1, sp, #12
   129e0:	4816      	ldr	r0, [pc, #88]	; (12a3c <bt_att_disconnected+0xc4>)
   129e2:	f012 fdd3 	bl	2558c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   129e6:	6820      	ldr	r0, [r4, #0]
}
   129e8:	b004      	add	sp, #16
   129ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   129ee:	f001 bddd 	b.w	145ac <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   129f2:	69a8      	ldr	r0, [r5, #24]
   129f4:	f7ff f956 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(buf);
   129f8:	4628      	mov	r0, r5
   129fa:	f00d fb6f 	bl	200dc <net_buf_unref>
   129fe:	e7cb      	b.n	12998 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12a00:	69a8      	ldr	r0, [r5, #24]
   12a02:	f7ff f94f 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(buf);
   12a06:	4628      	mov	r0, r5
   12a08:	f00d fb68 	bl	200dc <net_buf_unref>
   12a0c:	e7db      	b.n	129c6 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a0e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   12a10:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a12:	4295      	cmp	r5, r2
	list->head = node;
   12a14:	6043      	str	r3, [r0, #4]
	list->tail = node;
   12a16:	bf08      	it	eq
   12a18:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   12a1a:	686e      	ldr	r6, [r5, #4]
   12a1c:	b136      	cbz	r6, 12a2c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12a1e:	68eb      	ldr	r3, [r5, #12]
   12a20:	210e      	movs	r1, #14
   12a22:	9300      	str	r3, [sp, #0]
   12a24:	2300      	movs	r3, #0
   12a26:	6800      	ldr	r0, [r0, #0]
   12a28:	461a      	mov	r2, r3
   12a2a:	47b0      	blx	r6
		bt_att_req_free(req);
   12a2c:	4628      	mov	r0, r5
   12a2e:	f7ff ff53 	bl	128d8 <bt_att_req_free>
   12a32:	e7d0      	b.n	129d6 <bt_att_disconnected+0x5e>
}
   12a34:	b004      	add	sp, #16
   12a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a3a:	bf00      	nop
   12a3c:	20008d8c 	.word	0x20008d8c

00012a40 <att_timeout>:
{
   12a40:	b510      	push	{r4, lr}
   12a42:	4604      	mov	r4, r0
   12a44:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   12a46:	4b09      	ldr	r3, [pc, #36]	; (12a6c <att_timeout+0x2c>)
   12a48:	9305      	str	r3, [sp, #20]
   12a4a:	2302      	movs	r3, #2
   12a4c:	9304      	str	r3, [sp, #16]
   12a4e:	2300      	movs	r3, #0
   12a50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a54:	4806      	ldr	r0, [pc, #24]	; (12a70 <att_timeout+0x30>)
   12a56:	aa04      	add	r2, sp, #16
   12a58:	f7f8 f880 	bl	ab5c <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   12a5c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   12a60:	b006      	add	sp, #24
   12a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   12a66:	f7ff bf87 	b.w	12978 <bt_att_disconnected>
   12a6a:	bf00      	nop
   12a6c:	0003242b 	.word	0x0003242b
   12a70:	0002fc14 	.word	0x0002fc14

00012a74 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   12a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a76:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   12a78:	b950      	cbnz	r0, 12a90 <bt_att_send+0x1c>
   12a7a:	4928      	ldr	r1, [pc, #160]	; (12b1c <bt_att_send+0xa8>)
   12a7c:	f640 62a4 	movw	r2, #3748	; 0xea4
   12a80:	4827      	ldr	r0, [pc, #156]	; (12b20 <bt_att_send+0xac>)
   12a82:	f016 f89f 	bl	28bc4 <assert_print>
   12a86:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   12a8a:	4824      	ldr	r0, [pc, #144]	; (12b1c <bt_att_send+0xa8>)
   12a8c:	f016 f893 	bl	28bb6 <assert_post_action>
   12a90:	b941      	cbnz	r1, 12aa4 <bt_att_send+0x30>
   12a92:	4922      	ldr	r1, [pc, #136]	; (12b1c <bt_att_send+0xa8>)
   12a94:	f640 62a5 	movw	r2, #3749	; 0xea5
   12a98:	4821      	ldr	r0, [pc, #132]	; (12b20 <bt_att_send+0xac>)
   12a9a:	f016 f893 	bl	28bc4 <assert_print>
   12a9e:	f640 61a5 	movw	r1, #3749	; 0xea5
   12aa2:	e7f2      	b.n	12a8a <bt_att_send+0x16>

	att = att_get(conn);
   12aa4:	f7ff f98e 	bl	11dc4 <att_get>
	if (!att) {
   12aa8:	4605      	mov	r5, r0
   12aaa:	b940      	cbnz	r0, 12abe <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   12aac:	69a0      	ldr	r0, [r4, #24]
   12aae:	f7ff f8f9 	bl	11ca4 <tx_meta_data_free>
		net_buf_unref(buf);
   12ab2:	4620      	mov	r0, r4
   12ab4:	f00d fb12 	bl	200dc <net_buf_unref>
		return -ENOTCONN;
   12ab8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   12abe:	f100 060c 	add.w	r6, r0, #12
   12ac2:	4621      	mov	r1, r4
   12ac4:	4630      	mov	r0, r6
   12ac6:	f00d fae9 	bl	2009c <net_buf_put>
	return list->head;
   12aca:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12acc:	b14d      	cbz	r5, 12ae2 <bt_att_send+0x6e>
	return node->next;
   12ace:	f855 49f0 	ldr.w	r4, [r5], #-240
   12ad2:	b104      	cbz	r4, 12ad6 <bt_att_send+0x62>
   12ad4:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   12ad6:	4631      	mov	r1, r6
   12ad8:	4628      	mov	r0, r5
   12ada:	f018 fd9a 	bl	2b612 <process_queue>
		if (!err) {
   12ade:	4603      	mov	r3, r0
   12ae0:	b980      	cbnz	r0, 12b04 <bt_att_send+0x90>
	return 0;
   12ae2:	2000      	movs	r0, #0
   12ae4:	e7ea      	b.n	12abc <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   12ae6:	2103      	movs	r1, #3
   12ae8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12aec:	f018 fb5b 	bl	2b1a6 <atomic_test_bit>
   12af0:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   12af2:	f105 0098 	add.w	r0, r5, #152	; 0x98
   12af6:	f018 fb56 	bl	2b1a6 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   12afa:	4287      	cmp	r7, r0
   12afc:	f06f 0301 	mvn.w	r3, #1
   12b00:	d107      	bne.n	12b12 <bt_att_send+0x9e>
   12b02:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b04:	2c00      	cmp	r4, #0
   12b06:	d0ec      	beq.n	12ae2 <bt_att_send+0x6e>
   12b08:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   12b0c:	b922      	cbnz	r2, 12b18 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   12b0e:	3302      	adds	r3, #2
   12b10:	d0e9      	beq.n	12ae6 <bt_att_send+0x72>
{
   12b12:	4625      	mov	r5, r4
   12b14:	4614      	mov	r4, r2
   12b16:	e7de      	b.n	12ad6 <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12b18:	3af0      	subs	r2, #240	; 0xf0
   12b1a:	e7f8      	b.n	12b0e <bt_att_send+0x9a>
   12b1c:	0003236f 	.word	0x0003236f
   12b20:	00030da5 	.word	0x00030da5

00012b24 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   12b24:	b510      	push	{r4, lr}
   12b26:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12b28:	b950      	cbnz	r0, 12b40 <bt_att_req_send+0x1c>
   12b2a:	4914      	ldr	r1, [pc, #80]	; (12b7c <bt_att_req_send+0x58>)
   12b2c:	f640 62ba 	movw	r2, #3770	; 0xeba
   12b30:	4813      	ldr	r0, [pc, #76]	; (12b80 <bt_att_req_send+0x5c>)
   12b32:	f016 f847 	bl	28bc4 <assert_print>
   12b36:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   12b3a:	4810      	ldr	r0, [pc, #64]	; (12b7c <bt_att_req_send+0x58>)
   12b3c:	f016 f83b 	bl	28bb6 <assert_post_action>
   12b40:	b941      	cbnz	r1, 12b54 <bt_att_req_send+0x30>
   12b42:	490e      	ldr	r1, [pc, #56]	; (12b7c <bt_att_req_send+0x58>)
   12b44:	f640 62bb 	movw	r2, #3771	; 0xebb
   12b48:	480d      	ldr	r0, [pc, #52]	; (12b80 <bt_att_req_send+0x5c>)
   12b4a:	f016 f83b 	bl	28bc4 <assert_print>
   12b4e:	f640 61bb 	movw	r1, #3771	; 0xebb
   12b52:	e7f2      	b.n	12b3a <bt_att_req_send+0x16>

	att = att_get(conn);
   12b54:	f7ff f936 	bl	11dc4 <att_get>
	if (!att) {
   12b58:	b160      	cbz	r0, 12b74 <bt_att_req_send+0x50>
	parent->next = child;
   12b5a:	2300      	movs	r3, #0
   12b5c:	6023      	str	r3, [r4, #0]
	return list->tail;
   12b5e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12b60:	b92b      	cbnz	r3, 12b6e <bt_att_req_send+0x4a>
	list->head = node;
   12b62:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   12b66:	f018 fe06 	bl	2b776 <att_req_send_process>

	return 0;
   12b6a:	2000      	movs	r0, #0
}
   12b6c:	bd10      	pop	{r4, pc}
	parent->next = child;
   12b6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12b70:	6084      	str	r4, [r0, #8]
}
   12b72:	e7f8      	b.n	12b66 <bt_att_req_send+0x42>
		return -ENOTCONN;
   12b74:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   12b78:	e7f8      	b.n	12b6c <bt_att_req_send+0x48>
   12b7a:	bf00      	nop
   12b7c:	0003236f 	.word	0x0003236f
   12b80:	00030da5 	.word	0x00030da5

00012b84 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   12b84:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   12b86:	b930      	cbnz	r0, 12b96 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   12b88:	4907      	ldr	r1, [pc, #28]	; (12ba8 <find_cf_cfg+0x24>)
   12b8a:	4808      	ldr	r0, [pc, #32]	; (12bac <find_cf_cfg+0x28>)
   12b8c:	f019 f829 	bl	2bbe2 <bt_addr_le_eq>
   12b90:	b138      	cbz	r0, 12ba2 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12b92:	4807      	ldr	r0, [pc, #28]	; (12bb0 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   12b94:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12b96:	4a05      	ldr	r2, [pc, #20]	; (12bac <find_cf_cfg+0x28>)
   12b98:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   12b9c:	f018 fa1c 	bl	2afd8 <bt_conn_is_peer_addr_le>
   12ba0:	e7f6      	b.n	12b90 <find_cf_cfg+0xc>
	return NULL;
   12ba2:	2000      	movs	r0, #0
   12ba4:	e7f6      	b.n	12b94 <find_cf_cfg+0x10>
   12ba6:	bf00      	nop
   12ba8:	00031ac5 	.word	0x00031ac5
   12bac:	2000a915 	.word	0x2000a915
   12bb0:	2000a914 	.word	0x2000a914

00012bb4 <find_sc_cfg>:
{
   12bb4:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   12bb6:	4c06      	ldr	r4, [pc, #24]	; (12bd0 <find_sc_cfg+0x1c>)
   12bb8:	7823      	ldrb	r3, [r4, #0]
   12bba:	4283      	cmp	r3, r0
   12bbc:	d103      	bne.n	12bc6 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   12bbe:	1c60      	adds	r0, r4, #1
   12bc0:	f019 f80f 	bl	2bbe2 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   12bc4:	b908      	cbnz	r0, 12bca <find_sc_cfg+0x16>
	return NULL;
   12bc6:	2000      	movs	r0, #0
}
   12bc8:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   12bca:	4620      	mov	r0, r4
   12bcc:	e7fc      	b.n	12bc8 <find_sc_cfg+0x14>
   12bce:	bf00      	nop
   12bd0:	2000b128 	.word	0x2000b128

00012bd4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   12bd4:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   12bd6:	1c4a      	adds	r2, r1, #1
{
   12bd8:	460c      	mov	r4, r1
		if (conn) {
   12bda:	b138      	cbz	r0, 12bec <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   12bdc:	7809      	ldrb	r1, [r1, #0]
   12bde:	f018 f9fb 	bl	2afd8 <bt_conn_is_peer_addr_le>
   12be2:	b108      	cbz	r0, 12be8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   12be4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   12be6:	bd10      	pop	{r4, pc}
	return NULL;
   12be8:	2000      	movs	r0, #0
   12bea:	e7fc      	b.n	12be6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   12bec:	4610      	mov	r0, r2
   12bee:	4902      	ldr	r1, [pc, #8]	; (12bf8 <find_ccc_cfg+0x24>)
   12bf0:	f018 fff7 	bl	2bbe2 <bt_addr_le_eq>
   12bf4:	e7f5      	b.n	12be2 <find_ccc_cfg+0xe>
   12bf6:	bf00      	nop
   12bf8:	00031ac5 	.word	0x00031ac5

00012bfc <ccc_load>:
	clear_ccc_cfg(cfg);
}

static uint8_t ccc_load(const struct bt_gatt_attr *attr, uint16_t handle,
			void *user_data)
{
   12bfc:	b570      	push	{r4, r5, r6, lr}
	struct ccc_load *load = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12bfe:	4b20      	ldr	r3, [pc, #128]	; (12c80 <ccc_load+0x84>)
{
   12c00:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c02:	6882      	ldr	r2, [r0, #8]
   12c04:	429a      	cmp	r2, r3
   12c06:	d10f      	bne.n	12c28 <ccc_load+0x2c>
	}

	ccc = attr->user_data;

	/* Clear if value was invalidated */
	if (!load->entry) {
   12c08:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   12c0a:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   12c0c:	b975      	cbnz	r5, 12c2c <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   12c0e:	7922      	ldrb	r2, [r4, #4]
   12c10:	6821      	ldr	r1, [r4, #0]
   12c12:	4630      	mov	r0, r6
   12c14:	f018 ffed 	bl	2bbf2 <ccc_find_cfg>
	if (!cfg) {
   12c18:	4604      	mov	r4, r0
   12c1a:	b128      	cbz	r0, 12c28 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   12c1c:	4919      	ldr	r1, [pc, #100]	; (12c84 <ccc_load+0x88>)
   12c1e:	3001      	adds	r0, #1
   12c20:	f019 f802 	bl	2bc28 <bt_addr_le_copy>
	cfg->id = 0U;
   12c24:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   12c26:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   12c28:	2001      	movs	r0, #1
next:
	load->entry++;
	load->count--;

	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
   12c2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   12c2c:	68e0      	ldr	r0, [r4, #12]
   12c2e:	2800      	cmp	r0, #0
   12c30:	d0fb      	beq.n	12c2a <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   12c32:	882b      	ldrh	r3, [r5, #0]
   12c34:	428b      	cmp	r3, r1
   12c36:	d00a      	beq.n	12c4e <ccc_load+0x52>
		if (load->entry->handle < handle) {
   12c38:	d2f6      	bcs.n	12c28 <ccc_load+0x2c>
	load->count--;
   12c3a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   12c3c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   12c3e:	3801      	subs	r0, #1
	load->entry++;
   12c40:	3304      	adds	r3, #4
	load->count--;
   12c42:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12c44:	3800      	subs	r0, #0
   12c46:	bf18      	it	ne
   12c48:	2001      	movne	r0, #1
	load->entry++;
   12c4a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12c4c:	e7ed      	b.n	12c2a <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   12c4e:	4630      	mov	r0, r6
   12c50:	7922      	ldrb	r2, [r4, #4]
   12c52:	6821      	ldr	r1, [r4, #0]
   12c54:	f018 ffcd 	bl	2bbf2 <ccc_find_cfg>
	if (!cfg) {
   12c58:	4605      	mov	r5, r0
   12c5a:	b968      	cbnz	r0, 12c78 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   12c5c:	4602      	mov	r2, r0
   12c5e:	4909      	ldr	r1, [pc, #36]	; (12c84 <ccc_load+0x88>)
   12c60:	4630      	mov	r0, r6
   12c62:	f018 ffc6 	bl	2bbf2 <ccc_find_cfg>
		if (!cfg) {
   12c66:	4605      	mov	r5, r0
   12c68:	2800      	cmp	r0, #0
   12c6a:	d0e6      	beq.n	12c3a <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   12c6c:	6821      	ldr	r1, [r4, #0]
   12c6e:	3001      	adds	r0, #1
   12c70:	f018 ffda 	bl	2bc28 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   12c74:	7923      	ldrb	r3, [r4, #4]
   12c76:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   12c78:	68a3      	ldr	r3, [r4, #8]
   12c7a:	885b      	ldrh	r3, [r3, #2]
   12c7c:	812b      	strh	r3, [r5, #8]
   12c7e:	e7dc      	b.n	12c3a <ccc_load+0x3e>
   12c80:	00013449 	.word	0x00013449
   12c84:	00031ac5 	.word	0x00031ac5

00012c88 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12c88:	2201      	movs	r2, #1
{
   12c8a:	b510      	push	{r4, lr}
   12c8c:	4b13      	ldr	r3, [pc, #76]	; (12cdc <bt_gatt_service_init+0x54>)
   12c8e:	e8d3 1fef 	ldaex	r1, [r3]
   12c92:	2900      	cmp	r1, #0
   12c94:	d103      	bne.n	12c9e <bt_gatt_service_init+0x16>
   12c96:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12c9a:	2800      	cmp	r0, #0
   12c9c:	d1f7      	bne.n	12c8e <bt_gatt_service_init+0x6>
	if (!atomic_cas(&service_init, 0, 1)) {
   12c9e:	d11c      	bne.n	12cda <bt_gatt_service_init+0x52>
   12ca0:	2000      	movs	r0, #0
   12ca2:	490f      	ldr	r1, [pc, #60]	; (12ce0 <bt_gatt_service_init+0x58>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12ca4:	4a0f      	ldr	r2, [pc, #60]	; (12ce4 <bt_gatt_service_init+0x5c>)
   12ca6:	880b      	ldrh	r3, [r1, #0]
   12ca8:	4c0f      	ldr	r4, [pc, #60]	; (12ce8 <bt_gatt_service_init+0x60>)
   12caa:	42a2      	cmp	r2, r4
   12cac:	d912      	bls.n	12cd4 <bt_gatt_service_init+0x4c>
   12cae:	b100      	cbz	r0, 12cb2 <bt_gatt_service_init+0x2a>
   12cb0:	800b      	strh	r3, [r1, #0]
   12cb2:	490e      	ldr	r1, [pc, #56]	; (12cec <bt_gatt_service_init+0x64>)
   12cb4:	480e      	ldr	r0, [pc, #56]	; (12cf0 <bt_gatt_service_init+0x68>)
   12cb6:	f44f 62a1 	mov.w	r2, #1288	; 0x508
   12cba:	f015 ff83 	bl	28bc4 <assert_print>
   12cbe:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   12cc2:	480a      	ldr	r0, [pc, #40]	; (12cec <bt_gatt_service_init+0x64>)
   12cc4:	f015 ff77 	bl	28bb6 <assert_post_action>
		last_static_handle += svc->attr_count;
   12cc8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12cca:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   12ccc:	4403      	add	r3, r0
   12cce:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12cd0:	2001      	movs	r0, #1
   12cd2:	e7ea      	b.n	12caa <bt_gatt_service_init+0x22>
   12cd4:	d3f8      	bcc.n	12cc8 <bt_gatt_service_init+0x40>
   12cd6:	b100      	cbz	r0, 12cda <bt_gatt_service_init+0x52>
   12cd8:	800b      	strh	r3, [r1, #0]
}
   12cda:	bd10      	pop	{r4, pc}
   12cdc:	2000a924 	.word	0x2000a924
   12ce0:	2000b134 	.word	0x2000b134
   12ce4:	0002fbc8 	.word	0x0002fbc8
   12ce8:	0002fbd8 	.word	0x0002fbd8
   12cec:	0003243e 	.word	0x0003243e
   12cf0:	00030da5 	.word	0x00030da5

00012cf4 <gatt_ccc_conn_enqueue>:
{
   12cf4:	b570      	push	{r4, r5, r6, lr}
   12cf6:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   12cf8:	f7fe fb02 	bl	11300 <bt_conn_index>
   12cfc:	4d0e      	ldr	r5, [pc, #56]	; (12d38 <gatt_ccc_conn_enqueue+0x44>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   12cfe:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   12d02:	429c      	cmp	r4, r3
   12d04:	d017      	beq.n	12d36 <gatt_ccc_conn_enqueue+0x42>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12d06:	7a20      	ldrb	r0, [r4, #8]
   12d08:	f104 0190 	add.w	r1, r4, #144	; 0x90
   12d0c:	f017 fecb 	bl	2aaa6 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   12d10:	b188      	cbz	r0, 12d36 <gatt_ccc_conn_enqueue+0x42>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   12d12:	4620      	mov	r0, r4
   12d14:	f7fe faf4 	bl	11300 <bt_conn_index>
   12d18:	4606      	mov	r6, r0
			bt_conn_ref(conn);
   12d1a:	4620      	mov	r0, r4
   12d1c:	f7fe f9ea 	bl	110f4 <bt_conn_ref>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   12d20:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   12d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12d28:	f105 0008 	add.w	r0, r5, #8
   12d2c:	2300      	movs	r3, #0
}
   12d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   12d32:	f013 bca1 	b.w	26678 <k_work_reschedule>
}
   12d36:	bd70      	pop	{r4, r5, r6, pc}
   12d38:	20009d90 	.word	0x20009d90

00012d3c <ccc_set_direct.part.0>:
	return ccc_set(name, len_rd, read_cb, cb_arg);
}

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set_cb, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   12d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

		LOG_DBG("key: %s", (const char *)param);

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
			LOG_ERR("Invalid key");
   12d3e:	4b07      	ldr	r3, [pc, #28]	; (12d5c <ccc_set_direct.part.0+0x20>)
   12d40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12d44:	9305      	str	r3, [sp, #20]
   12d46:	2302      	movs	r3, #2
   12d48:	4805      	ldr	r0, [pc, #20]	; (12d60 <ccc_set_direct.part.0+0x24>)
   12d4a:	aa04      	add	r2, sp, #16
   12d4c:	9304      	str	r3, [sp, #16]
   12d4e:	f018 ffe3 	bl	2bd18 <z_log_msg_static_create.constprop.0>
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
   12d52:	f06f 0015 	mvn.w	r0, #21
   12d56:	b007      	add	sp, #28
   12d58:	f85d fb04 	ldr.w	pc, [sp], #4
   12d5c:	0003246e 	.word	0x0003246e
   12d60:	0002fc2c 	.word	0x0002fc2c

00012d64 <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   12d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d68:	b08b      	sub	sp, #44	; 0x2c
   12d6a:	460e      	mov	r6, r1
   12d6c:	4690      	mov	r8, r2
   12d6e:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   12d70:	4604      	mov	r4, r0
{
   12d72:	af00      	add	r7, sp, #0
	if (!name) {
   12d74:	b988      	cbnz	r0, 12d9a <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   12d76:	4b44      	ldr	r3, [pc, #272]	; (12e88 <sc_set+0x124>)
   12d78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12d7c:	627b      	str	r3, [r7, #36]	; 0x24
   12d7e:	2302      	movs	r3, #2
   12d80:	4842      	ldr	r0, [pc, #264]	; (12e8c <sc_set+0x128>)
   12d82:	623b      	str	r3, [r7, #32]
   12d84:	f107 0220 	add.w	r2, r7, #32
   12d88:	f018 ffc6 	bl	2bd18 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   12d8c:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   12d90:	4628      	mov	r0, r5
   12d92:	372c      	adds	r7, #44	; 0x2c
   12d94:	46bd      	mov	sp, r7
   12d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   12d9a:	f107 0108 	add.w	r1, r7, #8
   12d9e:	f017 fbd3 	bl	2a548 <bt_settings_decode_key>
	if (err) {
   12da2:	4605      	mov	r5, r0
   12da4:	b190      	cbz	r0, 12dcc <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   12da6:	466d      	mov	r5, sp
   12da8:	b088      	sub	sp, #32
   12daa:	466a      	mov	r2, sp
   12dac:	4b38      	ldr	r3, [pc, #224]	; (12e90 <sc_set+0x12c>)
   12dae:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12db2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12db6:	f44f 7300 	mov.w	r3, #512	; 0x200
   12dba:	8393      	strh	r3, [r2, #28]
   12dbc:	4b35      	ldr	r3, [pc, #212]	; (12e94 <sc_set+0x130>)
   12dbe:	4833      	ldr	r0, [pc, #204]	; (12e8c <sc_set+0x128>)
   12dc0:	f842 3f10 	str.w	r3, [r2, #16]!
   12dc4:	f018 ffa8 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   12dc8:	46ad      	mov	sp, r5
		return -EINVAL;
   12dca:	e7df      	b.n	12d8c <sc_set+0x28>
	settings_name_next(name, &next);
   12dcc:	4620      	mov	r0, r4
   12dce:	1d39      	adds	r1, r7, #4
   12dd0:	f016 fce8 	bl	297a4 <settings_name_next>
	if (!next) {
   12dd4:	6878      	ldr	r0, [r7, #4]
   12dd6:	b1a0      	cbz	r0, 12e02 <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   12dd8:	220a      	movs	r2, #10
   12dda:	4629      	mov	r1, r5
   12ddc:	f017 fab2 	bl	2a344 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   12de0:	b178      	cbz	r0, 12e02 <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   12de2:	466c      	mov	r4, sp
   12de4:	b088      	sub	sp, #32
   12de6:	466a      	mov	r2, sp
   12de8:	4b2b      	ldr	r3, [pc, #172]	; (12e98 <sc_set+0x134>)
   12dea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12dee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12df2:	2303      	movs	r3, #3
   12df4:	4825      	ldr	r0, [pc, #148]	; (12e8c <sc_set+0x128>)
   12df6:	f842 3f10 	str.w	r3, [r2, #16]!
   12dfa:	f018 ff8d 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   12dfe:	46a5      	mov	sp, r4
			return -EINVAL;
   12e00:	e7c4      	b.n	12d8c <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   12e02:	2000      	movs	r0, #0
   12e04:	f107 0108 	add.w	r1, r7, #8
   12e08:	f7ff fed4 	bl	12bb4 <find_sc_cfg>
	if (!cfg && len_rd) {
   12e0c:	4604      	mov	r4, r0
   12e0e:	bb98      	cbnz	r0, 12e78 <sc_set+0x114>
   12e10:	2e00      	cmp	r6, #0
   12e12:	d0bd      	beq.n	12d90 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12e14:	4921      	ldr	r1, [pc, #132]	; (12e9c <sc_set+0x138>)
   12e16:	f7ff fecd 	bl	12bb4 <find_sc_cfg>
		if (!cfg) {
   12e1a:	4604      	mov	r4, r0
   12e1c:	b968      	cbnz	r0, 12e3a <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   12e1e:	4b20      	ldr	r3, [pc, #128]	; (12ea0 <sc_set+0x13c>)
   12e20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e24:	627b      	str	r3, [r7, #36]	; 0x24
   12e26:	2302      	movs	r3, #2
   12e28:	4818      	ldr	r0, [pc, #96]	; (12e8c <sc_set+0x128>)
   12e2a:	623b      	str	r3, [r7, #32]
   12e2c:	f107 0220 	add.w	r2, r7, #32
   12e30:	f018 ff72 	bl	2bd18 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   12e34:	f06f 050b 	mvn.w	r5, #11
   12e38:	e7aa      	b.n	12d90 <sc_set+0x2c>
		cfg->id = id;
   12e3a:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   12e3c:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   12e40:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12e44:	f018 fef0 	bl	2bc28 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   12e48:	f104 0108 	add.w	r1, r4, #8
   12e4c:	2204      	movs	r2, #4
   12e4e:	4648      	mov	r0, r9
   12e50:	47c0      	blx	r8
		if (len < 0) {
   12e52:	1e04      	subs	r4, r0, #0
   12e54:	da9c      	bge.n	12d90 <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   12e56:	466d      	mov	r5, sp
   12e58:	b088      	sub	sp, #32
   12e5a:	466a      	mov	r2, sp
   12e5c:	4b11      	ldr	r3, [pc, #68]	; (12ea4 <sc_set+0x140>)
   12e5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e62:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12e66:	2303      	movs	r3, #3
   12e68:	4808      	ldr	r0, [pc, #32]	; (12e8c <sc_set+0x128>)
   12e6a:	f842 3f10 	str.w	r3, [r2, #16]!
   12e6e:	f018 ff53 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   12e72:	46ad      	mov	sp, r5
			return len;
   12e74:	4625      	mov	r5, r4
   12e76:	e78b      	b.n	12d90 <sc_set+0x2c>
	if (len_rd) {
   12e78:	2e00      	cmp	r6, #0
   12e7a:	d1e5      	bne.n	12e48 <sc_set+0xe4>
		memset(cfg, 0, sizeof(*cfg));
   12e7c:	220c      	movs	r2, #12
   12e7e:	4631      	mov	r1, r6
   12e80:	f017 fb56 	bl	2a530 <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   12e84:	e784      	b.n	12d90 <sc_set+0x2c>
   12e86:	bf00      	nop
   12e88:	00031b3e 	.word	0x00031b3e
   12e8c:	0002fc2c 	.word	0x0002fc2c
   12e90:	0003247a 	.word	0x0003247a
   12e94:	01000003 	.word	0x01000003
   12e98:	00032496 	.word	0x00032496
   12e9c:	00031ac5 	.word	0x00031ac5
   12ea0:	000324b1 	.word	0x000324b1
   12ea4:	000324d3 	.word	0x000324d3

00012ea8 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   12ea8:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12eaa:	2108      	movs	r1, #8
   12eac:	af00      	add	r7, sp, #0
   12eae:	480f      	ldr	r0, [pc, #60]	; (12eec <db_hash_commit+0x44>)
   12eb0:	f018 feaf 	bl	2bc12 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   12eb4:	2200      	movs	r2, #0
   12eb6:	2300      	movs	r3, #0
   12eb8:	480d      	ldr	r0, [pc, #52]	; (12ef0 <db_hash_commit+0x48>)
   12eba:	f7fa ff35 	bl	dd28 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   12ebe:	1e04      	subs	r4, r0, #0
   12ec0:	da11      	bge.n	12ee6 <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   12ec2:	466d      	mov	r5, sp
   12ec4:	b088      	sub	sp, #32
   12ec6:	466a      	mov	r2, sp
   12ec8:	4b0a      	ldr	r3, [pc, #40]	; (12ef4 <db_hash_commit+0x4c>)
   12eca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12ece:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12ed2:	2303      	movs	r3, #3
   12ed4:	4808      	ldr	r0, [pc, #32]	; (12ef8 <db_hash_commit+0x50>)
   12ed6:	f842 3f10 	str.w	r3, [r2, #16]!
   12eda:	f018 ff1d 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   12ede:	46ad      	mov	sp, r5
	}

	return err;
}
   12ee0:	4620      	mov	r0, r4
   12ee2:	46bd      	mov	sp, r7
   12ee4:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   12ee6:	2400      	movs	r4, #0
	return err;
   12ee8:	e7fa      	b.n	12ee0 <db_hash_commit+0x38>
   12eea:	bf00      	nop
   12eec:	20009e90 	.word	0x20009e90
   12ef0:	20009de8 	.word	0x20009de8
   12ef4:	000324f4 	.word	0x000324f4
   12ef8:	0002fc2c 	.word	0x0002fc2c

00012efc <sc_store>:
{
   12efc:	b5b0      	push	{r4, r5, r7, lr}
   12efe:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   12f00:	4605      	mov	r5, r0
   12f02:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   12f06:	4604      	mov	r4, r0
   12f08:	af02      	add	r7, sp, #8
	if (cfg->id) {
   12f0a:	b31a      	cbz	r2, 12f54 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12f0c:	2104      	movs	r1, #4
   12f0e:	4638      	mov	r0, r7
   12f10:	f015 fbc0 	bl	28694 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   12f14:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   12f16:	2124      	movs	r1, #36	; 0x24
   12f18:	4a0f      	ldr	r2, [pc, #60]	; (12f58 <sc_store+0x5c>)
   12f1a:	1d38      	adds	r0, r7, #4
   12f1c:	462b      	mov	r3, r5
   12f1e:	f7fa fe49 	bl	dbb4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   12f22:	2204      	movs	r2, #4
   12f24:	f104 0108 	add.w	r1, r4, #8
   12f28:	18b8      	adds	r0, r7, r2
   12f2a:	f7f9 f8d7 	bl	c0dc <settings_save_one>
	if (err) {
   12f2e:	b170      	cbz	r0, 12f4e <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   12f30:	466c      	mov	r4, sp
   12f32:	b088      	sub	sp, #32
   12f34:	aa02      	add	r2, sp, #8
   12f36:	4b09      	ldr	r3, [pc, #36]	; (12f5c <sc_store+0x60>)
   12f38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12f40:	2303      	movs	r3, #3
   12f42:	4807      	ldr	r0, [pc, #28]	; (12f60 <sc_store+0x64>)
   12f44:	f842 3f10 	str.w	r3, [r2, #16]!
   12f48:	f018 fee6 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   12f4c:	46a5      	mov	sp, r4
}
   12f4e:	3728      	adds	r7, #40	; 0x28
   12f50:	46bd      	mov	sp, r7
   12f52:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   12f54:	9200      	str	r2, [sp, #0]
   12f56:	e7de      	b.n	12f16 <sc_store+0x1a>
   12f58:	000326ad 	.word	0x000326ad
   12f5c:	00032528 	.word	0x00032528
   12f60:	0002fc2c 	.word	0x0002fc2c

00012f64 <sc_save>:
{
   12f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f68:	b086      	sub	sp, #24
   12f6a:	4680      	mov	r8, r0
   12f6c:	460f      	mov	r7, r1
   12f6e:	4616      	mov	r6, r2
   12f70:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   12f72:	f7ff fe1f 	bl	12bb4 <find_sc_cfg>
	if (!cfg) {
   12f76:	4604      	mov	r4, r0
   12f78:	b9b0      	cbnz	r0, 12fa8 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12f7a:	4919      	ldr	r1, [pc, #100]	; (12fe0 <sc_save+0x7c>)
   12f7c:	f7ff fe1a 	bl	12bb4 <find_sc_cfg>
		if (!cfg) {
   12f80:	4604      	mov	r4, r0
   12f82:	b960      	cbnz	r0, 12f9e <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   12f84:	4b17      	ldr	r3, [pc, #92]	; (12fe4 <sc_save+0x80>)
   12f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12f8a:	9305      	str	r3, [sp, #20]
   12f8c:	2302      	movs	r3, #2
   12f8e:	4816      	ldr	r0, [pc, #88]	; (12fe8 <sc_save+0x84>)
   12f90:	aa04      	add	r2, sp, #16
   12f92:	9304      	str	r3, [sp, #16]
   12f94:	f018 fec0 	bl	2bd18 <z_log_msg_static_create.constprop.0>
}
   12f98:	b006      	add	sp, #24
   12f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   12f9e:	4639      	mov	r1, r7
		cfg->id = id;
   12fa0:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   12fa4:	f018 fe40 	bl	2bc28 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   12fa8:	8922      	ldrh	r2, [r4, #8]
   12faa:	8963      	ldrh	r3, [r4, #10]
   12fac:	b97a      	cbnz	r2, 12fce <sc_save+0x6a>
   12fae:	b983      	cbnz	r3, 12fd2 <sc_save+0x6e>
		cfg->data.start = start;
   12fb0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   12fb2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   12fb4:	4621      	mov	r1, r4
   12fb6:	f811 0b01 	ldrb.w	r0, [r1], #1
   12fba:	f017 fd74 	bl	2aaa6 <bt_addr_le_is_bonded>
   12fbe:	2800      	cmp	r0, #0
   12fc0:	d0ea      	beq.n	12f98 <sc_save+0x34>
		sc_store(cfg);
   12fc2:	4620      	mov	r0, r4
}
   12fc4:	b006      	add	sp, #24
   12fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   12fca:	f7ff bf97 	b.w	12efc <sc_store>
	if (new_start >= *start && new_end <= *end) {
   12fce:	4296      	cmp	r6, r2
   12fd0:	d302      	bcc.n	12fd8 <sc_save+0x74>
   12fd2:	429d      	cmp	r5, r3
   12fd4:	d8ed      	bhi.n	12fb2 <sc_save+0x4e>
   12fd6:	e7df      	b.n	12f98 <sc_save+0x34>
	if (*end < new_end) {
   12fd8:	429d      	cmp	r5, r3
		*start = new_start;
   12fda:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   12fdc:	d9ea      	bls.n	12fb4 <sc_save+0x50>
   12fde:	e7e8      	b.n	12fb2 <sc_save+0x4e>
   12fe0:	00031ac5 	.word	0x00031ac5
   12fe4:	00032544 	.word	0x00032544
   12fe8:	0002fc2c 	.word	0x0002fc2c

00012fec <db_hash_store>:
{
   12fec:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   12fee:	2210      	movs	r2, #16
{
   12ff0:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   12ff2:	490b      	ldr	r1, [pc, #44]	; (13020 <db_hash_store+0x34>)
   12ff4:	480b      	ldr	r0, [pc, #44]	; (13024 <db_hash_store+0x38>)
   12ff6:	f7f9 f871 	bl	c0dc <settings_save_one>
	if (err) {
   12ffa:	b170      	cbz	r0, 1301a <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   12ffc:	466c      	mov	r4, sp
   12ffe:	b088      	sub	sp, #32
   13000:	466a      	mov	r2, sp
   13002:	4b09      	ldr	r3, [pc, #36]	; (13028 <db_hash_store+0x3c>)
   13004:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13008:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1300c:	2303      	movs	r3, #3
   1300e:	4807      	ldr	r0, [pc, #28]	; (1302c <db_hash_store+0x40>)
   13010:	f842 3f10 	str.w	r3, [r2, #16]!
   13014:	f018 fe80 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13018:	46a5      	mov	sp, r4
}
   1301a:	46bd      	mov	sp, r7
   1301c:	bd98      	pop	{r3, r4, r7, pc}
   1301e:	bf00      	nop
   13020:	20009dc8 	.word	0x20009dc8
   13024:	00032563 	.word	0x00032563
   13028:	0003256b 	.word	0x0003256b
   1302c:	0002fc2c 	.word	0x0002fc2c

00013030 <db_hash_set>:
{
   13030:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   13032:	4618      	mov	r0, r3
{
   13034:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   13036:	490d      	ldr	r1, [pc, #52]	; (1306c <db_hash_set+0x3c>)
   13038:	2210      	movs	r2, #16
{
   1303a:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1303c:	47a0      	blx	r4
	if (len < 0) {
   1303e:	1e04      	subs	r4, r0, #0
   13040:	da11      	bge.n	13066 <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   13042:	466d      	mov	r5, sp
   13044:	b088      	sub	sp, #32
   13046:	466a      	mov	r2, sp
   13048:	4b09      	ldr	r3, [pc, #36]	; (13070 <db_hash_set+0x40>)
   1304a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1304e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13052:	2303      	movs	r3, #3
   13054:	4807      	ldr	r0, [pc, #28]	; (13074 <db_hash_set+0x44>)
   13056:	f842 3f10 	str.w	r3, [r2, #16]!
   1305a:	f018 fe5d 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   1305e:	46ad      	mov	sp, r5
}
   13060:	4620      	mov	r0, r4
   13062:	46bd      	mov	sp, r7
   13064:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   13066:	2400      	movs	r4, #0
   13068:	e7fa      	b.n	13060 <db_hash_set+0x30>
   1306a:	bf00      	nop
   1306c:	20009dd8 	.word	0x20009dd8
   13070:	000324d3 	.word	0x000324d3
   13074:	0002fc2c 	.word	0x0002fc2c

00013078 <clear_cf_cfg>:
{
   13078:	b510      	push	{r4, lr}
   1307a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1307c:	4909      	ldr	r1, [pc, #36]	; (130a4 <clear_cf_cfg+0x2c>)
   1307e:	3001      	adds	r0, #1
   13080:	f018 fdd2 	bl	2bc28 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   13084:	f104 0008 	add.w	r0, r4, #8
   13088:	2201      	movs	r2, #1
   1308a:	2100      	movs	r1, #0
   1308c:	f017 fa50 	bl	2a530 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13090:	2300      	movs	r3, #0
   13092:	340c      	adds	r4, #12
   13094:	e8d4 2fef 	ldaex	r2, [r4]
   13098:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1309c:	2900      	cmp	r1, #0
   1309e:	d1f9      	bne.n	13094 <clear_cf_cfg+0x1c>
}
   130a0:	bd10      	pop	{r4, pc}
   130a2:	bf00      	nop
   130a4:	00031ac5 	.word	0x00031ac5

000130a8 <cf_set>:
{
   130a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   130ac:	b08b      	sub	sp, #44	; 0x2c
   130ae:	460e      	mov	r6, r1
   130b0:	4690      	mov	r8, r2
   130b2:	4699      	mov	r9, r3
	if (!name) {
   130b4:	4604      	mov	r4, r0
{
   130b6:	af00      	add	r7, sp, #0
	if (!name) {
   130b8:	b988      	cbnz	r0, 130de <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   130ba:	4b45      	ldr	r3, [pc, #276]	; (131d0 <cf_set+0x128>)
   130bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   130c0:	627b      	str	r3, [r7, #36]	; 0x24
   130c2:	2302      	movs	r3, #2
   130c4:	4843      	ldr	r0, [pc, #268]	; (131d4 <cf_set+0x12c>)
   130c6:	623b      	str	r3, [r7, #32]
   130c8:	f107 0220 	add.w	r2, r7, #32
   130cc:	f018 fe24 	bl	2bd18 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   130d0:	f06f 0515 	mvn.w	r5, #21
}
   130d4:	4628      	mov	r0, r5
   130d6:	372c      	adds	r7, #44	; 0x2c
   130d8:	46bd      	mov	sp, r7
   130da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   130de:	f107 0108 	add.w	r1, r7, #8
   130e2:	f017 fa31 	bl	2a548 <bt_settings_decode_key>
	if (err) {
   130e6:	4605      	mov	r5, r0
   130e8:	b190      	cbz	r0, 13110 <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   130ea:	466d      	mov	r5, sp
   130ec:	b088      	sub	sp, #32
   130ee:	466a      	mov	r2, sp
   130f0:	4b39      	ldr	r3, [pc, #228]	; (131d8 <cf_set+0x130>)
   130f2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   130f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   130fa:	f44f 7300 	mov.w	r3, #512	; 0x200
   130fe:	8393      	strh	r3, [r2, #28]
   13100:	4b36      	ldr	r3, [pc, #216]	; (131dc <cf_set+0x134>)
   13102:	4834      	ldr	r0, [pc, #208]	; (131d4 <cf_set+0x12c>)
   13104:	f842 3f10 	str.w	r3, [r2, #16]!
   13108:	f018 fe06 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   1310c:	46ad      	mov	sp, r5
		return -EINVAL;
   1310e:	e7df      	b.n	130d0 <cf_set+0x28>
	settings_name_next(name, &next);
   13110:	4620      	mov	r0, r4
   13112:	1d39      	adds	r1, r7, #4
   13114:	f016 fb46 	bl	297a4 <settings_name_next>
	if (!next) {
   13118:	6878      	ldr	r0, [r7, #4]
   1311a:	b9b0      	cbnz	r0, 1314a <cf_set+0xa2>
			if (id == cf_cfg[i].id &&
   1311c:	4c30      	ldr	r4, [pc, #192]	; (131e0 <cf_set+0x138>)
   1311e:	7823      	ldrb	r3, [r4, #0]
   13120:	b34b      	cbz	r3, 13176 <cf_set+0xce>
		cfg = find_cf_cfg(NULL);
   13122:	2000      	movs	r0, #0
   13124:	f7ff fd2e 	bl	12b84 <find_cf_cfg>
		if (!cfg) {
   13128:	4604      	mov	r4, r0
   1312a:	2800      	cmp	r0, #0
   1312c:	d143      	bne.n	131b6 <cf_set+0x10e>
			LOG_ERR("Unable to restore CF: no cfg left");
   1312e:	4b2d      	ldr	r3, [pc, #180]	; (131e4 <cf_set+0x13c>)
   13130:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13134:	627b      	str	r3, [r7, #36]	; 0x24
   13136:	2302      	movs	r3, #2
   13138:	4826      	ldr	r0, [pc, #152]	; (131d4 <cf_set+0x12c>)
   1313a:	623b      	str	r3, [r7, #32]
   1313c:	f107 0220 	add.w	r2, r7, #32
   13140:	f018 fdea 	bl	2bd18 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   13144:	f06f 050b 	mvn.w	r5, #11
   13148:	e7c4      	b.n	130d4 <cf_set+0x2c>
		unsigned long next_id = strtoul(next, NULL, 10);
   1314a:	220a      	movs	r2, #10
   1314c:	4629      	mov	r1, r5
   1314e:	f017 f8f9 	bl	2a344 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   13152:	2800      	cmp	r0, #0
   13154:	d0e2      	beq.n	1311c <cf_set+0x74>
			LOG_ERR("Invalid local identity %lu", next_id);
   13156:	466c      	mov	r4, sp
   13158:	b088      	sub	sp, #32
   1315a:	466a      	mov	r2, sp
   1315c:	4b22      	ldr	r3, [pc, #136]	; (131e8 <cf_set+0x140>)
   1315e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13162:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13166:	2303      	movs	r3, #3
   13168:	481a      	ldr	r0, [pc, #104]	; (131d4 <cf_set+0x12c>)
   1316a:	f842 3f10 	str.w	r3, [r2, #16]!
   1316e:	f018 fdd3 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13172:	46a5      	mov	sp, r4
			return -EINVAL;
   13174:	e7ac      	b.n	130d0 <cf_set+0x28>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   13176:	1c61      	adds	r1, r4, #1
   13178:	f107 0008 	add.w	r0, r7, #8
   1317c:	f018 fd31 	bl	2bbe2 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   13180:	2800      	cmp	r0, #0
   13182:	d0ce      	beq.n	13122 <cf_set+0x7a>
	if (len_rd) {
   13184:	b306      	cbz	r6, 131c8 <cf_set+0x120>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   13186:	f104 0108 	add.w	r1, r4, #8
   1318a:	2201      	movs	r2, #1
   1318c:	4648      	mov	r0, r9
   1318e:	47c0      	blx	r8
		if (len < 0) {
   13190:	1e04      	subs	r4, r0, #0
   13192:	da9f      	bge.n	130d4 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   13194:	466d      	mov	r5, sp
   13196:	b088      	sub	sp, #32
   13198:	466a      	mov	r2, sp
   1319a:	4b14      	ldr	r3, [pc, #80]	; (131ec <cf_set+0x144>)
   1319c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   131a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   131a4:	2303      	movs	r3, #3
   131a6:	480b      	ldr	r0, [pc, #44]	; (131d4 <cf_set+0x12c>)
   131a8:	f842 3f10 	str.w	r3, [r2, #16]!
   131ac:	f018 fdb4 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   131b0:	46ad      	mov	sp, r5
			return len;
   131b2:	4625      	mov	r5, r4
   131b4:	e78e      	b.n	130d4 <cf_set+0x2c>
		cfg->id = id;
   131b6:	4620      	mov	r0, r4
   131b8:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   131ba:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   131be:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   131c2:	f018 fd31 	bl	2bc28 <bt_addr_le_copy>
   131c6:	e7dd      	b.n	13184 <cf_set+0xdc>
		clear_cf_cfg(cfg);
   131c8:	4620      	mov	r0, r4
   131ca:	f7ff ff55 	bl	13078 <clear_cf_cfg>
   131ce:	e781      	b.n	130d4 <cf_set+0x2c>
   131d0:	00031b3e 	.word	0x00031b3e
   131d4:	0002fc2c 	.word	0x0002fc2c
   131d8:	0003247a 	.word	0x0003247a
   131dc:	01000003 	.word	0x01000003
   131e0:	2000a914 	.word	0x2000a914
   131e4:	00032591 	.word	0x00032591
   131e8:	00032496 	.word	0x00032496
   131ec:	000324d3 	.word	0x000324d3

000131f0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   131f0:	b508      	push	{r3, lr}
   131f2:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   131f4:	6881      	ldr	r1, [r0, #8]
   131f6:	4a07      	ldr	r2, [pc, #28]	; (13214 <remove_peer_from_attr+0x24>)
   131f8:	4291      	cmp	r1, r2
   131fa:	d109      	bne.n	13210 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   131fc:	791a      	ldrb	r2, [r3, #4]
   131fe:	6819      	ldr	r1, [r3, #0]
   13200:	68c0      	ldr	r0, [r0, #12]
   13202:	f018 fcf6 	bl	2bbf2 <ccc_find_cfg>
	if (cfg) {
   13206:	b118      	cbz	r0, 13210 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13208:	220a      	movs	r2, #10
   1320a:	2100      	movs	r1, #0
   1320c:	f017 f990 	bl	2a530 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   13210:	2001      	movs	r0, #1
   13212:	bd08      	pop	{r3, pc}
   13214:	00013449 	.word	0x00013449

00013218 <ccc_save>:
{
   13218:	b538      	push	{r3, r4, r5, lr}
   1321a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1321c:	4b0b      	ldr	r3, [pc, #44]	; (1324c <ccc_save+0x34>)
   1321e:	6882      	ldr	r2, [r0, #8]
{
   13220:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   13222:	429a      	cmp	r2, r3
   13224:	d10f      	bne.n	13246 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13226:	7922      	ldrb	r2, [r4, #4]
   13228:	6821      	ldr	r1, [r4, #0]
   1322a:	68c0      	ldr	r0, [r0, #12]
   1322c:	f018 fce1 	bl	2bbf2 <ccc_find_cfg>
	if (!cfg) {
   13230:	b148      	cbz	r0, 13246 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   13232:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   13236:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1323a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1323c:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   1323e:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   13240:	8151      	strh	r1, [r2, #10]
	save->count++;
   13242:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13246:	2001      	movs	r0, #1
   13248:	bd38      	pop	{r3, r4, r5, pc}
   1324a:	bf00      	nop
   1324c:	00013449 	.word	0x00013449

00013250 <db_changed>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13250:	f06f 0104 	mvn.w	r1, #4
{
   13254:	b510      	push	{r4, lr}
   13256:	4814      	ldr	r0, [pc, #80]	; (132a8 <db_changed+0x58>)
   13258:	f018 fd2d 	bl	2bcb6 <atomic_and>
		bt_long_wq_reschedule(&db_hash.work, DB_HASH_TIMEOUT);
   1325c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13260:	2300      	movs	r3, #0
   13262:	4812      	ldr	r0, [pc, #72]	; (132ac <db_changed+0x5c>)
   13264:	f7fa fd60 	bl	dd28 <bt_long_wq_reschedule>
		if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   13268:	4911      	ldr	r1, [pc, #68]	; (132b0 <db_changed+0x60>)
   1326a:	4812      	ldr	r0, [pc, #72]	; (132b4 <db_changed+0x64>)
   1326c:	f018 fcb9 	bl	2bbe2 <bt_addr_le_eq>
   13270:	b9c8      	cbnz	r0, 132a6 <db_changed+0x56>
		if (CF_ROBUST_CACHING(cfg)) {
   13272:	4911      	ldr	r1, [pc, #68]	; (132b8 <db_changed+0x68>)
   13274:	7a0b      	ldrb	r3, [r1, #8]
   13276:	07db      	lsls	r3, r3, #31
   13278:	d515      	bpl.n	132a6 <db_changed+0x56>
			conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, &cfg->peer);
   1327a:	3101      	adds	r1, #1
   1327c:	f7fe f940 	bl	11500 <bt_conn_lookup_addr_le>
			if (conn) {
   13280:	4604      	mov	r4, r0
   13282:	b120      	cbz	r0, 1328e <db_changed+0x3e>
				bt_att_clear_out_of_sync_sent(conn);
   13284:	f018 fc0c 	bl	2baa0 <bt_att_clear_out_of_sync_sent>
				bt_conn_unref(conn);
   13288:	4620      	mov	r0, r4
   1328a:	f7fd ff57 	bl	1113c <bt_conn_unref>
   1328e:	f06f 0102 	mvn.w	r1, #2
   13292:	480a      	ldr	r0, [pc, #40]	; (132bc <db_changed+0x6c>)
   13294:	f018 fd0f 	bl	2bcb6 <atomic_and>
}
   13298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1329c:	f06f 0101 	mvn.w	r1, #1
   132a0:	4806      	ldr	r0, [pc, #24]	; (132bc <db_changed+0x6c>)
   132a2:	f018 bd08 	b.w	2bcb6 <atomic_and>
   132a6:	bd10      	pop	{r4, pc}
   132a8:	20009e90 	.word	0x20009e90
   132ac:	20009de8 	.word	0x20009de8
   132b0:	00031ac5 	.word	0x00031ac5
   132b4:	2000a915 	.word	0x2000a915
   132b8:	2000a914 	.word	0x2000a914
   132bc:	2000a920 	.word	0x2000a920

000132c0 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   132c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   132c4:	2300      	movs	r3, #0
   132c6:	4801      	ldr	r0, [pc, #4]	; (132cc <sc_commit.part.0+0xc>)
   132c8:	f013 b9d6 	b.w	26678 <k_work_reschedule>
   132cc:	20009e60 	.word	0x20009e60

000132d0 <sc_commit>:
{
   132d0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   132d2:	f06f 0102 	mvn.w	r1, #2
   132d6:	4806      	ldr	r0, [pc, #24]	; (132f0 <sc_commit+0x20>)
   132d8:	f018 fced 	bl	2bcb6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   132dc:	4804      	ldr	r0, [pc, #16]	; (132f0 <sc_commit+0x20>)
   132de:	f018 fc95 	bl	2bc0c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   132e2:	07c3      	lsls	r3, r0, #31
   132e4:	d501      	bpl.n	132ea <sc_commit+0x1a>
   132e6:	f7ff ffeb 	bl	132c0 <sc_commit.part.0>
}
   132ea:	2000      	movs	r0, #0
   132ec:	bd08      	pop	{r3, pc}
   132ee:	bf00      	nop
   132f0:	20009e90 	.word	0x20009e90

000132f4 <bt_gatt_clear_sc>:
{
   132f4:	b5b0      	push	{r4, r5, r7, lr}
   132f6:	b08c      	sub	sp, #48	; 0x30
   132f8:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   132fa:	f7ff fc5b 	bl	12bb4 <find_sc_cfg>
	if (!cfg) {
   132fe:	4604      	mov	r4, r0
   13300:	b330      	cbz	r0, 13350 <bt_gatt_clear_sc+0x5c>
		if (cfg->id) {
   13302:	4605      	mov	r5, r0
   13304:	f815 2b01 	ldrb.w	r2, [r5], #1
   13308:	b332      	cbz	r2, 13358 <bt_gatt_clear_sc+0x64>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1330a:	2104      	movs	r1, #4
   1330c:	4638      	mov	r0, r7
   1330e:	f015 f9c1 	bl	28694 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13312:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13314:	1d38      	adds	r0, r7, #4
   13316:	462b      	mov	r3, r5
   13318:	2124      	movs	r1, #36	; 0x24
   1331a:	4a10      	ldr	r2, [pc, #64]	; (1335c <bt_gatt_clear_sc+0x68>)
   1331c:	f7fa fc4a 	bl	dbb4 <bt_settings_encode_key>
		err = settings_delete(key);
   13320:	1d38      	adds	r0, r7, #4
   13322:	f016 fa17 	bl	29754 <settings_delete>
		if (err) {
   13326:	b170      	cbz	r0, 13346 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   13328:	466d      	mov	r5, sp
   1332a:	b088      	sub	sp, #32
   1332c:	aa02      	add	r2, sp, #8
   1332e:	4b0c      	ldr	r3, [pc, #48]	; (13360 <bt_gatt_clear_sc+0x6c>)
   13330:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13334:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13338:	2303      	movs	r3, #3
   1333a:	480a      	ldr	r0, [pc, #40]	; (13364 <bt_gatt_clear_sc+0x70>)
   1333c:	f842 3f10 	str.w	r3, [r2, #16]!
   13340:	f018 fcea 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13344:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   13346:	220c      	movs	r2, #12
   13348:	2100      	movs	r1, #0
   1334a:	4620      	mov	r0, r4
   1334c:	f017 f8f0 	bl	2a530 <memset>
}
   13350:	2000      	movs	r0, #0
   13352:	3728      	adds	r7, #40	; 0x28
   13354:	46bd      	mov	sp, r7
   13356:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13358:	9200      	str	r2, [sp, #0]
   1335a:	e7db      	b.n	13314 <bt_gatt_clear_sc+0x20>
   1335c:	000326ad 	.word	0x000326ad
   13360:	000325b3 	.word	0x000325b3
   13364:	0002fc2c 	.word	0x0002fc2c

00013368 <sc_clear>:
{
   13368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1336a:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1336e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13370:	4631      	mov	r1, r6
   13372:	7a00      	ldrb	r0, [r0, #8]
{
   13374:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13376:	f017 fb96 	bl	2aaa6 <bt_addr_le_is_bonded>
   1337a:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1337c:	4631      	mov	r1, r6
   1337e:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13380:	b19d      	cbz	r5, 133aa <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13382:	f7ff ffb7 	bl	132f4 <bt_gatt_clear_sc>
		if (err) {
   13386:	b170      	cbz	r0, 133a6 <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   13388:	466c      	mov	r4, sp
   1338a:	b088      	sub	sp, #32
   1338c:	466a      	mov	r2, sp
   1338e:	4b0b      	ldr	r3, [pc, #44]	; (133bc <sc_clear+0x54>)
   13390:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13394:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13398:	2303      	movs	r3, #3
   1339a:	4809      	ldr	r0, [pc, #36]	; (133c0 <sc_clear+0x58>)
   1339c:	f842 3f10 	str.w	r3, [r2, #16]!
   133a0:	f018 fcba 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   133a4:	46a5      	mov	sp, r4
}
   133a6:	46bd      	mov	sp, r7
   133a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   133aa:	f7ff fc03 	bl	12bb4 <find_sc_cfg>
		if (cfg) {
   133ae:	2800      	cmp	r0, #0
   133b0:	d0f9      	beq.n	133a6 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   133b2:	220c      	movs	r2, #12
   133b4:	4629      	mov	r1, r5
   133b6:	f017 f8bb 	bl	2a530 <memset>
}
   133ba:	e7f4      	b.n	133a6 <sc_clear+0x3e>
   133bc:	000325d0 	.word	0x000325d0
   133c0:	0002fc2c 	.word	0x0002fc2c

000133c4 <sc_indicate>:
{
   133c4:	b538      	push	{r3, r4, r5, lr}
   133c6:	4605      	mov	r5, r0
   133c8:	460c      	mov	r4, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   133ca:	480f      	ldr	r0, [pc, #60]	; (13408 <sc_indicate+0x44>)
   133cc:	2101      	movs	r1, #1
   133ce:	f018 fc20 	bl	2bc12 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   133d2:	f010 0f01 	tst.w	r0, #1
   133d6:	4b0d      	ldr	r3, [pc, #52]	; (1340c <sc_indicate+0x48>)
   133d8:	d10a      	bne.n	133f0 <sc_indicate+0x2c>
		gatt_sc.start = start;
   133da:	831d      	strh	r5, [r3, #24]
		*end = new_end;
   133dc:	835c      	strh	r4, [r3, #26]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   133de:	480a      	ldr	r0, [pc, #40]	; (13408 <sc_indicate+0x44>)
   133e0:	f018 fc14 	bl	2bc0c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   133e4:	0783      	lsls	r3, r0, #30
   133e6:	d409      	bmi.n	133fc <sc_indicate+0x38>
}
   133e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   133ec:	f7ff bf68 	b.w	132c0 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   133f0:	8b19      	ldrh	r1, [r3, #24]
   133f2:	8b5a      	ldrh	r2, [r3, #26]
   133f4:	42a9      	cmp	r1, r5
   133f6:	d802      	bhi.n	133fe <sc_indicate+0x3a>
   133f8:	4294      	cmp	r4, r2
   133fa:	d8ef      	bhi.n	133dc <sc_indicate+0x18>
}
   133fc:	bd38      	pop	{r3, r4, r5, pc}
	if (*end < new_end) {
   133fe:	4294      	cmp	r4, r2
		*start = new_start;
   13400:	831d      	strh	r5, [r3, #24]
	if (*end < new_end) {
   13402:	d9ec      	bls.n	133de <sc_indicate+0x1a>
   13404:	e7ea      	b.n	133dc <sc_indicate+0x18>
   13406:	bf00      	nop
   13408:	20009e90 	.word	0x20009e90
   1340c:	20009e40 	.word	0x20009e40

00013410 <read_ppcp>:
{
   13410:	b513      	push	{r0, r1, r4, lr}
   13412:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   13414:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   13418:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1341c:	4c09      	ldr	r4, [pc, #36]	; (13444 <read_ppcp+0x34>)
	if (offset > value_len) {
   1341e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   13420:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   13424:	d80b      	bhi.n	1343e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   13426:	f1c1 0408 	rsb	r4, r1, #8
   1342a:	429c      	cmp	r4, r3
   1342c:	bfa8      	it	ge
   1342e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   13430:	4469      	add	r1, sp
   13432:	4622      	mov	r2, r4
   13434:	f017 f871 	bl	2a51a <memcpy>
}
   13438:	4620      	mov	r0, r4
   1343a:	b002      	add	sp, #8
   1343c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1343e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   13442:	e7f9      	b.n	13438 <read_ppcp+0x28>
   13444:	00280018 	.word	0x00280018

00013448 <bt_gatt_attr_write_ccc>:
{
   13448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1344c:	461f      	mov	r7, r3
   1344e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13452:	4606      	mov	r6, r0
   13454:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   13456:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1345a:	2b00      	cmp	r3, #0
   1345c:	d143      	bne.n	134e6 <bt_gatt_attr_write_ccc+0x9e>
	if (!len || len > sizeof(uint16_t)) {
   1345e:	1e7b      	subs	r3, r7, #1
   13460:	2b01      	cmp	r3, #1
   13462:	d843      	bhi.n	134ec <bt_gatt_attr_write_ccc+0xa4>
	if (len < sizeof(uint16_t)) {
   13464:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   13466:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   13468:	7815      	ldrb	r5, [r2, #0]
   1346a:	bf18      	it	ne
   1346c:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1346e:	f7ff fbb1 	bl	12bd4 <find_ccc_cfg>
	if (!cfg) {
   13472:	4604      	mov	r4, r0
   13474:	b978      	cbnz	r0, 13496 <bt_gatt_attr_write_ccc+0x4e>
		if (!value) {
   13476:	b915      	cbnz	r5, 1347e <bt_gatt_attr_write_ccc+0x36>
			return len;
   13478:	4638      	mov	r0, r7
}
   1347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1347e:	4649      	mov	r1, r9
   13480:	f7ff fba8 	bl	12bd4 <find_ccc_cfg>
		if (!cfg) {
   13484:	4604      	mov	r4, r0
   13486:	b3a0      	cbz	r0, 134f2 <bt_gatt_attr_write_ccc+0xaa>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13488:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1348c:	3001      	adds	r0, #1
   1348e:	f018 fbcb 	bl	2bc28 <bt_addr_le_copy>
		cfg->id = conn->id;
   13492:	7a33      	ldrb	r3, [r6, #8]
   13494:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   13496:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1349a:	b9c3      	cbnz	r3, 134ce <bt_gatt_attr_write_ccc+0x86>
	value_changed = cfg->value != value;
   1349c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   134a0:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   134a2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   134a6:	42ab      	cmp	r3, r5
   134a8:	d003      	beq.n	134b2 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   134aa:	4649      	mov	r1, r9
   134ac:	4640      	mov	r0, r8
   134ae:	f018 fb22 	bl	2baf6 <gatt_ccc_changed>
	if (value_changed) {
   134b2:	45aa      	cmp	sl, r5
   134b4:	d002      	beq.n	134bc <bt_gatt_attr_write_ccc+0x74>
		gatt_ccc_conn_enqueue(conn);
   134b6:	4630      	mov	r0, r6
   134b8:	f7ff fc1c 	bl	12cf4 <gatt_ccc_conn_enqueue>
	if (!value) {
   134bc:	2d00      	cmp	r5, #0
   134be:	d1db      	bne.n	13478 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   134c0:	490d      	ldr	r1, [pc, #52]	; (134f8 <bt_gatt_attr_write_ccc+0xb0>)
   134c2:	1c60      	adds	r0, r4, #1
   134c4:	f018 fbb0 	bl	2bc28 <bt_addr_le_copy>
	cfg->id = 0U;
   134c8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   134ca:	8125      	strh	r5, [r4, #8]
}
   134cc:	e7d4      	b.n	13478 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   134ce:	462a      	mov	r2, r5
   134d0:	4641      	mov	r1, r8
   134d2:	4630      	mov	r0, r6
   134d4:	4798      	blx	r3
		if (write < 0) {
   134d6:	2800      	cmp	r0, #0
   134d8:	dbcf      	blt.n	1347a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   134da:	3801      	subs	r0, #1
   134dc:	2801      	cmp	r0, #1
   134de:	d9dd      	bls.n	1349c <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   134e0:	f06f 000d 	mvn.w	r0, #13
   134e4:	e7c9      	b.n	1347a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   134e6:	f06f 0006 	mvn.w	r0, #6
   134ea:	e7c6      	b.n	1347a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   134ec:	f06f 000c 	mvn.w	r0, #12
   134f0:	e7c3      	b.n	1347a <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   134f2:	f06f 0010 	mvn.w	r0, #16
   134f6:	e7c0      	b.n	1347a <bt_gatt_attr_write_ccc+0x32>
   134f8:	00031ac5 	.word	0x00031ac5

000134fc <disconnected_cb>:
{
   134fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13500:	4b23      	ldr	r3, [pc, #140]	; (13590 <disconnected_cb+0x94>)
{
   13502:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13504:	6882      	ldr	r2, [r0, #8]
{
   13506:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13508:	429a      	cmp	r2, r3
   1350a:	d102      	bne.n	13512 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1350c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1350e:	8963      	ldrh	r3, [r4, #10]
   13510:	bb33      	cbnz	r3, 13560 <disconnected_cb+0x64>
}
   13512:	2001      	movs	r0, #1
   13514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   13518:	f7fd fe10 	bl	1113c <bt_conn_unref>
		ccc->value = 0U;
   1351c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1351e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   13520:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   13522:	2b00      	cmp	r3, #0
   13524:	d0f5      	beq.n	13512 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   13526:	4638      	mov	r0, r7
   13528:	4798      	blx	r3
   1352a:	e7f2      	b.n	13512 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1352c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   13530:	4641      	mov	r1, r8
   13532:	7a28      	ldrb	r0, [r5, #8]
   13534:	f017 fab7 	bl	2aaa6 <bt_addr_le_is_bonded>
   13538:	b968      	cbnz	r0, 13556 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1353a:	4b16      	ldr	r3, [pc, #88]	; (13594 <disconnected_cb+0x98>)
   1353c:	429c      	cmp	r4, r3
   1353e:	d102      	bne.n	13546 <disconnected_cb+0x4a>
					sc_clear(conn);
   13540:	4628      	mov	r0, r5
   13542:	f7ff ff11 	bl	13368 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   13546:	4630      	mov	r0, r6
   13548:	4913      	ldr	r1, [pc, #76]	; (13598 <disconnected_cb+0x9c>)
   1354a:	f018 fb6d 	bl	2bc28 <bt_addr_le_copy>
	cfg->id = 0U;
   1354e:	2300      	movs	r3, #0
   13550:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   13552:	8123      	strh	r3, [r4, #8]
}
   13554:	e7e2      	b.n	1351c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13556:	4641      	mov	r1, r8
   13558:	4630      	mov	r0, r6
   1355a:	f018 fb65 	bl	2bc28 <bt_addr_le_copy>
   1355e:	e7dd      	b.n	1351c <disconnected_cb+0x20>
		if (!cfg->value) {
   13560:	8923      	ldrh	r3, [r4, #8]
   13562:	2b00      	cmp	r3, #0
   13564:	d0da      	beq.n	1351c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13566:	4626      	mov	r6, r4
   13568:	f816 1b01 	ldrb.w	r1, [r6], #1
   1356c:	4628      	mov	r0, r5
   1356e:	4632      	mov	r2, r6
   13570:	f017 fd32 	bl	2afd8 <bt_conn_is_peer_addr_le>
   13574:	2800      	cmp	r0, #0
   13576:	d1d9      	bne.n	1352c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13578:	4631      	mov	r1, r6
   1357a:	7820      	ldrb	r0, [r4, #0]
   1357c:	f7fd ffc0 	bl	11500 <bt_conn_lookup_addr_le>
			if (tmp) {
   13580:	2800      	cmp	r0, #0
   13582:	d0cb      	beq.n	1351c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   13584:	7a83      	ldrb	r3, [r0, #10]
   13586:	2b07      	cmp	r3, #7
   13588:	d1c6      	bne.n	13518 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1358a:	f7fd fdd7 	bl	1113c <bt_conn_unref>
	if (!value_used) {
   1358e:	e7c0      	b.n	13512 <disconnected_cb+0x16>
   13590:	00013449 	.word	0x00013449
   13594:	20008780 	.word	0x20008780
   13598:	00031ac5 	.word	0x00031ac5

0001359c <sc_indicate_rsp>:
{
   1359c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1359e:	f06f 0102 	mvn.w	r1, #2
   135a2:	4604      	mov	r4, r0
   135a4:	480f      	ldr	r0, [pc, #60]	; (135e4 <sc_indicate_rsp+0x48>)
   135a6:	f018 fb86 	bl	2bcb6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   135aa:	480e      	ldr	r0, [pc, #56]	; (135e4 <sc_indicate_rsp+0x48>)
   135ac:	f018 fb2e 	bl	2bc0c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   135b0:	07c2      	lsls	r2, r0, #31
   135b2:	d504      	bpl.n	135be <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   135b4:	2200      	movs	r2, #0
   135b6:	2300      	movs	r3, #0
   135b8:	480b      	ldr	r0, [pc, #44]	; (135e8 <sc_indicate_rsp+0x4c>)
   135ba:	f013 f85d 	bl	26678 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   135be:	4620      	mov	r0, r4
   135c0:	f018 fa6c 	bl	2ba9c <bt_att_fixed_chan_only>
   135c4:	b160      	cbz	r0, 135e0 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   135c6:	4620      	mov	r0, r4
   135c8:	f7ff fadc 	bl	12b84 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   135cc:	b140      	cbz	r0, 135e0 <sc_indicate_rsp+0x44>
   135ce:	7a03      	ldrb	r3, [r0, #8]
   135d0:	07db      	lsls	r3, r3, #31
   135d2:	d505      	bpl.n	135e0 <sc_indicate_rsp+0x44>
}
   135d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   135d8:	2101      	movs	r1, #1
   135da:	300c      	adds	r0, #12
   135dc:	f018 bb19 	b.w	2bc12 <atomic_or>
   135e0:	bd10      	pop	{r4, pc}
   135e2:	bf00      	nop
   135e4:	20009e90 	.word	0x20009e90
   135e8:	20009e60 	.word	0x20009e60

000135ec <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   135ec:	2201      	movs	r2, #1
{
   135ee:	b508      	push	{r3, lr}
   135f0:	4b14      	ldr	r3, [pc, #80]	; (13644 <bt_gatt_init+0x58>)
   135f2:	e8d3 1fef 	ldaex	r1, [r3]
   135f6:	2900      	cmp	r1, #0
   135f8:	d103      	bne.n	13602 <bt_gatt_init+0x16>
   135fa:	e8c3 2fe0 	stlex	r0, r2, [r3]
   135fe:	2800      	cmp	r0, #0
   13600:	d1f7      	bne.n	135f2 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13602:	d11d      	bne.n	13640 <bt_gatt_init+0x54>
	bt_gatt_service_init();
   13604:	f7ff fb40 	bl	12c88 <bt_gatt_service_init>
	list->head = NULL;
   13608:	2200      	movs	r2, #0
   1360a:	4b0f      	ldr	r3, [pc, #60]	; (13648 <bt_gatt_init+0x5c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1360c:	490f      	ldr	r1, [pc, #60]	; (1364c <bt_gatt_init+0x60>)
   1360e:	4810      	ldr	r0, [pc, #64]	; (13650 <bt_gatt_init+0x64>)
	list->tail = NULL;
   13610:	e9c3 2200 	strd	r2, r2, [r3]
   13614:	f012 ff46 	bl	264a4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   13618:	2300      	movs	r3, #0
   1361a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1361e:	480c      	ldr	r0, [pc, #48]	; (13650 <bt_gatt_init+0x64>)
   13620:	f7fa fb7c 	bl	dd1c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   13624:	490b      	ldr	r1, [pc, #44]	; (13654 <bt_gatt_init+0x68>)
   13626:	480c      	ldr	r0, [pc, #48]	; (13658 <bt_gatt_init+0x6c>)
   13628:	f012 ff3c 	bl	264a4 <k_work_init_delayable>
   1362c:	2102      	movs	r1, #2
   1362e:	480b      	ldr	r0, [pc, #44]	; (1365c <bt_gatt_init+0x70>)
   13630:	f018 faef 	bl	2bc12 <atomic_or>
}
   13634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   13638:	4909      	ldr	r1, [pc, #36]	; (13660 <bt_gatt_init+0x74>)
   1363a:	480a      	ldr	r0, [pc, #40]	; (13664 <bt_gatt_init+0x78>)
   1363c:	f012 bf32 	b.w	264a4 <k_work_init_delayable>
}
   13640:	bd08      	pop	{r3, pc}
   13642:	bf00      	nop
   13644:	2000a928 	.word	0x2000a928
   13648:	2000a934 	.word	0x2000a934
   1364c:	00013909 	.word	0x00013909
   13650:	20009de8 	.word	0x20009de8
   13654:	00013ff9 	.word	0x00013ff9
   13658:	20009e60 	.word	0x20009e60
   1365c:	20009e90 	.word	0x20009e90
   13660:	0002c0cb 	.word	0x0002c0cb
   13664:	20009d98 	.word	0x20009d98

00013668 <bt_gatt_attr_get_handle>:
	if (!attr) {
   13668:	4603      	mov	r3, r0
{
   1366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1366e:	b378      	cbz	r0, 136d0 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   13670:	8a00      	ldrh	r0, [r0, #16]
   13672:	bb68      	cbnz	r0, 136d0 <bt_gatt_attr_get_handle+0x68>
	uint16_t handle = 1;
   13674:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13676:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1367a:	4917      	ldr	r1, [pc, #92]	; (136d8 <bt_gatt_attr_get_handle+0x70>)
   1367c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 136dc <bt_gatt_attr_get_handle+0x74>
   13680:	4571      	cmp	r1, lr
   13682:	d924      	bls.n	136ce <bt_gatt_attr_get_handle+0x66>
   13684:	4916      	ldr	r1, [pc, #88]	; (136e0 <bt_gatt_attr_get_handle+0x78>)
   13686:	4817      	ldr	r0, [pc, #92]	; (136e4 <bt_gatt_attr_get_handle+0x7c>)
   13688:	f240 625d 	movw	r2, #1629	; 0x65d
   1368c:	f015 fa9a 	bl	28bc4 <assert_print>
   13690:	f240 615d 	movw	r1, #1629	; 0x65d
   13694:	4812      	ldr	r0, [pc, #72]	; (136e0 <bt_gatt_attr_get_handle+0x78>)
   13696:	f015 fa8e 	bl	28bb6 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1369a:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1369e:	42bb      	cmp	r3, r7
   136a0:	d304      	bcc.n	136ac <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   136a2:	fb0c 7206 	mla	r2, ip, r6, r7
   136a6:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   136a8:	4293      	cmp	r3, r2
   136aa:	d90e      	bls.n	136ca <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   136ac:	4434      	add	r4, r6
   136ae:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   136b0:	4614      	mov	r4, r2
   136b2:	3108      	adds	r1, #8
   136b4:	e7e4      	b.n	13680 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   136b6:	fb0c 7805 	mla	r8, ip, r5, r7
   136ba:	4543      	cmp	r3, r8
   136bc:	d00a      	beq.n	136d4 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   136be:	3501      	adds	r5, #1
   136c0:	1962      	adds	r2, r4, r5
   136c2:	42b5      	cmp	r5, r6
   136c4:	b292      	uxth	r2, r2
   136c6:	d1f6      	bne.n	136b6 <bt_gatt_attr_get_handle+0x4e>
   136c8:	e7f2      	b.n	136b0 <bt_gatt_attr_get_handle+0x48>
   136ca:	2500      	movs	r5, #0
   136cc:	e7f8      	b.n	136c0 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   136ce:	d3e4      	bcc.n	1369a <bt_gatt_attr_get_handle+0x32>
}
   136d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136d4:	4610      	mov	r0, r2
   136d6:	e7fb      	b.n	136d0 <bt_gatt_attr_get_handle+0x68>
   136d8:	0002fbc8 	.word	0x0002fbc8
   136dc:	0002fbd8 	.word	0x0002fbd8
   136e0:	0003243e 	.word	0x0003243e
   136e4:	00030da5 	.word	0x00030da5

000136e8 <bt_gatt_foreach_attr_type>:
{
   136e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ec:	b089      	sub	sp, #36	; 0x24
   136ee:	4699      	mov	r9, r3
	if (!num_matches) {
   136f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
{
   136f4:	4604      	mov	r4, r0
   136f6:	460f      	mov	r7, r1
   136f8:	4690      	mov	r8, r2
	if (!num_matches) {
   136fa:	b91b      	cbnz	r3, 13704 <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
   136fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13700:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   13704:	4b37      	ldr	r3, [pc, #220]	; (137e4 <bt_gatt_foreach_attr_type+0xfc>)
   13706:	881b      	ldrh	r3, [r3, #0]
   13708:	42a3      	cmp	r3, r4
   1370a:	d226      	bcs.n	1375a <bt_gatt_foreach_attr_type+0x72>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
   1370c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   13710:	f8ad 301e 	strh.w	r3, [sp, #30]
	return list->head;
   13714:	4b34      	ldr	r3, [pc, #208]	; (137e8 <bt_gatt_foreach_attr_type+0x100>)
   13716:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   13718:	2d00      	cmp	r5, #0
   1371a:	d13a      	bne.n	13792 <bt_gatt_foreach_attr_type+0xaa>
}
   1371c:	b009      	add	sp, #36	; 0x24
   1371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13722:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13724:	6828      	ldr	r0, [r5, #0]
   13726:	9304      	str	r3, [sp, #16]
   13728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1372a:	4622      	mov	r2, r4
   1372c:	9303      	str	r3, [sp, #12]
   1372e:	ab12      	add	r3, sp, #72	; 0x48
   13730:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13734:	fb0b 0006 	mla	r0, fp, r6, r0
   13738:	463b      	mov	r3, r7
   1373a:	f8cd 8000 	str.w	r8, [sp]
   1373e:	f018 fac5 	bl	2bccc <gatt_foreach_iter>
   13742:	2800      	cmp	r0, #0
   13744:	d0ea      	beq.n	1371c <bt_gatt_foreach_attr_type+0x34>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13746:	3601      	adds	r6, #1
   13748:	686b      	ldr	r3, [r5, #4]
   1374a:	eb0a 0106 	add.w	r1, sl, r6
   1374e:	42b3      	cmp	r3, r6
   13750:	b289      	uxth	r1, r1
   13752:	d8e6      	bhi.n	13722 <bt_gatt_foreach_attr_type+0x3a>
   13754:	e00d      	b.n	13772 <bt_gatt_foreach_attr_type+0x8a>
   13756:	2600      	movs	r6, #0
   13758:	e7f6      	b.n	13748 <bt_gatt_foreach_attr_type+0x60>
		uint16_t handle = 1;
   1375a:	f04f 0a01 	mov.w	sl, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1375e:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13762:	4d22      	ldr	r5, [pc, #136]	; (137ec <bt_gatt_foreach_attr_type+0x104>)
   13764:	e007      	b.n	13776 <bt_gatt_foreach_attr_type+0x8e>
   13766:	d2d1      	bcs.n	1370c <bt_gatt_foreach_attr_type+0x24>
			if (handle + static_svc->attr_count < start_handle) {
   13768:	6869      	ldr	r1, [r5, #4]
   1376a:	4451      	add	r1, sl
   1376c:	42a1      	cmp	r1, r4
   1376e:	d2f2      	bcs.n	13756 <bt_gatt_foreach_attr_type+0x6e>
				handle += static_svc->attr_count;
   13770:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13772:	468a      	mov	sl, r1
   13774:	3508      	adds	r5, #8
   13776:	4b1e      	ldr	r3, [pc, #120]	; (137f0 <bt_gatt_foreach_attr_type+0x108>)
   13778:	429d      	cmp	r5, r3
   1377a:	d9f4      	bls.n	13766 <bt_gatt_foreach_attr_type+0x7e>
   1377c:	491d      	ldr	r1, [pc, #116]	; (137f4 <bt_gatt_foreach_attr_type+0x10c>)
   1377e:	481e      	ldr	r0, [pc, #120]	; (137f8 <bt_gatt_foreach_attr_type+0x110>)
   13780:	f240 7221 	movw	r2, #1825	; 0x721
   13784:	f015 fa1e 	bl	28bc4 <assert_print>
   13788:	f240 7121 	movw	r1, #1825	; 0x721
   1378c:	4819      	ldr	r0, [pc, #100]	; (137f4 <bt_gatt_foreach_attr_type+0x10c>)
   1378e:	f015 fa12 	bl	28bb6 <assert_post_action>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   13792:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   13796:	3d08      	subs	r5, #8
			if (gatt_foreach_iter(attr, attr->handle,
   13798:	f10d 0b1e 	add.w	fp, sp, #30
	return node->next;
   1379c:	68ae      	ldr	r6, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
   1379e:	b9be      	cbnz	r6, 137d0 <bt_gatt_foreach_attr_type+0xe8>
		for (i = 0; i < svc->attr_count; i++) {
   137a0:	686b      	ldr	r3, [r5, #4]
   137a2:	429e      	cmp	r6, r3
   137a4:	d219      	bcs.n	137da <bt_gatt_foreach_attr_type+0xf2>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   137a6:	6828      	ldr	r0, [r5, #0]
			if (gatt_foreach_iter(attr, attr->handle,
   137a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
			struct bt_gatt_attr *attr = &svc->attrs[i];
   137aa:	fb0a 0006 	mla	r0, sl, r6, r0
			if (gatt_foreach_iter(attr, attr->handle,
   137ae:	8a01      	ldrh	r1, [r0, #16]
   137b0:	9304      	str	r3, [sp, #16]
   137b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   137b4:	4622      	mov	r2, r4
   137b6:	e9cd b302 	strd	fp, r3, [sp, #8]
   137ba:	e9cd 8900 	strd	r8, r9, [sp]
   137be:	463b      	mov	r3, r7
   137c0:	f018 fa84 	bl	2bccc <gatt_foreach_iter>
   137c4:	2800      	cmp	r0, #0
   137c6:	d0a9      	beq.n	1371c <bt_gatt_foreach_attr_type+0x34>
		for (i = 0; i < svc->attr_count; i++) {
   137c8:	3601      	adds	r6, #1
   137ca:	e7e9      	b.n	137a0 <bt_gatt_foreach_attr_type+0xb8>
   137cc:	2600      	movs	r6, #0
   137ce:	e7e7      	b.n	137a0 <bt_gatt_foreach_attr_type+0xb8>
			if (next->attrs[0].handle <= start_handle) {
   137d0:	f856 3c08 	ldr.w	r3, [r6, #-8]
   137d4:	8a1b      	ldrh	r3, [r3, #16]
   137d6:	42a3      	cmp	r3, r4
   137d8:	d8f8      	bhi.n	137cc <bt_gatt_foreach_attr_type+0xe4>
   137da:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   137dc:	2d00      	cmp	r5, #0
   137de:	d09d      	beq.n	1371c <bt_gatt_foreach_attr_type+0x34>
   137e0:	3d08      	subs	r5, #8
   137e2:	e7db      	b.n	1379c <bt_gatt_foreach_attr_type+0xb4>
   137e4:	2000b134 	.word	0x2000b134
   137e8:	2000a92c 	.word	0x2000a92c
   137ec:	0002fbc8 	.word	0x0002fbc8
   137f0:	0002fbd8 	.word	0x0002fbd8
   137f4:	0003243e 	.word	0x0003243e
   137f8:	00030da5 	.word	0x00030da5

000137fc <db_hash_gen>:
{
   137fc:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   137fe:	2400      	movs	r4, #0
{
   13800:	b0cf      	sub	sp, #316	; 0x13c
   13802:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13804:	4669      	mov	r1, sp
   13806:	aa22      	add	r2, sp, #136	; 0x88
   13808:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1380a:	e9cd 4400 	strd	r4, r4, [sp]
   1380e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13812:	f016 f9f6 	bl	29c02 <tc_cmac_setup>
   13816:	b958      	cbnz	r0, 13830 <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   13818:	4b16      	ldr	r3, [pc, #88]	; (13874 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   1381a:	9309      	str	r3, [sp, #36]	; 0x24
   1381c:	2302      	movs	r3, #2
   1381e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13822:	4815      	ldr	r0, [pc, #84]	; (13878 <db_hash_gen+0x7c>)
   13824:	aa08      	add	r2, sp, #32
   13826:	9308      	str	r3, [sp, #32]
   13828:	f018 fa76 	bl	2bd18 <z_log_msg_static_create.constprop.0>
}
   1382c:	b04f      	add	sp, #316	; 0x13c
   1382e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13830:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13834:	2001      	movs	r0, #1
   13836:	4a11      	ldr	r2, [pc, #68]	; (1387c <db_hash_gen+0x80>)
   13838:	ab0a      	add	r3, sp, #40	; 0x28
   1383a:	f018 fb9c 	bl	2bf76 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1383e:	4810      	ldr	r0, [pc, #64]	; (13880 <db_hash_gen+0x84>)
   13840:	a90a      	add	r1, sp, #40	; 0x28
   13842:	f016 fa73 	bl	29d2c <tc_cmac_final>
   13846:	b908      	cbnz	r0, 1384c <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   13848:	4b0e      	ldr	r3, [pc, #56]	; (13884 <db_hash_gen+0x88>)
   1384a:	e7e6      	b.n	1381a <db_hash_gen+0x1e>
   1384c:	4b0c      	ldr	r3, [pc, #48]	; (13880 <db_hash_gen+0x84>)
   1384e:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13852:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13854:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   13858:	3401      	adds	r4, #1
   1385a:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1385c:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13860:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   13862:	d1f6      	bne.n	13852 <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13864:	b10d      	cbz	r5, 1386a <db_hash_gen+0x6e>
		db_hash_store();
   13866:	f7ff fbc1 	bl	12fec <db_hash_store>
   1386a:	2104      	movs	r1, #4
   1386c:	4806      	ldr	r0, [pc, #24]	; (13888 <db_hash_gen+0x8c>)
   1386e:	f018 f9d0 	bl	2bc12 <atomic_or>
   13872:	e7db      	b.n	1382c <db_hash_gen+0x30>
   13874:	000325e6 	.word	0x000325e6
   13878:	0002fc2c 	.word	0x0002fc2c
   1387c:	0002bb3d 	.word	0x0002bb3d
   13880:	20009dc8 	.word	0x20009dc8
   13884:	000325ff 	.word	0x000325ff
   13888:	20009e90 	.word	0x20009e90

0001388c <db_hash_read>:
{
   1388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1388e:	491b      	ldr	r1, [pc, #108]	; (138fc <db_hash_read+0x70>)
{
   13890:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   13892:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   13896:	4615      	mov	r5, r2
   13898:	461f      	mov	r7, r3
   1389a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1389e:	f012 ff37 	bl	26710 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   138a2:	4817      	ldr	r0, [pc, #92]	; (13900 <db_hash_read+0x74>)
   138a4:	f018 f9b2 	bl	2bc0c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   138a8:	0741      	lsls	r1, r0, #29
   138aa:	d402      	bmi.n	138b2 <db_hash_read+0x26>
		db_hash_gen(true);
   138ac:	2001      	movs	r0, #1
   138ae:	f7ff ffa5 	bl	137fc <db_hash_gen>
	cfg = find_cf_cfg(conn);
   138b2:	4620      	mov	r0, r4
   138b4:	f7ff f966 	bl	12b84 <find_cf_cfg>
	if (cfg &&
   138b8:	b168      	cbz	r0, 138d6 <db_hash_read+0x4a>
   138ba:	7a03      	ldrb	r3, [r0, #8]
   138bc:	07da      	lsls	r2, r3, #31
   138be:	d50a      	bpl.n	138d6 <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   138c0:	f100 040c 	add.w	r4, r0, #12
   138c4:	4620      	mov	r0, r4
   138c6:	f018 f9a1 	bl	2bc0c <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   138ca:	07c3      	lsls	r3, r0, #31
   138cc:	d403      	bmi.n	138d6 <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   138ce:	2102      	movs	r1, #2
   138d0:	4620      	mov	r0, r4
   138d2:	f018 f99e 	bl	2bc12 <atomic_or>
	if (offset > value_len) {
   138d6:	2e10      	cmp	r6, #16
   138d8:	d80c      	bhi.n	138f4 <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   138da:	f1c6 0410 	rsb	r4, r6, #16
   138de:	42bc      	cmp	r4, r7
   138e0:	bfa8      	it	ge
   138e2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   138e4:	4907      	ldr	r1, [pc, #28]	; (13904 <db_hash_read+0x78>)
   138e6:	4622      	mov	r2, r4
   138e8:	4628      	mov	r0, r5
   138ea:	4431      	add	r1, r6
   138ec:	f016 fe15 	bl	2a51a <memcpy>
}
   138f0:	4620      	mov	r0, r4
   138f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   138f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   138f8:	e7fa      	b.n	138f0 <db_hash_read+0x64>
   138fa:	bf00      	nop
   138fc:	20009e18 	.word	0x20009e18
   13900:	20009e90 	.word	0x20009e90
   13904:	20009dc8 	.word	0x20009dc8

00013908 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13908:	f06f 0108 	mvn.w	r1, #8
{
   1390c:	b508      	push	{r3, lr}
   1390e:	4816      	ldr	r0, [pc, #88]	; (13968 <db_hash_process+0x60>)
   13910:	f018 f9d1 	bl	2bcb6 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   13914:	0702      	lsls	r2, r0, #28
   13916:	d522      	bpl.n	1395e <db_hash_process+0x56>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13918:	4813      	ldr	r0, [pc, #76]	; (13968 <db_hash_process+0x60>)
   1391a:	f018 f977 	bl	2bc0c <atomic_get>
   1391e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   13920:	075b      	lsls	r3, r3, #29
   13922:	f3c0 0080 	ubfx	r0, r0, #2, #1
   13926:	d401      	bmi.n	1392c <db_hash_process+0x24>
			db_hash_gen(false);
   13928:	f7ff ff68 	bl	137fc <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1392c:	2210      	movs	r2, #16
   1392e:	490f      	ldr	r1, [pc, #60]	; (1396c <db_hash_process+0x64>)
   13930:	1888      	adds	r0, r1, r2
   13932:	f016 fdcb 	bl	2a4cc <memcmp>
   13936:	b948      	cbnz	r0, 1394c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   13938:	480d      	ldr	r0, [pc, #52]	; (13970 <db_hash_process+0x68>)
   1393a:	f012 fea3 	bl	26684 <k_work_cancel_delayable>
}
   1393e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13942:	f06f 0101 	mvn.w	r1, #1
   13946:	4808      	ldr	r0, [pc, #32]	; (13968 <db_hash_process+0x60>)
   13948:	f018 b9b5 	b.w	2bcb6 <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1394c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13950:	2001      	movs	r0, #1
   13952:	f7ff fd37 	bl	133c4 <sc_indicate>
}
   13956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   1395a:	f7ff bb47 	b.w	12fec <db_hash_store>
	db_hash_gen(true);
   1395e:	2001      	movs	r0, #1
}
   13960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   13964:	f7ff bf4a 	b.w	137fc <db_hash_gen>
   13968:	20009e90 	.word	0x20009e90
   1396c:	20009dc8 	.word	0x20009dc8
   13970:	20009e60 	.word	0x20009e60

00013974 <bt_gatt_service_register>:
{
   13974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13978:	b083      	sub	sp, #12
	__ASSERT(svc, "invalid parameters\n");
   1397a:	4604      	mov	r4, r0
{
   1397c:	af00      	add	r7, sp, #0
	__ASSERT(svc, "invalid parameters\n");
   1397e:	b950      	cbnz	r0, 13996 <bt_gatt_service_register+0x22>
   13980:	4971      	ldr	r1, [pc, #452]	; (13b48 <bt_gatt_service_register+0x1d4>)
   13982:	f240 52c1 	movw	r2, #1473	; 0x5c1
   13986:	4871      	ldr	r0, [pc, #452]	; (13b4c <bt_gatt_service_register+0x1d8>)
   13988:	f015 f91c 	bl	28bc4 <assert_print>
   1398c:	f240 51c1 	movw	r1, #1473	; 0x5c1
	__ASSERT(svc->attrs, "invalid parameters\n");
   13990:	486d      	ldr	r0, [pc, #436]	; (13b48 <bt_gatt_service_register+0x1d4>)
   13992:	f015 f910 	bl	28bb6 <assert_post_action>
   13996:	6803      	ldr	r3, [r0, #0]
   13998:	b943      	cbnz	r3, 139ac <bt_gatt_service_register+0x38>
   1399a:	496b      	ldr	r1, [pc, #428]	; (13b48 <bt_gatt_service_register+0x1d4>)
   1399c:	f240 52c2 	movw	r2, #1474	; 0x5c2
   139a0:	486a      	ldr	r0, [pc, #424]	; (13b4c <bt_gatt_service_register+0x1d8>)
   139a2:	f015 f90f 	bl	28bc4 <assert_print>
   139a6:	f240 51c2 	movw	r1, #1474	; 0x5c2
   139aa:	e7f1      	b.n	13990 <bt_gatt_service_register+0x1c>
	__ASSERT(svc->attr_count, "invalid parameters\n");
   139ac:	6843      	ldr	r3, [r0, #4]
   139ae:	b943      	cbnz	r3, 139c2 <bt_gatt_service_register+0x4e>
   139b0:	4965      	ldr	r1, [pc, #404]	; (13b48 <bt_gatt_service_register+0x1d4>)
   139b2:	f240 52c3 	movw	r2, #1475	; 0x5c3
   139b6:	4865      	ldr	r0, [pc, #404]	; (13b4c <bt_gatt_service_register+0x1d8>)
   139b8:	f015 f904 	bl	28bc4 <assert_print>
   139bc:	f240 51c3 	movw	r1, #1475	; 0x5c3
   139c0:	e7e6      	b.n	13990 <bt_gatt_service_register+0x1c>
	bt_gatt_service_init();
   139c2:	f7ff f961 	bl	12c88 <bt_gatt_service_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   139c6:	6823      	ldr	r3, [r4, #0]
   139c8:	2500      	movs	r5, #0
   139ca:	6818      	ldr	r0, [r3, #0]
   139cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   139d0:	4639      	mov	r1, r7
   139d2:	703d      	strb	r5, [r7, #0]
   139d4:	807b      	strh	r3, [r7, #2]
   139d6:	f016 ff89 	bl	2a8ec <bt_uuid_cmp>
   139da:	b928      	cbnz	r0, 139e8 <bt_gatt_service_register+0x74>
		return -EALREADY;
   139dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   139e0:	370c      	adds	r7, #12
   139e2:	46bd      	mov	sp, r7
   139e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   139e8:	6823      	ldr	r3, [r4, #0]
   139ea:	1d39      	adds	r1, r7, #4
   139ec:	6818      	ldr	r0, [r3, #0]
   139ee:	f641 0301 	movw	r3, #6145	; 0x1801
   139f2:	713d      	strb	r5, [r7, #4]
   139f4:	80fb      	strh	r3, [r7, #6]
   139f6:	f016 ff79 	bl	2a8ec <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   139fa:	2800      	cmp	r0, #0
   139fc:	d0ee      	beq.n	139dc <bt_gatt_service_register+0x68>
	return list->head;
   139fe:	4d54      	ldr	r5, [pc, #336]	; (13b50 <bt_gatt_service_register+0x1dc>)
	k_sched_lock();
   13a00:	f013 f8b0 	bl	26b64 <k_sched_lock>
	if (sys_slist_is_empty(&db)) {
   13a04:	682b      	ldr	r3, [r5, #0]
	struct bt_gatt_attr *attrs = svc->attrs;
   13a06:	f8d4 8000 	ldr.w	r8, [r4]
	uint16_t count = svc->attr_count;
   13a0a:	f8b4 a004 	ldrh.w	sl, [r4, #4]
	if (sys_slist_is_empty(&db)) {
   13a0e:	b9b3      	cbnz	r3, 13a3e <bt_gatt_service_register+0xca>
		handle = last_static_handle;
   13a10:	4a50      	ldr	r2, [pc, #320]	; (13b54 <bt_gatt_service_register+0x1e0>)
   13a12:	8816      	ldrh	r6, [r2, #0]
	for (; attrs && count; attrs++, count--) {
   13a14:	f1b8 0f00 	cmp.w	r8, #0
   13a18:	d16f      	bne.n	13afa <bt_gatt_service_register+0x186>
	parent->next = child;
   13a1a:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
   13a1c:	f104 0308 	add.w	r3, r4, #8
   13a20:	60a2      	str	r2, [r4, #8]
	return list->tail;
   13a22:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   13a24:	2a00      	cmp	r2, #0
   13a26:	d16f      	bne.n	13b08 <bt_gatt_service_register+0x194>
	list->head = node;
   13a28:	e9c5 3300 	strd	r3, r3, [r5]
	if (!atomic_get(&init)) {
   13a2c:	484a      	ldr	r0, [pc, #296]	; (13b58 <bt_gatt_service_register+0x1e4>)
   13a2e:	f018 f8ed 	bl	2bc0c <atomic_get>
   13a32:	2800      	cmp	r0, #0
   13a34:	d178      	bne.n	13b28 <bt_gatt_service_register+0x1b4>
	k_sched_unlock();
   13a36:	f013 f8e1 	bl	26bfc <k_sched_unlock>
		return 0;
   13a3a:	2000      	movs	r0, #0
   13a3c:	e7d0      	b.n	139e0 <bt_gatt_service_register+0x6c>
	return list->tail;
   13a3e:	686b      	ldr	r3, [r5, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
   13a40:	2b00      	cmp	r3, #0
   13a42:	d07e      	beq.n	13b42 <bt_gatt_service_register+0x1ce>
	handle = last->attrs[last->attr_count - 1].handle;
   13a44:	e953 3202 	ldrd	r3, r2, [r3, #-8]
   13a48:	2114      	movs	r1, #20
   13a4a:	fb01 3302 	mla	r3, r1, r2, r3
   13a4e:	f833 6c04 	ldrh.w	r6, [r3, #-4]
	for (; attrs && count; attrs++, count--) {
   13a52:	f1b8 0f00 	cmp.w	r8, #0
   13a56:	d155      	bne.n	13b04 <bt_gatt_service_register+0x190>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
   13a58:	2e00      	cmp	r6, #0
   13a5a:	d0de      	beq.n	13a1a <bt_gatt_service_register+0xa6>
   13a5c:	6823      	ldr	r3, [r4, #0]
   13a5e:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   13a62:	45b4      	cmp	ip, r6
   13a64:	d8d9      	bhi.n	13a1a <bt_gatt_service_register+0xa6>
	return list->head;
   13a66:	6829      	ldr	r1, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   13a68:	2900      	cmp	r1, #0
   13a6a:	d0df      	beq.n	13a2c <bt_gatt_service_register+0xb8>
   13a6c:	2200      	movs	r2, #0
   13a6e:	f1a1 0308 	sub.w	r3, r1, #8
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
   13a72:	6818      	ldr	r0, [r3, #0]
   13a74:	8a00      	ldrh	r0, [r0, #16]
   13a76:	4560      	cmp	r0, ip
   13a78:	d94f      	bls.n	13b1a <bt_gatt_service_register+0x1a6>
				sys_slist_insert(&db, &prev->node, &svc->node);
   13a7a:	f104 0308 	add.w	r3, r4, #8
			if (prev) {
   13a7e:	2a00      	cmp	r2, #0
   13a80:	d045      	beq.n	13b0e <bt_gatt_service_register+0x19a>
	return node->next;
   13a82:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
   13a84:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
   13a86:	2900      	cmp	r1, #0
   13a88:	d0cb      	beq.n	13a22 <bt_gatt_service_register+0xae>
	parent->next = child;
   13a8a:	6093      	str	r3, [r2, #8]
	if (err < 0) {
   13a8c:	e7ce      	b.n	13a2c <bt_gatt_service_register+0xb8>
		if (!attrs->handle) {
   13a8e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   13a92:	b979      	cbnz	r1, 13ab4 <bt_gatt_service_register+0x140>
			attrs->handle = ++handle;
   13a94:	1c71      	adds	r1, r6, #1
   13a96:	b289      	uxth	r1, r1
   13a98:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
   13a9c:	460e      	mov	r6, r1
   13a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
   13aa2:	f108 0814 	add.w	r8, r8, #20
   13aa6:	fa1f fa8a 	uxth.w	sl, sl
   13aaa:	f1ba 0f00 	cmp.w	sl, #0
   13aae:	d1ee      	bne.n	13a8e <bt_gatt_service_register+0x11a>
   13ab0:	464e      	mov	r6, r9
   13ab2:	e7d1      	b.n	13a58 <bt_gatt_service_register+0xe4>
		} else if (attrs->handle > handle) {
   13ab4:	42b1      	cmp	r1, r6
   13ab6:	d8f1      	bhi.n	13a9c <bt_gatt_service_register+0x128>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   13ab8:	1d3b      	adds	r3, r7, #4
   13aba:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
   13abc:	f8c7 b004 	str.w	fp, [r7, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   13ac0:	f018 fa59 	bl	2bf76 <bt_gatt_foreach_attr>
	return attr;
   13ac4:	687b      	ldr	r3, [r7, #4]
		} else if (find_attr(attrs->handle)) {
   13ac6:	4a25      	ldr	r2, [pc, #148]	; (13b5c <bt_gatt_service_register+0x1e8>)
   13ac8:	b1ab      	cbz	r3, 13af6 <bt_gatt_service_register+0x182>
			LOG_ERR("Unable to register handle 0x%04x", attrs->handle);
   13aca:	466c      	mov	r4, sp
   13acc:	b088      	sub	sp, #32
   13ace:	466a      	mov	r2, sp
   13ad0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   13ad4:	4922      	ldr	r1, [pc, #136]	; (13b60 <bt_gatt_service_register+0x1ec>)
   13ad6:	4823      	ldr	r0, [pc, #140]	; (13b64 <bt_gatt_service_register+0x1f0>)
   13ad8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13adc:	2303      	movs	r3, #3
   13ade:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13ae2:	f842 3f10 	str.w	r3, [r2, #16]!
   13ae6:	f018 f917 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13aea:	46a5      	mov	sp, r4
		k_sched_unlock();
   13aec:	f013 f886 	bl	26bfc <k_sched_unlock>
		return err;
   13af0:	f06f 0015 	mvn.w	r0, #21
   13af4:	e774      	b.n	139e0 <bt_gatt_service_register+0x6c>
   13af6:	4631      	mov	r1, r6
   13af8:	e7d0      	b.n	13a9c <bt_gatt_service_register+0x128>
		last_handle = 0;
   13afa:	4699      	mov	r9, r3
	const struct bt_gatt_attr *attr = NULL;
   13afc:	f04f 0b00 	mov.w	fp, #0
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
   13b00:	4a16      	ldr	r2, [pc, #88]	; (13b5c <bt_gatt_service_register+0x1e8>)
   13b02:	e7d2      	b.n	13aaa <bt_gatt_service_register+0x136>
	handle = last->attrs[last->attr_count - 1].handle;
   13b04:	46b1      	mov	r9, r6
   13b06:	e7f9      	b.n	13afc <bt_gatt_service_register+0x188>
   13b08:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13b0a:	606b      	str	r3, [r5, #4]
	if (err < 0) {
   13b0c:	e78e      	b.n	13a2c <bt_gatt_service_register+0xb8>
Z_GENLIST_PREPEND(slist, snode)
   13b0e:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
   13b10:	60a1      	str	r1, [r4, #8]
	list->head = node;
   13b12:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   13b14:	2a00      	cmp	r2, #0
   13b16:	d189      	bne.n	13a2c <bt_gatt_service_register+0xb8>
   13b18:	e7f7      	b.n	13b0a <bt_gatt_service_register+0x196>
	return node->next;
   13b1a:	6898      	ldr	r0, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
   13b1c:	2800      	cmp	r0, #0
   13b1e:	d085      	beq.n	13a2c <bt_gatt_service_register+0xb8>
   13b20:	461a      	mov	r2, r3
   13b22:	f1a0 0308 	sub.w	r3, r0, #8
   13b26:	e7a4      	b.n	13a72 <bt_gatt_service_register+0xfe>
	sc_indicate(svc->attrs[0].handle,
   13b28:	2114      	movs	r1, #20
		    svc->attrs[svc->attr_count - 1].handle);
   13b2a:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
   13b2e:	fb01 2303 	mla	r3, r1, r3, r2
   13b32:	8a10      	ldrh	r0, [r2, #16]
   13b34:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   13b38:	f7ff fc44 	bl	133c4 <sc_indicate>
	db_changed();
   13b3c:	f7ff fb88 	bl	13250 <db_changed>
   13b40:	e779      	b.n	13a36 <bt_gatt_service_register+0xc2>
	handle = last->attrs[last->attr_count - 1].handle;
   13b42:	681b      	ldr	r3, [r3, #0]
   13b44:	deff      	udf	#255	; 0xff
   13b46:	bf00      	nop
   13b48:	0003243e 	.word	0x0003243e
   13b4c:	00030da5 	.word	0x00030da5
   13b50:	2000a92c 	.word	0x2000a92c
   13b54:	2000b134 	.word	0x2000b134
   13b58:	2000a928 	.word	0x2000a928
   13b5c:	0002baf1 	.word	0x0002baf1
   13b60:	00032618 	.word	0x00032618
   13b64:	0002fc2c 	.word	0x0002fc2c

00013b68 <ccc_set_direct>:
{
   13b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b6c:	b0b8      	sub	sp, #224	; 0xe0
   13b6e:	af00      	add	r7, sp, #0
   13b70:	460c      	mov	r4, r1
   13b72:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13b74:	493f      	ldr	r1, [pc, #252]	; (13c74 <ccc_set_direct+0x10c>)
   13b76:	463a      	mov	r2, r7
   13b78:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   13b7c:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13b7e:	f015 fded 	bl	2975c <settings_name_steq>
   13b82:	b938      	cbnz	r0, 13b94 <ccc_set_direct+0x2c>
   13b84:	f7ff f8da 	bl	12d3c <ccc_set_direct.part.0>
   13b88:	4605      	mov	r5, r0
}
   13b8a:	4628      	mov	r0, r5
   13b8c:	37e0      	adds	r7, #224	; 0xe0
   13b8e:	46bd      	mov	sp, r7
   13b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13b94:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   13b96:	1d39      	adds	r1, r7, #4
   13b98:	4630      	mov	r0, r6
   13b9a:	f015 fe03 	bl	297a4 <settings_name_next>
		if (!name) {
   13b9e:	b96e      	cbnz	r6, 13bbc <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   13ba0:	4b35      	ldr	r3, [pc, #212]	; (13c78 <ccc_set_direct+0x110>)
   13ba2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ba6:	637b      	str	r3, [r7, #52]	; 0x34
   13ba8:	2302      	movs	r3, #2
   13baa:	4834      	ldr	r0, [pc, #208]	; (13c7c <ccc_set_direct+0x114>)
   13bac:	633b      	str	r3, [r7, #48]	; 0x30
   13bae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   13bb2:	f018 f8b1 	bl	2bd18 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13bb6:	f06f 0415 	mvn.w	r4, #21
   13bba:	e049      	b.n	13c50 <ccc_set_direct+0xe8>
		} else if (!next) {
   13bbc:	6878      	ldr	r0, [r7, #4]
   13bbe:	b9c0      	cbnz	r0, 13bf2 <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   13bc0:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   13bc2:	f107 0a08 	add.w	sl, r7, #8
   13bc6:	4651      	mov	r1, sl
   13bc8:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   13bca:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   13bcc:	f016 fcbc 	bl	2a548 <bt_settings_decode_key>
		if (err) {
   13bd0:	4605      	mov	r5, r0
   13bd2:	b320      	cbz	r0, 13c1e <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   13bd4:	466c      	mov	r4, sp
   13bd6:	b088      	sub	sp, #32
   13bd8:	466a      	mov	r2, sp
   13bda:	4b29      	ldr	r3, [pc, #164]	; (13c80 <ccc_set_direct+0x118>)
   13bdc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   13be0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   13be4:	f44f 7300 	mov.w	r3, #512	; 0x200
   13be8:	8393      	strh	r3, [r2, #28]
   13bea:	4b26      	ldr	r3, [pc, #152]	; (13c84 <ccc_set_direct+0x11c>)
   13bec:	f842 3f10 	str.w	r3, [r2, #16]!
   13bf0:	e010      	b.n	13c14 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   13bf2:	220a      	movs	r2, #10
   13bf4:	2100      	movs	r1, #0
   13bf6:	f016 fba5 	bl	2a344 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   13bfa:	2800      	cmp	r0, #0
   13bfc:	d0e0      	beq.n	13bc0 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   13bfe:	466c      	mov	r4, sp
   13c00:	b088      	sub	sp, #32
   13c02:	466a      	mov	r2, sp
   13c04:	4b20      	ldr	r3, [pc, #128]	; (13c88 <ccc_set_direct+0x120>)
   13c06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13c0e:	2303      	movs	r3, #3
   13c10:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   13c14:	4819      	ldr	r0, [pc, #100]	; (13c7c <ccc_set_direct+0x114>)
   13c16:	f018 f87f 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13c1a:	46a5      	mov	sp, r4
			return -EINVAL;
   13c1c:	e7cb      	b.n	13bb6 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   13c1e:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   13c22:	b32c      	cbz	r4, 13c70 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13c24:	22c0      	movs	r2, #192	; 0xc0
   13c26:	4648      	mov	r0, r9
   13c28:	f107 0120 	add.w	r1, r7, #32
   13c2c:	47c0      	blx	r8
			if (len < 0) {
   13c2e:	1e04      	subs	r4, r0, #0
   13c30:	da10      	bge.n	13c54 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   13c32:	466d      	mov	r5, sp
   13c34:	b088      	sub	sp, #32
   13c36:	466a      	mov	r2, sp
   13c38:	4b14      	ldr	r3, [pc, #80]	; (13c8c <ccc_set_direct+0x124>)
   13c3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c3e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13c42:	2303      	movs	r3, #3
   13c44:	480d      	ldr	r0, [pc, #52]	; (13c7c <ccc_set_direct+0x114>)
   13c46:	f842 3f10 	str.w	r3, [r2, #16]!
   13c4a:	f018 f865 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   13c4e:	46ad      	mov	sp, r5
			return -EINVAL;
   13c50:	4625      	mov	r5, r4
   13c52:	e79a      	b.n	13b8a <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   13c54:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   13c56:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   13c5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13c5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13c62:	2001      	movs	r0, #1
   13c64:	4a0a      	ldr	r2, [pc, #40]	; (13c90 <ccc_set_direct+0x128>)
   13c66:	f107 0310 	add.w	r3, r7, #16
   13c6a:	f018 f984 	bl	2bf76 <bt_gatt_foreach_attr>
	return 0;
   13c6e:	e78c      	b.n	13b8a <ccc_set_direct+0x22>
   13c70:	4623      	mov	r3, r4
   13c72:	e7f2      	b.n	13c5a <ccc_set_direct+0xf2>
   13c74:	00032639 	.word	0x00032639
   13c78:	00031b3e 	.word	0x00031b3e
   13c7c:	0002fc2c 	.word	0x0002fc2c
   13c80:	0003247a 	.word	0x0003247a
   13c84:	01000003 	.word	0x01000003
   13c88:	00032496 	.word	0x00032496
   13c8c:	000324d3 	.word	0x000324d3
   13c90:	00012bfd 	.word	0x00012bfd

00013c94 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13c94:	2300      	movs	r3, #0
{
   13c96:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13c98:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13c9a:	f7ff fce5 	bl	13668 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   13c9e:	1c41      	adds	r1, r0, #1
   13ca0:	b289      	uxth	r1, r1
   13ca2:	4608      	mov	r0, r1
   13ca4:	4a03      	ldr	r2, [pc, #12]	; (13cb4 <bt_gatt_attr_next+0x20>)
   13ca6:	ab01      	add	r3, sp, #4
   13ca8:	f018 f965 	bl	2bf76 <bt_gatt_foreach_attr>
}
   13cac:	9801      	ldr	r0, [sp, #4]
   13cae:	b003      	add	sp, #12
   13cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   13cb4:	0002bd1f 	.word	0x0002bd1f

00013cb8 <bt_gatt_is_subscribed>:
{
   13cb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13cbc:	460c      	mov	r4, r1
   13cbe:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   13cc0:	4605      	mov	r5, r0
   13cc2:	b950      	cbnz	r0, 13cda <bt_gatt_is_subscribed+0x22>
   13cc4:	4953      	ldr	r1, [pc, #332]	; (13e14 <bt_gatt_is_subscribed+0x15c>)
   13cc6:	f640 424d 	movw	r2, #3149	; 0xc4d
   13cca:	4853      	ldr	r0, [pc, #332]	; (13e18 <bt_gatt_is_subscribed+0x160>)
   13ccc:	f014 ff7a 	bl	28bc4 <assert_print>
   13cd0:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   13cd4:	484f      	ldr	r0, [pc, #316]	; (13e14 <bt_gatt_is_subscribed+0x15c>)
   13cd6:	f014 ff6e 	bl	28bb6 <assert_post_action>
   13cda:	b941      	cbnz	r1, 13cee <bt_gatt_is_subscribed+0x36>
   13cdc:	494d      	ldr	r1, [pc, #308]	; (13e14 <bt_gatt_is_subscribed+0x15c>)
   13cde:	f640 424e 	movw	r2, #3150	; 0xc4e
   13ce2:	484d      	ldr	r0, [pc, #308]	; (13e18 <bt_gatt_is_subscribed+0x160>)
   13ce4:	f014 ff6e 	bl	28bc4 <assert_print>
   13ce8:	f640 414e 	movw	r1, #3150	; 0xc4e
   13cec:	e7f2      	b.n	13cd4 <bt_gatt_is_subscribed+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   13cee:	7a83      	ldrb	r3, [r0, #10]
   13cf0:	2b07      	cmp	r3, #7
   13cf2:	d110      	bne.n	13d16 <bt_gatt_is_subscribed+0x5e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   13cf4:	2300      	movs	r3, #0
   13cf6:	f88d 300c 	strb.w	r3, [sp, #12]
   13cfa:	f642 0303 	movw	r3, #10243	; 0x2803
   13cfe:	6820      	ldr	r0, [r4, #0]
   13d00:	a903      	add	r1, sp, #12
   13d02:	f8ad 300e 	strh.w	r3, [sp, #14]
   13d06:	f016 fdf1 	bl	2a8ec <bt_uuid_cmp>
   13d0a:	b9b0      	cbnz	r0, 13d3a <bt_gatt_is_subscribed+0x82>
		if (!(chrc->properties &
   13d0c:	68e3      	ldr	r3, [r4, #12]
   13d0e:	799b      	ldrb	r3, [r3, #6]
   13d10:	f013 0f30 	tst.w	r3, #48	; 0x30
   13d14:	d103      	bne.n	13d1e <bt_gatt_is_subscribed+0x66>
		return false;
   13d16:	2000      	movs	r0, #0
}
   13d18:	b004      	add	sp, #16
   13d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   13d1e:	4620      	mov	r0, r4
   13d20:	f7ff ffb8 	bl	13c94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   13d24:	4604      	mov	r4, r0
   13d26:	b940      	cbnz	r0, 13d3a <bt_gatt_is_subscribed+0x82>
   13d28:	493a      	ldr	r1, [pc, #232]	; (13e14 <bt_gatt_is_subscribed+0x15c>)
   13d2a:	f640 425f 	movw	r2, #3167	; 0xc5f
   13d2e:	483a      	ldr	r0, [pc, #232]	; (13e18 <bt_gatt_is_subscribed+0x160>)
   13d30:	f014 ff48 	bl	28bc4 <assert_print>
   13d34:	f640 415f 	movw	r1, #3167	; 0xc5f
   13d38:	e7cc      	b.n	13cd4 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13d3a:	2300      	movs	r3, #0
   13d3c:	6820      	ldr	r0, [r4, #0]
   13d3e:	f88d 300c 	strb.w	r3, [sp, #12]
   13d42:	f642 1302 	movw	r3, #10498	; 0x2902
   13d46:	a903      	add	r1, sp, #12
   13d48:	f8ad 300e 	strh.w	r3, [sp, #14]
   13d4c:	f016 fdce 	bl	2a8ec <bt_uuid_cmp>
   13d50:	b168      	cbz	r0, 13d6e <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   13d52:	4620      	mov	r0, r4
   13d54:	f7ff ff9e 	bl	13c94 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   13d58:	4604      	mov	r4, r0
   13d5a:	b940      	cbnz	r0, 13d6e <bt_gatt_is_subscribed+0xb6>
   13d5c:	492d      	ldr	r1, [pc, #180]	; (13e14 <bt_gatt_is_subscribed+0x15c>)
   13d5e:	f640 4265 	movw	r2, #3173	; 0xc65
   13d62:	482d      	ldr	r0, [pc, #180]	; (13e18 <bt_gatt_is_subscribed+0x160>)
   13d64:	f014 ff2e 	bl	28bc4 <assert_print>
   13d68:	f640 4165 	movw	r1, #3173	; 0xc65
   13d6c:	e7b2      	b.n	13cd4 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   13d6e:	2600      	movs	r6, #0
   13d70:	f642 1802 	movw	r8, #10498	; 0x2902
   13d74:	6820      	ldr	r0, [r4, #0]
   13d76:	4669      	mov	r1, sp
   13d78:	f88d 6000 	strb.w	r6, [sp]
   13d7c:	f8ad 8002 	strh.w	r8, [sp, #2]
   13d80:	f016 fdb4 	bl	2a8ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13d84:	b9d8      	cbnz	r0, 13dbe <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13d86:	2300      	movs	r3, #0
   13d88:	6820      	ldr	r0, [r4, #0]
   13d8a:	f88d 300c 	strb.w	r3, [sp, #12]
   13d8e:	f642 1302 	movw	r3, #10498	; 0x2902
   13d92:	a903      	add	r1, sp, #12
   13d94:	f8ad 300e 	strh.w	r3, [sp, #14]
   13d98:	f016 fda8 	bl	2a8ec <bt_uuid_cmp>
   13d9c:	2800      	cmp	r0, #0
   13d9e:	d1ba      	bne.n	13d16 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   13da0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   13da2:	4628      	mov	r0, r5
   13da4:	4622      	mov	r2, r4
   13da6:	f812 1b01 	ldrb.w	r1, [r2], #1
   13daa:	f017 f915 	bl	2afd8 <bt_conn_is_peer_addr_le>
   13dae:	2800      	cmp	r0, #0
   13db0:	d0b1      	beq.n	13d16 <bt_gatt_is_subscribed+0x5e>
   13db2:	8923      	ldrh	r3, [r4, #8]
   13db4:	421f      	tst	r7, r3
   13db6:	bf14      	ite	ne
   13db8:	2001      	movne	r0, #1
   13dba:	2000      	moveq	r0, #0
   13dbc:	e7ac      	b.n	13d18 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   13dbe:	f642 0303 	movw	r3, #10243	; 0x2803
   13dc2:	6820      	ldr	r0, [r4, #0]
   13dc4:	a901      	add	r1, sp, #4
   13dc6:	f88d 6004 	strb.w	r6, [sp, #4]
   13dca:	f8ad 3006 	strh.w	r3, [sp, #6]
   13dce:	f016 fd8d 	bl	2a8ec <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   13dd2:	2800      	cmp	r0, #0
   13dd4:	d0d7      	beq.n	13d86 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13dd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13dda:	6820      	ldr	r0, [r4, #0]
   13ddc:	a902      	add	r1, sp, #8
   13dde:	f88d 6008 	strb.w	r6, [sp, #8]
   13de2:	f8ad 300a 	strh.w	r3, [sp, #10]
   13de6:	f016 fd81 	bl	2a8ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   13dea:	2800      	cmp	r0, #0
   13dec:	d0cb      	beq.n	13d86 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   13dee:	f642 0301 	movw	r3, #10241	; 0x2801
   13df2:	6820      	ldr	r0, [r4, #0]
   13df4:	a903      	add	r1, sp, #12
   13df6:	f88d 600c 	strb.w	r6, [sp, #12]
   13dfa:	f8ad 300e 	strh.w	r3, [sp, #14]
   13dfe:	f016 fd75 	bl	2a8ec <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13e02:	2800      	cmp	r0, #0
   13e04:	d0bf      	beq.n	13d86 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   13e06:	4620      	mov	r0, r4
   13e08:	f7ff ff44 	bl	13c94 <bt_gatt_attr_next>
		if (!attr) {
   13e0c:	4604      	mov	r4, r0
   13e0e:	2800      	cmp	r0, #0
   13e10:	d1b0      	bne.n	13d74 <bt_gatt_is_subscribed+0xbc>
   13e12:	e780      	b.n	13d16 <bt_gatt_is_subscribed+0x5e>
   13e14:	0003243e 	.word	0x0003243e
   13e18:	00030da5 	.word	0x00030da5

00013e1c <gatt_indicate>:
{
   13e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e20:	4615      	mov	r5, r2
   13e22:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13e24:	2294      	movs	r2, #148	; 0x94
   13e26:	6869      	ldr	r1, [r5, #4]
{
   13e28:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   13e2a:	f018 f8b1 	bl	2bf90 <bt_gatt_check_perm>
   13e2e:	4680      	mov	r8, r0
   13e30:	2800      	cmp	r0, #0
   13e32:	d144      	bne.n	13ebe <gatt_indicate+0xa2>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   13e34:	2202      	movs	r2, #2
   13e36:	4630      	mov	r0, r6
   13e38:	6869      	ldr	r1, [r5, #4]
   13e3a:	f7ff ff3d 	bl	13cb8 <bt_gatt_is_subscribed>
   13e3e:	2800      	cmp	r0, #0
   13e40:	d040      	beq.n	13ec4 <gatt_indicate+0xa8>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13e42:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13e46:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   13e48:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13e4a:	f7fe fd23 	bl	12894 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   13e4e:	3702      	adds	r7, #2
	if (!req) {
   13e50:	4604      	mov	r4, r0
   13e52:	b160      	cbz	r0, 13e6e <gatt_indicate+0x52>
	req->func = func;
   13e54:	4b1d      	ldr	r3, [pc, #116]	; (13ecc <gatt_indicate+0xb0>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   13e56:	463a      	mov	r2, r7
	req->func = func;
   13e58:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   13e5a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   13e5c:	211d      	movs	r1, #29
   13e5e:	4630      	mov	r0, r6
   13e60:	f017 fd94 	bl	2b98c <bt_att_create_pdu>
	if (!buf) {
   13e64:	4607      	mov	r7, r0
   13e66:	b938      	cbnz	r0, 13e78 <gatt_indicate+0x5c>
		bt_att_req_free(req);
   13e68:	4620      	mov	r0, r4
   13e6a:	f7fe fd35 	bl	128d8 <bt_att_req_free>
		return -ENOMEM;
   13e6e:	f06f 050b 	mvn.w	r5, #11
}
   13e72:	4628      	mov	r0, r5
   13e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   13e78:	2301      	movs	r3, #1
   13e7a:	4642      	mov	r2, r8
   13e7c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   13e7e:	f107 0a0c 	add.w	sl, r7, #12
   13e82:	f017 fe2e 	bl	2bae2 <bt_att_set_tx_meta_data>
   13e86:	2102      	movs	r1, #2
   13e88:	4650      	mov	r0, sl
   13e8a:	f00c fa61 	bl	20350 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13e8e:	4680      	mov	r8, r0
   13e90:	f828 9b02 	strh.w	r9, [r8], #2
   13e94:	8aa9      	ldrh	r1, [r5, #20]
   13e96:	4650      	mov	r0, sl
   13e98:	f00c fa5a 	bl	20350 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   13e9c:	8aaa      	ldrh	r2, [r5, #20]
   13e9e:	6929      	ldr	r1, [r5, #16]
   13ea0:	4640      	mov	r0, r8
   13ea2:	f016 fb3a 	bl	2a51a <memcpy>
	err = bt_att_req_send(conn, req);
   13ea6:	4621      	mov	r1, r4
   13ea8:	4630      	mov	r0, r6
	req->buf = buf;
   13eaa:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   13eac:	f7fe fe3a 	bl	12b24 <bt_att_req_send>
	if (err) {
   13eb0:	4605      	mov	r5, r0
   13eb2:	2800      	cmp	r0, #0
   13eb4:	d0dd      	beq.n	13e72 <gatt_indicate+0x56>
		bt_att_req_free(req);
   13eb6:	4620      	mov	r0, r4
   13eb8:	f7fe fd0e 	bl	128d8 <bt_att_req_free>
   13ebc:	e7d9      	b.n	13e72 <gatt_indicate+0x56>
		return -EPERM;
   13ebe:	f04f 35ff 	mov.w	r5, #4294967295
   13ec2:	e7d6      	b.n	13e72 <gatt_indicate+0x56>
			return -EINVAL;
   13ec4:	f06f 0515 	mvn.w	r5, #21
   13ec8:	e7d3      	b.n	13e72 <gatt_indicate+0x56>
   13eca:	bf00      	nop
   13ecc:	0002bb0b 	.word	0x0002bb0b

00013ed0 <bt_gatt_indicate>:
{
   13ed0:	b530      	push	{r4, r5, lr}
   13ed2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13ed4:	460c      	mov	r4, r1
{
   13ed6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13ed8:	b951      	cbnz	r1, 13ef0 <bt_gatt_indicate+0x20>
   13eda:	4942      	ldr	r1, [pc, #264]	; (13fe4 <bt_gatt_indicate+0x114>)
   13edc:	f640 320d 	movw	r2, #2829	; 0xb0d
   13ee0:	4841      	ldr	r0, [pc, #260]	; (13fe8 <bt_gatt_indicate+0x118>)
   13ee2:	f014 fe6f 	bl	28bc4 <assert_print>
   13ee6:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   13eea:	483e      	ldr	r0, [pc, #248]	; (13fe4 <bt_gatt_indicate+0x114>)
   13eec:	f014 fe63 	bl	28bb6 <assert_post_action>
   13ef0:	684b      	ldr	r3, [r1, #4]
   13ef2:	b953      	cbnz	r3, 13f0a <bt_gatt_indicate+0x3a>
   13ef4:	680b      	ldr	r3, [r1, #0]
   13ef6:	b943      	cbnz	r3, 13f0a <bt_gatt_indicate+0x3a>
   13ef8:	493a      	ldr	r1, [pc, #232]	; (13fe4 <bt_gatt_indicate+0x114>)
   13efa:	f640 320e 	movw	r2, #2830	; 0xb0e
   13efe:	483a      	ldr	r0, [pc, #232]	; (13fe8 <bt_gatt_indicate+0x118>)
   13f00:	f014 fe60 	bl	28bc4 <assert_print>
   13f04:	f640 310e 	movw	r1, #2830	; 0xb0e
   13f08:	e7ef      	b.n	13eea <bt_gatt_indicate+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13f0a:	4838      	ldr	r0, [pc, #224]	; (13fec <bt_gatt_indicate+0x11c>)
   13f0c:	f017 fe7e 	bl	2bc0c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13f10:	0742      	lsls	r2, r0, #29
   13f12:	d561      	bpl.n	13fd8 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13f14:	b115      	cbz	r5, 13f1c <bt_gatt_indicate+0x4c>
   13f16:	7aab      	ldrb	r3, [r5, #10]
   13f18:	2b07      	cmp	r3, #7
   13f1a:	d160      	bne.n	13fde <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   13f1c:	6860      	ldr	r0, [r4, #4]
   13f1e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13f20:	f7ff fba2 	bl	13668 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   13f24:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13f26:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   13f2a:	b33a      	cbz	r2, 13f7c <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13f2c:	a905      	add	r1, sp, #20
   13f2e:	9102      	str	r1, [sp, #8]
   13f30:	492f      	ldr	r1, [pc, #188]	; (13ff0 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   13f32:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13f34:	9101      	str	r1, [sp, #4]
   13f36:	2101      	movs	r1, #1
   13f38:	9100      	str	r1, [sp, #0]
   13f3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13f3e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13f40:	f7ff fbd2 	bl	136e8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   13f44:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13f46:	b91b      	cbnz	r3, 13f50 <bt_gatt_indicate+0x80>
			return -ENOENT;
   13f48:	f06f 0001 	mvn.w	r0, #1
}
   13f4c:	b00b      	add	sp, #44	; 0x2c
   13f4e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   13f50:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13f52:	9b05      	ldr	r3, [sp, #20]
   13f54:	a904      	add	r1, sp, #16
   13f56:	6818      	ldr	r0, [r3, #0]
   13f58:	2300      	movs	r3, #0
   13f5a:	f88d 3010 	strb.w	r3, [sp, #16]
   13f5e:	f642 0303 	movw	r3, #10243	; 0x2803
   13f62:	f8ad 3012 	strh.w	r3, [sp, #18]
   13f66:	f016 fcc1 	bl	2a8ec <bt_uuid_cmp>
   13f6a:	b970      	cbnz	r0, 13f8a <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13f6c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   13f6e:	68c3      	ldr	r3, [r0, #12]
   13f70:	799b      	ldrb	r3, [r3, #6]
   13f72:	069b      	lsls	r3, r3, #26
   13f74:	d405      	bmi.n	13f82 <bt_gatt_indicate+0xb2>
			return -EINVAL;
   13f76:	f06f 0015 	mvn.w	r0, #21
   13f7a:	e7e7      	b.n	13f4c <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   13f7c:	2800      	cmp	r0, #0
   13f7e:	d1e8      	bne.n	13f52 <bt_gatt_indicate+0x82>
   13f80:	e7e2      	b.n	13f48 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13f82:	f017 ffaa 	bl	2beda <bt_gatt_attr_value_handle>
   13f86:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   13f8a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13f8e:	b13d      	cbz	r5, 13fa0 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   13f90:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   13f92:	4601      	mov	r1, r0
   13f94:	4622      	mov	r2, r4
   13f96:	4628      	mov	r0, r5
		params->_ref = 1;
   13f98:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   13f9a:	f7ff ff3f 	bl	13e1c <gatt_indicate>
   13f9e:	e7d5      	b.n	13f4c <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   13fa0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13fa4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   13fa6:	2302      	movs	r3, #2
   13fa8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13fac:	f642 1302 	movw	r3, #10498	; 0x2902
   13fb0:	f8ad 3012 	strh.w	r3, [sp, #18]
   13fb4:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   13fb6:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13fb8:	9302      	str	r3, [sp, #8]
   13fba:	4b0e      	ldr	r3, [pc, #56]	; (13ff4 <bt_gatt_indicate+0x124>)
   13fbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13fc0:	9301      	str	r3, [sp, #4]
   13fc2:	2301      	movs	r3, #1
   13fc4:	aa04      	add	r2, sp, #16
   13fc6:	9300      	str	r3, [sp, #0]
   13fc8:	462b      	mov	r3, r5
	data.ind_params = params;
   13fca:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13fcc:	f88d 5010 	strb.w	r5, [sp, #16]
   13fd0:	f7ff fb8a 	bl	136e8 <bt_gatt_foreach_attr_type>
	return data.err;
   13fd4:	9807      	ldr	r0, [sp, #28]
   13fd6:	e7b9      	b.n	13f4c <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   13fd8:	f06f 000a 	mvn.w	r0, #10
   13fdc:	e7b6      	b.n	13f4c <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   13fde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13fe2:	e7b3      	b.n	13f4c <bt_gatt_indicate+0x7c>
   13fe4:	0003243e 	.word	0x0003243e
   13fe8:	00030da5 	.word	0x00030da5
   13fec:	20008408 	.word	0x20008408
   13ff0:	0002bb31 	.word	0x0002bb31
   13ff4:	00014269 	.word	0x00014269

00013ff8 <sc_process>:
{
   13ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   13ffa:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   13ffe:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   14000:	f1a0 0720 	sub.w	r7, r0, #32
   14004:	4628      	mov	r0, r5
   14006:	f017 fe01 	bl	2bc0c <atomic_get>
   1400a:	0783      	lsls	r3, r0, #30
   1400c:	f3c0 0640 	ubfx	r6, r0, #1, #1
   14010:	d50a      	bpl.n	14028 <sc_process+0x30>
   14012:	4917      	ldr	r1, [pc, #92]	; (14070 <sc_process+0x78>)
   14014:	4817      	ldr	r0, [pc, #92]	; (14074 <sc_process+0x7c>)
   14016:	f240 429a 	movw	r2, #1178	; 0x49a
   1401a:	f014 fdd3 	bl	28bc4 <assert_print>
   1401e:	f240 419a 	movw	r1, #1178	; 0x49a
   14022:	4813      	ldr	r0, [pc, #76]	; (14070 <sc_process+0x78>)
   14024:	f014 fdc7 	bl	28bb6 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14028:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1402c:	f06f 0101 	mvn.w	r1, #1
   14030:	4628      	mov	r0, r5
   14032:	9301      	str	r3, [sp, #4]
   14034:	f017 fe3f 	bl	2bcb6 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14038:	4b0f      	ldr	r3, [pc, #60]	; (14078 <sc_process+0x80>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1403a:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1403c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14040:	4b0e      	ldr	r3, [pc, #56]	; (1407c <sc_process+0x84>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   14042:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   14044:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   14048:	ab01      	add	r3, sp, #4
   1404a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1404e:	2304      	movs	r3, #4
	sc->start = 0U;
   14050:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   14054:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   14058:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1405c:	f7ff ff38 	bl	13ed0 <bt_gatt_indicate>
   14060:	b918      	cbnz	r0, 1406a <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14062:	2102      	movs	r1, #2
   14064:	4628      	mov	r0, r5
   14066:	f017 fdd4 	bl	2bc12 <atomic_or>
}
   1406a:	b003      	add	sp, #12
   1406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1406e:	bf00      	nop
   14070:	0003243e 	.word	0x0003243e
   14074:	00030da5 	.word	0x00030da5
   14078:	00030478 	.word	0x00030478
   1407c:	0001359d 	.word	0x0001359d

00014080 <update_ccc>:
{
   14080:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14082:	4b2a      	ldr	r3, [pc, #168]	; (1412c <update_ccc+0xac>)
	struct bt_conn *conn = data->conn;
   14084:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   14086:	6882      	ldr	r2, [r0, #8]
{
   14088:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1408a:	429a      	cmp	r2, r3
{
   1408c:	b088      	sub	sp, #32
	if (attr->write != bt_gatt_attr_write_ccc) {
   1408e:	d14a      	bne.n	14126 <update_ccc+0xa6>
	ccc = attr->user_data;
   14090:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   14092:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14094:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   14096:	2b00      	cmp	r3, #0
   14098:	d045      	beq.n	14126 <update_ccc+0xa6>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1409a:	4620      	mov	r0, r4
   1409c:	7831      	ldrb	r1, [r6, #0]
   1409e:	f016 ff9b 	bl	2afd8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   140a2:	2800      	cmp	r0, #0
   140a4:	d03f      	beq.n	14126 <update_ccc+0xa6>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   140a6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   140aa:	4629      	mov	r1, r5
   140ac:	4620      	mov	r0, r4
   140ae:	f017 ff6f 	bl	2bf90 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   140b2:	2803      	cmp	r0, #3
   140b4:	d037      	beq.n	14126 <update_ccc+0xa6>
		gatt_ccc_changed(attr, ccc);
   140b6:	4631      	mov	r1, r6
   140b8:	4628      	mov	r0, r5
   140ba:	f017 fd1c 	bl	2baf6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   140be:	4b1c      	ldr	r3, [pc, #112]	; (14130 <update_ccc+0xb0>)
   140c0:	429e      	cmp	r6, r3
   140c2:	d130      	bne.n	14126 <update_ccc+0xa6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   140c4:	7a20      	ldrb	r0, [r4, #8]
   140c6:	f104 0190 	add.w	r1, r4, #144	; 0x90
   140ca:	f7fe fd73 	bl	12bb4 <find_sc_cfg>
	if (!cfg) {
   140ce:	b350      	cbz	r0, 14126 <update_ccc+0xa6>
	if (!(cfg->data.start || cfg->data.end)) {
   140d0:	8902      	ldrh	r2, [r0, #8]
   140d2:	8943      	ldrh	r3, [r0, #10]
   140d4:	ea52 0103 	orrs.w	r1, r2, r3
   140d8:	d025      	beq.n	14126 <update_ccc+0xa6>
	index = bt_conn_index(conn);
   140da:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   140dc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   140e0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   140e4:	f7fd f90c 	bl	11300 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   140e8:	2318      	movs	r3, #24
   140ea:	4912      	ldr	r1, [pc, #72]	; (14134 <update_ccc+0xb4>)
   140ec:	4a12      	ldr	r2, [pc, #72]	; (14138 <update_ccc+0xb8>)
   140ee:	fb03 1300 	mla	r3, r3, r0, r1
   140f2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   140f4:	4a11      	ldr	r2, [pc, #68]	; (1413c <update_ccc+0xbc>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   140f6:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   140f8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   140fa:	aa01      	add	r2, sp, #4
   140fc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   140fe:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14104:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   14108:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1410a:	4620      	mov	r0, r4
   1410c:	f7ff fee0 	bl	13ed0 <bt_gatt_indicate>
   14110:	b148      	cbz	r0, 14126 <update_ccc+0xa6>
		LOG_ERR("SC restore indication failed");
   14112:	4b0b      	ldr	r3, [pc, #44]	; (14140 <update_ccc+0xc0>)
   14114:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14118:	9307      	str	r3, [sp, #28]
   1411a:	2302      	movs	r3, #2
   1411c:	4809      	ldr	r0, [pc, #36]	; (14144 <update_ccc+0xc4>)
   1411e:	aa06      	add	r2, sp, #24
   14120:	9306      	str	r3, [sp, #24]
   14122:	f017 fdf9 	bl	2bd18 <z_log_msg_static_create.constprop.0>
}
   14126:	2001      	movs	r0, #1
   14128:	b008      	add	sp, #32
   1412a:	bd70      	pop	{r4, r5, r6, pc}
   1412c:	00013449 	.word	0x00013449
   14130:	20008780 	.word	0x20008780
   14134:	2000a8fc 	.word	0x2000a8fc
   14138:	00030478 	.word	0x00030478
   1413c:	0002be93 	.word	0x0002be93
   14140:	00032640 	.word	0x00032640
   14144:	0002fc2c 	.word	0x0002fc2c

00014148 <bt_gatt_notify_cb>:
{
   14148:	b530      	push	{r4, r5, lr}
   1414a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1414c:	460c      	mov	r4, r1
{
   1414e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14150:	b951      	cbnz	r1, 14168 <bt_gatt_notify_cb+0x20>
   14152:	4940      	ldr	r1, [pc, #256]	; (14254 <bt_gatt_notify_cb+0x10c>)
   14154:	f640 222d 	movw	r2, #2605	; 0xa2d
   14158:	483f      	ldr	r0, [pc, #252]	; (14258 <bt_gatt_notify_cb+0x110>)
   1415a:	f014 fd33 	bl	28bc4 <assert_print>
   1415e:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   14162:	483c      	ldr	r0, [pc, #240]	; (14254 <bt_gatt_notify_cb+0x10c>)
   14164:	f014 fd27 	bl	28bb6 <assert_post_action>
   14168:	684b      	ldr	r3, [r1, #4]
   1416a:	b953      	cbnz	r3, 14182 <bt_gatt_notify_cb+0x3a>
   1416c:	680b      	ldr	r3, [r1, #0]
   1416e:	b943      	cbnz	r3, 14182 <bt_gatt_notify_cb+0x3a>
   14170:	4938      	ldr	r1, [pc, #224]	; (14254 <bt_gatt_notify_cb+0x10c>)
   14172:	f640 222e 	movw	r2, #2606	; 0xa2e
   14176:	4838      	ldr	r0, [pc, #224]	; (14258 <bt_gatt_notify_cb+0x110>)
   14178:	f014 fd24 	bl	28bc4 <assert_print>
   1417c:	f640 212e 	movw	r1, #2606	; 0xa2e
   14180:	e7ef      	b.n	14162 <bt_gatt_notify_cb+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14182:	4836      	ldr	r0, [pc, #216]	; (1425c <bt_gatt_notify_cb+0x114>)
   14184:	f017 fd42 	bl	2bc0c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14188:	0742      	lsls	r2, r0, #29
   1418a:	d55d      	bpl.n	14248 <bt_gatt_notify_cb+0x100>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1418c:	b115      	cbz	r5, 14194 <bt_gatt_notify_cb+0x4c>
   1418e:	7aab      	ldrb	r3, [r5, #10]
   14190:	2b07      	cmp	r3, #7
   14192:	d15c      	bne.n	1424e <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   14194:	6860      	ldr	r0, [r4, #4]
   14196:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14198:	f7ff fa66 	bl	13668 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1419c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1419e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   141a2:	b33a      	cbz	r2, 141f4 <bt_gatt_notify_cb+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   141a4:	a905      	add	r1, sp, #20
   141a6:	9102      	str	r1, [sp, #8]
   141a8:	492d      	ldr	r1, [pc, #180]	; (14260 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   141aa:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   141ac:	9101      	str	r1, [sp, #4]
   141ae:	2101      	movs	r1, #1
   141b0:	9100      	str	r1, [sp, #0]
   141b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   141b6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   141b8:	f7ff fa96 	bl	136e8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   141bc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   141be:	b91b      	cbnz	r3, 141c8 <bt_gatt_notify_cb+0x80>
			return -ENOENT;
   141c0:	f06f 0001 	mvn.w	r0, #1
}
   141c4:	b00b      	add	sp, #44	; 0x2c
   141c6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   141c8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   141ca:	9b05      	ldr	r3, [sp, #20]
   141cc:	a904      	add	r1, sp, #16
   141ce:	6818      	ldr	r0, [r3, #0]
   141d0:	2300      	movs	r3, #0
   141d2:	f88d 3010 	strb.w	r3, [sp, #16]
   141d6:	f642 0303 	movw	r3, #10243	; 0x2803
   141da:	f8ad 3012 	strh.w	r3, [sp, #18]
   141de:	f016 fb85 	bl	2a8ec <bt_uuid_cmp>
   141e2:	b970      	cbnz	r0, 14202 <bt_gatt_notify_cb+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   141e4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   141e6:	68c3      	ldr	r3, [r0, #12]
   141e8:	799b      	ldrb	r3, [r3, #6]
   141ea:	06db      	lsls	r3, r3, #27
   141ec:	d405      	bmi.n	141fa <bt_gatt_notify_cb+0xb2>
			return -EINVAL;
   141ee:	f06f 0015 	mvn.w	r0, #21
   141f2:	e7e7      	b.n	141c4 <bt_gatt_notify_cb+0x7c>
		if (!data.handle) {
   141f4:	2800      	cmp	r0, #0
   141f6:	d1e8      	bne.n	141ca <bt_gatt_notify_cb+0x82>
   141f8:	e7e2      	b.n	141c0 <bt_gatt_notify_cb+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   141fa:	f017 fe6e 	bl	2beda <bt_gatt_attr_value_handle>
   141fe:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   14202:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14206:	b12d      	cbz	r5, 14214 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   14208:	4601      	mov	r1, r0
   1420a:	4622      	mov	r2, r4
   1420c:	4628      	mov	r0, r5
   1420e:	f017 fee8 	bl	2bfe2 <gatt_notify>
   14212:	e7d7      	b.n	141c4 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   14214:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14218:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1421c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1421e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14220:	f8ad 2012 	strh.w	r2, [sp, #18]
   14224:	aa05      	add	r2, sp, #20
   14226:	9202      	str	r2, [sp, #8]
   14228:	4a0e      	ldr	r2, [pc, #56]	; (14264 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1422a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1422e:	e9cd 3200 	strd	r3, r2, [sp]
   14232:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14236:	462b      	mov	r3, r5
   14238:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1423a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1423c:	f88d 5010 	strb.w	r5, [sp, #16]
   14240:	f7ff fa52 	bl	136e8 <bt_gatt_foreach_attr_type>
	return data.err;
   14244:	9807      	ldr	r0, [sp, #28]
   14246:	e7bd      	b.n	141c4 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   14248:	f06f 000a 	mvn.w	r0, #10
   1424c:	e7ba      	b.n	141c4 <bt_gatt_notify_cb+0x7c>
		return -ENOTCONN;
   1424e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14252:	e7b7      	b.n	141c4 <bt_gatt_notify_cb+0x7c>
   14254:	0003243e 	.word	0x0003243e
   14258:	00030da5 	.word	0x00030da5
   1425c:	20008408 	.word	0x20008408
   14260:	0002bb31 	.word	0x0002bb31
   14264:	00014269 	.word	0x00014269

00014268 <notify_cb>:
{
   14268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1426a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1426c:	4b38      	ldr	r3, [pc, #224]	; (14350 <notify_cb+0xe8>)
   1426e:	6882      	ldr	r2, [r0, #8]
{
   14270:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14272:	429a      	cmp	r2, r3
   14274:	d002      	beq.n	1427c <notify_cb+0x14>
		return BT_GATT_ITER_CONTINUE;
   14276:	2701      	movs	r7, #1
}
   14278:	4638      	mov	r0, r7
   1427a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1427c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1427e:	4b35      	ldr	r3, [pc, #212]	; (14354 <notify_cb+0xec>)
   14280:	429e      	cmp	r6, r3
   14282:	d04b      	beq.n	1431c <notify_cb+0xb4>
		if (cfg->value != data->type) {
   14284:	8932      	ldrh	r2, [r6, #8]
   14286:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14288:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   1428a:	429a      	cmp	r2, r3
   1428c:	d1f3      	bne.n	14276 <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1428e:	7830      	ldrb	r0, [r6, #0]
   14290:	f7fd f936 	bl	11500 <bt_conn_lookup_addr_le>
		if (!conn) {
   14294:	4604      	mov	r4, r0
   14296:	2800      	cmp	r0, #0
   14298:	d0ed      	beq.n	14276 <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
   1429a:	7a83      	ldrb	r3, [r0, #10]
   1429c:	2b07      	cmp	r3, #7
   1429e:	d005      	beq.n	142ac <notify_cb+0x44>
			bt_conn_unref(conn);
   142a0:	f7fc ff4c 	bl	1113c <bt_conn_unref>
			continue;
   142a4:	e7e7      	b.n	14276 <notify_cb+0xe>
			bt_conn_unref(conn);
   142a6:	f7fc ff49 	bl	1113c <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   142aa:	e7eb      	b.n	14284 <notify_cb+0x1c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   142ac:	6973      	ldr	r3, [r6, #20]
   142ae:	b123      	cbz	r3, 142ba <notify_cb+0x52>
   142b0:	4639      	mov	r1, r7
   142b2:	4798      	blx	r3
   142b4:	b908      	cbnz	r0, 142ba <notify_cb+0x52>
			bt_conn_unref(conn);
   142b6:	4620      	mov	r0, r4
   142b8:	e7f2      	b.n	142a0 <notify_cb+0x38>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   142ba:	4639      	mov	r1, r7
   142bc:	2294      	movs	r2, #148	; 0x94
   142be:	4620      	mov	r0, r4
   142c0:	f017 fe66 	bl	2bf90 <bt_gatt_check_perm>
   142c4:	4607      	mov	r7, r0
   142c6:	2800      	cmp	r0, #0
   142c8:	d1f5      	bne.n	142b6 <notify_cb+0x4e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   142ca:	89ab      	ldrh	r3, [r5, #12]
   142cc:	2b02      	cmp	r3, #2
   142ce:	d114      	bne.n	142fa <notify_cb+0x92>
   142d0:	8933      	ldrh	r3, [r6, #8]
   142d2:	079a      	lsls	r2, r3, #30
   142d4:	d405      	bmi.n	142e2 <notify_cb+0x7a>
		bt_conn_unref(conn);
   142d6:	4620      	mov	r0, r4
   142d8:	f7fc ff30 	bl	1113c <bt_conn_unref>
		data->err = 0;
   142dc:	2300      	movs	r3, #0
   142de:	60ab      	str	r3, [r5, #8]
   142e0:	e7c9      	b.n	14276 <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   142e2:	4620      	mov	r0, r4
   142e4:	692a      	ldr	r2, [r5, #16]
   142e6:	88a9      	ldrh	r1, [r5, #4]
   142e8:	f7ff fd98 	bl	13e1c <gatt_indicate>
			if (err == 0) {
   142ec:	4606      	mov	r6, r0
   142ee:	b978      	cbnz	r0, 14310 <notify_cb+0xa8>
				data->ind_params->_ref++;
   142f0:	692a      	ldr	r2, [r5, #16]
   142f2:	7d93      	ldrb	r3, [r2, #22]
   142f4:	3301      	adds	r3, #1
   142f6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   142f8:	e7ed      	b.n	142d6 <notify_cb+0x6e>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   142fa:	2b01      	cmp	r3, #1
   142fc:	d1eb      	bne.n	142d6 <notify_cb+0x6e>
   142fe:	8933      	ldrh	r3, [r6, #8]
   14300:	07db      	lsls	r3, r3, #31
   14302:	d5e8      	bpl.n	142d6 <notify_cb+0x6e>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   14304:	4620      	mov	r0, r4
   14306:	692a      	ldr	r2, [r5, #16]
   14308:	88a9      	ldrh	r1, [r5, #4]
   1430a:	f017 fe6a 	bl	2bfe2 <gatt_notify>
   1430e:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   14310:	4620      	mov	r0, r4
   14312:	f7fc ff13 	bl	1113c <bt_conn_unref>
		if (err < 0) {
   14316:	2e00      	cmp	r6, #0
   14318:	dbae      	blt.n	14278 <notify_cb+0x10>
   1431a:	e7df      	b.n	142dc <notify_cb+0x74>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1431c:	4c0e      	ldr	r4, [pc, #56]	; (14358 <notify_cb+0xf0>)
   1431e:	490f      	ldr	r1, [pc, #60]	; (1435c <notify_cb+0xf4>)
   14320:	4620      	mov	r0, r4
   14322:	f017 fc5e 	bl	2bbe2 <bt_addr_le_eq>
   14326:	2800      	cmp	r0, #0
   14328:	d1ac      	bne.n	14284 <notify_cb+0x1c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1432a:	2207      	movs	r2, #7
   1432c:	4621      	mov	r1, r4
   1432e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   14332:	f7fd f8ff 	bl	11534 <bt_conn_lookup_state_le>
			if (!conn) {
   14336:	2800      	cmp	r0, #0
   14338:	d1b5      	bne.n	142a6 <notify_cb+0x3e>
				sc = (struct sc_data *)data->ind_params->data;
   1433a:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1433c:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1433e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   14340:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   14344:	8853      	ldrh	r3, [r2, #2]
   14346:	8812      	ldrh	r2, [r2, #0]
   14348:	f7fe fe0c 	bl	12f64 <sc_save>
				continue;
   1434c:	e79a      	b.n	14284 <notify_cb+0x1c>
   1434e:	bf00      	nop
   14350:	00013449 	.word	0x00013449
   14354:	20008780 	.word	0x20008780
   14358:	2000b129 	.word	0x2000b129
   1435c:	00031ac5 	.word	0x00031ac5

00014360 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14360:	2301      	movs	r3, #1
{
   14362:	b530      	push	{r4, r5, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14364:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   14368:	b08f      	sub	sp, #60	; 0x3c
   1436a:	4604      	mov	r4, r0
	data.conn = conn;
   1436c:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1436e:	4629      	mov	r1, r5
   14370:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   14372:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14376:	f016 fb96 	bl	2aaa6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1437a:	b190      	cbz	r0, 143a2 <bt_gatt_connected+0x42>
		if (conn->id) {
   1437c:	7a22      	ldrb	r2, [r4, #8]
   1437e:	b1ca      	cbz	r2, 143b4 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14380:	ac02      	add	r4, sp, #8
   14382:	2104      	movs	r1, #4
   14384:	4620      	mov	r0, r4
   14386:	f014 f985 	bl	28694 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1438a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1438c:	2124      	movs	r1, #36	; 0x24
   1438e:	4a0a      	ldr	r2, [pc, #40]	; (143b8 <bt_gatt_connected+0x58>)
   14390:	a805      	add	r0, sp, #20
   14392:	462b      	mov	r3, r5
   14394:	f7f9 fc0e 	bl	dbb4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14398:	aa05      	add	r2, sp, #20
   1439a:	4610      	mov	r0, r2
   1439c:	4907      	ldr	r1, [pc, #28]	; (143bc <bt_gatt_connected+0x5c>)
   1439e:	f7f7 fefd 	bl	c19c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   143a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   143a6:	2001      	movs	r0, #1
   143a8:	4a05      	ldr	r2, [pc, #20]	; (143c0 <bt_gatt_connected+0x60>)
   143aa:	ab03      	add	r3, sp, #12
   143ac:	f017 fde3 	bl	2bf76 <bt_gatt_foreach_attr>
}
   143b0:	b00f      	add	sp, #60	; 0x3c
   143b2:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   143b4:	9200      	str	r2, [sp, #0]
   143b6:	e7e9      	b.n	1438c <bt_gatt_connected+0x2c>
   143b8:	0003263c 	.word	0x0003263c
   143bc:	00013b69 	.word	0x00013b69
   143c0:	00014081 	.word	0x00014081

000143c4 <bt_gatt_att_max_mtu_changed>:
{
   143c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143c6:	4605      	mov	r5, r0
   143c8:	460e      	mov	r6, r1
   143ca:	4617      	mov	r7, r2
	return list->head;
   143cc:	4b06      	ldr	r3, [pc, #24]	; (143e8 <bt_gatt_att_max_mtu_changed+0x24>)
   143ce:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   143d0:	b14c      	cbz	r4, 143e6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   143d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   143d6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   143d8:	b11b      	cbz	r3, 143e2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   143da:	463a      	mov	r2, r7
   143dc:	4631      	mov	r1, r6
   143de:	4628      	mov	r0, r5
   143e0:	4798      	blx	r3
	return node->next;
   143e2:	6864      	ldr	r4, [r4, #4]
   143e4:	e7f4      	b.n	143d0 <bt_gatt_att_max_mtu_changed+0xc>
}
   143e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143e8:	2000a934 	.word	0x2000a934

000143ec <bt_gatt_store_ccc>:
	save.count = 0;
   143ec:	2300      	movs	r3, #0
{
   143ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   143f0:	4604      	mov	r4, r0
   143f2:	b0c1      	sub	sp, #260	; 0x104
   143f4:	af02      	add	r7, sp, #8
   143f6:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   143f8:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   143fa:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   143fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   14402:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14406:	2001      	movs	r0, #1
   14408:	4a1b      	ldr	r2, [pc, #108]	; (14478 <bt_gatt_store_ccc+0x8c>)
   1440a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1440e:	f017 fdb2 	bl	2bf76 <bt_gatt_foreach_attr>
	if (id) {
   14412:	b364      	cbz	r4, 1446e <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   14414:	1d3e      	adds	r6, r7, #4
   14416:	4622      	mov	r2, r4
   14418:	2104      	movs	r1, #4
   1441a:	4630      	mov	r0, r6
   1441c:	f014 f93a 	bl	28694 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   14420:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14422:	4a16      	ldr	r2, [pc, #88]	; (1447c <bt_gatt_store_ccc+0x90>)
   14424:	462b      	mov	r3, r5
   14426:	2124      	movs	r1, #36	; 0x24
   14428:	f107 0008 	add.w	r0, r7, #8
   1442c:	f7f9 fbc2 	bl	dbb4 <bt_settings_encode_key>
	if (save.count) {
   14430:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   14434:	b1ea      	cbz	r2, 14472 <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   14436:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   14438:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1443c:	f107 0008 	add.w	r0, r7, #8
   14440:	f7f7 fe4c 	bl	c0dc <settings_save_one>
	if (err) {
   14444:	4604      	mov	r4, r0
   14446:	b170      	cbz	r0, 14466 <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   14448:	466d      	mov	r5, sp
   1444a:	b088      	sub	sp, #32
   1444c:	aa02      	add	r2, sp, #8
   1444e:	4b0c      	ldr	r3, [pc, #48]	; (14480 <bt_gatt_store_ccc+0x94>)
   14450:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14454:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14458:	2303      	movs	r3, #3
   1445a:	480a      	ldr	r0, [pc, #40]	; (14484 <bt_gatt_store_ccc+0x98>)
   1445c:	f842 3f10 	str.w	r3, [r2, #16]!
   14460:	f017 fc5a 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   14464:	46ad      	mov	sp, r5
}
   14466:	4620      	mov	r0, r4
   14468:	37fc      	adds	r7, #252	; 0xfc
   1446a:	46bd      	mov	sp, r7
   1446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1446e:	9400      	str	r4, [sp, #0]
   14470:	e7d7      	b.n	14422 <bt_gatt_store_ccc+0x36>
		str = NULL;
   14472:	4611      	mov	r1, r2
   14474:	e7e2      	b.n	1443c <bt_gatt_store_ccc+0x50>
   14476:	bf00      	nop
   14478:	00013219 	.word	0x00013219
   1447c:	0003263c 	.word	0x0003263c
   14480:	0003265d 	.word	0x0003265d
   14484:	0002fc2c 	.word	0x0002fc2c

00014488 <bt_gatt_service_unregister>:
{
   14488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
   1448c:	4604      	mov	r4, r0
   1448e:	b950      	cbnz	r0, 144a6 <bt_gatt_service_unregister+0x1e>
   14490:	4940      	ldr	r1, [pc, #256]	; (14594 <bt_gatt_service_unregister+0x10c>)
   14492:	4841      	ldr	r0, [pc, #260]	; (14598 <bt_gatt_service_unregister+0x110>)
   14494:	f240 52ea 	movw	r2, #1514	; 0x5ea
   14498:	f014 fb94 	bl	28bc4 <assert_print>
   1449c:	f240 51ea 	movw	r1, #1514	; 0x5ea
   144a0:	483c      	ldr	r0, [pc, #240]	; (14594 <bt_gatt_service_unregister+0x10c>)
   144a2:	f014 fb88 	bl	28bb6 <assert_post_action>
	k_sched_lock();
   144a6:	f012 fb5d 	bl	26b64 <k_sched_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   144aa:	2100      	movs	r1, #0
	return list->head;
   144ac:	4b3b      	ldr	r3, [pc, #236]	; (1459c <bt_gatt_service_unregister+0x114>)
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
   144ae:	f104 0008 	add.w	r0, r4, #8
   144b2:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   144b4:	b92a      	cbnz	r2, 144c2 <bt_gatt_service_unregister+0x3a>
		k_sched_unlock();
   144b6:	f012 fba1 	bl	26bfc <k_sched_unlock>
		return err;
   144ba:	f06f 0001 	mvn.w	r0, #1
}
   144be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c2:	4290      	cmp	r0, r2
   144c4:	d121      	bne.n	1450a <bt_gatt_service_unregister+0x82>
	return node->next;
   144c6:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   144c8:	b9c9      	cbnz	r1, 144fe <bt_gatt_service_unregister+0x76>
   144ca:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   144cc:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   144ce:	4288      	cmp	r0, r1
   144d0:	d100      	bne.n	144d4 <bt_gatt_service_unregister+0x4c>
	list->tail = node;
   144d2:	605a      	str	r2, [r3, #4]
	parent->next = child;
   144d4:	2600      	movs	r6, #0
		struct bt_gatt_attr *attr = &svc->attrs[i];
   144d6:	f04f 0a14 	mov.w	sl, #20
		if (attr->write == bt_gatt_attr_write_ccc) {
   144da:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 145a0 <bt_gatt_service_unregister+0x118>
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   144de:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 145a4 <bt_gatt_service_unregister+0x11c>
   144e2:	60a6      	str	r6, [r4, #8]
	for (uint16_t i = 0; i < svc->attr_count; i++) {
   144e4:	6863      	ldr	r3, [r4, #4]
   144e6:	b2b2      	uxth	r2, r6
   144e8:	4293      	cmp	r3, r2
   144ea:	d811      	bhi.n	14510 <bt_gatt_service_unregister+0x88>
	if (!atomic_get(&init)) {
   144ec:	482e      	ldr	r0, [pc, #184]	; (145a8 <bt_gatt_service_unregister+0x120>)
   144ee:	f017 fb8d 	bl	2bc0c <atomic_get>
   144f2:	2800      	cmp	r0, #0
   144f4:	d141      	bne.n	1457a <bt_gatt_service_unregister+0xf2>
	k_sched_unlock();
   144f6:	f012 fb81 	bl	26bfc <k_sched_unlock>
		return 0;
   144fa:	2000      	movs	r0, #0
   144fc:	e7df      	b.n	144be <bt_gatt_service_unregister+0x36>
   144fe:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   14500:	685a      	ldr	r2, [r3, #4]
   14502:	4290      	cmp	r0, r2
	list->tail = node;
   14504:	bf08      	it	eq
   14506:	6059      	streq	r1, [r3, #4]
}
   14508:	e7e4      	b.n	144d4 <bt_gatt_service_unregister+0x4c>
	return node->next;
   1450a:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1450c:	6812      	ldr	r2, [r2, #0]
   1450e:	e7d1      	b.n	144b4 <bt_gatt_service_unregister+0x2c>
		struct bt_gatt_attr *attr = &svc->attrs[i];
   14510:	6823      	ldr	r3, [r4, #0]
   14512:	fb0a 3302 	mla	r3, sl, r2, r3
		if (attr->write == bt_gatt_attr_write_ccc) {
   14516:	689a      	ldr	r2, [r3, #8]
   14518:	455a      	cmp	r2, fp
   1451a:	d001      	beq.n	14520 <bt_gatt_service_unregister+0x98>
	for (uint16_t i = 0; i < svc->attr_count; i++) {
   1451c:	3601      	adds	r6, #1
   1451e:	e7e1      	b.n	144e4 <bt_gatt_service_unregister+0x5c>
			gatt_unregister_ccc(attr->user_data);
   14520:	68dd      	ldr	r5, [r3, #12]
	ccc->value = 0;
   14522:	2300      	movs	r3, #0
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   14524:	1c6f      	adds	r7, r5, #1
   14526:	4649      	mov	r1, r9
   14528:	4638      	mov	r0, r7
	ccc->value = 0;
   1452a:	816b      	strh	r3, [r5, #10]
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1452c:	f017 fb59 	bl	2bbe2 <bt_addr_le_eq>
   14530:	2800      	cmp	r0, #0
   14532:	d1f3      	bne.n	1451c <bt_gatt_service_unregister+0x94>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14534:	4639      	mov	r1, r7
   14536:	7828      	ldrb	r0, [r5, #0]
   14538:	f7fc ffe2 	bl	11500 <bt_conn_lookup_addr_le>
			if (conn) {
   1453c:	4680      	mov	r8, r0
   1453e:	b188      	cbz	r0, 14564 <bt_gatt_service_unregister+0xdc>
				if (conn->state == BT_CONN_CONNECTED) {
   14540:	7a83      	ldrb	r3, [r0, #10]
   14542:	2b07      	cmp	r3, #7
   14544:	d10c      	bne.n	14560 <bt_gatt_service_unregister+0xd8>
					gatt_ccc_conn_enqueue(conn);
   14546:	f7fe fbd5 	bl	12cf4 <gatt_ccc_conn_enqueue>
				bt_conn_unref(conn);
   1454a:	4640      	mov	r0, r8
   1454c:	f7fc fdf6 	bl	1113c <bt_conn_unref>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14550:	4649      	mov	r1, r9
   14552:	4638      	mov	r0, r7
   14554:	f017 fb68 	bl	2bc28 <bt_addr_le_copy>
	cfg->id = 0U;
   14558:	2300      	movs	r3, #0
   1455a:	702b      	strb	r3, [r5, #0]
	cfg->value = 0U;
   1455c:	812b      	strh	r3, [r5, #8]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1455e:	e7dd      	b.n	1451c <bt_gatt_service_unregister+0x94>
				bt_conn_unref(conn);
   14560:	f7fc fdec 	bl	1113c <bt_conn_unref>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   14564:	4639      	mov	r1, r7
   14566:	7828      	ldrb	r0, [r5, #0]
   14568:	f016 fa9d 	bl	2aaa6 <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
   1456c:	2800      	cmp	r0, #0
   1456e:	d0ef      	beq.n	14550 <bt_gatt_service_unregister+0xc8>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
   14570:	4639      	mov	r1, r7
   14572:	7828      	ldrb	r0, [r5, #0]
   14574:	f7ff ff3a 	bl	143ec <bt_gatt_store_ccc>
   14578:	e7ea      	b.n	14550 <bt_gatt_service_unregister+0xc8>
	sc_indicate(svc->attrs[0].handle,
   1457a:	2114      	movs	r1, #20
		    svc->attrs[svc->attr_count - 1].handle);
   1457c:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
   14580:	fb01 2303 	mla	r3, r1, r3, r2
   14584:	8a10      	ldrh	r0, [r2, #16]
   14586:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   1458a:	f7fe ff1b 	bl	133c4 <sc_indicate>
	db_changed();
   1458e:	f7fe fe5f 	bl	13250 <db_changed>
   14592:	e7b0      	b.n	144f6 <bt_gatt_service_unregister+0x6e>
   14594:	0003243e 	.word	0x0003243e
   14598:	00030da5 	.word	0x00030da5
   1459c:	2000a92c 	.word	0x2000a92c
   145a0:	00013449 	.word	0x00013449
   145a4:	00031ac5 	.word	0x00031ac5
   145a8:	2000a928 	.word	0x2000a928

000145ac <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b0:	4604      	mov	r4, r0
   145b2:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   145b4:	4603      	mov	r3, r0
   145b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   145ba:	2001      	movs	r0, #1
   145bc:	4a3d      	ldr	r2, [pc, #244]	; (146b4 <bt_gatt_disconnected+0x108>)
{
   145be:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   145c0:	f017 fcd9 	bl	2bf76 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   145c4:	4620      	mov	r0, r4
   145c6:	f7fc fe9b 	bl	11300 <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   145ca:	4e3b      	ldr	r6, [pc, #236]	; (146b8 <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   145cc:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   145ce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   145d2:	b120      	cbz	r0, 145de <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   145d4:	f7fc fdb2 	bl	1113c <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   145d8:	2300      	movs	r3, #0
   145da:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   145de:	4837      	ldr	r0, [pc, #220]	; (146bc <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   145e0:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   145e4:	f012 f84e 	bl	26684 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   145e8:	4629      	mov	r1, r5
   145ea:	7a20      	ldrb	r0, [r4, #8]
   145ec:	f016 fa5b 	bl	2aaa6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   145f0:	2800      	cmp	r0, #0
   145f2:	d038      	beq.n	14666 <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   145f4:	4629      	mov	r1, r5
   145f6:	7a20      	ldrb	r0, [r4, #8]
   145f8:	f7ff fef8 	bl	143ec <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   145fc:	4620      	mov	r0, r4
   145fe:	f7fe fac1 	bl	12b84 <find_cf_cfg>
	if (!cfg) {
   14602:	4606      	mov	r6, r0
   14604:	2800      	cmp	r0, #0
   14606:	d04e      	beq.n	146a6 <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   14608:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   1460a:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   1460e:	3608      	adds	r6, #8
		if (conn->id) {
   14610:	b162      	cbz	r2, 1462c <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14612:	2104      	movs	r1, #4
   14614:	4638      	mov	r0, r7
   14616:	f014 f83d 	bl	28694 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1461a:	462b      	mov	r3, r5
   1461c:	2124      	movs	r1, #36	; 0x24
   1461e:	4a28      	ldr	r2, [pc, #160]	; (146c0 <bt_gatt_disconnected+0x114>)
   14620:	9700      	str	r7, [sp, #0]
   14622:	1d38      	adds	r0, r7, #4
   14624:	f7f9 fac6 	bl	dbb4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   14628:	7a23      	ldrb	r3, [r4, #8]
   1462a:	b93b      	cbnz	r3, 1463c <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1462c:	2300      	movs	r3, #0
   1462e:	2124      	movs	r1, #36	; 0x24
   14630:	9300      	str	r3, [sp, #0]
   14632:	4a23      	ldr	r2, [pc, #140]	; (146c0 <bt_gatt_disconnected+0x114>)
   14634:	462b      	mov	r3, r5
   14636:	1d38      	adds	r0, r7, #4
   14638:	f7f9 fabc 	bl	dbb4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1463c:	4642      	mov	r2, r8
   1463e:	4631      	mov	r1, r6
   14640:	1d38      	adds	r0, r7, #4
   14642:	f7f7 fd4b 	bl	c0dc <settings_save_one>
	if (err) {
   14646:	b170      	cbz	r0, 14666 <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   14648:	466e      	mov	r6, sp
   1464a:	b088      	sub	sp, #32
   1464c:	aa02      	add	r2, sp, #8
   1464e:	4b1d      	ldr	r3, [pc, #116]	; (146c4 <bt_gatt_disconnected+0x118>)
   14650:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14654:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14658:	2303      	movs	r3, #3
   1465a:	481b      	ldr	r0, [pc, #108]	; (146c8 <bt_gatt_disconnected+0x11c>)
   1465c:	f842 3f10 	str.w	r3, [r2, #16]!
   14660:	f017 fb5a 	bl	2bd18 <z_log_msg_static_create.constprop.0>
   14664:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14666:	4629      	mov	r1, r5
   14668:	7a20      	ldrb	r0, [r4, #8]
   1466a:	f016 fa1c 	bl	2aaa6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1466e:	b148      	cbz	r0, 14684 <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   14670:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14672:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   14676:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14678:	2001      	movs	r0, #1
   1467a:	4a14      	ldr	r2, [pc, #80]	; (146cc <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   1467c:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1467e:	1d3b      	adds	r3, r7, #4
   14680:	f017 fc79 	bl	2bf76 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   14684:	4620      	mov	r0, r4
   14686:	f7fe fa7d 	bl	12b84 <find_cf_cfg>
	if (!cfg) {
   1468a:	4606      	mov	r6, r0
   1468c:	b138      	cbz	r0, 1469e <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1468e:	4629      	mov	r1, r5
   14690:	7a20      	ldrb	r0, [r4, #8]
   14692:	f016 fa08 	bl	2aaa6 <bt_addr_le_is_bonded>
   14696:	b940      	cbnz	r0, 146aa <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   14698:	4630      	mov	r0, r6
   1469a:	f7fe fced 	bl	13078 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1469e:	3728      	adds	r7, #40	; 0x28
   146a0:	46bd      	mov	sp, r7
   146a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   146a6:	4680      	mov	r8, r0
   146a8:	e7c0      	b.n	1462c <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   146aa:	4629      	mov	r1, r5
   146ac:	1c70      	adds	r0, r6, #1
   146ae:	f017 fabb 	bl	2bc28 <bt_addr_le_copy>
}
   146b2:	e7f4      	b.n	1469e <bt_gatt_disconnected+0xf2>
   146b4:	000134fd 	.word	0x000134fd
   146b8:	20009d90 	.word	0x20009d90
   146bc:	20009d98 	.word	0x20009d98
   146c0:	000326a7 	.word	0x000326a7
   146c4:	0003267b 	.word	0x0003267b
   146c8:	0002fc2c 	.word	0x0002fc2c
   146cc:	000131f1 	.word	0x000131f1

000146d0 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   146d0:	b580      	push	{r7, lr}
   146d2:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   146d4:	b088      	sub	sp, #32
   146d6:	466a      	mov	r2, sp
   146d8:	4b07      	ldr	r3, [pc, #28]	; (146f8 <bt_smp_accept.part.0+0x28>)
   146da:	e9c2 3005 	strd	r3, r0, [r2, #20]
   146de:	2303      	movs	r3, #3
   146e0:	f842 3f10 	str.w	r3, [r2, #16]!
   146e4:	2300      	movs	r3, #0
   146e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   146ea:	4804      	ldr	r0, [pc, #16]	; (146fc <bt_smp_accept.part.0+0x2c>)
   146ec:	f7f6 fa36 	bl	ab5c <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   146f0:	f06f 000b 	mvn.w	r0, #11
   146f4:	46bd      	mov	sp, r7
   146f6:	bd80      	pop	{r7, pc}
   146f8:	000326b8 	.word	0x000326b8
   146fc:	0002fd3c 	.word	0x0002fd3c

00014700 <bt_smp_accept>:
		if (smp->chan.conn) {
   14700:	4b04      	ldr	r3, [pc, #16]	; (14714 <bt_smp_accept+0x14>)
   14702:	681a      	ldr	r2, [r3, #0]
   14704:	b10a      	cbz	r2, 1470a <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   14706:	f7ff bfe3 	b.w	146d0 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1470a:	4803      	ldr	r0, [pc, #12]	; (14718 <bt_smp_accept+0x18>)
   1470c:	6058      	str	r0, [r3, #4]
}
   1470e:	4610      	mov	r0, r2
		*chan = &smp->chan;
   14710:	600b      	str	r3, [r1, #0]
}
   14712:	4770      	bx	lr
   14714:	2000a93c 	.word	0x2000a93c
   14718:	0003057c 	.word	0x0003057c

0001471c <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
   1471c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1471e:	4c24      	ldr	r4, [pc, #144]	; (147b0 <bt_mesh_reset+0x94>)
   14720:	e8d4 3faf 	lda	r3, [r4]
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID) ||
   14724:	079a      	lsls	r2, r3, #30
   14726:	d542      	bpl.n	147ae <bt_mesh_reset+0x92>
   14728:	e8d4 3faf 	lda	r3, [r4]
   1472c:	07db      	lsls	r3, r3, #31
   1472e:	d53e      	bpl.n	147ae <bt_mesh_reset+0x92>
	    !atomic_test_bit(bt_mesh.flags, BT_MESH_INIT)) {
		return;
	}

	bt_mesh.iv_index = 0U;
   14730:	2500      	movs	r5, #0
	bt_mesh.ivu_duration = 0;
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
   14732:	2204      	movs	r2, #4
   14734:	4629      	mov	r1, r5
   14736:	4620      	mov	r0, r4
	bt_mesh.iv_index = 0U;
   14738:	f1a4 0608 	sub.w	r6, r4, #8
   1473c:	f844 5c08 	str.w	r5, [r4, #-8]
	bt_mesh.ivu_duration = 0;
   14740:	f886 51f8 	strb.w	r5, [r6, #504]	; 0x1f8
	bt_mesh.seq = 0U;
   14744:	6075      	str	r5, [r6, #4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
   14746:	f015 fef3 	bl	2a530 <memset>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1474a:	e8d4 3fef 	ldaex	r3, [r4]
   1474e:	f043 0301 	orr.w	r3, r3, #1
   14752:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14756:	2a00      	cmp	r2, #0
   14758:	d1f7      	bne.n	1474a <bt_mesh_reset+0x2e>
	atomic_set_bit(bt_mesh.flags, BT_MESH_INIT);

	bt_mesh_scan_disable();
   1475a:	f000 fb77 	bl	14e4c <bt_mesh_scan_disable>

	/* If this fails, the work handler will return early on the next
	 * execution, as the device is not provisioned. If the device is
	 * reprovisioned, the timer is always restarted.
	 */
	(void)k_work_cancel_delayable(&bt_mesh.ivu_timer);
   1475e:	f506 7000 	add.w	r0, r6, #512	; 0x200
   14762:	f011 ff8f 	bl	26684 <k_work_cancel_delayable>

	bt_mesh_model_reset();
   14766:	f006 fe37 	bl	1b3d8 <bt_mesh_model_reset>
	bt_mesh_cfg_default_set();
   1476a:	f000 fa67 	bl	14c3c <bt_mesh_cfg_default_set>
	bt_mesh_trans_reset();
   1476e:	f002 ffaf 	bl	176d0 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
   14772:	f002 faa7 	bl	16cc4 <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
   14776:	f001 ff59 	bl	1662c <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
   1477a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1477e:	f001 fa23 	bl	15bc8 <bt_mesh_net_loopback_clear>

		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
   14782:	f008 fa19 	bl	1cbb8 <bt_mesh_friends_clear>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		(void)bt_mesh_proxy_gatt_disable();
   14786:	f00a ff87 	bl	1f698 <bt_mesh_proxy_gatt_disable>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_CLIENT)) {
		bt_mesh_gatt_client_deinit();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
   1478a:	f017 fdf6 	bl	2c37a <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   1478e:	4629      	mov	r1, r5
   14790:	2210      	movs	r2, #16
   14792:	f506 700c 	add.w	r0, r6, #560	; 0x230
   14796:	f015 fecb 	bl	2a530 <memset>

	bt_mesh_beacon_disable();
   1479a:	f000 fdcd 	bl	15338 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
   1479e:	f004 fdb3 	bl	19308 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_store_pending();
   147a2:	f007 fb55 	bl	1be50 <bt_mesh_settings_store_pending>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
   147a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_reset();
   147aa:	f009 b823 	b.w	1d7f4 <bt_mesh_prov_reset>
}
   147ae:	bd70      	pop	{r4, r5, r6, pc}
   147b0:	20009ed0 	.word	0x20009ed0

000147b4 <bt_mesh_is_provisioned>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147b4:	4b02      	ldr	r3, [pc, #8]	; (147c0 <bt_mesh_is_provisioned+0xc>)
   147b6:	e8d3 0faf 	lda	r0, [r3]

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
   147ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
   147be:	4770      	bx	lr
   147c0:	20009ed0 	.word	0x20009ed0

000147c4 <bt_mesh_init>:
	return err;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
   147c4:	b538      	push	{r3, r4, r5, lr}
   147c6:	4605      	mov	r5, r0
   147c8:	4608      	mov	r0, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   147ca:	4b13      	ldr	r3, [pc, #76]	; (14818 <bt_mesh_init+0x54>)
   147cc:	e8d3 2fef 	ldaex	r2, [r3]
   147d0:	f042 0101 	orr.w	r1, r2, #1
   147d4:	e8c3 1fe4 	stlex	r4, r1, [r3]
   147d8:	2c00      	cmp	r4, #0
   147da:	d1f7      	bne.n	147cc <bt_mesh_init+0x8>
	int err;

	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_INIT)) {
   147dc:	07d3      	lsls	r3, r2, #31
   147de:	d418      	bmi.n	14812 <bt_mesh_init+0x4e>
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
   147e0:	f004 fd64 	bl	192ac <bt_mesh_comp_register>
	if (err) {
   147e4:	4604      	mov	r4, r0
   147e6:	b990      	cbnz	r0, 1480e <bt_mesh_init+0x4a>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
   147e8:	4628      	mov	r0, r5
   147ea:	f009 f815 	bl	1d818 <bt_mesh_prov_init>
		if (err) {
   147ee:	4604      	mov	r4, r0
   147f0:	b968      	cbnz	r0, 1480e <bt_mesh_init+0x4a>
			return err;
		}
	}

	bt_mesh_cfg_default_set();
   147f2:	f000 fa23 	bl	14c3c <bt_mesh_cfg_default_set>
	bt_mesh_net_init();
   147f6:	f001 fc0f 	bl	16018 <bt_mesh_net_init>
	bt_mesh_trans_init();
   147fa:	f002 ff83 	bl	17704 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   147fe:	f003 ff6b 	bl	186d8 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   14802:	f000 fc9f 	bl	15144 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   14806:	f007 f9bf 	bl	1bb88 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_init();
   1480a:	f007 fb19 	bl	1be40 <bt_mesh_settings_init>
	}

	return 0;
}
   1480e:	4620      	mov	r0, r4
   14810:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   14812:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14816:	e7fa      	b.n	1480e <bt_mesh_init+0x4a>
   14818:	20009ed0 	.word	0x20009ed0

0001481c <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
   1481c:	b530      	push	{r4, r5, lr}
   1481e:	b087      	sub	sp, #28
	int err;

	err = bt_mesh_adv_enable();
   14820:	f007 f9de 	bl	1bbe0 <bt_mesh_adv_enable>
	if (err) {
   14824:	4604      	mov	r4, r0
   14826:	b168      	cbz	r0, 14844 <bt_mesh_start+0x28>
		LOG_ERR("Failed enabling advertiser");
   14828:	4b1c      	ldr	r3, [pc, #112]	; (1489c <bt_mesh_start+0x80>)
   1482a:	9305      	str	r3, [sp, #20]
   1482c:	2302      	movs	r3, #2
   1482e:	9304      	str	r3, [sp, #16]
   14830:	2300      	movs	r3, #0
   14832:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14836:	481a      	ldr	r0, [pc, #104]	; (148a0 <bt_mesh_start+0x84>)
   14838:	aa04      	add	r2, sp, #16
   1483a:	f7f6 f98f 	bl	ab5c <z_impl_z_log_msg_static_create>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
   1483e:	4620      	mov	r0, r4
   14840:	b007      	add	sp, #28
   14842:	bd30      	pop	{r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
   14844:	f000 f8e0 	bl	14a08 <bt_mesh_beacon_enabled>
   14848:	b320      	cbz	r0, 14894 <bt_mesh_start+0x78>
		bt_mesh_beacon_enable();
   1484a:	f000 fd63 	bl	15314 <bt_mesh_beacon_enable>
	if (!IS_ENABLED(CONFIG_BT_MESH_PROV) || !bt_mesh_prov_active() ||
   1484e:	f008 ffbd 	bl	1d7cc <bt_mesh_prov_active>
   14852:	b120      	cbz	r0, 1485e <bt_mesh_start+0x42>
	    bt_mesh_prov_link.bearer->type == BT_MESH_PROV_ADV) {
   14854:	4b13      	ldr	r3, [pc, #76]	; (148a4 <bt_mesh_start+0x88>)
   14856:	685b      	ldr	r3, [r3, #4]
	if (!IS_ENABLED(CONFIG_BT_MESH_PROV) || !bt_mesh_prov_active() ||
   14858:	781b      	ldrb	r3, [r3, #0]
   1485a:	2b01      	cmp	r3, #1
   1485c:	d105      	bne.n	1486a <bt_mesh_start+0x4e>
			(void)bt_mesh_pb_gatt_srv_disable();
   1485e:	f00a fbcd 	bl	1effc <bt_mesh_pb_gatt_srv_disable>
			(void)bt_mesh_proxy_gatt_enable();
   14862:	f00a feb5 	bl	1f5d0 <bt_mesh_proxy_gatt_enable>
			bt_mesh_adv_gatt_update();
   14866:	f007 f989 	bl	1bb7c <bt_mesh_adv_gatt_update>
		bt_mesh_scan_enable();
   1486a:	f000 fabf 	bl	14dec <bt_mesh_scan_enable>
		bt_mesh_friend_init();
   1486e:	f008 fbb5 	bl	1cfdc <bt_mesh_friend_init>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
   14872:	2000      	movs	r0, #0
   14874:	f001 fec4 	bl	16600 <bt_mesh_subnet_next>
   14878:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
   1487a:	f004 fd4b 	bl	19314 <bt_mesh_primary_addr>
   1487e:	4601      	mov	r1, r0
		bt_mesh_prov_complete(sub->net_idx, addr);
   14880:	8c28      	ldrh	r0, [r5, #32]
   14882:	f008 ffaf 	bl	1d7e4 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
   14886:	f003 ff41 	bl	1870c <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
   1488a:	2100      	movs	r1, #0
   1488c:	4806      	ldr	r0, [pc, #24]	; (148a8 <bt_mesh_start+0x8c>)
   1488e:	f004 fa65 	bl	18d5c <bt_mesh_model_foreach>
	return 0;
   14892:	e7d4      	b.n	1483e <bt_mesh_start+0x22>
		bt_mesh_beacon_disable();
   14894:	f000 fd50 	bl	15338 <bt_mesh_beacon_disable>
   14898:	e7d9      	b.n	1484e <bt_mesh_start+0x32>
   1489a:	bf00      	nop
   1489c:	000326e4 	.word	0x000326e4
   148a0:	0002fcb4 	.word	0x0002fcb4
   148a4:	2000ad30 	.word	0x2000ad30
   148a8:	0002c14f 	.word	0x0002c14f

000148ac <bt_mesh_provision>:
{
   148ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b0:	af00      	add	r7, sp, #0
   148b2:	4681      	mov	r9, r0
   148b4:	460d      	mov	r5, r1
   148b6:	4616      	mov	r6, r2
   148b8:	469a      	mov	sl, r3
   148ba:	f8b7 8028 	ldrh.w	r8, [r7, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   148be:	4c25      	ldr	r4, [pc, #148]	; (14954 <bt_mesh_provision+0xa8>)
   148c0:	e8d4 3faf 	lda	r3, [r4]
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_INIT)) {
   148c4:	07da      	lsls	r2, r3, #31
   148c6:	d53f      	bpl.n	14948 <bt_mesh_provision+0x9c>
	LOG_INF("Primary Element: 0x%04x", addr);
   148c8:	46eb      	mov	fp, sp
   148ca:	b088      	sub	sp, #32
   148cc:	466a      	mov	r2, sp
   148ce:	4b22      	ldr	r3, [pc, #136]	; (14958 <bt_mesh_provision+0xac>)
   148d0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   148d4:	2303      	movs	r3, #3
   148d6:	f842 3f10 	str.w	r3, [r2, #16]!
   148da:	2300      	movs	r3, #0
   148dc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   148e0:	481e      	ldr	r0, [pc, #120]	; (1495c <bt_mesh_provision+0xb0>)
   148e2:	f7f6 f93b 	bl	ab5c <z_impl_z_log_msg_static_create>
   148e6:	46dd      	mov	sp, fp
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148e8:	e8d4 3fef 	ldaex	r3, [r4]
   148ec:	f043 0202 	orr.w	r2, r3, #2
   148f0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   148f4:	2900      	cmp	r1, #0
   148f6:	d1f7      	bne.n	148e8 <bt_mesh_provision+0x3c>
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
   148f8:	079b      	lsls	r3, r3, #30
   148fa:	d428      	bmi.n	1494e <bt_mesh_provision+0xa2>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
   148fc:	4628      	mov	r0, r5
   148fe:	4653      	mov	r3, sl
   14900:	464a      	mov	r2, r9
   14902:	4631      	mov	r1, r6
   14904:	f000 fef0 	bl	156e8 <bt_mesh_net_create>
	if (err) {
   14908:	4605      	mov	r5, r0
   1490a:	b158      	cbz	r0, 14924 <bt_mesh_provision+0x78>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1490c:	e8d4 3fef 	ldaex	r3, [r4]
   14910:	f023 0302 	bic.w	r3, r3, #2
   14914:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14918:	2a00      	cmp	r2, #0
   1491a:	d1f7      	bne.n	1490c <bt_mesh_provision+0x60>
}
   1491c:	4628      	mov	r0, r5
   1491e:	46bd      	mov	sp, r7
   14920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh_net_settings_commit();
   14924:	f001 fc2a 	bl	1617c <bt_mesh_net_settings_commit>
	bt_mesh_comp_provision(addr);
   14928:	4640      	mov	r0, r8
	bt_mesh.seq = 0U;
   1492a:	f844 5c04 	str.w	r5, [r4, #-4]
	bt_mesh_comp_provision(addr);
   1492e:	f004 fcd5 	bl	192dc <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
   14932:	2210      	movs	r2, #16
   14934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14936:	f504 700a 	add.w	r0, r4, #552	; 0x228
   1493a:	f015 fdee 	bl	2a51a <memcpy>
		bt_mesh_net_pending_net_store();
   1493e:	f001 fbb7 	bl	160b0 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
   14942:	f7ff ff6b 	bl	1481c <bt_mesh_start>
	return 0;
   14946:	e7e9      	b.n	1491c <bt_mesh_provision+0x70>
		return -ENODEV;
   14948:	f06f 0512 	mvn.w	r5, #18
   1494c:	e7e6      	b.n	1491c <bt_mesh_provision+0x70>
		return -EALREADY;
   1494e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14952:	e7e3      	b.n	1491c <bt_mesh_provision+0x70>
   14954:	20009ed0 	.word	0x20009ed0
   14958:	000326ff 	.word	0x000326ff
   1495c:	0002fcb4 	.word	0x0002fcb4

00014960 <feature_set>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
   14960:	2901      	cmp	r1, #1
{
   14962:	b538      	push	{r3, r4, r5, lr}
   14964:	4605      	mov	r5, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
   14966:	d81c      	bhi.n	149a2 <feature_set+0x42>
   14968:	4c11      	ldr	r4, [pc, #68]	; (149b0 <feature_set+0x50>)
	    state != BT_MESH_FEATURE_ENABLED) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
	    (state == BT_MESH_FEATURE_ENABLED)) {
   1496a:	f001 0301 	and.w	r3, r1, #1
   1496e:	4620      	mov	r0, r4
   14970:	f017 fbf9 	bl	2c166 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14974:	fa40 f205 	asr.w	r2, r0, r5
	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
   14978:	f002 0201 	and.w	r2, r2, #1
   1497c:	4293      	cmp	r3, r2
   1497e:	d013      	beq.n	149a8 <feature_set+0x48>
	atomic_val_t mask = ATOMIC_MASK(bit);
   14980:	2101      	movs	r1, #1
   14982:	40a9      	lsls	r1, r5
	if (val) {
   14984:	b123      	cbz	r3, 14990 <feature_set+0x30>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14986:	4620      	mov	r0, r4
   14988:	f017 fbf0 	bl	2c16c <atomic_or.isra.0>
	}

	atomic_set_bit_to(bt_mesh.flags, feature_flag,
			  (state == BT_MESH_FEATURE_ENABLED));

	return 0;
   1498c:	2000      	movs	r0, #0
}
   1498e:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14990:	43c9      	mvns	r1, r1
   14992:	e8d4 3fef 	ldaex	r3, [r4]
   14996:	400b      	ands	r3, r1
   14998:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1499c:	2a00      	cmp	r2, #0
   1499e:	d0f5      	beq.n	1498c <feature_set+0x2c>
   149a0:	e7f7      	b.n	14992 <feature_set+0x32>
		return -EINVAL;
   149a2:	f06f 0015 	mvn.w	r0, #21
   149a6:	e7f2      	b.n	1498e <feature_set+0x2e>
		return -EALREADY;
   149a8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   149ac:	e7ef      	b.n	1498e <feature_set+0x2e>
   149ae:	bf00      	nop
   149b0:	20009ed0 	.word	0x20009ed0

000149b4 <bt_mesh_beacon_set>:
{
   149b4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   149b6:	4b13      	ldr	r3, [pc, #76]	; (14a04 <bt_mesh_beacon_set+0x50>)
   149b8:	4602      	mov	r2, r0
   149ba:	4618      	mov	r0, r3
   149bc:	f017 fbd3 	bl	2c166 <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
   149c0:	f3c0 2000 	ubfx	r0, r0, #8, #1
   149c4:	4282      	cmp	r2, r0
   149c6:	d01c      	beq.n	14a02 <bt_mesh_beacon_set+0x4e>
	if (val) {
   149c8:	b182      	cbz	r2, 149ec <bt_mesh_beacon_set+0x38>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   149ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   149ce:	4618      	mov	r0, r3
   149d0:	f017 fbcc 	bl	2c16c <atomic_or.isra.0>
		bt_mesh_beacon_enable();
   149d4:	f000 fc9e 	bl	15314 <bt_mesh_beacon_enable>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   149d8:	480a      	ldr	r0, [pc, #40]	; (14a04 <bt_mesh_beacon_set+0x50>)
   149da:	f017 fbc4 	bl	2c166 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   149de:	0783      	lsls	r3, r0, #30
   149e0:	d50f      	bpl.n	14a02 <bt_mesh_beacon_set+0x4e>
}
   149e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   149e6:	2007      	movs	r0, #7
   149e8:	f007 b9c8 	b.w	1bd7c <bt_mesh_settings_store_schedule>
   149ec:	e8d3 1fef 	ldaex	r1, [r3]
   149f0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   149f4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   149f8:	2a00      	cmp	r2, #0
   149fa:	d1f7      	bne.n	149ec <bt_mesh_beacon_set+0x38>
		bt_mesh_beacon_disable();
   149fc:	f000 fc9c 	bl	15338 <bt_mesh_beacon_disable>
   14a00:	e7ea      	b.n	149d8 <bt_mesh_beacon_set+0x24>
}
   14a02:	bd08      	pop	{r3, pc}
   14a04:	20009ed0 	.word	0x20009ed0

00014a08 <bt_mesh_beacon_enabled>:
{
   14a08:	b508      	push	{r3, lr}
   14a0a:	4803      	ldr	r0, [pc, #12]	; (14a18 <bt_mesh_beacon_enabled+0x10>)
   14a0c:	f017 fbab 	bl	2c166 <atomic_get>
}
   14a10:	f3c0 2000 	ubfx	r0, r0, #8, #1
   14a14:	bd08      	pop	{r3, pc}
   14a16:	bf00      	nop
   14a18:	20009ed0 	.word	0x20009ed0

00014a1c <bt_mesh_gatt_proxy_set>:
{
	return sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING;
}

int bt_mesh_gatt_proxy_set(enum bt_mesh_feat_state gatt_proxy)
{
   14a1c:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
   14a1e:	4601      	mov	r1, r0
{
   14a20:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
   14a22:	2009      	movs	r0, #9
   14a24:	f7ff ff9c 	bl	14960 <feature_set>
	if (err) {
   14a28:	4604      	mov	r4, r0
   14a2a:	b970      	cbnz	r0, 14a4a <bt_mesh_gatt_proxy_set+0x2e>
		return err;
	}

	if ((gatt_proxy == BT_MESH_FEATURE_ENABLED) ||
   14a2c:	2d01      	cmp	r5, #1
   14a2e:	d10e      	bne.n	14a4e <bt_mesh_gatt_proxy_set+0x32>
	    (gatt_proxy == BT_MESH_FEATURE_DISABLED &&
	     !bt_mesh_subnet_find(node_id_is_running, NULL))) {
		bt_mesh_adv_gatt_update();
   14a30:	f007 f8a4 	bl	1bb7c <bt_mesh_adv_gatt_update>
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
   14a34:	2002      	movs	r0, #2
   14a36:	f003 fe41 	bl	186bc <bt_mesh_hb_feature_changed>
   14a3a:	4809      	ldr	r0, [pc, #36]	; (14a60 <bt_mesh_gatt_proxy_set+0x44>)
   14a3c:	f017 fb93 	bl	2c166 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14a40:	0783      	lsls	r3, r0, #30
   14a42:	d502      	bpl.n	14a4a <bt_mesh_gatt_proxy_set+0x2e>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14a44:	2007      	movs	r0, #7
   14a46:	f007 f999 	bl	1bd7c <bt_mesh_settings_store_schedule>
	}

	return 0;
}
   14a4a:	4620      	mov	r0, r4
   14a4c:	bd38      	pop	{r3, r4, r5, pc}
	if ((gatt_proxy == BT_MESH_FEATURE_ENABLED) ||
   14a4e:	2d00      	cmp	r5, #0
   14a50:	d1f0      	bne.n	14a34 <bt_mesh_gatt_proxy_set+0x18>
	     !bt_mesh_subnet_find(node_id_is_running, NULL))) {
   14a52:	4601      	mov	r1, r0
   14a54:	4803      	ldr	r0, [pc, #12]	; (14a64 <bt_mesh_gatt_proxy_set+0x48>)
   14a56:	f001 fdb1 	bl	165bc <bt_mesh_subnet_find>
	    (gatt_proxy == BT_MESH_FEATURE_DISABLED &&
   14a5a:	2800      	cmp	r0, #0
   14a5c:	d1ea      	bne.n	14a34 <bt_mesh_gatt_proxy_set+0x18>
   14a5e:	e7e7      	b.n	14a30 <bt_mesh_gatt_proxy_set+0x14>
   14a60:	20009ed0 	.word	0x20009ed0
   14a64:	0002c15b 	.word	0x0002c15b

00014a68 <bt_mesh_gatt_proxy_get>:

enum bt_mesh_feat_state bt_mesh_gatt_proxy_get(void)
{
   14a68:	b508      	push	{r3, lr}
   14a6a:	4803      	ldr	r0, [pc, #12]	; (14a78 <bt_mesh_gatt_proxy_get+0x10>)
   14a6c:	f017 fb7b 	bl	2c166 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_GATT_PROXY);
}
   14a70:	f3c0 2040 	ubfx	r0, r0, #9, #1
   14a74:	bd08      	pop	{r3, pc}
   14a76:	bf00      	nop
   14a78:	20009ed0 	.word	0x20009ed0

00014a7c <bt_mesh_default_ttl_set>:

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
   14a7c:	2801      	cmp	r0, #1
{
   14a7e:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
   14a80:	d014      	beq.n	14aac <bt_mesh_default_ttl_set+0x30>
   14a82:	0602      	lsls	r2, r0, #24
   14a84:	d412      	bmi.n	14aac <bt_mesh_default_ttl_set+0x30>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
   14a86:	4b0b      	ldr	r3, [pc, #44]	; (14ab4 <bt_mesh_default_ttl_set+0x38>)
   14a88:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
   14a8c:	4282      	cmp	r2, r0
   14a8e:	d101      	bne.n	14a94 <bt_mesh_default_ttl_set+0x18>
		return 0;
   14a90:	2000      	movs	r0, #0
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
}
   14a92:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
   14a94:	f883 01fb 	strb.w	r0, [r3, #507]	; 0x1fb
   14a98:	f103 0008 	add.w	r0, r3, #8
   14a9c:	f017 fb63 	bl	2c166 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14aa0:	0783      	lsls	r3, r0, #30
   14aa2:	d5f5      	bpl.n	14a90 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14aa4:	2007      	movs	r0, #7
   14aa6:	f007 f969 	bl	1bd7c <bt_mesh_settings_store_schedule>
   14aaa:	e7f1      	b.n	14a90 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
   14aac:	f06f 0015 	mvn.w	r0, #21
   14ab0:	e7ef      	b.n	14a92 <bt_mesh_default_ttl_set+0x16>
   14ab2:	bf00      	nop
   14ab4:	20009ec8 	.word	0x20009ec8

00014ab8 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
   14ab8:	4b01      	ldr	r3, [pc, #4]	; (14ac0 <bt_mesh_default_ttl_get+0x8>)
   14aba:	f893 01fb 	ldrb.w	r0, [r3, #507]	; 0x1fb
   14abe:	4770      	bx	lr
   14ac0:	20009ec8 	.word	0x20009ec8

00014ac4 <bt_mesh_friend_set>:

int bt_mesh_friend_set(enum bt_mesh_feat_state friendship)
{
   14ac4:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_FRIEND, friendship);
   14ac6:	4601      	mov	r1, r0
{
   14ac8:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_FRIEND, friendship);
   14aca:	200a      	movs	r0, #10
   14acc:	f7ff ff48 	bl	14960 <feature_set>
	if (err) {
   14ad0:	4604      	mov	r4, r0
   14ad2:	b968      	cbnz	r0, 14af0 <bt_mesh_friend_set+0x2c>
		return err;
	}

	bt_mesh_hb_feature_changed(BT_MESH_FEAT_FRIEND);
   14ad4:	2004      	movs	r0, #4
   14ad6:	f003 fdf1 	bl	186bc <bt_mesh_hb_feature_changed>
   14ada:	4806      	ldr	r0, [pc, #24]	; (14af4 <bt_mesh_friend_set+0x30>)
   14adc:	f017 fb43 	bl	2c166 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14ae0:	0783      	lsls	r3, r0, #30
   14ae2:	d502      	bpl.n	14aea <bt_mesh_friend_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14ae4:	2007      	movs	r0, #7
   14ae6:	f007 f949 	bl	1bd7c <bt_mesh_settings_store_schedule>
	}

	if (friendship == BT_MESH_FEATURE_DISABLED) {
   14aea:	b90d      	cbnz	r5, 14af0 <bt_mesh_friend_set+0x2c>
		bt_mesh_friends_clear();
   14aec:	f008 f864 	bl	1cbb8 <bt_mesh_friends_clear>
	}

	return 0;
}
   14af0:	4620      	mov	r0, r4
   14af2:	bd38      	pop	{r3, r4, r5, pc}
   14af4:	20009ed0 	.word	0x20009ed0

00014af8 <bt_mesh_friend_get>:

enum bt_mesh_feat_state bt_mesh_friend_get(void)
{
   14af8:	b508      	push	{r3, lr}
   14afa:	4803      	ldr	r0, [pc, #12]	; (14b08 <bt_mesh_friend_get+0x10>)
   14afc:	f017 fb33 	bl	2c166 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		return BT_MESH_FEATURE_NOT_SUPPORTED;
	}

	return feature_get(BT_MESH_FRIEND);
}
   14b00:	f3c0 2080 	ubfx	r0, r0, #10, #1
   14b04:	bd08      	pop	{r3, pc}
   14b06:	bf00      	nop
   14b08:	20009ed0 	.word	0x20009ed0

00014b0c <bt_mesh_net_transmit_set>:

void bt_mesh_net_transmit_set(uint8_t xmit)
{
   14b0c:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
   14b0e:	4b09      	ldr	r3, [pc, #36]	; (14b34 <bt_mesh_net_transmit_set+0x28>)
   14b10:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
   14b14:	4282      	cmp	r2, r0
   14b16:	d00c      	beq.n	14b32 <bt_mesh_net_transmit_set+0x26>
		return;
	}

	bt_mesh.net_xmit = xmit;
   14b18:	f883 01f9 	strb.w	r0, [r3, #505]	; 0x1f9
   14b1c:	f103 0008 	add.w	r0, r3, #8
   14b20:	f017 fb21 	bl	2c166 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14b24:	0783      	lsls	r3, r0, #30
   14b26:	d504      	bpl.n	14b32 <bt_mesh_net_transmit_set+0x26>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}
}
   14b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14b2c:	2007      	movs	r0, #7
   14b2e:	f007 b925 	b.w	1bd7c <bt_mesh_settings_store_schedule>
}
   14b32:	bd08      	pop	{r3, pc}
   14b34:	20009ec8 	.word	0x20009ec8

00014b38 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
   14b38:	4b01      	ldr	r3, [pc, #4]	; (14b40 <bt_mesh_net_transmit_get+0x8>)
   14b3a:	f893 01f9 	ldrb.w	r0, [r3, #505]	; 0x1f9
   14b3e:	4770      	bx	lr
   14b40:	20009ec8 	.word	0x20009ec8

00014b44 <bt_mesh_relay_set>:

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
   14b44:	b510      	push	{r4, lr}
   14b46:	460c      	mov	r4, r1

	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_RELAY, relay);
   14b48:	4601      	mov	r1, r0
   14b4a:	2007      	movs	r0, #7
   14b4c:	f7ff ff08 	bl	14960 <feature_set>
	if (err == -EINVAL) {
   14b50:	f110 0f16 	cmn.w	r0, #22
   14b54:	d012      	beq.n	14b7c <bt_mesh_relay_set+0x38>
		return err;
	}

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
   14b56:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14b5a:	4b0b      	ldr	r3, [pc, #44]	; (14b88 <bt_mesh_relay_set+0x44>)
   14b5c:	d103      	bne.n	14b66 <bt_mesh_relay_set+0x22>
   14b5e:	f893 21fa 	ldrb.w	r2, [r3, #506]	; 0x1fa
   14b62:	42a2      	cmp	r2, r4
   14b64:	d00a      	beq.n	14b7c <bt_mesh_relay_set+0x38>
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
   14b66:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
   14b68:	f883 41fa 	strb.w	r4, [r3, #506]	; 0x1fa
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
   14b6c:	f003 fda6 	bl	186bc <bt_mesh_hb_feature_changed>
   14b70:	4806      	ldr	r0, [pc, #24]	; (14b8c <bt_mesh_relay_set+0x48>)
   14b72:	f017 faf8 	bl	2c166 <atomic_get>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14b76:	0783      	lsls	r3, r0, #30
   14b78:	d401      	bmi.n	14b7e <bt_mesh_relay_set+0x3a>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
	}

	return 0;
   14b7a:	2000      	movs	r0, #0
}
   14b7c:	bd10      	pop	{r4, pc}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   14b7e:	2007      	movs	r0, #7
   14b80:	f007 f8fc 	bl	1bd7c <bt_mesh_settings_store_schedule>
   14b84:	e7f9      	b.n	14b7a <bt_mesh_relay_set+0x36>
   14b86:	bf00      	nop
   14b88:	20009ec8 	.word	0x20009ec8
   14b8c:	20009ed0 	.word	0x20009ed0

00014b90 <pre_cfg_set>:
	LOG_DBG("Restored configuration state");

	return 0;
}

BT_MESH_SETTINGS_DEFINE(cfg, "Cfg", cfg_set);
   14b90:	b570      	push	{r4, r5, r6, lr}
   14b92:	481f      	ldr	r0, [pc, #124]	; (14c10 <pre_cfg_set+0x80>)
   14b94:	b088      	sub	sp, #32
   14b96:	f017 fae6 	bl	2c166 <atomic_get>
   14b9a:	f010 0401 	ands.w	r4, r0, #1
   14b9e:	460e      	mov	r6, r1
   14ba0:	4615      	mov	r5, r2
   14ba2:	4619      	mov	r1, r3
   14ba4:	d012      	beq.n	14bcc <pre_cfg_set+0x3c>
	if (len_rd == 0) {
   14ba6:	b38e      	cbz	r6, 14c0c <pre_cfg_set+0x7c>
	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
   14ba8:	2307      	movs	r3, #7
   14baa:	466a      	mov	r2, sp
   14bac:	4628      	mov	r0, r5
   14bae:	f007 f8a9 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   14bb2:	4604      	mov	r4, r0
   14bb4:	b168      	cbz	r0, 14bd2 <pre_cfg_set+0x42>
		LOG_ERR("Failed to set \'cfg\'");
   14bb6:	4b17      	ldr	r3, [pc, #92]	; (14c14 <pre_cfg_set+0x84>)
   14bb8:	9307      	str	r3, [sp, #28]
   14bba:	2302      	movs	r3, #2
   14bbc:	9306      	str	r3, [sp, #24]
   14bbe:	2300      	movs	r3, #0
   14bc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bc4:	4814      	ldr	r0, [pc, #80]	; (14c18 <pre_cfg_set+0x88>)
   14bc6:	aa06      	add	r2, sp, #24
   14bc8:	f7f5 ffc8 	bl	ab5c <z_impl_z_log_msg_static_create>
BT_MESH_SETTINGS_DEFINE(cfg, "Cfg", cfg_set);
   14bcc:	4620      	mov	r0, r4
   14bce:	b008      	add	sp, #32
   14bd0:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
   14bd2:	f89d 0000 	ldrb.w	r0, [sp]
   14bd6:	f7ff ff99 	bl	14b0c <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
   14bda:	f89d 1002 	ldrb.w	r1, [sp, #2]
   14bde:	f89d 0001 	ldrb.w	r0, [sp, #1]
   14be2:	f7ff ffaf 	bl	14b44 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
   14be6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14bea:	3800      	subs	r0, #0
   14bec:	bf18      	it	ne
   14bee:	2001      	movne	r0, #1
   14bf0:	f7ff fee0 	bl	149b4 <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
   14bf4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14bf8:	f7ff ff10 	bl	14a1c <bt_mesh_gatt_proxy_set>
	bt_mesh_friend_set(cfg.frnd);
   14bfc:	f89d 0005 	ldrb.w	r0, [sp, #5]
   14c00:	f7ff ff60 	bl	14ac4 <bt_mesh_friend_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
   14c04:	f89d 0006 	ldrb.w	r0, [sp, #6]
   14c08:	f7ff ff38 	bl	14a7c <bt_mesh_default_ttl_set>
		return 0;
   14c0c:	2400      	movs	r4, #0
BT_MESH_SETTINGS_DEFINE(cfg, "Cfg", cfg_set);
   14c0e:	e7dd      	b.n	14bcc <pre_cfg_set+0x3c>
   14c10:	20009ed0 	.word	0x20009ed0
   14c14:	00032724 	.word	0x00032724
   14c18:	0002fc84 	.word	0x0002fc84

00014c1c <bt_mesh_relay_get>:
{
   14c1c:	b508      	push	{r3, lr}
   14c1e:	4803      	ldr	r0, [pc, #12]	; (14c2c <bt_mesh_relay_get+0x10>)
   14c20:	f017 faa1 	bl	2c166 <atomic_get>
}
   14c24:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   14c28:	bd08      	pop	{r3, pc}
   14c2a:	bf00      	nop
   14c2c:	20009ed0 	.word	0x20009ed0

00014c30 <bt_mesh_relay_retransmit_get>:
}
   14c30:	4b01      	ldr	r3, [pc, #4]	; (14c38 <bt_mesh_relay_retransmit_get+0x8>)
   14c32:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
   14c36:	4770      	bx	lr
   14c38:	20009ec8 	.word	0x20009ec8

00014c3c <bt_mesh_cfg_default_set>:
{
   14c3c:	b508      	push	{r3, lr}
	bt_mesh.net_xmit =
   14c3e:	230a      	movs	r3, #10
   14c40:	480c      	ldr	r0, [pc, #48]	; (14c74 <bt_mesh_cfg_default_set+0x38>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14c42:	2180      	movs	r1, #128	; 0x80
   14c44:	f880 31f9 	strb.w	r3, [r0, #505]	; 0x1f9
	bt_mesh.relay_xmit =
   14c48:	f240 730a 	movw	r3, #1802	; 0x70a
   14c4c:	3008      	adds	r0, #8
   14c4e:	f8a0 31f2 	strh.w	r3, [r0, #498]	; 0x1f2
   14c52:	f017 fa8b 	bl	2c16c <atomic_or.isra.0>
   14c56:	f44f 7180 	mov.w	r1, #256	; 0x100
   14c5a:	f017 fa87 	bl	2c16c <atomic_or.isra.0>
   14c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
   14c62:	f017 fa83 	bl	2c16c <atomic_or.isra.0>
}
   14c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   14c6e:	f017 ba7d 	b.w	2c16c <atomic_or.isra.0>
   14c72:	bf00      	nop
   14c74:	20009ec8 	.word	0x20009ec8

00014c78 <bt_mesh_cfg_pending_store>:
		LOG_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
   14c78:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14c7a:	4821      	ldr	r0, [pc, #132]	; (14d00 <bt_mesh_cfg_pending_store+0x88>)
   14c7c:	b088      	sub	sp, #32
   14c7e:	f017 fa72 	bl	2c166 <atomic_get>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   14c82:	0783      	lsls	r3, r0, #30
   14c84:	f3c0 0440 	ubfx	r4, r0, #1, #1
   14c88:	d52f      	bpl.n	14cea <bt_mesh_cfg_pending_store+0x72>
	return bt_mesh.net_xmit;
   14c8a:	4a1e      	ldr	r2, [pc, #120]	; (14d04 <bt_mesh_cfg_pending_store+0x8c>)
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14c8c:	4669      	mov	r1, sp
	val.net_transmit = bt_mesh_net_transmit_get();
   14c8e:	f892 31f9 	ldrb.w	r3, [r2, #505]	; 0x1f9
   14c92:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
   14c96:	f7ff ffc1 	bl	14c1c <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
   14c9a:	f892 31fa 	ldrb.w	r3, [r2, #506]	; 0x1fa
	val.relay = bt_mesh_relay_get();
   14c9e:	f88d 0001 	strb.w	r0, [sp, #1]
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
   14ca2:	f88d 3002 	strb.w	r3, [sp, #2]
	val.beacon = bt_mesh_beacon_enabled();
   14ca6:	f7ff feaf 	bl	14a08 <bt_mesh_beacon_enabled>
   14caa:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
   14cae:	f7ff fedb 	bl	14a68 <bt_mesh_gatt_proxy_get>
   14cb2:	f88d 0004 	strb.w	r0, [sp, #4]
	val.frnd = bt_mesh_friend_get();
   14cb6:	f7ff ff1f 	bl	14af8 <bt_mesh_friend_get>
	val.default_ttl = bt_mesh_default_ttl_get();
   14cba:	f892 31fb 	ldrb.w	r3, [r2, #507]	; 0x1fb
	val.frnd = bt_mesh_friend_get();
   14cbe:	f88d 0005 	strb.w	r0, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14cc2:	2207      	movs	r2, #7
   14cc4:	4810      	ldr	r0, [pc, #64]	; (14d08 <bt_mesh_cfg_pending_store+0x90>)
	val.default_ttl = bt_mesh_default_ttl_get();
   14cc6:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   14cca:	f7f7 fa07 	bl	c0dc <settings_save_one>
	if (err) {
   14cce:	b150      	cbz	r0, 14ce6 <bt_mesh_cfg_pending_store+0x6e>
		LOG_ERR("Failed to store configuration value");
   14cd0:	4b0e      	ldr	r3, [pc, #56]	; (14d0c <bt_mesh_cfg_pending_store+0x94>)
   14cd2:	9307      	str	r3, [sp, #28]
   14cd4:	2302      	movs	r3, #2
   14cd6:	9306      	str	r3, [sp, #24]
   14cd8:	2300      	movs	r3, #0
   14cda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cde:	480c      	ldr	r0, [pc, #48]	; (14d10 <bt_mesh_cfg_pending_store+0x98>)
   14ce0:	aa06      	add	r2, sp, #24
   14ce2:	f7f5 ff3b 	bl	ab5c <z_impl_z_log_msg_static_create>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
   14ce6:	b008      	add	sp, #32
   14ce8:	bd10      	pop	{r4, pc}
	err = settings_delete("bt/mesh/Cfg");
   14cea:	4807      	ldr	r0, [pc, #28]	; (14d08 <bt_mesh_cfg_pending_store+0x90>)
   14cec:	f014 fd32 	bl	29754 <settings_delete>
	if (err) {
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d0f8      	beq.n	14ce6 <bt_mesh_cfg_pending_store+0x6e>
		LOG_ERR("Failed to clear configuration");
   14cf4:	4b07      	ldr	r3, [pc, #28]	; (14d14 <bt_mesh_cfg_pending_store+0x9c>)
   14cf6:	9307      	str	r3, [sp, #28]
   14cf8:	2302      	movs	r3, #2
   14cfa:	9306      	str	r3, [sp, #24]
   14cfc:	4623      	mov	r3, r4
   14cfe:	e7ec      	b.n	14cda <bt_mesh_cfg_pending_store+0x62>
   14d00:	20009ed0 	.word	0x20009ed0
   14d04:	20009ec8 	.word	0x20009ec8
   14d08:	00032738 	.word	0x00032738
   14d0c:	00032744 	.word	0x00032744
   14d10:	0002fc84 	.word	0x0002fc84
   14d14:	00032768 	.word	0x00032768

00014d18 <bt_mesh_adv_create_from_pool>:
static struct net_buf *bt_mesh_adv_create_from_pool(struct net_buf_pool *buf_pool,
						    struct bt_mesh_adv *adv_pool,
						    enum bt_mesh_adv_type type,
						    enum bt_mesh_adv_tag tag,
						    uint8_t xmit, k_timeout_t timeout)
{
   14d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d1c:	460c      	mov	r4, r1
   14d1e:	4615      	mov	r5, r2
   14d20:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d22:	4b14      	ldr	r3, [pc, #80]	; (14d74 <bt_mesh_adv_create_from_pool+0x5c>)
   14d24:	e8d3 3faf 	lda	r3, [r3]
	struct bt_mesh_adv *adv;
	struct net_buf *buf;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
   14d28:	f3c3 0880 	ubfx	r8, r3, #2, #1
   14d2c:	075b      	lsls	r3, r3, #29
   14d2e:	d405      	bmi.n	14d3c <bt_mesh_adv_create_from_pool+0x24>
	return net_buf_alloc_fixed(pool, timeout);
   14d30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   14d34:	f019 f873 	bl	2de1e <net_buf_alloc_fixed>
		LOG_WRN("Refusing to allocate buffer while suspended");
		return NULL;
	}

	buf = net_buf_alloc(buf_pool, timeout);
	if (!buf) {
   14d38:	4606      	mov	r6, r0
   14d3a:	b918      	cbnz	r0, 14d44 <bt_mesh_adv_create_from_pool+0x2c>
		return NULL;
   14d3c:	2600      	movs	r6, #0
	adv->type         = type;
	adv->tag          = tag;
	adv->xmit         = xmit;

	return buf;
}
   14d3e:	4630      	mov	r0, r6
   14d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	adv = &adv_pool[net_buf_id(buf)];
   14d44:	f00a fff0 	bl	1fd28 <net_buf_id>
   14d48:	220c      	movs	r2, #12
   14d4a:	fb02 4400 	mla	r4, r2, r0, r4
	(void)memset(adv, 0, sizeof(*adv));
   14d4e:	4641      	mov	r1, r8
   14d50:	4620      	mov	r0, r4
	BT_MESH_ADV(buf) = adv;
   14d52:	61b4      	str	r4, [r6, #24]
	(void)memset(adv, 0, sizeof(*adv));
   14d54:	f015 fbec 	bl	2a530 <memset>
	adv->type         = type;
   14d58:	7a23      	ldrb	r3, [r4, #8]
   14d5a:	f005 0503 	and.w	r5, r5, #3
   14d5e:	f003 030c 	and.w	r3, r3, #12
   14d62:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
   14d66:	431d      	orrs	r5, r3
	adv->xmit         = xmit;
   14d68:	f89d 3018 	ldrb.w	r3, [sp, #24]
	adv->type         = type;
   14d6c:	7225      	strb	r5, [r4, #8]
	adv->xmit         = xmit;
   14d6e:	7263      	strb	r3, [r4, #9]
	return buf;
   14d70:	e7e5      	b.n	14d3e <bt_mesh_adv_create_from_pool+0x26>
   14d72:	bf00      	nop
   14d74:	20009ed0 	.word	0x20009ed0

00014d78 <bt_mesh_adv_create>:

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type,
				   enum bt_mesh_adv_tag tag,
				   uint8_t xmit, k_timeout_t timeout)
{
   14d78:	460b      	mov	r3, r1
   14d7a:	b530      	push	{r4, r5, lr}
#if defined(CONFIG_BT_MESH_RELAY)
	if (tag & BT_MESH_RELAY_ADV) {
   14d7c:	0799      	lsls	r1, r3, #30
{
   14d7e:	b085      	sub	sp, #20
		return bt_mesh_adv_create_from_pool(&relay_buf_pool,
   14d80:	9200      	str	r2, [sp, #0]
{
   14d82:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
		return bt_mesh_adv_create_from_pool(&relay_buf_pool,
   14d86:	4602      	mov	r2, r0
   14d88:	e9cd 4502 	strd	r4, r5, [sp, #8]
   14d8c:	bf47      	ittee	mi
   14d8e:	4904      	ldrmi	r1, [pc, #16]	; (14da0 <bt_mesh_adv_create+0x28>)
   14d90:	4804      	ldrmi	r0, [pc, #16]	; (14da4 <bt_mesh_adv_create+0x2c>)
						    adv_friend_pool, type,
						    tag, xmit, timeout);
	}
#endif

	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_local_pool, type,
   14d92:	4905      	ldrpl	r1, [pc, #20]	; (14da8 <bt_mesh_adv_create+0x30>)
   14d94:	4805      	ldrpl	r0, [pc, #20]	; (14dac <bt_mesh_adv_create+0x34>)
   14d96:	f7ff ffbf 	bl	14d18 <bt_mesh_adv_create_from_pool>
					    tag, xmit, timeout);
}
   14d9a:	b005      	add	sp, #20
   14d9c:	bd30      	pop	{r4, r5, pc}
   14d9e:	bf00      	nop
   14da0:	2000a9d0 	.word	0x2000a9d0
   14da4:	200090c4 	.word	0x200090c4
   14da8:	2000ab50 	.word	0x2000ab50
   14dac:	20008f58 	.word	0x20008f58

00014db0 <bt_mesh_adv_buf_get>:

	return bt_mesh_adv_buf_get(timeout);
}
#else /* !(CONFIG_BT_MESH_RELAY_ADV_SETS || CONFIG_BT_MESH_ADV_EXT_FRIEND_SEPARATE) */
struct net_buf *bt_mesh_adv_buf_get(k_timeout_t timeout)
{
   14db0:	4602      	mov	r2, r0
   14db2:	460b      	mov	r3, r1
	return net_buf_get(&bt_mesh_adv_queue, timeout);
   14db4:	4801      	ldr	r0, [pc, #4]	; (14dbc <bt_mesh_adv_buf_get+0xc>)
   14db6:	f019 b837 	b.w	2de28 <net_buf_get>
   14dba:	bf00      	nop
   14dbc:	20008e9c 	.word	0x20008e9c

00014dc0 <bt_mesh_adv_send>:
	}
}

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
   14dc0:	b510      	push	{r4, lr}
	LOG_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
		bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
   14dc2:	6984      	ldr	r4, [r0, #24]
   14dc4:	6021      	str	r1, [r4, #0]
	BT_MESH_ADV(buf)->cb_data = cb_data;
   14dc6:	6981      	ldr	r1, [r0, #24]
   14dc8:	604a      	str	r2, [r1, #4]
	BT_MESH_ADV(buf)->busy = 1U;
   14dca:	6982      	ldr	r2, [r0, #24]
   14dcc:	7a13      	ldrb	r3, [r2, #8]
   14dce:	f043 0308 	orr.w	r3, r3, #8
   14dd2:	7213      	strb	r3, [r2, #8]
		bt_mesh_adv_buf_relay_ready();
		return;
	}
#endif

	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
   14dd4:	f00b f9c4 	bl	20160 <net_buf_ref>
   14dd8:	4601      	mov	r1, r0
   14dda:	4803      	ldr	r0, [pc, #12]	; (14de8 <bt_mesh_adv_send+0x28>)
   14ddc:	f00b f95e 	bl	2009c <net_buf_put>
	bt_mesh_adv_buf_local_ready();
}
   14de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_local_ready();
   14de4:	f018 bca5 	b.w	2d732 <bt_mesh_adv_buf_local_ready>
   14de8:	20008e9c 	.word	0x20008e9c

00014dec <bt_mesh_scan_enable>:
		net_buf_simple_pull(buf, len);
	}
}

int bt_mesh_scan_enable(void)
{
   14dec:	b5b0      	push	{r4, r5, r7, lr}
   14dee:	b086      	sub	sp, #24
   14df0:	af00      	add	r7, sp, #0
	struct bt_le_scan_param scan_param = {
   14df2:	2214      	movs	r2, #20
   14df4:	2100      	movs	r1, #0
   14df6:	1d38      	adds	r0, r7, #4
   14df8:	f015 fb9a 	bl	2a530 <memset>
   14dfc:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	LOG_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
   14e00:	490f      	ldr	r1, [pc, #60]	; (14e40 <bt_mesh_scan_enable+0x54>)
	struct bt_le_scan_param scan_param = {
   14e02:	60fb      	str	r3, [r7, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
   14e04:	1d38      	adds	r0, r7, #4
   14e06:	f7fb fbe1 	bl	105cc <bt_le_scan_start>
	if (err && err != -EALREADY) {
   14e0a:	4604      	mov	r4, r0
   14e0c:	b190      	cbz	r0, 14e34 <bt_mesh_scan_enable+0x48>
   14e0e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14e12:	d013      	beq.n	14e3c <bt_mesh_scan_enable+0x50>
		LOG_ERR("starting scan failed (err %d)", err);
   14e14:	466d      	mov	r5, sp
   14e16:	b088      	sub	sp, #32
   14e18:	466a      	mov	r2, sp
   14e1a:	4b0a      	ldr	r3, [pc, #40]	; (14e44 <bt_mesh_scan_enable+0x58>)
   14e1c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e20:	2303      	movs	r3, #3
   14e22:	f842 3f10 	str.w	r3, [r2, #16]!
   14e26:	2300      	movs	r3, #0
   14e28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e2c:	4806      	ldr	r0, [pc, #24]	; (14e48 <bt_mesh_scan_enable+0x5c>)
   14e2e:	f7f5 fe95 	bl	ab5c <z_impl_z_log_msg_static_create>
   14e32:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   14e34:	4620      	mov	r0, r4
   14e36:	3718      	adds	r7, #24
   14e38:	46bd      	mov	sp, r7
   14e3a:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   14e3c:	2400      	movs	r4, #0
   14e3e:	e7f9      	b.n	14e34 <bt_mesh_scan_enable+0x48>
   14e40:	0002c1b1 	.word	0x0002c1b1
   14e44:	00032792 	.word	0x00032792
   14e48:	0002fc64 	.word	0x0002fc64

00014e4c <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
   14e4c:	b5b0      	push	{r4, r5, r7, lr}
   14e4e:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = bt_le_scan_stop();
   14e50:	f7fb fcc8 	bl	107e4 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
   14e54:	4604      	mov	r4, r0
   14e56:	b190      	cbz	r0, 14e7e <bt_mesh_scan_disable+0x32>
   14e58:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14e5c:	d012      	beq.n	14e84 <bt_mesh_scan_disable+0x38>
		LOG_ERR("stopping scan failed (err %d)", err);
   14e5e:	466d      	mov	r5, sp
   14e60:	b088      	sub	sp, #32
   14e62:	466a      	mov	r2, sp
   14e64:	4b08      	ldr	r3, [pc, #32]	; (14e88 <bt_mesh_scan_disable+0x3c>)
   14e66:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14e6a:	2303      	movs	r3, #3
   14e6c:	f842 3f10 	str.w	r3, [r2, #16]!
   14e70:	2300      	movs	r3, #0
   14e72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e76:	4805      	ldr	r0, [pc, #20]	; (14e8c <bt_mesh_scan_disable+0x40>)
   14e78:	f7f5 fe70 	bl	ab5c <z_impl_z_log_msg_static_create>
   14e7c:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   14e7e:	4620      	mov	r0, r4
   14e80:	46bd      	mov	sp, r7
   14e82:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   14e84:	2400      	movs	r4, #0
   14e86:	e7fa      	b.n	14e7e <bt_mesh_scan_disable+0x32>
   14e88:	000327b0 	.word	0x000327b0
   14e8c:	0002fc64 	.word	0x0002fc64

00014e90 <beacon_send>:

	bt_mesh_subnet_foreach(sub_update_beacon_observation);
}

static void beacon_send(struct k_work *work)
{
   14e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e92:	b08d      	sub	sp, #52	; 0x34
	LOG_DBG("");

	if (bt_mesh_is_provisioned()) {
   14e94:	f7ff fc8e 	bl	147b4 <bt_mesh_is_provisioned>
   14e98:	b1f8      	cbz	r0, 14eda <beacon_send+0x4a>
		if (!bt_mesh_beacon_enabled() &&
   14e9a:	f7ff fdb5 	bl	14a08 <bt_mesh_beacon_enabled>
   14e9e:	b1a8      	cbz	r0, 14ecc <beacon_send+0x3c>
	first_half = !first_half;
   14ea0:	4a49      	ldr	r2, [pc, #292]	; (14fc8 <beacon_send+0x138>)
   14ea2:	7813      	ldrb	r3, [r2, #0]
   14ea4:	f083 0301 	eor.w	r3, r3, #1
   14ea8:	7013      	strb	r3, [r2, #0]
	if (first_half) {
   14eaa:	b913      	cbnz	r3, 14eb2 <beacon_send+0x22>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
   14eac:	4847      	ldr	r0, [pc, #284]	; (14fcc <beacon_send+0x13c>)
   14eae:	f001 fb97 	bl	165e0 <bt_mesh_subnet_foreach>
		    !atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
			return;
		}

		update_beacon_observation();
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
   14eb2:	2100      	movs	r1, #0
   14eb4:	4846      	ldr	r0, [pc, #280]	; (14fd0 <beacon_send+0x140>)
   14eb6:	f001 fb81 	bl	165bc <bt_mesh_subnet_find>

		k_work_schedule(&beacon_timer, PROVISIONED_INTERVAL);
   14eba:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
		/* Don't send anything if we have an active provisioning link */
		if (!bt_mesh_prov_active()) {
			unprovisioned_beacon_send();
		}

		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14ebe:	2300      	movs	r3, #0
   14ec0:	4844      	ldr	r0, [pc, #272]	; (14fd4 <beacon_send+0x144>)
	}

}
   14ec2:	b00d      	add	sp, #52	; 0x34
   14ec4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14ec8:	f011 bb72 	b.w	265b0 <k_work_schedule>
   14ecc:	4b42      	ldr	r3, [pc, #264]	; (14fd8 <beacon_send+0x148>)
   14ece:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_mesh_beacon_enabled() &&
   14ed2:	06db      	lsls	r3, r3, #27
   14ed4:	d4e4      	bmi.n	14ea0 <beacon_send+0x10>
}
   14ed6:	b00d      	add	sp, #52	; 0x34
   14ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!bt_mesh_prov_active()) {
   14eda:	f008 fc77 	bl	1d7cc <bt_mesh_prov_active>
   14ede:	4605      	mov	r5, r0
   14ee0:	b9c8      	cbnz	r0, 14f16 <beacon_send+0x86>
				 UNPROV_XMIT, K_NO_WAIT);
   14ee2:	2200      	movs	r2, #0
   14ee4:	2300      	movs	r3, #0
	uint8_t uri_hash[16] = { 0 };
   14ee6:	e9cd 0002 	strd	r0, r0, [sp, #8]
   14eea:	e9cd 0004 	strd	r0, r0, [sp, #16]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
   14eee:	e9cd 2300 	strd	r2, r3, [sp]
   14ef2:	2101      	movs	r1, #1
   14ef4:	220a      	movs	r2, #10
   14ef6:	2002      	movs	r0, #2
   14ef8:	f7ff ff3e 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   14efc:	4606      	mov	r6, r0
   14efe:	b968      	cbnz	r0, 14f1c <beacon_send+0x8c>
		LOG_ERR("Unable to allocate beacon buffer");
   14f00:	4b36      	ldr	r3, [pc, #216]	; (14fdc <beacon_send+0x14c>)
   14f02:	930b      	str	r3, [sp, #44]	; 0x2c
   14f04:	2302      	movs	r3, #2
   14f06:	930a      	str	r3, [sp, #40]	; 0x28
   14f08:	4603      	mov	r3, r0
   14f0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f0e:	4834      	ldr	r0, [pc, #208]	; (14fe0 <beacon_send+0x150>)
   14f10:	aa0a      	add	r2, sp, #40	; 0x28
   14f12:	f7f5 fe23 	bl	ab5c <z_impl_z_log_msg_static_create>
		k_work_schedule(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
   14f16:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   14f1a:	e7d0      	b.n	14ebe <beacon_send+0x2e>
	prov = bt_mesh_prov_get();
   14f1c:	f008 fc50 	bl	1d7c0 <bt_mesh_prov_get>
   14f20:	4604      	mov	r4, r0
	return net_buf_simple_add_u8(&buf->b, val);
   14f22:	f106 070c 	add.w	r7, r6, #12
   14f26:	4629      	mov	r1, r5
   14f28:	4638      	mov	r0, r7
   14f2a:	f018 ffe2 	bl	2def2 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f2e:	2210      	movs	r2, #16
   14f30:	4638      	mov	r0, r7
   14f32:	6821      	ldr	r1, [r4, #0]
   14f34:	f018 ffd1 	bl	2deda <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
   14f38:	6860      	ldr	r0, [r4, #4]
   14f3a:	b350      	cbz	r0, 14f92 <beacon_send+0x102>
   14f3c:	a902      	add	r1, sp, #8
   14f3e:	f017 fcfc 	bl	2c93a <bt_mesh_s1>
   14f42:	bb30      	cbnz	r0, 14f92 <beacon_send+0x102>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
   14f44:	8921      	ldrh	r1, [r4, #8]
   14f46:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
   14f4a:	4638      	mov	r0, r7
   14f4c:	f018 ffe1 	bl	2df12 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f50:	2204      	movs	r2, #4
   14f52:	a902      	add	r1, sp, #8
   14f54:	4638      	mov	r0, r7
   14f56:	f018 ffc0 	bl	2deda <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
   14f5a:	2200      	movs	r2, #0
   14f5c:	4630      	mov	r0, r6
   14f5e:	4611      	mov	r1, r2
   14f60:	f7ff ff2e 	bl	14dc0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   14f64:	4630      	mov	r0, r6
   14f66:	f00b f8b9 	bl	200dc <net_buf_unref>
	if (prov->uri) {
   14f6a:	6863      	ldr	r3, [r4, #4]
   14f6c:	2b00      	cmp	r3, #0
   14f6e:	d0d2      	beq.n	14f16 <beacon_send+0x86>
					 UNPROV_XMIT, K_NO_WAIT);
   14f70:	2200      	movs	r2, #0
   14f72:	2300      	movs	r3, #0
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, BT_MESH_LOCAL_ADV,
   14f74:	2101      	movs	r1, #1
   14f76:	e9cd 2300 	strd	r2, r3, [sp]
   14f7a:	2003      	movs	r0, #3
   14f7c:	220a      	movs	r2, #10
   14f7e:	f7ff fefb 	bl	14d78 <bt_mesh_adv_create>
		if (!buf) {
   14f82:	4605      	mov	r5, r0
   14f84:	b938      	cbnz	r0, 14f96 <beacon_send+0x106>
			LOG_ERR("Unable to allocate URI buffer");
   14f86:	4b17      	ldr	r3, [pc, #92]	; (14fe4 <beacon_send+0x154>)
   14f88:	930b      	str	r3, [sp, #44]	; 0x2c
   14f8a:	2302      	movs	r3, #2
   14f8c:	930a      	str	r3, [sp, #40]	; 0x28
   14f8e:	4603      	mov	r3, r0
   14f90:	e7bb      	b.n	14f0a <beacon_send+0x7a>
		oob_info = prov->oob_info;
   14f92:	8921      	ldrh	r1, [r4, #8]
   14f94:	e7d9      	b.n	14f4a <beacon_send+0xba>
		len = strlen(prov->uri);
   14f96:	6860      	ldr	r0, [r4, #4]
   14f98:	f015 fa69 	bl	2a46e <strlen>
	return net_buf_simple_tailroom(&buf->b);
   14f9c:	f105 070c 	add.w	r7, r5, #12
   14fa0:	4606      	mov	r6, r0
   14fa2:	4638      	mov	r0, r7
   14fa4:	f018 ff91 	bl	2deca <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
   14fa8:	4286      	cmp	r6, r0
   14faa:	d809      	bhi.n	14fc0 <beacon_send+0x130>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14fac:	4632      	mov	r2, r6
   14fae:	6861      	ldr	r1, [r4, #4]
   14fb0:	4638      	mov	r0, r7
   14fb2:	f018 ff92 	bl	2deda <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
   14fb6:	2200      	movs	r2, #0
   14fb8:	4628      	mov	r0, r5
   14fba:	4611      	mov	r1, r2
   14fbc:	f7ff ff00 	bl	14dc0 <bt_mesh_adv_send>
		net_buf_unref(buf);
   14fc0:	4628      	mov	r0, r5
   14fc2:	f00b f88b 	bl	200dc <net_buf_unref>
   14fc6:	e7a6      	b.n	14f16 <beacon_send+0x86>
   14fc8:	2000b331 	.word	0x2000b331
   14fcc:	0002c287 	.word	0x0002c287
   14fd0:	00015069 	.word	0x00015069
   14fd4:	20009e98 	.word	0x20009e98
   14fd8:	20009ed0 	.word	0x20009ed0
   14fdc:	000327de 	.word	0x000327de
   14fe0:	0002fc7c 	.word	0x0002fc7c
   14fe4:	000327ff 	.word	0x000327ff

00014fe8 <bt_mesh_beacon_update.part.0.isra.0>:
		LOG_WRN("Unknown beacon type 0x%02x", type);
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
   14fe8:	b580      	push	{r7, lr}
   14fea:	af00      	add	r7, sp, #0
	LOG_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
				   bt_mesh.iv_index, sub->auth);
	if (err) {
		LOG_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
   14fec:	b088      	sub	sp, #32
   14fee:	466a      	mov	r2, sp
   14ff0:	4b06      	ldr	r3, [pc, #24]	; (1500c <bt_mesh_beacon_update.part.0.isra.0+0x24>)
   14ff2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14ff6:	2303      	movs	r3, #3
   14ff8:	f842 3f10 	str.w	r3, [r2, #16]!
   14ffc:	2300      	movs	r3, #0
   14ffe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15002:	4803      	ldr	r0, [pc, #12]	; (15010 <bt_mesh_beacon_update.part.0.isra.0+0x28>)
   15004:	f7f5 fdaa 	bl	ab5c <z_impl_z_log_msg_static_create>
	}
}
   15008:	46bd      	mov	sp, r7
   1500a:	bd80      	pop	{r7, pc}
   1500c:	0003281d 	.word	0x0003281d
   15010:	0002fc7c 	.word	0x0002fc7c

00015014 <bt_mesh_beacon_create>:
{
   15014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15016:	460c      	mov	r4, r1
   15018:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
   1501a:	f001 f95f 	bl	162dc <bt_mesh_net_flags>
   1501e:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
   15020:	2101      	movs	r1, #1
   15022:	4620      	mov	r0, r4
   15024:	f018 ff65 	bl	2def2 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   15028:	f895 6022 	ldrb.w	r6, [r5, #34]	; 0x22
	net_buf_simple_add_u8(buf, flags);
   1502c:	4639      	mov	r1, r7
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   1502e:	1eb3      	subs	r3, r6, #2
   15030:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
   15032:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   15034:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
   15036:	f018 ff5c 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
   1503a:	235a      	movs	r3, #90	; 0x5a
   1503c:	fb03 5106 	mla	r1, r3, r6, r5
   15040:	2208      	movs	r2, #8
   15042:	4620      	mov	r0, r4
   15044:	3162      	adds	r1, #98	; 0x62
   15046:	f018 ff48 	bl	2deda <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
   1504a:	4b06      	ldr	r3, [pc, #24]	; (15064 <bt_mesh_beacon_create+0x50>)
   1504c:	4620      	mov	r0, r4
   1504e:	6819      	ldr	r1, [r3, #0]
   15050:	f018 ff74 	bl	2df3c <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
   15054:	4620      	mov	r0, r4
   15056:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1505a:	2208      	movs	r2, #8
}
   1505c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
   15060:	f018 bf3b 	b.w	2deda <net_buf_simple_add_mem>
   15064:	20009ec8 	.word	0x20009ec8

00015068 <secure_beacon_send>:
{
   15068:	b530      	push	{r4, r5, lr}
   1506a:	4605      	mov	r5, r0
   1506c:	b089      	sub	sp, #36	; 0x24
	uint32_t now = k_uptime_get_32();
   1506e:	f017 f946 	bl	2c2fe <k_uptime_get_32>
	time_diff = now - sub->beacon_sent;
   15072:	682a      	ldr	r2, [r5, #0]
	if (time_diff < (600 * MSEC_PER_SEC) &&
   15074:	4b1d      	ldr	r3, [pc, #116]	; (150ec <secure_beacon_send+0x84>)
	time_diff = now - sub->beacon_sent;
   15076:	1a82      	subs	r2, r0, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
   15078:	429a      	cmp	r2, r3
	time_since_last_recv = now - sub->beacon_recv;
   1507a:	6869      	ldr	r1, [r5, #4]
	if (time_diff < (600 * MSEC_PER_SEC) &&
   1507c:	d80e      	bhi.n	1509c <secure_beacon_send+0x34>
		(time_diff < BEACON_THRESHOLD(sub) ||
   1507e:	f242 7310 	movw	r3, #10000	; 0x2710
   15082:	7a2c      	ldrb	r4, [r5, #8]
   15084:	fb04 3303 	mla	r3, r4, r3, r3
   15088:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1508c:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
   1508e:	429a      	cmp	r2, r3
   15090:	d32a      	bcc.n	150e8 <secure_beacon_send+0x80>
		(time_diff < BEACON_THRESHOLD(sub) ||
   15092:	f242 730f 	movw	r3, #9999	; 0x270f
	time_since_last_recv = now - sub->beacon_recv;
   15096:	1a40      	subs	r0, r0, r1
		(time_diff < BEACON_THRESHOLD(sub) ||
   15098:	4298      	cmp	r0, r3
   1509a:	d925      	bls.n	150e8 <secure_beacon_send+0x80>
				 PROV_XMIT, K_NO_WAIT);
   1509c:	2200      	movs	r2, #0
   1509e:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, BT_MESH_LOCAL_ADV,
   150a0:	2101      	movs	r1, #1
   150a2:	e9cd 2300 	strd	r2, r3, [sp]
   150a6:	2002      	movs	r0, #2
   150a8:	2208      	movs	r2, #8
   150aa:	f7ff fe65 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   150ae:	4604      	mov	r4, r0
   150b0:	b968      	cbnz	r0, 150ce <secure_beacon_send+0x66>
		LOG_ERR("Unable to allocate beacon buffer");
   150b2:	4b0f      	ldr	r3, [pc, #60]	; (150f0 <secure_beacon_send+0x88>)
   150b4:	9307      	str	r3, [sp, #28]
   150b6:	2302      	movs	r3, #2
   150b8:	9306      	str	r3, [sp, #24]
   150ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150be:	4603      	mov	r3, r0
   150c0:	aa06      	add	r2, sp, #24
   150c2:	480c      	ldr	r0, [pc, #48]	; (150f4 <secure_beacon_send+0x8c>)
   150c4:	f7f5 fd4a 	bl	ab5c <z_impl_z_log_msg_static_create>
		return true; /* Bail out */
   150c8:	2001      	movs	r0, #1
}
   150ca:	b009      	add	sp, #36	; 0x24
   150cc:	bd30      	pop	{r4, r5, pc}
	bt_mesh_beacon_create(sub, &buf->b);
   150ce:	f100 010c 	add.w	r1, r0, #12
   150d2:	4628      	mov	r0, r5
   150d4:	f7ff ff9e 	bl	15014 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
   150d8:	4620      	mov	r0, r4
   150da:	462a      	mov	r2, r5
   150dc:	4906      	ldr	r1, [pc, #24]	; (150f8 <secure_beacon_send+0x90>)
   150de:	f7ff fe6f 	bl	14dc0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   150e2:	4620      	mov	r0, r4
   150e4:	f00a fffa 	bl	200dc <net_buf_unref>
		return false;
   150e8:	2000      	movs	r0, #0
   150ea:	e7ee      	b.n	150ca <secure_beacon_send+0x62>
   150ec:	000927bf 	.word	0x000927bf
   150f0:	000327de 	.word	0x000327de
   150f4:	0002fc7c 	.word	0x0002fc7c
   150f8:	000305c4 	.word	0x000305c4

000150fc <bt_mesh_beacon_update>:
{
   150fc:	b523      	push	{r0, r1, r5, lr}
   150fe:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
   15100:	f001 f8ec 	bl	162dc <bt_mesh_net_flags>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   15104:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	uint8_t flags = bt_mesh_net_flags(sub);
   15108:	4601      	mov	r1, r0
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
   1510a:	1e9a      	subs	r2, r3, #2
   1510c:	4253      	negs	r3, r2
   1510e:	4153      	adcs	r3, r2
   15110:	225a      	movs	r2, #90	; 0x5a
   15112:	4353      	muls	r3, r2
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
   15114:	f103 0262 	add.w	r2, r3, #98	; 0x62
   15118:	f103 007a 	add.w	r0, r3, #122	; 0x7a
				   bt_mesh.iv_index, sub->auth);
   1511c:	f105 0328 	add.w	r3, r5, #40	; 0x28
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
   15120:	9300      	str	r3, [sp, #0]
   15122:	4b07      	ldr	r3, [pc, #28]	; (15140 <bt_mesh_beacon_update+0x44>)
   15124:	442a      	add	r2, r5
   15126:	681b      	ldr	r3, [r3, #0]
   15128:	4428      	add	r0, r5
   1512a:	f017 fd61 	bl	2cbf0 <bt_mesh_beacon_auth>
	if (err) {
   1512e:	b128      	cbz	r0, 1513c <bt_mesh_beacon_update+0x40>
   15130:	8c28      	ldrh	r0, [r5, #32]
}
   15132:	b002      	add	sp, #8
   15134:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
   15138:	f7ff bf56 	b.w	14fe8 <bt_mesh_beacon_update.part.0.isra.0>
   1513c:	b002      	add	sp, #8
   1513e:	bd20      	pop	{r5, pc}
   15140:	20009ec8 	.word	0x20009ec8

00015144 <bt_mesh_beacon_init>:
	.evt_handler = subnet_evt,
};

void bt_mesh_beacon_init(void)
{
	k_work_init_delayable(&beacon_timer, beacon_send);
   15144:	4901      	ldr	r1, [pc, #4]	; (1514c <bt_mesh_beacon_init+0x8>)
   15146:	4802      	ldr	r0, [pc, #8]	; (15150 <bt_mesh_beacon_init+0xc>)
   15148:	f011 b9ac 	b.w	264a4 <k_work_init_delayable>
   1514c:	00014e91 	.word	0x00014e91
   15150:	20009e98 	.word	0x20009e98

00015154 <bt_mesh_beacon_ivu_initiator>:
	if (val) {
   15154:	4b0b      	ldr	r3, [pc, #44]	; (15184 <bt_mesh_beacon_ivu_initiator+0x30>)
   15156:	b160      	cbz	r0, 15172 <bt_mesh_beacon_ivu_initiator+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15158:	e8d3 1fef 	ldaex	r1, [r3]
   1515c:	f041 0110 	orr.w	r1, r1, #16
   15160:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15164:	2a00      	cmp	r2, #0
   15166:	d1f7      	bne.n	15158 <bt_mesh_beacon_ivu_initiator+0x4>
	 * An alternative solution would be to check whether beacons are enabled
	 * here, and cancel if not. As the cancel operation may fail, we would
	 * still have to implement an early exit mechanism, so we might as well
	 * just use this every time.
	 */
	k_work_schedule(&beacon_timer, K_NO_WAIT);
   15168:	2200      	movs	r2, #0
   1516a:	2300      	movs	r3, #0
   1516c:	4806      	ldr	r0, [pc, #24]	; (15188 <bt_mesh_beacon_ivu_initiator+0x34>)
   1516e:	f011 ba1f 	b.w	265b0 <k_work_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15172:	e8d3 1fef 	ldaex	r1, [r3]
   15176:	f021 0110 	bic.w	r1, r1, #16
   1517a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1517e:	2a00      	cmp	r2, #0
   15180:	d0f2      	beq.n	15168 <bt_mesh_beacon_ivu_initiator+0x14>
   15182:	e7f6      	b.n	15172 <bt_mesh_beacon_ivu_initiator+0x1e>
   15184:	20009ed0 	.word	0x20009ed0
   15188:	20009e98 	.word	0x20009e98

0001518c <bt_mesh_beacon_recv>:
{
   1518c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15190:	b087      	sub	sp, #28
	if (buf->len < 1) {
   15192:	8883      	ldrh	r3, [r0, #4]
{
   15194:	4604      	mov	r4, r0
   15196:	af00      	add	r7, sp, #0
	if (buf->len < 1) {
   15198:	b973      	cbnz	r3, 151b8 <bt_mesh_beacon_recv+0x2c>
		LOG_ERR("Too short beacon");
   1519a:	4a57      	ldr	r2, [pc, #348]	; (152f8 <bt_mesh_beacon_recv+0x16c>)
   1519c:	617a      	str	r2, [r7, #20]
   1519e:	2202      	movs	r2, #2
   151a0:	613a      	str	r2, [r7, #16]
   151a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151a6:	4855      	ldr	r0, [pc, #340]	; (152fc <bt_mesh_beacon_recv+0x170>)
   151a8:	f107 0210 	add.w	r2, r7, #16
   151ac:	f7f5 fcd6 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   151b0:	371c      	adds	r7, #28
   151b2:	46bd      	mov	sp, r7
   151b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	type = net_buf_simple_pull_u8(buf);
   151b8:	f018 fe60 	bl	2de7c <net_buf_simple_pull_u8>
	switch (type) {
   151bc:	4605      	mov	r5, r0
   151be:	b148      	cbz	r0, 151d4 <bt_mesh_beacon_recv+0x48>
   151c0:	2801      	cmp	r0, #1
   151c2:	d1f5      	bne.n	151b0 <bt_mesh_beacon_recv+0x24>
	if (buf->len < 21) {
   151c4:	88a3      	ldrh	r3, [r4, #4]
   151c6:	2b14      	cmp	r3, #20
   151c8:	d838      	bhi.n	1523c <bt_mesh_beacon_recv+0xb0>
		LOG_ERR("Too short secure beacon (len %u)", buf->len);
   151ca:	466c      	mov	r4, sp
   151cc:	b088      	sub	sp, #32
   151ce:	466a      	mov	r2, sp
   151d0:	494b      	ldr	r1, [pc, #300]	; (15300 <bt_mesh_beacon_recv+0x174>)
   151d2:	e00e      	b.n	151f2 <bt_mesh_beacon_recv+0x66>
	prov = bt_mesh_prov_get();
   151d4:	f008 faf4 	bl	1d7c0 <bt_mesh_prov_get>
	if (!prov->unprovisioned_beacon) {
   151d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
	prov = bt_mesh_prov_get();
   151da:	4606      	mov	r6, r0
	if (!prov->unprovisioned_beacon) {
   151dc:	2b00      	cmp	r3, #0
   151de:	d0e7      	beq.n	151b0 <bt_mesh_beacon_recv+0x24>
	if (buf->len != 18 && buf->len != 22) {
   151e0:	88a3      	ldrh	r3, [r4, #4]
   151e2:	f023 0204 	bic.w	r2, r3, #4
   151e6:	2a12      	cmp	r2, #18
   151e8:	d010      	beq.n	1520c <bt_mesh_beacon_recv+0x80>
		LOG_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
   151ea:	466c      	mov	r4, sp
   151ec:	b088      	sub	sp, #32
   151ee:	466a      	mov	r2, sp
   151f0:	4944      	ldr	r1, [pc, #272]	; (15304 <bt_mesh_beacon_recv+0x178>)
		LOG_ERR("Too short secure beacon (len %u)", buf->len);
   151f2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   151f6:	2303      	movs	r3, #3
   151f8:	f842 3f10 	str.w	r3, [r2, #16]!
   151fc:	2300      	movs	r3, #0
   151fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15202:	483e      	ldr	r0, [pc, #248]	; (152fc <bt_mesh_beacon_recv+0x170>)
   15204:	f7f5 fcaa 	bl	ab5c <z_impl_z_log_msg_static_create>
   15208:	46a5      	mov	sp, r4
		return;
   1520a:	e7d1      	b.n	151b0 <bt_mesh_beacon_recv+0x24>
	uuid = net_buf_simple_pull_mem(buf, 16);
   1520c:	2110      	movs	r1, #16
   1520e:	4620      	mov	r0, r4
   15210:	f00b f884 	bl	2031c <net_buf_simple_pull_mem>
   15214:	4680      	mov	r8, r0
	oob_info = net_buf_simple_pull_be16(buf);
   15216:	4620      	mov	r0, r4
   15218:	f018 fe40 	bl	2de9c <net_buf_simple_pull_be16>
	if (buf->len == 4) {
   1521c:	88a3      	ldrh	r3, [r4, #4]
	oob_info = net_buf_simple_pull_be16(buf);
   1521e:	4681      	mov	r9, r0
	if (buf->len == 4) {
   15220:	2b04      	cmp	r3, #4
   15222:	d109      	bne.n	15238 <bt_mesh_beacon_recv+0xac>
		uri_hash_val = net_buf_simple_pull_be32(buf);
   15224:	4620      	mov	r0, r4
   15226:	f018 fe43 	bl	2deb0 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
   1522a:	463a      	mov	r2, r7
		uri_hash_val = net_buf_simple_pull_be32(buf);
   1522c:	6038      	str	r0, [r7, #0]
	prov->unprovisioned_beacon(uuid,
   1522e:	4649      	mov	r1, r9
   15230:	4640      	mov	r0, r8
   15232:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15234:	4798      	blx	r3
   15236:	e7bb      	b.n	151b0 <bt_mesh_beacon_recv+0x24>
	uint32_t *uri_hash = NULL;
   15238:	462a      	mov	r2, r5
   1523a:	e7f8      	b.n	1522e <bt_mesh_beacon_recv+0xa2>
	sub = bt_mesh_subnet_find(beacon_cache_match, buf->data);
   1523c:	6821      	ldr	r1, [r4, #0]
   1523e:	4832      	ldr	r0, [pc, #200]	; (15308 <bt_mesh_beacon_recv+0x17c>)
   15240:	f001 f9bc 	bl	165bc <bt_mesh_subnet_find>
	if (sub) {
   15244:	4605      	mov	r5, r0
   15246:	2800      	cmp	r0, #0
   15248:	d147      	bne.n	152da <bt_mesh_beacon_recv+0x14e>
	params.flags = net_buf_simple_pull_u8(buf);
   1524a:	4620      	mov	r0, r4
	data = buf->data;
   1524c:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
   1524e:	f018 fe15 	bl	2de7c <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
   15252:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
   15254:	7338      	strb	r0, [r7, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
   15256:	4620      	mov	r0, r4
   15258:	f00b f860 	bl	2031c <net_buf_simple_pull_mem>
   1525c:	6038      	str	r0, [r7, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
   1525e:	4620      	mov	r0, r4
   15260:	f018 fe26 	bl	2deb0 <net_buf_simple_pull_be32>
	params.auth = buf->data;
   15264:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
   15266:	60b8      	str	r0, [r7, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
   15268:	4639      	mov	r1, r7
   1526a:	4828      	ldr	r0, [pc, #160]	; (1530c <bt_mesh_beacon_recv+0x180>)
	params.auth = buf->data;
   1526c:	607b      	str	r3, [r7, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
   1526e:	f001 f9a5 	bl	165bc <bt_mesh_subnet_find>
	if (!sub) {
   15272:	4605      	mov	r5, r0
   15274:	2800      	cmp	r0, #0
   15276:	d09b      	beq.n	151b0 <bt_mesh_beacon_recv+0x24>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
   15278:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1527c:	2b02      	cmp	r3, #2
   1527e:	d102      	bne.n	15286 <bt_mesh_beacon_recv+0xfa>
   15280:	7b7b      	ldrb	r3, [r7, #13]
   15282:	2b00      	cmp	r3, #0
   15284:	d094      	beq.n	151b0 <bt_mesh_beacon_recv+0x24>
	memcpy(sub->beacon_cache, data, 21);
   15286:	2215      	movs	r2, #21
   15288:	4631      	mov	r1, r6
   1528a:	f105 000a 	add.w	r0, r5, #10
   1528e:	f015 f944 	bl	2a51a <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
   15292:	7b39      	ldrb	r1, [r7, #12]
   15294:	4628      	mov	r0, r5
   15296:	7b7a      	ldrb	r2, [r7, #13]
   15298:	f001 0101 	and.w	r1, r1, #1
   1529c:	f017 f8d2 	bl	2c444 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
   152a0:	2000      	movs	r0, #0
   152a2:	f001 f83f 	bl	16324 <bt_mesh_subnet_get>
   152a6:	b108      	cbz	r0, 152ac <bt_mesh_beacon_recv+0x120>
   152a8:	8c2b      	ldrh	r3, [r5, #32]
   152aa:	b9b3      	cbnz	r3, 152da <bt_mesh_beacon_recv+0x14e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   152ac:	4b18      	ldr	r3, [pc, #96]	; (15310 <bt_mesh_beacon_recv+0x184>)
   152ae:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   152b2:	06d2      	lsls	r2, r2, #27
   152b4:	d50b      	bpl.n	152ce <bt_mesh_beacon_recv+0x142>
   152b6:	e8d3 2faf 	lda	r2, [r3]
	     BT_MESH_IV_UPDATE(params.flags))) {
   152ba:	7b3b      	ldrb	r3, [r7, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   152bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
   152c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   152c4:	429a      	cmp	r2, r3
   152c6:	d102      	bne.n	152ce <bt_mesh_beacon_recv+0x142>
		bt_mesh_beacon_ivu_initiator(false);
   152c8:	2000      	movs	r0, #0
   152ca:	f7ff ff43 	bl	15154 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
   152ce:	7b39      	ldrb	r1, [r7, #12]
   152d0:	68b8      	ldr	r0, [r7, #8]
   152d2:	f3c1 0140 	ubfx	r1, r1, #1, #1
   152d6:	f000 fa4f 	bl	15778 <bt_mesh_net_iv_update>
	if (bt_mesh_beacon_enabled() &&
   152da:	f7ff fb95 	bl	14a08 <bt_mesh_beacon_enabled>
   152de:	2800      	cmp	r0, #0
   152e0:	f43f af66 	beq.w	151b0 <bt_mesh_beacon_recv+0x24>
	    sub->beacons_cur < 0xff) {
   152e4:	7a6b      	ldrb	r3, [r5, #9]
	if (bt_mesh_beacon_enabled() &&
   152e6:	2bff      	cmp	r3, #255	; 0xff
   152e8:	f43f af62 	beq.w	151b0 <bt_mesh_beacon_recv+0x24>
		sub->beacons_cur++;
   152ec:	3301      	adds	r3, #1
   152ee:	726b      	strb	r3, [r5, #9]
		sub->beacon_recv = k_uptime_get_32();
   152f0:	f017 f805 	bl	2c2fe <k_uptime_get_32>
   152f4:	6068      	str	r0, [r5, #4]
   152f6:	e75b      	b.n	151b0 <bt_mesh_beacon_recv+0x24>
   152f8:	00032843 	.word	0x00032843
   152fc:	0002fc7c 	.word	0x0002fc7c
   15300:	0003287d 	.word	0x0003287d
   15304:	00032854 	.word	0x00032854
   15308:	0002c291 	.word	0x0002c291
   1530c:	0002c2a3 	.word	0x0002c2a3
   15310:	20009ed0 	.word	0x20009ed0

00015314 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
   15314:	b510      	push	{r4, lr}
	if (bt_mesh_is_provisioned()) {
   15316:	f7ff fa4d 	bl	147b4 <bt_mesh_is_provisioned>
   1531a:	b110      	cbz	r0, 15322 <bt_mesh_beacon_enable+0xe>
		bt_mesh_subnet_foreach(subnet_beacon_enable);
   1531c:	4804      	ldr	r0, [pc, #16]	; (15330 <bt_mesh_beacon_enable+0x1c>)
   1531e:	f001 f95f 	bl	165e0 <bt_mesh_subnet_foreach>
	}

	k_work_reschedule(&beacon_timer, K_NO_WAIT);
}
   15322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&beacon_timer, K_NO_WAIT);
   15326:	2200      	movs	r2, #0
   15328:	2300      	movs	r3, #0
   1532a:	4802      	ldr	r0, [pc, #8]	; (15334 <bt_mesh_beacon_enable+0x20>)
   1532c:	f011 b9a4 	b.w	26678 <k_work_reschedule>
   15330:	0002c339 	.word	0x0002c339
   15334:	20009e98 	.word	0x20009e98

00015338 <bt_mesh_beacon_disable>:
   15338:	4b04      	ldr	r3, [pc, #16]	; (1534c <bt_mesh_beacon_disable+0x14>)
   1533a:	e8d3 3faf 	lda	r3, [r3]

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
   1533e:	06db      	lsls	r3, r3, #27
   15340:	d402      	bmi.n	15348 <bt_mesh_beacon_disable+0x10>
		/* If this fails, we'll do an early exit in the work handler. */
		(void)k_work_cancel_delayable(&beacon_timer);
   15342:	4803      	ldr	r0, [pc, #12]	; (15350 <bt_mesh_beacon_disable+0x18>)
   15344:	f011 b99e 	b.w	26684 <k_work_cancel_delayable>
	}
}
   15348:	4770      	bx	lr
   1534a:	bf00      	nop
   1534c:	20009ed0 	.word	0x20009ed0
   15350:	20009e98 	.word	0x20009e98

00015354 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
   15354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15358:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
   1535a:	680b      	ldr	r3, [r1, #0]
{
   1535c:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
   1535e:	781a      	ldrb	r2, [r3, #0]
{
   15360:	4605      	mov	r5, r0
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
   15362:	7d07      	ldrb	r7, [r0, #20]
	if (NID(in->data) != cred->nid) {
   15364:	7830      	ldrb	r0, [r6, #0]
   15366:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1536a:	4298      	cmp	r0, r3
   1536c:	d002      	beq.n	15374 <net_decrypt+0x20>
		return false;
   1536e:	2000      	movs	r0, #0

	LOG_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
   15370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
   15374:	f8df 8100 	ldr.w	r8, [pc, #256]	; 15478 <net_decrypt+0x124>
	net_buf_simple_add_mem(out, in->data, in->len);
   15378:	4620      	mov	r0, r4
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
   1537a:	f8d8 3000 	ldr.w	r3, [r8]
   1537e:	f003 0301 	and.w	r3, r3, #1
   15382:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   15386:	463a      	mov	r2, r7
   15388:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
   1538c:	2300      	movs	r3, #0
   1538e:	752a      	strb	r2, [r5, #20]
   15390:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
   15392:	68a3      	ldr	r3, [r4, #8]
   15394:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
   15396:	888a      	ldrh	r2, [r1, #4]
   15398:	6809      	ldr	r1, [r1, #0]
   1539a:	f018 fd9e 	bl	2deda <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
   1539e:	7d2b      	ldrb	r3, [r5, #20]
   153a0:	f8d8 1000 	ldr.w	r1, [r8]
   153a4:	f003 0301 	and.w	r3, r3, #1
   153a8:	6820      	ldr	r0, [r4, #0]
   153aa:	f106 0211 	add.w	r2, r6, #17
   153ae:	1ac9      	subs	r1, r1, r3
   153b0:	f003 facc 	bl	1894c <bt_mesh_net_obfuscate>
   153b4:	2800      	cmp	r0, #0
   153b6:	d1da      	bne.n	1536e <net_decrypt+0x1a>
	rx->ctx.addr = SRC(out->data);
   153b8:	6823      	ldr	r3, [r4, #0]
   153ba:	f8b3 2005 	ldrh.w	r2, [r3, #5]
   153be:	ba52      	rev16	r2, r2
   153c0:	b290      	uxth	r0, r2
   153c2:	812a      	strh	r2, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
   153c4:	b212      	sxth	r2, r2
   153c6:	2a00      	cmp	r2, #0
   153c8:	ddd1      	ble.n	1536e <net_decrypt+0x1a>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
   153ca:	f003 ffbd 	bl	19348 <bt_mesh_has_addr>
   153ce:	2800      	cmp	r0, #0
   153d0:	d1cd      	bne.n	1536e <net_decrypt+0x1a>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
   153d2:	7d2d      	ldrb	r5, [r5, #20]
   153d4:	f015 0f30 	tst.w	r5, #48	; 0x30
   153d8:	d10b      	bne.n	153f2 <net_decrypt+0x9e>
	for (i = msg_cache_next; i > 0U;) {
   153da:	4b28      	ldr	r3, [pc, #160]	; (1547c <net_decrypt+0x128>)
		if (msg_cache[--i].src == SRC(pdu->data) &&
   153dc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 15480 <net_decrypt+0x12c>
	for (i = msg_cache_next; i > 0U;) {
   153e0:	f8b3 9000 	ldrh.w	r9, [r3]
   153e4:	4649      	mov	r1, r9
   153e6:	b9b9      	cbnz	r1, 15418 <net_decrypt+0xc4>
	for (i = ARRAY_SIZE(msg_cache); i > msg_cache_next;) {
   153e8:	2120      	movs	r1, #32
		if (msg_cache[--i].src == SRC(pdu->data) &&
   153ea:	f8df a094 	ldr.w	sl, [pc, #148]	; 15480 <net_decrypt+0x12c>
	for (i = ARRAY_SIZE(msg_cache); i > msg_cache_next;) {
   153ee:	4589      	cmp	r9, r1
   153f0:	d32a      	bcc.n	15448 <net_decrypt+0xf4>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
   153f2:	f007 0330 	and.w	r3, r7, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
   153f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   153fa:	f8d8 2000 	ldr.w	r2, [r8]
   153fe:	424b      	negs	r3, r1
   15400:	f005 0501 	and.w	r5, r5, #1
   15404:	414b      	adcs	r3, r1
   15406:	1b52      	subs	r2, r2, r5
   15408:	4621      	mov	r1, r4
   1540a:	1c70      	adds	r0, r6, #1
   1540c:	f017 fb13 	bl	2ca36 <bt_mesh_net_decrypt>
				   proxy) == 0;
   15410:	fab0 f080 	clz	r0, r0
   15414:	0940      	lsrs	r0, r0, #5
   15416:	e7ab      	b.n	15370 <net_decrypt+0x1c>
		if (msg_cache[--i].src == SRC(pdu->data) &&
   15418:	6820      	ldr	r0, [r4, #0]
   1541a:	3901      	subs	r1, #1
   1541c:	f8b0 3005 	ldrh.w	r3, [r0, #5]
   15420:	b289      	uxth	r1, r1
   15422:	f83a 2021 	ldrh.w	r2, [sl, r1, lsl #2]
   15426:	ba5b      	rev16	r3, r3
   15428:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1542c:	b29b      	uxth	r3, r3
   1542e:	429a      	cmp	r2, r3
   15430:	d1d9      	bne.n	153e6 <net_decrypt+0x92>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
   15432:	3002      	adds	r0, #2
   15434:	f016 ff84 	bl	2c340 <sys_get_be24>
   15438:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
   1543c:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[--i].src == SRC(pdu->data) &&
   15440:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
   15444:	d1cf      	bne.n	153e6 <net_decrypt+0x92>
   15446:	e792      	b.n	1536e <net_decrypt+0x1a>
		if (msg_cache[--i].src == SRC(pdu->data) &&
   15448:	6820      	ldr	r0, [r4, #0]
   1544a:	3901      	subs	r1, #1
   1544c:	f8b0 3005 	ldrh.w	r3, [r0, #5]
   15450:	b289      	uxth	r1, r1
   15452:	f83a 2021 	ldrh.w	r2, [sl, r1, lsl #2]
   15456:	ba5b      	rev16	r3, r3
   15458:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1545c:	b29b      	uxth	r3, r3
   1545e:	429a      	cmp	r2, r3
   15460:	d1c5      	bne.n	153ee <net_decrypt+0x9a>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
   15462:	3002      	adds	r0, #2
   15464:	f016 ff6c 	bl	2c340 <sys_get_be24>
   15468:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
   1546c:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[--i].src == SRC(pdu->data) &&
   15470:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
   15474:	d1bb      	bne.n	153ee <net_decrypt+0x9a>
   15476:	e77a      	b.n	1536e <net_decrypt+0x1a>
   15478:	20009ec8 	.word	0x20009ec8
   1547c:	2000b136 	.word	0x2000b136
   15480:	2000ac70 	.word	0x2000ac70

00015484 <bt_mesh_net_local>:
{
   15484:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   15486:	4d31      	ldr	r5, [pc, #196]	; (1554c <bt_mesh_net_local+0xc8>)
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   15488:	4e31      	ldr	r6, [pc, #196]	; (15550 <bt_mesh_net_local+0xcc>)
{
   1548a:	b08a      	sub	sp, #40	; 0x28
   1548c:	69ec      	ldr	r4, [r5, #28]
Z_GENLIST_GET(slist, snode)
   1548e:	2c00      	cmp	r4, #0
   15490:	d05a      	beq.n	15548 <bt_mesh_net_local+0xc4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15492:	6a2a      	ldr	r2, [r5, #32]
	return node->next;
   15494:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15496:	4294      	cmp	r4, r2
	list->head = node;
   15498:	61eb      	str	r3, [r5, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1549a:	d100      	bne.n	1549e <bt_mesh_net_local+0x1a>
	list->tail = node;
   1549c:	622b      	str	r3, [r5, #32]
		struct bt_mesh_net_rx rx = {
   1549e:	2218      	movs	r2, #24
   154a0:	2100      	movs	r1, #0
   154a2:	a804      	add	r0, sp, #16
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
   154a4:	9400      	str	r4, [sp, #0]
		struct bt_mesh_net_rx rx = {
   154a6:	f015 f843 	bl	2a530 <memset>
			.sub = buf->sub,
   154aa:	6863      	ldr	r3, [r4, #4]
			.seq = SEQ(buf->data),
   154ac:	f104 000b 	add.w	r0, r4, #11
		struct bt_mesh_net_rx rx = {
   154b0:	9304      	str	r3, [sp, #16]
   154b2:	8c1b      	ldrh	r3, [r3, #32]
   154b4:	f8ad 3014 	strh.w	r3, [sp, #20]
   154b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   154bc:	f8ad 3016 	strh.w	r3, [sp, #22]
   154c0:	89e3      	ldrh	r3, [r4, #14]
   154c2:	ba5b      	rev16	r3, r3
   154c4:	f8ad 3018 	strh.w	r3, [sp, #24]
   154c8:	8a23      	ldrh	r3, [r4, #16]
   154ca:	ba5b      	rev16	r3, r3
   154cc:	f8ad 301a 	strh.w	r3, [sp, #26]
				.recv_ttl = TTL(buf->data),
   154d0:	7aa3      	ldrb	r3, [r4, #10]
   154d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
   154d6:	f88d 301d 	strb.w	r3, [sp, #29]
   154da:	2301      	movs	r3, #1
   154dc:	f88d 301f 	strb.w	r3, [sp, #31]
			.seq = SEQ(buf->data),
   154e0:	f016 ff2e 	bl	2c340 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
   154e4:	682b      	ldr	r3, [r5, #0]
		struct bt_mesh_net_rx rx = {
   154e6:	9008      	str	r0, [sp, #32]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
   154e8:	7a62      	ldrb	r2, [r4, #9]
   154ea:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
   154ee:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   154f2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
		net_buf_simple_init_with_data(&sbuf, buf->data, buf->len);
   154f6:	a801      	add	r0, sp, #4
		struct bt_mesh_net_rx rx = {
   154f8:	f363 0200 	bfi	r2, r3, #0, #1
   154fc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			.new_key = SUBNET_KEY_TX_IDX(buf->sub),
   15500:	6863      	ldr	r3, [r4, #4]
		struct bt_mesh_net_rx rx = {
   15502:	b2d2      	uxtb	r2, r2
			.new_key = SUBNET_KEY_TX_IDX(buf->sub),
   15504:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   15508:	1e99      	subs	r1, r3, #2
   1550a:	424b      	negs	r3, r1
   1550c:	414b      	adcs	r3, r1
		struct bt_mesh_net_rx rx = {
   1550e:	f363 0241 	bfi	r2, r3, #1, #1
   15512:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			.ctl = CTL(buf->data),
   15516:	7aa3      	ldrb	r3, [r4, #10]
		struct bt_mesh_net_rx rx = {
   15518:	b2d2      	uxtb	r2, r2
			.ctl = CTL(buf->data),
   1551a:	09db      	lsrs	r3, r3, #7
		struct bt_mesh_net_rx rx = {
   1551c:	00db      	lsls	r3, r3, #3
   1551e:	f022 0278 	bic.w	r2, r2, #120	; 0x78
   15522:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   15526:	4313      	orrs	r3, r2
   15528:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		net_buf_simple_init_with_data(&sbuf, buf->data, buf->len);
   1552c:	7a22      	ldrb	r2, [r4, #8]
   1552e:	f104 0109 	add.w	r1, r4, #9
   15532:	f018 fc7b 	bl	2de2c <net_buf_simple_init_with_data>
		(void)bt_mesh_trans_recv(&sbuf, &rx);
   15536:	a904      	add	r1, sp, #16
   15538:	a801      	add	r0, sp, #4
   1553a:	f002 fa83 	bl	17a44 <bt_mesh_trans_recv>
		k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   1553e:	4669      	mov	r1, sp
   15540:	4630      	mov	r0, r6
   15542:	f010 f823 	bl	2558c <k_mem_slab_free>
   15546:	e7a1      	b.n	1548c <bt_mesh_net_local+0x8>
}
   15548:	b00a      	add	sp, #40	; 0x28
   1554a:	bd70      	pop	{r4, r5, r6, pc}
   1554c:	20009ec8 	.word	0x20009ec8
   15550:	20008dcc 	.word	0x20008dcc

00015554 <atomic_get.constprop.0>:
   15554:	4b01      	ldr	r3, [pc, #4]	; (1555c <atomic_get.constprop.0+0x8>)
   15556:	e8d3 0faf 	lda	r0, [r3]
}
   1555a:	4770      	bx	lr
   1555c:	20009ed0 	.word	0x20009ed0

00015560 <pre_net_set>:
	LOG_DBG("Recovered DevKey %s", bt_hex(bt_mesh.dev_key, 16));

	return 0;
}

BT_MESH_SETTINGS_DEFINE(net, "Net", net_set);
   15560:	b570      	push	{r4, r5, r6, lr}
   15562:	b08c      	sub	sp, #48	; 0x30
   15564:	460d      	mov	r5, r1
   15566:	4619      	mov	r1, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15568:	f7ff fff4 	bl	15554 <atomic_get.constprop.0>
   1556c:	f010 0401 	ands.w	r4, r0, #1
   15570:	4616      	mov	r6, r2
   15572:	d01a      	beq.n	155aa <pre_net_set+0x4a>
	if (len_rd == 0) {
   15574:	b945      	cbnz	r5, 15588 <pre_net_set+0x28>
		bt_mesh_comp_unprovision();
   15576:	f003 fec7 	bl	19308 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   1557a:	2210      	movs	r2, #16
   1557c:	4629      	mov	r1, r5
   1557e:	4812      	ldr	r0, [pc, #72]	; (155c8 <pre_net_set+0x68>)
   15580:	f014 ffd6 	bl	2a530 <memset>
		return 0;
   15584:	2400      	movs	r4, #0
BT_MESH_SETTINGS_DEFINE(net, "Net", net_set);
   15586:	e010      	b.n	155aa <pre_net_set+0x4a>
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
   15588:	2312      	movs	r3, #18
   1558a:	4630      	mov	r0, r6
   1558c:	aa01      	add	r2, sp, #4
   1558e:	f006 fbb9 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   15592:	4604      	mov	r4, r0
   15594:	b160      	cbz	r0, 155b0 <pre_net_set+0x50>
		LOG_ERR("Failed to set \'net\'");
   15596:	4b0d      	ldr	r3, [pc, #52]	; (155cc <pre_net_set+0x6c>)
   15598:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1559c:	930b      	str	r3, [sp, #44]	; 0x2c
   1559e:	2302      	movs	r3, #2
   155a0:	480b      	ldr	r0, [pc, #44]	; (155d0 <pre_net_set+0x70>)
   155a2:	aa0a      	add	r2, sp, #40	; 0x28
   155a4:	930a      	str	r3, [sp, #40]	; 0x28
   155a6:	f016 fed3 	bl	2c350 <z_log_msg_static_create.constprop.0>
BT_MESH_SETTINGS_DEFINE(net, "Net", net_set);
   155aa:	4620      	mov	r0, r4
   155ac:	b00c      	add	sp, #48	; 0x30
   155ae:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   155b0:	2210      	movs	r2, #16
   155b2:	f10d 0106 	add.w	r1, sp, #6
   155b6:	4804      	ldr	r0, [pc, #16]	; (155c8 <pre_net_set+0x68>)
   155b8:	f014 ffaf 	bl	2a51a <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   155bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   155c0:	f003 fe8c 	bl	192dc <bt_mesh_comp_provision>
	return 0;
   155c4:	e7de      	b.n	15584 <pre_net_set+0x24>
   155c6:	bf00      	nop
   155c8:	2000a0f8 	.word	0x2000a0f8
   155cc:	000328ad 	.word	0x000328ad
   155d0:	0002fccc 	.word	0x0002fccc

000155d4 <pre_seq_set>:
	LOG_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}

BT_MESH_SETTINGS_DEFINE(seq, "Seq", seq_set);
   155d4:	b570      	push	{r4, r5, r6, lr}
   155d6:	b088      	sub	sp, #32
   155d8:	460d      	mov	r5, r1
   155da:	4619      	mov	r1, r3
   155dc:	f7ff ffba 	bl	15554 <atomic_get.constprop.0>
   155e0:	f010 0401 	ands.w	r4, r0, #1
   155e4:	4616      	mov	r6, r2
   155e6:	d011      	beq.n	1560c <pre_seq_set+0x38>
	if (len_rd == 0) {
   155e8:	b1e5      	cbz	r5, 15624 <pre_seq_set+0x50>
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
   155ea:	2303      	movs	r3, #3
   155ec:	4630      	mov	r0, r6
   155ee:	aa01      	add	r2, sp, #4
   155f0:	f006 fb88 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   155f4:	4604      	mov	r4, r0
   155f6:	b160      	cbz	r0, 15612 <pre_seq_set+0x3e>
		LOG_ERR("Failed to set \'seq\'");
   155f8:	4b0c      	ldr	r3, [pc, #48]	; (1562c <pre_seq_set+0x58>)
   155fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155fe:	9307      	str	r3, [sp, #28]
   15600:	2302      	movs	r3, #2
   15602:	480b      	ldr	r0, [pc, #44]	; (15630 <pre_seq_set+0x5c>)
   15604:	aa06      	add	r2, sp, #24
   15606:	9306      	str	r3, [sp, #24]
   15608:	f016 fea2 	bl	2c350 <z_log_msg_static_create.constprop.0>
BT_MESH_SETTINGS_DEFINE(seq, "Seq", seq_set);
   1560c:	4620      	mov	r0, r4
   1560e:	b008      	add	sp, #32
   15610:	bd70      	pop	{r4, r5, r6, pc}
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   15612:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15616:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   1561a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   1561e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
		bt_mesh.seq--;
   15622:	357f      	adds	r5, #127	; 0x7f
   15624:	4b03      	ldr	r3, [pc, #12]	; (15634 <pre_seq_set+0x60>)
		return 0;
   15626:	2400      	movs	r4, #0
		bt_mesh.seq--;
   15628:	605d      	str	r5, [r3, #4]
BT_MESH_SETTINGS_DEFINE(seq, "Seq", seq_set);
   1562a:	e7ef      	b.n	1560c <pre_seq_set+0x38>
   1562c:	000328c1 	.word	0x000328c1
   15630:	0002fccc 	.word	0x0002fccc
   15634:	20009ec8 	.word	0x20009ec8

00015638 <atomic_set_bit_to.constprop.0>:
	if (val) {
   15638:	4b09      	ldr	r3, [pc, #36]	; (15660 <atomic_set_bit_to.constprop.0+0x28>)
   1563a:	b140      	cbz	r0, 1564e <atomic_set_bit_to.constprop.0+0x16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1563c:	e8d3 1fef 	ldaex	r1, [r3]
   15640:	f041 0108 	orr.w	r1, r1, #8
   15644:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15648:	2a00      	cmp	r2, #0
   1564a:	d1f7      	bne.n	1563c <atomic_set_bit_to.constprop.0+0x4>
   1564c:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1564e:	e8d3 1fef 	ldaex	r1, [r3]
   15652:	f021 0108 	bic.w	r1, r1, #8
   15656:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1565a:	2a00      	cmp	r2, #0
   1565c:	d1f7      	bne.n	1564e <atomic_set_bit_to.constprop.0+0x16>
	}
}
   1565e:	4770      	bx	lr
   15660:	20009ed0 	.word	0x20009ed0

00015664 <pre_iv_set>:
BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);
   15664:	b570      	push	{r4, r5, r6, lr}
   15666:	b088      	sub	sp, #32
   15668:	460d      	mov	r5, r1
   1566a:	4619      	mov	r1, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1566c:	f7ff ff72 	bl	15554 <atomic_get.constprop.0>
   15670:	f010 0401 	ands.w	r4, r0, #1
   15674:	4616      	mov	r6, r2
   15676:	d01e      	beq.n	156b6 <pre_iv_set+0x52>
	if (len_rd == 0) {
   15678:	b965      	cbnz	r5, 15694 <pre_iv_set+0x30>
		bt_mesh.iv_index = 0U;
   1567a:	4b18      	ldr	r3, [pc, #96]	; (156dc <pre_iv_set+0x78>)
   1567c:	f843 5b08 	str.w	r5, [r3], #8
   15680:	e8d3 1fef 	ldaex	r1, [r3]
   15684:	f021 0108 	bic.w	r1, r1, #8
   15688:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1568c:	2a00      	cmp	r2, #0
   1568e:	d1f7      	bne.n	15680 <pre_iv_set+0x1c>
		return 0;
   15690:	2400      	movs	r4, #0
BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);
   15692:	e010      	b.n	156b6 <pre_iv_set+0x52>
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
   15694:	2305      	movs	r3, #5
   15696:	466a      	mov	r2, sp
   15698:	4630      	mov	r0, r6
   1569a:	f006 fb33 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   1569e:	4604      	mov	r4, r0
   156a0:	b160      	cbz	r0, 156bc <pre_iv_set+0x58>
		LOG_ERR("Failed to set \'iv\'");
   156a2:	4b0f      	ldr	r3, [pc, #60]	; (156e0 <pre_iv_set+0x7c>)
   156a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   156a8:	9307      	str	r3, [sp, #28]
   156aa:	2302      	movs	r3, #2
   156ac:	480d      	ldr	r0, [pc, #52]	; (156e4 <pre_iv_set+0x80>)
   156ae:	aa06      	add	r2, sp, #24
   156b0:	9306      	str	r3, [sp, #24]
   156b2:	f016 fe4d 	bl	2c350 <z_log_msg_static_create.constprop.0>
BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);
   156b6:	4620      	mov	r0, r4
   156b8:	b008      	add	sp, #32
   156ba:	bd70      	pop	{r4, r5, r6, pc}
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   156bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
   156c0:	9b00      	ldr	r3, [sp, #0]
   156c2:	4c06      	ldr	r4, [pc, #24]	; (156dc <pre_iv_set+0x78>)
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   156c4:	f000 0001 	and.w	r0, r0, #1
	bt_mesh.iv_index = iv.iv_index;
   156c8:	6023      	str	r3, [r4, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   156ca:	f7ff ffb5 	bl	15638 <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = iv.iv_duration;
   156ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   156d2:	f3c3 0346 	ubfx	r3, r3, #1, #7
   156d6:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
	return 0;
   156da:	e7d9      	b.n	15690 <pre_iv_set+0x2c>
   156dc:	20009ec8 	.word	0x20009ec8
   156e0:	000328d5 	.word	0x000328d5
   156e4:	0002fccc 	.word	0x0002fccc

000156e8 <bt_mesh_net_create>:
{
   156e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156ec:	460d      	mov	r5, r1
   156ee:	461f      	mov	r7, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
   156f0:	f015 0301 	ands.w	r3, r5, #1
{
   156f4:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
   156f6:	bf1d      	ittte	ne
   156f8:	4613      	movne	r3, r2
   156fa:	2102      	movne	r1, #2
   156fc:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
   156fe:	4619      	moveq	r1, r3
{
   15700:	b086      	sub	sp, #24
   15702:	4606      	mov	r6, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
   15704:	f000 fed8 	bl	164b8 <bt_mesh_subnet_set>
   15708:	4604      	mov	r4, r0
	if (err) {
   1570a:	b168      	cbz	r0, 15728 <bt_mesh_net_create+0x40>
		LOG_ERR("Failed creating subnet");
   1570c:	4b15      	ldr	r3, [pc, #84]	; (15764 <bt_mesh_net_create+0x7c>)
   1570e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15712:	9305      	str	r3, [sp, #20]
   15714:	2302      	movs	r3, #2
   15716:	4814      	ldr	r0, [pc, #80]	; (15768 <bt_mesh_net_create+0x80>)
   15718:	aa04      	add	r2, sp, #16
   1571a:	9304      	str	r3, [sp, #16]
   1571c:	f016 fe18 	bl	2c350 <z_log_msg_static_create.constprop.0>
}
   15720:	4620      	mov	r0, r4
   15722:	b006      	add	sp, #24
   15724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
   15728:	4601      	mov	r1, r0
   1572a:	2280      	movs	r2, #128	; 0x80
   1572c:	480f      	ldr	r0, [pc, #60]	; (1576c <bt_mesh_net_create+0x84>)
   1572e:	f014 feff 	bl	2a530 <memset>
	bt_mesh.iv_index = iv_index;
   15732:	f8df 803c 	ldr.w	r8, [pc, #60]	; 15770 <bt_mesh_net_create+0x88>
	msg_cache_next = 0U;
   15736:	4b0f      	ldr	r3, [pc, #60]	; (15774 <bt_mesh_net_create+0x8c>)
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
   15738:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
   1573c:	801c      	strh	r4, [r3, #0]
	bt_mesh.iv_index = iv_index;
   1573e:	f8c8 7000 	str.w	r7, [r8]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
   15742:	f7ff ff79 	bl	15638 <atomic_set_bit_to.constprop.0>
	if (BT_MESH_IV_UPDATE(flags)) {
   15746:	b110      	cbz	r0, 1574e <bt_mesh_net_create+0x66>
		bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
   15748:	2360      	movs	r3, #96	; 0x60
   1574a:	f888 31f8 	strb.w	r3, [r8, #504]	; 0x1f8
		bt_mesh_subnet_store(idx);
   1574e:	4630      	mov	r0, r6
   15750:	f016 fe4a 	bl	2c3e8 <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   15754:	2004      	movs	r0, #4
   15756:	f006 fb11 	bl	1bd7c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   1575a:	2005      	movs	r0, #5
   1575c:	f006 fb0e 	bl	1bd7c <bt_mesh_settings_store_schedule>
   15760:	e7de      	b.n	15720 <bt_mesh_net_create+0x38>
   15762:	bf00      	nop
   15764:	000328e8 	.word	0x000328e8
   15768:	0002fccc 	.word	0x0002fccc
   1576c:	2000ac70 	.word	0x2000ac70
   15770:	20009ec8 	.word	0x20009ec8
   15774:	2000b136 	.word	0x2000b136

00015778 <bt_mesh_net_iv_update>:
{
   15778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1577a:	b087      	sub	sp, #28
	if (iv_index < bt_mesh.iv_index ||
   1577c:	4c42      	ldr	r4, [pc, #264]	; (15888 <bt_mesh_net_iv_update+0x110>)
{
   1577e:	4605      	mov	r5, r0
	if (iv_index < bt_mesh.iv_index ||
   15780:	6823      	ldr	r3, [r4, #0]
{
   15782:	460e      	mov	r6, r1
	if (iv_index < bt_mesh.iv_index ||
   15784:	4283      	cmp	r3, r0
{
   15786:	af00      	add	r7, sp, #0
	if (iv_index < bt_mesh.iv_index ||
   15788:	d803      	bhi.n	15792 <bt_mesh_net_iv_update+0x1a>
	    iv_index > bt_mesh.iv_index + 42) {
   1578a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
	if (iv_index < bt_mesh.iv_index ||
   1578e:	4282      	cmp	r2, r0
   15790:	d213      	bcs.n	157ba <bt_mesh_net_iv_update+0x42>
		LOG_ERR("IV Index out of sync: 0x%08x != 0x%08x", iv_index, bt_mesh.iv_index);
   15792:	466c      	mov	r4, sp
   15794:	b088      	sub	sp, #32
   15796:	466a      	mov	r2, sp
   15798:	61d3      	str	r3, [r2, #28]
   1579a:	2304      	movs	r3, #4
   1579c:	493b      	ldr	r1, [pc, #236]	; (1588c <bt_mesh_net_iv_update+0x114>)
   1579e:	483c      	ldr	r0, [pc, #240]	; (15890 <bt_mesh_net_iv_update+0x118>)
   157a0:	e9c2 1505 	strd	r1, r5, [r2, #20]
   157a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   157a8:	f842 3f10 	str.w	r3, [r2, #16]!
   157ac:	f016 fdd0 	bl	2c350 <z_log_msg_static_create.constprop.0>
   157b0:	46a5      	mov	sp, r4
		return false;
   157b2:	2000      	movs	r0, #0
}
   157b4:	371c      	adds	r7, #28
   157b6:	46bd      	mov	sp, r7
   157b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((iv_index > bt_mesh.iv_index + 1) ||
   157ba:	3301      	adds	r3, #1
   157bc:	4283      	cmp	r3, r0
   157be:	d22b      	bcs.n	15818 <bt_mesh_net_iv_update+0xa0>
		if (ivi_was_recovered &&
   157c0:	4b34      	ldr	r3, [pc, #208]	; (15894 <bt_mesh_net_iv_update+0x11c>)
   157c2:	781a      	ldrb	r2, [r3, #0]
   157c4:	2a00      	cmp	r2, #0
   157c6:	d146      	bne.n	15856 <bt_mesh_net_iv_update+0xde>
		ivi_was_recovered = true;
   157c8:	2201      	movs	r2, #1
   157ca:	701a      	strb	r2, [r3, #0]
		bt_mesh_rpl_clear();
   157cc:	f006 fc82 	bl	1c0d4 <bt_mesh_rpl_clear>
		bt_mesh.seq = 0U;
   157d0:	2300      	movs	r3, #0
		bt_mesh.iv_index = iv_index;
   157d2:	6025      	str	r5, [r4, #0]
		bt_mesh.seq = 0U;
   157d4:	6063      	str	r3, [r4, #4]
	bt_mesh.ivu_duration = 0U;
   157d6:	2500      	movs	r5, #0
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
   157d8:	4630      	mov	r0, r6
   157da:	f7ff ff2d 	bl	15638 <atomic_set_bit_to.constprop.0>
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   157de:	2300      	movs	r3, #0
   157e0:	4a2d      	ldr	r2, [pc, #180]	; (15898 <bt_mesh_net_iv_update+0x120>)
   157e2:	482e      	ldr	r0, [pc, #184]	; (1589c <bt_mesh_net_iv_update+0x124>)
	bt_mesh.ivu_duration = 0U;
   157e4:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   157e8:	f010 ff46 	bl	26678 <k_work_reschedule>
		bt_mesh_friend_sec_update(BT_MESH_KEY_ANY);
   157ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   157f0:	f007 f9f8 	bl	1cbe4 <bt_mesh_friend_sec_update>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
   157f4:	482a      	ldr	r0, [pc, #168]	; (158a0 <bt_mesh_net_iv_update+0x128>)
   157f6:	f000 fef3 	bl	165e0 <bt_mesh_subnet_foreach>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   157fa:	f7ff f935 	bl	14a68 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   157fe:	2801      	cmp	r0, #1
   15800:	d102      	bne.n	15808 <bt_mesh_net_iv_update+0x90>
		bt_mesh_proxy_beacon_send(NULL);
   15802:	4628      	mov	r0, r5
   15804:	f009 fcf8 	bl	1f1f8 <bt_mesh_proxy_beacon_send>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   15808:	2004      	movs	r0, #4
   1580a:	f006 fab7 	bl	1bd7c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   1580e:	2005      	movs	r0, #5
   15810:	f006 fab4 	bl	1bd7c <bt_mesh_settings_store_schedule>
	return true;
   15814:	2001      	movs	r0, #1
   15816:	e7cd      	b.n	157b4 <bt_mesh_net_iv_update+0x3c>
	if ((iv_index > bt_mesh.iv_index + 1) ||
   15818:	d105      	bne.n	15826 <bt_mesh_net_iv_update+0xae>
   1581a:	f7ff fe9b 	bl	15554 <atomic_get.constprop.0>
	    (iv_index == bt_mesh.iv_index + 1 &&
   1581e:	0703      	lsls	r3, r0, #28
   15820:	d4ce      	bmi.n	157c0 <bt_mesh_net_iv_update+0x48>
	     (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) || !iv_update))) {
   15822:	2900      	cmp	r1, #0
   15824:	d0cc      	beq.n	157c0 <bt_mesh_net_iv_update+0x48>
   15826:	f7ff fe95 	bl	15554 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) == iv_update) {
   1582a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1582e:	42b0      	cmp	r0, r6
   15830:	d0bf      	beq.n	157b2 <bt_mesh_net_iv_update+0x3a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   15832:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
   15836:	2b5f      	cmp	r3, #95	; 0x5f
   15838:	d9bb      	bls.n	157b2 <bt_mesh_net_iv_update+0x3a>
	if (!iv_update && bt_mesh_tx_in_progress()) {
   1583a:	b9e6      	cbnz	r6, 15876 <bt_mesh_net_iv_update+0xfe>
   1583c:	f001 fee2 	bl	17604 <bt_mesh_tx_in_progress>
   15840:	b300      	cbz	r0, 15884 <bt_mesh_net_iv_update+0x10c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15842:	4b18      	ldr	r3, [pc, #96]	; (158a4 <bt_mesh_net_iv_update+0x12c>)
   15844:	e8d3 1fef 	ldaex	r1, [r3]
   15848:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1584c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15850:	2a00      	cmp	r2, #0
   15852:	d0ae      	beq.n	157b2 <bt_mesh_net_iv_update+0x3a>
   15854:	e7f6      	b.n	15844 <bt_mesh_net_iv_update+0xcc>
		if (ivi_was_recovered &&
   15856:	f894 21f8 	ldrb.w	r2, [r4, #504]	; 0x1f8
   1585a:	2abf      	cmp	r2, #191	; 0xbf
   1585c:	d8b4      	bhi.n	157c8 <bt_mesh_net_iv_update+0x50>
			LOG_ERR("IV Index Recovery before minimum delay");
   1585e:	4b12      	ldr	r3, [pc, #72]	; (158a8 <bt_mesh_net_iv_update+0x130>)
   15860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15864:	617b      	str	r3, [r7, #20]
   15866:	2302      	movs	r3, #2
   15868:	4809      	ldr	r0, [pc, #36]	; (15890 <bt_mesh_net_iv_update+0x118>)
   1586a:	613b      	str	r3, [r7, #16]
   1586c:	f107 0210 	add.w	r2, r7, #16
   15870:	f016 fd6e 	bl	2c350 <z_log_msg_static_create.constprop.0>
			return false;
   15874:	e79d      	b.n	157b2 <bt_mesh_net_iv_update+0x3a>
		bt_mesh.iv_index = iv_index;
   15876:	6025      	str	r5, [r4, #0]
		bt_mesh_rpl_reset();
   15878:	f006 fc3c 	bl	1c0f4 <bt_mesh_rpl_reset>
		ivi_was_recovered = false;
   1587c:	2200      	movs	r2, #0
   1587e:	4b05      	ldr	r3, [pc, #20]	; (15894 <bt_mesh_net_iv_update+0x11c>)
   15880:	701a      	strb	r2, [r3, #0]
   15882:	e7a8      	b.n	157d6 <bt_mesh_net_iv_update+0x5e>
		bt_mesh.seq = 0U;
   15884:	6066      	str	r6, [r4, #4]
   15886:	e7a6      	b.n	157d6 <bt_mesh_net_iv_update+0x5e>
   15888:	20009ec8 	.word	0x20009ec8
   1588c:	000328ff 	.word	0x000328ff
   15890:	0002fccc 	.word	0x0002fccc
   15894:	2000b332 	.word	0x2000b332
   15898:	a8c00000 	.word	0xa8c00000
   1589c:	2000a0c8 	.word	0x2000a0c8
   158a0:	000150fd 	.word	0x000150fd
   158a4:	20009ed0 	.word	0x20009ed0
   158a8:	00032926 	.word	0x00032926

000158ac <ivu_refresh>:
{
   158ac:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   158ae:	f7fe ff81 	bl	147b4 <bt_mesh_is_provisioned>
   158b2:	b358      	cbz	r0, 1590c <ivu_refresh+0x60>
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
   158b4:	4c16      	ldr	r4, [pc, #88]	; (15910 <ivu_refresh+0x64>)
   158b6:	f894 31f8 	ldrb.w	r3, [r4, #504]	; 0x1f8
   158ba:	2be7      	cmp	r3, #231	; 0xe7
   158bc:	bf28      	it	cs
   158be:	23e7      	movcs	r3, #231	; 0xe7
   158c0:	3318      	adds	r3, #24
   158c2:	b2db      	uxtb	r3, r3
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   158c4:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
   158c6:	f884 31f8 	strb.w	r3, [r4, #504]	; 0x1f8
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   158ca:	d809      	bhi.n	158e0 <ivu_refresh+0x34>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   158cc:	2004      	movs	r0, #4
   158ce:	f006 fa55 	bl	1bd7c <bt_mesh_settings_store_schedule>
}
   158d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   158d6:	2300      	movs	r3, #0
   158d8:	4a0e      	ldr	r2, [pc, #56]	; (15914 <ivu_refresh+0x68>)
   158da:	480f      	ldr	r0, [pc, #60]	; (15918 <ivu_refresh+0x6c>)
   158dc:	f010 becc 	b.w	26678 <k_work_reschedule>
		goto end;
   158e0:	2260      	movs	r2, #96	; 0x60
   158e2:	fbb3 f1f2 	udiv	r1, r3, r2
   158e6:	fb02 3311 	mls	r3, r2, r1, r3
	if (!(bt_mesh.ivu_duration % BT_MESH_IVU_MIN_HOURS)) {
   158ea:	b2db      	uxtb	r3, r3
   158ec:	b913      	cbnz	r3, 158f4 <ivu_refresh+0x48>
		bt_mesh_subnet_foreach(bt_mesh_beacon_cache_clear);
   158ee:	480b      	ldr	r0, [pc, #44]	; (1591c <ivu_refresh+0x70>)
   158f0:	f000 fe76 	bl	165e0 <bt_mesh_subnet_foreach>
   158f4:	f7ff fe2e 	bl	15554 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   158f8:	0703      	lsls	r3, r0, #28
   158fa:	d5e7      	bpl.n	158cc <ivu_refresh+0x20>
		bt_mesh_beacon_ivu_initiator(true);
   158fc:	2001      	movs	r0, #1
   158fe:	f7ff fc29 	bl	15154 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   15902:	2100      	movs	r1, #0
   15904:	6820      	ldr	r0, [r4, #0]
   15906:	f7ff ff37 	bl	15778 <bt_mesh_net_iv_update>
   1590a:	e7e2      	b.n	158d2 <ivu_refresh+0x26>
}
   1590c:	bd10      	pop	{r4, pc}
   1590e:	bf00      	nop
   15910:	20009ec8 	.word	0x20009ec8
   15914:	a8c00000 	.word	0xa8c00000
   15918:	2000a0c8 	.word	0x2000a0c8
   1591c:	0002c325 	.word	0x0002c325

00015920 <bt_mesh_next_seq>:
{
   15920:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
   15922:	4c10      	ldr	r4, [pc, #64]	; (15964 <bt_mesh_next_seq+0x44>)
   15924:	6865      	ldr	r5, [r4, #4]
   15926:	1c6b      	adds	r3, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
   15928:	065a      	lsls	r2, r3, #25
	uint32_t seq = bt_mesh.seq++;
   1592a:	6063      	str	r3, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE > 1 &&
   1592c:	d102      	bne.n	15934 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   1592e:	2005      	movs	r0, #5
   15930:	f006 fa24 	bl	1bd7c <bt_mesh_settings_store_schedule>
   15934:	f7ff fe0e 	bl	15554 <atomic_get.constprop.0>
   15938:	4603      	mov	r3, r0
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
   1593a:	071b      	lsls	r3, r3, #28
   1593c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15940:	d40e      	bmi.n	15960 <bt_mesh_next_seq+0x40>
   15942:	6863      	ldr	r3, [r4, #4]
   15944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   15948:	d90a      	bls.n	15960 <bt_mesh_next_seq+0x40>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
   1594a:	f000 fceb 	bl	16324 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
   1594e:	b138      	cbz	r0, 15960 <bt_mesh_next_seq+0x40>
		bt_mesh_beacon_ivu_initiator(true);
   15950:	2001      	movs	r0, #1
   15952:	f7ff fbff 	bl	15154 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
   15956:	2101      	movs	r1, #1
   15958:	6820      	ldr	r0, [r4, #0]
   1595a:	4408      	add	r0, r1
   1595c:	f7ff ff0c 	bl	15778 <bt_mesh_net_iv_update>
}
   15960:	4628      	mov	r0, r5
   15962:	bd38      	pop	{r3, r4, r5, pc}
   15964:	20009ec8 	.word	0x20009ec8

00015968 <net_header_encode>:
{
   15968:	b5f0      	push	{r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1596a:	6843      	ldr	r3, [r0, #4]
{
   1596c:	4605      	mov	r5, r0
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1596e:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
   15970:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15974:	429f      	cmp	r7, r3
{
   15976:	460e      	mov	r6, r1
   15978:	4614      	mov	r4, r2
   1597a:	b087      	sub	sp, #28
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
   1597c:	d112      	bne.n	159a4 <net_header_encode+0x3c>
   1597e:	4610      	mov	r0, r2
   15980:	f018 faa3 	bl	2deca <net_buf_simple_tailroom>
   15984:	2807      	cmp	r0, #7
   15986:	d80d      	bhi.n	159a4 <net_header_encode+0x3c>
		LOG_ERR("Insufficient MIC space for CTL PDU");
   15988:	4b1e      	ldr	r3, [pc, #120]	; (15a04 <net_header_encode+0x9c>)
		LOG_ERR("Insufficient MIC space for PDU");
   1598a:	9305      	str	r3, [sp, #20]
   1598c:	2302      	movs	r3, #2
   1598e:	481e      	ldr	r0, [pc, #120]	; (15a08 <net_header_encode+0xa0>)
   15990:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15994:	aa04      	add	r2, sp, #16
   15996:	9304      	str	r3, [sp, #16]
   15998:	f016 fcda 	bl	2c350 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1599c:	f06f 0015 	mvn.w	r0, #21
}
   159a0:	b007      	add	sp, #28
   159a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
   159a4:	4620      	mov	r0, r4
   159a6:	f018 fa90 	bl	2deca <net_buf_simple_tailroom>
   159aa:	2803      	cmp	r0, #3
   159ac:	d801      	bhi.n	159b2 <net_header_encode+0x4a>
		LOG_ERR("Insufficient MIC space for PDU");
   159ae:	4b17      	ldr	r3, [pc, #92]	; (15a0c <net_header_encode+0xa4>)
   159b0:	e7eb      	b.n	1598a <net_header_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
   159b2:	686b      	ldr	r3, [r5, #4]
   159b4:	4620      	mov	r0, r4
   159b6:	8899      	ldrh	r1, [r3, #4]
   159b8:	f018 fa44 	bl	2de44 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
   159bc:	8929      	ldrh	r1, [r5, #8]
   159be:	4620      	mov	r0, r4
   159c0:	f018 fa40 	bl	2de44 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
   159c4:	f7ff ffac 	bl	15920 <bt_mesh_next_seq>
   159c8:	4601      	mov	r1, r0
   159ca:	4620      	mov	r0, r4
   159cc:	f018 fa4a 	bl	2de64 <net_buf_simple_push_be24>
	if (ctl) {
   159d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   159d4:	429f      	cmp	r7, r3
   159d6:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
   159d8:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
   159da:	7ad9      	ldrb	r1, [r3, #11]
   159dc:	bf08      	it	eq
   159de:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
   159e2:	f018 fa38 	bl	2de56 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
   159e6:	4b0a      	ldr	r3, [pc, #40]	; (15a10 <net_header_encode+0xa8>)
   159e8:	781a      	ldrb	r2, [r3, #0]
   159ea:	f7ff fdb3 	bl	15554 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   159ee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   159f2:	1a12      	subs	r2, r2, r0
   159f4:	ea46 11c2 	orr.w	r1, r6, r2, lsl #7
   159f8:	4620      	mov	r0, r4
   159fa:	b2c9      	uxtb	r1, r1
   159fc:	f018 fa2b 	bl	2de56 <net_buf_simple_push_u8>
	return 0;
   15a00:	2000      	movs	r0, #0
   15a02:	e7cd      	b.n	159a0 <net_header_encode+0x38>
   15a04:	0003294d 	.word	0x0003294d
   15a08:	0002fccc 	.word	0x0002fccc
   15a0c:	00032970 	.word	0x00032970
   15a10:	20009ec8 	.word	0x20009ec8

00015a14 <bt_mesh_net_encode>:
{
   15a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tx->friend_cred = 0U;
   15a18:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a1a:	6807      	ldr	r7, [r0, #0]
	tx->friend_cred = 0U;
   15a1c:	f36f 0300 	bfc	r3, #0, #1
   15a20:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a22:	f897 4022 	ldrb.w	r4, [r7, #34]	; 0x22
{
   15a26:	460d      	mov	r5, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a28:	1ea3      	subs	r3, r4, #2
   15a2a:	425c      	negs	r4, r3
   15a2c:	415c      	adcs	r4, r3
	err = net_header_encode(tx, cred->nid, buf);
   15a2e:	235a      	movs	r3, #90	; 0x5a
   15a30:	435c      	muls	r4, r3
   15a32:	193b      	adds	r3, r7, r4
{
   15a34:	4616      	mov	r6, r2
	err = net_header_encode(tx, cred->nid, buf);
   15a36:	460a      	mov	r2, r1
   15a38:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
   15a3c:	f7ff ff94 	bl	15968 <net_header_encode>
	if (err) {
   15a40:	b970      	cbnz	r0, 15a60 <bt_mesh_net_encode+0x4c>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
   15a42:	4b08      	ldr	r3, [pc, #32]	; (15a64 <bt_mesh_net_encode+0x50>)
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a44:	3441      	adds	r4, #65	; 0x41
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
   15a46:	681a      	ldr	r2, [r3, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15a48:	f7ff fd84 	bl	15554 <atomic_get.constprop.0>
   15a4c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15a50:	4633      	mov	r3, r6
   15a52:	1a12      	subs	r2, r2, r0
   15a54:	1939      	adds	r1, r7, r4
   15a56:	4628      	mov	r0, r5
}
   15a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
   15a5c:	f016 bc7b 	b.w	2c356 <net_encrypt>
}
   15a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a64:	20009ec8 	.word	0x20009ec8

00015a68 <bt_mesh_net_send>:
{
   15a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a6c:	4698      	mov	r8, r3
	tx->friend_cred = 0U;
   15a6e:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a70:	f8d0 9000 	ldr.w	r9, [r0]
	tx->friend_cred = 0U;
   15a74:	f36f 0300 	bfc	r3, #0, #1
   15a78:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a7a:	f899 a022 	ldrb.w	sl, [r9, #34]	; 0x22
{
   15a7e:	b085      	sub	sp, #20
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15a80:	f1aa 0302 	sub.w	r3, sl, #2
   15a84:	f1d3 0a00 	rsbs	sl, r3, #0
   15a88:	eb4a 0a03 	adc.w	sl, sl, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
   15a8c:	f101 030c 	add.w	r3, r1, #12
   15a90:	9300      	str	r3, [sp, #0]
   15a92:	235a      	movs	r3, #90	; 0x5a
   15a94:	fb03 930a 	mla	r3, r3, sl, r9
{
   15a98:	460d      	mov	r5, r1
   15a9a:	4617      	mov	r7, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
   15a9c:	f101 020c 	add.w	r2, r1, #12
   15aa0:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
{
   15aa4:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
   15aa6:	f7ff ff5f 	bl	15968 <net_header_encode>
	if (err) {
   15aaa:	4606      	mov	r6, r0
   15aac:	2800      	cmp	r0, #0
   15aae:	d151      	bne.n	15b54 <bt_mesh_net_send+0xec>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
   15ab0:	6863      	ldr	r3, [r4, #4]
   15ab2:	8898      	ldrh	r0, [r3, #4]
   15ab4:	f016 fb62 	bl	2c17c <bt_mesh_fixed_group_match>
   15ab8:	b1a8      	cbz	r0, 15ae6 <bt_mesh_net_send+0x7e>
		err = net_loopback(tx, buf->data, buf->len);
   15aba:	68eb      	ldr	r3, [r5, #12]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
   15abc:	2200      	movs	r2, #0
		err = net_loopback(tx, buf->data, buf->len);
   15abe:	9300      	str	r3, [sp, #0]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
   15ac0:	483e      	ldr	r0, [pc, #248]	; (15bbc <bt_mesh_net_send+0x154>)
   15ac2:	2300      	movs	r3, #0
   15ac4:	a903      	add	r1, sp, #12
		err = net_loopback(tx, buf->data, buf->len);
   15ac6:	f8b5 b010 	ldrh.w	fp, [r5, #16]
	err = k_mem_slab_alloc(&loopback_buf_pool, (void **)&buf, K_NO_WAIT);
   15aca:	f00f fd07 	bl	254dc <k_mem_slab_alloc>
	if (err) {
   15ace:	b1b8      	cbz	r0, 15b00 <bt_mesh_net_send+0x98>
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
   15ad0:	6863      	ldr	r3, [r4, #4]
   15ad2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   15ad6:	2a00      	cmp	r2, #0
   15ad8:	dc02      	bgt.n	15ae0 <bt_mesh_net_send+0x78>
   15ada:	7adb      	ldrb	r3, [r3, #11]
   15adc:	2b01      	cmp	r3, #1
   15ade:	d145      	bne.n	15b6c <bt_mesh_net_send+0x104>
		return -ENOMEM;
   15ae0:	f06f 060b 	mvn.w	r6, #11
   15ae4:	e036      	b.n	15b54 <bt_mesh_net_send+0xec>
	    bt_mesh_has_addr(tx->ctx->addr)) {
   15ae6:	6863      	ldr	r3, [r4, #4]
   15ae8:	8898      	ldrh	r0, [r3, #4]
   15aea:	f003 fc2d 	bl	19348 <bt_mesh_has_addr>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
   15aee:	2800      	cmp	r0, #0
   15af0:	d1e3      	bne.n	15aba <bt_mesh_net_send+0x52>
	if (tx->ctx->send_ttl == 1U) {
   15af2:	6863      	ldr	r3, [r4, #4]
   15af4:	7adb      	ldrb	r3, [r3, #11]
   15af6:	2b01      	cmp	r3, #1
   15af8:	d138      	bne.n	15b6c <bt_mesh_net_send+0x104>
		err = -EINVAL;
   15afa:	f06f 0615 	mvn.w	r6, #21
   15afe:	e029      	b.n	15b54 <bt_mesh_net_send+0xec>
	buf->sub = tx->sub;
   15b00:	6822      	ldr	r2, [r4, #0]
   15b02:	9001      	str	r0, [sp, #4]
   15b04:	9803      	ldr	r0, [sp, #12]
	(void)memcpy(buf->data, data, len);
   15b06:	9900      	ldr	r1, [sp, #0]
	buf->sub = tx->sub;
   15b08:	6042      	str	r2, [r0, #4]
	(void)memcpy(buf->data, data, len);
   15b0a:	465a      	mov	r2, fp
   15b0c:	3009      	adds	r0, #9
   15b0e:	f014 fd04 	bl	2a51a <memcpy>
	buf->len = len;
   15b12:	9a03      	ldr	r2, [sp, #12]
	parent->next = child;
   15b14:	9b01      	ldr	r3, [sp, #4]
   15b16:	f882 b008 	strb.w	fp, [r2, #8]
   15b1a:	6013      	str	r3, [r2, #0]
	return list->tail;
   15b1c:	4b28      	ldr	r3, [pc, #160]	; (15bc0 <bt_mesh_net_send+0x158>)
   15b1e:	6a19      	ldr	r1, [r3, #32]
Z_GENLIST_APPEND(slist, snode)
   15b20:	b9f9      	cbnz	r1, 15b62 <bt_mesh_net_send+0xfa>
	list->head = node;
   15b22:	e9c3 2207 	strd	r2, r2, [r3, #28]
	k_work_submit(&bt_mesh.local_work);
   15b26:	4827      	ldr	r0, [pc, #156]	; (15bc4 <bt_mesh_net_send+0x15c>)
   15b28:	f010 fbca 	bl	262c0 <k_work_submit>
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
   15b2c:	6863      	ldr	r3, [r4, #4]
   15b2e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   15b32:	2a00      	cmp	r2, #0
   15b34:	dc02      	bgt.n	15b3c <bt_mesh_net_send+0xd4>
   15b36:	7adb      	ldrb	r3, [r3, #11]
   15b38:	2b01      	cmp	r3, #1
   15b3a:	d117      	bne.n	15b6c <bt_mesh_net_send+0x104>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
   15b3c:	b157      	cbz	r7, 15b54 <bt_mesh_net_send+0xec>
		return;
	}

	if (cb->start) {
   15b3e:	683b      	ldr	r3, [r7, #0]
   15b40:	b11b      	cbz	r3, 15b4a <bt_mesh_net_send+0xe2>
		cb->start(0, 0, cb_data);
   15b42:	2100      	movs	r1, #0
   15b44:	4642      	mov	r2, r8
   15b46:	4608      	mov	r0, r1
   15b48:	4798      	blx	r3
	}

	if (cb->end) {
   15b4a:	687b      	ldr	r3, [r7, #4]
   15b4c:	b113      	cbz	r3, 15b54 <bt_mesh_net_send+0xec>
		cb->end(0, cb_data);
   15b4e:	4641      	mov	r1, r8
   15b50:	2000      	movs	r0, #0
   15b52:	4798      	blx	r3
	net_buf_unref(buf);
   15b54:	4628      	mov	r0, r5
   15b56:	f00a fac1 	bl	200dc <net_buf_unref>
}
   15b5a:	4630      	mov	r0, r6
   15b5c:	b005      	add	sp, #20
   15b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
   15b62:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15b64:	621a      	str	r2, [r3, #32]
}
   15b66:	e7de      	b.n	15b26 <bt_mesh_net_send+0xbe>
   15b68:	4606      	mov	r6, r0
   15b6a:	e7f3      	b.n	15b54 <bt_mesh_net_send+0xec>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
   15b6c:	4b14      	ldr	r3, [pc, #80]	; (15bc0 <bt_mesh_net_send+0x158>)
   15b6e:	681a      	ldr	r2, [r3, #0]
   15b70:	f7ff fcf0 	bl	15554 <atomic_get.constprop.0>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
   15b74:	235a      	movs	r3, #90	; 0x5a
   15b76:	fb03 910a 	mla	r1, r3, sl, r9
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
   15b7a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15b7e:	1a12      	subs	r2, r2, r0
   15b80:	2300      	movs	r3, #0
   15b82:	3141      	adds	r1, #65	; 0x41
   15b84:	f105 000c 	add.w	r0, r5, #12
   15b88:	f016 fbe5 	bl	2c356 <net_encrypt>
	if (err) {
   15b8c:	2800      	cmp	r0, #0
   15b8e:	d1eb      	bne.n	15b68 <bt_mesh_net_send+0x100>
	BT_MESH_ADV(buf)->cb = cb;
   15b90:	69ab      	ldr	r3, [r5, #24]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
   15b92:	4628      	mov	r0, r5
	BT_MESH_ADV(buf)->cb = cb;
   15b94:	601f      	str	r7, [r3, #0]
	BT_MESH_ADV(buf)->cb_data = cb_data;
   15b96:	69ab      	ldr	r3, [r5, #24]
   15b98:	f8c3 8004 	str.w	r8, [r3, #4]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
   15b9c:	6863      	ldr	r3, [r4, #4]
   15b9e:	8899      	ldrh	r1, [r3, #4]
   15ba0:	f009 fdc0 	bl	1f724 <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   15ba4:	b120      	cbz	r0, 15bb0 <bt_mesh_net_send+0x148>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   15ba6:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(buf, tx->ctx->addr) &&
   15ba8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   15bac:	2b00      	cmp	r3, #0
   15bae:	dcd1      	bgt.n	15b54 <bt_mesh_net_send+0xec>
	bt_mesh_adv_send(buf, cb, cb_data);
   15bb0:	4642      	mov	r2, r8
   15bb2:	4639      	mov	r1, r7
   15bb4:	4628      	mov	r0, r5
   15bb6:	f7ff f903 	bl	14dc0 <bt_mesh_adv_send>
   15bba:	e7cb      	b.n	15b54 <bt_mesh_net_send+0xec>
   15bbc:	20008dcc 	.word	0x20008dcc
   15bc0:	20009ec8 	.word	0x20009ec8
   15bc4:	20009ed4 	.word	0x20009ed4

00015bc8 <bt_mesh_net_loopback_clear>:
{
   15bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	list->tail = NULL;
   15bcc:	2500      	movs	r5, #0
   15bce:	4606      	mov	r6, r0
	list->head = NULL;
   15bd0:	462f      	mov	r7, r5
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   15bd2:	f64f 79ff 	movw	r9, #65535	; 0xffff
	return list->head;
   15bd6:	4c12      	ldr	r4, [pc, #72]	; (15c20 <bt_mesh_net_loopback_clear+0x58>)
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   15bd8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 15c24 <bt_mesh_net_loopback_clear+0x5c>
   15bdc:	69e3      	ldr	r3, [r4, #28]
Z_GENLIST_GET(slist, snode)
   15bde:	b95b      	cbnz	r3, 15bf8 <bt_mesh_net_loopback_clear+0x30>
	bt_mesh.local_queue = new_list;
   15be0:	e9c4 7507 	strd	r7, r5, [r4, #28]
}
   15be4:	b003      	add	sp, #12
   15be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   15bea:	2200      	movs	r2, #0
   15bec:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   15bee:	b10d      	cbz	r5, 15bf4 <bt_mesh_net_loopback_clear+0x2c>
	parent->next = child;
   15bf0:	602b      	str	r3, [r5, #0]
}
   15bf2:	e013      	b.n	15c1c <bt_mesh_net_loopback_clear+0x54>
	list->head = node;
   15bf4:	461f      	mov	r7, r3
   15bf6:	e011      	b.n	15c1c <bt_mesh_net_loopback_clear+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15bf8:	6a21      	ldr	r1, [r4, #32]
	return node->next;
   15bfa:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15bfc:	428b      	cmp	r3, r1
	list->head = node;
   15bfe:	61e2      	str	r2, [r4, #28]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15c00:	d100      	bne.n	15c04 <bt_mesh_net_loopback_clear+0x3c>
	list->tail = node;
   15c02:	6222      	str	r2, [r4, #32]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   15c04:	454e      	cmp	r6, r9
		struct loopback_buf *buf = CONTAINER_OF(node, struct loopback_buf, node);
   15c06:	9301      	str	r3, [sp, #4]
		if (net_idx == BT_MESH_KEY_ANY || net_idx == buf->sub->net_idx) {
   15c08:	d003      	beq.n	15c12 <bt_mesh_net_loopback_clear+0x4a>
   15c0a:	685a      	ldr	r2, [r3, #4]
   15c0c:	8c12      	ldrh	r2, [r2, #32]
   15c0e:	42b2      	cmp	r2, r6
   15c10:	d1eb      	bne.n	15bea <bt_mesh_net_loopback_clear+0x22>
			k_mem_slab_free(&loopback_buf_pool, (void **)&buf);
   15c12:	4640      	mov	r0, r8
   15c14:	a901      	add	r1, sp, #4
   15c16:	f00f fcb9 	bl	2558c <k_mem_slab_free>
   15c1a:	462b      	mov	r3, r5
   15c1c:	461d      	mov	r5, r3
   15c1e:	e7dd      	b.n	15bdc <bt_mesh_net_loopback_clear+0x14>
   15c20:	20009ec8 	.word	0x20009ec8
   15c24:	20008dcc 	.word	0x20008dcc

00015c28 <bt_mesh_net_header_parse>:
{
   15c28:	b510      	push	{r4, lr}
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
   15c2a:	6803      	ldr	r3, [r0, #0]
{
   15c2c:	4604      	mov	r4, r0
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
   15c2e:	781a      	ldrb	r2, [r3, #0]
   15c30:	4b12      	ldr	r3, [pc, #72]	; (15c7c <bt_mesh_net_header_parse+0x54>)
   15c32:	681b      	ldr	r3, [r3, #0]
   15c34:	f003 0301 	and.w	r3, r3, #1
   15c38:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   15c3c:	7d0a      	ldrb	r2, [r1, #20]
   15c3e:	f363 0200 	bfi	r2, r3, #0, #1
   15c42:	750a      	strb	r2, [r1, #20]
	rx->ctl = CTL(buf->data);
   15c44:	6803      	ldr	r3, [r0, #0]
   15c46:	b2d2      	uxtb	r2, r2
   15c48:	785b      	ldrb	r3, [r3, #1]
   15c4a:	09db      	lsrs	r3, r3, #7
   15c4c:	f363 02c3 	bfi	r2, r3, #3, #1
   15c50:	750a      	strb	r2, [r1, #20]
	rx->ctx.recv_ttl = TTL(buf->data);
   15c52:	6803      	ldr	r3, [r0, #0]
   15c54:	785b      	ldrb	r3, [r3, #1]
   15c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15c5a:	734b      	strb	r3, [r1, #13]
	rx->seq = SEQ(buf->data);
   15c5c:	6800      	ldr	r0, [r0, #0]
   15c5e:	3002      	adds	r0, #2
   15c60:	f016 fb6e 	bl	2c340 <sys_get_be24>
   15c64:	6108      	str	r0, [r1, #16]
	rx->ctx.addr = SRC(buf->data);
   15c66:	6823      	ldr	r3, [r4, #0]
   15c68:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   15c6c:	ba5b      	rev16	r3, r3
   15c6e:	810b      	strh	r3, [r1, #8]
	rx->ctx.recv_dst = DST(buf->data);
   15c70:	6823      	ldr	r3, [r4, #0]
   15c72:	f8b3 3007 	ldrh.w	r3, [r3, #7]
   15c76:	ba5b      	rev16	r3, r3
   15c78:	814b      	strh	r3, [r1, #10]
}
   15c7a:	bd10      	pop	{r4, pc}
   15c7c:	20009ec8 	.word	0x20009ec8

00015c80 <bt_mesh_net_decode>:
{
   15c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c84:	4698      	mov	r8, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   15c86:	8883      	ldrh	r3, [r0, #4]
{
   15c88:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   15c8a:	f1a3 0212 	sub.w	r2, r3, #18
   15c8e:	2a0b      	cmp	r2, #11
{
   15c90:	460f      	mov	r7, r1
   15c92:	b086      	sub	sp, #24
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
   15c94:	d874      	bhi.n	15d80 <bt_mesh_net_decode+0x100>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
   15c96:	bb71      	cbnz	r1, 15cf6 <bt_mesh_net_decode+0x76>
	return buf->data + buf->len;
   15c98:	6805      	ldr	r5, [r0, #0]
   15c9a:	441d      	add	r5, r3
	return ((uint16_t)src[0] << 8) | src[1];
   15c9c:	f815 2c08 	ldrb.w	r2, [r5, #-8]
   15ca0:	f815 3c07 	ldrb.w	r3, [r5, #-7]
   15ca4:	f815 6c05 	ldrb.w	r6, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
   15cac:	f815 2c06 	ldrb.w	r2, [r5, #-6]
   15cb0:	f815 1c02 	ldrb.w	r1, [r5, #-2]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15cb4:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
   15cb8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
   15cbc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
   15cc0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15cc4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
   15cc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   15ccc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	for (i = dup_cache_next; i > 0;) {
   15cd0:	493d      	ldr	r1, [pc, #244]	; (15dc8 <bt_mesh_net_decode+0x148>)
   15cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
   15cd6:	ea86 0503 	eor.w	r5, r6, r3
	for (i = dup_cache_next; i > 0;) {
   15cda:	680b      	ldr	r3, [r1, #0]
   15cdc:	4e3b      	ldr	r6, [pc, #236]	; (15dcc <bt_mesh_net_decode+0x14c>)
   15cde:	461a      	mov	r2, r3
   15ce0:	2a00      	cmp	r2, #0
   15ce2:	dc48      	bgt.n	15d76 <bt_mesh_net_decode+0xf6>
	for (i = ARRAY_SIZE(dup_cache); i > dup_cache_next;) {
   15ce4:	2220      	movs	r2, #32
   15ce6:	4293      	cmp	r3, r2
   15ce8:	db4d      	blt.n	15d86 <bt_mesh_net_decode+0x106>
	dup_cache_next %= ARRAY_SIZE(dup_cache);
   15cea:	f003 031f 	and.w	r3, r3, #31
	dup_cache[dup_cache_next++] = val;
   15cee:	1c5a      	adds	r2, r3, #1
   15cf0:	600a      	str	r2, [r1, #0]
   15cf2:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
	rx->net_if = net_if;
   15cf6:	7d23      	ldrb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
   15cf8:	4601      	mov	r1, r0
	rx->net_if = net_if;
   15cfa:	f367 1305 	bfi	r3, r7, #4, #2
   15cfe:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
   15d00:	4642      	mov	r2, r8
   15d02:	4620      	mov	r0, r4
   15d04:	4b32      	ldr	r3, [pc, #200]	; (15dd0 <bt_mesh_net_decode+0x150>)
   15d06:	f000 fc9d 	bl	16644 <bt_mesh_net_cred_find>
   15d0a:	2800      	cmp	r0, #0
   15d0c:	d058      	beq.n	15dc0 <bt_mesh_net_decode+0x140>
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
   15d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15d12:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
   15d14:	f8d8 3000 	ldr.w	r3, [r8]
	rx->ctl = CTL(out->data);
   15d18:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.recv_ttl = TTL(out->data);
   15d1a:	7858      	ldrb	r0, [r3, #1]
   15d1c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   15d20:	7360      	strb	r0, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
   15d22:	3800      	subs	r0, #0
   15d24:	bf18      	it	ne
   15d26:	2001      	movne	r0, #1
   15d28:	4240      	negs	r0, r0
   15d2a:	73e0      	strb	r0, [r4, #15]
	rx->ctl = CTL(out->data);
   15d2c:	f8d8 3000 	ldr.w	r3, [r8]
   15d30:	785b      	ldrb	r3, [r3, #1]
   15d32:	09db      	lsrs	r3, r3, #7
   15d34:	f363 02c3 	bfi	r2, r3, #3, #1
   15d38:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
   15d3a:	f8d8 0000 	ldr.w	r0, [r8]
   15d3e:	3002      	adds	r0, #2
   15d40:	f016 fafe 	bl	2c340 <sys_get_be24>
   15d44:	6120      	str	r0, [r4, #16]
	rx->ctx.recv_dst = DST(out->data);
   15d46:	f8d8 3000 	ldr.w	r3, [r8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
   15d4a:	2f03      	cmp	r7, #3
   15d4c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
	rx->ctx.recv_dst = DST(out->data);
   15d50:	ba5a      	rev16	r2, r3
   15d52:	8162      	strh	r2, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
   15d54:	d01d      	beq.n	15d92 <bt_mesh_net_decode+0x112>
   15d56:	b9e3      	cbnz	r3, 15d92 <bt_mesh_net_decode+0x112>
		LOG_ERR("Destination address is unassigned; dropping packet");
   15d58:	4b1e      	ldr	r3, [pc, #120]	; (15dd4 <bt_mesh_net_decode+0x154>)
   15d5a:	481f      	ldr	r0, [pc, #124]	; (15dd8 <bt_mesh_net_decode+0x158>)
   15d5c:	9305      	str	r3, [sp, #20]
   15d5e:	2302      	movs	r3, #2
   15d60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15d64:	aa04      	add	r2, sp, #16
   15d66:	9304      	str	r3, [sp, #16]
   15d68:	f016 faf2 	bl	2c350 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   15d6c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
}
   15d70:	b006      	add	sp, #24
   15d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (dup_cache[--i] == val) {
   15d76:	3a01      	subs	r2, #1
   15d78:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
   15d7c:	4565      	cmp	r5, ip
   15d7e:	d1af      	bne.n	15ce0 <bt_mesh_net_decode+0x60>
		return -EINVAL;
   15d80:	f06f 0015 	mvn.w	r0, #21
   15d84:	e7f4      	b.n	15d70 <bt_mesh_net_decode+0xf0>
		if (dup_cache[--i] == val) {
   15d86:	3a01      	subs	r2, #1
   15d88:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
   15d8c:	4565      	cmp	r5, ip
   15d8e:	d1aa      	bne.n	15ce6 <bt_mesh_net_decode+0x66>
   15d90:	e7f6      	b.n	15d80 <bt_mesh_net_decode+0x100>
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15d92:	4912      	ldr	r1, [pc, #72]	; (15ddc <bt_mesh_net_decode+0x15c>)
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15d94:	4a12      	ldr	r2, [pc, #72]	; (15de0 <bt_mesh_net_decode+0x160>)
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15d96:	880b      	ldrh	r3, [r1, #0]
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15d98:	8925      	ldrh	r5, [r4, #8]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
   15d9a:	f003 031f 	and.w	r3, r3, #31
	msg_cache[msg_cache_next].src = rx->ctx.addr;
   15d9e:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
   15da2:	f365 000e 	bfi	r0, r5, #0, #15
   15da6:	f822 0023 	strh.w	r0, [r2, r3, lsl #2]
	msg_cache[msg_cache_next].seq = rx->seq;
   15daa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   15dae:	6924      	ldr	r4, [r4, #16]
   15db0:	f364 30df 	bfi	r0, r4, #15, #17
   15db4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	msg_cache_next++;
   15db8:	3301      	adds	r3, #1
	return 0;
   15dba:	2000      	movs	r0, #0
	msg_cache_next++;
   15dbc:	800b      	strh	r3, [r1, #0]
}
   15dbe:	e7d7      	b.n	15d70 <bt_mesh_net_decode+0xf0>
		return -ENOENT;
   15dc0:	f06f 0001 	mvn.w	r0, #1
   15dc4:	e7d4      	b.n	15d70 <bt_mesh_net_decode+0xf0>
   15dc6:	bf00      	nop
   15dc8:	2000abec 	.word	0x2000abec
   15dcc:	2000abf0 	.word	0x2000abf0
   15dd0:	00015355 	.word	0x00015355
   15dd4:	0003298f 	.word	0x0003298f
   15dd8:	0002fccc 	.word	0x0002fccc
   15ddc:	2000b136 	.word	0x2000b136
   15de0:	2000ac70 	.word	0x2000ac70

00015de4 <bt_mesh_net_recv>:
{
   15de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15de6:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15de8:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
   15dec:	460c      	mov	r4, r1
   15dee:	b09b      	sub	sp, #108	; 0x6c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15df0:	ab12      	add	r3, sp, #72	; 0x48
   15df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   15df6:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
   15df8:	2218      	movs	r2, #24
   15dfa:	2100      	movs	r1, #0
   15dfc:	a80c      	add	r0, sp, #48	; 0x30
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   15dfe:	9303      	str	r3, [sp, #12]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
   15e00:	f014 fb96 	bl	2a530 <memset>
   15e04:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if (!bt_mesh_is_provisioned()) {
   15e08:	f7fe fcd4 	bl	147b4 <bt_mesh_is_provisioned>
   15e0c:	2800      	cmp	r0, #0
   15e0e:	d06d      	beq.n	15eec <bt_mesh_net_recv+0x108>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
   15e10:	4639      	mov	r1, r7
   15e12:	4630      	mov	r0, r6
   15e14:	ab03      	add	r3, sp, #12
   15e16:	aa0c      	add	r2, sp, #48	; 0x30
   15e18:	f7ff ff32 	bl	15c80 <bt_mesh_net_decode>
   15e1c:	2800      	cmp	r0, #0
   15e1e:	d165      	bne.n	15eec <bt_mesh_net_recv+0x108>
	state->offset = net_buf_simple_headroom(buf);
   15e20:	a803      	add	r0, sp, #12
   15e22:	f018 f84e 	bl	2dec2 <net_buf_simple_headroom>
   15e26:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15e28:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
	state->len = buf->len;
   15e2c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
   15e30:	f016 f9a4 	bl	2c17c <bt_mesh_fixed_group_match>
   15e34:	2800      	cmp	r0, #0
   15e36:	d148      	bne.n	15eca <bt_mesh_net_recv+0xe6>
			  bt_mesh_has_addr(rx.ctx.recv_dst));
   15e38:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
   15e3c:	f003 fa84 	bl	19348 <bt_mesh_has_addr>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15e40:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   15e44:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15e46:	f360 1386 	bfi	r3, r0, #6, #1
   15e4a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   15e4e:	d03e      	beq.n	15ece <bt_mesh_net_recv+0xea>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
   15e50:	a90c      	add	r1, sp, #48	; 0x30
   15e52:	a803      	add	r0, sp, #12
   15e54:	f001 fdf6 	bl	17a44 <bt_mesh_trans_recv>
   15e58:	300b      	adds	r0, #11
   15e5a:	d113      	bne.n	15e84 <bt_mesh_net_recv+0xa0>
		msg_cache[--msg_cache_next].src = BT_MESH_ADDR_UNASSIGNED;
   15e5c:	4a67      	ldr	r2, [pc, #412]	; (15ffc <bt_mesh_net_recv+0x218>)
   15e5e:	8813      	ldrh	r3, [r2, #0]
   15e60:	3b01      	subs	r3, #1
   15e62:	b29b      	uxth	r3, r3
   15e64:	8013      	strh	r3, [r2, #0]
   15e66:	4a66      	ldr	r2, [pc, #408]	; (16000 <bt_mesh_net_recv+0x21c>)
   15e68:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
   15e6c:	f36f 010e 	bfc	r1, #0, #15
   15e70:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		dup_cache[--dup_cache_next] = 0;
   15e74:	2100      	movs	r1, #0
   15e76:	4a63      	ldr	r2, [pc, #396]	; (16004 <bt_mesh_net_recv+0x220>)
   15e78:	6813      	ldr	r3, [r2, #0]
   15e7a:	3b01      	subs	r3, #1
   15e7c:	6013      	str	r3, [r2, #0]
   15e7e:	4a62      	ldr	r2, [pc, #392]	; (16008 <bt_mesh_net_recv+0x224>)
   15e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
   15e84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   15e88:	2b00      	cmp	r3, #0
   15e8a:	dd03      	ble.n	15e94 <bt_mesh_net_recv+0xb0>
   15e8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15e90:	2b3f      	cmp	r3, #63	; 0x3f
   15e92:	d82b      	bhi.n	15eec <bt_mesh_net_recv+0x108>
	buf->data = buf->__buf + state->offset;
   15e94:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
   15e96:	f8ad 5010 	strh.w	r5, [sp, #16]
	buf->data = buf->__buf + state->offset;
   15e9a:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->ctx.recv_ttl <= 1U) {
   15e9e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   15ea2:	9403      	str	r4, [sp, #12]
   15ea4:	2b01      	cmp	r3, #1
   15ea6:	d921      	bls.n	15eec <bt_mesh_net_recv+0x108>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
   15ea8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15eac:	f013 0f34 	tst.w	r3, #52	; 0x34
   15eb0:	d108      	bne.n	15ec4 <bt_mesh_net_recv+0xe0>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
   15eb2:	f7fe feb3 	bl	14c1c <bt_mesh_relay_get>
	    !rx->friend_cred &&
   15eb6:	2801      	cmp	r0, #1
   15eb8:	d11a      	bne.n	15ef0 <bt_mesh_net_recv+0x10c>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
   15eba:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15ebe:	f013 0f34 	tst.w	r3, #52	; 0x34
   15ec2:	d01a      	beq.n	15efa <bt_mesh_net_recv+0x116>
		transmit = bt_mesh_net_transmit_get();
   15ec4:	f7fe fe38 	bl	14b38 <bt_mesh_net_transmit_get>
   15ec8:	e019      	b.n	15efe <bt_mesh_net_recv+0x11a>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
   15eca:	2001      	movs	r0, #1
   15ecc:	e7b8      	b.n	15e40 <bt_mesh_net_recv+0x5c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
   15ece:	4630      	mov	r0, r6
   15ed0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   15ed4:	f009 fbf4 	bl	1f6c0 <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
   15ed8:	f7fe fdc6 	bl	14a68 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
   15edc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
   15ee4:	4318      	orrs	r0, r3
   15ee6:	b2c0      	uxtb	r0, r0
   15ee8:	2800      	cmp	r0, #0
   15eea:	d1b1      	bne.n	15e50 <bt_mesh_net_recv+0x6c>
}
   15eec:	b01b      	add	sp, #108	; 0x6c
   15eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
   15ef0:	f7fe fdba 	bl	14a68 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
   15ef4:	2801      	cmp	r0, #1
   15ef6:	d1f9      	bne.n	15eec <bt_mesh_net_recv+0x108>
   15ef8:	e7df      	b.n	15eba <bt_mesh_net_recv+0xd6>
		transmit = bt_mesh_relay_retransmit_get();
   15efa:	f7fe fe99 	bl	14c30 <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
   15efe:	4602      	mov	r2, r0
				 transmit, K_NO_WAIT);
   15f00:	2100      	movs	r1, #0
   15f02:	2000      	movs	r0, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_RELAY_ADV,
   15f04:	e9cd 0100 	strd	r0, r1, [sp]
   15f08:	2102      	movs	r1, #2
   15f0a:	2001      	movs	r0, #1
   15f0c:	f7fe ff34 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   15f10:	4604      	mov	r4, r0
   15f12:	2800      	cmp	r0, #0
   15f14:	d0ea      	beq.n	15eec <bt_mesh_net_recv+0x108>
	sbuf->data[1] &= 0x80;
   15f16:	9a03      	ldr	r2, [sp, #12]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15f18:	f100 050c 	add.w	r5, r0, #12
   15f1c:	7853      	ldrb	r3, [r2, #1]
   15f1e:	4628      	mov	r0, r5
   15f20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   15f24:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
   15f26:	9a03      	ldr	r2, [sp, #12]
   15f28:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   15f2c:	7851      	ldrb	r1, [r2, #1]
   15f2e:	3b01      	subs	r3, #1
   15f30:	430b      	orrs	r3, r1
   15f32:	7053      	strb	r3, [r2, #1]
   15f34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   15f38:	9903      	ldr	r1, [sp, #12]
   15f3a:	f017 ffce 	bl	2deda <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (rx->friend_cred) {
   15f40:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15f44:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
   15f48:	1e99      	subs	r1, r3, #2
   15f4a:	424b      	negs	r3, r1
   15f4c:	414b      	adcs	r3, r1
   15f4e:	215a      	movs	r1, #90	; 0x5a
   15f50:	434b      	muls	r3, r1
	if (rx->friend_cred) {
   15f52:	0740      	lsls	r0, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
   15f54:	f103 0141 	add.w	r1, r3, #65	; 0x41
   15f58:	4411      	add	r1, r2
	if (rx->friend_cred) {
   15f5a:	d50b      	bpl.n	15f74 <bt_mesh_net_recv+0x190>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
   15f5c:	68e6      	ldr	r6, [r4, #12]
		buf->data[0] |= cred->nid;
   15f5e:	441a      	add	r2, r3
		buf->data[0] &= 0x80; /* Clear everything except IVI */
   15f60:	7830      	ldrb	r0, [r6, #0]
   15f62:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
   15f66:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
   15f68:	68e0      	ldr	r0, [r4, #12]
   15f6a:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
   15f6e:	7803      	ldrb	r3, [r0, #0]
   15f70:	4313      	orrs	r3, r2
   15f72:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
   15f74:	4b25      	ldr	r3, [pc, #148]	; (1600c <bt_mesh_net_recv+0x228>)
   15f76:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   15f7a:	6818      	ldr	r0, [r3, #0]
   15f7c:	f002 0201 	and.w	r2, r2, #1
   15f80:	1a82      	subs	r2, r0, r2
   15f82:	2300      	movs	r3, #0
   15f84:	4628      	mov	r0, r5
   15f86:	f016 f9e6 	bl	2c356 <net_encrypt>
   15f8a:	b168      	cbz	r0, 15fa8 <bt_mesh_net_recv+0x1c4>
		LOG_ERR("Re-encrypting failed");
   15f8c:	4b20      	ldr	r3, [pc, #128]	; (16010 <bt_mesh_net_recv+0x22c>)
   15f8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15f92:	930b      	str	r3, [sp, #44]	; 0x2c
   15f94:	2302      	movs	r3, #2
   15f96:	481f      	ldr	r0, [pc, #124]	; (16014 <bt_mesh_net_recv+0x230>)
   15f98:	aa0a      	add	r2, sp, #40	; 0x28
   15f9a:	930a      	str	r3, [sp, #40]	; 0x28
   15f9c:	f016 f9d8 	bl	2c350 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   15fa0:	4620      	mov	r0, r4
   15fa2:	f00a f89b 	bl	200dc <net_buf_unref>
   15fa6:	e7a1      	b.n	15eec <bt_mesh_net_recv+0x108>
	    (rx->friend_cred ||
   15fa8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   15fac:	075a      	lsls	r2, r3, #29
   15fae:	d512      	bpl.n	15fd6 <bt_mesh_net_recv+0x1f2>
		bt_mesh_proxy_relay(buf, rx->ctx.recv_dst);
   15fb0:	4620      	mov	r0, r4
   15fb2:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
   15fb6:	f009 fbb5 	bl	1f724 <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15fba:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	switch (net_if) {
   15fbe:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15fc2:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
   15fc6:	d00b      	beq.n	15fe0 <bt_mesh_net_recv+0x1fc>
   15fc8:	2a02      	cmp	r2, #2
   15fca:	d013      	beq.n	15ff4 <bt_mesh_net_recv+0x210>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15fcc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   15fd0:	075b      	lsls	r3, r3, #29
   15fd2:	d5e5      	bpl.n	15fa0 <bt_mesh_net_recv+0x1bc>
   15fd4:	e008      	b.n	15fe8 <bt_mesh_net_recv+0x204>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
   15fd6:	f7fe fd47 	bl	14a68 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   15fda:	2801      	cmp	r0, #1
   15fdc:	d1ed      	bne.n	15fba <bt_mesh_net_recv+0x1d6>
   15fde:	e7e7      	b.n	15fb0 <bt_mesh_net_recv+0x1cc>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   15fe0:	f7fe fe1c 	bl	14c1c <bt_mesh_relay_get>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
   15fe4:	2801      	cmp	r0, #1
   15fe6:	d1f1      	bne.n	15fcc <bt_mesh_net_recv+0x1e8>
		bt_mesh_adv_send(buf, NULL, NULL);
   15fe8:	2200      	movs	r2, #0
   15fea:	4620      	mov	r0, r4
   15fec:	4611      	mov	r1, r2
   15fee:	f7fe fee7 	bl	14dc0 <bt_mesh_adv_send>
   15ff2:	e7d5      	b.n	15fa0 <bt_mesh_net_recv+0x1bc>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   15ff4:	f7fe fd38 	bl	14a68 <bt_mesh_gatt_proxy_get>
   15ff8:	e7f4      	b.n	15fe4 <bt_mesh_net_recv+0x200>
   15ffa:	bf00      	nop
   15ffc:	2000b136 	.word	0x2000b136
   16000:	2000ac70 	.word	0x2000ac70
   16004:	2000abec 	.word	0x2000abec
   16008:	2000abf0 	.word	0x2000abf0
   1600c:	20009ec8 	.word	0x20009ec8
   16010:	000329c2 	.word	0x000329c2
   16014:	0002fccc 	.word	0x0002fccc

00016018 <bt_mesh_net_init>:
{
   16018:	b510      	push	{r4, lr}
	k_work_init_delayable(&bt_mesh.ivu_timer, ivu_refresh);
   1601a:	4c06      	ldr	r4, [pc, #24]	; (16034 <bt_mesh_net_init+0x1c>)
   1601c:	4906      	ldr	r1, [pc, #24]	; (16038 <bt_mesh_net_init+0x20>)
   1601e:	4620      	mov	r0, r4
   16020:	f010 fa40 	bl	264a4 <k_work_init_delayable>
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
   16024:	f5a4 70fa 	sub.w	r0, r4, #500	; 0x1f4
   16028:	4904      	ldr	r1, [pc, #16]	; (1603c <bt_mesh_net_init+0x24>)
}
   1602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
   1602e:	f010 b8ad 	b.w	2618c <k_work_init>
   16032:	bf00      	nop
   16034:	2000a0c8 	.word	0x2000a0c8
   16038:	000158ad 	.word	0x000158ad
   1603c:	00015485 	.word	0x00015485

00016040 <bt_mesh_net_pending_iv_store>:
		LOG_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
   16040:	b500      	push	{lr}
   16042:	b089      	sub	sp, #36	; 0x24
   16044:	f7ff fa86 	bl	15554 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   16048:	0783      	lsls	r3, r0, #30
   1604a:	d51f      	bpl.n	1608c <bt_mesh_net_pending_iv_store+0x4c>
	iv.iv_index = bt_mesh.iv_index;
   1604c:	4a13      	ldr	r2, [pc, #76]	; (1609c <bt_mesh_net_pending_iv_store+0x5c>)
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   1604e:	4669      	mov	r1, sp
	iv.iv_index = bt_mesh.iv_index;
   16050:	6813      	ldr	r3, [r2, #0]
   16052:	9300      	str	r3, [sp, #0]
   16054:	f7ff fa7e 	bl	15554 <atomic_get.constprop.0>
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   16058:	f892 31f8 	ldrb.w	r3, [r2, #504]	; 0x1f8
   1605c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   16060:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
   16064:	f88d 0004 	strb.w	r0, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   16068:	2205      	movs	r2, #5
   1606a:	480d      	ldr	r0, [pc, #52]	; (160a0 <bt_mesh_net_pending_iv_store+0x60>)
   1606c:	f7f6 f836 	bl	c0dc <settings_save_one>
	if (err) {
   16070:	b148      	cbz	r0, 16086 <bt_mesh_net_pending_iv_store+0x46>
		LOG_ERR("Failed to store IV value");
   16072:	4b0c      	ldr	r3, [pc, #48]	; (160a4 <bt_mesh_net_pending_iv_store+0x64>)
		LOG_ERR("Failed to clear IV");
   16074:	9307      	str	r3, [sp, #28]
   16076:	2302      	movs	r3, #2
   16078:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1607c:	480a      	ldr	r0, [pc, #40]	; (160a8 <bt_mesh_net_pending_iv_store+0x68>)
   1607e:	aa06      	add	r2, sp, #24
   16080:	9306      	str	r3, [sp, #24]
   16082:	f016 f965 	bl	2c350 <z_log_msg_static_create.constprop.0>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
   16086:	b009      	add	sp, #36	; 0x24
   16088:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
   1608c:	4804      	ldr	r0, [pc, #16]	; (160a0 <bt_mesh_net_pending_iv_store+0x60>)
   1608e:	f013 fb61 	bl	29754 <settings_delete>
	if (err) {
   16092:	2800      	cmp	r0, #0
   16094:	d0f7      	beq.n	16086 <bt_mesh_net_pending_iv_store+0x46>
		LOG_ERR("Failed to clear IV");
   16096:	4b05      	ldr	r3, [pc, #20]	; (160ac <bt_mesh_net_pending_iv_store+0x6c>)
   16098:	e7ec      	b.n	16074 <bt_mesh_net_pending_iv_store+0x34>
   1609a:	bf00      	nop
   1609c:	20009ec8 	.word	0x20009ec8
   160a0:	000329d7 	.word	0x000329d7
   160a4:	000329e2 	.word	0x000329e2
   160a8:	0002fccc 	.word	0x0002fccc
   160ac:	000329fb 	.word	0x000329fb

000160b0 <bt_mesh_net_pending_net_store>:
		LOG_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
   160b0:	b500      	push	{lr}
   160b2:	b08d      	sub	sp, #52	; 0x34
   160b4:	f7ff fa4e 	bl	15554 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   160b8:	0783      	lsls	r3, r0, #30
   160ba:	d51c      	bpl.n	160f6 <bt_mesh_net_pending_net_store+0x46>
	net.primary_addr = bt_mesh_primary_addr();
   160bc:	f003 f92a 	bl	19314 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   160c0:	2210      	movs	r2, #16
   160c2:	4910      	ldr	r1, [pc, #64]	; (16104 <bt_mesh_net_pending_net_store+0x54>)
	net.primary_addr = bt_mesh_primary_addr();
   160c4:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   160c8:	f10d 0006 	add.w	r0, sp, #6
   160cc:	f014 fa25 	bl	2a51a <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   160d0:	2212      	movs	r2, #18
   160d2:	480d      	ldr	r0, [pc, #52]	; (16108 <bt_mesh_net_pending_net_store+0x58>)
   160d4:	a901      	add	r1, sp, #4
   160d6:	f7f6 f801 	bl	c0dc <settings_save_one>
	if (err) {
   160da:	b148      	cbz	r0, 160f0 <bt_mesh_net_pending_net_store+0x40>
		LOG_ERR("Failed to store Network value");
   160dc:	4b0b      	ldr	r3, [pc, #44]	; (1610c <bt_mesh_net_pending_net_store+0x5c>)
		LOG_ERR("Failed to clear Network");
   160de:	930b      	str	r3, [sp, #44]	; 0x2c
   160e0:	2302      	movs	r3, #2
   160e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   160e6:	480a      	ldr	r0, [pc, #40]	; (16110 <bt_mesh_net_pending_net_store+0x60>)
   160e8:	aa0a      	add	r2, sp, #40	; 0x28
   160ea:	930a      	str	r3, [sp, #40]	; 0x28
   160ec:	f016 f930 	bl	2c350 <z_log_msg_static_create.constprop.0>
		store_pending_net();
	} else {
		clear_net();
	}
}
   160f0:	b00d      	add	sp, #52	; 0x34
   160f2:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Net");
   160f6:	4804      	ldr	r0, [pc, #16]	; (16108 <bt_mesh_net_pending_net_store+0x58>)
   160f8:	f013 fb2c 	bl	29754 <settings_delete>
	if (err) {
   160fc:	2800      	cmp	r0, #0
   160fe:	d0f7      	beq.n	160f0 <bt_mesh_net_pending_net_store+0x40>
		LOG_ERR("Failed to clear Network");
   16100:	4b04      	ldr	r3, [pc, #16]	; (16114 <bt_mesh_net_pending_net_store+0x64>)
   16102:	e7ec      	b.n	160de <bt_mesh_net_pending_net_store+0x2e>
   16104:	2000a0f8 	.word	0x2000a0f8
   16108:	00032a0e 	.word	0x00032a0e
   1610c:	00032a1a 	.word	0x00032a1a
   16110:	0002fccc 	.word	0x0002fccc
   16114:	00032a38 	.word	0x00032a38

00016118 <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
   16118:	b500      	push	{lr}
   1611a:	b089      	sub	sp, #36	; 0x24
   1611c:	f7ff fa1a 	bl	15554 <atomic_get.constprop.0>
	struct seq_val seq;
	int err;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   16120:	0783      	lsls	r3, r0, #30
   16122:	d519      	bpl.n	16158 <bt_mesh_net_pending_seq_store+0x40>
		sys_put_le24(bt_mesh.seq, seq.val);
   16124:	4b10      	ldr	r3, [pc, #64]	; (16168 <bt_mesh_net_pending_seq_store+0x50>)

		err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   16126:	4811      	ldr	r0, [pc, #68]	; (1616c <bt_mesh_net_pending_seq_store+0x54>)
	dst[0] = val;
   16128:	889a      	ldrh	r2, [r3, #4]
	dst[2] = val >> 16;
   1612a:	88db      	ldrh	r3, [r3, #6]
	dst[0] = val;
   1612c:	f8ad 2004 	strh.w	r2, [sp, #4]
   16130:	a901      	add	r1, sp, #4
   16132:	2203      	movs	r2, #3
	dst[2] = val >> 16;
   16134:	f88d 3006 	strb.w	r3, [sp, #6]
   16138:	f7f5 ffd0 	bl	c0dc <settings_save_one>
		if (err) {
   1613c:	b148      	cbz	r0, 16152 <bt_mesh_net_pending_seq_store+0x3a>
			LOG_ERR("Failed to stor Seq value");
   1613e:	4b0c      	ldr	r3, [pc, #48]	; (16170 <bt_mesh_net_pending_seq_store+0x58>)
			LOG_DBG("Stored Seq value");
		}
	} else {
		err = settings_delete("bt/mesh/Seq");
		if (err) {
			LOG_ERR("Failed to clear Seq value");
   16140:	9307      	str	r3, [sp, #28]
   16142:	2302      	movs	r3, #2
   16144:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16148:	480a      	ldr	r0, [pc, #40]	; (16174 <bt_mesh_net_pending_seq_store+0x5c>)
   1614a:	aa06      	add	r2, sp, #24
   1614c:	9306      	str	r3, [sp, #24]
   1614e:	f016 f8ff 	bl	2c350 <z_log_msg_static_create.constprop.0>
		} else {
			LOG_DBG("Cleared Seq value");
		}
	}
}
   16152:	b009      	add	sp, #36	; 0x24
   16154:	f85d fb04 	ldr.w	pc, [sp], #4
		err = settings_delete("bt/mesh/Seq");
   16158:	4804      	ldr	r0, [pc, #16]	; (1616c <bt_mesh_net_pending_seq_store+0x54>)
   1615a:	f013 fafb 	bl	29754 <settings_delete>
		if (err) {
   1615e:	2800      	cmp	r0, #0
   16160:	d0f7      	beq.n	16152 <bt_mesh_net_pending_seq_store+0x3a>
			LOG_ERR("Failed to clear Seq value");
   16162:	4b05      	ldr	r3, [pc, #20]	; (16178 <bt_mesh_net_pending_seq_store+0x60>)
   16164:	e7ec      	b.n	16140 <bt_mesh_net_pending_seq_store+0x28>
   16166:	bf00      	nop
   16168:	20009ec8 	.word	0x20009ec8
   1616c:	00032a50 	.word	0x00032a50
   16170:	00032a5c 	.word	0x00032a5c
   16174:	0002fccc 	.word	0x0002fccc
   16178:	00032a75 	.word	0x00032a75

0001617c <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   1617c:	4805      	ldr	r0, [pc, #20]	; (16194 <bt_mesh_net_settings_commit+0x18>)
   1617e:	f890 31f8 	ldrb.w	r3, [r0, #504]	; 0x1f8
   16182:	2b5f      	cmp	r3, #95	; 0x5f
   16184:	d805      	bhi.n	16192 <bt_mesh_net_settings_commit+0x16>
		k_work_reschedule(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
   16186:	2300      	movs	r3, #0
   16188:	4a03      	ldr	r2, [pc, #12]	; (16198 <bt_mesh_net_settings_commit+0x1c>)
   1618a:	f500 7000 	add.w	r0, r0, #512	; 0x200
   1618e:	f010 ba73 	b.w	26678 <k_work_reschedule>
	}
}
   16192:	4770      	bx	lr
   16194:	20009ec8 	.word	0x20009ec8
   16198:	a8c00000 	.word	0xa8c00000

0001619c <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
   1619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1619e:	4605      	mov	r5, r0
   161a0:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
   161a2:	4c0a      	ldr	r4, [pc, #40]	; (161cc <subnet_evt+0x30>)
   161a4:	4f0a      	ldr	r7, [pc, #40]	; (161d0 <subnet_evt+0x34>)
   161a6:	42bc      	cmp	r4, r7
   161a8:	d90e      	bls.n	161c8 <subnet_evt+0x2c>
   161aa:	490a      	ldr	r1, [pc, #40]	; (161d4 <subnet_evt+0x38>)
   161ac:	480a      	ldr	r0, [pc, #40]	; (161d8 <subnet_evt+0x3c>)
   161ae:	2248      	movs	r2, #72	; 0x48
   161b0:	f012 fd08 	bl	28bc4 <assert_print>
   161b4:	2148      	movs	r1, #72	; 0x48
   161b6:	4807      	ldr	r0, [pc, #28]	; (161d4 <subnet_evt+0x38>)
   161b8:	f012 fcfd 	bl	28bb6 <assert_post_action>
		cb->evt_handler(sub, evt);
   161bc:	4631      	mov	r1, r6
   161be:	4628      	mov	r0, r5
   161c0:	f854 3b04 	ldr.w	r3, [r4], #4
   161c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
   161c6:	e7ee      	b.n	161a6 <subnet_evt+0xa>
   161c8:	d3f8      	bcc.n	161bc <subnet_evt+0x20>
	}
}
   161ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161cc:	0002fbd8 	.word	0x0002fbd8
   161d0:	0002fbe8 	.word	0x0002fbe8
   161d4:	00032a9b 	.word	0x00032a9b
   161d8:	00030da5 	.word	0x00030da5

000161dc <clear_net_key>:

static void clear_net_key(uint16_t net_idx)
{
   161dc:	b5b0      	push	{r4, r5, r7, lr}
   161de:	b086      	sub	sp, #24
   161e0:	af00      	add	r7, sp, #0
	char path[20];
	int err;

	LOG_DBG("NetKeyIndex 0x%03x", net_idx);

	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   161e2:	4603      	mov	r3, r0
{
   161e4:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   161e6:	2114      	movs	r1, #20
   161e8:	4a0d      	ldr	r2, [pc, #52]	; (16220 <clear_net_key+0x44>)
   161ea:	1d38      	adds	r0, r7, #4
   161ec:	f012 faef 	bl	287ce <snprintk>
	err = settings_delete(path);
   161f0:	1d38      	adds	r0, r7, #4
   161f2:	f013 faaf 	bl	29754 <settings_delete>
	if (err) {
   161f6:	b178      	cbz	r0, 16218 <clear_net_key+0x3c>
		LOG_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
   161f8:	466d      	mov	r5, sp
   161fa:	b088      	sub	sp, #32
   161fc:	466a      	mov	r2, sp
   161fe:	4b09      	ldr	r3, [pc, #36]	; (16224 <clear_net_key+0x48>)
   16200:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16204:	2303      	movs	r3, #3
   16206:	f842 3f10 	str.w	r3, [r2, #16]!
   1620a:	2300      	movs	r3, #0
   1620c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16210:	4805      	ldr	r0, [pc, #20]	; (16228 <clear_net_key+0x4c>)
   16212:	f7f4 fca3 	bl	ab5c <z_impl_z_log_msg_static_create>
   16216:	46ad      	mov	sp, r5
	} else {
		LOG_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
	}
}
   16218:	3718      	adds	r7, #24
   1621a:	46bd      	mov	sp, r7
   1621c:	bdb0      	pop	{r4, r5, r7, pc}
   1621e:	bf00      	nop
   16220:	00032acd 	.word	0x00032acd
   16224:	00032adf 	.word	0x00032adf
   16228:	0002fcd4 	.word	0x0002fcd4

0001622c <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
   1622c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1622e:	460e      	mov	r6, r1
	uint8_t p = 0;
   16230:	2700      	movs	r7, #0
{
   16232:	b08b      	sub	sp, #44	; 0x2c
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   16234:	f100 0322 	add.w	r3, r0, #34	; 0x22
   16238:	9301      	str	r3, [sp, #4]
   1623a:	f100 0312 	add.w	r3, r0, #18
   1623e:	9300      	str	r3, [sp, #0]
{
   16240:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   16242:	f100 0311 	add.w	r3, r0, #17
   16246:	2201      	movs	r2, #1
   16248:	4630      	mov	r0, r6
   1624a:	f10d 010f 	add.w	r1, sp, #15
	uint8_t p = 0;
   1624e:	f88d 700f 	strb.w	r7, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   16252:	f002 fabd 	bl	187d0 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
   16256:	4604      	mov	r4, r0
   16258:	b168      	cbz	r0, 16276 <net_keys_create+0x4a>
		LOG_ERR("Unable to generate NID, EncKey & PrivacyKey");
   1625a:	4b19      	ldr	r3, [pc, #100]	; (162c0 <net_keys_create+0x94>)
	LOG_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		LOG_ERR("Unable to generate beacon key");
   1625c:	9309      	str	r3, [sp, #36]	; 0x24
   1625e:	2302      	movs	r3, #2
   16260:	9308      	str	r3, [sp, #32]
   16262:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16266:	463b      	mov	r3, r7
   16268:	4816      	ldr	r0, [pc, #88]	; (162c4 <net_keys_create+0x98>)
   1626a:	aa08      	add	r2, sp, #32
   1626c:	f7f4 fc76 	bl	ab5c <z_impl_z_log_msg_static_create>
	LOG_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
   16270:	4620      	mov	r0, r4
   16272:	b00b      	add	sp, #44	; 0x2c
   16274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(keys->net, key, 16);
   16276:	2210      	movs	r2, #16
   16278:	4631      	mov	r1, r6
   1627a:	1c68      	adds	r0, r5, #1
   1627c:	f014 f94d 	bl	2a51a <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
   16280:	4630      	mov	r0, r6
   16282:	f105 0132 	add.w	r1, r5, #50	; 0x32
   16286:	f002 fafb 	bl	18880 <bt_mesh_k3>
	if (err) {
   1628a:	4604      	mov	r4, r0
   1628c:	b108      	cbz	r0, 16292 <net_keys_create+0x66>
		LOG_ERR("Unable to generate Net ID");
   1628e:	4b0e      	ldr	r3, [pc, #56]	; (162c8 <net_keys_create+0x9c>)
   16290:	e7e4      	b.n	1625c <net_keys_create+0x30>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
   16292:	4630      	mov	r0, r6
   16294:	490d      	ldr	r1, [pc, #52]	; (162cc <net_keys_create+0xa0>)
   16296:	f105 023a 	add.w	r2, r5, #58	; 0x3a
   1629a:	f002 fb43 	bl	18924 <bt_mesh_id128>
	if (err) {
   1629e:	4604      	mov	r4, r0
   162a0:	b108      	cbz	r0, 162a6 <net_keys_create+0x7a>
		LOG_ERR("Unable to generate IdentityKey");
   162a2:	4b0b      	ldr	r3, [pc, #44]	; (162d0 <net_keys_create+0xa4>)
   162a4:	e7da      	b.n	1625c <net_keys_create+0x30>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
   162a6:	4630      	mov	r0, r6
   162a8:	490a      	ldr	r1, [pc, #40]	; (162d4 <net_keys_create+0xa8>)
   162aa:	f105 024a 	add.w	r2, r5, #74	; 0x4a
   162ae:	f002 fb39 	bl	18924 <bt_mesh_id128>
	if (err) {
   162b2:	4604      	mov	r4, r0
   162b4:	b108      	cbz	r0, 162ba <net_keys_create+0x8e>
		LOG_ERR("Unable to generate beacon key");
   162b6:	4b08      	ldr	r3, [pc, #32]	; (162d8 <net_keys_create+0xac>)
   162b8:	e7d0      	b.n	1625c <net_keys_create+0x30>
	keys->valid = 1U;
   162ba:	2301      	movs	r3, #1
   162bc:	702b      	strb	r3, [r5, #0]
	return 0;
   162be:	e7d7      	b.n	16270 <net_keys_create+0x44>
   162c0:	00032b02 	.word	0x00032b02
   162c4:	0002fcd4 	.word	0x0002fcd4
   162c8:	00032b2e 	.word	0x00032b2e
   162cc:	00032b48 	.word	0x00032b48
   162d0:	00032b4d 	.word	0x00032b4d
   162d4:	00032b6c 	.word	0x00032b6c
   162d8:	00032b71 	.word	0x00032b71

000162dc <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
   162dc:	b120      	cbz	r0, 162e8 <bt_mesh_net_flags+0xc>
   162de:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   162e2:	1e82      	subs	r2, r0, #2
   162e4:	4250      	negs	r0, r2
   162e6:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   162e8:	4b03      	ldr	r3, [pc, #12]	; (162f8 <bt_mesh_net_flags+0x1c>)
   162ea:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   162ee:	071b      	lsls	r3, r3, #28
		flags |= BT_MESH_NET_FLAG_IVU;
   162f0:	bf48      	it	mi
   162f2:	f040 0002 	orrmi.w	r0, r0, #2
}
   162f6:	4770      	bx	lr
   162f8:	20009ed0 	.word	0x20009ed0

000162fc <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
   162fc:	b510      	push	{r4, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   162fe:	f64f 74ff 	movw	r4, #65535	; 0xffff
   16302:	4b07      	ldr	r3, [pc, #28]	; (16320 <bt_mesh_subnets_get+0x24>)
   16304:	8c1b      	ldrh	r3, [r3, #32]
   16306:	42a3      	cmp	r3, r4
   16308:	d004      	beq.n	16314 <bt_mesh_subnets_get+0x18>
			continue;
		}

		if (skip) {
   1630a:	b91a      	cbnz	r2, 16314 <bt_mesh_subnets_get+0x18>
			skip--;
			continue;
		}

		if (count >= max) {
   1630c:	b121      	cbz	r1, 16318 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
		}

		net_idxs[count++] = sub->net_idx;
   1630e:	8003      	strh	r3, [r0, #0]
   16310:	2001      	movs	r0, #1
	}

	return count;
}
   16312:	bd10      	pop	{r4, pc}
	size_t count = 0;
   16314:	2000      	movs	r0, #0
	return count;
   16316:	e7fc      	b.n	16312 <bt_mesh_subnets_get+0x16>
			return -ENOMEM;
   16318:	f06f 000b 	mvn.w	r0, #11
   1631c:	e7f9      	b.n	16312 <bt_mesh_subnets_get+0x16>
   1631e:	bf00      	nop
   16320:	200087b0 	.word	0x200087b0

00016324 <bt_mesh_subnet_get>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
   16324:	4b03      	ldr	r3, [pc, #12]	; (16334 <bt_mesh_subnet_get+0x10>)
   16326:	8c1a      	ldrh	r2, [r3, #32]
			return sub;
		}
	}

	return NULL;
}
   16328:	4282      	cmp	r2, r0
   1632a:	bf0c      	ite	eq
   1632c:	4618      	moveq	r0, r3
   1632e:	2000      	movne	r0, #0
   16330:	4770      	bx	lr
   16332:	bf00      	nop
   16334:	200087b0 	.word	0x200087b0

00016338 <store_subnet>:
{
   16338:	b510      	push	{r4, lr}
   1633a:	b096      	sub	sp, #88	; 0x58
   1633c:	4601      	mov	r1, r0
	sub = bt_mesh_subnet_get(net_idx);
   1633e:	f7ff fff1 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   16342:	4604      	mov	r4, r0
   16344:	b348      	cbz	r0, 1639a <store_subnet+0x62>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   16346:	460b      	mov	r3, r1
   16348:	4a15      	ldr	r2, [pc, #84]	; (163a0 <store_subnet+0x68>)
   1634a:	2114      	movs	r1, #20
   1634c:	a801      	add	r0, sp, #4
   1634e:	f012 fa3e 	bl	287ce <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
   16352:	2210      	movs	r2, #16
   16354:	f104 0131 	add.w	r1, r4, #49	; 0x31
   16358:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1635c:	f014 f8dd 	bl	2a51a <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
   16360:	2210      	movs	r2, #16
   16362:	f104 018b 	add.w	r1, r4, #139	; 0x8b
   16366:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1636a:	f014 f8d6 	bl	2a51a <memcpy>
	key.kr_flag = 0U; /* Deprecated */
   1636e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	err = settings_save_one(path, &key, sizeof(key));
   16372:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
   16374:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
   16376:	a90d      	add	r1, sp, #52	; 0x34
   16378:	a801      	add	r0, sp, #4
	key.kr_flag = 0U; /* Deprecated */
   1637a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = settings_save_one(path, &key, sizeof(key));
   1637e:	f7f5 fead 	bl	c0dc <settings_save_one>
	if (err) {
   16382:	b150      	cbz	r0, 1639a <store_subnet+0x62>
		LOG_ERR("Failed to store NetKey value");
   16384:	4b07      	ldr	r3, [pc, #28]	; (163a4 <store_subnet+0x6c>)
   16386:	930b      	str	r3, [sp, #44]	; 0x2c
   16388:	2302      	movs	r3, #2
   1638a:	930a      	str	r3, [sp, #40]	; 0x28
   1638c:	2300      	movs	r3, #0
   1638e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16392:	4805      	ldr	r0, [pc, #20]	; (163a8 <store_subnet+0x70>)
   16394:	aa0a      	add	r2, sp, #40	; 0x28
   16396:	f7f4 fbe1 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   1639a:	b016      	add	sp, #88	; 0x58
   1639c:	bd10      	pop	{r4, pc}
   1639e:	bf00      	nop
   163a0:	00032acd 	.word	0x00032acd
   163a4:	00032b8f 	.word	0x00032b8f
   163a8:	0002fcd4 	.word	0x0002fcd4

000163ac <update_subnet_settings>:
{
   163ac:	b4f0      	push	{r4, r5, r6, r7}
		if (update->key_idx == key_idx) {
   163ae:	4d14      	ldr	r5, [pc, #80]	; (16400 <update_subnet_settings+0x54>)
	uint8_t clear = store ? 0U : 1U;
   163b0:	f081 0601 	eor.w	r6, r1, #1
		if (!update->valid) {
   163b4:	786c      	ldrb	r4, [r5, #1]
		if (update->key_idx == key_idx) {
   163b6:	882a      	ldrh	r2, [r5, #0]
		if (!update->valid) {
   163b8:	f014 0f10 	tst.w	r4, #16
		if (update->key_idx == key_idx) {
   163bc:	f3c2 070b 	ubfx	r7, r2, #0, #12
		if (!update->valid) {
   163c0:	d111      	bne.n	163e6 <update_subnet_settings+0x3a>
	free_slot->key_idx = net_idx;
   163c2:	f3c0 030b 	ubfx	r3, r0, #0, #12
   163c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   163ca:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
   163ce:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
   163d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
   163d6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   163da:	4313      	orrs	r3, r2
   163dc:	802b      	strh	r3, [r5, #0]
		bt_mesh_settings_store_schedule(
   163de:	2001      	movs	r0, #1
}
   163e0:	bcf0      	pop	{r4, r5, r6, r7}
		bt_mesh_settings_store_schedule(
   163e2:	f005 bccb 	b.w	1bd7c <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
   163e6:	4287      	cmp	r7, r0
   163e8:	d003      	beq.n	163f2 <update_subnet_settings+0x46>
		if (store) {
   163ea:	b931      	cbnz	r1, 163fa <update_subnet_settings+0x4e>
}
   163ec:	bcf0      	pop	{r4, r5, r6, r7}
			clear_net_key(net_idx);
   163ee:	f7ff bef5 	b.w	161dc <clear_net_key>
		update->clear = clear;
   163f2:	f366 1445 	bfi	r4, r6, #5, #1
   163f6:	706c      	strb	r4, [r5, #1]
   163f8:	e7f1      	b.n	163de <update_subnet_settings+0x32>
}
   163fa:	bcf0      	pop	{r4, r5, r6, r7}
			store_subnet(net_idx);
   163fc:	f7ff bf9c 	b.w	16338 <store_subnet>
   16400:	2000b138 	.word	0x2000b138

00016404 <bt_mesh_subnet_add>:
{
   16404:	b538      	push	{r3, r4, r5, lr}
   16406:	4605      	mov	r5, r0
		if (subnets[i].net_idx == net_idx) {
   16408:	4c14      	ldr	r4, [pc, #80]	; (1645c <bt_mesh_subnet_add+0x58>)
{
   1640a:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
   1640c:	8c23      	ldrh	r3, [r4, #32]
   1640e:	429d      	cmp	r5, r3
   16410:	d003      	beq.n	1641a <bt_mesh_subnet_add+0x16>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   16412:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16416:	4293      	cmp	r3, r2
   16418:	d11b      	bne.n	16452 <bt_mesh_subnet_add+0x4e>
	if (sub->net_idx == net_idx) {
   1641a:	8c23      	ldrh	r3, [r4, #32]
   1641c:	42ab      	cmp	r3, r5
   1641e:	d107      	bne.n	16430 <bt_mesh_subnet_add+0x2c>
		if (memcmp(key, sub->keys[0].net, 16)) {
   16420:	2210      	movs	r2, #16
   16422:	f104 0131 	add.w	r1, r4, #49	; 0x31
   16426:	f014 f851 	bl	2a4cc <memcmp>
   1642a:	b180      	cbz	r0, 1644e <bt_mesh_subnet_add+0x4a>
			return STATUS_IDX_ALREADY_STORED;
   1642c:	2006      	movs	r0, #6
   1642e:	e00f      	b.n	16450 <bt_mesh_subnet_add+0x4c>
	err = net_keys_create(&sub->keys[0], key);
   16430:	4601      	mov	r1, r0
   16432:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16436:	f7ff fef9 	bl	1622c <net_keys_create>
	if (err) {
   1643a:	4601      	mov	r1, r0
   1643c:	b958      	cbnz	r0, 16456 <bt_mesh_subnet_add+0x52>
	sub->kr_phase = BT_MESH_KR_NORMAL;
   1643e:	8460      	strh	r0, [r4, #34]	; 0x22
	sub->net_idx = net_idx;
   16440:	8425      	strh	r5, [r4, #32]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
   16442:	4620      	mov	r0, r4
   16444:	f7ff feaa 	bl	1619c <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   16448:	8c20      	ldrh	r0, [r4, #32]
   1644a:	f015 ffcd 	bl	2c3e8 <bt_mesh_subnet_store>
		return STATUS_SUCCESS;
   1644e:	2000      	movs	r0, #0
}
   16450:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INSUFF_RESOURCES;
   16452:	2005      	movs	r0, #5
   16454:	e7fc      	b.n	16450 <bt_mesh_subnet_add+0x4c>
		return STATUS_UNSPECIFIED;
   16456:	2010      	movs	r0, #16
   16458:	e7fa      	b.n	16450 <bt_mesh_subnet_add+0x4c>
   1645a:	bf00      	nop
   1645c:	200087b0 	.word	0x200087b0

00016460 <bt_mesh_subnet_kr_phase_set>:
{
   16460:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
   16462:	4b14      	ldr	r3, [pc, #80]	; (164b4 <bt_mesh_subnet_kr_phase_set+0x54>)
{
   16464:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
   16466:	881a      	ldrh	r2, [r3, #0]
   16468:	789b      	ldrb	r3, [r3, #2]
   1646a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1646e:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
   16472:	f7ff ff57 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   16476:	4605      	mov	r5, r0
   16478:	b918      	cbnz	r0, 16482 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
   1647a:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
   1647c:	2004      	movs	r0, #4
}
   1647e:	b003      	add	sp, #12
   16480:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
   16482:	7809      	ldrb	r1, [r1, #0]
   16484:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   16488:	4299      	cmp	r1, r3
   1648a:	d00e      	beq.n	164aa <bt_mesh_subnet_kr_phase_set+0x4a>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
   1648c:	2b02      	cmp	r3, #2
   1648e:	d80e      	bhi.n	164ae <bt_mesh_subnet_kr_phase_set+0x4e>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
   16490:	f103 0208 	add.w	r2, r3, #8
   16494:	446a      	add	r2, sp
   16496:	f812 2c04 	ldrb.w	r2, [r2, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
   1649a:	40ca      	lsrs	r2, r1
   1649c:	07d2      	lsls	r2, r2, #31
   1649e:	d506      	bpl.n	164ae <bt_mesh_subnet_kr_phase_set+0x4e>
		key_refresh(sub, *phase);
   164a0:	f015 ffa5 	bl	2c3ee <key_refresh>
		*phase = sub->kr_phase;
   164a4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   164a8:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
   164aa:	2000      	movs	r0, #0
   164ac:	e7e7      	b.n	1647e <bt_mesh_subnet_kr_phase_set+0x1e>
	return STATUS_CANNOT_UPDATE;
   164ae:	200b      	movs	r0, #11
	*phase = sub->kr_phase;
   164b0:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
   164b2:	e7e4      	b.n	1647e <bt_mesh_subnet_kr_phase_set+0x1e>
   164b4:	00032bac 	.word	0x00032bac

000164b8 <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
   164b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
   164ba:	4c19      	ldr	r4, [pc, #100]	; (16520 <bt_mesh_subnet_set+0x68>)
{
   164bc:	461e      	mov	r6, r3
		if (subnets[i].net_idx == net_idx) {
   164be:	8c23      	ldrh	r3, [r4, #32]
{
   164c0:	460f      	mov	r7, r1
		if (subnets[i].net_idx == net_idx) {
   164c2:	4298      	cmp	r0, r3
{
   164c4:	4605      	mov	r5, r0
   164c6:	4611      	mov	r1, r2
		if (subnets[i].net_idx == net_idx) {
   164c8:	d003      	beq.n	164d2 <bt_mesh_subnet_set+0x1a>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   164ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   164ce:	4293      	cmp	r3, r2
   164d0:	d120      	bne.n	16514 <bt_mesh_subnet_set+0x5c>
	sub = subnet_alloc(net_idx);
	if (!sub) {
		return -ENOMEM;
	}

	if (sub->net_idx == net_idx) {
   164d2:	8c23      	ldrh	r3, [r4, #32]
   164d4:	42ab      	cmp	r3, r5
   164d6:	d020      	beq.n	1651a <bt_mesh_subnet_set+0x62>
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
   164d8:	b959      	cbnz	r1, 164f2 <bt_mesh_subnet_set+0x3a>
   164da:	b99e      	cbnz	r6, 16504 <bt_mesh_subnet_set+0x4c>
		if (net_keys_create(&sub->keys[i], keys[i])) {
			return -EIO;
		}
	}

	sub->net_idx = net_idx;
   164dc:	8425      	strh	r5, [r4, #32]
	sub->kr_phase = kr_phase;

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   164de:	2500      	movs	r5, #0
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
   164e0:	4620      	mov	r0, r4
	sub->kr_phase = kr_phase;
   164e2:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   164e6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
	bt_mesh_beacon_update(sub);
   164ea:	f7fe fe07 	bl	150fc <bt_mesh_beacon_update>

	return 0;
   164ee:	4628      	mov	r0, r5
   164f0:	e007      	b.n	16502 <bt_mesh_subnet_set+0x4a>
		if (net_keys_create(&sub->keys[i], keys[i])) {
   164f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   164f6:	f7ff fe99 	bl	1622c <net_keys_create>
   164fa:	2800      	cmp	r0, #0
   164fc:	d0ed      	beq.n	164da <bt_mesh_subnet_set+0x22>
			return -EIO;
   164fe:	f06f 0004 	mvn.w	r0, #4
}
   16502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
   16504:	4631      	mov	r1, r6
   16506:	f104 008a 	add.w	r0, r4, #138	; 0x8a
   1650a:	f7ff fe8f 	bl	1622c <net_keys_create>
   1650e:	2800      	cmp	r0, #0
   16510:	d0e4      	beq.n	164dc <bt_mesh_subnet_set+0x24>
   16512:	e7f4      	b.n	164fe <bt_mesh_subnet_set+0x46>
		return -ENOMEM;
   16514:	f06f 000b 	mvn.w	r0, #11
   16518:	e7f3      	b.n	16502 <bt_mesh_subnet_set+0x4a>
		return -EALREADY;
   1651a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1651e:	e7f0      	b.n	16502 <bt_mesh_subnet_set+0x4a>
   16520:	200087b0 	.word	0x200087b0

00016524 <pre_net_key_set>:
	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);
   16524:	b5f0      	push	{r4, r5, r6, r7, lr}
   16526:	4616      	mov	r6, r2
   16528:	461f      	mov	r7, r3
   1652a:	b091      	sub	sp, #68	; 0x44
   1652c:	4b1f      	ldr	r3, [pc, #124]	; (165ac <pre_net_key_set+0x88>)
   1652e:	e8d3 4faf 	lda	r4, [r3]
   16532:	f014 0401 	ands.w	r4, r4, #1
   16536:	d00d      	beq.n	16554 <pre_net_key_set+0x30>
	if (!name) {
   16538:	b978      	cbnz	r0, 1655a <pre_net_key_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   1653a:	4b1d      	ldr	r3, [pc, #116]	; (165b0 <pre_net_key_set+0x8c>)
   1653c:	930b      	str	r3, [sp, #44]	; 0x2c
   1653e:	2302      	movs	r3, #2
   16540:	930a      	str	r3, [sp, #40]	; 0x28
		return -ENOENT;
   16542:	f06f 0401 	mvn.w	r4, #1
   16546:	4603      	mov	r3, r0
   16548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1654c:	4819      	ldr	r0, [pc, #100]	; (165b4 <pre_net_key_set+0x90>)
   1654e:	aa0a      	add	r2, sp, #40	; 0x28
   16550:	f7f4 fb04 	bl	ab5c <z_impl_z_log_msg_static_create>
BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);
   16554:	4620      	mov	r0, r4
   16556:	b011      	add	sp, #68	; 0x44
   16558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_idx = strtol(name, NULL, 16);
   1655a:	2210      	movs	r2, #16
   1655c:	2100      	movs	r1, #0
   1655e:	f013 fe7c 	bl	2a25a <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   16562:	2321      	movs	r3, #33	; 0x21
   16564:	4639      	mov	r1, r7
	net_idx = strtol(name, NULL, 16);
   16566:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   16568:	aa06      	add	r2, sp, #24
   1656a:	4630      	mov	r0, r6
   1656c:	f005 fbca 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   16570:	4604      	mov	r4, r0
   16572:	b158      	cbz	r0, 1658c <pre_net_key_set+0x68>
		LOG_ERR("Failed to set \'net-key\'");
   16574:	4b10      	ldr	r3, [pc, #64]	; (165b8 <pre_net_key_set+0x94>)
   16576:	9305      	str	r3, [sp, #20]
   16578:	2302      	movs	r3, #2
   1657a:	9304      	str	r3, [sp, #16]
   1657c:	2300      	movs	r3, #0
   1657e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16582:	480c      	ldr	r0, [pc, #48]	; (165b4 <pre_net_key_set+0x90>)
   16584:	aa04      	add	r2, sp, #16
   16586:	f7f4 fae9 	bl	ab5c <z_impl_z_log_msg_static_create>
		return err;
   1658a:	e7e3      	b.n	16554 <pre_net_key_set+0x30>
		net_idx, key.kr_phase, key.val[0],
   1658c:	f89d 3018 	ldrb.w	r3, [sp, #24]
	return bt_mesh_subnet_set(
   16590:	f10d 0219 	add.w	r2, sp, #25
   16594:	2b01      	cmp	r3, #1
   16596:	ea4f 0153 	mov.w	r1, r3, lsr #1
   1659a:	bf94      	ite	ls
   1659c:	4603      	movls	r3, r0
   1659e:	f10d 0329 	addhi.w	r3, sp, #41	; 0x29
   165a2:	4628      	mov	r0, r5
   165a4:	f7ff ff88 	bl	164b8 <bt_mesh_subnet_set>
   165a8:	4604      	mov	r4, r0
BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);
   165aa:	e7d3      	b.n	16554 <pre_net_key_set+0x30>
   165ac:	20009ed0 	.word	0x20009ed0
   165b0:	00031b3e 	.word	0x00031b3e
   165b4:	0002fcd4 	.word	0x0002fcd4
   165b8:	00032bb0 	.word	0x00032bb0

000165bc <bt_mesh_subnet_find>:
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   165bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   165c0:	b510      	push	{r4, lr}
   165c2:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   165c4:	4805      	ldr	r0, [pc, #20]	; (165dc <bt_mesh_subnet_find+0x20>)
   165c6:	8c04      	ldrh	r4, [r0, #32]
   165c8:	4294      	cmp	r4, r2
   165ca:	d005      	beq.n	165d8 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
   165cc:	b90b      	cbnz	r3, 165d2 <bt_mesh_subnet_find+0x16>
			return &subnets[i];
   165ce:	4803      	ldr	r0, [pc, #12]	; (165dc <bt_mesh_subnet_find+0x20>)
}
   165d0:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
   165d2:	4798      	blx	r3
   165d4:	2800      	cmp	r0, #0
   165d6:	d1fa      	bne.n	165ce <bt_mesh_subnet_find+0x12>
	return NULL;
   165d8:	2000      	movs	r0, #0
   165da:	e7f9      	b.n	165d0 <bt_mesh_subnet_find+0x14>
   165dc:	200087b0 	.word	0x200087b0

000165e0 <bt_mesh_subnet_foreach>:
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   165e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   165e4:	b508      	push	{r3, lr}
   165e6:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
   165e8:	4804      	ldr	r0, [pc, #16]	; (165fc <bt_mesh_subnet_foreach+0x1c>)
   165ea:	8c01      	ldrh	r1, [r0, #32]
   165ec:	4291      	cmp	r1, r2
   165ee:	d002      	beq.n	165f6 <bt_mesh_subnet_foreach+0x16>
		cb(&subnets[i]);
   165f0:	4798      	blx	r3
		count++;
   165f2:	2001      	movs	r0, #1
}
   165f4:	bd08      	pop	{r3, pc}
	size_t count = 0;
   165f6:	2000      	movs	r0, #0
	return count;
   165f8:	e7fc      	b.n	165f4 <bt_mesh_subnet_foreach+0x14>
   165fa:	bf00      	nop
   165fc:	200087b0 	.word	0x200087b0

00016600 <bt_mesh_subnet_next>:
	if (sub) {
   16600:	b168      	cbz	r0, 1661e <bt_mesh_subnet_next+0x1e>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
   16602:	4a08      	ldr	r2, [pc, #32]	; (16624 <bt_mesh_subnet_next+0x24>)
		sub++;
   16604:	f100 03e4 	add.w	r3, r0, #228	; 0xe4
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
   16608:	4293      	cmp	r3, r2
		sub = &subnets[0];
   1660a:	bf08      	it	eq
   1660c:	4603      	moveq	r3, r0
}
   1660e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   16612:	8c18      	ldrh	r0, [r3, #32]
}
   16614:	4290      	cmp	r0, r2
   16616:	bf14      	ite	ne
   16618:	4618      	movne	r0, r3
   1661a:	2000      	moveq	r0, #0
   1661c:	4770      	bx	lr
		sub = &subnets[0];
   1661e:	4b02      	ldr	r3, [pc, #8]	; (16628 <bt_mesh_subnet_next+0x28>)
   16620:	e7f5      	b.n	1660e <bt_mesh_subnet_next+0xe>
   16622:	bf00      	nop
   16624:	20008894 	.word	0x20008894
   16628:	200087b0 	.word	0x200087b0

0001662c <bt_mesh_net_keys_reset>:
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1662c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16630:	4803      	ldr	r0, [pc, #12]	; (16640 <bt_mesh_net_keys_reset+0x14>)
   16632:	8c02      	ldrh	r2, [r0, #32]
   16634:	429a      	cmp	r2, r3
   16636:	d001      	beq.n	1663c <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
   16638:	f015 bf14 	b.w	2c464 <subnet_del>
}
   1663c:	4770      	bx	lr
   1663e:	bf00      	nop
   16640:	200087b0 	.word	0x200087b0

00016644 <bt_mesh_net_cred_find>:
{
   16644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16648:	4604      	mov	r4, r0
   1664a:	460e      	mov	r6, r1
   1664c:	4617      	mov	r7, r2
   1664e:	4698      	mov	r8, r3
   16650:	4d2a      	ldr	r5, [pc, #168]	; (166fc <bt_mesh_net_cred_find+0xb8>)
   16652:	f505 79e8 	add.w	r9, r5, #464	; 0x1d0
		if (!frnd->subnet) {
   16656:	6bab      	ldr	r3, [r5, #56]	; 0x38
   16658:	b333      	cbz	r3, 166a8 <bt_mesh_net_cred_find+0x64>
		rx->sub = frnd->subnet;
   1665a:	6023      	str	r3, [r4, #0]
			if (!rx->sub->keys[j].valid) {
   1665c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16660:	b133      	cbz	r3, 16670 <bt_mesh_net_cred_find+0x2c>
			if (cb(rx, in, out, &frnd->cred[j])) {
   16662:	463a      	mov	r2, r7
   16664:	4631      	mov	r1, r6
   16666:	4620      	mov	r0, r4
   16668:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   1666c:	47c0      	blx	r8
   1666e:	b9c8      	cbnz	r0, 166a4 <bt_mesh_net_cred_find+0x60>
			if (!rx->sub->keys[j].valid) {
   16670:	6823      	ldr	r3, [r4, #0]
   16672:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   16676:	b1bb      	cbz	r3, 166a8 <bt_mesh_net_cred_find+0x64>
			if (cb(rx, in, out, &frnd->cred[j])) {
   16678:	463a      	mov	r2, r7
   1667a:	4631      	mov	r1, r6
   1667c:	4620      	mov	r0, r4
   1667e:	f105 035d 	add.w	r3, r5, #93	; 0x5d
   16682:	47c0      	blx	r8
   16684:	b180      	cbz	r0, 166a8 <bt_mesh_net_cred_find+0x64>
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
   16686:	2301      	movs	r3, #1
				rx->new_key = (j > 0);
   16688:	7d22      	ldrb	r2, [r4, #20]
   1668a:	005b      	lsls	r3, r3, #1
   1668c:	f043 0304 	orr.w	r3, r3, #4
   16690:	f022 0206 	bic.w	r2, r2, #6
   16694:	4313      	orrs	r3, r2
				return true;
   16696:	2001      	movs	r0, #1
				rx->new_key = (j > 0);
   16698:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
   1669a:	6823      	ldr	r3, [r4, #0]
   1669c:	8c1b      	ldrh	r3, [r3, #32]
   1669e:	80a3      	strh	r3, [r4, #4]
}
   166a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
   166a4:	2300      	movs	r3, #0
   166a6:	e7ef      	b.n	16688 <bt_mesh_net_cred_find+0x44>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   166a8:	35e8      	adds	r5, #232	; 0xe8
   166aa:	454d      	cmp	r5, r9
   166ac:	d1d3      	bne.n	16656 <bt_mesh_net_cred_find+0x12>
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
   166ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
		rx->sub = &subnets[i];
   166b2:	4b13      	ldr	r3, [pc, #76]	; (16700 <bt_mesh_net_cred_find+0xbc>)
   166b4:	6023      	str	r3, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
   166b6:	8c19      	ldrh	r1, [r3, #32]
   166b8:	4291      	cmp	r1, r2
   166ba:	d101      	bne.n	166c0 <bt_mesh_net_cred_find+0x7c>
	return false;
   166bc:	2000      	movs	r0, #0
   166be:	e7ef      	b.n	166a0 <bt_mesh_net_cred_find+0x5c>
			if (!rx->sub->keys[j].valid) {
   166c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   166c4:	b12a      	cbz	r2, 166d2 <bt_mesh_net_cred_find+0x8e>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   166c6:	463a      	mov	r2, r7
   166c8:	4631      	mov	r1, r6
   166ca:	4620      	mov	r0, r4
   166cc:	3341      	adds	r3, #65	; 0x41
   166ce:	47c0      	blx	r8
   166d0:	b990      	cbnz	r0, 166f8 <bt_mesh_net_cred_find+0xb4>
			if (!rx->sub->keys[j].valid) {
   166d2:	6823      	ldr	r3, [r4, #0]
   166d4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
   166d8:	2a00      	cmp	r2, #0
   166da:	d0ef      	beq.n	166bc <bt_mesh_net_cred_find+0x78>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
   166dc:	463a      	mov	r2, r7
   166de:	4631      	mov	r1, r6
   166e0:	4620      	mov	r0, r4
   166e2:	339b      	adds	r3, #155	; 0x9b
   166e4:	47c0      	blx	r8
   166e6:	2800      	cmp	r0, #0
   166e8:	d0e8      	beq.n	166bc <bt_mesh_net_cred_find+0x78>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   166ea:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
   166ec:	7d23      	ldrb	r3, [r4, #20]
   166ee:	f023 0306 	bic.w	r3, r3, #6
   166f2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   166f6:	e7ce      	b.n	16696 <bt_mesh_net_cred_find+0x52>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
   166f8:	2200      	movs	r2, #0
   166fa:	e7f7      	b.n	166ec <bt_mesh_net_cred_find+0xa8>
   166fc:	20009ec8 	.word	0x20009ec8
   16700:	200087b0 	.word	0x200087b0

00016704 <bt_mesh_subnet_pending_store>:
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
   16704:	4a08      	ldr	r2, [pc, #32]	; (16728 <bt_mesh_subnet_pending_store+0x24>)
   16706:	7853      	ldrb	r3, [r2, #1]
   16708:	06d9      	lsls	r1, r3, #27
   1670a:	d50c      	bpl.n	16726 <bt_mesh_subnet_pending_store+0x22>
			continue;
		}

		update->valid = 0U;
   1670c:	f36f 1304 	bfc	r3, #4, #1
   16710:	7053      	strb	r3, [r2, #1]

		if (update->clear) {
			clear_net_key(update->key_idx);
   16712:	8810      	ldrh	r0, [r2, #0]
		if (update->clear) {
   16714:	b2db      	uxtb	r3, r3
   16716:	069b      	lsls	r3, r3, #26
			clear_net_key(update->key_idx);
   16718:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
   1671c:	d501      	bpl.n	16722 <bt_mesh_subnet_pending_store+0x1e>
			clear_net_key(update->key_idx);
   1671e:	f7ff bd5d 	b.w	161dc <clear_net_key>
		} else {
			store_subnet(update->key_idx);
   16722:	f7ff be09 	b.w	16338 <store_subnet>
		}
	}
}
   16726:	4770      	bx	lr
   16728:	2000b138 	.word	0x2000b138

0001672c <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
   1672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1672e:	4604      	mov	r4, r0
   16730:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   16732:	4d0b      	ldr	r5, [pc, #44]	; (16760 <app_key_evt+0x34>)
   16734:	4f0b      	ldr	r7, [pc, #44]	; (16764 <app_key_evt+0x38>)
   16736:	42bd      	cmp	r5, r7
   16738:	d90f      	bls.n	1675a <app_key_evt+0x2e>
   1673a:	490b      	ldr	r1, [pc, #44]	; (16768 <app_key_evt+0x3c>)
   1673c:	480b      	ldr	r0, [pc, #44]	; (1676c <app_key_evt+0x40>)
   1673e:	22b4      	movs	r2, #180	; 0xb4
   16740:	f012 fa40 	bl	28bc4 <assert_print>
   16744:	21b4      	movs	r1, #180	; 0xb4
   16746:	4808      	ldr	r0, [pc, #32]	; (16768 <app_key_evt+0x3c>)
   16748:	f012 fa35 	bl	28bb6 <assert_post_action>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
   1674c:	4632      	mov	r2, r6
   1674e:	f855 3b04 	ldr.w	r3, [r5], #4
   16752:	8821      	ldrh	r1, [r4, #0]
   16754:	8860      	ldrh	r0, [r4, #2]
   16756:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
   16758:	e7ed      	b.n	16736 <app_key_evt+0xa>
   1675a:	d3f7      	bcc.n	1674c <app_key_evt+0x20>
	}
}
   1675c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1675e:	bf00      	nop
   16760:	0002fbe8 	.word	0x0002fbe8
   16764:	0002fbec 	.word	0x0002fbec
   16768:	00032be8 	.word	0x00032be8
   1676c:	00030da5 	.word	0x00030da5

00016770 <store_app_key>:
{
   16770:	b5b0      	push	{r4, r5, r7, lr}
   16772:	4605      	mov	r5, r0
   16774:	b08e      	sub	sp, #56	; 0x38
		if (apps[i].app_idx == app_idx) {
   16776:	4c1c      	ldr	r4, [pc, #112]	; (167e8 <store_app_key+0x78>)
{
   16778:	af00      	add	r7, sp, #0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   1677a:	4603      	mov	r3, r0
   1677c:	2114      	movs	r1, #20
   1677e:	4638      	mov	r0, r7
   16780:	4a1a      	ldr	r2, [pc, #104]	; (167ec <store_app_key+0x7c>)
   16782:	f012 f824 	bl	287ce <snprintk>
		if (apps[i].app_idx == app_idx) {
   16786:	8863      	ldrh	r3, [r4, #2]
   16788:	42ab      	cmp	r3, r5
   1678a:	d12a      	bne.n	167e2 <store_app_key+0x72>
	key.net_idx = app->net_idx,
   1678c:	8823      	ldrh	r3, [r4, #0]
	memcpy(key.val[0], app->keys[0].val, 16);
   1678e:	2210      	movs	r2, #16
	key.net_idx = app->net_idx,
   16790:	82bb      	strh	r3, [r7, #20]
	key.updated = app->updated,
   16792:	7923      	ldrb	r3, [r4, #4]
	memcpy(key.val[0], app->keys[0].val, 16);
   16794:	1da1      	adds	r1, r4, #6
   16796:	f107 0017 	add.w	r0, r7, #23
	key.updated = app->updated,
   1679a:	75bb      	strb	r3, [r7, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   1679c:	f013 febd 	bl	2a51a <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   167a0:	2210      	movs	r2, #16
   167a2:	f104 0117 	add.w	r1, r4, #23
   167a6:	f107 0027 	add.w	r0, r7, #39	; 0x27
   167aa:	f013 feb6 	bl	2a51a <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
   167ae:	2223      	movs	r2, #35	; 0x23
   167b0:	4638      	mov	r0, r7
   167b2:	f107 0114 	add.w	r1, r7, #20
   167b6:	f7f5 fc91 	bl	c0dc <settings_save_one>
	if (err) {
   167ba:	b190      	cbz	r0, 167e2 <store_app_key+0x72>
		LOG_ERR("Failed to store AppKey %s value", path);
   167bc:	466c      	mov	r4, sp
   167be:	b088      	sub	sp, #32
   167c0:	466a      	mov	r2, sp
   167c2:	4b0b      	ldr	r3, [pc, #44]	; (167f0 <store_app_key+0x80>)
   167c4:	e9c2 3705 	strd	r3, r7, [r2, #20]
   167c8:	f44f 7300 	mov.w	r3, #512	; 0x200
   167cc:	8393      	strh	r3, [r2, #28]
   167ce:	4b09      	ldr	r3, [pc, #36]	; (167f4 <store_app_key+0x84>)
   167d0:	f842 3f10 	str.w	r3, [r2, #16]!
   167d4:	2300      	movs	r3, #0
   167d6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   167da:	4807      	ldr	r0, [pc, #28]	; (167f8 <store_app_key+0x88>)
   167dc:	f7f4 f9be 	bl	ab5c <z_impl_z_log_msg_static_create>
   167e0:	46a5      	mov	sp, r4
}
   167e2:	3738      	adds	r7, #56	; 0x38
   167e4:	46bd      	mov	sp, r7
   167e6:	bdb0      	pop	{r4, r5, r7, pc}
   167e8:	20008c2c 	.word	0x20008c2c
   167ec:	00032c1c 	.word	0x00032c1c
   167f0:	00032c2e 	.word	0x00032c2e
   167f4:	01000003 	.word	0x01000003
   167f8:	0002fc74 	.word	0x0002fc74

000167fc <clear_app_key>:
{
   167fc:	b5b0      	push	{r4, r5, r7, lr}
   167fe:	b086      	sub	sp, #24
   16800:	af00      	add	r7, sp, #0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   16802:	4603      	mov	r3, r0
{
   16804:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   16806:	2114      	movs	r1, #20
   16808:	4a0d      	ldr	r2, [pc, #52]	; (16840 <clear_app_key+0x44>)
   1680a:	1d38      	adds	r0, r7, #4
   1680c:	f011 ffdf 	bl	287ce <snprintk>
	err = settings_delete(path);
   16810:	1d38      	adds	r0, r7, #4
   16812:	f012 ff9f 	bl	29754 <settings_delete>
	if (err) {
   16816:	b178      	cbz	r0, 16838 <clear_app_key+0x3c>
		LOG_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
   16818:	466d      	mov	r5, sp
   1681a:	b088      	sub	sp, #32
   1681c:	466a      	mov	r2, sp
   1681e:	4b09      	ldr	r3, [pc, #36]	; (16844 <clear_app_key+0x48>)
   16820:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16824:	2303      	movs	r3, #3
   16826:	f842 3f10 	str.w	r3, [r2, #16]!
   1682a:	2300      	movs	r3, #0
   1682c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16830:	4805      	ldr	r0, [pc, #20]	; (16848 <clear_app_key+0x4c>)
   16832:	f7f4 f993 	bl	ab5c <z_impl_z_log_msg_static_create>
   16836:	46ad      	mov	sp, r5
}
   16838:	3718      	adds	r7, #24
   1683a:	46bd      	mov	sp, r7
   1683c:	bdb0      	pop	{r4, r5, r7, pc}
   1683e:	bf00      	nop
   16840:	00032c1c 	.word	0x00032c1c
   16844:	00032c4e 	.word	0x00032c4e
   16848:	0002fc74 	.word	0x0002fc74

0001684c <update_app_key_settings>:
{
   1684c:	b4f0      	push	{r4, r5, r6, r7}
		if (update->key_idx == key_idx) {
   1684e:	4d14      	ldr	r5, [pc, #80]	; (168a0 <update_app_key_settings+0x54>)
	uint8_t clear = store ? 0U : 1U;
   16850:	f081 0601 	eor.w	r6, r1, #1
		if (!update->valid) {
   16854:	786c      	ldrb	r4, [r5, #1]
		if (update->key_idx == key_idx) {
   16856:	882a      	ldrh	r2, [r5, #0]
		if (!update->valid) {
   16858:	f014 0f10 	tst.w	r4, #16
		if (update->key_idx == key_idx) {
   1685c:	f3c2 070b 	ubfx	r7, r2, #0, #12
		if (!update->valid) {
   16860:	d111      	bne.n	16886 <update_app_key_settings+0x3a>
	free_slot->key_idx = app_idx;
   16862:	f3c0 030b 	ubfx	r3, r0, #0, #12
   16866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1686a:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
   1686e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
   16872:	f3c3 030d 	ubfx	r3, r3, #0, #14
   16876:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   1687a:	4313      	orrs	r3, r2
   1687c:	802b      	strh	r3, [r5, #0]
		bt_mesh_settings_store_schedule(
   1687e:	2002      	movs	r0, #2
}
   16880:	bcf0      	pop	{r4, r5, r6, r7}
		bt_mesh_settings_store_schedule(
   16882:	f005 ba7b 	b.w	1bd7c <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
   16886:	4287      	cmp	r7, r0
   16888:	d003      	beq.n	16892 <update_app_key_settings+0x46>
		if (store) {
   1688a:	b931      	cbnz	r1, 1689a <update_app_key_settings+0x4e>
}
   1688c:	bcf0      	pop	{r4, r5, r6, r7}
			clear_app_key(app_idx);
   1688e:	f7ff bfb5 	b.w	167fc <clear_app_key>
		update->clear = clear;
   16892:	f366 1445 	bfi	r4, r6, #5, #1
   16896:	706c      	strb	r4, [r5, #1]
   16898:	e7f1      	b.n	1687e <update_app_key_settings+0x32>
}
   1689a:	bcf0      	pop	{r4, r5, r6, r7}
			store_app_key(app_idx);
   1689c:	f7ff bf68 	b.w	16770 <store_app_key>
   168a0:	2000b13a 	.word	0x2000b13a

000168a4 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   168a4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
   168a8:	b538      	push	{r3, r4, r5, lr}
   168aa:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
   168ac:	d123      	bne.n	168f6 <subnet_evt+0x52>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
   168ae:	bd38      	pop	{r3, r4, r5, pc}
		} else if (evt == BT_MESH_KEY_REVOKED) {
   168b0:	2d04      	cmp	r5, #4
   168b2:	d11a      	bne.n	168ea <subnet_evt+0x46>
	if (!app->updated) {
   168b4:	7923      	ldrb	r3, [r4, #4]
   168b6:	2b00      	cmp	r3, #0
   168b8:	d0f9      	beq.n	168ae <subnet_evt+0xa>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
   168ba:	2211      	movs	r2, #17
   168bc:	f104 0116 	add.w	r1, r4, #22
   168c0:	1d60      	adds	r0, r4, #5
   168c2:	f013 fe2a 	bl	2a51a <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
   168c6:	2211      	movs	r2, #17
   168c8:	2100      	movs	r1, #0
   168ca:	f104 0016 	add.w	r0, r4, #22
   168ce:	f013 fe2f 	bl	2a530 <memset>
	app->updated = false;
   168d2:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
   168d4:	2101      	movs	r1, #1
   168d6:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
   168d8:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
   168da:	f7ff ffb7 	bl	1684c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
   168de:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
   168e0:	4620      	mov	r0, r4
}
   168e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
   168e6:	f7ff bf21 	b.w	1672c <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
   168ea:	2d03      	cmp	r5, #3
   168ec:	d1df      	bne.n	168ae <subnet_evt+0xa>
   168ee:	7923      	ldrb	r3, [r4, #4]
   168f0:	2b00      	cmp	r3, #0
   168f2:	d0dc      	beq.n	168ae <subnet_evt+0xa>
   168f4:	e7f4      	b.n	168e0 <subnet_evt+0x3c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   168f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   168fa:	4c07      	ldr	r4, [pc, #28]	; (16918 <subnet_evt+0x74>)
   168fc:	8862      	ldrh	r2, [r4, #2]
   168fe:	429a      	cmp	r2, r3
   16900:	d0d5      	beq.n	168ae <subnet_evt+0xa>
		if (app->net_idx != sub->net_idx) {
   16902:	8822      	ldrh	r2, [r4, #0]
   16904:	8c03      	ldrh	r3, [r0, #32]
   16906:	429a      	cmp	r2, r3
   16908:	d1d1      	bne.n	168ae <subnet_evt+0xa>
		if (evt == BT_MESH_KEY_DELETED) {
   1690a:	2d01      	cmp	r5, #1
   1690c:	d1d0      	bne.n	168b0 <subnet_evt+0xc>
			app_key_del(app);
   1690e:	4620      	mov	r0, r4
}
   16910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
   16914:	f015 be29 	b.w	2c56a <app_key_del>
   16918:	20008c2c 	.word	0x20008c2c

0001691c <bt_mesh_app_key_add>:
{
   1691c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16920:	4605      	mov	r5, r0
	if (!bt_mesh_subnet_get(net_idx)) {
   16922:	4608      	mov	r0, r1
{
   16924:	460e      	mov	r6, r1
   16926:	4617      	mov	r7, r2
	if (!bt_mesh_subnet_get(net_idx)) {
   16928:	f7ff fcfc 	bl	16324 <bt_mesh_subnet_get>
   1692c:	b378      	cbz	r0, 1698e <bt_mesh_app_key_add+0x72>
		if (apps[i].app_idx == app_idx) {
   1692e:	4c1b      	ldr	r4, [pc, #108]	; (1699c <bt_mesh_app_key_add+0x80>)
   16930:	8863      	ldrh	r3, [r4, #2]
   16932:	429d      	cmp	r5, r3
   16934:	d003      	beq.n	1693e <bt_mesh_app_key_add+0x22>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   16936:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1693a:	4293      	cmp	r3, r2
   1693c:	d125      	bne.n	1698a <bt_mesh_app_key_add+0x6e>
	if (app->app_idx == app_idx) {
   1693e:	8863      	ldrh	r3, [r4, #2]
   16940:	42ab      	cmp	r3, r5
   16942:	d10b      	bne.n	1695c <bt_mesh_app_key_add+0x40>
		if (app->net_idx != net_idx) {
   16944:	8823      	ldrh	r3, [r4, #0]
   16946:	42b3      	cmp	r3, r6
   16948:	d121      	bne.n	1698e <bt_mesh_app_key_add+0x72>
		if (memcmp(key, app->keys[0].val, 16)) {
   1694a:	2210      	movs	r2, #16
   1694c:	4638      	mov	r0, r7
   1694e:	1da1      	adds	r1, r4, #6
   16950:	f013 fdbc 	bl	2a4cc <memcmp>
   16954:	b9e8      	cbnz	r0, 16992 <bt_mesh_app_key_add+0x76>
		return STATUS_SUCCESS;
   16956:	2000      	movs	r0, #0
}
   16958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   1695c:	4638      	mov	r0, r7
   1695e:	1d61      	adds	r1, r4, #5
   16960:	f001 ffba 	bl	188d8 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
   16964:	4680      	mov	r8, r0
   16966:	b9b0      	cbnz	r0, 16996 <bt_mesh_app_key_add+0x7a>
	memcpy(app->keys[0].val, key, 16);
   16968:	2210      	movs	r2, #16
   1696a:	4639      	mov	r1, r7
	app->updated = false;
   1696c:	7120      	strb	r0, [r4, #4]
	app->net_idx = net_idx;
   1696e:	8026      	strh	r6, [r4, #0]
	app->app_idx = app_idx;
   16970:	8065      	strh	r5, [r4, #2]
	memcpy(app->keys[0].val, key, 16);
   16972:	1da0      	adds	r0, r4, #6
   16974:	f013 fdd1 	bl	2a51a <memcpy>
		update_app_key_settings(app->app_idx, true);
   16978:	8860      	ldrh	r0, [r4, #2]
   1697a:	2101      	movs	r1, #1
   1697c:	f7ff ff66 	bl	1684c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
   16980:	4641      	mov	r1, r8
   16982:	4620      	mov	r0, r4
   16984:	f7ff fed2 	bl	1672c <app_key_evt>
	return STATUS_SUCCESS;
   16988:	e7e5      	b.n	16956 <bt_mesh_app_key_add+0x3a>
		return STATUS_INSUFF_RESOURCES;
   1698a:	2005      	movs	r0, #5
   1698c:	e7e4      	b.n	16958 <bt_mesh_app_key_add+0x3c>
		return STATUS_INVALID_NETKEY;
   1698e:	2004      	movs	r0, #4
   16990:	e7e2      	b.n	16958 <bt_mesh_app_key_add+0x3c>
			return STATUS_IDX_ALREADY_STORED;
   16992:	2006      	movs	r0, #6
   16994:	e7e0      	b.n	16958 <bt_mesh_app_key_add+0x3c>
		return STATUS_CANNOT_SET;
   16996:	200f      	movs	r0, #15
   16998:	e7de      	b.n	16958 <bt_mesh_app_key_add+0x3c>
   1699a:	bf00      	nop
   1699c:	20008c2c 	.word	0x20008c2c

000169a0 <bt_mesh_app_key_update>:
{
   169a0:	b570      	push	{r4, r5, r6, lr}
		if (apps[i].app_idx == app_idx) {
   169a2:	4c1e      	ldr	r4, [pc, #120]	; (16a1c <bt_mesh_app_key_update+0x7c>)
{
   169a4:	4615      	mov	r5, r2
		if (apps[i].app_idx == app_idx) {
   169a6:	8863      	ldrh	r3, [r4, #2]
   169a8:	4283      	cmp	r3, r0
   169aa:	d12e      	bne.n	16a0a <bt_mesh_app_key_update+0x6a>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
   169ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   169b0:	4299      	cmp	r1, r3
   169b2:	8820      	ldrh	r0, [r4, #0]
   169b4:	d001      	beq.n	169ba <bt_mesh_app_key_update+0x1a>
   169b6:	4288      	cmp	r0, r1
   169b8:	d129      	bne.n	16a0e <bt_mesh_app_key_update+0x6e>
	sub = bt_mesh_subnet_get(app->net_idx);
   169ba:	f7ff fcb3 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   169be:	b340      	cbz	r0, 16a12 <bt_mesh_app_key_update+0x72>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   169c0:	f890 6022 	ldrb.w	r6, [r0, #34]	; 0x22
   169c4:	2e01      	cmp	r6, #1
   169c6:	d001      	beq.n	169cc <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
   169c8:	200b      	movs	r0, #11
}
   169ca:	bd70      	pop	{r4, r5, r6, pc}
	if (app->updated) {
   169cc:	7923      	ldrb	r3, [r4, #4]
   169ce:	b13b      	cbz	r3, 169e0 <bt_mesh_app_key_update+0x40>
		if (memcmp(app->keys[1].val, key, 16)) {
   169d0:	2210      	movs	r2, #16
   169d2:	4629      	mov	r1, r5
   169d4:	4812      	ldr	r0, [pc, #72]	; (16a20 <bt_mesh_app_key_update+0x80>)
   169d6:	f013 fd79 	bl	2a4cc <memcmp>
   169da:	b9e0      	cbnz	r0, 16a16 <bt_mesh_app_key_update+0x76>
		return STATUS_SUCCESS;
   169dc:	2000      	movs	r0, #0
   169de:	e7f4      	b.n	169ca <bt_mesh_app_key_update+0x2a>
   169e0:	4628      	mov	r0, r5
   169e2:	4910      	ldr	r1, [pc, #64]	; (16a24 <bt_mesh_app_key_update+0x84>)
   169e4:	f001 ff78 	bl	188d8 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
   169e8:	2800      	cmp	r0, #0
   169ea:	d1ed      	bne.n	169c8 <bt_mesh_app_key_update+0x28>
	memcpy(app->keys[1].val, key, 16);
   169ec:	2210      	movs	r2, #16
   169ee:	4629      	mov	r1, r5
	app->updated = true;
   169f0:	7126      	strb	r6, [r4, #4]
	memcpy(app->keys[1].val, key, 16);
   169f2:	480b      	ldr	r0, [pc, #44]	; (16a20 <bt_mesh_app_key_update+0x80>)
   169f4:	f013 fd91 	bl	2a51a <memcpy>
		update_app_key_settings(app->app_idx, true);
   169f8:	4631      	mov	r1, r6
   169fa:	8860      	ldrh	r0, [r4, #2]
   169fc:	f7ff ff26 	bl	1684c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
   16a00:	2102      	movs	r1, #2
   16a02:	4806      	ldr	r0, [pc, #24]	; (16a1c <bt_mesh_app_key_update+0x7c>)
   16a04:	f7ff fe92 	bl	1672c <app_key_evt>
	return STATUS_SUCCESS;
   16a08:	e7e8      	b.n	169dc <bt_mesh_app_key_update+0x3c>
		return STATUS_INVALID_APPKEY;
   16a0a:	2003      	movs	r0, #3
   16a0c:	e7dd      	b.n	169ca <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
   16a0e:	2011      	movs	r0, #17
   16a10:	e7db      	b.n	169ca <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
   16a12:	2004      	movs	r0, #4
   16a14:	e7d9      	b.n	169ca <bt_mesh_app_key_update+0x2a>
			return STATUS_IDX_ALREADY_STORED;
   16a16:	2006      	movs	r0, #6
   16a18:	e7d7      	b.n	169ca <bt_mesh_app_key_update+0x2a>
   16a1a:	bf00      	nop
   16a1c:	20008c2c 	.word	0x20008c2c
   16a20:	20008c43 	.word	0x20008c43
   16a24:	20008c42 	.word	0x20008c42

00016a28 <bt_mesh_app_key_del>:
{
   16a28:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   16a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16a2e:	4299      	cmp	r1, r3
{
   16a30:	4605      	mov	r5, r0
   16a32:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
   16a34:	d009      	beq.n	16a4a <bt_mesh_app_key_del+0x22>
   16a36:	4608      	mov	r0, r1
   16a38:	f7ff fc74 	bl	16324 <bt_mesh_subnet_get>
   16a3c:	b190      	cbz	r0, 16a64 <bt_mesh_app_key_del+0x3c>
		if (apps[i].app_idx == app_idx) {
   16a3e:	4b0a      	ldr	r3, [pc, #40]	; (16a68 <bt_mesh_app_key_del+0x40>)
   16a40:	885a      	ldrh	r2, [r3, #2]
   16a42:	42aa      	cmp	r2, r5
   16a44:	d009      	beq.n	16a5a <bt_mesh_app_key_del+0x32>
		return STATUS_SUCCESS;
   16a46:	2000      	movs	r0, #0
}
   16a48:	bd38      	pop	{r3, r4, r5, pc}
		if (apps[i].app_idx == app_idx) {
   16a4a:	4b07      	ldr	r3, [pc, #28]	; (16a68 <bt_mesh_app_key_del+0x40>)
   16a4c:	885b      	ldrh	r3, [r3, #2]
   16a4e:	4283      	cmp	r3, r0
   16a50:	d1f9      	bne.n	16a46 <bt_mesh_app_key_del+0x1e>
	app_key_del(app);
   16a52:	4805      	ldr	r0, [pc, #20]	; (16a68 <bt_mesh_app_key_del+0x40>)
   16a54:	f015 fd89 	bl	2c56a <app_key_del>
	return STATUS_SUCCESS;
   16a58:	e7f5      	b.n	16a46 <bt_mesh_app_key_del+0x1e>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
   16a5a:	881b      	ldrh	r3, [r3, #0]
   16a5c:	42a3      	cmp	r3, r4
   16a5e:	d0f8      	beq.n	16a52 <bt_mesh_app_key_del+0x2a>
		return STATUS_INVALID_BINDING;
   16a60:	2011      	movs	r0, #17
   16a62:	e7f1      	b.n	16a48 <bt_mesh_app_key_del+0x20>
		return STATUS_INVALID_NETKEY;
   16a64:	2004      	movs	r0, #4
   16a66:	e7ef      	b.n	16a48 <bt_mesh_app_key_del+0x20>
   16a68:	20008c2c 	.word	0x20008c2c

00016a6c <bt_mesh_app_key_set>:
{
   16a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
   16a70:	4c1b      	ldr	r4, [pc, #108]	; (16ae0 <bt_mesh_app_key_set+0x74>)
{
   16a72:	461d      	mov	r5, r3
		if (apps[i].app_idx == app_idx) {
   16a74:	8863      	ldrh	r3, [r4, #2]
{
   16a76:	4607      	mov	r7, r0
		if (apps[i].app_idx == app_idx) {
   16a78:	4298      	cmp	r0, r3
{
   16a7a:	4688      	mov	r8, r1
   16a7c:	4616      	mov	r6, r2
		if (apps[i].app_idx == app_idx) {
   16a7e:	d003      	beq.n	16a88 <bt_mesh_app_key_set+0x1c>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
   16a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16a84:	4293      	cmp	r3, r2
   16a86:	d128      	bne.n	16ada <bt_mesh_app_key_set+0x6e>
	if (app->app_idx == app_idx) {
   16a88:	8863      	ldrh	r3, [r4, #2]
   16a8a:	42bb      	cmp	r3, r7
   16a8c:	d015      	beq.n	16aba <bt_mesh_app_key_set+0x4e>
	memcpy(app->keys[0].val, old_key, 16);
   16a8e:	4631      	mov	r1, r6
   16a90:	2210      	movs	r2, #16
   16a92:	1da0      	adds	r0, r4, #6
   16a94:	f013 fd41 	bl	2a51a <memcpy>
   16a98:	4630      	mov	r0, r6
   16a9a:	1d61      	adds	r1, r4, #5
   16a9c:	f001 ff1c 	bl	188d8 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
   16aa0:	b118      	cbz	r0, 16aaa <bt_mesh_app_key_set+0x3e>
		return -EIO;
   16aa2:	f06f 0004 	mvn.w	r0, #4
}
   16aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
   16aaa:	b945      	cbnz	r5, 16abe <bt_mesh_app_key_set+0x52>
	app->updated = !!new_key;
   16aac:	3d00      	subs	r5, #0
   16aae:	bf18      	it	ne
   16ab0:	2501      	movne	r5, #1
	app->net_idx = net_idx;
   16ab2:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
   16ab6:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
   16ab8:	7125      	strb	r5, [r4, #4]
		return 0;
   16aba:	2000      	movs	r0, #0
   16abc:	e7f3      	b.n	16aa6 <bt_mesh_app_key_set+0x3a>
		memcpy(app->keys[1].val, new_key, 16);
   16abe:	4629      	mov	r1, r5
   16ac0:	2210      	movs	r2, #16
   16ac2:	f104 0017 	add.w	r0, r4, #23
   16ac6:	f013 fd28 	bl	2a51a <memcpy>
   16aca:	4628      	mov	r0, r5
   16acc:	f104 0116 	add.w	r1, r4, #22
   16ad0:	f001 ff02 	bl	188d8 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d0e9      	beq.n	16aac <bt_mesh_app_key_set+0x40>
   16ad8:	e7e3      	b.n	16aa2 <bt_mesh_app_key_set+0x36>
		return -ENOMEM;
   16ada:	f06f 000b 	mvn.w	r0, #11
   16ade:	e7e2      	b.n	16aa6 <bt_mesh_app_key_set+0x3a>
   16ae0:	20008c2c 	.word	0x20008c2c

00016ae4 <pre_app_key_set>:
	LOG_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);
   16ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ae8:	4688      	mov	r8, r1
   16aea:	4616      	mov	r6, r2
   16aec:	461f      	mov	r7, r3
   16aee:	b090      	sub	sp, #64	; 0x40
   16af0:	4b23      	ldr	r3, [pc, #140]	; (16b80 <pre_app_key_set+0x9c>)
   16af2:	e8d3 4faf 	lda	r4, [r3]
   16af6:	f014 0401 	ands.w	r4, r4, #1
   16afa:	d00d      	beq.n	16b18 <pre_app_key_set+0x34>
	if (!name) {
   16afc:	b980      	cbnz	r0, 16b20 <pre_app_key_set+0x3c>
		LOG_ERR("Insufficient number of arguments");
   16afe:	4b21      	ldr	r3, [pc, #132]	; (16b84 <pre_app_key_set+0xa0>)
   16b00:	930b      	str	r3, [sp, #44]	; 0x2c
   16b02:	2302      	movs	r3, #2
   16b04:	930a      	str	r3, [sp, #40]	; 0x28
		return -ENOENT;
   16b06:	f06f 0401 	mvn.w	r4, #1
   16b0a:	4603      	mov	r3, r0
   16b0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b10:	481d      	ldr	r0, [pc, #116]	; (16b88 <pre_app_key_set+0xa4>)
   16b12:	aa0a      	add	r2, sp, #40	; 0x28
   16b14:	f7f4 f822 	bl	ab5c <z_impl_z_log_msg_static_create>
BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);
   16b18:	4620      	mov	r0, r4
   16b1a:	b010      	add	sp, #64	; 0x40
   16b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	app_idx = strtol(name, NULL, 16);
   16b20:	2210      	movs	r2, #16
   16b22:	2100      	movs	r1, #0
   16b24:	f013 fb99 	bl	2a25a <strtol>
   16b28:	4604      	mov	r4, r0
	if (!len_rd) {
   16b2a:	f1b8 0f00 	cmp.w	r8, #0
   16b2e:	d015      	beq.n	16b5c <pre_app_key_set+0x78>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
   16b30:	2323      	movs	r3, #35	; 0x23
   16b32:	4639      	mov	r1, r7
   16b34:	4630      	mov	r0, r6
   16b36:	aa06      	add	r2, sp, #24
   16b38:	f005 f8e4 	bl	1bd04 <bt_mesh_settings_set>
	if (err < 0) {
   16b3c:	2800      	cmp	r0, #0
   16b3e:	db1b      	blt.n	16b78 <pre_app_key_set+0x94>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
   16b40:	f89d 301a 	ldrb.w	r3, [sp, #26]
   16b44:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   16b48:	b10b      	cbz	r3, 16b4e <pre_app_key_set+0x6a>
   16b4a:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
   16b4e:	b2a0      	uxth	r0, r4
   16b50:	f10d 021b 	add.w	r2, sp, #27
   16b54:	f7ff ff8a 	bl	16a6c <bt_mesh_app_key_set>
	if (err) {
   16b58:	4604      	mov	r4, r0
   16b5a:	b908      	cbnz	r0, 16b60 <pre_app_key_set+0x7c>
		return 0;
   16b5c:	2400      	movs	r4, #0
   16b5e:	e7db      	b.n	16b18 <pre_app_key_set+0x34>
		LOG_ERR("Failed to set \'app-key\'");
   16b60:	4b0a      	ldr	r3, [pc, #40]	; (16b8c <pre_app_key_set+0xa8>)
   16b62:	9305      	str	r3, [sp, #20]
   16b64:	2302      	movs	r3, #2
   16b66:	9304      	str	r3, [sp, #16]
   16b68:	2300      	movs	r3, #0
   16b6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b6e:	4806      	ldr	r0, [pc, #24]	; (16b88 <pre_app_key_set+0xa4>)
   16b70:	aa04      	add	r2, sp, #16
   16b72:	f7f3 fff3 	bl	ab5c <z_impl_z_log_msg_static_create>
		return err;
   16b76:	e7cf      	b.n	16b18 <pre_app_key_set+0x34>
		return -EINVAL;
   16b78:	f06f 0415 	mvn.w	r4, #21
BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);
   16b7c:	e7cc      	b.n	16b18 <pre_app_key_set+0x34>
   16b7e:	bf00      	nop
   16b80:	20009ed0 	.word	0x20009ed0
   16b84:	00031b3e 	.word	0x00031b3e
   16b88:	0002fc74 	.word	0x0002fc74
   16b8c:	00032c71 	.word	0x00032c71

00016b90 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
   16b90:	4b02      	ldr	r3, [pc, #8]	; (16b9c <bt_mesh_app_key_exists+0xc>)
   16b92:	885b      	ldrh	r3, [r3, #2]
}
   16b94:	1a1b      	subs	r3, r3, r0
   16b96:	4258      	negs	r0, r3
   16b98:	4158      	adcs	r0, r3
   16b9a:	4770      	bx	lr
   16b9c:	20008c2c 	.word	0x20008c2c

00016ba0 <bt_mesh_app_keys_get>:
{
   16ba0:	b570      	push	{r4, r5, r6, lr}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16ba2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   16ba6:	4d09      	ldr	r5, [pc, #36]	; (16bcc <bt_mesh_app_keys_get+0x2c>)
   16ba8:	886c      	ldrh	r4, [r5, #2]
   16baa:	42b4      	cmp	r4, r6
   16bac:	d009      	beq.n	16bc2 <bt_mesh_app_keys_get+0x22>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
   16bae:	42b0      	cmp	r0, r6
   16bb0:	d002      	beq.n	16bb8 <bt_mesh_app_keys_get+0x18>
   16bb2:	882d      	ldrh	r5, [r5, #0]
   16bb4:	4285      	cmp	r5, r0
   16bb6:	d104      	bne.n	16bc2 <bt_mesh_app_keys_get+0x22>
		if (skip) {
   16bb8:	b91b      	cbnz	r3, 16bc2 <bt_mesh_app_keys_get+0x22>
		if (count >= max) {
   16bba:	b122      	cbz	r2, 16bc6 <bt_mesh_app_keys_get+0x26>
		app_idxs[count++] = app->app_idx;
   16bbc:	2001      	movs	r0, #1
   16bbe:	800c      	strh	r4, [r1, #0]
}
   16bc0:	bd70      	pop	{r4, r5, r6, pc}
	size_t count = 0;
   16bc2:	2000      	movs	r0, #0
	return count;
   16bc4:	e7fc      	b.n	16bc0 <bt_mesh_app_keys_get+0x20>
			return -ENOMEM;
   16bc6:	f06f 000b 	mvn.w	r0, #11
   16bca:	e7f9      	b.n	16bc0 <bt_mesh_app_keys_get+0x20>
   16bcc:	20008c2c 	.word	0x20008c2c

00016bd0 <bt_mesh_keys_resolve>:
{
   16bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bd2:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   16bd4:	8842      	ldrh	r2, [r0, #2]
{
   16bd6:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   16bd8:	1cd3      	adds	r3, r2, #3
   16bda:	b29b      	uxth	r3, r3
   16bdc:	2b01      	cmp	r3, #1
{
   16bde:	4604      	mov	r4, r0
   16be0:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
   16be2:	d917      	bls.n	16c14 <bt_mesh_keys_resolve+0x44>
		if (apps[i].app_idx == app_idx) {
   16be4:	4c19      	ldr	r4, [pc, #100]	; (16c4c <bt_mesh_keys_resolve+0x7c>)
   16be6:	8863      	ldrh	r3, [r4, #2]
   16be8:	4293      	cmp	r3, r2
   16bea:	d002      	beq.n	16bf2 <bt_mesh_keys_resolve+0x22>
			return -EINVAL;
   16bec:	f06f 0015 	mvn.w	r0, #21
}
   16bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*sub = bt_mesh_subnet_get(app->net_idx);
   16bf2:	8820      	ldrh	r0, [r4, #0]
   16bf4:	f7ff fb96 	bl	16324 <bt_mesh_subnet_get>
   16bf8:	6038      	str	r0, [r7, #0]
	if (!*sub) {
   16bfa:	2800      	cmp	r0, #0
   16bfc:	d0f6      	beq.n	16bec <bt_mesh_keys_resolve+0x1c>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
   16bfe:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   16c02:	2b02      	cmp	r3, #2
   16c04:	d11d      	bne.n	16c42 <bt_mesh_keys_resolve+0x72>
   16c06:	7923      	ldrb	r3, [r4, #4]
   16c08:	b1db      	cbz	r3, 16c42 <bt_mesh_keys_resolve+0x72>
		*aid = app->keys[1].id;
   16c0a:	7da3      	ldrb	r3, [r4, #22]
		*app_key = app->keys[1].val;
   16c0c:	3417      	adds	r4, #23
		*aid = app->keys[1].id;
   16c0e:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
   16c10:	602c      	str	r4, [r5, #0]
   16c12:	e00e      	b.n	16c32 <bt_mesh_keys_resolve+0x62>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
   16c14:	8800      	ldrh	r0, [r0, #0]
   16c16:	f7ff fb85 	bl	16324 <bt_mesh_subnet_get>
   16c1a:	6038      	str	r0, [r7, #0]
		if (!*sub) {
   16c1c:	2800      	cmp	r0, #0
   16c1e:	d0e5      	beq.n	16bec <bt_mesh_keys_resolve+0x1c>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   16c20:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   16c24:	8862      	ldrh	r2, [r4, #2]
   16c26:	429a      	cmp	r2, r3
   16c28:	d005      	beq.n	16c36 <bt_mesh_keys_resolve+0x66>
			*app_key = bt_mesh.dev_key;
   16c2a:	4b09      	ldr	r3, [pc, #36]	; (16c50 <bt_mesh_keys_resolve+0x80>)
   16c2c:	602b      	str	r3, [r5, #0]
		*aid = 0;
   16c2e:	2300      	movs	r3, #0
   16c30:	7033      	strb	r3, [r6, #0]
	return 0;
   16c32:	2000      	movs	r0, #0
   16c34:	e7dc      	b.n	16bf0 <bt_mesh_keys_resolve+0x20>
		    !bt_mesh_has_addr(ctx->addr)) {
   16c36:	88a0      	ldrh	r0, [r4, #4]
   16c38:	f002 fb86 	bl	19348 <bt_mesh_has_addr>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
   16c3c:	2800      	cmp	r0, #0
   16c3e:	d1f4      	bne.n	16c2a <bt_mesh_keys_resolve+0x5a>
   16c40:	e7d4      	b.n	16bec <bt_mesh_keys_resolve+0x1c>
		*aid = app->keys[0].id;
   16c42:	7963      	ldrb	r3, [r4, #5]
   16c44:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
   16c46:	4b03      	ldr	r3, [pc, #12]	; (16c54 <bt_mesh_keys_resolve+0x84>)
   16c48:	602b      	str	r3, [r5, #0]
   16c4a:	e7f2      	b.n	16c32 <bt_mesh_keys_resolve+0x62>
   16c4c:	20008c2c 	.word	0x20008c2c
   16c50:	2000a0f8 	.word	0x2000a0f8
   16c54:	20008c32 	.word	0x20008c32

00016c58 <bt_mesh_app_key_find>:
{
   16c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c5a:	4604      	mov	r4, r0
   16c5c:	4610      	mov	r0, r2
   16c5e:	9a06      	ldr	r2, [sp, #24]
	if (dev_key) {
   16c60:	b15c      	cbz	r4, 16c7a <bt_mesh_app_key_find+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
   16c62:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   16c66:	2900      	cmp	r1, #0
   16c68:	dd02      	ble.n	16c70 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
   16c6a:	4914      	ldr	r1, [pc, #80]	; (16cbc <bt_mesh_app_key_find+0x64>)
   16c6c:	4798      	blx	r3
			if (!err) {
   16c6e:	b310      	cbz	r0, 16cb6 <bt_mesh_app_key_find+0x5e>
	return BT_MESH_KEY_UNUSED;
   16c70:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   16c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cred = &app->keys[0];
   16c76:	1d65      	adds	r5, r4, #5
   16c78:	e014      	b.n	16ca4 <bt_mesh_app_key_find+0x4c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
   16c7a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   16c7e:	4c10      	ldr	r4, [pc, #64]	; (16cc0 <bt_mesh_app_key_find+0x68>)
   16c80:	8866      	ldrh	r6, [r4, #2]
   16c82:	42ae      	cmp	r6, r5
   16c84:	d0f4      	beq.n	16c70 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
   16c86:	6805      	ldr	r5, [r0, #0]
   16c88:	8826      	ldrh	r6, [r4, #0]
   16c8a:	8c2d      	ldrh	r5, [r5, #32]
   16c8c:	42ae      	cmp	r6, r5
   16c8e:	d1ef      	bne.n	16c70 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
   16c90:	7d05      	ldrb	r5, [r0, #20]
   16c92:	07ad      	lsls	r5, r5, #30
   16c94:	d5ef      	bpl.n	16c76 <bt_mesh_app_key_find+0x1e>
   16c96:	7927      	ldrb	r7, [r4, #4]
			cred = &app->keys[1];
   16c98:	1d65      	adds	r5, r4, #5
   16c9a:	f104 0616 	add.w	r6, r4, #22
   16c9e:	2f00      	cmp	r7, #0
   16ca0:	bf18      	it	ne
   16ca2:	4635      	movne	r5, r6
		if (cred->id != aid) {
   16ca4:	782e      	ldrb	r6, [r5, #0]
   16ca6:	428e      	cmp	r6, r1
   16ca8:	d1e2      	bne.n	16c70 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
   16caa:	1c69      	adds	r1, r5, #1
   16cac:	4798      	blx	r3
		if (err) {
   16cae:	2800      	cmp	r0, #0
   16cb0:	d1de      	bne.n	16c70 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
   16cb2:	8860      	ldrh	r0, [r4, #2]
   16cb4:	e7de      	b.n	16c74 <bt_mesh_app_key_find+0x1c>
				return BT_MESH_KEY_DEV_LOCAL;
   16cb6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   16cba:	e7db      	b.n	16c74 <bt_mesh_app_key_find+0x1c>
   16cbc:	2000a0f8 	.word	0x2000a0f8
   16cc0:	20008c2c 	.word	0x20008c2c

00016cc4 <bt_mesh_app_keys_reset>:
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
   16cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16cc8:	4803      	ldr	r0, [pc, #12]	; (16cd8 <bt_mesh_app_keys_reset+0x14>)
   16cca:	8842      	ldrh	r2, [r0, #2]
   16ccc:	429a      	cmp	r2, r3
   16cce:	d001      	beq.n	16cd4 <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
   16cd0:	f015 bc4b 	b.w	2c56a <app_key_del>
}
   16cd4:	4770      	bx	lr
   16cd6:	bf00      	nop
   16cd8:	20008c2c 	.word	0x20008c2c

00016cdc <bt_mesh_app_key_pending_store>:
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
   16cdc:	4a08      	ldr	r2, [pc, #32]	; (16d00 <bt_mesh_app_key_pending_store+0x24>)
   16cde:	7853      	ldrb	r3, [r2, #1]
   16ce0:	06d9      	lsls	r1, r3, #27
   16ce2:	d50c      	bpl.n	16cfe <bt_mesh_app_key_pending_store+0x22>
			continue;
		}

		update->valid = 0U;
   16ce4:	f36f 1304 	bfc	r3, #4, #1
   16ce8:	7053      	strb	r3, [r2, #1]

		if (update->clear) {
			clear_app_key(update->key_idx);
   16cea:	8810      	ldrh	r0, [r2, #0]
		if (update->clear) {
   16cec:	b2db      	uxtb	r3, r3
   16cee:	069b      	lsls	r3, r3, #26
			clear_app_key(update->key_idx);
   16cf0:	f3c0 000b 	ubfx	r0, r0, #0, #12
		if (update->clear) {
   16cf4:	d501      	bpl.n	16cfa <bt_mesh_app_key_pending_store+0x1e>
			clear_app_key(update->key_idx);
   16cf6:	f7ff bd81 	b.w	167fc <clear_app_key>
		} else {
			store_app_key(update->key_idx);
   16cfa:	f7ff bd39 	b.w	16770 <store_app_key>
		}
	}
}
   16cfe:	4770      	bx	lr
   16d00:	2000b13a 	.word	0x2000b13a

00016d04 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
   16d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d08:	4604      	mov	r4, r0
	LOG_DBG("rx %p", rx);

	/* If this fails, the handler will exit early on the next execution, as
	 * it checks rx->in_use.
	 */
	(void)k_work_cancel_delayable(&rx->ack);
   16d0a:	3030      	adds	r0, #48	; 0x30
{
   16d0c:	460d      	mov	r5, r1
	(void)k_work_cancel_delayable(&rx->ack);
   16d0e:	f00f fcb9 	bl	26684 <k_work_cancel_delayable>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   16d12:	f994 301f 	ldrsb.w	r3, [r4, #31]
   16d16:	2b00      	cmp	r3, #0
   16d18:	da10      	bge.n	16d3c <seg_rx_reset+0x38>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
   16d1a:	2301      	movs	r3, #1
   16d1c:	7fe2      	ldrb	r2, [r4, #31]
   16d1e:	f002 021f 	and.w	r2, r2, #31
   16d22:	3201      	adds	r2, #1
   16d24:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   16d26:	6a62      	ldr	r2, [r4, #36]	; 0x24
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
   16d28:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
   16d2a:	429a      	cmp	r2, r3
   16d2c:	d006      	beq.n	16d3c <seg_rx_reset+0x38>
		LOG_WRN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
   16d2e:	8b62      	ldrh	r2, [r4, #26]
   16d30:	8b21      	ldrh	r1, [r4, #24]
   16d32:	6820      	ldr	r0, [r4, #0]
   16d34:	f104 0310 	add.w	r3, r4, #16
   16d38:	f006 fafc 	bl	1d334 <bt_mesh_friend_clear_incomplete>
{
   16d3c:	2600      	movs	r6, #0
   16d3e:	4627      	mov	r7, r4
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
		rx->seg[i] = NULL;
   16d40:	46b1      	mov	r9, r6
		k_mem_slab_free(&segs, &rx->seg[i]);
   16d42:	f8df 803c 	ldr.w	r8, [pc, #60]	; 16d80 <seg_rx_reset+0x7c>
		if (!rx->seg[i]) {
   16d46:	f857 3f04 	ldr.w	r3, [r7, #4]!
   16d4a:	b12b      	cbz	r3, 16d58 <seg_rx_reset+0x54>
		k_mem_slab_free(&segs, &rx->seg[i]);
   16d4c:	4639      	mov	r1, r7
   16d4e:	4640      	mov	r0, r8
   16d50:	f00e fc1c 	bl	2558c <k_mem_slab_free>
		rx->seg[i] = NULL;
   16d54:	f8c7 9000 	str.w	r9, [r7]
	for (i = 0; i <= rx->seg_n; i++) {
   16d58:	7fe3      	ldrb	r3, [r4, #31]
   16d5a:	3601      	adds	r6, #1
   16d5c:	f003 021f 	and.w	r2, r3, #31
   16d60:	4296      	cmp	r6, r2
   16d62:	ddf0      	ble.n	16d46 <seg_rx_reset+0x42>
	}

	rx->in_use = 0U;
   16d64:	f36f 1386 	bfc	r3, #6, #1
   16d68:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
   16d6a:	b135      	cbz	r5, 16d7a <seg_rx_reset+0x76>
		rx->seq_auth = 0U;
   16d6c:	2000      	movs	r0, #0
   16d6e:	2100      	movs	r1, #0
		rx->sub = NULL;
   16d70:	2300      	movs	r3, #0
		rx->seq_auth = 0U;
   16d72:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
   16d76:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
   16d78:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
   16d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16d7e:	bf00      	nop
   16d80:	20008e0c 	.word	0x20008e0c

00016d84 <seg_tx_reset>:
{
   16d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d88:	4604      	mov	r4, r0
	tx->cb = NULL;
   16d8a:	2500      	movs	r5, #0
	(void)k_work_cancel_delayable(&tx->retransmit);
   16d8c:	3050      	adds	r0, #80	; 0x50
   16d8e:	f00f fc79 	bl	26684 <k_work_cancel_delayable>
	tx->seq_auth = 0U;
   16d92:	2000      	movs	r0, #0
   16d94:	2100      	movs	r1, #0
   16d96:	4626      	mov	r6, r4
	tx->seg[seg_idx] = NULL;
   16d98:	46a8      	mov	r8, r5
	tx->blocked = false;
   16d9a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
	tx->cb_data = NULL;
   16d9e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
	tx->seq_auth = 0U;
   16da2:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	tx->blocked = false;
   16da6:	f365 0200 	bfi	r2, r5, #0, #1
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16daa:	4f1c      	ldr	r7, [pc, #112]	; (16e1c <seg_tx_reset+0x98>)
	tx->sub = NULL;
   16dac:	6025      	str	r5, [r4, #0]
	tx->src = BT_MESH_ADDR_UNASSIGNED;
   16dae:	63a5      	str	r5, [r4, #56]	; 0x38
	tx->ack_src = BT_MESH_ADDR_UNASSIGNED;
   16db0:	87a5      	strh	r5, [r4, #60]	; 0x3c
	tx->blocked = false;
   16db2:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   16db6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   16dba:	b193      	cbz	r3, 16de2 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
   16dbc:	f856 3f04 	ldr.w	r3, [r6, #4]!
   16dc0:	b153      	cbz	r3, 16dd8 <seg_tx_reset+0x54>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   16dc2:	4631      	mov	r1, r6
   16dc4:	4638      	mov	r0, r7
   16dc6:	f00e fbe1 	bl	2558c <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
   16dca:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
   16dce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   16dd2:	3b01      	subs	r3, #1
   16dd4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
   16dd8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   16ddc:	3501      	adds	r5, #1
   16dde:	42ab      	cmp	r3, r5
   16de0:	dae9      	bge.n	16db6 <seg_tx_reset+0x32>
	tx->nack_count = 0;
   16de2:	2100      	movs	r1, #0
	tx->seg_send_started = 0;
   16de4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	tx->nack_count = 0;
   16de8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
	tx->seg_send_started = 0;
   16dec:	f361 1345 	bfi	r3, r1, #5, #1
   16df0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16df4:	4b0a      	ldr	r3, [pc, #40]	; (16e20 <seg_tx_reset+0x9c>)
   16df6:	e8d3 2fef 	ldaex	r2, [r3]
   16dfa:	f022 0040 	bic.w	r0, r2, #64	; 0x40
   16dfe:	e8c3 0fe4 	stlex	r4, r0, [r3]
   16e02:	2c00      	cmp	r4, #0
   16e04:	d1f7      	bne.n	16df6 <seg_tx_reset+0x72>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
   16e06:	0652      	lsls	r2, r2, #25
   16e08:	d505      	bpl.n	16e16 <seg_tx_reset+0x92>
}
   16e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
   16e0e:	f853 0c08 	ldr.w	r0, [r3, #-8]
   16e12:	f7fe bcb1 	b.w	15778 <bt_mesh_net_iv_update>
}
   16e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e1a:	bf00      	nop
   16e1c:	20008e0c 	.word	0x20008e0c
   16e20:	20009ed0 	.word	0x20009ed0

00016e24 <seg_tx_complete>:
{
   16e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e28:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
   16e2a:	e9d0 6712 	ldrd	r6, r7, [r0, #72]	; 0x48
		    seg_tx[i].blocked &&
   16e2e:	4815      	ldr	r0, [pc, #84]	; (16e84 <seg_tx_complete+0x60>)
{
   16e30:	460d      	mov	r5, r1
		    seg_tx[i].blocked &&
   16e32:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
		if (&seg_tx[i] != tx &&
   16e36:	4284      	cmp	r4, r0
		    seg_tx_blocks(tx, seg_tx[i].src, seg_tx[i].dst) &&
   16e38:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   16e3a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
		    seg_tx[i].blocked &&
   16e3c:	f003 0c01 	and.w	ip, r3, #1
		if (&seg_tx[i] != tx &&
   16e40:	d012      	beq.n	16e68 <seg_tx_complete+0x44>
   16e42:	f1bc 0f00 	cmp.w	ip, #0
   16e46:	d00f      	beq.n	16e68 <seg_tx_complete+0x44>
	return (tx->src == src) && (tx->dst == dst);
   16e48:	f8b4 c038 	ldrh.w	ip, [r4, #56]	; 0x38
   16e4c:	458c      	cmp	ip, r1
   16e4e:	d10b      	bne.n	16e68 <seg_tx_complete+0x44>
   16e50:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   16e52:	4291      	cmp	r1, r2
   16e54:	d108      	bne.n	16e68 <seg_tx_complete+0x44>
		blocked->blocked = false;
   16e56:	f36f 0300 	bfc	r3, #0, #1
   16e5a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
		k_work_reschedule(&blocked->retransmit, K_NO_WAIT);
   16e5e:	2200      	movs	r2, #0
   16e60:	2300      	movs	r3, #0
   16e62:	3050      	adds	r0, #80	; 0x50
   16e64:	f00f fc08 	bl	26678 <k_work_reschedule>
	seg_tx_reset(tx);
   16e68:	4620      	mov	r0, r4
   16e6a:	f7ff ff8b 	bl	16d84 <seg_tx_reset>
	if (cb && cb->end) {
   16e6e:	b136      	cbz	r6, 16e7e <seg_tx_complete+0x5a>
   16e70:	6873      	ldr	r3, [r6, #4]
   16e72:	b123      	cbz	r3, 16e7e <seg_tx_complete+0x5a>
		cb->end(err, cb_data);
   16e74:	4639      	mov	r1, r7
   16e76:	4628      	mov	r0, r5
}
   16e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
   16e7c:	4718      	bx	r3
}
   16e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e82:	bf00      	nop
   16e84:	2000a168 	.word	0x2000a168

00016e88 <seg_tx_send_unacked>:
{
   16e88:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   16e8a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
   16e8e:	4604      	mov	r4, r0
   16e90:	b08e      	sub	sp, #56	; 0x38
	if (!tx->nack_count) {
   16e92:	2b00      	cmp	r3, #0
   16e94:	d06a      	beq.n	16f6c <seg_tx_send_unacked+0xe4>
	struct bt_mesh_msg_ctx ctx = {
   16e96:	2300      	movs	r3, #0
		.net_idx = tx->sub->net_idx,
   16e98:	6802      	ldr	r2, [r0, #0]
	struct bt_mesh_msg_ctx ctx = {
   16e9a:	f8cd 300e 	str.w	r3, [sp, #14]
   16e9e:	8c13      	ldrh	r3, [r2, #32]
	struct bt_mesh_net_tx net_tx = {
   16ea0:	9205      	str	r2, [sp, #20]
	struct bt_mesh_msg_ctx ctx = {
   16ea2:	f8ad 3008 	strh.w	r3, [sp, #8]
   16ea6:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
	struct bt_mesh_net_tx net_tx = {
   16eaa:	aa02      	add	r2, sp, #8
	struct bt_mesh_msg_ctx ctx = {
   16eac:	f343 0140 	sbfx	r1, r3, #1, #1
   16eb0:	f8ad 100a 	strh.w	r1, [sp, #10]
   16eb4:	2101      	movs	r1, #1
   16eb6:	f88d 1012 	strb.w	r1, [sp, #18]
   16eba:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
	struct bt_mesh_net_tx net_tx = {
   16ebe:	9206      	str	r2, [sp, #24]
	struct bt_mesh_msg_ctx ctx = {
   16ec0:	f88d 1013 	strb.w	r1, [sp, #19]
	struct bt_mesh_net_tx net_tx = {
   16ec4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   16ec6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
		.friend_cred = tx->friend_cred,
   16eca:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx net_tx = {
   16ece:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		.addr = tx->dst,
   16ed2:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
	struct bt_mesh_net_tx net_tx = {
   16ed4:	f8ad 201c 	strh.w	r2, [sp, #28]
	if (!tx->attempts) {
   16ed8:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
		.xmit = tx->xmit,
   16edc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
	struct bt_mesh_msg_ctx ctx = {
   16ee0:	f8ad 500c 	strh.w	r5, [sp, #12]
	struct bt_mesh_net_tx net_tx = {
   16ee4:	f88d 201e 	strb.w	r2, [sp, #30]
   16ee8:	f88d 301f 	strb.w	r3, [sp, #31]
	if (!tx->attempts) {
   16eec:	b361      	cbz	r1, 16f48 <seg_tx_send_unacked+0xc0>
	while (tx->seg_o <= tx->seg_n) {
   16eee:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
   16ef2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   16ef6:	4283      	cmp	r3, r0
   16ef8:	d93a      	bls.n	16f70 <seg_tx_send_unacked+0xe8>
	tx->seg_o = 0U;
   16efa:	2300      	movs	r3, #0
	tx->attempts--;
   16efc:	3901      	subs	r1, #1
	tx->seg_o = 0U;
   16efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	tx->attempts--;
   16f02:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
	k_work_reschedule(&tx->retransmit, K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   16f06:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   16f0a:	2032      	movs	r0, #50	; 0x32
   16f0c:	2b00      	cmp	r3, #0
   16f0e:	bfc8      	it	gt
   16f10:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   16f14:	f04f 0100 	mov.w	r1, #0
   16f18:	bfc8      	it	gt
   16f1a:	f894 2046 	ldrbgt.w	r2, [r4, #70]	; 0x46
   16f1e:	ea4f 31c1 	mov.w	r1, r1, lsl #15
   16f22:	bfc8      	it	gt
   16f24:	fb00 3002 	mlagt	r0, r0, r2, r3
   16f28:	03c0      	lsls	r0, r0, #15
   16f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16f2e:	2300      	movs	r3, #0
   16f30:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   16f34:	f7f1 f90e 	bl	8154 <__aeabi_uldivmod>
   16f38:	f104 0550 	add.w	r5, r4, #80	; 0x50
   16f3c:	4602      	mov	r2, r0
   16f3e:	460b      	mov	r3, r1
   16f40:	4628      	mov	r0, r5
   16f42:	f00f fb99 	bl	26678 <k_work_reschedule>
   16f46:	e011      	b.n	16f6c <seg_tx_send_unacked+0xe4>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   16f48:	b22d      	sxth	r5, r5
   16f4a:	2d00      	cmp	r5, #0
   16f4c:	dd0c      	ble.n	16f68 <seg_tx_send_unacked+0xe0>
			LOG_ERR("Ran out of retransmit attempts");
   16f4e:	4b1f      	ldr	r3, [pc, #124]	; (16fcc <seg_tx_send_unacked+0x144>)
   16f50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f54:	930d      	str	r3, [sp, #52]	; 0x34
   16f56:	2302      	movs	r3, #2
   16f58:	481d      	ldr	r0, [pc, #116]	; (16fd0 <seg_tx_send_unacked+0x148>)
   16f5a:	aa0c      	add	r2, sp, #48	; 0x30
   16f5c:	930c      	str	r3, [sp, #48]	; 0x30
   16f5e:	f015 fbd2 	bl	2c706 <z_log_msg_static_create.constprop.0>
			seg_tx_complete(tx, -ETIMEDOUT);
   16f62:	f06f 0173 	mvn.w	r1, #115	; 0x73
   16f66:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
   16f68:	f7ff ff5c 	bl	16e24 <seg_tx_complete>
}
   16f6c:	b00e      	add	sp, #56	; 0x38
   16f6e:	bd70      	pop	{r4, r5, r6, pc}
		if (!tx->seg[tx->seg_o]) {
   16f70:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   16f74:	686d      	ldr	r5, [r5, #4]
   16f76:	b91d      	cbnz	r5, 16f80 <seg_tx_send_unacked+0xf8>
			tx->seg_o++;
   16f78:	3301      	adds	r3, #1
   16f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			continue;
   16f7e:	e7b8      	b.n	16ef2 <seg_tx_send_unacked+0x6a>
					 tx->xmit, BUF_TIMEOUT);
   16f80:	2000      	movs	r0, #0
   16f82:	2100      	movs	r1, #0
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   16f84:	e9cd 0100 	strd	r0, r1, [sp]
   16f88:	2101      	movs	r1, #1
   16f8a:	4608      	mov	r0, r1
   16f8c:	f7fd fef4 	bl	14d78 <bt_mesh_adv_create>
		if (!seg) {
   16f90:	4605      	mov	r5, r0
   16f92:	2800      	cmp	r0, #0
   16f94:	d0b7      	beq.n	16f06 <seg_tx_send_unacked+0x7e>
	net_buf_simple_reserve(&buf->b, reserve);
   16f96:	f100 060c 	add.w	r6, r0, #12
   16f9a:	2109      	movs	r1, #9
   16f9c:	4630      	mov	r0, r6
   16f9e:	f008 ffc5 	bl	1ff2c <net_buf_simple_reserve>
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
   16fa2:	4632      	mov	r2, r6
   16fa4:	4620      	mov	r0, r4
   16fa6:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   16faa:	f015 fb05 	bl	2c5b8 <seg_tx_buf_build>
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
   16fae:	4623      	mov	r3, r4
   16fb0:	4629      	mov	r1, r5
   16fb2:	4a08      	ldr	r2, [pc, #32]	; (16fd4 <seg_tx_send_unacked+0x14c>)
   16fb4:	a805      	add	r0, sp, #20
   16fb6:	f7fe fd57 	bl	15a68 <bt_mesh_net_send>
		if (err) {
   16fba:	2800      	cmp	r0, #0
   16fbc:	d1a3      	bne.n	16f06 <seg_tx_send_unacked+0x7e>
		tx->seg_o++;
   16fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   16fc2:	3301      	adds	r3, #1
   16fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		return;
   16fc8:	e7d0      	b.n	16f6c <seg_tx_send_unacked+0xe4>
   16fca:	bf00      	nop
   16fcc:	00032ca9 	.word	0x00032ca9
   16fd0:	0002fd24 	.word	0x0002fd24
   16fd4:	000305cc 	.word	0x000305cc

00016fd8 <ctl_recv>:
{
   16fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16fdc:	460d      	mov	r5, r1
	switch (ctl_op) {
   16fde:	f015 057f 	ands.w	r5, r5, #127	; 0x7f
{
   16fe2:	4604      	mov	r4, r0
   16fe4:	4611      	mov	r1, r2
   16fe6:	4698      	mov	r8, r3
   16fe8:	b089      	sub	sp, #36	; 0x24
	switch (ctl_op) {
   16fea:	d00f      	beq.n	1700c <ctl_recv+0x34>
   16fec:	2d0a      	cmp	r5, #10
   16fee:	f000 80ae 	beq.w	1714e <ctl_recv+0x176>
	if (!rx->local_match) {
   16ff2:	7d03      	ldrb	r3, [r0, #20]
   16ff4:	065b      	lsls	r3, r3, #25
   16ff6:	d531      	bpl.n	1705c <ctl_recv+0x84>
		switch (ctl_op) {
   16ff8:	3d01      	subs	r5, #1
   16ffa:	2d07      	cmp	r5, #7
   16ffc:	f200 80ca 	bhi.w	17194 <ctl_recv+0x1bc>
   17000:	e8df f005 	tbb	[pc, r5]
   17004:	c8afc8aa 	.word	0xc8afc8aa
   17008:	c3beb9b4 	.word	0xc3beb9b4
	if (buf->len < 6) {
   1700c:	8893      	ldrh	r3, [r2, #4]
   1700e:	2b05      	cmp	r3, #5
   17010:	d80e      	bhi.n	17030 <ctl_recv+0x58>
		LOG_ERR("Too short ack message");
   17012:	4b62      	ldr	r3, [pc, #392]	; (1719c <ctl_recv+0x1c4>)
		LOG_ERR("Too large segment number in ack");
   17014:	9307      	str	r3, [sp, #28]
   17016:	2302      	movs	r3, #2
   17018:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1701c:	4860      	ldr	r0, [pc, #384]	; (171a0 <ctl_recv+0x1c8>)
   1701e:	aa06      	add	r2, sp, #24
   17020:	9306      	str	r3, [sp, #24]
   17022:	f015 fb70 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17026:	f06f 0015 	mvn.w	r0, #21
}
   1702a:	b009      	add	sp, #36	; 0x24
   1702c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
   17030:	4610      	mov	r0, r2
   17032:	9201      	str	r2, [sp, #4]
   17034:	f016 ff32 	bl	2de9c <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
   17038:	f994 3014 	ldrsb.w	r3, [r4, #20]
   1703c:	9901      	ldr	r1, [sp, #4]
   1703e:	2b00      	cmp	r3, #0
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   17040:	f3c0 098c 	ubfx	r9, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
   17044:	da0c      	bge.n	17060 <ctl_recv+0x88>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
   17046:	4a57      	ldr	r2, [pc, #348]	; (171a4 <ctl_recv+0x1cc>)
   17048:	7d23      	ldrb	r3, [r4, #20]
   1704a:	6812      	ldr	r2, [r2, #0]
   1704c:	f003 0301 	and.w	r3, r3, #1
   17050:	1ad2      	subs	r2, r2, r3
   17052:	0a13      	lsrs	r3, r2, #8
   17054:	ea49 6202 	orr.w	r2, r9, r2, lsl #24
   17058:	e9c8 2300 	strd	r2, r3, [r8]
		return 0;
   1705c:	2000      	movs	r0, #0
   1705e:	e7e4      	b.n	1702a <ctl_recv+0x52>
	obo = seq_zero >> 15;
   17060:	f3c0 37cf 	ubfx	r7, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
   17064:	4608      	mov	r0, r1
   17066:	f016 ff23 	bl	2deb0 <net_buf_simple_pull_be32>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
   1706a:	8923      	ldrh	r3, [r4, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   1706c:	4c4e      	ldr	r4, [pc, #312]	; (171a8 <ctl_recv+0x1d0>)
	ack = net_buf_simple_pull_be32(buf);
   1706e:	4606      	mov	r6, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   17070:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (tx->dst == addr) {
   17072:	f8b4 e03a 	ldrh.w	lr, [r4, #58]	; 0x3a
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   17076:	f3c2 010c 	ubfx	r1, r2, #0, #13
   1707a:	42ad      	cmp	r5, r5
   1707c:	bf08      	it	eq
   1707e:	4549      	cmpeq	r1, r9
		if (obo && (tx->nack_count == tx->seg_n + 1 || tx->ack_src == addr)) {
   17080:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   17084:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
   17088:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   1708a:	f102 0201 	add.w	r2, r2, #1
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
   1708e:	d1ca      	bne.n	17026 <ctl_recv+0x4e>
		if (tx->dst == addr) {
   17090:	4573      	cmp	r3, lr
   17092:	d006      	beq.n	170a2 <ctl_recv+0xca>
		if (obo && (tx->nack_count == tx->seg_n + 1 || tx->ack_src == addr)) {
   17094:	2f00      	cmp	r7, #0
   17096:	d0c6      	beq.n	17026 <ctl_recv+0x4e>
   17098:	4594      	cmp	ip, r2
   1709a:	d001      	beq.n	170a0 <ctl_recv+0xc8>
   1709c:	4283      	cmp	r3, r0
   1709e:	d1c2      	bne.n	17026 <ctl_recv+0x4e>
			tx->ack_src = addr;
   170a0:	87a3      	strh	r3, [r4, #60]	; 0x3c
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
   170a2:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   170a6:	2b00      	cmp	r3, #0
   170a8:	dc01      	bgt.n	170ae <ctl_recv+0xd6>
		LOG_ERR("Received ack for group seg");
   170aa:	4b40      	ldr	r3, [pc, #256]	; (171ac <ctl_recv+0x1d4>)
   170ac:	e7b2      	b.n	17014 <ctl_recv+0x3c>
	*seq_auth = tx->seq_auth;
   170ae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   170b2:	e9c8 2300 	strd	r2, r3, [r8]
	if (!ack) {
   170b6:	b92e      	cbnz	r6, 170c4 <ctl_recv+0xec>
		seg_tx_complete(tx, -ECANCELED);
   170b8:	f06f 018b 	mvn.w	r1, #139	; 0x8b
		seg_tx_complete(tx, 0);
   170bc:	483a      	ldr	r0, [pc, #232]	; (171a8 <ctl_recv+0x1d0>)
   170be:	f7ff feb1 	bl	16e24 <seg_tx_complete>
   170c2:	e7cb      	b.n	1705c <ctl_recv+0x84>
   170c4:	fab6 f386 	clz	r3, r6
	if (find_msb_set(ack) - 1 > tx->seg_n) {
   170c8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   170cc:	f1c3 031f 	rsb	r3, r3, #31
   170d0:	4293      	cmp	r3, r2
   170d2:	d838      	bhi.n	17146 <ctl_recv+0x16e>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   170d4:	fa96 f1a6 	rbit	r1, r6
   170d8:	fab1 f181 	clz	r1, r1
	tx->seg[seg_idx] = NULL;
   170dc:	f04f 0900 	mov.w	r9, #0
		ack &= ~BIT(bit - 1);
   170e0:	2701      	movs	r7, #1
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   170e2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 171b0 <ctl_recv+0x1d8>
   170e6:	3101      	adds	r1, #1
		if (tx->seg[bit - 1]) {
   170e8:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
   170ec:	1e4d      	subs	r5, r1, #1
   170ee:	b173      	cbz	r3, 1710e <ctl_recv+0x136>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   170f0:	4640      	mov	r0, r8
   170f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   170f6:	f00e fa49 	bl	2558c <k_mem_slab_free>
   170fa:	b2eb      	uxtb	r3, r5
	tx->seg[seg_idx] = NULL;
   170fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   17100:	f8c3 9004 	str.w	r9, [r3, #4]
	tx->nack_count--;
   17104:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17108:	3b01      	subs	r3, #1
   1710a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ack &= ~BIT(bit - 1);
   1710e:	fa07 f305 	lsl.w	r3, r7, r5
   17112:	ea26 0603 	bic.w	r6, r6, r3
   17116:	fa96 f1a6 	rbit	r1, r6
   1711a:	2e00      	cmp	r6, #0
   1711c:	fab1 f181 	clz	r1, r1
   17120:	bf08      	it	eq
   17122:	f04f 31ff 	moveq.w	r1, #4294967295
   17126:	f101 0101 	add.w	r1, r1, #1
	while ((bit = find_lsb_set(ack))) {
   1712a:	d1dd      	bne.n	170e8 <ctl_recv+0x110>
	if (tx->nack_count) {
   1712c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17130:	b15b      	cbz	r3, 1714a <ctl_recv+0x172>
		if (tx->seg_o == 0) {
   17132:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   17136:	2b00      	cmp	r3, #0
   17138:	d190      	bne.n	1705c <ctl_recv+0x84>
			k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   1713a:	2200      	movs	r2, #0
   1713c:	2300      	movs	r3, #0
   1713e:	481d      	ldr	r0, [pc, #116]	; (171b4 <ctl_recv+0x1dc>)
   17140:	f00f fa9a 	bl	26678 <k_work_reschedule>
   17144:	e78a      	b.n	1705c <ctl_recv+0x84>
		LOG_ERR("Too large segment number in ack");
   17146:	4b1c      	ldr	r3, [pc, #112]	; (171b8 <ctl_recv+0x1e0>)
   17148:	e764      	b.n	17014 <ctl_recv+0x3c>
		seg_tx_complete(tx, 0);
   1714a:	4631      	mov	r1, r6
   1714c:	e7b6      	b.n	170bc <ctl_recv+0xe4>
}
   1714e:	b009      	add	sp, #36	; 0x24
   17150:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return bt_mesh_hb_recv(rx, buf);
   17154:	f001 b91a 	b.w	1838c <bt_mesh_hb_recv>
}
   17158:	b009      	add	sp, #36	; 0x24
   1715a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_poll(rx, buf);
   1715e:	f005 bd71 	b.w	1cc44 <bt_mesh_friend_poll>
}
   17162:	b009      	add	sp, #36	; 0x24
   17164:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_req(rx, buf);
   17168:	f005 be12 	b.w	1cd90 <bt_mesh_friend_req>
}
   1716c:	b009      	add	sp, #36	; 0x24
   1716e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_clear(rx, buf);
   17172:	f016 bcd2 	b.w	2db1a <bt_mesh_friend_clear>
}
   17176:	b009      	add	sp, #36	; 0x24
   17178:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
   1717c:	f005 bdda 	b.w	1cd34 <bt_mesh_friend_clear_cfm>
}
   17180:	b009      	add	sp, #36	; 0x24
   17182:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_sub_add(rx, buf);
   17186:	f016 bd0b 	b.w	2dba0 <bt_mesh_friend_sub_add>
}
   1718a:	b009      	add	sp, #36	; 0x24
   1718c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
   17190:	f016 bd46 	b.w	2dc20 <bt_mesh_friend_sub_rem>
		switch (ctl_op) {
   17194:	f06f 0001 	mvn.w	r0, #1
   17198:	e747      	b.n	1702a <ctl_recv+0x52>
   1719a:	bf00      	nop
   1719c:	00032cc8 	.word	0x00032cc8
   171a0:	0002fd24 	.word	0x0002fd24
   171a4:	20009ec8 	.word	0x20009ec8
   171a8:	2000a168 	.word	0x2000a168
   171ac:	00032cde 	.word	0x00032cde
   171b0:	20008e0c 	.word	0x20008e0c
   171b4:	2000a1b8 	.word	0x2000a1b8
   171b8:	00032cf9 	.word	0x00032cf9

000171bc <send_unseg>:
{
   171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c0:	4690      	mov	r8, r2
   171c2:	4699      	mov	r9, r3
				 tx->xmit, BUF_TIMEOUT);
   171c4:	2200      	movs	r2, #0
   171c6:	2300      	movs	r3, #0
{
   171c8:	468a      	mov	sl, r1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   171ca:	2101      	movs	r1, #1
{
   171cc:	b089      	sub	sp, #36	; 0x24
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   171ce:	e9cd 2300 	strd	r2, r3, [sp]
{
   171d2:	4604      	mov	r4, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   171d4:	7a82      	ldrb	r2, [r0, #10]
   171d6:	4608      	mov	r0, r1
{
   171d8:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_LOCAL_ADV,
   171dc:	f7fd fdcc 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   171e0:	4605      	mov	r5, r0
   171e2:	b970      	cbnz	r0, 17202 <send_unseg+0x46>
		LOG_ERR("Out of network buffers");
   171e4:	4b37      	ldr	r3, [pc, #220]	; (172c4 <send_unseg+0x108>)
   171e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171ea:	9307      	str	r3, [sp, #28]
   171ec:	2302      	movs	r3, #2
   171ee:	4836      	ldr	r0, [pc, #216]	; (172c8 <send_unseg+0x10c>)
   171f0:	aa06      	add	r2, sp, #24
   171f2:	9306      	str	r3, [sp, #24]
   171f4:	f015 fa87 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -ENOBUFS;
   171f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   171fc:	b009      	add	sp, #36	; 0x24
   171fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17202:	f100 060c 	add.w	r6, r0, #12
   17206:	2109      	movs	r1, #9
   17208:	4630      	mov	r0, r6
   1720a:	f008 fe8f 	bl	1ff2c <net_buf_simple_reserve>
	if (ctl_op) {
   1720e:	f1bb 0f00 	cmp.w	fp, #0
   17212:	d02b      	beq.n	1726c <send_unseg+0xb0>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   17214:	f89b 1000 	ldrb.w	r1, [fp]
	return net_buf_simple_add_u8(&buf->b, val);
   17218:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if (!bt_mesh_friend_queue_has_space(tx->sub->net_idx,
   1721c:	2701      	movs	r7, #1
   1721e:	4630      	mov	r0, r6
   17220:	f016 fe67 	bl	2def2 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17224:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   17228:	f8da 1000 	ldr.w	r1, [sl]
   1722c:	4630      	mov	r0, r6
   1722e:	f016 fe54 	bl	2deda <net_buf_simple_add_mem>
   17232:	6863      	ldr	r3, [r4, #4]
   17234:	889a      	ldrh	r2, [r3, #4]
   17236:	6823      	ldr	r3, [r4, #0]
   17238:	8c18      	ldrh	r0, [r3, #32]
   1723a:	9700      	str	r7, [sp, #0]
   1723c:	2300      	movs	r3, #0
   1723e:	8921      	ldrh	r1, [r4, #8]
   17240:	f005 ff08 	bl	1d054 <bt_mesh_friend_queue_has_space>
   17244:	b9f0      	cbnz	r0, 17284 <send_unseg+0xc8>
			if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   17246:	6863      	ldr	r3, [r4, #4]
   17248:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1724c:	2b00      	cmp	r3, #0
   1724e:	dd2f      	ble.n	172b0 <send_unseg+0xf4>
				LOG_ERR("Not enough space in Friend Queue");
   17250:	4b1e      	ldr	r3, [pc, #120]	; (172cc <send_unseg+0x110>)
   17252:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17256:	9307      	str	r3, [sp, #28]
   17258:	2302      	movs	r3, #2
   1725a:	481b      	ldr	r0, [pc, #108]	; (172c8 <send_unseg+0x10c>)
   1725c:	aa06      	add	r2, sp, #24
   1725e:	9306      	str	r3, [sp, #24]
   17260:	f015 fa51 	bl	2c706 <z_log_msg_static_create.constprop.0>
				net_buf_unref(buf);
   17264:	4628      	mov	r0, r5
   17266:	f008 ff39 	bl	200dc <net_buf_unref>
				return -ENOBUFS;
   1726a:	e7c5      	b.n	171f8 <send_unseg+0x3c>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   1726c:	6863      	ldr	r3, [r4, #4]
   1726e:	885f      	ldrh	r7, [r3, #2]
   17270:	3703      	adds	r7, #3
   17272:	b2bf      	uxth	r7, r7
   17274:	2f01      	cmp	r7, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   17276:	bf89      	itett	hi
   17278:	7ae1      	ldrbhi	r1, [r4, #11]
	return net_buf_simple_add_u8(&buf->b, val);
   1727a:	4659      	movls	r1, fp
   1727c:	0889      	lsrhi	r1, r1, #2
   1727e:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   17282:	e7cb      	b.n	1721c <send_unseg+0x60>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
   17284:	2200      	movs	r2, #0
   17286:	463b      	mov	r3, r7
   17288:	4611      	mov	r1, r2
   1728a:	4620      	mov	r0, r4
   1728c:	9600      	str	r6, [sp, #0]
   1728e:	f005 ffb1 	bl	1d1f4 <bt_mesh_friend_enqueue_tx>
   17292:	b168      	cbz	r0, 172b0 <send_unseg+0xf4>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   17294:	6863      	ldr	r3, [r4, #4]
					      NULL, 1, &buf->b) &&
   17296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   1729a:	2b00      	cmp	r3, #0
   1729c:	dd08      	ble.n	172b0 <send_unseg+0xf4>
			net_buf_unref(buf);
   1729e:	4628      	mov	r0, r5
   172a0:	f008 ff1c 	bl	200dc <net_buf_unref>
			send_cb_finalize(cb, cb_data);
   172a4:	4640      	mov	r0, r8
   172a6:	4649      	mov	r1, r9
   172a8:	f015 f974 	bl	2c594 <send_cb_finalize>
			return 0;
   172ac:	2000      	movs	r0, #0
   172ae:	e7a5      	b.n	171fc <send_unseg+0x40>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   172b0:	464b      	mov	r3, r9
   172b2:	4642      	mov	r2, r8
   172b4:	4629      	mov	r1, r5
   172b6:	4620      	mov	r0, r4
}
   172b8:	b009      	add	sp, #36	; 0x24
   172ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   172be:	f7fe bbd3 	b.w	15a68 <bt_mesh_net_send>
   172c2:	bf00      	nop
   172c4:	00032d19 	.word	0x00032d19
   172c8:	0002fd24 	.word	0x0002fd24
   172cc:	00032d30 	.word	0x00032d30

000172d0 <send_seg>:
{
   172d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d4:	b093      	sub	sp, #76	; 0x4c
		if (seg_tx[i].nack_count) {
   172d6:	4c94      	ldr	r4, [pc, #592]	; (17528 <send_seg+0x258>)
{
   172d8:	af02      	add	r7, sp, #8
   172da:	e9c7 3203 	strd	r3, r2, [r7, #12]
		if (seg_tx[i].nack_count) {
   172de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
{
   172e2:	4605      	mov	r5, r0
   172e4:	460e      	mov	r6, r1
   172e6:	f8d7 9068 	ldr.w	r9, [r7, #104]	; 0x68
		if (seg_tx[i].nack_count) {
   172ea:	b9d3      	cbnz	r3, 17322 <send_seg+0x52>
	if (ctl_op) {
   172ec:	f1b9 0f00 	cmp.w	r9, #0
   172f0:	d128      	bne.n	17344 <send_seg+0x74>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
   172f2:	6843      	ldr	r3, [r0, #4]
		return BT_MESH_APP_SEG_SDU_MAX;
   172f4:	f04f 080c 	mov.w	r8, #12
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
   172f8:	885b      	ldrh	r3, [r3, #2]
   172fa:	3303      	adds	r3, #3
   172fc:	b29b      	uxth	r3, r3
   172fe:	2b01      	cmp	r3, #1
		tx->hdr = SEG_HDR(0, 0);
   17300:	bf91      	iteee	ls
   17302:	2380      	movls	r3, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
   17304:	7ac3      	ldrbhi	r3, [r0, #11]
   17306:	f3c3 0385 	ubfxhi	r3, r3, #2, #6
   1730a:	f063 033f 	ornhi	r3, r3, #63	; 0x3f
   1730e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	tx->src = net_tx->src;
   17312:	8903      	ldrh	r3, [r0, #8]
   17314:	8723      	strh	r3, [r4, #56]	; 0x38
	tx->dst = net_tx->ctx->addr;
   17316:	6843      	ldr	r3, [r0, #4]
   17318:	889b      	ldrh	r3, [r3, #4]
   1731a:	8763      	strh	r3, [r4, #58]	; 0x3a
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   1731c:	888b      	ldrh	r3, [r1, #4]
   1731e:	3b01      	subs	r3, #1
	if (ctl) {
   17320:	e01f      	b.n	17362 <send_seg+0x92>
		LOG_ERR("No multi-segment message contexts available");
   17322:	4b82      	ldr	r3, [pc, #520]	; (1752c <send_seg+0x25c>)
   17324:	4882      	ldr	r0, [pc, #520]	; (17530 <send_seg+0x260>)
   17326:	63fb      	str	r3, [r7, #60]	; 0x3c
   17328:	2302      	movs	r3, #2
   1732a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1732e:	63bb      	str	r3, [r7, #56]	; 0x38
   17330:	f107 0238 	add.w	r2, r7, #56	; 0x38
   17334:	f015 f9e7 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EBUSY;
   17338:	f06f 000f 	mvn.w	r0, #15
}
   1733c:	3744      	adds	r7, #68	; 0x44
   1733e:	46bd      	mov	sp, r7
   17340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_MESH_CTL_SEG_SDU_MAX;
   17344:	f04f 0808 	mov.w	r8, #8
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
   17348:	f899 3000 	ldrb.w	r3, [r9]
   1734c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17350:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	tx->src = net_tx->src;
   17354:	8903      	ldrh	r3, [r0, #8]
   17356:	8723      	strh	r3, [r4, #56]	; 0x38
	tx->dst = net_tx->ctx->addr;
   17358:	6843      	ldr	r3, [r0, #4]
   1735a:	889b      	ldrh	r3, [r3, #4]
   1735c:	8763      	strh	r3, [r4, #58]	; 0x3a
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   1735e:	888b      	ldrh	r3, [r1, #4]
   17360:	3b01      	subs	r3, #1
   17362:	fb93 f3f8 	sdiv	r3, r3, r8
	tx->seg_o = 0;
   17366:	2200      	movs	r2, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   17368:	b2db      	uxtb	r3, r3
   1736a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	tx->seg_o = 0;
   1736e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	tx->len = sdu->len;
   17372:	88b2      	ldrh	r2, [r6, #4]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   17374:	496f      	ldr	r1, [pc, #444]	; (17534 <send_seg+0x264>)
	tx->len = sdu->len;
   17376:	87e2      	strh	r2, [r4, #62]	; 0x3e
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   17378:	460a      	mov	r2, r1
	tx->nack_count = tx->seg_n + 1;
   1737a:	3301      	adds	r3, #1
   1737c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   17380:	f852 3b08 	ldr.w	r3, [r2], #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17384:	e8d2 2faf 	lda	r2, [r2]
   17388:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1738c:	1a9b      	subs	r3, r3, r2
   1738e:	684a      	ldr	r2, [r1, #4]
   17390:	0a18      	lsrs	r0, r3, #8
   17392:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   17396:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
	tx->cb = cb;
   1739a:	693b      	ldr	r3, [r7, #16]
	tx->sub = net_tx->sub;
   1739c:	6828      	ldr	r0, [r5, #0]
	tx->cb = cb;
   1739e:	64a3      	str	r3, [r4, #72]	; 0x48
	tx->cb_data = cb_data;
   173a0:	68fb      	ldr	r3, [r7, #12]
	tx->aszmic = net_tx->aszmic;
   173a2:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
	tx->cb_data = cb_data;
   173a6:	64e3      	str	r3, [r4, #76]	; 0x4c
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
   173a8:	2304      	movs	r3, #4
   173aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	tx->xmit = net_tx->xmit;
   173ae:	7aab      	ldrb	r3, [r5, #10]
	tx->sub = net_tx->sub;
   173b0:	6020      	str	r0, [r4, #0]
	tx->xmit = net_tx->xmit;
   173b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	tx->aszmic = net_tx->aszmic;
   173b6:	7aeb      	ldrb	r3, [r5, #11]
   173b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   173bc:	f363 0282 	bfi	r2, r3, #2, #1
	tx->ctl = !!ctl_op;
   173c0:	f1b9 0300 	subs.w	r3, r9, #0
   173c4:	bf18      	it	ne
   173c6:	2301      	movne	r3, #1
	tx->aszmic = net_tx->aszmic;
   173c8:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
	tx->friend_cred = net_tx->friend_cred;
   173cc:	7aea      	ldrb	r2, [r5, #11]
	tx->blocked = blocked;
   173ce:	005b      	lsls	r3, r3, #1
	tx->friend_cred = net_tx->friend_cred;
   173d0:	f3c2 0200 	ubfx	r2, r2, #0, #1
	tx->blocked = blocked;
   173d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   173d8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
   173dc:	f022 023b 	bic.w	r2, r2, #59	; 0x3b
   173e0:	4313      	orrs	r3, r2
   173e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	tx->ttl = net_tx->ctx->send_ttl;
   173e6:	686b      	ldr	r3, [r5, #4]
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   173e8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
	tx->ttl = net_tx->ctx->send_ttl;
   173ea:	7adb      	ldrb	r3, [r3, #11]
   173ec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   173f0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   173f4:	8929      	ldrh	r1, [r5, #8]
   173f6:	3301      	adds	r3, #1
   173f8:	b2db      	uxtb	r3, r3
   173fa:	8c00      	ldrh	r0, [r0, #32]
   173fc:	9300      	str	r3, [sp, #0]
   173fe:	4b4e      	ldr	r3, [pc, #312]	; (17538 <send_seg+0x268>)
   17400:	f005 fe28 	bl	1d054 <bt_mesh_friend_queue_has_space>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   17404:	b918      	cbnz	r0, 1740e <send_seg+0x13e>
					    tx->seg_n + 1) &&
   17406:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   1740a:	2b00      	cmp	r3, #0
   1740c:	dc1a      	bgt.n	17444 <send_seg+0x174>
   1740e:	4b4a      	ldr	r3, [pc, #296]	; (17538 <send_seg+0x268>)
   17410:	f1b9 0f00 	cmp.w	r9, #0
   17414:	bf0c      	ite	eq
   17416:	461a      	moveq	r2, r3
   17418:	2200      	movne	r2, #0
				type = BT_MESH_FRIEND_PDU_PARTIAL;
   1741a:	f04f 0a00 	mov.w	sl, #0
			seg_tx_buf_build(tx, seg_o, &seg);
   1741e:	3b30      	subs	r3, #48	; 0x30
   17420:	60ba      	str	r2, [r7, #8]
   17422:	607b      	str	r3, [r7, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
   17424:	88b3      	ldrh	r3, [r6, #4]
   17426:	fa5f f98a 	uxtb.w	r9, sl
   1742a:	bb1b      	cbnz	r3, 17474 <send_seg+0x1a4>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   1742c:	6863      	ldr	r3, [r4, #4]
		seg_tx_reset(tx);
   1742e:	483e      	ldr	r0, [pc, #248]	; (17528 <send_seg+0x258>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   17430:	2b00      	cmp	r3, #0
   17432:	d176      	bne.n	17522 <send_seg+0x252>
		seg_tx_reset(tx);
   17434:	f7ff fca6 	bl	16d84 <seg_tx_reset>
		send_cb_finalize(cb, cb_data);
   17438:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
   1743c:	f015 f8aa 	bl	2c594 <send_cb_finalize>
		return 0;
   17440:	2000      	movs	r0, #0
   17442:	e77b      	b.n	1733c <send_seg+0x6c>
		LOG_ERR("Not enough space in Friend Queue for %u segments", tx->seg_n + 1);
   17444:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   17448:	466c      	mov	r4, sp
   1744a:	b088      	sub	sp, #32
   1744c:	3301      	adds	r3, #1
   1744e:	aa02      	add	r2, sp, #8
   17450:	493a      	ldr	r1, [pc, #232]	; (1753c <send_seg+0x26c>)
   17452:	4837      	ldr	r0, [pc, #220]	; (17530 <send_seg+0x260>)
   17454:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17458:	2303      	movs	r3, #3
   1745a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1745e:	f842 3f10 	str.w	r3, [r2, #16]!
   17462:	f015 f950 	bl	2c706 <z_log_msg_static_create.constprop.0>
   17466:	46a5      	mov	sp, r4
			seg_tx_reset(tx);
   17468:	482f      	ldr	r0, [pc, #188]	; (17528 <send_seg+0x258>)
   1746a:	f7ff fc8b 	bl	16d84 <seg_tx_reset>
		return -ENOBUFS;
   1746e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17472:	e763      	b.n	1733c <send_seg+0x6c>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
   17474:	2200      	movs	r2, #0
   17476:	2300      	movs	r3, #0
   17478:	4831      	ldr	r0, [pc, #196]	; (17540 <send_seg+0x270>)
   1747a:	f107 0118 	add.w	r1, r7, #24
   1747e:	f00e f82d 	bl	254dc <k_mem_slab_alloc>
		if (err) {
   17482:	6178      	str	r0, [r7, #20]
   17484:	b158      	cbz	r0, 1749e <send_seg+0x1ce>
			LOG_ERR("Out of segment buffers");
   17486:	4b2f      	ldr	r3, [pc, #188]	; (17544 <send_seg+0x274>)
   17488:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1748c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1748e:	2302      	movs	r3, #2
   17490:	4827      	ldr	r0, [pc, #156]	; (17530 <send_seg+0x260>)
   17492:	63bb      	str	r3, [r7, #56]	; 0x38
   17494:	f107 0238 	add.w	r2, r7, #56	; 0x38
   17498:	f015 f935 	bl	2c706 <z_log_msg_static_create.constprop.0>
   1749c:	e7e4      	b.n	17468 <send_seg+0x198>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   1749e:	88b2      	ldrh	r2, [r6, #4]
   174a0:	4630      	mov	r0, r6
   174a2:	4542      	cmp	r2, r8
   174a4:	bf28      	it	cs
   174a6:	4642      	movcs	r2, r8
   174a8:	4611      	mov	r1, r2
   174aa:	f8d7 b018 	ldr.w	fp, [r7, #24]
   174ae:	603a      	str	r2, [r7, #0]
   174b0:	f008 ff34 	bl	2031c <net_buf_simple_pull_mem>
   174b4:	683a      	ldr	r2, [r7, #0]
   174b6:	4601      	mov	r1, r0
   174b8:	4658      	mov	r0, fp
   174ba:	f013 f82e 	bl	2a51a <memcpy>
			NET_BUF_SIMPLE_DEFINE(seg, 16);
   174be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
		tx->seg[seg_o] = buf;
   174c2:	69bb      	ldr	r3, [r7, #24]
   174c4:	eb04 0b89 	add.w	fp, r4, r9, lsl #2
   174c8:	f8cb 3004 	str.w	r3, [fp, #4]
			NET_BUF_SIMPLE_DEFINE(seg, 16);
   174cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   174d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
			seg_tx_buf_build(tx, seg_o, &seg);
   174d4:	4649      	mov	r1, r9
   174d6:	6878      	ldr	r0, [r7, #4]
   174d8:	f107 021c 	add.w	r2, r7, #28
			NET_BUF_SIMPLE_DEFINE(seg, 16);
   174dc:	61fb      	str	r3, [r7, #28]
			seg_tx_buf_build(tx, seg_o, &seg);
   174de:	f015 f86b 	bl	2c5b8 <seg_tx_buf_build>
			if (seg_o == tx->seg_n) {
   174e2:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
			if (bt_mesh_friend_enqueue_tx(
   174e6:	f107 021c 	add.w	r2, r7, #28
   174ea:	1c4b      	adds	r3, r1, #1
   174ec:	9200      	str	r2, [sp, #0]
   174ee:	4549      	cmp	r1, r9
   174f0:	bf0c      	ite	eq
   174f2:	2102      	moveq	r1, #2
   174f4:	2101      	movne	r1, #1
   174f6:	4628      	mov	r0, r5
   174f8:	68ba      	ldr	r2, [r7, #8]
   174fa:	b2db      	uxtb	r3, r3
   174fc:	f005 fe7a 	bl	1d1f4 <bt_mesh_friend_enqueue_tx>
   17500:	b160      	cbz	r0, 1751c <send_seg+0x24c>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
   17502:	686b      	ldr	r3, [r5, #4]
				    tx->seg_n + 1, &seg) &&
   17504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   17508:	2b00      	cmp	r3, #0
   1750a:	dd07      	ble.n	1751c <send_seg+0x24c>
				k_mem_slab_free(&segs, &buf);
   1750c:	480c      	ldr	r0, [pc, #48]	; (17540 <send_seg+0x270>)
   1750e:	f107 0118 	add.w	r1, r7, #24
   17512:	f00e f83b 	bl	2558c <k_mem_slab_free>
				tx->seg[seg_o] = NULL;
   17516:	697b      	ldr	r3, [r7, #20]
   17518:	f8cb 3004 	str.w	r3, [fp, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
   1751c:	f10a 0a01 	add.w	sl, sl, #1
   17520:	e780      	b.n	17424 <send_seg+0x154>
	seg_tx_send_unacked(tx);
   17522:	f7ff fcb1 	bl	16e88 <seg_tx_send_unacked>
	return 0;
   17526:	e78b      	b.n	17440 <send_seg+0x170>
   17528:	2000a168 	.word	0x2000a168
   1752c:	00032d51 	.word	0x00032d51
   17530:	0002fd24 	.word	0x0002fd24
   17534:	20009ec8 	.word	0x20009ec8
   17538:	2000a198 	.word	0x2000a198
   1753c:	00032d7d 	.word	0x00032d7d
   17540:	20008e0c 	.word	0x20008e0c
   17544:	00032dae 	.word	0x00032dae

00017548 <pre_va_set>:
	LOG_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x", lab->addr, lab->ref);

	return 0;
}

BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
   17548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1754c:	4688      	mov	r8, r1
   1754e:	4616      	mov	r6, r2
   17550:	461f      	mov	r7, r3
   17552:	b08c      	sub	sp, #48	; 0x30
   17554:	4b26      	ldr	r3, [pc, #152]	; (175f0 <pre_va_set+0xa8>)
   17556:	e8d3 4faf 	lda	r4, [r3]
   1755a:	f014 0401 	ands.w	r4, r4, #1
   1755e:	d00c      	beq.n	1757a <pre_va_set+0x32>
	if (!name) {
   17560:	b978      	cbnz	r0, 17582 <pre_va_set+0x3a>
		LOG_ERR("Insufficient number of arguments");
   17562:	4b24      	ldr	r3, [pc, #144]	; (175f4 <pre_va_set+0xac>)
		return -ENOENT;
   17564:	f06f 0401 	mvn.w	r4, #1
		LOG_ERR("Insufficient number of arguments");
   17568:	930b      	str	r3, [sp, #44]	; 0x2c
   1756a:	2302      	movs	r3, #2
   1756c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17570:	4821      	ldr	r0, [pc, #132]	; (175f8 <pre_va_set+0xb0>)
   17572:	aa0a      	add	r2, sp, #40	; 0x28
   17574:	930a      	str	r3, [sp, #40]	; 0x28
   17576:	f015 f8c6 	bl	2c706 <z_log_msg_static_create.constprop.0>
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
   1757a:	4620      	mov	r0, r4
   1757c:	b00c      	add	sp, #48	; 0x30
   1757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	index = strtol(name, NULL, 16);
   17582:	2210      	movs	r2, #16
   17584:	2100      	movs	r1, #0
   17586:	f012 fe68 	bl	2a25a <strtol>
   1758a:	4605      	mov	r5, r0
	if (len_rd == 0) {
   1758c:	f1b8 0f00 	cmp.w	r8, #0
   17590:	d029      	beq.n	175e6 <pre_va_set+0x9e>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
   17592:	2314      	movs	r3, #20
   17594:	4639      	mov	r1, r7
   17596:	4630      	mov	r0, r6
   17598:	aa01      	add	r2, sp, #4
   1759a:	f004 fbb3 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   1759e:	4604      	mov	r4, r0
   175a0:	b150      	cbz	r0, 175b8 <pre_va_set+0x70>
		LOG_ERR("Failed to set \'virtual address\'");
   175a2:	4b16      	ldr	r3, [pc, #88]	; (175fc <pre_va_set+0xb4>)
   175a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   175a8:	930b      	str	r3, [sp, #44]	; 0x2c
   175aa:	2302      	movs	r3, #2
   175ac:	4812      	ldr	r0, [pc, #72]	; (175f8 <pre_va_set+0xb0>)
   175ae:	aa0a      	add	r2, sp, #40	; 0x28
   175b0:	930a      	str	r3, [sp, #40]	; 0x28
   175b2:	f015 f8a8 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return err;
   175b6:	e7e0      	b.n	1757a <pre_va_set+0x32>
	if (va.ref == 0) {
   175b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   175bc:	b19b      	cbz	r3, 175e6 <pre_va_set+0x9e>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
   175be:	b2ad      	uxth	r5, r5
   175c0:	b99d      	cbnz	r5, 175ea <pre_va_set+0xa2>
	memcpy(lab->uuid, va.uuid, 16);
   175c2:	4c0f      	ldr	r4, [pc, #60]	; (17600 <pre_va_set+0xb8>)
   175c4:	2210      	movs	r2, #16
   175c6:	4620      	mov	r0, r4
   175c8:	a902      	add	r1, sp, #8
   175ca:	f012 ffa6 	bl	2a51a <memcpy>
	lab->addr = va.addr;
   175ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	lab->ref = va.ref;
   175d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	lab->addr = va.addr;
   175d6:	f824 3c02 	strh.w	r3, [r4, #-2]
	lab->ref = va.ref;
   175da:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   175de:	f362 030e 	bfi	r3, r2, #0, #15
   175e2:	f824 3c04 	strh.w	r3, [r4, #-4]
		return 0;
   175e6:	2400      	movs	r4, #0
   175e8:	e7c7      	b.n	1757a <pre_va_set+0x32>
		return -ENOBUFS;
   175ea:	f06f 0468 	mvn.w	r4, #104	; 0x68
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
   175ee:	e7c4      	b.n	1757a <pre_va_set+0x32>
   175f0:	20009ed0 	.word	0x20009ed0
   175f4:	00031b3e 	.word	0x00031b3e
   175f8:	0002fd24 	.word	0x0002fd24
   175fc:	00032dc5 	.word	0x00032dc5
   17600:	2000b140 	.word	0x2000b140

00017604 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
   17604:	4b03      	ldr	r3, [pc, #12]	; (17614 <bt_mesh_tx_in_progress+0x10>)
   17606:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
}
   1760a:	3800      	subs	r0, #0
   1760c:	bf18      	it	ne
   1760e:	2001      	movne	r0, #1
   17610:	4770      	bx	lr
   17612:	bf00      	nop
   17614:	2000a168 	.word	0x2000a168

00017618 <bt_mesh_ctl_send>:
{
   17618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   1761c:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   17620:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   17622:	f899 300b 	ldrb.w	r3, [r9, #11]
{
   17626:	b08f      	sub	sp, #60	; 0x3c
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   17628:	2bff      	cmp	r3, #255	; 0xff
{
   1762a:	4604      	mov	r4, r0
   1762c:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
   17630:	4616      	mov	r6, r2
   17632:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   17636:	d11b      	bne.n	17670 <bt_mesh_ctl_send+0x58>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   17638:	f7fd fa3e 	bl	14ab8 <bt_mesh_default_ttl_get>
   1763c:	f889 000b 	strb.w	r0, [r9, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   17640:	462a      	mov	r2, r5
   17642:	4631      	mov	r1, r6
   17644:	a805      	add	r0, sp, #20
   17646:	f016 fbf1 	bl	2de2c <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   1764a:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   1764c:	bf82      	ittt	hi
   1764e:	2201      	movhi	r2, #1
   17650:	6863      	ldrhi	r3, [r4, #4]
   17652:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   17654:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17658:	6863      	ldr	r3, [r4, #4]
   1765a:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   1765c:	6862      	ldr	r2, [r4, #4]
   1765e:	8893      	ldrh	r3, [r2, #4]
   17660:	b123      	cbz	r3, 1766c <bt_mesh_ctl_send+0x54>
   17662:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
   17666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1766a:	d212      	bcs.n	17692 <bt_mesh_ctl_send+0x7a>
		LOG_ERR("Invalid destination address");
   1766c:	4b12      	ldr	r3, [pc, #72]	; (176b8 <bt_mesh_ctl_send+0xa0>)
   1766e:	e002      	b.n	17676 <bt_mesh_ctl_send+0x5e>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   17670:	061b      	lsls	r3, r3, #24
   17672:	d5e5      	bpl.n	17640 <bt_mesh_ctl_send+0x28>
		LOG_ERR("TTL too large (max 127)");
   17674:	4b11      	ldr	r3, [pc, #68]	; (176bc <bt_mesh_ctl_send+0xa4>)
		LOG_ERR("Invalid destination address");
   17676:	930d      	str	r3, [sp, #52]	; 0x34
   17678:	2302      	movs	r3, #2
   1767a:	4811      	ldr	r0, [pc, #68]	; (176c0 <bt_mesh_ctl_send+0xa8>)
   1767c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17680:	aa0c      	add	r2, sp, #48	; 0x30
   17682:	930c      	str	r3, [sp, #48]	; 0x30
   17684:	f015 f83f 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17688:	f06f 0015 	mvn.w	r0, #21
}
   1768c:	b00f      	add	sp, #60	; 0x3c
   1768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (tx->ctx->send_rel) {
   17692:	7a92      	ldrb	r2, [r2, #10]
   17694:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   17698:	9300      	str	r3, [sp, #0]
   1769a:	4643      	mov	r3, r8
	if (tx->ctx->send_rel) {
   1769c:	b12a      	cbz	r2, 176aa <bt_mesh_ctl_send+0x92>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   1769e:	463a      	mov	r2, r7
   176a0:	4620      	mov	r0, r4
   176a2:	a905      	add	r1, sp, #20
   176a4:	f7ff fe14 	bl	172d0 <send_seg>
   176a8:	e7f0      	b.n	1768c <bt_mesh_ctl_send+0x74>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   176aa:	463a      	mov	r2, r7
   176ac:	4620      	mov	r0, r4
   176ae:	a905      	add	r1, sp, #20
   176b0:	f7ff fd84 	bl	171bc <send_unseg>
   176b4:	e7ea      	b.n	1768c <bt_mesh_ctl_send+0x74>
   176b6:	bf00      	nop
   176b8:	00032dfd 	.word	0x00032dfd
   176bc:	00032de5 	.word	0x00032de5
   176c0:	0002fd24 	.word	0x0002fd24

000176c4 <bt_mesh_rx_reset>:
		seg_rx_reset(&seg_rx[i], true);
   176c4:	2101      	movs	r1, #1
   176c6:	4801      	ldr	r0, [pc, #4]	; (176cc <bt_mesh_rx_reset+0x8>)
   176c8:	f7ff bb1c 	b.w	16d04 <seg_rx_reset>
   176cc:	2000a108 	.word	0x2000a108

000176d0 <bt_mesh_trans_reset>:
{
   176d0:	b508      	push	{r3, lr}
	bt_mesh_rx_reset();
   176d2:	f7ff fff7 	bl	176c4 <bt_mesh_rx_reset>
		seg_tx_reset(&seg_tx[i]);
   176d6:	4809      	ldr	r0, [pc, #36]	; (176fc <bt_mesh_trans_reset+0x2c>)
   176d8:	f7ff fb54 	bl	16d84 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
   176dc:	4a08      	ldr	r2, [pc, #32]	; (17700 <bt_mesh_trans_reset+0x30>)
   176de:	8813      	ldrh	r3, [r2, #0]
   176e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
   176e4:	b113      	cbz	r3, 176ec <bt_mesh_trans_reset+0x1c>
   176e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   176ea:	8013      	strh	r3, [r2, #0]
	bt_mesh_rpl_clear();
   176ec:	f004 fcf2 	bl	1c0d4 <bt_mesh_rpl_clear>
}
   176f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   176f4:	2009      	movs	r0, #9
   176f6:	f004 bb41 	b.w	1bd7c <bt_mesh_settings_store_schedule>
   176fa:	bf00      	nop
   176fc:	2000a168 	.word	0x2000a168
   17700:	2000b13c 	.word	0x2000b13c

00017704 <bt_mesh_trans_init>:
{
   17704:	b508      	push	{r3, lr}
		k_work_init_delayable(&seg_tx[i].retransmit, seg_retransmit);
   17706:	4905      	ldr	r1, [pc, #20]	; (1771c <bt_mesh_trans_init+0x18>)
   17708:	4805      	ldr	r0, [pc, #20]	; (17720 <bt_mesh_trans_init+0x1c>)
   1770a:	f00e fecb 	bl	264a4 <k_work_init_delayable>
}
   1770e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_init_delayable(&seg_rx[i].ack, seg_ack);
   17712:	4904      	ldr	r1, [pc, #16]	; (17724 <bt_mesh_trans_init+0x20>)
   17714:	4804      	ldr	r0, [pc, #16]	; (17728 <bt_mesh_trans_init+0x24>)
   17716:	f00e bec5 	b.w	264a4 <k_work_init_delayable>
   1771a:	bf00      	nop
   1771c:	0002c70d 	.word	0x0002c70d
   17720:	2000a1b8 	.word	0x2000a1b8
   17724:	0002c7b9 	.word	0x0002c7b9
   17728:	2000a138 	.word	0x2000a138

0001772c <bt_mesh_va_add>:
{
   1772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!virtual_addrs[i].ref) {
   1772e:	4c18      	ldr	r4, [pc, #96]	; (17790 <bt_mesh_va_add+0x64>)
{
   17730:	4606      	mov	r6, r0
		if (!virtual_addrs[i].ref) {
   17732:	8823      	ldrh	r3, [r4, #0]
{
   17734:	460d      	mov	r5, r1
		if (!virtual_addrs[i].ref) {
   17736:	f3c3 070e 	ubfx	r7, r3, #0, #15
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
   1773a:	2210      	movs	r2, #16
		if (!virtual_addrs[i].ref) {
   1773c:	b18f      	cbz	r7, 17762 <bt_mesh_va_add+0x36>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
   1773e:	1d21      	adds	r1, r4, #4
   17740:	f012 fec4 	bl	2a4cc <memcmp>
   17744:	bb10      	cbnz	r0, 1778c <bt_mesh_va_add+0x60>
			*addr = virtual_addrs[i].addr;
   17746:	8863      	ldrh	r3, [r4, #2]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   17748:	2009      	movs	r0, #9
			*addr = virtual_addrs[i].addr;
   1774a:	802b      	strh	r3, [r5, #0]
			virtual_addrs[i].ref++;
   1774c:	8823      	ldrh	r3, [r4, #0]
   1774e:	3301      	adds	r3, #1
   17750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   17754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   17758:	8023      	strh	r3, [r4, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   1775a:	f004 fb0f 	bl	1bd7c <bt_mesh_settings_store_schedule>
			return STATUS_SUCCESS;
   1775e:	2000      	movs	r0, #0
   17760:	e00a      	b.n	17778 <bt_mesh_va_add+0x4c>
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
   17762:	4601      	mov	r1, r0
   17764:	1d20      	adds	r0, r4, #4
   17766:	f012 fed8 	bl	2a51a <memcpy>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
   1776a:	4630      	mov	r0, r6
   1776c:	1ca1      	adds	r1, r4, #2
   1776e:	f001 f947 	bl	18a00 <bt_mesh_virtual_addr>
	if (err) {
   17772:	b110      	cbz	r0, 1777a <bt_mesh_va_add+0x4e>
		return STATUS_UNSPECIFIED;
   17774:	2010      	movs	r0, #16
		va->addr = BT_MESH_ADDR_UNASSIGNED;
   17776:	8067      	strh	r7, [r4, #2]
}
   17778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	va->ref = 1;
   1777a:	f248 0301 	movw	r3, #32769	; 0x8001
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   1777e:	2009      	movs	r0, #9
	va->ref = 1;
   17780:	8023      	strh	r3, [r4, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   17782:	f004 fafb 	bl	1bd7c <bt_mesh_settings_store_schedule>
	*addr = va->addr;
   17786:	8863      	ldrh	r3, [r4, #2]
   17788:	802b      	strh	r3, [r5, #0]
	return STATUS_SUCCESS;
   1778a:	e7e8      	b.n	1775e <bt_mesh_va_add+0x32>
		return STATUS_INSUFF_RESOURCES;
   1778c:	2005      	movs	r0, #5
   1778e:	e7f3      	b.n	17778 <bt_mesh_va_add+0x4c>
   17790:	2000b13c 	.word	0x2000b13c

00017794 <bt_mesh_va_del>:
{
   17794:	b538      	push	{r3, r4, r5, lr}
		if (virtual_addrs[i].ref &&
   17796:	4c10      	ldr	r4, [pc, #64]	; (177d8 <bt_mesh_va_del+0x44>)
{
   17798:	460d      	mov	r5, r1
		if (virtual_addrs[i].ref &&
   1779a:	8823      	ldrh	r3, [r4, #0]
   1779c:	f3c3 030e 	ubfx	r3, r3, #0, #15
   177a0:	b1ab      	cbz	r3, 177ce <bt_mesh_va_del+0x3a>
		    !memcmp(uuid, virtual_addrs[i].uuid,
   177a2:	2210      	movs	r2, #16
   177a4:	1d21      	adds	r1, r4, #4
   177a6:	f012 fe91 	bl	2a4cc <memcmp>
		if (virtual_addrs[i].ref &&
   177aa:	b980      	cbnz	r0, 177ce <bt_mesh_va_del+0x3a>
	va->ref--;
   177ac:	8823      	ldrh	r3, [r4, #0]
   177ae:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   177b2:	327f      	adds	r2, #127	; 0x7f
   177b4:	f362 030e 	bfi	r3, r2, #0, #15
   177b8:	8023      	strh	r3, [r4, #0]
	if (addr) {
   177ba:	b955      	cbnz	r5, 177d2 <bt_mesh_va_del+0x3e>
	store->changed = 1U;
   177bc:	7863      	ldrb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   177be:	2009      	movs	r0, #9
	store->changed = 1U;
   177c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   177c4:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   177c6:	f004 fad9 	bl	1bd7c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   177ca:	2000      	movs	r0, #0
}
   177cc:	e000      	b.n	177d0 <bt_mesh_va_del+0x3c>
		return STATUS_CANNOT_REMOVE;
   177ce:	200c      	movs	r0, #12
}
   177d0:	bd38      	pop	{r3, r4, r5, pc}
		*addr = va->addr;
   177d2:	8863      	ldrh	r3, [r4, #2]
   177d4:	802b      	strh	r3, [r5, #0]
   177d6:	e7f1      	b.n	177bc <bt_mesh_va_del+0x28>
   177d8:	2000b13c 	.word	0x2000b13c

000177dc <bt_mesh_va_label_get>:
{
   177dc:	b510      	push	{r4, lr}
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   177de:	4906      	ldr	r1, [pc, #24]	; (177f8 <bt_mesh_va_label_get+0x1c>)
{
   177e0:	4602      	mov	r2, r0
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   177e2:	880b      	ldrh	r3, [r1, #0]
   177e4:	884c      	ldrh	r4, [r1, #2]
   177e6:	f3c3 000e 	ubfx	r0, r3, #0, #15
   177ea:	b118      	cbz	r0, 177f4 <bt_mesh_va_label_get+0x18>
			return virtual_addrs[i].uuid;
   177ec:	1d08      	adds	r0, r1, #4
   177ee:	4294      	cmp	r4, r2
   177f0:	bf18      	it	ne
   177f2:	2000      	movne	r0, #0
}
   177f4:	bd10      	pop	{r4, pc}
   177f6:	bf00      	nop
   177f8:	2000b13c 	.word	0x2000b13c

000177fc <bt_mesh_trans_send>:
{
   177fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17800:	b08a      	sub	sp, #40	; 0x28
   17802:	4698      	mov	r8, r3
	if (msg->len < 1) {
   17804:	888b      	ldrh	r3, [r1, #4]
{
   17806:	4604      	mov	r4, r0
   17808:	460d      	mov	r5, r1
   1780a:	4616      	mov	r6, r2
   1780c:	af02      	add	r7, sp, #8
	if (msg->len < 1) {
   1780e:	b96b      	cbnz	r3, 1782c <bt_mesh_trans_send+0x30>
		LOG_ERR("Zero-length SDU not allowed");
   17810:	4b5a      	ldr	r3, [pc, #360]	; (1797c <bt_mesh_trans_send+0x180>)
		LOG_ERR("Insufficient tailroom for Transport MIC");
   17812:	61fb      	str	r3, [r7, #28]
   17814:	2302      	movs	r3, #2
   17816:	485a      	ldr	r0, [pc, #360]	; (17980 <bt_mesh_trans_send+0x184>)
   17818:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1781c:	61bb      	str	r3, [r7, #24]
   1781e:	f107 0218 	add.w	r2, r7, #24
   17822:	f014 ff70 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17826:	f06f 0015 	mvn.w	r0, #21
   1782a:	e012      	b.n	17852 <bt_mesh_trans_send+0x56>
	if (msg->len > BT_MESH_TX_SDU_MAX - BT_MESH_MIC_SHORT) {
   1782c:	2b74      	cmp	r3, #116	; 0x74
   1782e:	d914      	bls.n	1785a <bt_mesh_trans_send+0x5e>
		LOG_ERR("Message too big: %u", msg->len);
   17830:	466c      	mov	r4, sp
   17832:	b088      	sub	sp, #32
   17834:	aa02      	add	r2, sp, #8
   17836:	4953      	ldr	r1, [pc, #332]	; (17984 <bt_mesh_trans_send+0x188>)
   17838:	4851      	ldr	r0, [pc, #324]	; (17980 <bt_mesh_trans_send+0x184>)
   1783a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1783e:	2303      	movs	r3, #3
   17840:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17844:	f842 3f10 	str.w	r3, [r2, #16]!
   17848:	f014 ff5d 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1784c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   17850:	46a5      	mov	sp, r4
}
   17852:	3720      	adds	r7, #32
   17854:	46bd      	mov	sp, r7
   17856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < BT_MESH_MIC_SHORT) {
   1785a:	4608      	mov	r0, r1
   1785c:	f016 fb35 	bl	2deca <net_buf_simple_tailroom>
   17860:	2803      	cmp	r0, #3
   17862:	d801      	bhi.n	17868 <bt_mesh_trans_send+0x6c>
		LOG_ERR("Insufficient tailroom for Transport MIC");
   17864:	4b48      	ldr	r3, [pc, #288]	; (17988 <bt_mesh_trans_send+0x18c>)
   17866:	e7d4      	b.n	17812 <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   17868:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1786c:	f899 300b 	ldrb.w	r3, [r9, #11]
   17870:	2bff      	cmp	r3, #255	; 0xff
   17872:	d116      	bne.n	178a2 <bt_mesh_trans_send+0xa6>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   17874:	f7fd f920 	bl	14ab8 <bt_mesh_default_ttl_get>
   17878:	f889 000b 	strb.w	r0, [r9, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
   1787c:	88ab      	ldrh	r3, [r5, #4]
   1787e:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
   17880:	bf82      	ittt	hi
   17882:	2201      	movhi	r2, #1
   17884:	6863      	ldrhi	r3, [r4, #4]
   17886:	729a      	strbhi	r2, [r3, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   17888:	6860      	ldr	r0, [r4, #4]
   1788a:	8883      	ldrh	r3, [r0, #4]
   1788c:	b13b      	cbz	r3, 1789e <bt_mesh_trans_send+0xa2>
   1788e:	b21b      	sxth	r3, r3
   17890:	2b00      	cmp	r3, #0
   17892:	dc0a      	bgt.n	178aa <bt_mesh_trans_send+0xae>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
   17894:	8843      	ldrh	r3, [r0, #2]
   17896:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
   17898:	b29b      	uxth	r3, r3
   1789a:	2b01      	cmp	r3, #1
   1789c:	d805      	bhi.n	178aa <bt_mesh_trans_send+0xae>
		LOG_ERR("Invalid destination address");
   1789e:	4b3b      	ldr	r3, [pc, #236]	; (1798c <bt_mesh_trans_send+0x190>)
   178a0:	e7b7      	b.n	17812 <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   178a2:	061b      	lsls	r3, r3, #24
   178a4:	d5ea      	bpl.n	1787c <bt_mesh_trans_send+0x80>
		LOG_ERR("TTL too large (max 127)");
   178a6:	4b3a      	ldr	r3, [pc, #232]	; (17990 <bt_mesh_trans_send+0x194>)
   178a8:	e7b3      	b.n	17812 <bt_mesh_trans_send+0x16>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
   178aa:	4621      	mov	r1, r4
   178ac:	1cfb      	adds	r3, r7, #3
   178ae:	1d3a      	adds	r2, r7, #4
   178b0:	f7ff f98e 	bl	16bd0 <bt_mesh_keys_resolve>
	if (err) {
   178b4:	2800      	cmp	r0, #0
   178b6:	d1cc      	bne.n	17852 <bt_mesh_trans_send+0x56>
	tx->xmit = bt_mesh_net_transmit_get();
   178b8:	f7fd f93e 	bl	14b38 <bt_mesh_net_transmit_get>
	tx->aid = aid;
   178bc:	7ae3      	ldrb	r3, [r4, #11]
   178be:	78fa      	ldrb	r2, [r7, #3]
	tx->xmit = bt_mesh_net_transmit_get();
   178c0:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
   178c2:	f362 0387 	bfi	r3, r2, #2, #6
   178c6:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
   178c8:	6863      	ldr	r3, [r4, #4]
   178ca:	f893 a00a 	ldrb.w	sl, [r3, #10]
   178ce:	f1ba 0f00 	cmp.w	sl, #0
   178d2:	d008      	beq.n	178e6 <bt_mesh_trans_send+0xea>
   178d4:	4628      	mov	r0, r5
   178d6:	f016 faf8 	bl	2deca <net_buf_simple_tailroom>
   178da:	2807      	cmp	r0, #7
   178dc:	bf94      	ite	ls
   178de:	f04f 0a00 	movls.w	sl, #0
   178e2:	f04f 0a01 	movhi.w	sl, #1
   178e6:	7ae3      	ldrb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
   178e8:	2214      	movs	r2, #20
   178ea:	f36a 0341 	bfi	r3, sl, #1, #1
   178ee:	72e3      	strb	r3, [r4, #11]
   178f0:	2100      	movs	r1, #0
   178f2:	f107 0008 	add.w	r0, r7, #8
	err = trans_encrypt(tx, key, msg);
   178f6:	f8d7 9004 	ldr.w	r9, [r7, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
   178fa:	f012 fe19 	bl	2a530 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   178fe:	6862      	ldr	r2, [r4, #4]
   17900:	8853      	ldrh	r3, [r2, #2]
	struct bt_mesh_app_crypto_ctx crypto = {
   17902:	f887 a009 	strb.w	sl, [r7, #9]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   17906:	3303      	adds	r3, #3
   17908:	b29b      	uxth	r3, r3
   1790a:	2b01      	cmp	r3, #1
   1790c:	bf8c      	ite	hi
   1790e:	2300      	movhi	r3, #0
   17910:	2301      	movls	r3, #1
   17912:	723b      	strb	r3, [r7, #8]
	struct bt_mesh_app_crypto_ctx crypto = {
   17914:	8923      	ldrh	r3, [r4, #8]
   17916:	817b      	strh	r3, [r7, #10]
		.dst = tx->ctx->addr,
   17918:	8893      	ldrh	r3, [r2, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
   1791a:	81bb      	strh	r3, [r7, #12]
		.seq_num = bt_mesh.seq,
   1791c:	4b1d      	ldr	r3, [pc, #116]	; (17994 <bt_mesh_trans_send+0x198>)
	struct bt_mesh_app_crypto_ctx crypto = {
   1791e:	685a      	ldr	r2, [r3, #4]
   17920:	613a      	str	r2, [r7, #16]
		.iv_index = BT_MESH_NET_IVI_TX,
   17922:	f853 2b08 	ldr.w	r2, [r3], #8
   17926:	e8d3 3faf 	lda	r3, [r3]
   1792a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1792e:	1ad3      	subs	r3, r2, r3
	struct bt_mesh_app_crypto_ctx crypto = {
   17930:	617b      	str	r3, [r7, #20]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
   17932:	6863      	ldr	r3, [r4, #4]
   17934:	8898      	ldrh	r0, [r3, #4]
   17936:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1793a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1793e:	d202      	bcs.n	17946 <bt_mesh_trans_send+0x14a>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
   17940:	f7ff ff4c 	bl	177dc <bt_mesh_va_label_get>
   17944:	61b8      	str	r0, [r7, #24]
	return bt_mesh_app_encrypt(key, &crypto, msg);
   17946:	462a      	mov	r2, r5
   17948:	4648      	mov	r0, r9
   1794a:	f107 0108 	add.w	r1, r7, #8
   1794e:	f015 f8c1 	bl	2cad4 <bt_mesh_app_encrypt>
	if (err) {
   17952:	2800      	cmp	r0, #0
   17954:	f47f af7d 	bne.w	17852 <bt_mesh_trans_send+0x56>
	if (tx->ctx->send_rel) {
   17958:	6863      	ldr	r3, [r4, #4]
   1795a:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
   1795c:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
   1795e:	b133      	cbz	r3, 1796e <bt_mesh_trans_send+0x172>
		err = send_seg(tx, msg, cb, cb_data, NULL);
   17960:	4643      	mov	r3, r8
   17962:	4632      	mov	r2, r6
   17964:	4629      	mov	r1, r5
   17966:	4620      	mov	r0, r4
   17968:	f7ff fcb2 	bl	172d0 <send_seg>
   1796c:	e771      	b.n	17852 <bt_mesh_trans_send+0x56>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
   1796e:	4643      	mov	r3, r8
   17970:	4632      	mov	r2, r6
   17972:	4629      	mov	r1, r5
   17974:	4620      	mov	r0, r4
   17976:	f7ff fc21 	bl	171bc <send_unseg>
   1797a:	e76a      	b.n	17852 <bt_mesh_trans_send+0x56>
   1797c:	00032e19 	.word	0x00032e19
   17980:	0002fd24 	.word	0x0002fd24
   17984:	00032e35 	.word	0x00032e35
   17988:	00032e49 	.word	0x00032e49
   1798c:	00032dfd 	.word	0x00032dfd
   17990:	00032de5 	.word	0x00032de5
   17994:	20009ec8 	.word	0x20009ec8

00017998 <sdu_recv>:
{
   17998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1799c:	460e      	mov	r6, r1
   1799e:	4692      	mov	sl, r2
	struct decrypt_ctx ctx = {
   179a0:	220e      	movs	r2, #14
{
   179a2:	4604      	mov	r4, r0
			.dev_key = !AKF(&hdr),
   179a4:	ea6f 1596 	mvn.w	r5, r6, lsr #6
{
   179a8:	b08a      	sub	sp, #40	; 0x28
	struct decrypt_ctx ctx = {
   179aa:	2100      	movs	r1, #0
{
   179ac:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
   179b0:	eb0d 0002 	add.w	r0, sp, r2
{
   179b4:	4699      	mov	r9, r3
	struct decrypt_ctx ctx = {
   179b6:	f012 fdbb 	bl	2a530 <memset>
   179ba:	8923      	ldrh	r3, [r4, #8]
			.dst = rx->ctx.recv_dst,
   179bc:	8960      	ldrh	r0, [r4, #10]
			.dev_key = !AKF(&hdr),
   179be:	f005 0501 	and.w	r5, r5, #1
	struct decrypt_ctx ctx = {
   179c2:	f88d 5008 	strb.w	r5, [sp, #8]
   179c6:	f88d a009 	strb.w	sl, [sp, #9]
   179ca:	f8ad 300a 	strh.w	r3, [sp, #10]
   179ce:	f8ad 000c 	strh.w	r0, [sp, #12]
   179d2:	f1b8 0f00 	cmp.w	r8, #0
   179d6:	d02f      	beq.n	17a38 <sdu_recv+0xa0>
   179d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   179dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   179e0:	4b16      	ldr	r3, [pc, #88]	; (17a3c <sdu_recv+0xa4>)
	struct decrypt_ctx ctx = {
   179e2:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   179e4:	7d22      	ldrb	r2, [r4, #20]
   179e6:	681b      	ldr	r3, [r3, #0]
   179e8:	f002 0101 	and.w	r1, r2, #1
   179ec:	1a5b      	subs	r3, r3, r1
	struct decrypt_ctx ctx = {
   179ee:	9305      	str	r3, [sp, #20]
	if (!rx->local_match) {
   179f0:	0653      	lsls	r3, r2, #25
	struct decrypt_ctx ctx = {
   179f2:	e9cd 9707 	strd	r9, r7, [sp, #28]
   179f6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	if (!rx->local_match) {
   179fa:	d519      	bpl.n	17a30 <sdu_recv+0x98>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
   179fc:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   17a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17a04:	d202      	bcs.n	17a0c <sdu_recv+0x74>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
   17a06:	f7ff fee9 	bl	177dc <bt_mesh_va_label_get>
   17a0a:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   17a0c:	ab02      	add	r3, sp, #8
   17a0e:	9300      	str	r3, [sp, #0]
   17a10:	4622      	mov	r2, r4
   17a12:	4b0b      	ldr	r3, [pc, #44]	; (17a40 <sdu_recv+0xa8>)
   17a14:	4628      	mov	r0, r5
   17a16:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   17a1a:	f7ff f91d 	bl	16c58 <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   17a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17a22:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   17a24:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   17a26:	d003      	beq.n	17a30 <sdu_recv+0x98>
	bt_mesh_model_recv(rx, sdu);
   17a28:	4639      	mov	r1, r7
   17a2a:	4620      	mov	r0, r4
   17a2c:	f001 fd6a 	bl	19504 <bt_mesh_model_recv>
}
   17a30:	2000      	movs	r0, #0
   17a32:	b00a      	add	sp, #40	; 0x28
   17a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct decrypt_ctx ctx = {
   17a38:	6922      	ldr	r2, [r4, #16]
   17a3a:	e7d1      	b.n	179e0 <sdu_recv+0x48>
   17a3c:	20009ec8 	.word	0x20009ec8
   17a40:	0002c68f 	.word	0x0002c68f

00017a44 <bt_mesh_trans_recv>:
{
   17a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a48:	b099      	sub	sp, #100	; 0x64
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   17a4a:	f04f 32ff 	mov.w	r2, #4294967295
   17a4e:	f04f 33ff 	mov.w	r3, #4294967295
{
   17a52:	af04      	add	r7, sp, #16
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   17a54:	e9c7 2308 	strd	r2, r3, [r7, #32]
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   17a58:	680b      	ldr	r3, [r1, #0]
{
   17a5a:	460c      	mov	r4, r1
   17a5c:	4606      	mov	r6, r0
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   17a5e:	8949      	ldrh	r1, [r1, #10]
   17a60:	8c18      	ldrh	r0, [r3, #32]
   17a62:	f005 fae5 	bl	1d030 <bt_mesh_friend_match>
   17a66:	7d23      	ldrb	r3, [r4, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   17a68:	2109      	movs	r1, #9
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   17a6a:	f360 13c7 	bfi	r3, r0, #7, #1
   17a6e:	7523      	strb	r3, [r4, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   17a70:	4630      	mov	r0, r6
   17a72:	f008 fc39 	bl	202e8 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
   17a76:	4630      	mov	r0, r6
   17a78:	f016 fa23 	bl	2dec2 <net_buf_simple_headroom>
	state->len = buf->len;
   17a7c:	88b3      	ldrh	r3, [r6, #4]
	if (SEG(buf->data)) {
   17a7e:	f8d6 b000 	ldr.w	fp, [r6]
   17a82:	617b      	str	r3, [r7, #20]
   17a84:	f99b 3000 	ldrsb.w	r3, [fp]
	state->offset = net_buf_simple_headroom(buf);
   17a88:	6078      	str	r0, [r7, #4]
   17a8a:	2b00      	cmp	r3, #0
   17a8c:	f280 829d 	bge.w	17fca <bt_mesh_trans_recv+0x586>
		if (!rx->local_match && !rx->friend_match) {
   17a90:	7d23      	ldrb	r3, [r4, #20]
   17a92:	2b3f      	cmp	r3, #63	; 0x3f
   17a94:	d805      	bhi.n	17aa2 <bt_mesh_trans_recv+0x5e>
			return 0;
   17a96:	2500      	movs	r5, #0
}
   17a98:	4628      	mov	r0, r5
   17a9a:	3754      	adds	r7, #84	; 0x54
   17a9c:	46bd      	mov	sp, r7
   17a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_mesh_rpl *rpl = NULL;
   17aa2:	f04f 0900 	mov.w	r9, #0
	if (buf->len < 5) {
   17aa6:	697b      	ldr	r3, [r7, #20]
	struct bt_mesh_rpl *rpl = NULL;
   17aa8:	f8c7 901c 	str.w	r9, [r7, #28]
	if (buf->len < 5) {
   17aac:	2b04      	cmp	r3, #4
   17aae:	d814      	bhi.n	17ada <bt_mesh_trans_recv+0x96>
		LOG_ERR("Too short segmented message (len %u)", buf->len);
   17ab0:	466d      	mov	r5, sp
   17ab2:	b088      	sub	sp, #32
   17ab4:	aa04      	add	r2, sp, #16
   17ab6:	4b9d      	ldr	r3, [pc, #628]	; (17d2c <bt_mesh_trans_recv+0x2e8>)
   17ab8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17abc:	6153      	str	r3, [r2, #20]
   17abe:	697b      	ldr	r3, [r7, #20]
   17ac0:	489b      	ldr	r0, [pc, #620]	; (17d30 <bt_mesh_trans_recv+0x2ec>)
   17ac2:	6193      	str	r3, [r2, #24]
   17ac4:	2303      	movs	r3, #3
   17ac6:	f842 3f10 	str.w	r3, [r2, #16]!
   17aca:	f014 fe1c 	bl	2c706 <z_log_msg_static_create.constprop.0>
   17ace:	46ad      	mov	sp, r5
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17ad0:	f04f 0800 	mov.w	r8, #0
		return -EINVAL;
   17ad4:	f06f 0515 	mvn.w	r5, #21
   17ad8:	e0b7      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
   17ada:	4620      	mov	r0, r4
   17adc:	f107 011c 	add.w	r1, r7, #28
   17ae0:	f004 faaa 	bl	1c038 <bt_mesh_rpl_check>
   17ae4:	4682      	mov	sl, r0
   17ae6:	2800      	cmp	r0, #0
   17ae8:	d1f2      	bne.n	17ad0 <bt_mesh_trans_recv+0x8c>
	net_buf_simple_pull(buf, 1);
   17aea:	2101      	movs	r1, #1
   17aec:	4630      	mov	r0, r6
   17aee:	f008 fbfb 	bl	202e8 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
   17af2:	4630      	mov	r0, r6
   17af4:	f016 f9d2 	bl	2de9c <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
   17af8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   17afc:	f3c0 098c 	ubfx	r9, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
   17b00:	4630      	mov	r0, r6
   17b02:	f016 f9bb 	bl	2de7c <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
   17b06:	f008 0818 	and.w	r8, r8, #24
	seg_o |= seg_n >> 5;
   17b0a:	ea48 1850 	orr.w	r8, r8, r0, lsr #5
   17b0e:	fa5f f888 	uxtb.w	r8, r8
	seg_n &= 0x1f;
   17b12:	f000 051f 	and.w	r5, r0, #31
	if (seg_o > seg_n) {
   17b16:	45a8      	cmp	r8, r5
	seg_n = net_buf_simple_pull_u8(buf);
   17b18:	6138      	str	r0, [r7, #16]
	if (seg_o > seg_n) {
   17b1a:	d911      	bls.n	17b40 <bt_mesh_trans_recv+0xfc>
		LOG_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
   17b1c:	46e9      	mov	r9, sp
   17b1e:	b088      	sub	sp, #32
   17b20:	aa04      	add	r2, sp, #16
   17b22:	4b84      	ldr	r3, [pc, #528]	; (17d34 <bt_mesh_trans_recv+0x2f0>)
   17b24:	61d5      	str	r5, [r2, #28]
   17b26:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17b2a:	2304      	movs	r3, #4
   17b2c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17b30:	487f      	ldr	r0, [pc, #508]	; (17d30 <bt_mesh_trans_recv+0x2ec>)
   17b32:	f842 3f10 	str.w	r3, [r2, #16]!
   17b36:	f014 fde6 	bl	2c706 <z_log_msg_static_create.constprop.0>
   17b3a:	46cd      	mov	sp, r9
	uint8_t seg_count = 0;
   17b3c:	46d1      	mov	r9, sl
   17b3e:	e7c7      	b.n	17ad0 <bt_mesh_trans_recv+0x8c>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   17b40:	6923      	ldr	r3, [r4, #16]
   17b42:	4a7d      	ldr	r2, [pc, #500]	; (17d38 <bt_mesh_trans_recv+0x2f4>)
   17b44:	7d21      	ldrb	r1, [r4, #20]
   17b46:	eba3 0909 	sub.w	r9, r3, r9
   17b4a:	6812      	ldr	r2, [r2, #0]
		if (rx->seq_auth >= *seq_auth) {
   17b4c:	487b      	ldr	r0, [pc, #492]	; (17d3c <bt_mesh_trans_recv+0x2f8>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   17b4e:	f001 0101 	and.w	r1, r1, #1
   17b52:	f3c9 090c 	ubfx	r9, r9, #0, #13
   17b56:	1a52      	subs	r2, r2, r1
   17b58:	eba3 0309 	sub.w	r3, r3, r9
   17b5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		if (rx->in_use) {
   17b60:	f890 c01f 	ldrb.w	ip, [r0, #31]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   17b64:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	auth_seqnum = *seq_auth & BIT_MASK(24);
   17b68:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   17b6c:	60fa      	str	r2, [r7, #12]
		if (rx->seq_auth >= *seq_auth) {
   17b6e:	e9d0 a204 	ldrd	sl, r2, [r0, #16]
   17b72:	60ba      	str	r2, [r7, #8]
		if (rx->in_use) {
   17b74:	f00c 0240 	and.w	r2, ip, #64	; 0x40
		if (rx->src != net_rx->ctx.addr ||
   17b78:	68a1      	ldr	r1, [r4, #8]
		if (rx->in_use) {
   17b7a:	603a      	str	r2, [r7, #0]
		if (rx->src != net_rx->ctx.addr ||
   17b7c:	6982      	ldr	r2, [r0, #24]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   17b7e:	e9c7 3e08 	strd	r3, lr, [r7, #32]
		if (rx->src != net_rx->ctx.addr ||
   17b82:	428a      	cmp	r2, r1
	*seg_count = seg_n + 1;
   17b84:	f105 0901 	add.w	r9, r5, #1
		if (rx->src != net_rx->ctx.addr ||
   17b88:	d10a      	bne.n	17ba0 <bt_mesh_trans_recv+0x15c>
		if (rx->seq_auth >= *seq_auth) {
   17b8a:	68ba      	ldr	r2, [r7, #8]
   17b8c:	459a      	cmp	sl, r3
   17b8e:	eb72 020e 	sbcs.w	r2, r2, lr
   17b92:	f080 826c 	bcs.w	1806e <bt_mesh_trans_recv+0x62a>
		if (rx->in_use) {
   17b96:	683b      	ldr	r3, [r7, #0]
   17b98:	b113      	cbz	r3, 17ba0 <bt_mesh_trans_recv+0x15c>
			seg_rx_reset(rx, true);
   17b9a:	2101      	movs	r1, #1
   17b9c:	f7ff f8b2 	bl	16d04 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
   17ba0:	2d02      	cmp	r5, #2
   17ba2:	d974      	bls.n	17c8e <bt_mesh_trans_recv+0x24a>
		LOG_ERR("Too big incoming SDU length");
   17ba4:	4b66      	ldr	r3, [pc, #408]	; (17d40 <bt_mesh_trans_recv+0x2fc>)
   17ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   17bac:	2302      	movs	r3, #2
   17bae:	4860      	ldr	r0, [pc, #384]	; (17d30 <bt_mesh_trans_recv+0x2ec>)
   17bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   17bb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
   17bb6:	f014 fda6 	bl	2c706 <z_log_msg_static_create.constprop.0>
			 net_rx->friend_match);
   17bba:	7d20      	ldrb	r0, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   17bbc:	7be3      	ldrb	r3, [r4, #15]
   17bbe:	09c0      	lsrs	r0, r0, #7
   17bc0:	8922      	ldrh	r2, [r4, #8]
   17bc2:	8961      	ldrh	r1, [r4, #10]
   17bc4:	9002      	str	r0, [sp, #8]
   17bc6:	2000      	movs	r0, #0
   17bc8:	9001      	str	r0, [sp, #4]
   17bca:	f107 0020 	add.w	r0, r7, #32
   17bce:	9000      	str	r0, [sp, #0]
   17bd0:	6820      	ldr	r0, [r4, #0]
   17bd2:	f014 fdac 	bl	2c72e <send_ack.isra.0>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17bd6:	f04f 0800 	mov.w	r8, #0
		return -EMSGSIZE;
   17bda:	f06f 0579 	mvn.w	r5, #121	; 0x79
   17bde:	e034      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->ctx.recv_dst) {
   17be0:	6982      	ldr	r2, [r0, #24]
   17be2:	68a3      	ldr	r3, [r4, #8]
   17be4:	429a      	cmp	r2, r3
   17be6:	d001      	beq.n	17bec <bt_mesh_trans_recv+0x1a8>
		LOG_ERR("Invalid source or destination for segment");
   17be8:	4b56      	ldr	r3, [pc, #344]	; (17d44 <bt_mesh_trans_recv+0x300>)
   17bea:	e251      	b.n	18090 <bt_mesh_trans_recv+0x64c>
	if (rx->ctl != net_rx->ctl) {
   17bec:	f890 e01f 	ldrb.w	lr, [r0, #31]
   17bf0:	7d23      	ldrb	r3, [r4, #20]
   17bf2:	f3ce 1240 	ubfx	r2, lr, #5, #1
   17bf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   17bfa:	429a      	cmp	r2, r3
   17bfc:	d001      	beq.n	17c02 <bt_mesh_trans_recv+0x1be>
		LOG_ERR("Inconsistent CTL in segment");
   17bfe:	4b52      	ldr	r3, [pc, #328]	; (17d48 <bt_mesh_trans_recv+0x304>)
   17c00:	e246      	b.n	18090 <bt_mesh_trans_recv+0x64c>
		if (rx->in_use) {
   17c02:	f01e 0f40 	tst.w	lr, #64	; 0x40
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   17c06:	6a43      	ldr	r3, [r0, #36]	; 0x24
		if (rx->in_use) {
   17c08:	f040 80d1 	bne.w	17dae <bt_mesh_trans_recv+0x36a>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   17c0c:	2001      	movs	r0, #1
   17c0e:	f10c 0c01 	add.w	ip, ip, #1
   17c12:	fa00 f00c 	lsl.w	r0, r0, ip
   17c16:	3801      	subs	r0, #1
   17c18:	4298      	cmp	r0, r3
   17c1a:	f47f af59 	bne.w	17ad0 <bt_mesh_trans_recv+0x8c>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   17c1e:	ea4f 15de 	mov.w	r5, lr, lsr #7
   17c22:	7be3      	ldrb	r3, [r4, #15]
   17c24:	8922      	ldrh	r2, [r4, #8]
   17c26:	8961      	ldrh	r1, [r4, #10]
   17c28:	e9cd 0501 	strd	r0, r5, [sp, #4]
   17c2c:	f107 0020 	add.w	r0, r7, #32
   17c30:	9000      	str	r0, [sp, #0]
   17c32:	6820      	ldr	r0, [r4, #0]
   17c34:	f014 fd7b 	bl	2c72e <send_ack.isra.0>
			if (rpl) {
   17c38:	69f8      	ldr	r0, [r7, #28]
   17c3a:	b110      	cbz	r0, 17c42 <bt_mesh_trans_recv+0x1fe>
				bt_mesh_rpl_update(rpl, net_rx);
   17c3c:	4621      	mov	r1, r4
   17c3e:	f015 fdbc 	bl	2d7ba <bt_mesh_rpl_update>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17c42:	f04f 0800 	mov.w	r8, #0
			return -EALREADY;
   17c46:	f06f 0577 	mvn.w	r5, #119	; 0x77
	buf->data = buf->__buf + state->offset;
   17c4a:	68b3      	ldr	r3, [r6, #8]
   17c4c:	687a      	ldr	r2, [r7, #4]
   17c4e:	fa13 f382 	uxtah	r3, r3, r2
   17c52:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
   17c54:	697b      	ldr	r3, [r7, #20]
   17c56:	80b3      	strh	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
   17c58:	f994 3014 	ldrsb.w	r3, [r4, #20]
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	f6bf af1b 	bge.w	17a98 <bt_mesh_trans_recv+0x54>
   17c62:	2d00      	cmp	r5, #0
   17c64:	f47f af18 	bne.w	17a98 <bt_mesh_trans_recv+0x54>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
   17c68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   17c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   17c70:	bf08      	it	eq
   17c72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
   17c76:	4641      	mov	r1, r8
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
   17c78:	464b      	mov	r3, r9
   17c7a:	bf08      	it	eq
   17c7c:	462a      	moveq	r2, r5
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
   17c7e:	4620      	mov	r0, r4
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
   17c80:	9600      	str	r6, [sp, #0]
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
   17c82:	bf18      	it	ne
   17c84:	f107 0220 	addne.w	r2, r7, #32
   17c88:	f005 fa1e 	bl	1d0c8 <bt_mesh_friend_enqueue_rx>
   17c8c:	e703      	b.n	17a96 <bt_mesh_trans_recv+0x52>
	    net_rx->friend_match && !net_rx->local_match &&
   17c8e:	7d23      	ldrb	r3, [r4, #20]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   17c90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17c94:	2b80      	cmp	r3, #128	; 0x80
   17c96:	d12d      	bne.n	17cf4 <bt_mesh_trans_recv+0x2b0>
	    !bt_mesh_friend_queue_has_space(net_rx->sub->net_idx,
   17c98:	6823      	ldr	r3, [r4, #0]
   17c9a:	f107 0a20 	add.w	sl, r7, #32
   17c9e:	8c18      	ldrh	r0, [r3, #32]
   17ca0:	8962      	ldrh	r2, [r4, #10]
   17ca2:	8921      	ldrh	r1, [r4, #8]
   17ca4:	4653      	mov	r3, sl
   17ca6:	f8cd 9000 	str.w	r9, [sp]
   17caa:	f005 f9d3 	bl	1d054 <bt_mesh_friend_queue_has_space>
	    net_rx->friend_match && !net_rx->local_match &&
   17cae:	bb08      	cbnz	r0, 17cf4 <bt_mesh_trans_recv+0x2b0>
		LOG_ERR("No space in Friend Queue for %u segments", *seg_count);
   17cb0:	466d      	mov	r5, sp
   17cb2:	b088      	sub	sp, #32
   17cb4:	6138      	str	r0, [r7, #16]
   17cb6:	aa04      	add	r2, sp, #16
   17cb8:	4924      	ldr	r1, [pc, #144]	; (17d4c <bt_mesh_trans_recv+0x308>)
   17cba:	481d      	ldr	r0, [pc, #116]	; (17d30 <bt_mesh_trans_recv+0x2ec>)
   17cbc:	e9c2 1905 	strd	r1, r9, [r2, #20]
   17cc0:	2103      	movs	r1, #3
   17cc2:	f842 1f10 	str.w	r1, [r2, #16]!
   17cc6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17cca:	f014 fd1c 	bl	2c706 <z_log_msg_static_create.constprop.0>
   17cce:	46ad      	mov	sp, r5
			 net_rx->friend_match);
   17cd0:	7d20      	ldrb	r0, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   17cd2:	7be5      	ldrb	r5, [r4, #15]
   17cd4:	09c0      	lsrs	r0, r0, #7
   17cd6:	8922      	ldrh	r2, [r4, #8]
   17cd8:	8961      	ldrh	r1, [r4, #10]
   17cda:	9002      	str	r0, [sp, #8]
   17cdc:	693b      	ldr	r3, [r7, #16]
   17cde:	e9cd a300 	strd	sl, r3, [sp]
   17ce2:	462b      	mov	r3, r5
   17ce4:	6820      	ldr	r0, [r4, #0]
   17ce6:	f014 fd22 	bl	2c72e <send_ack.isra.0>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17cea:	f04f 0800 	mov.w	r8, #0
		return -ENOBUFS;
   17cee:	f06f 0568 	mvn.w	r5, #104	; 0x68
   17cf2:	e7aa      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (rpl && rpl->src && auth_seqnum <= rpl->seg &&
   17cf4:	69fb      	ldr	r3, [r7, #28]
   17cf6:	b17b      	cbz	r3, 17d18 <bt_mesh_trans_recv+0x2d4>
   17cf8:	881a      	ldrh	r2, [r3, #0]
   17cfa:	f3c2 020e 	ubfx	r2, r2, #0, #15
   17cfe:	b15a      	cbz	r2, 17d18 <bt_mesh_trans_recv+0x2d4>
   17d00:	685a      	ldr	r2, [r3, #4]
   17d02:	68f9      	ldr	r1, [r7, #12]
   17d04:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
   17d08:	d806      	bhi.n	17d18 <bt_mesh_trans_recv+0x2d4>
   17d0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17d0e:	2b00      	cmp	r3, #0
   17d10:	da97      	bge.n	17c42 <bt_mesh_trans_recv+0x1fe>
	    (!rpl->old_iv || net_rx->old_iv)) {
   17d12:	7d23      	ldrb	r3, [r4, #20]
   17d14:	07da      	lsls	r2, r3, #31
   17d16:	d494      	bmi.n	17c42 <bt_mesh_trans_recv+0x1fe>
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
   17d18:	4b0d      	ldr	r3, [pc, #52]	; (17d50 <bt_mesh_trans_recv+0x30c>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
   17d1a:	68da      	ldr	r2, [r3, #12]
   17d1c:	69db      	ldr	r3, [r3, #28]
   17d1e:	429a      	cmp	r2, r3
   17d20:	d118      	bne.n	17d54 <bt_mesh_trans_recv+0x310>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   17d22:	f04f 0800 	mov.w	r8, #0
		return -ENOMEM;
   17d26:	f06f 050b 	mvn.w	r5, #11
   17d2a:	e78e      	b.n	17c4a <bt_mesh_trans_recv+0x206>
   17d2c:	00032e71 	.word	0x00032e71
   17d30:	0002fd24 	.word	0x0002fd24
   17d34:	00032e96 	.word	0x00032e96
   17d38:	20009ec8 	.word	0x20009ec8
   17d3c:	2000a108 	.word	0x2000a108
   17d40:	00032f21 	.word	0x00032f21
   17d44:	00032edb 	.word	0x00032edb
   17d48:	00032f05 	.word	0x00032f05
   17d4c:	00032f3d 	.word	0x00032f3d
   17d50:	20008e0c 	.word	0x20008e0c
		if (rx->in_use) {
   17d54:	49b5      	ldr	r1, [pc, #724]	; (1802c <bt_mesh_trans_recv+0x5e8>)
   17d56:	7fcb      	ldrb	r3, [r1, #31]
   17d58:	f013 0040 	ands.w	r0, r3, #64	; 0x40
   17d5c:	d1e1      	bne.n	17d22 <bt_mesh_trans_recv+0x2de>
		rx->in_use = 1U;
   17d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17d62:	77cb      	strb	r3, [r1, #31]
		rx->sub = net_rx->sub;
   17d64:	6823      	ldr	r3, [r4, #0]
		rx->ctl = net_rx->ctl;
   17d66:	f894 c014 	ldrb.w	ip, [r4, #20]
		rx->sub = net_rx->sub;
   17d6a:	600b      	str	r3, [r1, #0]
		rx->seq_auth = *seq_auth;
   17d6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   17d70:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rx->seg_n = seg_n;
   17d74:	693b      	ldr	r3, [r7, #16]
   17d76:	7fca      	ldrb	r2, [r1, #31]
		rx->ctl = net_rx->ctl;
   17d78:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
		rx->seg_n = seg_n;
   17d7c:	f003 031f 	and.w	r3, r3, #31
   17d80:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   17d84:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
   17d88:	4313      	orrs	r3, r2
   17d8a:	77cb      	strb	r3, [r1, #31]
		rx->hdr = *hdr;
   17d8c:	f89b 3000 	ldrb.w	r3, [fp]
	rx->obo = net_rx->friend_match;
   17d90:	7fca      	ldrb	r2, [r1, #31]
		rx->hdr = *hdr;
   17d92:	778b      	strb	r3, [r1, #30]
		rx->ttl = net_rx->ctx.send_ttl;
   17d94:	7be3      	ldrb	r3, [r4, #15]
   17d96:	f881 3020 	strb.w	r3, [r1, #32]
		rx->src = net_rx->ctx.addr;
   17d9a:	8923      	ldrh	r3, [r4, #8]
   17d9c:	830b      	strh	r3, [r1, #24]
		rx->dst = net_rx->ctx.recv_dst;
   17d9e:	8963      	ldrh	r3, [r4, #10]
		rx->block = 0U;
   17da0:	6248      	str	r0, [r1, #36]	; 0x24
		rx->dst = net_rx->ctx.recv_dst;
   17da2:	834b      	strh	r3, [r1, #26]
	rx->obo = net_rx->friend_match;
   17da4:	7d23      	ldrb	r3, [r4, #20]
   17da6:	09db      	lsrs	r3, r3, #7
   17da8:	f363 12c7 	bfi	r2, r3, #7, #1
   17dac:	77ca      	strb	r2, [r1, #31]
	if (BIT(seg_o) & rx->block) {
   17dae:	f8df a27c 	ldr.w	sl, [pc, #636]	; 1802c <bt_mesh_trans_recv+0x5e8>
   17db2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
   17db6:	fa23 f308 	lsr.w	r3, r3, r8
   17dba:	f013 0301 	ands.w	r3, r3, #1
   17dbe:	613b      	str	r3, [r7, #16]
   17dc0:	f47f af3f 	bne.w	17c42 <bt_mesh_trans_recv+0x1fe>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   17dc4:	f89a 201f 	ldrb.w	r2, [sl, #31]
   17dc8:	88b3      	ldrh	r3, [r6, #4]
   17dca:	f3c2 1240 	ubfx	r2, r2, #5, #1
		return BT_MESH_CTL_SEG_SDU_MAX;
   17dce:	2a00      	cmp	r2, #0
   17dd0:	bf0c      	ite	eq
   17dd2:	220c      	moveq	r2, #12
   17dd4:	2208      	movne	r2, #8
	if (seg_o == seg_n) {
   17dd6:	45a8      	cmp	r8, r5
   17dd8:	d125      	bne.n	17e26 <bt_mesh_trans_recv+0x3e2>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   17dda:	fb02 3308 	mla	r3, r2, r8, r3
   17dde:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   17de0:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   17de2:	f8aa 301c 	strh.w	r3, [sl, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   17de6:	d922      	bls.n	17e2e <bt_mesh_trans_recv+0x3ea>
			LOG_ERR("Too large SDU len");
   17de8:	4b91      	ldr	r3, [pc, #580]	; (18030 <bt_mesh_trans_recv+0x5ec>)
   17dea:	f107 0248 	add.w	r2, r7, #72	; 0x48
   17dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   17df0:	2302      	movs	r3, #2
   17df2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17df6:	64bb      	str	r3, [r7, #72]	; 0x48
   17df8:	488e      	ldr	r0, [pc, #568]	; (18034 <bt_mesh_trans_recv+0x5f0>)
   17dfa:	f014 fc84 	bl	2c706 <z_log_msg_static_create.constprop.0>
				 seq_auth, 0, rx->obo);
   17dfe:	f89a 001f 	ldrb.w	r0, [sl, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   17e02:	8961      	ldrh	r1, [r4, #10]
   17e04:	09c0      	lsrs	r0, r0, #7
   17e06:	7be3      	ldrb	r3, [r4, #15]
   17e08:	8922      	ldrh	r2, [r4, #8]
   17e0a:	9002      	str	r0, [sp, #8]
   17e0c:	6938      	ldr	r0, [r7, #16]
   17e0e:	9001      	str	r0, [sp, #4]
   17e10:	f107 0020 	add.w	r0, r7, #32
   17e14:	9000      	str	r0, [sp, #0]
   17e16:	6820      	ldr	r0, [r4, #0]
   17e18:	f014 fc89 	bl	2c72e <send_ack.isra.0>
			seg_rx_reset(rx, true);
   17e1c:	2101      	movs	r1, #1
   17e1e:	4650      	mov	r0, sl
   17e20:	f7fe ff70 	bl	16d04 <seg_rx_reset>
			return -EMSGSIZE;
   17e24:	e6d7      	b.n	17bd6 <bt_mesh_trans_recv+0x192>
		if (buf->len != seg_len(rx->ctl)) {
   17e26:	429a      	cmp	r2, r3
   17e28:	d001      	beq.n	17e2e <bt_mesh_trans_recv+0x3ea>
			LOG_ERR("Incorrect segment size for message type");
   17e2a:	4b83      	ldr	r3, [pc, #524]	; (18038 <bt_mesh_trans_recv+0x5f4>)
   17e2c:	e130      	b.n	18090 <bt_mesh_trans_recv+0x64c>
	return z_impl_k_uptime_ticks();
   17e2e:	f017 fb9a 	bl	2f566 <z_impl_k_uptime_ticks>
   17e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e36:	fba0 0302 	umull	r0, r3, r0, r2
   17e3a:	fb02 3101 	mla	r1, r2, r1, r3
   17e3e:	0bc0      	lsrs	r0, r0, #15
   17e40:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
	return (uint32_t)k_uptime_get();
   17e44:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
		int32_t timeout = ack_timeout(rx);
   17e48:	f89a 0020 	ldrb.w	r0, [sl, #32]
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   17e4c:	28ff      	cmp	r0, #255	; 0xff
   17e4e:	d101      	bne.n	17e54 <bt_mesh_trans_recv+0x410>
		ttl = bt_mesh_default_ttl_get();
   17e50:	f7fc fe32 	bl	14ab8 <bt_mesh_default_ttl_get>
	to = CONFIG_BT_MESH_SEG_ACK_BASE_TIMEOUT +
   17e54:	2396      	movs	r3, #150	; 0x96
   17e56:	2532      	movs	r5, #50	; 0x32
   17e58:	fb15 3500 	smlabb	r5, r5, r0, r3
	return MAX(to, 400);
   17e5c:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   17e60:	bfb8      	it	lt
   17e62:	f44f 75c8 	movlt.w	r5, #400	; 0x190
   17e66:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   17e6a:	f240 30e7 	movw	r0, #999	; 0x3e7
   17e6e:	2100      	movs	r1, #0
   17e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e74:	fbc5 010c 	smlal	r0, r1, r5, ip
   17e78:	2300      	movs	r3, #0
   17e7a:	f7f0 f96b 	bl	8154 <__aeabi_uldivmod>
   17e7e:	4602      	mov	r2, r0
   17e80:	460b      	mov	r3, r1
		k_work_schedule(&rx->ack, K_MSEC(timeout));
   17e82:	486e      	ldr	r0, [pc, #440]	; (1803c <bt_mesh_trans_recv+0x5f8>)
   17e84:	f00e fb94 	bl	265b0 <k_work_schedule>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
   17e88:	f108 0101 	add.w	r1, r8, #1
   17e8c:	b2c9      	uxtb	r1, r1
   17e8e:	2200      	movs	r2, #0
   17e90:	2300      	movs	r3, #0
   17e92:	486b      	ldr	r0, [pc, #428]	; (18040 <bt_mesh_trans_recv+0x5fc>)
   17e94:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   17e98:	f00d fb20 	bl	254dc <k_mem_slab_alloc>
	if (err) {
   17e9c:	4605      	mov	r5, r0
   17e9e:	2800      	cmp	r0, #0
   17ea0:	f47f af23 	bne.w	17cea <bt_mesh_trans_recv+0x2a6>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
   17ea4:	eb0a 0388 	add.w	r3, sl, r8, lsl #2
   17ea8:	88b2      	ldrh	r2, [r6, #4]
   17eaa:	6831      	ldr	r1, [r6, #0]
   17eac:	6858      	ldr	r0, [r3, #4]
   17eae:	f012 fb34 	bl	2a51a <memcpy>
	rx->block |= BIT(seg_o);
   17eb2:	2201      	movs	r2, #1
   17eb4:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
   17eb8:	fa02 f308 	lsl.w	r3, r2, r8
   17ebc:	430b      	orrs	r3, r1
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   17ebe:	fa02 f109 	lsl.w	r1, r2, r9
   17ec2:	3901      	subs	r1, #1
   17ec4:	428b      	cmp	r3, r1
	rx->block |= BIT(seg_o);
   17ec6:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   17eca:	d17c      	bne.n	17fc6 <bt_mesh_trans_recv+0x582>
	if (rpl) {
   17ecc:	69f8      	ldr	r0, [r7, #28]
   17ece:	b168      	cbz	r0, 17eec <bt_mesh_trans_recv+0x4a8>
		bt_mesh_rpl_update(rpl, net_rx);
   17ed0:	4621      	mov	r1, r4
   17ed2:	f015 fc72 	bl	2d7ba <bt_mesh_rpl_update>
		rpl->seg = MAX(rpl->seg, auth_seqnum);
   17ed6:	69f9      	ldr	r1, [r7, #28]
   17ed8:	68f8      	ldr	r0, [r7, #12]
   17eda:	684b      	ldr	r3, [r1, #4]
   17edc:	f3c3 2217 	ubfx	r2, r3, #8, #24
   17ee0:	4282      	cmp	r2, r0
   17ee2:	bf38      	it	cc
   17ee4:	4602      	movcc	r2, r0
   17ee6:	f362 231f 	bfi	r3, r2, #8, #24
   17eea:	604b      	str	r3, [r1, #4]
	(void)k_work_cancel_delayable(&rx->ack);
   17eec:	4853      	ldr	r0, [pc, #332]	; (1803c <bt_mesh_trans_recv+0x5f8>)
   17eee:	f00e fbc9 	bl	26684 <k_work_cancel_delayable>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
   17ef2:	f89a 001f 	ldrb.w	r0, [sl, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   17ef6:	7be3      	ldrb	r3, [r4, #15]
   17ef8:	09c0      	lsrs	r0, r0, #7
   17efa:	8922      	ldrh	r2, [r4, #8]
   17efc:	8961      	ldrh	r1, [r4, #10]
   17efe:	9002      	str	r0, [sp, #8]
   17f00:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   17f04:	f107 0520 	add.w	r5, r7, #32
   17f08:	9001      	str	r0, [sp, #4]
   17f0a:	9500      	str	r5, [sp, #0]
   17f0c:	6820      	ldr	r0, [r4, #0]
   17f0e:	f014 fc0e 	bl	2c72e <send_ack.isra.0>
	if (net_rx->ctl) {
   17f12:	7d23      	ldrb	r3, [r4, #20]
   17f14:	071b      	lsls	r3, r3, #28
   17f16:	d516      	bpl.n	17f46 <bt_mesh_trans_recv+0x502>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   17f18:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   17f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   17f20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		seg_rx_assemble(rx, &sdu, 0U);
   17f24:	4841      	ldr	r0, [pc, #260]	; (1802c <bt_mesh_trans_recv+0x5e8>)
   17f26:	2200      	movs	r2, #0
   17f28:	f107 012c 	add.w	r1, r7, #44	; 0x2c
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   17f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		seg_rx_assemble(rx, &sdu, 0U);
   17f2e:	f014 fb82 	bl	2c636 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
   17f32:	462b      	mov	r3, r5
   17f34:	4620      	mov	r0, r4
   17f36:	f89b 1000 	ldrb.w	r1, [fp]
   17f3a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   17f3e:	f7ff f84b 	bl	16fd8 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   17f42:	4605      	mov	r5, r0
   17f44:	e016      	b.n	17f74 <bt_mesh_trans_recv+0x530>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
   17f46:	f89b 3001 	ldrb.w	r3, [fp, #1]
   17f4a:	f8ba 201c 	ldrh.w	r2, [sl, #28]
   17f4e:	09db      	lsrs	r3, r3, #7
   17f50:	bf0c      	ite	eq
   17f52:	2305      	moveq	r3, #5
   17f54:	2309      	movne	r3, #9
   17f56:	429a      	cmp	r2, r3
   17f58:	da13      	bge.n	17f82 <bt_mesh_trans_recv+0x53e>
		LOG_ERR("Too short SDU + MIC");
   17f5a:	4b3a      	ldr	r3, [pc, #232]	; (18044 <bt_mesh_trans_recv+0x600>)
		err = -EINVAL;
   17f5c:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Too short SDU + MIC");
   17f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   17f62:	2302      	movs	r3, #2
   17f64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f68:	4832      	ldr	r0, [pc, #200]	; (18034 <bt_mesh_trans_recv+0x5f0>)
   17f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   17f6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   17f70:	f014 fbc9 	bl	2c706 <z_log_msg_static_create.constprop.0>
	seg_rx_reset(rx, false);
   17f74:	2100      	movs	r1, #0
   17f76:	482d      	ldr	r0, [pc, #180]	; (1802c <bt_mesh_trans_recv+0x5e8>)
   17f78:	f7fe fec4 	bl	16d04 <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
   17f7c:	f04f 0802 	mov.w	r8, #2
	return err;
   17f80:	e663      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (!buf->__buf) {
   17f82:	4b31      	ldr	r3, [pc, #196]	; (18048 <bt_mesh_trans_recv+0x604>)
   17f84:	6899      	ldr	r1, [r3, #8]
   17f86:	b911      	cbnz	r1, 17f8e <bt_mesh_trans_recv+0x54a>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   17f88:	f103 010c 	add.w	r1, r3, #12
   17f8c:	6099      	str	r1, [r3, #8]
	buf->len = 0U;
   17f8e:	2000      	movs	r0, #0
	buf->data = buf->__buf + reserve_head;
   17f90:	6899      	ldr	r1, [r3, #8]
	buf->len = 0U;
   17f92:	8098      	strh	r0, [r3, #4]
	buf->data = buf->__buf + reserve_head;
   17f94:	6019      	str	r1, [r3, #0]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   17f96:	f89b 3001 	ldrb.w	r3, [fp, #1]
		net_buf_simple_init_with_data(
   17f9a:	f107 0538 	add.w	r5, r7, #56	; 0x38
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   17f9e:	09db      	lsrs	r3, r3, #7
   17fa0:	bf0c      	ite	eq
   17fa2:	2304      	moveq	r3, #4
   17fa4:	2308      	movne	r3, #8
		net_buf_simple_init_with_data(
   17fa6:	4628      	mov	r0, r5
   17fa8:	1ad2      	subs	r2, r2, r3
   17faa:	f015 ff3f 	bl	2de2c <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   17fae:	f89b 2001 	ldrb.w	r2, [fp, #1]
   17fb2:	f89b 1000 	ldrb.w	r1, [fp]
   17fb6:	4620      	mov	r0, r4
   17fb8:	e9cd 5a00 	strd	r5, sl, [sp]
   17fbc:	4b22      	ldr	r3, [pc, #136]	; (18048 <bt_mesh_trans_recv+0x604>)
   17fbe:	09d2      	lsrs	r2, r2, #7
   17fc0:	f7ff fcea 	bl	17998 <sdu_recv>
   17fc4:	e7bd      	b.n	17f42 <bt_mesh_trans_recv+0x4fe>
		*pdu_type = BT_MESH_FRIEND_PDU_PARTIAL;
   17fc6:	4690      	mov	r8, r2
   17fc8:	e63f      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (buf->len < 1) {
   17fca:	697b      	ldr	r3, [r7, #20]
   17fcc:	b95b      	cbnz	r3, 17fe6 <bt_mesh_trans_recv+0x5a2>
		LOG_ERR("Too small unsegmented PDU");
   17fce:	4b1f      	ldr	r3, [pc, #124]	; (1804c <bt_mesh_trans_recv+0x608>)
		LOG_ERR("Too short SDU + MIC");
   17fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   17fd2:	2302      	movs	r3, #2
   17fd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17fd8:	4816      	ldr	r0, [pc, #88]	; (18034 <bt_mesh_trans_recv+0x5f0>)
   17fda:	64bb      	str	r3, [r7, #72]	; 0x48
   17fdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
   17fe0:	f014 fb91 	bl	2c706 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17fe4:	e005      	b.n	17ff2 <bt_mesh_trans_recv+0x5ae>
	if (bt_mesh_rpl_check(rx, NULL)) {
   17fe6:	2100      	movs	r1, #0
   17fe8:	4620      	mov	r0, r4
   17fea:	f004 f825 	bl	1c038 <bt_mesh_rpl_check>
   17fee:	4682      	mov	sl, r0
   17ff0:	b110      	cbz	r0, 17ff8 <bt_mesh_trans_recv+0x5b4>
		seg_count = 1;
   17ff2:	f04f 0901 	mov.w	r9, #1
   17ff6:	e56b      	b.n	17ad0 <bt_mesh_trans_recv+0x8c>
	hdr = net_buf_simple_pull_u8(buf);
   17ff8:	4630      	mov	r0, r6
   17ffa:	f015 ff3f 	bl	2de7c <net_buf_simple_pull_u8>
	if (rx->ctl) {
   17ffe:	f894 8014 	ldrb.w	r8, [r4, #20]
	hdr = net_buf_simple_pull_u8(buf);
   18002:	4601      	mov	r1, r0
	if (rx->ctl) {
   18004:	f018 0808 	ands.w	r8, r8, #8
   18008:	d00a      	beq.n	18020 <bt_mesh_trans_recv+0x5dc>
		return ctl_recv(rx, hdr, buf, seq_auth);
   1800a:	4632      	mov	r2, r6
   1800c:	4620      	mov	r0, r4
   1800e:	f107 0320 	add.w	r3, r7, #32
   18012:	f7fe ffe1 	bl	16fd8 <ctl_recv>
		seg_count = 1;
   18016:	f04f 0901 	mov.w	r9, #1
		return ctl_recv(rx, hdr, buf, seq_auth);
   1801a:	4605      	mov	r5, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   1801c:	46d0      	mov	r8, sl
		return ctl_recv(rx, hdr, buf, seq_auth);
   1801e:	e614      	b.n	17c4a <bt_mesh_trans_recv+0x206>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
   18020:	88b3      	ldrh	r3, [r6, #4]
   18022:	2b04      	cmp	r3, #4
   18024:	d814      	bhi.n	18050 <bt_mesh_trans_recv+0x60c>
		LOG_ERR("Too short SDU + MIC");
   18026:	4b07      	ldr	r3, [pc, #28]	; (18044 <bt_mesh_trans_recv+0x600>)
   18028:	e7d2      	b.n	17fd0 <bt_mesh_trans_recv+0x58c>
   1802a:	bf00      	nop
   1802c:	2000a108 	.word	0x2000a108
   18030:	00032f66 	.word	0x00032f66
   18034:	0002fd24 	.word	0x0002fd24
   18038:	00032f78 	.word	0x00032f78
   1803c:	2000a138 	.word	0x2000a138
   18040:	20008e0c 	.word	0x20008e0c
   18044:	00032fa0 	.word	0x00032fa0
   18048:	200088a0 	.word	0x200088a0
   1804c:	00032fb4 	.word	0x00032fb4
	buf->len -= APP_MIC_LEN(0);
   18050:	3b04      	subs	r3, #4
   18052:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   18054:	4b14      	ldr	r3, [pc, #80]	; (180a8 <bt_mesh_trans_recv+0x664>)
   18056:	4642      	mov	r2, r8
   18058:	9300      	str	r3, [sp, #0]
   1805a:	4620      	mov	r0, r4
   1805c:	4633      	mov	r3, r6
   1805e:	f8cd 8004 	str.w	r8, [sp, #4]
   18062:	f7ff fc99 	bl	17998 <sdu_recv>
		seg_count = 1;
   18066:	f04f 0901 	mov.w	r9, #1
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   1806a:	4605      	mov	r5, r0
   1806c:	e5ed      	b.n	17c4a <bt_mesh_trans_recv+0x206>
		if (rx->seq_auth > *seq_auth) {
   1806e:	4553      	cmp	r3, sl
   18070:	68bb      	ldr	r3, [r7, #8]
   18072:	eb7e 0e03 	sbcs.w	lr, lr, r3
   18076:	f4ff ad2b 	bcc.w	17ad0 <bt_mesh_trans_recv+0x8c>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
   1807a:	f89b 2000 	ldrb.w	r2, [fp]
   1807e:	7f83      	ldrb	r3, [r0, #30]
   18080:	429a      	cmp	r2, r3
   18082:	d104      	bne.n	1808e <bt_mesh_trans_recv+0x64a>
   18084:	f00c 0c1f 	and.w	ip, ip, #31
   18088:	45ac      	cmp	ip, r5
   1808a:	f43f ada9 	beq.w	17be0 <bt_mesh_trans_recv+0x19c>
		LOG_ERR("Invalid segment for ongoing session");
   1808e:	4b07      	ldr	r3, [pc, #28]	; (180ac <bt_mesh_trans_recv+0x668>)
			LOG_ERR("Incorrect segment size for message type");
   18090:	64fb      	str	r3, [r7, #76]	; 0x4c
   18092:	2302      	movs	r3, #2
   18094:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18098:	4805      	ldr	r0, [pc, #20]	; (180b0 <bt_mesh_trans_recv+0x66c>)
   1809a:	64bb      	str	r3, [r7, #72]	; 0x48
   1809c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   180a0:	f014 fb31 	bl	2c706 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   180a4:	e514      	b.n	17ad0 <bt_mesh_trans_recv+0x8c>
   180a6:	bf00      	nop
   180a8:	20008894 	.word	0x20008894
   180ac:	00032eb7 	.word	0x00032eb7
   180b0:	0002fd24 	.word	0x0002fd24

000180b4 <bt_mesh_va_pending_store>:
	struct va_val va;
	char path[18];
	uint16_t i;
	int err;

	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
   180b4:	2300      	movs	r3, #0
{
   180b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!lab->changed) {
   180ba:	4c2e      	ldr	r4, [pc, #184]	; (18174 <bt_mesh_va_pending_store+0xc0>)
{
   180bc:	b08c      	sub	sp, #48	; 0x30
			continue;
		}

		lab->changed = 0U;

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   180be:	4e2e      	ldr	r6, [pc, #184]	; (18178 <bt_mesh_va_pending_store+0xc4>)
{
   180c0:	af00      	add	r7, sp, #0
   180c2:	f994 2001 	ldrsb.w	r2, [r4, #1]
	if (index >= ARRAY_SIZE(virtual_addrs)) {
   180c6:	b90b      	cbnz	r3, 180cc <bt_mesh_va_pending_store+0x18>
		if (!lab->changed) {
   180c8:	2a00      	cmp	r2, #0
   180ca:	db03      	blt.n	180d4 <bt_mesh_va_pending_store+0x20>
				IS_VA_DEL(lab) ? "delete" : "store", path, err);
		} else {
			LOG_DBG("%s %s value", IS_VA_DEL(lab) ? "Deleted" : "Stored", path);
		}
	}
}
   180cc:	3730      	adds	r7, #48	; 0x30
   180ce:	46bd      	mov	sp, r7
   180d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lab->changed = 0U;
   180d4:	7862      	ldrb	r2, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   180d6:	f107 0508 	add.w	r5, r7, #8
		lab->changed = 0U;
   180da:	f363 12c7 	bfi	r2, r3, #7, #1
   180de:	7062      	strb	r2, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   180e0:	2112      	movs	r1, #18
   180e2:	4632      	mov	r2, r6
   180e4:	4628      	mov	r0, r5
   180e6:	f010 fb72 	bl	287ce <snprintk>
		if (IS_VA_DEL(lab)) {
   180ea:	8823      	ldrh	r3, [r4, #0]
   180ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
   180f0:	bb72      	cbnz	r2, 18150 <bt_mesh_va_pending_store+0x9c>
			err = settings_delete(path);
   180f2:	4628      	mov	r0, r5
   180f4:	f011 fb2e 	bl	29754 <settings_delete>
		if (err) {
   180f8:	2800      	cmp	r0, #0
   180fa:	d0e7      	beq.n	180cc <bt_mesh_va_pending_store+0x18>
			LOG_ERR("Failed to %s %s value (err %d)",
   180fc:	8823      	ldrh	r3, [r4, #0]
   180fe:	4a1f      	ldr	r2, [pc, #124]	; (1817c <bt_mesh_va_pending_store+0xc8>)
   18100:	491f      	ldr	r1, [pc, #124]	; (18180 <bt_mesh_va_pending_store+0xcc>)
   18102:	46e8      	mov	r8, sp
   18104:	f3c3 030e 	ubfx	r3, r3, #0, #15
   18108:	b08a      	sub	sp, #40	; 0x28
   1810a:	2b00      	cmp	r3, #0
   1810c:	bf08      	it	eq
   1810e:	4611      	moveq	r1, r2
   18110:	466b      	mov	r3, sp
   18112:	f8df c070 	ldr.w	ip, [pc, #112]	; 18184 <bt_mesh_va_pending_store+0xd0>
   18116:	e9c3 5007 	strd	r5, r0, [r3, #28]
   1811a:	e9c3 c105 	strd	ip, r1, [r3, #20]
   1811e:	491a      	ldr	r1, [pc, #104]	; (18188 <bt_mesh_va_pending_store+0xd4>)
   18120:	f103 0210 	add.w	r2, r3, #16
   18124:	6079      	str	r1, [r7, #4]
   18126:	1d38      	adds	r0, r7, #4
   18128:	f103 0123 	add.w	r1, r3, #35	; 0x23
   1812c:	f103 0527 	add.w	r5, r3, #39	; 0x27
   18130:	f810 cb01 	ldrb.w	ip, [r0], #1
   18134:	f801 cf01 	strb.w	ip, [r1, #1]!
   18138:	42a9      	cmp	r1, r5
   1813a:	d1f9      	bne.n	18130 <bt_mesh_va_pending_store+0x7c>
   1813c:	4913      	ldr	r1, [pc, #76]	; (1818c <bt_mesh_va_pending_store+0xd8>)
   1813e:	4814      	ldr	r0, [pc, #80]	; (18190 <bt_mesh_va_pending_store+0xdc>)
   18140:	6119      	str	r1, [r3, #16]
   18142:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   18146:	f014 fade 	bl	2c706 <z_log_msg_static_create.constprop.0>
   1814a:	2301      	movs	r3, #1
   1814c:	46c5      	mov	sp, r8
   1814e:	e7b8      	b.n	180c2 <bt_mesh_va_pending_store+0xe>
			va.ref = lab->ref;
   18150:	f3c3 030e 	ubfx	r3, r3, #0, #15
   18154:	83bb      	strh	r3, [r7, #28]
			va.addr = lab->addr;
   18156:	8863      	ldrh	r3, [r4, #2]
			memcpy(va.uuid, lab->uuid, 16);
   18158:	2210      	movs	r2, #16
   1815a:	490e      	ldr	r1, [pc, #56]	; (18194 <bt_mesh_va_pending_store+0xe0>)
   1815c:	f107 0020 	add.w	r0, r7, #32
			va.addr = lab->addr;
   18160:	83fb      	strh	r3, [r7, #30]
			memcpy(va.uuid, lab->uuid, 16);
   18162:	f012 f9da 	bl	2a51a <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
   18166:	2214      	movs	r2, #20
   18168:	4628      	mov	r0, r5
   1816a:	f107 011c 	add.w	r1, r7, #28
   1816e:	f7f3 ffb5 	bl	c0dc <settings_save_one>
   18172:	e7c1      	b.n	180f8 <bt_mesh_va_pending_store+0x44>
   18174:	2000b13c 	.word	0x2000b13c
   18178:	00032fdb 	.word	0x00032fdb
   1817c:	00032fce 	.word	0x00032fce
   18180:	00032fd5 	.word	0x00032fd5
   18184:	00032fe9 	.word	0x00032fe9
   18188:	03010200 	.word	0x03010200
   1818c:	02000005 	.word	0x02000005
   18190:	0002fd24 	.word	0x0002fd24
   18194:	2000b140 	.word	0x2000b140

00018198 <sub_end>:
	}
}

static void notify_sub_end(void)
{
	sub.remaining = 0;
   18198:	2300      	movs	r3, #0
		}
	}
}

static void sub_end(struct k_work *work)
{
   1819a:	b570      	push	{r4, r5, r6, lr}
	sub.remaining = 0;
   1819c:	4d0b      	ldr	r5, [pc, #44]	; (181cc <sub_end+0x34>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   1819e:	4c0c      	ldr	r4, [pc, #48]	; (181d0 <sub_end+0x38>)
   181a0:	4e0c      	ldr	r6, [pc, #48]	; (181d4 <sub_end+0x3c>)
	sub.remaining = 0;
   181a2:	606b      	str	r3, [r5, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   181a4:	42b4      	cmp	r4, r6
   181a6:	d90e      	bls.n	181c6 <sub_end+0x2e>
   181a8:	490b      	ldr	r1, [pc, #44]	; (181d8 <sub_end+0x40>)
   181aa:	480c      	ldr	r0, [pc, #48]	; (181dc <sub_end+0x44>)
   181ac:	2257      	movs	r2, #87	; 0x57
   181ae:	f010 fd09 	bl	28bc4 <assert_print>
   181b2:	2157      	movs	r1, #87	; 0x57
   181b4:	4808      	ldr	r0, [pc, #32]	; (181d8 <sub_end+0x40>)
   181b6:	f010 fcfe 	bl	28bb6 <assert_post_action>
		if (cb->sub_end) {
   181ba:	6863      	ldr	r3, [r4, #4]
   181bc:	b10b      	cbz	r3, 181c2 <sub_end+0x2a>
			cb->sub_end(&sub);
   181be:	4628      	mov	r0, r5
   181c0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   181c2:	340c      	adds	r4, #12
   181c4:	e7ee      	b.n	181a4 <sub_end+0xc>
   181c6:	d3f8      	bcc.n	181ba <sub_end+0x22>
	notify_sub_end();
}
   181c8:	bd70      	pop	{r4, r5, r6, pc}
   181ca:	bf00      	nop
   181cc:	2000acf0 	.word	0x2000acf0
   181d0:	0002fbec 	.word	0x0002fbec
   181d4:	0002fbec 	.word	0x0002fbec
   181d8:	00033025 	.word	0x00033025
   181dc:	00030da5 	.word	0x00030da5

000181e0 <notify_pub_sent>:
{
   181e0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   181e2:	4c0b      	ldr	r4, [pc, #44]	; (18210 <notify_pub_sent+0x30>)
   181e4:	4d0b      	ldr	r5, [pc, #44]	; (18214 <notify_pub_sent+0x34>)
			cb->pub_sent(&pub);
   181e6:	4e0c      	ldr	r6, [pc, #48]	; (18218 <notify_pub_sent+0x38>)
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   181e8:	42ac      	cmp	r4, r5
   181ea:	d90e      	bls.n	1820a <notify_pub_sent+0x2a>
   181ec:	490b      	ldr	r1, [pc, #44]	; (1821c <notify_pub_sent+0x3c>)
   181ee:	480c      	ldr	r0, [pc, #48]	; (18220 <notify_pub_sent+0x40>)
   181f0:	2226      	movs	r2, #38	; 0x26
   181f2:	f010 fce7 	bl	28bc4 <assert_print>
   181f6:	2126      	movs	r1, #38	; 0x26
   181f8:	4808      	ldr	r0, [pc, #32]	; (1821c <notify_pub_sent+0x3c>)
   181fa:	f010 fcdc 	bl	28bb6 <assert_post_action>
		if (cb->pub_sent) {
   181fe:	68a3      	ldr	r3, [r4, #8]
   18200:	b10b      	cbz	r3, 18206 <notify_pub_sent+0x26>
			cb->pub_sent(&pub);
   18202:	4630      	mov	r0, r6
   18204:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   18206:	340c      	adds	r4, #12
   18208:	e7ee      	b.n	181e8 <notify_pub_sent+0x8>
   1820a:	d3f8      	bcc.n	181fe <notify_pub_sent+0x1e>
}
   1820c:	bd70      	pop	{r4, r5, r6, pc}
   1820e:	bf00      	nop
   18210:	0002fbec 	.word	0x0002fbec
   18214:	0002fbec 	.word	0x0002fbec
   18218:	2000ad00 	.word	0x2000ad00
   1821c:	00033025 	.word	0x00033025
   18220:	00030da5 	.word	0x00030da5

00018224 <hb_publish_end_cb>:
{
   18224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pub.period && pub.count > 1) {
   18226:	4d14      	ldr	r5, [pc, #80]	; (18278 <hb_publish_end_cb+0x54>)
{
   18228:	4606      	mov	r6, r0
	if (pub.period && pub.count > 1) {
   1822a:	68ec      	ldr	r4, [r5, #12]
   1822c:	b1b4      	cbz	r4, 1825c <hb_publish_end_cb+0x38>
   1822e:	886b      	ldrh	r3, [r5, #2]
   18230:	2b01      	cmp	r3, #1
   18232:	d913      	bls.n	1825c <hb_publish_end_cb+0x38>
		k_work_reschedule(&pub_timer, K_SECONDS(pub.period));
   18234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18238:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1823c:	f240 30e7 	movw	r0, #999	; 0x3e7
   18240:	2100      	movs	r1, #0
   18242:	435c      	muls	r4, r3
   18244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18248:	2300      	movs	r3, #0
   1824a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1824e:	f7ef ff81 	bl	8154 <__aeabi_uldivmod>
   18252:	4602      	mov	r2, r0
   18254:	460b      	mov	r3, r1
   18256:	4809      	ldr	r0, [pc, #36]	; (1827c <hb_publish_end_cb+0x58>)
   18258:	f00e fa0e 	bl	26678 <k_work_reschedule>
	if (pub.count != 0xffff) {
   1825c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18260:	886b      	ldrh	r3, [r5, #2]
   18262:	4293      	cmp	r3, r2
		pub.count--;
   18264:	bf1c      	itt	ne
   18266:	f103 33ff 	addne.w	r3, r3, #4294967295
   1826a:	806b      	strhne	r3, [r5, #2]
	if (!err) {
   1826c:	b91e      	cbnz	r6, 18276 <hb_publish_end_cb+0x52>
}
   1826e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_pub_sent();
   18272:	f7ff bfb5 	b.w	181e0 <notify_pub_sent>
}
   18276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18278:	2000ad00 	.word	0x2000ad00
   1827c:	2000a1e8 	.word	0x2000a1e8

00018280 <heartbeat_send.constprop.0>:
	uint16_t feat = 0U;
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
   18280:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18284:	2300      	movs	r3, #0
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   18286:	b530      	push	{r4, r5, lr}
		.net_idx = pub.net_idx,
   18288:	4c23      	ldr	r4, [pc, #140]	; (18318 <heartbeat_send.constprop.0+0x98>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   1828a:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1828c:	f8ad 2012 	strh.w	r2, [sp, #18]
   18290:	8822      	ldrh	r2, [r4, #0]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   18292:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
   18294:	f8ad 2014 	strh.w	r2, [sp, #20]
		.net_idx = pub.net_idx,
   18298:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
   1829a:	7922      	ldrb	r2, [r4, #4]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   1829c:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
   182a0:	f88d 201b 	strb.w	r2, [sp, #27]
   182a4:	f8cd 3016 	str.w	r3, [sp, #22]
   182a8:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
   182ac:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   182ae:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
   182b2:	f7fe f837 	bl	16324 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   182b6:	ab04      	add	r3, sp, #16
   182b8:	9308      	str	r3, [sp, #32]
   182ba:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   182bc:	f001 f82a 	bl	19314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   182c0:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   182c4:	f7fc fc38 	bl	14b38 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   182c8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled or the subnet is
	 * removed.
	 */
	if (!tx.sub || pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   182cc:	9807      	ldr	r0, [sp, #28]
   182ce:	b308      	cbz	r0, 18314 <heartbeat_send.constprop.0+0x94>
   182d0:	8820      	ldrh	r0, [r4, #0]
   182d2:	b1f8      	cbz	r0, 18314 <heartbeat_send.constprop.0+0x94>
		return 0;
	}

	hb.init_ttl = pub.ttl;
   182d4:	7923      	ldrb	r3, [r4, #4]
   182d6:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   182da:	f7fc fc9f 	bl	14c1c <bt_mesh_relay_get>
   182de:	1e43      	subs	r3, r0, #1
   182e0:	425c      	negs	r4, r3
   182e2:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   182e4:	f7fc fbc0 	bl	14a68 <bt_mesh_gatt_proxy_get>
   182e8:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   182ea:	bf08      	it	eq
   182ec:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   182f0:	f7fc fc02 	bl	14af8 <bt_mesh_friend_get>

	hb.feat = sys_cpu_to_be16(feat);

	LOG_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   182f4:	2300      	movs	r3, #0
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   182f6:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   182f8:	bf08      	it	eq
   182fa:	f044 0404 	orreq.w	r4, r4, #4
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   182fe:	e9cd 5300 	strd	r5, r3, [sp]
	hb.feat = sys_cpu_to_be16(feat);
   18302:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   18304:	2303      	movs	r3, #3
   18306:	210a      	movs	r1, #10
   18308:	aa03      	add	r2, sp, #12
   1830a:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   1830c:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   18310:	f7ff f982 	bl	17618 <bt_mesh_ctl_send>
				cb, cb_data);
}
   18314:	b00b      	add	sp, #44	; 0x2c
   18316:	bd30      	pop	{r4, r5, pc}
   18318:	2000ad00 	.word	0x2000ad00

0001831c <hb_publish.part.0>:
	if (err) {
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
   1831c:	b598      	push	{r3, r4, r7, lr}
		return;
	}

	sub = bt_mesh_subnet_get(pub.net_idx);
	if (!sub) {
		LOG_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
   1831e:	4c0a      	ldr	r4, [pc, #40]	; (18348 <hb_publish.part.0+0x2c>)
static void hb_publish(struct k_work *work)
   18320:	af00      	add	r7, sp, #0
		LOG_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
   18322:	b088      	sub	sp, #32
   18324:	466a      	mov	r2, sp
   18326:	8923      	ldrh	r3, [r4, #8]
   18328:	4908      	ldr	r1, [pc, #32]	; (1834c <hb_publish.part.0+0x30>)
   1832a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1832e:	2303      	movs	r3, #3
   18330:	f842 3f10 	str.w	r3, [r2, #16]!
   18334:	2300      	movs	r3, #0
   18336:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1833a:	4805      	ldr	r0, [pc, #20]	; (18350 <hb_publish.part.0+0x34>)
   1833c:	f7f2 fc0e 	bl	ab5c <z_impl_z_log_msg_static_create>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
   18340:	2300      	movs	r3, #0
   18342:	8023      	strh	r3, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
   18344:	46bd      	mov	sp, r7
   18346:	bd98      	pop	{r3, r4, r7, pc}
   18348:	2000ad00 	.word	0x2000ad00
   1834c:	0003305a 	.word	0x0003305a
   18350:	0002fca4 	.word	0x0002fca4

00018354 <hb_publish>:
{
   18354:	b508      	push	{r3, lr}
	if (pub.period == 0U || pub.count == 0U) {
   18356:	4b0b      	ldr	r3, [pc, #44]	; (18384 <hb_publish+0x30>)
   18358:	68da      	ldr	r2, [r3, #12]
   1835a:	b192      	cbz	r2, 18382 <hb_publish+0x2e>
   1835c:	885a      	ldrh	r2, [r3, #2]
   1835e:	b182      	cbz	r2, 18382 <hb_publish+0x2e>
	sub = bt_mesh_subnet_get(pub.net_idx);
   18360:	8918      	ldrh	r0, [r3, #8]
   18362:	f7fd ffdf 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   18366:	b918      	cbnz	r0, 18370 <hb_publish+0x1c>
}
   18368:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1836c:	f7ff bfd6 	b.w	1831c <hb_publish.part.0>
	err = heartbeat_send(&publish_cb, NULL);
   18370:	4805      	ldr	r0, [pc, #20]	; (18388 <hb_publish+0x34>)
   18372:	f7ff ff85 	bl	18280 <heartbeat_send.constprop.0>
	if (err) {
   18376:	b120      	cbz	r0, 18382 <hb_publish+0x2e>
}
   18378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		hb_publish_end_cb(err, NULL);
   1837c:	2100      	movs	r1, #0
   1837e:	f7ff bf51 	b.w	18224 <hb_publish_end_cb>
}
   18382:	bd08      	pop	{r3, pc}
   18384:	2000ad00 	.word	0x2000ad00
   18388:	000305d4 	.word	0x000305d4

0001838c <bt_mesh_hb_recv>:

int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
   1838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
   18390:	888b      	ldrh	r3, [r1, #4]
{
   18392:	4607      	mov	r7, r0
	if (buf->len < 3) {
   18394:	2b02      	cmp	r3, #2
{
   18396:	460d      	mov	r5, r1
   18398:	b086      	sub	sp, #24
	if (buf->len < 3) {
   1839a:	d80f      	bhi.n	183bc <bt_mesh_hb_recv+0x30>
		LOG_ERR("Too short heartbeat message");
   1839c:	4b31      	ldr	r3, [pc, #196]	; (18464 <bt_mesh_hb_recv+0xd8>)
   1839e:	9305      	str	r3, [sp, #20]
   183a0:	2302      	movs	r3, #2
   183a2:	9304      	str	r3, [sp, #16]
   183a4:	4830      	ldr	r0, [pc, #192]	; (18468 <bt_mesh_hb_recv+0xdc>)
   183a6:	2300      	movs	r3, #0
   183a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183ac:	aa04      	add	r2, sp, #16
   183ae:	f7f2 fbd5 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   183b2:	f06f 0015 	mvn.w	r0, #21
		rx->ctx.recv_ttl, init_ttl, hops, (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
   183b6:	b006      	add	sp, #24
   183b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   183bc:	4608      	mov	r0, r1
   183be:	f015 fd5d 	bl	2de7c <net_buf_simple_pull_u8>
   183c2:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
   183c4:	4628      	mov	r0, r5
   183c6:	f015 fd69 	bl	2de9c <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   183ca:	4e28      	ldr	r6, [pc, #160]	; (1846c <bt_mesh_hb_recv+0xe0>)
   183cc:	68ba      	ldr	r2, [r7, #8]
   183ce:	68b3      	ldr	r3, [r6, #8]
	feat = net_buf_simple_pull_be16(buf);
   183d0:	4605      	mov	r5, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   183d2:	429a      	cmp	r2, r3
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   183d4:	f897 800d 	ldrb.w	r8, [r7, #13]
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   183d8:	d001      	beq.n	183de <bt_mesh_hb_recv+0x52>
		return 0;
   183da:	2000      	movs	r0, #0
   183dc:	e7eb      	b.n	183b6 <bt_mesh_hb_recv+0x2a>
	return k_work_delayable_busy_get(dwork) != 0;
   183de:	4824      	ldr	r0, [pc, #144]	; (18470 <bt_mesh_hb_recv+0xe4>)
   183e0:	f017 f88c 	bl	2f4fc <k_work_delayable_busy_get>
	if (!k_work_delayable_is_pending(&sub_timer)) {
   183e4:	2800      	cmp	r0, #0
   183e6:	d0f8      	beq.n	183da <bt_mesh_hb_recv+0x4e>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   183e8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   183ec:	f1c8 0801 	rsb	r8, r8, #1
	sub.min_hops = MIN(sub.min_hops, hops);
   183f0:	7bb3      	ldrb	r3, [r6, #14]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   183f2:	4444      	add	r4, r8
   183f4:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
   183f6:	42a3      	cmp	r3, r4
   183f8:	bf28      	it	cs
   183fa:	4623      	movcs	r3, r4
   183fc:	73b3      	strb	r3, [r6, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
   183fe:	7bf3      	ldrb	r3, [r6, #15]
	if (sub.count < 0xffff) {
   18400:	f64f 72ff 	movw	r2, #65535	; 0xffff
	sub.max_hops = MAX(sub.max_hops, hops);
   18404:	42a3      	cmp	r3, r4
   18406:	bf38      	it	cc
   18408:	4623      	movcc	r3, r4
   1840a:	73f3      	strb	r3, [r6, #15]
	if (sub.count < 0xffff) {
   1840c:	89b3      	ldrh	r3, [r6, #12]
   1840e:	4293      	cmp	r3, r2
		sub.count++;
   18410:	bf1c      	itt	ne
   18412:	3301      	addne	r3, #1
   18414:	81b3      	strhne	r3, [r6, #12]
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   18416:	8973      	ldrh	r3, [r6, #10]
   18418:	b15b      	cbz	r3, 18432 <bt_mesh_hb_recv+0xa6>
	return z_timeout_remaining(&dwork->timeout);
   1841a:	4816      	ldr	r0, [pc, #88]	; (18474 <bt_mesh_hb_recv+0xe8>)
   1841c:	f00f fb70 	bl	27b00 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   18420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18424:	fba0 3102 	umull	r3, r1, r0, r2
   18428:	0bdb      	lsrs	r3, r3, #15
   1842a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return rem_ms / MSEC_PER_SEC;
   1842e:	fbb3 f3f2 	udiv	r3, r3, r2
	sub.remaining = sub_remaining();
   18432:	6073      	str	r3, [r6, #4]
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   18434:	4f10      	ldr	r7, [pc, #64]	; (18478 <bt_mesh_hb_recv+0xec>)
   18436:	4e11      	ldr	r6, [pc, #68]	; (1847c <bt_mesh_hb_recv+0xf0>)
			cb->recv(&sub, hops, feat);
   18438:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1846c <bt_mesh_hb_recv+0xe0>
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   1843c:	42be      	cmp	r6, r7
   1843e:	d908      	bls.n	18452 <bt_mesh_hb_recv+0xc6>
   18440:	490f      	ldr	r1, [pc, #60]	; (18480 <bt_mesh_hb_recv+0xf4>)
   18442:	4810      	ldr	r0, [pc, #64]	; (18484 <bt_mesh_hb_recv+0xf8>)
   18444:	224c      	movs	r2, #76	; 0x4c
   18446:	f010 fbbd 	bl	28bc4 <assert_print>
   1844a:	214c      	movs	r1, #76	; 0x4c
   1844c:	480c      	ldr	r0, [pc, #48]	; (18480 <bt_mesh_hb_recv+0xf4>)
   1844e:	f010 fbb2 	bl	28bb6 <assert_post_action>
   18452:	d2c2      	bcs.n	183da <bt_mesh_hb_recv+0x4e>
		if (cb->recv) {
   18454:	6833      	ldr	r3, [r6, #0]
   18456:	b11b      	cbz	r3, 18460 <bt_mesh_hb_recv+0xd4>
			cb->recv(&sub, hops, feat);
   18458:	462a      	mov	r2, r5
   1845a:	4621      	mov	r1, r4
   1845c:	4640      	mov	r0, r8
   1845e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   18460:	360c      	adds	r6, #12
   18462:	e7eb      	b.n	1843c <bt_mesh_hb_recv+0xb0>
   18464:	0003307c 	.word	0x0003307c
   18468:	0002fca4 	.word	0x0002fca4
   1846c:	2000acf0 	.word	0x2000acf0
   18470:	2000a218 	.word	0x2000a218
   18474:	2000a228 	.word	0x2000a228
   18478:	0002fbec 	.word	0x0002fbec
   1847c:	0002fbec 	.word	0x0002fbec
   18480:	00033025 	.word	0x00033025
   18484:	00030da5 	.word	0x00030da5

00018488 <bt_mesh_hb_pub_set>:
	 */
	(void)k_work_cancel_delayable(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
   18488:	b5b0      	push	{r4, r5, r7, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   1848a:	4604      	mov	r4, r0
{
   1848c:	af00      	add	r7, sp, #0
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   1848e:	b108      	cbz	r0, 18494 <bt_mesh_hb_pub_set+0xc>
   18490:	8803      	ldrh	r3, [r0, #0]
   18492:	b96b      	cbnz	r3, 184b0 <bt_mesh_hb_pub_set+0x28>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   18494:	2200      	movs	r2, #0
   18496:	4b1d      	ldr	r3, [pc, #116]	; (1850c <bt_mesh_hb_pub_set+0x84>)
	(void)k_work_cancel_delayable(&pub_timer);
   18498:	481d      	ldr	r0, [pc, #116]	; (18510 <bt_mesh_hb_pub_set+0x88>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1849a:	601a      	str	r2, [r3, #0]
	pub.ttl = 0U;
   1849c:	711a      	strb	r2, [r3, #4]
	pub.period = 0U;
   1849e:	60da      	str	r2, [r3, #12]
	(void)k_work_cancel_delayable(&pub_timer);
   184a0:	f00e f8f0 	bl	26684 <k_work_cancel_delayable>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
   184a4:	f7fc f986 	bl	147b4 <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   184a8:	bb58      	cbnz	r0, 18502 <bt_mesh_hb_pub_set+0x7a>
			bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
		}

		return STATUS_SUCCESS;
   184aa:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
   184ac:	46bd      	mov	sp, r7
   184ae:	bdb0      	pop	{r4, r5, r7, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
   184b0:	8900      	ldrh	r0, [r0, #8]
   184b2:	f7fd ff37 	bl	16324 <bt_mesh_subnet_get>
   184b6:	4603      	mov	r3, r0
   184b8:	b988      	cbnz	r0, 184de <bt_mesh_hb_pub_set+0x56>
		LOG_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
   184ba:	8921      	ldrh	r1, [r4, #8]
   184bc:	466c      	mov	r4, sp
   184be:	b088      	sub	sp, #32
   184c0:	466a      	mov	r2, sp
   184c2:	4814      	ldr	r0, [pc, #80]	; (18514 <bt_mesh_hb_pub_set+0x8c>)
   184c4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   184c8:	2103      	movs	r1, #3
   184ca:	f842 1f10 	str.w	r1, [r2, #16]!
   184ce:	4812      	ldr	r0, [pc, #72]	; (18518 <bt_mesh_hb_pub_set+0x90>)
   184d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   184d4:	f7f2 fb42 	bl	ab5c <z_impl_z_log_msg_static_create>
		return STATUS_INVALID_NETKEY;
   184d8:	2004      	movs	r0, #4
   184da:	46a5      	mov	sp, r4
   184dc:	e7e6      	b.n	184ac <bt_mesh_hb_pub_set+0x24>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   184de:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
   184e0:	4d0a      	ldr	r5, [pc, #40]	; (1850c <bt_mesh_hb_pub_set+0x84>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   184e2:	f003 030f 	and.w	r3, r3, #15
   184e6:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
   184e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   184ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
   184f0:	f7fc f960 	bl	147b4 <bt_mesh_is_provisioned>
   184f4:	2800      	cmp	r0, #0
   184f6:	d0d8      	beq.n	184aa <bt_mesh_hb_pub_set+0x22>
	k_work_reschedule(&pub_timer, K_NO_WAIT);
   184f8:	2200      	movs	r2, #0
   184fa:	2300      	movs	r3, #0
   184fc:	4804      	ldr	r0, [pc, #16]	; (18510 <bt_mesh_hb_pub_set+0x88>)
   184fe:	f00e f8bb 	bl	26678 <k_work_reschedule>
		bt_mesh_settings_store_schedule(
   18502:	2006      	movs	r0, #6
   18504:	f003 fc3a 	bl	1bd7c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   18508:	e7cf      	b.n	184aa <bt_mesh_hb_pub_set+0x22>
   1850a:	bf00      	nop
   1850c:	2000ad00 	.word	0x2000ad00
   18510:	2000a1e8 	.word	0x2000a1e8
   18514:	00033098 	.word	0x00033098
   18518:	0002fca4 	.word	0x0002fca4

0001851c <pre_hb_pub_set>:
	LOG_DBG("Restored heartbeat publication");

	return 0;
}

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);
   1851c:	b510      	push	{r4, lr}
   1851e:	4610      	mov	r0, r2
   18520:	4619      	mov	r1, r3
   18522:	b088      	sub	sp, #32
   18524:	4b23      	ldr	r3, [pc, #140]	; (185b4 <pre_hb_pub_set+0x98>)
   18526:	e8d3 4faf 	lda	r4, [r3]
   1852a:	f014 0401 	ands.w	r4, r4, #1
   1852e:	d010      	beq.n	18552 <pre_hb_pub_set+0x36>
	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   18530:	2308      	movs	r3, #8
   18532:	466a      	mov	r2, sp
   18534:	f003 fbe6 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   18538:	4604      	mov	r4, r0
   1853a:	b168      	cbz	r0, 18558 <pre_hb_pub_set+0x3c>
		LOG_ERR("Failed to set \'hb_val\'");
   1853c:	4b1e      	ldr	r3, [pc, #120]	; (185b8 <pre_hb_pub_set+0x9c>)
   1853e:	9307      	str	r3, [sp, #28]
   18540:	2302      	movs	r3, #2
   18542:	9306      	str	r3, [sp, #24]
   18544:	2300      	movs	r3, #0
   18546:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1854a:	481c      	ldr	r0, [pc, #112]	; (185bc <pre_hb_pub_set+0xa0>)
   1854c:	aa06      	add	r2, sp, #24
   1854e:	f7f2 fb05 	bl	ab5c <z_impl_z_log_msg_static_create>
BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);
   18552:	4620      	mov	r0, r4
   18554:	b008      	add	sp, #32
   18556:	bd10      	pop	{r4, pc}
	pub.dst = hb_val.dst;
   18558:	f8bd 3000 	ldrh.w	r3, [sp]
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   1855c:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
   18560:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   18564:	b302      	cbz	r2, 185a8 <pre_hb_pub_set+0x8c>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   18566:	2aff      	cmp	r2, #255	; 0xff
   18568:	d020      	beq.n	185ac <pre_hb_pub_set+0x90>
   1856a:	2a11      	cmp	r2, #17
   1856c:	d01e      	beq.n	185ac <pre_hb_pub_set+0x90>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   1856e:	2301      	movs	r3, #1
   18570:	3a01      	subs	r2, #1
   18572:	4093      	lsls	r3, r2
   18574:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   18576:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
   18578:	f89d 3003 	ldrb.w	r3, [sp, #3]
	(void)bt_mesh_hb_pub_set(&pub);
   1857c:	a802      	add	r0, sp, #8
	pub.ttl = hb_val.ttl;
   1857e:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
   18582:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   18586:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
   1858a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1858e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   18592:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
   18596:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1859a:	f343 1300 	sbfx	r3, r3, #4, #1
   1859e:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
   185a2:	f7ff ff71 	bl	18488 <bt_mesh_hb_pub_set>
BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);
   185a6:	e7d4      	b.n	18552 <pre_hb_pub_set+0x36>
		return 0x0000;
   185a8:	4603      	mov	r3, r0
   185aa:	e7e4      	b.n	18576 <pre_hb_pub_set+0x5a>
		return 0xffff;
   185ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   185b0:	e7e1      	b.n	18576 <pre_hb_pub_set+0x5a>
   185b2:	bf00      	nop
   185b4:	20009ed0 	.word	0x20009ed0
   185b8:	000330ae 	.word	0x000330ae
   185bc:	0002fca4 	.word	0x0002fca4

000185c0 <bt_mesh_hb_pub_get>:
{
   185c0:	b510      	push	{r4, lr}
   185c2:	4604      	mov	r4, r0
	*get = pub;
   185c4:	4b02      	ldr	r3, [pc, #8]	; (185d0 <bt_mesh_hb_pub_get+0x10>)
   185c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   185c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   185cc:	bd10      	pop	{r4, pc}
   185ce:	bf00      	nop
   185d0:	2000ad00 	.word	0x2000ad00

000185d4 <bt_mesh_hb_sub_set>:
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   185d4:	0403      	lsls	r3, r0, #16
{
   185d6:	b570      	push	{r4, r5, r6, lr}
   185d8:	4606      	mov	r6, r0
   185da:	460d      	mov	r5, r1
   185dc:	4614      	mov	r4, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   185de:	d501      	bpl.n	185e4 <bt_mesh_hb_sub_set+0x10>
		return STATUS_INVALID_ADDRESS;
   185e0:	2001      	movs	r0, #1
}
   185e2:	bd70      	pop	{r4, r5, r6, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   185e4:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
   185e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   185ec:	d3f8      	bcc.n	185e0 <bt_mesh_hb_sub_set+0xc>
   185ee:	f501 7380 	add.w	r3, r1, #256	; 0x100
   185f2:	b29b      	uxth	r3, r3
   185f4:	2bfb      	cmp	r3, #251	; 0xfb
   185f6:	d9f3      	bls.n	185e0 <bt_mesh_hb_sub_set+0xc>
   185f8:	b20b      	sxth	r3, r1
   185fa:	2b00      	cmp	r3, #0
   185fc:	dd27      	ble.n	1864e <bt_mesh_hb_sub_set+0x7a>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
   185fe:	f000 fe89 	bl	19314 <bt_mesh_primary_addr>
   18602:	42a8      	cmp	r0, r5
   18604:	d1ec      	bne.n	185e0 <bt_mesh_hb_sub_set+0xc>
	if (period > (1U << 16)) {
   18606:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1860a:	d901      	bls.n	18610 <bt_mesh_hb_sub_set+0x3c>
		return STATUS_CANNOT_SET;
   1860c:	200f      	movs	r0, #15
   1860e:	e7e8      	b.n	185e2 <bt_mesh_hb_sub_set+0xe>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   18610:	bb26      	cbnz	r6, 1865c <bt_mesh_hb_sub_set+0x88>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
   18612:	2200      	movs	r2, #0
   18614:	4b16      	ldr	r3, [pc, #88]	; (18670 <bt_mesh_hb_sub_set+0x9c>)
		sub.count = 0U;
   18616:	e9c3 2202 	strd	r2, r2, [r3, #8]
{
   1861a:	2400      	movs	r4, #0
			return ((t * to_hz + off) / from_hz);
   1861c:	2500      	movs	r5, #0
		sub.period = 0U;
   1861e:	4b14      	ldr	r3, [pc, #80]	; (18670 <bt_mesh_hb_sub_set+0x9c>)
   18620:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   18624:	601c      	str	r4, [r3, #0]
	k_work_reschedule(&sub_timer, K_SECONDS(sub.period));
   18626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1862a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1862e:	4629      	mov	r1, r5
   18630:	435c      	muls	r4, r3
   18632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18636:	2300      	movs	r3, #0
   18638:	fbe4 0106 	umlal	r0, r1, r4, r6
   1863c:	f7ef fd8a 	bl	8154 <__aeabi_uldivmod>
   18640:	4602      	mov	r2, r0
   18642:	460b      	mov	r3, r1
   18644:	480b      	ldr	r0, [pc, #44]	; (18674 <bt_mesh_hb_sub_set+0xa0>)
   18646:	f00e f817 	bl	26678 <k_work_reschedule>
	return STATUS_SUCCESS;
   1864a:	4628      	mov	r0, r5
   1864c:	e7c9      	b.n	185e2 <bt_mesh_hb_sub_set+0xe>
	if (period > (1U << 16)) {
   1864e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   18652:	d8db      	bhi.n	1860c <bt_mesh_hb_sub_set+0x38>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   18654:	2800      	cmp	r0, #0
   18656:	d0dc      	beq.n	18612 <bt_mesh_hb_sub_set+0x3e>
   18658:	2900      	cmp	r1, #0
   1865a:	d0da      	beq.n	18612 <bt_mesh_hb_sub_set+0x3e>
	} else if (period) {
   1865c:	2c00      	cmp	r4, #0
   1865e:	d0dc      	beq.n	1861a <bt_mesh_hb_sub_set+0x46>
		sub.count = 0U;
   18660:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
		sub.src = src;
   18664:	4b02      	ldr	r3, [pc, #8]	; (18670 <bt_mesh_hb_sub_set+0x9c>)
   18666:	811e      	strh	r6, [r3, #8]
		sub.dst = dst;
   18668:	815d      	strh	r5, [r3, #10]
		sub.count = 0U;
   1866a:	60da      	str	r2, [r3, #12]
		sub.period = period;
   1866c:	e7d6      	b.n	1861c <bt_mesh_hb_sub_set+0x48>
   1866e:	bf00      	nop
   18670:	2000acf0 	.word	0x2000acf0
   18674:	2000a218 	.word	0x2000a218

00018678 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
   18678:	2200      	movs	r2, #0
   1867a:	4b01      	ldr	r3, [pc, #4]	; (18680 <bt_mesh_hb_sub_reset_count+0x8>)
   1867c:	819a      	strh	r2, [r3, #12]
}
   1867e:	4770      	bx	lr
   18680:	2000acf0 	.word	0x2000acf0

00018684 <bt_mesh_hb_sub_get>:
{
   18684:	b538      	push	{r3, r4, r5, lr}
   18686:	4604      	mov	r4, r0
	*get = sub;
   18688:	4d0a      	ldr	r5, [pc, #40]	; (186b4 <bt_mesh_hb_sub_get+0x30>)
   1868a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1868e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   18692:	896b      	ldrh	r3, [r5, #10]
   18694:	b15b      	cbz	r3, 186ae <bt_mesh_hb_sub_get+0x2a>
   18696:	4808      	ldr	r0, [pc, #32]	; (186b8 <bt_mesh_hb_sub_get+0x34>)
   18698:	f00f fa32 	bl	27b00 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1869c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   186a0:	fba0 3102 	umull	r3, r1, r0, r2
   186a4:	0bdb      	lsrs	r3, r3, #15
   186a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return rem_ms / MSEC_PER_SEC;
   186aa:	fbb3 f3f2 	udiv	r3, r3, r2
	get->remaining = sub_remaining();
   186ae:	6063      	str	r3, [r4, #4]
}
   186b0:	bd38      	pop	{r3, r4, r5, pc}
   186b2:	bf00      	nop
   186b4:	2000acf0 	.word	0x2000acf0
   186b8:	2000a228 	.word	0x2000a228

000186bc <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   186bc:	4b04      	ldr	r3, [pc, #16]	; (186d0 <bt_mesh_hb_feature_changed+0x14>)
   186be:	881a      	ldrh	r2, [r3, #0]
   186c0:	b12a      	cbz	r2, 186ce <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
   186c2:	88db      	ldrh	r3, [r3, #6]
   186c4:	4218      	tst	r0, r3
   186c6:	d002      	beq.n	186ce <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(&pub_cb, NULL);
   186c8:	4802      	ldr	r0, [pc, #8]	; (186d4 <bt_mesh_hb_feature_changed+0x18>)
   186ca:	f7ff bdd9 	b.w	18280 <heartbeat_send.constprop.0>
}
   186ce:	4770      	bx	lr
   186d0:	2000ad00 	.word	0x2000ad00
   186d4:	000305dc 	.word	0x000305dc

000186d8 <bt_mesh_hb_init>:
	pub.net_idx = BT_MESH_KEY_UNUSED;
   186d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   186dc:	b508      	push	{r3, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
   186de:	4b06      	ldr	r3, [pc, #24]	; (186f8 <bt_mesh_hb_init+0x20>)
	k_work_init_delayable(&pub_timer, hb_publish);
   186e0:	4906      	ldr	r1, [pc, #24]	; (186fc <bt_mesh_hb_init+0x24>)
   186e2:	4807      	ldr	r0, [pc, #28]	; (18700 <bt_mesh_hb_init+0x28>)
	pub.net_idx = BT_MESH_KEY_UNUSED;
   186e4:	811a      	strh	r2, [r3, #8]
	k_work_init_delayable(&pub_timer, hb_publish);
   186e6:	f00d fedd 	bl	264a4 <k_work_init_delayable>
}
   186ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&sub_timer, sub_end);
   186ee:	4905      	ldr	r1, [pc, #20]	; (18704 <bt_mesh_hb_init+0x2c>)
   186f0:	4805      	ldr	r0, [pc, #20]	; (18708 <bt_mesh_hb_init+0x30>)
   186f2:	f00d bed7 	b.w	264a4 <k_work_init_delayable>
   186f6:	bf00      	nop
   186f8:	2000ad00 	.word	0x2000ad00
   186fc:	00018355 	.word	0x00018355
   18700:	2000a1e8 	.word	0x2000a1e8
   18704:	00018199 	.word	0x00018199
   18708:	2000a218 	.word	0x2000a218

0001870c <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
   1870c:	4b05      	ldr	r3, [pc, #20]	; (18724 <bt_mesh_hb_start+0x18>)
   1870e:	885a      	ldrh	r2, [r3, #2]
   18710:	b132      	cbz	r2, 18720 <bt_mesh_hb_start+0x14>
   18712:	68db      	ldr	r3, [r3, #12]
   18714:	b123      	cbz	r3, 18720 <bt_mesh_hb_start+0x14>
		k_work_reschedule(&pub_timer, K_NO_WAIT);
   18716:	2200      	movs	r2, #0
   18718:	2300      	movs	r3, #0
   1871a:	4803      	ldr	r0, [pc, #12]	; (18728 <bt_mesh_hb_start+0x1c>)
   1871c:	f00d bfac 	b.w	26678 <k_work_reschedule>
}
   18720:	4770      	bx	lr
   18722:	bf00      	nop
   18724:	2000ad00 	.word	0x2000ad00
   18728:	2000a1e8 	.word	0x2000a1e8

0001872c <bt_mesh_hb_pub_pending_store>:

void bt_mesh_hb_pub_pending_store(void)
{
   1872c:	b500      	push	{lr}
   1872e:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
   18730:	a802      	add	r0, sp, #8
   18732:	f7ff ff45 	bl	185c0 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   18736:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1873a:	b989      	cbnz	r1, 18760 <bt_mesh_hb_pub_pending_store+0x34>
		err = settings_delete("bt/mesh/HBPub");
   1873c:	4821      	ldr	r0, [pc, #132]	; (187c4 <bt_mesh_hb_pub_pending_store+0x98>)
   1873e:	f011 f809 	bl	29754 <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
   18742:	b150      	cbz	r0, 1875a <bt_mesh_hb_pub_pending_store+0x2e>
		LOG_ERR("Failed to store Heartbeat Publication");
   18744:	4b20      	ldr	r3, [pc, #128]	; (187c8 <bt_mesh_hb_pub_pending_store+0x9c>)
   18746:	930b      	str	r3, [sp, #44]	; 0x2c
   18748:	2302      	movs	r3, #2
   1874a:	930a      	str	r3, [sp, #40]	; 0x28
   1874c:	2300      	movs	r3, #0
   1874e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18752:	481e      	ldr	r0, [pc, #120]	; (187cc <bt_mesh_hb_pub_pending_store+0xa0>)
   18754:	aa0a      	add	r2, sp, #40	; 0x28
   18756:	f7f2 fa01 	bl	ab5c <z_impl_z_log_msg_static_create>
	} else {
		LOG_DBG("Stored Heartbeat Publication");
	}
}
   1875a:	b00d      	add	sp, #52	; 0x34
   1875c:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
   18760:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18764:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
   18768:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
   1876c:	1a98      	subs	r0, r3, r2
   1876e:	4243      	negs	r3, r0
   18770:	4143      	adcs	r3, r0
   18772:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18776:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
   1877a:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
   1877c:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   18780:	b13b      	cbz	r3, 18792 <bt_mesh_hb_pub_pending_store+0x66>
		return 0x00;
	} else if (val == 0xffff) {
   18782:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   18784:	bf17      	itett	ne
   18786:	fab3 f383 	clzne	r3, r3
		return 0xff;
   1878a:	23ff      	moveq	r3, #255	; 0xff
		return 32 - __builtin_clz(val);
   1878c:	f1c3 0320 	rsbne	r3, r3, #32
   18790:	b2db      	uxtbne	r3, r3
		val.period = bt_mesh_hb_log(pub.period);
   18792:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
   18796:	f89d 300c 	ldrb.w	r3, [sp, #12]
		val.net_idx = pub.net_idx;
   1879a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.ttl = pub.ttl;
   1879e:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
   187a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   187a6:	4669      	mov	r1, sp
		val.feat = pub.feat;
   187a8:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
   187ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   187b0:	4804      	ldr	r0, [pc, #16]	; (187c4 <bt_mesh_hb_pub_pending_store+0x98>)
		val.net_idx = pub.net_idx;
   187b2:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   187b6:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
   187b8:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   187bc:	f7f3 fc8e 	bl	c0dc <settings_save_one>
   187c0:	e7bf      	b.n	18742 <bt_mesh_hb_pub_pending_store+0x16>
   187c2:	bf00      	nop
   187c4:	000330c5 	.word	0x000330c5
   187c8:	000330d3 	.word	0x000330d3
   187cc:	0002fca4 	.word	0x0002fca4

000187d0 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
   187d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187d4:	b094      	sub	sp, #80	; 0x50
   187d6:	4680      	mov	r8, r0
   187d8:	460f      	mov	r7, r1
	int err;

	LOG_DBG("n %s", bt_hex(n, 16));
	LOG_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
   187da:	4828      	ldr	r0, [pc, #160]	; (1887c <bt_mesh_k2+0xac>)
   187dc:	a902      	add	r1, sp, #8
{
   187de:	4615      	mov	r5, r2
   187e0:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
   187e2:	f014 f8aa 	bl	2c93a <bt_mesh_s1>
	if (err) {
   187e6:	4604      	mov	r4, r0
   187e8:	2800      	cmp	r0, #0
   187ea:	d143      	bne.n	18874 <bt_mesh_k2+0xa4>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
   187ec:	2210      	movs	r2, #16
   187ee:	4641      	mov	r1, r8
   187f0:	ab0a      	add	r3, sp, #40	; 0x28
   187f2:	a802      	add	r0, sp, #8
   187f4:	f014 f897 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   187f8:	4604      	mov	r4, r0
   187fa:	2800      	cmp	r0, #0
   187fc:	d13a      	bne.n	18874 <bt_mesh_k2+0xa4>
		return err;
	}

	pad = 0x01;
   187fe:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
   18800:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
   18804:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   18808:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
   1880a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
   1880e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
   18812:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   18816:	2203      	movs	r2, #3
   18818:	462b      	mov	r3, r5
   1881a:	a90e      	add	r1, sp, #56	; 0x38
   1881c:	a80a      	add	r0, sp, #40	; 0x28
   1881e:	f014 f85f 	bl	2c8e0 <bt_mesh_aes_cmac>
	if (err) {
   18822:	4604      	mov	r4, r0
   18824:	bb30      	cbnz	r0, 18874 <bt_mesh_k2+0xa4>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
   18826:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
	sg[0].len  = sizeof(out);
	pad = 0x02;

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1882a:	2203      	movs	r2, #3
	net_id[0] = out[15] & 0x7f;
   1882c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18830:	7033      	strb	r3, [r6, #0]
	pad = 0x02;
   18832:	2302      	movs	r3, #2
	sg[0].len  = sizeof(out);
   18834:	2610      	movs	r6, #16
	pad = 0x02;
   18836:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1883a:	a90e      	add	r1, sp, #56	; 0x38
   1883c:	462b      	mov	r3, r5
   1883e:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].data = out;
   18840:	950e      	str	r5, [sp, #56]	; 0x38
	sg[0].len  = sizeof(out);
   18842:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   18844:	f014 f84c 	bl	2c8e0 <bt_mesh_aes_cmac>
	if (err) {
   18848:	4604      	mov	r4, r0
   1884a:	b998      	cbnz	r0, 18874 <bt_mesh_k2+0xa4>
		return err;
	}

	memcpy(enc_key, out, 16);
   1884c:	4632      	mov	r2, r6
   1884e:	4629      	mov	r1, r5
   18850:	981a      	ldr	r0, [sp, #104]	; 0x68
   18852:	f011 fe62 	bl	2a51a <memcpy>

	pad = 0x03;
   18856:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   18858:	462b      	mov	r3, r5
   1885a:	a90e      	add	r1, sp, #56	; 0x38
   1885c:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
   1885e:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   18862:	f014 f83d 	bl	2c8e0 <bt_mesh_aes_cmac>
	if (err) {
   18866:	4604      	mov	r4, r0
   18868:	b920      	cbnz	r0, 18874 <bt_mesh_k2+0xa4>
		return err;
	}

	memcpy(priv_key, out, 16);
   1886a:	4632      	mov	r2, r6
   1886c:	4629      	mov	r1, r5
   1886e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   18870:	f011 fe53 	bl	2a51a <memcpy>

	LOG_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	LOG_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
   18874:	4620      	mov	r0, r4
   18876:	b014      	add	sp, #80	; 0x50
   18878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1887c:	00033104 	.word	0x00033104

00018880 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
   18880:	b570      	push	{r4, r5, r6, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   18882:	4b13      	ldr	r3, [pc, #76]	; (188d0 <bt_mesh_k3+0x50>)
{
   18884:	4606      	mov	r6, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   18886:	6818      	ldr	r0, [r3, #0]
{
   18888:	b08a      	sub	sp, #40	; 0x28
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   1888a:	791b      	ldrb	r3, [r3, #4]
   1888c:	9000      	str	r0, [sp, #0]
{
   1888e:	460d      	mov	r5, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
   18890:	4810      	ldr	r0, [pc, #64]	; (188d4 <bt_mesh_k3+0x54>)
   18892:	a902      	add	r1, sp, #8
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   18894:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
   18898:	f014 f84f 	bl	2c93a <bt_mesh_s1>
	if (err) {
   1889c:	4604      	mov	r4, r0
   1889e:	b9a0      	cbnz	r0, 188ca <bt_mesh_k3+0x4a>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   188a0:	2210      	movs	r2, #16
   188a2:	4631      	mov	r1, r6
   188a4:	ab06      	add	r3, sp, #24
   188a6:	a802      	add	r0, sp, #8
   188a8:	f014 f83d 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   188ac:	4604      	mov	r4, r0
   188ae:	b960      	cbnz	r0, 188ca <bt_mesh_k3+0x4a>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
   188b0:	2205      	movs	r2, #5
   188b2:	4669      	mov	r1, sp
   188b4:	ab02      	add	r3, sp, #8
   188b6:	a806      	add	r0, sp, #24
   188b8:	f014 f835 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   188bc:	4604      	mov	r4, r0
   188be:	b920      	cbnz	r0, 188ca <bt_mesh_k3+0x4a>
		return err;
	}

	memcpy(out, tmp + 8, 8);
   188c0:	2208      	movs	r2, #8
   188c2:	4628      	mov	r0, r5
   188c4:	a904      	add	r1, sp, #16
   188c6:	f011 fe28 	bl	2a51a <memcpy>

	return 0;
}
   188ca:	4620      	mov	r0, r4
   188cc:	b00a      	add	sp, #40	; 0x28
   188ce:	bd70      	pop	{r4, r5, r6, pc}
   188d0:	0003310e 	.word	0x0003310e
   188d4:	00033109 	.word	0x00033109

000188d8 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
   188d8:	b530      	push	{r4, r5, lr}
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   188da:	4b10      	ldr	r3, [pc, #64]	; (1891c <bt_mesh_k4+0x44>)
{
   188dc:	b08b      	sub	sp, #44	; 0x2c
   188de:	4605      	mov	r5, r0
   188e0:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
   188e2:	480f      	ldr	r0, [pc, #60]	; (18920 <bt_mesh_k4+0x48>)
   188e4:	a902      	add	r1, sp, #8
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   188e6:	9301      	str	r3, [sp, #4]
	err = bt_mesh_s1("smk4", tmp);
   188e8:	f014 f827 	bl	2c93a <bt_mesh_s1>
	if (err) {
   188ec:	b998      	cbnz	r0, 18916 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   188ee:	2210      	movs	r2, #16
   188f0:	4629      	mov	r1, r5
   188f2:	ab06      	add	r3, sp, #24
   188f4:	a802      	add	r0, sp, #8
   188f6:	f014 f816 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   188fa:	b960      	cbnz	r0, 18916 <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
   188fc:	2204      	movs	r2, #4
   188fe:	ab02      	add	r3, sp, #8
   18900:	eb0d 0102 	add.w	r1, sp, r2
   18904:	a806      	add	r0, sp, #24
   18906:	f014 f80e 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   1890a:	b920      	cbnz	r0, 18916 <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
   1890c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18914:	7023      	strb	r3, [r4, #0]

	return 0;
}
   18916:	b00b      	add	sp, #44	; 0x2c
   18918:	bd30      	pop	{r4, r5, pc}
   1891a:	bf00      	nop
   1891c:	01366469 	.word	0x01366469
   18920:	00033114 	.word	0x00033114

00018924 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
   18924:	b530      	push	{r4, r5, lr}
   18926:	b087      	sub	sp, #28
   18928:	4604      	mov	r4, r0
   1892a:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
   1892c:	a902      	add	r1, sp, #8
{
   1892e:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
   18930:	f014 f803 	bl	2c93a <bt_mesh_s1>
	if (err) {
   18934:	b930      	cbnz	r0, 18944 <bt_mesh_id128+0x20>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
   18936:	2110      	movs	r1, #16
   18938:	4620      	mov	r0, r4
   1893a:	4b03      	ldr	r3, [pc, #12]	; (18948 <bt_mesh_id128+0x24>)
   1893c:	9500      	str	r5, [sp, #0]
   1893e:	aa02      	add	r2, sp, #8
   18940:	f014 f80e 	bl	2c960 <bt_mesh_k1>
}
   18944:	b007      	add	sp, #28
   18946:	bd30      	pop	{r4, r5, pc}
   18948:	00033119 	.word	0x00033119

0001894c <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
   1894c:	b570      	push	{r4, r5, r6, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   1894e:	4b18      	ldr	r3, [pc, #96]	; (189b0 <bt_mesh_net_obfuscate+0x64>)
{
   18950:	4604      	mov	r4, r0
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   18952:	6818      	ldr	r0, [r3, #0]
   18954:	889b      	ldrh	r3, [r3, #4]
{
   18956:	b088      	sub	sp, #32
   18958:	460e      	mov	r6, r1
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   1895a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1895e:	2300      	movs	r3, #0
   18960:	9000      	str	r0, [sp, #0]
	uint8_t tmp[16];
	int err, i;

	LOG_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
   18962:	f10d 0105 	add.w	r1, sp, #5
   18966:	4630      	mov	r0, r6
{
   18968:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   1896a:	f8cd 3006 	str.w	r3, [sp, #6]
   1896e:	f8cd 300a 	str.w	r3, [sp, #10]
   18972:	f8ad 300e 	strh.w	r3, [sp, #14]
	sys_put_be32(iv_index, &priv_rand[5]);
   18976:	f013 ff8d 	bl	2c894 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   1897a:	2207      	movs	r2, #7
   1897c:	f10d 0009 	add.w	r0, sp, #9
   18980:	18a1      	adds	r1, r4, r2
   18982:	f011 fdca 	bl	2a51a <memcpy>

	LOG_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   18986:	4669      	mov	r1, sp
   18988:	4628      	mov	r0, r5
   1898a:	aa04      	add	r2, sp, #16
   1898c:	f012 fab1 	bl	2aef2 <bt_encrypt_be>
	if (err) {
   18990:	b958      	cbnz	r0, 189aa <bt_mesh_net_obfuscate+0x5e>
   18992:	4623      	mov	r3, r4
   18994:	aa04      	add	r2, sp, #16
   18996:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
   18998:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   1899c:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   189a0:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   189a2:	ea81 0105 	eor.w	r1, r1, r5
   189a6:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   189a8:	d1f6      	bne.n	18998 <bt_mesh_net_obfuscate+0x4c>
	}

	return 0;
}
   189aa:	b008      	add	sp, #32
   189ac:	bd70      	pop	{r4, r5, r6, pc}
   189ae:	bf00      	nop
   189b0:	0002ffd8 	.word	0x0002ffd8

000189b4 <bt_mesh_fcs_calc>:
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
	uint8_t fcs = 0xff;
   189b4:	23ff      	movs	r3, #255	; 0xff
{
   189b6:	b510      	push	{r4, lr}

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
   189b8:	4a05      	ldr	r2, [pc, #20]	; (189d0 <bt_mesh_fcs_calc+0x1c>)
   189ba:	4401      	add	r1, r0
	while (data_len--) {
   189bc:	4288      	cmp	r0, r1
   189be:	d102      	bne.n	189c6 <bt_mesh_fcs_calc+0x12>
	}

	LOG_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
   189c0:	43d8      	mvns	r0, r3
}
   189c2:	b2c0      	uxtb	r0, r0
   189c4:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
   189c6:	f810 4b01 	ldrb.w	r4, [r0], #1
   189ca:	4063      	eors	r3, r4
   189cc:	5cd3      	ldrb	r3, [r2, r3]
   189ce:	e7f5      	b.n	189bc <bt_mesh_fcs_calc+0x8>
   189d0:	0003312a 	.word	0x0003312a

000189d4 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
	const uint8_t *data = buf->data;
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;
   189d4:	23ff      	movs	r3, #255	; 0xff
{
   189d6:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
   189d8:	6802      	ldr	r2, [r0, #0]

	while (data_len--) {
   189da:	8880      	ldrh	r0, [r0, #4]
   189dc:	4c07      	ldr	r4, [pc, #28]	; (189fc <bt_mesh_fcs_check+0x28>)
   189de:	4410      	add	r0, r2
   189e0:	4282      	cmp	r2, r0
   189e2:	d106      	bne.n	189f2 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
   189e4:	404b      	eors	r3, r1
   189e6:	5ce0      	ldrb	r0, [r4, r3]
}
   189e8:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
   189ec:	4258      	negs	r0, r3
   189ee:	4158      	adcs	r0, r3
   189f0:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
   189f2:	f812 5b01 	ldrb.w	r5, [r2], #1
   189f6:	406b      	eors	r3, r5
   189f8:	5ce3      	ldrb	r3, [r4, r3]
   189fa:	e7f1      	b.n	189e0 <bt_mesh_fcs_check+0xc>
   189fc:	0003312a 	.word	0x0003312a

00018a00 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
   18a00:	b530      	push	{r4, r5, lr}
   18a02:	b089      	sub	sp, #36	; 0x24
   18a04:	4605      	mov	r5, r0
   18a06:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
   18a08:	480b      	ldr	r0, [pc, #44]	; (18a38 <bt_mesh_virtual_addr+0x38>)
   18a0a:	4669      	mov	r1, sp
   18a0c:	f013 ff95 	bl	2c93a <bt_mesh_s1>
	if (err) {
   18a10:	b980      	cbnz	r0, 18a34 <bt_mesh_virtual_addr+0x34>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
   18a12:	2210      	movs	r2, #16
   18a14:	4629      	mov	r1, r5
   18a16:	4668      	mov	r0, sp
   18a18:	ab04      	add	r3, sp, #16
   18a1a:	f013 ff84 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err) {
   18a1e:	b948      	cbnz	r0, 18a34 <bt_mesh_virtual_addr+0x34>
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
   18a20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   18a24:	ba5b      	rev16	r3, r3
   18a26:	f3c3 030d 	ubfx	r3, r3, #0, #14
   18a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   18a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   18a32:	8023      	strh	r3, [r4, #0]

	return 0;
}
   18a34:	b009      	add	sp, #36	; 0x24
   18a36:	bd30      	pop	{r4, r5, pc}
   18a38:	00033120 	.word	0x00033120

00018a3c <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
   18a3c:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
   18a3e:	4b04      	ldr	r3, [pc, #16]	; (18a50 <bt_mesh_prov_conf_key+0x14>)
   18a40:	9200      	str	r2, [sp, #0]
   18a42:	460a      	mov	r2, r1
   18a44:	2120      	movs	r1, #32
   18a46:	f013 ff8b 	bl	2c960 <bt_mesh_k1>
}
   18a4a:	b003      	add	sp, #12
   18a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   18a50:	00033125 	.word	0x00033125

00018a54 <bt_mesh_access_send.part.0>:
{
	msg_cb = cb;
}
#endif

int bt_mesh_access_send(struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf, uint16_t src_addr,
   18a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx.ctx->net_idx, tx.ctx->app_idx,
		tx.ctx->addr);
	LOG_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (!bt_mesh_is_provisioned()) {
		LOG_ERR("Local node is not yet provisioned");
   18a56:	4b07      	ldr	r3, [pc, #28]	; (18a74 <bt_mesh_access_send.part.0+0x20>)
   18a58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a5c:	9305      	str	r3, [sp, #20]
   18a5e:	2302      	movs	r3, #2
   18a60:	4805      	ldr	r0, [pc, #20]	; (18a78 <bt_mesh_access_send.part.0+0x24>)
   18a62:	aa04      	add	r2, sp, #16
   18a64:	9304      	str	r3, [sp, #16]
   18a66:	f014 f916 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return -EAGAIN;
	}

	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
}
   18a6a:	f06f 000a 	mvn.w	r0, #10
   18a6e:	b007      	add	sp, #28
   18a70:	f85d fb04 	ldr.w	pc, [sp], #4
   18a74:	0003323c 	.word	0x0003323c
   18a78:	0002fc5c 	.word	0x0002fc5c

00018a7c <mod_init>:
{
   18a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a80:	af00      	add	r7, sp, #0
   18a82:	6a3d      	ldr	r5, [r7, #32]
   18a84:	4604      	mov	r4, r0
	if (*err) {
   18a86:	f8d5 8000 	ldr.w	r8, [r5]
{
   18a8a:	460e      	mov	r6, r1
   18a8c:	4691      	mov	r9, r2
	if (*err) {
   18a8e:	f1b8 0f00 	cmp.w	r8, #0
   18a92:	d14c      	bne.n	18b2e <mod_init+0xb2>
	if (mod->pub) {
   18a94:	6883      	ldr	r3, [r0, #8]
   18a96:	b12b      	cbz	r3, 18aa4 <mod_init+0x28>
		mod->pub->mod = mod;
   18a98:	6018      	str	r0, [r3, #0]
		k_work_init_delayable(&mod->pub->timer, mod_publish);
   18a9a:	6880      	ldr	r0, [r0, #8]
   18a9c:	4928      	ldr	r1, [pc, #160]	; (18b40 <mod_init+0xc4>)
   18a9e:	3018      	adds	r0, #24
   18aa0:	f00d fd00 	bl	264a4 <k_work_init_delayable>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   18aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	for (i = 0; i < mod->keys_cnt; i++) {
   18aa8:	8a23      	ldrh	r3, [r4, #16]
   18aaa:	4598      	cmp	r8, r3
   18aac:	db1c      	blt.n	18ae8 <mod_init+0x6c>
	mod->elem_idx = elem - dev_comp->elem;
   18aae:	4b25      	ldr	r3, [pc, #148]	; (18b44 <mod_init+0xc8>)
   18ab0:	4a25      	ldr	r2, [pc, #148]	; (18b48 <mod_init+0xcc>)
   18ab2:	681b      	ldr	r3, [r3, #0]
   18ab4:	68db      	ldr	r3, [r3, #12]
   18ab6:	1af3      	subs	r3, r6, r3
   18ab8:	111b      	asrs	r3, r3, #4
   18aba:	7123      	strb	r3, [r4, #4]
	if (vnd) {
   18abc:	f1b9 0f00 	cmp.w	r9, #0
   18ac0:	d038      	beq.n	18b34 <mod_init+0xb8>
		mod->mod_idx = mod - elem->vnd_models;
   18ac2:	68f3      	ldr	r3, [r6, #12]
   18ac4:	1ae3      	subs	r3, r4, r3
   18ac6:	10db      	asrs	r3, r3, #3
   18ac8:	4353      	muls	r3, r2
   18aca:	7163      	strb	r3, [r4, #5]
	for (op = mod->op; op->func; op++) {
   18acc:	69e3      	ldr	r3, [r4, #28]
   18ace:	330c      	adds	r3, #12
   18ad0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   18ad4:	b972      	cbnz	r2, 18af4 <mod_init+0x78>
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
   18ad6:	602a      	str	r2, [r5, #0]
	if (mod->cb && mod->cb->init) {
   18ad8:	6a23      	ldr	r3, [r4, #32]
   18ada:	b343      	cbz	r3, 18b2e <mod_init+0xb2>
   18adc:	689b      	ldr	r3, [r3, #8]
   18ade:	b333      	cbz	r3, 18b2e <mod_init+0xb2>
		*err = mod->cb->init(mod);
   18ae0:	4620      	mov	r0, r4
   18ae2:	4798      	blx	r3
   18ae4:	6028      	str	r0, [r5, #0]
   18ae6:	e022      	b.n	18b2e <mod_init+0xb2>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   18ae8:	68e3      	ldr	r3, [r4, #12]
   18aea:	f823 2018 	strh.w	r2, [r3, r8, lsl #1]
	for (i = 0; i < mod->keys_cnt; i++) {
   18aee:	f108 0801 	add.w	r8, r8, #1
   18af2:	e7d9      	b.n	18aa8 <mod_init+0x2c>
		cid = (uint16_t)(op->opcode & 0xffff);
   18af4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
		if (cid == mod->vnd.company) {
   18af8:	8820      	ldrh	r0, [r4, #0]
   18afa:	b28a      	uxth	r2, r1
   18afc:	4282      	cmp	r2, r0
   18afe:	f103 030c 	add.w	r3, r3, #12
   18b02:	d0e5      	beq.n	18ad0 <mod_init+0x54>
		LOG_ERR("Invalid vendor model(company:0x%04x"
   18b04:	8863      	ldrh	r3, [r4, #2]
   18b06:	466c      	mov	r4, sp
   18b08:	b08a      	sub	sp, #40	; 0x28
   18b0a:	466a      	mov	r2, sp
   18b0c:	e9c2 3107 	strd	r3, r1, [r2, #28]
   18b10:	2305      	movs	r3, #5
   18b12:	4e0e      	ldr	r6, [pc, #56]	; (18b4c <mod_init+0xd0>)
   18b14:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   18b18:	e9c2 6005 	strd	r6, r0, [r2, #20]
   18b1c:	f842 3f10 	str.w	r3, [r2, #16]!
   18b20:	480b      	ldr	r0, [pc, #44]	; (18b50 <mod_init+0xd4>)
   18b22:	f014 f8b8 	bl	2cc96 <z_log_msg_static_create.constprop.0>
			*err = bt_mesh_vnd_mod_msg_cid_check(mod);
   18b26:	f06f 0315 	mvn.w	r3, #21
   18b2a:	46a5      	mov	sp, r4
   18b2c:	602b      	str	r3, [r5, #0]
}
   18b2e:	46bd      	mov	sp, r7
   18b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		mod->mod_idx = mod - elem->models;
   18b34:	68b3      	ldr	r3, [r6, #8]
   18b36:	1ae3      	subs	r3, r4, r3
   18b38:	10db      	asrs	r3, r3, #3
   18b3a:	4353      	muls	r3, r2
   18b3c:	7163      	strb	r3, [r4, #5]
   18b3e:	e7cb      	b.n	18ad8 <mod_init+0x5c>
   18b40:	00018e75 	.word	0x00018e75
   18b44:	2000ad10 	.word	0x2000ad10
   18b48:	cccccccd 	.word	0xcccccccd
   18b4c:	0003325e 	.word	0x0003325e
   18b50:	0002fc5c 	.word	0x0002fc5c

00018b54 <encode_mod_path.isra.0>:
	return mod_set(true, name, len_rd, read_cb, cb_arg);
}

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
   18b54:	b470      	push	{r4, r5, r6}
   18b56:	4606      	mov	r6, r0
   18b58:	460c      	mov	r4, r1
   18b5a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   18b5e:	461d      	mov	r5, r3
			    const char *key, char *path, size_t path_len)
{
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   18b60:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
   18b64:	9503      	str	r5, [sp, #12]
	if (vnd) {
   18b66:	b11a      	cbz	r2, 18b70 <encode_mod_path.isra.0+0x1c>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   18b68:	4a02      	ldr	r2, [pc, #8]	; (18b74 <encode_mod_path.isra.0+0x20>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
	}
}
   18b6a:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   18b6c:	f00f be2f 	b.w	287ce <snprintk>
   18b70:	4a01      	ldr	r2, [pc, #4]	; (18b78 <encode_mod_path.isra.0+0x24>)
   18b72:	e7fa      	b.n	18b6a <encode_mod_path.isra.0+0x16>
   18b74:	000332a3 	.word	0x000332a3
   18b78:	000332b3 	.word	0x000332b3

00018b7c <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
   18b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b7e:	b08b      	sub	sp, #44	; 0x2c
	if (!mod->flags) {
   18b80:	88c3      	ldrh	r3, [r0, #6]
{
   18b82:	4604      	mov	r4, r0
   18b84:	4615      	mov	r5, r2
   18b86:	af02      	add	r7, sp, #8
	if (!mod->flags) {
   18b88:	2b00      	cmp	r3, #0
   18b8a:	f000 8098 	beq.w	18cbe <store_pending_mod+0x142>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   18b8e:	07d8      	lsls	r0, r3, #31
   18b90:	d533      	bpl.n	18bfa <store_pending_mod+0x7e>
	for (i = 0, count = 0; i < mod->keys_cnt; i++) {
   18b92:	2600      	movs	r6, #0
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   18b94:	f023 0301 	bic.w	r3, r3, #1
   18b98:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   18b9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (i = 0, count = 0; i < mod->keys_cnt; i++) {
   18b9e:	4633      	mov	r3, r6
   18ba0:	8a21      	ldrh	r1, [r4, #16]
   18ba2:	428b      	cmp	r3, r1
   18ba4:	f2c0 808e 	blt.w	18cc4 <store_pending_mod+0x148>
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   18ba8:	2314      	movs	r3, #20
   18baa:	7961      	ldrb	r1, [r4, #5]
   18bac:	7920      	ldrb	r0, [r4, #4]
   18bae:	9301      	str	r3, [sp, #4]
   18bb0:	f107 030c 	add.w	r3, r7, #12
   18bb4:	9300      	str	r3, [sp, #0]
   18bb6:	462a      	mov	r2, r5
   18bb8:	4b62      	ldr	r3, [pc, #392]	; (18d44 <store_pending_mod+0x1c8>)
   18bba:	f7ff ffcb 	bl	18b54 <encode_mod_path.isra.0>
	if (count) {
   18bbe:	2e00      	cmp	r6, #0
   18bc0:	f000 808e 	beq.w	18ce0 <store_pending_mod+0x164>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   18bc4:	0072      	lsls	r2, r6, #1
   18bc6:	1d39      	adds	r1, r7, #4
   18bc8:	f107 000c 	add.w	r0, r7, #12
   18bcc:	f7f3 fa86 	bl	c0dc <settings_save_one>
	if (err) {
   18bd0:	b198      	cbz	r0, 18bfa <store_pending_mod+0x7e>
		LOG_ERR("Failed to store %s value", path);
   18bd2:	466e      	mov	r6, sp
   18bd4:	b088      	sub	sp, #32
   18bd6:	aa02      	add	r2, sp, #8
   18bd8:	4b5b      	ldr	r3, [pc, #364]	; (18d48 <store_pending_mod+0x1cc>)
   18bda:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18bde:	6153      	str	r3, [r2, #20]
   18be0:	f107 030c 	add.w	r3, r7, #12
   18be4:	6193      	str	r3, [r2, #24]
   18be6:	f44f 7300 	mov.w	r3, #512	; 0x200
   18bea:	8393      	strh	r3, [r2, #28]
   18bec:	4b57      	ldr	r3, [pc, #348]	; (18d4c <store_pending_mod+0x1d0>)
   18bee:	4858      	ldr	r0, [pc, #352]	; (18d50 <store_pending_mod+0x1d4>)
   18bf0:	f842 3f10 	str.w	r3, [r2, #16]!
   18bf4:	f014 f84f 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   18bf8:	46b5      	mov	sp, r6
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   18bfa:	88e3      	ldrh	r3, [r4, #6]
   18bfc:	0799      	lsls	r1, r3, #30
   18bfe:	d52f      	bpl.n	18c60 <store_pending_mod+0xe4>
	for (i = 0, count = 0; i < mod->groups_cnt; i++) {
   18c00:	2600      	movs	r6, #0
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   18c02:	f023 0302 	bic.w	r3, r3, #2
   18c06:	80e3      	strh	r3, [r4, #6]
	for (i = 0, count = 0; i < mod->groups_cnt; i++) {
   18c08:	4633      	mov	r3, r6
   18c0a:	8b21      	ldrh	r1, [r4, #24]
   18c0c:	428b      	cmp	r3, r1
   18c0e:	db6c      	blt.n	18cea <store_pending_mod+0x16e>
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   18c10:	2314      	movs	r3, #20
   18c12:	7961      	ldrb	r1, [r4, #5]
   18c14:	7920      	ldrb	r0, [r4, #4]
   18c16:	9301      	str	r3, [sp, #4]
   18c18:	f107 030c 	add.w	r3, r7, #12
   18c1c:	9300      	str	r3, [sp, #0]
   18c1e:	462a      	mov	r2, r5
   18c20:	4b4c      	ldr	r3, [pc, #304]	; (18d54 <store_pending_mod+0x1d8>)
   18c22:	f7ff ff97 	bl	18b54 <encode_mod_path.isra.0>
	if (count) {
   18c26:	2e00      	cmp	r6, #0
   18c28:	d06c      	beq.n	18d04 <store_pending_mod+0x188>
		err = settings_save_one(path, groups,
   18c2a:	0072      	lsls	r2, r6, #1
   18c2c:	1d39      	adds	r1, r7, #4
   18c2e:	f107 000c 	add.w	r0, r7, #12
   18c32:	f7f3 fa53 	bl	c0dc <settings_save_one>
	if (err) {
   18c36:	b198      	cbz	r0, 18c60 <store_pending_mod+0xe4>
		LOG_ERR("Failed to store %s value", path);
   18c38:	466e      	mov	r6, sp
   18c3a:	b088      	sub	sp, #32
   18c3c:	aa02      	add	r2, sp, #8
   18c3e:	4b42      	ldr	r3, [pc, #264]	; (18d48 <store_pending_mod+0x1cc>)
   18c40:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18c44:	6153      	str	r3, [r2, #20]
   18c46:	f107 030c 	add.w	r3, r7, #12
   18c4a:	6193      	str	r3, [r2, #24]
   18c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
   18c50:	8393      	strh	r3, [r2, #28]
   18c52:	4b3e      	ldr	r3, [pc, #248]	; (18d4c <store_pending_mod+0x1d0>)
   18c54:	483e      	ldr	r0, [pc, #248]	; (18d50 <store_pending_mod+0x1d4>)
   18c56:	f842 3f10 	str.w	r3, [r2, #16]!
   18c5a:	f014 f81c 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   18c5e:	46b5      	mov	sp, r6
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   18c60:	88e3      	ldrh	r3, [r4, #6]
   18c62:	075a      	lsls	r2, r3, #29
   18c64:	d52b      	bpl.n	18cbe <store_pending_mod+0x142>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   18c66:	f023 0304 	bic.w	r3, r3, #4
   18c6a:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   18c6c:	2314      	movs	r3, #20
   18c6e:	7961      	ldrb	r1, [r4, #5]
   18c70:	7920      	ldrb	r0, [r4, #4]
   18c72:	9301      	str	r3, [sp, #4]
   18c74:	f107 030c 	add.w	r3, r7, #12
   18c78:	9300      	str	r3, [sp, #0]
   18c7a:	462a      	mov	r2, r5
   18c7c:	4b36      	ldr	r3, [pc, #216]	; (18d58 <store_pending_mod+0x1dc>)
   18c7e:	f7ff ff69 	bl	18b54 <encode_mod_path.isra.0>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   18c82:	68a3      	ldr	r3, [r4, #8]
   18c84:	b113      	cbz	r3, 18c8c <store_pending_mod+0x110>
   18c86:	889a      	ldrh	r2, [r3, #4]
   18c88:	2a00      	cmp	r2, #0
   18c8a:	d140      	bne.n	18d0e <store_pending_mod+0x192>
		err = settings_delete(path);
   18c8c:	f107 000c 	add.w	r0, r7, #12
   18c90:	f010 fd60 	bl	29754 <settings_delete>
	if (err) {
   18c94:	b198      	cbz	r0, 18cbe <store_pending_mod+0x142>
		LOG_ERR("Failed to store %s value", path);
   18c96:	466c      	mov	r4, sp
   18c98:	b088      	sub	sp, #32
   18c9a:	aa02      	add	r2, sp, #8
   18c9c:	4b2a      	ldr	r3, [pc, #168]	; (18d48 <store_pending_mod+0x1cc>)
   18c9e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18ca2:	6153      	str	r3, [r2, #20]
   18ca4:	f107 030c 	add.w	r3, r7, #12
   18ca8:	6193      	str	r3, [r2, #24]
   18caa:	f44f 7300 	mov.w	r3, #512	; 0x200
   18cae:	8393      	strh	r3, [r2, #28]
   18cb0:	4b26      	ldr	r3, [pc, #152]	; (18d4c <store_pending_mod+0x1d0>)
   18cb2:	4827      	ldr	r0, [pc, #156]	; (18d50 <store_pending_mod+0x1d4>)
   18cb4:	f842 3f10 	str.w	r3, [r2, #16]!
   18cb8:	f013 ffed 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   18cbc:	46a5      	mov	sp, r4
		store_pending_mod_pub(mod, vnd);
	}
}
   18cbe:	3724      	adds	r7, #36	; 0x24
   18cc0:	46bd      	mov	sp, r7
   18cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   18cc4:	68e2      	ldr	r2, [r4, #12]
   18cc6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
	for (i = 0, count = 0; i < mod->keys_cnt; i++) {
   18cca:	3301      	adds	r3, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   18ccc:	4282      	cmp	r2, r0
			keys[count++] = mod->keys[i];
   18cce:	bf1f      	itttt	ne
   18cd0:	f107 0c20 	addne.w	ip, r7, #32
   18cd4:	eb0c 0c46 	addne.w	ip, ip, r6, lsl #1
   18cd8:	f82c 2c1c 	strhne.w	r2, [ip, #-28]
   18cdc:	3601      	addne	r6, #1
	for (i = 0, count = 0; i < mod->keys_cnt; i++) {
   18cde:	e760      	b.n	18ba2 <store_pending_mod+0x26>
		err = settings_delete(path);
   18ce0:	f107 000c 	add.w	r0, r7, #12
   18ce4:	f010 fd36 	bl	29754 <settings_delete>
   18ce8:	e772      	b.n	18bd0 <store_pending_mod+0x54>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   18cea:	6962      	ldr	r2, [r4, #20]
   18cec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   18cf0:	b132      	cbz	r2, 18d00 <store_pending_mod+0x184>
			groups[count++] = mod->groups[i];
   18cf2:	f107 0020 	add.w	r0, r7, #32
   18cf6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   18cfa:	f820 2c1c 	strh.w	r2, [r0, #-28]
   18cfe:	3601      	adds	r6, #1
	for (i = 0, count = 0; i < mod->groups_cnt; i++) {
   18d00:	3301      	adds	r3, #1
   18d02:	e783      	b.n	18c0c <store_pending_mod+0x90>
		err = settings_delete(path);
   18d04:	f107 000c 	add.w	r0, r7, #12
   18d08:	f010 fd24 	bl	29754 <settings_delete>
   18d0c:	e793      	b.n	18c36 <store_pending_mod+0xba>
		pub.addr = mod->pub->addr;
   18d0e:	80ba      	strh	r2, [r7, #4]
		pub.key = mod->pub->key;
   18d10:	88da      	ldrh	r2, [r3, #6]
		err = settings_save_one(path, &pub, sizeof(pub));
   18d12:	f107 000c 	add.w	r0, r7, #12
		pub.key = mod->pub->key;
   18d16:	f3c2 020b 	ubfx	r2, r2, #0, #12
   18d1a:	80fa      	strh	r2, [r7, #6]
		pub.ttl = mod->pub->ttl;
   18d1c:	6899      	ldr	r1, [r3, #8]
   18d1e:	68ba      	ldr	r2, [r7, #8]
   18d20:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   18d24:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   18d28:	430a      	orrs	r2, r1
   18d2a:	60ba      	str	r2, [r7, #8]
		pub.cred = mod->pub->cred;
   18d2c:	79db      	ldrb	r3, [r3, #7]
   18d2e:	7afa      	ldrb	r2, [r7, #11]
   18d30:	f3c3 1300 	ubfx	r3, r3, #4, #1
   18d34:	f363 1204 	bfi	r2, r3, #4, #1
   18d38:	72fa      	strb	r2, [r7, #11]
		err = settings_save_one(path, &pub, sizeof(pub));
   18d3a:	1d39      	adds	r1, r7, #4
   18d3c:	2208      	movs	r2, #8
   18d3e:	f7f3 f9cd 	bl	c0dc <settings_save_one>
   18d42:	e7a7      	b.n	18c94 <store_pending_mod+0x118>
   18d44:	000332c3 	.word	0x000332c3
   18d48:	000332c8 	.word	0x000332c8
   18d4c:	01000003 	.word	0x01000003
   18d50:	0002fc5c 	.word	0x0002fc5c
   18d54:	000332e1 	.word	0x000332e1
   18d58:	000332e5 	.word	0x000332e5

00018d5c <bt_mesh_model_foreach>:
{
   18d5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18d60:	4606      	mov	r6, r0
   18d62:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
   18d64:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
   18d66:	f04f 0928 	mov.w	r9, #40	; 0x28
	for (i = 0; i < dev_comp->elem_count; i++) {
   18d6a:	f8df a064 	ldr.w	sl, [pc, #100]	; 18dd0 <bt_mesh_model_foreach+0x74>
   18d6e:	f8da 3000 	ldr.w	r3, [sl]
   18d72:	689a      	ldr	r2, [r3, #8]
   18d74:	42aa      	cmp	r2, r5
   18d76:	d802      	bhi.n	18d7e <bt_mesh_model_foreach+0x22>
}
   18d78:	b002      	add	sp, #8
   18d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (j = 0; j < elem->model_count; j++) {
   18d7e:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   18d82:	68dc      	ldr	r4, [r3, #12]
   18d84:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   18d88:	7923      	ldrb	r3, [r4, #4]
   18d8a:	4543      	cmp	r3, r8
   18d8c:	dc06      	bgt.n	18d9c <bt_mesh_model_foreach+0x40>
		for (j = 0; j < elem->vnd_model_count; j++) {
   18d8e:	f04f 0800 	mov.w	r8, #0
   18d92:	7963      	ldrb	r3, [r4, #5]
   18d94:	4543      	cmp	r3, r8
   18d96:	dc0e      	bgt.n	18db6 <bt_mesh_model_foreach+0x5a>
	for (i = 0; i < dev_comp->elem_count; i++) {
   18d98:	3501      	adds	r5, #1
   18d9a:	e7e8      	b.n	18d6e <bt_mesh_model_foreach+0x12>
			func(model, elem, false, i == 0, user_data);
   18d9c:	fab5 f385 	clz	r3, r5
			struct bt_mesh_model *model = &elem->models[j];
   18da0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   18da2:	2200      	movs	r2, #0
   18da4:	fb09 0008 	mla	r0, r9, r8, r0
   18da8:	4621      	mov	r1, r4
   18daa:	9700      	str	r7, [sp, #0]
   18dac:	095b      	lsrs	r3, r3, #5
   18dae:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
   18db0:	f108 0801 	add.w	r8, r8, #1
   18db4:	e7e8      	b.n	18d88 <bt_mesh_model_foreach+0x2c>
			func(model, elem, true, i == 0, user_data);
   18db6:	fab5 f385 	clz	r3, r5
			struct bt_mesh_model *model = &elem->vnd_models[j];
   18dba:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   18dbc:	2201      	movs	r2, #1
   18dbe:	fb09 0008 	mla	r0, r9, r8, r0
   18dc2:	4621      	mov	r1, r4
   18dc4:	9700      	str	r7, [sp, #0]
   18dc6:	095b      	lsrs	r3, r3, #5
   18dc8:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
   18dca:	f108 0801 	add.w	r8, r8, #1
   18dce:	e7e0      	b.n	18d92 <bt_mesh_model_foreach+0x36>
   18dd0:	2000ad10 	.word	0x2000ad10

00018dd4 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   18dd4:	6883      	ldr	r3, [r0, #8]
   18dd6:	b30b      	cbz	r3, 18e1c <bt_mesh_model_pub_period_get+0x48>
	switch (mod->pub->period >> 6) {
   18dd8:	7a98      	ldrb	r0, [r3, #10]
   18dda:	0982      	lsrs	r2, r0, #6
   18ddc:	2a02      	cmp	r2, #2
   18dde:	d014      	beq.n	18e0a <bt_mesh_model_pub_period_get+0x36>
   18de0:	2a03      	cmp	r2, #3
   18de2:	d017      	beq.n	18e14 <bt_mesh_model_pub_period_get+0x40>
   18de4:	2a01      	cmp	r2, #1
   18de6:	d00a      	beq.n	18dfe <bt_mesh_model_pub_period_get+0x2a>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   18de8:	2264      	movs	r2, #100	; 0x64
   18dea:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
   18dee:	79da      	ldrb	r2, [r3, #7]
   18df0:	0652      	lsls	r2, r2, #25
   18df2:	d514      	bpl.n	18e1e <bt_mesh_model_pub_period_get+0x4a>
		return period >> mod->pub->period_div;
   18df4:	7adb      	ldrb	r3, [r3, #11]
   18df6:	f003 030f 	and.w	r3, r3, #15
   18dfa:	4118      	asrs	r0, r3
   18dfc:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   18dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e02:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   18e06:	4350      	muls	r0, r2
		break;
   18e08:	e7f1      	b.n	18dee <bt_mesh_model_pub_period_get+0x1a>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   18e0a:	f242 7210 	movw	r2, #10000	; 0x2710
   18e0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18e12:	e7f8      	b.n	18e06 <bt_mesh_model_pub_period_get+0x32>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   18e14:	4a02      	ldr	r2, [pc, #8]	; (18e20 <bt_mesh_model_pub_period_get+0x4c>)
   18e16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18e1a:	e7f4      	b.n	18e06 <bt_mesh_model_pub_period_get+0x32>
		return 0;
   18e1c:	4618      	mov	r0, r3
}
   18e1e:	4770      	bx	lr
   18e20:	000927c0 	.word	0x000927c0

00018e24 <publish_start.part.0>:
static void publish_start(uint16_t duration, int err, void *user_data)
   18e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e26:	af00      	add	r7, sp, #0
		LOG_ERR("Failed to publish: err %d", err);
   18e28:	466e      	mov	r6, sp
   18e2a:	b088      	sub	sp, #32
static void publish_start(uint16_t duration, int err, void *user_data)
   18e2c:	4604      	mov	r4, r0
   18e2e:	460d      	mov	r5, r1
		LOG_ERR("Failed to publish: err %d", err);
   18e30:	466a      	mov	r2, sp
   18e32:	4b09      	ldr	r3, [pc, #36]	; (18e58 <publish_start.part.0+0x34>)
   18e34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18e3c:	2303      	movs	r3, #3
   18e3e:	4807      	ldr	r0, [pc, #28]	; (18e5c <publish_start.part.0+0x38>)
   18e40:	f842 3f10 	str.w	r3, [r2, #16]!
   18e44:	f013 ff27 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		publish_sent(err, user_data);
   18e48:	4629      	mov	r1, r5
   18e4a:	46b5      	mov	sp, r6
   18e4c:	4620      	mov	r0, r4
   18e4e:	f013 ff25 	bl	2cc9c <publish_sent>
}
   18e52:	46bd      	mov	sp, r7
   18e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e56:	bf00      	nop
   18e58:	000332e9 	.word	0x000332e9
   18e5c:	0002fc5c 	.word	0x0002fc5c

00018e60 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   18e60:	4b03      	ldr	r3, [pc, #12]	; (18e70 <bt_mesh_model_elem+0x10>)
   18e62:	7900      	ldrb	r0, [r0, #4]
   18e64:	681b      	ldr	r3, [r3, #0]
   18e66:	68db      	ldr	r3, [r3, #12]
}
   18e68:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   18e6c:	4770      	bx	lr
   18e6e:	bf00      	nop
   18e70:	2000ad10 	.word	0x2000ad10

00018e74 <mod_publish>:
{
   18e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e76:	b0a9      	sub	sp, #164	; 0xa4
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   18e78:	f830 3c14 	ldrh.w	r3, [r0, #-20]
{
   18e7c:	4604      	mov	r4, r0
   18e7e:	af00      	add	r7, sp, #0
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED ||
   18e80:	b323      	cbz	r3, 18ecc <mod_publish+0x58>
   18e82:	4b46      	ldr	r3, [pc, #280]	; (18f9c <mod_publish+0x128>)
   18e84:	e8d3 3faf 	lda	r3, [r3]
   18e88:	f3c3 0680 	ubfx	r6, r3, #2, #1
   18e8c:	075b      	lsls	r3, r3, #29
   18e8e:	d41d      	bmi.n	18ecc <mod_publish+0x58>
	if (pub->count) {
   18e90:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		    bt_mesh_model_pub_is_retransmission(pub->mod)) {
   18e94:	f850 0c18 	ldr.w	r0, [r0, #-24]
	if (pub->count) {
   18e98:	2b0f      	cmp	r3, #15
   18e9a:	d91a      	bls.n	18ed2 <mod_publish+0x5e>
		pub->count--;
   18e9c:	33f0      	adds	r3, #240	; 0xf0
   18e9e:	f804 3c0d 	strb.w	r3, [r4, #-13]
		if (pub->retr_update && pub->update &&
   18ea2:	f914 3c11 	ldrsb.w	r3, [r4, #-17]
   18ea6:	2b00      	cmp	r3, #0
   18ea8:	da2f      	bge.n	18f0a <mod_publish+0x96>
   18eaa:	f854 2c04 	ldr.w	r2, [r4, #-4]
   18eae:	b362      	cbz	r2, 18f0a <mod_publish+0x96>
   18eb0:	6883      	ldr	r3, [r0, #8]
 *
 * @return true if this is a retransmission, false if this is a first publication.
 */
static inline bool bt_mesh_model_pub_is_retransmission(const struct bt_mesh_model *model)
{
	return model->pub->count != BT_MESH_PUB_TRANSMIT_COUNT(model->pub->retransmit);
   18eb2:	7ad9      	ldrb	r1, [r3, #11]
   18eb4:	7a5b      	ldrb	r3, [r3, #9]
   18eb6:	f003 0307 	and.w	r3, r3, #7
   18eba:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
   18ebe:	d024      	beq.n	18f0a <mod_publish+0x96>
			err = pub->update(pub->mod);
   18ec0:	4790      	blx	r2
			if (err) {
   18ec2:	b310      	cbz	r0, 18f0a <mod_publish+0x96>
				publish_sent(err, pub->mod);
   18ec4:	f854 1c18 	ldr.w	r1, [r4, #-24]
		publish_sent(err, pub->mod);
   18ec8:	f013 fee8 	bl	2cc9c <publish_sent>
}
   18ecc:	37a4      	adds	r7, #164	; 0xa4
   18ece:	46bd      	mov	sp, r7
   18ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   18ed2:	f814 2c0f 	ldrb.w	r2, [r4, #-15]
   18ed6:	f002 0207 	and.w	r2, r2, #7
   18eda:	f362 1307 	bfi	r3, r2, #4, #4
   18ede:	f804 3c0d 	strb.w	r3, [r4, #-13]
	if (!pub->update) {
   18ee2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18ee6:	b183      	cbz	r3, 18f0a <mod_publish+0x96>
	err = pub->update(pub->mod);
   18ee8:	4798      	blx	r3
   18eea:	4605      	mov	r5, r0
	pub->period_start = k_uptime_get_32();
   18eec:	f013 fec6 	bl	2cc7c <k_uptime_get_32>
   18ef0:	f844 0c0c 	str.w	r0, [r4, #-12]
	if (err) {
   18ef4:	b14d      	cbz	r5, 18f0a <mod_publish+0x96>
		pub->count = 0;
   18ef6:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   18efa:	f366 1307 	bfi	r3, r6, #4, #4
   18efe:	f804 3c0d 	strb.w	r3, [r4, #-13]
		publish_sent(err, pub->mod);
   18f02:	4628      	mov	r0, r5
   18f04:	f854 1c18 	ldr.w	r1, [r4, #-24]
   18f08:	e7de      	b.n	18ec8 <mod_publish+0x54>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   18f0a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	struct bt_mesh_msg_ctx ctx = BT_MESH_MSG_CTX_INIT_PUB(pub);
   18f0e:	2100      	movs	r1, #0
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   18f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18f14:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err = publish_transmit(pub->mod);
   18f18:	f854 5c18 	ldr.w	r5, [r4, #-24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   18f1c:	607b      	str	r3, [r7, #4]
	struct bt_mesh_model_pub *pub = mod->pub;
   18f1e:	68aa      	ldr	r2, [r5, #8]
	struct bt_mesh_msg_ctx ctx = BT_MESH_MSG_CTX_INIT_PUB(pub);
   18f20:	e9c7 1104 	strd	r1, r1, [r7, #16]
   18f24:	61b9      	str	r1, [r7, #24]
   18f26:	88d0      	ldrh	r0, [r2, #6]
   18f28:	f107 0310 	add.w	r3, r7, #16
   18f2c:	f3c0 000b 	ubfx	r0, r0, #0, #12
   18f30:	8278      	strh	r0, [r7, #18]
   18f32:	8890      	ldrh	r0, [r2, #4]
   18f34:	82b8      	strh	r0, [r7, #20]
   18f36:	7a10      	ldrb	r0, [r2, #8]
	struct bt_mesh_net_tx tx = {
   18f38:	e9c7 3108 	strd	r3, r1, [r7, #32]
	struct bt_mesh_msg_ctx ctx = BT_MESH_MSG_CTX_INIT_PUB(pub);
   18f3c:	76f8      	strb	r0, [r7, #27]
		.src = bt_mesh_model_elem(mod)->addr,
   18f3e:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   18f40:	61f9      	str	r1, [r7, #28]
		.src = bt_mesh_model_elem(mod)->addr,
   18f42:	f7ff ff8d 	bl	18e60 <bt_mesh_model_elem>
   18f46:	8803      	ldrh	r3, [r0, #0]
	struct bt_mesh_net_tx tx = {
   18f48:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   18f4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		.friend_cred = pub->cred,
   18f4e:	79d3      	ldrb	r3, [r2, #7]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   18f50:	1d38      	adds	r0, r7, #4
		.friend_cred = pub->cred,
   18f52:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   18f56:	f363 0100 	bfi	r1, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   18f5a:	6913      	ldr	r3, [r2, #16]
	struct bt_mesh_net_tx tx = {
   18f5c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   18f60:	889a      	ldrh	r2, [r3, #4]
   18f62:	6819      	ldr	r1, [r3, #0]
   18f64:	f014 ffb9 	bl	2deda <net_buf_simple_add_mem>
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   18f68:	462b      	mov	r3, r5
   18f6a:	4a0d      	ldr	r2, [pc, #52]	; (18fa0 <mod_publish+0x12c>)
   18f6c:	1d39      	adds	r1, r7, #4
   18f6e:	f107 001c 	add.w	r0, r7, #28
   18f72:	f7fe fc43 	bl	177fc <bt_mesh_trans_send>
	if (err) {
   18f76:	4605      	mov	r5, r0
   18f78:	2800      	cmp	r0, #0
   18f7a:	d0a7      	beq.n	18ecc <mod_publish+0x58>
		LOG_ERR("Failed to publish (err %d)", err);
   18f7c:	466e      	mov	r6, sp
   18f7e:	b088      	sub	sp, #32
   18f80:	466a      	mov	r2, sp
   18f82:	4b08      	ldr	r3, [pc, #32]	; (18fa4 <mod_publish+0x130>)
   18f84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18f88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18f8c:	2303      	movs	r3, #3
   18f8e:	4806      	ldr	r0, [pc, #24]	; (18fa8 <mod_publish+0x134>)
   18f90:	f842 3f10 	str.w	r3, [r2, #16]!
   18f94:	f013 fe7f 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   18f98:	46b5      	mov	sp, r6
   18f9a:	e7b2      	b.n	18f02 <mod_publish+0x8e>
   18f9c:	20009ed0 	.word	0x20009ed0
   18fa0:	000305e4 	.word	0x000305e4
   18fa4:	00033303 	.word	0x00033303
   18fa8:	0002fc5c 	.word	0x0002fc5c

00018fac <bt_mesh_model_get>:
{
   18fac:	b598      	push	{r3, r4, r7, lr}
   18fae:	4613      	mov	r3, r2
	if (elem_idx >= dev_comp->elem_count) {
   18fb0:	4a1b      	ldr	r2, [pc, #108]	; (19020 <bt_mesh_model_get+0x74>)
{
   18fb2:	af00      	add	r7, sp, #0
	if (elem_idx >= dev_comp->elem_count) {
   18fb4:	6812      	ldr	r2, [r2, #0]
   18fb6:	6894      	ldr	r4, [r2, #8]
   18fb8:	42a1      	cmp	r1, r4
   18fba:	d311      	bcc.n	18fe0 <bt_mesh_model_get+0x34>
		LOG_ERR("Invalid element index %u", elem_idx);
   18fbc:	466c      	mov	r4, sp
   18fbe:	b088      	sub	sp, #32
   18fc0:	466a      	mov	r2, sp
   18fc2:	4b18      	ldr	r3, [pc, #96]	; (19024 <bt_mesh_model_get+0x78>)
   18fc4:	e9c2 3105 	strd	r3, r1, [r2, #20]
			LOG_ERR("Invalid vendor model index %u", mod_idx);
   18fc8:	2303      	movs	r3, #3
   18fca:	4817      	ldr	r0, [pc, #92]	; (19028 <bt_mesh_model_get+0x7c>)
   18fcc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18fd0:	f842 3f10 	str.w	r3, [r2, #16]!
   18fd4:	f013 fe5f 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return NULL;
   18fd8:	2000      	movs	r0, #0
   18fda:	46a5      	mov	sp, r4
}
   18fdc:	46bd      	mov	sp, r7
   18fde:	bd98      	pop	{r3, r4, r7, pc}
	elem = &dev_comp->elem[elem_idx];
   18fe0:	68d2      	ldr	r2, [r2, #12]
   18fe2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
	if (vnd) {
   18fe6:	b178      	cbz	r0, 19008 <bt_mesh_model_get+0x5c>
		if (mod_idx >= elem->vnd_model_count) {
   18fe8:	794a      	ldrb	r2, [r1, #5]
   18fea:	429a      	cmp	r2, r3
   18fec:	d806      	bhi.n	18ffc <bt_mesh_model_get+0x50>
			LOG_ERR("Invalid vendor model index %u", mod_idx);
   18fee:	466c      	mov	r4, sp
   18ff0:	b088      	sub	sp, #32
   18ff2:	466a      	mov	r2, sp
   18ff4:	490d      	ldr	r1, [pc, #52]	; (1902c <bt_mesh_model_get+0x80>)
   18ff6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18ffa:	e7e5      	b.n	18fc8 <bt_mesh_model_get+0x1c>
		return &elem->vnd_models[mod_idx];
   18ffc:	68c8      	ldr	r0, [r1, #12]
   18ffe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		return &elem->models[mod_idx];
   19002:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   19006:	e7e9      	b.n	18fdc <bt_mesh_model_get+0x30>
		if (mod_idx >= elem->model_count) {
   19008:	790a      	ldrb	r2, [r1, #4]
   1900a:	429a      	cmp	r2, r3
   1900c:	d804      	bhi.n	19018 <bt_mesh_model_get+0x6c>
			LOG_ERR("Invalid SIG model index %u", mod_idx);
   1900e:	466c      	mov	r4, sp
   19010:	b088      	sub	sp, #32
   19012:	466a      	mov	r2, sp
   19014:	4906      	ldr	r1, [pc, #24]	; (19030 <bt_mesh_model_get+0x84>)
   19016:	e7ee      	b.n	18ff6 <bt_mesh_model_get+0x4a>
		return &elem->models[mod_idx];
   19018:	6888      	ldr	r0, [r1, #8]
   1901a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1901e:	e7f0      	b.n	19002 <bt_mesh_model_get+0x56>
   19020:	2000ad10 	.word	0x2000ad10
   19024:	0003331e 	.word	0x0003331e
   19028:	0002fc5c 	.word	0x0002fc5c
   1902c:	00033337 	.word	0x00033337
   19030:	00033355 	.word	0x00033355

00019034 <mod_set>:
{
   19034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19038:	b08d      	sub	sp, #52	; 0x34
   1903a:	af02      	add	r7, sp, #8
   1903c:	4605      	mov	r5, r0
   1903e:	4616      	mov	r6, r2
   19040:	4698      	mov	r8, r3
	if (!name) {
   19042:	460c      	mov	r4, r1
{
   19044:	f8d7 a050 	ldr.w	sl, [r7, #80]	; 0x50
	if (!name) {
   19048:	b959      	cbnz	r1, 19062 <mod_set+0x2e>
		LOG_ERR("Insufficient number of arguments");
   1904a:	4b7b      	ldr	r3, [pc, #492]	; (19238 <mod_set+0x204>)
   1904c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19050:	627b      	str	r3, [r7, #36]	; 0x24
   19052:	2302      	movs	r3, #2
   19054:	4879      	ldr	r0, [pc, #484]	; (1923c <mod_set+0x208>)
   19056:	623b      	str	r3, [r7, #32]
   19058:	f107 0220 	add.w	r2, r7, #32
   1905c:	f013 fe1b 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   19060:	e021      	b.n	190a6 <mod_set+0x72>
	mod_key = strtol(name, NULL, 16);
   19062:	2210      	movs	r2, #16
   19064:	2100      	movs	r1, #0
   19066:	4620      	mov	r0, r4
   19068:	f011 f8f7 	bl	2a25a <strtol>
	elem_idx = mod_key >> 8;
   1906c:	f3c0 2907 	ubfx	r9, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   19070:	fa5f fb80 	uxtb.w	fp, r0
   19074:	465a      	mov	r2, fp
   19076:	4628      	mov	r0, r5
   19078:	4649      	mov	r1, r9
   1907a:	f7ff ff97 	bl	18fac <bt_mesh_model_get>
	if (!mod) {
   1907e:	4605      	mov	r5, r0
   19080:	b9c0      	cbnz	r0, 190b4 <mod_set+0x80>
		LOG_ERR("Failed to get model for elem_idx %u mod_idx %u", elem_idx, mod_idx);
   19082:	466c      	mov	r4, sp
   19084:	b088      	sub	sp, #32
   19086:	ab02      	add	r3, sp, #8
   19088:	4a6d      	ldr	r2, [pc, #436]	; (19240 <mod_set+0x20c>)
   1908a:	f8c3 b01c 	str.w	fp, [r3, #28]
   1908e:	e9c3 2905 	strd	r2, r9, [r3, #20]
   19092:	461a      	mov	r2, r3
   19094:	2304      	movs	r3, #4
   19096:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1909a:	4868      	ldr	r0, [pc, #416]	; (1923c <mod_set+0x208>)
   1909c:	f842 3f10 	str.w	r3, [r2, #16]!
   190a0:	f013 fdf9 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   190a4:	46a5      	mov	sp, r4
		return -ENOENT;
   190a6:	f06f 0401 	mvn.w	r4, #1
}
   190aa:	4620      	mov	r0, r4
   190ac:	372c      	adds	r7, #44	; 0x2c
   190ae:	46bd      	mov	sp, r7
   190b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	len = settings_name_next(name, &next);
   190b4:	4620      	mov	r0, r4
   190b6:	1d39      	adds	r1, r7, #4
   190b8:	f010 fb74 	bl	297a4 <settings_name_next>
   190bc:	4681      	mov	r9, r0
	if (!next) {
   190be:	6878      	ldr	r0, [r7, #4]
   190c0:	2800      	cmp	r0, #0
   190c2:	d0c2      	beq.n	1904a <mod_set+0x16>
	if (!strncmp(next, "bind", len)) {
   190c4:	464a      	mov	r2, r9
   190c6:	495f      	ldr	r1, [pc, #380]	; (19244 <mod_set+0x210>)
   190c8:	f011 f9ed 	bl	2a4a6 <strncmp>
   190cc:	bb10      	cbnz	r0, 19114 <mod_set+0xe0>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   190ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for (i = 0; i < mod->keys_cnt; i++) {
   190d2:	8a2a      	ldrh	r2, [r5, #16]
   190d4:	4290      	cmp	r0, r2
   190d6:	db02      	blt.n	190de <mod_set+0xaa>
	if (len_rd == 0) {
   190d8:	b936      	cbnz	r6, 190e8 <mod_set+0xb4>
		return 0;
   190da:	2400      	movs	r4, #0
   190dc:	e7e5      	b.n	190aa <mod_set+0x76>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   190de:	68ea      	ldr	r2, [r5, #12]
   190e0:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
	for (i = 0; i < mod->keys_cnt; i++) {
   190e4:	3001      	adds	r0, #1
   190e6:	e7f4      	b.n	190d2 <mod_set+0x9e>
	len = read_cb(cb_arg, mod->keys, mod->keys_cnt * sizeof(mod->keys[0]));
   190e8:	68e9      	ldr	r1, [r5, #12]
   190ea:	0052      	lsls	r2, r2, #1
	len = read_cb(cb_arg, mod->groups, size);
   190ec:	4650      	mov	r0, sl
   190ee:	47c0      	blx	r8
	if (len < 0) {
   190f0:	1e04      	subs	r4, r0, #0
   190f2:	daf2      	bge.n	190da <mod_set+0xa6>
		LOG_ERR("Failed to read value (err %zd)", len);
   190f4:	466d      	mov	r5, sp
   190f6:	b088      	sub	sp, #32
   190f8:	aa02      	add	r2, sp, #8
   190fa:	4b53      	ldr	r3, [pc, #332]	; (19248 <mod_set+0x214>)
   190fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19100:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19104:	2303      	movs	r3, #3
   19106:	484d      	ldr	r0, [pc, #308]	; (1923c <mod_set+0x208>)
   19108:	f842 3f10 	str.w	r3, [r2, #16]!
   1910c:	f013 fdc3 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   19110:	46ad      	mov	sp, r5
		return len;
   19112:	e7ca      	b.n	190aa <mod_set+0x76>
	if (!strncmp(next, "sub", len)) {
   19114:	494d      	ldr	r1, [pc, #308]	; (1924c <mod_set+0x218>)
   19116:	464a      	mov	r2, r9
   19118:	6878      	ldr	r0, [r7, #4]
   1911a:	f011 f9c4 	bl	2a4a6 <strncmp>
   1911e:	4601      	mov	r1, r0
   19120:	b950      	cbnz	r0, 19138 <mod_set+0x104>
	size_t size = mod->groups_cnt * sizeof(mod->groups[0]);
   19122:	8b2c      	ldrh	r4, [r5, #24]
	(void)memset(mod->groups, 0, size);
   19124:	6968      	ldr	r0, [r5, #20]
	size_t size = mod->groups_cnt * sizeof(mod->groups[0]);
   19126:	0064      	lsls	r4, r4, #1
	(void)memset(mod->groups, 0, size);
   19128:	4622      	mov	r2, r4
   1912a:	f011 fa01 	bl	2a530 <memset>
	if (len_rd == 0) {
   1912e:	2e00      	cmp	r6, #0
   19130:	d0d3      	beq.n	190da <mod_set+0xa6>
	len = read_cb(cb_arg, mod->groups, size);
   19132:	4622      	mov	r2, r4
   19134:	6969      	ldr	r1, [r5, #20]
   19136:	e7d9      	b.n	190ec <mod_set+0xb8>
	if (!strncmp(next, "pub", len)) {
   19138:	464a      	mov	r2, r9
   1913a:	4945      	ldr	r1, [pc, #276]	; (19250 <mod_set+0x21c>)
   1913c:	6878      	ldr	r0, [r7, #4]
   1913e:	f011 f9b2 	bl	2a4a6 <strncmp>
   19142:	4604      	mov	r4, r0
   19144:	2800      	cmp	r0, #0
   19146:	d155      	bne.n	191f4 <mod_set+0x1c0>
	if (!mod->pub) {
   19148:	68ab      	ldr	r3, [r5, #8]
   1914a:	2b00      	cmp	r3, #0
   1914c:	d04f      	beq.n	191ee <mod_set+0x1ba>
	if (len_rd == 0) {
   1914e:	b9b6      	cbnz	r6, 1917e <mod_set+0x14a>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   19150:	8098      	strh	r0, [r3, #4]
		mod->pub->key = 0U;
   19152:	68ab      	ldr	r3, [r5, #8]
   19154:	88da      	ldrh	r2, [r3, #6]
   19156:	f360 020b 	bfi	r2, r0, #0, #12
   1915a:	80da      	strh	r2, [r3, #6]
		mod->pub->cred = 0U;
   1915c:	68ab      	ldr	r3, [r5, #8]
   1915e:	79da      	ldrb	r2, [r3, #7]
   19160:	f360 1204 	bfi	r2, r0, #4, #1
   19164:	71da      	strb	r2, [r3, #7]
		mod->pub->ttl = 0U;
   19166:	68ab      	ldr	r3, [r5, #8]
   19168:	7218      	strb	r0, [r3, #8]
		mod->pub->period = 0U;
   1916a:	68ab      	ldr	r3, [r5, #8]
   1916c:	7298      	strb	r0, [r3, #10]
		mod->pub->retransmit = 0U;
   1916e:	68ab      	ldr	r3, [r5, #8]
   19170:	7258      	strb	r0, [r3, #9]
	mod->pub->count = 0U;
   19172:	68ab      	ldr	r3, [r5, #8]
   19174:	7ada      	ldrb	r2, [r3, #11]
   19176:	f364 1207 	bfi	r2, r4, #4, #4
   1917a:	72da      	strb	r2, [r3, #11]
	return 0;
   1917c:	e795      	b.n	190aa <mod_set+0x76>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   1917e:	2308      	movs	r3, #8
   19180:	4651      	mov	r1, sl
   19182:	4640      	mov	r0, r8
   19184:	18fa      	adds	r2, r7, r3
   19186:	f002 fdbd 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   1918a:	4606      	mov	r6, r0
   1918c:	b160      	cbz	r0, 191a8 <mod_set+0x174>
		LOG_ERR("Failed to set \'model-pub\'");
   1918e:	4b31      	ldr	r3, [pc, #196]	; (19254 <mod_set+0x220>)
   19190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19194:	627b      	str	r3, [r7, #36]	; 0x24
   19196:	2302      	movs	r3, #2
   19198:	4828      	ldr	r0, [pc, #160]	; (1923c <mod_set+0x208>)
   1919a:	623b      	str	r3, [r7, #32]
   1919c:	f107 0220 	add.w	r2, r7, #32
   191a0:	f013 fd79 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return err;
   191a4:	4634      	mov	r4, r6
   191a6:	e780      	b.n	190aa <mod_set+0x76>
	mod->pub->addr = pub.addr;
   191a8:	68ab      	ldr	r3, [r5, #8]
   191aa:	893a      	ldrh	r2, [r7, #8]
	mod->pub->key = pub.key;
   191ac:	8979      	ldrh	r1, [r7, #10]
	mod->pub->addr = pub.addr;
   191ae:	809a      	strh	r2, [r3, #4]
	mod->pub->key = pub.key;
   191b0:	68ab      	ldr	r3, [r5, #8]
   191b2:	88da      	ldrh	r2, [r3, #6]
   191b4:	f361 020b 	bfi	r2, r1, #0, #12
   191b8:	80da      	strh	r2, [r3, #6]
	mod->pub->cred = pub.cred;
   191ba:	68aa      	ldr	r2, [r5, #8]
   191bc:	7bfb      	ldrb	r3, [r7, #15]
   191be:	79d1      	ldrb	r1, [r2, #7]
   191c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
   191c4:	f363 1104 	bfi	r1, r3, #4, #1
   191c8:	71d1      	strb	r1, [r2, #7]
	mod->pub->ttl = pub.ttl;
   191ca:	68ab      	ldr	r3, [r5, #8]
   191cc:	7b3a      	ldrb	r2, [r7, #12]
   191ce:	721a      	strb	r2, [r3, #8]
	mod->pub->period = pub.period;
   191d0:	68ab      	ldr	r3, [r5, #8]
   191d2:	7bba      	ldrb	r2, [r7, #14]
   191d4:	729a      	strb	r2, [r3, #10]
	mod->pub->retransmit = pub.retransmit;
   191d6:	68ab      	ldr	r3, [r5, #8]
   191d8:	7b7a      	ldrb	r2, [r7, #13]
   191da:	725a      	strb	r2, [r3, #9]
	mod->pub->period_div = pub.period_div;
   191dc:	68aa      	ldr	r2, [r5, #8]
   191de:	7bfb      	ldrb	r3, [r7, #15]
   191e0:	7ad1      	ldrb	r1, [r2, #11]
   191e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
   191e6:	f363 0103 	bfi	r1, r3, #0, #4
   191ea:	72d1      	strb	r1, [r2, #11]
   191ec:	e7c1      	b.n	19172 <mod_set+0x13e>
		return -EINVAL;
   191ee:	f06f 0415 	mvn.w	r4, #21
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   191f2:	e75a      	b.n	190aa <mod_set+0x76>
	if (!strncmp(next, "data", len)) {
   191f4:	464a      	mov	r2, r9
   191f6:	4918      	ldr	r1, [pc, #96]	; (19258 <mod_set+0x224>)
   191f8:	6878      	ldr	r0, [r7, #4]
   191fa:	f011 f954 	bl	2a4a6 <strncmp>
   191fe:	4604      	mov	r4, r0
   19200:	2800      	cmp	r0, #0
   19202:	f47f af50 	bne.w	190a6 <mod_set+0x72>
	settings_name_next(name, &next);
   19206:	6878      	ldr	r0, [r7, #4]
   19208:	f107 0110 	add.w	r1, r7, #16
   1920c:	f010 faca 	bl	297a4 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   19210:	6a2b      	ldr	r3, [r5, #32]
   19212:	2b00      	cmp	r3, #0
   19214:	f43f af49 	beq.w	190aa <mod_set+0x76>
   19218:	f8d3 9000 	ldr.w	r9, [r3]
   1921c:	f1b9 0f00 	cmp.w	r9, #0
   19220:	f43f af43 	beq.w	190aa <mod_set+0x76>
		return mod->cb->settings_set(mod, next, len_rd,
   19224:	f8cd a000 	str.w	sl, [sp]
   19228:	4643      	mov	r3, r8
   1922a:	4632      	mov	r2, r6
   1922c:	4628      	mov	r0, r5
   1922e:	6939      	ldr	r1, [r7, #16]
   19230:	47c8      	blx	r9
   19232:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   19234:	e739      	b.n	190aa <mod_set+0x76>
   19236:	bf00      	nop
   19238:	00031b3e 	.word	0x00031b3e
   1923c:	0002fc5c 	.word	0x0002fc5c
   19240:	00033370 	.word	0x00033370
   19244:	000332c3 	.word	0x000332c3
   19248:	0003339f 	.word	0x0003339f
   1924c:	000332e1 	.word	0x000332e1
   19250:	000332e5 	.word	0x000332e5
   19254:	000333be 	.word	0x000333be
   19258:	0003215b 	.word	0x0003215b

0001925c <pre_sig_mod_set>:
BT_MESH_SETTINGS_DEFINE(sig_mod, "s", sig_mod_set);
   1925c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1925e:	4605      	mov	r5, r0
   19260:	4807      	ldr	r0, [pc, #28]	; (19280 <pre_sig_mod_set+0x24>)
   19262:	e8d0 4faf 	lda	r4, [r0]
   19266:	f014 0001 	ands.w	r0, r4, #1
   1926a:	d006      	beq.n	1927a <pre_sig_mod_set+0x1e>
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   1926c:	9300      	str	r3, [sp, #0]
   1926e:	2000      	movs	r0, #0
   19270:	4613      	mov	r3, r2
   19272:	460a      	mov	r2, r1
   19274:	4629      	mov	r1, r5
   19276:	f7ff fedd 	bl	19034 <mod_set>
BT_MESH_SETTINGS_DEFINE(sig_mod, "s", sig_mod_set);
   1927a:	b003      	add	sp, #12
   1927c:	bd30      	pop	{r4, r5, pc}
   1927e:	bf00      	nop
   19280:	20009ed0 	.word	0x20009ed0

00019284 <pre_vnd_mod_set>:
BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);
   19284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19286:	4605      	mov	r5, r0
   19288:	4807      	ldr	r0, [pc, #28]	; (192a8 <pre_vnd_mod_set+0x24>)
   1928a:	e8d0 4faf 	lda	r4, [r0]
   1928e:	f014 0001 	ands.w	r0, r4, #1
   19292:	d006      	beq.n	192a2 <pre_vnd_mod_set+0x1e>
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   19294:	9300      	str	r3, [sp, #0]
   19296:	2001      	movs	r0, #1
   19298:	4613      	mov	r3, r2
   1929a:	460a      	mov	r2, r1
   1929c:	4629      	mov	r1, r5
   1929e:	f7ff fec9 	bl	19034 <mod_set>
BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);
   192a2:	b003      	add	sp, #12
   192a4:	bd30      	pop	{r4, r5, pc}
   192a6:	bf00      	nop
   192a8:	20009ed0 	.word	0x20009ed0

000192ac <bt_mesh_comp_register>:
{
   192ac:	b507      	push	{r0, r1, r2, lr}
	if (!comp || !comp->elem_count) {
   192ae:	b168      	cbz	r0, 192cc <bt_mesh_comp_register+0x20>
   192b0:	6883      	ldr	r3, [r0, #8]
   192b2:	b15b      	cbz	r3, 192cc <bt_mesh_comp_register+0x20>
	dev_comp = comp;
   192b4:	4b07      	ldr	r3, [pc, #28]	; (192d4 <bt_mesh_comp_register+0x28>)
	bt_mesh_model_foreach(mod_init, &err);
   192b6:	a901      	add	r1, sp, #4
	dev_comp = comp;
   192b8:	6018      	str	r0, [r3, #0]
	err = 0;
   192ba:	2300      	movs	r3, #0
	bt_mesh_model_foreach(mod_init, &err);
   192bc:	4806      	ldr	r0, [pc, #24]	; (192d8 <bt_mesh_comp_register+0x2c>)
	err = 0;
   192be:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   192c0:	f7ff fd4c 	bl	18d5c <bt_mesh_model_foreach>
	return err;
   192c4:	9801      	ldr	r0, [sp, #4]
}
   192c6:	b003      	add	sp, #12
   192c8:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   192cc:	f06f 0015 	mvn.w	r0, #21
   192d0:	e7f9      	b.n	192c6 <bt_mesh_comp_register+0x1a>
   192d2:	bf00      	nop
   192d4:	2000ad10 	.word	0x2000ad10
   192d8:	00018a7d 	.word	0x00018a7d

000192dc <bt_mesh_comp_provision>:
{
   192dc:	b530      	push	{r4, r5, lr}
	dev_primary_addr = addr;
   192de:	4b08      	ldr	r3, [pc, #32]	; (19300 <bt_mesh_comp_provision+0x24>)
   192e0:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   192e2:	4b08      	ldr	r3, [pc, #32]	; (19304 <bt_mesh_comp_provision+0x28>)
   192e4:	6819      	ldr	r1, [r3, #0]
   192e6:	2300      	movs	r3, #0
   192e8:	688c      	ldr	r4, [r1, #8]
   192ea:	18c2      	adds	r2, r0, r3
   192ec:	429c      	cmp	r4, r3
   192ee:	b292      	uxth	r2, r2
   192f0:	d800      	bhi.n	192f4 <bt_mesh_comp_provision+0x18>
}
   192f2:	bd30      	pop	{r4, r5, pc}
		elem->addr = addr++;
   192f4:	68cd      	ldr	r5, [r1, #12]
   192f6:	011c      	lsls	r4, r3, #4
   192f8:	532a      	strh	r2, [r5, r4]
	for (i = 0; i < dev_comp->elem_count; i++) {
   192fa:	3301      	adds	r3, #1
   192fc:	e7f4      	b.n	192e8 <bt_mesh_comp_provision+0xc>
   192fe:	bf00      	nop
   19300:	2000b150 	.word	0x2000b150
   19304:	2000ad10 	.word	0x2000ad10

00019308 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   19308:	2200      	movs	r2, #0
   1930a:	4b01      	ldr	r3, [pc, #4]	; (19310 <bt_mesh_comp_unprovision+0x8>)
   1930c:	801a      	strh	r2, [r3, #0]
}
   1930e:	4770      	bx	lr
   19310:	2000b150 	.word	0x2000b150

00019314 <bt_mesh_primary_addr>:
}
   19314:	4b01      	ldr	r3, [pc, #4]	; (1931c <bt_mesh_primary_addr+0x8>)
   19316:	8818      	ldrh	r0, [r3, #0]
   19318:	4770      	bx	lr
   1931a:	bf00      	nop
   1931c:	2000b150 	.word	0x2000b150

00019320 <bt_mesh_elem_find>:
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   19320:	b203      	sxth	r3, r0
   19322:	2b00      	cmp	r3, #0
   19324:	dd0b      	ble.n	1933e <bt_mesh_elem_find+0x1e>
	index = addr - dev_comp->elem[0].addr;
   19326:	4b07      	ldr	r3, [pc, #28]	; (19344 <bt_mesh_elem_find+0x24>)
   19328:	6819      	ldr	r1, [r3, #0]
   1932a:	68ca      	ldr	r2, [r1, #12]
	if (index >= dev_comp->elem_count) {
   1932c:	6889      	ldr	r1, [r1, #8]
	index = addr - dev_comp->elem[0].addr;
   1932e:	8813      	ldrh	r3, [r2, #0]
   19330:	1ac3      	subs	r3, r0, r3
	if (index >= dev_comp->elem_count) {
   19332:	b29b      	uxth	r3, r3
   19334:	428b      	cmp	r3, r1
   19336:	d202      	bcs.n	1933e <bt_mesh_elem_find+0x1e>
	return &dev_comp->elem[index];
   19338:	eb02 1003 	add.w	r0, r2, r3, lsl #4
   1933c:	4770      	bx	lr
		return NULL;
   1933e:	2000      	movs	r0, #0
}
   19340:	4770      	bx	lr
   19342:	bf00      	nop
   19344:	2000ad10 	.word	0x2000ad10

00019348 <bt_mesh_has_addr>:
{
   19348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   1934c:	b203      	sxth	r3, r0
   1934e:	2b00      	cmp	r3, #0
{
   19350:	4601      	mov	r1, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   19352:	dc0d      	bgt.n	19370 <bt_mesh_has_addr+0x28>
	for (index = 0; index < dev_comp->elem_count; index++) {
   19354:	f04f 0900 	mov.w	r9, #0
		model = &elem->models[i];
   19358:	2728      	movs	r7, #40	; 0x28
	for (index = 0; index < dev_comp->elem_count; index++) {
   1935a:	4b1d      	ldr	r3, [pc, #116]	; (193d0 <bt_mesh_has_addr+0x88>)
   1935c:	f8d3 a000 	ldr.w	sl, [r3]
   19360:	f8da 8008 	ldr.w	r8, [sl, #8]
   19364:	fa1f f589 	uxth.w	r5, r9
   19368:	45a8      	cmp	r8, r5
   1936a:	d808      	bhi.n	1937e <bt_mesh_has_addr+0x36>
	return false;
   1936c:	2000      	movs	r0, #0
   1936e:	e004      	b.n	1937a <bt_mesh_has_addr+0x32>
		return bt_mesh_elem_find(addr) != NULL;
   19370:	f7ff ffd6 	bl	19320 <bt_mesh_elem_find>
   19374:	3800      	subs	r0, #0
   19376:	bf18      	it	ne
   19378:	2001      	movne	r0, #1
}
   1937a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < elem->model_count; i++) {
   1937e:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   19380:	f8da 300c 	ldr.w	r3, [sl, #12]
   19384:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   19388:	f895 b004 	ldrb.w	fp, [r5, #4]
   1938c:	455e      	cmp	r6, fp
   1938e:	db0b      	blt.n	193a8 <bt_mesh_has_addr+0x60>
	for (i = 0; i < elem->vnd_model_count; i++) {
   19390:	2600      	movs	r6, #0
   19392:	f895 b005 	ldrb.w	fp, [r5, #5]
   19396:	455e      	cmp	r6, fp
   19398:	db10      	blt.n	193bc <bt_mesh_has_addr+0x74>
	return NULL;
   1939a:	2400      	movs	r4, #0
		if (bt_mesh_elem_find_group(elem, addr)) {
   1939c:	f109 0901 	add.w	r9, r9, #1
   193a0:	2c00      	cmp	r4, #0
   193a2:	d0df      	beq.n	19364 <bt_mesh_has_addr+0x1c>
			return true;
   193a4:	2001      	movs	r0, #1
   193a6:	e7e8      	b.n	1937a <bt_mesh_has_addr+0x32>
		model = &elem->models[i];
   193a8:	68ac      	ldr	r4, [r5, #8]
   193aa:	fb07 4406 	mla	r4, r7, r6, r4
		match = model_group_get(model, group_addr);
   193ae:	4620      	mov	r0, r4
   193b0:	f013 fc40 	bl	2cc34 <model_group_get>
		if (match) {
   193b4:	2800      	cmp	r0, #0
   193b6:	d1f1      	bne.n	1939c <bt_mesh_has_addr+0x54>
	for (i = 0; i < elem->model_count; i++) {
   193b8:	3601      	adds	r6, #1
   193ba:	e7e7      	b.n	1938c <bt_mesh_has_addr+0x44>
		model = &elem->vnd_models[i];
   193bc:	68ec      	ldr	r4, [r5, #12]
   193be:	fb07 4406 	mla	r4, r7, r6, r4
		match = model_group_get(model, group_addr);
   193c2:	4620      	mov	r0, r4
   193c4:	f013 fc36 	bl	2cc34 <model_group_get>
		if (match) {
   193c8:	2800      	cmp	r0, #0
   193ca:	d1e7      	bne.n	1939c <bt_mesh_has_addr+0x54>
	for (i = 0; i < elem->vnd_model_count; i++) {
   193cc:	3601      	adds	r6, #1
   193ce:	e7e2      	b.n	19396 <bt_mesh_has_addr+0x4e>
   193d0:	2000ad10 	.word	0x2000ad10

000193d4 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
   193d4:	4b01      	ldr	r3, [pc, #4]	; (193dc <bt_mesh_elem_count+0x8>)
   193d6:	681b      	ldr	r3, [r3, #0]
}
   193d8:	7a18      	ldrb	r0, [r3, #8]
   193da:	4770      	bx	lr
   193dc:	2000ad10 	.word	0x2000ad10

000193e0 <bt_mesh_model_send>:
{
   193e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193e4:	b082      	sub	sp, #8
   193e6:	460c      	mov	r4, r1
   193e8:	af02      	add	r7, sp, #8
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   193ea:	8849      	ldrh	r1, [r1, #2]
{
   193ec:	4680      	mov	r8, r0
   193ee:	4615      	mov	r5, r2
   193f0:	461e      	mov	r6, r3
	if (!bt_mesh_model_has_key(model, ctx->app_idx)) {
   193f2:	f013 fcd1 	bl	2cd98 <bt_mesh_model_has_key>
   193f6:	b998      	cbnz	r0, 19420 <bt_mesh_model_send+0x40>
		LOG_ERR("Model not bound to AppKey 0x%04x", ctx->app_idx);
   193f8:	466c      	mov	r4, sp
   193fa:	b088      	sub	sp, #32
   193fc:	aa02      	add	r2, sp, #8
   193fe:	4b0e      	ldr	r3, [pc, #56]	; (19438 <bt_mesh_model_send+0x58>)
   19400:	480e      	ldr	r0, [pc, #56]	; (1943c <bt_mesh_model_send+0x5c>)
   19402:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19406:	2303      	movs	r3, #3
   19408:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1940c:	f842 3f10 	str.w	r3, [r2, #16]!
   19410:	f013 fc41 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19414:	f06f 0015 	mvn.w	r0, #21
   19418:	46a5      	mov	sp, r4
}
   1941a:	46bd      	mov	sp, r7
   1941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_mesh_access_send(ctx, msg, bt_mesh_model_elem(model)->addr, cb, cb_data);
   19420:	4640      	mov	r0, r8
   19422:	f7ff fd1d 	bl	18e60 <bt_mesh_model_elem>
   19426:	69bb      	ldr	r3, [r7, #24]
   19428:	8802      	ldrh	r2, [r0, #0]
   1942a:	4629      	mov	r1, r5
   1942c:	9300      	str	r3, [sp, #0]
   1942e:	4620      	mov	r0, r4
   19430:	4633      	mov	r3, r6
   19432:	f013 fc99 	bl	2cd68 <bt_mesh_access_send>
   19436:	e7f0      	b.n	1941a <bt_mesh_model_send+0x3a>
   19438:	000333d8 	.word	0x000333d8
   1943c:	0002fc5c 	.word	0x0002fc5c

00019440 <bt_mesh_model_publish>:
{
   19440:	b510      	push	{r4, lr}
	struct bt_mesh_model_pub *pub = model->pub;
   19442:	6884      	ldr	r4, [r0, #8]
{
   19444:	b086      	sub	sp, #24
	if (!pub) {
   19446:	2c00      	cmp	r4, #0
   19448:	d036      	beq.n	194b8 <bt_mesh_model_publish+0x78>
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1944a:	88a3      	ldrh	r3, [r4, #4]
   1944c:	2b00      	cmp	r3, #0
   1944e:	d036      	beq.n	194be <bt_mesh_model_publish+0x7e>
	if (!pub->msg || !pub->msg->len) {
   19450:	6923      	ldr	r3, [r4, #16]
   19452:	b10b      	cbz	r3, 19458 <bt_mesh_model_publish+0x18>
   19454:	889b      	ldrh	r3, [r3, #4]
   19456:	b96b      	cbnz	r3, 19474 <bt_mesh_model_publish+0x34>
		LOG_ERR("No publication message");
   19458:	4b1a      	ldr	r3, [pc, #104]	; (194c4 <bt_mesh_model_publish+0x84>)
   1945a:	481b      	ldr	r0, [pc, #108]	; (194c8 <bt_mesh_model_publish+0x88>)
   1945c:	9305      	str	r3, [sp, #20]
   1945e:	2302      	movs	r3, #2
   19460:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19464:	aa04      	add	r2, sp, #16
   19466:	9304      	str	r3, [sp, #16]
   19468:	f013 fc15 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1946c:	f06f 0015 	mvn.w	r0, #21
}
   19470:	b006      	add	sp, #24
   19472:	bd10      	pop	{r4, pc}
	if (pub->msg->len + BT_MESH_MIC_SHORT > BT_MESH_TX_SDU_MAX) {
   19474:	2b74      	cmp	r3, #116	; 0x74
   19476:	d90c      	bls.n	19492 <bt_mesh_model_publish+0x52>
		LOG_ERR("Message does not fit maximum SDU size");
   19478:	4b14      	ldr	r3, [pc, #80]	; (194cc <bt_mesh_model_publish+0x8c>)
   1947a:	4813      	ldr	r0, [pc, #76]	; (194c8 <bt_mesh_model_publish+0x88>)
   1947c:	9305      	str	r3, [sp, #20]
   1947e:	2302      	movs	r3, #2
   19480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19484:	aa04      	add	r2, sp, #16
   19486:	9304      	str	r3, [sp, #16]
   19488:	f013 fc05 	bl	2cc96 <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1948c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   19490:	e7ee      	b.n	19470 <bt_mesh_model_publish+0x30>
	pub->count = BT_MESH_PUB_MSG_TOTAL(pub);
   19492:	7a63      	ldrb	r3, [r4, #9]
   19494:	7ae2      	ldrb	r2, [r4, #11]
   19496:	f003 0307 	and.w	r3, r3, #7
   1949a:	3301      	adds	r3, #1
   1949c:	f363 1207 	bfi	r2, r3, #4, #4
   194a0:	72e2      	strb	r2, [r4, #11]
	pub->period_start = k_uptime_get_32();
   194a2:	f013 fbeb 	bl	2cc7c <k_uptime_get_32>
	k_work_reschedule(&pub->timer, K_NO_WAIT);
   194a6:	2200      	movs	r2, #0
	pub->period_start = k_uptime_get_32();
   194a8:	60e0      	str	r0, [r4, #12]
	k_work_reschedule(&pub->timer, K_NO_WAIT);
   194aa:	2300      	movs	r3, #0
   194ac:	f104 0018 	add.w	r0, r4, #24
   194b0:	f00d f8e2 	bl	26678 <k_work_reschedule>
	return 0;
   194b4:	2000      	movs	r0, #0
   194b6:	e7db      	b.n	19470 <bt_mesh_model_publish+0x30>
		return -ENOTSUP;
   194b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   194bc:	e7d8      	b.n	19470 <bt_mesh_model_publish+0x30>
		return -EADDRNOTAVAIL;
   194be:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   194c2:	e7d5      	b.n	19470 <bt_mesh_model_publish+0x30>
   194c4:	000333f9 	.word	0x000333f9
   194c8:	0002fc5c 	.word	0x0002fc5c
   194cc:	00033410 	.word	0x00033410

000194d0 <bt_mesh_comp_get>:
}
   194d0:	4b01      	ldr	r3, [pc, #4]	; (194d8 <bt_mesh_comp_get+0x8>)
   194d2:	6818      	ldr	r0, [r3, #0]
   194d4:	4770      	bx	lr
   194d6:	bf00      	nop
   194d8:	2000ad10 	.word	0x2000ad10

000194dc <bt_mesh_model_find_group>:
{
   194dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct find_group_visitor_ctx ctx = {
   194de:	2300      	movs	r3, #0
{
   194e0:	4604      	mov	r4, r0
		.mod = *mod,
   194e2:	6800      	ldr	r0, [r0, #0]
	struct find_group_visitor_ctx ctx = {
   194e4:	f8ad 100c 	strh.w	r1, [sp, #12]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   194e8:	aa01      	add	r2, sp, #4
   194ea:	4905      	ldr	r1, [pc, #20]	; (19500 <bt_mesh_model_find_group+0x24>)
	struct find_group_visitor_ctx ctx = {
   194ec:	9301      	str	r3, [sp, #4]
   194ee:	9002      	str	r0, [sp, #8]
	bt_mesh_model_extensions_walk(*mod, find_group_mod_visitor, &ctx);
   194f0:	f013 fc94 	bl	2ce1c <bt_mesh_model_extensions_walk>
	*mod = ctx.mod;
   194f4:	9b02      	ldr	r3, [sp, #8]
}
   194f6:	9801      	ldr	r0, [sp, #4]
	*mod = ctx.mod;
   194f8:	6023      	str	r3, [r4, #0]
}
   194fa:	b004      	add	sp, #16
   194fc:	bd10      	pop	{r4, pc}
   194fe:	bf00      	nop
   19500:	0002cc57 	.word	0x0002cc57

00019504 <bt_mesh_model_recv>:
{
   19504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19508:	b089      	sub	sp, #36	; 0x24
	switch (buf->data[0] >> 6) {
   1950a:	680b      	ldr	r3, [r1, #0]
{
   1950c:	4680      	mov	r8, r0
	switch (buf->data[0] >> 6) {
   1950e:	781a      	ldrb	r2, [r3, #0]
{
   19510:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
   19512:	0993      	lsrs	r3, r2, #6
   19514:	2b02      	cmp	r3, #2
{
   19516:	af00      	add	r7, sp, #0
	switch (buf->data[0] >> 6) {
   19518:	d02e      	beq.n	19578 <bt_mesh_model_recv+0x74>
   1951a:	2b03      	cmp	r3, #3
   1951c:	d041      	beq.n	195a2 <bt_mesh_model_recv+0x9e>
		if (buf->data[0] == 0x7f) {
   1951e:	2a7f      	cmp	r2, #127	; 0x7f
   19520:	d103      	bne.n	1952a <bt_mesh_model_recv+0x26>
			LOG_ERR("Ignoring RFU OpCode");
   19522:	4b62      	ldr	r3, [pc, #392]	; (196ac <bt_mesh_model_recv+0x1a8>)
			LOG_ERR("Too short payload for 3-octet OpCode");
   19524:	61fb      	str	r3, [r7, #28]
   19526:	2302      	movs	r3, #2
   19528:	e02b      	b.n	19582 <bt_mesh_model_recv+0x7e>
		*opcode = net_buf_simple_pull_u8(buf);
   1952a:	4608      	mov	r0, r1
   1952c:	f014 fca6 	bl	2de7c <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   19530:	4605      	mov	r5, r0
	for (i = 0; i < dev_comp->elem_count; i++) {
   19532:	f04f 0a00 	mov.w	sl, #0
   19536:	b2ab      	uxth	r3, r5
   19538:	603b      	str	r3, [r7, #0]
   1953a:	4b5d      	ldr	r3, [pc, #372]	; (196b0 <bt_mesh_model_recv+0x1ac>)
   1953c:	681b      	ldr	r3, [r3, #0]
   1953e:	689a      	ldr	r2, [r3, #8]
   19540:	4552      	cmp	r2, sl
   19542:	d926      	bls.n	19592 <bt_mesh_model_recv+0x8e>
		op = find_op(&dev_comp->elem[i], opcode, &model);
   19544:	f8d3 900c 	ldr.w	r9, [r3, #12]
	if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   19548:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		op = find_op(&dev_comp->elem[i], opcode, &model);
   1954c:	eb09 130a 	add.w	r3, r9, sl, lsl #4
		models = elem->vnd_models;
   19550:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
	uint32_t cid = UINT32_MAX;
   19554:	bf3c      	itt	cc
   19556:	f04f 30ff 	movcc.w	r0, #4294967295
		models = elem->models;
   1955a:	4616      	movcc	r6, r2
	for (i = 0U; i < count; i++) {
   1955c:	f04f 0200 	mov.w	r2, #0
		count = elem->model_count;
   19560:	bf32      	itee	cc
   19562:	f893 c004 	ldrbcc.w	ip, [r3, #4]
		count = elem->vnd_model_count;
   19566:	f893 c005 	ldrbcs.w	ip, [r3, #5]
		cid = (uint16_t)(opcode & 0xffff);
   1956a:	6838      	ldrcs	r0, [r7, #0]
	for (i = 0U; i < count; i++) {
   1956c:	b2d3      	uxtb	r3, r2
   1956e:	4563      	cmp	r3, ip
   19570:	d326      	bcc.n	195c0 <bt_mesh_model_recv+0xbc>
	for (i = 0; i < dev_comp->elem_count; i++) {
   19572:	f10a 0a01 	add.w	sl, sl, #1
   19576:	e7e0      	b.n	1953a <bt_mesh_model_recv+0x36>
		if (buf->len < 2) {
   19578:	888a      	ldrh	r2, [r1, #4]
   1957a:	2a01      	cmp	r2, #1
   1957c:	d80d      	bhi.n	1959a <bt_mesh_model_recv+0x96>
			LOG_ERR("Too short payload for 2-octet OpCode");
   1957e:	4a4d      	ldr	r2, [pc, #308]	; (196b4 <bt_mesh_model_recv+0x1b0>)
   19580:	61fa      	str	r2, [r7, #28]
			LOG_ERR("Too short payload for 3-octet OpCode");
   19582:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19586:	484c      	ldr	r0, [pc, #304]	; (196b8 <bt_mesh_model_recv+0x1b4>)
   19588:	61bb      	str	r3, [r7, #24]
   1958a:	f107 0218 	add.w	r2, r7, #24
   1958e:	f013 fb82 	bl	2cc96 <z_log_msg_static_create.constprop.0>
}
   19592:	3724      	adds	r7, #36	; 0x24
   19594:	46bd      	mov	sp, r7
   19596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*opcode = net_buf_simple_pull_be16(buf);
   1959a:	4608      	mov	r0, r1
   1959c:	f014 fc7e 	bl	2de9c <net_buf_simple_pull_be16>
   195a0:	e7c6      	b.n	19530 <bt_mesh_model_recv+0x2c>
		if (buf->len < 3) {
   195a2:	888b      	ldrh	r3, [r1, #4]
   195a4:	2b02      	cmp	r3, #2
   195a6:	d801      	bhi.n	195ac <bt_mesh_model_recv+0xa8>
			LOG_ERR("Too short payload for 3-octet OpCode");
   195a8:	4b44      	ldr	r3, [pc, #272]	; (196bc <bt_mesh_model_recv+0x1b8>)
   195aa:	e7bb      	b.n	19524 <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   195ac:	4608      	mov	r0, r1
   195ae:	f014 fc65 	bl	2de7c <net_buf_simple_pull_u8>
   195b2:	4605      	mov	r5, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   195b4:	4620      	mov	r0, r4
   195b6:	f014 fc69 	bl	2de8c <net_buf_simple_pull_le16>
   195ba:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
		return 0;
   195be:	e7b8      	b.n	19532 <bt_mesh_model_recv+0x2e>
		if (IS_ENABLED(CONFIG_BT_MESH_MODEL_VND_MSG_CID_FORCE) &&
   195c0:	1c41      	adds	r1, r0, #1
   195c2:	d002      	beq.n	195ca <bt_mesh_model_recv+0xc6>
		     cid != models[i].vnd.company) {
   195c4:	8833      	ldrh	r3, [r6, #0]
		     cid != UINT32_MAX &&
   195c6:	4298      	cmp	r0, r3
   195c8:	d104      	bne.n	195d4 <bt_mesh_model_recv+0xd0>
		for (op = (*model)->op; op->func; op++) {
   195ca:	f8d6 b01c 	ldr.w	fp, [r6, #28]
   195ce:	f8db 1008 	ldr.w	r1, [fp, #8]
   195d2:	b911      	cbnz	r1, 195da <bt_mesh_model_recv+0xd6>
	for (i = 0U; i < count; i++) {
   195d4:	3201      	adds	r2, #1
   195d6:	3628      	adds	r6, #40	; 0x28
   195d8:	e7c8      	b.n	1956c <bt_mesh_model_recv+0x68>
			if (op->opcode == opcode) {
   195da:	f8db 1000 	ldr.w	r1, [fp]
   195de:	428d      	cmp	r5, r1
   195e0:	d035      	beq.n	1964e <bt_mesh_model_recv+0x14a>
		for (op = (*model)->op; op->func; op++) {
   195e2:	f10b 0b0c 	add.w	fp, fp, #12
   195e6:	e7f2      	b.n	195ce <bt_mesh_model_recv+0xca>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   195e8:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
   195ec:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
   195f0:	d306      	bcc.n	19600 <bt_mesh_model_recv+0xfc>
		  (BT_MESH_ADDR_IS_FIXED_GROUP(dst) &&  mod->elem_idx != 0)) {
   195f2:	f501 7280 	add.w	r2, r1, #256	; 0x100
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   195f6:	b292      	uxth	r2, r2
   195f8:	2afe      	cmp	r2, #254	; 0xfe
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   195fa:	7930      	ldrb	r0, [r6, #4]
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst) ||
   195fc:	d808      	bhi.n	19610 <bt_mesh_model_recv+0x10c>
		  (BT_MESH_ADDR_IS_FIXED_GROUP(dst) &&  mod->elem_idx != 0)) {
   195fe:	b138      	cbz	r0, 19610 <bt_mesh_model_recv+0x10c>
		return !!bt_mesh_model_find_group(&mod, dst);
   19600:	f107 0008 	add.w	r0, r7, #8
   19604:	f7ff ff6a 	bl	194dc <bt_mesh_model_find_group>
   19608:	3800      	subs	r0, #0
   1960a:	bf18      	it	ne
   1960c:	2001      	movne	r0, #1
   1960e:	e033      	b.n	19678 <bt_mesh_model_recv+0x174>
	return mod->elem_idx == 0;
   19610:	fab0 f080 	clz	r0, r0
   19614:	0940      	lsrs	r0, r0, #5
   19616:	e02f      	b.n	19678 <bt_mesh_model_recv+0x174>
		} else if ((op->len < 0) && (buf->len != (size_t)(-op->len))) {
   19618:	42d1      	cmn	r1, r2
   1961a:	d004      	beq.n	19626 <bt_mesh_model_recv+0x122>
			LOG_ERR("Invalid message size for OpCode 0x%08x", opcode);
   1961c:	466e      	mov	r6, sp
   1961e:	b088      	sub	sp, #32
   19620:	466a      	mov	r2, sp
   19622:	4b27      	ldr	r3, [pc, #156]	; (196c0 <bt_mesh_model_recv+0x1bc>)
   19624:	e036      	b.n	19694 <bt_mesh_model_recv+0x190>
	state->offset = net_buf_simple_headroom(buf);
   19626:	4620      	mov	r0, r4
   19628:	f014 fc4b 	bl	2dec2 <net_buf_simple_headroom>
   1962c:	4681      	mov	r9, r0
	state->len = buf->len;
   1962e:	88a3      	ldrh	r3, [r4, #4]
		(void)op->func(model, &rx->ctx, buf);
   19630:	4622      	mov	r2, r4
   19632:	607b      	str	r3, [r7, #4]
   19634:	4630      	mov	r0, r6
   19636:	f8db 3008 	ldr.w	r3, [fp, #8]
   1963a:	f108 0104 	add.w	r1, r8, #4
   1963e:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   19640:	68a3      	ldr	r3, [r4, #8]
   19642:	fa13 f389 	uxtah	r3, r3, r9
   19646:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   19648:	687b      	ldr	r3, [r7, #4]
   1964a:	80a3      	strh	r3, [r4, #4]
   1964c:	e791      	b.n	19572 <bt_mesh_model_recv+0x6e>
		if (!bt_mesh_model_has_key(model, rx->ctx.app_idx)) {
   1964e:	4630      	mov	r0, r6
   19650:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   19654:	f013 fba0 	bl	2cd98 <bt_mesh_model_has_key>
   19658:	2800      	cmp	r0, #0
   1965a:	d08a      	beq.n	19572 <bt_mesh_model_recv+0x6e>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   1965c:	f9b8 200a 	ldrsh.w	r2, [r8, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   19660:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   19664:	2a00      	cmp	r2, #0
   19666:	60be      	str	r6, [r7, #8]
   19668:	ddbe      	ble.n	195e8 <bt_mesh_model_recv+0xe4>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   1966a:	7932      	ldrb	r2, [r6, #4]
   1966c:	0112      	lsls	r2, r2, #4
   1966e:	f839 0002 	ldrh.w	r0, [r9, r2]
   19672:	1a43      	subs	r3, r0, r1
   19674:	4258      	negs	r0, r3
   19676:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   19678:	2800      	cmp	r0, #0
   1967a:	f43f af7a 	beq.w	19572 <bt_mesh_model_recv+0x6e>
		if ((op->len >= 0) && (buf->len < (size_t)op->len)) {
   1967e:	f8db 2004 	ldr.w	r2, [fp, #4]
   19682:	88a1      	ldrh	r1, [r4, #4]
   19684:	2a00      	cmp	r2, #0
   19686:	dbc7      	blt.n	19618 <bt_mesh_model_recv+0x114>
   19688:	428a      	cmp	r2, r1
   1968a:	d9cc      	bls.n	19626 <bt_mesh_model_recv+0x122>
			LOG_ERR("Too short message for OpCode 0x%08x", opcode);
   1968c:	466e      	mov	r6, sp
   1968e:	b088      	sub	sp, #32
   19690:	466a      	mov	r2, sp
   19692:	4b0c      	ldr	r3, [pc, #48]	; (196c4 <bt_mesh_model_recv+0x1c0>)
			LOG_ERR("Invalid message size for OpCode 0x%08x", opcode);
   19694:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19698:	2303      	movs	r3, #3
   1969a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1969e:	4806      	ldr	r0, [pc, #24]	; (196b8 <bt_mesh_model_recv+0x1b4>)
   196a0:	f842 3f10 	str.w	r3, [r2, #16]!
   196a4:	f013 faf7 	bl	2cc96 <z_log_msg_static_create.constprop.0>
   196a8:	46b5      	mov	sp, r6
			continue;
   196aa:	e762      	b.n	19572 <bt_mesh_model_recv+0x6e>
   196ac:	00033436 	.word	0x00033436
   196b0:	2000ad10 	.word	0x2000ad10
   196b4:	0003344a 	.word	0x0003344a
   196b8:	0002fc5c 	.word	0x0002fc5c
   196bc:	0003346f 	.word	0x0003346f
   196c0:	000334b8 	.word	0x000334b8
   196c4:	00033494 	.word	0x00033494

000196c8 <bt_mesh_model_pending_store>:

void bt_mesh_model_pending_store(void)
{
	bt_mesh_model_foreach(store_pending_mod, NULL);
   196c8:	2100      	movs	r1, #0
   196ca:	4801      	ldr	r0, [pc, #4]	; (196d0 <bt_mesh_model_pending_store+0x8>)
   196cc:	f7ff bb46 	b.w	18d5c <bt_mesh_model_foreach>
   196d0:	00018b7d 	.word	0x00018b7d

000196d4 <bt_mesh_model_settings_commit>:
	}
}

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   196d4:	2100      	movs	r1, #0
   196d6:	4801      	ldr	r0, [pc, #4]	; (196dc <bt_mesh_model_settings_commit+0x8>)
   196d8:	f7ff bb40 	b.w	18d5c <bt_mesh_model_foreach>
   196dc:	0002cd29 	.word	0x0002cd29

000196e0 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   196e0:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   196e2:	2a01      	cmp	r2, #1
{
   196e4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   196e8:	d104      	bne.n	196f4 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   196ea:	4804      	ldr	r0, [pc, #16]	; (196fc <app_key_evt+0x1c>)
   196ec:	f10d 0106 	add.w	r1, sp, #6
   196f0:	f7ff fb34 	bl	18d5c <bt_mesh_model_foreach>
	}
}
   196f4:	b003      	add	sp, #12
   196f6:	f85d fb04 	ldr.w	pc, [sp], #4
   196fa:	bf00      	nop
   196fc:	0002d163 	.word	0x0002d163

00019700 <reset_send_end>:
	}
}

static void reset_send_end(int err, void *cb_data)
{
	k_work_submit(&node_reset_pending);
   19700:	4801      	ldr	r0, [pc, #4]	; (19708 <reset_send_end+0x8>)
   19702:	f00c bddd 	b.w	262c0 <k_work_submit>
   19706:	bf00      	nop
   19708:	200088ac 	.word	0x200088ac

0001970c <dev_comp_data_get>:
{
   1970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19710:	4689      	mov	r9, r1
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   19712:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
{
   19716:	b0ad      	sub	sp, #180	; 0xb4
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   19718:	ab0e      	add	r3, sp, #56	; 0x38
{
   1971a:	9003      	str	r0, [sp, #12]
	page = net_buf_simple_pull_u8(buf);
   1971c:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1971e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   19722:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   19724:	f014 fbaa 	bl	2de7c <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   19728:	2102      	movs	r1, #2
   1972a:	a805      	add	r0, sp, #20
   1972c:	f013 fb8e 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   19730:	2100      	movs	r1, #0
   19732:	a805      	add	r0, sp, #20
   19734:	f014 fbdd 	bl	2def2 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   19738:	f7ff feca 	bl	194d0 <bt_mesh_comp_get>
   1973c:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   1973e:	8801      	ldrh	r1, [r0, #0]
   19740:	a805      	add	r0, sp, #20
   19742:	f014 fbdd 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   19746:	8869      	ldrh	r1, [r5, #2]
   19748:	a805      	add	r0, sp, #20
   1974a:	f014 fbd9 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   1974e:	88a9      	ldrh	r1, [r5, #4]
   19750:	a805      	add	r0, sp, #20
   19752:	f014 fbd5 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   19756:	210a      	movs	r1, #10
   19758:	a805      	add	r0, sp, #20
   1975a:	f014 fbd1 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   1975e:	2107      	movs	r1, #7
   19760:	a805      	add	r0, sp, #20
   19762:	f014 fbcd 	bl	2df00 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   19766:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   19768:	f04f 0a02 	mov.w	sl, #2
		net_buf_simple_add_le16(buf, mod->id);
   1976c:	f04f 0b28 	mov.w	fp, #40	; 0x28
	for (i = 0; i < comp->elem_count; i++) {
   19770:	68ab      	ldr	r3, [r5, #8]
   19772:	429e      	cmp	r6, r3
   19774:	d313      	bcc.n	1979e <dev_comp_data_get+0x92>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   19776:	2300      	movs	r3, #0
   19778:	4649      	mov	r1, r9
   1977a:	9803      	ldr	r0, [sp, #12]
   1977c:	9300      	str	r3, [sp, #0]
   1977e:	aa05      	add	r2, sp, #20
   19780:	f7ff fe2e 	bl	193e0 <bt_mesh_model_send>
   19784:	b148      	cbz	r0, 1979a <dev_comp_data_get+0x8e>
		LOG_ERR("Unable to send Device Composition Status response");
   19786:	4b30      	ldr	r3, [pc, #192]	; (19848 <dev_comp_data_get+0x13c>)
   19788:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1978c:	930d      	str	r3, [sp, #52]	; 0x34
   1978e:	2302      	movs	r3, #2
   19790:	482e      	ldr	r0, [pc, #184]	; (1984c <dev_comp_data_get+0x140>)
   19792:	aa0c      	add	r2, sp, #48	; 0x30
   19794:	930c      	str	r3, [sp, #48]	; 0x30
   19796:	f013 fce8 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return err;
   1979a:	2000      	movs	r0, #0
   1979c:	e021      	b.n	197e2 <dev_comp_data_get+0xd6>
	if (net_buf_simple_tailroom(buf) <
   1979e:	a805      	add	r0, sp, #20
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   197a0:	68ec      	ldr	r4, [r5, #12]
	if (net_buf_simple_tailroom(buf) <
   197a2:	f014 fb92 	bl	2deca <net_buf_simple_tailroom>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   197a6:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   197aa:	7922      	ldrb	r2, [r4, #4]
   197ac:	7963      	ldrb	r3, [r4, #5]
   197ae:	3202      	adds	r2, #2
   197b0:	fb1a 2303 	smlabb	r3, sl, r3, r2
	if (net_buf_simple_tailroom(buf) <
   197b4:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   197b8:	d216      	bcs.n	197e8 <dev_comp_data_get+0xdc>
		LOG_ERR("Too large device composition");
   197ba:	4b25      	ldr	r3, [pc, #148]	; (19850 <dev_comp_data_get+0x144>)
   197bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   197c0:	4822      	ldr	r0, [pc, #136]	; (1984c <dev_comp_data_get+0x140>)
   197c2:	aa0c      	add	r2, sp, #48	; 0x30
   197c4:	e9cd a30c 	strd	sl, r3, [sp, #48]	; 0x30
   197c8:	f013 fccf 	bl	2d16a <z_log_msg_static_create.constprop.0>
		LOG_ERR("Unable to get composition page 0");
   197cc:	4b21      	ldr	r3, [pc, #132]	; (19854 <dev_comp_data_get+0x148>)
   197ce:	481f      	ldr	r0, [pc, #124]	; (1984c <dev_comp_data_get+0x140>)
   197d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   197d4:	aa0c      	add	r2, sp, #48	; 0x30
   197d6:	e9cd a30c 	strd	sl, r3, [sp, #48]	; 0x30
   197da:	f013 fcc6 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return err;
   197de:	f06f 0006 	mvn.w	r0, #6
}
   197e2:	b02d      	add	sp, #180	; 0xb4
   197e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   197e8:	8861      	ldrh	r1, [r4, #2]
   197ea:	a805      	add	r0, sp, #20
   197ec:	f014 fb88 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   197f0:	7921      	ldrb	r1, [r4, #4]
   197f2:	a805      	add	r0, sp, #20
   197f4:	f014 fb7d 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   197f8:	7961      	ldrb	r1, [r4, #5]
   197fa:	a805      	add	r0, sp, #20
   197fc:	f014 fb79 	bl	2def2 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   19800:	2700      	movs	r7, #0
   19802:	7923      	ldrb	r3, [r4, #4]
   19804:	429f      	cmp	r7, r3
   19806:	db05      	blt.n	19814 <dev_comp_data_get+0x108>
	for (i = 0; i < elem->vnd_model_count; i++) {
   19808:	2700      	movs	r7, #0
   1980a:	7963      	ldrb	r3, [r4, #5]
   1980c:	429f      	cmp	r7, r3
   1980e:	db0a      	blt.n	19826 <dev_comp_data_get+0x11a>
	for (i = 0; i < comp->elem_count; i++) {
   19810:	3601      	adds	r6, #1
   19812:	e7ad      	b.n	19770 <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   19814:	fb0b f307 	mul.w	r3, fp, r7
   19818:	68a2      	ldr	r2, [r4, #8]
   1981a:	a805      	add	r0, sp, #20
   1981c:	5ad1      	ldrh	r1, [r2, r3]
   1981e:	f014 fb6f 	bl	2df00 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   19822:	3701      	adds	r7, #1
   19824:	e7ed      	b.n	19802 <dev_comp_data_get+0xf6>
		mod = &elem->vnd_models[i];
   19826:	fb0b f307 	mul.w	r3, fp, r7
   1982a:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1982c:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   1982e:	eb01 0803 	add.w	r8, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   19832:	5ac9      	ldrh	r1, [r1, r3]
   19834:	f014 fb64 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   19838:	f8b8 1002 	ldrh.w	r1, [r8, #2]
   1983c:	a805      	add	r0, sp, #20
   1983e:	f014 fb5f 	bl	2df00 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   19842:	3701      	adds	r7, #1
   19844:	e7e1      	b.n	1980a <dev_comp_data_get+0xfe>
   19846:	bf00      	nop
   19848:	0003354c 	.word	0x0003354c
   1984c:	0002fc8c 	.word	0x0002fc8c
   19850:	0003350e 	.word	0x0003350e
   19854:	0003352b 	.word	0x0003352b

00019858 <app_key_get>:
{
   19858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1985a:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   1985c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
{
   19860:	b091      	sub	sp, #68	; 0x44
   19862:	af02      	add	r7, sp, #8
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   19864:	f107 0308 	add.w	r3, r7, #8
{
   19868:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   1986a:	e9c7 1306 	strd	r1, r3, [r7, #24]
	get_idx = net_buf_simple_pull_le16(buf);
   1986e:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   19870:	617b      	str	r3, [r7, #20]
	get_idx = net_buf_simple_pull_le16(buf);
   19872:	f014 fb0b 	bl	2de8c <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   19876:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   1987a:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   1987c:	d313      	bcc.n	198a6 <app_key_get+0x4e>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   1987e:	466d      	mov	r5, sp
   19880:	b088      	sub	sp, #32
   19882:	aa02      	add	r2, sp, #8
   19884:	4b27      	ldr	r3, [pc, #156]	; (19924 <app_key_get+0xcc>)
   19886:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1988a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1988e:	2303      	movs	r3, #3
   19890:	4825      	ldr	r0, [pc, #148]	; (19928 <app_key_get+0xd0>)
   19892:	f842 3f10 	str.w	r3, [r2, #16]!
   19896:	f013 fc68 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1989a:	f06f 0015 	mvn.w	r0, #21
   1989e:	46ad      	mov	sp, r5
}
   198a0:	373c      	adds	r7, #60	; 0x3c
   198a2:	46bd      	mov	sp, r7
   198a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   198a6:	f107 0014 	add.w	r0, r7, #20
   198aa:	f248 0102 	movw	r1, #32770	; 0x8002
   198ae:	f013 facd 	bl	2ce4c <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   198b2:	4620      	mov	r0, r4
   198b4:	f012 fdec 	bl	2c490 <bt_mesh_subnet_exists>
   198b8:	b9a0      	cbnz	r0, 198e4 <app_key_get+0x8c>
	net_buf_simple_add_u8(&msg, status);
   198ba:	2104      	movs	r1, #4
   198bc:	f107 0014 	add.w	r0, r7, #20
   198c0:	f014 fb17 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   198c4:	4621      	mov	r1, r4
		net_buf_simple_add_le16(&msg, app_idx[i]);
   198c6:	f107 0014 	add.w	r0, r7, #20
   198ca:	f014 fb19 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   198ce:	2300      	movs	r3, #0
   198d0:	4631      	mov	r1, r6
   198d2:	4628      	mov	r0, r5
   198d4:	9300      	str	r3, [sp, #0]
   198d6:	f107 0214 	add.w	r2, r7, #20
   198da:	f7ff fd81 	bl	193e0 <bt_mesh_model_send>
   198de:	b9a8      	cbnz	r0, 1990c <app_key_get+0xb4>
	return 0;
   198e0:	2000      	movs	r0, #0
   198e2:	e7dd      	b.n	198a0 <app_key_get+0x48>
	net_buf_simple_add_u8(&msg, status);
   198e4:	2100      	movs	r1, #0
   198e6:	f107 0014 	add.w	r0, r7, #20
   198ea:	f014 fb02 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   198ee:	4621      	mov	r1, r4
   198f0:	f107 0014 	add.w	r0, r7, #20
   198f4:	f014 fb04 	bl	2df00 <net_buf_simple_add_le16>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   198f8:	2300      	movs	r3, #0
   198fa:	2201      	movs	r2, #1
   198fc:	4620      	mov	r0, r4
   198fe:	1d39      	adds	r1, r7, #4
   19900:	f7fd f94e 	bl	16ba0 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   19904:	2800      	cmp	r0, #0
   19906:	d0e2      	beq.n	198ce <app_key_get+0x76>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   19908:	88b9      	ldrh	r1, [r7, #4]
   1990a:	e7dc      	b.n	198c6 <app_key_get+0x6e>
		LOG_ERR("Unable to send AppKey List");
   1990c:	4b07      	ldr	r3, [pc, #28]	; (1992c <app_key_get+0xd4>)
   1990e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19912:	637b      	str	r3, [r7, #52]	; 0x34
   19914:	2302      	movs	r3, #2
   19916:	4804      	ldr	r0, [pc, #16]	; (19928 <app_key_get+0xd0>)
   19918:	633b      	str	r3, [r7, #48]	; 0x30
   1991a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1991e:	f013 fc24 	bl	2d16a <z_log_msg_static_create.constprop.0>
   19922:	e7dd      	b.n	198e0 <app_key_get+0x88>
   19924:	0003357e 	.word	0x0003357e
   19928:	0002fc8c 	.word	0x0002fc8c
   1992c:	00033599 	.word	0x00033599

00019930 <beacon_get.part.0>:
static int beacon_get(struct bt_mesh_model *model,
   19930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to send Config Beacon Status response");
   19932:	4b06      	ldr	r3, [pc, #24]	; (1994c <beacon_get.part.0+0x1c>)
   19934:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19938:	9305      	str	r3, [sp, #20]
   1993a:	2302      	movs	r3, #2
   1993c:	4804      	ldr	r0, [pc, #16]	; (19950 <beacon_get.part.0+0x20>)
   1993e:	aa04      	add	r2, sp, #16
   19940:	9304      	str	r3, [sp, #16]
   19942:	f013 fc12 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19946:	b007      	add	sp, #28
   19948:	f85d fb04 	ldr.w	pc, [sp], #4
   1994c:	000335b4 	.word	0x000335b4
   19950:	0002fc8c 	.word	0x0002fc8c

00019954 <beacon_set>:
{
   19954:	b570      	push	{r4, r5, r6, lr}
   19956:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   19958:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1995c:	b08e      	sub	sp, #56	; 0x38
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   1995e:	ab03      	add	r3, sp, #12
   19960:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19964:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   19966:	6823      	ldr	r3, [r4, #0]
{
   19968:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1996a:	7818      	ldrb	r0, [r3, #0]
{
   1996c:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1996e:	2801      	cmp	r0, #1
   19970:	d823      	bhi.n	199ba <beacon_set+0x66>
	bt_mesh_beacon_set(buf->data[0]);
   19972:	f000 0001 	and.w	r0, r0, #1
   19976:	f7fb f81d 	bl	149b4 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1997a:	f248 010b 	movw	r1, #32779	; 0x800b
   1997e:	a805      	add	r0, sp, #20
   19980:	f013 fa64 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   19984:	6823      	ldr	r3, [r4, #0]
   19986:	a805      	add	r0, sp, #20
   19988:	7819      	ldrb	r1, [r3, #0]
   1998a:	f014 fab2 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1998e:	2300      	movs	r3, #0
   19990:	4631      	mov	r1, r6
   19992:	4628      	mov	r0, r5
   19994:	9300      	str	r3, [sp, #0]
   19996:	aa05      	add	r2, sp, #20
   19998:	f7ff fd22 	bl	193e0 <bt_mesh_model_send>
   1999c:	b910      	cbnz	r0, 199a4 <beacon_set+0x50>
	return 0;
   1999e:	2000      	movs	r0, #0
}
   199a0:	b00e      	add	sp, #56	; 0x38
   199a2:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to send Config Beacon Status response");
   199a4:	4b06      	ldr	r3, [pc, #24]	; (199c0 <beacon_set+0x6c>)
   199a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   199aa:	930d      	str	r3, [sp, #52]	; 0x34
   199ac:	2302      	movs	r3, #2
   199ae:	4805      	ldr	r0, [pc, #20]	; (199c4 <beacon_set+0x70>)
   199b0:	aa0c      	add	r2, sp, #48	; 0x30
   199b2:	930c      	str	r3, [sp, #48]	; 0x30
   199b4:	f013 fbd9 	bl	2d16a <z_log_msg_static_create.constprop.0>
   199b8:	e7f1      	b.n	1999e <beacon_set+0x4a>
		return -EINVAL;
   199ba:	f06f 0015 	mvn.w	r0, #21
   199be:	e7ef      	b.n	199a0 <beacon_set+0x4c>
   199c0:	000335b4 	.word	0x000335b4
   199c4:	0002fc8c 	.word	0x0002fc8c

000199c8 <default_ttl_get.part.0>:
static int default_ttl_get(struct bt_mesh_model *model,
   199c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to send Default TTL Status response");
   199ca:	4b06      	ldr	r3, [pc, #24]	; (199e4 <default_ttl_get.part.0+0x1c>)
   199cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   199d0:	9305      	str	r3, [sp, #20]
   199d2:	2302      	movs	r3, #2
   199d4:	4804      	ldr	r0, [pc, #16]	; (199e8 <default_ttl_get.part.0+0x20>)
   199d6:	aa04      	add	r2, sp, #16
   199d8:	9304      	str	r3, [sp, #16]
   199da:	f013 fbc6 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   199de:	b007      	add	sp, #28
   199e0:	f85d fb04 	ldr.w	pc, [sp], #4
   199e4:	000335e1 	.word	0x000335e1
   199e8:	0002fc8c 	.word	0x0002fc8c

000199ec <default_ttl_set>:
{
   199ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   199ee:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   199f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   199f4:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   199f6:	ab03      	add	r3, sp, #12
   199f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   199fc:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   199fe:	682b      	ldr	r3, [r5, #0]
{
   19a00:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   19a02:	7818      	ldrb	r0, [r3, #0]
{
   19a04:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   19a06:	f7fb f839 	bl	14a7c <bt_mesh_default_ttl_set>
	if (err) {
   19a0a:	4604      	mov	r4, r0
   19a0c:	b9d8      	cbnz	r0, 19a46 <default_ttl_set+0x5a>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   19a0e:	f248 010e 	movw	r1, #32782	; 0x800e
   19a12:	a805      	add	r0, sp, #20
   19a14:	f013 fa1a 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   19a18:	682b      	ldr	r3, [r5, #0]
   19a1a:	a805      	add	r0, sp, #20
   19a1c:	7819      	ldrb	r1, [r3, #0]
   19a1e:	f014 fa68 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   19a22:	4623      	mov	r3, r4
   19a24:	4639      	mov	r1, r7
   19a26:	4630      	mov	r0, r6
   19a28:	9400      	str	r4, [sp, #0]
   19a2a:	aa05      	add	r2, sp, #20
   19a2c:	f7ff fcd8 	bl	193e0 <bt_mesh_model_send>
   19a30:	b148      	cbz	r0, 19a46 <default_ttl_set+0x5a>
		LOG_ERR("Unable to send Default TTL Status response");
   19a32:	4b06      	ldr	r3, [pc, #24]	; (19a4c <default_ttl_set+0x60>)
   19a34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a38:	930d      	str	r3, [sp, #52]	; 0x34
   19a3a:	2302      	movs	r3, #2
   19a3c:	4804      	ldr	r0, [pc, #16]	; (19a50 <default_ttl_set+0x64>)
   19a3e:	aa0c      	add	r2, sp, #48	; 0x30
   19a40:	930c      	str	r3, [sp, #48]	; 0x30
   19a42:	f013 fb92 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19a46:	4620      	mov	r0, r4
   19a48:	b00f      	add	sp, #60	; 0x3c
   19a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a4c:	000335e1 	.word	0x000335e1
   19a50:	0002fc8c 	.word	0x0002fc8c

00019a54 <send_gatt_proxy_status.part.0>:
static int send_gatt_proxy_status(struct bt_mesh_model *model,
   19a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to send GATT Proxy Status");
   19a56:	4b06      	ldr	r3, [pc, #24]	; (19a70 <send_gatt_proxy_status.part.0+0x1c>)
   19a58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a5c:	9305      	str	r3, [sp, #20]
   19a5e:	2302      	movs	r3, #2
   19a60:	4804      	ldr	r0, [pc, #16]	; (19a74 <send_gatt_proxy_status.part.0+0x20>)
   19a62:	aa04      	add	r2, sp, #16
   19a64:	9304      	str	r3, [sp, #16]
   19a66:	f013 fb80 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19a6a:	b007      	add	sp, #28
   19a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   19a70:	0003360c 	.word	0x0003360c
   19a74:	0002fc8c 	.word	0x0002fc8c

00019a78 <net_transmit_get.part.0>:
static int net_transmit_get(struct bt_mesh_model *model,
   19a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to send Config Network Transmit Status");
   19a7a:	4b06      	ldr	r3, [pc, #24]	; (19a94 <net_transmit_get.part.0+0x1c>)
   19a7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a80:	9305      	str	r3, [sp, #20]
   19a82:	2302      	movs	r3, #2
   19a84:	4804      	ldr	r0, [pc, #16]	; (19a98 <net_transmit_get.part.0+0x20>)
   19a86:	aa04      	add	r2, sp, #16
   19a88:	9304      	str	r3, [sp, #16]
   19a8a:	f013 fb6e 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19a8e:	b007      	add	sp, #28
   19a90:	f85d fb04 	ldr.w	pc, [sp], #4
   19a94:	0003362d 	.word	0x0003362d
   19a98:	0002fc8c 	.word	0x0002fc8c

00019a9c <net_transmit_set>:
{
   19a9c:	b570      	push	{r4, r5, r6, lr}
   19a9e:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   19aa0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   19aa4:	b08e      	sub	sp, #56	; 0x38
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   19aa6:	ab03      	add	r3, sp, #12
   19aa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19aac:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   19aae:	6823      	ldr	r3, [r4, #0]
{
   19ab0:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   19ab2:	7818      	ldrb	r0, [r3, #0]
{
   19ab4:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   19ab6:	f7fb f829 	bl	14b0c <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   19aba:	f248 0125 	movw	r1, #32805	; 0x8025
   19abe:	a805      	add	r0, sp, #20
   19ac0:	f013 f9c4 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   19ac4:	6823      	ldr	r3, [r4, #0]
   19ac6:	a805      	add	r0, sp, #20
   19ac8:	7819      	ldrb	r1, [r3, #0]
   19aca:	f014 fa12 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   19ace:	2300      	movs	r3, #0
   19ad0:	4631      	mov	r1, r6
   19ad2:	4628      	mov	r0, r5
   19ad4:	9300      	str	r3, [sp, #0]
   19ad6:	aa05      	add	r2, sp, #20
   19ad8:	f7ff fc82 	bl	193e0 <bt_mesh_model_send>
   19adc:	b148      	cbz	r0, 19af2 <net_transmit_set+0x56>
		LOG_ERR("Unable to send Network Transmit Status");
   19ade:	4b06      	ldr	r3, [pc, #24]	; (19af8 <net_transmit_set+0x5c>)
   19ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19ae4:	930d      	str	r3, [sp, #52]	; 0x34
   19ae6:	2302      	movs	r3, #2
   19ae8:	4804      	ldr	r0, [pc, #16]	; (19afc <net_transmit_set+0x60>)
   19aea:	aa0c      	add	r2, sp, #48	; 0x30
   19aec:	930c      	str	r3, [sp, #48]	; 0x30
   19aee:	f013 fb3c 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19af2:	2000      	movs	r0, #0
   19af4:	b00e      	add	sp, #56	; 0x38
   19af6:	bd70      	pop	{r4, r5, r6, pc}
   19af8:	0003365b 	.word	0x0003365b
   19afc:	0002fc8c 	.word	0x0002fc8c

00019b00 <relay_get>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   19b00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   19b04:	b530      	push	{r4, r5, lr}
   19b06:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   19b08:	ab03      	add	r3, sp, #12
{
   19b0a:	4604      	mov	r4, r0
   19b0c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   19b0e:	a805      	add	r0, sp, #20
   19b10:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   19b14:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19b18:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   19b1a:	f013 f997 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   19b1e:	f7fb f87d 	bl	14c1c <bt_mesh_relay_get>
   19b22:	4601      	mov	r1, r0
   19b24:	a805      	add	r0, sp, #20
   19b26:	f014 f9e4 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   19b2a:	f7fb f881 	bl	14c30 <bt_mesh_relay_retransmit_get>
   19b2e:	4601      	mov	r1, r0
   19b30:	a805      	add	r0, sp, #20
   19b32:	f014 f9de 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   19b36:	2300      	movs	r3, #0
   19b38:	4629      	mov	r1, r5
   19b3a:	4620      	mov	r0, r4
   19b3c:	9300      	str	r3, [sp, #0]
   19b3e:	aa05      	add	r2, sp, #20
   19b40:	f7ff fc4e 	bl	193e0 <bt_mesh_model_send>
   19b44:	b148      	cbz	r0, 19b5a <relay_get+0x5a>
		LOG_ERR("Unable to send Config Relay Status response");
   19b46:	4b06      	ldr	r3, [pc, #24]	; (19b60 <relay_get+0x60>)
   19b48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b4c:	930d      	str	r3, [sp, #52]	; 0x34
   19b4e:	2302      	movs	r3, #2
   19b50:	4804      	ldr	r0, [pc, #16]	; (19b64 <relay_get+0x64>)
   19b52:	aa0c      	add	r2, sp, #48	; 0x30
   19b54:	930c      	str	r3, [sp, #48]	; 0x30
   19b56:	f013 fb08 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19b5a:	2000      	movs	r0, #0
   19b5c:	b00f      	add	sp, #60	; 0x3c
   19b5e:	bd30      	pop	{r4, r5, pc}
   19b60:	00033682 	.word	0x00033682
   19b64:	0002fc8c 	.word	0x0002fc8c

00019b68 <relay_set>:
{
   19b68:	b530      	push	{r4, r5, lr}
   19b6a:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   19b6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
   19b70:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   19b72:	ab03      	add	r3, sp, #12
   19b74:	e9cd 1306 	strd	r1, r3, [sp, #24]
   19b78:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   19b7a:	6813      	ldr	r3, [r2, #0]
{
   19b7c:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   19b7e:	7818      	ldrb	r0, [r3, #0]
   19b80:	2801      	cmp	r0, #1
   19b82:	d829      	bhi.n	19bd8 <relay_set+0x70>
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   19b84:	7859      	ldrb	r1, [r3, #1]
   19b86:	f7fa ffdd 	bl	14b44 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   19b8a:	f248 0128 	movw	r1, #32808	; 0x8028
   19b8e:	a805      	add	r0, sp, #20
   19b90:	f013 f95c 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   19b94:	f7fb f842 	bl	14c1c <bt_mesh_relay_get>
   19b98:	4601      	mov	r1, r0
   19b9a:	a805      	add	r0, sp, #20
   19b9c:	f014 f9a9 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   19ba0:	f7fb f846 	bl	14c30 <bt_mesh_relay_retransmit_get>
   19ba4:	4601      	mov	r1, r0
   19ba6:	a805      	add	r0, sp, #20
   19ba8:	f014 f9a3 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   19bac:	2300      	movs	r3, #0
   19bae:	4629      	mov	r1, r5
   19bb0:	4620      	mov	r0, r4
   19bb2:	9300      	str	r3, [sp, #0]
   19bb4:	aa05      	add	r2, sp, #20
   19bb6:	f7ff fc13 	bl	193e0 <bt_mesh_model_send>
   19bba:	b910      	cbnz	r0, 19bc2 <relay_set+0x5a>
	return 0;
   19bbc:	2000      	movs	r0, #0
}
   19bbe:	b00f      	add	sp, #60	; 0x3c
   19bc0:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to send Relay Status response");
   19bc2:	4b07      	ldr	r3, [pc, #28]	; (19be0 <relay_set+0x78>)
   19bc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19bc8:	930d      	str	r3, [sp, #52]	; 0x34
   19bca:	2302      	movs	r3, #2
   19bcc:	4805      	ldr	r0, [pc, #20]	; (19be4 <relay_set+0x7c>)
   19bce:	aa0c      	add	r2, sp, #48	; 0x30
   19bd0:	930c      	str	r3, [sp, #48]	; 0x30
   19bd2:	f013 faca 	bl	2d16a <z_log_msg_static_create.constprop.0>
   19bd6:	e7f1      	b.n	19bbc <relay_set+0x54>
		return -EINVAL;
   19bd8:	f06f 0015 	mvn.w	r0, #21
   19bdc:	e7ef      	b.n	19bbe <relay_set+0x56>
   19bde:	bf00      	nop
   19be0:	000336ae 	.word	0x000336ae
   19be4:	0002fc8c 	.word	0x0002fc8c

00019be8 <send_mod_pub_status>:
{
   19be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bec:	4692      	mov	sl, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   19bee:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
{
   19bf2:	b091      	sub	sp, #68	; 0x44
   19bf4:	f89d b070 	ldrb.w	fp, [sp, #112]	; 0x70
   19bf8:	4605      	mov	r5, r0
   19bfa:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   19bfc:	a802      	add	r0, sp, #8
   19bfe:	f248 0119 	movw	r1, #32793	; 0x8019
{
   19c02:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   19c04:	ab05      	add	r3, sp, #20
   19c06:	e9cd 2303 	strd	r2, r3, [sp, #12]
   19c0a:	9302      	str	r3, [sp, #8]
{
   19c0c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
   19c10:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   19c12:	9f1d      	ldr	r7, [sp, #116]	; 0x74
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   19c14:	f013 f91a 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   19c18:	4659      	mov	r1, fp
   19c1a:	a802      	add	r0, sp, #8
   19c1c:	f014 f969 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   19c20:	4651      	mov	r1, sl
   19c22:	a802      	add	r0, sp, #8
   19c24:	f014 f96c 	bl	2df00 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   19c28:	f1bb 0f00 	cmp.w	fp, #0
   19c2c:	d028      	beq.n	19c80 <send_mod_pub_status+0x98>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   19c2e:	2107      	movs	r1, #7
   19c30:	a802      	add	r0, sp, #8
   19c32:	f006 fb8d 	bl	20350 <net_buf_simple_add>
   19c36:	2207      	movs	r2, #7
   19c38:	2100      	movs	r1, #0
   19c3a:	f010 fc79 	bl	2a530 <memset>
	if (vnd) {
   19c3e:	f1b8 0f00 	cmp.w	r8, #0
   19c42:	d03f      	beq.n	19cc4 <send_mod_pub_status+0xdc>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   19c44:	2104      	movs	r1, #4
   19c46:	a802      	add	r0, sp, #8
   19c48:	f006 fb82 	bl	20350 <net_buf_simple_add>
   19c4c:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   19c4e:	4639      	mov	r1, r7
   19c50:	f010 fc63 	bl	2a51a <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   19c54:	2300      	movs	r3, #0
   19c56:	4631      	mov	r1, r6
   19c58:	4628      	mov	r0, r5
   19c5a:	9300      	str	r3, [sp, #0]
   19c5c:	aa02      	add	r2, sp, #8
   19c5e:	f7ff fbbf 	bl	193e0 <bt_mesh_model_send>
   19c62:	b148      	cbz	r0, 19c78 <send_mod_pub_status+0x90>
		LOG_ERR("Unable to send Model Publication Status");
   19c64:	4b1a      	ldr	r3, [pc, #104]	; (19cd0 <send_mod_pub_status+0xe8>)
   19c66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c6a:	930f      	str	r3, [sp, #60]	; 0x3c
   19c6c:	2302      	movs	r3, #2
   19c6e:	4819      	ldr	r0, [pc, #100]	; (19cd4 <send_mod_pub_status+0xec>)
   19c70:	aa0e      	add	r2, sp, #56	; 0x38
   19c72:	930e      	str	r3, [sp, #56]	; 0x38
   19c74:	f013 fa79 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   19c78:	2000      	movs	r0, #0
   19c7a:	b011      	add	sp, #68	; 0x44
   19c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   19c80:	4649      	mov	r1, r9
   19c82:	a802      	add	r0, sp, #8
   19c84:	f014 f93c 	bl	2df00 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   19c88:	68a3      	ldr	r3, [r4, #8]
		net_buf_simple_add_le16(&msg, idx_cred);
   19c8a:	a802      	add	r0, sp, #8
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   19c8c:	79da      	ldrb	r2, [r3, #7]
   19c8e:	88db      	ldrh	r3, [r3, #6]
   19c90:	f3c2 1200 	ubfx	r2, r2, #4, #1
   19c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
   19c98:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   19c9c:	f3c3 010c 	ubfx	r1, r3, #0, #13
   19ca0:	f014 f92e 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   19ca4:	68a3      	ldr	r3, [r4, #8]
   19ca6:	a802      	add	r0, sp, #8
   19ca8:	7a19      	ldrb	r1, [r3, #8]
   19caa:	f014 f922 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   19cae:	68a3      	ldr	r3, [r4, #8]
   19cb0:	a802      	add	r0, sp, #8
   19cb2:	7a99      	ldrb	r1, [r3, #10]
   19cb4:	f014 f91d 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   19cb8:	68a3      	ldr	r3, [r4, #8]
   19cba:	a802      	add	r0, sp, #8
   19cbc:	7a59      	ldrb	r1, [r3, #9]
   19cbe:	f014 f918 	bl	2def2 <net_buf_simple_add_u8>
   19cc2:	e7bc      	b.n	19c3e <send_mod_pub_status+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   19cc4:	2102      	movs	r1, #2
   19cc6:	a802      	add	r0, sp, #8
   19cc8:	f006 fb42 	bl	20350 <net_buf_simple_add>
   19ccc:	2202      	movs	r2, #2
   19cce:	e7be      	b.n	19c4e <send_mod_pub_status+0x66>
   19cd0:	000336d3 	.word	0x000336d3
   19cd4:	0002fc8c 	.word	0x0002fc8c

00019cd8 <mod_pub_va_set>:
{
   19cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cdc:	b093      	sub	sp, #76	; 0x4c
	if ((buf->len != 25U) && (buf->len != 27U)) {
   19cde:	8893      	ldrh	r3, [r2, #4]
{
   19ce0:	af04      	add	r7, sp, #16
	if ((buf->len != 25U) && (buf->len != 27U)) {
   19ce2:	f023 0302 	bic.w	r3, r3, #2
   19ce6:	b29b      	uxth	r3, r3
   19ce8:	2b19      	cmp	r3, #25
{
   19cea:	468b      	mov	fp, r1
   19cec:	4614      	mov	r4, r2
   19cee:	6138      	str	r0, [r7, #16]
	if ((buf->len != 25U) && (buf->len != 27U)) {
   19cf0:	d010      	beq.n	19d14 <mod_pub_va_set+0x3c>
		LOG_ERR("The message size for the application opcode is incorrect.");
   19cf2:	4b43      	ldr	r3, [pc, #268]	; (19e00 <mod_pub_va_set+0x128>)
   19cf4:	4843      	ldr	r0, [pc, #268]	; (19e04 <mod_pub_va_set+0x12c>)
   19cf6:	637b      	str	r3, [r7, #52]	; 0x34
   19cf8:	2302      	movs	r3, #2
   19cfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19cfe:	633b      	str	r3, [r7, #48]	; 0x30
   19d00:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19d04:	f013 fa31 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   19d08:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   19d0c:	373c      	adds	r7, #60	; 0x3c
   19d0e:	46bd      	mov	sp, r7
   19d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   19d14:	4610      	mov	r0, r2
   19d16:	f014 f8b9 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19d1a:	b203      	sxth	r3, r0
   19d1c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   19d1e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19d20:	dd20      	ble.n	19d64 <mod_pub_va_set+0x8c>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   19d22:	2110      	movs	r1, #16
   19d24:	4620      	mov	r0, r4
   19d26:	f006 faf9 	bl	2031c <net_buf_simple_pull_mem>
   19d2a:	4681      	mov	r9, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   19d2c:	4620      	mov	r0, r4
   19d2e:	f014 f8ad 	bl	2de8c <net_buf_simple_pull_le16>
   19d32:	4682      	mov	sl, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   19d34:	4620      	mov	r0, r4
   19d36:	f014 f8a1 	bl	2de7c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   19d3a:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   19d3e:	b2db      	uxtb	r3, r3
   19d40:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   19d42:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   19d44:	d811      	bhi.n	19d6a <mod_pub_va_set+0x92>
		LOG_ERR("Invalid TTL value 0x%02x", pub_ttl);
   19d46:	466c      	mov	r4, sp
   19d48:	b088      	sub	sp, #32
   19d4a:	aa04      	add	r2, sp, #16
   19d4c:	4b2e      	ldr	r3, [pc, #184]	; (19e08 <mod_pub_va_set+0x130>)
   19d4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19d52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19d56:	2303      	movs	r3, #3
   19d58:	482a      	ldr	r0, [pc, #168]	; (19e04 <mod_pub_va_set+0x12c>)
   19d5a:	f842 3f10 	str.w	r3, [r2, #16]!
   19d5e:	f013 fa04 	bl	2d16a <z_log_msg_static_create.constprop.0>
   19d62:	46a5      	mov	sp, r4
		return -EINVAL;
   19d64:	f06f 0015 	mvn.w	r0, #21
   19d68:	e7d0      	b.n	19d0c <mod_pub_va_set+0x34>
	pub_period = net_buf_simple_pull_u8(buf);
   19d6a:	4620      	mov	r0, r4
   19d6c:	f014 f886 	bl	2de7c <net_buf_simple_pull_u8>
   19d70:	60f8      	str	r0, [r7, #12]
	retransmit = net_buf_simple_pull_u8(buf);
   19d72:	4620      	mov	r0, r4
   19d74:	f014 f882 	bl	2de7c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   19d78:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   19d7a:	60b8      	str	r0, [r7, #8]
	elem = bt_mesh_elem_find(elem_addr);
   19d7c:	4630      	mov	r0, r6
	mod_id = buf->data;
   19d7e:	617b      	str	r3, [r7, #20]
	elem = bt_mesh_elem_find(elem_addr);
   19d80:	f7ff face 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   19d84:	4605      	mov	r5, r0
   19d86:	b998      	cbnz	r0, 19db0 <mod_pub_va_set+0xd8>
		vnd = (buf->len == 4U);
   19d88:	88a3      	ldrh	r3, [r4, #4]
		status = STATUS_INVALID_ADDRESS;
   19d8a:	2401      	movs	r4, #1
		vnd = (buf->len == 4U);
   19d8c:	1f1a      	subs	r2, r3, #4
   19d8e:	4253      	negs	r3, r2
   19d90:	4153      	adcs	r3, r2
   19d92:	77fb      	strb	r3, [r7, #31]
		pub_addr = 0U;
   19d94:	8438      	strh	r0, [r7, #32]
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   19d96:	697a      	ldr	r2, [r7, #20]
   19d98:	8c3b      	ldrh	r3, [r7, #32]
   19d9a:	e9cd 4202 	strd	r4, r2, [sp, #8]
   19d9e:	9501      	str	r5, [sp, #4]
   19da0:	7ffa      	ldrb	r2, [r7, #31]
   19da2:	4659      	mov	r1, fp
   19da4:	9200      	str	r2, [sp, #0]
   19da6:	6938      	ldr	r0, [r7, #16]
   19da8:	4632      	mov	r2, r6
   19daa:	f7ff ff1d 	bl	19be8 <send_mod_pub_status>
   19dae:	e7ad      	b.n	19d0c <mod_pub_va_set+0x34>
	mod = get_model(elem, buf, &vnd);
   19db0:	4621      	mov	r1, r4
   19db2:	f107 021f 	add.w	r2, r7, #31
   19db6:	f013 f8d0 	bl	2cf5a <get_model>
	if (!mod) {
   19dba:	4605      	mov	r5, r0
   19dbc:	b910      	cbnz	r0, 19dc4 <mod_pub_va_set+0xec>
		status = STATUS_INVALID_MODEL;
   19dbe:	2402      	movs	r4, #2
		pub_addr = 0U;
   19dc0:	8438      	strh	r0, [r7, #32]
		goto send_status;
   19dc2:	e7e8      	b.n	19d96 <mod_pub_va_set+0xbe>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   19dc4:	4648      	mov	r0, r9
   19dc6:	f107 0120 	add.w	r1, r7, #32
   19dca:	f7fd fcaf 	bl	1772c <bt_mesh_va_add>
   19dce:	4604      	mov	r4, r0
   19dd0:	6078      	str	r0, [r7, #4]
	if (status != STATUS_SUCCESS) {
   19dd2:	2800      	cmp	r0, #0
   19dd4:	d1df      	bne.n	19d96 <mod_pub_va_set+0xbe>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   19dd6:	68bb      	ldr	r3, [r7, #8]
   19dd8:	8c39      	ldrh	r1, [r7, #32]
   19dda:	9302      	str	r3, [sp, #8]
   19ddc:	68fb      	ldr	r3, [r7, #12]
   19dde:	4628      	mov	r0, r5
   19de0:	e9cd 8300 	strd	r8, r3, [sp]
   19de4:	f3ca 020b 	ubfx	r2, sl, #0, #12
   19de8:	f3ca 3300 	ubfx	r3, sl, #12, #1
   19dec:	f013 f901 	bl	2cff2 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   19df0:	4604      	mov	r4, r0
   19df2:	2800      	cmp	r0, #0
   19df4:	d0cf      	beq.n	19d96 <mod_pub_va_set+0xbe>
		bt_mesh_va_del(label_uuid, NULL);
   19df6:	4648      	mov	r0, r9
   19df8:	6879      	ldr	r1, [r7, #4]
   19dfa:	f7fd fccb 	bl	17794 <bt_mesh_va_del>
   19dfe:	e7ca      	b.n	19d96 <mod_pub_va_set+0xbe>
   19e00:	000336fb 	.word	0x000336fb
   19e04:	0002fc8c 	.word	0x0002fc8c
   19e08:	00033735 	.word	0x00033735

00019e0c <mod_pub_set>:
{
   19e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e10:	b08f      	sub	sp, #60	; 0x3c
	if ((buf->len != 11U) && (buf->len != 13U)) {
   19e12:	8893      	ldrh	r3, [r2, #4]
{
   19e14:	af04      	add	r7, sp, #16
	if ((buf->len != 11U) && (buf->len != 13U)) {
   19e16:	2b0b      	cmp	r3, #11
{
   19e18:	468b      	mov	fp, r1
   19e1a:	4614      	mov	r4, r2
   19e1c:	60b8      	str	r0, [r7, #8]
	if ((buf->len != 11U) && (buf->len != 13U)) {
   19e1e:	d012      	beq.n	19e46 <mod_pub_set+0x3a>
   19e20:	2b0d      	cmp	r3, #13
   19e22:	d010      	beq.n	19e46 <mod_pub_set+0x3a>
		LOG_ERR("The message size for the application opcode is incorrect.");
   19e24:	4b39      	ldr	r3, [pc, #228]	; (19f0c <mod_pub_set+0x100>)
   19e26:	483a      	ldr	r0, [pc, #232]	; (19f10 <mod_pub_set+0x104>)
   19e28:	627b      	str	r3, [r7, #36]	; 0x24
   19e2a:	2302      	movs	r3, #2
   19e2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19e30:	623b      	str	r3, [r7, #32]
   19e32:	f107 0220 	add.w	r2, r7, #32
   19e36:	f013 f998 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   19e3a:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   19e3e:	372c      	adds	r7, #44	; 0x2c
   19e40:	46bd      	mov	sp, r7
   19e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   19e46:	4620      	mov	r0, r4
   19e48:	f014 f820 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19e4c:	b203      	sxth	r3, r0
   19e4e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   19e50:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19e52:	dd1f      	ble.n	19e94 <mod_pub_set+0x88>
	pub_addr = net_buf_simple_pull_le16(buf);
   19e54:	4620      	mov	r0, r4
   19e56:	f014 f819 	bl	2de8c <net_buf_simple_pull_le16>
   19e5a:	4680      	mov	r8, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   19e5c:	4620      	mov	r0, r4
   19e5e:	f014 f815 	bl	2de8c <net_buf_simple_pull_le16>
   19e62:	4681      	mov	r9, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   19e64:	4620      	mov	r0, r4
   19e66:	f014 f809 	bl	2de7c <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   19e6a:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   19e6e:	b2d2      	uxtb	r2, r2
   19e70:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   19e72:	4682      	mov	sl, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   19e74:	d811      	bhi.n	19e9a <mod_pub_set+0x8e>
		LOG_ERR("Invalid TTL value 0x%02x", pub_ttl);
   19e76:	466c      	mov	r4, sp
   19e78:	b088      	sub	sp, #32
   19e7a:	aa04      	add	r2, sp, #16
   19e7c:	2303      	movs	r3, #3
   19e7e:	4925      	ldr	r1, [pc, #148]	; (19f14 <mod_pub_set+0x108>)
   19e80:	e9c2 1005 	strd	r1, r0, [r2, #20]
   19e84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19e88:	4821      	ldr	r0, [pc, #132]	; (19f10 <mod_pub_set+0x104>)
   19e8a:	f842 3f10 	str.w	r3, [r2, #16]!
   19e8e:	f013 f96c 	bl	2d16a <z_log_msg_static_create.constprop.0>
   19e92:	46a5      	mov	sp, r4
		return -EINVAL;
   19e94:	f06f 0015 	mvn.w	r0, #21
   19e98:	e7d1      	b.n	19e3e <mod_pub_set+0x32>
	pub_period = net_buf_simple_pull_u8(buf);
   19e9a:	4620      	mov	r0, r4
   19e9c:	f013 ffee 	bl	2de7c <net_buf_simple_pull_u8>
   19ea0:	6078      	str	r0, [r7, #4]
	retransmit = net_buf_simple_pull_u8(buf);
   19ea2:	4620      	mov	r0, r4
   19ea4:	f013 ffea 	bl	2de7c <net_buf_simple_pull_u8>
	mod_id = buf->data;
   19ea8:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   19eaa:	6038      	str	r0, [r7, #0]
	elem = bt_mesh_elem_find(elem_addr);
   19eac:	4630      	mov	r0, r6
	mod_id = buf->data;
   19eae:	60fb      	str	r3, [r7, #12]
	elem = bt_mesh_elem_find(elem_addr);
   19eb0:	f7ff fa36 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   19eb4:	4605      	mov	r5, r0
   19eb6:	b990      	cbnz	r0, 19ede <mod_pub_set+0xd2>
		status = STATUS_INVALID_ADDRESS;
   19eb8:	2001      	movs	r0, #1
		vnd = (buf->len == 4U);
   19eba:	88a3      	ldrh	r3, [r4, #4]
   19ebc:	1f1a      	subs	r2, r3, #4
   19ebe:	4253      	negs	r3, r2
   19ec0:	4153      	adcs	r3, r2
   19ec2:	743b      	strb	r3, [r7, #16]
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   19ec4:	68fb      	ldr	r3, [r7, #12]
   19ec6:	9501      	str	r5, [sp, #4]
   19ec8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   19ecc:	7c3b      	ldrb	r3, [r7, #16]
   19ece:	4632      	mov	r2, r6
   19ed0:	9300      	str	r3, [sp, #0]
   19ed2:	4659      	mov	r1, fp
   19ed4:	4643      	mov	r3, r8
   19ed6:	68b8      	ldr	r0, [r7, #8]
   19ed8:	f7ff fe86 	bl	19be8 <send_mod_pub_status>
   19edc:	e7af      	b.n	19e3e <mod_pub_set+0x32>
	mod = get_model(elem, buf, &vnd);
   19ede:	4621      	mov	r1, r4
   19ee0:	f107 0210 	add.w	r2, r7, #16
   19ee4:	f013 f839 	bl	2cf5a <get_model>
	if (!mod) {
   19ee8:	4605      	mov	r5, r0
   19eea:	b160      	cbz	r0, 19f06 <mod_pub_set+0xfa>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   19eec:	683b      	ldr	r3, [r7, #0]
   19eee:	4641      	mov	r1, r8
   19ef0:	9302      	str	r3, [sp, #8]
   19ef2:	687b      	ldr	r3, [r7, #4]
   19ef4:	f3c9 020b 	ubfx	r2, r9, #0, #12
   19ef8:	e9cd a300 	strd	sl, r3, [sp]
   19efc:	f3c9 3300 	ubfx	r3, r9, #12, #1
   19f00:	f013 f877 	bl	2cff2 <_mod_pub_set.constprop.0>
   19f04:	e7de      	b.n	19ec4 <mod_pub_set+0xb8>
		status = STATUS_INVALID_MODEL;
   19f06:	2002      	movs	r0, #2
   19f08:	e7dc      	b.n	19ec4 <mod_pub_set+0xb8>
   19f0a:	bf00      	nop
   19f0c:	000336fb 	.word	0x000336fb
   19f10:	0002fc8c 	.word	0x0002fc8c
   19f14:	00033735 	.word	0x00033735

00019f18 <mod_pub_get>:
{
   19f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   19f1c:	8893      	ldrh	r3, [r2, #4]
{
   19f1e:	4606      	mov	r6, r0
	if ((buf->len != 4U) && (buf->len != 6U)) {
   19f20:	f023 0302 	bic.w	r3, r3, #2
   19f24:	b29b      	uxth	r3, r3
   19f26:	2b04      	cmp	r3, #4
{
   19f28:	460f      	mov	r7, r1
   19f2a:	4691      	mov	r9, r2
   19f2c:	b08b      	sub	sp, #44	; 0x2c
	if ((buf->len != 4U) && (buf->len != 6U)) {
   19f2e:	d00e      	beq.n	19f4e <mod_pub_get+0x36>
		LOG_ERR("The message size for the application opcode is incorrect.");
   19f30:	4b21      	ldr	r3, [pc, #132]	; (19fb8 <mod_pub_get+0xa0>)
   19f32:	4822      	ldr	r0, [pc, #136]	; (19fbc <mod_pub_get+0xa4>)
   19f34:	9309      	str	r3, [sp, #36]	; 0x24
   19f36:	2302      	movs	r3, #2
   19f38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19f3c:	aa08      	add	r2, sp, #32
   19f3e:	9308      	str	r3, [sp, #32]
   19f40:	f013 f913 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   19f44:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   19f48:	b00b      	add	sp, #44	; 0x2c
   19f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   19f4e:	4610      	mov	r0, r2
   19f50:	f013 ff9c 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19f54:	b203      	sxth	r3, r0
   19f56:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   19f58:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   19f5a:	dd29      	ble.n	19fb0 <mod_pub_get+0x98>
	mod_id = buf->data;
   19f5c:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   19f60:	f7ff f9de 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   19f64:	4604      	mov	r4, r0
   19f66:	b948      	cbnz	r0, 19f7c <mod_pub_get+0x64>
		vnd = (buf->len == 4U);
   19f68:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   19f6c:	1f1a      	subs	r2, r3, #4
   19f6e:	4253      	negs	r3, r2
   19f70:	4153      	adcs	r3, r2
		status = STATUS_INVALID_ADDRESS;
   19f72:	2201      	movs	r2, #1
		vnd = (buf->len == 4U);
   19f74:	f88d 3010 	strb.w	r3, [sp, #16]
	uint16_t elem_addr, pub_addr = 0U;
   19f78:	4623      	mov	r3, r4
   19f7a:	e009      	b.n	19f90 <mod_pub_get+0x78>
	mod = get_model(elem, buf, &vnd);
   19f7c:	4649      	mov	r1, r9
   19f7e:	aa04      	add	r2, sp, #16
   19f80:	f012 ffeb 	bl	2cf5a <get_model>
	if (!mod) {
   19f84:	4604      	mov	r4, r0
   19f86:	b178      	cbz	r0, 19fa8 <mod_pub_get+0x90>
	if (!mod->pub) {
   19f88:	6883      	ldr	r3, [r0, #8]
   19f8a:	b17b      	cbz	r3, 19fac <mod_pub_get+0x94>
	status = STATUS_SUCCESS;
   19f8c:	2200      	movs	r2, #0
	pub_addr = mod->pub->addr;
   19f8e:	889b      	ldrh	r3, [r3, #4]
	return send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   19f90:	e9cd 2802 	strd	r2, r8, [sp, #8]
   19f94:	f89d 2010 	ldrb.w	r2, [sp, #16]
   19f98:	4639      	mov	r1, r7
   19f9a:	9200      	str	r2, [sp, #0]
   19f9c:	4630      	mov	r0, r6
   19f9e:	462a      	mov	r2, r5
   19fa0:	9401      	str	r4, [sp, #4]
   19fa2:	f7ff fe21 	bl	19be8 <send_mod_pub_status>
   19fa6:	e7cf      	b.n	19f48 <mod_pub_get+0x30>
		status = STATUS_INVALID_MODEL;
   19fa8:	2202      	movs	r2, #2
   19faa:	e7e5      	b.n	19f78 <mod_pub_get+0x60>
		status = STATUS_NVAL_PUB_PARAM;
   19fac:	2207      	movs	r2, #7
   19fae:	e7ef      	b.n	19f90 <mod_pub_get+0x78>
		return -EINVAL;
   19fb0:	f06f 0015 	mvn.w	r0, #21
   19fb4:	e7c8      	b.n	19f48 <mod_pub_get+0x30>
   19fb6:	bf00      	nop
   19fb8:	000336fb 	.word	0x000336fb
   19fbc:	0002fc8c 	.word	0x0002fc8c

00019fc0 <mod_sub_get>:
{
   19fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19fc4:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   19fc6:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   19fca:	b0ad      	sub	sp, #180	; 0xb4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   19fcc:	ab0e      	add	r3, sp, #56	; 0x38
{
   19fce:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   19fd0:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   19fd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19fd6:	9305      	str	r3, [sp, #20]
{
   19fd8:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   19fda:	f013 ff57 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   19fde:	b203      	sxth	r3, r0
   19fe0:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   19fe2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   19fe4:	dd4d      	ble.n	1a082 <mod_sub_get+0xc2>
	id = net_buf_simple_pull_le16(buf);
   19fe6:	4620      	mov	r0, r4
   19fe8:	f013 ff50 	bl	2de8c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   19fec:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   19fee:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   19ff0:	f248 012a 	movw	r1, #32810	; 0x802a
   19ff4:	4620      	mov	r0, r4
   19ff6:	f012 ff29 	bl	2ce4c <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   19ffa:	4628      	mov	r0, r5
   19ffc:	f7ff f990 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a000:	b9b8      	cbnz	r0, 1a032 <mod_sub_get+0x72>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   1a002:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1a004:	4620      	mov	r0, r4
   1a006:	f013 ff74 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1a00a:	4629      	mov	r1, r5
   1a00c:	4620      	mov	r0, r4
   1a00e:	f013 ff77 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1a012:	4631      	mov	r1, r6
   1a014:	4620      	mov	r0, r4
   1a016:	f013 ff73 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a01a:	2300      	movs	r3, #0
   1a01c:	4622      	mov	r2, r4
   1a01e:	4649      	mov	r1, r9
   1a020:	4640      	mov	r0, r8
   1a022:	9300      	str	r3, [sp, #0]
   1a024:	f7ff f9dc 	bl	193e0 <bt_mesh_model_send>
   1a028:	bb00      	cbnz	r0, 1a06c <mod_sub_get+0xac>
	return 0;
   1a02a:	2000      	movs	r0, #0
}
   1a02c:	b02d      	add	sp, #180	; 0xb4
   1a02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = bt_mesh_model_find(elem, id);
   1a032:	4631      	mov	r1, r6
   1a034:	f012 fedf 	bl	2cdf6 <bt_mesh_model_find>
	if (!mod) {
   1a038:	4607      	mov	r7, r0
   1a03a:	b908      	cbnz	r0, 1a040 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1a03c:	2102      	movs	r1, #2
   1a03e:	e7e1      	b.n	1a004 <mod_sub_get+0x44>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1a040:	2100      	movs	r1, #0
   1a042:	4620      	mov	r0, r4
   1a044:	f013 ff55 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1a048:	4629      	mov	r1, r5
   1a04a:	4620      	mov	r0, r4
   1a04c:	f013 ff58 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   1a050:	4631      	mov	r1, r6
   1a052:	4620      	mov	r0, r4
   1a054:	f013 ff54 	bl	2df00 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1a058:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   1a05a:	793b      	ldrb	r3, [r7, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   1a05c:	4638      	mov	r0, r7
   1a05e:	490a      	ldr	r1, [pc, #40]	; (1a088 <mod_sub_get+0xc8>)
   1a060:	aa03      	add	r2, sp, #12
	visit_ctx.elem_idx = mod->elem_idx;
   1a062:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   1a066:	f012 fed9 	bl	2ce1c <bt_mesh_model_extensions_walk>
   1a06a:	e7d6      	b.n	1a01a <mod_sub_get+0x5a>
		LOG_ERR("Unable to send Model Subscription List");
   1a06c:	4b07      	ldr	r3, [pc, #28]	; (1a08c <mod_sub_get+0xcc>)
   1a06e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a072:	930d      	str	r3, [sp, #52]	; 0x34
   1a074:	2302      	movs	r3, #2
   1a076:	4806      	ldr	r0, [pc, #24]	; (1a090 <mod_sub_get+0xd0>)
   1a078:	aa0c      	add	r2, sp, #48	; 0x30
   1a07a:	930c      	str	r3, [sp, #48]	; 0x30
   1a07c:	f013 f875 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1a080:	e7d3      	b.n	1a02a <mod_sub_get+0x6a>
		return -EINVAL;
   1a082:	f06f 0015 	mvn.w	r0, #21
   1a086:	e7d1      	b.n	1a02c <mod_sub_get+0x6c>
   1a088:	0002cee1 	.word	0x0002cee1
   1a08c:	0003374e 	.word	0x0003374e
   1a090:	0002fc8c 	.word	0x0002fc8c

0001a094 <mod_sub_get_vnd>:
{
   1a094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a098:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1a09a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   1a09e:	b0ac      	sub	sp, #176	; 0xb0
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1a0a0:	ab0e      	add	r3, sp, #56	; 0x38
{
   1a0a2:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   1a0a4:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1a0a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a0aa:	9305      	str	r3, [sp, #20]
{
   1a0ac:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   1a0ae:	f013 feed 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1a0b2:	b203      	sxth	r3, r0
   1a0b4:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1a0b6:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1a0b8:	dd5b      	ble.n	1a172 <mod_sub_get_vnd+0xde>
	company = net_buf_simple_pull_le16(buf);
   1a0ba:	4620      	mov	r0, r4
   1a0bc:	f013 fee6 	bl	2de8c <net_buf_simple_pull_le16>
   1a0c0:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   1a0c2:	4620      	mov	r0, r4
   1a0c4:	f013 fee2 	bl	2de8c <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1a0c8:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   1a0ca:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1a0cc:	f248 012c 	movw	r1, #32812	; 0x802c
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	f012 febb 	bl	2ce4c <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1a0d6:	4628      	mov	r0, r5
   1a0d8:	f7ff f922 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a0dc:	b9d8      	cbnz	r0, 1a116 <mod_sub_get_vnd+0x82>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   1a0de:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	f013 ff06 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1a0e6:	4629      	mov	r1, r5
   1a0e8:	4620      	mov	r0, r4
   1a0ea:	f013 ff09 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   1a0ee:	4639      	mov	r1, r7
   1a0f0:	4620      	mov	r0, r4
   1a0f2:	f013 ff05 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1a0f6:	4631      	mov	r1, r6
   1a0f8:	4620      	mov	r0, r4
   1a0fa:	f013 ff01 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a0fe:	2300      	movs	r3, #0
   1a100:	4622      	mov	r2, r4
   1a102:	4651      	mov	r1, sl
   1a104:	4648      	mov	r0, r9
   1a106:	9300      	str	r3, [sp, #0]
   1a108:	f7ff f96a 	bl	193e0 <bt_mesh_model_send>
   1a10c:	bb30      	cbnz	r0, 1a15c <mod_sub_get_vnd+0xc8>
	return 0;
   1a10e:	2000      	movs	r0, #0
}
   1a110:	b02c      	add	sp, #176	; 0xb0
   1a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1a116:	4632      	mov	r2, r6
   1a118:	4639      	mov	r1, r7
   1a11a:	f012 fe55 	bl	2cdc8 <bt_mesh_model_find_vnd>
	if (!mod) {
   1a11e:	4680      	mov	r8, r0
   1a120:	b908      	cbnz	r0, 1a126 <mod_sub_get_vnd+0x92>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1a122:	2102      	movs	r1, #2
   1a124:	e7dc      	b.n	1a0e0 <mod_sub_get_vnd+0x4c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1a126:	2100      	movs	r1, #0
   1a128:	4620      	mov	r0, r4
   1a12a:	f013 fee2 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1a12e:	4629      	mov	r1, r5
   1a130:	4620      	mov	r0, r4
   1a132:	f013 fee5 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   1a136:	4639      	mov	r1, r7
   1a138:	4620      	mov	r0, r4
   1a13a:	f013 fee1 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   1a13e:	4631      	mov	r1, r6
   1a140:	4620      	mov	r0, r4
   1a142:	f013 fedd 	bl	2df00 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   1a146:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   1a148:	f898 3004 	ldrb.w	r3, [r8, #4]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   1a14c:	4640      	mov	r0, r8
   1a14e:	490a      	ldr	r1, [pc, #40]	; (1a178 <mod_sub_get_vnd+0xe4>)
   1a150:	aa03      	add	r2, sp, #12
	visit_ctx.elem_idx = mod->elem_idx;
   1a152:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_extensions_walk(mod, mod_sub_list_visitor, &visit_ctx);
   1a156:	f012 fe61 	bl	2ce1c <bt_mesh_model_extensions_walk>
   1a15a:	e7d0      	b.n	1a0fe <mod_sub_get_vnd+0x6a>
		LOG_ERR("Unable to send Vendor Model Subscription List");
   1a15c:	4b07      	ldr	r3, [pc, #28]	; (1a17c <mod_sub_get_vnd+0xe8>)
   1a15e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a162:	930d      	str	r3, [sp, #52]	; 0x34
   1a164:	2302      	movs	r3, #2
   1a166:	4806      	ldr	r0, [pc, #24]	; (1a180 <mod_sub_get_vnd+0xec>)
   1a168:	aa0c      	add	r2, sp, #48	; 0x30
   1a16a:	930c      	str	r3, [sp, #48]	; 0x30
   1a16c:	f012 fffd 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1a170:	e7cd      	b.n	1a10e <mod_sub_get_vnd+0x7a>
		return -EINVAL;
   1a172:	f06f 0015 	mvn.w	r0, #21
   1a176:	e7cb      	b.n	1a110 <mod_sub_get_vnd+0x7c>
   1a178:	0002cee1 	.word	0x0002cee1
   1a17c:	00033775 	.word	0x00033775
   1a180:	0002fc8c 	.word	0x0002fc8c

0001a184 <net_key_get>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1a184:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1a188:	b530      	push	{r4, r5, lr}
   1a18a:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1a18c:	ab03      	add	r3, sp, #12
{
   1a18e:	4604      	mov	r4, r0
   1a190:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   1a192:	a805      	add	r0, sp, #20
   1a194:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   1a198:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a19c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   1a19e:	f012 fe55 	bl	2ce4c <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   1a1a2:	2200      	movs	r2, #0
   1a1a4:	2101      	movs	r1, #1
   1a1a6:	a802      	add	r0, sp, #8
   1a1a8:	f7fc f8a8 	bl	162fc <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   1a1ac:	b120      	cbz	r0, 1a1b8 <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   1a1ae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1a1b2:	a805      	add	r0, sp, #20
   1a1b4:	f013 fea4 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a1b8:	2300      	movs	r3, #0
   1a1ba:	4629      	mov	r1, r5
   1a1bc:	4620      	mov	r0, r4
   1a1be:	9300      	str	r3, [sp, #0]
   1a1c0:	aa05      	add	r2, sp, #20
   1a1c2:	f7ff f90d 	bl	193e0 <bt_mesh_model_send>
   1a1c6:	b148      	cbz	r0, 1a1dc <net_key_get+0x58>
		LOG_ERR("Unable to send NetKey List");
   1a1c8:	4b06      	ldr	r3, [pc, #24]	; (1a1e4 <net_key_get+0x60>)
   1a1ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1ce:	930d      	str	r3, [sp, #52]	; 0x34
   1a1d0:	2302      	movs	r3, #2
   1a1d2:	4805      	ldr	r0, [pc, #20]	; (1a1e8 <net_key_get+0x64>)
   1a1d4:	aa0c      	add	r2, sp, #48	; 0x30
   1a1d6:	930c      	str	r3, [sp, #48]	; 0x30
   1a1d8:	f012 ffc7 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1a1dc:	2000      	movs	r0, #0
   1a1de:	b00f      	add	sp, #60	; 0x3c
   1a1e0:	bd30      	pop	{r4, r5, pc}
   1a1e2:	bf00      	nop
   1a1e4:	000337a3 	.word	0x000337a3
   1a1e8:	0002fc8c 	.word	0x0002fc8c

0001a1ec <send_mod_sub_status>:
{
   1a1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a1f0:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1a1f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1a1f6:	461e      	mov	r6, r3
   1a1f8:	b091      	sub	sp, #68	; 0x44
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1a1fa:	ab06      	add	r3, sp, #24
{
   1a1fc:	4604      	mov	r4, r0
   1a1fe:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1a200:	a803      	add	r0, sp, #12
   1a202:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1a206:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a20a:	9303      	str	r3, [sp, #12]
{
   1a20c:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
   1a210:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1a214:	f012 fe1a 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1a218:	4639      	mov	r1, r7
   1a21a:	a803      	add	r0, sp, #12
   1a21c:	f013 fe69 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1a220:	4631      	mov	r1, r6
   1a222:	a803      	add	r0, sp, #12
   1a224:	f013 fe6c 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   1a228:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   1a22c:	a803      	add	r0, sp, #12
   1a22e:	f013 fe67 	bl	2df00 <net_buf_simple_add_le16>
	if (vnd) {
   1a232:	f1b9 0f00 	cmp.w	r9, #0
   1a236:	d01d      	beq.n	1a274 <send_mod_sub_status+0x88>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1a238:	2104      	movs	r1, #4
   1a23a:	a803      	add	r0, sp, #12
   1a23c:	f006 f888 	bl	20350 <net_buf_simple_add>
   1a240:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a242:	4641      	mov	r1, r8
   1a244:	f010 f969 	bl	2a51a <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a248:	2300      	movs	r3, #0
   1a24a:	4629      	mov	r1, r5
   1a24c:	4620      	mov	r0, r4
   1a24e:	9300      	str	r3, [sp, #0]
   1a250:	aa03      	add	r2, sp, #12
   1a252:	f7ff f8c5 	bl	193e0 <bt_mesh_model_send>
   1a256:	b148      	cbz	r0, 1a26c <send_mod_sub_status+0x80>
		LOG_ERR("Unable to send Model Subscription Status");
   1a258:	4b09      	ldr	r3, [pc, #36]	; (1a280 <send_mod_sub_status+0x94>)
   1a25a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a25e:	930f      	str	r3, [sp, #60]	; 0x3c
   1a260:	2302      	movs	r3, #2
   1a262:	4808      	ldr	r0, [pc, #32]	; (1a284 <send_mod_sub_status+0x98>)
   1a264:	aa0e      	add	r2, sp, #56	; 0x38
   1a266:	930e      	str	r3, [sp, #56]	; 0x38
   1a268:	f012 ff7f 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1a26c:	2000      	movs	r0, #0
   1a26e:	b011      	add	sp, #68	; 0x44
   1a270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1a274:	2102      	movs	r1, #2
   1a276:	a803      	add	r0, sp, #12
   1a278:	f006 f86a 	bl	20350 <net_buf_simple_add>
   1a27c:	2202      	movs	r2, #2
   1a27e:	e7e0      	b.n	1a242 <send_mod_sub_status+0x56>
   1a280:	000337be 	.word	0x000337be
   1a284:	0002fc8c 	.word	0x0002fc8c

0001a288 <mod_sub_del_all>:
{
   1a288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1a28c:	8893      	ldrh	r3, [r2, #4]
{
   1a28e:	4606      	mov	r6, r0
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1a290:	f023 0302 	bic.w	r3, r3, #2
   1a294:	b29b      	uxth	r3, r3
   1a296:	2b04      	cmp	r3, #4
{
   1a298:	460f      	mov	r7, r1
   1a29a:	4614      	mov	r4, r2
   1a29c:	b08a      	sub	sp, #40	; 0x28
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1a29e:	d00e      	beq.n	1a2be <mod_sub_del_all+0x36>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a2a0:	4b20      	ldr	r3, [pc, #128]	; (1a324 <mod_sub_del_all+0x9c>)
   1a2a2:	4821      	ldr	r0, [pc, #132]	; (1a328 <mod_sub_del_all+0xa0>)
   1a2a4:	9309      	str	r3, [sp, #36]	; 0x24
   1a2a6:	2302      	movs	r3, #2
   1a2a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a2ac:	aa08      	add	r2, sp, #32
   1a2ae:	9308      	str	r3, [sp, #32]
   1a2b0:	f012 ff5b 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a2b4:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a2b8:	b00a      	add	sp, #40	; 0x28
   1a2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a2be:	4610      	mov	r0, r2
   1a2c0:	f013 fde4 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a2c4:	b203      	sxth	r3, r0
   1a2c6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a2c8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a2ca:	dd28      	ble.n	1a31e <mod_sub_del_all+0x96>
	mod_id = buf->data;
   1a2cc:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a2d0:	f7ff f826 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a2d4:	b990      	cbnz	r0, 1a2fc <mod_sub_del_all+0x74>
		vnd = (buf->len == 4U);
   1a2d6:	88a3      	ldrh	r3, [r4, #4]
   1a2d8:	1f1a      	subs	r2, r3, #4
   1a2da:	4253      	negs	r3, r2
   1a2dc:	4153      	adcs	r3, r2
		status = STATUS_INVALID_ADDRESS;
   1a2de:	2201      	movs	r2, #1
		vnd = (buf->len == 4U);
   1a2e0:	f88d 3010 	strb.w	r3, [sp, #16]
	return send_mod_sub_status(model, ctx, status, elem_addr,
   1a2e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a2e8:	4639      	mov	r1, r7
   1a2ea:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1a2ee:	2300      	movs	r3, #0
   1a2f0:	4630      	mov	r0, r6
   1a2f2:	9300      	str	r3, [sp, #0]
   1a2f4:	462b      	mov	r3, r5
   1a2f6:	f7ff ff79 	bl	1a1ec <send_mod_sub_status>
   1a2fa:	e7dd      	b.n	1a2b8 <mod_sub_del_all+0x30>
	mod = get_model(elem, buf, &vnd);
   1a2fc:	4621      	mov	r1, r4
   1a2fe:	aa04      	add	r2, sp, #16
   1a300:	f012 fe2b 	bl	2cf5a <get_model>
	if (!mod) {
   1a304:	4604      	mov	r4, r0
   1a306:	b140      	cbz	r0, 1a31a <mod_sub_del_all+0x92>
	bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   1a308:	2200      	movs	r2, #0
   1a30a:	4908      	ldr	r1, [pc, #32]	; (1a32c <mod_sub_del_all+0xa4>)
   1a30c:	f012 fd86 	bl	2ce1c <bt_mesh_model_extensions_walk>
		bt_mesh_model_sub_store(mod);
   1a310:	4620      	mov	r0, r4
   1a312:	f012 fd8d 	bl	2ce30 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   1a316:	2200      	movs	r2, #0
   1a318:	e7e4      	b.n	1a2e4 <mod_sub_del_all+0x5c>
		status = STATUS_INVALID_MODEL;
   1a31a:	2202      	movs	r2, #2
   1a31c:	e7e2      	b.n	1a2e4 <mod_sub_del_all+0x5c>
		return -EINVAL;
   1a31e:	f06f 0015 	mvn.w	r0, #21
   1a322:	e7c9      	b.n	1a2b8 <mod_sub_del_all+0x30>
   1a324:	000336fb 	.word	0x000336fb
   1a328:	0002fc8c 	.word	0x0002fc8c
   1a32c:	0002d3e5 	.word	0x0002d3e5

0001a330 <mod_sub_overwrite>:
{
   1a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a334:	8893      	ldrh	r3, [r2, #4]
{
   1a336:	4607      	mov	r7, r0
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a338:	2b06      	cmp	r3, #6
{
   1a33a:	4688      	mov	r8, r1
   1a33c:	4614      	mov	r4, r2
   1a33e:	b08b      	sub	sp, #44	; 0x2c
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a340:	d010      	beq.n	1a364 <mod_sub_overwrite+0x34>
   1a342:	2b08      	cmp	r3, #8
   1a344:	d00e      	beq.n	1a364 <mod_sub_overwrite+0x34>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a346:	4b29      	ldr	r3, [pc, #164]	; (1a3ec <mod_sub_overwrite+0xbc>)
   1a348:	4829      	ldr	r0, [pc, #164]	; (1a3f0 <mod_sub_overwrite+0xc0>)
   1a34a:	9309      	str	r3, [sp, #36]	; 0x24
   1a34c:	2302      	movs	r3, #2
   1a34e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a352:	aa08      	add	r2, sp, #32
   1a354:	9308      	str	r3, [sp, #32]
   1a356:	f012 ff08 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a35a:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a35e:	b00b      	add	sp, #44	; 0x2c
   1a360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a364:	4620      	mov	r0, r4
   1a366:	f013 fd91 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a36a:	b203      	sxth	r3, r0
   1a36c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a36e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a370:	dd39      	ble.n	1a3e6 <mod_sub_overwrite+0xb6>
	sub_addr = net_buf_simple_pull_le16(buf);
   1a372:	4620      	mov	r0, r4
   1a374:	f013 fd8a 	bl	2de8c <net_buf_simple_pull_le16>
   1a378:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a37a:	4628      	mov	r0, r5
	mod_id = buf->data;
   1a37c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a380:	f7fe ffce 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a384:	b988      	cbnz	r0, 1a3aa <mod_sub_overwrite+0x7a>
		vnd = (buf->len == 4U);
   1a386:	88a3      	ldrh	r3, [r4, #4]
   1a388:	1f1a      	subs	r2, r3, #4
   1a38a:	4253      	negs	r3, r2
   1a38c:	4153      	adcs	r3, r2
   1a38e:	f88d 3010 	strb.w	r3, [sp, #16]
		status = STATUS_INVALID_ADDRESS;
   1a392:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a394:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a398:	4641      	mov	r1, r8
   1a39a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1a39e:	4638      	mov	r0, r7
   1a3a0:	462b      	mov	r3, r5
   1a3a2:	9600      	str	r6, [sp, #0]
   1a3a4:	f7ff ff22 	bl	1a1ec <send_mod_sub_status>
   1a3a8:	e7d9      	b.n	1a35e <mod_sub_overwrite+0x2e>
	mod = get_model(elem, buf, &vnd);
   1a3aa:	4621      	mov	r1, r4
   1a3ac:	aa04      	add	r2, sp, #16
   1a3ae:	f012 fdd4 	bl	2cf5a <get_model>
	if (!mod) {
   1a3b2:	4604      	mov	r4, r0
   1a3b4:	b198      	cbz	r0, 1a3de <mod_sub_overwrite+0xae>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   1a3b6:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   1a3ba:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   1a3be:	b29b      	uxth	r3, r3
   1a3c0:	4293      	cmp	r3, r2
   1a3c2:	d8e6      	bhi.n	1a392 <mod_sub_overwrite+0x62>
	if (mod->groups_cnt > 0) {
   1a3c4:	8b03      	ldrh	r3, [r0, #24]
   1a3c6:	b163      	cbz	r3, 1a3e2 <mod_sub_overwrite+0xb2>
		bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   1a3c8:	2200      	movs	r2, #0
   1a3ca:	490a      	ldr	r1, [pc, #40]	; (1a3f4 <mod_sub_overwrite+0xc4>)
   1a3cc:	f012 fd26 	bl	2ce1c <bt_mesh_model_extensions_walk>
		mod->groups[0] = sub_addr;
   1a3d0:	6963      	ldr	r3, [r4, #20]
			bt_mesh_model_sub_store(mod);
   1a3d2:	4620      	mov	r0, r4
		mod->groups[0] = sub_addr;
   1a3d4:	801e      	strh	r6, [r3, #0]
			bt_mesh_model_sub_store(mod);
   1a3d6:	f012 fd2b 	bl	2ce30 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   1a3da:	2200      	movs	r2, #0
   1a3dc:	e7da      	b.n	1a394 <mod_sub_overwrite+0x64>
		status = STATUS_INVALID_MODEL;
   1a3de:	2202      	movs	r2, #2
   1a3e0:	e7d8      	b.n	1a394 <mod_sub_overwrite+0x64>
		status = STATUS_INSUFF_RESOURCES;
   1a3e2:	2205      	movs	r2, #5
   1a3e4:	e7d6      	b.n	1a394 <mod_sub_overwrite+0x64>
		return -EINVAL;
   1a3e6:	f06f 0015 	mvn.w	r0, #21
   1a3ea:	e7b8      	b.n	1a35e <mod_sub_overwrite+0x2e>
   1a3ec:	000336fb 	.word	0x000336fb
   1a3f0:	0002fc8c 	.word	0x0002fc8c
   1a3f4:	0002d3e5 	.word	0x0002d3e5

0001a3f8 <mod_sub_va_overwrite>:
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a3f8:	2300      	movs	r3, #0
{
   1a3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3fe:	b08c      	sub	sp, #48	; 0x30
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a400:	f8ad 3016 	strh.w	r3, [sp, #22]
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a404:	8893      	ldrh	r3, [r2, #4]
{
   1a406:	4607      	mov	r7, r0
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a408:	f023 0302 	bic.w	r3, r3, #2
   1a40c:	b29b      	uxth	r3, r3
   1a40e:	2b14      	cmp	r3, #20
{
   1a410:	4688      	mov	r8, r1
   1a412:	4614      	mov	r4, r2
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a414:	d00e      	beq.n	1a434 <mod_sub_va_overwrite+0x3c>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a416:	4b2d      	ldr	r3, [pc, #180]	; (1a4cc <mod_sub_va_overwrite+0xd4>)
   1a418:	482d      	ldr	r0, [pc, #180]	; (1a4d0 <mod_sub_va_overwrite+0xd8>)
   1a41a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a41c:	2302      	movs	r3, #2
   1a41e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a422:	aa0a      	add	r2, sp, #40	; 0x28
   1a424:	930a      	str	r3, [sp, #40]	; 0x28
   1a426:	f012 fea0 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a42a:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a42e:	b00c      	add	sp, #48	; 0x30
   1a430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a434:	4610      	mov	r0, r2
   1a436:	f013 fd29 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a43a:	b203      	sxth	r3, r0
   1a43c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a43e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a440:	dd40      	ble.n	1a4c4 <mod_sub_va_overwrite+0xcc>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1a442:	2110      	movs	r1, #16
   1a444:	4620      	mov	r0, r4
   1a446:	f005 ff69 	bl	2031c <net_buf_simple_pull_mem>
   1a44a:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a44c:	4630      	mov	r0, r6
	mod_id = buf->data;
   1a44e:	f8d4 a000 	ldr.w	sl, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a452:	f7fe ff65 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a456:	b9a0      	cbnz	r0, 1a482 <mod_sub_va_overwrite+0x8a>
		vnd = (buf->len == 4U);
   1a458:	88a3      	ldrh	r3, [r4, #4]
		status = STATUS_INVALID_ADDRESS;
   1a45a:	2401      	movs	r4, #1
		vnd = (buf->len == 4U);
   1a45c:	1f1a      	subs	r2, r3, #4
   1a45e:	4253      	negs	r3, r2
   1a460:	4153      	adcs	r3, r2
   1a462:	f88d 3018 	strb.w	r3, [sp, #24]
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a466:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1a46a:	4622      	mov	r2, r4
   1a46c:	e9cd a301 	strd	sl, r3, [sp, #4]
   1a470:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a474:	4641      	mov	r1, r8
   1a476:	9300      	str	r3, [sp, #0]
   1a478:	4638      	mov	r0, r7
   1a47a:	4633      	mov	r3, r6
   1a47c:	f7ff feb6 	bl	1a1ec <send_mod_sub_status>
   1a480:	e7d5      	b.n	1a42e <mod_sub_va_overwrite+0x36>
	mod = get_model(elem, buf, &vnd);
   1a482:	4621      	mov	r1, r4
   1a484:	aa06      	add	r2, sp, #24
   1a486:	f012 fd68 	bl	2cf5a <get_model>
	if (!mod) {
   1a48a:	4605      	mov	r5, r0
   1a48c:	b1b0      	cbz	r0, 1a4bc <mod_sub_va_overwrite+0xc4>
	if (mod->groups_cnt > 0) {
   1a48e:	8b03      	ldrh	r3, [r0, #24]
   1a490:	b1b3      	cbz	r3, 1a4c0 <mod_sub_va_overwrite+0xc8>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   1a492:	4648      	mov	r0, r9
   1a494:	f10d 0116 	add.w	r1, sp, #22
   1a498:	f7fd f948 	bl	1772c <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   1a49c:	4604      	mov	r4, r0
   1a49e:	2800      	cmp	r0, #0
   1a4a0:	d1e1      	bne.n	1a466 <mod_sub_va_overwrite+0x6e>
			bt_mesh_model_extensions_walk(mod, mod_sub_clear_visitor, NULL);
   1a4a2:	4602      	mov	r2, r0
   1a4a4:	490b      	ldr	r1, [pc, #44]	; (1a4d4 <mod_sub_va_overwrite+0xdc>)
   1a4a6:	4628      	mov	r0, r5
   1a4a8:	f012 fcb8 	bl	2ce1c <bt_mesh_model_extensions_walk>
			mod->groups[0] = sub_addr;
   1a4ac:	696b      	ldr	r3, [r5, #20]
   1a4ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
				bt_mesh_model_sub_store(mod);
   1a4b2:	4628      	mov	r0, r5
			mod->groups[0] = sub_addr;
   1a4b4:	801a      	strh	r2, [r3, #0]
				bt_mesh_model_sub_store(mod);
   1a4b6:	f012 fcbb 	bl	2ce30 <bt_mesh_model_sub_store>
   1a4ba:	e7d4      	b.n	1a466 <mod_sub_va_overwrite+0x6e>
		status = STATUS_INVALID_MODEL;
   1a4bc:	2402      	movs	r4, #2
   1a4be:	e7d2      	b.n	1a466 <mod_sub_va_overwrite+0x6e>
		status = STATUS_INSUFF_RESOURCES;
   1a4c0:	2405      	movs	r4, #5
   1a4c2:	e7d0      	b.n	1a466 <mod_sub_va_overwrite+0x6e>
		return -EINVAL;
   1a4c4:	f06f 0015 	mvn.w	r0, #21
   1a4c8:	e7b1      	b.n	1a42e <mod_sub_va_overwrite+0x36>
   1a4ca:	bf00      	nop
   1a4cc:	000336fb 	.word	0x000336fb
   1a4d0:	0002fc8c 	.word	0x0002fc8c
   1a4d4:	0002d3e5 	.word	0x0002d3e5

0001a4d8 <mod_sub_va_del>:
{
   1a4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a4dc:	8893      	ldrh	r3, [r2, #4]
{
   1a4de:	4606      	mov	r6, r0
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a4e0:	f023 0302 	bic.w	r3, r3, #2
   1a4e4:	b29b      	uxth	r3, r3
   1a4e6:	2b14      	cmp	r3, #20
{
   1a4e8:	460f      	mov	r7, r1
   1a4ea:	4614      	mov	r4, r2
   1a4ec:	b08d      	sub	sp, #52	; 0x34
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a4ee:	d00e      	beq.n	1a50e <mod_sub_va_del+0x36>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a4f0:	4b2e      	ldr	r3, [pc, #184]	; (1a5ac <mod_sub_va_del+0xd4>)
   1a4f2:	482f      	ldr	r0, [pc, #188]	; (1a5b0 <mod_sub_va_del+0xd8>)
   1a4f4:	930b      	str	r3, [sp, #44]	; 0x2c
   1a4f6:	2302      	movs	r3, #2
   1a4f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a4fc:	aa0a      	add	r2, sp, #40	; 0x28
   1a4fe:	930a      	str	r3, [sp, #40]	; 0x28
   1a500:	f012 fe33 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a504:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a508:	b00d      	add	sp, #52	; 0x34
   1a50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a50e:	4610      	mov	r0, r2
   1a510:	f013 fcbc 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a514:	b203      	sxth	r3, r0
   1a516:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a518:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a51a:	dd43      	ble.n	1a5a4 <mod_sub_va_del+0xcc>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1a51c:	2110      	movs	r1, #16
   1a51e:	4620      	mov	r0, r4
   1a520:	f005 fefc 	bl	2031c <net_buf_simple_pull_mem>
   1a524:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a526:	4628      	mov	r0, r5
	mod_id = buf->data;
   1a528:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a52c:	f7fe fef8 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a530:	b9b0      	cbnz	r0, 1a560 <mod_sub_va_del+0x88>
		vnd = (buf->len == 4U);
   1a532:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   1a534:	9006      	str	r0, [sp, #24]
		vnd = (buf->len == 4U);
   1a536:	1f11      	subs	r1, r2, #4
   1a538:	424a      	negs	r2, r1
   1a53a:	414a      	adcs	r2, r1
   1a53c:	f88d 2015 	strb.w	r2, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   1a540:	2201      	movs	r2, #1
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a542:	f8ad 0016 	strh.w	r0, [sp, #22]
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a546:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a54a:	4639      	mov	r1, r7
   1a54c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1a550:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a554:	4630      	mov	r0, r6
   1a556:	9300      	str	r3, [sp, #0]
   1a558:	462b      	mov	r3, r5
   1a55a:	f7ff fe47 	bl	1a1ec <send_mod_sub_status>
   1a55e:	e7d3      	b.n	1a508 <mod_sub_va_del+0x30>
	mod = get_model(elem, buf, &vnd);
   1a560:	4621      	mov	r1, r4
   1a562:	f10d 0215 	add.w	r2, sp, #21
   1a566:	f012 fcf8 	bl	2cf5a <get_model>
   1a56a:	9006      	str	r0, [sp, #24]
	if (!mod) {
   1a56c:	b918      	cbnz	r0, 1a576 <mod_sub_va_del+0x9e>
		status = STATUS_INVALID_MODEL;
   1a56e:	2202      	movs	r2, #2
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a570:	f8ad 0016 	strh.w	r0, [sp, #22]
		goto send_status;
   1a574:	e7e7      	b.n	1a546 <mod_sub_va_del+0x6e>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1a576:	f10d 0116 	add.w	r1, sp, #22
   1a57a:	4648      	mov	r0, r9
   1a57c:	f7fd f90a 	bl	17794 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1a580:	f8bd 1016 	ldrh.w	r1, [sp, #22]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1a584:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1a586:	2900      	cmp	r1, #0
   1a588:	d0dd      	beq.n	1a546 <mod_sub_va_del+0x6e>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1a58a:	a806      	add	r0, sp, #24
   1a58c:	f7fe ffa6 	bl	194dc <bt_mesh_model_find_group>
	if (match) {
   1a590:	b130      	cbz	r0, 1a5a0 <mod_sub_va_del+0xc8>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1a592:	2400      	movs	r4, #0
   1a594:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   1a596:	9806      	ldr	r0, [sp, #24]
   1a598:	f012 fc4a 	bl	2ce30 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   1a59c:	4622      	mov	r2, r4
   1a59e:	e7d2      	b.n	1a546 <mod_sub_va_del+0x6e>
		status = STATUS_CANNOT_REMOVE;
   1a5a0:	220c      	movs	r2, #12
   1a5a2:	e7d0      	b.n	1a546 <mod_sub_va_del+0x6e>
		return -EINVAL;
   1a5a4:	f06f 0015 	mvn.w	r0, #21
   1a5a8:	e7ae      	b.n	1a508 <mod_sub_va_del+0x30>
   1a5aa:	bf00      	nop
   1a5ac:	000336fb 	.word	0x000336fb
   1a5b0:	0002fc8c 	.word	0x0002fc8c

0001a5b4 <mod_sub_del>:
{
   1a5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a5b8:	8893      	ldrh	r3, [r2, #4]
{
   1a5ba:	4607      	mov	r7, r0
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a5bc:	2b06      	cmp	r3, #6
{
   1a5be:	4688      	mov	r8, r1
   1a5c0:	4614      	mov	r4, r2
   1a5c2:	b08d      	sub	sp, #52	; 0x34
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a5c4:	d010      	beq.n	1a5e8 <mod_sub_del+0x34>
   1a5c6:	2b08      	cmp	r3, #8
   1a5c8:	d00e      	beq.n	1a5e8 <mod_sub_del+0x34>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a5ca:	4b29      	ldr	r3, [pc, #164]	; (1a670 <mod_sub_del+0xbc>)
   1a5cc:	4829      	ldr	r0, [pc, #164]	; (1a674 <mod_sub_del+0xc0>)
   1a5ce:	930b      	str	r3, [sp, #44]	; 0x2c
   1a5d0:	2302      	movs	r3, #2
   1a5d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a5d6:	aa0a      	add	r2, sp, #40	; 0x28
   1a5d8:	930a      	str	r3, [sp, #40]	; 0x28
   1a5da:	f012 fdc6 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a5de:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a5e2:	b00d      	add	sp, #52	; 0x34
   1a5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	f013 fc4f 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a5ee:	b203      	sxth	r3, r0
   1a5f0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a5f2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a5f4:	dd38      	ble.n	1a668 <mod_sub_del+0xb4>
	sub_addr = net_buf_simple_pull_le16(buf);
   1a5f6:	4620      	mov	r0, r4
   1a5f8:	f013 fc48 	bl	2de8c <net_buf_simple_pull_le16>
   1a5fc:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a5fe:	4628      	mov	r0, r5
	mod_id = buf->data;
   1a600:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a604:	f7fe fe8c 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a608:	b990      	cbnz	r0, 1a630 <mod_sub_del+0x7c>
		vnd = (buf->len == 4U);
   1a60a:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1a60c:	9006      	str	r0, [sp, #24]
		vnd = (buf->len == 4U);
   1a60e:	1f1a      	subs	r2, r3, #4
   1a610:	4253      	negs	r3, r2
   1a612:	4153      	adcs	r3, r2
   1a614:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1a618:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a61a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a61e:	4641      	mov	r1, r8
   1a620:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1a624:	4638      	mov	r0, r7
   1a626:	462b      	mov	r3, r5
   1a628:	9600      	str	r6, [sp, #0]
   1a62a:	f7ff fddf 	bl	1a1ec <send_mod_sub_status>
   1a62e:	e7d8      	b.n	1a5e2 <mod_sub_del+0x2e>
	mod = get_model(elem, buf, &vnd);
   1a630:	4621      	mov	r1, r4
   1a632:	f10d 0217 	add.w	r2, sp, #23
   1a636:	f012 fc90 	bl	2cf5a <get_model>
   1a63a:	9006      	str	r0, [sp, #24]
	if (!mod) {
   1a63c:	b190      	cbz	r0, 1a664 <mod_sub_del+0xb0>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   1a63e:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   1a642:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   1a646:	b29b      	uxth	r3, r3
   1a648:	4293      	cmp	r3, r2
   1a64a:	d8e5      	bhi.n	1a618 <mod_sub_del+0x64>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1a64c:	4631      	mov	r1, r6
   1a64e:	a806      	add	r0, sp, #24
   1a650:	f7fe ff44 	bl	194dc <bt_mesh_model_find_group>
	if (match) {
   1a654:	b120      	cbz	r0, 1a660 <mod_sub_del+0xac>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1a656:	2300      	movs	r3, #0
   1a658:	8003      	strh	r3, [r0, #0]
			bt_mesh_model_sub_store(mod);
   1a65a:	9806      	ldr	r0, [sp, #24]
   1a65c:	f012 fbe8 	bl	2ce30 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   1a660:	2200      	movs	r2, #0
   1a662:	e7da      	b.n	1a61a <mod_sub_del+0x66>
		status = STATUS_INVALID_MODEL;
   1a664:	2202      	movs	r2, #2
   1a666:	e7d8      	b.n	1a61a <mod_sub_del+0x66>
		return -EINVAL;
   1a668:	f06f 0015 	mvn.w	r0, #21
   1a66c:	e7b9      	b.n	1a5e2 <mod_sub_del+0x2e>
   1a66e:	bf00      	nop
   1a670:	000336fb 	.word	0x000336fb
   1a674:	0002fc8c 	.word	0x0002fc8c

0001a678 <mod_sub_va_add>:
{
   1a678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a67c:	8893      	ldrh	r3, [r2, #4]
{
   1a67e:	4607      	mov	r7, r0
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a680:	f023 0302 	bic.w	r3, r3, #2
   1a684:	b29b      	uxth	r3, r3
   1a686:	2b14      	cmp	r3, #20
{
   1a688:	4688      	mov	r8, r1
   1a68a:	4614      	mov	r4, r2
   1a68c:	b08d      	sub	sp, #52	; 0x34
	if ((buf->len != 20U) && (buf->len != 22U)) {
   1a68e:	d00e      	beq.n	1a6ae <mod_sub_va_add+0x36>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a690:	4b35      	ldr	r3, [pc, #212]	; (1a768 <mod_sub_va_add+0xf0>)
   1a692:	4836      	ldr	r0, [pc, #216]	; (1a76c <mod_sub_va_add+0xf4>)
   1a694:	930b      	str	r3, [sp, #44]	; 0x2c
   1a696:	2302      	movs	r3, #2
   1a698:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a69c:	aa0a      	add	r2, sp, #40	; 0x28
   1a69e:	930a      	str	r3, [sp, #40]	; 0x28
   1a6a0:	f012 fd63 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a6a4:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a6a8:	b00d      	add	sp, #52	; 0x34
   1a6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a6ae:	4610      	mov	r0, r2
   1a6b0:	f013 fbec 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a6b4:	b203      	sxth	r3, r0
   1a6b6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a6b8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a6ba:	dd51      	ble.n	1a760 <mod_sub_va_add+0xe8>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1a6bc:	2110      	movs	r1, #16
   1a6be:	4620      	mov	r0, r4
   1a6c0:	f005 fe2c 	bl	2031c <net_buf_simple_pull_mem>
   1a6c4:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a6c6:	4628      	mov	r0, r5
	mod_id = buf->data;
   1a6c8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a6cc:	f7fe fe28 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a6d0:	b9b8      	cbnz	r0, 1a702 <mod_sub_va_add+0x8a>
		vnd = (buf->len == 4U);
   1a6d2:	88a2      	ldrh	r2, [r4, #4]
		status = STATUS_INVALID_ADDRESS;
   1a6d4:	2401      	movs	r4, #1
		vnd = (buf->len == 4U);
   1a6d6:	1f11      	subs	r1, r2, #4
   1a6d8:	424a      	negs	r2, r1
   1a6da:	414a      	adcs	r2, r1
		mod = NULL;
   1a6dc:	9006      	str	r0, [sp, #24]
		vnd = (buf->len == 4U);
   1a6de:	f88d 2015 	strb.w	r2, [sp, #21]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a6e2:	f8ad 0016 	strh.w	r0, [sp, #22]
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a6e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a6ea:	4622      	mov	r2, r4
   1a6ec:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1a6f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a6f4:	4641      	mov	r1, r8
   1a6f6:	9300      	str	r3, [sp, #0]
   1a6f8:	4638      	mov	r0, r7
   1a6fa:	462b      	mov	r3, r5
   1a6fc:	f7ff fd76 	bl	1a1ec <send_mod_sub_status>
   1a700:	e7d2      	b.n	1a6a8 <mod_sub_va_add+0x30>
	mod = get_model(elem, buf, &vnd);
   1a702:	4621      	mov	r1, r4
   1a704:	f10d 0215 	add.w	r2, sp, #21
   1a708:	f012 fc27 	bl	2cf5a <get_model>
   1a70c:	9006      	str	r0, [sp, #24]
	if (!mod) {
   1a70e:	b918      	cbnz	r0, 1a718 <mod_sub_va_add+0xa0>
		status = STATUS_INVALID_MODEL;
   1a710:	2402      	movs	r4, #2
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1a712:	f8ad 0016 	strh.w	r0, [sp, #22]
		goto send_status;
   1a716:	e7e6      	b.n	1a6e6 <mod_sub_va_add+0x6e>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   1a718:	4630      	mov	r0, r6
   1a71a:	f10d 0116 	add.w	r1, sp, #22
   1a71e:	f7fd f805 	bl	1772c <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   1a722:	4604      	mov	r4, r0
   1a724:	2800      	cmp	r0, #0
   1a726:	d1de      	bne.n	1a6e6 <mod_sub_va_add+0x6e>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1a728:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1a72c:	a806      	add	r0, sp, #24
   1a72e:	f7fe fed5 	bl	194dc <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   1a732:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1a734:	b118      	cbz	r0, 1a73e <mod_sub_va_add+0xc6>
		bt_mesh_va_del(label_uuid, NULL);
   1a736:	4630      	mov	r0, r6
   1a738:	f7fd f82c 	bl	17794 <bt_mesh_va_del>
		goto send_status;
   1a73c:	e7d3      	b.n	1a6e6 <mod_sub_va_add+0x6e>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1a73e:	a806      	add	r0, sp, #24
   1a740:	f7fe fecc 	bl	194dc <bt_mesh_model_find_group>
	if (!entry) {
   1a744:	b928      	cbnz	r0, 1a752 <mod_sub_va_add+0xda>
		bt_mesh_va_del(label_uuid, NULL);
   1a746:	4621      	mov	r1, r4
   1a748:	4630      	mov	r0, r6
   1a74a:	f7fd f823 	bl	17794 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   1a74e:	2405      	movs	r4, #5
		goto send_status;
   1a750:	e7c9      	b.n	1a6e6 <mod_sub_va_add+0x6e>
	*entry = sub_addr;
   1a752:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a756:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   1a758:	9806      	ldr	r0, [sp, #24]
   1a75a:	f012 fb69 	bl	2ce30 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   1a75e:	e7c2      	b.n	1a6e6 <mod_sub_va_add+0x6e>
		return -EINVAL;
   1a760:	f06f 0015 	mvn.w	r0, #21
   1a764:	e7a0      	b.n	1a6a8 <mod_sub_va_add+0x30>
   1a766:	bf00      	nop
   1a768:	000336fb 	.word	0x000336fb
   1a76c:	0002fc8c 	.word	0x0002fc8c

0001a770 <mod_sub_add>:
{
   1a770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a774:	8893      	ldrh	r3, [r2, #4]
{
   1a776:	4607      	mov	r7, r0
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a778:	2b06      	cmp	r3, #6
{
   1a77a:	4688      	mov	r8, r1
   1a77c:	4614      	mov	r4, r2
   1a77e:	b08d      	sub	sp, #52	; 0x34
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a780:	d010      	beq.n	1a7a4 <mod_sub_add+0x34>
   1a782:	2b08      	cmp	r3, #8
   1a784:	d00e      	beq.n	1a7a4 <mod_sub_add+0x34>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a786:	4b2c      	ldr	r3, [pc, #176]	; (1a838 <mod_sub_add+0xc8>)
   1a788:	482c      	ldr	r0, [pc, #176]	; (1a83c <mod_sub_add+0xcc>)
   1a78a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a78c:	2302      	movs	r3, #2
   1a78e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a792:	aa0a      	add	r2, sp, #40	; 0x28
   1a794:	930a      	str	r3, [sp, #40]	; 0x28
   1a796:	f012 fce8 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a79a:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a79e:	b00d      	add	sp, #52	; 0x34
   1a7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a7a4:	4620      	mov	r0, r4
   1a7a6:	f013 fb71 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a7aa:	b203      	sxth	r3, r0
   1a7ac:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a7ae:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a7b0:	dd3e      	ble.n	1a830 <mod_sub_add+0xc0>
	sub_addr = net_buf_simple_pull_le16(buf);
   1a7b2:	4620      	mov	r0, r4
   1a7b4:	f013 fb6a 	bl	2de8c <net_buf_simple_pull_le16>
   1a7b8:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a7ba:	4630      	mov	r0, r6
	mod_id = buf->data;
   1a7bc:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a7c0:	f7fe fdae 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a7c4:	b990      	cbnz	r0, 1a7ec <mod_sub_add+0x7c>
		vnd = (buf->len == 4U);
   1a7c6:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1a7c8:	9006      	str	r0, [sp, #24]
		vnd = (buf->len == 4U);
   1a7ca:	1f1a      	subs	r2, r3, #4
   1a7cc:	4253      	negs	r3, r2
   1a7ce:	4153      	adcs	r3, r2
   1a7d0:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1a7d4:	2201      	movs	r2, #1
	return send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1a7d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a7da:	4641      	mov	r1, r8
   1a7dc:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1a7e0:	4638      	mov	r0, r7
   1a7e2:	4633      	mov	r3, r6
   1a7e4:	9500      	str	r5, [sp, #0]
   1a7e6:	f7ff fd01 	bl	1a1ec <send_mod_sub_status>
   1a7ea:	e7d8      	b.n	1a79e <mod_sub_add+0x2e>
	mod = get_model(elem, buf, &vnd);
   1a7ec:	4621      	mov	r1, r4
   1a7ee:	f10d 0217 	add.w	r2, sp, #23
   1a7f2:	f012 fbb2 	bl	2cf5a <get_model>
   1a7f6:	9006      	str	r0, [sp, #24]
	if (!mod) {
   1a7f8:	b1b0      	cbz	r0, 1a828 <mod_sub_add+0xb8>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr) && !BT_MESH_ADDR_IS_FIXED_GROUP(sub_addr)) {
   1a7fa:	f643 72fe 	movw	r2, #16382	; 0x3ffe
   1a7fe:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   1a802:	b29b      	uxth	r3, r3
   1a804:	4293      	cmp	r3, r2
   1a806:	d8e5      	bhi.n	1a7d4 <mod_sub_add+0x64>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1a808:	4629      	mov	r1, r5
   1a80a:	a806      	add	r0, sp, #24
   1a80c:	f7fe fe66 	bl	194dc <bt_mesh_model_find_group>
   1a810:	4601      	mov	r1, r0
   1a812:	b938      	cbnz	r0, 1a824 <mod_sub_add+0xb4>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1a814:	a806      	add	r0, sp, #24
   1a816:	f7fe fe61 	bl	194dc <bt_mesh_model_find_group>
	if (!entry) {
   1a81a:	b138      	cbz	r0, 1a82c <mod_sub_add+0xbc>
	*entry = sub_addr;
   1a81c:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   1a81e:	9806      	ldr	r0, [sp, #24]
   1a820:	f012 fb06 	bl	2ce30 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   1a824:	2200      	movs	r2, #0
   1a826:	e7d6      	b.n	1a7d6 <mod_sub_add+0x66>
		status = STATUS_INVALID_MODEL;
   1a828:	2202      	movs	r2, #2
   1a82a:	e7d4      	b.n	1a7d6 <mod_sub_add+0x66>
		status = STATUS_INSUFF_RESOURCES;
   1a82c:	2205      	movs	r2, #5
   1a82e:	e7d2      	b.n	1a7d6 <mod_sub_add+0x66>
		return -EINVAL;
   1a830:	f06f 0015 	mvn.w	r0, #21
   1a834:	e7b3      	b.n	1a79e <mod_sub_add+0x2e>
   1a836:	bf00      	nop
   1a838:	000336fb 	.word	0x000336fb
   1a83c:	0002fc8c 	.word	0x0002fc8c

0001a840 <mod_app_bind>:
{
   1a840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a844:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1a846:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1a84a:	b091      	sub	sp, #68	; 0x44
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1a84c:	ab06      	add	r3, sp, #24
   1a84e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a852:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a854:	88a3      	ldrh	r3, [r4, #4]
{
   1a856:	4607      	mov	r7, r0
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a858:	2b06      	cmp	r3, #6
{
   1a85a:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a85c:	d010      	beq.n	1a880 <mod_app_bind+0x40>
   1a85e:	2b08      	cmp	r3, #8
   1a860:	d00e      	beq.n	1a880 <mod_app_bind+0x40>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a862:	4b43      	ldr	r3, [pc, #268]	; (1a970 <mod_app_bind+0x130>)
   1a864:	4843      	ldr	r0, [pc, #268]	; (1a974 <mod_app_bind+0x134>)
   1a866:	930f      	str	r3, [sp, #60]	; 0x3c
   1a868:	2302      	movs	r3, #2
   1a86a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a86e:	aa0e      	add	r2, sp, #56	; 0x38
   1a870:	930e      	str	r3, [sp, #56]	; 0x38
   1a872:	f012 fc7a 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a876:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a87a:	b011      	add	sp, #68	; 0x44
   1a87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a880:	4620      	mov	r0, r4
   1a882:	f013 fb03 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a886:	b203      	sxth	r3, r0
   1a888:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a88a:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a88c:	dd6c      	ble.n	1a968 <mod_app_bind+0x128>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1a88e:	4620      	mov	r0, r4
   1a890:	f013 fafc 	bl	2de8c <net_buf_simple_pull_le16>
   1a894:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a896:	4630      	mov	r0, r6
	mod_id = buf->data;
   1a898:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a89c:	f7fe fd40 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a8a0:	b9d0      	cbnz	r0, 1a8d8 <mod_app_bind+0x98>
		vnd = (buf->len == 4U);
   1a8a2:	88a3      	ldrh	r3, [r4, #4]
   1a8a4:	1f1a      	subs	r2, r3, #4
   1a8a6:	4253      	negs	r3, r2
   1a8a8:	4153      	adcs	r3, r2
   1a8aa:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1a8ae:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1a8b0:	4632      	mov	r2, r6
   1a8b2:	e9cd 3900 	strd	r3, r9, [sp]
   1a8b6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1a8ba:	462b      	mov	r3, r5
   1a8bc:	a803      	add	r0, sp, #12
   1a8be:	f012 fb6d 	bl	2cf9c <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1a8c2:	2300      	movs	r3, #0
   1a8c4:	4641      	mov	r1, r8
   1a8c6:	4638      	mov	r0, r7
   1a8c8:	9300      	str	r3, [sp, #0]
   1a8ca:	aa03      	add	r2, sp, #12
   1a8cc:	f7fe fd88 	bl	193e0 <bt_mesh_model_send>
   1a8d0:	2800      	cmp	r0, #0
   1a8d2:	d13e      	bne.n	1a952 <mod_app_bind+0x112>
	return 0;
   1a8d4:	2000      	movs	r0, #0
   1a8d6:	e7d0      	b.n	1a87a <mod_app_bind+0x3a>
	mod = get_model(elem, buf, &vnd);
   1a8d8:	4621      	mov	r1, r4
   1a8da:	f10d 020b 	add.w	r2, sp, #11
   1a8de:	f012 fb3c 	bl	2cf5a <get_model>
	if (!mod) {
   1a8e2:	4604      	mov	r4, r0
   1a8e4:	b388      	cbz	r0, 1a94a <mod_app_bind+0x10a>
	if (model == mod) {
   1a8e6:	4287      	cmp	r7, r0
   1a8e8:	d10b      	bne.n	1a902 <mod_app_bind+0xc2>
		LOG_ERR("Client tried to bind AppKey to Configuration Model");
   1a8ea:	4b23      	ldr	r3, [pc, #140]	; (1a978 <mod_app_bind+0x138>)
   1a8ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a8f0:	930f      	str	r3, [sp, #60]	; 0x3c
   1a8f2:	2302      	movs	r3, #2
   1a8f4:	481f      	ldr	r0, [pc, #124]	; (1a974 <mod_app_bind+0x134>)
   1a8f6:	aa0e      	add	r2, sp, #56	; 0x38
   1a8f8:	930e      	str	r3, [sp, #56]	; 0x38
   1a8fa:	f012 fc36 	bl	2d16a <z_log_msg_static_create.constprop.0>
		status = STATUS_CANNOT_BIND;
   1a8fe:	230d      	movs	r3, #13
		goto send_status;
   1a900:	e7d6      	b.n	1a8b0 <mod_app_bind+0x70>
	if (!bt_mesh_app_key_exists(key_idx)) {
   1a902:	4628      	mov	r0, r5
   1a904:	f7fc f944 	bl	16b90 <bt_mesh_app_key_exists>
   1a908:	b308      	cbz	r0, 1a94e <mod_app_bind+0x10e>
	for (i = 0; i < model->keys_cnt; i++) {
   1a90a:	2300      	movs	r3, #0
   1a90c:	8a22      	ldrh	r2, [r4, #16]
   1a90e:	4293      	cmp	r3, r2
   1a910:	db06      	blt.n	1a920 <mod_app_bind+0xe0>
	for (i = 0; i < model->keys_cnt; i++) {
   1a912:	2300      	movs	r3, #0
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   1a914:	f64f 70ff 	movw	r0, #65535	; 0xffff
	for (i = 0; i < model->keys_cnt; i++) {
   1a918:	429a      	cmp	r2, r3
   1a91a:	dc08      	bgt.n	1a92e <mod_app_bind+0xee>
	return STATUS_INSUFF_RESOURCES;
   1a91c:	2305      	movs	r3, #5
   1a91e:	e7c7      	b.n	1a8b0 <mod_app_bind+0x70>
		if (model->keys[i] == key_idx) {
   1a920:	68e1      	ldr	r1, [r4, #12]
   1a922:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   1a926:	42a9      	cmp	r1, r5
   1a928:	d00b      	beq.n	1a942 <mod_app_bind+0x102>
	for (i = 0; i < model->keys_cnt; i++) {
   1a92a:	3301      	adds	r3, #1
   1a92c:	e7ef      	b.n	1a90e <mod_app_bind+0xce>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   1a92e:	68e1      	ldr	r1, [r4, #12]
   1a930:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
   1a934:	4584      	cmp	ip, r0
   1a936:	d106      	bne.n	1a946 <mod_app_bind+0x106>
				bt_mesh_model_bind_store(model);
   1a938:	4620      	mov	r0, r4
			model->keys[i] = key_idx;
   1a93a:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
				bt_mesh_model_bind_store(model);
   1a93e:	f012 fa70 	bl	2ce22 <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   1a942:	2300      	movs	r3, #0
   1a944:	e7b4      	b.n	1a8b0 <mod_app_bind+0x70>
	for (i = 0; i < model->keys_cnt; i++) {
   1a946:	3301      	adds	r3, #1
   1a948:	e7e6      	b.n	1a918 <mod_app_bind+0xd8>
		status = STATUS_INVALID_MODEL;
   1a94a:	2302      	movs	r3, #2
   1a94c:	e7b0      	b.n	1a8b0 <mod_app_bind+0x70>
		return STATUS_INVALID_APPKEY;
   1a94e:	2303      	movs	r3, #3
   1a950:	e7ae      	b.n	1a8b0 <mod_app_bind+0x70>
		LOG_ERR("Unable to send Model App Bind Status response");
   1a952:	4b0a      	ldr	r3, [pc, #40]	; (1a97c <mod_app_bind+0x13c>)
   1a954:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a958:	930f      	str	r3, [sp, #60]	; 0x3c
   1a95a:	2302      	movs	r3, #2
   1a95c:	4805      	ldr	r0, [pc, #20]	; (1a974 <mod_app_bind+0x134>)
   1a95e:	aa0e      	add	r2, sp, #56	; 0x38
   1a960:	930e      	str	r3, [sp, #56]	; 0x38
   1a962:	f012 fc02 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1a966:	e7b5      	b.n	1a8d4 <mod_app_bind+0x94>
		return -EINVAL;
   1a968:	f06f 0015 	mvn.w	r0, #21
   1a96c:	e785      	b.n	1a87a <mod_app_bind+0x3a>
   1a96e:	bf00      	nop
   1a970:	000336fb 	.word	0x000336fb
   1a974:	0002fc8c 	.word	0x0002fc8c
   1a978:	000337e7 	.word	0x000337e7
   1a97c:	0003381a 	.word	0x0003381a

0001a980 <mod_app_unbind>:
{
   1a980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a984:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1a986:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1a98a:	b091      	sub	sp, #68	; 0x44
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1a98c:	ab06      	add	r3, sp, #24
   1a98e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a992:	9303      	str	r3, [sp, #12]
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a994:	88a3      	ldrh	r3, [r4, #4]
{
   1a996:	4607      	mov	r7, r0
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a998:	2b06      	cmp	r3, #6
{
   1a99a:	4688      	mov	r8, r1
	if ((buf->len != 6U) && (buf->len != 8U)) {
   1a99c:	d010      	beq.n	1a9c0 <mod_app_unbind+0x40>
   1a99e:	2b08      	cmp	r3, #8
   1a9a0:	d00e      	beq.n	1a9c0 <mod_app_unbind+0x40>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1a9a2:	4b2a      	ldr	r3, [pc, #168]	; (1aa4c <mod_app_unbind+0xcc>)
   1a9a4:	482a      	ldr	r0, [pc, #168]	; (1aa50 <mod_app_unbind+0xd0>)
   1a9a6:	930f      	str	r3, [sp, #60]	; 0x3c
   1a9a8:	2302      	movs	r3, #2
   1a9aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a9ae:	aa0e      	add	r2, sp, #56	; 0x38
   1a9b0:	930e      	str	r3, [sp, #56]	; 0x38
   1a9b2:	f012 fbda 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1a9b6:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1a9ba:	b011      	add	sp, #68	; 0x44
   1a9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1a9c0:	4620      	mov	r0, r4
   1a9c2:	f013 fa63 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a9c6:	b203      	sxth	r3, r0
   1a9c8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1a9ca:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1a9cc:	dd3a      	ble.n	1aa44 <mod_app_unbind+0xc4>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1a9ce:	4620      	mov	r0, r4
   1a9d0:	f013 fa5c 	bl	2de8c <net_buf_simple_pull_le16>
   1a9d4:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1a9d6:	4628      	mov	r0, r5
	mod_id = buf->data;
   1a9d8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1a9dc:	f7fe fca0 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1a9e0:	b9c8      	cbnz	r0, 1aa16 <mod_app_unbind+0x96>
		status = STATUS_INVALID_ADDRESS;
   1a9e2:	2001      	movs	r0, #1
		vnd = (buf->len == 4U);
   1a9e4:	88a3      	ldrh	r3, [r4, #4]
   1a9e6:	1f1a      	subs	r2, r3, #4
   1a9e8:	4253      	negs	r3, r2
   1a9ea:	4153      	adcs	r3, r2
   1a9ec:	f88d 300b 	strb.w	r3, [sp, #11]
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1a9f0:	4633      	mov	r3, r6
   1a9f2:	462a      	mov	r2, r5
   1a9f4:	e9cd 0900 	strd	r0, r9, [sp]
   1a9f8:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1a9fc:	a803      	add	r0, sp, #12
   1a9fe:	f012 facd 	bl	2cf9c <create_mod_app_status.constprop.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1aa02:	2300      	movs	r3, #0
   1aa04:	4641      	mov	r1, r8
   1aa06:	4638      	mov	r0, r7
   1aa08:	9300      	str	r3, [sp, #0]
   1aa0a:	aa03      	add	r2, sp, #12
   1aa0c:	f7fe fce8 	bl	193e0 <bt_mesh_model_send>
   1aa10:	b968      	cbnz	r0, 1aa2e <mod_app_unbind+0xae>
	return 0;
   1aa12:	2000      	movs	r0, #0
   1aa14:	e7d1      	b.n	1a9ba <mod_app_unbind+0x3a>
	mod = get_model(elem, buf, &vnd);
   1aa16:	4621      	mov	r1, r4
   1aa18:	f10d 020b 	add.w	r2, sp, #11
   1aa1c:	f012 fa9d 	bl	2cf5a <get_model>
	if (!mod) {
   1aa20:	b118      	cbz	r0, 1aa2a <mod_app_unbind+0xaa>
	status = mod_unbind(mod, key_app_idx, true);
   1aa22:	4631      	mov	r1, r6
   1aa24:	f012 fb6e 	bl	2d104 <mod_unbind.constprop.0>
send_status:
   1aa28:	e7e2      	b.n	1a9f0 <mod_app_unbind+0x70>
		status = STATUS_INVALID_MODEL;
   1aa2a:	2002      	movs	r0, #2
   1aa2c:	e7e0      	b.n	1a9f0 <mod_app_unbind+0x70>
		LOG_ERR("Unable to send Model App Unbind Status response");
   1aa2e:	4b09      	ldr	r3, [pc, #36]	; (1aa54 <mod_app_unbind+0xd4>)
   1aa30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aa34:	930f      	str	r3, [sp, #60]	; 0x3c
   1aa36:	2302      	movs	r3, #2
   1aa38:	4805      	ldr	r0, [pc, #20]	; (1aa50 <mod_app_unbind+0xd0>)
   1aa3a:	aa0e      	add	r2, sp, #56	; 0x38
   1aa3c:	930e      	str	r3, [sp, #56]	; 0x38
   1aa3e:	f012 fb94 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1aa42:	e7e6      	b.n	1aa12 <mod_app_unbind+0x92>
		return -EINVAL;
   1aa44:	f06f 0015 	mvn.w	r0, #21
   1aa48:	e7b7      	b.n	1a9ba <mod_app_unbind+0x3a>
   1aa4a:	bf00      	nop
   1aa4c:	000336fb 	.word	0x000336fb
   1aa50:	0002fc8c 	.word	0x0002fc8c
   1aa54:	00033848 	.word	0x00033848

0001aa58 <mod_app_get>:
{
   1aa58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aa5c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg,
   1aa5e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1aa62:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(msg,
   1aa64:	ab07      	add	r3, sp, #28
   1aa66:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1aa6a:	9304      	str	r3, [sp, #16]
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1aa6c:	88a3      	ldrh	r3, [r4, #4]
{
   1aa6e:	4607      	mov	r7, r0
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1aa70:	f023 0302 	bic.w	r3, r3, #2
   1aa74:	b29b      	uxth	r3, r3
   1aa76:	2b04      	cmp	r3, #4
{
   1aa78:	4688      	mov	r8, r1
	if ((buf->len != 4U) && (buf->len != 6U)) {
   1aa7a:	d00e      	beq.n	1aa9a <mod_app_get+0x42>
		LOG_ERR("The message size for the application opcode is incorrect.");
   1aa7c:	4b3d      	ldr	r3, [pc, #244]	; (1ab74 <mod_app_get+0x11c>)
   1aa7e:	483e      	ldr	r0, [pc, #248]	; (1ab78 <mod_app_get+0x120>)
   1aa80:	9311      	str	r3, [sp, #68]	; 0x44
   1aa82:	2302      	movs	r3, #2
   1aa84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aa88:	aa10      	add	r2, sp, #64	; 0x40
   1aa8a:	9310      	str	r3, [sp, #64]	; 0x40
   1aa8c:	f012 fb6d 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EMSGSIZE;
   1aa90:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   1aa94:	b013      	add	sp, #76	; 0x4c
   1aa96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	elem_addr = net_buf_simple_pull_le16(buf);
   1aa9a:	4620      	mov	r0, r4
   1aa9c:	f013 f9f6 	bl	2de8c <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aaa0:	b203      	sxth	r3, r0
   1aaa2:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1aaa4:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1aaa6:	dd62      	ble.n	1ab6e <mod_app_get+0x116>
	mod_id = buf->data;
   1aaa8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1aaac:	f7fe fc38 	bl	19320 <bt_mesh_elem_find>
	if (!elem) {
   1aab0:	4605      	mov	r5, r0
   1aab2:	bb30      	cbnz	r0, 1ab02 <mod_app_get+0xaa>
		vnd = (buf->len == 4U);
   1aab4:	88a3      	ldrh	r3, [r4, #4]
		status = STATUS_INVALID_ADDRESS;
   1aab6:	2401      	movs	r4, #1
		vnd = (buf->len == 4U);
   1aab8:	1f1a      	subs	r2, r3, #4
   1aaba:	4253      	negs	r3, r2
   1aabc:	4153      	adcs	r3, r2
   1aabe:	f88d 300f 	strb.w	r3, [sp, #15]
	if (vnd) {
   1aac2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1aac6:	b33b      	cbz	r3, 1ab18 <mod_app_get+0xc0>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   1aac8:	f248 014e 	movw	r1, #32846	; 0x804e
   1aacc:	a804      	add	r0, sp, #16
   1aace:	f012 f9bd 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1aad2:	4621      	mov	r1, r4
   1aad4:	a804      	add	r0, sp, #16
   1aad6:	f013 fa0c 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1aada:	4631      	mov	r1, r6
   1aadc:	a804      	add	r0, sp, #16
   1aade:	f013 fa0f 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   1aae2:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1aae4:	4649      	mov	r1, r9
   1aae6:	a804      	add	r0, sp, #16
   1aae8:	f013 f9f7 	bl	2deda <net_buf_simple_add_mem>
	if (mod) {
   1aaec:	bb85      	cbnz	r5, 1ab50 <mod_app_get+0xf8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1aaee:	2300      	movs	r3, #0
   1aaf0:	4641      	mov	r1, r8
   1aaf2:	4638      	mov	r0, r7
   1aaf4:	9300      	str	r3, [sp, #0]
   1aaf6:	aa04      	add	r2, sp, #16
   1aaf8:	f7fe fc72 	bl	193e0 <bt_mesh_model_send>
   1aafc:	bb60      	cbnz	r0, 1ab58 <mod_app_get+0x100>
	return 0;
   1aafe:	2000      	movs	r0, #0
   1ab00:	e7c8      	b.n	1aa94 <mod_app_get+0x3c>
	mod = get_model(elem, buf, &vnd);
   1ab02:	4621      	mov	r1, r4
   1ab04:	f10d 020f 	add.w	r2, sp, #15
   1ab08:	f012 fa27 	bl	2cf5a <get_model>
	if (!mod) {
   1ab0c:	fab0 f480 	clz	r4, r0
   1ab10:	0964      	lsrs	r4, r4, #5
   1ab12:	4605      	mov	r5, r0
   1ab14:	0064      	lsls	r4, r4, #1
   1ab16:	e7d4      	b.n	1aac2 <mod_app_get+0x6a>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1ab18:	f248 014c 	movw	r1, #32844	; 0x804c
   1ab1c:	a804      	add	r0, sp, #16
   1ab1e:	f012 f995 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1ab22:	4621      	mov	r1, r4
   1ab24:	a804      	add	r0, sp, #16
   1ab26:	f013 f9e4 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1ab2a:	4631      	mov	r1, r6
   1ab2c:	a804      	add	r0, sp, #16
   1ab2e:	f013 f9e7 	bl	2df00 <net_buf_simple_add_le16>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1ab32:	2202      	movs	r2, #2
   1ab34:	e7d6      	b.n	1aae4 <mod_app_get+0x8c>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1ab36:	68eb      	ldr	r3, [r5, #12]
   1ab38:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
   1ab3c:	42b1      	cmp	r1, r6
   1ab3e:	d002      	beq.n	1ab46 <mod_app_get+0xee>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   1ab40:	a804      	add	r0, sp, #16
   1ab42:	f013 f9dd 	bl	2df00 <net_buf_simple_add_le16>
		for (i = 0; i < mod->keys_cnt; i++) {
   1ab46:	3401      	adds	r4, #1
   1ab48:	8a2b      	ldrh	r3, [r5, #16]
   1ab4a:	42a3      	cmp	r3, r4
   1ab4c:	dcf3      	bgt.n	1ab36 <mod_app_get+0xde>
   1ab4e:	e7ce      	b.n	1aaee <mod_app_get+0x96>
   1ab50:	2400      	movs	r4, #0
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1ab52:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1ab56:	e7f7      	b.n	1ab48 <mod_app_get+0xf0>
		LOG_ERR("Unable to send Model Application List message");
   1ab58:	4b08      	ldr	r3, [pc, #32]	; (1ab7c <mod_app_get+0x124>)
   1ab5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ab5e:	9311      	str	r3, [sp, #68]	; 0x44
   1ab60:	2302      	movs	r3, #2
   1ab62:	4805      	ldr	r0, [pc, #20]	; (1ab78 <mod_app_get+0x120>)
   1ab64:	aa10      	add	r2, sp, #64	; 0x40
   1ab66:	9310      	str	r3, [sp, #64]	; 0x40
   1ab68:	f012 faff 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1ab6c:	e7c7      	b.n	1aafe <mod_app_get+0xa6>
		return -EINVAL;
   1ab6e:	f06f 0015 	mvn.w	r0, #21
   1ab72:	e78f      	b.n	1aa94 <mod_app_get+0x3c>
   1ab74:	000336fb 	.word	0x000336fb
   1ab78:	0002fc8c 	.word	0x0002fc8c
   1ab7c:	00033878 	.word	0x00033878

0001ab80 <reset_send_start.part.0>:
static void reset_send_start(uint16_t duration, int err, void *cb_data)
   1ab80:	b598      	push	{r3, r4, r7, lr}
   1ab82:	af00      	add	r7, sp, #0
		LOG_ERR("Sending Node Reset Status failed (err %d)", err);
   1ab84:	466c      	mov	r4, sp
   1ab86:	b088      	sub	sp, #32
   1ab88:	466a      	mov	r2, sp
   1ab8a:	4b08      	ldr	r3, [pc, #32]	; (1abac <reset_send_start.part.0+0x2c>)
   1ab8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ab90:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ab94:	2303      	movs	r3, #3
   1ab96:	4806      	ldr	r0, [pc, #24]	; (1abb0 <reset_send_start.part.0+0x30>)
   1ab98:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab9c:	f012 fae5 	bl	2d16a <z_log_msg_static_create.constprop.0>
		k_work_submit(&node_reset_pending);
   1aba0:	4804      	ldr	r0, [pc, #16]	; (1abb4 <reset_send_start.part.0+0x34>)
   1aba2:	46a5      	mov	sp, r4
   1aba4:	f00b fb8c 	bl	262c0 <k_work_submit>
}
   1aba8:	46bd      	mov	sp, r7
   1abaa:	bd98      	pop	{r3, r4, r7, pc}
   1abac:	000338a6 	.word	0x000338a6
   1abb0:	0002fc8c 	.word	0x0002fc8c
   1abb4:	200088ac 	.word	0x200088ac

0001abb8 <send_friend_status.part.0>:
	}

	return 0;
}

static int send_friend_status(struct bt_mesh_model *model,
   1abb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		LOG_ERR("Unable to send Friend Status");
   1abba:	4b06      	ldr	r3, [pc, #24]	; (1abd4 <send_friend_status.part.0+0x1c>)
   1abbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1abc0:	9305      	str	r3, [sp, #20]
   1abc2:	2302      	movs	r3, #2
   1abc4:	4804      	ldr	r0, [pc, #16]	; (1abd8 <send_friend_status.part.0+0x20>)
   1abc6:	aa04      	add	r2, sp, #16
   1abc8:	9304      	str	r3, [sp, #16]
   1abca:	f012 face 	bl	2d16a <z_log_msg_static_create.constprop.0>
	}

	return 0;
}
   1abce:	b007      	add	sp, #28
   1abd0:	f85d fb04 	ldr.w	pc, [sp], #4
   1abd4:	000338d0 	.word	0x000338d0
   1abd8:	0002fc8c 	.word	0x0002fc8c

0001abdc <lpn_timeout_get>:
}

static int lpn_timeout_get(struct bt_mesh_model *model,
			   struct bt_mesh_msg_ctx *ctx,
			   struct net_buf_simple *buf)
{
   1abdc:	b570      	push	{r4, r5, r6, lr}
   1abde:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1abe0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
{
   1abe4:	b08e      	sub	sp, #56	; 0x38
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1abe6:	ab02      	add	r3, sp, #8
{
   1abe8:	4605      	mov	r5, r0
	struct bt_mesh_friend *frnd;
	int32_t timeout_steps;
	uint16_t lpn_addr;

	lpn_addr = net_buf_simple_pull_le16(buf);
   1abea:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1abec:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1abf0:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   1abf2:	f013 f94b 	bl	2de8c <net_buf_simple_pull_le16>

	LOG_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x lpn_addr 0x%02x", ctx->net_idx,
		ctx->app_idx, ctx->addr, lpn_addr);

	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1abf6:	b203      	sxth	r3, r0
   1abf8:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   1abfa:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1abfc:	dd2f      	ble.n	1ac5e <lpn_timeout_get+0x82>
		LOG_WRN("Invalid LPNAddress; ignoring msg");
		return -EINVAL;
	}

	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   1abfe:	f248 012e 	movw	r1, #32814	; 0x802e
   1ac02:	a805      	add	r0, sp, #20
   1ac04:	f012 f922 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   1ac08:	4621      	mov	r1, r4
   1ac0a:	a805      	add	r0, sp, #20
   1ac0c:	f013 f978 	bl	2df00 <net_buf_simple_add_le16>
	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		timeout_steps = 0;
		goto send_rsp;
	}

	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
   1ac10:	2301      	movs	r3, #1
   1ac12:	4621      	mov	r1, r4
   1ac14:	461a      	mov	r2, r3
   1ac16:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1ac1a:	f001 ff9b 	bl	1cb54 <bt_mesh_friend_find>
	if (!frnd) {
   1ac1e:	b188      	cbz	r0, 1ac44 <lpn_timeout_get+0x68>
		timeout_steps = 0;
		goto send_rsp;
	}

	/* PollTimeout should be reported in steps of 100ms. */
	timeout_steps = frnd->poll_to / 100;
   1ac20:	2264      	movs	r2, #100	; 0x64
   1ac22:	6841      	ldr	r1, [r0, #4]
   1ac24:	fb91 f1f2 	sdiv	r1, r1, r2

send_rsp:
	net_buf_simple_add_le24(&msg, timeout_steps);
   1ac28:	a805      	add	r0, sp, #20
   1ac2a:	f013 f97b 	bl	2df24 <net_buf_simple_add_le24>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1ac2e:	2300      	movs	r3, #0
   1ac30:	4631      	mov	r1, r6
   1ac32:	4628      	mov	r0, r5
   1ac34:	9300      	str	r3, [sp, #0]
   1ac36:	aa05      	add	r2, sp, #20
   1ac38:	f7fe fbd2 	bl	193e0 <bt_mesh_model_send>
   1ac3c:	b920      	cbnz	r0, 1ac48 <lpn_timeout_get+0x6c>
		LOG_ERR("Unable to send LPN PollTimeout Status");
	}

	return 0;
   1ac3e:	2000      	movs	r0, #0
}
   1ac40:	b00e      	add	sp, #56	; 0x38
   1ac42:	bd70      	pop	{r4, r5, r6, pc}
		timeout_steps = 0;
   1ac44:	4601      	mov	r1, r0
   1ac46:	e7ef      	b.n	1ac28 <lpn_timeout_get+0x4c>
		LOG_ERR("Unable to send LPN PollTimeout Status");
   1ac48:	4b06      	ldr	r3, [pc, #24]	; (1ac64 <lpn_timeout_get+0x88>)
   1ac4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ac4e:	930d      	str	r3, [sp, #52]	; 0x34
   1ac50:	2302      	movs	r3, #2
   1ac52:	4805      	ldr	r0, [pc, #20]	; (1ac68 <lpn_timeout_get+0x8c>)
   1ac54:	aa0c      	add	r2, sp, #48	; 0x30
   1ac56:	930c      	str	r3, [sp, #48]	; 0x30
   1ac58:	f012 fa87 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1ac5c:	e7ef      	b.n	1ac3e <lpn_timeout_get+0x62>
		return -EINVAL;
   1ac5e:	f06f 0015 	mvn.w	r0, #21
   1ac62:	e7ed      	b.n	1ac40 <lpn_timeout_get+0x64>
   1ac64:	000338ed 	.word	0x000338ed
   1ac68:	0002fc8c 	.word	0x0002fc8c

0001ac6c <cfg_srv_init.part.0>:
	{ OP_HEARTBEAT_SUB_GET,        BT_MESH_LEN_EXACT(0),   heartbeat_sub_get },
	{ OP_HEARTBEAT_SUB_SET,        BT_MESH_LEN_EXACT(5),   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
   1ac6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	if (!bt_mesh_model_in_primary(model)) {
		LOG_ERR("Configuration Server only allowed in primary element");
   1ac6e:	4b07      	ldr	r3, [pc, #28]	; (1ac8c <cfg_srv_init.part.0+0x20>)
   1ac70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ac74:	9305      	str	r3, [sp, #20]
   1ac76:	2302      	movs	r3, #2
   1ac78:	4805      	ldr	r0, [pc, #20]	; (1ac90 <cfg_srv_init.part.0+0x24>)
   1ac7a:	aa04      	add	r2, sp, #16
   1ac7c:	9304      	str	r3, [sp, #16]
   1ac7e:	f012 fa74 	bl	2d16a <z_log_msg_static_create.constprop.0>
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   1ac82:	f06f 0015 	mvn.w	r0, #21
   1ac86:	b007      	add	sp, #28
   1ac88:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac8c:	00033913 	.word	0x00033913
   1ac90:	0002fc8c 	.word	0x0002fc8c

0001ac94 <send_app_key_status>:
{
   1ac94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac96:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1ac98:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   1ac9c:	461c      	mov	r4, r3
   1ac9e:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1aca0:	ab02      	add	r3, sp, #8
{
   1aca2:	4605      	mov	r5, r0
   1aca4:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1aca6:	a805      	add	r0, sp, #20
   1aca8:	f248 0103 	movw	r1, #32771	; 0x8003
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   1acac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1acb0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1acb2:	f012 f8cb 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1acb6:	4639      	mov	r1, r7
   1acb8:	a805      	add	r0, sp, #20
   1acba:	f013 f91a 	bl	2def2 <net_buf_simple_add_u8>
#include <zephyr/sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   1acbe:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   1acc2:	a805      	add	r0, sp, #20
   1acc4:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
   1acc8:	b289      	uxth	r1, r1
   1acca:	f013 f919 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   1acce:	f3c4 1107 	ubfx	r1, r4, #4, #8
   1acd2:	a805      	add	r0, sp, #20
   1acd4:	f013 f90d 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1acd8:	2300      	movs	r3, #0
   1acda:	4631      	mov	r1, r6
   1acdc:	4628      	mov	r0, r5
   1acde:	9300      	str	r3, [sp, #0]
   1ace0:	aa05      	add	r2, sp, #20
   1ace2:	f7fe fb7d 	bl	193e0 <bt_mesh_model_send>
   1ace6:	b148      	cbz	r0, 1acfc <send_app_key_status+0x68>
		LOG_ERR("Unable to send App Key Status response");
   1ace8:	4b06      	ldr	r3, [pc, #24]	; (1ad04 <send_app_key_status+0x70>)
   1acea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1acee:	930d      	str	r3, [sp, #52]	; 0x34
   1acf0:	2302      	movs	r3, #2
   1acf2:	4805      	ldr	r0, [pc, #20]	; (1ad08 <send_app_key_status+0x74>)
   1acf4:	aa0c      	add	r2, sp, #48	; 0x30
   1acf6:	930c      	str	r3, [sp, #48]	; 0x30
   1acf8:	f012 fa37 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1acfc:	2000      	movs	r0, #0
   1acfe:	b00f      	add	sp, #60	; 0x3c
   1ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad02:	bf00      	nop
   1ad04:	00033948 	.word	0x00033948
   1ad08:	0002fc8c 	.word	0x0002fc8c

0001ad0c <mod_sub_list_clear>:
{
   1ad0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (i = 0, clear_count = 0; i < mod->groups_cnt; i++) {
   1ad10:	2400      	movs	r4, #0
{
   1ad12:	4606      	mov	r6, r0
	for (i = 0, clear_count = 0; i < mod->groups_cnt; i++) {
   1ad14:	4625      	mov	r5, r4
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1ad16:	4627      	mov	r7, r4
			LOG_ERR("Label UUID not found");
   1ad18:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ad78 <mod_sub_list_clear+0x6c>
   1ad1c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ad7c <mod_sub_list_clear+0x70>
{
   1ad20:	b087      	sub	sp, #28
	for (i = 0, clear_count = 0; i < mod->groups_cnt; i++) {
   1ad22:	8b33      	ldrh	r3, [r6, #24]
   1ad24:	429c      	cmp	r4, r3
   1ad26:	db03      	blt.n	1ad30 <mod_sub_list_clear+0x24>
}
   1ad28:	4628      	mov	r0, r5
   1ad2a:	b007      	add	sp, #28
   1ad2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   1ad30:	6973      	ldr	r3, [r6, #20]
   1ad32:	0062      	lsls	r2, r4, #1
   1ad34:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
   1ad38:	f480 4100 	eor.w	r1, r0, #32768	; 0x8000
   1ad3c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1ad40:	d304      	bcc.n	1ad4c <mod_sub_list_clear+0x40>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1ad42:	b108      	cbz	r0, 1ad48 <mod_sub_list_clear+0x3c>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1ad44:	529f      	strh	r7, [r3, r2]
		clear_count++;
   1ad46:	3501      	adds	r5, #1
	for (i = 0, clear_count = 0; i < mod->groups_cnt; i++) {
   1ad48:	3401      	adds	r4, #1
   1ad4a:	e7ea      	b.n	1ad22 <mod_sub_list_clear+0x16>
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   1ad4c:	f7fc fd46 	bl	177dc <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1ad50:	6973      	ldr	r3, [r6, #20]
   1ad52:	f823 7014 	strh.w	r7, [r3, r4, lsl #1]
		if (label_uuid) {
   1ad56:	b118      	cbz	r0, 1ad60 <mod_sub_list_clear+0x54>
			bt_mesh_va_del(label_uuid, NULL);
   1ad58:	2100      	movs	r1, #0
   1ad5a:	f7fc fd1b 	bl	17794 <bt_mesh_va_del>
   1ad5e:	e7f2      	b.n	1ad46 <mod_sub_list_clear+0x3a>
			LOG_ERR("Label UUID not found");
   1ad60:	2302      	movs	r3, #2
   1ad62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ad66:	4648      	mov	r0, r9
   1ad68:	aa04      	add	r2, sp, #16
   1ad6a:	f8cd 8014 	str.w	r8, [sp, #20]
   1ad6e:	9304      	str	r3, [sp, #16]
   1ad70:	f012 f9fb 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1ad74:	e7e7      	b.n	1ad46 <mod_sub_list_clear+0x3a>
   1ad76:	bf00      	nop
   1ad78:	0003396f 	.word	0x0003396f
   1ad7c:	0002fc8c 	.word	0x0002fc8c

0001ad80 <send_net_key_status>:
{
   1ad80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad82:	4616      	mov	r6, r2
   1ad84:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   1ad86:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
   1ad8a:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   1ad8c:	ab02      	add	r3, sp, #8
{
   1ad8e:	4604      	mov	r4, r0
   1ad90:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1ad92:	a805      	add	r0, sp, #20
   1ad94:	f248 0144 	movw	r1, #32836	; 0x8044
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   1ad98:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ad9c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1ad9e:	f012 f855 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1ada2:	4639      	mov	r1, r7
   1ada4:	a805      	add	r0, sp, #20
   1ada6:	f013 f8a4 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1adaa:	4631      	mov	r1, r6
   1adac:	a805      	add	r0, sp, #20
   1adae:	f013 f8a7 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1adb2:	2300      	movs	r3, #0
   1adb4:	4629      	mov	r1, r5
   1adb6:	4620      	mov	r0, r4
   1adb8:	9300      	str	r3, [sp, #0]
   1adba:	aa05      	add	r2, sp, #20
   1adbc:	f7fe fb10 	bl	193e0 <bt_mesh_model_send>
   1adc0:	b148      	cbz	r0, 1add6 <send_net_key_status+0x56>
		LOG_ERR("Unable to send NetKey Status");
   1adc2:	4b06      	ldr	r3, [pc, #24]	; (1addc <send_net_key_status+0x5c>)
   1adc4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1adc8:	930d      	str	r3, [sp, #52]	; 0x34
   1adca:	2302      	movs	r3, #2
   1adcc:	4804      	ldr	r0, [pc, #16]	; (1ade0 <send_net_key_status+0x60>)
   1adce:	aa0c      	add	r2, sp, #48	; 0x30
   1add0:	930c      	str	r3, [sp, #48]	; 0x30
   1add2:	f012 f9ca 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1add6:	2000      	movs	r0, #0
   1add8:	b00f      	add	sp, #60	; 0x3c
   1adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1addc:	00033984 	.word	0x00033984
   1ade0:	0002fc8c 	.word	0x0002fc8c

0001ade4 <net_key_del>:
{
   1ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ade6:	4606      	mov	r6, r0
   1ade8:	af00      	add	r7, sp, #0
	del_idx = net_buf_simple_pull_le16(buf);
   1adea:	4610      	mov	r0, r2
{
   1adec:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   1adee:	f013 f84d 	bl	2de8c <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   1adf2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   1adf6:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   1adf8:	d313      	bcc.n	1ae22 <net_key_del+0x3e>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   1adfa:	466d      	mov	r5, sp
   1adfc:	b088      	sub	sp, #32
   1adfe:	466b      	mov	r3, sp
   1ae00:	4a0f      	ldr	r2, [pc, #60]	; (1ae40 <net_key_del+0x5c>)
   1ae02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae06:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1ae0a:	461a      	mov	r2, r3
   1ae0c:	2303      	movs	r3, #3
   1ae0e:	480d      	ldr	r0, [pc, #52]	; (1ae44 <net_key_del+0x60>)
   1ae10:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae14:	f012 f9a9 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1ae18:	f06f 0015 	mvn.w	r0, #21
   1ae1c:	46ad      	mov	sp, r5
}
   1ae1e:	46bd      	mov	sp, r7
   1ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctx->net_idx == del_idx) {
   1ae22:	882a      	ldrh	r2, [r5, #0]
   1ae24:	4282      	cmp	r2, r0
   1ae26:	d105      	bne.n	1ae34 <net_key_del+0x50>
		return send_net_key_status(model, ctx, del_idx,
   1ae28:	230c      	movs	r3, #12
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   1ae2a:	4629      	mov	r1, r5
   1ae2c:	4630      	mov	r0, r6
   1ae2e:	f7ff ffa7 	bl	1ad80 <send_net_key_status>
   1ae32:	e7f4      	b.n	1ae1e <net_key_del+0x3a>
	(void)bt_mesh_subnet_del(del_idx);
   1ae34:	f011 fb63 	bl	2c4fe <bt_mesh_subnet_del>
	return send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   1ae38:	2300      	movs	r3, #0
   1ae3a:	4622      	mov	r2, r4
   1ae3c:	e7f5      	b.n	1ae2a <net_key_del+0x46>
   1ae3e:	bf00      	nop
   1ae40:	0003357e 	.word	0x0003357e
   1ae44:	0002fc8c 	.word	0x0002fc8c

0001ae48 <net_key_update>:
{
   1ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae4c:	4606      	mov	r6, r0
   1ae4e:	af00      	add	r7, sp, #0
	idx = net_buf_simple_pull_le16(buf);
   1ae50:	4610      	mov	r0, r2
{
   1ae52:	4688      	mov	r8, r1
   1ae54:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1ae56:	f013 f819 	bl	2de8c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1ae5a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1ae5e:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1ae60:	d314      	bcc.n	1ae8c <net_key_update+0x44>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1ae62:	466d      	mov	r5, sp
   1ae64:	b088      	sub	sp, #32
   1ae66:	466b      	mov	r3, sp
   1ae68:	4a0d      	ldr	r2, [pc, #52]	; (1aea0 <net_key_update+0x58>)
   1ae6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae6e:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1ae72:	461a      	mov	r2, r3
   1ae74:	2303      	movs	r3, #3
   1ae76:	480b      	ldr	r0, [pc, #44]	; (1aea4 <net_key_update+0x5c>)
   1ae78:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae7c:	f012 f975 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1ae80:	f06f 0015 	mvn.w	r0, #21
   1ae84:	46ad      	mov	sp, r5
}
   1ae86:	46bd      	mov	sp, r7
   1ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = bt_mesh_subnet_update(idx, buf->data);
   1ae8c:	6829      	ldr	r1, [r5, #0]
   1ae8e:	f011 fb06 	bl	2c49e <bt_mesh_subnet_update>
	return send_net_key_status(model, ctx, idx, status);
   1ae92:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   1ae94:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   1ae96:	4641      	mov	r1, r8
   1ae98:	4630      	mov	r0, r6
   1ae9a:	f7ff ff71 	bl	1ad80 <send_net_key_status>
   1ae9e:	e7f2      	b.n	1ae86 <net_key_update+0x3e>
   1aea0:	0003357e 	.word	0x0003357e
   1aea4:	0002fc8c 	.word	0x0002fc8c

0001aea8 <net_key_add>:
{
   1aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aeac:	4606      	mov	r6, r0
   1aeae:	af00      	add	r7, sp, #0
	idx = net_buf_simple_pull_le16(buf);
   1aeb0:	4610      	mov	r0, r2
{
   1aeb2:	4688      	mov	r8, r1
   1aeb4:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   1aeb6:	f012 ffe9 	bl	2de8c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1aeba:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1aebe:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1aec0:	d314      	bcc.n	1aeec <net_key_add+0x44>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1aec2:	466d      	mov	r5, sp
   1aec4:	b088      	sub	sp, #32
   1aec6:	466b      	mov	r3, sp
   1aec8:	4a0d      	ldr	r2, [pc, #52]	; (1af00 <net_key_add+0x58>)
   1aeca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aece:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1aed2:	461a      	mov	r2, r3
   1aed4:	2303      	movs	r3, #3
   1aed6:	480b      	ldr	r0, [pc, #44]	; (1af04 <net_key_add+0x5c>)
   1aed8:	f842 3f10 	str.w	r3, [r2, #16]!
   1aedc:	f012 f945 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1aee0:	f06f 0015 	mvn.w	r0, #21
   1aee4:	46ad      	mov	sp, r5
}
   1aee6:	46bd      	mov	sp, r7
   1aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = bt_mesh_subnet_add(idx, buf->data);
   1aeec:	6829      	ldr	r1, [r5, #0]
   1aeee:	f7fb fa89 	bl	16404 <bt_mesh_subnet_add>
	return send_net_key_status(model, ctx, idx, status);
   1aef2:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   1aef4:	4603      	mov	r3, r0
	return send_net_key_status(model, ctx, idx, status);
   1aef6:	4641      	mov	r1, r8
   1aef8:	4630      	mov	r0, r6
   1aefa:	f7ff ff41 	bl	1ad80 <send_net_key_status>
   1aefe:	e7f2      	b.n	1aee6 <net_key_add+0x3e>
   1af00:	0003357e 	.word	0x0003357e
   1af04:	0002fc8c 	.word	0x0002fc8c

0001af08 <send_node_id_status>:
{
   1af08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af0a:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1af0c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   1af10:	461e      	mov	r6, r3
   1af12:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1af14:	ab02      	add	r3, sp, #8
{
   1af16:	4604      	mov	r4, r0
   1af18:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1af1a:	a805      	add	r0, sp, #20
   1af1c:	f248 0148 	movw	r1, #32840	; 0x8048
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   1af20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1af24:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1af26:	f011 ff91 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1af2a:	4639      	mov	r1, r7
   1af2c:	a805      	add	r0, sp, #20
   1af2e:	f012 ffe0 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   1af32:	4631      	mov	r1, r6
   1af34:	a805      	add	r0, sp, #20
   1af36:	f012 ffe3 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   1af3a:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1af3e:	a805      	add	r0, sp, #20
   1af40:	f012 ffd7 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1af44:	2300      	movs	r3, #0
   1af46:	4629      	mov	r1, r5
   1af48:	4620      	mov	r0, r4
   1af4a:	9300      	str	r3, [sp, #0]
   1af4c:	aa05      	add	r2, sp, #20
   1af4e:	f7fe fa47 	bl	193e0 <bt_mesh_model_send>
   1af52:	b148      	cbz	r0, 1af68 <send_node_id_status+0x60>
		LOG_ERR("Unable to send Node Identity Status");
   1af54:	4b06      	ldr	r3, [pc, #24]	; (1af70 <send_node_id_status+0x68>)
   1af56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1af5a:	930d      	str	r3, [sp, #52]	; 0x34
   1af5c:	2302      	movs	r3, #2
   1af5e:	4805      	ldr	r0, [pc, #20]	; (1af74 <send_node_id_status+0x6c>)
   1af60:	aa0c      	add	r2, sp, #48	; 0x30
   1af62:	930c      	str	r3, [sp, #48]	; 0x30
   1af64:	f012 f901 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1af68:	2000      	movs	r0, #0
   1af6a:	b00f      	add	sp, #60	; 0x3c
   1af6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af6e:	bf00      	nop
   1af70:	000339a1 	.word	0x000339a1
   1af74:	0002fc8c 	.word	0x0002fc8c

0001af78 <node_identity_get>:
{
   1af78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af7a:	b085      	sub	sp, #20
   1af7c:	4605      	mov	r5, r0
   1af7e:	af02      	add	r7, sp, #8
	idx = net_buf_simple_pull_le16(buf);
   1af80:	4610      	mov	r0, r2
{
   1af82:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1af84:	f012 ff82 	bl	2de8c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1af88:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1af8c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1af8e:	d313      	bcc.n	1afb8 <node_identity_get+0x40>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1af90:	466d      	mov	r5, sp
   1af92:	b088      	sub	sp, #32
   1af94:	aa02      	add	r2, sp, #8
   1af96:	4b0e      	ldr	r3, [pc, #56]	; (1afd0 <node_identity_get+0x58>)
   1af98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1af9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1afa0:	2303      	movs	r3, #3
   1afa2:	480c      	ldr	r0, [pc, #48]	; (1afd4 <node_identity_get+0x5c>)
   1afa4:	f842 3f10 	str.w	r3, [r2, #16]!
   1afa8:	f012 f8df 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1afac:	f06f 0015 	mvn.w	r0, #21
   1afb0:	46ad      	mov	sp, r5
}
   1afb2:	370c      	adds	r7, #12
   1afb4:	46bd      	mov	sp, r7
   1afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1afb8:	1df9      	adds	r1, r7, #7
   1afba:	f011 faca 	bl	2c552 <bt_mesh_subnet_node_id_get>
	return send_node_id_status(model, ctx, status, idx, node_id);
   1afbe:	79fb      	ldrb	r3, [r7, #7]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   1afc0:	4602      	mov	r2, r0
	return send_node_id_status(model, ctx, status, idx, node_id);
   1afc2:	9300      	str	r3, [sp, #0]
   1afc4:	4631      	mov	r1, r6
   1afc6:	4623      	mov	r3, r4
   1afc8:	4628      	mov	r0, r5
   1afca:	f7ff ff9d 	bl	1af08 <send_node_id_status>
   1afce:	e7f0      	b.n	1afb2 <node_identity_get+0x3a>
   1afd0:	0003357e 	.word	0x0003357e
   1afd4:	0002fc8c 	.word	0x0002fc8c

0001afd8 <node_reset.part.0>:
static int node_reset(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
   1afd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to send Node Reset Status");
   1afda:	4b06      	ldr	r3, [pc, #24]	; (1aff4 <node_reset.part.0+0x1c>)
   1afdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1afe0:	9305      	str	r3, [sp, #20]
   1afe2:	2302      	movs	r3, #2
   1afe4:	4804      	ldr	r0, [pc, #16]	; (1aff8 <node_reset.part.0+0x20>)
   1afe6:	aa04      	add	r2, sp, #16
   1afe8:	9304      	str	r3, [sp, #16]
   1afea:	f012 f8be 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1afee:	b007      	add	sp, #28
   1aff0:	f85d fb04 	ldr.w	pc, [sp], #4
   1aff4:	000339c5 	.word	0x000339c5
   1aff8:	0002fc8c 	.word	0x0002fc8c

0001affc <node_reset>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   1affc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   1b000:	b530      	push	{r4, r5, lr}
   1b002:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   1b004:	ab03      	add	r3, sp, #12
{
   1b006:	4604      	mov	r4, r0
   1b008:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1b00a:	a805      	add	r0, sp, #20
   1b00c:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   1b010:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b014:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1b016:	f011 ff19 	bl	2ce4c <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, &reset_cb, NULL)) {
   1b01a:	2300      	movs	r3, #0
   1b01c:	4629      	mov	r1, r5
   1b01e:	9300      	str	r3, [sp, #0]
   1b020:	4620      	mov	r0, r4
   1b022:	4b05      	ldr	r3, [pc, #20]	; (1b038 <node_reset+0x3c>)
   1b024:	aa05      	add	r2, sp, #20
   1b026:	f7fe f9db 	bl	193e0 <bt_mesh_model_send>
   1b02a:	b108      	cbz	r0, 1b030 <node_reset+0x34>
   1b02c:	f7ff ffd4 	bl	1afd8 <node_reset.part.0>
}
   1b030:	2000      	movs	r0, #0
   1b032:	b009      	add	sp, #36	; 0x24
   1b034:	bd30      	pop	{r4, r5, pc}
   1b036:	bf00      	nop
   1b038:	000305ec 	.word	0x000305ec

0001b03c <send_krp_status>:
{
   1b03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b03e:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1b040:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   1b044:	461e      	mov	r6, r3
   1b046:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1b048:	ab02      	add	r3, sp, #8
{
   1b04a:	4604      	mov	r4, r0
   1b04c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1b04e:	a805      	add	r0, sp, #20
   1b050:	f248 0117 	movw	r1, #32791	; 0x8017
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   1b054:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b058:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1b05a:	f011 fef7 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1b05e:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1b062:	a805      	add	r0, sp, #20
   1b064:	f012 ff45 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1b068:	4639      	mov	r1, r7
   1b06a:	a805      	add	r0, sp, #20
   1b06c:	f012 ff48 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   1b070:	4631      	mov	r1, r6
   1b072:	a805      	add	r0, sp, #20
   1b074:	f012 ff3d 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b078:	2300      	movs	r3, #0
   1b07a:	4629      	mov	r1, r5
   1b07c:	4620      	mov	r0, r4
   1b07e:	9300      	str	r3, [sp, #0]
   1b080:	aa05      	add	r2, sp, #20
   1b082:	f7fe f9ad 	bl	193e0 <bt_mesh_model_send>
   1b086:	b148      	cbz	r0, 1b09c <send_krp_status+0x60>
		LOG_ERR("Unable to send Key Refresh State Status");
   1b088:	4b06      	ldr	r3, [pc, #24]	; (1b0a4 <send_krp_status+0x68>)
   1b08a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b08e:	930d      	str	r3, [sp, #52]	; 0x34
   1b090:	2302      	movs	r3, #2
   1b092:	4805      	ldr	r0, [pc, #20]	; (1b0a8 <send_krp_status+0x6c>)
   1b094:	aa0c      	add	r2, sp, #48	; 0x30
   1b096:	930c      	str	r3, [sp, #48]	; 0x30
   1b098:	f012 f867 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1b09c:	2000      	movs	r0, #0
   1b09e:	b00f      	add	sp, #60	; 0x3c
   1b0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b0a2:	bf00      	nop
   1b0a4:	000339e6 	.word	0x000339e6
   1b0a8:	0002fc8c 	.word	0x0002fc8c

0001b0ac <krp_set>:
{
   1b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0b0:	b084      	sub	sp, #16
   1b0b2:	4606      	mov	r6, r0
   1b0b4:	af02      	add	r7, sp, #8
	idx = net_buf_simple_pull_le16(buf);
   1b0b6:	4610      	mov	r0, r2
{
   1b0b8:	4615      	mov	r5, r2
   1b0ba:	4688      	mov	r8, r1
	idx = net_buf_simple_pull_le16(buf);
   1b0bc:	f012 fee6 	bl	2de8c <net_buf_simple_pull_le16>
   1b0c0:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   1b0c2:	4628      	mov	r0, r5
   1b0c4:	f012 feda 	bl	2de7c <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   1b0c8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   1b0cc:	71f8      	strb	r0, [r7, #7]
	if (idx > 0xfff) {
   1b0ce:	d315      	bcc.n	1b0fc <krp_set+0x50>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1b0d0:	466d      	mov	r5, sp
   1b0d2:	b088      	sub	sp, #32
   1b0d4:	ab02      	add	r3, sp, #8
   1b0d6:	4a18      	ldr	r2, [pc, #96]	; (1b138 <krp_set+0x8c>)
   1b0d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b0dc:	e9c3 2405 	strd	r2, r4, [r3, #20]
   1b0e0:	461a      	mov	r2, r3
   1b0e2:	2303      	movs	r3, #3
   1b0e4:	4815      	ldr	r0, [pc, #84]	; (1b13c <krp_set+0x90>)
   1b0e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b0ea:	f012 f83e 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1b0ee:	46ad      	mov	sp, r5
		return -EINVAL;
   1b0f0:	f06f 0015 	mvn.w	r0, #21
}
   1b0f4:	3708      	adds	r7, #8
   1b0f6:	46bd      	mov	sp, r7
   1b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	1df9      	adds	r1, r7, #7
   1b100:	f7fb f9ae 	bl	16460 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   1b104:	280b      	cmp	r0, #11
   1b106:	79fb      	ldrb	r3, [r7, #7]
   1b108:	d10f      	bne.n	1b12a <krp_set+0x7e>
		LOG_ERR("Invalid kr phase transition 0x%02x", phase);
   1b10a:	466c      	mov	r4, sp
   1b10c:	b088      	sub	sp, #32
   1b10e:	aa02      	add	r2, sp, #8
   1b110:	490b      	ldr	r1, [pc, #44]	; (1b140 <krp_set+0x94>)
   1b112:	480a      	ldr	r0, [pc, #40]	; (1b13c <krp_set+0x90>)
   1b114:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b118:	2303      	movs	r3, #3
   1b11a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b11e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b122:	f012 f822 	bl	2d16a <z_log_msg_static_create.constprop.0>
   1b126:	46a5      	mov	sp, r4
		return -EINVAL;
   1b128:	e7e2      	b.n	1b0f0 <krp_set+0x44>
	return send_krp_status(model, ctx, idx, phase, status);
   1b12a:	9000      	str	r0, [sp, #0]
   1b12c:	4622      	mov	r2, r4
   1b12e:	4641      	mov	r1, r8
   1b130:	4630      	mov	r0, r6
   1b132:	f7ff ff83 	bl	1b03c <send_krp_status>
   1b136:	e7dd      	b.n	1b0f4 <krp_set+0x48>
   1b138:	0003357e 	.word	0x0003357e
   1b13c:	0002fc8c 	.word	0x0002fc8c
   1b140:	00033a0e 	.word	0x00033a0e

0001b144 <krp_get>:
{
   1b144:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b146:	b085      	sub	sp, #20
   1b148:	4605      	mov	r5, r0
   1b14a:	af02      	add	r7, sp, #8
	idx = net_buf_simple_pull_le16(buf);
   1b14c:	4610      	mov	r0, r2
{
   1b14e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1b150:	f012 fe9c 	bl	2de8c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1b154:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1b158:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1b15a:	d314      	bcc.n	1b186 <krp_get+0x42>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", idx);
   1b15c:	466d      	mov	r5, sp
   1b15e:	b088      	sub	sp, #32
   1b160:	ab02      	add	r3, sp, #8
   1b162:	4a0e      	ldr	r2, [pc, #56]	; (1b19c <krp_get+0x58>)
   1b164:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b168:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1b16c:	461a      	mov	r2, r3
   1b16e:	2303      	movs	r3, #3
   1b170:	480b      	ldr	r0, [pc, #44]	; (1b1a0 <krp_get+0x5c>)
   1b172:	f842 3f10 	str.w	r3, [r2, #16]!
   1b176:	f011 fff8 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b17a:	f06f 0015 	mvn.w	r0, #21
   1b17e:	46ad      	mov	sp, r5
}
   1b180:	370c      	adds	r7, #12
   1b182:	46bd      	mov	sp, r7
   1b184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   1b186:	1df9      	adds	r1, r7, #7
   1b188:	f011 f9c3 	bl	2c512 <bt_mesh_subnet_kr_phase_get>
	return send_krp_status(model, ctx, idx, kr_phase, status);
   1b18c:	79fb      	ldrb	r3, [r7, #7]
   1b18e:	4622      	mov	r2, r4
   1b190:	9000      	str	r0, [sp, #0]
   1b192:	4631      	mov	r1, r6
   1b194:	4628      	mov	r0, r5
   1b196:	f7ff ff51 	bl	1b03c <send_krp_status>
   1b19a:	e7f1      	b.n	1b180 <krp_get+0x3c>
   1b19c:	0003357e 	.word	0x0003357e
   1b1a0:	0002fc8c 	.word	0x0002fc8c

0001b1a4 <hb_pub_send_status>:
{
   1b1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1a6:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1b1a8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1b1ac:	461c      	mov	r4, r3
   1b1ae:	b091      	sub	sp, #68	; 0x44
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1b1b0:	ab06      	add	r3, sp, #24
{
   1b1b2:	4605      	mov	r5, r0
   1b1b4:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1b1b6:	a803      	add	r0, sp, #12
   1b1b8:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   1b1ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b1be:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1b1c0:	f011 fe44 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1b1c4:	4639      	mov	r1, r7
   1b1c6:	a803      	add	r0, sp, #12
   1b1c8:	f012 fe93 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   1b1cc:	8821      	ldrh	r1, [r4, #0]
   1b1ce:	a803      	add	r0, sp, #12
   1b1d0:	f012 fe96 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   1b1d4:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   1b1d6:	b171      	cbz	r1, 1b1f6 <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   1b1d8:	2901      	cmp	r1, #1
   1b1da:	d00c      	beq.n	1b1f6 <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   1b1dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b1e0:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   1b1e2:	bf1b      	ittet	ne
   1b1e4:	f101 31ff 	addne.w	r1, r1, #4294967295
   1b1e8:	fab1 f181 	clzne	r1, r1
		return 0xff;
   1b1ec:	21ff      	moveq	r1, #255	; 0xff
		return 32 - __builtin_clz(val - 1) + 1;
   1b1ee:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   1b1f2:	bf18      	it	ne
   1b1f4:	b2c9      	uxtbne	r1, r1
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   1b1f6:	a803      	add	r0, sp, #12
   1b1f8:	f012 fe7b 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   1b1fc:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   1b1fe:	b149      	cbz	r1, 1b214 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   1b200:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b204:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1b206:	bf17      	itett	ne
   1b208:	fab1 f181 	clzne	r1, r1
		return 0xff;
   1b20c:	21ff      	moveq	r1, #255	; 0xff
		return 32 - __builtin_clz(val);
   1b20e:	f1c1 0120 	rsbne	r1, r1, #32
   1b212:	b2c9      	uxtbne	r1, r1
   1b214:	a803      	add	r0, sp, #12
   1b216:	f012 fe6c 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   1b21a:	7921      	ldrb	r1, [r4, #4]
   1b21c:	a803      	add	r0, sp, #12
   1b21e:	f012 fe68 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   1b222:	88e1      	ldrh	r1, [r4, #6]
   1b224:	a803      	add	r0, sp, #12
   1b226:	f012 fe6b 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   1b22a:	8921      	ldrh	r1, [r4, #8]
   1b22c:	a803      	add	r0, sp, #12
   1b22e:	f012 fe67 	bl	2df00 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b232:	2300      	movs	r3, #0
   1b234:	4631      	mov	r1, r6
   1b236:	4628      	mov	r0, r5
   1b238:	9300      	str	r3, [sp, #0]
   1b23a:	aa03      	add	r2, sp, #12
   1b23c:	f7fe f8d0 	bl	193e0 <bt_mesh_model_send>
   1b240:	b148      	cbz	r0, 1b256 <hb_pub_send_status+0xb2>
		LOG_ERR("Unable to send Heartbeat Publication Status");
   1b242:	4b06      	ldr	r3, [pc, #24]	; (1b25c <hb_pub_send_status+0xb8>)
   1b244:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b248:	930f      	str	r3, [sp, #60]	; 0x3c
   1b24a:	2302      	movs	r3, #2
   1b24c:	4804      	ldr	r0, [pc, #16]	; (1b260 <hb_pub_send_status+0xbc>)
   1b24e:	aa0e      	add	r2, sp, #56	; 0x38
   1b250:	930e      	str	r3, [sp, #56]	; 0x38
   1b252:	f011 ff8a 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1b256:	2000      	movs	r0, #0
   1b258:	b011      	add	sp, #68	; 0x44
   1b25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b25c:	00033a31 	.word	0x00033a31
   1b260:	0002fc8c 	.word	0x0002fc8c

0001b264 <heartbeat_pub_set>:
{
   1b264:	b5b0      	push	{r4, r5, r7, lr}
   1b266:	b084      	sub	sp, #16
	struct hb_pub_param *param = (void *)buf->data;
   1b268:	6812      	ldr	r2, [r2, #0]
{
   1b26a:	af00      	add	r7, sp, #0
	pub.dst = sys_le16_to_cpu(param->dst);
   1b26c:	8813      	ldrh	r3, [r2, #0]
{
   1b26e:	4604      	mov	r4, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   1b270:	7890      	ldrb	r0, [r2, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   1b272:	803b      	strh	r3, [r7, #0]
{
   1b274:	460d      	mov	r5, r1
	pub.dst = sys_le16_to_cpu(param->dst);
   1b276:	b299      	uxth	r1, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   1b278:	f011 fe62 	bl	2cf40 <bt_mesh_hb_pwr2>
   1b27c:	8078      	strh	r0, [r7, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   1b27e:	78d0      	ldrb	r0, [r2, #3]
   1b280:	f011 fe5e 	bl	2cf40 <bt_mesh_hb_pwr2>
   1b284:	60f8      	str	r0, [r7, #12]
	pub.ttl = param->ttl;
   1b286:	7913      	ldrb	r3, [r2, #4]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1b288:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
	pub.ttl = param->ttl;
   1b28c:	713b      	strb	r3, [r7, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   1b28e:	f8b2 3005 	ldrh.w	r3, [r2, #5]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1b292:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
	pub.feat = sys_le16_to_cpu(param->feat);
   1b296:	80fb      	strh	r3, [r7, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   1b298:	f8b2 3007 	ldrh.w	r3, [r2, #7]
   1b29c:	b298      	uxth	r0, r3
   1b29e:	813b      	strh	r3, [r7, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1b2a0:	d334      	bcc.n	1b30c <heartbeat_pub_set+0xa8>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   1b2a2:	7893      	ldrb	r3, [r2, #2]
   1b2a4:	3b12      	subs	r3, #18
   1b2a6:	b2db      	uxtb	r3, r3
   1b2a8:	2bec      	cmp	r3, #236	; 0xec
   1b2aa:	d931      	bls.n	1b310 <heartbeat_pub_set+0xac>
	if (param->period_log > 0x10) {
   1b2ac:	78d3      	ldrb	r3, [r2, #3]
   1b2ae:	2b10      	cmp	r3, #16
   1b2b0:	d82e      	bhi.n	1b310 <heartbeat_pub_set+0xac>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   1b2b2:	7913      	ldrb	r3, [r2, #4]
   1b2b4:	f083 0280 	eor.w	r2, r3, #128	; 0x80
   1b2b8:	2a7e      	cmp	r2, #126	; 0x7e
   1b2ba:	d813      	bhi.n	1b2e4 <heartbeat_pub_set+0x80>
		LOG_ERR("Invalid TTL value 0x%02x", param->ttl);
   1b2bc:	466c      	mov	r4, sp
   1b2be:	b088      	sub	sp, #32
   1b2c0:	466a      	mov	r2, sp
   1b2c2:	4914      	ldr	r1, [pc, #80]	; (1b314 <heartbeat_pub_set+0xb0>)
   1b2c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   1b2c8:	2303      	movs	r3, #3
   1b2ca:	4813      	ldr	r0, [pc, #76]	; (1b318 <heartbeat_pub_set+0xb4>)
   1b2cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b2d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1b2d4:	f011 ff49 	bl	2d16a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1b2d8:	f06f 0015 	mvn.w	r0, #21
   1b2dc:	46a5      	mov	sp, r4
}
   1b2de:	3710      	adds	r7, #16
   1b2e0:	46bd      	mov	sp, r7
   1b2e2:	bdb0      	pop	{r4, r5, r7, pc}
	if (pub.net_idx > 0xfff) {
   1b2e4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1b2e8:	d306      	bcc.n	1b2f8 <heartbeat_pub_set+0x94>
		LOG_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   1b2ea:	466c      	mov	r4, sp
   1b2ec:	b088      	sub	sp, #32
   1b2ee:	466a      	mov	r2, sp
   1b2f0:	4b0a      	ldr	r3, [pc, #40]	; (1b31c <heartbeat_pub_set+0xb8>)
   1b2f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b2f6:	e7e7      	b.n	1b2c8 <heartbeat_pub_set+0x64>
	status = bt_mesh_hb_pub_set(&pub);
   1b2f8:	4638      	mov	r0, r7
   1b2fa:	f7fd f8c5 	bl	18488 <bt_mesh_hb_pub_set>
   1b2fe:	4602      	mov	r2, r0
	return hb_pub_send_status(model, ctx, status, &pub);
   1b300:	463b      	mov	r3, r7
   1b302:	4629      	mov	r1, r5
   1b304:	4620      	mov	r0, r4
   1b306:	f7ff ff4d 	bl	1b1a4 <hb_pub_send_status>
   1b30a:	e7e8      	b.n	1b2de <heartbeat_pub_set+0x7a>
		status = STATUS_INVALID_ADDRESS;
   1b30c:	2201      	movs	r2, #1
   1b30e:	e7f7      	b.n	1b300 <heartbeat_pub_set+0x9c>
		status = STATUS_CANNOT_SET;
   1b310:	220f      	movs	r2, #15
   1b312:	e7f5      	b.n	1b300 <heartbeat_pub_set+0x9c>
   1b314:	00033735 	.word	0x00033735
   1b318:	0002fc8c 	.word	0x0002fc8c
   1b31c:	0003357e 	.word	0x0003357e

0001b320 <hb_sub_send_status>:
{
   1b320:	b570      	push	{r4, r5, r6, lr}
   1b322:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b324:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1b328:	b090      	sub	sp, #64	; 0x40
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b32a:	ab06      	add	r3, sp, #24
{
   1b32c:	4605      	mov	r5, r0
   1b32e:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1b330:	a803      	add	r0, sp, #12
   1b332:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1b336:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b33a:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1b33c:	f011 fd86 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1b340:	2100      	movs	r1, #0
   1b342:	a803      	add	r0, sp, #12
   1b344:	f012 fdd5 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   1b348:	8921      	ldrh	r1, [r4, #8]
   1b34a:	a803      	add	r0, sp, #12
   1b34c:	f012 fdd8 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   1b350:	8961      	ldrh	r1, [r4, #10]
   1b352:	a803      	add	r0, sp, #12
   1b354:	f012 fdd4 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   1b358:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   1b35a:	b149      	cbz	r1, 1b370 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   1b35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b360:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1b362:	bf17      	itett	ne
   1b364:	fab1 f181 	clzne	r1, r1
		return 0xff;
   1b368:	21ff      	moveq	r1, #255	; 0xff
		return 32 - __builtin_clz(val);
   1b36a:	f1c1 0120 	rsbne	r1, r1, #32
   1b36e:	b2c9      	uxtbne	r1, r1
   1b370:	a803      	add	r0, sp, #12
   1b372:	f012 fdbe 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   1b376:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   1b378:	b149      	cbz	r1, 1b38e <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   1b37a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b37e:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1b380:	bf17      	itett	ne
   1b382:	fab1 f181 	clzne	r1, r1
		return 0xff;
   1b386:	21ff      	moveq	r1, #255	; 0xff
		return 32 - __builtin_clz(val);
   1b388:	f1c1 0120 	rsbne	r1, r1, #32
   1b38c:	b2c9      	uxtbne	r1, r1
   1b38e:	a803      	add	r0, sp, #12
   1b390:	f012 fdaf 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   1b394:	7ba1      	ldrb	r1, [r4, #14]
   1b396:	a803      	add	r0, sp, #12
   1b398:	f012 fdab 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   1b39c:	7be1      	ldrb	r1, [r4, #15]
   1b39e:	a803      	add	r0, sp, #12
   1b3a0:	f012 fda7 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b3a4:	2300      	movs	r3, #0
   1b3a6:	4631      	mov	r1, r6
   1b3a8:	4628      	mov	r0, r5
   1b3aa:	9300      	str	r3, [sp, #0]
   1b3ac:	aa03      	add	r2, sp, #12
   1b3ae:	f7fe f817 	bl	193e0 <bt_mesh_model_send>
   1b3b2:	b148      	cbz	r0, 1b3c8 <hb_sub_send_status+0xa8>
		LOG_ERR("Unable to send Heartbeat Subscription Status");
   1b3b4:	4b06      	ldr	r3, [pc, #24]	; (1b3d0 <hb_sub_send_status+0xb0>)
   1b3b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b3ba:	930f      	str	r3, [sp, #60]	; 0x3c
   1b3bc:	2302      	movs	r3, #2
   1b3be:	4805      	ldr	r0, [pc, #20]	; (1b3d4 <hb_sub_send_status+0xb4>)
   1b3c0:	aa0e      	add	r2, sp, #56	; 0x38
   1b3c2:	930e      	str	r3, [sp, #56]	; 0x38
   1b3c4:	f011 fed1 	bl	2d16a <z_log_msg_static_create.constprop.0>
}
   1b3c8:	2000      	movs	r0, #0
   1b3ca:	b010      	add	sp, #64	; 0x40
   1b3cc:	bd70      	pop	{r4, r5, r6, pc}
   1b3ce:	bf00      	nop
   1b3d0:	00033a5d 	.word	0x00033a5d
   1b3d4:	0002fc8c 	.word	0x0002fc8c

0001b3d8 <bt_mesh_model_reset>:
	}
}

void bt_mesh_model_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   1b3d8:	2100      	movs	r1, #0
   1b3da:	4801      	ldr	r0, [pc, #4]	; (1b3e0 <bt_mesh_model_reset+0x8>)
   1b3dc:	f7fd bcbe 	b.w	18d5c <bt_mesh_model_foreach>
   1b3e0:	0002d3ef 	.word	0x0002d3ef

0001b3e4 <send_attention_status>:

static int send_attention_status(struct bt_mesh_model *model,
				 struct bt_mesh_msg_ctx *ctx)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   1b3e4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ea:	4605      	mov	r5, r0
   1b3ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1b3ee:	b08f      	sub	sp, #60	; 0x3c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   1b3f0:	ab03      	add	r3, sp, #12
   1b3f2:	3018      	adds	r0, #24
   1b3f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b3f8:	9305      	str	r3, [sp, #20]
{
   1b3fa:	460f      	mov	r7, r1
   1b3fc:	f00c fb80 	bl	27b00 <z_timeout_remaining>

	time = k_ticks_to_ms_floor32(
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
	LOG_DBG("%u second%s", time, (time == 1U) ? "" : "s");

	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   1b400:	f248 0107 	movw	r1, #32775	; 0x8007
   1b404:	4604      	mov	r4, r0
   1b406:	a805      	add	r0, sp, #20
   1b408:	f011 fd20 	bl	2ce4c <bt_mesh_model_msg_init>
   1b40c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b410:	fba4 2103 	umull	r2, r1, r4, r3
   1b414:	0bd2      	lsrs	r2, r2, #15
   1b416:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
		k_work_delayable_remaining_get(&srv->attn_timer)) / 1000U;
   1b41a:	fbb2 f2f3 	udiv	r2, r2, r3
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   1b41e:	2600      	movs	r6, #0

	net_buf_simple_add_u8(&msg, time);
   1b420:	b2d1      	uxtb	r1, r2
   1b422:	a805      	add	r0, sp, #20
   1b424:	f012 fd65 	bl	2def2 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1b428:	4633      	mov	r3, r6
   1b42a:	4639      	mov	r1, r7
   1b42c:	4628      	mov	r0, r5
   1b42e:	9600      	str	r6, [sp, #0]
   1b430:	aa05      	add	r2, sp, #20
   1b432:	f7fd ffd5 	bl	193e0 <bt_mesh_model_send>
   1b436:	b150      	cbz	r0, 1b44e <send_attention_status+0x6a>
		LOG_ERR("Unable to send Attention Status");
   1b438:	4b06      	ldr	r3, [pc, #24]	; (1b454 <send_attention_status+0x70>)
   1b43a:	930d      	str	r3, [sp, #52]	; 0x34
   1b43c:	2302      	movs	r3, #2
   1b43e:	930c      	str	r3, [sp, #48]	; 0x30
   1b440:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b444:	4633      	mov	r3, r6
   1b446:	4804      	ldr	r0, [pc, #16]	; (1b458 <send_attention_status+0x74>)
   1b448:	aa0c      	add	r2, sp, #48	; 0x30
   1b44a:	f7ef fb87 	bl	ab5c <z_impl_z_log_msg_static_create>
	}

	return 0;
}
   1b44e:	2000      	movs	r0, #0
   1b450:	b00f      	add	sp, #60	; 0x3c
   1b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b454:	00033a9a 	.word	0x00033a9a
   1b458:	0002fcac 	.word	0x0002fcac

0001b45c <send_health_period_status.part.0>:
	}

	return send_attention_status(model, ctx);
}

static int send_health_period_status(struct bt_mesh_model *model,
   1b45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);

	net_buf_simple_add_u8(&msg, model->pub->period_div);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		LOG_ERR("Unable to send Health Period Status");
   1b45e:	4b07      	ldr	r3, [pc, #28]	; (1b47c <send_health_period_status.part.0+0x20>)
   1b460:	9305      	str	r3, [sp, #20]
   1b462:	2302      	movs	r3, #2
   1b464:	9304      	str	r3, [sp, #16]
   1b466:	2300      	movs	r3, #0
   1b468:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b46c:	4804      	ldr	r0, [pc, #16]	; (1b480 <send_health_period_status.part.0+0x24>)
   1b46e:	aa04      	add	r2, sp, #16
   1b470:	f7ef fb74 	bl	ab5c <z_impl_z_log_msg_static_create>
	}

	return 0;
}
   1b474:	b007      	add	sp, #28
   1b476:	f85d fb04 	ldr.w	pc, [sp], #4
   1b47a:	bf00      	nop
   1b47c:	00033aba 	.word	0x00033aba
   1b480:	0002fcac 	.word	0x0002fcac

0001b484 <health_get_registered>:
{
   1b484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b488:	b085      	sub	sp, #20
   1b48a:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   1b48c:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
{
   1b490:	af02      	add	r7, sp, #8
   1b492:	4688      	mov	r8, r1
   1b494:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   1b496:	2105      	movs	r1, #5
   1b498:	4610      	mov	r0, r2
   1b49a:	f011 fcd7 	bl	2ce4c <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1b49e:	2101      	movs	r1, #1
   1b4a0:	4620      	mov	r0, r4
   1b4a2:	f004 ff55 	bl	20350 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   1b4a6:	4641      	mov	r1, r8
	test_id = net_buf_simple_add(msg, 1);
   1b4a8:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   1b4aa:	4620      	mov	r0, r4
   1b4ac:	f012 fd28 	bl	2df00 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   1b4b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b4b4:	b323      	cbz	r3, 1b500 <health_get_registered+0x7c>
   1b4b6:	685b      	ldr	r3, [r3, #4]
   1b4b8:	b313      	cbz	r3, 1b500 <health_get_registered+0x7c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1b4ba:	4620      	mov	r0, r4
   1b4bc:	f012 fd05 	bl	2deca <net_buf_simple_tailroom>
   1b4c0:	3804      	subs	r0, #4
	return buf->data + buf->len;
   1b4c2:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1b4c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1b4c8:	88a3      	ldrh	r3, [r4, #4]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1b4ca:	71f8      	strb	r0, [r7, #7]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1b4cc:	1df8      	adds	r0, r7, #7
   1b4ce:	9000      	str	r0, [sp, #0]
   1b4d0:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1b4d4:	4413      	add	r3, r2
   1b4d6:	4641      	mov	r1, r8
   1b4d8:	462a      	mov	r2, r5
   1b4da:	4630      	mov	r0, r6
   1b4dc:	47c8      	blx	r9
		if (err) {
   1b4de:	b190      	cbz	r0, 1b506 <health_get_registered+0x82>
			LOG_ERR("Failed to get faults (err %d)", err);
   1b4e0:	466c      	mov	r4, sp
   1b4e2:	b088      	sub	sp, #32
   1b4e4:	aa02      	add	r2, sp, #8
   1b4e6:	4b0c      	ldr	r3, [pc, #48]	; (1b518 <health_get_registered+0x94>)
   1b4e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b4ec:	2303      	movs	r3, #3
   1b4ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4f2:	2300      	movs	r3, #0
   1b4f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b4f8:	4808      	ldr	r0, [pc, #32]	; (1b51c <health_get_registered+0x98>)
   1b4fa:	f7ef fb2f 	bl	ab5c <z_impl_z_log_msg_static_create>
   1b4fe:	46a5      	mov	sp, r4
		*test_id = HEALTH_TEST_STANDARD;
   1b500:	2300      	movs	r3, #0
   1b502:	702b      	strb	r3, [r5, #0]
}
   1b504:	e003      	b.n	1b50e <health_get_registered+0x8a>
			net_buf_simple_add(msg, fault_count);
   1b506:	4620      	mov	r0, r4
   1b508:	79f9      	ldrb	r1, [r7, #7]
   1b50a:	f004 ff21 	bl	20350 <net_buf_simple_add>
}
   1b50e:	370c      	adds	r7, #12
   1b510:	46bd      	mov	sp, r7
   1b512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b516:	bf00      	nop
   1b518:	00033ade 	.word	0x00033ade
   1b51c:	0002fcac 	.word	0x0002fcac

0001b520 <health_fault_test>:
{
   1b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b524:	4615      	mov	r5, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b526:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   1b52a:	b0aa      	sub	sp, #168	; 0xa8
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b52c:	ab0c      	add	r3, sp, #48	; 0x30
	struct bt_mesh_health_srv *srv = model->user_data;
   1b52e:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
{
   1b532:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   1b534:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b536:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b53a:	9303      	str	r3, [sp, #12]
{
   1b53c:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1b53e:	f012 fc9d 	bl	2de7c <net_buf_simple_pull_u8>
   1b542:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b544:	4628      	mov	r0, r5
   1b546:	f012 fca1 	bl	2de8c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1b54a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b54e:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   1b550:	b98b      	cbnz	r3, 1b576 <health_fault_test+0x56>
	health_get_registered(model, company_id, &sdu);
   1b552:	4629      	mov	r1, r5
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b554:	2500      	movs	r5, #0
	health_get_registered(model, company_id, &sdu);
   1b556:	4620      	mov	r0, r4
   1b558:	aa03      	add	r2, sp, #12
   1b55a:	f7ff ff93 	bl	1b484 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b55e:	462b      	mov	r3, r5
   1b560:	4631      	mov	r1, r6
   1b562:	4620      	mov	r0, r4
   1b564:	9500      	str	r5, [sp, #0]
   1b566:	aa03      	add	r2, sp, #12
   1b568:	f7fd ff3a 	bl	193e0 <bt_mesh_model_send>
   1b56c:	b968      	cbnz	r0, 1b58a <health_fault_test+0x6a>
	return 0;
   1b56e:	2000      	movs	r0, #0
}
   1b570:	b02a      	add	sp, #168	; 0xa8
   1b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (srv->cb && srv->cb->fault_test) {
   1b576:	68db      	ldr	r3, [r3, #12]
   1b578:	2b00      	cmp	r3, #0
   1b57a:	d0ea      	beq.n	1b552 <health_fault_test+0x32>
		err = srv->cb->fault_test(model, test_id, company_id);
   1b57c:	4602      	mov	r2, r0
   1b57e:	4639      	mov	r1, r7
   1b580:	4620      	mov	r0, r4
   1b582:	4798      	blx	r3
		if (err) {
   1b584:	2800      	cmp	r0, #0
   1b586:	d0e4      	beq.n	1b552 <health_fault_test+0x32>
   1b588:	e7f2      	b.n	1b570 <health_fault_test+0x50>
		LOG_ERR("Unable to send Health Current Status response");
   1b58a:	4b06      	ldr	r3, [pc, #24]	; (1b5a4 <health_fault_test+0x84>)
   1b58c:	930b      	str	r3, [sp, #44]	; 0x2c
   1b58e:	2302      	movs	r3, #2
   1b590:	930a      	str	r3, [sp, #40]	; 0x28
   1b592:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b596:	462b      	mov	r3, r5
   1b598:	4803      	ldr	r0, [pc, #12]	; (1b5a8 <health_fault_test+0x88>)
   1b59a:	aa0a      	add	r2, sp, #40	; 0x28
   1b59c:	f7ef fade 	bl	ab5c <z_impl_z_log_msg_static_create>
   1b5a0:	e7e5      	b.n	1b56e <health_fault_test+0x4e>
   1b5a2:	bf00      	nop
   1b5a4:	00033afc 	.word	0x00033afc
   1b5a8:	0002fcac 	.word	0x0002fcac

0001b5ac <health_fault_clear>:
{
   1b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5ae:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b5b0:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
{
   1b5b4:	b0ab      	sub	sp, #172	; 0xac
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b5b6:	ab0c      	add	r3, sp, #48	; 0x30
	struct bt_mesh_health_srv *srv = model->user_data;
   1b5b8:	6a47      	ldr	r7, [r0, #36]	; 0x24
{
   1b5ba:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b5bc:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b5be:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1b5c2:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1b5c4:	f012 fc62 	bl	2de8c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   1b5c8:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1b5ca:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   1b5cc:	b983      	cbnz	r3, 1b5f0 <health_fault_clear+0x44>
	health_get_registered(model, company_id, &sdu);
   1b5ce:	4629      	mov	r1, r5
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b5d0:	2500      	movs	r5, #0
	health_get_registered(model, company_id, &sdu);
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	aa03      	add	r2, sp, #12
   1b5d6:	f7ff ff55 	bl	1b484 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b5da:	462b      	mov	r3, r5
   1b5dc:	4631      	mov	r1, r6
   1b5de:	4620      	mov	r0, r4
   1b5e0:	9500      	str	r5, [sp, #0]
   1b5e2:	aa03      	add	r2, sp, #12
   1b5e4:	f7fd fefc 	bl	193e0 <bt_mesh_model_send>
   1b5e8:	b958      	cbnz	r0, 1b602 <health_fault_clear+0x56>
	return 0;
   1b5ea:	2000      	movs	r0, #0
}
   1b5ec:	b02b      	add	sp, #172	; 0xac
   1b5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (srv->cb && srv->cb->fault_clear) {
   1b5f0:	689b      	ldr	r3, [r3, #8]
   1b5f2:	2b00      	cmp	r3, #0
   1b5f4:	d0eb      	beq.n	1b5ce <health_fault_clear+0x22>
		err = srv->cb->fault_clear(model, company_id);
   1b5f6:	4601      	mov	r1, r0
   1b5f8:	4620      	mov	r0, r4
   1b5fa:	4798      	blx	r3
		if (err) {
   1b5fc:	2800      	cmp	r0, #0
   1b5fe:	d0e6      	beq.n	1b5ce <health_fault_clear+0x22>
   1b600:	e7f4      	b.n	1b5ec <health_fault_clear+0x40>
		LOG_ERR("Unable to send Health Current Status response");
   1b602:	4b06      	ldr	r3, [pc, #24]	; (1b61c <health_fault_clear+0x70>)
   1b604:	930b      	str	r3, [sp, #44]	; 0x2c
   1b606:	2302      	movs	r3, #2
   1b608:	930a      	str	r3, [sp, #40]	; 0x28
   1b60a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b60e:	462b      	mov	r3, r5
   1b610:	4803      	ldr	r0, [pc, #12]	; (1b620 <health_fault_clear+0x74>)
   1b612:	aa0a      	add	r2, sp, #40	; 0x28
   1b614:	f7ef faa2 	bl	ab5c <z_impl_z_log_msg_static_create>
   1b618:	e7e7      	b.n	1b5ea <health_fault_clear+0x3e>
   1b61a:	bf00      	nop
   1b61c:	00033afc 	.word	0x00033afc
   1b620:	0002fcac 	.word	0x0002fcac

0001b624 <health_fault_get>:
{
   1b624:	b570      	push	{r4, r5, r6, lr}
   1b626:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b628:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
{
   1b62c:	b0aa      	sub	sp, #168	; 0xa8
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b62e:	ab0c      	add	r3, sp, #48	; 0x30
{
   1b630:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   1b632:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1b634:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1b638:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1b63a:	f012 fc27 	bl	2de8c <net_buf_simple_pull_le16>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b63e:	2500      	movs	r5, #0
	company_id = net_buf_simple_pull_le16(buf);
   1b640:	4601      	mov	r1, r0
	health_get_registered(model, company_id, &sdu);
   1b642:	aa03      	add	r2, sp, #12
   1b644:	4620      	mov	r0, r4
   1b646:	f7ff ff1d 	bl	1b484 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1b64a:	462b      	mov	r3, r5
   1b64c:	4631      	mov	r1, r6
   1b64e:	4620      	mov	r0, r4
   1b650:	9500      	str	r5, [sp, #0]
   1b652:	aa03      	add	r2, sp, #12
   1b654:	f7fd fec4 	bl	193e0 <bt_mesh_model_send>
   1b658:	b150      	cbz	r0, 1b670 <health_fault_get+0x4c>
		LOG_ERR("Unable to send Health Current Status response");
   1b65a:	4b07      	ldr	r3, [pc, #28]	; (1b678 <health_fault_get+0x54>)
   1b65c:	930b      	str	r3, [sp, #44]	; 0x2c
   1b65e:	2302      	movs	r3, #2
   1b660:	930a      	str	r3, [sp, #40]	; 0x28
   1b662:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b666:	462b      	mov	r3, r5
   1b668:	4804      	ldr	r0, [pc, #16]	; (1b67c <health_fault_get+0x58>)
   1b66a:	aa0a      	add	r2, sp, #40	; 0x28
   1b66c:	f7ef fa76 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   1b670:	2000      	movs	r0, #0
   1b672:	b02a      	add	sp, #168	; 0xa8
   1b674:	bd70      	pop	{r4, r5, r6, pc}
   1b676:	bf00      	nop
   1b678:	00033afc 	.word	0x00033afc
   1b67c:	0002fcac 	.word	0x0002fcac

0001b680 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      BT_MESH_LEN_EXACT(1),   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   1b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b684:	b085      	sub	sp, #20
	struct bt_mesh_model_pub *pub = mod->pub;
   1b686:	f8d0 9008 	ldr.w	r9, [r0, #8]
{
   1b68a:	af02      	add	r7, sp, #8
	size_t count;

	LOG_DBG("");

	count = health_get_current(mod, pub->msg);
   1b68c:	f8d9 5010 	ldr.w	r5, [r9, #16]
	struct bt_mesh_health_srv *srv = mod->user_data;
   1b690:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1b694:	2104      	movs	r1, #4
{
   1b696:	4682      	mov	sl, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1b698:	4628      	mov	r0, r5
   1b69a:	f011 fbd7 	bl	2ce4c <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1b69e:	2101      	movs	r1, #1
   1b6a0:	4628      	mov	r0, r5
   1b6a2:	f004 fe55 	bl	20350 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1b6a6:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   1b6a8:	4606      	mov	r6, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1b6aa:	4628      	mov	r0, r5
   1b6ac:	f004 fe50 	bl	20350 <net_buf_simple_add>
   1b6b0:	4604      	mov	r4, r0
	comp = bt_mesh_comp_get();
   1b6b2:	f7fd ff0d 	bl	194d0 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   1b6b6:	f8db 3004 	ldr.w	r3, [fp, #4]
	comp = bt_mesh_comp_get();
   1b6ba:	4680      	mov	r8, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   1b6bc:	b31b      	cbz	r3, 1b706 <health_pub_update+0x86>
   1b6be:	681b      	ldr	r3, [r3, #0]
   1b6c0:	b30b      	cbz	r3, 1b706 <health_pub_update+0x86>
		fault_count = net_buf_simple_tailroom(msg);
   1b6c2:	4628      	mov	r0, r5
   1b6c4:	f012 fc01 	bl	2deca <net_buf_simple_tailroom>
   1b6c8:	682a      	ldr	r2, [r5, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   1b6ca:	f8db 1004 	ldr.w	r1, [fp, #4]
   1b6ce:	88ab      	ldrh	r3, [r5, #4]
		fault_count = net_buf_simple_tailroom(msg);
   1b6d0:	7178      	strb	r0, [r7, #5]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   1b6d2:	1d78      	adds	r0, r7, #5
   1b6d4:	9000      	str	r0, [sp, #0]
   1b6d6:	f8d1 b000 	ldr.w	fp, [r1]
   1b6da:	4413      	add	r3, r2
   1b6dc:	4631      	mov	r1, r6
   1b6de:	4650      	mov	r0, sl
   1b6e0:	1dba      	adds	r2, r7, #6
   1b6e2:	47d8      	blx	fp
		if (err) {
   1b6e4:	b1c0      	cbz	r0, 1b718 <health_pub_update+0x98>
			LOG_ERR("Failed to get faults (err %d)", err);
   1b6e6:	466d      	mov	r5, sp
   1b6e8:	b088      	sub	sp, #32
   1b6ea:	aa02      	add	r2, sp, #8
   1b6ec:	4b16      	ldr	r3, [pc, #88]	; (1b748 <health_pub_update+0xc8>)
   1b6ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b6f2:	2303      	movs	r3, #3
   1b6f4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b6f8:	2300      	movs	r3, #0
   1b6fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b6fe:	4813      	ldr	r0, [pc, #76]	; (1b74c <health_pub_update+0xcc>)
   1b700:	f7ef fa2c 	bl	ab5c <z_impl_z_log_msg_static_create>
   1b704:	46ad      	mov	sp, r5
		sys_put_le16(comp->cid, company_ptr);
   1b706:	f8b8 3000 	ldrh.w	r3, [r8]
	dst[0] = val;
   1b70a:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   1b70c:	0a1b      	lsrs	r3, r3, #8
   1b70e:	7063      	strb	r3, [r4, #1]
		*test_id = HEALTH_TEST_STANDARD;
   1b710:	2300      	movs	r3, #0
   1b712:	7033      	strb	r3, [r6, #0]
		fault_count = 0U;
   1b714:	717b      	strb	r3, [r7, #5]
   1b716:	e007      	b.n	1b728 <health_pub_update+0xa8>
			sys_put_le16(company_id, company_ptr);
   1b718:	88fb      	ldrh	r3, [r7, #6]
			net_buf_simple_add(msg, fault_count);
   1b71a:	4628      	mov	r0, r5
	dst[0] = val;
   1b71c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   1b71e:	0a1b      	lsrs	r3, r3, #8
   1b720:	7979      	ldrb	r1, [r7, #5]
   1b722:	7063      	strb	r3, [r4, #1]
   1b724:	f004 fe14 	bl	20350 <net_buf_simple_add>
	return fault_count;
   1b728:	797b      	ldrb	r3, [r7, #5]
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   1b72a:	2000      	movs	r0, #0
	if (count) {
   1b72c:	3b00      	subs	r3, #0
   1b72e:	bf18      	it	ne
   1b730:	2301      	movne	r3, #1
   1b732:	f899 2007 	ldrb.w	r2, [r9, #7]
}
   1b736:	370c      	adds	r7, #12
   1b738:	f363 1286 	bfi	r2, r3, #6, #1
   1b73c:	f889 2007 	strb.w	r2, [r9, #7]
   1b740:	46bd      	mov	sp, r7
   1b742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b746:	bf00      	nop
   1b748:	00033ade 	.word	0x00033ade
   1b74c:	0002fcac 	.word	0x0002fcac

0001b750 <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   1b750:	b530      	push	{r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   1b752:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   1b754:	4604      	mov	r4, r0
   1b756:	b087      	sub	sp, #28

	if (!srv) {
   1b758:	b975      	cbnz	r5, 1b778 <health_srv_init+0x28>
		LOG_ERR("No Health Server context provided");
   1b75a:	4b12      	ldr	r3, [pc, #72]	; (1b7a4 <health_srv_init+0x54>)
   1b75c:	9305      	str	r3, [sp, #20]
   1b75e:	2302      	movs	r3, #2
   1b760:	9304      	str	r3, [sp, #16]
   1b762:	462b      	mov	r3, r5
   1b764:	4810      	ldr	r0, [pc, #64]	; (1b7a8 <health_srv_init+0x58>)
   1b766:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b76a:	aa04      	add	r2, sp, #16
   1b76c:	f7ef f9f6 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1b770:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   1b774:	b007      	add	sp, #28
   1b776:	bd30      	pop	{r4, r5, pc}
	if (!model->pub) {
   1b778:	6883      	ldr	r3, [r0, #8]
   1b77a:	b923      	cbnz	r3, 1b786 <health_srv_init+0x36>
		LOG_ERR("Health Server has no publication support");
   1b77c:	4a0b      	ldr	r2, [pc, #44]	; (1b7ac <health_srv_init+0x5c>)
   1b77e:	9205      	str	r2, [sp, #20]
   1b780:	2202      	movs	r2, #2
   1b782:	9204      	str	r2, [sp, #16]
	compiler_barrier();
   1b784:	e7ee      	b.n	1b764 <health_srv_init+0x14>
	model->pub->update = health_pub_update;
   1b786:	4a0a      	ldr	r2, [pc, #40]	; (1b7b0 <health_srv_init+0x60>)
	k_work_init_delayable(&srv->attn_timer, attention_off);
   1b788:	490a      	ldr	r1, [pc, #40]	; (1b7b4 <health_srv_init+0x64>)
	model->pub->update = health_pub_update;
   1b78a:	615a      	str	r2, [r3, #20]
	k_work_init_delayable(&srv->attn_timer, attention_off);
   1b78c:	f105 0008 	add.w	r0, r5, #8
   1b790:	f00a fe88 	bl	264a4 <k_work_init_delayable>
	srv->model = model;
   1b794:	602c      	str	r4, [r5, #0]
	if (bt_mesh_model_in_primary(model)) {
   1b796:	7923      	ldrb	r3, [r4, #4]
   1b798:	b10b      	cbz	r3, 1b79e <health_srv_init+0x4e>
	return 0;
   1b79a:	2000      	movs	r0, #0
   1b79c:	e7ea      	b.n	1b774 <health_srv_init+0x24>
		health_srv = srv;
   1b79e:	4b06      	ldr	r3, [pc, #24]	; (1b7b8 <health_srv_init+0x68>)
   1b7a0:	601d      	str	r5, [r3, #0]
   1b7a2:	e7fa      	b.n	1b79a <health_srv_init+0x4a>
   1b7a4:	00033b2a 	.word	0x00033b2a
   1b7a8:	0002fcac 	.word	0x0002fcac
   1b7ac:	00033b4c 	.word	0x00033b4c
   1b7b0:	0001b681 	.word	0x0001b681
   1b7b4:	0002d52b 	.word	0x0002d52b
   1b7b8:	2000ad14 	.word	0x2000ad14

0001b7bc <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   1b7bc:	b570      	push	{r4, r5, r6, lr}
   1b7be:	460c      	mov	r4, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   1b7c0:	bb00      	cbnz	r0, 1b804 <bt_mesh_attention+0x48>
		srv = health_srv;
   1b7c2:	4b12      	ldr	r3, [pc, #72]	; (1b80c <bt_mesh_attention+0x50>)
   1b7c4:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
   1b7c6:	b1fd      	cbz	r5, 1b808 <bt_mesh_attention+0x4c>
			LOG_WRN("No Health Server available");
			return;
		}

		model = srv->model;
   1b7c8:	6828      	ldr	r0, [r5, #0]
	} else {
		srv = model->user_data;
	}

	if ((time > 0) && srv->cb && srv->cb->attn_on) {
   1b7ca:	b124      	cbz	r4, 1b7d6 <bt_mesh_attention+0x1a>
   1b7cc:	686b      	ldr	r3, [r5, #4]
   1b7ce:	b113      	cbz	r3, 1b7d6 <bt_mesh_attention+0x1a>
   1b7d0:	691b      	ldr	r3, [r3, #16]
   1b7d2:	b103      	cbz	r3, 1b7d6 <bt_mesh_attention+0x1a>
		srv->cb->attn_on(model);
   1b7d4:	4798      	blx	r3
	}

	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   1b7d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			return ((t * to_hz + off) / from_hz);
   1b7da:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1b7de:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b7e2:	2100      	movs	r1, #0
   1b7e4:	435c      	muls	r4, r3
   1b7e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b7ea:	2300      	movs	r3, #0
   1b7ec:	fbe4 0106 	umlal	r0, r1, r4, r6
   1b7f0:	f7ec fcb0 	bl	8154 <__aeabi_uldivmod>
   1b7f4:	4602      	mov	r2, r0
   1b7f6:	460b      	mov	r3, r1
   1b7f8:	f105 0008 	add.w	r0, r5, #8
}
   1b7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&srv->attn_timer, K_SECONDS(time));
   1b800:	f00a bf3a 	b.w	26678 <k_work_reschedule>
		srv = model->user_data;
   1b804:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1b806:	e7e0      	b.n	1b7ca <bt_mesh_attention+0xe>
}
   1b808:	bd70      	pop	{r4, r5, r6, pc}
   1b80a:	bf00      	nop
   1b80c:	2000ad14 	.word	0x2000ad14

0001b810 <adv_start>:
static int adv_start(struct bt_mesh_ext_adv *adv,
		     const struct bt_le_adv_param *param,
		     struct bt_le_ext_adv_start_param *start,
		     const struct bt_data *ad, size_t ad_len,
		     const struct bt_data *sd, size_t sd_len)
{
   1b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b814:	b089      	sub	sp, #36	; 0x24
   1b816:	469b      	mov	fp, r3
	int err;

	if (!adv->instance) {
   1b818:	6883      	ldr	r3, [r0, #8]
{
   1b81a:	4605      	mov	r5, r0
   1b81c:	4689      	mov	r9, r1
   1b81e:	4690      	mov	r8, r2
   1b820:	af02      	add	r7, sp, #8
	if (!adv->instance) {
   1b822:	b98b      	cbnz	r3, 1b848 <adv_start+0x38>
		LOG_ERR("Mesh advertiser not enabled");
   1b824:	4a43      	ldr	r2, [pc, #268]	; (1b934 <adv_start+0x124>)
   1b826:	617a      	str	r2, [r7, #20]
   1b828:	2202      	movs	r2, #2
   1b82a:	613a      	str	r2, [r7, #16]
		return -ENODEV;
   1b82c:	f06f 0412 	mvn.w	r4, #18
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1b830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b834:	4840      	ldr	r0, [pc, #256]	; (1b938 <adv_start+0x128>)
   1b836:	f107 0210 	add.w	r2, r7, #16
   1b83a:	f7ef f98f 	bl	ab5c <z_impl_z_log_msg_static_create>
		LOG_ERR("Advertising failed: err %d", err);
		atomic_clear_bit(adv->flags, ADV_FLAG_ACTIVE);
	}

	return err;
}
   1b83e:	4620      	mov	r0, r4
   1b840:	371c      	adds	r7, #28
   1b842:	46bd      	mov	sp, r7
   1b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_and_set_bit(adv->flags, ADV_FLAG_ACTIVE)) {
   1b848:	1d06      	adds	r6, r0, #4
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b84a:	2101      	movs	r1, #1
   1b84c:	4630      	mov	r0, r6
   1b84e:	f011 ff07 	bl	2d660 <atomic_or>
   1b852:	ea10 0a01 	ands.w	sl, r0, r1
   1b856:	d00e      	beq.n	1b876 <adv_start+0x66>
		LOG_ERR("Advertiser is busy");
   1b858:	4b38      	ldr	r3, [pc, #224]	; (1b93c <adv_start+0x12c>)
   1b85a:	617b      	str	r3, [r7, #20]
   1b85c:	2302      	movs	r3, #2
   1b85e:	613b      	str	r3, [r7, #16]
   1b860:	2300      	movs	r3, #0
   1b862:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b866:	4834      	ldr	r0, [pc, #208]	; (1b938 <adv_start+0x128>)
   1b868:	f107 0210 	add.w	r2, r7, #16
   1b86c:	f7ef f976 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EBUSY;
   1b870:	f06f 040f 	mvn.w	r4, #15
   1b874:	e7e3      	b.n	1b83e <adv_start+0x2e>
   1b876:	e8d6 3faf 	lda	r3, [r6]
	if (atomic_test_bit(adv->flags, ADV_FLAG_UPDATE_PARAMS)) {
   1b87a:	069b      	lsls	r3, r3, #26
   1b87c:	d523      	bpl.n	1b8c6 <adv_start+0xb6>
		err = bt_le_ext_adv_update_param(adv->instance, param);
   1b87e:	4649      	mov	r1, r9
   1b880:	68a8      	ldr	r0, [r5, #8]
   1b882:	f00f faae 	bl	2ade2 <bt_le_ext_adv_update_param>
		if (err) {
   1b886:	4604      	mov	r4, r0
   1b888:	b1a8      	cbz	r0, 1b8b6 <adv_start+0xa6>
			LOG_ERR("Failed updating adv params: %d", err);
   1b88a:	466d      	mov	r5, sp
   1b88c:	b088      	sub	sp, #32
   1b88e:	aa02      	add	r2, sp, #8
   1b890:	4b2b      	ldr	r3, [pc, #172]	; (1b940 <adv_start+0x130>)
		LOG_ERR("Failed setting adv data: %d", err);
   1b892:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b896:	2303      	movs	r3, #3
   1b898:	f842 3f10 	str.w	r3, [r2, #16]!
   1b89c:	2300      	movs	r3, #0
   1b89e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b8a2:	4825      	ldr	r0, [pc, #148]	; (1b938 <adv_start+0x128>)
   1b8a4:	f7ef f95a 	bl	ab5c <z_impl_z_log_msg_static_create>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b8a8:	f06f 0101 	mvn.w	r1, #1
   1b8ac:	46ad      	mov	sp, r5
   1b8ae:	4630      	mov	r0, r6
   1b8b0:	f011 fecb 	bl	2d64a <atomic_and>
}
   1b8b4:	e7c3      	b.n	1b83e <adv_start+0x2e>
				  param != &adv->adv_param);
   1b8b6:	f105 0348 	add.w	r3, r5, #72	; 0x48
	if (val) {
   1b8ba:	4599      	cmp	r9, r3
   1b8bc:	d012      	beq.n	1b8e4 <adv_start+0xd4>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b8be:	2120      	movs	r1, #32
   1b8c0:	4630      	mov	r0, r6
   1b8c2:	f011 fecd 	bl	2d660 <atomic_or>
	err = bt_le_ext_adv_set_data(adv->instance, ad, ad_len, sd, sd_len);
   1b8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b8c8:	4659      	mov	r1, fp
   1b8ca:	9300      	str	r3, [sp, #0]
   1b8cc:	68a8      	ldr	r0, [r5, #8]
   1b8ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   1b8d2:	f00f fad2 	bl	2ae7a <bt_le_ext_adv_set_data>
	if (err) {
   1b8d6:	4604      	mov	r4, r0
   1b8d8:	b150      	cbz	r0, 1b8f0 <adv_start+0xe0>
		LOG_ERR("Failed setting adv data: %d", err);
   1b8da:	466d      	mov	r5, sp
   1b8dc:	b088      	sub	sp, #32
   1b8de:	aa02      	add	r2, sp, #8
   1b8e0:	4b18      	ldr	r3, [pc, #96]	; (1b944 <adv_start+0x134>)
   1b8e2:	e7d6      	b.n	1b892 <adv_start+0x82>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b8e4:	f06f 0120 	mvn.w	r1, #32
   1b8e8:	4630      	mov	r0, r6
   1b8ea:	f011 feae 	bl	2d64a <atomic_and>
   1b8ee:	e7ea      	b.n	1b8c6 <adv_start+0xb6>
   1b8f0:	f013 fe39 	bl	2f566 <z_impl_k_uptime_ticks>
   1b8f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b8f8:	fba0 0302 	umull	r0, r3, r0, r2
   1b8fc:	fb02 3101 	mla	r1, r2, r1, r3
   1b900:	0bc0      	lsrs	r0, r0, #15
   1b902:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1b906:	0bc9      	lsrs	r1, r1, #15
	adv->timestamp = k_uptime_get();
   1b908:	e9c5 0104 	strd	r0, r1, [r5, #16]
	err = bt_le_ext_adv_start(adv->instance, start);
   1b90c:	4641      	mov	r1, r8
   1b90e:	68a8      	ldr	r0, [r5, #8]
   1b910:	f7f4 fae2 	bl	fed8 <bt_le_ext_adv_start>
   1b914:	46a1      	mov	r9, r4
	if (err) {
   1b916:	4604      	mov	r4, r0
   1b918:	2800      	cmp	r0, #0
   1b91a:	d090      	beq.n	1b83e <adv_start+0x2e>
		LOG_ERR("Advertising failed: err %d", err);
   1b91c:	466d      	mov	r5, sp
   1b91e:	b088      	sub	sp, #32
   1b920:	aa02      	add	r2, sp, #8
   1b922:	4b09      	ldr	r3, [pc, #36]	; (1b948 <adv_start+0x138>)
   1b924:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b928:	2303      	movs	r3, #3
   1b92a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b92e:	464b      	mov	r3, r9
   1b930:	e7b5      	b.n	1b89e <adv_start+0x8e>
   1b932:	bf00      	nop
   1b934:	00033b88 	.word	0x00033b88
   1b938:	0002fc6c 	.word	0x0002fc6c
   1b93c:	00033ba4 	.word	0x00033ba4
   1b940:	00033bb7 	.word	0x00033bb7
   1b944:	00033bd6 	.word	0x00033bd6
   1b948:	00033bf2 	.word	0x00033bf2

0001b94c <connected>:
}

#if defined(CONFIG_BT_MESH_GATT_SERVER)
static void connected(struct bt_le_ext_adv *instance,
		      struct bt_le_ext_adv_connected_info *info)
{
   1b94c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b94e:	f06f 0104 	mvn.w	r1, #4
   1b952:	4808      	ldr	r0, [pc, #32]	; (1b974 <connected+0x28>)
   1b954:	f011 fe79 	bl	2d64a <atomic_and>
	struct bt_mesh_ext_adv *adv = gatt_adv_get();

	if (atomic_test_and_clear_bit(adv->flags, ADV_FLAG_PROXY)) {
   1b958:	0743      	lsls	r3, r0, #29
   1b95a:	d509      	bpl.n	1b970 <connected+0x24>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b95c:	f06f 0101 	mvn.w	r1, #1
   1b960:	4804      	ldr	r0, [pc, #16]	; (1b974 <connected+0x28>)
   1b962:	f011 fe72 	bl	2d64a <atomic_and>
		atomic_clear_bit(adv->flags, ADV_FLAG_ACTIVE);
		(void)schedule_send(adv);
	}
}
   1b966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void)schedule_send(adv);
   1b96a:	4803      	ldr	r0, [pc, #12]	; (1b978 <connected+0x2c>)
   1b96c:	f011 be83 	b.w	2d676 <schedule_send.isra.0>
}
   1b970:	bd08      	pop	{r3, pc}
   1b972:	bf00      	nop
   1b974:	20008cd4 	.word	0x20008cd4
   1b978:	20008cd0 	.word	0x20008cd0

0001b97c <send_pending_adv>:
{
   1b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (atomic_test_and_clear_bit(adv->flags, ADV_FLAG_SENT)) {
   1b980:	f1a0 0814 	sub.w	r8, r0, #20
{
   1b984:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b986:	f06f 0102 	mvn.w	r1, #2
   1b98a:	b08b      	sub	sp, #44	; 0x2c
	adv = CONTAINER_OF(work, struct bt_mesh_ext_adv, work.work);
   1b98c:	f1a0 0b18 	sub.w	fp, r0, #24
   1b990:	4640      	mov	r0, r8
   1b992:	f011 fe5a 	bl	2d64a <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, ADV_FLAG_SENT)) {
   1b996:	f010 0902 	ands.w	r9, r0, #2
   1b99a:	d025      	beq.n	1b9e8 <send_pending_adv+0x6c>
   1b99c:	f013 fde3 	bl	2f566 <z_impl_k_uptime_ticks>
   1b9a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b9a4:	fba0 0302 	umull	r0, r3, r0, r2
   1b9a8:	fb02 3101 	mla	r1, r2, r1, r3
   1b9ac:	0bc0      	lsrs	r0, r0, #15
   1b9ae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1b9b2:	0bc9      	lsrs	r1, r1, #15
	*reftime = uptime;
   1b9b4:	e944 0102 	strd	r0, r1, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b9b8:	f06f 0101 	mvn.w	r1, #1
   1b9bc:	4640      	mov	r0, r8
   1b9be:	f011 fe44 	bl	2d64a <atomic_and>
   1b9c2:	f06f 0104 	mvn.w	r1, #4
   1b9c6:	4640      	mov	r0, r8
   1b9c8:	f011 fe3f 	bl	2d64a <atomic_and>
		if (adv->buf) {
   1b9cc:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   1b9d0:	b120      	cbz	r0, 1b9dc <send_pending_adv+0x60>
			net_buf_unref(adv->buf);
   1b9d2:	f004 fb83 	bl	200dc <net_buf_unref>
			adv->buf = NULL;
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	f844 3c0c 	str.w	r3, [r4, #-12]
		schedule_send(adv);
   1b9dc:	4658      	mov	r0, fp
}
   1b9de:	b00b      	add	sp, #44	; 0x2c
   1b9e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		schedule_send(adv);
   1b9e4:	f011 be47 	b.w	2d676 <schedule_send.isra.0>
   1b9e8:	f06f 0108 	mvn.w	r1, #8
   1b9ec:	4640      	mov	r0, r8
   1b9ee:	f011 fe2c 	bl	2d64a <atomic_and>
	while ((buf = bt_mesh_adv_buf_get_by_tag(adv->tag, K_NO_WAIT))) {
   1b9f2:	2200      	movs	r2, #0
   1b9f4:	2300      	movs	r3, #0
   1b9f6:	f814 0c18 	ldrb.w	r0, [r4, #-24]
   1b9fa:	f010 fc34 	bl	2c266 <bt_mesh_adv_buf_get_by_tag>
   1b9fe:	4605      	mov	r5, r0
   1ba00:	b9a0      	cbnz	r0, 1ba2c <send_pending_adv+0xb0>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_SERVER) ||
   1ba02:	f814 3c18 	ldrb.w	r3, [r4, #-24]
   1ba06:	075a      	lsls	r2, r3, #29
   1ba08:	d50d      	bpl.n	1ba26 <send_pending_adv+0xaa>
	if (!bt_mesh_adv_gatt_send()) {
   1ba0a:	f010 fc30 	bl	2c26e <bt_mesh_adv_gatt_send>
   1ba0e:	b918      	cbnz	r0, 1ba18 <send_pending_adv+0x9c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ba10:	2104      	movs	r1, #4
   1ba12:	4640      	mov	r0, r8
   1ba14:	f011 fe24 	bl	2d660 <atomic_or>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ba18:	f06f 0110 	mvn.w	r1, #16
   1ba1c:	4640      	mov	r0, r8
   1ba1e:	f011 fe14 	bl	2d64a <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, ADV_FLAG_SCHEDULE_PENDING)) {
   1ba22:	06c3      	lsls	r3, r0, #27
   1ba24:	d4da      	bmi.n	1b9dc <send_pending_adv+0x60>
}
   1ba26:	b00b      	add	sp, #44	; 0x2c
   1ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!BT_MESH_ADV(buf)->busy) {
   1ba2c:	69aa      	ldr	r2, [r5, #24]
   1ba2e:	7a13      	ldrb	r3, [r2, #8]
   1ba30:	071e      	lsls	r6, r3, #28
   1ba32:	d402      	bmi.n	1ba3a <send_pending_adv+0xbe>
		net_buf_unref(buf);
   1ba34:	f004 fb52 	bl	200dc <net_buf_unref>
		if (!err) {
   1ba38:	e7db      	b.n	1b9f2 <send_pending_adv+0x76>
		BT_MESH_ADV(buf)->busy = 0U;
   1ba3a:	f36f 03c3 	bfc	r3, #3, #1
   1ba3e:	7213      	strb	r3, [r2, #8]
			BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1,
   1ba40:	69aa      	ldr	r2, [r5, #24]
	struct bt_le_ext_adv_start_param start = {
   1ba42:	f8cd 901c 	str.w	r9, [sp, #28]
			BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1,
   1ba46:	7a53      	ldrb	r3, [r2, #9]
   1ba48:	f003 0a07 	and.w	sl, r3, #7
	adv_int = MAX(ADV_INT_FAST_MS,
   1ba4c:	08db      	lsrs	r3, r3, #3
   1ba4e:	1c5e      	adds	r6, r3, #1
   1ba50:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1ba54:	005b      	lsls	r3, r3, #1
   1ba56:	2b13      	cmp	r3, #19
   1ba58:	bfc8      	it	gt
   1ba5a:	461e      	movgt	r6, r3
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1ba5c:	7a13      	ldrb	r3, [r2, #8]
   1ba5e:	4a2f      	ldr	r2, [pc, #188]	; (1bb1c <send_pending_adv+0x1a0>)
	adv_int = MAX(ADV_INT_FAST_MS,
   1ba60:	bfd8      	it	le
   1ba62:	2614      	movle	r6, #20
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1ba64:	f003 0303 	and.w	r3, r3, #3
   1ba68:	5cd3      	ldrb	r3, [r2, r3]
	if (adv->adv_param.interval_min != BT_MESH_ADV_SCAN_UNIT(adv_int)) {
   1ba6a:	2205      	movs	r2, #5
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1ba6c:	f88d 3020 	strb.w	r3, [sp, #32]
	ad.data_len = buf->len;
   1ba70:	8a2b      	ldrh	r3, [r5, #16]
			BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1,
   1ba72:	f10a 0101 	add.w	r1, sl, #1
	ad.data_len = buf->len;
   1ba76:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	ad.data = buf->data;
   1ba7a:	68eb      	ldr	r3, [r5, #12]
			BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1,
   1ba7c:	9105      	str	r1, [sp, #20]
	ad.data = buf->data;
   1ba7e:	9309      	str	r3, [sp, #36]	; 0x24
	if (adv->adv_param.interval_min != BT_MESH_ADV_SCAN_UNIT(adv_int)) {
   1ba80:	00f3      	lsls	r3, r6, #3
   1ba82:	fbb3 f3f2 	udiv	r3, r3, r2
   1ba86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	struct bt_le_ext_adv_start_param start = {
   1ba88:	f88d 101e 	strb.w	r1, [sp, #30]
	if (adv->adv_param.interval_min != BT_MESH_ADV_SCAN_UNIT(adv_int)) {
   1ba8c:	429a      	cmp	r2, r3
   1ba8e:	d005      	beq.n	1ba9c <send_pending_adv+0x120>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ba90:	2120      	movs	r1, #32
   1ba92:	4640      	mov	r0, r8
		adv->adv_param.interval_max = adv->adv_param.interval_min;
   1ba94:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
   1ba98:	f011 fde2 	bl	2d660 <atomic_or>
	err = adv_start(adv, &adv->adv_param, &start, &ad, 1, NULL, 0);
   1ba9c:	2301      	movs	r3, #1
   1ba9e:	4658      	mov	r0, fp
   1baa0:	9300      	str	r3, [sp, #0]
   1baa2:	e9cd 9901 	strd	r9, r9, [sp, #4]
   1baa6:	ab08      	add	r3, sp, #32
   1baa8:	aa07      	add	r2, sp, #28
   1baaa:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1baae:	f7ff feaf 	bl	1b810 <adv_start>
	if (!err) {
   1bab2:	4682      	mov	sl, r0
   1bab4:	b128      	cbz	r0, 1bac2 <send_pending_adv+0x146>
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
   1bab6:	69af      	ldr	r7, [r5, #24]
			   const struct bt_data *sd, size_t sd_len);

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  struct bt_mesh_adv *adv)
{
	if (!adv->started) {
   1bab8:	7a3b      	ldrb	r3, [r7, #8]
   1baba:	0758      	lsls	r0, r3, #29
   1babc:	d524      	bpl.n	1bb08 <send_pending_adv+0x18c>
		net_buf_unref(buf);
   1babe:	4628      	mov	r0, r5
   1bac0:	e7b8      	b.n	1ba34 <send_pending_adv+0xb8>
		adv->buf = net_buf_ref(buf);
   1bac2:	4628      	mov	r0, r5
   1bac4:	f004 fb4c 	bl	20160 <net_buf_ref>
   1bac8:	f844 0c0c 	str.w	r0, [r4, #-12]
	bt_mesh_adv_send_start(duration, err, BT_MESH_ADV(buf));
   1bacc:	69af      	ldr	r7, [r5, #24]
   1bace:	7a3b      	ldrb	r3, [r7, #8]
   1bad0:	0759      	lsls	r1, r3, #29
   1bad2:	d505      	bpl.n	1bae0 <send_pending_adv+0x164>
		net_buf_unref(buf);
   1bad4:	4628      	mov	r0, r5
}
   1bad6:	b00b      	add	sp, #44	; 0x2c
   1bad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		net_buf_unref(buf);
   1badc:	f004 bafe 	b.w	200dc <net_buf_unref>
		adv->started = 1;
   1bae0:	f043 0304 	orr.w	r3, r3, #4
   1bae4:	723b      	strb	r3, [r7, #8]

		if (adv->cb && adv->cb->start) {
   1bae6:	683b      	ldr	r3, [r7, #0]
   1bae8:	2b00      	cmp	r3, #0
   1baea:	d0f3      	beq.n	1bad4 <send_pending_adv+0x158>
   1baec:	681b      	ldr	r3, [r3, #0]
   1baee:	b13b      	cbz	r3, 1bb00 <send_pending_adv+0x184>
	duration = start.num_events * (adv_int + 10);
   1baf0:	f106 000a 	add.w	r0, r6, #10
			adv->cb->start(duration, err, adv->cb_data);
   1baf4:	9e05      	ldr	r6, [sp, #20]
   1baf6:	4651      	mov	r1, sl
   1baf8:	4346      	muls	r6, r0
   1bafa:	687a      	ldr	r2, [r7, #4]
   1bafc:	4630      	mov	r0, r6
   1bafe:	4798      	blx	r3
		}

		if (err) {
   1bb00:	f1ba 0f00 	cmp.w	sl, #0
   1bb04:	d0e6      	beq.n	1bad4 <send_pending_adv+0x158>
   1bb06:	e005      	b.n	1bb14 <send_pending_adv+0x198>
		adv->started = 1;
   1bb08:	f043 0304 	orr.w	r3, r3, #4
   1bb0c:	723b      	strb	r3, [r7, #8]
		if (adv->cb && adv->cb->start) {
   1bb0e:	683b      	ldr	r3, [r7, #0]
   1bb10:	2b00      	cmp	r3, #0
   1bb12:	d1eb      	bne.n	1baec <send_pending_adv+0x170>
			adv->cb = NULL;
   1bb14:	f8c7 9000 	str.w	r9, [r7]
   1bb18:	e7d1      	b.n	1babe <send_pending_adv+0x142>
   1bb1a:	bf00      	nop
   1bb1c:	000327ce 	.word	0x000327ce

0001bb20 <adv_sent>:
{
   1bb20:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bb22:	4b12      	ldr	r3, [pc, #72]	; (1bb6c <adv_sent+0x4c>)
   1bb24:	4c12      	ldr	r4, [pc, #72]	; (1bb70 <adv_sent+0x50>)
   1bb26:	429c      	cmp	r4, r3
   1bb28:	d91d      	bls.n	1bb66 <adv_sent+0x46>
   1bb2a:	4912      	ldr	r1, [pc, #72]	; (1bb74 <adv_sent+0x54>)
   1bb2c:	4812      	ldr	r0, [pc, #72]	; (1bb78 <adv_sent+0x58>)
   1bb2e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1bb32:	f00d f847 	bl	28bc4 <assert_print>
   1bb36:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1bb3a:	480e      	ldr	r0, [pc, #56]	; (1bb74 <adv_sent+0x54>)
   1bb3c:	f00d f83b 	bl	28bb6 <assert_post_action>
		if (adv->instance == instance) {
   1bb40:	68a2      	ldr	r2, [r4, #8]
   1bb42:	4290      	cmp	r0, r2
   1bb44:	d10d      	bne.n	1bb62 <adv_sent+0x42>
	if (!atomic_test_bit(adv->flags, ADV_FLAG_ACTIVE)) {
   1bb46:	1d20      	adds	r0, r4, #4
   1bb48:	e8d0 3faf 	lda	r3, [r0]
   1bb4c:	07db      	lsls	r3, r3, #31
   1bb4e:	d50b      	bpl.n	1bb68 <adv_sent+0x48>
   1bb50:	2102      	movs	r1, #2
   1bb52:	f011 fd85 	bl	2d660 <atomic_or>
	k_work_submit(&adv->work.work);
   1bb56:	f104 0018 	add.w	r0, r4, #24
}
   1bb5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&adv->work.work);
   1bb5e:	f00a bbaf 	b.w	262c0 <k_work_submit>
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bb62:	3460      	adds	r4, #96	; 0x60
   1bb64:	e7df      	b.n	1bb26 <adv_sent+0x6>
   1bb66:	d3eb      	bcc.n	1bb40 <adv_sent+0x20>
}
   1bb68:	bd10      	pop	{r4, pc}
   1bb6a:	bf00      	nop
   1bb6c:	20008d30 	.word	0x20008d30
   1bb70:	20008cd0 	.word	0x20008cd0
   1bb74:	00033c0d 	.word	0x00033c0d
   1bb78:	00030da5 	.word	0x00030da5

0001bb7c <bt_mesh_adv_gatt_update>:
	(void)schedule_send(gatt_adv_get());
   1bb7c:	4801      	ldr	r0, [pc, #4]	; (1bb84 <bt_mesh_adv_gatt_update+0x8>)
   1bb7e:	f011 bd7a 	b.w	2d676 <schedule_send.isra.0>
   1bb82:	bf00      	nop
   1bb84:	20008cd0 	.word	0x20008cd0

0001bb88 <bt_mesh_adv_init>:
{
   1bb88:	b530      	push	{r4, r5, lr}
   1bb8a:	b087      	sub	sp, #28
	struct bt_le_adv_param adv_param = {
   1bb8c:	2214      	movs	r2, #20
   1bb8e:	2100      	movs	r1, #0
   1bb90:	a801      	add	r0, sp, #4
   1bb92:	f00e fccd 	bl	2a530 <memset>
   1bb96:	2320      	movs	r3, #32
   1bb98:	e9cd 3303 	strd	r3, r3, [sp, #12]
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bb9c:	4c0c      	ldr	r4, [pc, #48]	; (1bbd0 <bt_mesh_adv_init+0x48>)
   1bb9e:	4d0d      	ldr	r5, [pc, #52]	; (1bbd4 <bt_mesh_adv_init+0x4c>)
   1bba0:	42ac      	cmp	r4, r5
   1bba2:	d912      	bls.n	1bbca <bt_mesh_adv_init+0x42>
   1bba4:	490c      	ldr	r1, [pc, #48]	; (1bbd8 <bt_mesh_adv_init+0x50>)
   1bba6:	480d      	ldr	r0, [pc, #52]	; (1bbdc <bt_mesh_adv_init+0x54>)
   1bba8:	f240 129d 	movw	r2, #413	; 0x19d
   1bbac:	f00d f80a 	bl	28bc4 <assert_print>
   1bbb0:	f240 119d 	movw	r1, #413	; 0x19d
   1bbb4:	4808      	ldr	r0, [pc, #32]	; (1bbd8 <bt_mesh_adv_init+0x50>)
   1bbb6:	f00c fffe 	bl	28bb6 <assert_post_action>
		(void)memcpy(&adv->adv_param, &adv_param, sizeof(adv_param));
   1bbba:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1bbbe:	2214      	movs	r2, #20
   1bbc0:	a901      	add	r1, sp, #4
   1bbc2:	f00e fcaa 	bl	2a51a <memcpy>
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bbc6:	3460      	adds	r4, #96	; 0x60
   1bbc8:	e7ea      	b.n	1bba0 <bt_mesh_adv_init+0x18>
   1bbca:	d3f6      	bcc.n	1bbba <bt_mesh_adv_init+0x32>
}
   1bbcc:	b007      	add	sp, #28
   1bbce:	bd30      	pop	{r4, r5, pc}
   1bbd0:	20008cd0 	.word	0x20008cd0
   1bbd4:	20008d30 	.word	0x20008d30
   1bbd8:	00033c0d 	.word	0x00033c0d
   1bbdc:	00030da5 	.word	0x00030da5

0001bbe0 <bt_mesh_adv_enable>:
#endif /* CONFIG_BT_MESH_GATT_SERVER */

int bt_mesh_adv_enable(void)
{
   1bbe0:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_MESH_GATT_SERVER)
		.connected = connected,
#endif /* CONFIG_BT_MESH_GATT_SERVER */
	};

	if (adv_main.instance) {
   1bbe2:	4b10      	ldr	r3, [pc, #64]	; (1bc24 <bt_mesh_adv_enable+0x44>)
   1bbe4:	689b      	ldr	r3, [r3, #8]
   1bbe6:	b10b      	cbz	r3, 1bbec <bt_mesh_adv_enable+0xc>
		/* Already initialized */
		return 0;
   1bbe8:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   1bbea:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bbec:	4c0e      	ldr	r4, [pc, #56]	; (1bc28 <bt_mesh_adv_enable+0x48>)
   1bbee:	4d0f      	ldr	r5, [pc, #60]	; (1bc2c <bt_mesh_adv_enable+0x4c>)
		err = bt_le_ext_adv_create(&adv->adv_param, &adv_cb,
   1bbf0:	4e0f      	ldr	r6, [pc, #60]	; (1bc30 <bt_mesh_adv_enable+0x50>)
   1bbf2:	e00a      	b.n	1bc0a <bt_mesh_adv_enable+0x2a>
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bbf4:	d2f8      	bcs.n	1bbe8 <bt_mesh_adv_enable+0x8>
		err = bt_le_ext_adv_create(&adv->adv_param, &adv_cb,
   1bbf6:	4631      	mov	r1, r6
   1bbf8:	f104 0208 	add.w	r2, r4, #8
   1bbfc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1bc00:	f7f4 f93a 	bl	fe78 <bt_le_ext_adv_create>
		if (err) {
   1bc04:	2800      	cmp	r0, #0
   1bc06:	d1f0      	bne.n	1bbea <bt_mesh_adv_enable+0xa>
	STRUCT_SECTION_FOREACH(bt_mesh_ext_adv, adv) {
   1bc08:	3460      	adds	r4, #96	; 0x60
   1bc0a:	42ac      	cmp	r4, r5
   1bc0c:	d9f2      	bls.n	1bbf4 <bt_mesh_adv_enable+0x14>
   1bc0e:	4909      	ldr	r1, [pc, #36]	; (1bc34 <bt_mesh_adv_enable+0x54>)
   1bc10:	4809      	ldr	r0, [pc, #36]	; (1bc38 <bt_mesh_adv_enable+0x58>)
   1bc12:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   1bc16:	f00c ffd5 	bl	28bc4 <assert_print>
   1bc1a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1bc1e:	4805      	ldr	r0, [pc, #20]	; (1bc34 <bt_mesh_adv_enable+0x54>)
   1bc20:	f00c ffc9 	bl	28bb6 <assert_post_action>
   1bc24:	20008cd0 	.word	0x20008cd0
   1bc28:	20008cd0 	.word	0x20008cd0
   1bc2c:	20008d30 	.word	0x20008d30
   1bc30:	000308e4 	.word	0x000308e4
   1bc34:	00033c0d 	.word	0x00033c0d
   1bc38:	00030da5 	.word	0x00030da5

0001bc3c <bt_mesh_adv_gatt_start>:

int bt_mesh_adv_gatt_start(const struct bt_le_adv_param *param,
			   int32_t duration,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1bc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_ext_adv *adv = gatt_adv_get();
	struct bt_le_ext_adv_start_param start = {
   1bc3e:	2400      	movs	r4, #0
{
   1bc40:	461f      	mov	r7, r3
   1bc42:	b087      	sub	sp, #28
	struct bt_le_ext_adv_start_param start = {
   1bc44:	1c4b      	adds	r3, r1, #1
{
   1bc46:	4605      	mov	r5, r0
   1bc48:	4616      	mov	r6, r2
	struct bt_le_ext_adv_start_param start = {
   1bc4a:	f8ad 4016 	strh.w	r4, [sp, #22]
   1bc4e:	d006      	beq.n	1bc5e <bt_mesh_adv_gatt_start+0x22>
   1bc50:	2909      	cmp	r1, #9
		/* Timeout is set in 10 ms steps, with 0 indicating "forever" */
		.timeout = (duration == SYS_FOREVER_MS) ? 0 : MAX(1, duration / 10),
   1bc52:	bfc5      	ittet	gt
   1bc54:	230a      	movgt	r3, #10
   1bc56:	fb91 f1f3 	sdivgt	r1, r1, r3
	struct bt_le_ext_adv_start_param start = {
   1bc5a:	2401      	movle	r4, #1
   1bc5c:	b28c      	uxthgt	r4, r1
   1bc5e:	2120      	movs	r1, #32
   1bc60:	4808      	ldr	r0, [pc, #32]	; (1bc84 <bt_mesh_adv_gatt_start+0x48>)
   1bc62:	f8ad 4014 	strh.w	r4, [sp, #20]
   1bc66:	f011 fcfb 	bl	2d660 <atomic_or>

	LOG_DBG("Start advertising %d ms", duration);

	atomic_set_bit(adv->flags, ADV_FLAG_UPDATE_PARAMS);

	return adv_start(adv, param, &start, ad, ad_len, sd, sd_len);
   1bc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bc6c:	4629      	mov	r1, r5
   1bc6e:	9302      	str	r3, [sp, #8]
   1bc70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bc72:	aa05      	add	r2, sp, #20
   1bc74:	e9cd 7300 	strd	r7, r3, [sp]
   1bc78:	4803      	ldr	r0, [pc, #12]	; (1bc88 <bt_mesh_adv_gatt_start+0x4c>)
   1bc7a:	4633      	mov	r3, r6
   1bc7c:	f7ff fdc8 	bl	1b810 <adv_start>
}
   1bc80:	b007      	add	sp, #28
   1bc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc84:	20008cd4 	.word	0x20008cd4
   1bc88:	20008cd0 	.word	0x20008cd0

0001bc8c <atomic_test_and_clear_bit.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bc8c:	2301      	movs	r3, #1
   1bc8e:	fa03 f000 	lsl.w	r0, r3, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bc92:	43c1      	mvns	r1, r0
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   1bc94:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bc96:	4b07      	ldr	r3, [pc, #28]	; (1bcb4 <atomic_test_and_clear_bit.constprop.0+0x28>)
   1bc98:	e8d3 2fef 	ldaex	r2, [r3]
   1bc9c:	ea02 0401 	and.w	r4, r2, r1
   1bca0:	e8c3 4fe5 	stlex	r5, r4, [r3]
   1bca4:	2d00      	cmp	r5, #0
   1bca6:	d1f7      	bne.n	1bc98 <atomic_test_and_clear_bit.constprop.0+0xc>
	return (old & mask) != 0;
   1bca8:	4210      	tst	r0, r2
}
   1bcaa:	bf14      	ite	ne
   1bcac:	2001      	movne	r0, #1
   1bcae:	2000      	moveq	r0, #0
   1bcb0:	bd30      	pop	{r4, r5, pc}
   1bcb2:	bf00      	nop
   1bcb4:	2000ad18 	.word	0x2000ad18

0001bcb8 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   1bcb8:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bcba:	4c10      	ldr	r4, [pc, #64]	; (1bcfc <mesh_commit+0x44>)
   1bcbc:	e8d4 3faf 	lda	r3, [r4]
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_INIT)) {
   1bcc0:	07da      	lsls	r2, r3, #31
   1bcc2:	d518      	bpl.n	1bcf6 <mesh_commit+0x3e>
   1bcc4:	4b0e      	ldr	r3, [pc, #56]	; (1bd00 <mesh_commit+0x48>)
   1bcc6:	e8d3 3faf 	lda	r3, [r3]
		return 0;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1bcca:	07db      	lsls	r3, r3, #31
   1bccc:	d513      	bpl.n	1bcf6 <mesh_commit+0x3e>
		 * will be called again later.
		 */
		return 0;
	}

	if (!bt_mesh_subnet_next(NULL)) {
   1bcce:	2000      	movs	r0, #0
   1bcd0:	f7fa fc96 	bl	16600 <bt_mesh_subnet_next>
   1bcd4:	b178      	cbz	r0, 1bcf6 <mesh_commit+0x3e>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		(void)bt_mesh_pb_gatt_srv_disable();
   1bcd6:	f003 f991 	bl	1effc <bt_mesh_pb_gatt_srv_disable>
	}

	bt_mesh_net_settings_commit();
   1bcda:	f7fa fa4f 	bl	1617c <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   1bcde:	f7fd fcf9 	bl	196d4 <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bce2:	e8d4 3fef 	ldaex	r3, [r4]
   1bce6:	f043 0302 	orr.w	r3, r3, #2
   1bcea:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1bcee:	2a00      	cmp	r2, #0
   1bcf0:	d1f7      	bne.n	1bce2 <mesh_commit+0x2a>

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   1bcf2:	f7f8 fd93 	bl	1481c <bt_mesh_start>

	return 0;
}
   1bcf6:	2000      	movs	r0, #0
   1bcf8:	bd10      	pop	{r4, pc}
   1bcfa:	bf00      	nop
   1bcfc:	20009ed0 	.word	0x20009ed0
   1bd00:	20008408 	.word	0x20008408

0001bd04 <bt_mesh_settings_set>:
{
   1bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd06:	4604      	mov	r4, r0
   1bd08:	af00      	add	r7, sp, #0
   1bd0a:	4608      	mov	r0, r1
   1bd0c:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   1bd0e:	461a      	mov	r2, r3
{
   1bd10:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   1bd12:	47a0      	blx	r4
	if (len < 0) {
   1bd14:	1e04      	subs	r4, r0, #0
   1bd16:	da12      	bge.n	1bd3e <bt_mesh_settings_set+0x3a>
		LOG_ERR("Failed to read value (err %zd)", len);
   1bd18:	466d      	mov	r5, sp
   1bd1a:	b088      	sub	sp, #32
   1bd1c:	466a      	mov	r2, sp
   1bd1e:	4b14      	ldr	r3, [pc, #80]	; (1bd70 <bt_mesh_settings_set+0x6c>)
   1bd20:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1bd24:	2303      	movs	r3, #3
   1bd26:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd2a:	2300      	movs	r3, #0
   1bd2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bd30:	4810      	ldr	r0, [pc, #64]	; (1bd74 <bt_mesh_settings_set+0x70>)
   1bd32:	f7ee ff13 	bl	ab5c <z_impl_z_log_msg_static_create>
   1bd36:	46ad      	mov	sp, r5
}
   1bd38:	4620      	mov	r0, r4
   1bd3a:	46bd      	mov	sp, r7
   1bd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len != read_len) {
   1bd3e:	42a5      	cmp	r5, r4
   1bd40:	d014      	beq.n	1bd6c <bt_mesh_settings_set+0x68>
		LOG_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   1bd42:	466e      	mov	r6, sp
   1bd44:	b088      	sub	sp, #32
   1bd46:	4669      	mov	r1, sp
   1bd48:	4b0b      	ldr	r3, [pc, #44]	; (1bd78 <bt_mesh_settings_set+0x74>)
   1bd4a:	460a      	mov	r2, r1
   1bd4c:	e9c1 3405 	strd	r3, r4, [r1, #20]
   1bd50:	2304      	movs	r3, #4
   1bd52:	61cd      	str	r5, [r1, #28]
   1bd54:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd58:	2300      	movs	r3, #0
   1bd5a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bd5e:	4805      	ldr	r0, [pc, #20]	; (1bd74 <bt_mesh_settings_set+0x70>)
   1bd60:	f7ee fefc 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1bd64:	f06f 0415 	mvn.w	r4, #21
   1bd68:	46b5      	mov	sp, r6
   1bd6a:	e7e5      	b.n	1bd38 <bt_mesh_settings_set+0x34>
	return 0;
   1bd6c:	2400      	movs	r4, #0
   1bd6e:	e7e3      	b.n	1bd38 <bt_mesh_settings_set+0x34>
   1bd70:	0003339f 	.word	0x0003339f
   1bd74:	0002fd14 	.word	0x0002fd14
   1bd78:	00033c50 	.word	0x00033c50

0001bd7c <bt_mesh_settings_store_schedule>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd7c:	2101      	movs	r1, #1
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_VA_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   1bd7e:	b570      	push	{r4, r5, r6, lr}
   1bd80:	4b22      	ldr	r3, [pc, #136]	; (1be0c <bt_mesh_settings_store_schedule+0x90>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd82:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd84:	f000 001f 	and.w	r0, r0, #31
   1bd88:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1bd8c:	4081      	lsls	r1, r0
   1bd8e:	e8d2 4fef 	ldaex	r4, [r2]
   1bd92:	430c      	orrs	r4, r1
   1bd94:	e8c2 4fe0 	stlex	r0, r4, [r2]
   1bd98:	2800      	cmp	r0, #0
   1bd9a:	d1f8      	bne.n	1bd8e <bt_mesh_settings_store_schedule+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd9c:	e8d3 2faf 	lda	r2, [r3]
	uint32_t timeout_ms, remaining_ms;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   1bda0:	f412 6f87 	tst.w	r2, #1080	; 0x438
   1bda4:	d12c      	bne.n	1be00 <bt_mesh_settings_store_schedule+0x84>
   1bda6:	e8d3 2faf 	lda	r2, [r3]
		timeout_ms = 0;
	} else if (IS_ENABLED(CONFIG_BT_MESH_RPL_STORAGE_MODE_SETTINGS) && RPL_STORE_TIMEOUT >= 0 &&
   1bdaa:	07d2      	lsls	r2, r2, #31
   1bdac:	d41f      	bmi.n	1bdee <bt_mesh_settings_store_schedule+0x72>
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
		   !(atomic_get(pending_flags) & GENERIC_PENDING_BITS)) {
		timeout_ms = RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   1bdae:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	return z_timeout_remaining(&dwork->timeout);
   1bdb2:	4817      	ldr	r0, [pc, #92]	; (1be10 <bt_mesh_settings_store_schedule+0x94>)
   1bdb4:	f00b fea4 	bl	27b00 <z_timeout_remaining>
   1bdb8:	4604      	mov	r4, r0
   1bdba:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bdbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bdc2:	2300      	movs	r3, #0
   1bdc4:	2100      	movs	r1, #0
   1bdc6:	eb00 30c5 	add.w	r0, r0, r5, lsl #15
   1bdca:	f7ec f9c3 	bl	8154 <__aeabi_uldivmod>
   1bdce:	460b      	mov	r3, r1
			return (uint32_t)((t * to_hz + off) / from_hz);
   1bdd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1bdd4:	fba4 4101 	umull	r4, r1, r4, r1
   1bdd8:	0be4      	lsrs	r4, r4, #15
   1bdda:	ea44 4441 	orr.w	r4, r4, r1, lsl #17

	/* If the new deadline is sooner, override any existing
	 * deadline; otherwise schedule without changing any existing
	 * deadline.
	 */
	if (timeout_ms < remaining_ms) {
   1bdde:	42a5      	cmp	r5, r4
			return ((t * to_hz + off) / from_hz);
   1bde0:	4602      	mov	r2, r0
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   1bde2:	480c      	ldr	r0, [pc, #48]	; (1be14 <bt_mesh_settings_store_schedule+0x98>)
	if (timeout_ms < remaining_ms) {
   1bde4:	d20e      	bcs.n	1be04 <bt_mesh_settings_store_schedule+0x88>
	} else {
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
	}
}
   1bde6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&pending_store, K_MSEC(timeout_ms));
   1bdea:	f00a bc45 	b.w	26678 <k_work_reschedule>
   1bdee:	e8d3 2faf 	lda	r2, [r3]
		   atomic_test_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING) &&
   1bdf2:	f240 33c6 	movw	r3, #966	; 0x3c6
   1bdf6:	421a      	tst	r2, r3
   1bdf8:	d1d9      	bne.n	1bdae <bt_mesh_settings_store_schedule+0x32>
		timeout_ms = RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   1bdfa:	f241 3588 	movw	r5, #5000	; 0x1388
   1bdfe:	e7d8      	b.n	1bdb2 <bt_mesh_settings_store_schedule+0x36>
		timeout_ms = 0;
   1be00:	2500      	movs	r5, #0
   1be02:	e7d6      	b.n	1bdb2 <bt_mesh_settings_store_schedule+0x36>
}
   1be04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_schedule(&pending_store, K_MSEC(timeout_ms));
   1be08:	f00a bbd2 	b.w	265b0 <k_work_schedule>
   1be0c:	2000ad18 	.word	0x2000ad18
   1be10:	2000a258 	.word	0x2000a258
   1be14:	2000a248 	.word	0x2000a248

0001be18 <bt_mesh_settings_store_cancel>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be18:	4a08      	ldr	r2, [pc, #32]	; (1be3c <bt_mesh_settings_store_cancel+0x24>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be1a:	0943      	lsrs	r3, r0, #5
   1be1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be20:	2301      	movs	r3, #1
   1be22:	f000 001f 	and.w	r0, r0, #31
   1be26:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be28:	43db      	mvns	r3, r3
   1be2a:	e8d2 0fef 	ldaex	r0, [r2]
   1be2e:	4018      	ands	r0, r3
   1be30:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1be34:	2900      	cmp	r1, #0
   1be36:	d1f8      	bne.n	1be2a <bt_mesh_settings_store_cancel+0x12>

void bt_mesh_settings_store_cancel(enum bt_mesh_settings_flag flag)
{
	atomic_clear_bit(pending_flags, flag);
}
   1be38:	4770      	bx	lr
   1be3a:	bf00      	nop
   1be3c:	2000ad18 	.word	0x2000ad18

0001be40 <bt_mesh_settings_init>:
	}
}

void bt_mesh_settings_init(void)
{
	k_work_init_delayable(&pending_store, store_pending);
   1be40:	4901      	ldr	r1, [pc, #4]	; (1be48 <bt_mesh_settings_init+0x8>)
   1be42:	4802      	ldr	r0, [pc, #8]	; (1be4c <bt_mesh_settings_init+0xc>)
   1be44:	f00a bb2e 	b.w	264a4 <k_work_init_delayable>
   1be48:	0002d737 	.word	0x0002d737
   1be4c:	2000a248 	.word	0x2000a248

0001be50 <bt_mesh_settings_store_pending>:
}

void bt_mesh_settings_store_pending(void)
{
   1be50:	b510      	push	{r4, lr}
	(void)k_work_cancel_delayable(&pending_store);
   1be52:	4c04      	ldr	r4, [pc, #16]	; (1be64 <bt_mesh_settings_store_pending+0x14>)
   1be54:	4620      	mov	r0, r4
   1be56:	f00a fc15 	bl	26684 <k_work_cancel_delayable>

	store_pending(&pending_store.work);
   1be5a:	4620      	mov	r0, r4
}
   1be5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	store_pending(&pending_store.work);
   1be60:	f011 bc69 	b.w	2d736 <store_pending>
   1be64:	2000a248 	.word	0x2000a248

0001be68 <schedule_rpl_store.constprop.0>:
static ATOMIC_DEFINE(store, CONFIG_BT_MESH_CRPL);
static atomic_t clear;

static inline int rpl_idx(const struct bt_mesh_rpl *rpl)
{
	return rpl - &replay_list[0];
   1be68:	4b0a      	ldr	r3, [pc, #40]	; (1be94 <schedule_rpl_store.constprop.0+0x2c>)
   1be6a:	1ac0      	subs	r0, r0, r3
   1be6c:	10c0      	asrs	r0, r0, #3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be6e:	4b0a      	ldr	r3, [pc, #40]	; (1be98 <schedule_rpl_store.constprop.0+0x30>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be70:	0942      	lsrs	r2, r0, #5
   1be72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be76:	2201      	movs	r2, #1
   1be78:	f000 001f 	and.w	r0, r0, #31
   1be7c:	4082      	lsls	r2, r0
   1be7e:	e8d3 0fef 	ldaex	r0, [r3]
   1be82:	4310      	orrs	r0, r2
   1be84:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1be88:	2900      	cmp	r1, #0
   1be8a:	d1f8      	bne.n	1be7e <schedule_rpl_store.constprop.0+0x16>
	if (force
#ifdef CONFIG_BT_MESH_RPL_STORE_TIMEOUT
	    || CONFIG_BT_MESH_RPL_STORE_TIMEOUT >= 0
#endif
	    ) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   1be8c:	2000      	movs	r0, #0
   1be8e:	f7ff bf75 	b.w	1bd7c <bt_mesh_settings_store_schedule>
   1be92:	bf00      	nop
   1be94:	2000a278 	.word	0x2000a278
   1be98:	2000ad20 	.word	0x2000ad20

0001be9c <clear_rpl.part.0>:
static void clear_rpl(struct bt_mesh_rpl *rpl)
   1be9c:	b510      	push	{r4, lr}
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   1be9e:	8803      	ldrh	r3, [r0, #0]
static void clear_rpl(struct bt_mesh_rpl *rpl)
   1bea0:	b08c      	sub	sp, #48	; 0x30
   1bea2:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   1bea4:	2112      	movs	r1, #18
   1bea6:	4a17      	ldr	r2, [pc, #92]	; (1bf04 <clear_rpl.part.0+0x68>)
   1bea8:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1beac:	a801      	add	r0, sp, #4
   1beae:	f00c fc8e 	bl	287ce <snprintk>
	err = settings_delete(path);
   1beb2:	a801      	add	r0, sp, #4
   1beb4:	f00d fc4e 	bl	29754 <settings_delete>
	if (err) {
   1beb8:	b150      	cbz	r0, 1bed0 <clear_rpl.part.0+0x34>
		LOG_ERR("Failed to clear RPL");
   1beba:	4b13      	ldr	r3, [pc, #76]	; (1bf08 <clear_rpl.part.0+0x6c>)
   1bebc:	930b      	str	r3, [sp, #44]	; 0x2c
   1bebe:	2302      	movs	r3, #2
   1bec0:	930a      	str	r3, [sp, #40]	; 0x28
   1bec2:	2300      	movs	r3, #0
   1bec4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bec8:	4810      	ldr	r0, [pc, #64]	; (1bf0c <clear_rpl.part.0+0x70>)
   1beca:	aa0a      	add	r2, sp, #40	; 0x28
   1becc:	f7ee fe46 	bl	ab5c <z_impl_z_log_msg_static_create>
	(void)memset(rpl, 0, sizeof(*rpl));
   1bed0:	2208      	movs	r2, #8
   1bed2:	4620      	mov	r0, r4
   1bed4:	2100      	movs	r1, #0
   1bed6:	f00e fb2b 	bl	2a530 <memset>
	return rpl - &replay_list[0];
   1beda:	4b0d      	ldr	r3, [pc, #52]	; (1bf10 <clear_rpl.part.0+0x74>)
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bedc:	4a0d      	ldr	r2, [pc, #52]	; (1bf14 <clear_rpl.part.0+0x78>)
   1bede:	1ae4      	subs	r4, r4, r3
   1bee0:	10e4      	asrs	r4, r4, #3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bee2:	0963      	lsrs	r3, r4, #5
   1bee4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bee8:	2301      	movs	r3, #1
   1beea:	f004 041f 	and.w	r4, r4, #31
   1beee:	40a3      	lsls	r3, r4
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bef0:	43db      	mvns	r3, r3
   1bef2:	e8d2 0fef 	ldaex	r0, [r2]
   1bef6:	4018      	ands	r0, r3
   1bef8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1befc:	2900      	cmp	r1, #0
   1befe:	d1f8      	bne.n	1bef2 <clear_rpl.part.0+0x56>
}
   1bf00:	b00c      	add	sp, #48	; 0x30
   1bf02:	bd10      	pop	{r4, pc}
   1bf04:	00033c8e 	.word	0x00033c8e
   1bf08:	00033c9d 	.word	0x00033c9d
   1bf0c:	0002fd0c 	.word	0x0002fd0c
   1bf10:	2000a278 	.word	0x2000a278
   1bf14:	2000ad20 	.word	0x2000ad20

0001bf18 <pre_rpl_set>:
		entry->old_iv);

	return 0;
}

BT_MESH_SETTINGS_DEFINE(rpl, "RPL", rpl_set);
   1bf18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf1c:	b089      	sub	sp, #36	; 0x24
   1bf1e:	4689      	mov	r9, r1
   1bf20:	4616      	mov	r6, r2
   1bf22:	4698      	mov	r8, r3
   1bf24:	af00      	add	r7, sp, #0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bf26:	4b3e      	ldr	r3, [pc, #248]	; (1c020 <pre_rpl_set+0x108>)
   1bf28:	e8d3 4faf 	lda	r4, [r3]
   1bf2c:	f014 0401 	ands.w	r4, r4, #1
   1bf30:	d00e      	beq.n	1bf50 <pre_rpl_set+0x38>
	if (!name) {
   1bf32:	b990      	cbnz	r0, 1bf5a <pre_rpl_set+0x42>
		LOG_ERR("Insufficient number of arguments");
   1bf34:	4b3b      	ldr	r3, [pc, #236]	; (1c024 <pre_rpl_set+0x10c>)
   1bf36:	61fb      	str	r3, [r7, #28]
   1bf38:	2302      	movs	r3, #2
   1bf3a:	61bb      	str	r3, [r7, #24]
		return -ENOENT;
   1bf3c:	f06f 0401 	mvn.w	r4, #1
   1bf40:	4603      	mov	r3, r0
   1bf42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bf46:	4838      	ldr	r0, [pc, #224]	; (1c028 <pre_rpl_set+0x110>)
   1bf48:	f107 0218 	add.w	r2, r7, #24
   1bf4c:	f7ee fe06 	bl	ab5c <z_impl_z_log_msg_static_create>
BT_MESH_SETTINGS_DEFINE(rpl, "RPL", rpl_set);
   1bf50:	4620      	mov	r0, r4
   1bf52:	3724      	adds	r7, #36	; 0x24
   1bf54:	46bd      	mov	sp, r7
   1bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	src = strtol(name, NULL, 16);
   1bf5a:	2100      	movs	r1, #0
   1bf5c:	2210      	movs	r2, #16
   1bf5e:	f00e f97c 	bl	2a25a <strtol>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1bf62:	2300      	movs	r3, #0
		if (replay_list[i].src == src) {
   1bf64:	4d31      	ldr	r5, [pc, #196]	; (1c02c <pre_rpl_set+0x114>)
   1bf66:	b281      	uxth	r1, r0
   1bf68:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
   1bf6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1bf70:	428a      	cmp	r2, r1
   1bf72:	d10b      	bne.n	1bf8c <pre_rpl_set+0x74>
			return &replay_list[i];
   1bf74:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
	if (len_rd == 0) {
   1bf78:	f1b9 0f00 	cmp.w	r9, #0
   1bf7c:	d118      	bne.n	1bfb0 <pre_rpl_set+0x98>
			(void)memset(entry, 0, sizeof(*entry));
   1bf7e:	2208      	movs	r2, #8
   1bf80:	4649      	mov	r1, r9
   1bf82:	4628      	mov	r0, r5
   1bf84:	f00e fad4 	bl	2a530 <memset>
		return 0;
   1bf88:	2400      	movs	r4, #0
BT_MESH_SETTINGS_DEFINE(rpl, "RPL", rpl_set);
   1bf8a:	e7e1      	b.n	1bf50 <pre_rpl_set+0x38>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1bf8c:	3301      	adds	r3, #1
   1bf8e:	2b0a      	cmp	r3, #10
   1bf90:	d1ea      	bne.n	1bf68 <pre_rpl_set+0x50>
	if (len_rd == 0) {
   1bf92:	f1b9 0f00 	cmp.w	r9, #0
   1bf96:	d0f7      	beq.n	1bf88 <pre_rpl_set+0x70>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1bf98:	2400      	movs	r4, #0
		if (!replay_list[i].src) {
   1bf9a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
   1bf9e:	f3c3 020e 	ubfx	r2, r3, #0, #15
   1bfa2:	b9d2      	cbnz	r2, 1bfda <pre_rpl_set+0xc2>
			replay_list[i].src = src;
   1bfa4:	f360 030e 	bfi	r3, r0, #0, #15
   1bfa8:	f825 3034 	strh.w	r3, [r5, r4, lsl #3]
			return &replay_list[i];
   1bfac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   1bfb0:	2304      	movs	r3, #4
   1bfb2:	4641      	mov	r1, r8
   1bfb4:	4630      	mov	r0, r6
   1bfb6:	18fa      	adds	r2, r7, r3
   1bfb8:	f7ff fea4 	bl	1bd04 <bt_mesh_settings_set>
	if (err) {
   1bfbc:	4604      	mov	r4, r0
   1bfbe:	b310      	cbz	r0, 1c006 <pre_rpl_set+0xee>
		LOG_ERR("Failed to set `net`");
   1bfc0:	4b1b      	ldr	r3, [pc, #108]	; (1c030 <pre_rpl_set+0x118>)
   1bfc2:	61fb      	str	r3, [r7, #28]
   1bfc4:	2302      	movs	r3, #2
   1bfc6:	61bb      	str	r3, [r7, #24]
   1bfc8:	2300      	movs	r3, #0
   1bfca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bfce:	4816      	ldr	r0, [pc, #88]	; (1c028 <pre_rpl_set+0x110>)
   1bfd0:	f107 0218 	add.w	r2, r7, #24
   1bfd4:	f7ee fdc2 	bl	ab5c <z_impl_z_log_msg_static_create>
		return err;
   1bfd8:	e7ba      	b.n	1bf50 <pre_rpl_set+0x38>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1bfda:	3401      	adds	r4, #1
   1bfdc:	2c0a      	cmp	r4, #10
   1bfde:	d1dc      	bne.n	1bf9a <pre_rpl_set+0x82>
			LOG_ERR("Unable to allocate RPL entry for 0x%04x", src);
   1bfe0:	466c      	mov	r4, sp
   1bfe2:	b088      	sub	sp, #32
   1bfe4:	466a      	mov	r2, sp
   1bfe6:	4b13      	ldr	r3, [pc, #76]	; (1c034 <pre_rpl_set+0x11c>)
   1bfe8:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1bfec:	2303      	movs	r3, #3
   1bfee:	f842 3f10 	str.w	r3, [r2, #16]!
   1bff2:	2300      	movs	r3, #0
   1bff4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bff8:	480b      	ldr	r0, [pc, #44]	; (1c028 <pre_rpl_set+0x110>)
   1bffa:	f7ee fdaf 	bl	ab5c <z_impl_z_log_msg_static_create>
   1bffe:	46a5      	mov	sp, r4
			return -ENOMEM;
   1c000:	f06f 040b 	mvn.w	r4, #11
   1c004:	e7a4      	b.n	1bf50 <pre_rpl_set+0x38>
	entry->seq = rpl.seq;
   1c006:	687b      	ldr	r3, [r7, #4]
	entry->old_iv = rpl.old_iv;
   1c008:	786a      	ldrb	r2, [r5, #1]
	entry->seq = rpl.seq;
   1c00a:	806b      	strh	r3, [r5, #2]
   1c00c:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1c010:	712b      	strb	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   1c012:	79fb      	ldrb	r3, [r7, #7]
   1c014:	f3c3 0300 	ubfx	r3, r3, #0, #1
   1c018:	f363 12c7 	bfi	r2, r3, #7, #1
   1c01c:	706a      	strb	r2, [r5, #1]
	return 0;
   1c01e:	e7b3      	b.n	1bf88 <pre_rpl_set+0x70>
   1c020:	20009ed0 	.word	0x20009ed0
   1c024:	00031b3e 	.word	0x00031b3e
   1c028:	0002fd0c 	.word	0x0002fd0c
   1c02c:	2000a278 	.word	0x2000a278
   1c030:	00033cd9 	.word	0x00033cd9
   1c034:	00033cb1 	.word	0x00033cb1

0001c038 <bt_mesh_rpl_check>:
{
   1c038:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1c03a:	7d06      	ldrb	r6, [r0, #20]
{
   1c03c:	4602      	mov	r2, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1c03e:	f006 0330 	and.w	r3, r6, #48	; 0x30
   1c042:	2b10      	cmp	r3, #16
{
   1c044:	b087      	sub	sp, #28
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1c046:	d00f      	beq.n	1c068 <bt_mesh_rpl_check+0x30>
	if (!rx->local_match) {
   1c048:	0677      	lsls	r7, r6, #25
   1c04a:	d50d      	bpl.n	1c068 <bt_mesh_rpl_check+0x30>
   1c04c:	481e      	ldr	r0, [pc, #120]	; (1c0c8 <bt_mesh_rpl_check+0x90>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c04e:	2300      	movs	r3, #0
   1c050:	4604      	mov	r4, r0
		if (!rpl->src) {
   1c052:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
   1c056:	f3c5 070e 	ubfx	r7, r5, #0, #15
   1c05a:	b947      	cbnz	r7, 1c06e <bt_mesh_rpl_check+0x36>
				if (match) {
   1c05c:	b109      	cbz	r1, 1c062 <bt_mesh_rpl_check+0x2a>
					*match = rpl;
   1c05e:	6008      	str	r0, [r1, #0]
   1c060:	e002      	b.n	1c068 <bt_mesh_rpl_check+0x30>
				bt_mesh_rpl_update(rpl, rx);
   1c062:	4611      	mov	r1, r2
   1c064:	f011 fba9 	bl	2d7ba <bt_mesh_rpl_update>
		return false;
   1c068:	2000      	movs	r0, #0
}
   1c06a:	b007      	add	sp, #28
   1c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
   1c06e:	8917      	ldrh	r7, [r2, #8]
   1c070:	f3c5 050e 	ubfx	r5, r5, #0, #15
   1c074:	42bd      	cmp	r5, r7
   1c076:	d115      	bne.n	1c0a4 <bt_mesh_rpl_check+0x6c>
			if (rx->old_iv && !rpl->old_iv) {
   1c078:	00dd      	lsls	r5, r3, #3
   1c07a:	07f6      	lsls	r6, r6, #31
   1c07c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1c080:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1c084:	d503      	bpl.n	1c08e <bt_mesh_rpl_check+0x56>
   1c086:	2b00      	cmp	r3, #0
   1c088:	db03      	blt.n	1c092 <bt_mesh_rpl_check+0x5a>
				return true;
   1c08a:	2001      	movs	r0, #1
   1c08c:	e7ed      	b.n	1c06a <bt_mesh_rpl_check+0x32>
			if ((!rx->old_iv && rpl->old_iv) ||
   1c08e:	2b00      	cmp	r3, #0
   1c090:	dbe4      	blt.n	1c05c <bt_mesh_rpl_check+0x24>
			    rpl->seq < rx->seq) {
   1c092:	442c      	add	r4, r5
   1c094:	8863      	ldrh	r3, [r4, #2]
   1c096:	7924      	ldrb	r4, [r4, #4]
   1c098:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			if ((!rx->old_iv && rpl->old_iv) ||
   1c09c:	6914      	ldr	r4, [r2, #16]
   1c09e:	42a3      	cmp	r3, r4
   1c0a0:	d3dc      	bcc.n	1c05c <bt_mesh_rpl_check+0x24>
   1c0a2:	e7f2      	b.n	1c08a <bt_mesh_rpl_check+0x52>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c0a4:	3301      	adds	r3, #1
   1c0a6:	2b0a      	cmp	r3, #10
   1c0a8:	f100 0008 	add.w	r0, r0, #8
   1c0ac:	d1d1      	bne.n	1c052 <bt_mesh_rpl_check+0x1a>
	LOG_ERR("RPL is full!");
   1c0ae:	4b07      	ldr	r3, [pc, #28]	; (1c0cc <bt_mesh_rpl_check+0x94>)
   1c0b0:	9305      	str	r3, [sp, #20]
   1c0b2:	2302      	movs	r3, #2
   1c0b4:	9304      	str	r3, [sp, #16]
   1c0b6:	2300      	movs	r3, #0
   1c0b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c0bc:	4804      	ldr	r0, [pc, #16]	; (1c0d0 <bt_mesh_rpl_check+0x98>)
   1c0be:	aa04      	add	r2, sp, #16
   1c0c0:	f7ee fd4c 	bl	ab5c <z_impl_z_log_msg_static_create>
	return true;
   1c0c4:	e7e1      	b.n	1c08a <bt_mesh_rpl_check+0x52>
   1c0c6:	bf00      	nop
   1c0c8:	2000a278 	.word	0x2000a278
   1c0cc:	00033ced 	.word	0x00033ced
   1c0d0:	0002fd0c 	.word	0x0002fd0c

0001c0d4 <bt_mesh_rpl_clear>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c0d4:	2201      	movs	r2, #1
   1c0d6:	4b06      	ldr	r3, [pc, #24]	; (1c0f0 <bt_mesh_rpl_clear+0x1c>)
   1c0d8:	e8d3 1fef 	ldaex	r1, [r3]
   1c0dc:	2900      	cmp	r1, #0
   1c0de:	d103      	bne.n	1c0e8 <bt_mesh_rpl_clear+0x14>
   1c0e0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1c0e4:	2800      	cmp	r0, #0
   1c0e6:	d1f7      	bne.n	1c0d8 <bt_mesh_rpl_clear+0x4>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   1c0e8:	2000      	movs	r0, #0
   1c0ea:	f7ff be47 	b.w	1bd7c <bt_mesh_settings_store_schedule>
   1c0ee:	bf00      	nop
   1c0f0:	2000ad1c 	.word	0x2000ad1c

0001c0f4 <bt_mesh_rpl_reset>:
{
   1c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c0f6:	2400      	movs	r4, #0
   1c0f8:	4f19      	ldr	r7, [pc, #100]	; (1c160 <bt_mesh_rpl_reset+0x6c>)
	int last = 0;
   1c0fa:	4620      	mov	r0, r4
	int shift = 0;
   1c0fc:	4625      	mov	r5, r4
   1c0fe:	463e      	mov	r6, r7
		if (rpl->src) {
   1c100:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   1c104:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1c108:	b153      	cbz	r3, 1c120 <bt_mesh_rpl_reset+0x2c>
			if (rpl->old_iv) {
   1c10a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   1c10e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1c112:	2a00      	cmp	r2, #0
   1c114:	da13      	bge.n	1c13e <bt_mesh_rpl_reset+0x4a>
	if (!rpl->src) {
   1c116:	4638      	mov	r0, r7
   1c118:	f7ff fec0 	bl	1be9c <clear_rpl.part.0>
				shift++;
   1c11c:	3501      	adds	r5, #1
					schedule_rpl_store(&replay_list[i - shift], true);
   1c11e:	4620      	mov	r0, r4
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c120:	3401      	adds	r4, #1
   1c122:	2c0a      	cmp	r4, #10
   1c124:	f107 0708 	add.w	r7, r7, #8
   1c128:	d1ea      	bne.n	1c100 <bt_mesh_rpl_reset+0xc>
	(void) memset(&replay_list[last - shift + 1], 0, sizeof(struct bt_mesh_rpl) * shift);
   1c12a:	1b40      	subs	r0, r0, r5
   1c12c:	3001      	adds	r0, #1
   1c12e:	00ea      	lsls	r2, r5, #3
   1c130:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
   1c134:	2100      	movs	r1, #0
}
   1c136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void) memset(&replay_list[last - shift + 1], 0, sizeof(struct bt_mesh_rpl) * shift);
   1c13a:	f00e b9f9 	b.w	2a530 <memset>
				rpl->old_iv = true;
   1c13e:	785a      	ldrb	r2, [r3, #1]
					replay_list[i - shift] = *rpl;
   1c140:	1b60      	subs	r0, r4, r5
				rpl->old_iv = true;
   1c142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1c146:	705a      	strb	r2, [r3, #1]
				if (shift > 0) {
   1c148:	00c0      	lsls	r0, r0, #3
   1c14a:	b125      	cbz	r5, 1c156 <bt_mesh_rpl_reset+0x62>
					replay_list[i - shift] = *rpl;
   1c14c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1c150:	1831      	adds	r1, r6, r0
   1c152:	e9c1 2300 	strd	r2, r3, [r1]
					schedule_rpl_store(&replay_list[i - shift], true);
   1c156:	4430      	add	r0, r6
   1c158:	f7ff fe86 	bl	1be68 <schedule_rpl_store.constprop.0>
   1c15c:	e7df      	b.n	1c11e <bt_mesh_rpl_reset+0x2a>
   1c15e:	bf00      	nop
   1c160:	2000a278 	.word	0x2000a278

0001c164 <bt_mesh_rpl_pending_store>:
		LOG_DBG("Stored RPL %s value", path);
	}
}

void bt_mesh_rpl_pending_store(uint16_t addr)
{
   1c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool clr;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
   1c168:	b203      	sxth	r3, r0
{
   1c16a:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
   1c16c:	2b00      	cmp	r3, #0
{
   1c16e:	4606      	mov	r6, r0
   1c170:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) ||
   1c172:	dc06      	bgt.n	1c182 <bt_mesh_rpl_pending_store+0x1e>
   1c174:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c178:	4298      	cmp	r0, r3
   1c17a:	d128      	bne.n	1c1ce <bt_mesh_rpl_pending_store+0x6a>
	     addr != BT_MESH_ADDR_ALL_NODES)) {
		return;
	}

	if (addr == BT_MESH_ADDR_ALL_NODES) {
		bt_mesh_settings_store_cancel(BT_MESH_SETTINGS_RPL_PENDING);
   1c17c:	2000      	movs	r0, #0
   1c17e:	f7ff fe4b 	bl	1be18 <bt_mesh_settings_store_cancel>
   1c182:	2400      	movs	r4, #0
   1c184:	4b4a      	ldr	r3, [pc, #296]	; (1c2b0 <bt_mesh_rpl_pending_store+0x14c>)
   1c186:	e8d3 2fef 	ldaex	r2, [r3]
   1c18a:	2a01      	cmp	r2, #1
   1c18c:	d103      	bne.n	1c196 <bt_mesh_rpl_pending_store+0x32>
   1c18e:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1c192:	2900      	cmp	r1, #0
   1c194:	d1f7      	bne.n	1c186 <bt_mesh_rpl_pending_store+0x22>
   1c196:	4d47      	ldr	r5, [pc, #284]	; (1c2b4 <bt_mesh_rpl_pending_store+0x150>)
   1c198:	bf0c      	ite	eq
   1c19a:	f04f 0b01 	moveq.w	fp, #1
   1c19e:	46a3      	movne	fp, r4
	}

	clr = atomic_cas(&clear, 1, 0);

	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c1a0:	46a8      	mov	r8, r5
		if (addr != BT_MESH_ADDR_ALL_NODES &&
   1c1a2:	f64f 7aff 	movw	sl, #65535	; 0xffff
   1c1a6:	4556      	cmp	r6, sl
   1c1a8:	d11b      	bne.n	1c1e2 <bt_mesh_rpl_pending_store+0x7e>
		    addr != replay_list[i].src) {
			continue;
		}

		if (clr) {
   1c1aa:	f1bb 0f00 	cmp.w	fp, #0
   1c1ae:	d027      	beq.n	1c200 <bt_mesh_rpl_pending_store+0x9c>
	if (!rpl->src) {
   1c1b0:	f838 3034 	ldrh.w	r3, [r8, r4, lsl #3]
   1c1b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1c1b8:	b16b      	cbz	r3, 1c1d6 <bt_mesh_rpl_pending_store+0x72>
   1c1ba:	4628      	mov	r0, r5
   1c1bc:	f7ff fe6e 	bl	1be9c <clear_rpl.part.0>
			clear_rpl(&replay_list[i]);
		} else if (atomic_test_and_clear_bit(store, rpl_idx(&replay_list[i]))) {
			store_rpl(&replay_list[i]);
		}

		if (addr != BT_MESH_ADDR_ALL_NODES) {
   1c1c0:	4556      	cmp	r6, sl
   1c1c2:	d104      	bne.n	1c1ce <bt_mesh_rpl_pending_store+0x6a>
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c1c4:	3401      	adds	r4, #1
   1c1c6:	2c0a      	cmp	r4, #10
   1c1c8:	f105 0508 	add.w	r5, r5, #8
   1c1cc:	d1ed      	bne.n	1c1aa <bt_mesh_rpl_pending_store+0x46>
			break;
		}
	}
}
   1c1ce:	3724      	adds	r7, #36	; 0x24
   1c1d0:	46bd      	mov	sp, r7
   1c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1c1d6:	3401      	adds	r4, #1
   1c1d8:	2c0a      	cmp	r4, #10
   1c1da:	f105 0508 	add.w	r5, r5, #8
   1c1de:	d1e2      	bne.n	1c1a6 <bt_mesh_rpl_pending_store+0x42>
   1c1e0:	e7f5      	b.n	1c1ce <bt_mesh_rpl_pending_store+0x6a>
		    addr != replay_list[i].src) {
   1c1e2:	f838 3034 	ldrh.w	r3, [r8, r4, lsl #3]
		if (addr != BT_MESH_ADDR_ALL_NODES &&
   1c1e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
   1c1ea:	42b2      	cmp	r2, r6
   1c1ec:	d1f3      	bne.n	1c1d6 <bt_mesh_rpl_pending_store+0x72>
		if (clr) {
   1c1ee:	f1bb 0f00 	cmp.w	fp, #0
   1c1f2:	d005      	beq.n	1c200 <bt_mesh_rpl_pending_store+0x9c>
	if (!rpl->src) {
   1c1f4:	2a00      	cmp	r2, #0
   1c1f6:	d0ea      	beq.n	1c1ce <bt_mesh_rpl_pending_store+0x6a>
   1c1f8:	4628      	mov	r0, r5
   1c1fa:	f7ff fe4f 	bl	1be9c <clear_rpl.part.0>
		if (addr != BT_MESH_ADDR_ALL_NODES) {
   1c1fe:	e7e6      	b.n	1c1ce <bt_mesh_rpl_pending_store+0x6a>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c200:	2201      	movs	r2, #1
	return rpl - &replay_list[0];
   1c202:	eba5 0308 	sub.w	r3, r5, r8
   1c206:	f3c3 01c4 	ubfx	r1, r3, #3, #5
   1c20a:	408a      	lsls	r2, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c20c:	43d0      	mvns	r0, r2
   1c20e:	119b      	asrs	r3, r3, #6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c210:	4929      	ldr	r1, [pc, #164]	; (1c2b8 <bt_mesh_rpl_pending_store+0x154>)
   1c212:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1c216:	f023 0303 	bic.w	r3, r3, #3
   1c21a:	440b      	add	r3, r1
   1c21c:	e8d3 1fef 	ldaex	r1, [r3]
   1c220:	ea01 0c00 	and.w	ip, r1, r0
   1c224:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c228:	f1be 0f00 	cmp.w	lr, #0
   1c22c:	d1f6      	bne.n	1c21c <bt_mesh_rpl_pending_store+0xb8>
		} else if (atomic_test_and_clear_bit(store, rpl_idx(&replay_list[i]))) {
   1c22e:	420a      	tst	r2, r1
   1c230:	d0c6      	beq.n	1c1c0 <bt_mesh_rpl_pending_store+0x5c>
	if (!entry->src) {
   1c232:	f838 3034 	ldrh.w	r3, [r8, r4, lsl #3]
   1c236:	f3c3 020e 	ubfx	r2, r3, #0, #15
   1c23a:	2a00      	cmp	r2, #0
   1c23c:	d0c0      	beq.n	1c1c0 <bt_mesh_rpl_pending_store+0x5c>
	rpl.seq = entry->seq;
   1c23e:	eb08 01c4 	add.w	r1, r8, r4, lsl #3
   1c242:	790a      	ldrb	r2, [r1, #4]
   1c244:	8848      	ldrh	r0, [r1, #2]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   1c246:	f107 090c 	add.w	r9, r7, #12
	rpl.seq = entry->seq;
   1c24a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   1c24e:	68ba      	ldr	r2, [r7, #8]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   1c250:	f3c3 030e 	ubfx	r3, r3, #0, #15
	rpl.seq = entry->seq;
   1c254:	f360 0217 	bfi	r2, r0, #0, #24
   1c258:	60ba      	str	r2, [r7, #8]
	rpl.old_iv = entry->old_iv;
   1c25a:	7849      	ldrb	r1, [r1, #1]
   1c25c:	f3c2 6207 	ubfx	r2, r2, #24, #8
   1c260:	09c9      	lsrs	r1, r1, #7
   1c262:	f361 0200 	bfi	r2, r1, #0, #1
   1c266:	72fa      	strb	r2, [r7, #11]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   1c268:	2112      	movs	r1, #18
   1c26a:	4a14      	ldr	r2, [pc, #80]	; (1c2bc <bt_mesh_rpl_pending_store+0x158>)
   1c26c:	4648      	mov	r0, r9
   1c26e:	f00c faae 	bl	287ce <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   1c272:	2204      	movs	r2, #4
   1c274:	4648      	mov	r0, r9
   1c276:	f107 0108 	add.w	r1, r7, #8
   1c27a:	f7ef ff2f 	bl	c0dc <settings_save_one>
	if (err) {
   1c27e:	2800      	cmp	r0, #0
   1c280:	d09e      	beq.n	1c1c0 <bt_mesh_rpl_pending_store+0x5c>
		LOG_ERR("Failed to store RPL %s value", path);
   1c282:	f8c7 d004 	str.w	sp, [r7, #4]
   1c286:	b088      	sub	sp, #32
   1c288:	466a      	mov	r2, sp
   1c28a:	4b0d      	ldr	r3, [pc, #52]	; (1c2c0 <bt_mesh_rpl_pending_store+0x15c>)
   1c28c:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1c290:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c294:	8393      	strh	r3, [r2, #28]
   1c296:	4b0b      	ldr	r3, [pc, #44]	; (1c2c4 <bt_mesh_rpl_pending_store+0x160>)
   1c298:	f842 3f10 	str.w	r3, [r2, #16]!
   1c29c:	2300      	movs	r3, #0
   1c29e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c2a2:	4809      	ldr	r0, [pc, #36]	; (1c2c8 <bt_mesh_rpl_pending_store+0x164>)
   1c2a4:	f7ee fc5a 	bl	ab5c <z_impl_z_log_msg_static_create>
   1c2a8:	f8d7 d004 	ldr.w	sp, [r7, #4]
   1c2ac:	e788      	b.n	1c1c0 <bt_mesh_rpl_pending_store+0x5c>
   1c2ae:	bf00      	nop
   1c2b0:	2000ad1c 	.word	0x2000ad1c
   1c2b4:	2000a278 	.word	0x2000a278
   1c2b8:	2000ad20 	.word	0x2000ad20
   1c2bc:	00033c8e 	.word	0x00033c8e
   1c2c0:	00033cfa 	.word	0x00033cfa
   1c2c4:	01000003 	.word	0x01000003
   1c2c8:	0002fd0c 	.word	0x0002fd0c

0001c2cc <friend_clear>:
	return frnd->recv_delay;
#endif
}

static void friend_clear(struct bt_mesh_friend *frnd)
{
   1c2cc:	b570      	push	{r4, r5, r6, lr}
   1c2ce:	4604      	mov	r4, r0
	int i;

	LOG_DBG("LPN 0x%04x", frnd->lpn);

	/* If cancelling the timer fails, we'll exit early in the work handler. */
	(void)k_work_cancel_delayable(&frnd->timer);
   1c2d0:	3060      	adds	r0, #96	; 0x60
   1c2d2:	f00a f9d7 	bl	26684 <k_work_cancel_delayable>

	memset(frnd->cred, 0, sizeof(frnd->cred));
   1c2d6:	2242      	movs	r2, #66	; 0x42
   1c2d8:	2100      	movs	r1, #0
   1c2da:	f104 0014 	add.w	r0, r4, #20
   1c2de:	f00e f927 	bl	2a530 <memset>

	if (frnd->last) {
   1c2e2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1c2e6:	b120      	cbz	r0, 1c2f2 <friend_clear+0x26>
		net_buf_unref(frnd->last);
   1c2e8:	f003 fef8 	bl	200dc <net_buf_unref>
		frnd->last = NULL;
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	}

	purge_buffers(&frnd->queue);
   1c2f2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1c2f6:	f011 fa7c 	bl	2d7f2 <purge_buffers>

	for (i = 0; i < ARRAY_SIZE(frnd->seg); i++) {
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];

		purge_buffers(&seg->queue);
   1c2fa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1c2fe:	f011 fa78 	bl	2d7f2 <purge_buffers>
		seg->seg_count = 0U;
   1c302:	2300      	movs	r3, #0
	}

	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1c304:	4d16      	ldr	r5, [pc, #88]	; (1c360 <friend_clear+0x94>)
   1c306:	4e17      	ldr	r6, [pc, #92]	; (1c364 <friend_clear+0x98>)
		seg->seg_count = 0U;
   1c308:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1c30c:	42b5      	cmp	r5, r6
   1c30e:	d913      	bls.n	1c338 <friend_clear+0x6c>
   1c310:	4915      	ldr	r1, [pc, #84]	; (1c368 <friend_clear+0x9c>)
   1c312:	4816      	ldr	r0, [pc, #88]	; (1c36c <friend_clear+0xa0>)
   1c314:	22b7      	movs	r2, #183	; 0xb7
   1c316:	f00c fc55 	bl	28bc4 <assert_print>
   1c31a:	21b7      	movs	r1, #183	; 0xb7
   1c31c:	4812      	ldr	r0, [pc, #72]	; (1c368 <friend_clear+0x9c>)
   1c31e:	f00c fc4a 	bl	28bb6 <assert_post_action>
		if (frnd->established && cb->terminated) {
   1c322:	78e3      	ldrb	r3, [r4, #3]
   1c324:	06db      	lsls	r3, r3, #27
   1c326:	d505      	bpl.n	1c334 <friend_clear+0x68>
   1c328:	686b      	ldr	r3, [r5, #4]
   1c32a:	b11b      	cbz	r3, 1c334 <friend_clear+0x68>
			cb->terminated(frnd->subnet->net_idx, frnd->lpn);
   1c32c:	6922      	ldr	r2, [r4, #16]
   1c32e:	8821      	ldrh	r1, [r4, #0]
   1c330:	8c10      	ldrh	r0, [r2, #32]
   1c332:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1c334:	350c      	adds	r5, #12
   1c336:	e7e9      	b.n	1c30c <friend_clear+0x40>
   1c338:	d3f3      	bcc.n	1c322 <friend_clear+0x56>
		}
	}

	frnd->counter++;
	frnd->subnet = NULL;
   1c33a:	2100      	movs	r1, #0
	frnd->counter++;
   1c33c:	89a3      	ldrh	r3, [r4, #12]
	frnd->subnet = NULL;
   1c33e:	6121      	str	r1, [r4, #16]
	frnd->counter++;
   1c340:	3301      	adds	r3, #1
   1c342:	81a3      	strh	r3, [r4, #12]
	frnd->established = 0U;
	frnd->pending_buf = 0U;
	frnd->fsn = 0U;
   1c344:	78e3      	ldrb	r3, [r4, #3]
	frnd->queue_size = 0U;
   1c346:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
	frnd->fsn = 0U;
   1c34a:	f023 031d 	bic.w	r3, r3, #29
   1c34e:	70e3      	strb	r3, [r4, #3]
	frnd->pending_req = 0U;
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   1c350:	f104 0056 	add.w	r0, r4, #86	; 0x56
   1c354:	2206      	movs	r2, #6
}
   1c356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   1c35a:	f00e b8e9 	b.w	2a530 <memset>
   1c35e:	bf00      	nop
   1c360:	0002fbec 	.word	0x0002fbec
   1c364:	0002fbec 	.word	0x0002fbec
   1c368:	00033d2f 	.word	0x00033d2f
   1c36c:	00030da5 	.word	0x00030da5

0001c370 <send_friend_clear>:
static const struct bt_mesh_send_cb clear_sent_cb = {
	.end = friend_clear_sent,
};

static void send_friend_clear(struct bt_mesh_friend *frnd)
{
   1c370:	b510      	push	{r4, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx  = frnd->subnet->net_idx,
   1c372:	6902      	ldr	r2, [r0, #16]
{
   1c374:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
   1c376:	8c11      	ldrh	r1, [r2, #32]
   1c378:	2300      	movs	r3, #0
   1c37a:	f8ad 1010 	strh.w	r1, [sp, #16]
   1c37e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c382:	f8ad 1012 	strh.w	r1, [sp, #18]
   1c386:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
   1c38a:	f8cd 3016 	str.w	r3, [sp, #22]
   1c38e:	f8ad 1014 	strh.w	r1, [sp, #20]
   1c392:	217f      	movs	r1, #127	; 0x7f
   1c394:	f88d 301a 	strb.w	r3, [sp, #26]
		.app_idx  = BT_MESH_KEY_UNUSED,
		.addr     = frnd->clear.frnd,
		.send_ttl = BT_MESH_TTL_MAX,
	};
	struct bt_mesh_net_tx tx = {
   1c398:	9309      	str	r3, [sp, #36]	; 0x24
   1c39a:	ab04      	add	r3, sp, #16
{
   1c39c:	4604      	mov	r4, r0
	struct bt_mesh_msg_ctx ctx = {
   1c39e:	f88d 101b 	strb.w	r1, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1c3a2:	9207      	str	r2, [sp, #28]
   1c3a4:	9308      	str	r3, [sp, #32]
		.sub  = frnd->subnet,
		.ctx  = &ctx,
		.src  = bt_mesh_primary_addr(),
   1c3a6:	f7fc ffb5 	bl	19314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   1c3aa:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   1c3ae:	f7f8 fbc3 	bl	14b38 <bt_mesh_net_transmit_get>
	};
	struct bt_mesh_ctl_friend_clear req = {
   1c3b2:	8823      	ldrh	r3, [r4, #0]
	struct bt_mesh_net_tx tx = {
   1c3b4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	struct bt_mesh_ctl_friend_clear req = {
   1c3b8:	ba5b      	rev16	r3, r3
   1c3ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c3be:	8963      	ldrh	r3, [r4, #10]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
	};

	LOG_DBG("");

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   1c3c0:	2105      	movs	r1, #5
	struct bt_mesh_ctl_friend_clear req = {
   1c3c2:	ba5b      	rev16	r3, r3
   1c3c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   1c3c8:	4b04      	ldr	r3, [pc, #16]	; (1c3dc <send_friend_clear+0x6c>)
   1c3ca:	9401      	str	r4, [sp, #4]
   1c3cc:	9300      	str	r3, [sp, #0]
   1c3ce:	aa03      	add	r2, sp, #12
   1c3d0:	2304      	movs	r3, #4
   1c3d2:	a807      	add	r0, sp, #28
   1c3d4:	f7fb f920 	bl	17618 <bt_mesh_ctl_send>
			 sizeof(req), &clear_sent_cb, frnd);
}
   1c3d8:	b00a      	add	sp, #40	; 0x28
   1c3da:	bd10      	pop	{r4, pc}
   1c3dc:	000308f8 	.word	0x000308f8

0001c3e0 <enqueue_update.part.0>:
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   1c3e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to encode Friend Update");
   1c3e2:	4b06      	ldr	r3, [pc, #24]	; (1c3fc <enqueue_update.part.0+0x1c>)
   1c3e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c3e8:	9305      	str	r3, [sp, #20]
   1c3ea:	2302      	movs	r3, #2
   1c3ec:	4804      	ldr	r0, [pc, #16]	; (1c400 <enqueue_update.part.0+0x20>)
   1c3ee:	aa04      	add	r2, sp, #16
   1c3f0:	9304      	str	r3, [sp, #16]
   1c3f2:	f011 faa3 	bl	2d93c <z_log_msg_static_create.constprop.0>
}
   1c3f6:	b007      	add	sp, #28
   1c3f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1c3fc:	00033d61 	.word	0x00033d61
   1c400:	0002fc94 	.word	0x0002fc94

0001c404 <friend_queue_prepare_space>:
	return someone_has_space;
}

static bool friend_queue_prepare_space(struct bt_mesh_friend *frnd, uint16_t addr,
				       const uint64_t *seq_auth, uint8_t seg_count)
{
   1c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1c408:	2b10      	cmp	r3, #16
{
   1c40a:	4605      	mov	r5, r0
   1c40c:	461f      	mov	r7, r3
   1c40e:	b087      	sub	sp, #28
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1c410:	d81f      	bhi.n	1c452 <friend_queue_prepare_space+0x4e>
   1c412:	f011 fafc 	bl	2da0e <friend_queue_has_space.part.0>
	bool pending_segments;
	uint8_t avail_space;

	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
   1c416:	4606      	mov	r6, r0
   1c418:	b1d8      	cbz	r0, 1c452 <friend_queue_prepare_space+0x4e>
		return false;
	}

	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
	pending_segments = false;
   1c41a:	f04f 0900 	mov.w	r9, #0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   1c41e:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8

	while (pending_segments || avail_space < seg_count) {
		struct net_buf *buf = (void *)net_buf_slist_get(&frnd->queue);
   1c422:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   1c426:	f1c4 0410 	rsb	r4, r4, #16
   1c42a:	b2e4      	uxtb	r4, r4
	while (pending_segments || avail_space < seg_count) {
   1c42c:	f1b9 0f00 	cmp.w	r9, #0
   1c430:	d101      	bne.n	1c436 <friend_queue_prepare_space+0x32>
   1c432:	42bc      	cmp	r4, r7
   1c434:	d20e      	bcs.n	1c454 <friend_queue_prepare_space+0x50>
		struct net_buf *buf = (void *)net_buf_slist_get(&frnd->queue);
   1c436:	4640      	mov	r0, r8
   1c438:	f003 fdea 	bl	20010 <net_buf_slist_get>

		if (!buf) {
   1c43c:	b970      	cbnz	r0, 1c45c <friend_queue_prepare_space+0x58>
			LOG_ERR("Unable to free up enough buffers");
   1c43e:	4b0e      	ldr	r3, [pc, #56]	; (1c478 <friend_queue_prepare_space+0x74>)
   1c440:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c444:	9305      	str	r3, [sp, #20]
   1c446:	2302      	movs	r3, #2
   1c448:	480c      	ldr	r0, [pc, #48]	; (1c47c <friend_queue_prepare_space+0x78>)
   1c44a:	aa04      	add	r2, sp, #16
   1c44c:	9304      	str	r3, [sp, #16]
   1c44e:	f011 fa75 	bl	2d93c <z_log_msg_static_create.constprop.0>
		return false;
   1c452:	2600      	movs	r6, #0

		net_buf_unref(buf);
	}

	return true;
}
   1c454:	4630      	mov	r0, r6
   1c456:	b007      	add	sp, #28
   1c458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		frnd->queue_size--;
   1c45c:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
		avail_space++;
   1c460:	3401      	adds	r4, #1
		frnd->queue_size--;
   1c462:	3a01      	subs	r2, #1
   1c464:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
		pending_segments = FRIEND_ADV(buf)->seg;
   1c468:	6983      	ldr	r3, [r0, #24]
		avail_space++;
   1c46a:	b2e4      	uxtb	r4, r4
		pending_segments = FRIEND_ADV(buf)->seg;
   1c46c:	f893 9002 	ldrb.w	r9, [r3, #2]
		net_buf_unref(buf);
   1c470:	f003 fe34 	bl	200dc <net_buf_unref>
   1c474:	e7da      	b.n	1c42c <friend_queue_prepare_space+0x28>
   1c476:	bf00      	nop
   1c478:	00033d80 	.word	0x00033d80
   1c47c:	0002fc94 	.word	0x0002fc94

0001c480 <enqueue_friend_pdu.part.0>:
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   1c480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c484:	4616      	mov	r6, r2
   1c486:	af00      	add	r7, sp, #0
   1c488:	6a3d      	ldr	r5, [r7, #32]
   1c48a:	4699      	mov	r9, r3
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   1c48c:	68eb      	ldr	r3, [r5, #12]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
   1c48e:	f100 0a90 	add.w	sl, r0, #144	; 0x90
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   1c492:	895a      	ldrh	r2, [r3, #10]
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   1c494:	4604      	mov	r4, r0
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   1c496:	ba52      	rev16	r2, r2
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   1c498:	4688      	mov	r8, r1
		if (is_seg(seg, src, seq_zero)) {
   1c49a:	4650      	mov	r0, sl
   1c49c:	4631      	mov	r1, r6
   1c49e:	f3c2 028c 	ubfx	r2, r2, #2, #13
   1c4a2:	f011 fa84 	bl	2d9ae <is_seg>
   1c4a6:	b920      	cbnz	r0, 1c4b2 <enqueue_friend_pdu.part.0+0x32>
		if (!unassigned && !sys_slist_peek_head(&seg->queue)) {
   1c4a8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1c4ac:	bb13      	cbnz	r3, 1c4f4 <enqueue_friend_pdu.part.0+0x74>
		unassigned->seg_count = seg_count;
   1c4ae:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98
	net_buf_slist_put(&seg->queue, buf);
   1c4b2:	4629      	mov	r1, r5
   1c4b4:	4650      	mov	r0, sl
   1c4b6:	f003 fd59 	bl	1ff6c <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   1c4ba:	f1b8 0f02 	cmp.w	r8, #2
   1c4be:	d130      	bne.n	1c522 <enqueue_friend_pdu.part.0+0xa2>
	return list->head;
   1c4c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
Z_GENLIST_APPEND_LIST(slist, snode)
   1c4c4:	b14b      	cbz	r3, 1c4da <enqueue_friend_pdu.part.0+0x5a>
	return list->tail;
   1c4c6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
Z_GENLIST_APPEND_LIST(slist, snode)
   1c4ca:	b132      	cbz	r2, 1c4da <enqueue_friend_pdu.part.0+0x5a>
	return list->tail;
   1c4cc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
Z_GENLIST_APPEND_LIST(slist, snode)
   1c4d0:	bb29      	cbnz	r1, 1c51e <enqueue_friend_pdu.part.0+0x9e>
	list->head = node;
   1c4d2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	list->tail = node;
   1c4d6:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
	list->head = NULL;
   1c4da:	2300      	movs	r3, #0
		frnd->queue_size += seg->seg_count;
   1c4dc:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
   1c4e0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->tail = NULL;
   1c4e4:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
   1c4e8:	440a      	add	r2, r1
   1c4ea:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		seg->seg_count = 0U;
   1c4ee:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
   1c4f2:	e011      	b.n	1c518 <enqueue_friend_pdu.part.0+0x98>
		LOG_ERR("No free friend segment RX contexts for 0x%04x", src);
   1c4f4:	466c      	mov	r4, sp
   1c4f6:	b088      	sub	sp, #32
   1c4f8:	466a      	mov	r2, sp
   1c4fa:	4b0c      	ldr	r3, [pc, #48]	; (1c52c <enqueue_friend_pdu.part.0+0xac>)
   1c4fc:	480c      	ldr	r0, [pc, #48]	; (1c530 <enqueue_friend_pdu.part.0+0xb0>)
   1c4fe:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1c502:	2303      	movs	r3, #3
   1c504:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c508:	f842 3f10 	str.w	r3, [r2, #16]!
   1c50c:	f011 fa16 	bl	2d93c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1c510:	4628      	mov	r0, r5
   1c512:	46a5      	mov	sp, r4
   1c514:	f003 fde2 	bl	200dc <net_buf_unref>
}
   1c518:	46bd      	mov	sp, r7
   1c51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
   1c51e:	600b      	str	r3, [r1, #0]
}
   1c520:	e7d9      	b.n	1c4d6 <enqueue_friend_pdu.part.0+0x56>
		FRIEND_ADV(buf)->seg = true;
   1c522:	2201      	movs	r2, #1
   1c524:	69ab      	ldr	r3, [r5, #24]
   1c526:	709a      	strb	r2, [r3, #2]
   1c528:	e7f6      	b.n	1c518 <enqueue_friend_pdu.part.0+0x98>
   1c52a:	bf00      	nop
   1c52c:	00033da1 	.word	0x00033da1
   1c530:	0002fc94 	.word	0x0002fc94

0001c534 <create_friend_pdu.constprop.0>:
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   1c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1c536:	2200      	movs	r2, #0
   1c538:	4604      	mov	r4, r0
   1c53a:	2300      	movs	r3, #0
   1c53c:	481d      	ldr	r0, [pc, #116]	; (1c5b4 <create_friend_pdu.constprop.0+0x80>)
   1c53e:	460f      	mov	r7, r1
   1c540:	f011 fc6d 	bl	2de1e <net_buf_alloc_fixed>
	if (!buf) {
   1c544:	4606      	mov	r6, r0
   1c546:	b390      	cbz	r0, 1c5ae <create_friend_pdu.constprop.0+0x7a>
	FRIEND_ADV(buf) = adv_alloc(net_buf_id(buf));
   1c548:	f003 fbee 	bl	1fd28 <net_buf_id>
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
   1c54c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c550:	4b19      	ldr	r3, [pc, #100]	; (1c5b8 <create_friend_pdu.constprop.0+0x84>)
	return net_buf_simple_add_u8(&buf->b, val);
   1c552:	f106 050c 	add.w	r5, r6, #12
   1c556:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
	adv_pool[id].seg = false;
   1c55a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1c55e:	2300      	movs	r3, #0
   1c560:	7083      	strb	r3, [r0, #2]
	FRIEND_ADV(buf) = adv_alloc(net_buf_id(buf));
   1c562:	61b0      	str	r0, [r6, #24]
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
   1c564:	68a1      	ldr	r1, [r4, #8]
   1c566:	4628      	mov	r0, r5
   1c568:	01c9      	lsls	r1, r1, #7
   1c56a:	f001 0180 	and.w	r1, r1, #128	; 0x80
   1c56e:	f011 fcc0 	bl	2def2 <net_buf_simple_add_u8>
	if (info->ctl) {
   1c572:	f994 3007 	ldrsb.w	r3, [r4, #7]
   1c576:	79e1      	ldrb	r1, [r4, #7]
   1c578:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
   1c57a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1c57e:	bfb8      	it	lt
   1c580:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
   1c584:	4628      	mov	r0, r5
   1c586:	f011 fcb4 	bl	2def2 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c58a:	2203      	movs	r2, #3
   1c58c:	1d21      	adds	r1, r4, #4
   1c58e:	4628      	mov	r0, r5
   1c590:	f011 fca3 	bl	2deda <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&buf->b, val);
   1c594:	4628      	mov	r0, r5
   1c596:	8821      	ldrh	r1, [r4, #0]
   1c598:	f011 fcbb 	bl	2df12 <net_buf_simple_add_be16>
   1c59c:	4628      	mov	r0, r5
   1c59e:	8861      	ldrh	r1, [r4, #2]
   1c5a0:	f011 fcb7 	bl	2df12 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c5a4:	4628      	mov	r0, r5
   1c5a6:	88ba      	ldrh	r2, [r7, #4]
   1c5a8:	6839      	ldr	r1, [r7, #0]
   1c5aa:	f011 fc96 	bl	2deda <net_buf_simple_add_mem>
}
   1c5ae:	4630      	mov	r0, r6
   1c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5b2:	bf00      	nop
   1c5b4:	20009028 	.word	0x20009028
   1c5b8:	2000b152 	.word	0x2000b152

0001c5bc <encode_friend_ctl>:
{
   1c5bc:	b530      	push	{r4, r5, lr}
   1c5be:	4605      	mov	r5, r0
   1c5c0:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   1c5c2:	4610      	mov	r0, r2
{
   1c5c4:	4614      	mov	r4, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   1c5c6:	f011 fc46 	bl	2de56 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
   1c5ca:	f7fc fea3 	bl	19314 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
   1c5ce:	882b      	ldrh	r3, [r5, #0]
	info.src = bt_mesh_primary_addr();
   1c5d0:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.dst = frnd->lpn;
   1c5d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ttl = 0U;
   1c5d8:	2380      	movs	r3, #128	; 0x80
	memset(info.seq, 0, sizeof(info.seq));
   1c5da:	2203      	movs	r2, #3
   1c5dc:	2100      	movs	r1, #0
   1c5de:	a802      	add	r0, sp, #8
	info.ttl = 0U;
   1c5e0:	f88d 300b 	strb.w	r3, [sp, #11]
	memset(info.seq, 0, sizeof(info.seq));
   1c5e4:	f00d ffa4 	bl	2a530 <memset>
	info.iv_index = BT_MESH_NET_IVI_TX;
   1c5e8:	4a07      	ldr	r2, [pc, #28]	; (1c608 <encode_friend_ctl+0x4c>)
   1c5ea:	f852 3b08 	ldr.w	r3, [r2], #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c5ee:	e8d2 2faf 	lda	r2, [r2]
   1c5f2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c5f6:	1a9b      	subs	r3, r3, r2
	return create_friend_pdu(frnd, &info, sdu);
   1c5f8:	4621      	mov	r1, r4
   1c5fa:	a801      	add	r0, sp, #4
	info.iv_index = BT_MESH_NET_IVI_TX;
   1c5fc:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
   1c5fe:	f7ff ff99 	bl	1c534 <create_friend_pdu.constprop.0>
}
   1c602:	b005      	add	sp, #20
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	bf00      	nop
   1c608:	20009ec8 	.word	0x20009ec8

0001c60c <enqueue_update.constprop.0>:
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   1c60c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   1c610:	b530      	push	{r4, r5, lr}
   1c612:	b087      	sub	sp, #28
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   1c614:	ab01      	add	r3, sp, #4
   1c616:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c61a:	9303      	str	r3, [sp, #12]
	__ASSERT_NO_MSG(friend_is_allocated(frnd));
   1c61c:	6903      	ldr	r3, [r0, #16]
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   1c61e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(friend_is_allocated(frnd));
   1c620:	b953      	cbnz	r3, 1c638 <enqueue_update.constprop.0+0x2c>
   1c622:	491b      	ldr	r1, [pc, #108]	; (1c690 <enqueue_update.constprop.0+0x84>)
   1c624:	481b      	ldr	r0, [pc, #108]	; (1c694 <enqueue_update.constprop.0+0x88>)
   1c626:	f240 222e 	movw	r2, #558	; 0x22e
   1c62a:	f00c facb 	bl	28bc4 <assert_print>
   1c62e:	f240 212e 	movw	r1, #558	; 0x22e
   1c632:	4817      	ldr	r0, [pc, #92]	; (1c690 <enqueue_update.constprop.0+0x84>)
   1c634:	f00c fabf 	bl	28bb6 <assert_post_action>
	net_buf_simple_reserve(&sdu, 1);
   1c638:	2101      	movs	r1, #1
   1c63a:	a803      	add	r0, sp, #12
   1c63c:	f003 fc76 	bl	1ff2c <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
   1c640:	2106      	movs	r1, #6
   1c642:	a803      	add	r0, sp, #12
   1c644:	f003 fe84 	bl	20350 <net_buf_simple_add>
   1c648:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(frnd->subnet);
   1c64a:	6920      	ldr	r0, [r4, #16]
   1c64c:	f7f9 fe46 	bl	162dc <bt_mesh_net_flags>
   1c650:	4b11      	ldr	r3, [pc, #68]	; (1c698 <enqueue_update.constprop.0+0x8c>)
   1c652:	7028      	strb	r0, [r5, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   1c654:	681b      	ldr	r3, [r3, #0]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1c656:	2102      	movs	r1, #2
   1c658:	ba1b      	rev	r3, r3
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   1c65a:	f8c5 3001 	str.w	r3, [r5, #1]
	upd->md = md;
   1c65e:	2300      	movs	r3, #0
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1c660:	4620      	mov	r0, r4
	upd->md = md;
   1c662:	716b      	strb	r3, [r5, #5]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1c664:	aa03      	add	r2, sp, #12
   1c666:	f7ff ffa9 	bl	1c5bc <encode_friend_ctl>
	if (!buf) {
   1c66a:	4601      	mov	r1, r0
   1c66c:	b920      	cbnz	r0, 1c678 <enqueue_update.constprop.0+0x6c>
}
   1c66e:	b007      	add	sp, #28
   1c670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c674:	f7ff beb4 	b.w	1c3e0 <enqueue_update.part.0>
	net_buf_slist_put(&frnd->queue, buf);
   1c678:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1c67c:	f003 fc76 	bl	1ff6c <net_buf_slist_put>
	frnd->queue_size++;
   1c680:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1c684:	3301      	adds	r3, #1
   1c686:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   1c68a:	b007      	add	sp, #28
   1c68c:	bd30      	pop	{r4, r5, pc}
   1c68e:	bf00      	nop
   1c690:	00033d2f 	.word	0x00033d2f
   1c694:	00030da5 	.word	0x00030da5
   1c698:	20009ec8 	.word	0x20009ec8

0001c69c <subnet_evt.part.0>:
static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
   1c69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6a0:	4681      	mov	r9, r0
   1c6a2:	468a      	mov	sl, r1
   1c6a4:	2602      	movs	r6, #2
   1c6a6:	b083      	sub	sp, #12
   1c6a8:	4c30      	ldr	r4, [pc, #192]	; (1c76c <subnet_evt.part.0+0xd0>)
   1c6aa:	af02      	add	r7, sp, #8
		if (frnd->subnet != sub) {
   1c6ac:	f854 3c25 	ldr.w	r3, [r4, #-37]
   1c6b0:	4625      	mov	r5, r4
   1c6b2:	454b      	cmp	r3, r9
   1c6b4:	d10a      	bne.n	1c6cc <subnet_evt.part.0+0x30>
		switch (evt) {
   1c6b6:	f10a 33ff 	add.w	r3, sl, #4294967295
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1c6ba:	f1a4 0835 	sub.w	r8, r4, #53	; 0x35
		switch (evt) {
   1c6be:	2b03      	cmp	r3, #3
   1c6c0:	d804      	bhi.n	1c6cc <subnet_evt.part.0+0x30>
   1c6c2:	e8df f003 	tbb	[pc, r3]
   1c6c6:	0f0b      	.short	0x0f0b
   1c6c8:	434e      	.short	0x434e
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1c6ca:	462c      	mov	r4, r5
   1c6cc:	3e01      	subs	r6, #1
   1c6ce:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
   1c6d2:	d1eb      	bne.n	1c6ac <subnet_evt.part.0+0x10>
}
   1c6d4:	3704      	adds	r7, #4
   1c6d6:	46bd      	mov	sp, r7
   1c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			friend_clear(frnd);
   1c6dc:	4640      	mov	r0, r8
   1c6de:	f7ff fdf5 	bl	1c2cc <friend_clear>
			break;
   1c6e2:	e7f3      	b.n	1c6cc <subnet_evt.part.0+0x30>
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1c6e4:	f835 bc35 	ldrh.w	fp, [r5, #-53]
   1c6e8:	f7fc fe14 	bl	19314 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   1c6ec:	f855 1c25 	ldr.w	r1, [r5, #-37]
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1c6f0:	f835 3c2b 	ldrh.w	r3, [r5, #-43]
					  frnd->subnet->keys[idx].net);
   1c6f4:	318b      	adds	r1, #139	; 0x8b
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1c6f6:	9101      	str	r1, [sp, #4]
   1c6f8:	f835 1c29 	ldrh.w	r1, [r5, #-41]
   1c6fc:	4602      	mov	r2, r0
   1c6fe:	9100      	str	r1, [sp, #0]
   1c700:	4628      	mov	r0, r5
   1c702:	4659      	mov	r1, fp
   1c704:	f00f fe48 	bl	2c398 <bt_mesh_friend_cred_create>
			if (err) {
   1c708:	2800      	cmp	r0, #0
   1c70a:	d0df      	beq.n	1c6cc <subnet_evt.part.0+0x30>
				LOG_ERR("Failed updating friend cred for 0x%04x", frnd->lpn);
   1c70c:	f835 3c35 	ldrh.w	r3, [r5, #-53]
   1c710:	466d      	mov	r5, sp
   1c712:	b088      	sub	sp, #32
   1c714:	aa02      	add	r2, sp, #8
   1c716:	4916      	ldr	r1, [pc, #88]	; (1c770 <subnet_evt.part.0+0xd4>)
   1c718:	4816      	ldr	r0, [pc, #88]	; (1c774 <subnet_evt.part.0+0xd8>)
   1c71a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c71e:	2303      	movs	r3, #3
   1c720:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c724:	f842 3f10 	str.w	r3, [r2, #16]!
   1c728:	f011 f908 	bl	2d93c <z_log_msg_static_create.constprop.0>
				friend_clear(frnd);
   1c72c:	4640      	mov	r0, r8
   1c72e:	46ad      	mov	sp, r5
   1c730:	f7ff fdcc 	bl	1c2cc <friend_clear>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1c734:	3e01      	subs	r6, #1
   1c736:	d0cd      	beq.n	1c6d4 <subnet_evt.part.0+0x38>
		if (frnd->subnet != sub) {
   1c738:	f8d4 30c3 	ldr.w	r3, [r4, #195]	; 0xc3
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1c73c:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		if (frnd->subnet != sub) {
   1c740:	4599      	cmp	r9, r3
   1c742:	d1c2      	bne.n	1c6ca <subnet_evt.part.0+0x2e>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1c744:	f104 08b3 	add.w	r8, r4, #179	; 0xb3
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1c748:	462c      	mov	r4, r5
   1c74a:	e7cb      	b.n	1c6e4 <subnet_evt.part.0+0x48>
			memcpy(&frnd->cred[0], &frnd->cred[1],
   1c74c:	2221      	movs	r2, #33	; 0x21
   1c74e:	4621      	mov	r1, r4
   1c750:	f1a4 0021 	sub.w	r0, r4, #33	; 0x21
   1c754:	f00d fee1 	bl	2a51a <memcpy>
			memset(&frnd->cred[1], 0, sizeof(frnd->cred[1]));
   1c758:	2221      	movs	r2, #33	; 0x21
   1c75a:	2100      	movs	r1, #0
   1c75c:	4620      	mov	r0, r4
   1c75e:	f00d fee7 	bl	2a530 <memset>
			enqueue_update(frnd, 0);
   1c762:	4640      	mov	r0, r8
   1c764:	f7ff ff52 	bl	1c60c <enqueue_update.constprop.0>
			break;
   1c768:	e7b0      	b.n	1c6cc <subnet_evt.part.0+0x30>
   1c76a:	bf00      	nop
   1c76c:	20009f25 	.word	0x20009f25
   1c770:	00033dcf 	.word	0x00033dcf
   1c774:	0002fc94 	.word	0x0002fc94

0001c778 <encrypt_friend_pdu>:
{
   1c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   1c77c:	6903      	ldr	r3, [r0, #16]
{
   1c77e:	460d      	mov	r5, r1
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   1c780:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
{
   1c784:	4680      	mov	r8, r0
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   1c786:	1ea1      	subs	r1, r4, #2
   1c788:	424c      	negs	r4, r1
{
   1c78a:	b092      	sub	sp, #72	; 0x48
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   1c78c:	414c      	adcs	r4, r1
	if (flooding_cred) {
   1c78e:	2a00      	cmp	r2, #0
   1c790:	d061      	beq.n	1c856 <encrypt_friend_pdu+0xde>
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   1c792:	225a      	movs	r2, #90	; 0x5a
   1c794:	fb02 3304 	mla	r3, r2, r4, r3
   1c798:	f103 0441 	add.w	r4, r3, #65	; 0x41
	if (bt_mesh_has_addr(src)) {
   1c79c:	462f      	mov	r7, r5
   1c79e:	f857 3f0c 	ldr.w	r3, [r7, #12]!
   1c7a2:	f8b3 0005 	ldrh.w	r0, [r3, #5]
   1c7a6:	ba40      	rev16	r0, r0
   1c7a8:	b280      	uxth	r0, r0
   1c7aa:	f7fc fdcd 	bl	19348 <bt_mesh_has_addr>
   1c7ae:	2800      	cmp	r0, #0
   1c7b0:	f000 80c6 	beq.w	1c940 <encrypt_friend_pdu+0x1c8>
		if (FRIEND_ADV(buf)->app_idx != BT_MESH_KEY_UNUSED) {
   1c7b4:	69ab      	ldr	r3, [r5, #24]
   1c7b6:	881e      	ldrh	r6, [r3, #0]
   1c7b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c7bc:	429e      	cmp	r6, r3
   1c7be:	f000 8090 	beq.w	1c8e2 <encrypt_friend_pdu+0x16a>
	err = unseg_app_sdu_unpack(frnd, buf, &meta);
   1c7c2:	f8d8 8010 	ldr.w	r8, [r8, #16]
	struct bt_mesh_net_rx net = {
   1c7c6:	2218      	movs	r2, #24
   1c7c8:	2100      	movs	r1, #0
   1c7ca:	a804      	add	r0, sp, #16
   1c7cc:	f00d feb0 	bl	2a530 <memset>
   1c7d0:	f8b8 3020 	ldrh.w	r3, [r8, #32]
	bt_mesh_net_header_parse(&buf->b, &net);
   1c7d4:	4638      	mov	r0, r7
   1c7d6:	a904      	add	r1, sp, #16
	struct bt_mesh_net_rx net = {
   1c7d8:	f8ad 3014 	strh.w	r3, [sp, #20]
   1c7dc:	f8ad 6016 	strh.w	r6, [sp, #22]
	meta->subnet = frnd->subnet;
   1c7e0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	bt_mesh_net_header_parse(&buf->b, &net);
   1c7e4:	f7f9 fa20 	bl	15c28 <bt_mesh_net_header_parse>
	err = bt_mesh_keys_resolve(&net.ctx, &net.sub, &meta->key, &meta->aid);
   1c7e8:	ab11      	add	r3, sp, #68	; 0x44
   1c7ea:	aa0f      	add	r2, sp, #60	; 0x3c
   1c7ec:	a904      	add	r1, sp, #16
   1c7ee:	a805      	add	r0, sp, #20
   1c7f0:	f7fa f9ee 	bl	16bd0 <bt_mesh_keys_resolve>
	if (err) {
   1c7f4:	bb60      	cbnz	r0, 1c850 <encrypt_friend_pdu+0xd8>
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   1c7f6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 1c96c <encrypt_friend_pdu+0x1f4>
	meta->crypto.src = net.ctx.addr;
   1c7fa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   1c7fe:	4642      	mov	r2, r8
	meta->crypto.src = net.ctx.addr;
   1c800:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	meta->crypto.dst = net.ctx.recv_dst;
   1c804:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1c808:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   1c80c:	f852 3b08 	ldr.w	r3, [r2], #8
   1c810:	e8d2 2faf 	lda	r2, [r2]
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   1c814:	3603      	adds	r6, #3
   1c816:	b2b6      	uxth	r6, r6
   1c818:	2e01      	cmp	r6, #1
   1c81a:	bf8c      	ite	hi
   1c81c:	2600      	movhi	r6, #0
   1c81e:	2601      	movls	r6, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   1c820:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c824:	1a9b      	subs	r3, r3, r2
   1c826:	930d      	str	r3, [sp, #52]	; 0x34
	meta->crypto.seq_num = net.seq;
   1c828:	9b08      	ldr	r3, [sp, #32]
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   1c82a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
	meta->crypto.seq_num = net.seq;
   1c82e:	930c      	str	r3, [sp, #48]	; 0x30
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   1c830:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
	meta->crypto.aszmic = 0;
   1c834:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   1c838:	f483 4200 	eor.w	r2, r3, #32768	; 0x8000
   1c83c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1c840:	d20e      	bcs.n	1c860 <encrypt_friend_pdu+0xe8>
		meta->crypto.ad = bt_mesh_va_label_get(meta->crypto.dst);
   1c842:	4618      	mov	r0, r3
   1c844:	f7fa ffca 	bl	177dc <bt_mesh_va_label_get>
   1c848:	900e      	str	r0, [sp, #56]	; 0x38
		if (!meta->crypto.ad) {
   1c84a:	b950      	cbnz	r0, 1c862 <encrypt_friend_pdu+0xea>
			return -ENOENT;
   1c84c:	f06f 0001 	mvn.w	r0, #1
}
   1c850:	b012      	add	sp, #72	; 0x48
   1c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cred = &frnd->cred[SUBNET_KEY_TX_IDX(frnd->subnet)];
   1c856:	eb04 1444 	add.w	r4, r4, r4, lsl #5
   1c85a:	3414      	adds	r4, #20
   1c85c:	4404      	add	r4, r0
   1c85e:	e79d      	b.n	1c79c <encrypt_friend_pdu+0x24>
		meta->crypto.ad = NULL;
   1c860:	900e      	str	r0, [sp, #56]	; 0x38
	if (meta.crypto.seq_num == bt_mesh.seq) {
   1c862:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c868:	429a      	cmp	r2, r3
   1c86a:	d03a      	beq.n	1c8e2 <encrypt_friend_pdu+0x16a>
	net_buf_simple_clone(&buf->b, &in);
   1c86c:	4638      	mov	r0, r7
   1c86e:	a901      	add	r1, sp, #4
   1c870:	f011 fae2 	bl	2de38 <net_buf_simple_clone>
	net_buf_simple_pull(&in, BT_MESH_NET_HDR_LEN);
   1c874:	2109      	movs	r1, #9
   1c876:	a801      	add	r0, sp, #4
   1c878:	f003 fd36 	bl	202e8 <net_buf_simple_pull>
	net_buf_simple_pull(&in, 1);
   1c87c:	2101      	movs	r1, #1
   1c87e:	a801      	add	r0, sp, #4
   1c880:	f003 fd32 	bl	202e8 <net_buf_simple_pull>
	in.len -= BT_MESH_MIC_SHORT;
   1c884:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	net_buf_simple_clone(&in, &out);
   1c888:	a904      	add	r1, sp, #16
	in.len -= BT_MESH_MIC_SHORT;
   1c88a:	3b04      	subs	r3, #4
	net_buf_simple_clone(&in, &out);
   1c88c:	a801      	add	r0, sp, #4
	in.len -= BT_MESH_MIC_SHORT;
   1c88e:	f8ad 3008 	strh.w	r3, [sp, #8]
	net_buf_simple_clone(&in, &out);
   1c892:	f011 fad1 	bl	2de38 <net_buf_simple_clone>
	out.len = 0; /* length will be set by decrypt */
   1c896:	2300      	movs	r3, #0
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &in, &out);
   1c898:	980f      	ldr	r0, [sp, #60]	; 0x3c
	out.len = 0; /* length will be set by decrypt */
   1c89a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &in, &out);
   1c89e:	aa01      	add	r2, sp, #4
   1c8a0:	ab04      	add	r3, sp, #16
   1c8a2:	a90a      	add	r1, sp, #40	; 0x28
   1c8a4:	f010 f93f 	bl	2cb26 <bt_mesh_app_decrypt>
	if (err) {
   1c8a8:	2800      	cmp	r0, #0
   1c8aa:	d1d1      	bne.n	1c850 <encrypt_friend_pdu+0xd8>
	meta.crypto.seq_num = bt_mesh.seq;
   1c8ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	net_buf_simple_clone(&buf->b, &sdu);
   1c8b0:	4638      	mov	r0, r7
   1c8b2:	a904      	add	r1, sp, #16
	meta.crypto.seq_num = bt_mesh.seq;
   1c8b4:	930c      	str	r3, [sp, #48]	; 0x30
	net_buf_simple_clone(&buf->b, &sdu);
   1c8b6:	f011 fabf 	bl	2de38 <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, BT_MESH_NET_HDR_LEN);
   1c8ba:	2109      	movs	r1, #9
   1c8bc:	a804      	add	r0, sp, #16
   1c8be:	f003 fd13 	bl	202e8 <net_buf_simple_pull>
	net_buf_simple_pull(&sdu, 1);
   1c8c2:	2101      	movs	r1, #1
   1c8c4:	a804      	add	r0, sp, #16
   1c8c6:	f003 fd0f 	bl	202e8 <net_buf_simple_pull>
	sdu.len -= BT_MESH_MIC_SHORT;
   1c8ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1c8ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
	sdu.len -= BT_MESH_MIC_SHORT;
   1c8d0:	3b04      	subs	r3, #4
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1c8d2:	aa04      	add	r2, sp, #16
   1c8d4:	a90a      	add	r1, sp, #40	; 0x28
	sdu.len -= BT_MESH_MIC_SHORT;
   1c8d6:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1c8da:	f010 f8fb 	bl	2cad4 <bt_mesh_app_encrypt>
			if (err) {
   1c8de:	2800      	cmp	r0, #0
   1c8e0:	d1b6      	bne.n	1c850 <encrypt_friend_pdu+0xd8>
		seq = bt_mesh_next_seq();
   1c8e2:	f7f9 f81d 	bl	15920 <bt_mesh_next_seq>
		sys_put_be24(seq, &buf->data[2]);
   1c8e6:	68eb      	ldr	r3, [r5, #12]
	dst[0] = val >> 16;
   1c8e8:	0c02      	lsrs	r2, r0, #16
   1c8ea:	709a      	strb	r2, [r3, #2]
	dst[0] = val >> 8;
   1c8ec:	f3c0 2207 	ubfx	r2, r0, #8, #8
   1c8f0:	70da      	strb	r2, [r3, #3]
	dst[1] = val;
   1c8f2:	7118      	strb	r0, [r3, #4]
		iv_index = BT_MESH_NET_IVI_TX;
   1c8f4:	4b1d      	ldr	r3, [pc, #116]	; (1c96c <encrypt_friend_pdu+0x1f4>)
   1c8f6:	f853 6b08 	ldr.w	r6, [r3], #8
   1c8fa:	e8d3 3faf 	lda	r3, [r3]
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   1c8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
		iv_index = BT_MESH_NET_IVI_TX;
   1c902:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1c906:	1af6      	subs	r6, r6, r3
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   1c908:	69ab      	ldr	r3, [r5, #24]
   1c90a:	801a      	strh	r2, [r3, #0]
	buf->data[0] = (cred->nid | (iv_index & 1) << 7);
   1c90c:	4620      	mov	r0, r4
   1c90e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c912:	68ea      	ldr	r2, [r5, #12]
   1c914:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
   1c918:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(cred->enc, &buf->b, iv_index, false)) {
   1c91a:	4639      	mov	r1, r7
   1c91c:	2300      	movs	r3, #0
   1c91e:	4632      	mov	r2, r6
   1c920:	f010 f836 	bl	2c990 <bt_mesh_net_encrypt>
   1c924:	b1b0      	cbz	r0, 1c954 <encrypt_friend_pdu+0x1dc>
		LOG_ERR("Encrypting failed");
   1c926:	4b12      	ldr	r3, [pc, #72]	; (1c970 <encrypt_friend_pdu+0x1f8>)
		LOG_ERR("Obfuscating failed");
   1c928:	930f      	str	r3, [sp, #60]	; 0x3c
   1c92a:	2302      	movs	r3, #2
   1c92c:	4811      	ldr	r0, [pc, #68]	; (1c974 <encrypt_friend_pdu+0x1fc>)
   1c92e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c932:	aa0e      	add	r2, sp, #56	; 0x38
   1c934:	930e      	str	r3, [sp, #56]	; 0x38
   1c936:	f011 f801 	bl	2d93c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1c93a:	f06f 0015 	mvn.w	r0, #21
   1c93e:	e787      	b.n	1c850 <encrypt_friend_pdu+0xd8>
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   1c940:	4b0a      	ldr	r3, [pc, #40]	; (1c96c <encrypt_friend_pdu+0x1f4>)
   1c942:	681e      	ldr	r6, [r3, #0]
		uint8_t ivi = (buf->data[0] >> 7);
   1c944:	68eb      	ldr	r3, [r5, #12]
   1c946:	781a      	ldrb	r2, [r3, #0]
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   1c948:	f006 0301 	and.w	r3, r6, #1
   1c94c:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   1c950:	1af6      	subs	r6, r6, r3
   1c952:	e7db      	b.n	1c90c <encrypt_friend_pdu+0x194>
	if (bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy)) {
   1c954:	4631      	mov	r1, r6
   1c956:	68e8      	ldr	r0, [r5, #12]
   1c958:	f104 0211 	add.w	r2, r4, #17
   1c95c:	f7fb fff6 	bl	1894c <bt_mesh_net_obfuscate>
   1c960:	2800      	cmp	r0, #0
   1c962:	f43f af75 	beq.w	1c850 <encrypt_friend_pdu+0xd8>
		LOG_ERR("Obfuscating failed");
   1c966:	4b04      	ldr	r3, [pc, #16]	; (1c978 <encrypt_friend_pdu+0x200>)
   1c968:	e7de      	b.n	1c928 <encrypt_friend_pdu+0x1b0>
   1c96a:	bf00      	nop
   1c96c:	20009ec8 	.word	0x20009ec8
   1c970:	00033df6 	.word	0x00033df6
   1c974:	0002fc94 	.word	0x0002fc94
   1c978:	00033e08 	.word	0x00033e08

0001c97c <enqueue_sub_cfm>:
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   1c97c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
   1c980:	b530      	push	{r4, r5, lr}
   1c982:	b08b      	sub	sp, #44	; 0x2c
   1c984:	460d      	mov	r5, r1
   1c986:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
   1c988:	2101      	movs	r1, #1
   1c98a:	a801      	add	r0, sp, #4
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   1c98c:	9302      	str	r3, [sp, #8]
   1c98e:	f8cd d004 	str.w	sp, [sp, #4]
   1c992:	f8cd d00c 	str.w	sp, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
   1c996:	f003 fac9 	bl	1ff2c <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   1c99a:	2101      	movs	r1, #1
   1c99c:	a801      	add	r0, sp, #4
   1c99e:	f003 fcd7 	bl	20350 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   1c9a2:	2109      	movs	r1, #9
	cfm->xact = xact;
   1c9a4:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   1c9a6:	aa01      	add	r2, sp, #4
   1c9a8:	4620      	mov	r0, r4
   1c9aa:	f7ff fe07 	bl	1c5bc <encode_friend_ctl>
	if (!buf) {
   1c9ae:	4605      	mov	r5, r0
   1c9b0:	b958      	cbnz	r0, 1c9ca <enqueue_sub_cfm+0x4e>
		LOG_ERR("Unable to encode Subscription List Confirmation");
   1c9b2:	4b0f      	ldr	r3, [pc, #60]	; (1c9f0 <enqueue_sub_cfm+0x74>)
   1c9b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c9b8:	9309      	str	r3, [sp, #36]	; 0x24
   1c9ba:	2302      	movs	r3, #2
   1c9bc:	480d      	ldr	r0, [pc, #52]	; (1c9f4 <enqueue_sub_cfm+0x78>)
   1c9be:	aa08      	add	r2, sp, #32
   1c9c0:	9308      	str	r3, [sp, #32]
   1c9c2:	f010 ffbb 	bl	2d93c <z_log_msg_static_create.constprop.0>
}
   1c9c6:	b00b      	add	sp, #44	; 0x2c
   1c9c8:	bd30      	pop	{r4, r5, pc}
	if (encrypt_friend_pdu(frnd, buf, false)) {
   1c9ca:	4601      	mov	r1, r0
   1c9cc:	2200      	movs	r2, #0
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	f7ff fed2 	bl	1c778 <encrypt_friend_pdu>
   1c9d4:	2800      	cmp	r0, #0
   1c9d6:	d1f6      	bne.n	1c9c6 <enqueue_sub_cfm+0x4a>
	if (frnd->last) {
   1c9d8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1c9dc:	b108      	cbz	r0, 1c9e2 <enqueue_sub_cfm+0x66>
		net_buf_unref(frnd->last);
   1c9de:	f003 fb7d 	bl	200dc <net_buf_unref>
	frnd->send_last = 1U;
   1c9e2:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   1c9e4:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   1c9e8:	f043 0302 	orr.w	r3, r3, #2
   1c9ec:	70e3      	strb	r3, [r4, #3]
   1c9ee:	e7ea      	b.n	1c9c6 <enqueue_sub_cfm+0x4a>
   1c9f0:	00033e1b 	.word	0x00033e1b
   1c9f4:	0002fc94 	.word	0x0002fc94

0001c9f8 <friend_timeout>:
{
   1c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!friend_is_allocated(frnd)) {
   1c9fc:	f850 3c50 	ldr.w	r3, [r0, #-80]
{
   1ca00:	4604      	mov	r4, r0
   1ca02:	b088      	sub	sp, #32
	struct bt_mesh_friend *frnd = CONTAINER_OF(dwork, struct bt_mesh_friend,
   1ca04:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (!friend_is_allocated(frnd)) {
   1ca08:	b36b      	cbz	r3, 1ca66 <friend_timeout+0x6e>
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   1ca0a:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1ca0e:	f013 0208 	ands.w	r2, r3, #8
   1ca12:	d00a      	beq.n	1ca2a <friend_timeout+0x32>
   1ca14:	494a      	ldr	r1, [pc, #296]	; (1cb40 <friend_timeout+0x148>)
   1ca16:	484b      	ldr	r0, [pc, #300]	; (1cb44 <friend_timeout+0x14c>)
   1ca18:	f240 42d5 	movw	r2, #1237	; 0x4d5
   1ca1c:	f00c f8d2 	bl	28bc4 <assert_print>
   1ca20:	f240 41d5 	movw	r1, #1237	; 0x4d5
   1ca24:	4846      	ldr	r0, [pc, #280]	; (1cb40 <friend_timeout+0x148>)
   1ca26:	f00c f8c6 	bl	28bb6 <assert_post_action>
	if (frnd->send_last && frnd->last) {
   1ca2a:	0799      	lsls	r1, r3, #30
   1ca2c:	d51e      	bpl.n	1ca6c <friend_timeout+0x74>
   1ca2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1ca30:	b1e1      	cbz	r1, 1ca6c <friend_timeout+0x74>
		frnd->send_last = 0U;
   1ca32:	f362 0341 	bfi	r3, r2, #1, #1
   1ca36:	f800 3c5d 	strb.w	r3, [r0, #-93]
				 FRIEND_XMIT, K_NO_WAIT);
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	2300      	movs	r3, #0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, BT_MESH_FRIEND_ADV,
   1ca3e:	e9cd 2300 	strd	r2, r3, [sp]
   1ca42:	2208      	movs	r2, #8
   1ca44:	2001      	movs	r0, #1
   1ca46:	4611      	mov	r1, r2
   1ca48:	f7f8 f996 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   1ca4c:	4605      	mov	r5, r0
   1ca4e:	2800      	cmp	r0, #0
   1ca50:	d15d      	bne.n	1cb0e <friend_timeout+0x116>
		LOG_ERR("Unable to allocate friend adv buffer");
   1ca52:	4b3d      	ldr	r3, [pc, #244]	; (1cb48 <friend_timeout+0x150>)
   1ca54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ca58:	9307      	str	r3, [sp, #28]
   1ca5a:	2302      	movs	r3, #2
   1ca5c:	483b      	ldr	r0, [pc, #236]	; (1cb4c <friend_timeout+0x154>)
   1ca5e:	aa06      	add	r2, sp, #24
   1ca60:	9306      	str	r3, [sp, #24]
   1ca62:	f010 ff6b 	bl	2d93c <z_log_msg_static_create.constprop.0>
}
   1ca66:	b008      	add	sp, #32
   1ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (frnd->established && !frnd->pending_req) {
   1ca6c:	f003 0314 	and.w	r3, r3, #20
   1ca70:	2b10      	cmp	r3, #16
   1ca72:	d105      	bne.n	1ca80 <friend_timeout+0x88>
		friend_clear(frnd);
   1ca74:	4630      	mov	r0, r6
}
   1ca76:	b008      	add	sp, #32
   1ca78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		friend_clear(frnd);
   1ca7c:	f7ff bc26 	b.w	1c2cc <friend_clear>
	frnd->last = (void *)net_buf_slist_get(&frnd->queue);
   1ca80:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1ca84:	f003 fac4 	bl	20010 <net_buf_slist_get>
   1ca88:	4605      	mov	r5, r0
   1ca8a:	63e0      	str	r0, [r4, #60]	; 0x3c
	if (!frnd->last) {
   1ca8c:	2800      	cmp	r0, #0
   1ca8e:	d0f1      	beq.n	1ca74 <friend_timeout+0x7c>
	if (buf->len != 16) {
   1ca90:	8a03      	ldrh	r3, [r0, #16]
   1ca92:	2b10      	cmp	r3, #16
   1ca94:	d130      	bne.n	1caf8 <friend_timeout+0x100>
	net_buf_simple_save(&buf->b, &state);
   1ca96:	f100 080c 	add.w	r8, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1ca9a:	4640      	mov	r0, r8
	return list->head;
   1ca9c:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   1caa0:	f011 fa0f 	bl	2dec2 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   1caa4:	2101      	movs	r1, #1
   1caa6:	4607      	mov	r7, r0
   1caa8:	4628      	mov	r0, r5
	state->len = buf->len;
   1caaa:	f8b5 a010 	ldrh.w	sl, [r5, #16]
   1caae:	f010 ff48 	bl	2d942 <net_buf_skip.isra.0>
	return net_buf_simple_pull_u8(&buf->b);
   1cab2:	4640      	mov	r0, r8
   1cab4:	f011 f9e2 	bl	2de7c <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   1cab8:	0603      	lsls	r3, r0, #24
   1caba:	d517      	bpl.n	1caec <friend_timeout+0xf4>
	net_buf_skip(buf, 7); /* skip seqnum src dec*/
   1cabc:	2107      	movs	r1, #7
   1cabe:	4628      	mov	r0, r5
   1cac0:	f010 ff3f 	bl	2d942 <net_buf_skip.isra.0>
	return net_buf_simple_pull_mem(&buf->b, len);
   1cac4:	2101      	movs	r1, #1
   1cac6:	4640      	mov	r0, r8
   1cac8:	f003 fc28 	bl	2031c <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1))
   1cacc:	7803      	ldrb	r3, [r0, #0]
   1cace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cad2:	2b02      	cmp	r3, #2
   1cad4:	d10a      	bne.n	1caec <friend_timeout+0xf4>
   1cad6:	2106      	movs	r1, #6
   1cad8:	4640      	mov	r0, r8
   1cada:	f003 fc1f 	bl	2031c <net_buf_simple_pull_mem>
	md = (uint8_t)(sys_slist_peek_head(&frnd->queue) != NULL);
   1cade:	f1b9 0900 	subs.w	r9, r9, #0
   1cae2:	bf18      	it	ne
   1cae4:	f04f 0901 	movne.w	r9, #1
   1cae8:	f880 9005 	strb.w	r9, [r0, #5]
	buf->data = buf->__buf + state->offset;
   1caec:	696b      	ldr	r3, [r5, #20]
	buf->len = state->len;
   1caee:	f8a5 a010 	strh.w	sl, [r5, #16]
	buf->data = buf->__buf + state->offset;
   1caf2:	fa13 f787 	uxtah	r7, r3, r7
   1caf6:	60ef      	str	r7, [r5, #12]
	if (encrypt_friend_pdu(frnd, frnd->last, false)) {
   1caf8:	2200      	movs	r2, #0
   1cafa:	4630      	mov	r0, r6
   1cafc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1cafe:	f7ff fe3b 	bl	1c778 <encrypt_friend_pdu>
   1cb02:	2800      	cmp	r0, #0
   1cb04:	d1af      	bne.n	1ca66 <friend_timeout+0x6e>
	frnd->queue_size--;
   1cb06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1cb08:	3b01      	subs	r3, #1
   1cb0a:	64a3      	str	r3, [r4, #72]	; 0x48
   1cb0c:	e795      	b.n	1ca3a <friend_timeout+0x42>
	net_buf_add_mem(buf, frnd->last->data, frnd->last->len);
   1cb0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cb10:	300c      	adds	r0, #12
   1cb12:	8a1a      	ldrh	r2, [r3, #16]
   1cb14:	68d9      	ldr	r1, [r3, #12]
   1cb16:	f011 f9e0 	bl	2deda <net_buf_simple_add_mem>
	frnd->pending_req = 0U;
   1cb1a:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
   1cb1e:	4628      	mov	r0, r5
	frnd->pending_buf = 1U;
   1cb20:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1cb24:	f043 0308 	orr.w	r3, r3, #8
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
   1cb28:	4632      	mov	r2, r6
   1cb2a:	4909      	ldr	r1, [pc, #36]	; (1cb50 <friend_timeout+0x158>)
	frnd->pending_buf = 1U;
   1cb2c:	f804 3c5d 	strb.w	r3, [r4, #-93]
	bt_mesh_adv_send(buf, &buf_sent_cb, frnd);
   1cb30:	f7f8 f946 	bl	14dc0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   1cb34:	4628      	mov	r0, r5
}
   1cb36:	b008      	add	sp, #32
   1cb38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   1cb3c:	f003 bace 	b.w	200dc <net_buf_unref>
   1cb40:	00033d2f 	.word	0x00033d2f
   1cb44:	00030da5 	.word	0x00030da5
   1cb48:	00033e4b 	.word	0x00033e4b
   1cb4c:	0002fc94 	.word	0x0002fc94
   1cb50:	000308f0 	.word	0x000308f0

0001cb54 <bt_mesh_friend_find>:
{
   1cb54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb56:	4d17      	ldr	r5, [pc, #92]	; (1cbb4 <bt_mesh_friend_find+0x60>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1cb58:	2600      	movs	r6, #0
   1cb5a:	462c      	mov	r4, r5
		if (net_idx != BT_MESH_KEY_ANY &&
   1cb5c:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (valid && !friend_is_allocated(frnd)) {
   1cb60:	b10a      	cbz	r2, 1cb66 <bt_mesh_friend_find+0x12>
   1cb62:	6baf      	ldr	r7, [r5, #56]	; 0x38
   1cb64:	b1d7      	cbz	r7, 1cb9c <bt_mesh_friend_find+0x48>
		if (established && !frnd->established) {
   1cb66:	b133      	cbz	r3, 1cb76 <bt_mesh_friend_find+0x22>
   1cb68:	27e8      	movs	r7, #232	; 0xe8
   1cb6a:	fb07 4706 	mla	r7, r7, r6, r4
   1cb6e:	f897 702b 	ldrb.w	r7, [r7, #43]	; 0x2b
   1cb72:	06ff      	lsls	r7, r7, #27
   1cb74:	d512      	bpl.n	1cb9c <bt_mesh_friend_find+0x48>
		if (net_idx != BT_MESH_KEY_ANY &&
   1cb76:	4570      	cmp	r0, lr
   1cb78:	d004      	beq.n	1cb84 <bt_mesh_friend_find+0x30>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   1cb7a:	6baf      	ldr	r7, [r5, #56]	; 0x38
		if (net_idx != BT_MESH_KEY_ANY &&
   1cb7c:	b177      	cbz	r7, 1cb9c <bt_mesh_friend_find+0x48>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   1cb7e:	8c3f      	ldrh	r7, [r7, #32]
   1cb80:	4287      	cmp	r7, r0
   1cb82:	d10b      	bne.n	1cb9c <bt_mesh_friend_find+0x48>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   1cb84:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
   1cb88:	f1bc 0f00 	cmp.w	ip, #0
   1cb8c:	d006      	beq.n	1cb9c <bt_mesh_friend_find+0x48>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   1cb8e:	4561      	cmp	r1, ip
   1cb90:	d304      	bcc.n	1cb9c <bt_mesh_friend_find+0x48>
   1cb92:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   1cb96:	4467      	add	r7, ip
   1cb98:	42b9      	cmp	r1, r7
   1cb9a:	db05      	blt.n	1cba8 <bt_mesh_friend_find+0x54>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1cb9c:	35e8      	adds	r5, #232	; 0xe8
   1cb9e:	b10e      	cbz	r6, 1cba4 <bt_mesh_friend_find+0x50>
	return NULL;
   1cba0:	2000      	movs	r0, #0
}
   1cba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1cba4:	2601      	movs	r6, #1
   1cba6:	e7db      	b.n	1cb60 <bt_mesh_friend_find+0xc>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1cba8:	23e8      	movs	r3, #232	; 0xe8
   1cbaa:	fb03 4006 	mla	r0, r3, r6, r4
   1cbae:	3028      	adds	r0, #40	; 0x28
   1cbb0:	e7f7      	b.n	1cba2 <bt_mesh_friend_find+0x4e>
   1cbb2:	bf00      	nop
   1cbb4:	20009ec8 	.word	0x20009ec8

0001cbb8 <bt_mesh_friends_clear>:
{
   1cbb8:	b510      	push	{r4, lr}
	return frnd->subnet != NULL;
   1cbba:	4c08      	ldr	r4, [pc, #32]	; (1cbdc <bt_mesh_friends_clear+0x24>)
		if (!friend_is_allocated(frnd)) {
   1cbbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cbbe:	b11b      	cbz	r3, 1cbc8 <bt_mesh_friends_clear+0x10>
		friend_clear(frnd);
   1cbc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cbc4:	f7ff fb82 	bl	1c2cc <friend_clear>
		if (!friend_is_allocated(frnd)) {
   1cbc8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1cbcc:	b123      	cbz	r3, 1cbd8 <bt_mesh_friends_clear+0x20>
}
   1cbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		friend_clear(frnd);
   1cbd2:	4803      	ldr	r0, [pc, #12]	; (1cbe0 <bt_mesh_friends_clear+0x28>)
   1cbd4:	f7ff bb7a 	b.w	1c2cc <friend_clear>
}
   1cbd8:	bd10      	pop	{r4, pc}
   1cbda:	bf00      	nop
   1cbdc:	20009ec8 	.word	0x20009ec8
   1cbe0:	20009fd8 	.word	0x20009fd8

0001cbe4 <bt_mesh_friend_sec_update>:
{
   1cbe4:	b538      	push	{r3, r4, r5, lr}
	return frnd->subnet != NULL;
   1cbe6:	4c15      	ldr	r4, [pc, #84]	; (1cc3c <bt_mesh_friend_sec_update+0x58>)
{
   1cbe8:	4605      	mov	r5, r0
	return frnd->subnet != NULL;
   1cbea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (!friend_is_allocated(frnd)) {
   1cbec:	b1d3      	cbz	r3, 1cc24 <bt_mesh_friend_sec_update+0x40>
		if (net_idx == BT_MESH_KEY_ANY ||
   1cbee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cbf2:	4290      	cmp	r0, r2
   1cbf4:	d10b      	bne.n	1cc0e <bt_mesh_friend_sec_update+0x2a>
			enqueue_update(frnd, 0x00);
   1cbf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cbfa:	f7ff fd07 	bl	1c60c <enqueue_update.constprop.0>
		if (!friend_is_allocated(frnd)) {
   1cbfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1cc02:	b173      	cbz	r3, 1cc22 <bt_mesh_friend_sec_update+0x3e>
}
   1cc04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			enqueue_update(frnd, 0x00);
   1cc08:	480d      	ldr	r0, [pc, #52]	; (1cc40 <bt_mesh_friend_sec_update+0x5c>)
   1cc0a:	f7ff bcff 	b.w	1c60c <enqueue_update.constprop.0>
		if (net_idx == BT_MESH_KEY_ANY ||
   1cc0e:	8c1b      	ldrh	r3, [r3, #32]
   1cc10:	4283      	cmp	r3, r0
   1cc12:	d103      	bne.n	1cc1c <bt_mesh_friend_sec_update+0x38>
			enqueue_update(frnd, 0x00);
   1cc14:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cc18:	f7ff fcf8 	bl	1c60c <enqueue_update.constprop.0>
	return frnd->subnet != NULL;
   1cc1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
		if (!friend_is_allocated(frnd)) {
   1cc20:	b943      	cbnz	r3, 1cc34 <bt_mesh_friend_sec_update+0x50>
}
   1cc22:	bd38      	pop	{r3, r4, r5, pc}
	return frnd->subnet != NULL;
   1cc24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
		if (!friend_is_allocated(frnd)) {
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d0fa      	beq.n	1cc22 <bt_mesh_friend_sec_update+0x3e>
		if (net_idx == BT_MESH_KEY_ANY ||
   1cc2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cc30:	4290      	cmp	r0, r2
   1cc32:	d0e7      	beq.n	1cc04 <bt_mesh_friend_sec_update+0x20>
   1cc34:	8c1b      	ldrh	r3, [r3, #32]
   1cc36:	42ab      	cmp	r3, r5
   1cc38:	d1f3      	bne.n	1cc22 <bt_mesh_friend_sec_update+0x3e>
   1cc3a:	e7e3      	b.n	1cc04 <bt_mesh_friend_sec_update+0x20>
   1cc3c:	20009ec8 	.word	0x20009ec8
   1cc40:	20009fd8 	.word	0x20009fd8

0001cc44 <bt_mesh_friend_poll>:
{
   1cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*msg)) {
   1cc46:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
   1cc48:	680e      	ldr	r6, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   1cc4a:	2b00      	cmp	r3, #0
   1cc4c:	d066      	beq.n	1cd1c <bt_mesh_friend_poll+0xd8>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   1cc4e:	6804      	ldr	r4, [r0, #0]
   1cc50:	8901      	ldrh	r1, [r0, #8]
   1cc52:	2300      	movs	r3, #0
   1cc54:	8c20      	ldrh	r0, [r4, #32]
   1cc56:	2201      	movs	r2, #1
   1cc58:	f7ff ff7c 	bl	1cb54 <bt_mesh_friend_find>
	if (!frnd) {
   1cc5c:	4604      	mov	r4, r0
   1cc5e:	b908      	cbnz	r0, 1cc64 <bt_mesh_friend_poll+0x20>
		return 0;
   1cc60:	2000      	movs	r0, #0
}
   1cc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (msg->fsn & ~1) {
   1cc64:	7833      	ldrb	r3, [r6, #0]
   1cc66:	2b01      	cmp	r3, #1
   1cc68:	d858      	bhi.n	1cd1c <bt_mesh_friend_poll+0xd8>
	if (frnd->pending_buf) {
   1cc6a:	78c3      	ldrb	r3, [r0, #3]
   1cc6c:	f013 0508 	ands.w	r5, r3, #8
   1cc70:	d1f6      	bne.n	1cc60 <bt_mesh_friend_poll+0x1c>
	friend_recv_delay(frnd);
   1cc72:	f010 fdc8 	bl	2d806 <friend_recv_delay>
	if (msg->fsn == frnd->fsn && frnd->last) {
   1cc76:	78e3      	ldrb	r3, [r4, #3]
   1cc78:	7831      	ldrb	r1, [r6, #0]
   1cc7a:	f003 0201 	and.w	r2, r3, #1
   1cc7e:	4291      	cmp	r1, r2
   1cc80:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1cc84:	d112      	bne.n	1ccac <bt_mesh_friend_poll+0x68>
   1cc86:	b1b0      	cbz	r0, 1ccb6 <bt_mesh_friend_poll+0x72>
		frnd->send_last = 1U;
   1cc88:	f043 0302 	orr.w	r3, r3, #2
   1cc8c:	70e3      	strb	r3, [r4, #3]
{
   1cc8e:	4d25      	ldr	r5, [pc, #148]	; (1cd24 <bt_mesh_friend_poll+0xe0>)
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1cc90:	4e25      	ldr	r6, [pc, #148]	; (1cd28 <bt_mesh_friend_poll+0xe4>)
   1cc92:	42b5      	cmp	r5, r6
   1cc94:	d924      	bls.n	1cce0 <bt_mesh_friend_poll+0x9c>
   1cc96:	4925      	ldr	r1, [pc, #148]	; (1cd2c <bt_mesh_friend_poll+0xe8>)
   1cc98:	f240 22ed 	movw	r2, #749	; 0x2ed
   1cc9c:	4824      	ldr	r0, [pc, #144]	; (1cd30 <bt_mesh_friend_poll+0xec>)
   1cc9e:	f00b ff91 	bl	28bc4 <assert_print>
   1cca2:	f240 21ed 	movw	r1, #749	; 0x2ed
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1cca6:	4821      	ldr	r0, [pc, #132]	; (1cd2c <bt_mesh_friend_poll+0xe8>)
   1cca8:	f00b ff85 	bl	28bb6 <assert_post_action>
		if (frnd->last) {
   1ccac:	b118      	cbz	r0, 1ccb6 <bt_mesh_friend_poll+0x72>
			net_buf_unref(frnd->last);
   1ccae:	f003 fa15 	bl	200dc <net_buf_unref>
			frnd->last = NULL;
   1ccb2:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		frnd->fsn = msg->fsn;
   1ccb6:	78e3      	ldrb	r3, [r4, #3]
   1ccb8:	7832      	ldrb	r2, [r6, #0]
   1ccba:	f362 0300 	bfi	r3, r2, #0, #1
   1ccbe:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
   1ccc0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1ccc4:	2b00      	cmp	r3, #0
   1ccc6:	d1e2      	bne.n	1cc8e <bt_mesh_friend_poll+0x4a>
			enqueue_update(frnd, 0);
   1ccc8:	4620      	mov	r0, r4
   1ccca:	f7ff fc9f 	bl	1c60c <enqueue_update.constprop.0>
			LOG_DBG("Enqueued Friend Update to empty queue");
   1ccce:	e7de      	b.n	1cc8e <bt_mesh_friend_poll+0x4a>
		if (cb->polled) {
   1ccd0:	68ab      	ldr	r3, [r5, #8]
   1ccd2:	b11b      	cbz	r3, 1ccdc <bt_mesh_friend_poll+0x98>
			cb->polled(frnd->subnet->net_idx, frnd->lpn);
   1ccd4:	6922      	ldr	r2, [r4, #16]
   1ccd6:	8821      	ldrh	r1, [r4, #0]
   1ccd8:	8c10      	ldrh	r0, [r2, #32]
   1ccda:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1ccdc:	350c      	adds	r5, #12
   1ccde:	e7d8      	b.n	1cc92 <bt_mesh_friend_poll+0x4e>
   1cce0:	d3f6      	bcc.n	1ccd0 <bt_mesh_friend_poll+0x8c>
	if (!frnd->established) {
   1cce2:	78e3      	ldrb	r3, [r4, #3]
   1cce4:	06da      	lsls	r2, r3, #27
   1cce6:	d4bb      	bmi.n	1cc60 <bt_mesh_friend_poll+0x1c>
		frnd->established = 1U;
   1cce8:	f043 0310 	orr.w	r3, r3, #16
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1ccec:	4d0d      	ldr	r5, [pc, #52]	; (1cd24 <bt_mesh_friend_poll+0xe0>)
		frnd->established = 1U;
   1ccee:	70e3      	strb	r3, [r4, #3]
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1ccf0:	42b5      	cmp	r5, r6
   1ccf2:	d908      	bls.n	1cd06 <bt_mesh_friend_poll+0xc2>
   1ccf4:	490d      	ldr	r1, [pc, #52]	; (1cd2c <bt_mesh_friend_poll+0xe8>)
   1ccf6:	f240 22f7 	movw	r2, #759	; 0x2f7
   1ccfa:	480d      	ldr	r0, [pc, #52]	; (1cd30 <bt_mesh_friend_poll+0xec>)
   1ccfc:	f00b ff62 	bl	28bc4 <assert_print>
   1cd00:	f240 21f7 	movw	r1, #759	; 0x2f7
   1cd04:	e7cf      	b.n	1cca6 <bt_mesh_friend_poll+0x62>
   1cd06:	d2ab      	bcs.n	1cc60 <bt_mesh_friend_poll+0x1c>
			if (cb->established) {
   1cd08:	682f      	ldr	r7, [r5, #0]
   1cd0a:	b12f      	cbz	r7, 1cd18 <bt_mesh_friend_poll+0xd4>
				cb->established(frnd->subnet->net_idx, frnd->lpn, frnd->recv_delay,
   1cd0c:	6920      	ldr	r0, [r4, #16]
   1cd0e:	6863      	ldr	r3, [r4, #4]
   1cd10:	78a2      	ldrb	r2, [r4, #2]
   1cd12:	8821      	ldrh	r1, [r4, #0]
   1cd14:	8c00      	ldrh	r0, [r0, #32]
   1cd16:	47b8      	blx	r7
		STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1cd18:	350c      	adds	r5, #12
   1cd1a:	e7e9      	b.n	1ccf0 <bt_mesh_friend_poll+0xac>
		return -EINVAL;
   1cd1c:	f06f 0015 	mvn.w	r0, #21
   1cd20:	e79f      	b.n	1cc62 <bt_mesh_friend_poll+0x1e>
   1cd22:	bf00      	nop
   1cd24:	0002fbec 	.word	0x0002fbec
   1cd28:	0002fbec 	.word	0x0002fbec
   1cd2c:	00033d2f 	.word	0x00033d2f
   1cd30:	00030da5 	.word	0x00030da5

0001cd34 <bt_mesh_friend_clear_cfm>:
{
   1cd34:	b510      	push	{r4, lr}
	if (buf->len < sizeof(*msg)) {
   1cd36:	888b      	ldrh	r3, [r1, #4]
   1cd38:	2b03      	cmp	r3, #3
   1cd3a:	d923      	bls.n	1cd84 <bt_mesh_friend_clear_cfm+0x50>
		if (frnd->clear.frnd == prev_friend) {
   1cd3c:	4c13      	ldr	r4, [pc, #76]	; (1cd8c <bt_mesh_friend_clear_cfm+0x58>)
	frnd = find_clear(rx->ctx.addr);
   1cd3e:	8903      	ldrh	r3, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
   1cd40:	f8b4 20dc 	ldrh.w	r2, [r4, #220]	; 0xdc
   1cd44:	429a      	cmp	r2, r3
   1cd46:	d01b      	beq.n	1cd80 <bt_mesh_friend_clear_cfm+0x4c>
   1cd48:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
   1cd4c:	429a      	cmp	r2, r3
   1cd4e:	d115      	bne.n	1cd7c <bt_mesh_friend_clear_cfm+0x48>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1cd50:	f504 7488 	add.w	r4, r4, #272	; 0x110
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   1cd54:	680a      	ldr	r2, [r1, #0]
	if (lpn_addr != frnd->lpn) {
   1cd56:	8821      	ldrh	r1, [r4, #0]
   1cd58:	8813      	ldrh	r3, [r2, #0]
   1cd5a:	ba5b      	rev16	r3, r3
   1cd5c:	b29b      	uxth	r3, r3
   1cd5e:	4299      	cmp	r1, r3
   1cd60:	d10c      	bne.n	1cd7c <bt_mesh_friend_clear_cfm+0x48>
	if (lpn_counter != frnd->lpn_counter) {
   1cd62:	8853      	ldrh	r3, [r2, #2]
   1cd64:	8962      	ldrh	r2, [r4, #10]
   1cd66:	ba5b      	rev16	r3, r3
   1cd68:	b29b      	uxth	r3, r3
   1cd6a:	429a      	cmp	r2, r3
   1cd6c:	d106      	bne.n	1cd7c <bt_mesh_friend_clear_cfm+0x48>
	(void)k_work_cancel_delayable(&frnd->clear.timer);
   1cd6e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1cd72:	f009 fc87 	bl	26684 <k_work_cancel_delayable>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   1cd76:	2300      	movs	r3, #0
   1cd78:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
		return 0;
   1cd7c:	2000      	movs	r0, #0
}
   1cd7e:	bd10      	pop	{r4, pc}
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1cd80:	3428      	adds	r4, #40	; 0x28
   1cd82:	e7e7      	b.n	1cd54 <bt_mesh_friend_clear_cfm+0x20>
		return -EINVAL;
   1cd84:	f06f 0015 	mvn.w	r0, #21
   1cd88:	e7f9      	b.n	1cd7e <bt_mesh_friend_clear_cfm+0x4a>
   1cd8a:	bf00      	nop
   1cd8c:	20009ec8 	.word	0x20009ec8

0001cd90 <bt_mesh_friend_req>:
{
   1cd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1cd94:	7d03      	ldrb	r3, [r0, #20]
{
   1cd96:	4606      	mov	r6, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1cd98:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1cd9c:	2b10      	cmp	r3, #16
{
   1cd9e:	b08f      	sub	sp, #60	; 0x3c
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1cda0:	f000 80f7 	beq.w	1cf92 <bt_mesh_friend_req+0x202>
	if (buf->len < sizeof(*msg)) {
   1cda4:	888b      	ldrh	r3, [r1, #4]
   1cda6:	2b09      	cmp	r3, #9
   1cda8:	f240 8108 	bls.w	1cfbc <bt_mesh_friend_req+0x22c>
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
   1cdac:	680d      	ldr	r5, [r1, #0]
	if (msg->recv_delay <= 0x09) {
   1cdae:	786b      	ldrb	r3, [r5, #1]
   1cdb0:	2b09      	cmp	r3, #9
   1cdb2:	f240 8103 	bls.w	1cfbc <bt_mesh_friend_req+0x22c>
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   1cdb6:	f8b5 7003 	ldrh.w	r7, [r5, #3]
   1cdba:	78ab      	ldrb	r3, [r5, #2]
   1cdbc:	ba7f      	rev16	r7, r7
   1cdbe:	b2bf      	uxth	r7, r7
   1cdc0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
   1cdc4:	4b7f      	ldr	r3, [pc, #508]	; (1cfc4 <bt_mesh_friend_req+0x234>)
   1cdc6:	f1a7 020a 	sub.w	r2, r7, #10
   1cdca:	429a      	cmp	r2, r3
   1cdcc:	f200 80f6 	bhi.w	1cfbc <bt_mesh_friend_req+0x22c>
	if (msg->num_elem == 0x00) {
   1cdd0:	79eb      	ldrb	r3, [r5, #7]
   1cdd2:	2b00      	cmp	r3, #0
   1cdd4:	f000 80f2 	beq.w	1cfbc <bt_mesh_friend_req+0x22c>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
   1cdd8:	8901      	ldrh	r1, [r0, #8]
   1cdda:	440b      	add	r3, r1
   1cddc:	2b01      	cmp	r3, #1
   1cdde:	f000 80ed 	beq.w	1cfbc <bt_mesh_friend_req+0x22c>
   1cde2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cde6:	f300 80e9 	bgt.w	1cfbc <bt_mesh_friend_req+0x22c>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
   1cdea:	782b      	ldrb	r3, [r5, #0]
   1cdec:	f013 0307 	ands.w	r3, r3, #7
   1cdf0:	f000 80e4 	beq.w	1cfbc <bt_mesh_friend_req+0x22c>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
   1cdf4:	2201      	movs	r2, #1
   1cdf6:	fa02 f303 	lsl.w	r3, r2, r3
   1cdfa:	2b10      	cmp	r3, #16
   1cdfc:	f200 80c9 	bhi.w	1cf92 <bt_mesh_friend_req+0x202>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   1ce00:	6800      	ldr	r0, [r0, #0]
   1ce02:	2300      	movs	r3, #0
   1ce04:	8c00      	ldrh	r0, [r0, #32]
   1ce06:	f7ff fea5 	bl	1cb54 <bt_mesh_friend_find>
	if (frnd) {
   1ce0a:	4604      	mov	r4, r0
   1ce0c:	b960      	cbnz	r0, 1ce28 <bt_mesh_friend_req+0x98>
		if (!bt_mesh.frnd[i].subnet) {
   1ce0e:	4c6e      	ldr	r4, [pc, #440]	; (1cfc8 <bt_mesh_friend_req+0x238>)
   1ce10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ce12:	2b00      	cmp	r3, #0
   1ce14:	d04b      	beq.n	1ceae <bt_mesh_friend_req+0x11e>
   1ce16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	d046      	beq.n	1ceac <bt_mesh_friend_req+0x11c>
		return -ENOMEM;
   1ce1e:	f06f 000b 	mvn.w	r0, #11
}
   1ce22:	b00f      	add	sp, #60	; 0x3c
   1ce24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		friend_clear(frnd);
   1ce28:	f7ff fa50 	bl	1c2cc <friend_clear>
	frnd->lpn = rx->ctx.addr;
   1ce2c:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   1ce30:	f8a4 8000 	strh.w	r8, [r4]
	frnd->num_elem = msg->num_elem;
   1ce34:	79eb      	ldrb	r3, [r5, #7]
   1ce36:	7223      	strb	r3, [r4, #8]
	frnd->subnet = rx->sub;
   1ce38:	6832      	ldr	r2, [r6, #0]
   1ce3a:	6122      	str	r2, [r4, #16]
	frnd->recv_delay = msg->recv_delay - CONFIG_BT_MESH_FRIEND_ADV_LATENCY;
   1ce3c:	786b      	ldrb	r3, [r5, #1]
   1ce3e:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100U;
   1ce40:	2364      	movs	r3, #100	; 0x64
   1ce42:	435f      	muls	r7, r3
   1ce44:	6067      	str	r7, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   1ce46:	892b      	ldrh	r3, [r5, #8]
   1ce48:	ba5b      	rev16	r3, r3
   1ce4a:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
   1ce4c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1ce50:	ba5b      	rev16	r3, r3
   1ce52:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	err = friend_cred_create(frnd, SUBNET_KEY_TX_IDX(frnd->subnet));
   1ce56:	f892 7022 	ldrb.w	r7, [r2, #34]	; 0x22
   1ce5a:	1ebb      	subs	r3, r7, #2
   1ce5c:	425f      	negs	r7, r3
   1ce5e:	415f      	adcs	r7, r3
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1ce60:	f7fc fa58 	bl	19314 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   1ce64:	215a      	movs	r1, #90	; 0x5a
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1ce66:	eb07 1947 	add.w	r9, r7, r7, lsl #5
					  frnd->subnet->keys[idx].net);
   1ce6a:	434f      	muls	r7, r1
   1ce6c:	6921      	ldr	r1, [r4, #16]
   1ce6e:	3731      	adds	r7, #49	; 0x31
   1ce70:	4439      	add	r1, r7
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1ce72:	8963      	ldrh	r3, [r4, #10]
   1ce74:	9101      	str	r1, [sp, #4]
   1ce76:	89a1      	ldrh	r1, [r4, #12]
   1ce78:	f109 0914 	add.w	r9, r9, #20
   1ce7c:	44a1      	add	r9, r4
   1ce7e:	4602      	mov	r2, r0
   1ce80:	9100      	str	r1, [sp, #0]
   1ce82:	4648      	mov	r0, r9
   1ce84:	4641      	mov	r1, r8
   1ce86:	f00f fa87 	bl	2c398 <bt_mesh_friend_cred_create>
	if (err) {
   1ce8a:	b1a8      	cbz	r0, 1ceb8 <bt_mesh_friend_req+0x128>
		LOG_ERR("Failed to create friend credentials");
   1ce8c:	4b4f      	ldr	r3, [pc, #316]	; (1cfcc <bt_mesh_friend_req+0x23c>)
   1ce8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ce92:	930d      	str	r3, [sp, #52]	; 0x34
   1ce94:	2302      	movs	r3, #2
   1ce96:	484e      	ldr	r0, [pc, #312]	; (1cfd0 <bt_mesh_friend_req+0x240>)
   1ce98:	aa0c      	add	r2, sp, #48	; 0x30
   1ce9a:	930c      	str	r3, [sp, #48]	; 0x30
   1ce9c:	f010 fd4e 	bl	2d93c <z_log_msg_static_create.constprop.0>
		friend_clear(frnd);
   1cea0:	4620      	mov	r0, r4
   1cea2:	f7ff fa13 	bl	1c2cc <friend_clear>
		return -EIO;
   1cea6:	f06f 0004 	mvn.w	r0, #4
   1ceaa:	e7ba      	b.n	1ce22 <bt_mesh_friend_req+0x92>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1ceac:	2301      	movs	r3, #1
			frnd = &bt_mesh.frnd[i];
   1ceae:	22e8      	movs	r2, #232	; 0xe8
   1ceb0:	fb02 4403 	mla	r4, r2, r3, r4
   1ceb4:	3428      	adds	r4, #40	; 0x28
	if (!frnd) {
   1ceb6:	e7b9      	b.n	1ce2c <bt_mesh_friend_req+0x9c>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   1ceb8:	f9b4 30b4 	ldrsh.w	r3, [r4, #180]	; 0xb4
   1cebc:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   1cec0:	2b00      	cmp	r3, #0
   1cec2:	dd15      	ble.n	1cef0 <bt_mesh_friend_req+0x160>
	    !bt_mesh_has_addr(frnd->clear.frnd)) {
   1cec4:	f7fc fa40 	bl	19348 <bt_mesh_has_addr>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   1cec8:	b990      	cbnz	r0, 1cef0 <bt_mesh_friend_req+0x160>
   1ceca:	f012 fb4c 	bl	2f566 <z_impl_k_uptime_ticks>
   1cece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ced2:	fba0 0302 	umull	r0, r3, r0, r2
   1ced6:	fb02 3101 	mla	r1, r2, r1, r3
	frnd->clear.repeat_sec = 1U;
   1ceda:	2301      	movs	r3, #1
   1cedc:	0bc0      	lsrs	r0, r0, #15
   1cede:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
	return (uint32_t)k_uptime_get();
   1cee2:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
   1cee6:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	send_friend_clear(frnd);
   1ceea:	4620      	mov	r0, r4
   1ceec:	f7ff fa40 	bl	1c370 <send_friend_clear>
	delay = offer_delay(frnd, rx->ctx.recv_rssi, msg->criteria);
   1cef0:	782b      	ldrb	r3, [r5, #0]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   1cef2:	4a38      	ldr	r2, [pc, #224]	; (1cfd4 <bt_mesh_friend_req+0x244>)
   1cef4:	f3c3 01c1 	ubfx	r1, r3, #3, #2
   1cef8:	5c55      	ldrb	r5, [r2, r1]
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   1cefa:	f3c3 1341 	ubfx	r3, r3, #5, #2
   1cefe:	5cd2      	ldrb	r2, [r2, r3]
   1cf00:	f996 300c 	ldrsb.w	r3, [r6, #12]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   1cf04:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   1cf08:	fb02 5513 	mls	r5, r2, r3, r5
	delay /= 10;
   1cf0c:	230a      	movs	r3, #10
   1cf0e:	fb95 f5f3 	sdiv	r5, r5, r3
	return MAX(delay, 100);
   1cf12:	2d64      	cmp	r5, #100	; 0x64
   1cf14:	bfb8      	it	lt
   1cf16:	2564      	movlt	r5, #100	; 0x64
   1cf18:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1cf1c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cf20:	2100      	movs	r1, #0
   1cf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf26:	2300      	movs	r3, #0
   1cf28:	fbc5 0107 	smlal	r0, r1, r5, r7
   1cf2c:	f7eb f912 	bl	8154 <__aeabi_uldivmod>
   1cf30:	4602      	mov	r2, r0
   1cf32:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
   1cf34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1cf38:	f009 fb9e 	bl	26678 <k_work_reschedule>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   1cf3c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1cf40:	ab03      	add	r3, sp, #12
	net_buf_simple_reserve(&sdu, 1);
   1cf42:	2101      	movs	r1, #1
   1cf44:	a805      	add	r0, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   1cf46:	e9cd 2306 	strd	r2, r3, [sp, #24]
	enqueue_offer(frnd, rx->ctx.recv_rssi);
   1cf4a:	f996 500c 	ldrsb.w	r5, [r6, #12]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   1cf4e:	9305      	str	r3, [sp, #20]
	net_buf_simple_reserve(&sdu, 1);
   1cf50:	f002 ffec 	bl	1ff2c <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
   1cf54:	2106      	movs	r1, #6
   1cf56:	a805      	add	r0, sp, #20
   1cf58:	f003 f9fa 	bl	20350 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
   1cf5c:	23ff      	movs	r3, #255	; 0xff
   1cf5e:	7003      	strb	r3, [r0, #0]
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
   1cf60:	2310      	movs	r3, #16
   1cf62:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   1cf64:	2303      	movs	r3, #3
	off->rssi = rssi,
   1cf66:	70c5      	strb	r5, [r0, #3]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   1cf68:	7083      	strb	r3, [r0, #2]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   1cf6a:	89a3      	ldrh	r3, [r4, #12]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   1cf6c:	2104      	movs	r1, #4
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   1cf6e:	ba5b      	rev16	r3, r3
   1cf70:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   1cf72:	aa05      	add	r2, sp, #20
   1cf74:	4620      	mov	r0, r4
   1cf76:	f7ff fb21 	bl	1c5bc <encode_friend_ctl>
	if (!buf) {
   1cf7a:	4605      	mov	r5, r0
   1cf7c:	b958      	cbnz	r0, 1cf96 <bt_mesh_friend_req+0x206>
		LOG_ERR("Unable to encode Friend Offer");
   1cf7e:	4b16      	ldr	r3, [pc, #88]	; (1cfd8 <bt_mesh_friend_req+0x248>)
   1cf80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cf84:	930d      	str	r3, [sp, #52]	; 0x34
   1cf86:	2302      	movs	r3, #2
   1cf88:	4811      	ldr	r0, [pc, #68]	; (1cfd0 <bt_mesh_friend_req+0x240>)
   1cf8a:	aa0c      	add	r2, sp, #48	; 0x30
   1cf8c:	930c      	str	r3, [sp, #48]	; 0x30
   1cf8e:	f010 fcd5 	bl	2d93c <z_log_msg_static_create.constprop.0>
		return 0;
   1cf92:	2000      	movs	r0, #0
   1cf94:	e745      	b.n	1ce22 <bt_mesh_friend_req+0x92>
	if (encrypt_friend_pdu(frnd, buf, true)) {
   1cf96:	4601      	mov	r1, r0
   1cf98:	2201      	movs	r2, #1
   1cf9a:	4620      	mov	r0, r4
   1cf9c:	f7ff fbec 	bl	1c778 <encrypt_friend_pdu>
   1cfa0:	2800      	cmp	r0, #0
   1cfa2:	d1f6      	bne.n	1cf92 <bt_mesh_friend_req+0x202>
	if (frnd->last) {
   1cfa4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1cfa8:	b108      	cbz	r0, 1cfae <bt_mesh_friend_req+0x21e>
		net_buf_unref(frnd->last);
   1cfaa:	f003 f897 	bl	200dc <net_buf_unref>
	frnd->send_last = 1U;
   1cfae:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   1cfb0:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   1cfb4:	f043 0302 	orr.w	r3, r3, #2
   1cfb8:	70e3      	strb	r3, [r4, #3]
   1cfba:	e7ea      	b.n	1cf92 <bt_mesh_friend_req+0x202>
		return -EINVAL;
   1cfbc:	f06f 0015 	mvn.w	r0, #21
   1cfc0:	e72f      	b.n	1ce22 <bt_mesh_friend_req+0x92>
   1cfc2:	bf00      	nop
   1cfc4:	0034bbf5 	.word	0x0034bbf5
   1cfc8:	20009ec8 	.word	0x20009ec8
   1cfcc:	00033e70 	.word	0x00033e70
   1cfd0:	0002fc94 	.word	0x0002fc94
   1cfd4:	00033ed1 	.word	0x00033ed1
   1cfd8:	00033e94 	.word	0x00033e94

0001cfdc <bt_mesh_friend_init>:
{
   1cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	list->head = NULL;
   1cfde:	2500      	movs	r5, #0
   1cfe0:	4c10      	ldr	r4, [pc, #64]	; (1d024 <bt_mesh_friend_init+0x48>)
		k_work_init_delayable(&frnd->timer, friend_timeout);
   1cfe2:	4f11      	ldr	r7, [pc, #68]	; (1d028 <bt_mesh_friend_init+0x4c>)
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
   1cfe4:	4e11      	ldr	r6, [pc, #68]	; (1d02c <bt_mesh_friend_init+0x50>)
		k_work_init_delayable(&frnd->timer, friend_timeout);
   1cfe6:	4639      	mov	r1, r7
   1cfe8:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = NULL;
   1cfec:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
   1cff0:	f009 fa58 	bl	264a4 <k_work_init_delayable>
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
   1cff4:	4631      	mov	r1, r6
   1cff6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1cffa:	f009 fa53 	bl	264a4 <k_work_init_delayable>
		k_work_init_delayable(&frnd->timer, friend_timeout);
   1cffe:	4639      	mov	r1, r7
   1d000:	f504 70b8 	add.w	r0, r4, #368	; 0x170
   1d004:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
   1d008:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
   1d00c:	f009 fa4a 	bl	264a4 <k_work_init_delayable>
		k_work_init_delayable(&frnd->clear.timer, clear_timeout);
   1d010:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   1d014:	4631      	mov	r1, r6
   1d016:	f009 fa45 	bl	264a4 <k_work_init_delayable>
   1d01a:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
}
   1d01e:	4628      	mov	r0, r5
   1d020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d022:	bf00      	nop
   1d024:	20009ec8 	.word	0x20009ec8
   1d028:	0001c9f9 	.word	0x0001c9f9
   1d02c:	0002d96b 	.word	0x0002d96b

0001d030 <bt_mesh_friend_match>:
{
   1d030:	460a      	mov	r2, r1
   1d032:	b508      	push	{r3, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   1d034:	4601      	mov	r1, r0
   1d036:	4805      	ldr	r0, [pc, #20]	; (1d04c <bt_mesh_friend_match+0x1c>)
   1d038:	f010 fc1e 	bl	2d878 <friend_lpn_matches>
   1d03c:	b920      	cbnz	r0, 1d048 <bt_mesh_friend_match+0x18>
}
   1d03e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   1d042:	4803      	ldr	r0, [pc, #12]	; (1d050 <bt_mesh_friend_match+0x20>)
   1d044:	f010 bc18 	b.w	2d878 <friend_lpn_matches>
}
   1d048:	bd08      	pop	{r3, pc}
   1d04a:	bf00      	nop
   1d04c:	20009ef0 	.word	0x20009ef0
   1d050:	20009fd8 	.word	0x20009fd8

0001d054 <bt_mesh_friend_queue_has_space>:
{
   1d054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d058:	4681      	mov	r9, r0
   1d05a:	460e      	mov	r6, r1
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1d05c:	4601      	mov	r1, r0
   1d05e:	4818      	ldr	r0, [pc, #96]	; (1d0c0 <bt_mesh_friend_queue_has_space+0x6c>)
{
   1d060:	461f      	mov	r7, r3
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1d062:	f010 fc09 	bl	2d878 <friend_lpn_matches>
{
   1d066:	4692      	mov	sl, r2
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1d068:	4605      	mov	r5, r0
{
   1d06a:	f89d 8020 	ldrb.w	r8, [sp, #32]
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1d06e:	b308      	cbz	r0, 1d0b4 <bt_mesh_friend_queue_has_space+0x60>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1d070:	f1b8 0f10 	cmp.w	r8, #16
   1d074:	d913      	bls.n	1d09e <bt_mesh_friend_queue_has_space+0x4a>
	bool someone_has_space = false, friend_match = false;
   1d076:	2400      	movs	r4, #0
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1d078:	4652      	mov	r2, sl
   1d07a:	4649      	mov	r1, r9
   1d07c:	4811      	ldr	r0, [pc, #68]	; (1d0c4 <bt_mesh_friend_queue_has_space+0x70>)
   1d07e:	f010 fbfb 	bl	2d878 <friend_lpn_matches>
   1d082:	b1c8      	cbz	r0, 1d0b8 <bt_mesh_friend_queue_has_space+0x64>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   1d084:	f1b8 0f10 	cmp.w	r8, #16
   1d088:	d806      	bhi.n	1d098 <bt_mesh_friend_queue_has_space+0x44>
   1d08a:	4643      	mov	r3, r8
   1d08c:	463a      	mov	r2, r7
   1d08e:	4631      	mov	r1, r6
   1d090:	480c      	ldr	r0, [pc, #48]	; (1d0c4 <bt_mesh_friend_queue_has_space+0x70>)
   1d092:	f010 fcbc 	bl	2da0e <friend_queue_has_space.part.0>
		if (friend_queue_has_space(frnd, src, seq_auth, seg_count)) {
   1d096:	b900      	cbnz	r0, 1d09a <bt_mesh_friend_queue_has_space+0x46>
		friend_match = true;
   1d098:	4620      	mov	r0, r4
}
   1d09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d09e:	4643      	mov	r3, r8
   1d0a0:	463a      	mov	r2, r7
   1d0a2:	4631      	mov	r1, r6
   1d0a4:	4806      	ldr	r0, [pc, #24]	; (1d0c0 <bt_mesh_friend_queue_has_space+0x6c>)
   1d0a6:	f010 fcb2 	bl	2da0e <friend_queue_has_space.part.0>
		if (friend_queue_has_space(frnd, src, seq_auth, seg_count)) {
   1d0aa:	4604      	mov	r4, r0
   1d0ac:	2800      	cmp	r0, #0
   1d0ae:	d0e2      	beq.n	1d076 <bt_mesh_friend_queue_has_space+0x22>
		friend_match = true;
   1d0b0:	4605      	mov	r5, r0
   1d0b2:	e7e1      	b.n	1d078 <bt_mesh_friend_queue_has_space+0x24>
	bool someone_has_space = false, friend_match = false;
   1d0b4:	4604      	mov	r4, r0
   1d0b6:	e7df      	b.n	1d078 <bt_mesh_friend_queue_has_space+0x24>
	if (!friend_match) {
   1d0b8:	2d00      	cmp	r5, #0
   1d0ba:	d1ed      	bne.n	1d098 <bt_mesh_friend_queue_has_space+0x44>
		return true;
   1d0bc:	2001      	movs	r0, #1
   1d0be:	e7ec      	b.n	1d09a <bt_mesh_friend_queue_has_space+0x46>
   1d0c0:	20009ef0 	.word	0x20009ef0
   1d0c4:	20009fd8 	.word	0x20009fd8

0001d0c8 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   1d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d0cc:	4617      	mov	r7, r2
	int i;

	if (!rx->friend_match ||
   1d0ce:	f990 2014 	ldrsb.w	r2, [r0, #20]
{
   1d0d2:	4698      	mov	r8, r3
	if (!rx->friend_match ||
   1d0d4:	2a00      	cmp	r2, #0
{
   1d0d6:	4604      	mov	r4, r0
   1d0d8:	460e      	mov	r6, r1
	if (!rx->friend_match ||
   1d0da:	7d03      	ldrb	r3, [r0, #20]
{
   1d0dc:	b08c      	sub	sp, #48	; 0x30
	if (!rx->friend_match ||
   1d0de:	da67      	bge.n	1d1b0 <bt_mesh_friend_enqueue_rx+0xe8>
   1d0e0:	7b42      	ldrb	r2, [r0, #13]
   1d0e2:	2a01      	cmp	r2, #1
   1d0e4:	d803      	bhi.n	1d0ee <bt_mesh_friend_enqueue_rx+0x26>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   1d0e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1d0ea:	2b10      	cmp	r3, #16
   1d0ec:	d160      	bne.n	1d1b0 <bt_mesh_friend_enqueue_rx+0xe8>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   1d0ee:	f7f7 fd03 	bl	14af8 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   1d0f2:	2801      	cmp	r0, #1
   1d0f4:	d15c      	bne.n	1d1b0 <bt_mesh_friend_enqueue_rx+0xe8>
	}

	LOG_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x", rx->ctx.recv_ttl,
		rx->sub->net_idx, rx->ctx.addr, rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1d0f6:	f04f 0900 	mov.w	r9, #0
   1d0fa:	4d3a      	ldr	r5, [pc, #232]	; (1d1e4 <bt_mesh_friend_enqueue_rx+0x11c>)
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!friend_lpn_matches(frnd, rx->sub->net_idx,
   1d0fc:	6823      	ldr	r3, [r4, #0]
   1d0fe:	4628      	mov	r0, r5
   1d100:	8962      	ldrh	r2, [r4, #10]
   1d102:	8c19      	ldrh	r1, [r3, #32]
   1d104:	f010 fbb8 	bl	2d878 <friend_lpn_matches>
   1d108:	2800      	cmp	r0, #0
   1d10a:	d04d      	beq.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
					rx->ctx.recv_dst)) {
			continue;
		}

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
   1d10c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
   1d110:	4628      	mov	r0, r5
   1d112:	4652      	mov	r2, sl
   1d114:	f010 fbb0 	bl	2d878 <friend_lpn_matches>
   1d118:	2800      	cmp	r0, #0
   1d11a:	d145      	bne.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
					rx->ctx.addr)) {
			continue;
		}

		if (!friend_queue_prepare_space(frnd, rx->ctx.addr, seq_auth,
   1d11c:	4643      	mov	r3, r8
   1d11e:	463a      	mov	r2, r7
   1d120:	4651      	mov	r1, sl
   1d122:	4628      	mov	r0, r5
   1d124:	f7ff f96e 	bl	1c404 <friend_queue_prepare_space>
   1d128:	2800      	cmp	r0, #0
   1d12a:	d03d      	beq.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
	if (bt_mesh_has_addr(rx->ctx.addr)) {
   1d12c:	8920      	ldrh	r0, [r4, #8]
   1d12e:	f7fc f90b 	bl	19348 <bt_mesh_has_addr>
   1d132:	2800      	cmp	r0, #0
   1d134:	d138      	bne.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   1d136:	b92e      	cbnz	r6, 1d144 <bt_mesh_friend_enqueue_rx+0x7c>
   1d138:	b127      	cbz	r7, 1d144 <bt_mesh_friend_enqueue_rx+0x7c>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
   1d13a:	4639      	mov	r1, r7
   1d13c:	4628      	mov	r0, r5
   1d13e:	8922      	ldrh	r2, [r4, #8]
   1d140:	f010 fc7f 	bl	2da42 <friend_purge_old_ack>
	info.src = rx->ctx.addr;
   1d144:	68a3      	ldr	r3, [r4, #8]
		info.ttl = rx->ctx.recv_ttl;
   1d146:	7b60      	ldrb	r0, [r4, #13]
	info.src = rx->ctx.addr;
   1d148:	9303      	str	r3, [sp, #12]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1d14a:	7d23      	ldrb	r3, [r4, #20]
   1d14c:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1d150:	2a10      	cmp	r2, #16
		info.ttl = rx->ctx.recv_ttl - 1U;
   1d152:	bf18      	it	ne
   1d154:	f100 30ff 	addne.w	r0, r0, #4294967295
	info.ctl = rx->ctl;
   1d158:	f3c3 02c0 	ubfx	r2, r3, #3, #1
		info.ttl = rx->ctx.recv_ttl - 1U;
   1d15c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	info.ctl = rx->ctl;
   1d160:	ea40 10c2 	orr.w	r0, r0, r2, lsl #7
	sys_put_be24(rx->seq, info.seq);
   1d164:	6922      	ldr	r2, [r4, #16]
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   1d166:	f003 0301 	and.w	r3, r3, #1
	dst[0] = val >> 16;
   1d16a:	0c11      	lsrs	r1, r2, #16
   1d16c:	f88d 1010 	strb.w	r1, [sp, #16]
	dst[1] = val;
   1d170:	f88d 2012 	strb.w	r2, [sp, #18]
	dst[0] = val >> 8;
   1d174:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1d178:	4a1b      	ldr	r2, [pc, #108]	; (1d1e8 <bt_mesh_friend_enqueue_rx+0x120>)
	info.ctl = rx->ctl;
   1d17a:	f88d 0013 	strb.w	r0, [sp, #19]
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   1d17e:	6812      	ldr	r2, [r2, #0]
   1d180:	f88d 1011 	strb.w	r1, [sp, #17]
   1d184:	1ad3      	subs	r3, r2, r3
	buf = create_friend_pdu(frnd, &info, sbuf);
   1d186:	9914      	ldr	r1, [sp, #80]	; 0x50
   1d188:	a803      	add	r0, sp, #12
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   1d18a:	9305      	str	r3, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
   1d18c:	f7ff f9d2 	bl	1c534 <create_friend_pdu.constprop.0>
	if (!buf) {
   1d190:	4601      	mov	r1, r0
   1d192:	b998      	cbnz	r0, 1d1bc <bt_mesh_friend_enqueue_rx+0xf4>
		LOG_ERR("Failed to encode Friend buffer");
   1d194:	4b15      	ldr	r3, [pc, #84]	; (1d1ec <bt_mesh_friend_enqueue_rx+0x124>)
   1d196:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d19a:	930b      	str	r3, [sp, #44]	; 0x2c
   1d19c:	2302      	movs	r3, #2
   1d19e:	4814      	ldr	r0, [pc, #80]	; (1d1f0 <bt_mesh_friend_enqueue_rx+0x128>)
   1d1a0:	aa0a      	add	r2, sp, #40	; 0x28
   1d1a2:	930a      	str	r3, [sp, #40]	; 0x28
   1d1a4:	f010 fbca 	bl	2d93c <z_log_msg_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1d1a8:	35e8      	adds	r5, #232	; 0xe8
   1d1aa:	f1b9 0f00 	cmp.w	r9, #0
   1d1ae:	d002      	beq.n	1d1b6 <bt_mesh_friend_enqueue_rx+0xee>
		}

		friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, seg_count,
				      sbuf);
	}
}
   1d1b0:	b00c      	add	sp, #48	; 0x30
   1d1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1d1b6:	f04f 0901 	mov.w	r9, #1
   1d1ba:	e79f      	b.n	1d0fc <bt_mesh_friend_enqueue_rx+0x34>
	enqueue_friend_pdu(frnd, type, info.src, seg_count, buf);
   1d1bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   1d1c0:	b94e      	cbnz	r6, 1d1d6 <bt_mesh_friend_enqueue_rx+0x10e>
	net_buf_slist_put(&frnd->queue, buf);
   1d1c2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   1d1c6:	f002 fed1 	bl	1ff6c <net_buf_slist_put>
	frnd->queue_size++;
   1d1ca:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1d1ce:	3301      	adds	r3, #1
   1d1d0:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
   1d1d4:	e7e8      	b.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
   1d1d6:	9000      	str	r0, [sp, #0]
   1d1d8:	4643      	mov	r3, r8
   1d1da:	4631      	mov	r1, r6
   1d1dc:	4628      	mov	r0, r5
   1d1de:	f7ff f94f 	bl	1c480 <enqueue_friend_pdu.part.0>
	LOG_DBG("Queued message for LPN 0x%04x, queue_size %u", frnd->lpn, frnd->queue_size);
   1d1e2:	e7e1      	b.n	1d1a8 <bt_mesh_friend_enqueue_rx+0xe0>
   1d1e4:	20009ef0 	.word	0x20009ef0
   1d1e8:	20009ec8 	.word	0x20009ec8
   1d1ec:	00033eb2 	.word	0x00033eb2
   1d1f0:	0002fc94 	.word	0x0002fc94

0001d1f4 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   1d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1f8:	4604      	mov	r4, r0
   1d1fa:	460e      	mov	r6, r1
   1d1fc:	4617      	mov	r7, r2
   1d1fe:	4698      	mov	r8, r3
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   1d200:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1d204:	b08d      	sub	sp, #52	; 0x34
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   1d206:	8891      	ldrh	r1, [r2, #4]
   1d208:	8c18      	ldrh	r0, [r3, #32]
   1d20a:	f7ff ff11 	bl	1d030 <bt_mesh_friend_match>
   1d20e:	b928      	cbnz	r0, 1d21c <bt_mesh_friend_enqueue_tx+0x28>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
   1d210:	f04f 0b00 	mov.w	fp, #0
				      sbuf);
		matched = true;
	}

	return matched;
}
   1d214:	4658      	mov	r0, fp
   1d216:	b00d      	add	sp, #52	; 0x34
   1d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   1d21c:	f7f7 fc6c 	bl	14af8 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   1d220:	2801      	cmp	r0, #1
   1d222:	d1f5      	bne.n	1d210 <bt_mesh_friend_enqueue_tx+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1d224:	f04f 0a00 	mov.w	sl, #0
	bool matched = false;
   1d228:	46d3      	mov	fp, sl
   1d22a:	4d3e      	ldr	r5, [pc, #248]	; (1d324 <bt_mesh_friend_enqueue_tx+0x130>)
		if (!friend_lpn_matches(frnd, tx->sub->net_idx,
   1d22c:	e9d4 3200 	ldrd	r3, r2, [r4]
   1d230:	4628      	mov	r0, r5
   1d232:	8892      	ldrh	r2, [r2, #4]
   1d234:	8c19      	ldrh	r1, [r3, #32]
   1d236:	f010 fb1f 	bl	2d878 <friend_lpn_matches>
   1d23a:	2800      	cmp	r0, #0
   1d23c:	d04d      	beq.n	1d2da <bt_mesh_friend_enqueue_tx+0xe6>
		if (!friend_queue_prepare_space(frnd, tx->src, seq_auth,
   1d23e:	4643      	mov	r3, r8
   1d240:	463a      	mov	r2, r7
   1d242:	4628      	mov	r0, r5
   1d244:	8921      	ldrh	r1, [r4, #8]
   1d246:	f7ff f8dd 	bl	1c404 <friend_queue_prepare_space>
   1d24a:	4681      	mov	r9, r0
   1d24c:	2800      	cmp	r0, #0
   1d24e:	d044      	beq.n	1d2da <bt_mesh_friend_enqueue_tx+0xe6>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   1d250:	b92e      	cbnz	r6, 1d25e <bt_mesh_friend_enqueue_tx+0x6a>
   1d252:	b127      	cbz	r7, 1d25e <bt_mesh_friend_enqueue_tx+0x6a>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
   1d254:	4639      	mov	r1, r7
   1d256:	4628      	mov	r0, r5
   1d258:	8922      	ldrh	r2, [r4, #8]
   1d25a:	f010 fbf2 	bl	2da42 <friend_purge_old_ack>
	info.src = tx->src;
   1d25e:	8923      	ldrh	r3, [r4, #8]
   1d260:	f8ad 300c 	strh.w	r3, [sp, #12]
	info.dst = tx->ctx->addr;
   1d264:	6863      	ldr	r3, [r4, #4]
   1d266:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
   1d268:	7ad9      	ldrb	r1, [r3, #11]
	info.dst = tx->ctx->addr;
   1d26a:	f8ad 200e 	strh.w	r2, [sp, #14]
	info.ttl = tx->ctx->send_ttl;
   1d26e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1d272:	f361 0206 	bfi	r2, r1, #0, #7
   1d276:	f88d 2013 	strb.w	r2, [sp, #19]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1d27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d27e:	885b      	ldrh	r3, [r3, #2]
   1d280:	1a9a      	subs	r2, r3, r2
   1d282:	4253      	negs	r3, r2
   1d284:	4153      	adcs	r3, r2
   1d286:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1d28a:	f363 12c7 	bfi	r2, r3, #7, #1
	sys_put_be24(bt_mesh.seq, info.seq);
   1d28e:	4b26      	ldr	r3, [pc, #152]	; (1d328 <bt_mesh_friend_enqueue_tx+0x134>)
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1d290:	f88d 2013 	strb.w	r2, [sp, #19]
	sys_put_be24(bt_mesh.seq, info.seq);
   1d294:	685a      	ldr	r2, [r3, #4]
	dst[0] = val >> 16;
   1d296:	0c11      	lsrs	r1, r2, #16
   1d298:	f88d 1010 	strb.w	r1, [sp, #16]
	dst[0] = val >> 8;
   1d29c:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[1] = val;
   1d2a0:	f88d 2012 	strb.w	r2, [sp, #18]
	dst[0] = val >> 8;
   1d2a4:	f88d 1011 	strb.w	r1, [sp, #17]
	info.iv_index = BT_MESH_NET_IVI_TX;
   1d2a8:	f853 2b08 	ldr.w	r2, [r3], #8
   1d2ac:	e8d3 3faf 	lda	r3, [r3]
   1d2b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	buf = create_friend_pdu(frnd, &info, sbuf);
   1d2b4:	9916      	ldr	r1, [sp, #88]	; 0x58
	info.iv_index = BT_MESH_NET_IVI_TX;
   1d2b6:	1ad3      	subs	r3, r2, r3
	buf = create_friend_pdu(frnd, &info, sbuf);
   1d2b8:	a803      	add	r0, sp, #12
	info.iv_index = BT_MESH_NET_IVI_TX;
   1d2ba:	9305      	str	r3, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
   1d2bc:	f7ff f93a 	bl	1c534 <create_friend_pdu.constprop.0>
	if (!buf) {
   1d2c0:	4601      	mov	r1, r0
   1d2c2:	b988      	cbnz	r0, 1d2e8 <bt_mesh_friend_enqueue_tx+0xf4>
		LOG_ERR("Failed to encode Friend buffer");
   1d2c4:	4b19      	ldr	r3, [pc, #100]	; (1d32c <bt_mesh_friend_enqueue_tx+0x138>)
   1d2c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d2ca:	930b      	str	r3, [sp, #44]	; 0x2c
   1d2cc:	2302      	movs	r3, #2
   1d2ce:	4818      	ldr	r0, [pc, #96]	; (1d330 <bt_mesh_friend_enqueue_tx+0x13c>)
   1d2d0:	aa0a      	add	r2, sp, #40	; 0x28
   1d2d2:	930a      	str	r3, [sp, #40]	; 0x28
   1d2d4:	f010 fb32 	bl	2d93c <z_log_msg_static_create.constprop.0>
		matched = true;
   1d2d8:	46cb      	mov	fp, r9
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1d2da:	35e8      	adds	r5, #232	; 0xe8
   1d2dc:	f1ba 0f00 	cmp.w	sl, #0
   1d2e0:	d198      	bne.n	1d214 <bt_mesh_friend_enqueue_tx+0x20>
   1d2e2:	f04f 0a01 	mov.w	sl, #1
   1d2e6:	e7a1      	b.n	1d22c <bt_mesh_friend_enqueue_tx+0x38>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
   1d2e8:	b146      	cbz	r6, 1d2fc <bt_mesh_friend_enqueue_tx+0x108>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   1d2ea:	9000      	str	r0, [sp, #0]
   1d2ec:	4643      	mov	r3, r8
   1d2ee:	4631      	mov	r1, r6
   1d2f0:	4628      	mov	r0, r5
   1d2f2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1d2f6:	f7ff f8c3 	bl	1c480 <enqueue_friend_pdu.part.0>
   1d2fa:	e7ed      	b.n	1d2d8 <bt_mesh_friend_enqueue_tx+0xe4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
   1d2fc:	f99d 3013 	ldrsb.w	r3, [sp, #19]
   1d300:	2b00      	cmp	r3, #0
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
   1d302:	bfa2      	ittt	ge
   1d304:	6862      	ldrge	r2, [r4, #4]
   1d306:	6983      	ldrge	r3, [r0, #24]
   1d308:	8852      	ldrhge	r2, [r2, #2]
	net_buf_slist_put(&frnd->queue, buf);
   1d30a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
   1d30e:	bfa8      	it	ge
   1d310:	801a      	strhge	r2, [r3, #0]
	net_buf_slist_put(&frnd->queue, buf);
   1d312:	f002 fe2b 	bl	1ff6c <net_buf_slist_put>
	frnd->queue_size++;
   1d316:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1d31a:	3301      	adds	r3, #1
   1d31c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
   1d320:	e7da      	b.n	1d2d8 <bt_mesh_friend_enqueue_tx+0xe4>
   1d322:	bf00      	nop
   1d324:	20009ef0 	.word	0x20009ef0
   1d328:	20009ec8 	.word	0x20009ec8
   1d32c:	00033eb2 	.word	0x00033eb2
   1d330:	0002fc94 	.word	0x0002fc94

0001d334 <bt_mesh_friend_clear_incomplete>:
	return 0;
}

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, uint16_t src,
				     uint16_t dst, uint64_t *seq_auth)
{
   1d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d336:	4606      	mov	r6, r0
   1d338:	460c      	mov	r4, r1

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   1d33a:	8c01      	ldrh	r1, [r0, #32]
   1d33c:	4815      	ldr	r0, [pc, #84]	; (1d394 <bt_mesh_friend_clear_incomplete+0x60>)
{
   1d33e:	4617      	mov	r7, r2
   1d340:	461d      	mov	r5, r3
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   1d342:	f010 fa99 	bl	2d878 <friend_lpn_matches>
   1d346:	b170      	cbz	r0, 1d366 <bt_mesh_friend_clear_incomplete+0x32>
		}

		for (j = 0; j < ARRAY_SIZE(frnd->seg); j++) {
			struct bt_mesh_friend_seg *seg = &frnd->seg[j];

			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   1d348:	882a      	ldrh	r2, [r5, #0]
   1d34a:	4621      	mov	r1, r4
   1d34c:	4812      	ldr	r0, [pc, #72]	; (1d398 <bt_mesh_friend_clear_incomplete+0x64>)
   1d34e:	f3c2 020c 	ubfx	r2, r2, #0, #13
   1d352:	f010 fb2c 	bl	2d9ae <is_seg>
   1d356:	b130      	cbz	r0, 1d366 <bt_mesh_friend_clear_incomplete+0x32>
				continue;
			}

			LOG_WRN("Clearing incomplete segments for 0x%04x", src);

			purge_buffers(&seg->queue);
   1d358:	480f      	ldr	r0, [pc, #60]	; (1d398 <bt_mesh_friend_clear_incomplete+0x64>)
   1d35a:	f010 fa4a 	bl	2d7f2 <purge_buffers>
			seg->seg_count = 0U;
   1d35e:	2200      	movs	r2, #0
   1d360:	4b0e      	ldr	r3, [pc, #56]	; (1d39c <bt_mesh_friend_clear_incomplete+0x68>)
   1d362:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   1d366:	463a      	mov	r2, r7
   1d368:	8c31      	ldrh	r1, [r6, #32]
   1d36a:	480d      	ldr	r0, [pc, #52]	; (1d3a0 <bt_mesh_friend_clear_incomplete+0x6c>)
   1d36c:	f010 fa84 	bl	2d878 <friend_lpn_matches>
   1d370:	b170      	cbz	r0, 1d390 <bt_mesh_friend_clear_incomplete+0x5c>
			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   1d372:	882a      	ldrh	r2, [r5, #0]
   1d374:	4621      	mov	r1, r4
   1d376:	480b      	ldr	r0, [pc, #44]	; (1d3a4 <bt_mesh_friend_clear_incomplete+0x70>)
   1d378:	f3c2 020c 	ubfx	r2, r2, #0, #13
   1d37c:	f010 fb17 	bl	2d9ae <is_seg>
   1d380:	b130      	cbz	r0, 1d390 <bt_mesh_friend_clear_incomplete+0x5c>
			purge_buffers(&seg->queue);
   1d382:	4808      	ldr	r0, [pc, #32]	; (1d3a4 <bt_mesh_friend_clear_incomplete+0x70>)
   1d384:	f010 fa35 	bl	2d7f2 <purge_buffers>
			seg->seg_count = 0U;
   1d388:	2200      	movs	r2, #0
   1d38a:	4b04      	ldr	r3, [pc, #16]	; (1d39c <bt_mesh_friend_clear_incomplete+0x68>)
   1d38c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
			break;
		}
	}
}
   1d390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d392:	bf00      	nop
   1d394:	20009ef0 	.word	0x20009ef0
   1d398:	20009f80 	.word	0x20009f80
   1d39c:	20009ec8 	.word	0x20009ec8
   1d3a0:	20009fd8 	.word	0x20009fd8
   1d3a4:	2000a068 	.word	0x2000a068

0001d3a8 <prov_link_closed>:
	}
}

static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
   1d3a8:	b510      	push	{r4, lr}
	LOG_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   1d3aa:	4b07      	ldr	r3, [pc, #28]	; (1d3c8 <prov_link_closed+0x20>)
{
   1d3ac:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   1d3ae:	689b      	ldr	r3, [r3, #8]
   1d3b0:	685b      	ldr	r3, [r3, #4]
   1d3b2:	b103      	cbz	r3, 1d3b6 <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   1d3b4:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   1d3b6:	4b05      	ldr	r3, [pc, #20]	; (1d3cc <prov_link_closed+0x24>)
   1d3b8:	681b      	ldr	r3, [r3, #0]
   1d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d3bc:	b11b      	cbz	r3, 1d3c6 <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   1d3be:	7820      	ldrb	r0, [r4, #0]
	}
}
   1d3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   1d3c4:	4718      	bx	r3
}
   1d3c6:	bd10      	pop	{r4, pc}
   1d3c8:	2000ad30 	.word	0x2000ad30
   1d3cc:	2000ad2c 	.word	0x2000ad2c

0001d3d0 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   1d3d0:	4b03      	ldr	r3, [pc, #12]	; (1d3e0 <prov_bearer_error+0x10>)
{
   1d3d2:	4610      	mov	r0, r2
	if (bt_mesh_prov_link.role->error) {
   1d3d4:	689b      	ldr	r3, [r3, #8]
   1d3d6:	689b      	ldr	r3, [r3, #8]
   1d3d8:	b103      	cbz	r3, 1d3dc <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   1d3da:	4718      	bx	r3
	}
}
   1d3dc:	4770      	bx	lr
   1d3de:	bf00      	nop
   1d3e0:	2000ad30 	.word	0x2000ad30

0001d3e4 <get_auth_string>:
{
   1d3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d3e6:	4605      	mov	r5, r0
   1d3e8:	460c      	mov	r4, r1
	bt_rand(&value, sizeof(value));
   1d3ea:	4668      	mov	r0, sp
   1d3ec:	2108      	movs	r1, #8
   1d3ee:	f7f3 fa77 	bl	108e0 <bt_rand>
	for (int i = 0; i < size; i++) {
   1d3f2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	461e      	mov	r6, r3
		str[i] = characters[idx];
   1d3fa:	4f0f      	ldr	r7, [pc, #60]	; (1d438 <get_auth_string+0x54>)
	for (int i = 0; i < size; i++) {
   1d3fc:	42b4      	cmp	r4, r6
   1d3fe:	dc12      	bgt.n	1d426 <get_auth_string+0x42>
   1d400:	b10b      	cbz	r3, 1d406 <get_auth_string+0x22>
   1d402:	e9cd 0100 	strd	r0, r1, [sp]
	str[size] = '\0';
   1d406:	2700      	movs	r7, #0
	memcpy(bt_mesh_prov_link.auth, str, size);
   1d408:	4e0c      	ldr	r6, [pc, #48]	; (1d43c <get_auth_string+0x58>)
   1d40a:	4622      	mov	r2, r4
   1d40c:	4629      	mov	r1, r5
   1d40e:	4630      	mov	r0, r6
	str[size] = '\0';
   1d410:	552f      	strb	r7, [r5, r4]
	memcpy(bt_mesh_prov_link.auth, str, size);
   1d412:	f00d f882 	bl	2a51a <memcpy>
	memset(bt_mesh_prov_link.auth + size, 0,
   1d416:	4639      	mov	r1, r7
   1d418:	f1c4 0210 	rsb	r2, r4, #16
   1d41c:	1930      	adds	r0, r6, r4
   1d41e:	f00d f887 	bl	2a530 <memset>
}
   1d422:	b003      	add	sp, #12
   1d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		int idx = value % 36;
   1d426:	2224      	movs	r2, #36	; 0x24
   1d428:	2300      	movs	r3, #0
   1d42a:	f7ea fe93 	bl	8154 <__aeabi_uldivmod>
		str[i] = characters[idx];
   1d42e:	5cbb      	ldrb	r3, [r7, r2]
   1d430:	55ab      	strb	r3, [r5, r6]
	for (int i = 0; i < size; i++) {
   1d432:	2301      	movs	r3, #1
   1d434:	3601      	adds	r6, #1
   1d436:	e7e1      	b.n	1d3fc <get_auth_string+0x18>
   1d438:	00033f82 	.word	0x00033f82
   1d43c:	2000ad3f 	.word	0x2000ad3f

0001d440 <get_auth_number>:
{
   1d440:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   1d442:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1d4d0 <get_auth_number+0x90>
{
   1d446:	b08b      	sub	sp, #44	; 0x2c
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   1d448:	ad02      	add	r5, sp, #8
{
   1d44a:	4607      	mov	r7, r0
   1d44c:	4614      	mov	r4, r2
   1d44e:	460e      	mov	r6, r1
	const uint32_t divider[PROV_IO_OOB_SIZE_MAX] = { 10, 100, 1000, 10000,
   1d450:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1d454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d456:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1d45a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	bt_rand(&num, sizeof(num));
   1d45e:	2104      	movs	r1, #4
	uint32_t num = 0;
   1d460:	2300      	movs	r3, #0
	bt_rand(&num, sizeof(num));
   1d462:	eb0d 0001 	add.w	r0, sp, r1
	uint32_t num = 0;
   1d466:	9301      	str	r3, [sp, #4]
	bt_rand(&num, sizeof(num));
   1d468:	f7f3 fa3a 	bl	108e0 <bt_rand>
	if (output == BT_MESH_BLINK ||
   1d46c:	1e7b      	subs	r3, r7, #1
		num %= divider[size - 1];
   1d46e:	1e62      	subs	r2, r4, #1
	if (output == BT_MESH_BLINK ||
   1d470:	2b01      	cmp	r3, #1
   1d472:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1d476:	9b01      	ldr	r3, [sp, #4]
   1d478:	d904      	bls.n	1d484 <get_auth_number+0x44>
	    output == BT_MESH_BEEP ||
   1d47a:	2f04      	cmp	r7, #4
   1d47c:	d002      	beq.n	1d484 <get_auth_number+0x44>
	    output == BT_MESH_VIBRATE ||
   1d47e:	3e01      	subs	r6, #1
   1d480:	2e01      	cmp	r6, #1
   1d482:	d81b      	bhi.n	1d4bc <get_auth_number+0x7c>
		num = (num % (divider[size - 1] - 1)) + 1;
   1d484:	3228      	adds	r2, #40	; 0x28
   1d486:	446a      	add	r2, sp
   1d488:	f852 2c20 	ldr.w	r2, [r2, #-32]
   1d48c:	3a01      	subs	r2, #1
   1d48e:	fbb3 f1f2 	udiv	r1, r3, r2
   1d492:	fb02 3311 	mls	r3, r2, r1, r3
   1d496:	3301      	adds	r3, #1
   1d498:	480e      	ldr	r0, [pc, #56]	; (1d4d4 <get_auth_number+0x94>)
	sys_put_be16(val >> 16, dst);
   1d49a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   1d49c:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   1d49e:	7702      	strb	r2, [r0, #28]
	dst[0] = val >> 8;
   1d4a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1d4a4:	76c1      	strb	r1, [r0, #27]
   1d4a6:	7742      	strb	r2, [r0, #29]
	dst[1] = val;
   1d4a8:	7783      	strb	r3, [r0, #30]
	memset(bt_mesh_prov_link.auth, 0, 12);
   1d4aa:	220c      	movs	r2, #12
   1d4ac:	2100      	movs	r1, #0
   1d4ae:	300f      	adds	r0, #15
   1d4b0:	9301      	str	r3, [sp, #4]
   1d4b2:	f00d f83d 	bl	2a530 <memset>
}
   1d4b6:	9801      	ldr	r0, [sp, #4]
   1d4b8:	b00b      	add	sp, #44	; 0x2c
   1d4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		num %= divider[size - 1];
   1d4bc:	3228      	adds	r2, #40	; 0x28
   1d4be:	446a      	add	r2, sp
   1d4c0:	f852 2c20 	ldr.w	r2, [r2, #-32]
   1d4c4:	fbb3 f1f2 	udiv	r1, r3, r2
   1d4c8:	fb02 3311 	mls	r3, r2, r1, r3
   1d4cc:	e7e4      	b.n	1d498 <get_auth_number+0x58>
   1d4ce:	bf00      	nop
   1d4d0:	0002ff94 	.word	0x0002ff94
   1d4d4:	2000ad30 	.word	0x2000ad30

0001d4d8 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d4d8:	4b04      	ldr	r3, [pc, #16]	; (1d4ec <atomic_or.constprop.0.isra.0+0x14>)
   1d4da:	e8d3 1fef 	ldaex	r1, [r3]
   1d4de:	4301      	orrs	r1, r0
   1d4e0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d4e4:	2a00      	cmp	r2, #0
   1d4e6:	d1f8      	bne.n	1d4da <atomic_or.constprop.0.isra.0+0x2>
}
   1d4e8:	4770      	bx	lr
   1d4ea:	bf00      	nop
   1d4ec:	2000ad30 	.word	0x2000ad30

0001d4f0 <prov_link_opened>:
{
   1d4f0:	b510      	push	{r4, lr}
   1d4f2:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d4f4:	2002      	movs	r0, #2
   1d4f6:	f7ff ffef 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
	if (bt_mesh_prov->link_open) {
   1d4fa:	4b07      	ldr	r3, [pc, #28]	; (1d518 <prov_link_opened+0x28>)
   1d4fc:	681b      	ldr	r3, [r3, #0]
   1d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d500:	b10b      	cbz	r3, 1d506 <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   1d502:	7820      	ldrb	r0, [r4, #0]
   1d504:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   1d506:	4b05      	ldr	r3, [pc, #20]	; (1d51c <prov_link_opened+0x2c>)
   1d508:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   1d50a:	689b      	ldr	r3, [r3, #8]
   1d50c:	681b      	ldr	r3, [r3, #0]
   1d50e:	b113      	cbz	r3, 1d516 <prov_link_opened+0x26>
}
   1d510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   1d514:	4718      	bx	r3
}
   1d516:	bd10      	pop	{r4, pc}
   1d518:	2000ad2c 	.word	0x2000ad2c
   1d51c:	2000ad30 	.word	0x2000ad30

0001d520 <prov_recv>:
{
   1d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t type = buf->data[0];
   1d522:	6810      	ldr	r0, [r2, #0]
   1d524:	4c23      	ldr	r4, [pc, #140]	; (1d5b4 <prov_recv+0x94>)
   1d526:	7803      	ldrb	r3, [r0, #0]
{
   1d528:	af00      	add	r7, sp, #0
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   1d52a:	2b09      	cmp	r3, #9
   1d52c:	d915      	bls.n	1d55a <prov_recv+0x3a>
		LOG_ERR("Unknown provisioning PDU type 0x%02x", type);
   1d52e:	466d      	mov	r5, sp
   1d530:	b088      	sub	sp, #32
   1d532:	466a      	mov	r2, sp
   1d534:	4920      	ldr	r1, [pc, #128]	; (1d5b8 <prov_recv+0x98>)
   1d536:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d53a:	2303      	movs	r3, #3
   1d53c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d540:	2300      	movs	r3, #0
   1d542:	481e      	ldr	r0, [pc, #120]	; (1d5bc <prov_recv+0x9c>)
   1d544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d548:	f7ed fb08 	bl	ab5c <z_impl_z_log_msg_static_create>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_PDU);
   1d54c:	2001      	movs	r0, #1
   1d54e:	46ad      	mov	sp, r5
   1d550:	68a3      	ldr	r3, [r4, #8]
   1d552:	689b      	ldr	r3, [r3, #8]
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   1d554:	4798      	blx	r3
}
   1d556:	46bd      	mov	sp, r7
   1d558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1d55a:	d003      	beq.n	1d564 <prov_recv+0x44>
   1d55c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   1d560:	4299      	cmp	r1, r3
   1d562:	d104      	bne.n	1d56e <prov_recv+0x4e>
	    !bt_mesh_prov_link.role->op[type]) {
   1d564:	68a1      	ldr	r1, [r4, #8]
   1d566:	1d1d      	adds	r5, r3, #4
   1d568:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1d56c:	b919      	cbnz	r1, 1d576 <prov_recv+0x56>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   1d56e:	68a3      	ldr	r3, [r4, #8]
   1d570:	2003      	movs	r0, #3
   1d572:	689b      	ldr	r3, [r3, #8]
   1d574:	e7ee      	b.n	1d554 <prov_recv+0x34>
	if (1 + op_len[type] != buf->len) {
   1d576:	8895      	ldrh	r5, [r2, #4]
   1d578:	4a11      	ldr	r2, [pc, #68]	; (1d5c0 <prov_recv+0xa0>)
   1d57a:	5cd2      	ldrb	r2, [r2, r3]
   1d57c:	3201      	adds	r2, #1
   1d57e:	42aa      	cmp	r2, r5
   1d580:	d014      	beq.n	1d5ac <prov_recv+0x8c>
		LOG_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   1d582:	466e      	mov	r6, sp
   1d584:	b088      	sub	sp, #32
   1d586:	466a      	mov	r2, sp
   1d588:	61d3      	str	r3, [r2, #28]
   1d58a:	2304      	movs	r3, #4
   1d58c:	490d      	ldr	r1, [pc, #52]	; (1d5c4 <prov_recv+0xa4>)
   1d58e:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1d592:	f842 3f10 	str.w	r3, [r2, #16]!
   1d596:	2300      	movs	r3, #0
   1d598:	4808      	ldr	r0, [pc, #32]	; (1d5bc <prov_recv+0x9c>)
   1d59a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d59e:	f7ed fadd 	bl	ab5c <z_impl_z_log_msg_static_create>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   1d5a2:	68a3      	ldr	r3, [r4, #8]
   1d5a4:	46b5      	mov	sp, r6
   1d5a6:	2002      	movs	r0, #2
   1d5a8:	689b      	ldr	r3, [r3, #8]
   1d5aa:	e7d3      	b.n	1d554 <prov_recv+0x34>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   1d5ac:	3001      	adds	r0, #1
   1d5ae:	4788      	blx	r1
   1d5b0:	e7d1      	b.n	1d556 <prov_recv+0x36>
   1d5b2:	bf00      	nop
   1d5b4:	2000ad30 	.word	0x2000ad30
   1d5b8:	00033ee4 	.word	0x00033ee4
   1d5bc:	0002fcf4 	.word	0x0002fcf4
   1d5c0:	00033f78 	.word	0x00033f78
   1d5c4:	00033f09 	.word	0x00033f09

0001d5c8 <bt_mesh_prov_reset_state>:
{
   1d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   1d5ca:	4b1a      	ldr	r3, [pc, #104]	; (1d634 <bt_mesh_prov_reset_state+0x6c>)
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   1d5cc:	4c1a      	ldr	r4, [pc, #104]	; (1d638 <bt_mesh_prov_reset_state+0x70>)
	pub_key_cb.func = func ? func : pub_key_ready;
   1d5ce:	2800      	cmp	r0, #0
   1d5d0:	bf14      	ite	ne
   1d5d2:	4602      	movne	r2, r0
   1d5d4:	461a      	moveq	r2, r3
   1d5d6:	4b19      	ldr	r3, [pc, #100]	; (1d63c <bt_mesh_prov_reset_state+0x74>)
{
   1d5d8:	af00      	add	r7, sp, #0
	pub_key_cb.func = func ? func : pub_key_ready;
   1d5da:	601a      	str	r2, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs.invite[0]) {
   1d5dc:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1d5e0:	b11b      	cbz	r3, 1d5ea <bt_mesh_prov_reset_state+0x22>
		bt_mesh_attention(NULL, 0);
   1d5e2:	2100      	movs	r1, #0
   1d5e4:	4608      	mov	r0, r1
   1d5e6:	f7fe f8e9 	bl	1b7bc <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d5ea:	2500      	movs	r5, #0
   1d5ec:	e8d4 3fef 	ldaex	r3, [r4]
   1d5f0:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1d5f4:	2a00      	cmp	r2, #0
   1d5f6:	d1f9      	bne.n	1d5ec <bt_mesh_prov_reset_state+0x24>
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   1d5f8:	f240 1215 	movw	r2, #277	; 0x115
   1d5fc:	4629      	mov	r1, r5
   1d5fe:	4810      	ldr	r0, [pc, #64]	; (1d640 <bt_mesh_prov_reset_state+0x78>)
   1d600:	f00c ff96 	bl	2a530 <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   1d604:	480d      	ldr	r0, [pc, #52]	; (1d63c <bt_mesh_prov_reset_state+0x74>)
   1d606:	f7f3 f989 	bl	1091c <bt_pub_key_gen>
	if (err) {
   1d60a:	4604      	mov	r4, r0
   1d60c:	b178      	cbz	r0, 1d62e <bt_mesh_prov_reset_state+0x66>
		LOG_ERR("Failed to generate public key (%d)", err);
   1d60e:	466e      	mov	r6, sp
   1d610:	b088      	sub	sp, #32
   1d612:	466a      	mov	r2, sp
   1d614:	4b0b      	ldr	r3, [pc, #44]	; (1d644 <bt_mesh_prov_reset_state+0x7c>)
   1d616:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d61a:	2303      	movs	r3, #3
   1d61c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d620:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d624:	462b      	mov	r3, r5
   1d626:	4808      	ldr	r0, [pc, #32]	; (1d648 <bt_mesh_prov_reset_state+0x80>)
   1d628:	f7ed fa98 	bl	ab5c <z_impl_z_log_msg_static_create>
   1d62c:	46b5      	mov	sp, r6
}
   1d62e:	4620      	mov	r0, r4
   1d630:	46bd      	mov	sp, r7
   1d632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d634:	0002dc9b 	.word	0x0002dc9b
   1d638:	2000ad30 	.word	0x2000ad30
   1d63c:	2000ad24 	.word	0x2000ad24
   1d640:	2000ad3f 	.word	0x2000ad3f
   1d644:	00033f2b 	.word	0x00033f2b
   1d648:	0002fcf4 	.word	0x0002fcf4

0001d64c <bt_mesh_prov_auth>:
{
   1d64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d64e:	4606      	mov	r6, r0
   1d650:	461c      	mov	r4, r3
   1d652:	b085      	sub	sp, #20
	switch (method) {
   1d654:	2903      	cmp	r1, #3
   1d656:	d817      	bhi.n	1d688 <bt_mesh_prov_auth+0x3c>
   1d658:	e8df f001 	tbb	[pc, r1]
   1d65c:	54130c02 	.word	0x54130c02
		if (action || size) {
   1d660:	ea52 0104 	orrs.w	r1, r2, r4
   1d664:	d110      	bne.n	1d688 <bt_mesh_prov_auth+0x3c>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   1d666:	2210      	movs	r2, #16
   1d668:	4842      	ldr	r0, [pc, #264]	; (1d774 <bt_mesh_prov_auth+0x128>)
   1d66a:	f00c ff61 	bl	2a530 <memset>
		return 0;
   1d66e:	2000      	movs	r0, #0
}
   1d670:	b005      	add	sp, #20
   1d672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (action || size) {
   1d674:	4322      	orrs	r2, r4
   1d676:	d107      	bne.n	1d688 <bt_mesh_prov_auth+0x3c>
   1d678:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1d67c:	f7ff ff2c 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
		return 0;
   1d680:	e7f5      	b.n	1d66e <bt_mesh_prov_auth+0x22>
	switch (action) {
   1d682:	2a04      	cmp	r2, #4
   1d684:	d903      	bls.n	1d68e <bt_mesh_prov_auth+0x42>
		if (is_provisioner) {
   1d686:	b990      	cbnz	r0, 1d6ae <bt_mesh_prov_auth+0x62>
   1d688:	f06f 0015 	mvn.w	r0, #21
   1d68c:	e7f0      	b.n	1d670 <bt_mesh_prov_auth+0x24>
   1d68e:	4b3a      	ldr	r3, [pc, #232]	; (1d778 <bt_mesh_prov_auth+0x12c>)
   1d690:	5c9d      	ldrb	r5, [r3, r2]
   1d692:	b170      	cbz	r0, 1d6b2 <bt_mesh_prov_auth+0x66>
			if (output == BT_MESH_DISPLAY_STRING) {
   1d694:	2d10      	cmp	r5, #16
   1d696:	d10a      	bne.n	1d6ae <bt_mesh_prov_auth+0x62>
   1d698:	2008      	movs	r0, #8
   1d69a:	f7ff ff1d 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
			return bt_mesh_prov->input(input, size);
   1d69e:	4621      	mov	r1, r4
   1d6a0:	4b36      	ldr	r3, [pc, #216]	; (1d77c <bt_mesh_prov_auth+0x130>)
   1d6a2:	681b      	ldr	r3, [r3, #0]
   1d6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   1d6a6:	b005      	add	sp, #20
   1d6a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return bt_mesh_prov->input(input, size);
   1d6ac:	4718      	bx	r3
   1d6ae:	2004      	movs	r0, #4
   1d6b0:	e7f3      	b.n	1d69a <bt_mesh_prov_auth+0x4e>
	if (!output) {
   1d6b2:	2d00      	cmp	r5, #0
   1d6b4:	d0e8      	beq.n	1d688 <bt_mesh_prov_auth+0x3c>
	if (!(bt_mesh_prov->output_actions & output)) {
   1d6b6:	4f31      	ldr	r7, [pc, #196]	; (1d77c <bt_mesh_prov_auth+0x130>)
   1d6b8:	683b      	ldr	r3, [r7, #0]
   1d6ba:	8b5a      	ldrh	r2, [r3, #26]
   1d6bc:	422a      	tst	r2, r5
   1d6be:	d0e3      	beq.n	1d688 <bt_mesh_prov_auth+0x3c>
	if (size > bt_mesh_prov->output_size) {
   1d6c0:	7e5b      	ldrb	r3, [r3, #25]
   1d6c2:	42a3      	cmp	r3, r4
   1d6c4:	d3e0      	bcc.n	1d688 <bt_mesh_prov_auth+0x3c>
		if (output == BT_MESH_DISPLAY_STRING) {
   1d6c6:	2d10      	cmp	r5, #16
   1d6c8:	d10b      	bne.n	1d6e2 <bt_mesh_prov_auth+0x96>
   1d6ca:	4628      	mov	r0, r5
   1d6cc:	f7ff ff04 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
			get_auth_string(str, size);
   1d6d0:	4621      	mov	r1, r4
   1d6d2:	a801      	add	r0, sp, #4
   1d6d4:	f7ff fe86 	bl	1d3e4 <get_auth_string>
			return bt_mesh_prov->output_string(str);
   1d6d8:	683b      	ldr	r3, [r7, #0]
			return bt_mesh_prov->output_string(str);
   1d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d6dc:	a801      	add	r0, sp, #4
   1d6de:	4798      	blx	r3
   1d6e0:	e7c6      	b.n	1d670 <bt_mesh_prov_auth+0x24>
   1d6e2:	2010      	movs	r0, #16
   1d6e4:	f7ff fef8 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
		return bt_mesh_prov->output_number(output,
   1d6e8:	683b      	ldr	r3, [r7, #0]
   1d6ea:	4631      	mov	r1, r6
   1d6ec:	4622      	mov	r2, r4
   1d6ee:	4628      	mov	r0, r5
   1d6f0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
   1d6f2:	f7ff fea5 	bl	1d440 <get_auth_number>
   1d6f6:	463b      	mov	r3, r7
   1d6f8:	4601      	mov	r1, r0
   1d6fa:	4628      	mov	r0, r5
}
   1d6fc:	b005      	add	sp, #20
   1d6fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_mesh_prov->output_number(output,
   1d702:	4718      	bx	r3
	switch (action) {
   1d704:	2a03      	cmp	r2, #3
   1d706:	d911      	bls.n	1d72c <bt_mesh_prov_auth+0xe0>
		if (!is_provisioner) {
   1d708:	2800      	cmp	r0, #0
   1d70a:	d0bd      	beq.n	1d688 <bt_mesh_prov_auth+0x3c>
   1d70c:	2500      	movs	r5, #0
   1d70e:	2010      	movs	r0, #16
   1d710:	f7ff fee2 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
		return bt_mesh_prov->output_number(output,
   1d714:	4b19      	ldr	r3, [pc, #100]	; (1d77c <bt_mesh_prov_auth+0x130>)
   1d716:	4629      	mov	r1, r5
   1d718:	681b      	ldr	r3, [r3, #0]
   1d71a:	4622      	mov	r2, r4
   1d71c:	2000      	movs	r0, #0
   1d71e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   1d720:	f7ff fe8e 	bl	1d440 <get_auth_number>
   1d724:	4633      	mov	r3, r6
   1d726:	4601      	mov	r1, r0
   1d728:	2008      	movs	r0, #8
   1d72a:	e7e7      	b.n	1d6fc <bt_mesh_prov_auth+0xb0>
   1d72c:	4b14      	ldr	r3, [pc, #80]	; (1d780 <bt_mesh_prov_auth+0x134>)
   1d72e:	5c9d      	ldrb	r5, [r3, r2]
		if (!is_provisioner) {
   1d730:	b9a0      	cbnz	r0, 1d75c <bt_mesh_prov_auth+0x110>
	if (!input) {
   1d732:	2d00      	cmp	r5, #0
   1d734:	d0a8      	beq.n	1d688 <bt_mesh_prov_auth+0x3c>
	if (!(bt_mesh_prov->input_actions & input)) {
   1d736:	4e11      	ldr	r6, [pc, #68]	; (1d77c <bt_mesh_prov_auth+0x130>)
   1d738:	6833      	ldr	r3, [r6, #0]
   1d73a:	8bda      	ldrh	r2, [r3, #30]
   1d73c:	422a      	tst	r2, r5
   1d73e:	d0a3      	beq.n	1d688 <bt_mesh_prov_auth+0x3c>
	if (size > bt_mesh_prov->input_size) {
   1d740:	7f1b      	ldrb	r3, [r3, #28]
   1d742:	42a3      	cmp	r3, r4
   1d744:	d3a0      	bcc.n	1d688 <bt_mesh_prov_auth+0x3c>
			if (input == BT_MESH_ENTER_STRING) {
   1d746:	2d08      	cmp	r5, #8
   1d748:	bf0c      	ite	eq
   1d74a:	4628      	moveq	r0, r5
   1d74c:	2004      	movne	r0, #4
   1d74e:	f7ff fec3 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
			return bt_mesh_prov->input(input, size);
   1d752:	6833      	ldr	r3, [r6, #0]
   1d754:	4621      	mov	r1, r4
   1d756:	4628      	mov	r0, r5
   1d758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d75a:	e7a4      	b.n	1d6a6 <bt_mesh_prov_auth+0x5a>
		if (input == BT_MESH_ENTER_STRING) {
   1d75c:	2d08      	cmp	r5, #8
   1d75e:	d1d6      	bne.n	1d70e <bt_mesh_prov_auth+0xc2>
   1d760:	2010      	movs	r0, #16
   1d762:	f7ff feb9 	bl	1d4d8 <atomic_or.constprop.0.isra.0>
			get_auth_string(str, size);
   1d766:	4621      	mov	r1, r4
   1d768:	a801      	add	r0, sp, #4
   1d76a:	f7ff fe3b 	bl	1d3e4 <get_auth_string>
			return bt_mesh_prov->output_string(str);
   1d76e:	4b03      	ldr	r3, [pc, #12]	; (1d77c <bt_mesh_prov_auth+0x130>)
   1d770:	681b      	ldr	r3, [r3, #0]
   1d772:	e7b2      	b.n	1d6da <bt_mesh_prov_auth+0x8e>
   1d774:	2000ad3f 	.word	0x2000ad3f
   1d778:	00033f73 	.word	0x00033f73
   1d77c:	2000ad2c 	.word	0x2000ad2c
   1d780:	00033f6f 	.word	0x00033f6f

0001d784 <bt_mesh_input_number>:
{
   1d784:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d786:	4b0d      	ldr	r3, [pc, #52]	; (1d7bc <bt_mesh_input_number+0x38>)
   1d788:	e8d3 2fef 	ldaex	r2, [r3]
   1d78c:	f022 0104 	bic.w	r1, r2, #4
   1d790:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1d794:	2c00      	cmp	r4, #0
   1d796:	d1f7      	bne.n	1d788 <bt_mesh_input_number+0x4>
	if (!atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_NUMBER)) {
   1d798:	0752      	lsls	r2, r2, #29
   1d79a:	d50c      	bpl.n	1d7b6 <bt_mesh_input_number+0x32>
	sys_put_be16(val >> 16, dst);
   1d79c:	0c02      	lsrs	r2, r0, #16
	dst[0] = val >> 8;
   1d79e:	0e01      	lsrs	r1, r0, #24
	dst[1] = val;
   1d7a0:	771a      	strb	r2, [r3, #28]
	dst[0] = val >> 8;
   1d7a2:	f3c0 2207 	ubfx	r2, r0, #8, #8
	dst[1] = val;
   1d7a6:	7798      	strb	r0, [r3, #30]
	dst[0] = val >> 8;
   1d7a8:	76d9      	strb	r1, [r3, #27]
   1d7aa:	775a      	strb	r2, [r3, #29]
	bt_mesh_prov_link.role->input_complete();
   1d7ac:	689b      	ldr	r3, [r3, #8]
   1d7ae:	68db      	ldr	r3, [r3, #12]
   1d7b0:	4798      	blx	r3
	return 0;
   1d7b2:	2000      	movs	r0, #0
}
   1d7b4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d7b6:	f06f 0015 	mvn.w	r0, #21
   1d7ba:	e7fb      	b.n	1d7b4 <bt_mesh_input_number+0x30>
   1d7bc:	2000ad30 	.word	0x2000ad30

0001d7c0 <bt_mesh_prov_get>:
}
   1d7c0:	4b01      	ldr	r3, [pc, #4]	; (1d7c8 <bt_mesh_prov_get+0x8>)
   1d7c2:	6818      	ldr	r0, [r3, #0]
   1d7c4:	4770      	bx	lr
   1d7c6:	bf00      	nop
   1d7c8:	2000ad2c 	.word	0x2000ad2c

0001d7cc <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d7cc:	4b02      	ldr	r3, [pc, #8]	; (1d7d8 <bt_mesh_prov_active+0xc>)
   1d7ce:	e8d3 0faf 	lda	r0, [r3]
}
   1d7d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1d7d6:	4770      	bx	lr
   1d7d8:	2000ad30 	.word	0x2000ad30

0001d7dc <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   1d7dc:	4800      	ldr	r0, [pc, #0]	; (1d7e0 <bt_mesh_prov_bearer_cb_get+0x4>)
   1d7de:	4770      	bx	lr
   1d7e0:	00030910 	.word	0x00030910

0001d7e4 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   1d7e4:	4b02      	ldr	r3, [pc, #8]	; (1d7f0 <bt_mesh_prov_complete+0xc>)
   1d7e6:	681b      	ldr	r3, [r3, #0]
   1d7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d7ea:	b103      	cbz	r3, 1d7ee <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   1d7ec:	4718      	bx	r3
	}
}
   1d7ee:	4770      	bx	lr
   1d7f0:	2000ad2c 	.word	0x2000ad2c

0001d7f4 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   1d7f4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		bt_mesh_pb_adv_reset();
   1d7f6:	f010 fa8e 	bl	2dd16 <bt_mesh_pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_pb_gatt_reset();
   1d7fa:	f010 fa8f 	bl	2dd1c <bt_mesh_pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   1d7fe:	2000      	movs	r0, #0
   1d800:	f7ff fee2 	bl	1d5c8 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   1d804:	4b03      	ldr	r3, [pc, #12]	; (1d814 <bt_mesh_prov_reset+0x20>)
   1d806:	681b      	ldr	r3, [r3, #0]
   1d808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d80a:	b113      	cbz	r3, 1d812 <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   1d80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   1d810:	4718      	bx	r3
}
   1d812:	bd10      	pop	{r4, pc}
   1d814:	2000ad2c 	.word	0x2000ad2c

0001d818 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   1d818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!prov_info) {
   1d81a:	4603      	mov	r3, r0
   1d81c:	b158      	cbz	r0, 1d836 <bt_mesh_prov_init+0x1e>
		LOG_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   1d81e:	4a0d      	ldr	r2, [pc, #52]	; (1d854 <bt_mesh_prov_init+0x3c>)
   1d820:	6010      	str	r0, [r2, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		bt_mesh_pb_adv_init();
   1d822:	f001 fa51 	bl	1ecc8 <bt_mesh_pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_pb_gatt_init();
   1d826:	f001 fb33 	bl	1ee90 <bt_mesh_pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
   1d82a:	2000      	movs	r0, #0
}
   1d82c:	b007      	add	sp, #28
   1d82e:	f85d eb04 	ldr.w	lr, [sp], #4
	return bt_mesh_prov_reset_state(NULL);
   1d832:	f7ff bec9 	b.w	1d5c8 <bt_mesh_prov_reset_state>
		LOG_ERR("No provisioning context provided");
   1d836:	4a08      	ldr	r2, [pc, #32]	; (1d858 <bt_mesh_prov_init+0x40>)
   1d838:	9205      	str	r2, [sp, #20]
   1d83a:	2202      	movs	r2, #2
   1d83c:	9204      	str	r2, [sp, #16]
   1d83e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d842:	4806      	ldr	r0, [pc, #24]	; (1d85c <bt_mesh_prov_init+0x44>)
   1d844:	aa04      	add	r2, sp, #16
   1d846:	f7ed f989 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   1d84a:	f06f 0015 	mvn.w	r0, #21
   1d84e:	b007      	add	sp, #28
   1d850:	f85d fb04 	ldr.w	pc, [sp], #4
   1d854:	2000ad2c 	.word	0x2000ad2c
   1d858:	00033f4e 	.word	0x00033f4e
   1d85c:	0002fcf4 	.word	0x0002fcf4

0001d860 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   1d860:	4b02      	ldr	r3, [pc, #8]	; (1d86c <bt_mesh_prov_send+0xc>)
   1d862:	2200      	movs	r2, #0
   1d864:	685b      	ldr	r3, [r3, #4]
   1d866:	689b      	ldr	r3, [r3, #8]
   1d868:	4718      	bx	r3
   1d86a:	bf00      	nop
   1d86c:	2000ad30 	.word	0x2000ad30

0001d870 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   1d870:	2200      	movs	r2, #0
   1d872:	4b02      	ldr	r3, [pc, #8]	; (1d87c <prov_link_opened+0xc>)
   1d874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   1d878:	4770      	bx	lr
   1d87a:	bf00      	nop
   1d87c:	2000ad30 	.word	0x2000ad30

0001d880 <prov_invite>:
	PROV_BUF(buf, PDU_LEN_CAPABILITIES);
   1d880:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1d884:	b510      	push	{r4, lr}
   1d886:	b08e      	sub	sp, #56	; 0x38
	if (data[0]) {
   1d888:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, PDU_LEN_CAPABILITIES);
   1d88a:	ab03      	add	r3, sp, #12
{
   1d88c:	4604      	mov	r4, r0
	PROV_BUF(buf, PDU_LEN_CAPABILITIES);
   1d88e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d892:	9300      	str	r3, [sp, #0]
	if (data[0]) {
   1d894:	b111      	cbz	r1, 1d89c <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   1d896:	2000      	movs	r0, #0
   1d898:	f7fd ff90 	bl	1b7bc <bt_mesh_attention>
	memcpy(bt_mesh_prov_link.conf_inputs.invite, data, PDU_LEN_INVITE);
   1d89c:	2201      	movs	r2, #1
   1d89e:	4621      	mov	r1, r4
   1d8a0:	4828      	ldr	r0, [pc, #160]	; (1d944 <prov_invite+0xc4>)
   1d8a2:	f00c fe3a 	bl	2a51a <memcpy>
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   1d8a6:	2101      	movs	r1, #1
   1d8a8:	4668      	mov	r0, sp
   1d8aa:	f010 f9f7 	bl	2dc9c <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   1d8ae:	f7fb fd91 	bl	193d4 <bt_mesh_elem_count>
			      bt_mesh_prov->public_key_be == NULL ? PUB_KEY_NO_OOB : PUB_KEY_OOB);
   1d8b2:	4c25      	ldr	r4, [pc, #148]	; (1d948 <prov_invite+0xc8>)
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   1d8b4:	4601      	mov	r1, r0
   1d8b6:	4668      	mov	r0, sp
   1d8b8:	f010 fb1b 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   1d8bc:	2101      	movs	r1, #1
   1d8be:	4668      	mov	r0, sp
   1d8c0:	f010 fb27 	bl	2df12 <net_buf_simple_add_be16>
			      bt_mesh_prov->public_key_be == NULL ? PUB_KEY_NO_OOB : PUB_KEY_OOB);
   1d8c4:	6823      	ldr	r3, [r4, #0]
	net_buf_simple_add_u8(&buf,
   1d8c6:	4668      	mov	r0, sp
   1d8c8:	68d9      	ldr	r1, [r3, #12]
   1d8ca:	3900      	subs	r1, #0
   1d8cc:	bf18      	it	ne
   1d8ce:	2101      	movne	r1, #1
   1d8d0:	f010 fb0f 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   1d8d4:	6823      	ldr	r3, [r4, #0]
   1d8d6:	4668      	mov	r0, sp
   1d8d8:	6959      	ldr	r1, [r3, #20]
   1d8da:	3900      	subs	r1, #0
   1d8dc:	bf18      	it	ne
   1d8de:	2101      	movne	r1, #1
   1d8e0:	f010 fb07 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   1d8e4:	6823      	ldr	r3, [r4, #0]
   1d8e6:	4668      	mov	r0, sp
   1d8e8:	7e59      	ldrb	r1, [r3, #25]
   1d8ea:	f010 fb02 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   1d8ee:	6823      	ldr	r3, [r4, #0]
   1d8f0:	4668      	mov	r0, sp
   1d8f2:	8b59      	ldrh	r1, [r3, #26]
   1d8f4:	f010 fb0d 	bl	2df12 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   1d8f8:	6823      	ldr	r3, [r4, #0]
   1d8fa:	4668      	mov	r0, sp
   1d8fc:	7f19      	ldrb	r1, [r3, #28]
   1d8fe:	f010 faf8 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   1d902:	6823      	ldr	r3, [r4, #0]
   1d904:	4668      	mov	r0, sp
   1d906:	8bd9      	ldrh	r1, [r3, #30]
   1d908:	f010 fb03 	bl	2df12 <net_buf_simple_add_be16>
	memcpy(bt_mesh_prov_link.conf_inputs.capabilities, &buf.data[1], PDU_LEN_CAPABILITIES);
   1d90c:	9900      	ldr	r1, [sp, #0]
   1d90e:	220b      	movs	r2, #11
   1d910:	3101      	adds	r1, #1
   1d912:	480e      	ldr	r0, [pc, #56]	; (1d94c <prov_invite+0xcc>)
   1d914:	f00c fe01 	bl	2a51a <memcpy>
	if (bt_mesh_prov_send(&buf, NULL)) {
   1d918:	2100      	movs	r1, #0
   1d91a:	4668      	mov	r0, sp
   1d91c:	f7ff ffa0 	bl	1d860 <bt_mesh_prov_send>
   1d920:	2302      	movs	r3, #2
   1d922:	b150      	cbz	r0, 1d93a <prov_invite+0xba>
		LOG_ERR("Failed to send capabilities");
   1d924:	4a0a      	ldr	r2, [pc, #40]	; (1d950 <prov_invite+0xd0>)
   1d926:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d92a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1d92e:	4809      	ldr	r0, [pc, #36]	; (1d954 <prov_invite+0xd4>)
   1d930:	aa0c      	add	r2, sp, #48	; 0x30
   1d932:	f010 f9bf 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
}
   1d936:	b00e      	add	sp, #56	; 0x38
   1d938:	bd10      	pop	{r4, pc}
	bt_mesh_prov_link.expect = PROV_START;
   1d93a:	4a07      	ldr	r2, [pc, #28]	; (1d958 <prov_invite+0xd8>)
   1d93c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
   1d940:	e7f9      	b.n	1d936 <prov_invite+0xb6>
   1d942:	bf00      	nop
   1d944:	2000adb0 	.word	0x2000adb0
   1d948:	2000ad2c 	.word	0x2000ad2c
   1d94c:	2000adb1 	.word	0x2000adb1
   1d950:	00033fa6 	.word	0x00033fa6
   1d954:	0002fcfc 	.word	0x0002fcfc
   1d958:	2000ad30 	.word	0x2000ad30

0001d95c <prov_send_fail_msg>:
	PROV_BUF(buf, PDU_LEN_FAILED);
   1d95c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1d960:	b510      	push	{r4, lr}
   1d962:	b08c      	sub	sp, #48	; 0x30
	PROV_BUF(buf, PDU_LEN_FAILED);
   1d964:	ab01      	add	r3, sp, #4
   1d966:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1d96a:	4604      	mov	r4, r0
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   1d96c:	22ff      	movs	r2, #255	; 0xff
	PROV_BUF(buf, PDU_LEN_FAILED);
   1d96e:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   1d970:	4b0d      	ldr	r3, [pc, #52]	; (1d9a8 <prov_send_fail_msg+0x4c>)
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   1d972:	2109      	movs	r1, #9
   1d974:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   1d976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   1d97a:	f010 f98f 	bl	2dc9c <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   1d97e:	4621      	mov	r1, r4
   1d980:	a803      	add	r0, sp, #12
   1d982:	f010 fab6 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   1d986:	2100      	movs	r1, #0
   1d988:	a803      	add	r0, sp, #12
   1d98a:	f7ff ff69 	bl	1d860 <bt_mesh_prov_send>
   1d98e:	b148      	cbz	r0, 1d9a4 <prov_send_fail_msg+0x48>
		LOG_ERR("Failed to send Provisioning Failed message");
   1d990:	4b06      	ldr	r3, [pc, #24]	; (1d9ac <prov_send_fail_msg+0x50>)
   1d992:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d996:	930b      	str	r3, [sp, #44]	; 0x2c
   1d998:	2302      	movs	r3, #2
   1d99a:	4805      	ldr	r0, [pc, #20]	; (1d9b0 <prov_send_fail_msg+0x54>)
   1d99c:	aa0a      	add	r2, sp, #40	; 0x28
   1d99e:	930a      	str	r3, [sp, #40]	; 0x28
   1d9a0:	f010 f988 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
}
   1d9a4:	b00c      	add	sp, #48	; 0x30
   1d9a6:	bd10      	pop	{r4, pc}
   1d9a8:	2000ad30 	.word	0x2000ad30
   1d9ac:	00033fc2 	.word	0x00033fc2
   1d9b0:	0002fcfc 	.word	0x0002fcfc

0001d9b4 <prov_random>:
{
   1d9b4:	b510      	push	{r4, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1d9b6:	2210      	movs	r2, #16
{
   1d9b8:	b094      	sub	sp, #80	; 0x50
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1d9ba:	4937      	ldr	r1, [pc, #220]	; (1da98 <prov_random+0xe4>)
{
   1d9bc:	4604      	mov	r4, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1d9be:	f00c fd85 	bl	2a4cc <memcmp>
   1d9c2:	b978      	cbnz	r0, 1d9e4 <prov_random+0x30>
		LOG_ERR("Random value is identical to ours, rejecting.");
   1d9c4:	4b35      	ldr	r3, [pc, #212]	; (1da9c <prov_random+0xe8>)
   1d9c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d9ca:	9313      	str	r3, [sp, #76]	; 0x4c
   1d9cc:	2302      	movs	r3, #2
   1d9ce:	4834      	ldr	r0, [pc, #208]	; (1daa0 <prov_random+0xec>)
   1d9d0:	aa12      	add	r2, sp, #72	; 0x48
   1d9d2:	9312      	str	r3, [sp, #72]	; 0x48
   1d9d4:	f010 f96e 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1d9d8:	2004      	movs	r0, #4
}
   1d9da:	b014      	add	sp, #80	; 0x50
   1d9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_send_fail_msg(reason);
   1d9e0:	f7ff bfbc 	b.w	1d95c <prov_send_fail_msg>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   1d9e4:	4a2f      	ldr	r2, [pc, #188]	; (1daa4 <prov_random+0xf0>)
   1d9e6:	4621      	mov	r1, r4
   1d9e8:	ab04      	add	r3, sp, #16
   1d9ea:	f102 0061 	add.w	r0, r2, #97	; 0x61
   1d9ee:	f00f f8e6 	bl	2cbbe <bt_mesh_prov_conf>
   1d9f2:	b158      	cbz	r0, 1da0c <prov_random+0x58>
		LOG_ERR("Unable to calculate confirmation verification");
   1d9f4:	4b2c      	ldr	r3, [pc, #176]	; (1daa8 <prov_random+0xf4>)
		LOG_ERR("Failed to generate provisioning salt");
   1d9f6:	9313      	str	r3, [sp, #76]	; 0x4c
   1d9f8:	2302      	movs	r3, #2
   1d9fa:	4829      	ldr	r0, [pc, #164]	; (1daa0 <prov_random+0xec>)
   1d9fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da00:	aa12      	add	r2, sp, #72	; 0x48
   1da02:	9312      	str	r3, [sp, #72]	; 0x48
   1da04:	f010 f956 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1da08:	2007      	movs	r0, #7
   1da0a:	e011      	b.n	1da30 <prov_random+0x7c>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   1da0c:	2210      	movs	r2, #16
   1da0e:	4927      	ldr	r1, [pc, #156]	; (1daac <prov_random+0xf8>)
   1da10:	eb0d 0002 	add.w	r0, sp, r2
   1da14:	f00c fd5a 	bl	2a4cc <memcmp>
   1da18:	b170      	cbz	r0, 1da38 <prov_random+0x84>
		LOG_ERR("Invalid confirmation value");
   1da1a:	4b25      	ldr	r3, [pc, #148]	; (1dab0 <prov_random+0xfc>)
   1da1c:	4820      	ldr	r0, [pc, #128]	; (1daa0 <prov_random+0xec>)
   1da1e:	9313      	str	r3, [sp, #76]	; 0x4c
   1da20:	2302      	movs	r3, #2
   1da22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da26:	aa12      	add	r2, sp, #72	; 0x48
   1da28:	9312      	str	r3, [sp, #72]	; 0x48
   1da2a:	f010 f943 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1da2e:	2004      	movs	r0, #4
   1da30:	f7ff ff94 	bl	1d95c <prov_send_fail_msg>
}
   1da34:	b014      	add	sp, #80	; 0x50
   1da36:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   1da38:	4b1e      	ldr	r3, [pc, #120]	; (1dab4 <prov_random+0x100>)
   1da3a:	4621      	mov	r1, r4
   1da3c:	f1a3 02c1 	sub.w	r2, r3, #193	; 0xc1
   1da40:	f1a3 00b1 	sub.w	r0, r3, #177	; 0xb1
   1da44:	f00f f896 	bl	2cb74 <bt_mesh_prov_salt>
   1da48:	4604      	mov	r4, r0
   1da4a:	b108      	cbz	r0, 1da50 <prov_random+0x9c>
		LOG_ERR("Failed to generate provisioning salt");
   1da4c:	4b1a      	ldr	r3, [pc, #104]	; (1dab8 <prov_random+0x104>)
   1da4e:	e7d2      	b.n	1d9f6 <prov_random+0x42>
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   1da50:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
   1da54:	ab08      	add	r3, sp, #32
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   1da56:	2106      	movs	r1, #6
   1da58:	a801      	add	r0, sp, #4
	PROV_BUF(rnd, PDU_LEN_RANDOM);
   1da5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1da5e:	9301      	str	r3, [sp, #4]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   1da60:	f010 f91c 	bl	2dc9c <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   1da64:	490c      	ldr	r1, [pc, #48]	; (1da98 <prov_random+0xe4>)
   1da66:	2210      	movs	r2, #16
   1da68:	a801      	add	r0, sp, #4
   1da6a:	f010 fa36 	bl	2deda <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   1da6e:	4621      	mov	r1, r4
   1da70:	a801      	add	r0, sp, #4
   1da72:	f7ff fef5 	bl	1d860 <bt_mesh_prov_send>
   1da76:	b150      	cbz	r0, 1da8e <prov_random+0xda>
		LOG_ERR("Failed to send Provisioning Random");
   1da78:	4b10      	ldr	r3, [pc, #64]	; (1dabc <prov_random+0x108>)
   1da7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da7e:	9313      	str	r3, [sp, #76]	; 0x4c
   1da80:	2302      	movs	r3, #2
   1da82:	4807      	ldr	r0, [pc, #28]	; (1daa0 <prov_random+0xec>)
   1da84:	aa12      	add	r2, sp, #72	; 0x48
   1da86:	9312      	str	r3, [sp, #72]	; 0x48
   1da88:	f010 f914 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
		return;
   1da8c:	e7d2      	b.n	1da34 <prov_random+0x80>
	bt_mesh_prov_link.expect = PROV_DATA;
   1da8e:	2207      	movs	r2, #7
   1da90:	4b0b      	ldr	r3, [pc, #44]	; (1dac0 <prov_random+0x10c>)
   1da92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1da96:	e7cd      	b.n	1da34 <prov_random+0x80>
   1da98:	2000ad80 	.word	0x2000ad80
   1da9c:	00033fed 	.word	0x00033fed
   1daa0:	0002fcfc 	.word	0x0002fcfc
   1daa4:	2000ad3f 	.word	0x2000ad3f
   1daa8:	0003401b 	.word	0x0003401b
   1daac:	2000ad70 	.word	0x2000ad70
   1dab0:	00034049 	.word	0x00034049
   1dab4:	2000ae41 	.word	0x2000ae41
   1dab8:	00034064 	.word	0x00034064
   1dabc:	00034089 	.word	0x00034089
   1dac0:	2000ad30 	.word	0x2000ad30

0001dac4 <send_confirm>:
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   1dac4:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
{
   1dac8:	b500      	push	{lr}
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   1daca:	492a      	ldr	r1, [pc, #168]	; (1db74 <send_confirm+0xb0>)
{
   1dacc:	b091      	sub	sp, #68	; 0x44
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   1dace:	ab04      	add	r3, sp, #16
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   1dad0:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, PDU_LEN_CONFIRM);
   1dad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1dad8:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf_salt(inputs, bt_mesh_prov_link.conf_salt)) {
   1dada:	f00f f861 	bl	2cba0 <bt_mesh_prov_conf_salt>
   1dade:	b178      	cbz	r0, 1db00 <send_confirm+0x3c>
		LOG_ERR("Unable to generate confirmation salt");
   1dae0:	4b25      	ldr	r3, [pc, #148]	; (1db78 <send_confirm+0xb4>)
		LOG_ERR("Unable to generate confirmation value");
   1dae2:	930f      	str	r3, [sp, #60]	; 0x3c
   1dae4:	2302      	movs	r3, #2
   1dae6:	4825      	ldr	r0, [pc, #148]	; (1db7c <send_confirm+0xb8>)
   1dae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1daec:	aa0e      	add	r2, sp, #56	; 0x38
   1daee:	930e      	str	r3, [sp, #56]	; 0x38
   1daf0:	f010 f8e0 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1daf4:	2007      	movs	r0, #7
   1daf6:	f7ff ff31 	bl	1d95c <prov_send_fail_msg>
}
   1dafa:	b011      	add	sp, #68	; 0x44
   1dafc:	f85d fb04 	ldr.w	pc, [sp], #4
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   1db00:	4a1f      	ldr	r2, [pc, #124]	; (1db80 <send_confirm+0xbc>)
   1db02:	f1a2 0110 	sub.w	r1, r2, #16
   1db06:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   1db0a:	f7fa ff97 	bl	18a3c <bt_mesh_prov_conf_key>
   1db0e:	b108      	cbz	r0, 1db14 <send_confirm+0x50>
		LOG_ERR("Unable to generate confirmation key");
   1db10:	4b1c      	ldr	r3, [pc, #112]	; (1db84 <send_confirm+0xc0>)
   1db12:	e7e6      	b.n	1dae2 <send_confirm+0x1e>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   1db14:	2110      	movs	r1, #16
   1db16:	481c      	ldr	r0, [pc, #112]	; (1db88 <send_confirm+0xc4>)
   1db18:	f7f2 fee2 	bl	108e0 <bt_rand>
   1db1c:	b108      	cbz	r0, 1db22 <send_confirm+0x5e>
		LOG_ERR("Unable to generate random number");
   1db1e:	4b1b      	ldr	r3, [pc, #108]	; (1db8c <send_confirm+0xc8>)
   1db20:	e7df      	b.n	1dae2 <send_confirm+0x1e>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   1db22:	2105      	movs	r1, #5
   1db24:	a801      	add	r0, sp, #4
   1db26:	f010 f8b9 	bl	2dc9c <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   1db2a:	2110      	movs	r1, #16
   1db2c:	a801      	add	r0, sp, #4
   1db2e:	f002 fc0f 	bl	20350 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   1db32:	4a17      	ldr	r2, [pc, #92]	; (1db90 <send_confirm+0xcc>)
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   1db34:	4603      	mov	r3, r0
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   1db36:	f102 0141 	add.w	r1, r2, #65	; 0x41
   1db3a:	f102 0061 	add.w	r0, r2, #97	; 0x61
   1db3e:	f00f f83e 	bl	2cbbe <bt_mesh_prov_conf>
   1db42:	4601      	mov	r1, r0
   1db44:	b108      	cbz	r0, 1db4a <send_confirm+0x86>
		LOG_ERR("Unable to generate confirmation value");
   1db46:	4b13      	ldr	r3, [pc, #76]	; (1db94 <send_confirm+0xd0>)
   1db48:	e7cb      	b.n	1dae2 <send_confirm+0x1e>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   1db4a:	a801      	add	r0, sp, #4
   1db4c:	f7ff fe88 	bl	1d860 <bt_mesh_prov_send>
   1db50:	b150      	cbz	r0, 1db68 <send_confirm+0xa4>
		LOG_ERR("Failed to send Provisioning Confirm");
   1db52:	4b11      	ldr	r3, [pc, #68]	; (1db98 <send_confirm+0xd4>)
   1db54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1db58:	930f      	str	r3, [sp, #60]	; 0x3c
   1db5a:	2302      	movs	r3, #2
   1db5c:	4807      	ldr	r0, [pc, #28]	; (1db7c <send_confirm+0xb8>)
   1db5e:	aa0e      	add	r2, sp, #56	; 0x38
   1db60:	930e      	str	r3, [sp, #56]	; 0x38
   1db62:	f010 f8a7 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
		return;
   1db66:	e7c8      	b.n	1dafa <send_confirm+0x36>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   1db68:	2206      	movs	r2, #6
   1db6a:	4b0c      	ldr	r3, [pc, #48]	; (1db9c <send_confirm+0xd8>)
   1db6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   1db70:	e7c3      	b.n	1dafa <send_confirm+0x36>
   1db72:	bf00      	nop
   1db74:	2000ad90 	.word	0x2000ad90
   1db78:	000340ac 	.word	0x000340ac
   1db7c:	0002fcfc 	.word	0x0002fcfc
   1db80:	2000ada0 	.word	0x2000ada0
   1db84:	000340d1 	.word	0x000340d1
   1db88:	2000ad80 	.word	0x2000ad80
   1db8c:	000340f5 	.word	0x000340f5
   1db90:	2000ad3f 	.word	0x2000ad3f
   1db94:	00034116 	.word	0x00034116
   1db98:	0003413c 	.word	0x0003413c
   1db9c:	2000ad30 	.word	0x2000ad30

0001dba0 <prov_dh_key_cb.part.0>:
static void prov_dh_key_cb(const uint8_t dhkey[BT_DH_KEY_LEN])
   1dba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("DHKey generation failed");
   1dba2:	4b08      	ldr	r3, [pc, #32]	; (1dbc4 <prov_dh_key_cb.part.0+0x24>)
   1dba4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dba8:	9305      	str	r3, [sp, #20]
   1dbaa:	2302      	movs	r3, #2
   1dbac:	4806      	ldr	r0, [pc, #24]	; (1dbc8 <prov_dh_key_cb.part.0+0x28>)
   1dbae:	aa04      	add	r2, sp, #16
   1dbb0:	9304      	str	r3, [sp, #16]
   1dbb2:	f010 f87f 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1dbb6:	2007      	movs	r0, #7
}
   1dbb8:	b007      	add	sp, #28
   1dbba:	f85d eb04 	ldr.w	lr, [sp], #4
	prov_send_fail_msg(reason);
   1dbbe:	f7ff becd 	b.w	1d95c <prov_send_fail_msg>
   1dbc2:	bf00      	nop
   1dbc4:	00034160 	.word	0x00034160
   1dbc8:	0002fcfc 	.word	0x0002fcfc

0001dbcc <send_input_complete>:
	PROV_BUF(buf, PDU_LEN_INPUT_COMPLETE);
   1dbcc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   1dbd0:	b500      	push	{lr}
   1dbd2:	b08d      	sub	sp, #52	; 0x34
	PROV_BUF(buf, PDU_LEN_INPUT_COMPLETE);
   1dbd4:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   1dbd6:	2104      	movs	r1, #4
   1dbd8:	a803      	add	r0, sp, #12
	PROV_BUF(buf, PDU_LEN_INPUT_COMPLETE);
   1dbda:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dbde:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   1dbe0:	f010 f85c 	bl	2dc9c <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   1dbe4:	2100      	movs	r1, #0
   1dbe6:	a803      	add	r0, sp, #12
   1dbe8:	f7ff fe3a 	bl	1d860 <bt_mesh_prov_send>
   1dbec:	b148      	cbz	r0, 1dc02 <send_input_complete+0x36>
		LOG_ERR("Failed to send Provisioning Input Complete");
   1dbee:	4b08      	ldr	r3, [pc, #32]	; (1dc10 <send_input_complete+0x44>)
   1dbf0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dbf4:	930b      	str	r3, [sp, #44]	; 0x2c
   1dbf6:	2302      	movs	r3, #2
   1dbf8:	4806      	ldr	r0, [pc, #24]	; (1dc14 <send_input_complete+0x48>)
   1dbfa:	aa0a      	add	r2, sp, #40	; 0x28
   1dbfc:	930a      	str	r3, [sp, #40]	; 0x28
   1dbfe:	f010 f859 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   1dc02:	2205      	movs	r2, #5
   1dc04:	4b04      	ldr	r3, [pc, #16]	; (1dc18 <send_input_complete+0x4c>)
   1dc06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   1dc0a:	b00d      	add	sp, #52	; 0x34
   1dc0c:	f85d fb04 	ldr.w	pc, [sp], #4
   1dc10:	00034178 	.word	0x00034178
   1dc14:	0002fcfc 	.word	0x0002fcfc
   1dc18:	2000ad30 	.word	0x2000ad30

0001dc1c <prov_data>:
	PROV_BUF(msg, PDU_LEN_COMPLETE);
   1dc1c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   1dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc24:	b0a3      	sub	sp, #140	; 0x8c
   1dc26:	af02      	add	r7, sp, #8
	PROV_BUF(msg, PDU_LEN_COMPLETE);
   1dc28:	1d3b      	adds	r3, r7, #4
   1dc2a:	e9c7 2304 	strd	r2, r3, [r7, #16]

static inline int bt_mesh_session_key(const uint8_t dhkey[32],
				      const uint8_t prov_salt[16],
				      uint8_t session_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   1dc2e:	4a55      	ldr	r2, [pc, #340]	; (1dd84 <prov_data+0x168>)
   1dc30:	f107 0528 	add.w	r5, r7, #40	; 0x28
   1dc34:	60fb      	str	r3, [r7, #12]
{
   1dc36:	4604      	mov	r4, r0
   1dc38:	2120      	movs	r1, #32
   1dc3a:	4b53      	ldr	r3, [pc, #332]	; (1dd88 <prov_data+0x16c>)
   1dc3c:	9500      	str	r5, [sp, #0]
   1dc3e:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   1dc42:	f00e fe8d 	bl	2c960 <bt_mesh_k1>
	if (err) {
   1dc46:	b188      	cbz	r0, 1dc6c <prov_data+0x50>
		LOG_ERR("Unable to generate session key");
   1dc48:	4b50      	ldr	r3, [pc, #320]	; (1dd8c <prov_data+0x170>)
		LOG_ERR("Unable to generate session nonce");
   1dc4a:	677b      	str	r3, [r7, #116]	; 0x74
   1dc4c:	2302      	movs	r3, #2
   1dc4e:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1dc52:	673b      	str	r3, [r7, #112]	; 0x70
   1dc54:	484e      	ldr	r0, [pc, #312]	; (1dd90 <prov_data+0x174>)
   1dc56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dc5a:	f010 f82b 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1dc5e:	2007      	movs	r0, #7
   1dc60:	f7ff fe7c 	bl	1d95c <prov_send_fail_msg>
}
   1dc64:	3784      	adds	r7, #132	; 0x84
   1dc66:	46bd      	mov	sp, r7
   1dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				      uint8_t nonce[13])
{
	uint8_t tmp[16];
	int err;

	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   1dc6c:	4a45      	ldr	r2, [pc, #276]	; (1dd84 <prov_data+0x168>)
   1dc6e:	f107 0860 	add.w	r8, r7, #96	; 0x60
   1dc72:	2120      	movs	r1, #32
   1dc74:	4b47      	ldr	r3, [pc, #284]	; (1dd94 <prov_data+0x178>)
   1dc76:	f8cd 8000 	str.w	r8, [sp]
   1dc7a:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   1dc7e:	f00e fe6f 	bl	2c960 <bt_mesh_k1>
	if (!err) {
   1dc82:	b108      	cbz	r0, 1dc88 <prov_data+0x6c>
		LOG_ERR("Unable to generate session nonce");
   1dc84:	4b44      	ldr	r3, [pc, #272]	; (1dd98 <prov_data+0x17c>)
   1dc86:	e7e0      	b.n	1dc4a <prov_data+0x2e>
		memcpy(nonce, tmp + 3, 13);
   1dc88:	220d      	movs	r2, #13
   1dc8a:	f107 0163 	add.w	r1, r7, #99	; 0x63
   1dc8e:	f107 0018 	add.w	r0, r7, #24
   1dc92:	f00c fc42 	bl	2a51a <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   1dc96:	4643      	mov	r3, r8
   1dc98:	4622      	mov	r2, r4
   1dc9a:	4628      	mov	r0, r5
   1dc9c:	f107 0118 	add.w	r1, r7, #24
   1dca0:	f00e ff9a 	bl	2cbd8 <bt_mesh_prov_decrypt>
	if (err) {
   1dca4:	b160      	cbz	r0, 1dcc0 <prov_data+0xa4>
		LOG_ERR("Unable to decrypt provisioning data");
   1dca6:	4b3d      	ldr	r3, [pc, #244]	; (1dd9c <prov_data+0x180>)
   1dca8:	4839      	ldr	r0, [pc, #228]	; (1dd90 <prov_data+0x174>)
   1dcaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   1dcac:	2302      	movs	r3, #2
   1dcae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dcb2:	65bb      	str	r3, [r7, #88]	; 0x58
   1dcb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1dcb8:	f00f fffc 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1dcbc:	2006      	movs	r0, #6
   1dcbe:	e7cf      	b.n	1dc60 <prov_data+0x44>

static inline int bt_mesh_dev_key(const uint8_t dhkey[32],
				  const uint8_t prov_salt[16],
				  uint8_t dev_key[16])
{
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   1dcc0:	4a30      	ldr	r2, [pc, #192]	; (1dd84 <prov_data+0x168>)
   1dcc2:	f107 0638 	add.w	r6, r7, #56	; 0x38
   1dcc6:	2120      	movs	r1, #32
   1dcc8:	4b35      	ldr	r3, [pc, #212]	; (1dda0 <prov_data+0x184>)
   1dcca:	9600      	str	r6, [sp, #0]
   1dccc:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   1dcd0:	f00e fe46 	bl	2c960 <bt_mesh_k1>
	if (err) {
   1dcd4:	4604      	mov	r4, r0
   1dcd6:	b130      	cbz	r0, 1dce6 <prov_data+0xca>
		LOG_ERR("Unable to generate device key");
   1dcd8:	4b32      	ldr	r3, [pc, #200]	; (1dda4 <prov_data+0x188>)
   1dcda:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1dcde:	65fb      	str	r3, [r7, #92]	; 0x5c
   1dce0:	2302      	movs	r3, #2
   1dce2:	65bb      	str	r3, [r7, #88]	; 0x58
   1dce4:	e7b6      	b.n	1dc54 <prov_data+0x38>
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   1dce6:	2108      	movs	r1, #8
   1dce8:	f107 000c 	add.w	r0, r7, #12
   1dcec:	f8b7 b070 	ldrh.w	fp, [r7, #112]	; 0x70
	flags = pdu[18];
   1dcf0:	f897 9072 	ldrb.w	r9, [r7, #114]	; 0x72
	iv_index = sys_get_be32(&pdu[19]);
   1dcf4:	f8d7 a073 	ldr.w	sl, [r7, #115]	; 0x73
	addr = sys_get_be16(&pdu[23]);
   1dcf8:	f8b7 5077 	ldrh.w	r5, [r7, #119]	; 0x77
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   1dcfc:	f00f ffce 	bl	2dc9c <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   1dd00:	4621      	mov	r1, r4
   1dd02:	f107 000c 	add.w	r0, r7, #12
   1dd06:	f7ff fdab 	bl	1d860 <bt_mesh_prov_send>
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	b158      	cbz	r0, 1dd26 <prov_data+0x10a>
		LOG_ERR("Failed to send Provisioning Complete");
   1dd0e:	4b26      	ldr	r3, [pc, #152]	; (1dda8 <prov_data+0x18c>)
   1dd10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dd14:	65fb      	str	r3, [r7, #92]	; 0x5c
   1dd16:	2302      	movs	r3, #2
   1dd18:	481d      	ldr	r0, [pc, #116]	; (1dd90 <prov_data+0x174>)
   1dd1a:	65bb      	str	r3, [r7, #88]	; 0x58
   1dd1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1dd20:	f00f ffc8 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
		return;
   1dd24:	e79e      	b.n	1dc64 <prov_data+0x48>
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   1dd26:	22ff      	movs	r2, #255	; 0xff
   1dd28:	4b20      	ldr	r3, [pc, #128]	; (1ddac <prov_data+0x190>)
   1dd2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	return bt_mesh_prov_link.bearer &&
   1dd2e:	685b      	ldr	r3, [r3, #4]
   1dd30:	b11b      	cbz	r3, 1dd3a <prov_data+0x11e>
   1dd32:	781c      	ldrb	r4, [r3, #0]
   1dd34:	1ea3      	subs	r3, r4, #2
   1dd36:	425c      	negs	r4, r3
   1dd38:	415c      	adcs	r4, r3
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   1dd3a:	ba6d      	rev16	r5, r5
   1dd3c:	fa9b f19b 	rev16.w	r1, fp
   1dd40:	b2ad      	uxth	r5, r5
   1dd42:	464a      	mov	r2, r9
   1dd44:	4640      	mov	r0, r8
   1dd46:	9601      	str	r6, [sp, #4]
   1dd48:	9500      	str	r5, [sp, #0]
   1dd4a:	fa9a f38a 	rev.w	r3, sl
   1dd4e:	b289      	uxth	r1, r1
   1dd50:	f7f6 fdac 	bl	148ac <bt_mesh_provision>
	if (err) {
   1dd54:	b178      	cbz	r0, 1dd76 <prov_data+0x15a>
		LOG_ERR("Failed to provision (err %d)", err);
   1dd56:	466c      	mov	r4, sp
   1dd58:	b088      	sub	sp, #32
   1dd5a:	aa02      	add	r2, sp, #8
   1dd5c:	4b14      	ldr	r3, [pc, #80]	; (1ddb0 <prov_data+0x194>)
   1dd5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd62:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dd66:	2303      	movs	r3, #3
   1dd68:	4809      	ldr	r0, [pc, #36]	; (1dd90 <prov_data+0x174>)
   1dd6a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd6e:	f00f ffa1 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
   1dd72:	46a5      	mov	sp, r4
		return;
   1dd74:	e776      	b.n	1dc64 <prov_data+0x48>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   1dd76:	2c00      	cmp	r4, #0
   1dd78:	f43f af74 	beq.w	1dc64 <prov_data+0x48>
		bt_mesh_proxy_identity_enable();
   1dd7c:	f001 fc16 	bl	1f5ac <bt_mesh_proxy_identity_enable>
   1dd80:	e770      	b.n	1dc64 <prov_data+0x48>
   1dd82:	bf00      	nop
   1dd84:	2000ae41 	.word	0x2000ae41
   1dd88:	000341a3 	.word	0x000341a3
   1dd8c:	000341a8 	.word	0x000341a8
   1dd90:	0002fcfc 	.word	0x0002fcfc
   1dd94:	000341c7 	.word	0x000341c7
   1dd98:	000341cc 	.word	0x000341cc
   1dd9c:	000341ed 	.word	0x000341ed
   1dda0:	00034211 	.word	0x00034211
   1dda4:	00034216 	.word	0x00034216
   1dda8:	00034234 	.word	0x00034234
   1ddac:	2000ad30 	.word	0x2000ad30
   1ddb0:	00034259 	.word	0x00034259

0001ddb4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ddb4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1ddb6:	b508      	push	{r3, lr}
   1ddb8:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ddbc:	d90c      	bls.n	1ddd8 <sys_memcpy_swap.constprop.0+0x24>
   1ddbe:	4298      	cmp	r0, r3
   1ddc0:	d20f      	bcs.n	1dde2 <sys_memcpy_swap.constprop.0+0x2e>
   1ddc2:	490c      	ldr	r1, [pc, #48]	; (1ddf4 <sys_memcpy_swap.constprop.0+0x40>)
   1ddc4:	480c      	ldr	r0, [pc, #48]	; (1ddf8 <sys_memcpy_swap.constprop.0+0x44>)
   1ddc6:	f240 2215 	movw	r2, #533	; 0x215
   1ddca:	f00a fefb 	bl	28bc4 <assert_print>
   1ddce:	f240 2115 	movw	r1, #533	; 0x215
   1ddd2:	4808      	ldr	r0, [pc, #32]	; (1ddf4 <sys_memcpy_swap.constprop.0+0x40>)
   1ddd4:	f00a feef 	bl	28bb6 <assert_post_action>
   1ddd8:	d0f3      	beq.n	1ddc2 <sys_memcpy_swap.constprop.0+0xe>
   1ddda:	f100 0220 	add.w	r2, r0, #32
   1ddde:	4291      	cmp	r1, r2
   1dde0:	e7ee      	b.n	1ddc0 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1dde2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1dde4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1dde8:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1ddea:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1ddee:	d1f9      	bne.n	1dde4 <sys_memcpy_swap.constprop.0+0x30>
}
   1ddf0:	bd08      	pop	{r3, pc}
   1ddf2:	bf00      	nop
   1ddf4:	00034276 	.word	0x00034276
   1ddf8:	00030da5 	.word	0x00030da5

0001ddfc <prov_dh_key_gen>:
{
   1ddfc:	b500      	push	{lr}
   1ddfe:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(remote_pk_le, remote_pk, BT_PUB_KEY_COORD_LEN);
   1de00:	490e      	ldr	r1, [pc, #56]	; (1de3c <prov_dh_key_gen+0x40>)
   1de02:	a806      	add	r0, sp, #24
   1de04:	f7ff ffd6 	bl	1ddb4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&remote_pk_le[BT_PUB_KEY_COORD_LEN], &remote_pk[BT_PUB_KEY_COORD_LEN],
   1de08:	490d      	ldr	r1, [pc, #52]	; (1de40 <prov_dh_key_gen+0x44>)
   1de0a:	a80e      	add	r0, sp, #56	; 0x38
   1de0c:	f7ff ffd2 	bl	1ddb4 <sys_memcpy_swap.constprop.0>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   1de10:	490c      	ldr	r1, [pc, #48]	; (1de44 <prov_dh_key_gen+0x48>)
   1de12:	a806      	add	r0, sp, #24
   1de14:	f7f2 fe00 	bl	10a18 <bt_dh_key_gen>
   1de18:	b160      	cbz	r0, 1de34 <prov_dh_key_gen+0x38>
		LOG_ERR("Failed to generate DHKey");
   1de1a:	4b0b      	ldr	r3, [pc, #44]	; (1de48 <prov_dh_key_gen+0x4c>)
   1de1c:	480b      	ldr	r0, [pc, #44]	; (1de4c <prov_dh_key_gen+0x50>)
   1de1e:	9305      	str	r3, [sp, #20]
   1de20:	2302      	movs	r3, #2
   1de22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1de26:	aa04      	add	r2, sp, #16
   1de28:	9304      	str	r3, [sp, #16]
   1de2a:	f00f ff43 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1de2e:	2007      	movs	r0, #7
   1de30:	f7ff fd94 	bl	1d95c <prov_send_fail_msg>
}
   1de34:	b017      	add	sp, #92	; 0x5c
   1de36:	f85d fb04 	ldr.w	pc, [sp], #4
   1de3a:	bf00      	nop
   1de3c:	2000adc1 	.word	0x2000adc1
   1de40:	2000ade1 	.word	0x2000ade1
   1de44:	0001df95 	.word	0x0001df95
   1de48:	000342a8 	.word	0x000342a8
   1de4c:	0002fcfc 	.word	0x0002fcfc

0001de50 <atomic_get.constprop.0>:
   1de50:	4b01      	ldr	r3, [pc, #4]	; (1de58 <atomic_get.constprop.0+0x8>)
   1de52:	e8d3 0faf 	lda	r0, [r3]
}
   1de56:	4770      	bx	lr
   1de58:	2000ad30 	.word	0x2000ad30

0001de5c <prov_start>:
{
   1de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (data[0] != PROV_ALG_P256) {
   1de5e:	7803      	ldrb	r3, [r0, #0]
{
   1de60:	4604      	mov	r4, r0
   1de62:	af00      	add	r7, sp, #0
	if (data[0] != PROV_ALG_P256) {
   1de64:	b19b      	cbz	r3, 1de8e <prov_start+0x32>
		LOG_ERR("Unknown algorithm 0x%02x", data[0]);
   1de66:	466c      	mov	r4, sp
   1de68:	b088      	sub	sp, #32
   1de6a:	466a      	mov	r2, sp
   1de6c:	4932      	ldr	r1, [pc, #200]	; (1df38 <prov_start+0xdc>)
   1de6e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid public key type: 0x%02x", data[1]);
   1de72:	2303      	movs	r3, #3
   1de74:	4831      	ldr	r0, [pc, #196]	; (1df3c <prov_start+0xe0>)
   1de76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de7a:	f842 3f10 	str.w	r3, [r2, #16]!
   1de7e:	f00f ff19 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1de82:	2002      	movs	r0, #2
   1de84:	46a5      	mov	sp, r4
   1de86:	f7ff fd69 	bl	1d95c <prov_send_fail_msg>
}
   1de8a:	46bd      	mov	sp, r7
   1de8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data[1] > PUB_KEY_OOB ||
   1de8e:	7846      	ldrb	r6, [r0, #1]
   1de90:	b136      	cbz	r6, 1dea0 <prov_start+0x44>
		LOG_ERR("Invalid public key type: 0x%02x", data[1]);
   1de92:	466c      	mov	r4, sp
   1de94:	b088      	sub	sp, #32
   1de96:	466a      	mov	r2, sp
   1de98:	4b29      	ldr	r3, [pc, #164]	; (1df40 <prov_start+0xe4>)
   1de9a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1de9e:	e7e8      	b.n	1de72 <prov_start+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dea0:	4d28      	ldr	r5, [pc, #160]	; (1df44 <prov_start+0xe8>)
   1dea2:	e8d5 3fef 	ldaex	r3, [r5]
   1dea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1deaa:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1deae:	2a00      	cmp	r2, #0
   1deb0:	d1f7      	bne.n	1dea2 <prov_start+0x46>
	memcpy(bt_mesh_prov_link.conf_inputs.start, data, PDU_LEN_START);
   1deb2:	2205      	movs	r2, #5
   1deb4:	4621      	mov	r1, r4
   1deb6:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   1deba:	f00c fb2e 	bl	2a51a <memcpy>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   1debe:	2303      	movs	r3, #3
   1dec0:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
	bt_mesh_prov_link.oob_method = data[2];
   1dec4:	78a3      	ldrb	r3, [r4, #2]
	if (bt_mesh_prov_auth(false, data[2], data[3], data[4]) < 0) {
   1dec6:	4630      	mov	r0, r6
	bt_mesh_prov_link.oob_method = data[2];
   1dec8:	732b      	strb	r3, [r5, #12]
	bt_mesh_prov_link.oob_action = data[3];
   1deca:	78e3      	ldrb	r3, [r4, #3]
   1decc:	736b      	strb	r3, [r5, #13]
	bt_mesh_prov_link.oob_size = data[4];
   1dece:	7923      	ldrb	r3, [r4, #4]
   1ded0:	73ab      	strb	r3, [r5, #14]
	if (bt_mesh_prov_auth(false, data[2], data[3], data[4]) < 0) {
   1ded2:	78e2      	ldrb	r2, [r4, #3]
   1ded4:	78a1      	ldrb	r1, [r4, #2]
   1ded6:	f7ff fbb9 	bl	1d64c <bt_mesh_prov_auth>
   1deda:	2800      	cmp	r0, #0
   1dedc:	da16      	bge.n	1df0c <prov_start+0xb0>
		LOG_ERR("Invalid authentication method: 0x%02x; "
   1dede:	78a0      	ldrb	r0, [r4, #2]
   1dee0:	78e1      	ldrb	r1, [r4, #3]
   1dee2:	7923      	ldrb	r3, [r4, #4]
   1dee4:	466c      	mov	r4, sp
   1dee6:	b08a      	sub	sp, #40	; 0x28
   1dee8:	466a      	mov	r2, sp
   1deea:	e9c2 1307 	strd	r1, r3, [r2, #28]
   1deee:	2305      	movs	r3, #5
   1def0:	4d15      	ldr	r5, [pc, #84]	; (1df48 <prov_start+0xec>)
   1def2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1def6:	e9c2 5005 	strd	r5, r0, [r2, #20]
   1defa:	4810      	ldr	r0, [pc, #64]	; (1df3c <prov_start+0xe0>)
   1defc:	f842 3f10 	str.w	r3, [r2, #16]!
   1df00:	f00f fed8 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1df04:	2002      	movs	r0, #2
   1df06:	46a5      	mov	sp, r4
   1df08:	f7ff fd28 	bl	1d95c <prov_send_fail_msg>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1df0c:	f7ff ffa0 	bl	1de50 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   1df10:	04c3      	lsls	r3, r0, #19
   1df12:	d5ba      	bpl.n	1de8a <prov_start+0x2e>
		memcpy(bt_mesh_prov_link.auth, bt_mesh_prov->static_val,
   1df14:	4d0d      	ldr	r5, [pc, #52]	; (1df4c <prov_start+0xf0>)
   1df16:	4c0e      	ldr	r4, [pc, #56]	; (1df50 <prov_start+0xf4>)
   1df18:	682b      	ldr	r3, [r5, #0]
   1df1a:	4620      	mov	r0, r4
   1df1c:	7e1a      	ldrb	r2, [r3, #24]
   1df1e:	6959      	ldr	r1, [r3, #20]
   1df20:	f00c fafb 	bl	2a51a <memcpy>
		memset(bt_mesh_prov_link.auth + bt_mesh_prov->static_val_len, 0,
   1df24:	682b      	ldr	r3, [r5, #0]
   1df26:	2100      	movs	r1, #0
   1df28:	7e18      	ldrb	r0, [r3, #24]
   1df2a:	f1c0 0210 	rsb	r2, r0, #16
   1df2e:	4420      	add	r0, r4
   1df30:	f00c fafe 	bl	2a530 <memset>
   1df34:	e7a9      	b.n	1de8a <prov_start+0x2e>
   1df36:	bf00      	nop
   1df38:	000342c1 	.word	0x000342c1
   1df3c:	0002fcfc 	.word	0x0002fcfc
   1df40:	000342da 	.word	0x000342da
   1df44:	2000ad30 	.word	0x2000ad30
   1df48:	000342fa 	.word	0x000342fa
   1df4c:	2000ad2c 	.word	0x2000ad2c
   1df50:	2000ad3f 	.word	0x2000ad3f

0001df54 <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   1df54:	4801      	ldr	r0, [pc, #4]	; (1df5c <prov_link_closed+0x8>)
   1df56:	f7ff bb37 	b.w	1d5c8 <bt_mesh_prov_reset_state>
   1df5a:	bf00      	nop
   1df5c:	0001e159 	.word	0x0001e159

0001df60 <local_input_complete>:
{
   1df60:	b508      	push	{r3, lr}
   1df62:	f7ff ff75 	bl	1de50 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT) ||
   1df66:	0602      	lsls	r2, r0, #24
   1df68:	d503      	bpl.n	1df72 <local_input_complete+0x12>
}
   1df6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   1df6e:	f7ff be2d 	b.w	1dbcc <send_input_complete>
   1df72:	f7ff ff6d 	bl	1de50 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT) ||
   1df76:	0643      	lsls	r3, r0, #25
   1df78:	d4f7      	bmi.n	1df6a <local_input_complete+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df7a:	4b05      	ldr	r3, [pc, #20]	; (1df90 <local_input_complete+0x30>)
   1df7c:	e8d3 1fef 	ldaex	r1, [r3]
   1df80:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   1df84:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1df88:	2a00      	cmp	r2, #0
   1df8a:	d1f7      	bne.n	1df7c <local_input_complete+0x1c>
}
   1df8c:	bd08      	pop	{r3, pc}
   1df8e:	bf00      	nop
   1df90:	2000ad30 	.word	0x2000ad30

0001df94 <prov_dh_key_cb>:
{
   1df94:	b530      	push	{r4, r5, lr}
	if (!dhkey) {
   1df96:	4601      	mov	r1, r0
{
   1df98:	b09d      	sub	sp, #116	; 0x74
	if (!dhkey) {
   1df9a:	b920      	cbnz	r0, 1dfa6 <prov_dh_key_cb+0x12>
}
   1df9c:	b01d      	add	sp, #116	; 0x74
   1df9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1dfa2:	f7ff bdfd 	b.w	1dba0 <prov_dh_key_cb.part.0>
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, BT_DH_KEY_LEN);
   1dfa6:	4835      	ldr	r0, [pc, #212]	; (1e07c <prov_dh_key_cb+0xe8>)
   1dfa8:	f7ff ff04 	bl	1ddb4 <sys_memcpy_swap.constprop.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfac:	4d34      	ldr	r5, [pc, #208]	; (1e080 <prov_dh_key_cb+0xec>)
   1dfae:	e8d5 3fef 	ldaex	r3, [r5]
   1dfb2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
   1dfb6:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1dfba:	2900      	cmp	r1, #0
   1dfbc:	d1f7      	bne.n	1dfae <prov_dh_key_cb+0x1a>
	if (!atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_DH_KEY) &&
   1dfbe:	049c      	lsls	r4, r3, #18
   1dfc0:	d408      	bmi.n	1dfd4 <prov_dh_key_cb+0x40>
   1dfc2:	f7ff ff45 	bl	1de50 <atomic_get.constprop.0>
   1dfc6:	0640      	lsls	r0, r0, #25
   1dfc8:	d504      	bpl.n	1dfd4 <prov_dh_key_cb+0x40>
}
   1dfca:	b01d      	add	sp, #116	; 0x74
   1dfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		send_confirm();
   1dfd0:	f7ff bd78 	b.w	1dac4 <send_confirm>
   1dfd4:	f7ff ff3c 	bl	1de50 <atomic_get.constprop.0>
	} else if (!atomic_test_bit(bt_mesh_prov_link.flags, OOB_PUB_KEY)) {
   1dfd8:	0641      	lsls	r1, r0, #25
   1dfda:	d416      	bmi.n	1e00a <prov_dh_key_cb+0x76>
	PROV_BUF(buf, PDU_LEN_PUB_KEY);
   1dfdc:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   1dfe0:	ab0a      	add	r3, sp, #40	; 0x28
   1dfe2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1dfe6:	9301      	str	r3, [sp, #4]
	key = bt_pub_key_get();
   1dfe8:	f7f2 fd08 	bl	109fc <bt_pub_key_get>
	if (!key) {
   1dfec:	4604      	mov	r4, r0
   1dfee:	b970      	cbnz	r0, 1e00e <prov_dh_key_cb+0x7a>
		LOG_ERR("No public key available");
   1dff0:	4b24      	ldr	r3, [pc, #144]	; (1e084 <prov_dh_key_cb+0xf0>)
   1dff2:	4825      	ldr	r0, [pc, #148]	; (1e088 <prov_dh_key_cb+0xf4>)
   1dff4:	9309      	str	r3, [sp, #36]	; 0x24
   1dff6:	2302      	movs	r3, #2
   1dff8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dffc:	aa08      	add	r2, sp, #32
   1dffe:	9308      	str	r3, [sp, #32]
   1e000:	f00f fe58 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
	prov_send_fail_msg(reason);
   1e004:	2007      	movs	r0, #7
   1e006:	f7ff fca9 	bl	1d95c <prov_send_fail_msg>
}
   1e00a:	b01d      	add	sp, #116	; 0x74
   1e00c:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   1e00e:	2103      	movs	r1, #3
   1e010:	a801      	add	r0, sp, #4
   1e012:	f00f fe43 	bl	2dc9c <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), key, BT_PUB_KEY_COORD_LEN);
   1e016:	2120      	movs	r1, #32
   1e018:	a801      	add	r0, sp, #4
   1e01a:	f002 f999 	bl	20350 <net_buf_simple_add>
   1e01e:	4621      	mov	r1, r4
   1e020:	f7ff fec8 	bl	1ddb4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(net_buf_simple_add(&buf, BT_PUB_KEY_COORD_LEN), &key[BT_PUB_KEY_COORD_LEN],
   1e024:	2120      	movs	r1, #32
   1e026:	a801      	add	r0, sp, #4
   1e028:	f002 f992 	bl	20350 <net_buf_simple_add>
   1e02c:	f104 0120 	add.w	r1, r4, #32
   1e030:	f7ff fec0 	bl	1ddb4 <sys_memcpy_swap.constprop.0>
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_device, &buf.data[1], PDU_LEN_PUB_KEY);
   1e034:	9901      	ldr	r1, [sp, #4]
   1e036:	2240      	movs	r2, #64	; 0x40
   1e038:	3101      	adds	r1, #1
   1e03a:	4814      	ldr	r0, [pc, #80]	; (1e08c <prov_dh_key_cb+0xf8>)
   1e03c:	f00c fa6d 	bl	2a51a <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   1e040:	4913      	ldr	r1, [pc, #76]	; (1e090 <prov_dh_key_cb+0xfc>)
   1e042:	a801      	add	r0, sp, #4
   1e044:	f7ff fc0c 	bl	1d860 <bt_mesh_prov_send>
   1e048:	b150      	cbz	r0, 1e060 <prov_dh_key_cb+0xcc>
		LOG_ERR("Failed to send Public Key");
   1e04a:	4b12      	ldr	r3, [pc, #72]	; (1e094 <prov_dh_key_cb+0x100>)
   1e04c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e050:	9309      	str	r3, [sp, #36]	; 0x24
   1e052:	2302      	movs	r3, #2
   1e054:	480c      	ldr	r0, [pc, #48]	; (1e088 <prov_dh_key_cb+0xf4>)
   1e056:	aa08      	add	r2, sp, #32
   1e058:	9308      	str	r3, [sp, #32]
   1e05a:	f00f fe2b 	bl	2dcb4 <z_log_msg_static_create.constprop.0>
		return;
   1e05e:	e7d4      	b.n	1e00a <prov_dh_key_cb+0x76>
   1e060:	f7ff fef6 	bl	1de50 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   1e064:	0742      	lsls	r2, r0, #29
   1e066:	d403      	bmi.n	1e070 <prov_dh_key_cb+0xdc>
   1e068:	f7ff fef2 	bl	1de50 <atomic_get.constprop.0>
   1e06c:	0703      	lsls	r3, r0, #28
   1e06e:	d503      	bpl.n	1e078 <prov_dh_key_cb+0xe4>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   1e070:	23ff      	movs	r3, #255	; 0xff
   1e072:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   1e076:	e7c8      	b.n	1e00a <prov_dh_key_cb+0x76>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   1e078:	2305      	movs	r3, #5
   1e07a:	e7fa      	b.n	1e072 <prov_dh_key_cb+0xde>
   1e07c:	2000ad4f 	.word	0x2000ad4f
   1e080:	2000ad30 	.word	0x2000ad30
   1e084:	0003433e 	.word	0x0003433e
   1e088:	0002fcfc 	.word	0x0002fcfc
   1e08c:	2000ae01 	.word	0x2000ae01
   1e090:	0001e0d5 	.word	0x0001e0d5
   1e094:	00034356 	.word	0x00034356

0001e098 <prov_pub_key>:
{
   1e098:	4601      	mov	r1, r0
   1e09a:	b510      	push	{r4, lr}
	memcpy(bt_mesh_prov_link.conf_inputs.pub_key_provisioner, data, PDU_LEN_PUB_KEY);
   1e09c:	2240      	movs	r2, #64	; 0x40
   1e09e:	480b      	ldr	r0, [pc, #44]	; (1e0cc <prov_pub_key+0x34>)
   1e0a0:	f00c fa3b 	bl	2a51a <memcpy>
	} else if (!bt_pub_key_get()) {
   1e0a4:	f7f2 fcaa 	bl	109fc <bt_pub_key_get>
   1e0a8:	b960      	cbnz	r0, 1e0c4 <prov_pub_key+0x2c>
		bt_mesh_prov_link.bearer->clear_tx();
   1e0aa:	4c09      	ldr	r4, [pc, #36]	; (1e0d0 <prov_pub_key+0x38>)
   1e0ac:	6863      	ldr	r3, [r4, #4]
   1e0ae:	68db      	ldr	r3, [r3, #12]
   1e0b0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e0b2:	e8d4 3fef 	ldaex	r3, [r4]
   1e0b6:	f043 0301 	orr.w	r3, r3, #1
   1e0ba:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1e0be:	2a00      	cmp	r2, #0
   1e0c0:	d1f7      	bne.n	1e0b2 <prov_pub_key+0x1a>
}
   1e0c2:	bd10      	pop	{r4, pc}
   1e0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   1e0c8:	f7ff be98 	b.w	1ddfc <prov_dh_key_gen>
   1e0cc:	2000adc1 	.word	0x2000adc1
   1e0d0:	2000ad30 	.word	0x2000ad30

0001e0d4 <public_key_sent>:
{
   1e0d4:	b508      	push	{r3, lr}
   1e0d6:	4b09      	ldr	r3, [pc, #36]	; (1e0fc <public_key_sent+0x28>)
   1e0d8:	e8d3 1fef 	ldaex	r1, [r3]
   1e0dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   1e0e0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e0e4:	2a00      	cmp	r2, #0
   1e0e6:	d1f7      	bne.n	1e0d8 <public_key_sent+0x4>
   1e0e8:	f7ff feb2 	bl	1de50 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   1e0ec:	0583      	lsls	r3, r0, #22
   1e0ee:	d503      	bpl.n	1e0f8 <public_key_sent+0x24>
}
   1e0f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   1e0f4:	f7ff bd6a 	b.w	1dbcc <send_input_complete>
}
   1e0f8:	bd08      	pop	{r3, pc}
   1e0fa:	bf00      	nop
   1e0fc:	2000ad30 	.word	0x2000ad30

0001e100 <prov_confirm>:
{
   1e100:	4601      	mov	r1, r0
   1e102:	b510      	push	{r4, lr}
	memcpy(bt_mesh_prov_link.conf, data, 16);
   1e104:	2210      	movs	r2, #16
   1e106:	4811      	ldr	r0, [pc, #68]	; (1e14c <prov_confirm+0x4c>)
   1e108:	f00c fa07 	bl	2a51a <memcpy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e10c:	4c10      	ldr	r4, [pc, #64]	; (1e150 <prov_confirm+0x50>)
   1e10e:	e8d4 2fef 	ldaex	r2, [r4]
   1e112:	f022 0110 	bic.w	r1, r2, #16
   1e116:	e8c4 1fe0 	stlex	r0, r1, [r4]
   1e11a:	2800      	cmp	r0, #0
   1e11c:	d1f7      	bne.n	1e10e <prov_confirm+0xe>
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   1e11e:	06d2      	lsls	r2, r2, #27
   1e120:	d504      	bpl.n	1e12c <prov_confirm+0x2c>
	    bt_mesh_prov->input_complete) {
   1e122:	4b0c      	ldr	r3, [pc, #48]	; (1e154 <prov_confirm+0x54>)
   1e124:	681b      	ldr	r3, [r3, #0]
   1e126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				      NOTIFY_INPUT_COMPLETE) &&
   1e128:	b103      	cbz	r3, 1e12c <prov_confirm+0x2c>
		bt_mesh_prov->input_complete();
   1e12a:	4798      	blx	r3
   1e12c:	e8d4 3fef 	ldaex	r3, [r4]
   1e130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
   1e134:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1e138:	2900      	cmp	r1, #0
   1e13a:	d1f7      	bne.n	1e12c <prov_confirm+0x2c>
	if (!atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_DH_KEY)) {
   1e13c:	049b      	lsls	r3, r3, #18
   1e13e:	d403      	bmi.n	1e148 <prov_confirm+0x48>
}
   1e140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		send_confirm();
   1e144:	f7ff bcbe 	b.w	1dac4 <send_confirm>
}
   1e148:	bd10      	pop	{r4, pc}
   1e14a:	bf00      	nop
   1e14c:	2000ad70 	.word	0x2000ad70
   1e150:	2000ad30 	.word	0x2000ad30
   1e154:	2000ad2c 	.word	0x2000ad2c

0001e158 <pub_key_ready>:
	if (!pkey) {
   1e158:	b160      	cbz	r0, 1e174 <pub_key_ready+0x1c>
   1e15a:	4b07      	ldr	r3, [pc, #28]	; (1e178 <pub_key_ready+0x20>)
   1e15c:	e8d3 2fef 	ldaex	r2, [r3]
   1e160:	f022 0101 	bic.w	r1, r2, #1
   1e164:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1e168:	2800      	cmp	r0, #0
   1e16a:	d1f7      	bne.n	1e15c <pub_key_ready+0x4>
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   1e16c:	07d3      	lsls	r3, r2, #31
   1e16e:	d501      	bpl.n	1e174 <pub_key_ready+0x1c>
		prov_dh_key_gen();
   1e170:	f7ff be44 	b.w	1ddfc <prov_dh_key_gen>
}
   1e174:	4770      	bx	lr
   1e176:	bf00      	nop
   1e178:	2000ad30 	.word	0x2000ad30

0001e17c <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   1e17c:	b538      	push	{r3, r4, r5, lr}
   1e17e:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   1e180:	f7f6 fb18 	bl	147b4 <bt_mesh_is_provisioned>
   1e184:	4605      	mov	r5, r0
   1e186:	b9a0      	cbnz	r0, 1e1b2 <bt_mesh_prov_enable+0x36>

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
		LOG_INF("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   1e188:	07e2      	lsls	r2, r4, #31
   1e18a:	d505      	bpl.n	1e198 <bt_mesh_prov_enable+0x1c>
	    (bearers & BT_MESH_PROV_ADV)) {
		bt_mesh_pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1e18c:	f7ff fb26 	bl	1d7dc <bt_mesh_prov_bearer_cb_get>
   1e190:	4b09      	ldr	r3, [pc, #36]	; (1e1b8 <bt_mesh_prov_enable+0x3c>)
   1e192:	4629      	mov	r1, r5
   1e194:	685b      	ldr	r3, [r3, #4]
   1e196:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   1e198:	07a3      	lsls	r3, r4, #30
   1e19a:	d505      	bpl.n	1e1a8 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1e19c:	f7ff fb1e 	bl	1d7dc <bt_mesh_prov_bearer_cb_get>
   1e1a0:	4b06      	ldr	r3, [pc, #24]	; (1e1bc <bt_mesh_prov_enable+0x40>)
   1e1a2:	2100      	movs	r1, #0
   1e1a4:	685b      	ldr	r3, [r3, #4]
   1e1a6:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;

	return 0;
   1e1a8:	2000      	movs	r0, #0
	bt_mesh_prov_link.role = &role_device;
   1e1aa:	4b05      	ldr	r3, [pc, #20]	; (1e1c0 <bt_mesh_prov_enable+0x44>)
   1e1ac:	4a05      	ldr	r2, [pc, #20]	; (1e1c4 <bt_mesh_prov_enable+0x48>)
   1e1ae:	609a      	str	r2, [r3, #8]
}
   1e1b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1e1b2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e1b6:	e7fb      	b.n	1e1b0 <bt_mesh_prov_enable+0x34>
   1e1b8:	00030960 	.word	0x00030960
   1e1bc:	00030998 	.word	0x00030998
   1e1c0:	2000ad30 	.word	0x2000ad30
   1e1c4:	00030920 	.word	0x00030920

0001e1c8 <prov_failed>:
{
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
}

static void prov_failed(uint8_t err)
{
   1e1c8:	b510      	push	{r4, lr}
	LOG_DBG("%u", err);
	link.cb->error(&bt_mesh_pb_adv, link.cb_data, err);
   1e1ca:	4c06      	ldr	r4, [pc, #24]	; (1e1e4 <prov_failed+0x1c>)
{
   1e1cc:	4602      	mov	r2, r0
	link.cb->error(&bt_mesh_pb_adv, link.cb_data, err);
   1e1ce:	68a3      	ldr	r3, [r4, #8]
   1e1d0:	68e1      	ldr	r1, [r4, #12]
   1e1d2:	4805      	ldr	r0, [pc, #20]	; (1e1e8 <prov_failed+0x20>)
   1e1d4:	689b      	ldr	r3, [r3, #8]
   1e1d6:	4798      	blx	r3
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e1d8:	1d20      	adds	r0, r4, #4
   1e1da:	2108      	movs	r1, #8
	atomic_set_bit(link.flags, ADV_LINK_INVALID);
}
   1e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e1e0:	f00f bd6d 	b.w	2dcbe <atomic_or>
   1e1e4:	200084a0 	.word	0x200084a0
   1e1e8:	00030960 	.word	0x00030960

0001e1ec <send_reliable>:
/*******************************************************************************
 * TX
 ******************************************************************************/

static void send_reliable(void)
{
   1e1ec:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1e1ee:	2400      	movs	r4, #0
   1e1f0:	4d0b      	ldr	r5, [pc, #44]	; (1e220 <send_reliable+0x34>)
		struct net_buf *buf = link.tx.buf[i];
   1e1f2:	f855 0f04 	ldr.w	r0, [r5, #4]!

		if (!buf) {
   1e1f6:	b150      	cbz	r0, 1e20e <send_reliable+0x22>
			break;
		}

		if (BT_MESH_ADV(buf)->busy) {
   1e1f8:	6983      	ldr	r3, [r0, #24]
   1e1fa:	7a1a      	ldrb	r2, [r3, #8]
   1e1fc:	f012 0208 	ands.w	r2, r2, #8
   1e200:	d102      	bne.n	1e208 <send_reliable+0x1c>
			continue;
		}

		LOG_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

		bt_mesh_adv_send(buf, NULL, NULL);
   1e202:	4611      	mov	r1, r2
   1e204:	f7f6 fddc 	bl	14dc0 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1e208:	3401      	adds	r4, #1
   1e20a:	2c03      	cmp	r4, #3
   1e20c:	d1f1      	bne.n	1e1f2 <send_reliable+0x6>
	}

	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
}
   1e20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&link.tx.retransmit, RETRANSMIT_TIMEOUT);
   1e212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1e216:	2300      	movs	r3, #0
   1e218:	4802      	ldr	r0, [pc, #8]	; (1e224 <send_reliable+0x38>)
   1e21a:	f008 ba2d 	b.w	26678 <k_work_reschedule>
   1e21e:	bf00      	nop
   1e220:	200084c0 	.word	0x200084c0
   1e224:	200084d8 	.word	0x200084d8

0001e228 <free_segments>:
{
   1e228:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1e22a:	2400      	movs	r4, #0
		link.tx.buf[i] = NULL;
   1e22c:	4626      	mov	r6, r4
   1e22e:	4d08      	ldr	r5, [pc, #32]	; (1e250 <free_segments+0x28>)
		struct net_buf *buf = link.tx.buf[i];
   1e230:	f855 0f04 	ldr.w	r0, [r5, #4]!
		if (!buf) {
   1e234:	b150      	cbz	r0, 1e24c <free_segments+0x24>
		link.tx.buf[i] = NULL;
   1e236:	602e      	str	r6, [r5, #0]
		BT_MESH_ADV(buf)->busy = 0U;
   1e238:	6983      	ldr	r3, [r0, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1e23a:	3401      	adds	r4, #1
		BT_MESH_ADV(buf)->busy = 0U;
   1e23c:	7a1a      	ldrb	r2, [r3, #8]
   1e23e:	f366 02c3 	bfi	r2, r6, #3, #1
   1e242:	721a      	strb	r2, [r3, #8]
		net_buf_unref(buf);
   1e244:	f001 ff4a 	bl	200dc <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1e248:	2c03      	cmp	r4, #3
   1e24a:	d1f1      	bne.n	1e230 <free_segments+0x8>
}
   1e24c:	bd70      	pop	{r4, r5, r6, pc}
   1e24e:	bf00      	nop
   1e250:	200084c0 	.word	0x200084c0

0001e254 <ack_complete>:
   1e254:	4b04      	ldr	r3, [pc, #16]	; (1e268 <ack_complete+0x14>)
   1e256:	e8d3 1fef 	ldaex	r1, [r3]
   1e25a:	f021 0110 	bic.w	r1, r1, #16
   1e25e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e262:	2a00      	cmp	r2, #0
   1e264:	d1f7      	bne.n	1e256 <ack_complete+0x2>
}
   1e266:	4770      	bx	lr
   1e268:	200084a4 	.word	0x200084a4

0001e26c <prov_clear_tx>:
{
   1e26c:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&link.tx.retransmit);
   1e26e:	4803      	ldr	r0, [pc, #12]	; (1e27c <prov_clear_tx+0x10>)
   1e270:	f008 fa08 	bl	26684 <k_work_cancel_delayable>
}
   1e274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   1e278:	f7ff bfd6 	b.w	1e228 <free_segments>
   1e27c:	200084d8 	.word	0x200084d8

0001e280 <bearer_ctl_send_unacked>:

	return 0;
}

static int bearer_ctl_send_unacked(struct net_buf *buf)
{
   1e280:	b510      	push	{r4, lr}
	if (!buf) {
   1e282:	4604      	mov	r4, r0
   1e284:	b188      	cbz	r0, 1e2aa <bearer_ctl_send_unacked+0x2a>
		return -ENOMEM;
	}

	prov_clear_tx();
   1e286:	f7ff fff1 	bl	1e26c <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1e28a:	2300      	movs	r3, #0
   1e28c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1e290:	4807      	ldr	r0, [pc, #28]	; (1e2b0 <bearer_ctl_send_unacked+0x30>)
   1e292:	f008 f9f1 	bl	26678 <k_work_reschedule>

	bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1e296:	2200      	movs	r2, #0
   1e298:	4620      	mov	r0, r4
   1e29a:	4906      	ldr	r1, [pc, #24]	; (1e2b4 <bearer_ctl_send_unacked+0x34>)
   1e29c:	f7f6 fd90 	bl	14dc0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   1e2a0:	4620      	mov	r0, r4
   1e2a2:	f001 ff1b 	bl	200dc <net_buf_unref>

	return 0;
   1e2a6:	2000      	movs	r0, #0
}
   1e2a8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1e2aa:	f06f 000b 	mvn.w	r0, #11
   1e2ae:	e7fb      	b.n	1e2a8 <bearer_ctl_send_unacked+0x28>
   1e2b0:	20008508 	.word	0x20008508
   1e2b4:	200088bc 	.word	0x200088bc

0001e2b8 <adv_buf_create.part.0>:
static struct net_buf *adv_buf_create(uint8_t retransmits)
   1e2b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Out of provisioning buffers");
   1e2ba:	4b07      	ldr	r3, [pc, #28]	; (1e2d8 <adv_buf_create.part.0+0x20>)
   1e2bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e2c0:	9305      	str	r3, [sp, #20]
   1e2c2:	2302      	movs	r3, #2
   1e2c4:	4805      	ldr	r0, [pc, #20]	; (1e2dc <adv_buf_create.part.0+0x24>)
   1e2c6:	aa04      	add	r2, sp, #16
   1e2c8:	9304      	str	r3, [sp, #16]
   1e2ca:	f00f fd03 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
}
   1e2ce:	2000      	movs	r0, #0
   1e2d0:	b007      	add	sp, #28
   1e2d2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e2d6:	bf00      	nop
   1e2d8:	00034384 	.word	0x00034384
   1e2dc:	0002fcdc 	.word	0x0002fcdc

0001e2e0 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2e0:	4b01      	ldr	r3, [pc, #4]	; (1e2e8 <atomic_get.constprop.0+0x8>)
   1e2e2:	e8d3 0faf 	lda	r0, [r3]
}
   1e2e6:	4770      	bx	lr
   1e2e8:	200084a4 	.word	0x200084a4

0001e2ec <prov_link_accept>:

	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   1e2ec:	b570      	push	{r4, r5, r6, lr}
   1e2ee:	b086      	sub	sp, #24
   1e2f0:	4606      	mov	r6, r0
   1e2f2:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   1e2f4:	f7fd fc74 	bl	1bbe0 <bt_mesh_adv_enable>
	if (err) {
   1e2f8:	4604      	mov	r4, r0
   1e2fa:	b160      	cbz	r0, 1e316 <prov_link_accept+0x2a>
		LOG_ERR("Failed enabling advertiser");
   1e2fc:	4b10      	ldr	r3, [pc, #64]	; (1e340 <prov_link_accept+0x54>)
   1e2fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e302:	9305      	str	r3, [sp, #20]
   1e304:	2302      	movs	r3, #2
   1e306:	480f      	ldr	r0, [pc, #60]	; (1e344 <prov_link_accept+0x58>)
   1e308:	aa04      	add	r2, sp, #16
   1e30a:	9304      	str	r3, [sp, #16]
   1e30c:	f00f fce2 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   1e310:	4620      	mov	r0, r4
   1e312:	b006      	add	sp, #24
   1e314:	bd70      	pop	{r4, r5, r6, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e316:	f7ff ffe3 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e31a:	07c3      	lsls	r3, r0, #31
   1e31c:	d40c      	bmi.n	1e338 <prov_link_accept+0x4c>
	link.rx.id = XACT_ID_MAX;
   1e31e:	227f      	movs	r2, #127	; 0x7f
   1e320:	4b09      	ldr	r3, [pc, #36]	; (1e348 <prov_link_accept+0x5c>)
   1e322:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   1e324:	22ff      	movs	r2, #255	; 0xff
	link.cb_data = cb_data;
   1e326:	e9c3 6502 	strd	r6, r5, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
   1e32a:	f883 2020 	strb.w	r2, [r3, #32]
	bt_mesh_scan_enable();
   1e32e:	f7f6 fd5d 	bl	14dec <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   1e332:	f7f6 ffef 	bl	15314 <bt_mesh_beacon_enable>
	return 0;
   1e336:	e7eb      	b.n	1e310 <prov_link_accept+0x24>
		return -EBUSY;
   1e338:	f06f 040f 	mvn.w	r4, #15
   1e33c:	e7e8      	b.n	1e310 <prov_link_accept+0x24>
   1e33e:	bf00      	nop
   1e340:	000326e4 	.word	0x000326e4
   1e344:	0002fcdc 	.word	0x0002fcdc
   1e348:	200084a0 	.word	0x200084a0

0001e34c <gen_prov_ack>:
{
   1e34c:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   1e34e:	4c0b      	ldr	r4, [pc, #44]	; (1e37c <gen_prov_ack+0x30>)
   1e350:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e352:	b18b      	cbz	r3, 1e378 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   1e354:	7902      	ldrb	r2, [r0, #4]
   1e356:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e35a:	429a      	cmp	r2, r3
   1e35c:	d10c      	bne.n	1e378 <gen_prov_ack+0x2c>
   1e35e:	f7ff ffbf 	bl	1e2e0 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1e362:	0743      	lsls	r3, r0, #29
   1e364:	d401      	bmi.n	1e36a <gen_prov_ack+0x1e>
			prov_clear_tx();
   1e366:	f7ff ff81 	bl	1e26c <prov_clear_tx>
		if (link.tx.cb) {
   1e36a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e36c:	b123      	cbz	r3, 1e378 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   1e36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1e370:	2000      	movs	r0, #0
}
   1e372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   1e376:	4718      	bx	r3
}
   1e378:	bd10      	pop	{r4, pc}
   1e37a:	bf00      	nop
   1e37c:	200084a0 	.word	0x200084a0

0001e380 <reset_adv_link>:
{
   1e380:	b538      	push	{r3, r4, r5, lr}
	prov_clear_tx();
   1e382:	f7ff ff73 	bl	1e26c <prov_clear_tx>
	(void)k_work_cancel_delayable(&link.prot_timer);
   1e386:	4817      	ldr	r0, [pc, #92]	; (1e3e4 <reset_adv_link+0x64>)
   1e388:	f008 f97c 	bl	26684 <k_work_cancel_delayable>
   1e38c:	f7ff ffa8 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   1e390:	f010 0f20 	tst.w	r0, #32
   1e394:	4c14      	ldr	r4, [pc, #80]	; (1e3e8 <reset_adv_link+0x68>)
   1e396:	f3c0 1540 	ubfx	r5, r0, #5, #1
   1e39a:	d010      	beq.n	1e3be <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   1e39c:	2238      	movs	r2, #56	; 0x38
   1e39e:	2100      	movs	r1, #0
   1e3a0:	4620      	mov	r0, r4
   1e3a2:	f00c f8c5 	bl	2a530 <memset>
		link.rx.id = XACT_ID_NVAL;
   1e3a6:	23ff      	movs	r3, #255	; 0xff
   1e3a8:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   1e3aa:	23ff      	movs	r3, #255	; 0xff
	buf->len  = 0U;
   1e3ac:	2200      	movs	r2, #0
   1e3ae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   1e3b2:	4b0e      	ldr	r3, [pc, #56]	; (1e3ec <reset_adv_link+0x6c>)
   1e3b4:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   1e3b6:	689a      	ldr	r2, [r3, #8]
   1e3b8:	6163      	str	r3, [r4, #20]
   1e3ba:	601a      	str	r2, [r3, #0]
}
   1e3bc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_mesh_is_provisioned()) {
   1e3be:	f7f6 f9f9 	bl	147b4 <bt_mesh_is_provisioned>
   1e3c2:	b100      	cbz	r0, 1e3c6 <reset_adv_link+0x46>
			link.cb = NULL;
   1e3c4:	60a5      	str	r5, [r4, #8]
		link.id = 0;
   1e3c6:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e3c8:	4b09      	ldr	r3, [pc, #36]	; (1e3f0 <reset_adv_link+0x70>)
   1e3ca:	6022      	str	r2, [r4, #0]
   1e3cc:	e8d3 1fef 	ldaex	r1, [r3]
   1e3d0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1e3d4:	2800      	cmp	r0, #0
   1e3d6:	d1f9      	bne.n	1e3cc <reset_adv_link+0x4c>
		link.rx.id = XACT_ID_MAX;
   1e3d8:	237f      	movs	r3, #127	; 0x7f
   1e3da:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   1e3dc:	23ff      	movs	r3, #255	; 0xff
   1e3de:	f884 3020 	strb.w	r3, [r4, #32]
   1e3e2:	e7e2      	b.n	1e3aa <reset_adv_link+0x2a>
   1e3e4:	20008508 	.word	0x20008508
   1e3e8:	200084a0 	.word	0x200084a0
   1e3ec:	200088c4 	.word	0x200088c4
   1e3f0:	200084a4 	.word	0x200084a4

0001e3f4 <close_link>:
{
   1e3f4:	b570      	push	{r4, r5, r6, lr}
   1e3f6:	4604      	mov	r4, r0
	const struct prov_bearer_cb *cb = link.cb;
   1e3f8:	4b05      	ldr	r3, [pc, #20]	; (1e410 <close_link+0x1c>)
	void *cb_data = link.cb_data;
   1e3fa:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
	reset_adv_link();
   1e3fe:	f7ff ffbf 	bl	1e380 <reset_adv_link>
	cb->link_closed(&bt_mesh_pb_adv, cb_data, reason);
   1e402:	4622      	mov	r2, r4
   1e404:	4629      	mov	r1, r5
   1e406:	6873      	ldr	r3, [r6, #4]
   1e408:	4802      	ldr	r0, [pc, #8]	; (1e414 <close_link+0x20>)
}
   1e40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&bt_mesh_pb_adv, cb_data, reason);
   1e40e:	4718      	bx	r3
   1e410:	200084a0 	.word	0x200084a0
   1e414:	00030960 	.word	0x00030960

0001e418 <ctl_buf_create>:
{
   1e418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e41c:	4605      	mov	r5, r0
	buf = adv_buf_create(retransmits);
   1e41e:	4618      	mov	r0, r3
{
   1e420:	460f      	mov	r7, r1
   1e422:	4690      	mov	r8, r2
	buf = adv_buf_create(retransmits);
   1e424:	f00f fc59 	bl	2dcda <adv_buf_create>
	if (!buf) {
   1e428:	4604      	mov	r4, r0
   1e42a:	b1b0      	cbz	r0, 1e45a <ctl_buf_create+0x42>
	net_buf_add_be32(buf, link.id);
   1e42c:	4b0c      	ldr	r3, [pc, #48]	; (1e460 <ctl_buf_create+0x48>)
	net_buf_simple_add_be32(&buf->b, val);
   1e42e:	f100 060c 	add.w	r6, r0, #12
   1e432:	6819      	ldr	r1, [r3, #0]
   1e434:	4630      	mov	r0, r6
	net_buf_add_u8(buf, GPC_CTL(op));
   1e436:	00ad      	lsls	r5, r5, #2
   1e438:	f00f fd80 	bl	2df3c <net_buf_simple_add_be32>
   1e43c:	f045 0503 	orr.w	r5, r5, #3
	net_buf_add_u8(buf, 0x00);
   1e440:	2100      	movs	r1, #0
   1e442:	4620      	mov	r0, r4
   1e444:	f00f fc5e 	bl	2dd04 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_CTL(op));
   1e448:	4620      	mov	r0, r4
   1e44a:	b2e9      	uxtb	r1, r5
   1e44c:	f00f fc5a 	bl	2dd04 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e450:	4642      	mov	r2, r8
   1e452:	4639      	mov	r1, r7
   1e454:	4630      	mov	r0, r6
   1e456:	f00f fd40 	bl	2deda <net_buf_simple_add_mem>
}
   1e45a:	4620      	mov	r0, r4
   1e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e460:	200084a0 	.word	0x200084a0

0001e464 <gen_prov_ctl>:
{
   1e464:	b5b0      	push	{r4, r5, r7, lr}
	switch (BEARER_CTL(rx->gpc)) {
   1e466:	7942      	ldrb	r2, [r0, #5]
{
   1e468:	4605      	mov	r5, r0
	switch (BEARER_CTL(rx->gpc)) {
   1e46a:	0892      	lsrs	r2, r2, #2
   1e46c:	2a01      	cmp	r2, #1
{
   1e46e:	af00      	add	r7, sp, #0
	switch (BEARER_CTL(rx->gpc)) {
   1e470:	d051      	beq.n	1e516 <gen_prov_ctl+0xb2>
   1e472:	2a02      	cmp	r2, #2
   1e474:	d066      	beq.n	1e544 <gen_prov_ctl+0xe0>
   1e476:	2a00      	cmp	r2, #0
   1e478:	d171      	bne.n	1e55e <gen_prov_ctl+0xfa>
	if (buf->len < 16) {
   1e47a:	888b      	ldrh	r3, [r1, #4]
   1e47c:	2b0f      	cmp	r3, #15
   1e47e:	d80f      	bhi.n	1e4a0 <gen_prov_ctl+0x3c>
		LOG_ERR("Too short bearer open message (len %u)", buf->len);
   1e480:	466c      	mov	r4, sp
   1e482:	b088      	sub	sp, #32
   1e484:	466a      	mov	r2, sp
   1e486:	493a      	ldr	r1, [pc, #232]	; (1e570 <gen_prov_ctl+0x10c>)
   1e488:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   1e48c:	2303      	movs	r3, #3
   1e48e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e492:	4838      	ldr	r0, [pc, #224]	; (1e574 <gen_prov_ctl+0x110>)
   1e494:	f842 3f10 	str.w	r3, [r2, #16]!
   1e498:	f00f fc1c 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1e49c:	46a5      	mov	sp, r4
   1e49e:	e00f      	b.n	1e4c0 <gen_prov_ctl+0x5c>
   1e4a0:	f7ff ff1e 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e4a4:	07c4      	lsls	r4, r0, #31
   1e4a6:	d50d      	bpl.n	1e4c4 <gen_prov_ctl+0x60>
		if (link.id != rx->link_id) {
   1e4a8:	4b33      	ldr	r3, [pc, #204]	; (1e578 <gen_prov_ctl+0x114>)
   1e4aa:	6819      	ldr	r1, [r3, #0]
   1e4ac:	682b      	ldr	r3, [r5, #0]
   1e4ae:	4299      	cmp	r1, r3
   1e4b0:	d106      	bne.n	1e4c0 <gen_prov_ctl+0x5c>
		(void)bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   1e4b2:	2302      	movs	r3, #2
   1e4b4:	4611      	mov	r1, r2
   1e4b6:	2001      	movs	r0, #1
   1e4b8:	f7ff ffae 	bl	1e418 <ctl_buf_create>
   1e4bc:	f7ff fee0 	bl	1e280 <bearer_ctl_send_unacked>
}
   1e4c0:	46bd      	mov	sp, r7
   1e4c2:	bdb0      	pop	{r4, r5, r7, pc}
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   1e4c4:	680c      	ldr	r4, [r1, #0]
   1e4c6:	f7ff f97b 	bl	1d7c0 <bt_mesh_prov_get>
   1e4ca:	2210      	movs	r2, #16
   1e4cc:	6801      	ldr	r1, [r0, #0]
   1e4ce:	4620      	mov	r0, r4
   1e4d0:	f00b fffc 	bl	2a4cc <memcmp>
   1e4d4:	4604      	mov	r4, r0
   1e4d6:	2800      	cmp	r0, #0
   1e4d8:	d1f2      	bne.n	1e4c0 <gen_prov_ctl+0x5c>
	link.id = rx->link_id;
   1e4da:	682b      	ldr	r3, [r5, #0]
   1e4dc:	4d26      	ldr	r5, [pc, #152]	; (1e578 <gen_prov_ctl+0x114>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e4de:	2101      	movs	r1, #1
   1e4e0:	4628      	mov	r0, r5
   1e4e2:	f840 3b04 	str.w	r3, [r0], #4
   1e4e6:	f00f fbea 	bl	2dcbe <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   1e4ea:	696b      	ldr	r3, [r5, #20]
	err = bearer_ctl_send_unacked(ctl_buf_create(LINK_ACK, NULL, 0, RETRANSMITS_ACK));
   1e4ec:	4621      	mov	r1, r4
	buf->data = buf->__buf;
   1e4ee:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   1e4f0:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   1e4f2:	601a      	str	r2, [r3, #0]
   1e4f4:	2001      	movs	r0, #1
   1e4f6:	2302      	movs	r3, #2
   1e4f8:	4622      	mov	r2, r4
   1e4fa:	f7ff ff8d 	bl	1e418 <ctl_buf_create>
   1e4fe:	f7ff febf 	bl	1e280 <bearer_ctl_send_unacked>
	if (err) {
   1e502:	b110      	cbz	r0, 1e50a <gen_prov_ctl+0xa6>
		reset_adv_link();
   1e504:	f7ff ff3c 	bl	1e380 <reset_adv_link>
		return;
   1e508:	e7da      	b.n	1e4c0 <gen_prov_ctl+0x5c>
	link.cb->link_opened(&bt_mesh_pb_adv, link.cb_data);
   1e50a:	68ab      	ldr	r3, [r5, #8]
   1e50c:	68e9      	ldr	r1, [r5, #12]
   1e50e:	681b      	ldr	r3, [r3, #0]
   1e510:	481a      	ldr	r0, [pc, #104]	; (1e57c <gen_prov_ctl+0x118>)
   1e512:	4798      	blx	r3
   1e514:	e7d4      	b.n	1e4c0 <gen_prov_ctl+0x5c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e516:	f7ff fee3 	bl	1e2e0 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e51a:	07c0      	lsls	r0, r0, #31
   1e51c:	d5d0      	bpl.n	1e4c0 <gen_prov_ctl+0x5c>
   1e51e:	f7ff fedf 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   1e522:	0681      	lsls	r1, r0, #26
   1e524:	d5cc      	bpl.n	1e4c0 <gen_prov_ctl+0x5c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e526:	2102      	movs	r1, #2
   1e528:	4815      	ldr	r0, [pc, #84]	; (1e580 <gen_prov_ctl+0x11c>)
   1e52a:	f00f fbc8 	bl	2dcbe <atomic_or>
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   1e52e:	0782      	lsls	r2, r0, #30
   1e530:	d4c6      	bmi.n	1e4c0 <gen_prov_ctl+0x5c>
		prov_clear_tx();
   1e532:	f7ff fe9b 	bl	1e26c <prov_clear_tx>
		link.cb->link_opened(&bt_mesh_pb_adv, link.cb_data);
   1e536:	4b10      	ldr	r3, [pc, #64]	; (1e578 <gen_prov_ctl+0x114>)
   1e538:	4810      	ldr	r0, [pc, #64]	; (1e57c <gen_prov_ctl+0x118>)
   1e53a:	689a      	ldr	r2, [r3, #8]
   1e53c:	68d9      	ldr	r1, [r3, #12]
   1e53e:	6812      	ldr	r2, [r2, #0]
   1e540:	4790      	blx	r2
   1e542:	e7bd      	b.n	1e4c0 <gen_prov_ctl+0x5c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e544:	f7ff fecc 	bl	1e2e0 <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e548:	07c3      	lsls	r3, r0, #31
   1e54a:	d5b9      	bpl.n	1e4c0 <gen_prov_ctl+0x5c>
	if (buf->len != 1) {
   1e54c:	888b      	ldrh	r3, [r1, #4]
   1e54e:	2b01      	cmp	r3, #1
   1e550:	d1b6      	bne.n	1e4c0 <gen_prov_ctl+0x5c>
	close_link(net_buf_simple_pull_u8(buf));
   1e552:	4608      	mov	r0, r1
   1e554:	f00f fc92 	bl	2de7c <net_buf_simple_pull_u8>
   1e558:	f7ff ff4c 	bl	1e3f4 <close_link>
   1e55c:	e7b0      	b.n	1e4c0 <gen_prov_ctl+0x5c>
		LOG_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   1e55e:	466c      	mov	r4, sp
   1e560:	b088      	sub	sp, #32
   1e562:	466b      	mov	r3, sp
   1e564:	4907      	ldr	r1, [pc, #28]	; (1e584 <gen_prov_ctl+0x120>)
	switch (BEARER_CTL(rx->gpc)) {
   1e566:	e9c3 1205 	strd	r1, r2, [r3, #20]
		LOG_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   1e56a:	461a      	mov	r2, r3
   1e56c:	e78e      	b.n	1e48c <gen_prov_ctl+0x28>
   1e56e:	bf00      	nop
   1e570:	000343a0 	.word	0x000343a0
   1e574:	0002fcdc 	.word	0x0002fcdc
   1e578:	200084a0 	.word	0x200084a0
   1e57c:	00030960 	.word	0x00030960
   1e580:	200084a4 	.word	0x200084a4
   1e584:	000343c7 	.word	0x000343c7

0001e588 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   1e588:	b507      	push	{r0, r1, r2, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e58a:	2104      	movs	r1, #4
   1e58c:	f88d 0007 	strb.w	r0, [sp, #7]
   1e590:	4808      	ldr	r0, [pc, #32]	; (1e5b4 <prov_link_close+0x2c>)
   1e592:	f00f fb94 	bl	2dcbe <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   1e596:	0743      	lsls	r3, r0, #29
   1e598:	d408      	bmi.n	1e5ac <prov_link_close+0x24>
		return;
	}

	/* Ignore errors, the link will time out eventually if this doesn't get sent */
	bearer_ctl_send_unacked(ctl_buf_create(LINK_CLOSE, &status, 1, RETRANSMITS_LINK_CLOSE));
   1e59a:	2302      	movs	r3, #2
   1e59c:	2201      	movs	r2, #1
   1e59e:	4618      	mov	r0, r3
   1e5a0:	f10d 0107 	add.w	r1, sp, #7
   1e5a4:	f7ff ff38 	bl	1e418 <ctl_buf_create>
   1e5a8:	f7ff fe6a 	bl	1e280 <bearer_ctl_send_unacked>
}
   1e5ac:	b003      	add	sp, #12
   1e5ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1e5b2:	bf00      	nop
   1e5b4:	200084a4 	.word	0x200084a4

0001e5b8 <protocol_timeout>:
{
   1e5b8:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e5ba:	f7ff fe91 	bl	1e2e0 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e5be:	07c3      	lsls	r3, r0, #31
   1e5c0:	d507      	bpl.n	1e5d2 <protocol_timeout+0x1a>
	link.rx.seg = 0U;
   1e5c2:	2200      	movs	r2, #0
   1e5c4:	4b03      	ldr	r3, [pc, #12]	; (1e5d4 <protocol_timeout+0x1c>)
	prov_link_close(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1e5c6:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   1e5c8:	745a      	strb	r2, [r3, #17]
}
   1e5ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1e5ce:	f7ff bfdb 	b.w	1e588 <prov_link_close>
}
   1e5d2:	bd08      	pop	{r3, pc}
   1e5d4:	200084a0 	.word	0x200084a0

0001e5d8 <prov_retransmit>:
{
   1e5d8:	b508      	push	{r3, lr}
   1e5da:	f7ff fe81 	bl	1e2e0 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e5de:	07c3      	lsls	r3, r0, #31
   1e5e0:	d521      	bpl.n	1e626 <prov_retransmit+0x4e>
   1e5e2:	f010 ffc0 	bl	2f566 <z_impl_k_uptime_ticks>
   1e5e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e5ea:	fba0 0302 	umull	r0, r3, r0, r2
   1e5ee:	fb02 3101 	mla	r1, r2, r1, r3
   1e5f2:	0bc3      	lsrs	r3, r0, #15
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   1e5f4:	480c      	ldr	r0, [pc, #48]	; (1e628 <prov_retransmit+0x50>)
   1e5f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1e5fa:	e9d0 2006 	ldrd	r2, r0, [r0, #24]
   1e5fe:	1a9b      	subs	r3, r3, r2
   1e600:	f247 5231 	movw	r2, #30001	; 0x7531
   1e604:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   1e608:	eb61 0100 	sbc.w	r1, r1, r0
   1e60c:	4293      	cmp	r3, r2
   1e60e:	f171 0100 	sbcs.w	r1, r1, #0
   1e612:	db04      	blt.n	1e61e <prov_retransmit+0x46>
}
   1e614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   1e618:	2002      	movs	r0, #2
   1e61a:	f7ff bfb5 	b.w	1e588 <prov_link_close>
}
   1e61e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_reliable();
   1e622:	f7ff bde3 	b.w	1e1ec <send_reliable>
}
   1e626:	bd08      	pop	{r3, pc}
   1e628:	200084a0 	.word	0x200084a0

0001e62c <prov_send_adv>:
{
   1e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1e630:	f8df a164 	ldr.w	sl, [pc, #356]	; 1e798 <prov_send_adv+0x16c>
{
   1e634:	b086      	sub	sp, #24
   1e636:	4689      	mov	r9, r1
   1e638:	4604      	mov	r4, r0
   1e63a:	4690      	mov	r8, r2
	prov_clear_tx();
   1e63c:	f7ff fe16 	bl	1e26c <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1e640:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1e644:	2300      	movs	r3, #0
   1e646:	4650      	mov	r0, sl
   1e648:	f008 f816 	bl	26678 <k_work_reschedule>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   1e64c:	2000      	movs	r0, #0
   1e64e:	f00f fb44 	bl	2dcda <adv_buf_create>
	if (!start) {
   1e652:	4606      	mov	r6, r0
   1e654:	2800      	cmp	r0, #0
   1e656:	d077      	beq.n	1e748 <prov_send_adv+0x11c>
	link.tx.id = next_transaction_id(link.tx.id);
   1e658:	f81a 2c48 	ldrb.w	r2, [sl, #-72]
	net_buf_simple_add_be32(&buf->b, val);
   1e65c:	f100 070c 	add.w	r7, r0, #12
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1e660:	1c53      	adds	r3, r2, #1
	link.tx.id = next_transaction_id(link.tx.id);
   1e662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e666:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1e66a:	4313      	orrs	r3, r2
   1e66c:	4638      	mov	r0, r7
   1e66e:	f85a 1c68 	ldr.w	r1, [sl, #-104]
   1e672:	f80a 3c48 	strb.w	r3, [sl, #-72]
   1e676:	f00f fc61 	bl	2df3c <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   1e67a:	4630      	mov	r0, r6
   1e67c:	f81a 1c48 	ldrb.w	r1, [sl, #-72]
   1e680:	f00f fb40 	bl	2dd04 <net_buf_add_u8.isra.0>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1e684:	88a3      	ldrh	r3, [r4, #4]
   1e686:	4630      	mov	r0, r6
	if (len <= START_PAYLOAD_MAX) {
   1e688:	2b14      	cmp	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1e68a:	bf81      	itttt	hi
   1e68c:	2217      	movhi	r2, #23
	len -= START_PAYLOAD_MAX;
   1e68e:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1e690:	b29b      	uxthhi	r3, r3
   1e692:	fbb3 f3f2 	udivhi	r3, r3, r2
		return 0;
   1e696:	bf92      	itee	ls
   1e698:	2300      	movls	r3, #0
	return 1 + (len / CONT_PAYLOAD_MAX);
   1e69a:	3301      	addhi	r3, #1
   1e69c:	b2db      	uxtbhi	r3, r3
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1e69e:	0099      	lsls	r1, r3, #2
   1e6a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   1e6a4:	f00f fb2e 	bl	2dd04 <net_buf_add_u8.isra.0>
	net_buf_simple_add_be16(&buf->b, val);
   1e6a8:	4638      	mov	r0, r7
   1e6aa:	88a1      	ldrh	r1, [r4, #4]
   1e6ac:	f00f fc31 	bl	2df12 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   1e6b0:	7921      	ldrb	r1, [r4, #4]
   1e6b2:	6820      	ldr	r0, [r4, #0]
   1e6b4:	f7fa f97e 	bl	189b4 <bt_mesh_fcs_calc>
	link.tx.id = next_transaction_id(link.tx.id);
   1e6b8:	f1aa 0568 	sub.w	r5, sl, #104	; 0x68
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   1e6bc:	4601      	mov	r1, r0
   1e6be:	4630      	mov	r0, r6
   1e6c0:	f00f fb20 	bl	2dd04 <net_buf_add_u8.isra.0>
	link.tx.buf[0] = start;
   1e6c4:	626e      	str	r6, [r5, #36]	; 0x24
	link.tx.cb_data = cb_data;
   1e6c6:	e9c5 980c 	strd	r9, r8, [r5, #48]	; 0x30
   1e6ca:	f010 ff4c 	bl	2f566 <z_impl_k_uptime_ticks>
   1e6ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e6d2:	fba0 0302 	umull	r0, r3, r0, r2
   1e6d6:	fb02 3101 	mla	r1, r2, r1, r3
   1e6da:	0bc0      	lsrs	r0, r0, #15
   1e6dc:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1e6e0:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   1e6e2:	e9c5 0106 	strd	r0, r1, [r5, #24]
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   1e6e6:	88a6      	ldrh	r6, [r4, #4]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e6e8:	4638      	mov	r0, r7
	net_buf_add_mem(start, msg->data, seg_len);
   1e6ea:	2e14      	cmp	r6, #20
   1e6ec:	bf28      	it	cs
   1e6ee:	2614      	movcs	r6, #20
   1e6f0:	6821      	ldr	r1, [r4, #0]
   1e6f2:	4632      	mov	r2, r6
   1e6f4:	f00f fbf1 	bl	2deda <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   1e6f8:	4631      	mov	r1, r6
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	f001 fdf4 	bl	202e8 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   1e700:	2700      	movs	r7, #0
   1e702:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e79c <prov_send_adv+0x170>
   1e706:	88a6      	ldrh	r6, [r4, #4]
   1e708:	b91e      	cbnz	r6, 1e712 <prov_send_adv+0xe6>
	send_reliable();
   1e70a:	f7ff fd6f 	bl	1e1ec <send_reliable>
	return 0;
   1e70e:	4630      	mov	r0, r6
   1e710:	e00f      	b.n	1e732 <prov_send_adv+0x106>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   1e712:	2f08      	cmp	r7, #8
   1e714:	d110      	bne.n	1e738 <prov_send_adv+0x10c>
			LOG_ERR("Too big message");
   1e716:	4b22      	ldr	r3, [pc, #136]	; (1e7a0 <prov_send_adv+0x174>)
   1e718:	4822      	ldr	r0, [pc, #136]	; (1e7a4 <prov_send_adv+0x178>)
   1e71a:	9305      	str	r3, [sp, #20]
   1e71c:	2302      	movs	r3, #2
   1e71e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e722:	aa04      	add	r2, sp, #16
   1e724:	9304      	str	r3, [sp, #16]
   1e726:	f00f fad5 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
			free_segments();
   1e72a:	f7ff fd7d 	bl	1e228 <free_segments>
			return -E2BIG;
   1e72e:	f06f 0006 	mvn.w	r0, #6
}
   1e732:	b006      	add	sp, #24
   1e734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   1e738:	2000      	movs	r0, #0
   1e73a:	f00f face 	bl	2dcda <adv_buf_create>
		if (!buf) {
   1e73e:	3704      	adds	r7, #4
   1e740:	4606      	mov	r6, r0
   1e742:	b920      	cbnz	r0, 1e74e <prov_send_adv+0x122>
			free_segments();
   1e744:	f7ff fd70 	bl	1e228 <free_segments>
		return -ENOBUFS;
   1e748:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e74c:	e7f1      	b.n	1e732 <prov_send_adv+0x106>
		link.tx.buf[seg_id] = buf;
   1e74e:	f849 0f04 	str.w	r0, [r9, #4]!
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   1e752:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_simple_add_be32(&buf->b, val);
   1e756:	f100 0a0c 	add.w	sl, r0, #12
   1e75a:	f1b8 0f17 	cmp.w	r8, #23
   1e75e:	bf28      	it	cs
   1e760:	f04f 0817 	movcs.w	r8, #23
   1e764:	4650      	mov	r0, sl
   1e766:	6829      	ldr	r1, [r5, #0]
   1e768:	f00f fbe8 	bl	2df3c <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   1e76c:	4630      	mov	r0, r6
   1e76e:	f895 1020 	ldrb.w	r1, [r5, #32]
   1e772:	f00f fac7 	bl	2dd04 <net_buf_add_u8.isra.0>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   1e776:	f047 0102 	orr.w	r1, r7, #2
   1e77a:	4630      	mov	r0, r6
   1e77c:	b2c9      	uxtb	r1, r1
   1e77e:	f00f fac1 	bl	2dd04 <net_buf_add_u8.isra.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e782:	6821      	ldr	r1, [r4, #0]
   1e784:	4642      	mov	r2, r8
   1e786:	4650      	mov	r0, sl
   1e788:	f00f fba7 	bl	2deda <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   1e78c:	4641      	mov	r1, r8
   1e78e:	4620      	mov	r0, r4
   1e790:	f001 fdaa 	bl	202e8 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   1e794:	e7b7      	b.n	1e706 <prov_send_adv+0xda>
   1e796:	bf00      	nop
   1e798:	20008508 	.word	0x20008508
   1e79c:	200084c4 	.word	0x200084c4
   1e7a0:	000343e5 	.word	0x000343e5
   1e7a4:	0002fcdc 	.word	0x0002fcdc

0001e7a8 <prov_link_open>:
{
   1e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7aa:	b087      	sub	sp, #28
   1e7ac:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   1e7ae:	f7fd fa17 	bl	1bbe0 <bt_mesh_adv_enable>
	if (err) {
   1e7b2:	4604      	mov	r4, r0
   1e7b4:	b160      	cbz	r0, 1e7d0 <prov_link_open+0x28>
		LOG_ERR("Failed enabling advertiser");
   1e7b6:	4b29      	ldr	r3, [pc, #164]	; (1e85c <prov_link_open+0xb4>)
   1e7b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e7bc:	9305      	str	r3, [sp, #20]
   1e7be:	2302      	movs	r3, #2
   1e7c0:	4827      	ldr	r0, [pc, #156]	; (1e860 <prov_link_open+0xb8>)
   1e7c2:	aa04      	add	r2, sp, #16
   1e7c4:	9304      	str	r3, [sp, #16]
   1e7c6:	f00f fa85 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
}
   1e7ca:	4620      	mov	r0, r4
   1e7cc:	b007      	add	sp, #28
   1e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e7d0:	2101      	movs	r1, #1
   1e7d2:	4824      	ldr	r0, [pc, #144]	; (1e864 <prov_link_open+0xbc>)
   1e7d4:	f00f fa73 	bl	2dcbe <atomic_or>
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   1e7d8:	ea10 0401 	ands.w	r4, r0, r1
   1e7dc:	d13b      	bne.n	1e856 <prov_link_open+0xae>
	bt_rand(&link.id, sizeof(link.id));
   1e7de:	4d22      	ldr	r5, [pc, #136]	; (1e868 <prov_link_open+0xc0>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e7e0:	2120      	movs	r1, #32
   1e7e2:	4820      	ldr	r0, [pc, #128]	; (1e864 <prov_link_open+0xbc>)
   1e7e4:	f00f fa6b 	bl	2dcbe <atomic_or>
   1e7e8:	2104      	movs	r1, #4
   1e7ea:	4628      	mov	r0, r5
   1e7ec:	f7f2 f878 	bl	108e0 <bt_rand>
	link.tx.id = XACT_ID_MAX;
   1e7f0:	237f      	movs	r3, #127	; 0x7f
   1e7f2:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   1e7f6:	23ff      	movs	r3, #255	; 0xff
   1e7f8:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   1e7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   1e7fc:	4631      	mov	r1, r6
	link.cb = cb;
   1e7fe:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   1e800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   1e802:	4620      	mov	r0, r4
	link.cb_data = cb_data;
   1e804:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   1e806:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   1e808:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   1e80a:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   1e80c:	601a      	str	r2, [r3, #0]
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   1e80e:	4623      	mov	r3, r4
   1e810:	2210      	movs	r2, #16
   1e812:	f7ff fe01 	bl	1e418 <ctl_buf_create>
	if (!buf) {
   1e816:	4606      	mov	r6, r0
   1e818:	b1d0      	cbz	r0, 1e850 <prov_link_open+0xa8>
	prov_clear_tx();
   1e81a:	f7ff fd27 	bl	1e26c <prov_clear_tx>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1e81e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1e822:	2300      	movs	r3, #0
   1e824:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1e828:	f007 ff26 	bl	26678 <k_work_reschedule>
   1e82c:	f010 fe9b 	bl	2f566 <z_impl_k_uptime_ticks>
   1e830:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1e834:	fba0 3207 	umull	r3, r2, r0, r7
   1e838:	fb07 2101 	mla	r1, r7, r1, r2
   1e83c:	0bdb      	lsrs	r3, r3, #15
   1e83e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	link.tx.buf[0] = buf;
   1e842:	626e      	str	r6, [r5, #36]	; 0x24
   1e844:	0bc9      	lsrs	r1, r1, #15
	link.tx.start = k_uptime_get();
   1e846:	e9c5 3106 	strd	r3, r1, [r5, #24]
	send_reliable();
   1e84a:	f7ff fccf 	bl	1e1ec <send_reliable>
	return 0;
   1e84e:	e7bc      	b.n	1e7ca <prov_link_open+0x22>
		return -ENOMEM;
   1e850:	f06f 040b 	mvn.w	r4, #11
	return bearer_ctl_send(ctl_buf_create(LINK_OPEN, uuid, 16, RETRANSMITS_RELIABLE));
   1e854:	e7b9      	b.n	1e7ca <prov_link_open+0x22>
		return -EBUSY;
   1e856:	f06f 040f 	mvn.w	r4, #15
   1e85a:	e7b6      	b.n	1e7ca <prov_link_open+0x22>
   1e85c:	000326e4 	.word	0x000326e4
   1e860:	0002fcdc 	.word	0x0002fcdc
   1e864:	200084a4 	.word	0x200084a4
   1e868:	200084a0 	.word	0x200084a0

0001e86c <buf_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e86c:	4b07      	ldr	r3, [pc, #28]	; (1e88c <buf_sent+0x20>)
   1e86e:	e8d3 2fef 	ldaex	r2, [r3]
   1e872:	f022 0104 	bic.w	r1, r2, #4
   1e876:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1e87a:	2800      	cmp	r0, #0
   1e87c:	d1f7      	bne.n	1e86e <buf_sent+0x2>
	if (atomic_test_and_clear_bit(link.flags, ADV_LINK_CLOSING)) {
   1e87e:	0753      	lsls	r3, r2, #29
   1e880:	d502      	bpl.n	1e888 <buf_sent+0x1c>
		close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   1e882:	2000      	movs	r0, #0
   1e884:	f7ff bdb6 	b.w	1e3f4 <close_link>
}
   1e888:	4770      	bx	lr
   1e88a:	bf00      	nop
   1e88c:	200084a4 	.word	0x200084a4

0001e890 <gen_prov_ack_send>:
{
   1e890:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1e892:	2110      	movs	r1, #16
   1e894:	4605      	mov	r5, r0
   1e896:	481d      	ldr	r0, [pc, #116]	; (1e90c <gen_prov_ack_send+0x7c>)
   1e898:	f00f fa11 	bl	2dcbe <atomic_or>
	if (pending && link.tx.pending_ack == xact_id) {
   1e89c:	f010 0f10 	tst.w	r0, #16
   1e8a0:	4e1a      	ldr	r6, [pc, #104]	; (1e90c <gen_prov_ack_send+0x7c>)
   1e8a2:	d10d      	bne.n	1e8c0 <gen_prov_ack_send+0x30>
	buf = adv_buf_create(RETRANSMITS_ACK);
   1e8a4:	2002      	movs	r0, #2
   1e8a6:	f00f fa18 	bl	2dcda <adv_buf_create>
	if (!buf) {
   1e8aa:	4604      	mov	r4, r0
   1e8ac:	bb50      	cbnz	r0, 1e904 <gen_prov_ack_send+0x74>
   1e8ae:	e8d6 3fef 	ldaex	r3, [r6]
   1e8b2:	f023 0310 	bic.w	r3, r3, #16
   1e8b6:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1e8ba:	2a00      	cmp	r2, #0
   1e8bc:	d1f7      	bne.n	1e8ae <gen_prov_ack_send+0x1e>
}
   1e8be:	bd70      	pop	{r4, r5, r6, pc}
	if (pending && link.tx.pending_ack == xact_id) {
   1e8c0:	7f73      	ldrb	r3, [r6, #29]
   1e8c2:	42ab      	cmp	r3, r5
   1e8c4:	d0fb      	beq.n	1e8be <gen_prov_ack_send+0x2e>
	buf = adv_buf_create(RETRANSMITS_ACK);
   1e8c6:	2002      	movs	r0, #2
   1e8c8:	f00f fa07 	bl	2dcda <adv_buf_create>
	if (!buf) {
   1e8cc:	4604      	mov	r4, r0
   1e8ce:	2800      	cmp	r0, #0
   1e8d0:	d0ed      	beq.n	1e8ae <gen_prov_ack_send+0x1e>
		complete = NULL;
   1e8d2:	2600      	movs	r6, #0
	net_buf_simple_add_be32(&buf->b, val);
   1e8d4:	4b0e      	ldr	r3, [pc, #56]	; (1e910 <gen_prov_ack_send+0x80>)
   1e8d6:	f104 000c 	add.w	r0, r4, #12
   1e8da:	6819      	ldr	r1, [r3, #0]
   1e8dc:	f00f fb2e 	bl	2df3c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   1e8e0:	4629      	mov	r1, r5
   1e8e2:	4620      	mov	r0, r4
   1e8e4:	f00f fa0e 	bl	2dd04 <net_buf_add_u8.isra.0>
	net_buf_add_u8(buf, GPC_ACK);
   1e8e8:	4620      	mov	r0, r4
   1e8ea:	2101      	movs	r1, #1
   1e8ec:	f00f fa0a 	bl	2dd04 <net_buf_add_u8.isra.0>
	bt_mesh_adv_send(buf, complete, NULL);
   1e8f0:	4620      	mov	r0, r4
   1e8f2:	4631      	mov	r1, r6
   1e8f4:	2200      	movs	r2, #0
   1e8f6:	f7f6 fa63 	bl	14dc0 <bt_mesh_adv_send>
	net_buf_unref(buf);
   1e8fa:	4620      	mov	r0, r4
}
   1e8fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
   1e900:	f001 bbec 	b.w	200dc <net_buf_unref>
		link.tx.pending_ack = xact_id;
   1e904:	7775      	strb	r5, [r6, #29]
		complete = &cb;
   1e906:	4e03      	ldr	r6, [pc, #12]	; (1e914 <gen_prov_ack_send+0x84>)
   1e908:	e7e4      	b.n	1e8d4 <gen_prov_ack_send+0x44>
   1e90a:	bf00      	nop
   1e90c:	200084a4 	.word	0x200084a4
   1e910:	200084a0 	.word	0x200084a0
   1e914:	00030958 	.word	0x00030958

0001e918 <prov_msg_recv>:
{
   1e918:	b510      	push	{r4, lr}
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   1e91a:	4c17      	ldr	r4, [pc, #92]	; (1e978 <prov_msg_recv+0x60>)
{
   1e91c:	b086      	sub	sp, #24
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1e91e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1e922:	2300      	movs	r3, #0
   1e924:	4815      	ldr	r0, [pc, #84]	; (1e97c <prov_msg_recv+0x64>)
   1e926:	f007 fea7 	bl	26678 <k_work_reschedule>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   1e92a:	7ce1      	ldrb	r1, [r4, #19]
   1e92c:	6960      	ldr	r0, [r4, #20]
   1e92e:	f7fa f851 	bl	189d4 <bt_mesh_fcs_check>
   1e932:	b958      	cbnz	r0, 1e94c <prov_msg_recv+0x34>
		LOG_ERR("Incorrect FCS");
   1e934:	4b12      	ldr	r3, [pc, #72]	; (1e980 <prov_msg_recv+0x68>)
   1e936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e93a:	9305      	str	r3, [sp, #20]
   1e93c:	2302      	movs	r3, #2
   1e93e:	4811      	ldr	r0, [pc, #68]	; (1e984 <prov_msg_recv+0x6c>)
   1e940:	aa04      	add	r2, sp, #16
   1e942:	9304      	str	r3, [sp, #16]
   1e944:	f00f f9c6 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
}
   1e948:	b006      	add	sp, #24
   1e94a:	bd10      	pop	{r4, pc}
	gen_prov_ack_send(link.rx.id);
   1e94c:	7c20      	ldrb	r0, [r4, #16]
   1e94e:	f7ff ff9f 	bl	1e890 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1e952:	f7ff fcc5 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   1e956:	0703      	lsls	r3, r0, #28
   1e958:	d505      	bpl.n	1e966 <prov_msg_recv+0x4e>
		prov_failed(PROV_ERR_UNEXP_PDU);
   1e95a:	2003      	movs	r0, #3
}
   1e95c:	b006      	add	sp, #24
   1e95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   1e962:	f7ff bc31 	b.w	1e1c8 <prov_failed>
	link.cb->recv(&bt_mesh_pb_adv, link.cb_data, link.rx.buf);
   1e966:	68a3      	ldr	r3, [r4, #8]
   1e968:	6962      	ldr	r2, [r4, #20]
   1e96a:	68db      	ldr	r3, [r3, #12]
   1e96c:	68e1      	ldr	r1, [r4, #12]
   1e96e:	4806      	ldr	r0, [pc, #24]	; (1e988 <prov_msg_recv+0x70>)
}
   1e970:	b006      	add	sp, #24
   1e972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&bt_mesh_pb_adv, link.cb_data, link.rx.buf);
   1e976:	4718      	bx	r3
   1e978:	200084a0 	.word	0x200084a0
   1e97c:	20008508 	.word	0x20008508
   1e980:	000343f5 	.word	0x000343f5
   1e984:	0002fcdc 	.word	0x0002fcdc
   1e988:	00030960 	.word	0x00030960

0001e98c <gen_prov_cont>:
{
   1e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   1e990:	4c40      	ldr	r4, [pc, #256]	; (1ea94 <gen_prov_cont+0x108>)
{
   1e992:	4602      	mov	r2, r0
   1e994:	460d      	mov	r5, r1
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   1e996:	f890 8005 	ldrb.w	r8, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   1e99a:	7901      	ldrb	r1, [r0, #4]
   1e99c:	7c60      	ldrb	r0, [r4, #17]
   1e99e:	7c23      	ldrb	r3, [r4, #16]
{
   1e9a0:	af00      	add	r7, sp, #0
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   1e9a2:	2800      	cmp	r0, #0
   1e9a4:	d136      	bne.n	1ea14 <gen_prov_cont+0x88>
   1e9a6:	428b      	cmp	r3, r1
   1e9a8:	d109      	bne.n	1e9be <gen_prov_cont+0x32>
   1e9aa:	f7ff fc99 	bl	1e2e0 <atomic_get.constprop.0>
		if (!ack_pending()) {
   1e9ae:	06c4      	lsls	r4, r0, #27
   1e9b0:	d402      	bmi.n	1e9b8 <gen_prov_cont+0x2c>
			gen_prov_ack_send(rx->xact_id);
   1e9b2:	7910      	ldrb	r0, [r2, #4]
   1e9b4:	f7ff ff6c 	bl	1e890 <gen_prov_ack_send>
}
   1e9b8:	46bd      	mov	sp, r7
   1e9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1e9be:	1c5a      	adds	r2, r3, #1
	if (!link.rx.seg &&
   1e9c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1e9c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1e9c8:	4313      	orrs	r3, r2
   1e9ca:	4299      	cmp	r1, r3
   1e9cc:	d1f4      	bne.n	1e9b8 <gen_prov_cont+0x2c>
		net_buf_simple_reset(link.rx.buf);
   1e9ce:	6963      	ldr	r3, [r4, #20]
		link.rx.id = rx->xact_id;
   1e9d0:	7421      	strb	r1, [r4, #16]
	buf->data = buf->__buf;
   1e9d2:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   1e9d4:	8098      	strh	r0, [r3, #4]
	buf->data = buf->__buf;
   1e9d6:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   1e9d8:	23ff      	movs	r3, #255	; 0xff
   1e9da:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
   1e9dc:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
   1e9de:	f7ff fc45 	bl	1e26c <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   1e9e2:	7ca3      	ldrb	r3, [r4, #18]
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   1e9e4:	ea4f 0698 	mov.w	r6, r8, lsr #2
	if (seg > link.rx.last_seg) {
   1e9e8:	ebb3 0f98 	cmp.w	r3, r8, lsr #2
   1e9ec:	d215      	bcs.n	1ea1a <gen_prov_cont+0x8e>
		LOG_ERR("Invalid segment index %u", seg);
   1e9ee:	466c      	mov	r4, sp
   1e9f0:	b088      	sub	sp, #32
   1e9f2:	466a      	mov	r2, sp
   1e9f4:	4b28      	ldr	r3, [pc, #160]	; (1ea98 <gen_prov_cont+0x10c>)
   1e9f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e9fa:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e9fe:	2303      	movs	r3, #3
   1ea00:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Incorrect last seg len: %u != %u", expect_len, buf->len);
   1ea04:	4825      	ldr	r0, [pc, #148]	; (1ea9c <gen_prov_cont+0x110>)
   1ea06:	f00f f965 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
			prov_failed(PROV_ERR_NVAL_FMT);
   1ea0a:	2002      	movs	r0, #2
   1ea0c:	46a5      	mov	sp, r4
   1ea0e:	f7ff fbdb 	bl	1e1c8 <prov_failed>
			return;
   1ea12:	e7d1      	b.n	1e9b8 <gen_prov_cont+0x2c>
	} else if (rx->xact_id != link.rx.id) {
   1ea14:	428b      	cmp	r3, r1
   1ea16:	d0e4      	beq.n	1e9e2 <gen_prov_cont+0x56>
   1ea18:	e7ce      	b.n	1e9b8 <gen_prov_cont+0x2c>
	if (!(link.rx.seg & BIT(seg))) {
   1ea1a:	7c63      	ldrb	r3, [r4, #17]
   1ea1c:	40f3      	lsrs	r3, r6
   1ea1e:	07d8      	lsls	r0, r3, #31
   1ea20:	d5ca      	bpl.n	1e9b8 <gen_prov_cont+0x2c>
	if (XACT_SEG_OFFSET(seg) + buf->len > RX_BUFFER_MAX) {
   1ea22:	2217      	movs	r2, #23
   1ea24:	1e73      	subs	r3, r6, #1
   1ea26:	4353      	muls	r3, r2
   1ea28:	88aa      	ldrh	r2, [r5, #4]
   1ea2a:	3314      	adds	r3, #20
   1ea2c:	18d1      	adds	r1, r2, r3
   1ea2e:	2941      	cmp	r1, #65	; 0x41
   1ea30:	dcc2      	bgt.n	1e9b8 <gen_prov_cont+0x2c>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   1ea32:	6961      	ldr	r1, [r4, #20]
   1ea34:	6808      	ldr	r0, [r1, #0]
   1ea36:	6829      	ldr	r1, [r5, #0]
   1ea38:	4418      	add	r0, r3
   1ea3a:	f00b fd6e 	bl	2a51a <memcpy>
	XACT_SEG_RECV(seg);
   1ea3e:	2301      	movs	r3, #1
   1ea40:	7c62      	ldrb	r2, [r4, #17]
   1ea42:	40b3      	lsls	r3, r6
   1ea44:	ea22 0203 	bic.w	r2, r2, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   1ea48:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
   1ea4a:	7462      	strb	r2, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   1ea4c:	42b3      	cmp	r3, r6
   1ea4e:	d11c      	bne.n	1ea8a <gen_prov_cont+0xfe>
   1ea50:	07d1      	lsls	r1, r2, #31
   1ea52:	d4b1      	bmi.n	1e9b8 <gen_prov_cont+0x2c>
		expect_len = (link.rx.buf->len - 20U -
   1ea54:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
   1ea58:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1ea5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1ea60:	6961      	ldr	r1, [r4, #20]
   1ea62:	3303      	adds	r3, #3
   1ea64:	8889      	ldrh	r1, [r1, #4]
   1ea66:	440b      	add	r3, r1
		if (expect_len != buf->len) {
   1ea68:	88a9      	ldrh	r1, [r5, #4]
		expect_len = (link.rx.buf->len - 20U -
   1ea6a:	b2db      	uxtb	r3, r3
		if (expect_len != buf->len) {
   1ea6c:	428b      	cmp	r3, r1
   1ea6e:	d00c      	beq.n	1ea8a <gen_prov_cont+0xfe>
			LOG_ERR("Incorrect last seg len: %u != %u", expect_len, buf->len);
   1ea70:	466c      	mov	r4, sp
   1ea72:	b088      	sub	sp, #32
   1ea74:	466a      	mov	r2, sp
   1ea76:	480a      	ldr	r0, [pc, #40]	; (1eaa0 <gen_prov_cont+0x114>)
   1ea78:	61d1      	str	r1, [r2, #28]
   1ea7a:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1ea7e:	2304      	movs	r3, #4
   1ea80:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ea84:	f842 3f10 	str.w	r3, [r2, #16]!
   1ea88:	e7bc      	b.n	1ea04 <gen_prov_cont+0x78>
	if (!link.rx.seg) {
   1ea8a:	2a00      	cmp	r2, #0
   1ea8c:	d194      	bne.n	1e9b8 <gen_prov_cont+0x2c>
		prov_msg_recv();
   1ea8e:	f7ff ff43 	bl	1e918 <prov_msg_recv>
   1ea92:	e791      	b.n	1e9b8 <gen_prov_cont+0x2c>
   1ea94:	200084a0 	.word	0x200084a0
   1ea98:	00034403 	.word	0x00034403
   1ea9c:	0002fcdc 	.word	0x0002fcdc
   1eaa0:	0003441c 	.word	0x0003441c

0001eaa4 <gen_prov_start>:
{
   1eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eaa8:	b086      	sub	sp, #24
	if (rx->xact_id == link.rx.id) {
   1eaaa:	4e55      	ldr	r6, [pc, #340]	; (1ec00 <gen_prov_start+0x15c>)
{
   1eaac:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   1eaae:	7c32      	ldrb	r2, [r6, #16]
   1eab0:	7901      	ldrb	r1, [r0, #4]
{
   1eab2:	4604      	mov	r4, r0
	if (rx->xact_id == link.rx.id) {
   1eab4:	4291      	cmp	r1, r2
{
   1eab6:	af00      	add	r7, sp, #0
	if (rx->xact_id == link.rx.id) {
   1eab8:	d12f      	bne.n	1eb1a <gen_prov_start+0x76>
		if (!link.rx.seg) {
   1eaba:	7c73      	ldrb	r3, [r6, #17]
   1eabc:	b953      	cbnz	r3, 1ead4 <gen_prov_start+0x30>
   1eabe:	f7ff fc0f 	bl	1e2e0 <atomic_get.constprop.0>
			if (!ack_pending()) {
   1eac2:	06c0      	lsls	r0, r0, #27
   1eac4:	d402      	bmi.n	1eacc <gen_prov_start+0x28>
				gen_prov_ack_send(rx->xact_id);
   1eac6:	7920      	ldrb	r0, [r4, #4]
   1eac8:	f7ff fee2 	bl	1e890 <gen_prov_ack_send>
}
   1eacc:	3718      	adds	r7, #24
   1eace:	46bd      	mov	sp, r7
   1ead0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(link.rx.seg & BIT(0))) {
   1ead4:	07d9      	lsls	r1, r3, #31
   1ead6:	d5f9      	bpl.n	1eacc <gen_prov_start+0x28>
	buf->len  = 0U;
   1ead8:	2200      	movs	r2, #0
	net_buf_simple_reset(link.rx.buf);
   1eada:	6973      	ldr	r3, [r6, #20]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   1eadc:	4628      	mov	r0, r5
   1eade:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   1eae0:	689a      	ldr	r2, [r3, #8]
   1eae2:	601a      	str	r2, [r3, #0]
   1eae4:	f8d6 8014 	ldr.w	r8, [r6, #20]
   1eae8:	f00f f9d8 	bl	2de9c <net_buf_simple_pull_be16>
   1eaec:	f8a8 0004 	strh.w	r0, [r8, #4]
	link.rx.id = rx->xact_id;
   1eaf0:	7923      	ldrb	r3, [r4, #4]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1eaf2:	4628      	mov	r0, r5
	link.rx.id = rx->xact_id;
   1eaf4:	7433      	strb	r3, [r6, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1eaf6:	f00f f9c1 	bl	2de7c <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   1eafa:	6972      	ldr	r2, [r6, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1eafc:	74f0      	strb	r0, [r6, #19]
	if (link.rx.buf->len < 1) {
   1eafe:	8893      	ldrh	r3, [r2, #4]
   1eb00:	b9a3      	cbnz	r3, 1eb2c <gen_prov_start+0x88>
		LOG_ERR("Ignoring zero-length provisioning PDU");
   1eb02:	4b40      	ldr	r3, [pc, #256]	; (1ec04 <gen_prov_start+0x160>)
		LOG_ERR("Too small total length for multi-segment PDU");
   1eb04:	2402      	movs	r4, #2
   1eb06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eb0a:	483f      	ldr	r0, [pc, #252]	; (1ec08 <gen_prov_start+0x164>)
   1eb0c:	617b      	str	r3, [r7, #20]
   1eb0e:	613c      	str	r4, [r7, #16]
   1eb10:	f107 0210 	add.w	r2, r7, #16
   1eb14:	f00f f8de 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
		prov_failed(PROV_ERR_NVAL_FMT);
   1eb18:	e01a      	b.n	1eb50 <gen_prov_start+0xac>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1eb1a:	1c53      	adds	r3, r2, #1
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   1eb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1eb20:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1eb24:	4313      	orrs	r3, r2
   1eb26:	4299      	cmp	r1, r3
   1eb28:	d1d0      	bne.n	1eacc <gen_prov_start+0x28>
   1eb2a:	e7d5      	b.n	1ead8 <gen_prov_start+0x34>
	if (link.rx.buf->len > link.rx.buf->size) {
   1eb2c:	88d2      	ldrh	r2, [r2, #6]
   1eb2e:	429a      	cmp	r2, r3
   1eb30:	d212      	bcs.n	1eb58 <gen_prov_start+0xb4>
		LOG_ERR("Too large provisioning PDU (%u bytes)", link.rx.buf->len);
   1eb32:	466c      	mov	r4, sp
   1eb34:	b088      	sub	sp, #32
   1eb36:	466a      	mov	r2, sp
   1eb38:	4934      	ldr	r1, [pc, #208]	; (1ec0c <gen_prov_start+0x168>)
   1eb3a:	6151      	str	r1, [r2, #20]
   1eb3c:	6193      	str	r3, [r2, #24]
   1eb3e:	2303      	movs	r3, #3
   1eb40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eb44:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb48:	482f      	ldr	r0, [pc, #188]	; (1ec08 <gen_prov_start+0x164>)
   1eb4a:	f00f f8c3 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1eb4e:	46a5      	mov	sp, r4
		prov_failed(PROV_ERR_NVAL_FMT);
   1eb50:	2002      	movs	r0, #2
   1eb52:	f7ff fb39 	bl	1e1c8 <prov_failed>
		return;
   1eb56:	e7b9      	b.n	1eacc <gen_prov_start+0x28>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   1eb58:	7961      	ldrb	r1, [r4, #5]
   1eb5a:	0889      	lsrs	r1, r1, #2
   1eb5c:	d003      	beq.n	1eb66 <gen_prov_start+0xc2>
   1eb5e:	2b14      	cmp	r3, #20
   1eb60:	d803      	bhi.n	1eb6a <gen_prov_start+0xc6>
		LOG_ERR("Too small total length for multi-segment PDU");
   1eb62:	4b2b      	ldr	r3, [pc, #172]	; (1ec10 <gen_prov_start+0x16c>)
   1eb64:	e7ce      	b.n	1eb04 <gen_prov_start+0x60>
	if (len <= START_PAYLOAD_MAX) {
   1eb66:	2b14      	cmp	r3, #20
   1eb68:	d915      	bls.n	1eb96 <gen_prov_start+0xf2>
	return 1 + (len / CONT_PAYLOAD_MAX);
   1eb6a:	2217      	movs	r2, #23
	len -= START_PAYLOAD_MAX;
   1eb6c:	3b14      	subs	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1eb6e:	b29b      	uxth	r3, r3
   1eb70:	fbb3 f3f2 	udiv	r3, r3, r2
   1eb74:	3301      	adds	r3, #1
   1eb76:	b2db      	uxtb	r3, r3
	if (START_LAST_SEG(rx->gpc) != last_seg(link.rx.buf->len)) {
   1eb78:	4299      	cmp	r1, r3
   1eb7a:	d00c      	beq.n	1eb96 <gen_prov_start+0xf2>
		LOG_ERR("Invalid SegN (%u, calculated %u)", START_LAST_SEG(rx->gpc),
   1eb7c:	466c      	mov	r4, sp
   1eb7e:	b088      	sub	sp, #32
   1eb80:	466a      	mov	r2, sp
   1eb82:	61d3      	str	r3, [r2, #28]
   1eb84:	2304      	movs	r3, #4
   1eb86:	4823      	ldr	r0, [pc, #140]	; (1ec14 <gen_prov_start+0x170>)
   1eb88:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1eb8c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1eb90:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb94:	e7d8      	b.n	1eb48 <gen_prov_start+0xa4>
	prov_clear_tx();
   1eb96:	f7ff fb69 	bl	1e26c <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1eb9a:	7961      	ldrb	r1, [r4, #5]
	if ((link.rx.seg & BIT(0)) &&
   1eb9c:	7c73      	ldrb	r3, [r6, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1eb9e:	0889      	lsrs	r1, r1, #2
	if ((link.rx.seg & BIT(0)) &&
   1eba0:	07da      	lsls	r2, r3, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1eba2:	74b1      	strb	r1, [r6, #18]
	if ((link.rx.seg & BIT(0)) &&
   1eba4:	d510      	bpl.n	1ebc8 <gen_prov_start+0x124>
   1eba6:	43da      	mvns	r2, r3
	if (op == 0) {
   1eba8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1ebac:	d005      	beq.n	1ebba <gen_prov_start+0x116>
	return 32 - __builtin_clz(op);
   1ebae:	fab2 f282 	clz	r2, r2
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   1ebb2:	f1c2 021f 	rsb	r2, r2, #31
	if ((link.rx.seg & BIT(0)) &&
   1ebb6:	428a      	cmp	r2, r1
   1ebb8:	d909      	bls.n	1ebce <gen_prov_start+0x12a>
		LOG_ERR("Invalid segment index %u", seg);
   1ebba:	466c      	mov	r4, sp
   1ebbc:	b088      	sub	sp, #32
   1ebbe:	466a      	mov	r2, sp
   1ebc0:	4b15      	ldr	r3, [pc, #84]	; (1ec18 <gen_prov_start+0x174>)
   1ebc2:	6153      	str	r3, [r2, #20]
   1ebc4:	23ff      	movs	r3, #255	; 0xff
   1ebc6:	e7b9      	b.n	1eb3c <gen_prov_start+0x98>
	uint8_t seg = SEG_NVAL;
   1ebc8:	2b00      	cmp	r3, #0
   1ebca:	bf08      	it	eq
   1ebcc:	23ff      	moveq	r3, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   1ebce:	2201      	movs	r2, #1
   1ebd0:	7961      	ldrb	r1, [r4, #5]
   1ebd2:	0889      	lsrs	r1, r1, #2
   1ebd4:	3101      	adds	r1, #1
   1ebd6:	408a      	lsls	r2, r1
   1ebd8:	3a01      	subs	r2, #1
   1ebda:	4013      	ands	r3, r2
   1ebdc:	7473      	strb	r3, [r6, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   1ebde:	6973      	ldr	r3, [r6, #20]
   1ebe0:	88aa      	ldrh	r2, [r5, #4]
   1ebe2:	6818      	ldr	r0, [r3, #0]
   1ebe4:	6829      	ldr	r1, [r5, #0]
   1ebe6:	f00b fc98 	bl	2a51a <memcpy>
	XACT_SEG_RECV(0);
   1ebea:	7c73      	ldrb	r3, [r6, #17]
   1ebec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1ebf0:	7473      	strb	r3, [r6, #17]
	if (!link.rx.seg) {
   1ebf2:	2b00      	cmp	r3, #0
   1ebf4:	f47f af6a 	bne.w	1eacc <gen_prov_start+0x28>
		prov_msg_recv();
   1ebf8:	f7ff fe8e 	bl	1e918 <prov_msg_recv>
   1ebfc:	e766      	b.n	1eacc <gen_prov_start+0x28>
   1ebfe:	bf00      	nop
   1ec00:	200084a0 	.word	0x200084a0
   1ec04:	0003443d 	.word	0x0003443d
   1ec08:	0002fcdc 	.word	0x0002fcdc
   1ec0c:	00034463 	.word	0x00034463
   1ec10:	00034489 	.word	0x00034489
   1ec14:	000344b6 	.word	0x000344b6
   1ec18:	00034403 	.word	0x00034403

0001ec1c <bt_mesh_pb_adv_recv>:
{
   1ec1c:	b5b0      	push	{r4, r5, r7, lr}
   1ec1e:	b082      	sub	sp, #8
	if (!link.cb) {
   1ec20:	4d25      	ldr	r5, [pc, #148]	; (1ecb8 <bt_mesh_pb_adv_recv+0x9c>)
{
   1ec22:	4604      	mov	r4, r0
	if (!link.cb) {
   1ec24:	68ab      	ldr	r3, [r5, #8]
{
   1ec26:	af00      	add	r7, sp, #0
	if (!link.cb) {
   1ec28:	b373      	cbz	r3, 1ec88 <bt_mesh_pb_adv_recv+0x6c>
	if (buf->len < 6) {
   1ec2a:	8883      	ldrh	r3, [r0, #4]
   1ec2c:	2b05      	cmp	r3, #5
   1ec2e:	d92b      	bls.n	1ec88 <bt_mesh_pb_adv_recv+0x6c>
	rx.link_id = net_buf_simple_pull_be32(buf);
   1ec30:	f00f f93e 	bl	2deb0 <net_buf_simple_pull_be32>
   1ec34:	6038      	str	r0, [r7, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   1ec36:	4620      	mov	r0, r4
   1ec38:	f00f f920 	bl	2de7c <net_buf_simple_pull_u8>
   1ec3c:	7138      	strb	r0, [r7, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   1ec3e:	4620      	mov	r0, r4
   1ec40:	f00f f91c 	bl	2de7c <net_buf_simple_pull_u8>
   1ec44:	7178      	strb	r0, [r7, #5]
   1ec46:	f7ff fb4b 	bl	1e2e0 <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   1ec4a:	07c3      	lsls	r3, r0, #31
   1ec4c:	d503      	bpl.n	1ec56 <bt_mesh_pb_adv_recv+0x3a>
   1ec4e:	682a      	ldr	r2, [r5, #0]
   1ec50:	683b      	ldr	r3, [r7, #0]
   1ec52:	429a      	cmp	r2, r3
   1ec54:	d118      	bne.n	1ec88 <bt_mesh_pb_adv_recv+0x6c>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   1ec56:	797b      	ldrb	r3, [r7, #5]
   1ec58:	4a18      	ldr	r2, [pc, #96]	; (1ecbc <bt_mesh_pb_adv_recv+0xa0>)
   1ec5a:	f003 0303 	and.w	r3, r3, #3
   1ec5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1ec62:	88a0      	ldrh	r0, [r4, #4]
   1ec64:	7949      	ldrb	r1, [r1, #5]
   1ec66:	4288      	cmp	r0, r1
   1ec68:	d211      	bcs.n	1ec8e <bt_mesh_pb_adv_recv+0x72>
		LOG_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   1ec6a:	466c      	mov	r4, sp
   1ec6c:	b088      	sub	sp, #32
   1ec6e:	466a      	mov	r2, sp
   1ec70:	4913      	ldr	r1, [pc, #76]	; (1ecc0 <bt_mesh_pb_adv_recv+0xa4>)
   1ec72:	4814      	ldr	r0, [pc, #80]	; (1ecc4 <bt_mesh_pb_adv_recv+0xa8>)
   1ec74:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ec78:	2303      	movs	r3, #3
   1ec7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec82:	f00f f827 	bl	2dcd4 <z_log_msg_static_create.constprop.0>
   1ec86:	46a5      	mov	sp, r4
}
   1ec88:	3708      	adds	r7, #8
   1ec8a:	46bd      	mov	sp, r7
   1ec8c:	bdb0      	pop	{r4, r5, r7, pc}
   1ec8e:	f7ff fb27 	bl	1e2e0 <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1ec92:	f010 0f01 	tst.w	r0, #1
   1ec96:	797b      	ldrb	r3, [r7, #5]
   1ec98:	d106      	bne.n	1eca8 <bt_mesh_pb_adv_recv+0x8c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   1ec9a:	f003 0103 	and.w	r1, r3, #3
   1ec9e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1eca2:	7909      	ldrb	r1, [r1, #4]
   1eca4:	2900      	cmp	r1, #0
   1eca6:	d1ef      	bne.n	1ec88 <bt_mesh_pb_adv_recv+0x6c>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   1eca8:	f003 0303 	and.w	r3, r3, #3
   1ecac:	4621      	mov	r1, r4
   1ecae:	4638      	mov	r0, r7
   1ecb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1ecb4:	4798      	blx	r3
   1ecb6:	e7e7      	b.n	1ec88 <bt_mesh_pb_adv_recv+0x6c>
   1ecb8:	200084a0 	.word	0x200084a0
   1ecbc:	00030978 	.word	0x00030978
   1ecc0:	000344d7 	.word	0x000344d7
   1ecc4:	0002fcdc 	.word	0x0002fcdc

0001ecc8 <bt_mesh_pb_adv_init>:

void bt_mesh_pb_adv_init(void)
{
   1ecc8:	b510      	push	{r4, lr}
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
   1ecca:	4c06      	ldr	r4, [pc, #24]	; (1ece4 <bt_mesh_pb_adv_init+0x1c>)
   1eccc:	4906      	ldr	r1, [pc, #24]	; (1ece8 <bt_mesh_pb_adv_init+0x20>)
   1ecce:	4620      	mov	r0, r4
   1ecd0:	f007 fbe8 	bl	264a4 <k_work_init_delayable>
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   1ecd4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   1ecd8:	4904      	ldr	r1, [pc, #16]	; (1ecec <bt_mesh_pb_adv_init+0x24>)
}
   1ecda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&link.tx.retransmit, prov_retransmit);
   1ecde:	f007 bbe1 	b.w	264a4 <k_work_init_delayable>
   1ece2:	bf00      	nop
   1ece4:	20008508 	.word	0x20008508
   1ece8:	0001e5b9 	.word	0x0001e5b9
   1ecec:	0001e5d9 	.word	0x0001e5d9

0001ecf0 <buf_send_end>:
}
#endif

static void buf_send_end(struct bt_conn *conn, void *user_data)
{
	if (link.comp.cb) {
   1ecf0:	4a03      	ldr	r2, [pc, #12]	; (1ed00 <buf_send_end+0x10>)
   1ecf2:	68d3      	ldr	r3, [r2, #12]
   1ecf4:	b113      	cbz	r3, 1ecfc <buf_send_end+0xc>
		link.comp.cb(0, link.comp.cb_data);
   1ecf6:	2000      	movs	r0, #0
   1ecf8:	6911      	ldr	r1, [r2, #16]
   1ecfa:	4718      	bx	r3
	}
}
   1ecfc:	4770      	bx	lr
   1ecfe:	bf00      	nop
   1ed00:	2000a2c8 	.word	0x2000a2c8

0001ed04 <reset_state>:
{
   1ed04:	b510      	push	{r4, lr}
	if (link.conn) {
   1ed06:	4c06      	ldr	r4, [pc, #24]	; (1ed20 <reset_state+0x1c>)
   1ed08:	6820      	ldr	r0, [r4, #0]
   1ed0a:	b118      	cbz	r0, 1ed14 <reset_state+0x10>
		bt_conn_unref(link.conn);
   1ed0c:	f7f2 fa16 	bl	1113c <bt_conn_unref>
		link.conn = NULL;
   1ed10:	2300      	movs	r3, #0
   1ed12:	6023      	str	r3, [r4, #0]
	(void)k_work_cancel_delayable(&link.prot_timer);
   1ed14:	4803      	ldr	r0, [pc, #12]	; (1ed24 <reset_state+0x20>)
}
   1ed16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_work_cancel_delayable(&link.prot_timer);
   1ed1a:	f007 bcb3 	b.w	26684 <k_work_cancel_delayable>
   1ed1e:	bf00      	nop
   1ed20:	2000a2c8 	.word	0x2000a2c8
   1ed24:	2000a2e0 	.word	0x2000a2e0

0001ed28 <link_closed>:
{
   1ed28:	b570      	push	{r4, r5, r6, lr}
   1ed2a:	4604      	mov	r4, r0
	const struct prov_bearer_cb *cb = link.cb;
   1ed2c:	4b05      	ldr	r3, [pc, #20]	; (1ed44 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   1ed2e:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
	reset_state();
   1ed32:	f7ff ffe7 	bl	1ed04 <reset_state>
	cb->link_closed(&bt_mesh_pb_gatt, cb_data, status);
   1ed36:	4622      	mov	r2, r4
   1ed38:	4629      	mov	r1, r5
   1ed3a:	6873      	ldr	r3, [r6, #4]
   1ed3c:	4802      	ldr	r0, [pc, #8]	; (1ed48 <link_closed+0x20>)
}
   1ed3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&bt_mesh_pb_gatt, cb_data, status);
   1ed42:	4718      	bx	r3
   1ed44:	2000a2c8 	.word	0x2000a2c8
   1ed48:	00030998 	.word	0x00030998

0001ed4c <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   1ed4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.conn) {
   1ed4e:	4c0d      	ldr	r4, [pc, #52]	; (1ed84 <buf_send+0x38>)
{
   1ed50:	4605      	mov	r5, r0
	if (!link.conn) {
   1ed52:	6823      	ldr	r3, [r4, #0]
   1ed54:	b193      	cbz	r3, 1ed7c <buf_send+0x30>
		return -ENOTCONN;
	}

	link.comp.cb = cb;
	link.comp.cb_data = cb_data;
   1ed56:	e9c4 1203 	strd	r1, r2, [r4, #12]

	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1ed5a:	2300      	movs	r3, #0
   1ed5c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1ed60:	f104 0018 	add.w	r0, r4, #24
   1ed64:	f007 fc88 	bl	26678 <k_work_reschedule>

	return bt_mesh_proxy_msg_send(link.conn, BT_MESH_PROXY_PROV,
   1ed68:	2300      	movs	r3, #0
   1ed6a:	9300      	str	r3, [sp, #0]
   1ed6c:	462a      	mov	r2, r5
   1ed6e:	2103      	movs	r1, #3
   1ed70:	4b05      	ldr	r3, [pc, #20]	; (1ed88 <buf_send+0x3c>)
   1ed72:	6820      	ldr	r0, [r4, #0]
   1ed74:	f000 feaa 	bl	1facc <bt_mesh_proxy_msg_send>
				      buf, buf_send_end, NULL);
}
   1ed78:	b003      	add	sp, #12
   1ed7a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1ed7c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ed80:	e7fa      	b.n	1ed78 <buf_send+0x2c>
   1ed82:	bf00      	nop
   1ed84:	2000a2c8 	.word	0x2000a2c8
   1ed88:	0001ecf1 	.word	0x0001ecf1

0001ed8c <link_accept>:
{
   1ed8c:	b570      	push	{r4, r5, r6, lr}
   1ed8e:	b086      	sub	sp, #24
   1ed90:	4606      	mov	r6, r0
   1ed92:	460d      	mov	r5, r1
	err = bt_mesh_adv_enable();
   1ed94:	f7fc ff24 	bl	1bbe0 <bt_mesh_adv_enable>
	if (err) {
   1ed98:	4604      	mov	r4, r0
   1ed9a:	b168      	cbz	r0, 1edb8 <link_accept+0x2c>
		LOG_ERR("Failed enabling advertiser");
   1ed9c:	4b0a      	ldr	r3, [pc, #40]	; (1edc8 <link_accept+0x3c>)
   1ed9e:	9305      	str	r3, [sp, #20]
   1eda0:	2302      	movs	r3, #2
   1eda2:	9304      	str	r3, [sp, #16]
   1eda4:	2300      	movs	r3, #0
   1eda6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1edaa:	4808      	ldr	r0, [pc, #32]	; (1edcc <link_accept+0x40>)
   1edac:	aa04      	add	r2, sp, #16
   1edae:	f7eb fed5 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   1edb2:	4620      	mov	r0, r4
   1edb4:	b006      	add	sp, #24
   1edb6:	bd70      	pop	{r4, r5, r6, pc}
	(void)bt_mesh_pb_gatt_srv_enable();
   1edb8:	f000 f8f6 	bl	1efa8 <bt_mesh_pb_gatt_srv_enable>
	bt_mesh_adv_gatt_update();
   1edbc:	f7fc fede 	bl	1bb7c <bt_mesh_adv_gatt_update>
	link.cb = cb;
   1edc0:	4b03      	ldr	r3, [pc, #12]	; (1edd0 <link_accept+0x44>)
	link.cb_data = cb_data;
   1edc2:	e9c3 6501 	strd	r6, r5, [r3, #4]
	return 0;
   1edc6:	e7f4      	b.n	1edb2 <link_accept+0x26>
   1edc8:	000326e4 	.word	0x000326e4
   1edcc:	0002fce4 	.word	0x0002fce4
   1edd0:	2000a2c8 	.word	0x2000a2c8

0001edd4 <protocol_timeout>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1edd4:	4b04      	ldr	r3, [pc, #16]	; (1ede8 <protocol_timeout+0x14>)
   1edd6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_mesh_prov_link.flags, LINK_ACTIVE)) {
   1edda:	079b      	lsls	r3, r3, #30
   1eddc:	d502      	bpl.n	1ede4 <protocol_timeout+0x10>
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1edde:	2001      	movs	r0, #1
   1ede0:	f7ff bfa2 	b.w	1ed28 <link_closed>
}
   1ede4:	4770      	bx	lr
   1ede6:	bf00      	nop
   1ede8:	2000ad30 	.word	0x2000ad30

0001edec <bt_mesh_pb_gatt_recv>:
{
   1edec:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   1edee:	4c0f      	ldr	r4, [pc, #60]	; (1ee2c <bt_mesh_pb_gatt_recv+0x40>)
{
   1edf0:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   1edf2:	6823      	ldr	r3, [r4, #0]
   1edf4:	4283      	cmp	r3, r0
   1edf6:	d112      	bne.n	1ee1e <bt_mesh_pb_gatt_recv+0x32>
   1edf8:	6863      	ldr	r3, [r4, #4]
   1edfa:	b183      	cbz	r3, 1ee1e <bt_mesh_pb_gatt_recv+0x32>
	if (buf->len < 1) {
   1edfc:	888b      	ldrh	r3, [r1, #4]
   1edfe:	b18b      	cbz	r3, 1ee24 <bt_mesh_pb_gatt_recv+0x38>
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1ee00:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1ee04:	2300      	movs	r3, #0
   1ee06:	f104 0018 	add.w	r0, r4, #24
   1ee0a:	f007 fc35 	bl	26678 <k_work_reschedule>
	link.cb->recv(&bt_mesh_pb_gatt, link.cb_data, buf);
   1ee0e:	6863      	ldr	r3, [r4, #4]
   1ee10:	4807      	ldr	r0, [pc, #28]	; (1ee30 <bt_mesh_pb_gatt_recv+0x44>)
   1ee12:	462a      	mov	r2, r5
   1ee14:	68db      	ldr	r3, [r3, #12]
   1ee16:	68a1      	ldr	r1, [r4, #8]
   1ee18:	4798      	blx	r3
	return 0;
   1ee1a:	2000      	movs	r0, #0
}
   1ee1c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
   1ee1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ee22:	e7fb      	b.n	1ee1c <bt_mesh_pb_gatt_recv+0x30>
		return -EINVAL;
   1ee24:	f06f 0015 	mvn.w	r0, #21
   1ee28:	e7f8      	b.n	1ee1c <bt_mesh_pb_gatt_recv+0x30>
   1ee2a:	bf00      	nop
   1ee2c:	2000a2c8 	.word	0x2000a2c8
   1ee30:	00030998 	.word	0x00030998

0001ee34 <bt_mesh_pb_gatt_start>:
{
   1ee34:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   1ee36:	4d0c      	ldr	r5, [pc, #48]	; (1ee68 <bt_mesh_pb_gatt_start+0x34>)
   1ee38:	682c      	ldr	r4, [r5, #0]
   1ee3a:	b98c      	cbnz	r4, 1ee60 <bt_mesh_pb_gatt_start+0x2c>
	link.conn = bt_conn_ref(conn);
   1ee3c:	f7f2 f95a 	bl	110f4 <bt_conn_ref>
   1ee40:	4603      	mov	r3, r0
   1ee42:	4628      	mov	r0, r5
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1ee44:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	link.conn = bt_conn_ref(conn);
   1ee48:	f840 3b18 	str.w	r3, [r0], #24
	k_work_reschedule(&link.prot_timer, PROTOCOL_TIMEOUT);
   1ee4c:	2300      	movs	r3, #0
   1ee4e:	f007 fc13 	bl	26678 <k_work_reschedule>
	link.cb->link_opened(&bt_mesh_pb_gatt, link.cb_data);
   1ee52:	686b      	ldr	r3, [r5, #4]
   1ee54:	4805      	ldr	r0, [pc, #20]	; (1ee6c <bt_mesh_pb_gatt_start+0x38>)
   1ee56:	681b      	ldr	r3, [r3, #0]
   1ee58:	68a9      	ldr	r1, [r5, #8]
   1ee5a:	4798      	blx	r3
	return 0;
   1ee5c:	4620      	mov	r0, r4
}
   1ee5e:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   1ee60:	f06f 000f 	mvn.w	r0, #15
   1ee64:	e7fb      	b.n	1ee5e <bt_mesh_pb_gatt_start+0x2a>
   1ee66:	bf00      	nop
   1ee68:	2000a2c8 	.word	0x2000a2c8
   1ee6c:	00030998 	.word	0x00030998

0001ee70 <bt_mesh_pb_gatt_close>:
{
   1ee70:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   1ee72:	4b06      	ldr	r3, [pc, #24]	; (1ee8c <bt_mesh_pb_gatt_close+0x1c>)
   1ee74:	681b      	ldr	r3, [r3, #0]
   1ee76:	4283      	cmp	r3, r0
   1ee78:	d104      	bne.n	1ee84 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   1ee7a:	2000      	movs	r0, #0
   1ee7c:	f7ff ff54 	bl	1ed28 <link_closed>
	return 0;
   1ee80:	2000      	movs	r0, #0
}
   1ee82:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   1ee84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ee88:	e7fb      	b.n	1ee82 <bt_mesh_pb_gatt_close+0x12>
   1ee8a:	bf00      	nop
   1ee8c:	2000a2c8 	.word	0x2000a2c8

0001ee90 <bt_mesh_pb_gatt_init>:
	/* No action */
}

void bt_mesh_pb_gatt_init(void)
{
	k_work_init_delayable(&link.prot_timer, protocol_timeout);
   1ee90:	4901      	ldr	r1, [pc, #4]	; (1ee98 <bt_mesh_pb_gatt_init+0x8>)
   1ee92:	4802      	ldr	r0, [pc, #8]	; (1ee9c <bt_mesh_pb_gatt_init+0xc>)
   1ee94:	f007 bb06 	b.w	264a4 <k_work_init_delayable>
   1ee98:	0001edd5 	.word	0x0001edd5
   1ee9c:	2000a2e0 	.word	0x2000a2e0

0001eea0 <gatt_send>:
}

static int gatt_send(struct bt_conn *conn,
		     const void *data, uint16_t len,
		     bt_gatt_complete_func_t end, void *user_data)
{
   1eea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eea2:	460f      	mov	r7, r1
   1eea4:	4604      	mov	r4, r0
   1eea6:	461d      	mov	r5, r3
   1eea8:	4616      	mov	r6, r2
   1eeaa:	b087      	sub	sp, #28
	LOG_DBG("%u bytes: %s", len, bt_hex(data, len));

	struct bt_gatt_notify_params params = {
   1eeac:	2210      	movs	r2, #16
   1eeae:	2100      	movs	r1, #0
   1eeb0:	4668      	mov	r0, sp
   1eeb2:	f00b fb3d 	bl	2a530 <memset>
   1eeb6:	4b07      	ldr	r3, [pc, #28]	; (1eed4 <gatt_send+0x34>)
		.attr = &prov_attrs[3],
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
   1eeb8:	4669      	mov	r1, sp
	struct bt_gatt_notify_params params = {
   1eeba:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1eebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return bt_gatt_notify_cb(conn, &params);
   1eec0:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
   1eec2:	f8ad 600c 	strh.w	r6, [sp, #12]
   1eec6:	9504      	str	r5, [sp, #16]
   1eec8:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   1eeca:	f7f5 f93d 	bl	14148 <bt_gatt_notify_cb>
}
   1eece:	b007      	add	sp, #28
   1eed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eed2:	bf00      	nop
   1eed4:	20008918 	.word	0x20008918

0001eed8 <gatt_connected>:
{
   1eed8:	b530      	push	{r4, r5, lr}
   1eeda:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   1eedc:	4669      	mov	r1, sp
{
   1eede:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
   1eee0:	f7f2 fb4a 	bl	11578 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL || !service_registered ||
   1eee4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1eee8:	2b01      	cmp	r3, #1
   1eeea:	d111      	bne.n	1ef10 <gatt_connected+0x38>
   1eeec:	4b09      	ldr	r3, [pc, #36]	; (1ef14 <gatt_connected+0x3c>)
   1eeee:	781b      	ldrb	r3, [r3, #0]
   1eef0:	b173      	cbz	r3, 1ef10 <gatt_connected+0x38>
	    bt_mesh_is_provisioned() || info.id != BT_ID_DEFAULT || cli)  {
   1eef2:	f7f5 fc5f 	bl	147b4 <bt_mesh_is_provisioned>
	if (info.role != BT_CONN_ROLE_PERIPHERAL || !service_registered ||
   1eef6:	b958      	cbnz	r0, 1ef10 <gatt_connected+0x38>
	    bt_mesh_is_provisioned() || info.id != BT_ID_DEFAULT || cli)  {
   1eef8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1eefc:	b943      	cbnz	r3, 1ef10 <gatt_connected+0x38>
   1eefe:	4d06      	ldr	r5, [pc, #24]	; (1ef18 <gatt_connected+0x40>)
   1ef00:	682b      	ldr	r3, [r5, #0]
   1ef02:	b92b      	cbnz	r3, 1ef10 <gatt_connected+0x38>
	cli = bt_mesh_proxy_role_setup(conn, gatt_send, proxy_msg_recv);
   1ef04:	4620      	mov	r0, r4
   1ef06:	4a05      	ldr	r2, [pc, #20]	; (1ef1c <gatt_connected+0x44>)
   1ef08:	4905      	ldr	r1, [pc, #20]	; (1ef20 <gatt_connected+0x48>)
   1ef0a:	f000 fe99 	bl	1fc40 <bt_mesh_proxy_role_setup>
   1ef0e:	6028      	str	r0, [r5, #0]
}
   1ef10:	b009      	add	sp, #36	; 0x24
   1ef12:	bd30      	pop	{r4, r5, pc}
   1ef14:	2000b333 	.word	0x2000b333
   1ef18:	2000ae54 	.word	0x2000ae54
   1ef1c:	0002dd23 	.word	0x0002dd23
   1ef20:	0001eea1 	.word	0x0001eea1

0001ef24 <gatt_recv.part.0>:
static ssize_t prov_ccc_write(struct bt_conn *conn,
   1ef24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("No PB-GATT Client found");
   1ef26:	4b08      	ldr	r3, [pc, #32]	; (1ef48 <gatt_recv.part.0+0x24>)
   1ef28:	9305      	str	r3, [sp, #20]
   1ef2a:	2302      	movs	r3, #2
   1ef2c:	9304      	str	r3, [sp, #16]
   1ef2e:	2300      	movs	r3, #0
   1ef30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ef34:	4805      	ldr	r0, [pc, #20]	; (1ef4c <gatt_recv.part.0+0x28>)
   1ef36:	aa04      	add	r2, sp, #16
   1ef38:	f7eb fe10 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   1ef3c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ef40:	b007      	add	sp, #28
   1ef42:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef46:	bf00      	nop
   1ef48:	00034514 	.word	0x00034514
   1ef4c:	0002fcec 	.word	0x0002fcec

0001ef50 <gatt_recv>:
{
   1ef50:	4611      	mov	r1, r2
   1ef52:	461a      	mov	r2, r3
	if (cli->conn != conn) {
   1ef54:	4b08      	ldr	r3, [pc, #32]	; (1ef78 <gatt_recv+0x28>)
   1ef56:	681b      	ldr	r3, [r3, #0]
   1ef58:	681b      	ldr	r3, [r3, #0]
   1ef5a:	4283      	cmp	r3, r0
   1ef5c:	d001      	beq.n	1ef62 <gatt_recv+0x12>
   1ef5e:	f7ff bfe1 	b.w	1ef24 <gatt_recv.part.0>
	if (len < 1) {
   1ef62:	b132      	cbz	r2, 1ef72 <gatt_recv+0x22>
	if (PDU_TYPE(data) != BT_MESH_PROXY_PROV) {
   1ef64:	780b      	ldrb	r3, [r1, #0]
   1ef66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ef6a:	2b03      	cmp	r3, #3
   1ef6c:	d101      	bne.n	1ef72 <gatt_recv+0x22>
	return bt_mesh_proxy_msg_recv(conn, buf, len);
   1ef6e:	f000 bd2d 	b.w	1f9cc <bt_mesh_proxy_msg_recv>
}
   1ef72:	f06f 0015 	mvn.w	r0, #21
   1ef76:	4770      	bx	lr
   1ef78:	2000ae54 	.word	0x2000ae54

0001ef7c <prov_ccc_write>:
{
   1ef7c:	b508      	push	{r3, lr}
	if (cli->conn != conn) {
   1ef7e:	4b09      	ldr	r3, [pc, #36]	; (1efa4 <prov_ccc_write+0x28>)
   1ef80:	681b      	ldr	r3, [r3, #0]
   1ef82:	681b      	ldr	r3, [r3, #0]
   1ef84:	4283      	cmp	r3, r0
   1ef86:	d003      	beq.n	1ef90 <prov_ccc_write+0x14>
}
   1ef88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ef8c:	f7ff bfca 	b.w	1ef24 <gatt_recv.part.0>
	if (value != BT_GATT_CCC_NOTIFY) {
   1ef90:	2a01      	cmp	r2, #1
   1ef92:	d103      	bne.n	1ef9c <prov_ccc_write+0x20>
	bt_mesh_pb_gatt_start(conn);
   1ef94:	f7ff ff4e 	bl	1ee34 <bt_mesh_pb_gatt_start>
	return sizeof(value);
   1ef98:	2002      	movs	r0, #2
}
   1ef9a:	bd08      	pop	{r3, pc}
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1ef9c:	f06f 0012 	mvn.w	r0, #18
   1efa0:	e7fb      	b.n	1ef9a <prov_ccc_write+0x1e>
   1efa2:	bf00      	nop
   1efa4:	2000ae54 	.word	0x2000ae54

0001efa8 <bt_mesh_pb_gatt_srv_enable>:
{
   1efa8:	b570      	push	{r4, r5, r6, lr}
	if (bt_mesh_is_provisioned()) {
   1efaa:	f7f5 fc03 	bl	147b4 <bt_mesh_is_provisioned>
   1efae:	b9c0      	cbnz	r0, 1efe2 <bt_mesh_pb_gatt_srv_enable+0x3a>
	if (service_registered) {
   1efb0:	4d0f      	ldr	r5, [pc, #60]	; (1eff0 <bt_mesh_pb_gatt_srv_enable+0x48>)
   1efb2:	782c      	ldrb	r4, [r5, #0]
   1efb4:	b9c4      	cbnz	r4, 1efe8 <bt_mesh_pb_gatt_srv_enable+0x40>
	(void)bt_gatt_service_register(&prov_svc);
   1efb6:	480f      	ldr	r0, [pc, #60]	; (1eff4 <bt_mesh_pb_gatt_srv_enable+0x4c>)
   1efb8:	f7f4 fcdc 	bl	13974 <bt_gatt_service_register>
	service_registered = true;
   1efbc:	2301      	movs	r3, #1
   1efbe:	702b      	strb	r3, [r5, #0]
   1efc0:	f010 fad1 	bl	2f566 <z_impl_k_uptime_ticks>
   1efc4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1efc8:	fba0 3205 	umull	r3, r2, r0, r5
	return 0;
   1efcc:	4620      	mov	r0, r4
   1efce:	fb05 2101 	mla	r1, r5, r1, r2
	fast_adv_timestamp = k_uptime_get();
   1efd2:	4e09      	ldr	r6, [pc, #36]	; (1eff8 <bt_mesh_pb_gatt_srv_enable+0x50>)
   1efd4:	0bdb      	lsrs	r3, r3, #15
   1efd6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1efda:	0bc9      	lsrs	r1, r1, #15
   1efdc:	e9c6 3100 	strd	r3, r1, [r6]
}
   1efe0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1efe2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1efe6:	e7fb      	b.n	1efe0 <bt_mesh_pb_gatt_srv_enable+0x38>
		return -EBUSY;
   1efe8:	f06f 000f 	mvn.w	r0, #15
   1efec:	e7f8      	b.n	1efe0 <bt_mesh_pb_gatt_srv_enable+0x38>
   1efee:	bf00      	nop
   1eff0:	2000b333 	.word	0x2000b333
   1eff4:	200088d0 	.word	0x200088d0
   1eff8:	2000a310 	.word	0x2000a310

0001effc <bt_mesh_pb_gatt_srv_disable>:
{
   1effc:	b538      	push	{r3, r4, r5, lr}
	if (!service_registered) {
   1effe:	4d07      	ldr	r5, [pc, #28]	; (1f01c <bt_mesh_pb_gatt_srv_disable+0x20>)
   1f000:	782b      	ldrb	r3, [r5, #0]
   1f002:	b143      	cbz	r3, 1f016 <bt_mesh_pb_gatt_srv_disable+0x1a>
	service_registered = false;
   1f004:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   1f006:	4806      	ldr	r0, [pc, #24]	; (1f020 <bt_mesh_pb_gatt_srv_disable+0x24>)
   1f008:	f7f5 fa3e 	bl	14488 <bt_gatt_service_unregister>
	service_registered = false;
   1f00c:	702c      	strb	r4, [r5, #0]
	bt_mesh_adv_gatt_update();
   1f00e:	f7fc fdb5 	bl	1bb7c <bt_mesh_adv_gatt_update>
	return 0;
   1f012:	4620      	mov	r0, r4
}
   1f014:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1f016:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f01a:	e7fb      	b.n	1f014 <bt_mesh_pb_gatt_srv_disable+0x18>
   1f01c:	2000b333 	.word	0x2000b333
   1f020:	200088d0 	.word	0x200088d0

0001f024 <gatt_disconnected>:
{
   1f024:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f026:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   1f028:	4669      	mov	r1, sp
{
   1f02a:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
   1f02c:	f7f2 faa4 	bl	11578 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL || !service_registered ||
   1f030:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1f034:	2b01      	cmp	r3, #1
   1f036:	d116      	bne.n	1f066 <gatt_disconnected+0x42>
   1f038:	4b0c      	ldr	r3, [pc, #48]	; (1f06c <gatt_disconnected+0x48>)
   1f03a:	781b      	ldrb	r3, [r3, #0]
   1f03c:	b19b      	cbz	r3, 1f066 <gatt_disconnected+0x42>
   1f03e:	f89d 7002 	ldrb.w	r7, [sp, #2]
   1f042:	b987      	cbnz	r7, 1f066 <gatt_disconnected+0x42>
	    info.id != BT_ID_DEFAULT || !cli || cli->conn != conn) {
   1f044:	4e0a      	ldr	r6, [pc, #40]	; (1f070 <gatt_disconnected+0x4c>)
   1f046:	6830      	ldr	r0, [r6, #0]
   1f048:	b168      	cbz	r0, 1f066 <gatt_disconnected+0x42>
   1f04a:	6805      	ldr	r5, [r0, #0]
   1f04c:	42a5      	cmp	r5, r4
   1f04e:	d10a      	bne.n	1f066 <gatt_disconnected+0x42>
	bt_mesh_proxy_role_cleanup(cli);
   1f050:	f000 fe44 	bl	1fcdc <bt_mesh_proxy_role_cleanup>
	bt_mesh_pb_gatt_close(conn);
   1f054:	4628      	mov	r0, r5
	cli = NULL;
   1f056:	6037      	str	r7, [r6, #0]
	bt_mesh_pb_gatt_close(conn);
   1f058:	f7ff ff0a 	bl	1ee70 <bt_mesh_pb_gatt_close>
	if (bt_mesh_is_provisioned()) {
   1f05c:	f7f5 fbaa 	bl	147b4 <bt_mesh_is_provisioned>
   1f060:	b108      	cbz	r0, 1f066 <gatt_disconnected+0x42>
		(void)bt_mesh_pb_gatt_srv_disable();
   1f062:	f7ff ffcb 	bl	1effc <bt_mesh_pb_gatt_srv_disable>
}
   1f066:	b009      	add	sp, #36	; 0x24
   1f068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f06a:	bf00      	nop
   1f06c:	2000b333 	.word	0x2000b333
   1f070:	2000ae54 	.word	0x2000ae54

0001f074 <bt_mesh_pb_gatt_srv_adv_start>:

int bt_mesh_pb_gatt_srv_adv_start(void)
{
   1f074:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	if (!service_registered || bt_mesh_is_provisioned() ||
   1f076:	4b3a      	ldr	r3, [pc, #232]	; (1f160 <bt_mesh_pb_gatt_srv_adv_start+0xec>)
{
   1f078:	b08e      	sub	sp, #56	; 0x38
	if (!service_registered || bt_mesh_is_provisioned() ||
   1f07a:	781b      	ldrb	r3, [r3, #0]
   1f07c:	b91b      	cbnz	r3, 1f086 <bt_mesh_pb_gatt_srv_adv_start+0x12>
	    !bt_mesh_proxy_has_avail_conn()) {
		return -ENOTSUP;
   1f07e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	/* Advertise 60 seconds using fast interval */
	return bt_mesh_adv_gatt_start(&fast_adv_param, (FAST_ADV_TIME - elapsed_time),
				      prov_ad, ARRAY_SIZE(prov_ad),
				      prov_sd, prov_sd_len);

}
   1f082:	b00e      	add	sp, #56	; 0x38
   1f084:	bd70      	pop	{r4, r5, r6, pc}
	if (!service_registered || bt_mesh_is_provisioned() ||
   1f086:	f7f5 fb95 	bl	147b4 <bt_mesh_is_provisioned>
   1f08a:	4604      	mov	r4, r0
   1f08c:	2800      	cmp	r0, #0
   1f08e:	d1f6      	bne.n	1f07e <bt_mesh_pb_gatt_srv_adv_start+0xa>
	    !bt_mesh_proxy_has_avail_conn()) {
   1f090:	f000 fe38 	bl	1fd04 <bt_mesh_proxy_has_avail_conn>
	if (!service_registered || bt_mesh_is_provisioned() ||
   1f094:	2800      	cmp	r0, #0
   1f096:	d0f2      	beq.n	1f07e <bt_mesh_pb_gatt_srv_adv_start+0xa>
	struct bt_le_adv_param fast_adv_param = {
   1f098:	4621      	mov	r1, r4
   1f09a:	2214      	movs	r2, #20
   1f09c:	a804      	add	r0, sp, #16
   1f09e:	f00b fa47 	bl	2a530 <memset>
   1f0a2:	f240 210b 	movw	r1, #523	; 0x20b
   1f0a6:	23a0      	movs	r3, #160	; 0xa0
   1f0a8:	e9cd 1305 	strd	r1, r3, [sp, #20]
   1f0ac:	23f0      	movs	r3, #240	; 0xf0
   1f0ae:	9307      	str	r3, [sp, #28]
	int64_t timestamp = fast_adv_timestamp;
   1f0b0:	4b2c      	ldr	r3, [pc, #176]	; (1f164 <bt_mesh_pb_gatt_srv_adv_start+0xf0>)
   1f0b2:	e9d3 4600 	ldrd	r4, r6, [r3]
   1f0b6:	f010 fa56 	bl	2f566 <z_impl_k_uptime_ticks>
   1f0ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f0be:	fba0 0302 	umull	r0, r3, r0, r2
   1f0c2:	fb02 3101 	mla	r1, r2, r1, r3
   1f0c6:	0bc3      	lsrs	r3, r0, #15
   1f0c8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	delta = uptime - *reftime;
   1f0cc:	1b1c      	subs	r4, r3, r4
   1f0ce:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   1f0d2:	eb61 0606 	sbc.w	r6, r1, r6
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   1f0d6:	f7fe fb73 	bl	1d7c0 <bt_mesh_prov_get>
   1f0da:	4605      	mov	r5, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   1f0dc:	6801      	ldr	r1, [r0, #0]
   1f0de:	2210      	movs	r2, #16
   1f0e0:	4821      	ldr	r0, [pc, #132]	; (1f168 <bt_mesh_pb_gatt_srv_adv_start+0xf4>)
   1f0e2:	f00b fa1a 	bl	2a51a <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   1f0e6:	892a      	ldrh	r2, [r5, #8]
	dst[0] = val >> 8;
   1f0e8:	4b20      	ldr	r3, [pc, #128]	; (1f16c <bt_mesh_pb_gatt_srv_adv_start+0xf8>)
   1f0ea:	0a11      	lsrs	r1, r2, #8
   1f0ec:	7499      	strb	r1, [r3, #18]
	dst[1] = val;
   1f0ee:	74da      	strb	r2, [r3, #19]
	if (!prov->uri) {
   1f0f0:	6868      	ldr	r0, [r5, #4]
   1f0f2:	b9f8      	cbnz	r0, 1f134 <bt_mesh_pb_gatt_srv_adv_start+0xc0>
		return 0;
   1f0f4:	2500      	movs	r5, #0
	if (elapsed_time > FAST_ADV_TIME) {
   1f0f6:	f64e 2361 	movw	r3, #60001	; 0xea61
   1f0fa:	429c      	cmp	r4, r3
   1f0fc:	f176 0600 	sbcs.w	r6, r6, #0
   1f100:	ae02      	add	r6, sp, #8
   1f102:	db24      	blt.n	1f14e <bt_mesh_pb_gatt_srv_adv_start+0xda>
		struct bt_le_adv_param slow_adv_param = {
   1f104:	2214      	movs	r2, #20
   1f106:	2100      	movs	r1, #0
   1f108:	a809      	add	r0, sp, #36	; 0x24
   1f10a:	f00b fa11 	bl	2a530 <memset>
   1f10e:	f240 220b 	movw	r2, #523	; 0x20b
   1f112:	f44f 63c8 	mov.w	r3, #1600	; 0x640
   1f116:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1f11a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
		return bt_mesh_adv_gatt_start(&slow_adv_param, SYS_FOREVER_MS, prov_ad,
   1f11e:	f04f 31ff 	mov.w	r1, #4294967295
		struct bt_le_adv_param slow_adv_param = {
   1f122:	930c      	str	r3, [sp, #48]	; 0x30
		return bt_mesh_adv_gatt_start(&slow_adv_param, SYS_FOREVER_MS, prov_ad,
   1f124:	2303      	movs	r3, #3
   1f126:	e9cd 6500 	strd	r6, r5, [sp]
   1f12a:	4a11      	ldr	r2, [pc, #68]	; (1f170 <bt_mesh_pb_gatt_srv_adv_start+0xfc>)
   1f12c:	a809      	add	r0, sp, #36	; 0x24
	return bt_mesh_adv_gatt_start(&fast_adv_param, (FAST_ADV_TIME - elapsed_time),
   1f12e:	f7fc fd85 	bl	1bc3c <bt_mesh_adv_gatt_start>
   1f132:	e7a6      	b.n	1f082 <bt_mesh_pb_gatt_srv_adv_start+0xe>
	uri_len = strlen(prov->uri);
   1f134:	f00b f99b 	bl	2a46e <strlen>
	if (uri_len > 29) {
   1f138:	281d      	cmp	r0, #29
   1f13a:	d8db      	bhi.n	1f0f4 <bt_mesh_pb_gatt_srv_adv_start+0x80>
	prov_sd[0].type = BT_DATA_URI;
   1f13c:	2324      	movs	r3, #36	; 0x24
   1f13e:	f88d 3008 	strb.w	r3, [sp, #8]
	prov_sd[0].data = (const uint8_t *)prov->uri;
   1f142:	686b      	ldr	r3, [r5, #4]
	prov_sd[0].data_len = uri_len;
   1f144:	f88d 0009 	strb.w	r0, [sp, #9]
	return 1;
   1f148:	2501      	movs	r5, #1
	prov_sd[0].data = (const uint8_t *)prov->uri;
   1f14a:	9303      	str	r3, [sp, #12]
	return 1;
   1f14c:	e7d3      	b.n	1f0f6 <bt_mesh_pb_gatt_srv_adv_start+0x82>
	return bt_mesh_adv_gatt_start(&fast_adv_param, (FAST_ADV_TIME - elapsed_time),
   1f14e:	f5c4 416a 	rsb	r1, r4, #59904	; 0xea00
   1f152:	2303      	movs	r3, #3
   1f154:	e9cd 6500 	strd	r6, r5, [sp]
   1f158:	4a05      	ldr	r2, [pc, #20]	; (1f170 <bt_mesh_pb_gatt_srv_adv_start+0xfc>)
   1f15a:	3160      	adds	r1, #96	; 0x60
   1f15c:	a804      	add	r0, sp, #16
   1f15e:	e7e6      	b.n	1f12e <bt_mesh_pb_gatt_srv_adv_start+0xba>
   1f160:	2000b333 	.word	0x2000b333
   1f164:	2000a310 	.word	0x2000a310
   1f168:	20008ca1 	.word	0x20008ca1
   1f16c:	20008c9f 	.word	0x20008c9f
   1f170:	000309b0 	.word	0x000309b0

0001f174 <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
   1f174:	f1a0 0128 	sub.w	r1, r0, #40	; 0x28
   1f178:	4801      	ldr	r0, [pc, #4]	; (1f180 <proxy_send_beacons+0xc>)
   1f17a:	f7f7 ba1f 	b.w	165bc <bt_mesh_subnet_find>
   1f17e:	bf00      	nop
   1f180:	0002dd6f 	.word	0x0002dd6f

0001f184 <proxy_ccc_write>:
{
	struct bt_mesh_proxy_client *client;

	LOG_DBG("value: 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
   1f184:	2a01      	cmp	r2, #1
{
   1f186:	b538      	push	{r3, r4, r5, lr}
   1f188:	4614      	mov	r4, r2
	if (value != BT_GATT_CCC_NOTIFY) {
   1f18a:	d113      	bne.n	1f1b4 <proxy_ccc_write+0x30>
	return &clients[bt_conn_index(conn)];
   1f18c:	f7f2 f8b8 	bl	11300 <bt_conn_index>
		LOG_WRN("Client wrote 0x%04x instead enabling notify", value);
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	client = find_client(conn);
	if (client->filter_type == NONE) {
   1f190:	2338      	movs	r3, #56	; 0x38
   1f192:	4a0a      	ldr	r2, [pc, #40]	; (1f1bc <proxy_ccc_write+0x38>)
   1f194:	fb03 2100 	mla	r1, r3, r0, r2
   1f198:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
   1f19c:	b10d      	cbz	r5, 1f1a2 <proxy_ccc_write+0x1e>
		client->filter_type = ACCEPT;
		k_work_submit(&client->send_beacons);
	}

	return sizeof(value);
   1f19e:	2002      	movs	r0, #2
}
   1f1a0:	bd38      	pop	{r3, r4, r5, pc}
		client->filter_type = ACCEPT;
   1f1a2:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
		k_work_submit(&client->send_beacons);
   1f1a6:	2128      	movs	r1, #40	; 0x28
   1f1a8:	fb13 1000 	smlabb	r0, r3, r0, r1
   1f1ac:	4410      	add	r0, r2
   1f1ae:	f007 f887 	bl	262c0 <k_work_submit>
   1f1b2:	e7f4      	b.n	1f19e <proxy_ccc_write+0x1a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1f1b4:	f06f 0012 	mvn.w	r0, #18
   1f1b8:	e7f2      	b.n	1f1a0 <proxy_ccc_write+0x1c>
   1f1ba:	bf00      	nop
   1f1bc:	20008a28 	.word	0x20008a28

0001f1c0 <proxy_send>:
}

static int proxy_send(struct bt_conn *conn,
		      const void *data, uint16_t len,
		      bt_gatt_complete_func_t end, void *user_data)
{
   1f1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1c2:	460f      	mov	r7, r1
   1f1c4:	4604      	mov	r4, r0
   1f1c6:	461d      	mov	r5, r3
   1f1c8:	4616      	mov	r6, r2
   1f1ca:	b087      	sub	sp, #28
	LOG_DBG("%u bytes: %s", len, bt_hex(data, len));

	struct bt_gatt_notify_params params = {
   1f1cc:	2210      	movs	r2, #16
   1f1ce:	2100      	movs	r1, #0
   1f1d0:	4668      	mov	r0, sp
   1f1d2:	f00b f9ad 	bl	2a530 <memset>
   1f1d6:	4b07      	ldr	r3, [pc, #28]	; (1f1f4 <proxy_send+0x34>)
		.attr = &proxy_attrs[3],
		.user_data = user_data,
		.func = end,
	};

	return bt_gatt_notify_cb(conn, &params);
   1f1d8:	4669      	mov	r1, sp
	struct bt_gatt_notify_params params = {
   1f1da:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1f1de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return bt_gatt_notify_cb(conn, &params);
   1f1e0:	4620      	mov	r0, r4
	struct bt_gatt_notify_params params = {
   1f1e2:	f8ad 600c 	strh.w	r6, [sp, #12]
   1f1e6:	9504      	str	r5, [sp, #16]
   1f1e8:	9305      	str	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   1f1ea:	f7f4 ffad 	bl	14148 <bt_gatt_notify_cb>
}
   1f1ee:	b007      	add	sp, #28
   1f1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1f2:	bf00      	nop
   1f1f4:	200089c4 	.word	0x200089c4

0001f1f8 <bt_mesh_proxy_beacon_send>:
	if (!sub) {
   1f1f8:	4601      	mov	r1, r0
   1f1fa:	b920      	cbnz	r0, 1f206 <bt_mesh_proxy_beacon_send+0xe>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   1f1fc:	4804      	ldr	r0, [pc, #16]	; (1f210 <bt_mesh_proxy_beacon_send+0x18>)
   1f1fe:	f7f7 b9ef 	b.w	165e0 <bt_mesh_subnet_foreach>
			beacon_send(&clients[i], sub);
   1f202:	f00e bd98 	b.w	2dd36 <beacon_send>
		if (clients[i].cli) {
   1f206:	4803      	ldr	r0, [pc, #12]	; (1f214 <bt_mesh_proxy_beacon_send+0x1c>)
   1f208:	6803      	ldr	r3, [r0, #0]
   1f20a:	2b00      	cmp	r3, #0
   1f20c:	d1f9      	bne.n	1f202 <bt_mesh_proxy_beacon_send+0xa>
}
   1f20e:	4770      	bx	lr
   1f210:	0001f1f9 	.word	0x0001f1f9
   1f214:	20008a28 	.word	0x20008a28

0001f218 <subnet_evt>:
	if (evt == BT_MESH_KEY_DELETED) {
   1f218:	2901      	cmp	r1, #1
{
   1f21a:	b508      	push	{r3, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   1f21c:	d106      	bne.n	1f22c <subnet_evt+0x14>
		if (sub == beacon_sub) {
   1f21e:	4a06      	ldr	r2, [pc, #24]	; (1f238 <subnet_evt+0x20>)
   1f220:	6811      	ldr	r1, [r2, #0]
   1f222:	4281      	cmp	r1, r0
   1f224:	d101      	bne.n	1f22a <subnet_evt+0x12>
			beacon_sub = NULL;
   1f226:	2300      	movs	r3, #0
   1f228:	6013      	str	r3, [r2, #0]
}
   1f22a:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_beacon_send(sub);
   1f22c:	f7ff ffe4 	bl	1f1f8 <bt_mesh_proxy_beacon_send>
}
   1f230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_adv_gatt_update();
   1f234:	f7fc bca2 	b.w	1bb7c <bt_mesh_adv_gatt_update>
   1f238:	2000ae58 	.word	0x2000ae58

0001f23c <gatt_connected>:
{
   1f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f23e:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   1f240:	4669      	mov	r1, sp
{
   1f242:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
   1f244:	f7f2 f998 	bl	11578 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL || !service_registered ||
   1f248:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1f24c:	2b01      	cmp	r3, #1
   1f24e:	d122      	bne.n	1f296 <gatt_connected+0x5a>
   1f250:	4b12      	ldr	r3, [pc, #72]	; (1f29c <gatt_connected+0x60>)
   1f252:	781b      	ldrb	r3, [r3, #0]
   1f254:	b1fb      	cbz	r3, 1f296 <gatt_connected+0x5a>
   1f256:	f89d 6002 	ldrb.w	r6, [sp, #2]
   1f25a:	b9e6      	cbnz	r6, 1f296 <gatt_connected+0x5a>
	return &clients[bt_conn_index(conn)];
   1f25c:	4620      	mov	r0, r4
   1f25e:	f7f2 f84f 	bl	11300 <bt_conn_index>
	client->filter_type = NONE;
   1f262:	2338      	movs	r3, #56	; 0x38
   1f264:	fb03 f700 	mul.w	r7, r3, r0
   1f268:	4d0d      	ldr	r5, [pc, #52]	; (1f2a0 <gatt_connected+0x64>)
	(void)memset(client->filter, 0, sizeof(client->filter));
   1f26a:	4631      	mov	r1, r6
	client->filter_type = NONE;
   1f26c:	19ea      	adds	r2, r5, r7
   1f26e:	f882 6024 	strb.w	r6, [r2, #36]	; 0x24
	(void)memset(client->filter, 0, sizeof(client->filter));
   1f272:	2204      	movs	r2, #4
   1f274:	fb13 2000 	smlabb	r0, r3, r0, r2
   1f278:	2220      	movs	r2, #32
   1f27a:	4428      	add	r0, r5
   1f27c:	f00b f958 	bl	2a530 <memset>
	client->cli = bt_mesh_proxy_role_setup(conn, proxy_send,
   1f280:	4620      	mov	r0, r4
   1f282:	4a08      	ldr	r2, [pc, #32]	; (1f2a4 <gatt_connected+0x68>)
   1f284:	4908      	ldr	r1, [pc, #32]	; (1f2a8 <gatt_connected+0x6c>)
   1f286:	f000 fcdb 	bl	1fc40 <bt_mesh_proxy_role_setup>
   1f28a:	51e8      	str	r0, [r5, r7]
	if (bt_mesh_proxy_has_avail_conn()) {
   1f28c:	f000 fd3a 	bl	1fd04 <bt_mesh_proxy_has_avail_conn>
   1f290:	b108      	cbz	r0, 1f296 <gatt_connected+0x5a>
		bt_mesh_adv_gatt_update();
   1f292:	f7fc fc73 	bl	1bb7c <bt_mesh_adv_gatt_update>
}
   1f296:	b009      	add	sp, #36	; 0x24
   1f298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f29a:	bf00      	nop
   1f29c:	2000b334 	.word	0x2000b334
   1f2a0:	20008a28 	.word	0x20008a28
   1f2a4:	0001f3dd 	.word	0x0001f3dd
   1f2a8:	0001f1c1 	.word	0x0001f1c1

0001f2ac <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   1f2ac:	2301      	movs	r3, #1
{
   1f2ae:	b570      	push	{r4, r5, r6, lr}
   1f2b0:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   1f2b2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   1f2b6:	f010 f956 	bl	2f566 <z_impl_k_uptime_ticks>
   1f2ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1f2be:	fba0 3205 	umull	r3, r2, r0, r5
   1f2c2:	fb05 2201 	mla	r2, r5, r1, r2
   1f2c6:	0bdb      	lsrs	r3, r3, #15
   1f2c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1f2cc:	4d0b      	ldr	r5, [pc, #44]	; (1f2fc <node_id_start+0x50>)
   1f2ce:	4e0c      	ldr	r6, [pc, #48]	; (1f300 <node_id_start+0x54>)
	return (uint32_t)k_uptime_get();
   1f2d0:	6263      	str	r3, [r4, #36]	; 0x24
   1f2d2:	42b5      	cmp	r5, r6
   1f2d4:	d910      	bls.n	1f2f8 <node_id_start+0x4c>
   1f2d6:	490b      	ldr	r1, [pc, #44]	; (1f304 <node_id_start+0x58>)
   1f2d8:	480b      	ldr	r0, [pc, #44]	; (1f308 <node_id_start+0x5c>)
   1f2da:	f44f 72b5 	mov.w	r2, #362	; 0x16a
   1f2de:	f009 fc71 	bl	28bc4 <assert_print>
   1f2e2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   1f2e6:	4807      	ldr	r0, [pc, #28]	; (1f304 <node_id_start+0x58>)
   1f2e8:	f009 fc65 	bl	28bb6 <assert_post_action>
		if (cb->identity_enabled) {
   1f2ec:	682b      	ldr	r3, [r5, #0]
   1f2ee:	b10b      	cbz	r3, 1f2f4 <node_id_start+0x48>
			cb->identity_enabled(sub->net_idx);
   1f2f0:	8c20      	ldrh	r0, [r4, #32]
   1f2f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1f2f4:	3508      	adds	r5, #8
   1f2f6:	e7ec      	b.n	1f2d2 <node_id_start+0x26>
   1f2f8:	d3f8      	bcc.n	1f2ec <node_id_start+0x40>
}
   1f2fa:	bd70      	pop	{r4, r5, r6, pc}
   1f2fc:	0002fbec 	.word	0x0002fbec
   1f300:	0002fbec 	.word	0x0002fbec
   1f304:	00034540 	.word	0x00034540
   1f308:	00030da5 	.word	0x00030da5

0001f30c <send_filter_status>:
{
   1f30c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f30e:	b087      	sub	sp, #28
	struct bt_mesh_net_tx tx = {
   1f310:	2500      	movs	r5, #0
{
   1f312:	af02      	add	r7, sp, #8
	struct bt_mesh_net_tx tx = {
   1f314:	f851 3b04 	ldr.w	r3, [r1], #4
   1f318:	60fd      	str	r5, [r7, #12]
{
   1f31a:	4614      	mov	r4, r2
   1f31c:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
   1f31e:	e9c7 3101 	strd	r3, r1, [r7, #4]
		.src = bt_mesh_primary_addr(),
   1f322:	f7f9 fff7 	bl	19314 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1f326:	68bb      	ldr	r3, [r7, #8]
	struct bt_mesh_net_tx tx = {
   1f328:	81b8      	strh	r0, [r7, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1f32a:	809d      	strh	r5, [r3, #4]
   1f32c:	68a3      	ldr	r3, [r4, #8]
	net_buf_simple_reserve(buf, 10);
   1f32e:	210a      	movs	r1, #10
   1f330:	6023      	str	r3, [r4, #0]
   1f332:	4620      	mov	r0, r4
	buf->len  = 0U;
   1f334:	80a5      	strh	r5, [r4, #4]
   1f336:	f000 fdf9 	bl	1ff2c <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   1f33a:	2103      	movs	r1, #3
   1f33c:	4620      	mov	r0, r4
   1f33e:	f00e fdd8 	bl	2def2 <net_buf_simple_add_u8>
	if (client->filter_type == ACCEPT) {
   1f342:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
		net_buf_simple_add_u8(buf, 0x01);
   1f346:	4620      	mov	r0, r4
	if (client->filter_type == ACCEPT) {
   1f348:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   1f34a:	bf0c      	ite	eq
   1f34c:	4629      	moveq	r1, r5
		net_buf_simple_add_u8(buf, 0x01);
   1f34e:	2101      	movne	r1, #1
   1f350:	f00e fdcf 	bl	2def2 <net_buf_simple_add_u8>
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f354:	2100      	movs	r1, #0
   1f356:	1cb3      	adds	r3, r6, #2
   1f358:	f106 0222 	add.w	r2, r6, #34	; 0x22
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   1f35c:	f833 0f02 	ldrh.w	r0, [r3, #2]!
   1f360:	b108      	cbz	r0, 1f366 <send_filter_status+0x5a>
			filter_size++;
   1f362:	3101      	adds	r1, #1
   1f364:	b289      	uxth	r1, r1
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f366:	4293      	cmp	r3, r2
   1f368:	d1f8      	bne.n	1f35c <send_filter_status+0x50>
	net_buf_simple_add_be16(buf, filter_size);
   1f36a:	4620      	mov	r0, r4
   1f36c:	f00e fdd1 	bl	2df12 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   1f370:	2201      	movs	r2, #1
   1f372:	4621      	mov	r1, r4
   1f374:	1d38      	adds	r0, r7, #4
   1f376:	f7f6 fb4d 	bl	15a14 <bt_mesh_net_encode>
	if (err) {
   1f37a:	4605      	mov	r5, r0
   1f37c:	b190      	cbz	r0, 1f3a4 <send_filter_status+0x98>
		LOG_ERR("Encoding Proxy cfg message failed (err %d)", err);
   1f37e:	466c      	mov	r4, sp
   1f380:	b088      	sub	sp, #32
   1f382:	aa02      	add	r2, sp, #8
   1f384:	4b12      	ldr	r3, [pc, #72]	; (1f3d0 <send_filter_status+0xc4>)
   1f386:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f38a:	2303      	movs	r3, #3
   1f38c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f390:	2300      	movs	r3, #0
   1f392:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f396:	480f      	ldr	r0, [pc, #60]	; (1f3d4 <send_filter_status+0xc8>)
   1f398:	f7eb fbe0 	bl	ab5c <z_impl_z_log_msg_static_create>
   1f39c:	46a5      	mov	sp, r4
}
   1f39e:	3714      	adds	r7, #20
   1f3a0:	46bd      	mov	sp, r7
   1f3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_mesh_proxy_msg_send(client->cli->conn, BT_MESH_PROXY_CONFIG,
   1f3a4:	6830      	ldr	r0, [r6, #0]
   1f3a6:	9500      	str	r5, [sp, #0]
   1f3a8:	462b      	mov	r3, r5
   1f3aa:	4622      	mov	r2, r4
   1f3ac:	2102      	movs	r1, #2
   1f3ae:	6800      	ldr	r0, [r0, #0]
   1f3b0:	f000 fb8c 	bl	1facc <bt_mesh_proxy_msg_send>
	if (err) {
   1f3b4:	2800      	cmp	r0, #0
   1f3b6:	d0f2      	beq.n	1f39e <send_filter_status+0x92>
		LOG_ERR("Failed to send proxy cfg message (err %d)", err);
   1f3b8:	466c      	mov	r4, sp
   1f3ba:	b088      	sub	sp, #32
   1f3bc:	aa02      	add	r2, sp, #8
   1f3be:	4b06      	ldr	r3, [pc, #24]	; (1f3d8 <send_filter_status+0xcc>)
   1f3c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f3c4:	2303      	movs	r3, #3
   1f3c6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f3ca:	462b      	mov	r3, r5
   1f3cc:	e7e1      	b.n	1f392 <send_filter_status+0x86>
   1f3ce:	bf00      	nop
   1f3d0:	00034575 	.word	0x00034575
   1f3d4:	0002fc9c 	.word	0x0002fc9c
   1f3d8:	000345a0 	.word	0x000345a0

0001f3dc <proxy_msg_recv>:
{
   1f3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f3e0:	b093      	sub	sp, #76	; 0x4c
	switch (role->msg_type) {
   1f3e2:	7901      	ldrb	r1, [r0, #4]
{
   1f3e4:	4604      	mov	r4, r0
	switch (role->msg_type) {
   1f3e6:	2901      	cmp	r1, #1
{
   1f3e8:	af00      	add	r7, sp, #0
	switch (role->msg_type) {
   1f3ea:	d00a      	beq.n	1f402 <proxy_msg_recv+0x26>
   1f3ec:	2902      	cmp	r1, #2
   1f3ee:	d00c      	beq.n	1f40a <proxy_msg_recv+0x2e>
   1f3f0:	b919      	cbnz	r1, 1f3fa <proxy_msg_recv+0x1e>
		bt_mesh_net_recv(&role->buf, 0, BT_MESH_NET_IF_PROXY);
   1f3f2:	2202      	movs	r2, #2
   1f3f4:	3040      	adds	r0, #64	; 0x40
   1f3f6:	f7f6 fcf5 	bl	15de4 <bt_mesh_net_recv>
}
   1f3fa:	374c      	adds	r7, #76	; 0x4c
   1f3fc:	46bd      	mov	sp, r7
   1f3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_mesh_beacon_recv(&role->buf);
   1f402:	3040      	adds	r0, #64	; 0x40
   1f404:	f7f5 fec2 	bl	1518c <bt_mesh_beacon_recv>
		break;
   1f408:	e7f7      	b.n	1f3fa <proxy_msg_recv+0x1e>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   1f40a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   1f40e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1f412:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err = bt_mesh_net_decode(&role->buf, BT_MESH_NET_IF_PROXY_CFG,
   1f416:	2103      	movs	r1, #3
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   1f418:	607b      	str	r3, [r7, #4]
	err = bt_mesh_net_decode(&role->buf, BT_MESH_NET_IF_PROXY_CFG,
   1f41a:	f107 0210 	add.w	r2, r7, #16
   1f41e:	1d3b      	adds	r3, r7, #4
   1f420:	3040      	adds	r0, #64	; 0x40
   1f422:	f7f6 fc2d 	bl	15c80 <bt_mesh_net_decode>
	if (err) {
   1f426:	4601      	mov	r1, r0
   1f428:	b180      	cbz	r0, 1f44c <proxy_msg_recv+0x70>
		LOG_ERR("Failed to decode Proxy Configuration (err %d)", err);
   1f42a:	466c      	mov	r4, sp
   1f42c:	b088      	sub	sp, #32
   1f42e:	466a      	mov	r2, sp
   1f430:	4b43      	ldr	r3, [pc, #268]	; (1f540 <proxy_msg_recv+0x164>)
   1f432:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f436:	2303      	movs	r3, #3
   1f438:	f842 3f10 	str.w	r3, [r2, #16]!
   1f43c:	2300      	movs	r3, #0
   1f43e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f442:	4840      	ldr	r0, [pc, #256]	; (1f544 <proxy_msg_recv+0x168>)
   1f444:	f7eb fb8a 	bl	ab5c <z_impl_z_log_msg_static_create>
   1f448:	46a5      	mov	sp, r4
		return;
   1f44a:	e7d6      	b.n	1f3fa <proxy_msg_recv+0x1e>
	rx.local_match = 1U;
   1f44c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
	if (bt_mesh_rpl_check(&rx, NULL)) {
   1f450:	f107 0010 	add.w	r0, r7, #16
	rx.local_match = 1U;
   1f454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f458:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (bt_mesh_rpl_check(&rx, NULL)) {
   1f45c:	f7fc fdec 	bl	1c038 <bt_mesh_rpl_check>
   1f460:	4680      	mov	r8, r0
   1f462:	2800      	cmp	r0, #0
   1f464:	d1c9      	bne.n	1f3fa <proxy_msg_recv+0x1e>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   1f466:	2109      	movs	r1, #9
   1f468:	1d38      	adds	r0, r7, #4
   1f46a:	f000 ff3d 	bl	202e8 <net_buf_simple_pull>
	if (buf.len < 1) {
   1f46e:	893b      	ldrh	r3, [r7, #8]
   1f470:	2b00      	cmp	r3, #0
   1f472:	d0c2      	beq.n	1f3fa <proxy_msg_recv+0x1e>
	return &clients[bt_conn_index(conn)];
   1f474:	6820      	ldr	r0, [r4, #0]
   1f476:	f7f1 ff43 	bl	11300 <bt_conn_index>
   1f47a:	b205      	sxth	r5, r0
   1f47c:	4681      	mov	r9, r0
	opcode = net_buf_simple_pull_u8(buf);
   1f47e:	1d38      	adds	r0, r7, #4
   1f480:	f00e fcfc 	bl	2de7c <net_buf_simple_pull_u8>
	return &clients[bt_conn_index(conn)];
   1f484:	4e30      	ldr	r6, [pc, #192]	; (1f548 <proxy_msg_recv+0x16c>)
   1f486:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
	switch (opcode) {
   1f48a:	2801      	cmp	r0, #1
   1f48c:	ea4f 04c5 	mov.w	r4, r5, lsl #3
	return &clients[bt_conn_index(conn)];
   1f490:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	switch (opcode) {
   1f494:	d04c      	beq.n	1f530 <proxy_msg_recv+0x154>
   1f496:	2802      	cmp	r0, #2
   1f498:	d010      	beq.n	1f4bc <proxy_msg_recv+0xe0>
   1f49a:	2800      	cmp	r0, #0
   1f49c:	d1ad      	bne.n	1f3fa <proxy_msg_recv+0x1e>
	if (buf->len < 1) {
   1f49e:	893b      	ldrh	r3, [r7, #8]
   1f4a0:	b12b      	cbz	r3, 1f4ae <proxy_msg_recv+0xd2>
	type = net_buf_simple_pull_u8(buf);
   1f4a2:	1d38      	adds	r0, r7, #4
   1f4a4:	f00e fcea 	bl	2de7c <net_buf_simple_pull_u8>
	switch (type) {
   1f4a8:	b308      	cbz	r0, 1f4ee <proxy_msg_recv+0x112>
   1f4aa:	2801      	cmp	r0, #1
   1f4ac:	d02c      	beq.n	1f508 <proxy_msg_recv+0x12c>
		send_filter_status(client, rx, buf);
   1f4ae:	4628      	mov	r0, r5
   1f4b0:	1d3a      	adds	r2, r7, #4
   1f4b2:	f107 0110 	add.w	r1, r7, #16
   1f4b6:	f7ff ff29 	bl	1f30c <send_filter_status>
		break;
   1f4ba:	e79e      	b.n	1f3fa <proxy_msg_recv+0x1e>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1f4bc:	231c      	movs	r3, #28
   1f4be:	fb03 f909 	mul.w	r9, r3, r9
   1f4c2:	3402      	adds	r4, #2
   1f4c4:	4434      	add	r4, r6
		while (buf->len >= 2) {
   1f4c6:	893b      	ldrh	r3, [r7, #8]
   1f4c8:	2b01      	cmp	r3, #1
   1f4ca:	d9f0      	bls.n	1f4ae <proxy_msg_recv+0xd2>
			addr = net_buf_simple_pull_be16(buf);
   1f4cc:	1d38      	adds	r0, r7, #4
   1f4ce:	f00e fce5 	bl	2de9c <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1f4d2:	2800      	cmp	r0, #0
   1f4d4:	d0f7      	beq.n	1f4c6 <proxy_msg_recv+0xea>
   1f4d6:	4622      	mov	r2, r4
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f4d8:	2300      	movs	r3, #0
		if (client->filter[i] == addr) {
   1f4da:	f832 1f02 	ldrh.w	r1, [r2, #2]!
   1f4de:	4281      	cmp	r1, r0
   1f4e0:	d12a      	bne.n	1f538 <proxy_msg_recv+0x15c>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1f4e2:	444b      	add	r3, r9
   1f4e4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1f4e8:	f8a3 8004 	strh.w	r8, [r3, #4]
			return;
   1f4ec:	e7eb      	b.n	1f4c6 <proxy_msg_recv+0xea>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1f4ee:	1d20      	adds	r0, r4, #4
   1f4f0:	2220      	movs	r2, #32
   1f4f2:	2100      	movs	r1, #0
   1f4f4:	4430      	add	r0, r6
   1f4f6:	f00b f81b 	bl	2a530 <memset>
		client->filter_type = ACCEPT;
   1f4fa:	2338      	movs	r3, #56	; 0x38
   1f4fc:	2201      	movs	r2, #1
   1f4fe:	fb03 6309 	mla	r3, r3, r9, r6
   1f502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
   1f506:	e7d2      	b.n	1f4ae <proxy_msg_recv+0xd2>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1f508:	3404      	adds	r4, #4
   1f50a:	2220      	movs	r2, #32
   1f50c:	2100      	movs	r1, #0
   1f50e:	1930      	adds	r0, r6, r4
   1f510:	f00b f80e 	bl	2a530 <memset>
		client->filter_type = REJECT;
   1f514:	2338      	movs	r3, #56	; 0x38
   1f516:	fb03 6009 	mla	r0, r3, r9, r6
   1f51a:	2302      	movs	r3, #2
   1f51c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		break;
   1f520:	e7c5      	b.n	1f4ae <proxy_msg_recv+0xd2>
			addr = net_buf_simple_pull_be16(buf);
   1f522:	1d38      	adds	r0, r7, #4
   1f524:	f00e fcba 	bl	2de9c <net_buf_simple_pull_be16>
   1f528:	4601      	mov	r1, r0
			filter_add(client, addr);
   1f52a:	4628      	mov	r0, r5
   1f52c:	f00e fc36 	bl	2dd9c <filter_add>
		while (buf->len >= 2) {
   1f530:	893b      	ldrh	r3, [r7, #8]
   1f532:	2b01      	cmp	r3, #1
   1f534:	d8f5      	bhi.n	1f522 <proxy_msg_recv+0x146>
   1f536:	e7ba      	b.n	1f4ae <proxy_msg_recv+0xd2>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f538:	3301      	adds	r3, #1
   1f53a:	2b10      	cmp	r3, #16
   1f53c:	d1cd      	bne.n	1f4da <proxy_msg_recv+0xfe>
   1f53e:	e7c2      	b.n	1f4c6 <proxy_msg_recv+0xea>
   1f540:	000345ca 	.word	0x000345ca
   1f544:	0002fc9c 	.word	0x0002fc9c
   1f548:	20008a28 	.word	0x20008a28

0001f54c <bt_mesh_proxy_identity_start>:
{
   1f54c:	b510      	push	{r4, lr}
   1f54e:	4604      	mov	r4, r0
	node_id_start(sub);
   1f550:	f7ff feac 	bl	1f2ac <node_id_start>
	beacon_sub = sub;
   1f554:	4b01      	ldr	r3, [pc, #4]	; (1f55c <bt_mesh_proxy_identity_start+0x10>)
   1f556:	601c      	str	r4, [r3, #0]
}
   1f558:	bd10      	pop	{r4, pc}
   1f55a:	bf00      	nop
   1f55c:	2000ae58 	.word	0x2000ae58

0001f560 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1f560:	2300      	movs	r3, #0
{
   1f562:	b570      	push	{r4, r5, r6, lr}
   1f564:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1f566:	4d0d      	ldr	r5, [pc, #52]	; (1f59c <bt_mesh_proxy_identity_stop+0x3c>)
   1f568:	4e0d      	ldr	r6, [pc, #52]	; (1f5a0 <bt_mesh_proxy_identity_stop+0x40>)
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1f56a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	sub->node_id_start = 0U;
   1f56e:	6243      	str	r3, [r0, #36]	; 0x24
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1f570:	42b5      	cmp	r5, r6
   1f572:	d910      	bls.n	1f596 <bt_mesh_proxy_identity_stop+0x36>
   1f574:	490b      	ldr	r1, [pc, #44]	; (1f5a4 <bt_mesh_proxy_identity_stop+0x44>)
   1f576:	480c      	ldr	r0, [pc, #48]	; (1f5a8 <bt_mesh_proxy_identity_stop+0x48>)
   1f578:	f44f 72bf 	mov.w	r2, #382	; 0x17e
   1f57c:	f009 fb22 	bl	28bc4 <assert_print>
   1f580:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1f584:	4807      	ldr	r0, [pc, #28]	; (1f5a4 <bt_mesh_proxy_identity_stop+0x44>)
   1f586:	f009 fb16 	bl	28bb6 <assert_post_action>
		if (cb->identity_disabled) {
   1f58a:	686b      	ldr	r3, [r5, #4]
   1f58c:	b10b      	cbz	r3, 1f592 <bt_mesh_proxy_identity_stop+0x32>
			cb->identity_disabled(sub->net_idx);
   1f58e:	8c20      	ldrh	r0, [r4, #32]
   1f590:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_mesh_proxy_cb, cb) {
   1f592:	3508      	adds	r5, #8
   1f594:	e7ec      	b.n	1f570 <bt_mesh_proxy_identity_stop+0x10>
   1f596:	d3f8      	bcc.n	1f58a <bt_mesh_proxy_identity_stop+0x2a>
}
   1f598:	bd70      	pop	{r4, r5, r6, pc}
   1f59a:	bf00      	nop
   1f59c:	0002fbec 	.word	0x0002fbec
   1f5a0:	0002fbec 	.word	0x0002fbec
   1f5a4:	00034540 	.word	0x00034540
   1f5a8:	00030da5 	.word	0x00030da5

0001f5ac <bt_mesh_proxy_identity_enable>:
{
   1f5ac:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
   1f5ae:	f7f5 f901 	bl	147b4 <bt_mesh_is_provisioned>
   1f5b2:	b140      	cbz	r0, 1f5c6 <bt_mesh_proxy_identity_enable+0x1a>
	if (bt_mesh_subnet_foreach(node_id_start)) {
   1f5b4:	4805      	ldr	r0, [pc, #20]	; (1f5cc <bt_mesh_proxy_identity_enable+0x20>)
   1f5b6:	f7f7 f813 	bl	165e0 <bt_mesh_subnet_foreach>
   1f5ba:	b908      	cbnz	r0, 1f5c0 <bt_mesh_proxy_identity_enable+0x14>
	return 0;
   1f5bc:	2000      	movs	r0, #0
}
   1f5be:	bd08      	pop	{r3, pc}
		bt_mesh_adv_gatt_update();
   1f5c0:	f7fc fadc 	bl	1bb7c <bt_mesh_adv_gatt_update>
   1f5c4:	e7fa      	b.n	1f5bc <bt_mesh_proxy_identity_enable+0x10>
		return -EAGAIN;
   1f5c6:	f06f 000a 	mvn.w	r0, #10
   1f5ca:	e7f8      	b.n	1f5be <bt_mesh_proxy_identity_enable+0x12>
   1f5cc:	0001f2ad 	.word	0x0001f2ad

0001f5d0 <bt_mesh_proxy_gatt_enable>:
{
   1f5d0:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   1f5d2:	f7f5 f8ef 	bl	147b4 <bt_mesh_is_provisioned>
   1f5d6:	b170      	cbz	r0, 1f5f6 <bt_mesh_proxy_gatt_enable+0x26>
	if (service_registered) {
   1f5d8:	4c0a      	ldr	r4, [pc, #40]	; (1f604 <bt_mesh_proxy_gatt_enable+0x34>)
   1f5da:	7823      	ldrb	r3, [r4, #0]
   1f5dc:	b973      	cbnz	r3, 1f5fc <bt_mesh_proxy_gatt_enable+0x2c>
	(void)bt_gatt_service_register(&proxy_svc);
   1f5de:	480a      	ldr	r0, [pc, #40]	; (1f608 <bt_mesh_proxy_gatt_enable+0x38>)
   1f5e0:	f7f4 f9c8 	bl	13974 <bt_gatt_service_register>
	service_registered = true;
   1f5e4:	2201      	movs	r2, #1
		if (clients[i].cli) {
   1f5e6:	4b09      	ldr	r3, [pc, #36]	; (1f60c <bt_mesh_proxy_gatt_enable+0x3c>)
	service_registered = true;
   1f5e8:	7022      	strb	r2, [r4, #0]
		if (clients[i].cli) {
   1f5ea:	6819      	ldr	r1, [r3, #0]
   1f5ec:	b109      	cbz	r1, 1f5f2 <bt_mesh_proxy_gatt_enable+0x22>
   1f5ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return -EBUSY;
   1f5f2:	2000      	movs	r0, #0
}
   1f5f4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1f5f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f5fa:	e7fb      	b.n	1f5f4 <bt_mesh_proxy_gatt_enable+0x24>
		return -EBUSY;
   1f5fc:	f06f 000f 	mvn.w	r0, #15
   1f600:	e7f8      	b.n	1f5f4 <bt_mesh_proxy_gatt_enable+0x24>
   1f602:	bf00      	nop
   1f604:	2000b334 	.word	0x2000b334
   1f608:	2000897c 	.word	0x2000897c
   1f60c:	20008a28 	.word	0x20008a28

0001f610 <gatt_disconnected>:
{
   1f610:	b530      	push	{r4, r5, lr}
   1f612:	b089      	sub	sp, #36	; 0x24
	bt_conn_get_info(conn, &info);
   1f614:	4669      	mov	r1, sp
{
   1f616:	4604      	mov	r4, r0
	bt_conn_get_info(conn, &info);
   1f618:	f7f1 ffae 	bl	11578 <bt_conn_get_info>
	if (info.role != BT_CONN_ROLE_PERIPHERAL || info.id != BT_ID_DEFAULT) {
   1f61c:	9b00      	ldr	r3, [sp, #0]
   1f61e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1f626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1f62a:	d107      	bne.n	1f63c <gatt_disconnected+0x2c>
	if (!service_registered && bt_mesh_is_provisioned()) {
   1f62c:	4b0c      	ldr	r3, [pc, #48]	; (1f660 <gatt_disconnected+0x50>)
   1f62e:	781b      	ldrb	r3, [r3, #0]
   1f630:	b933      	cbnz	r3, 1f640 <gatt_disconnected+0x30>
   1f632:	f7f5 f8bf 	bl	147b4 <bt_mesh_is_provisioned>
   1f636:	b118      	cbz	r0, 1f640 <gatt_disconnected+0x30>
		(void)bt_mesh_proxy_gatt_enable();
   1f638:	f7ff ffca 	bl	1f5d0 <bt_mesh_proxy_gatt_enable>
}
   1f63c:	b009      	add	sp, #36	; 0x24
   1f63e:	bd30      	pop	{r4, r5, pc}
	return &clients[bt_conn_index(conn)];
   1f640:	4620      	mov	r0, r4
   1f642:	f7f1 fe5d 	bl	11300 <bt_conn_index>
	if (client->cli) {
   1f646:	2338      	movs	r3, #56	; 0x38
   1f648:	fb03 f400 	mul.w	r4, r3, r0
   1f64c:	4d05      	ldr	r5, [pc, #20]	; (1f664 <gatt_disconnected+0x54>)
   1f64e:	5928      	ldr	r0, [r5, r4]
   1f650:	2800      	cmp	r0, #0
   1f652:	d0f3      	beq.n	1f63c <gatt_disconnected+0x2c>
		bt_mesh_proxy_role_cleanup(client->cli);
   1f654:	f000 fb42 	bl	1fcdc <bt_mesh_proxy_role_cleanup>
		client->cli = NULL;
   1f658:	2300      	movs	r3, #0
   1f65a:	512b      	str	r3, [r5, r4]
   1f65c:	e7ee      	b.n	1f63c <gatt_disconnected+0x2c>
   1f65e:	bf00      	nop
   1f660:	2000b334 	.word	0x2000b334
   1f664:	20008a28 	.word	0x20008a28

0001f668 <bt_mesh_proxy_gatt_disconnect>:
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1f668:	2200      	movs	r2, #0
{
   1f66a:	b510      	push	{r4, lr}
		if (client->cli && (client->filter_type == ACCEPT ||
   1f66c:	4c09      	ldr	r4, [pc, #36]	; (1f694 <bt_mesh_proxy_gatt_disconnect+0x2c>)
   1f66e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1f672:	6820      	ldr	r0, [r4, #0]
   1f674:	3b01      	subs	r3, #1
   1f676:	b2db      	uxtb	r3, r3
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1f678:	b102      	cbz	r2, 1f67c <bt_mesh_proxy_gatt_disconnect+0x14>
}
   1f67a:	bd10      	pop	{r4, pc}
		if (client->cli && (client->filter_type == ACCEPT ||
   1f67c:	2800      	cmp	r0, #0
   1f67e:	d0fc      	beq.n	1f67a <bt_mesh_proxy_gatt_disconnect+0x12>
   1f680:	2b01      	cmp	r3, #1
   1f682:	d8fa      	bhi.n	1f67a <bt_mesh_proxy_gatt_disconnect+0x12>
			client->filter_type = NONE;
   1f684:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
			bt_conn_disconnect(client->cli->conn,
   1f688:	2113      	movs	r1, #19
   1f68a:	6800      	ldr	r0, [r0, #0]
   1f68c:	f00b fc82 	bl	2af94 <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1f690:	2201      	movs	r2, #1
   1f692:	e7ec      	b.n	1f66e <bt_mesh_proxy_gatt_disconnect+0x6>
   1f694:	20008a28 	.word	0x20008a28

0001f698 <bt_mesh_proxy_gatt_disable>:
{
   1f698:	b510      	push	{r4, lr}
	if (!service_registered) {
   1f69a:	4c07      	ldr	r4, [pc, #28]	; (1f6b8 <bt_mesh_proxy_gatt_disable+0x20>)
   1f69c:	7823      	ldrb	r3, [r4, #0]
   1f69e:	b13b      	cbz	r3, 1f6b0 <bt_mesh_proxy_gatt_disable+0x18>
	bt_mesh_proxy_gatt_disconnect();
   1f6a0:	f7ff ffe2 	bl	1f668 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   1f6a4:	4805      	ldr	r0, [pc, #20]	; (1f6bc <bt_mesh_proxy_gatt_disable+0x24>)
   1f6a6:	f7f4 feef 	bl	14488 <bt_gatt_service_unregister>
	service_registered = false;
   1f6aa:	2000      	movs	r0, #0
   1f6ac:	7020      	strb	r0, [r4, #0]
}
   1f6ae:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1f6b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f6b4:	e7fb      	b.n	1f6ae <bt_mesh_proxy_gatt_disable+0x16>
   1f6b6:	bf00      	nop
   1f6b8:	2000b334 	.word	0x2000b334
   1f6bc:	2000897c 	.word	0x2000897c

0001f6c0 <bt_mesh_proxy_addr_add>:
{
   1f6c0:	b538      	push	{r3, r4, r5, lr}
	return &clients[bt_conn_index(conn)];
   1f6c2:	f850 0c40 	ldr.w	r0, [r0, #-64]
{
   1f6c6:	460c      	mov	r4, r1
	return &clients[bt_conn_index(conn)];
   1f6c8:	f7f1 fe1a 	bl	11300 <bt_conn_index>
	if (client->filter_type == ACCEPT) {
   1f6cc:	2238      	movs	r2, #56	; 0x38
   1f6ce:	4d14      	ldr	r5, [pc, #80]	; (1f720 <bt_mesh_proxy_addr_add+0x60>)
   1f6d0:	fb02 5300 	mla	r3, r2, r0, r5
   1f6d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1f6d8:	2b01      	cmp	r3, #1
   1f6da:	d109      	bne.n	1f6f0 <bt_mesh_proxy_addr_add+0x30>
	return &clients[bt_conn_index(conn)];
   1f6dc:	b200      	sxth	r0, r0
   1f6de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
		filter_add(client, addr);
   1f6e2:	4621      	mov	r1, r4
   1f6e4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
}
   1f6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		filter_add(client, addr);
   1f6ec:	f00e bb56 	b.w	2dd9c <filter_add>
	} else if (client->filter_type == REJECT) {
   1f6f0:	2b02      	cmp	r3, #2
   1f6f2:	d10f      	bne.n	1f714 <bt_mesh_proxy_addr_add+0x54>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1f6f4:	b174      	cbz	r4, 1f714 <bt_mesh_proxy_addr_add+0x54>
   1f6f6:	fb12 3200 	smlabb	r2, r2, r0, r3
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	442a      	add	r2, r5
		if (client->filter[i] == addr) {
   1f6fe:	f832 1f02 	ldrh.w	r1, [r2, #2]!
   1f702:	42a1      	cmp	r1, r4
   1f704:	d107      	bne.n	1f716 <bt_mesh_proxy_addr_add+0x56>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1f706:	221c      	movs	r2, #28
   1f708:	fb02 3300 	mla	r3, r2, r0, r3
   1f70c:	2200      	movs	r2, #0
   1f70e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1f712:	809a      	strh	r2, [r3, #4]
}
   1f714:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f716:	3301      	adds	r3, #1
   1f718:	2b10      	cmp	r3, #16
   1f71a:	d1f0      	bne.n	1f6fe <bt_mesh_proxy_addr_add+0x3e>
   1f71c:	e7fa      	b.n	1f714 <bt_mesh_proxy_addr_add+0x54>
   1f71e:	bf00      	nop
   1f720:	20008a28 	.word	0x20008a28

0001f724 <bt_mesh_proxy_relay>:
{
   1f724:	b538      	push	{r3, r4, r5, lr}
		if (!client->cli) {
   1f726:	4b15      	ldr	r3, [pc, #84]	; (1f77c <bt_mesh_proxy_relay+0x58>)
   1f728:	681a      	ldr	r2, [r3, #0]
   1f72a:	b322      	cbz	r2, 1f776 <bt_mesh_proxy_relay+0x52>
	if (client->filter_type == REJECT) {
   1f72c:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
   1f730:	2c02      	cmp	r4, #2
   1f732:	d10f      	bne.n	1f754 <bt_mesh_proxy_relay+0x30>
		for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f734:	2400      	movs	r4, #0
   1f736:	3302      	adds	r3, #2
			if (client->filter[i] == addr) {
   1f738:	f833 5f02 	ldrh.w	r5, [r3, #2]!
   1f73c:	428d      	cmp	r5, r1
   1f73e:	d018      	beq.n	1f772 <bt_mesh_proxy_relay+0x4e>
		for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f740:	3401      	adds	r4, #1
   1f742:	2c10      	cmp	r4, #16
   1f744:	d1f8      	bne.n	1f738 <bt_mesh_proxy_relay+0x14>
		if (bt_mesh_proxy_relay_send(client->cli->conn, buf)) {
   1f746:	4601      	mov	r1, r0
   1f748:	6810      	ldr	r0, [r2, #0]
   1f74a:	f000 fa27 	bl	1fb9c <bt_mesh_proxy_relay_send>
   1f74e:	b980      	cbnz	r0, 1f772 <bt_mesh_proxy_relay+0x4e>
		relayed = true;
   1f750:	2001      	movs	r0, #1
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1f752:	e00f      	b.n	1f774 <bt_mesh_proxy_relay+0x50>
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   1f754:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f758:	42a9      	cmp	r1, r5
   1f75a:	d0f4      	beq.n	1f746 <bt_mesh_proxy_relay+0x22>
	if (client->filter_type == ACCEPT) {
   1f75c:	2c01      	cmp	r4, #1
   1f75e:	d108      	bne.n	1f772 <bt_mesh_proxy_relay+0x4e>
		for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f760:	2400      	movs	r4, #0
   1f762:	3302      	adds	r3, #2
			if (client->filter[i] == addr) {
   1f764:	f833 5f02 	ldrh.w	r5, [r3, #2]!
   1f768:	428d      	cmp	r5, r1
   1f76a:	d0ec      	beq.n	1f746 <bt_mesh_proxy_relay+0x22>
		for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1f76c:	3401      	adds	r4, #1
   1f76e:	2c10      	cmp	r4, #16
   1f770:	d1f8      	bne.n	1f764 <bt_mesh_proxy_relay+0x40>
	bool relayed = false;
   1f772:	2000      	movs	r0, #0
}
   1f774:	bd38      	pop	{r3, r4, r5, pc}
	bool relayed = false;
   1f776:	4610      	mov	r0, r2
   1f778:	e7fc      	b.n	1f774 <bt_mesh_proxy_relay+0x50>
   1f77a:	bf00      	nop
   1f77c:	20008a28 	.word	0x20008a28

0001f780 <bt_mesh_proxy_adv_start>:

int bt_mesh_proxy_adv_start(void)
{
   1f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("");

	if (!service_registered || !bt_mesh_is_provisioned()) {
   1f784:	4b8b      	ldr	r3, [pc, #556]	; (1f9b4 <bt_mesh_proxy_adv_start+0x234>)
{
   1f786:	b08f      	sub	sp, #60	; 0x3c
	if (!service_registered || !bt_mesh_is_provisioned()) {
   1f788:	781b      	ldrb	r3, [r3, #0]
   1f78a:	b92b      	cbnz	r3, 1f798 <bt_mesh_proxy_adv_start+0x18>
		return -ENOTSUP;
   1f78c:	f06f 0a85 	mvn.w	sl, #133	; 0x85
	}

	return gatt_proxy_advertise(next_sub());
}
   1f790:	4650      	mov	r0, sl
   1f792:	b00f      	add	sp, #60	; 0x3c
   1f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!service_registered || !bt_mesh_is_provisioned()) {
   1f798:	f7f5 f80c 	bl	147b4 <bt_mesh_is_provisioned>
   1f79c:	2800      	cmp	r0, #0
   1f79e:	d0f5      	beq.n	1f78c <bt_mesh_proxy_adv_start+0xc>
	if (!beacon_sub) {
   1f7a0:	4e85      	ldr	r6, [pc, #532]	; (1f9b8 <bt_mesh_proxy_adv_start+0x238>)
   1f7a2:	6830      	ldr	r0, [r6, #0]
   1f7a4:	b158      	cbz	r0, 1f7be <bt_mesh_proxy_adv_start+0x3e>
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1f7a6:	f64f 75ff 	movw	r5, #65535	; 0xffff
	sub = beacon_sub;
   1f7aa:	6834      	ldr	r4, [r6, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1f7ac:	8c23      	ldrh	r3, [r4, #32]
   1f7ae:	42ab      	cmp	r3, r5
   1f7b0:	d03e      	beq.n	1f830 <bt_mesh_proxy_adv_start+0xb0>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   1f7b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1f7b6:	2b01      	cmp	r3, #1
   1f7b8:	d136      	bne.n	1f828 <bt_mesh_proxy_adv_start+0xa8>
			beacon_sub = sub;
   1f7ba:	6034      	str	r4, [r6, #0]
			return sub;
   1f7bc:	e004      	b.n	1f7c8 <bt_mesh_proxy_adv_start+0x48>
		beacon_sub = bt_mesh_subnet_next(NULL);
   1f7be:	f7f6 ff1f 	bl	16600 <bt_mesh_subnet_next>
   1f7c2:	6030      	str	r0, [r6, #0]
		if (!beacon_sub) {
   1f7c4:	2800      	cmp	r0, #0
   1f7c6:	d1ee      	bne.n	1f7a6 <bt_mesh_proxy_adv_start+0x26>
	if (!bt_mesh_proxy_has_avail_conn()) {
   1f7c8:	f000 fa9c 	bl	1fd04 <bt_mesh_proxy_has_avail_conn>
   1f7cc:	9003      	str	r0, [sp, #12]
   1f7ce:	2800      	cmp	r0, #0
   1f7d0:	f000 80ea 	beq.w	1f9a8 <bt_mesh_proxy_adv_start+0x228>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
   1f7d4:	6834      	ldr	r4, [r6, #0]
   1f7d6:	b934      	cbnz	r4, 1f7e6 <bt_mesh_proxy_adv_start+0x66>
   1f7d8:	4620      	mov	r0, r4
   1f7da:	f7f6 ff11 	bl	16600 <bt_mesh_subnet_next>
	if (!sub) {
   1f7de:	4604      	mov	r4, r0
   1f7e0:	2800      	cmp	r0, #0
   1f7e2:	f000 80e4 	beq.w	1f9ae <bt_mesh_proxy_adv_start+0x22e>
	int count = 0;
   1f7e6:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   1f7e8:	4874      	ldr	r0, [pc, #464]	; (1f9bc <bt_mesh_proxy_adv_start+0x23c>)
   1f7ea:	a909      	add	r1, sp, #36	; 0x24
	int count = 0;
   1f7ec:	9309      	str	r3, [sp, #36]	; 0x24
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   1f7ee:	f7f6 fee5 	bl	165bc <bt_mesh_subnet_find>
	return count;
   1f7f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	if (subnet_count > 1) {
   1f7f6:	f1b8 0f01 	cmp.w	r8, #1
   1f7fa:	dd21      	ble.n	1f840 <bt_mesh_proxy_adv_start+0xc0>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
   1f7fc:	4643      	mov	r3, r8
   1f7fe:	2b06      	cmp	r3, #6
   1f800:	bfb8      	it	lt
   1f802:	2306      	movlt	r3, #6
   1f804:	f64e 2560 	movw	r5, #60000	; 0xea60
   1f808:	fbb5 f5f3 	udiv	r5, r5, r3
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
   1f80c:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   1f810:	bf38      	it	cc
   1f812:	f44f 757a 	movcc.w	r5, #1000	; 0x3e8
				planned = true;
   1f816:	f04f 0900 	mov.w	r9, #0
   1f81a:	f06f 0a0f 	mvn.w	sl, #15
	for (int i = 0; i < subnet_count; i++) {
   1f81e:	45c1      	cmp	r9, r8
   1f820:	db11      	blt.n	1f846 <bt_mesh_proxy_adv_start+0xc6>
	return 0;
   1f822:	f04f 0a00 	mov.w	sl, #0
   1f826:	e7b3      	b.n	1f790 <bt_mesh_proxy_adv_start+0x10>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   1f828:	f7f5 f91e 	bl	14a68 <bt_mesh_gatt_proxy_get>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   1f82c:	2801      	cmp	r0, #1
   1f82e:	d0c4      	beq.n	1f7ba <bt_mesh_proxy_adv_start+0x3a>
		sub = bt_mesh_subnet_next(sub);
   1f830:	4620      	mov	r0, r4
   1f832:	f7f6 fee5 	bl	16600 <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
   1f836:	6833      	ldr	r3, [r6, #0]
		sub = bt_mesh_subnet_next(sub);
   1f838:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
   1f83a:	4298      	cmp	r0, r3
   1f83c:	d1b6      	bne.n	1f7ac <bt_mesh_proxy_adv_start+0x2c>
   1f83e:	e7c3      	b.n	1f7c8 <bt_mesh_proxy_adv_start+0x48>
	int32_t remaining = SYS_FOREVER_MS;
   1f840:	f04f 35ff 	mov.w	r5, #4294967295
   1f844:	e7e7      	b.n	1f816 <bt_mesh_proxy_adv_start+0x96>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   1f846:	f894 b023 	ldrb.w	fp, [r4, #35]	; 0x23
   1f84a:	f1bb 0f01 	cmp.w	fp, #1
   1f84e:	f040 809c 	bne.w	1f98a <bt_mesh_proxy_adv_start+0x20a>
   1f852:	f00f fe88 	bl	2f566 <z_impl_k_uptime_ticks>
   1f856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f85a:	fba0 0203 	umull	r0, r2, r0, r3
   1f85e:	fb03 2101 	mla	r1, r3, r1, r2
   1f862:	0bc2      	lsrs	r2, r0, #15
   1f864:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
			if (active < NODE_ID_TIMEOUT) {
   1f868:	f64e 215f 	movw	r1, #59999	; 0xea5f
			uint32_t active = k_uptime_get_32() - sub->node_id_start;
   1f86c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f86e:	1ad0      	subs	r0, r2, r3
			if (active < NODE_ID_TIMEOUT) {
   1f870:	4288      	cmp	r0, r1
   1f872:	f200 8087 	bhi.w	1f984 <bt_mesh_proxy_adv_start+0x204>
				remaining = MIN(remaining, NODE_ID_TIMEOUT - active);
   1f876:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
   1f87a:	3360      	adds	r3, #96	; 0x60
   1f87c:	1a9b      	subs	r3, r3, r2
   1f87e:	429d      	cmp	r5, r3
	struct bt_le_adv_param fast_adv_param = {
   1f880:	f04f 0214 	mov.w	r2, #20
   1f884:	f04f 0100 	mov.w	r1, #0
   1f888:	a809      	add	r0, sp, #36	; 0x24
				remaining = MIN(remaining, NODE_ID_TIMEOUT - active);
   1f88a:	bf28      	it	cs
   1f88c:	461d      	movcs	r5, r3
	struct bt_le_adv_param fast_adv_param = {
   1f88e:	f240 2a0b 	movw	sl, #523	; 0x20b
   1f892:	f00a fe4d 	bl	2a530 <memset>
   1f896:	23a0      	movs	r3, #160	; 0xa0
   1f898:	e9cd a30a 	strd	sl, r3, [sp, #40]	; 0x28
   1f89c:	23f0      	movs	r3, #240	; 0xf0
	proxy_svc_data[2] = BT_MESH_ID_TYPE_NODE;
   1f89e:	4f48      	ldr	r7, [pc, #288]	; (1f9c0 <bt_mesh_proxy_adv_start+0x240>)
	err = bt_rand(proxy_svc_data + 11, 8);
   1f8a0:	2108      	movs	r1, #8
	proxy_svc_data[2] = BT_MESH_ID_TYPE_NODE;
   1f8a2:	f887 b002 	strb.w	fp, [r7, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
   1f8a6:	f107 000b 	add.w	r0, r7, #11
	struct bt_le_adv_param fast_adv_param = {
   1f8aa:	930c      	str	r3, [sp, #48]	; 0x30
	err = bt_rand(proxy_svc_data + 11, 8);
   1f8ac:	f7f1 f818 	bl	108e0 <bt_rand>
	if (err) {
   1f8b0:	4682      	mov	sl, r0
   1f8b2:	bb80      	cbnz	r0, 1f916 <bt_mesh_proxy_adv_start+0x196>
	(void)memset(tmp, 0, 6);
   1f8b4:	4601      	mov	r1, r0
   1f8b6:	2206      	movs	r2, #6
   1f8b8:	a805      	add	r0, sp, #20
   1f8ba:	f00a fe39 	bl	2a530 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   1f8be:	2208      	movs	r2, #8
   1f8c0:	f107 010b 	add.w	r1, r7, #11
   1f8c4:	f10d 001a 	add.w	r0, sp, #26
   1f8c8:	f00a fe27 	bl	2a51a <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   1f8cc:	f7f9 fd22 	bl	19314 <bt_mesh_primary_addr>
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
   1f8d0:	235a      	movs	r3, #90	; 0x5a
	dst[0] = val >> 8;
   1f8d2:	ba40      	rev16	r0, r0
   1f8d4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
   1f8d8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   1f8dc:	aa05      	add	r2, sp, #20
   1f8de:	f1a0 0e02 	sub.w	lr, r0, #2
   1f8e2:	f1de 0000 	rsbs	r0, lr, #0
   1f8e6:	eb40 000e 	adc.w	r0, r0, lr
   1f8ea:	fb03 4000 	mla	r0, r3, r0, r4
   1f8ee:	4611      	mov	r1, r2
   1f8f0:	306a      	adds	r0, #106	; 0x6a
   1f8f2:	f00b fafe 	bl	2aef2 <bt_encrypt_be>
	if (err) {
   1f8f6:	4682      	mov	sl, r0
   1f8f8:	b968      	cbnz	r0, 1f916 <bt_mesh_proxy_adv_start+0x196>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   1f8fa:	2208      	movs	r2, #8
   1f8fc:	a907      	add	r1, sp, #28
   1f8fe:	1cf8      	adds	r0, r7, #3
   1f900:	f00a fe0b 	bl	2a51a <memcpy>
	err = bt_mesh_adv_gatt_start(&fast_adv_param, duration, node_id_ad,
   1f904:	e9cd aa00 	strd	sl, sl, [sp]
   1f908:	2303      	movs	r3, #3
   1f90a:	4629      	mov	r1, r5
   1f90c:	4a2d      	ldr	r2, [pc, #180]	; (1f9c4 <bt_mesh_proxy_adv_start+0x244>)
   1f90e:	a809      	add	r0, sp, #36	; 0x24
   1f910:	f7fc f994 	bl	1bc3c <bt_mesh_adv_gatt_start>
   1f914:	4682      	mov	sl, r0
				planned = true;
   1f916:	f8dd b00c 	ldr.w	fp, [sp, #12]
		if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED &&
   1f91a:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
   1f91e:	bbbf      	cbnz	r7, 1f990 <bt_mesh_proxy_adv_start+0x210>
		    bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED) {
   1f920:	f7f5 f8a2 	bl	14a68 <bt_mesh_gatt_proxy_get>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED &&
   1f924:	2801      	cmp	r0, #1
   1f926:	d133      	bne.n	1f990 <bt_mesh_proxy_adv_start+0x210>
	struct bt_le_adv_param slow_adv_param = {
   1f928:	2214      	movs	r2, #20
   1f92a:	4639      	mov	r1, r7
   1f92c:	a809      	add	r0, sp, #36	; 0x24
   1f92e:	f00a fdff 	bl	2a530 <memset>
   1f932:	f240 220b 	movw	r2, #523	; 0x20b
   1f936:	f44f 63c8 	mov.w	r3, #1600	; 0x640
   1f93a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1f93e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   1f942:	930c      	str	r3, [sp, #48]	; 0x30
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   1f944:	235a      	movs	r3, #90	; 0x5a
   1f946:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	proxy_svc_data[2] = BT_MESH_ID_TYPE_NET;
   1f94a:	481d      	ldr	r0, [pc, #116]	; (1f9c0 <bt_mesh_proxy_adv_start+0x240>)
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   1f94c:	f1a1 0c02 	sub.w	ip, r1, #2
   1f950:	f1dc 0100 	rsbs	r1, ip, #0
   1f954:	eb41 010c 	adc.w	r1, r1, ip
   1f958:	fb03 4101 	mla	r1, r3, r1, r4
   1f95c:	2208      	movs	r2, #8
	proxy_svc_data[2] = BT_MESH_ID_TYPE_NET;
   1f95e:	7087      	strb	r7, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   1f960:	3162      	adds	r1, #98	; 0x62
   1f962:	3003      	adds	r0, #3
   1f964:	f00a fdd9 	bl	2a51a <memcpy>
	err = bt_mesh_adv_gatt_start(&slow_adv_param, duration, net_id_ad,
   1f968:	2303      	movs	r3, #3
   1f96a:	4629      	mov	r1, r5
   1f96c:	4a16      	ldr	r2, [pc, #88]	; (1f9c8 <bt_mesh_proxy_adv_start+0x248>)
   1f96e:	e9cd 7700 	strd	r7, r7, [sp]
   1f972:	a809      	add	r0, sp, #36	; 0x24
   1f974:	f7fc f962 	bl	1bc3c <bt_mesh_adv_gatt_start>
   1f978:	4682      	mov	sl, r0
		beacon_sub = bt_mesh_subnet_next(sub);
   1f97a:	4620      	mov	r0, r4
   1f97c:	f7f6 fe40 	bl	16600 <bt_mesh_subnet_next>
   1f980:	6030      	str	r0, [r6, #0]
		if (planned) {
   1f982:	e705      	b.n	1f790 <bt_mesh_proxy_adv_start+0x10>
				bt_mesh_proxy_identity_stop(sub);
   1f984:	4620      	mov	r0, r4
   1f986:	f7ff fdeb 	bl	1f560 <bt_mesh_proxy_identity_stop>
	int32_t remaining = SYS_FOREVER_MS;
   1f98a:	f04f 0b00 	mov.w	fp, #0
   1f98e:	e7c4      	b.n	1f91a <bt_mesh_proxy_adv_start+0x19a>
		beacon_sub = bt_mesh_subnet_next(sub);
   1f990:	4620      	mov	r0, r4
   1f992:	f7f6 fe35 	bl	16600 <bt_mesh_subnet_next>
   1f996:	4604      	mov	r4, r0
   1f998:	6030      	str	r0, [r6, #0]
		if (planned) {
   1f99a:	f1bb 0f00 	cmp.w	fp, #0
   1f99e:	f47f aef7 	bne.w	1f790 <bt_mesh_proxy_adv_start+0x10>
	for (int i = 0; i < subnet_count; i++) {
   1f9a2:	f109 0901 	add.w	r9, r9, #1
   1f9a6:	e73a      	b.n	1f81e <bt_mesh_proxy_adv_start+0x9e>
		return -ENOMEM;
   1f9a8:	f06f 0a0b 	mvn.w	sl, #11
   1f9ac:	e6f0      	b.n	1f790 <bt_mesh_proxy_adv_start+0x10>
		return -ENOENT;
   1f9ae:	f06f 0a01 	mvn.w	sl, #1
   1f9b2:	e6ed      	b.n	1f790 <bt_mesh_proxy_adv_start+0x10>
   1f9b4:	2000b334 	.word	0x2000b334
   1f9b8:	2000ae58 	.word	0x2000ae58
   1f9bc:	0002ddcd 	.word	0x0002ddcd
   1f9c0:	20008cb9 	.word	0x20008cb9
   1f9c4:	000309e0 	.word	0x000309e0
   1f9c8:	000309c8 	.word	0x000309c8

0001f9cc <bt_mesh_proxy_msg_recv>:
	}
}

ssize_t bt_mesh_proxy_msg_recv(struct bt_conn *conn,
			       const void *buf, uint16_t len)
{
   1f9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9d0:	460e      	mov	r6, r1
   1f9d2:	4615      	mov	r5, r2
	const uint8_t *data = buf;
	struct bt_mesh_proxy_role *role = &roles[bt_conn_index(conn)];
   1f9d4:	f7f1 fc94 	bl	11300 <bt_conn_index>
   1f9d8:	2250      	movs	r2, #80	; 0x50

	switch (PDU_SAR(data)) {
   1f9da:	7833      	ldrb	r3, [r6, #0]
	struct bt_mesh_proxy_role *role = &roles[bt_conn_index(conn)];
   1f9dc:	4f3a      	ldr	r7, [pc, #232]	; (1fac8 <bt_mesh_proxy_msg_recv+0xfc>)
   1f9de:	fa0f f980 	sxth.w	r9, r0
	switch (PDU_SAR(data)) {
   1f9e2:	0999      	lsrs	r1, r3, #6
   1f9e4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1f9e8:	2902      	cmp	r1, #2
   1f9ea:	ea4f 1809 	mov.w	r8, r9, lsl #4
	case SAR_COMPLETE:
		if (role->buf.len) {
   1f9ee:	fb02 7400 	mla	r4, r2, r0, r7
	struct bt_mesh_proxy_role *role = &roles[bt_conn_index(conn)];
   1f9f2:	eb07 1909 	add.w	r9, r7, r9, lsl #4
	switch (PDU_SAR(data)) {
   1f9f6:	d033      	beq.n	1fa60 <bt_mesh_proxy_msg_recv+0x94>
   1f9f8:	2903      	cmp	r1, #3
   1f9fa:	d046      	beq.n	1fa8a <bt_mesh_proxy_msg_recv+0xbe>
   1f9fc:	2901      	cmp	r1, #1
   1f9fe:	d014      	beq.n	1fa2a <bt_mesh_proxy_msg_recv+0x5e>
		if (role->buf.len) {
   1fa00:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
   1fa04:	f1ba 0f00 	cmp.w	sl, #0
   1fa08:	d15a      	bne.n	1fac0 <bt_mesh_proxy_msg_recv+0xf4>
			LOG_WRN("Complete PDU while a pending incomplete one");
			return -EINVAL;
		}

		role->msg_type = PDU_TYPE(data);
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa0a:	f108 0040 	add.w	r0, r8, #64	; 0x40
		role->msg_type = PDU_TYPE(data);
   1fa0e:	7123      	strb	r3, [r4, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa10:	1e6a      	subs	r2, r5, #1
   1fa12:	1c71      	adds	r1, r6, #1
   1fa14:	4438      	add	r0, r7
   1fa16:	f00e fa60 	bl	2deda <net_buf_simple_add_mem>
		role->cb.recv(role);
   1fa1a:	4648      	mov	r0, r9
   1fa1c:	68e3      	ldr	r3, [r4, #12]
   1fa1e:	4798      	blx	r3
   1fa20:	f8a4 a044 	strh.w	sl, [r4, #68]	; 0x44
	buf->data = buf->__buf;
   1fa24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1fa26:	6423      	str	r3, [r4, #64]	; 0x40
}
   1fa28:	e017      	b.n	1fa5a <bt_mesh_proxy_msg_recv+0x8e>
		net_buf_simple_reset(&role->buf);
		break;

	case SAR_FIRST:
		if (role->buf.len) {
   1fa2a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1fa2e:	2b00      	cmp	r3, #0
   1fa30:	d146      	bne.n	1fac0 <bt_mesh_proxy_msg_recv+0xf4>
			LOG_WRN("First PDU while a pending incomplete one");
			return -EINVAL;
		}

		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   1fa32:	f108 0010 	add.w	r0, r8, #16
   1fa36:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	4438      	add	r0, r7
   1fa3e:	f006 fe1b 	bl	26678 <k_work_reschedule>
		role->msg_type = PDU_TYPE(data);
   1fa42:	4631      	mov	r1, r6
   1fa44:	f811 3b01 	ldrb.w	r3, [r1], #1
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa48:	f108 0040 	add.w	r0, r8, #64	; 0x40
		role->msg_type = PDU_TYPE(data);
   1fa4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fa50:	7123      	strb	r3, [r4, #4]
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa52:	1e6a      	subs	r2, r5, #1
			LOG_WRN("Unexpected message type in continuation");
			return -EINVAL;
		}

		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa54:	4438      	add	r0, r7
   1fa56:	f00e fa40 	bl	2deda <net_buf_simple_add_mem>
		role->cb.recv(role);
		net_buf_simple_reset(&role->buf);
		break;
	}

	return len;
   1fa5a:	4628      	mov	r0, r5
}
   1fa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!role->buf.len) {
   1fa60:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
   1fa64:	b362      	cbz	r2, 1fac0 <bt_mesh_proxy_msg_recv+0xf4>
		if (role->msg_type != PDU_TYPE(data)) {
   1fa66:	7922      	ldrb	r2, [r4, #4]
   1fa68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fa6c:	429a      	cmp	r2, r3
   1fa6e:	d127      	bne.n	1fac0 <bt_mesh_proxy_msg_recv+0xf4>
		k_work_reschedule(&role->sar_timer, PROXY_SAR_TIMEOUT);
   1fa70:	f108 0010 	add.w	r0, r8, #16
   1fa74:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1fa78:	2300      	movs	r3, #0
   1fa7a:	4438      	add	r0, r7
   1fa7c:	f006 fdfc 	bl	26678 <k_work_reschedule>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1fa80:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1fa84:	1e6a      	subs	r2, r5, #1
   1fa86:	1c71      	adds	r1, r6, #1
   1fa88:	e7e4      	b.n	1fa54 <bt_mesh_proxy_msg_recv+0x88>
		if (!role->buf.len) {
   1fa8a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
   1fa8e:	b1ba      	cbz	r2, 1fac0 <bt_mesh_proxy_msg_recv+0xf4>
		if (role->msg_type != PDU_TYPE(data)) {
   1fa90:	7922      	ldrb	r2, [r4, #4]
   1fa92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fa96:	429a      	cmp	r2, r3
   1fa98:	d112      	bne.n	1fac0 <bt_mesh_proxy_msg_recv+0xf4>
		(void)k_work_cancel_delayable(&role->sar_timer);
   1fa9a:	f108 0010 	add.w	r0, r8, #16
   1fa9e:	4438      	add	r0, r7
   1faa0:	f006 fdf0 	bl	26684 <k_work_cancel_delayable>
		net_buf_simple_add_mem(&role->buf, data + 1, len - 1);
   1faa4:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1faa8:	1e6a      	subs	r2, r5, #1
   1faaa:	1c71      	adds	r1, r6, #1
   1faac:	4438      	add	r0, r7
   1faae:	f00e fa14 	bl	2deda <net_buf_simple_add_mem>
		role->cb.recv(role);
   1fab2:	68e3      	ldr	r3, [r4, #12]
   1fab4:	4648      	mov	r0, r9
   1fab6:	4798      	blx	r3
	buf->len  = 0U;
   1fab8:	2300      	movs	r3, #0
   1faba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1fabe:	e7b1      	b.n	1fa24 <bt_mesh_proxy_msg_recv+0x58>
   1fac0:	f06f 0015 	mvn.w	r0, #21
   1fac4:	e7ca      	b.n	1fa5c <bt_mesh_proxy_msg_recv+0x90>
   1fac6:	bf00      	nop
   1fac8:	2000a318 	.word	0x2000a318

0001facc <bt_mesh_proxy_msg_send>:

int bt_mesh_proxy_msg_send(struct bt_conn *conn, uint8_t type,
			   struct net_buf_simple *msg,
			   bt_gatt_complete_func_t end, void *user_data)
{
   1facc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fad0:	b085      	sub	sp, #20
   1fad2:	9302      	str	r3, [sp, #8]
   1fad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fad6:	4689      	mov	r9, r1
   1fad8:	4614      	mov	r4, r2
   1fada:	9303      	str	r3, [sp, #12]
   1fadc:	4606      	mov	r6, r0
	int err;
	uint16_t mtu;
	struct bt_mesh_proxy_role *role = &roles[bt_conn_index(conn)];
   1fade:	f7f1 fc0f 	bl	11300 <bt_conn_index>
   1fae2:	4607      	mov	r7, r0

	LOG_DBG("conn %p type 0x%02x len %u: %s", (void *)conn, type, msg->len,
		bt_hex(msg->data, msg->len));

	/* ATT_MTU - OpCode (1 byte) - Handle (2 bytes) */
	mtu = bt_gatt_get_mtu(conn) - 3;
   1fae4:	4630      	mov	r0, r6
   1fae6:	f00c fa51 	bl	2bf8c <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   1faea:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   1faec:	1ec5      	subs	r5, r0, #3
   1faee:	b2ad      	uxth	r5, r5
	if (mtu > msg->len) {
   1faf0:	42ab      	cmp	r3, r5
   1faf2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1fb98 <bt_mesh_proxy_msg_send+0xcc>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1faf6:	f009 0b3f 	and.w	fp, r9, #63	; 0x3f
	if (mtu > msg->len) {
   1fafa:	d212      	bcs.n	1fb22 <bt_mesh_proxy_msg_send+0x56>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1fafc:	4659      	mov	r1, fp

	net_buf_simple_pull(msg, mtu);

	while (msg->len) {
		if (msg->len + 1 <= mtu) {
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1fafe:	4620      	mov	r0, r4
   1fb00:	f00e f9a9 	bl	2de56 <net_buf_simple_push_u8>
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   1fb04:	2350      	movs	r3, #80	; 0x50
   1fb06:	fb03 a307 	mla	r3, r3, r7, sl
   1fb0a:	9a03      	ldr	r2, [sp, #12]
   1fb0c:	4630      	mov	r0, r6
   1fb0e:	920e      	str	r2, [sp, #56]	; 0x38
   1fb10:	689d      	ldr	r5, [r3, #8]
   1fb12:	88a2      	ldrh	r2, [r4, #4]
   1fb14:	46ac      	mov	ip, r5
   1fb16:	9b02      	ldr	r3, [sp, #8]
   1fb18:	6821      	ldr	r1, [r4, #0]

		net_buf_simple_pull(msg, mtu);
	}

	return 0;
}
   1fb1a:	b005      	add	sp, #20
   1fb1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			err = role->cb.send(conn, msg->data, msg->len, end, user_data);
   1fb20:	4760      	bx	ip
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   1fb22:	4620      	mov	r0, r4
   1fb24:	f04b 0140 	orr.w	r1, fp, #64	; 0x40
   1fb28:	f00e f995 	bl	2de56 <net_buf_simple_push_u8>
	err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   1fb2c:	2250      	movs	r2, #80	; 0x50
   1fb2e:	2300      	movs	r3, #0
   1fb30:	fb02 a207 	mla	r2, r2, r7, sl
   1fb34:	9300      	str	r3, [sp, #0]
   1fb36:	f8d2 8008 	ldr.w	r8, [r2, #8]
   1fb3a:	4630      	mov	r0, r6
   1fb3c:	462a      	mov	r2, r5
   1fb3e:	6821      	ldr	r1, [r4, #0]
   1fb40:	47c0      	blx	r8
	if (err) {
   1fb42:	4680      	mov	r8, r0
   1fb44:	b938      	cbnz	r0, 1fb56 <bt_mesh_proxy_msg_send+0x8a>
	net_buf_simple_pull(msg, mtu);
   1fb46:	4629      	mov	r1, r5
   1fb48:	4620      	mov	r0, r4
   1fb4a:	f000 fbcd 	bl	202e8 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1fb4e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
	while (msg->len) {
   1fb52:	88a3      	ldrh	r3, [r4, #4]
   1fb54:	b91b      	cbnz	r3, 1fb5e <bt_mesh_proxy_msg_send+0x92>
}
   1fb56:	4640      	mov	r0, r8
   1fb58:	b005      	add	sp, #20
   1fb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (msg->len + 1 <= mtu) {
   1fb5e:	429d      	cmp	r5, r3
   1fb60:	d902      	bls.n	1fb68 <bt_mesh_proxy_msg_send+0x9c>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1fb62:	f049 01c0 	orr.w	r1, r9, #192	; 0xc0
   1fb66:	e7ca      	b.n	1fafe <bt_mesh_proxy_msg_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1fb68:	4659      	mov	r1, fp
   1fb6a:	4620      	mov	r0, r4
   1fb6c:	f00e f973 	bl	2de56 <net_buf_simple_push_u8>
		err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   1fb70:	2250      	movs	r2, #80	; 0x50
   1fb72:	2300      	movs	r3, #0
   1fb74:	fb02 a207 	mla	r2, r2, r7, sl
   1fb78:	9300      	str	r3, [sp, #0]
   1fb7a:	6892      	ldr	r2, [r2, #8]
   1fb7c:	4630      	mov	r0, r6
   1fb7e:	4694      	mov	ip, r2
   1fb80:	6821      	ldr	r1, [r4, #0]
   1fb82:	462a      	mov	r2, r5
   1fb84:	47e0      	blx	ip
		if (err) {
   1fb86:	b920      	cbnz	r0, 1fb92 <bt_mesh_proxy_msg_send+0xc6>
		net_buf_simple_pull(msg, mtu);
   1fb88:	4629      	mov	r1, r5
   1fb8a:	4620      	mov	r0, r4
   1fb8c:	f000 fbac 	bl	202e8 <net_buf_simple_pull>
   1fb90:	e7df      	b.n	1fb52 <bt_mesh_proxy_msg_send+0x86>
		err = role->cb.send(conn, msg->data, mtu, NULL, NULL);
   1fb92:	4680      	mov	r8, r0
   1fb94:	e7df      	b.n	1fb56 <bt_mesh_proxy_msg_send+0x8a>
   1fb96:	bf00      	nop
   1fb98:	2000a318 	.word	0x2000a318

0001fb9c <bt_mesh_proxy_relay_send>:

int bt_mesh_proxy_relay_send(struct bt_conn *conn, struct net_buf *buf)
{
	int err;

	NET_BUF_SIMPLE_DEFINE(msg, 1 + BT_MESH_NET_MAX_PDU_LEN);
   1fb9c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
{
   1fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fba2:	460d      	mov	r5, r1
   1fba4:	b08f      	sub	sp, #60	; 0x3c
   1fba6:	af02      	add	r7, sp, #8
	NET_BUF_SIMPLE_DEFINE(msg, 1 + BT_MESH_NET_MAX_PDU_LEN);
   1fba8:	f107 0310 	add.w	r3, r7, #16
   1fbac:	e9c7 2302 	strd	r2, r3, [r7, #8]
{
   1fbb0:	4604      	mov	r4, r0

	/* Proxy PDU sending modifies the original buffer,
	 * so we need to make a copy.
	 */
	net_buf_simple_reserve(&msg, 1);
   1fbb2:	2101      	movs	r1, #1
   1fbb4:	1d38      	adds	r0, r7, #4
	NET_BUF_SIMPLE_DEFINE(msg, 1 + BT_MESH_NET_MAX_PDU_LEN);
   1fbb6:	607b      	str	r3, [r7, #4]
	net_buf_simple_reserve(&msg, 1);
   1fbb8:	f000 f9b8 	bl	1ff2c <net_buf_simple_reserve>
	net_buf_simple_add_mem(&msg, buf->data, buf->len);
   1fbbc:	8a2a      	ldrh	r2, [r5, #16]
   1fbbe:	68e9      	ldr	r1, [r5, #12]
   1fbc0:	1d38      	adds	r0, r7, #4
   1fbc2:	f00e f98a 	bl	2deda <net_buf_simple_add_mem>

	err = bt_mesh_proxy_msg_send(conn, BT_MESH_PROXY_NET_PDU,
				     &msg, buf_send_end, net_buf_ref(buf));
   1fbc6:	4628      	mov	r0, r5
   1fbc8:	f000 faca 	bl	20160 <net_buf_ref>
	err = bt_mesh_proxy_msg_send(conn, BT_MESH_PROXY_NET_PDU,
   1fbcc:	4b19      	ldr	r3, [pc, #100]	; (1fc34 <bt_mesh_proxy_relay_send+0x98>)
   1fbce:	9000      	str	r0, [sp, #0]
   1fbd0:	2100      	movs	r1, #0
   1fbd2:	4620      	mov	r0, r4
   1fbd4:	1d3a      	adds	r2, r7, #4
   1fbd6:	f7ff ff79 	bl	1facc <bt_mesh_proxy_msg_send>

	bt_mesh_adv_send_start(0, err, BT_MESH_ADV(buf));
   1fbda:	69ae      	ldr	r6, [r5, #24]
	err = bt_mesh_proxy_msg_send(conn, BT_MESH_PROXY_NET_PDU,
   1fbdc:	4604      	mov	r4, r0
	if (!adv->started) {
   1fbde:	7a33      	ldrb	r3, [r6, #8]
   1fbe0:	f013 0004 	ands.w	r0, r3, #4
   1fbe4:	d120      	bne.n	1fc28 <bt_mesh_proxy_relay_send+0x8c>
		adv->started = 1;
   1fbe6:	f043 0304 	orr.w	r3, r3, #4
   1fbea:	7233      	strb	r3, [r6, #8]
		if (adv->cb && adv->cb->start) {
   1fbec:	6833      	ldr	r3, [r6, #0]
   1fbee:	b123      	cbz	r3, 1fbfa <bt_mesh_proxy_relay_send+0x5e>
   1fbf0:	681b      	ldr	r3, [r3, #0]
   1fbf2:	b113      	cbz	r3, 1fbfa <bt_mesh_proxy_relay_send+0x5e>
			adv->cb->start(duration, err, adv->cb_data);
   1fbf4:	4621      	mov	r1, r4
   1fbf6:	6872      	ldr	r2, [r6, #4]
   1fbf8:	4798      	blx	r3
		if (err) {
   1fbfa:	b1bc      	cbz	r4, 1fc2c <bt_mesh_proxy_relay_send+0x90>
			adv->cb = NULL;
   1fbfc:	2300      	movs	r3, #0
   1fbfe:	6033      	str	r3, [r6, #0]
	if (err) {
		LOG_ERR("Failed to send proxy message (err %d)", err);
   1fc00:	466e      	mov	r6, sp
   1fc02:	b088      	sub	sp, #32
   1fc04:	aa02      	add	r2, sp, #8
   1fc06:	4b0c      	ldr	r3, [pc, #48]	; (1fc38 <bt_mesh_proxy_relay_send+0x9c>)
   1fc08:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1fc0c:	2303      	movs	r3, #3
   1fc0e:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc12:	2300      	movs	r3, #0
   1fc14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc18:	4808      	ldr	r0, [pc, #32]	; (1fc3c <bt_mesh_proxy_relay_send+0xa0>)
   1fc1a:	f7ea ff9f 	bl	ab5c <z_impl_z_log_msg_static_create>
		/* If segment_and_send() fails the buf_send_end() callback will
		 * not be called, so we need to clear the user data (net_buf,
		 * which is just opaque data to segment_and send) reference given
		 * to segment_and_send() here.
		 */
		net_buf_unref(buf);
   1fc1e:	4628      	mov	r0, r5
   1fc20:	46b5      	mov	sp, r6
   1fc22:	f000 fa5b 	bl	200dc <net_buf_unref>
	}

	return err;
   1fc26:	e001      	b.n	1fc2c <bt_mesh_proxy_relay_send+0x90>
	if (err) {
   1fc28:	2c00      	cmp	r4, #0
   1fc2a:	d1e9      	bne.n	1fc00 <bt_mesh_proxy_relay_send+0x64>
}
   1fc2c:	4620      	mov	r0, r4
   1fc2e:	3734      	adds	r7, #52	; 0x34
   1fc30:	46bd      	mov	sp, r7
   1fc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc34:	0002ddf7 	.word	0x0002ddf7
   1fc38:	00034605 	.word	0x00034605
   1fc3c:	0002fd04 	.word	0x0002fd04

0001fc40 <bt_mesh_proxy_role_setup>:
}

struct bt_mesh_proxy_role *bt_mesh_proxy_role_setup(struct bt_conn *conn,
						    proxy_send_cb_t send,
						    proxy_recv_cb_t recv)
{
   1fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc44:	4690      	mov	r8, r2
	struct bt_mesh_proxy_role *role;

	conn_count++;
   1fc46:	4a21      	ldr	r2, [pc, #132]	; (1fccc <bt_mesh_proxy_role_setup+0x8c>)
{
   1fc48:	4682      	mov	sl, r0
	conn_count++;
   1fc4a:	6813      	ldr	r3, [r2, #0]
{
   1fc4c:	460f      	mov	r7, r1
	conn_count++;
   1fc4e:	3301      	adds	r3, #1
   1fc50:	6013      	str	r3, [r2, #0]

	role = &roles[bt_conn_index(conn)];
   1fc52:	f7f1 fb55 	bl	11300 <bt_conn_index>
   1fc56:	4606      	mov	r6, r0
   1fc58:	b204      	sxth	r4, r0

	role->conn = bt_conn_ref(conn);
   1fc5a:	4650      	mov	r0, sl
   1fc5c:	f7f1 fa4a 	bl	110f4 <bt_conn_ref>
   1fc60:	2350      	movs	r3, #80	; 0x50
   1fc62:	4373      	muls	r3, r6
	role = &roles[bt_conn_index(conn)];
   1fc64:	4d1a      	ldr	r5, [pc, #104]	; (1fcd0 <bt_mesh_proxy_role_setup+0x90>)
   1fc66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	role->conn = bt_conn_ref(conn);
   1fc6a:	18ea      	adds	r2, r5, r3
	if (role->buf.__buf) {
   1fc6c:	f8d2 a048 	ldr.w	sl, [r2, #72]	; 0x48
   1fc70:	ea4f 1904 	mov.w	r9, r4, lsl #4
	role->conn = bt_conn_ref(conn);
   1fc74:	50e8      	str	r0, [r5, r3]
	role = &roles[bt_conn_index(conn)];
   1fc76:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	if (role->buf.__buf) {
   1fc7a:	f1ba 0f00 	cmp.w	sl, #0
   1fc7e:	d00c      	beq.n	1fc9a <bt_mesh_proxy_role_setup+0x5a>
   1fc80:	2300      	movs	r3, #0
	buf->data = buf->__buf;
   1fc82:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	buf->len  = 0U;
   1fc86:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	proxy_msg_init(role);

	role->cb.recv = recv;
   1fc8a:	2350      	movs	r3, #80	; 0x50
   1fc8c:	fb03 5506 	mla	r5, r3, r6, r5
	role->cb.send = send;
   1fc90:	e9c5 7802 	strd	r7, r8, [r5, #8]

	return role;
}
   1fc94:	4620      	mov	r0, r4
   1fc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				      &bufs[bt_conn_index(role->conn) *
   1fc9a:	f7f1 fb31 	bl	11300 <bt_conn_index>
	net_buf_simple_init_with_data(&role->buf,
   1fc9e:	490d      	ldr	r1, [pc, #52]	; (1fcd4 <bt_mesh_proxy_role_setup+0x94>)
				      &bufs[bt_conn_index(role->conn) *
   1fca0:	b203      	sxth	r3, r0
   1fca2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
	net_buf_simple_init_with_data(&role->buf,
   1fca6:	f109 0040 	add.w	r0, r9, #64	; 0x40
   1fcaa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   1fcae:	4428      	add	r0, r5
   1fcb0:	2242      	movs	r2, #66	; 0x42
   1fcb2:	f00e f8bb 	bl	2de2c <net_buf_simple_init_with_data>
	buf->data = buf->__buf;
   1fcb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	k_work_init_delayable(&role->sar_timer, proxy_sar_timeout);
   1fcb8:	f109 0010 	add.w	r0, r9, #16
   1fcbc:	4906      	ldr	r1, [pc, #24]	; (1fcd8 <bt_mesh_proxy_role_setup+0x98>)
	buf->len  = 0U;
   1fcbe:	f8a4 a044 	strh.w	sl, [r4, #68]	; 0x44
	buf->data = buf->__buf;
   1fcc2:	6423      	str	r3, [r4, #64]	; 0x40
   1fcc4:	4428      	add	r0, r5
   1fcc6:	f006 fbed 	bl	264a4 <k_work_init_delayable>
   1fcca:	e7de      	b.n	1fc8a <bt_mesh_proxy_role_setup+0x4a>
   1fccc:	2000ae5c 	.word	0x2000ae5c
   1fcd0:	2000a318 	.word	0x2000a318
   1fcd4:	200131a0 	.word	0x200131a0
   1fcd8:	0002ddfd 	.word	0x0002ddfd

0001fcdc <bt_mesh_proxy_role_cleanup>:

void bt_mesh_proxy_role_cleanup(struct bt_mesh_proxy_role *role)
{
   1fcdc:	b510      	push	{r4, lr}
   1fcde:	4604      	mov	r4, r0
	/* If this fails, the work handler exits early, as
	 * there's no active connection.
	 */
	(void)k_work_cancel_delayable(&role->sar_timer);
   1fce0:	3010      	adds	r0, #16
   1fce2:	f006 fccf 	bl	26684 <k_work_cancel_delayable>
	bt_conn_unref(role->conn);
   1fce6:	6820      	ldr	r0, [r4, #0]
   1fce8:	f7f1 fa28 	bl	1113c <bt_conn_unref>
	role->conn = NULL;
   1fcec:	2300      	movs	r3, #0

	conn_count--;
   1fcee:	4a04      	ldr	r2, [pc, #16]	; (1fd00 <bt_mesh_proxy_role_cleanup+0x24>)
	role->conn = NULL;
   1fcf0:	6023      	str	r3, [r4, #0]
	conn_count--;
   1fcf2:	6813      	ldr	r3, [r2, #0]
   1fcf4:	3b01      	subs	r3, #1
   1fcf6:	6013      	str	r3, [r2, #0]

	bt_mesh_adv_gatt_update();
}
   1fcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_gatt_update();
   1fcfc:	f7fb bf3e 	b.w	1bb7c <bt_mesh_adv_gatt_update>
   1fd00:	2000ae5c 	.word	0x2000ae5c

0001fd04 <bt_mesh_proxy_has_avail_conn>:

bool bt_mesh_proxy_has_avail_conn(void)
{
	return conn_count < CONFIG_BT_MESH_MAX_CONN;
   1fd04:	4b03      	ldr	r3, [pc, #12]	; (1fd14 <bt_mesh_proxy_has_avail_conn+0x10>)
   1fd06:	6818      	ldr	r0, [r3, #0]
}
   1fd08:	2800      	cmp	r0, #0
   1fd0a:	bfcc      	ite	gt
   1fd0c:	2000      	movgt	r0, #0
   1fd0e:	2001      	movle	r0, #1
   1fd10:	4770      	bx	lr
   1fd12:	bf00      	nop
   1fd14:	2000ae5c 	.word	0x2000ae5c

0001fd18 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1fd18:	2234      	movs	r2, #52	; 0x34
   1fd1a:	4b02      	ldr	r3, [pc, #8]	; (1fd24 <net_buf_pool_get+0xc>)
   1fd1c:	fb02 3000 	mla	r0, r2, r0, r3
   1fd20:	4770      	bx	lr
   1fd22:	bf00      	nop
   1fd24:	20008ef0 	.word	0x20008ef0

0001fd28 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fd28:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd2a:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fd2c:	4b06      	ldr	r3, [pc, #24]	; (1fd48 <net_buf_id+0x20>)
   1fd2e:	fb01 3302 	mla	r3, r1, r2, r3
   1fd32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fd34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fd38:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fd3a:	331b      	adds	r3, #27
   1fd3c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1fd40:	fbb0 f0f3 	udiv	r0, r0, r3
   1fd44:	4770      	bx	lr
   1fd46:	bf00      	nop
   1fd48:	20008ef0 	.word	0x20008ef0

0001fd4c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1fd4c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd4e:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd50:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd52:	4b09      	ldr	r3, [pc, #36]	; (1fd78 <fixed_data_alloc+0x2c>)
   1fd54:	fb04 3302 	mla	r3, r4, r2, r3
   1fd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1fd5a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd5c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fd5e:	681a      	ldr	r2, [r3, #0]
   1fd60:	4294      	cmp	r4, r2
   1fd62:	bf94      	ite	ls
   1fd64:	600c      	strls	r4, [r1, #0]
   1fd66:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fd68:	e9d3 5400 	ldrd	r5, r4, [r3]
   1fd6c:	f7ff ffdc 	bl	1fd28 <net_buf_id>
}
   1fd70:	fb05 4000 	mla	r0, r5, r0, r4
   1fd74:	bd38      	pop	{r3, r4, r5, pc}
   1fd76:	bf00      	nop
   1fd78:	20008ef0 	.word	0x20008ef0

0001fd7c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd80:	b085      	sub	sp, #20
   1fd82:	9103      	str	r1, [sp, #12]
   1fd84:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fd86:	4619      	mov	r1, r3
   1fd88:	4610      	mov	r0, r2
{
   1fd8a:	4691      	mov	r9, r2
   1fd8c:	4698      	mov	r8, r3
   1fd8e:	4617      	mov	r7, r2
   1fd90:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fd92:	f00f fbee 	bl	2f572 <sys_clock_timeout_end_calc>
   1fd96:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1fd9a:	b93d      	cbnz	r5, 1fdac <net_buf_alloc_len+0x30>
   1fd9c:	495e      	ldr	r1, [pc, #376]	; (1ff18 <net_buf_alloc_len+0x19c>)
   1fd9e:	22f4      	movs	r2, #244	; 0xf4
   1fda0:	485e      	ldr	r0, [pc, #376]	; (1ff1c <net_buf_alloc_len+0x1a0>)
   1fda2:	f008 ff0f 	bl	28bc4 <assert_print>
   1fda6:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1fda8:	485b      	ldr	r0, [pc, #364]	; (1ff18 <net_buf_alloc_len+0x19c>)
   1fdaa:	e014      	b.n	1fdd6 <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   1fdac:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1fdb0:	f04f 0320 	mov.w	r3, #32
   1fdb4:	f3ef 8b11 	mrs	fp, BASEPRI
   1fdb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fdc0:	4650      	mov	r0, sl
   1fdc2:	f005 fd31 	bl	25828 <z_spin_lock_valid>
   1fdc6:	b940      	cbnz	r0, 1fdda <net_buf_alloc_len+0x5e>
   1fdc8:	4955      	ldr	r1, [pc, #340]	; (1ff20 <net_buf_alloc_len+0x1a4>)
   1fdca:	2294      	movs	r2, #148	; 0x94
   1fdcc:	4853      	ldr	r0, [pc, #332]	; (1ff1c <net_buf_alloc_len+0x1a0>)
   1fdce:	f008 fef9 	bl	28bc4 <assert_print>
   1fdd2:	2194      	movs	r1, #148	; 0x94
   1fdd4:	4852      	ldr	r0, [pc, #328]	; (1ff20 <net_buf_alloc_len+0x1a4>)
   1fdd6:	f008 feee 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fdda:	4650      	mov	r0, sl
   1fddc:	f005 fd40 	bl	25860 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1fde0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1fde2:	2b00      	cmp	r3, #0
   1fde4:	d06a      	beq.n	1febc <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   1fde6:	8c2a      	ldrh	r2, [r5, #32]
   1fde8:	429a      	cmp	r2, r3
   1fdea:	d947      	bls.n	1fe7c <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   1fdec:	2200      	movs	r2, #0
   1fdee:	2300      	movs	r3, #0
   1fdf0:	4628      	mov	r0, r5
   1fdf2:	f005 ff19 	bl	25c28 <z_impl_k_queue_get>
			if (buf) {
   1fdf6:	4604      	mov	r4, r0
   1fdf8:	2800      	cmp	r0, #0
   1fdfa:	d03f      	beq.n	1fe7c <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdfc:	4650      	mov	r0, sl
   1fdfe:	f005 fd21 	bl	25844 <z_spin_unlock_valid>
   1fe02:	b930      	cbnz	r0, 1fe12 <net_buf_alloc_len+0x96>
   1fe04:	4946      	ldr	r1, [pc, #280]	; (1ff20 <net_buf_alloc_len+0x1a4>)
   1fe06:	22c2      	movs	r2, #194	; 0xc2
   1fe08:	4844      	ldr	r0, [pc, #272]	; (1ff1c <net_buf_alloc_len+0x1a0>)
   1fe0a:	f008 fedb 	bl	28bc4 <assert_print>
   1fe0e:	21c2      	movs	r1, #194	; 0xc2
   1fe10:	e7e0      	b.n	1fdd4 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1fe12:	f38b 8811 	msr	BASEPRI, fp
   1fe16:	f3bf 8f6f 	isb	sy
	if (size) {
   1fe1a:	9d03      	ldr	r5, [sp, #12]
   1fe1c:	2d00      	cmp	r5, #0
   1fe1e:	d06f      	beq.n	1ff00 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1fe20:	ea58 0309 	orrs.w	r3, r8, r9
   1fe24:	d010      	beq.n	1fe48 <net_buf_alloc_len+0xcc>
   1fe26:	f1b8 3fff 	cmp.w	r8, #4294967295
   1fe2a:	bf08      	it	eq
   1fe2c:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1fe30:	d00a      	beq.n	1fe48 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1fe32:	f007 ff9d 	bl	27d70 <sys_clock_tick_get>
   1fe36:	9b01      	ldr	r3, [sp, #4]
   1fe38:	1a1f      	subs	r7, r3, r0
   1fe3a:	9b02      	ldr	r3, [sp, #8]
   1fe3c:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1fe40:	2e00      	cmp	r6, #0
   1fe42:	bfbc      	itt	lt
   1fe44:	2700      	movlt	r7, #0
   1fe46:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fe48:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fe4c:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fe4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1ff24 <net_buf_alloc_len+0x1a8>
   1fe52:	463a      	mov	r2, r7
   1fe54:	fb09 8303 	mla	r3, r9, r3, r8
   1fe58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe5a:	4620      	mov	r0, r4
   1fe5c:	681b      	ldr	r3, [r3, #0]
   1fe5e:	a903      	add	r1, sp, #12
   1fe60:	f8d3 a000 	ldr.w	sl, [r3]
   1fe64:	4633      	mov	r3, r6
   1fe66:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1fe68:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1fe6a:	2800      	cmp	r0, #0
   1fe6c:	d13c      	bne.n	1fee8 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   1fe6e:	7aa0      	ldrb	r0, [r4, #10]
   1fe70:	4621      	mov	r1, r4
   1fe72:	fb00 8009 	mla	r0, r0, r9, r8
   1fe76:	f00f fac3 	bl	2f400 <k_queue_prepend>
}
   1fe7a:	e030      	b.n	1fede <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   1fe7c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1fe7e:	4650      	mov	r0, sl
   1fe80:	1e63      	subs	r3, r4, #1
   1fe82:	846b      	strh	r3, [r5, #34]	; 0x22
   1fe84:	f005 fcde 	bl	25844 <z_spin_unlock_valid>
   1fe88:	2800      	cmp	r0, #0
   1fe8a:	d0bb      	beq.n	1fe04 <net_buf_alloc_len+0x88>
   1fe8c:	f38b 8811 	msr	BASEPRI, fp
   1fe90:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fe94:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1fe98:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fe9a:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1fe9c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1fe9e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fea0:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1fea4:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1fea8:	4b1e      	ldr	r3, [pc, #120]	; (1ff24 <net_buf_alloc_len+0x1a8>)
   1feaa:	4a1f      	ldr	r2, [pc, #124]	; (1ff28 <net_buf_alloc_len+0x1ac>)
   1feac:	1aeb      	subs	r3, r5, r3
   1feae:	109b      	asrs	r3, r3, #2
   1feb0:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1feb2:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1feb4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1feb8:	72e3      	strb	r3, [r4, #11]
		goto success;
   1feba:	e7ae      	b.n	1fe1a <net_buf_alloc_len+0x9e>
   1febc:	4650      	mov	r0, sl
   1febe:	f005 fcc1 	bl	25844 <z_spin_unlock_valid>
   1fec2:	2800      	cmp	r0, #0
   1fec4:	d09e      	beq.n	1fe04 <net_buf_alloc_len+0x88>
   1fec6:	f38b 8811 	msr	BASEPRI, fp
   1feca:	f3bf 8f6f 	isb	sy
   1fece:	464a      	mov	r2, r9
   1fed0:	4643      	mov	r3, r8
   1fed2:	4628      	mov	r0, r5
   1fed4:	f005 fea8 	bl	25c28 <z_impl_k_queue_get>
	if (!buf) {
   1fed8:	4604      	mov	r4, r0
   1feda:	2800      	cmp	r0, #0
   1fedc:	d19d      	bne.n	1fe1a <net_buf_alloc_len+0x9e>
		return NULL;
   1fede:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1fee0:	4620      	mov	r0, r4
   1fee2:	b005      	add	sp, #20
   1fee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1fee8:	9b03      	ldr	r3, [sp, #12]
   1feea:	429d      	cmp	r5, r3
   1feec:	d909      	bls.n	1ff02 <net_buf_alloc_len+0x186>
   1feee:	490a      	ldr	r1, [pc, #40]	; (1ff18 <net_buf_alloc_len+0x19c>)
   1fef0:	f240 1255 	movw	r2, #341	; 0x155
   1fef4:	4809      	ldr	r0, [pc, #36]	; (1ff1c <net_buf_alloc_len+0x1a0>)
   1fef6:	f008 fe65 	bl	28bc4 <assert_print>
   1fefa:	f240 1155 	movw	r1, #341	; 0x155
   1fefe:	e753      	b.n	1fda8 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1ff00:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1ff02:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ff04:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ff06:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ff08:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ff0a:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ff0c:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1ff0e:	6963      	ldr	r3, [r4, #20]
   1ff10:	8262      	strh	r2, [r4, #18]
   1ff12:	60e3      	str	r3, [r4, #12]
}
   1ff14:	e7e4      	b.n	1fee0 <net_buf_alloc_len+0x164>
   1ff16:	bf00      	nop
   1ff18:	00034639 	.word	0x00034639
   1ff1c:	00030da5 	.word	0x00030da5
   1ff20:	00030eb4 	.word	0x00030eb4
   1ff24:	20008ef0 	.word	0x20008ef0
   1ff28:	c4ec4ec5 	.word	0xc4ec4ec5

0001ff2c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ff2c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ff2e:	b950      	cbnz	r0, 1ff46 <net_buf_simple_reserve+0x1a>
   1ff30:	490c      	ldr	r1, [pc, #48]	; (1ff64 <net_buf_simple_reserve+0x38>)
   1ff32:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1ff36:	480c      	ldr	r0, [pc, #48]	; (1ff68 <net_buf_simple_reserve+0x3c>)
   1ff38:	f008 fe44 	bl	28bc4 <assert_print>
   1ff3c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1ff40:	4808      	ldr	r0, [pc, #32]	; (1ff64 <net_buf_simple_reserve+0x38>)
   1ff42:	f008 fe38 	bl	28bb6 <assert_post_action>
   1ff46:	8883      	ldrh	r3, [r0, #4]
   1ff48:	b143      	cbz	r3, 1ff5c <net_buf_simple_reserve+0x30>
   1ff4a:	4906      	ldr	r1, [pc, #24]	; (1ff64 <net_buf_simple_reserve+0x38>)
   1ff4c:	f240 12b9 	movw	r2, #441	; 0x1b9
   1ff50:	4805      	ldr	r0, [pc, #20]	; (1ff68 <net_buf_simple_reserve+0x3c>)
   1ff52:	f008 fe37 	bl	28bc4 <assert_print>
   1ff56:	f240 11b9 	movw	r1, #441	; 0x1b9
   1ff5a:	e7f1      	b.n	1ff40 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ff5c:	6883      	ldr	r3, [r0, #8]
   1ff5e:	440b      	add	r3, r1
   1ff60:	6003      	str	r3, [r0, #0]
}
   1ff62:	bd08      	pop	{r3, pc}
   1ff64:	00034639 	.word	0x00034639
   1ff68:	00030da5 	.word	0x00030da5

0001ff6c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ff6c:	b570      	push	{r4, r5, r6, lr}
   1ff6e:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ff70:	4605      	mov	r5, r0
   1ff72:	b950      	cbnz	r0, 1ff8a <net_buf_slist_put+0x1e>
   1ff74:	4922      	ldr	r1, [pc, #136]	; (20000 <net_buf_slist_put+0x94>)
   1ff76:	f240 12c5 	movw	r2, #453	; 0x1c5
   1ff7a:	4822      	ldr	r0, [pc, #136]	; (20004 <net_buf_slist_put+0x98>)
   1ff7c:	f008 fe22 	bl	28bc4 <assert_print>
   1ff80:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1ff84:	481e      	ldr	r0, [pc, #120]	; (20000 <net_buf_slist_put+0x94>)
   1ff86:	f008 fe16 	bl	28bb6 <assert_post_action>
   1ff8a:	b941      	cbnz	r1, 1ff9e <net_buf_slist_put+0x32>
   1ff8c:	491c      	ldr	r1, [pc, #112]	; (20000 <net_buf_slist_put+0x94>)
   1ff8e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1ff92:	481c      	ldr	r0, [pc, #112]	; (20004 <net_buf_slist_put+0x98>)
   1ff94:	f008 fe16 	bl	28bc4 <assert_print>
   1ff98:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1ff9c:	e7f2      	b.n	1ff84 <net_buf_slist_put+0x18>
	__asm__ volatile(
   1ff9e:	f04f 0320 	mov.w	r3, #32
   1ffa2:	f3ef 8611 	mrs	r6, BASEPRI
   1ffa6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffae:	4816      	ldr	r0, [pc, #88]	; (20008 <net_buf_slist_put+0x9c>)
   1ffb0:	f005 fc3a 	bl	25828 <z_spin_lock_valid>
   1ffb4:	b938      	cbnz	r0, 1ffc6 <net_buf_slist_put+0x5a>
   1ffb6:	4915      	ldr	r1, [pc, #84]	; (2000c <net_buf_slist_put+0xa0>)
   1ffb8:	2294      	movs	r2, #148	; 0x94
   1ffba:	4812      	ldr	r0, [pc, #72]	; (20004 <net_buf_slist_put+0x98>)
   1ffbc:	f008 fe02 	bl	28bc4 <assert_print>
   1ffc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffc2:	4812      	ldr	r0, [pc, #72]	; (2000c <net_buf_slist_put+0xa0>)
   1ffc4:	e7df      	b.n	1ff86 <net_buf_slist_put+0x1a>
	z_spin_lock_set_owner(l);
   1ffc6:	4810      	ldr	r0, [pc, #64]	; (20008 <net_buf_slist_put+0x9c>)
   1ffc8:	f005 fc4a 	bl	25860 <z_spin_lock_set_owner>
	parent->next = child;
   1ffcc:	2300      	movs	r3, #0
   1ffce:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ffd0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ffd2:	b963      	cbnz	r3, 1ffee <net_buf_slist_put+0x82>
	list->head = node;
   1ffd4:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffd8:	480b      	ldr	r0, [pc, #44]	; (20008 <net_buf_slist_put+0x9c>)
   1ffda:	f005 fc33 	bl	25844 <z_spin_unlock_valid>
   1ffde:	b948      	cbnz	r0, 1fff4 <net_buf_slist_put+0x88>
   1ffe0:	490a      	ldr	r1, [pc, #40]	; (2000c <net_buf_slist_put+0xa0>)
   1ffe2:	22c2      	movs	r2, #194	; 0xc2
   1ffe4:	4807      	ldr	r0, [pc, #28]	; (20004 <net_buf_slist_put+0x98>)
   1ffe6:	f008 fded 	bl	28bc4 <assert_print>
   1ffea:	21c2      	movs	r1, #194	; 0xc2
   1ffec:	e7e9      	b.n	1ffc2 <net_buf_slist_put+0x56>
	parent->next = child;
   1ffee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fff0:	606c      	str	r4, [r5, #4]
}
   1fff2:	e7f1      	b.n	1ffd8 <net_buf_slist_put+0x6c>
	__asm__ volatile(
   1fff4:	f386 8811 	msr	BASEPRI, r6
   1fff8:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1fffc:	bd70      	pop	{r4, r5, r6, pc}
   1fffe:	bf00      	nop
   20000:	00034639 	.word	0x00034639
   20004:	00030da5 	.word	0x00030da5
   20008:	2000ae60 	.word	0x2000ae60
   2000c:	00030eb4 	.word	0x00030eb4

00020010 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   20010:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   20012:	4604      	mov	r4, r0
   20014:	b950      	cbnz	r0, 2002c <net_buf_slist_get+0x1c>
   20016:	491d      	ldr	r1, [pc, #116]	; (2008c <net_buf_slist_get+0x7c>)
   20018:	481d      	ldr	r0, [pc, #116]	; (20090 <net_buf_slist_get+0x80>)
   2001a:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   2001e:	f008 fdd1 	bl	28bc4 <assert_print>
   20022:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   20026:	4819      	ldr	r0, [pc, #100]	; (2008c <net_buf_slist_get+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20028:	f008 fdc5 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   2002c:	f04f 0320 	mov.w	r3, #32
   20030:	f3ef 8611 	mrs	r6, BASEPRI
   20034:	f383 8812 	msr	BASEPRI_MAX, r3
   20038:	f3bf 8f6f 	isb	sy
   2003c:	4815      	ldr	r0, [pc, #84]	; (20094 <net_buf_slist_get+0x84>)
   2003e:	f005 fbf3 	bl	25828 <z_spin_lock_valid>
   20042:	b938      	cbnz	r0, 20054 <net_buf_slist_get+0x44>
   20044:	4914      	ldr	r1, [pc, #80]	; (20098 <net_buf_slist_get+0x88>)
   20046:	2294      	movs	r2, #148	; 0x94
   20048:	4811      	ldr	r0, [pc, #68]	; (20090 <net_buf_slist_get+0x80>)
   2004a:	f008 fdbb 	bl	28bc4 <assert_print>
   2004e:	2194      	movs	r1, #148	; 0x94
   20050:	4811      	ldr	r0, [pc, #68]	; (20098 <net_buf_slist_get+0x88>)
   20052:	e7e9      	b.n	20028 <net_buf_slist_get+0x18>
	z_spin_lock_set_owner(l);
   20054:	480f      	ldr	r0, [pc, #60]	; (20094 <net_buf_slist_get+0x84>)
   20056:	f005 fc03 	bl	25860 <z_spin_lock_set_owner>
	return list->head;
   2005a:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2005c:	b12d      	cbz	r5, 2006a <net_buf_slist_get+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2005e:	6862      	ldr	r2, [r4, #4]
	return node->next;
   20060:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20062:	4295      	cmp	r5, r2
	list->head = node;
   20064:	6023      	str	r3, [r4, #0]
	list->tail = node;
   20066:	bf08      	it	eq
   20068:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2006a:	480a      	ldr	r0, [pc, #40]	; (20094 <net_buf_slist_get+0x84>)
   2006c:	f005 fbea 	bl	25844 <z_spin_unlock_valid>
   20070:	b930      	cbnz	r0, 20080 <net_buf_slist_get+0x70>
   20072:	4909      	ldr	r1, [pc, #36]	; (20098 <net_buf_slist_get+0x88>)
   20074:	22c2      	movs	r2, #194	; 0xc2
   20076:	4806      	ldr	r0, [pc, #24]	; (20090 <net_buf_slist_get+0x80>)
   20078:	f008 fda4 	bl	28bc4 <assert_print>
   2007c:	21c2      	movs	r1, #194	; 0xc2
   2007e:	e7e7      	b.n	20050 <net_buf_slist_get+0x40>
	__asm__ volatile(
   20080:	f386 8811 	msr	BASEPRI, r6
   20084:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   20088:	4628      	mov	r0, r5
   2008a:	bd70      	pop	{r4, r5, r6, pc}
   2008c:	00034639 	.word	0x00034639
   20090:	00030da5 	.word	0x00030da5
   20094:	2000ae60 	.word	0x2000ae60
   20098:	00030eb4 	.word	0x00030eb4

0002009c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2009c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   2009e:	b950      	cbnz	r0, 200b6 <net_buf_put+0x1a>
   200a0:	490c      	ldr	r1, [pc, #48]	; (200d4 <net_buf_put+0x38>)
   200a2:	f240 12df 	movw	r2, #479	; 0x1df
   200a6:	480c      	ldr	r0, [pc, #48]	; (200d8 <net_buf_put+0x3c>)
   200a8:	f008 fd8c 	bl	28bc4 <assert_print>
   200ac:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   200b0:	4808      	ldr	r0, [pc, #32]	; (200d4 <net_buf_put+0x38>)
   200b2:	f008 fd80 	bl	28bb6 <assert_post_action>
   200b6:	b941      	cbnz	r1, 200ca <net_buf_put+0x2e>
   200b8:	4906      	ldr	r1, [pc, #24]	; (200d4 <net_buf_put+0x38>)
   200ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   200be:	4806      	ldr	r0, [pc, #24]	; (200d8 <net_buf_put+0x3c>)
   200c0:	f008 fd80 	bl	28bc4 <assert_print>
   200c4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   200c8:	e7f2      	b.n	200b0 <net_buf_put+0x14>

	k_fifo_put(fifo, buf);
}
   200ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   200ce:	f00f b98c 	b.w	2f3ea <k_queue_append>
   200d2:	bf00      	nop
   200d4:	00034639 	.word	0x00034639
   200d8:	00030da5 	.word	0x00030da5

000200dc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   200dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   200e0:	4605      	mov	r5, r0
   200e2:	b328      	cbz	r0, 20130 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   200e4:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   200e6:	f04f 0834 	mov.w	r8, #52	; 0x34
   200ea:	4e1a      	ldr	r6, [pc, #104]	; (20154 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   200ec:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   200ee:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   200f0:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   200f2:	3b01      	subs	r3, #1
   200f4:	b2db      	uxtb	r3, r3
   200f6:	7223      	strb	r3, [r4, #8]
   200f8:	b9c3      	cbnz	r3, 2012c <net_buf_unref+0x50>
		if (buf->__buf) {
   200fa:	6961      	ldr	r1, [r4, #20]
   200fc:	b159      	cbz	r1, 20116 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   200fe:	7a63      	ldrb	r3, [r4, #9]
   20100:	07db      	lsls	r3, r3, #31
   20102:	d407      	bmi.n	20114 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20104:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   20106:	4620      	mov	r0, r4
   20108:	fb08 6303 	mla	r3, r8, r3, r6
   2010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2010e:	681b      	ldr	r3, [r3, #0]
   20110:	689b      	ldr	r3, [r3, #8]
   20112:	4798      	blx	r3
			buf->__buf = NULL;
   20114:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   20116:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   20118:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2011a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   2011e:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   20120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20122:	b183      	cbz	r3, 20146 <net_buf_unref+0x6a>
			pool->destroy(buf);
   20124:	4620      	mov	r0, r4
   20126:	4798      	blx	r3
	while (buf) {
   20128:	2d00      	cmp	r5, #0
   2012a:	d1df      	bne.n	200ec <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   20130:	4909      	ldr	r1, [pc, #36]	; (20158 <net_buf_unref+0x7c>)
   20132:	480a      	ldr	r0, [pc, #40]	; (2015c <net_buf_unref+0x80>)
   20134:	f240 12eb 	movw	r2, #491	; 0x1eb
   20138:	f008 fd44 	bl	28bc4 <assert_print>
   2013c:	f240 11eb 	movw	r1, #491	; 0x1eb
   20140:	4805      	ldr	r0, [pc, #20]	; (20158 <net_buf_unref+0x7c>)
   20142:	f008 fd38 	bl	28bb6 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   20146:	4621      	mov	r1, r4
   20148:	fb00 6008 	mla	r0, r0, r8, r6
   2014c:	f00f f958 	bl	2f400 <k_queue_prepend>
}
   20150:	e7ea      	b.n	20128 <net_buf_unref+0x4c>
   20152:	bf00      	nop
   20154:	20008ef0 	.word	0x20008ef0
   20158:	00034639 	.word	0x00034639
   2015c:	00030da5 	.word	0x00030da5

00020160 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   20160:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   20162:	b950      	cbnz	r0, 2017a <net_buf_ref+0x1a>
   20164:	4907      	ldr	r1, [pc, #28]	; (20184 <net_buf_ref+0x24>)
   20166:	4808      	ldr	r0, [pc, #32]	; (20188 <net_buf_ref+0x28>)
   20168:	f240 221a 	movw	r2, #538	; 0x21a
   2016c:	f008 fd2a 	bl	28bc4 <assert_print>
   20170:	f240 211a 	movw	r1, #538	; 0x21a
   20174:	4803      	ldr	r0, [pc, #12]	; (20184 <net_buf_ref+0x24>)
   20176:	f008 fd1e 	bl	28bb6 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2017a:	7a02      	ldrb	r2, [r0, #8]
   2017c:	3201      	adds	r2, #1
   2017e:	7202      	strb	r2, [r0, #8]
	return buf;
}
   20180:	bd08      	pop	{r3, pc}
   20182:	bf00      	nop
   20184:	00034639 	.word	0x00034639
   20188:	00030da5 	.word	0x00030da5

0002018c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2018c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2018e:	4603      	mov	r3, r0
   20190:	b950      	cbnz	r0, 201a8 <net_buf_frag_last+0x1c>
   20192:	4908      	ldr	r1, [pc, #32]	; (201b4 <net_buf_frag_last+0x28>)
   20194:	4808      	ldr	r0, [pc, #32]	; (201b8 <net_buf_frag_last+0x2c>)
   20196:	f240 2257 	movw	r2, #599	; 0x257
   2019a:	f008 fd13 	bl	28bc4 <assert_print>
   2019e:	f240 2157 	movw	r1, #599	; 0x257
   201a2:	4804      	ldr	r0, [pc, #16]	; (201b4 <net_buf_frag_last+0x28>)
   201a4:	f008 fd07 	bl	28bb6 <assert_post_action>

	while (buf->frags) {
   201a8:	4618      	mov	r0, r3
   201aa:	685b      	ldr	r3, [r3, #4]
   201ac:	2b00      	cmp	r3, #0
   201ae:	d1fb      	bne.n	201a8 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   201b0:	bd08      	pop	{r3, pc}
   201b2:	bf00      	nop
   201b4:	00034639 	.word	0x00034639
   201b8:	00030da5 	.word	0x00030da5

000201bc <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   201bc:	b570      	push	{r4, r5, r6, lr}
   201be:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   201c0:	4604      	mov	r4, r0
   201c2:	b950      	cbnz	r0, 201da <net_buf_frag_insert+0x1e>
   201c4:	490e      	ldr	r1, [pc, #56]	; (20200 <net_buf_frag_insert+0x44>)
   201c6:	f240 2262 	movw	r2, #610	; 0x262
   201ca:	480e      	ldr	r0, [pc, #56]	; (20204 <net_buf_frag_insert+0x48>)
   201cc:	f008 fcfa 	bl	28bc4 <assert_print>
   201d0:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   201d4:	480a      	ldr	r0, [pc, #40]	; (20200 <net_buf_frag_insert+0x44>)
   201d6:	f008 fcee 	bl	28bb6 <assert_post_action>
   201da:	b941      	cbnz	r1, 201ee <net_buf_frag_insert+0x32>
   201dc:	4908      	ldr	r1, [pc, #32]	; (20200 <net_buf_frag_insert+0x44>)
   201de:	f240 2263 	movw	r2, #611	; 0x263
   201e2:	4808      	ldr	r0, [pc, #32]	; (20204 <net_buf_frag_insert+0x48>)
   201e4:	f008 fcee 	bl	28bc4 <assert_print>
   201e8:	f240 2163 	movw	r1, #611	; 0x263
   201ec:	e7f2      	b.n	201d4 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   201ee:	6846      	ldr	r6, [r0, #4]
   201f0:	b11e      	cbz	r6, 201fa <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   201f2:	4608      	mov	r0, r1
   201f4:	f7ff ffca 	bl	2018c <net_buf_frag_last>
   201f8:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   201fa:	6065      	str	r5, [r4, #4]
}
   201fc:	bd70      	pop	{r4, r5, r6, pc}
   201fe:	bf00      	nop
   20200:	00034639 	.word	0x00034639
   20204:	00030da5 	.word	0x00030da5

00020208 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   20208:	b538      	push	{r3, r4, r5, lr}
   2020a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   2020c:	460c      	mov	r4, r1
   2020e:	b951      	cbnz	r1, 20226 <net_buf_frag_add+0x1e>
   20210:	490b      	ldr	r1, [pc, #44]	; (20240 <net_buf_frag_add+0x38>)
   20212:	480c      	ldr	r0, [pc, #48]	; (20244 <net_buf_frag_add+0x3c>)
   20214:	f240 226e 	movw	r2, #622	; 0x26e
   20218:	f008 fcd4 	bl	28bc4 <assert_print>
   2021c:	f240 216e 	movw	r1, #622	; 0x26e
   20220:	4807      	ldr	r0, [pc, #28]	; (20240 <net_buf_frag_add+0x38>)
   20222:	f008 fcc8 	bl	28bb6 <assert_post_action>

	if (!head) {
   20226:	b920      	cbnz	r0, 20232 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   2022c:	4608      	mov	r0, r1
   2022e:	f7ff bf97 	b.w	20160 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20232:	f7ff ffab 	bl	2018c <net_buf_frag_last>
   20236:	4621      	mov	r1, r4
   20238:	f7ff ffc0 	bl	201bc <net_buf_frag_insert>
}
   2023c:	4628      	mov	r0, r5
   2023e:	bd38      	pop	{r3, r4, r5, pc}
   20240:	00034639 	.word	0x00034639
   20244:	00030da5 	.word	0x00030da5

00020248 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   20248:	4603      	mov	r3, r0
   2024a:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
   2024c:	4608      	mov	r0, r1
   2024e:	b951      	cbnz	r1, 20266 <net_buf_frag_del+0x1e>
   20250:	4915      	ldr	r1, [pc, #84]	; (202a8 <net_buf_frag_del+0x60>)
   20252:	f240 2283 	movw	r2, #643	; 0x283
   20256:	4815      	ldr	r0, [pc, #84]	; (202ac <net_buf_frag_del+0x64>)
   20258:	f008 fcb4 	bl	28bc4 <assert_print>
   2025c:	f240 2183 	movw	r1, #643	; 0x283

	if (parent) {
		__ASSERT_NO_MSG(parent->frags);
   20260:	4811      	ldr	r0, [pc, #68]	; (202a8 <net_buf_frag_del+0x60>)
   20262:	f008 fca8 	bl	28bb6 <assert_post_action>
	if (parent) {
   20266:	b1bb      	cbz	r3, 20298 <net_buf_frag_del+0x50>
		__ASSERT_NO_MSG(parent->frags);
   20268:	685a      	ldr	r2, [r3, #4]
   2026a:	b942      	cbnz	r2, 2027e <net_buf_frag_del+0x36>
   2026c:	490e      	ldr	r1, [pc, #56]	; (202a8 <net_buf_frag_del+0x60>)
   2026e:	f240 2286 	movw	r2, #646	; 0x286
   20272:	480e      	ldr	r0, [pc, #56]	; (202ac <net_buf_frag_del+0x64>)
   20274:	f008 fca6 	bl	28bc4 <assert_print>
   20278:	f240 2186 	movw	r1, #646	; 0x286
   2027c:	e7f0      	b.n	20260 <net_buf_frag_del+0x18>
		__ASSERT_NO_MSG(parent->frags == frag);
   2027e:	428a      	cmp	r2, r1
   20280:	d008      	beq.n	20294 <net_buf_frag_del+0x4c>
   20282:	4909      	ldr	r1, [pc, #36]	; (202a8 <net_buf_frag_del+0x60>)
   20284:	f240 2287 	movw	r2, #647	; 0x287
   20288:	4808      	ldr	r0, [pc, #32]	; (202ac <net_buf_frag_del+0x64>)
   2028a:	f008 fc9b 	bl	28bc4 <assert_print>
   2028e:	f240 2187 	movw	r1, #647	; 0x287
   20292:	e7e5      	b.n	20260 <net_buf_frag_del+0x18>
		parent->frags = frag->frags;
   20294:	684a      	ldr	r2, [r1, #4]
   20296:	605a      	str	r2, [r3, #4]
	}

	next_frag = frag->frags;

	frag->frags = NULL;
   20298:	2300      	movs	r3, #0
	next_frag = frag->frags;
   2029a:	6844      	ldr	r4, [r0, #4]
	frag->frags = NULL;
   2029c:	6043      	str	r3, [r0, #4]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2029e:	f7ff ff1d 	bl	200dc <net_buf_unref>
#endif

	return next_frag;
}
   202a2:	4620      	mov	r0, r4
   202a4:	bd10      	pop	{r4, pc}
   202a6:	bf00      	nop
   202a8:	00034639 	.word	0x00034639
   202ac:	00030da5 	.word	0x00030da5

000202b0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   202b0:	b508      	push	{r3, lr}
   202b2:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   202b4:	6800      	ldr	r0, [r0, #0]
   202b6:	689a      	ldr	r2, [r3, #8]
   202b8:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   202ba:	4291      	cmp	r1, r2
   202bc:	d90a      	bls.n	202d4 <net_buf_simple_push+0x24>
   202be:	4908      	ldr	r1, [pc, #32]	; (202e0 <net_buf_simple_push+0x30>)
   202c0:	4808      	ldr	r0, [pc, #32]	; (202e4 <net_buf_simple_push+0x34>)
   202c2:	f240 32f2 	movw	r2, #1010	; 0x3f2
   202c6:	f008 fc7d 	bl	28bc4 <assert_print>
   202ca:	f240 31f2 	movw	r1, #1010	; 0x3f2
   202ce:	4804      	ldr	r0, [pc, #16]	; (202e0 <net_buf_simple_push+0x30>)
   202d0:	f008 fc71 	bl	28bb6 <assert_post_action>
	buf->len += len;
   202d4:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   202d6:	1a40      	subs	r0, r0, r1
	buf->len += len;
   202d8:	4411      	add	r1, r2
	buf->data -= len;
   202da:	6018      	str	r0, [r3, #0]
	buf->len += len;
   202dc:	8099      	strh	r1, [r3, #4]
}
   202de:	bd08      	pop	{r3, pc}
   202e0:	00034639 	.word	0x00034639
   202e4:	00030da5 	.word	0x00030da5

000202e8 <net_buf_simple_pull>:
{
   202e8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   202ea:	8882      	ldrh	r2, [r0, #4]
{
   202ec:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   202ee:	428a      	cmp	r2, r1
   202f0:	d20a      	bcs.n	20308 <net_buf_simple_pull+0x20>
   202f2:	4908      	ldr	r1, [pc, #32]	; (20314 <net_buf_simple_pull+0x2c>)
   202f4:	4808      	ldr	r0, [pc, #32]	; (20318 <net_buf_simple_pull+0x30>)
   202f6:	f240 4252 	movw	r2, #1106	; 0x452
   202fa:	f008 fc63 	bl	28bc4 <assert_print>
   202fe:	f240 4152 	movw	r1, #1106	; 0x452
   20302:	4804      	ldr	r0, [pc, #16]	; (20314 <net_buf_simple_pull+0x2c>)
   20304:	f008 fc57 	bl	28bb6 <assert_post_action>
	buf->len -= len;
   20308:	1a52      	subs	r2, r2, r1
   2030a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2030c:	6800      	ldr	r0, [r0, #0]
   2030e:	4408      	add	r0, r1
   20310:	6018      	str	r0, [r3, #0]
}
   20312:	bd08      	pop	{r3, pc}
   20314:	00034639 	.word	0x00034639
   20318:	00030da5 	.word	0x00030da5

0002031c <net_buf_simple_pull_mem>:
{
   2031c:	b508      	push	{r3, lr}
   2031e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   20320:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   20322:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   20324:	428a      	cmp	r2, r1
   20326:	d20a      	bcs.n	2033e <net_buf_simple_pull_mem+0x22>
   20328:	4907      	ldr	r1, [pc, #28]	; (20348 <net_buf_simple_pull_mem+0x2c>)
   2032a:	4808      	ldr	r0, [pc, #32]	; (2034c <net_buf_simple_pull_mem+0x30>)
   2032c:	f240 425e 	movw	r2, #1118	; 0x45e
   20330:	f008 fc48 	bl	28bc4 <assert_print>
   20334:	f240 415e 	movw	r1, #1118	; 0x45e
   20338:	4803      	ldr	r0, [pc, #12]	; (20348 <net_buf_simple_pull_mem+0x2c>)
   2033a:	f008 fc3c 	bl	28bb6 <assert_post_action>
	buf->len -= len;
   2033e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   20340:	4401      	add	r1, r0
	buf->len -= len;
   20342:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   20344:	6019      	str	r1, [r3, #0]
}
   20346:	bd08      	pop	{r3, pc}
   20348:	00034639 	.word	0x00034639
   2034c:	00030da5 	.word	0x00030da5

00020350 <net_buf_simple_add>:
{
   20350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   20352:	8885      	ldrh	r5, [r0, #4]
   20354:	6803      	ldr	r3, [r0, #0]
   20356:	460e      	mov	r6, r1
   20358:	4604      	mov	r4, r0
   2035a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   2035c:	f00d fdb5 	bl	2deca <net_buf_simple_tailroom>
   20360:	42b0      	cmp	r0, r6
   20362:	d20a      	bcs.n	2037a <net_buf_simple_add+0x2a>
   20364:	4907      	ldr	r1, [pc, #28]	; (20384 <net_buf_simple_add+0x34>)
   20366:	4808      	ldr	r0, [pc, #32]	; (20388 <net_buf_simple_add+0x38>)
   20368:	f240 3203 	movw	r2, #771	; 0x303
   2036c:	f008 fc2a 	bl	28bc4 <assert_print>
   20370:	f240 3103 	movw	r1, #771	; 0x303
   20374:	4803      	ldr	r0, [pc, #12]	; (20384 <net_buf_simple_add+0x34>)
   20376:	f008 fc1e 	bl	28bb6 <assert_post_action>
	buf->len += len;
   2037a:	4435      	add	r5, r6
   2037c:	80a5      	strh	r5, [r4, #4]
}
   2037e:	4638      	mov	r0, r7
   20380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20382:	bf00      	nop
   20384:	00034639 	.word	0x00034639
   20388:	00030da5 	.word	0x00030da5

0002038c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   2038c:	b508      	push	{r3, lr}
   2038e:	4804      	ldr	r0, [pc, #16]	; (203a0 <xoshiro128_initialize+0x14>)
   20390:	f00e ffc2 	bl	2f318 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   20394:	2800      	cmp	r0, #0
}
   20396:	bf0c      	ite	eq
   20398:	f06f 0012 	mvneq.w	r0, #18
   2039c:	2000      	movne	r0, #0
   2039e:	bd08      	pop	{r3, pc}
   203a0:	0002f884 	.word	0x0002f884

000203a4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   203a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   203a6:	2340      	movs	r3, #64	; 0x40
{
   203a8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   203aa:	490a      	ldr	r1, [pc, #40]	; (203d4 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   203ac:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   203ae:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   203b0:	1149      	asrs	r1, r1, #5
{
   203b2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   203b4:	4623      	mov	r3, r4
   203b6:	4a08      	ldr	r2, [pc, #32]	; (203d8 <onoff_start+0x34>)
   203b8:	4808      	ldr	r0, [pc, #32]	; (203dc <onoff_start+0x38>)
   203ba:	f00d fddd 	bl	2df78 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   203be:	1e01      	subs	r1, r0, #0
   203c0:	da05      	bge.n	203ce <onoff_start+0x2a>
		notify(mgr, err);
   203c2:	4628      	mov	r0, r5
   203c4:	4623      	mov	r3, r4
	}
}
   203c6:	b003      	add	sp, #12
   203c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   203cc:	4718      	bx	r3
}
   203ce:	b003      	add	sp, #12
   203d0:	bd30      	pop	{r4, r5, pc}
   203d2:	bf00      	nop
   203d4:	2000ae78 	.word	0x2000ae78
   203d8:	0002dfe7 	.word	0x0002dfe7
   203dc:	0002f824 	.word	0x0002f824

000203e0 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203e0:	b2c9      	uxtb	r1, r1
   203e2:	2903      	cmp	r1, #3
{
   203e4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203e6:	d908      	bls.n	203fa <get_status+0x1a>
   203e8:	4908      	ldr	r1, [pc, #32]	; (2040c <get_status+0x2c>)
   203ea:	4809      	ldr	r0, [pc, #36]	; (20410 <get_status+0x30>)
   203ec:	227a      	movs	r2, #122	; 0x7a
   203ee:	f008 fbe9 	bl	28bc4 <assert_print>
   203f2:	217a      	movs	r1, #122	; 0x7a
   203f4:	4805      	ldr	r0, [pc, #20]	; (2040c <get_status+0x2c>)
   203f6:	f008 fbde 	bl	28bb6 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   203fa:	220c      	movs	r2, #12
   203fc:	6903      	ldr	r3, [r0, #16]
   203fe:	fb01 3302 	mla	r3, r1, r2, r3
   20402:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   20406:	f000 0007 	and.w	r0, r0, #7
   2040a:	bd08      	pop	{r3, pc}
   2040c:	00034665 	.word	0x00034665
   20410:	00030da5 	.word	0x00030da5

00020414 <stop>:
{
   20414:	b570      	push	{r4, r5, r6, lr}
   20416:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   20418:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   2041a:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2041c:	d90a      	bls.n	20434 <stop+0x20>
   2041e:	4919      	ldr	r1, [pc, #100]	; (20484 <stop+0x70>)
   20420:	4819      	ldr	r0, [pc, #100]	; (20488 <stop+0x74>)
   20422:	f240 125d 	movw	r2, #349	; 0x15d
   20426:	f008 fbcd 	bl	28bc4 <assert_print>
   2042a:	f240 115d 	movw	r1, #349	; 0x15d
   2042e:	4815      	ldr	r0, [pc, #84]	; (20484 <stop+0x70>)
   20430:	f008 fbc1 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   20434:	f04f 0420 	mov.w	r4, #32
   20438:	f3ef 8511 	mrs	r5, BASEPRI
   2043c:	f384 8812 	msr	BASEPRI_MAX, r4
   20440:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20444:	260c      	movs	r6, #12
   20446:	fb06 3401 	mla	r4, r6, r1, r3
   2044a:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2044e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   20452:	d008      	beq.n	20466 <stop+0x52>
   20454:	42a2      	cmp	r2, r4
   20456:	d006      	beq.n	20466 <stop+0x52>
	__asm__ volatile(
   20458:	f385 8811 	msr	BASEPRI, r5
   2045c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   20460:	f04f 30ff 	mov.w	r0, #4294967295
}
   20464:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   20466:	2201      	movs	r2, #1
   20468:	4371      	muls	r1, r6
   2046a:	440b      	add	r3, r1
   2046c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   20470:	f385 8811 	msr	BASEPRI, r5
   20474:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   20478:	6843      	ldr	r3, [r0, #4]
   2047a:	440b      	add	r3, r1
   2047c:	685b      	ldr	r3, [r3, #4]
   2047e:	4798      	blx	r3
	return 0;
   20480:	2000      	movs	r0, #0
   20482:	e7ef      	b.n	20464 <stop+0x50>
   20484:	00034665 	.word	0x00034665
   20488:	00030da5 	.word	0x00030da5

0002048c <onoff_stop>:
{
   2048c:	b570      	push	{r4, r5, r6, lr}
   2048e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   20490:	4906      	ldr	r1, [pc, #24]	; (204ac <onoff_stop+0x20>)
{
   20492:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   20494:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20496:	1149      	asrs	r1, r1, #5
   20498:	2240      	movs	r2, #64	; 0x40
   2049a:	4805      	ldr	r0, [pc, #20]	; (204b0 <onoff_stop+0x24>)
   2049c:	f7ff ffba 	bl	20414 <stop>
	notify(mgr, res);
   204a0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   204a2:	4601      	mov	r1, r0
	notify(mgr, res);
   204a4:	4620      	mov	r0, r4
}
   204a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   204aa:	4718      	bx	r3
   204ac:	2000ae78 	.word	0x2000ae78
   204b0:	0002f824 	.word	0x0002f824

000204b4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   204b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   204b8:	2200      	movs	r2, #0
   204ba:	2101      	movs	r1, #1
{
   204bc:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   204be:	2005      	movs	r0, #5
   204c0:	f7ec fbfe 	bl	ccc0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   204c4:	4811      	ldr	r0, [pc, #68]	; (2050c <clk_init+0x58>)
   204c6:	f002 fe89 	bl	231dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   204ca:	4b11      	ldr	r3, [pc, #68]	; (20510 <clk_init+0x5c>)
   204cc:	4298      	cmp	r0, r3
   204ce:	d119      	bne.n	20504 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   204d0:	f002 fea6 	bl	23220 <nrfx_clock_enable>
   204d4:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   204d6:	f04f 080c 	mov.w	r8, #12
   204da:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   204dc:	f8df 9034 	ldr.w	r9, [pc, #52]	; 20514 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   204e0:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   204e2:	4649      	mov	r1, r9
   204e4:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   204e8:	f008 fae1 	bl	28aae <onoff_manager_init>
		if (err < 0) {
   204ec:	2800      	cmp	r0, #0
   204ee:	db07      	blt.n	20500 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   204f0:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   204f4:	3401      	adds	r4, #1
   204f6:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   204f8:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   204fc:	d1f0      	bne.n	204e0 <clk_init+0x2c>
	}

	return 0;
   204fe:	2000      	movs	r0, #0
}
   20500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   20504:	f06f 0004 	mvn.w	r0, #4
   20508:	e7fa      	b.n	20500 <clk_init+0x4c>
   2050a:	bf00      	nop
   2050c:	00020551 	.word	0x00020551
   20510:	0bad0000 	.word	0x0bad0000
   20514:	00030a04 	.word	0x00030a04

00020518 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20518:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2051a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   2051c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   2051e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20520:	434b      	muls	r3, r1
   20522:	4809      	ldr	r0, [pc, #36]	; (20548 <clkstarted_handle.constprop.0+0x30>)
   20524:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   20526:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   20528:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   2052c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   2052e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   20532:	f00d fd0e 	bl	2df52 <set_on_state>
	if (callback) {
   20536:	b12d      	cbz	r5, 20544 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20538:	4632      	mov	r2, r6
   2053a:	462b      	mov	r3, r5
}
   2053c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20540:	4802      	ldr	r0, [pc, #8]	; (2054c <clkstarted_handle.constprop.0+0x34>)
   20542:	4718      	bx	r3
}
   20544:	bd70      	pop	{r4, r5, r6, pc}
   20546:	bf00      	nop
   20548:	2000ae78 	.word	0x2000ae78
   2054c:	0002f824 	.word	0x0002f824

00020550 <clock_event_handler>:
{
   20550:	b508      	push	{r3, lr}
	switch (event) {
   20552:	2805      	cmp	r0, #5
   20554:	d81f      	bhi.n	20596 <clock_event_handler+0x46>
   20556:	e8df f000 	tbb	[pc, r0]
   2055a:	1103      	.short	0x1103
   2055c:	0d0f131e 	.word	0x0d0f131e
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20560:	4b12      	ldr	r3, [pc, #72]	; (205ac <clock_event_handler+0x5c>)
   20562:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   20566:	f010 0007 	ands.w	r0, r0, #7
   2056a:	d11d      	bne.n	205a8 <clock_event_handler+0x58>
}
   2056c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20570:	f7ff bfd2 	b.w	20518 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   20574:	2002      	movs	r0, #2
   20576:	e7f9      	b.n	2056c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   20578:	2003      	movs	r0, #3
   2057a:	e7f7      	b.n	2056c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2057c:	2001      	movs	r0, #1
   2057e:	e7f5      	b.n	2056c <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   20580:	490b      	ldr	r1, [pc, #44]	; (205b0 <clock_event_handler+0x60>)
   20582:	f240 226e 	movw	r2, #622	; 0x26e
   20586:	480b      	ldr	r0, [pc, #44]	; (205b4 <clock_event_handler+0x64>)
   20588:	f008 fb1c 	bl	28bc4 <assert_print>
   2058c:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   20590:	4807      	ldr	r0, [pc, #28]	; (205b0 <clock_event_handler+0x60>)
   20592:	f008 fb10 	bl	28bb6 <assert_post_action>
   20596:	4906      	ldr	r1, [pc, #24]	; (205b0 <clock_event_handler+0x60>)
   20598:	f240 2272 	movw	r2, #626	; 0x272
   2059c:	4805      	ldr	r0, [pc, #20]	; (205b4 <clock_event_handler+0x64>)
   2059e:	f008 fb11 	bl	28bc4 <assert_print>
   205a2:	f240 2172 	movw	r1, #626	; 0x272
   205a6:	e7f3      	b.n	20590 <clock_event_handler+0x40>
}
   205a8:	bd08      	pop	{r3, pc}
   205aa:	bf00      	nop
   205ac:	2000ae78 	.word	0x2000ae78
   205b0:	00034665 	.word	0x00034665
   205b4:	00030da5 	.word	0x00030da5

000205b8 <generic_hfclk_start>:
{
   205b8:	b508      	push	{r3, lr}
	__asm__ volatile(
   205ba:	f04f 0320 	mov.w	r3, #32
   205be:	f3ef 8111 	mrs	r1, BASEPRI
   205c2:	f383 8812 	msr	BASEPRI_MAX, r3
   205c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   205ca:	4a11      	ldr	r2, [pc, #68]	; (20610 <generic_hfclk_start+0x58>)
   205cc:	6813      	ldr	r3, [r2, #0]
   205ce:	f043 0002 	orr.w	r0, r3, #2
   205d2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   205d4:	07da      	lsls	r2, r3, #31
   205d6:	d408      	bmi.n	205ea <generic_hfclk_start+0x32>
	__asm__ volatile(
   205d8:	f381 8811 	msr	BASEPRI, r1
   205dc:	f3bf 8f6f 	isb	sy
}
   205e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   205e4:	2001      	movs	r0, #1
   205e6:	f002 be43 	b.w	23270 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   205ea:	4b0a      	ldr	r3, [pc, #40]	; (20614 <generic_hfclk_start+0x5c>)
   205ec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   205f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   205f4:	07d3      	lsls	r3, r2, #31
   205f6:	d5ef      	bpl.n	205d8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   205f8:	4807      	ldr	r0, [pc, #28]	; (20618 <generic_hfclk_start+0x60>)
   205fa:	f00d fcaa 	bl	2df52 <set_on_state>
   205fe:	f381 8811 	msr	BASEPRI, r1
   20602:	f3bf 8f6f 	isb	sy
}
   20606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2060a:	2000      	movs	r0, #0
   2060c:	f7ff bf84 	b.w	20518 <clkstarted_handle.constprop.0>
   20610:	2000af28 	.word	0x2000af28
   20614:	40005000 	.word	0x40005000
   20618:	2000af00 	.word	0x2000af00

0002061c <api_blocking_start>:
{
   2061c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2061e:	2200      	movs	r2, #0
   20620:	2301      	movs	r3, #1
   20622:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20626:	ab04      	add	r3, sp, #16
   20628:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2062c:	4a09      	ldr	r2, [pc, #36]	; (20654 <api_blocking_start+0x38>)
   2062e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20630:	f8cd d000 	str.w	sp, [sp]
   20634:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20638:	f00d fcce 	bl	2dfd8 <api_start>
	if (err < 0) {
   2063c:	2800      	cmp	r0, #0
   2063e:	db05      	blt.n	2064c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20644:	2300      	movs	r3, #0
   20646:	4668      	mov	r0, sp
   20648:	f005 fb80 	bl	25d4c <z_impl_k_sem_take>
}
   2064c:	b007      	add	sp, #28
   2064e:	f85d fb04 	ldr.w	pc, [sp], #4
   20652:	bf00      	nop
   20654:	0002e017 	.word	0x0002e017

00020658 <generic_hfclk_stop>:
{
   20658:	b510      	push	{r4, lr}
	__asm__ volatile(
   2065a:	f04f 0320 	mov.w	r3, #32
   2065e:	f3ef 8411 	mrs	r4, BASEPRI
   20662:	f383 8812 	msr	BASEPRI_MAX, r3
   20666:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   2066a:	4a07      	ldr	r2, [pc, #28]	; (20688 <generic_hfclk_stop+0x30>)
   2066c:	6813      	ldr	r3, [r2, #0]
   2066e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   20672:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   20674:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20676:	d402      	bmi.n	2067e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20678:	2001      	movs	r0, #1
   2067a:	f002 fe71 	bl	23360 <nrfx_clock_stop>
	__asm__ volatile(
   2067e:	f384 8811 	msr	BASEPRI, r4
   20682:	f3bf 8f6f 	isb	sy
}
   20686:	bd10      	pop	{r4, pc}
   20688:	2000af28 	.word	0x2000af28

0002068c <z_nrf_clock_control_lf_on>:
{
   2068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20690:	2201      	movs	r2, #1
   20692:	4606      	mov	r6, r0
   20694:	4940      	ldr	r1, [pc, #256]	; (20798 <z_nrf_clock_control_lf_on+0x10c>)
   20696:	e8d1 3fef 	ldaex	r3, [r1]
   2069a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   2069e:	2800      	cmp	r0, #0
   206a0:	d1f9      	bne.n	20696 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   206a2:	b99b      	cbnz	r3, 206cc <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   206a4:	493d      	ldr	r1, [pc, #244]	; (2079c <z_nrf_clock_control_lf_on+0x110>)
		err = onoff_request(mgr, &cli);
   206a6:	483e      	ldr	r0, [pc, #248]	; (207a0 <z_nrf_clock_control_lf_on+0x114>)
   206a8:	604b      	str	r3, [r1, #4]
   206aa:	60cb      	str	r3, [r1, #12]
   206ac:	608a      	str	r2, [r1, #8]
   206ae:	f7e8 ff0f 	bl	94d0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   206b2:	2800      	cmp	r0, #0
   206b4:	da0a      	bge.n	206cc <z_nrf_clock_control_lf_on+0x40>
   206b6:	493b      	ldr	r1, [pc, #236]	; (207a4 <z_nrf_clock_control_lf_on+0x118>)
   206b8:	f44f 720c 	mov.w	r2, #560	; 0x230
   206bc:	483a      	ldr	r0, [pc, #232]	; (207a8 <z_nrf_clock_control_lf_on+0x11c>)
   206be:	f008 fa81 	bl	28bc4 <assert_print>
   206c2:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   206c6:	4837      	ldr	r0, [pc, #220]	; (207a4 <z_nrf_clock_control_lf_on+0x118>)
   206c8:	f008 fa75 	bl	28bb6 <assert_post_action>
	switch (start_mode) {
   206cc:	b35e      	cbz	r6, 20726 <z_nrf_clock_control_lf_on+0x9a>
   206ce:	1e73      	subs	r3, r6, #1
   206d0:	2b01      	cmp	r3, #1
   206d2:	d858      	bhi.n	20786 <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   206d4:	2e01      	cmp	r6, #1
   206d6:	d106      	bne.n	206e6 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   206d8:	4b34      	ldr	r3, [pc, #208]	; (207ac <z_nrf_clock_control_lf_on+0x120>)
   206da:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   206de:	f003 0303 	and.w	r3, r3, #3
   206e2:	2b02      	cmp	r3, #2
   206e4:	d01f      	beq.n	20726 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   206e6:	f00e fe44 	bl	2f372 <k_is_in_isr>
   206ea:	4605      	mov	r5, r0
   206ec:	b9e8      	cbnz	r0, 2072a <z_nrf_clock_control_lf_on+0x9e>
	return !z_sys_post_kernel;
   206ee:	4b30      	ldr	r3, [pc, #192]	; (207b0 <z_nrf_clock_control_lf_on+0x124>)
   206f0:	781b      	ldrb	r3, [r3, #0]
   206f2:	b1d3      	cbz	r3, 2072a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENCLR = mask;
   206f4:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   206f6:	4607      	mov	r7, r0
   206f8:	4b2c      	ldr	r3, [pc, #176]	; (207ac <z_nrf_clock_control_lf_on+0x120>)
   206fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   206fe:	4c2b      	ldr	r4, [pc, #172]	; (207ac <z_nrf_clock_control_lf_on+0x120>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20700:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 207b4 <z_nrf_clock_control_lf_on+0x128>
   20704:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20708:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   2070c:	03d2      	lsls	r2, r2, #15
   2070e:	d516      	bpl.n	2073e <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20710:	f003 0303 	and.w	r3, r3, #3
   20714:	2b02      	cmp	r3, #2
   20716:	d001      	beq.n	2071c <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20718:	2e01      	cmp	r6, #1
   2071a:	d110      	bne.n	2073e <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
   2071c:	b375      	cbz	r5, 2077c <z_nrf_clock_control_lf_on+0xf0>
   2071e:	f387 8811 	msr	BASEPRI, r7
   20722:	f3bf 8f6f 	isb	sy
}
   20726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2072a:	f04f 0320 	mov.w	r3, #32
   2072e:	f3ef 8711 	mrs	r7, BASEPRI
   20732:	f383 8812 	msr	BASEPRI_MAX, r3
   20736:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2073a:	2501      	movs	r5, #1
   2073c:	e7df      	b.n	206fe <z_nrf_clock_control_lf_on+0x72>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2073e:	b1c5      	cbz	r5, 20772 <z_nrf_clock_control_lf_on+0xe6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20740:	4638      	mov	r0, r7
   20742:	f7ec fa15 	bl	cb70 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20746:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2074a:	b2db      	uxtb	r3, r3
   2074c:	2b01      	cmp	r3, #1
   2074e:	d1d9      	bne.n	20704 <z_nrf_clock_control_lf_on+0x78>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20750:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20754:	2a00      	cmp	r2, #0
   20756:	d0d5      	beq.n	20704 <z_nrf_clock_control_lf_on+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20758:	2200      	movs	r2, #0
   2075a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   2075e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20762:	2202      	movs	r2, #2
   20764:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   20768:	2220      	movs	r2, #32
   2076a:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2076e:	60a3      	str	r3, [r4, #8]
}
   20770:	e7c8      	b.n	20704 <z_nrf_clock_control_lf_on+0x78>
	return z_impl_k_sleep(timeout);
   20772:	2100      	movs	r1, #0
   20774:	2021      	movs	r0, #33	; 0x21
   20776:	f006 ff1f 	bl	275b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2077a:	e7e4      	b.n	20746 <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
   2077c:	2202      	movs	r2, #2
   2077e:	4b0b      	ldr	r3, [pc, #44]	; (207ac <z_nrf_clock_control_lf_on+0x120>)
   20780:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20784:	e7cf      	b.n	20726 <z_nrf_clock_control_lf_on+0x9a>
		__ASSERT_NO_MSG(false);
   20786:	4907      	ldr	r1, [pc, #28]	; (207a4 <z_nrf_clock_control_lf_on+0x118>)
   20788:	f240 2242 	movw	r2, #578	; 0x242
   2078c:	4806      	ldr	r0, [pc, #24]	; (207a8 <z_nrf_clock_control_lf_on+0x11c>)
   2078e:	f008 fa19 	bl	28bc4 <assert_print>
   20792:	f240 2142 	movw	r1, #578	; 0x242
   20796:	e796      	b.n	206c6 <z_nrf_clock_control_lf_on+0x3a>
   20798:	2000ae74 	.word	0x2000ae74
   2079c:	2000ae64 	.word	0x2000ae64
   207a0:	2000ae98 	.word	0x2000ae98
   207a4:	00034665 	.word	0x00034665
   207a8:	00030da5 	.word	0x00030da5
   207ac:	40005000 	.word	0x40005000
   207b0:	2000b34a 	.word	0x2000b34a
   207b4:	e000e100 	.word	0xe000e100

000207b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   207b8:	b508      	push	{r3, lr}
   207ba:	4807      	ldr	r0, [pc, #28]	; (207d8 <uart_console_init+0x20>)
   207bc:	f00e fdac 	bl	2f318 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   207c0:	b138      	cbz	r0, 207d2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   207c2:	4806      	ldr	r0, [pc, #24]	; (207dc <uart_console_init+0x24>)
   207c4:	f7ed f932 	bl	da2c <__stdout_hook_install>
	__printk_hook_install(console_out);
   207c8:	4804      	ldr	r0, [pc, #16]	; (207dc <uart_console_init+0x24>)
   207ca:	f7e8 fb87 	bl	8edc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   207ce:	2000      	movs	r0, #0
}
   207d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   207d2:	f06f 0012 	mvn.w	r0, #18
   207d6:	e7fb      	b.n	207d0 <uart_console_init+0x18>
   207d8:	0002f89c 	.word	0x0002f89c
   207dc:	000207e1 	.word	0x000207e1

000207e0 <console_out>:
	if ('\n' == c) {
   207e0:	280a      	cmp	r0, #10
{
   207e2:	b538      	push	{r3, r4, r5, lr}
   207e4:	4604      	mov	r4, r0
   207e6:	4d07      	ldr	r5, [pc, #28]	; (20804 <console_out+0x24>)
	if ('\n' == c) {
   207e8:	d104      	bne.n	207f4 <console_out+0x14>
   207ea:	68ab      	ldr	r3, [r5, #8]
   207ec:	210d      	movs	r1, #13
   207ee:	4628      	mov	r0, r5
   207f0:	685b      	ldr	r3, [r3, #4]
   207f2:	4798      	blx	r3
   207f4:	68ab      	ldr	r3, [r5, #8]
   207f6:	4803      	ldr	r0, [pc, #12]	; (20804 <console_out+0x24>)
   207f8:	685b      	ldr	r3, [r3, #4]
   207fa:	b2e1      	uxtb	r1, r4
   207fc:	4798      	blx	r3
}
   207fe:	4620      	mov	r0, r4
   20800:	bd38      	pop	{r3, r4, r5, pc}
   20802:	bf00      	nop
   20804:	0002f89c 	.word	0x0002f89c

00020808 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   20808:	b510      	push	{r4, lr}
	return port->data;
   2080a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2080c:	b941      	cbnz	r1, 20820 <gpio_nrfx_manage_callback+0x18>
   2080e:	491c      	ldr	r1, [pc, #112]	; (20880 <gpio_nrfx_manage_callback+0x78>)
   20810:	222a      	movs	r2, #42	; 0x2a
   20812:	481c      	ldr	r0, [pc, #112]	; (20884 <gpio_nrfx_manage_callback+0x7c>)
   20814:	f008 f9d6 	bl	28bc4 <assert_print>
   20818:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   2081a:	4819      	ldr	r0, [pc, #100]	; (20880 <gpio_nrfx_manage_callback+0x78>)
   2081c:	f008 f9cb 	bl	28bb6 <assert_post_action>
   20820:	6848      	ldr	r0, [r1, #4]
   20822:	b930      	cbnz	r0, 20832 <gpio_nrfx_manage_callback+0x2a>
   20824:	4916      	ldr	r1, [pc, #88]	; (20880 <gpio_nrfx_manage_callback+0x78>)
   20826:	222b      	movs	r2, #43	; 0x2b
   20828:	4816      	ldr	r0, [pc, #88]	; (20884 <gpio_nrfx_manage_callback+0x7c>)
   2082a:	f008 f9cb 	bl	28bc4 <assert_print>
   2082e:	212b      	movs	r1, #43	; 0x2b
   20830:	e7f3      	b.n	2081a <gpio_nrfx_manage_callback+0x12>
	return list->head;
   20832:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   20834:	b1f8      	cbz	r0, 20876 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20836:	4288      	cmp	r0, r1
   20838:	d119      	bne.n	2086e <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   2083a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2083c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2083e:	42a1      	cmp	r1, r4
	list->head = node;
   20840:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20842:	d100      	bne.n	20846 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   20844:	6098      	str	r0, [r3, #8]
	parent->next = child;
   20846:	2000      	movs	r0, #0
   20848:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   2084a:	b12a      	cbz	r2, 20858 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   2084c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2084e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20850:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   20852:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20854:	b902      	cbnz	r2, 20858 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   20856:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   20858:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2085a:	e010      	b.n	2087e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2085c:	4281      	cmp	r1, r0
   2085e:	d106      	bne.n	2086e <gpio_nrfx_manage_callback+0x66>
	return node->next;
   20860:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   20862:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20864:	6898      	ldr	r0, [r3, #8]
   20866:	4281      	cmp	r1, r0
   20868:	d1ed      	bne.n	20846 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   2086a:	609c      	str	r4, [r3, #8]
}
   2086c:	e7eb      	b.n	20846 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   2086e:	4604      	mov	r4, r0
   20870:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20872:	2800      	cmp	r0, #0
   20874:	d1f2      	bne.n	2085c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   20876:	2a00      	cmp	r2, #0
   20878:	d1e8      	bne.n	2084c <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   2087a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   2087e:	bd10      	pop	{r4, pc}
   20880:	000346dc 	.word	0x000346dc
   20884:	00030da5 	.word	0x00030da5

00020888 <gpio_nrfx_pin_interrupt_configure>:
{
   20888:	b530      	push	{r4, r5, lr}
	return port->config;
   2088a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2088c:	f001 041f 	and.w	r4, r1, #31
   20890:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   20892:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   20896:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20898:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2089c:	d105      	bne.n	208aa <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2089e:	4620      	mov	r0, r4
   208a0:	f003 f896 	bl	239d0 <nrfx_gpiote_trigger_disable>
		return 0;
   208a4:	2000      	movs	r0, #0
}
   208a6:	b005      	add	sp, #20
   208a8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   208aa:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   208ac:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   208b0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   208b4:	d114      	bne.n	208e0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   208b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   208ba:	bf0c      	ite	eq
   208bc:	2304      	moveq	r3, #4
   208be:	2305      	movne	r3, #5
   208c0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   208c4:	2300      	movs	r3, #0
   208c6:	4620      	mov	r0, r4
   208c8:	4619      	mov	r1, r3
   208ca:	aa02      	add	r2, sp, #8
   208cc:	f002 fe92 	bl	235f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   208d0:	4b2a      	ldr	r3, [pc, #168]	; (2097c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   208d2:	4298      	cmp	r0, r3
   208d4:	d14e      	bne.n	20974 <gpio_nrfx_pin_interrupt_configure+0xec>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   208d6:	2101      	movs	r1, #1
   208d8:	4620      	mov	r0, r4
   208da:	f003 f815 	bl	23908 <nrfx_gpiote_trigger_enable>
	return 0;
   208de:	e7e1      	b.n	208a4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   208e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   208e4:	d023      	beq.n	2092e <gpio_nrfx_pin_interrupt_configure+0xa6>
   208e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   208ea:	bf14      	ite	ne
   208ec:	2301      	movne	r3, #1
   208ee:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   208f0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   208f4:	6883      	ldr	r3, [r0, #8]
   208f6:	40cb      	lsrs	r3, r1
   208f8:	07d8      	lsls	r0, r3, #31
   208fa:	d4e3      	bmi.n	208c4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   208fc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   20900:	d1e0      	bne.n	208c4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   20902:	0962      	lsrs	r2, r4, #5
   20904:	f004 031f 	and.w	r3, r4, #31
   20908:	d013      	beq.n	20932 <gpio_nrfx_pin_interrupt_configure+0xaa>
   2090a:	2a01      	cmp	r2, #1
   2090c:	d104      	bne.n	20918 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   2090e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20912:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20914:	07d1      	lsls	r1, r2, #31
   20916:	d413      	bmi.n	20940 <gpio_nrfx_pin_interrupt_configure+0xb8>
   20918:	4919      	ldr	r1, [pc, #100]	; (20980 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2091a:	481a      	ldr	r0, [pc, #104]	; (20984 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   2091c:	f240 2247 	movw	r2, #583	; 0x247
   20920:	f008 f950 	bl	28bc4 <assert_print>
   20924:	f240 2147 	movw	r1, #583	; 0x247
   20928:	4815      	ldr	r0, [pc, #84]	; (20980 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2092a:	f008 f944 	bl	28bb6 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2092e:	2303      	movs	r3, #3
   20930:	e7de      	b.n	208f0 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   20932:	f04f 32ff 	mov.w	r2, #4294967295
   20936:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20938:	07d2      	lsls	r2, r2, #31
   2093a:	d5ed      	bpl.n	20918 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   2093c:	4a12      	ldr	r2, [pc, #72]	; (20988 <gpio_nrfx_pin_interrupt_configure+0x100>)
   2093e:	e000      	b.n	20942 <gpio_nrfx_pin_interrupt_configure+0xba>
        case 1: return NRF_P1;
   20940:	4a12      	ldr	r2, [pc, #72]	; (2098c <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20942:	3380      	adds	r3, #128	; 0x80
   20944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20948:	07db      	lsls	r3, r3, #31
   2094a:	d4bb      	bmi.n	208c4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2094c:	f10d 0507 	add.w	r5, sp, #7
   20950:	4629      	mov	r1, r5
   20952:	4620      	mov	r0, r4
   20954:	f002 ff74 	bl	23840 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20958:	4b0d      	ldr	r3, [pc, #52]	; (20990 <gpio_nrfx_pin_interrupt_configure+0x108>)
   2095a:	4298      	cmp	r0, r3
   2095c:	d001      	beq.n	20962 <gpio_nrfx_pin_interrupt_configure+0xda>
		trigger_config.p_in_channel = &ch;
   2095e:	9503      	str	r5, [sp, #12]
   20960:	e7b0      	b.n	208c4 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   20962:	4628      	mov	r0, r5
   20964:	f002 ffca 	bl	238fc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20968:	4b04      	ldr	r3, [pc, #16]	; (2097c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   2096a:	4298      	cmp	r0, r3
   2096c:	d0f7      	beq.n	2095e <gpio_nrfx_pin_interrupt_configure+0xd6>
				return -ENOMEM;
   2096e:	f06f 000b 	mvn.w	r0, #11
   20972:	e798      	b.n	208a6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   20974:	f06f 0015 	mvn.w	r0, #21
   20978:	e795      	b.n	208a6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   2097a:	bf00      	nop
   2097c:	0bad0000 	.word	0x0bad0000
   20980:	00034718 	.word	0x00034718
   20984:	00030da5 	.word	0x00030da5
   20988:	40842500 	.word	0x40842500
   2098c:	40842800 	.word	0x40842800
   20990:	0bad0004 	.word	0x0bad0004

00020994 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20994:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20996:	f002 ffa1 	bl	238dc <nrfx_gpiote_is_init>
   2099a:	4604      	mov	r4, r0
   2099c:	b968      	cbnz	r0, 209ba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2099e:	f002 ff75 	bl	2388c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   209a2:	4b08      	ldr	r3, [pc, #32]	; (209c4 <gpio_nrfx_init+0x30>)
   209a4:	4298      	cmp	r0, r3
   209a6:	d10a      	bne.n	209be <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   209a8:	4621      	mov	r1, r4
   209aa:	4807      	ldr	r0, [pc, #28]	; (209c8 <gpio_nrfx_init+0x34>)
   209ac:	f002 ff42 	bl	23834 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   209b0:	4622      	mov	r2, r4
   209b2:	2105      	movs	r1, #5
   209b4:	202f      	movs	r0, #47	; 0x2f
   209b6:	f7ec f983 	bl	ccc0 <z_arm_irq_priority_set>
		return 0;
   209ba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   209bc:	bd10      	pop	{r4, pc}
		return -EIO;
   209be:	f06f 0004 	mvn.w	r0, #4
   209c2:	e7fb      	b.n	209bc <gpio_nrfx_init+0x28>
   209c4:	0bad0000 	.word	0x0bad0000
   209c8:	000209cd 	.word	0x000209cd

000209cc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   209cc:	0942      	lsrs	r2, r0, #5
{
   209ce:	4603      	mov	r3, r0
   209d0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   209d2:	d002      	beq.n	209da <nrfx_gpio_handler+0xe>
   209d4:	2a01      	cmp	r2, #1
   209d6:	d01a      	beq.n	20a0e <nrfx_gpio_handler+0x42>
}
   209d8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   209da:	4e12      	ldr	r6, [pc, #72]	; (20a24 <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   209dc:	6932      	ldr	r2, [r6, #16]
   209de:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   209e0:	2900      	cmp	r1, #0
   209e2:	d0f9      	beq.n	209d8 <nrfx_gpio_handler+0xc>
   209e4:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   209e6:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   209ea:	680c      	ldr	r4, [r1, #0]
   209ec:	409d      	lsls	r5, r3
   209ee:	2900      	cmp	r1, #0
   209f0:	d0f2      	beq.n	209d8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   209f2:	688a      	ldr	r2, [r1, #8]
   209f4:	402a      	ands	r2, r5
   209f6:	d00e      	beq.n	20a16 <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   209f8:	684b      	ldr	r3, [r1, #4]
   209fa:	b953      	cbnz	r3, 20a12 <nrfx_gpio_handler+0x46>
   209fc:	490a      	ldr	r1, [pc, #40]	; (20a28 <nrfx_gpio_handler+0x5c>)
   209fe:	480b      	ldr	r0, [pc, #44]	; (20a2c <nrfx_gpio_handler+0x60>)
   20a00:	224d      	movs	r2, #77	; 0x4d
   20a02:	f008 f8df 	bl	28bc4 <assert_print>
   20a06:	214d      	movs	r1, #77	; 0x4d
   20a08:	4807      	ldr	r0, [pc, #28]	; (20a28 <nrfx_gpio_handler+0x5c>)
   20a0a:	f008 f8d4 	bl	28bb6 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20a0e:	4e08      	ldr	r6, [pc, #32]	; (20a30 <nrfx_gpio_handler+0x64>)
   20a10:	e7e4      	b.n	209dc <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   20a12:	4630      	mov	r0, r6
   20a14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20a16:	b11c      	cbz	r4, 20a20 <nrfx_gpio_handler+0x54>
   20a18:	6823      	ldr	r3, [r4, #0]
   20a1a:	4621      	mov	r1, r4
   20a1c:	461c      	mov	r4, r3
   20a1e:	e7e6      	b.n	209ee <nrfx_gpio_handler+0x22>
   20a20:	4623      	mov	r3, r4
   20a22:	e7fa      	b.n	20a1a <nrfx_gpio_handler+0x4e>
   20a24:	0002f854 	.word	0x0002f854
   20a28:	000346dc 	.word	0x000346dc
   20a2c:	00030da5 	.word	0x00030da5
   20a30:	0002f83c 	.word	0x0002f83c

00020a34 <gpio_nrfx_pin_configure>:
{
   20a34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   20a38:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20a3c:	f001 051f 	and.w	r5, r1, #31
   20a40:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   20a44:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20a46:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   20a4a:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20a4c:	4628      	mov	r0, r5
   20a4e:	f10d 0103 	add.w	r1, sp, #3
   20a52:	f002 fef5 	bl	23840 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20a56:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20a5a:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20a5c:	d114      	bne.n	20a88 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   20a5e:	4628      	mov	r0, r5
   20a60:	f002 ffe0 	bl	23a24 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   20a64:	4b47      	ldr	r3, [pc, #284]	; (20b84 <gpio_nrfx_pin_configure+0x150>)
   20a66:	429e      	cmp	r6, r3
   20a68:	d16e      	bne.n	20b48 <gpio_nrfx_pin_configure+0x114>
			err = nrfx_gpiote_channel_free(ch);
   20a6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20a6e:	f002 ff3f 	bl	238f0 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   20a72:	42b0      	cmp	r0, r6
   20a74:	d068      	beq.n	20b48 <gpio_nrfx_pin_configure+0x114>
   20a76:	4944      	ldr	r1, [pc, #272]	; (20b88 <gpio_nrfx_pin_configure+0x154>)
   20a78:	226a      	movs	r2, #106	; 0x6a
   20a7a:	4844      	ldr	r0, [pc, #272]	; (20b8c <gpio_nrfx_pin_configure+0x158>)
   20a7c:	f008 f8a2 	bl	28bc4 <assert_print>
   20a80:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   20a82:	4841      	ldr	r0, [pc, #260]	; (20b88 <gpio_nrfx_pin_configure+0x154>)
   20a84:	f008 f897 	bl	28bb6 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20a88:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20a8a:	4628      	mov	r0, r5
   20a8c:	4619      	mov	r1, r3
   20a8e:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   20a90:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20a94:	f002 fdae 	bl	235f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20a98:	4b3a      	ldr	r3, [pc, #232]	; (20b84 <gpio_nrfx_pin_configure+0x150>)
   20a9a:	4298      	cmp	r0, r3
   20a9c:	d004      	beq.n	20aa8 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   20a9e:	f06f 0015 	mvn.w	r0, #21
}
   20aa2:	b004      	add	sp, #16
   20aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   20aa8:	4286      	cmp	r6, r0
   20aaa:	d10c      	bne.n	20ac6 <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   20aac:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20ab0:	f002 ff1e 	bl	238f0 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   20ab4:	42b0      	cmp	r0, r6
   20ab6:	d006      	beq.n	20ac6 <gpio_nrfx_pin_configure+0x92>
   20ab8:	4933      	ldr	r1, [pc, #204]	; (20b88 <gpio_nrfx_pin_configure+0x154>)
   20aba:	227c      	movs	r2, #124	; 0x7c
   20abc:	4833      	ldr	r0, [pc, #204]	; (20b8c <gpio_nrfx_pin_configure+0x158>)
   20abe:	f008 f881 	bl	28bc4 <assert_print>
   20ac2:	217c      	movs	r1, #124	; 0x7c
   20ac4:	e7dd      	b.n	20a82 <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   20ac6:	03a6      	lsls	r6, r4, #14
   20ac8:	d54c      	bpl.n	20b64 <gpio_nrfx_pin_configure+0x130>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20aca:	f240 3306 	movw	r3, #774	; 0x306
   20ace:	4023      	ands	r3, r4
   20ad0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   20ad4:	d019      	beq.n	20b0a <gpio_nrfx_pin_configure+0xd6>
   20ad6:	d80c      	bhi.n	20af2 <gpio_nrfx_pin_configure+0xbe>
   20ad8:	2b06      	cmp	r3, #6
   20ada:	d017      	beq.n	20b0c <gpio_nrfx_pin_configure+0xd8>
   20adc:	d804      	bhi.n	20ae8 <gpio_nrfx_pin_configure+0xb4>
   20ade:	b1ab      	cbz	r3, 20b0c <gpio_nrfx_pin_configure+0xd8>
   20ae0:	2b02      	cmp	r3, #2
   20ae2:	d1dc      	bne.n	20a9e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   20ae4:	2304      	movs	r3, #4
   20ae6:	e011      	b.n	20b0c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   20aec:	d1d7      	bne.n	20a9e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   20aee:	2301      	movs	r3, #1
   20af0:	e00c      	b.n	20b0c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20af2:	f240 2202 	movw	r2, #514	; 0x202
   20af6:	4293      	cmp	r3, r2
   20af8:	d028      	beq.n	20b4c <gpio_nrfx_pin_configure+0x118>
   20afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   20afe:	d027      	beq.n	20b50 <gpio_nrfx_pin_configure+0x11c>
   20b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20b04:	d1cb      	bne.n	20a9e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   20b06:	2302      	movs	r3, #2
   20b08:	e000      	b.n	20b0c <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   20b0a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   20b0c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   20b10:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   20b14:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   20b18:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20b1a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   20b1e:	bf4c      	ite	mi
   20b20:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   20b22:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20b26:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   20b28:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20b2c:	d512      	bpl.n	20b54 <gpio_nrfx_pin_configure+0x120>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20b2e:	2301      	movs	r3, #1
   20b30:	f8d8 2004 	ldr.w	r2, [r8, #4]
   20b34:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   20b36:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20b38:	2200      	movs	r2, #0
   20b3a:	4628      	mov	r0, r5
   20b3c:	a901      	add	r1, sp, #4
   20b3e:	f002 fe01 	bl	23744 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20b42:	4b10      	ldr	r3, [pc, #64]	; (20b84 <gpio_nrfx_pin_configure+0x150>)
   20b44:	4298      	cmp	r0, r3
   20b46:	d1aa      	bne.n	20a9e <gpio_nrfx_pin_configure+0x6a>
   20b48:	2000      	movs	r0, #0
   20b4a:	e7aa      	b.n	20aa2 <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   20b4c:	2305      	movs	r3, #5
   20b4e:	e7dd      	b.n	20b0c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20b50:	2303      	movs	r3, #3
   20b52:	e7db      	b.n	20b0c <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20b54:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20b56:	bf41      	itttt	mi
   20b58:	2301      	movmi	r3, #1
   20b5a:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   20b5e:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   20b60:	60d3      	strmi	r3, [r2, #12]
}
   20b62:	e7e9      	b.n	20b38 <gpio_nrfx_pin_configure+0x104>
	if (flags & GPIO_PULL_UP) {
   20b64:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20b66:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   20b6a:	bf4c      	ite	mi
   20b6c:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   20b6e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20b72:	461a      	mov	r2, r3
   20b74:	4628      	mov	r0, r5
   20b76:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   20b78:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20b7c:	f002 fd3a 	bl	235f4 <nrfx_gpiote_input_configure>
   20b80:	e7df      	b.n	20b42 <gpio_nrfx_pin_configure+0x10e>
   20b82:	bf00      	nop
   20b84:	0bad0000 	.word	0x0bad0000
   20b88:	0003474b 	.word	0x0003474b
   20b8c:	00030da5 	.word	0x00030da5

00020b90 <z_impl_hwinfo_get_device_id>:

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	int err;

	err = soc_secure_mem_read(deviceid,
   20b90:	2208      	movs	r2, #8
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   20b92:	b530      	push	{r4, r5, lr}
   20b94:	b085      	sub	sp, #20
   20b96:	4605      	mov	r5, r0
   20b98:	460c      	mov	r4, r1
   20b9a:	eb0d 0002 	add.w	r0, sp, r2
   20b9e:	490f      	ldr	r1, [pc, #60]	; (20bdc <z_impl_hwinfo_get_device_id+0x4c>)
   20ba0:	f008 f912 	bl	28dc8 <soc_secure_mem_read>
				 (void *)&NRF_FICR_S->INFO.DEVICEID,
				 2 * sizeof(uint32_t));
	__ASSERT(err == 0, "Secure read error (%d)", err);
   20ba4:	b140      	cbz	r0, 20bb8 <z_impl_hwinfo_get_device_id+0x28>
   20ba6:	490e      	ldr	r1, [pc, #56]	; (20be0 <z_impl_hwinfo_get_device_id+0x50>)
   20ba8:	480e      	ldr	r0, [pc, #56]	; (20be4 <z_impl_hwinfo_get_device_id+0x54>)
   20baa:	2228      	movs	r2, #40	; 0x28
   20bac:	f008 f80a 	bl	28bc4 <assert_print>
   20bb0:	2128      	movs	r1, #40	; 0x28
   20bb2:	480b      	ldr	r0, [pc, #44]	; (20be0 <z_impl_hwinfo_get_device_id+0x50>)
   20bb4:	f007 ffff 	bl	28bb6 <assert_post_action>
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   20bb8:	2c08      	cmp	r4, #8
   20bba:	bf28      	it	cs
   20bbc:	2408      	movcs	r4, #8
   20bbe:	9b03      	ldr	r3, [sp, #12]
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   20bc0:	4622      	mov	r2, r4
   20bc2:	ba1b      	rev	r3, r3
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   20bc4:	9300      	str	r3, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   20bc6:	9b02      	ldr	r3, [sp, #8]
	memcpy(buffer, dev_id.id, length);
   20bc8:	4669      	mov	r1, sp
   20bca:	ba1b      	rev	r3, r3
   20bcc:	4628      	mov	r0, r5
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   20bce:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   20bd0:	f009 fca3 	bl	2a51a <memcpy>

	return length;
}
   20bd4:	4620      	mov	r0, r4
   20bd6:	b005      	add	sp, #20
   20bd8:	bd30      	pop	{r4, r5, pc}
   20bda:	bf00      	nop
   20bdc:	00ff0204 	.word	0x00ff0204
   20be0:	0003478f 	.word	0x0003478f
   20be4:	00030da5 	.word	0x00030da5

00020be8 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   20be8:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   20bec:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   20bf0:	280a      	cmp	r0, #10
   20bf2:	bf9a      	itte	ls
   20bf4:	4b02      	ldrls	r3, [pc, #8]	; (20c00 <qspi_get_zephyr_ret_code+0x18>)
   20bf6:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   20bfa:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   20bfe:	4770      	bx	lr
   20c00:	00030ce4 	.word	0x00030ce4

00020c04 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   20c04:	4b02      	ldr	r3, [pc, #8]	; (20c10 <qspi_nor_pages_layout+0xc>)
   20c06:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   20c08:	2301      	movs	r3, #1
   20c0a:	6013      	str	r3, [r2, #0]
}
   20c0c:	4770      	bx	lr
   20c0e:	bf00      	nop
   20c10:	00030b0c 	.word	0x00030b0c

00020c14 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   20c14:	4800      	ldr	r0, [pc, #0]	; (20c18 <qspi_flash_get_parameters+0x4>)
   20c16:	4770      	bx	lr
   20c18:	00030aa0 	.word	0x00030aa0

00020c1c <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   20c1c:	4b05      	ldr	r3, [pc, #20]	; (20c34 <qspi_wait_for_completion.isra.0+0x18>)
   20c1e:	4299      	cmp	r1, r3
   20c20:	d106      	bne.n	20c30 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   20c22:	f04f 32ff 	mov.w	r2, #4294967295
   20c26:	f04f 33ff 	mov.w	r3, #4294967295
   20c2a:	3030      	adds	r0, #48	; 0x30
   20c2c:	f005 b88e 	b.w	25d4c <z_impl_k_sem_take>
}
   20c30:	4770      	bx	lr
   20c32:	bf00      	nop
   20c34:	0bad0000 	.word	0x0bad0000

00020c38 <qspi_device_init>:
{
   20c38:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   20c3a:	6905      	ldr	r5, [r0, #16]
{
   20c3c:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   20c3e:	4e0f      	ldr	r6, [pc, #60]	; (20c7c <qspi_device_init+0x44>)
	qspi_lock(dev);
   20c40:	4628      	mov	r0, r5
   20c42:	f00d fa1a 	bl	2e07a <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   20c46:	f105 0048 	add.w	r0, r5, #72	; 0x48
   20c4a:	f00d fa0e 	bl	2e06a <k_sem_give>
	if (!qspi_initialized) {
   20c4e:	7833      	ldrb	r3, [r6, #0]
   20c50:	b98b      	cbnz	r3, 20c76 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   20c52:	462a      	mov	r2, r5
   20c54:	490a      	ldr	r1, [pc, #40]	; (20c80 <qspi_device_init+0x48>)
   20c56:	6860      	ldr	r0, [r4, #4]
   20c58:	f003 fa80 	bl	2415c <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   20c5c:	f7ff ffc4 	bl	20be8 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   20c60:	fab0 f380 	clz	r3, r0
   20c64:	4605      	mov	r5, r0
   20c66:	095b      	lsrs	r3, r3, #5
   20c68:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   20c6a:	6920      	ldr	r0, [r4, #16]
   20c6c:	3018      	adds	r0, #24
   20c6e:	f00d f9fc 	bl	2e06a <k_sem_give>
}
   20c72:	4628      	mov	r0, r5
   20c74:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   20c76:	2500      	movs	r5, #0
   20c78:	e7f7      	b.n	20c6a <qspi_device_init+0x32>
   20c7a:	bf00      	nop
   20c7c:	2000b335 	.word	0x2000b335
   20c80:	0002e06f 	.word	0x0002e06f

00020c84 <qspi_device_uninit>:
{
   20c84:	b538      	push	{r3, r4, r5, lr}
   20c86:	4604      	mov	r4, r0
	qspi_lock(dev);
   20c88:	6900      	ldr	r0, [r0, #16]
   20c8a:	f00d f9f6 	bl	2e07a <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   20c8e:	6925      	ldr	r5, [r4, #16]
   20c90:	2200      	movs	r2, #0
   20c92:	2300      	movs	r3, #0
   20c94:	f105 0048 	add.w	r0, r5, #72	; 0x48
   20c98:	f005 f858 	bl	25d4c <z_impl_k_sem_take>
	if (last) {
   20c9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   20c9e:	b94b      	cbnz	r3, 20cb4 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   20ca0:	4d0a      	ldr	r5, [pc, #40]	; (20ccc <qspi_device_uninit+0x48>)
   20ca2:	f003 fba5 	bl	243f0 <nrfx_qspi_mem_busy_check>
   20ca6:	42a8      	cmp	r0, r5
   20ca8:	d10a      	bne.n	20cc0 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   20caa:	f003 fbc3 	bl	24434 <nrfx_qspi_uninit>
		qspi_initialized = false;
   20cae:	2200      	movs	r2, #0
   20cb0:	4b07      	ldr	r3, [pc, #28]	; (20cd0 <qspi_device_uninit+0x4c>)
   20cb2:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   20cb4:	6920      	ldr	r0, [r4, #16]
}
   20cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   20cba:	3018      	adds	r0, #24
   20cbc:	f00d b9d5 	b.w	2e06a <k_sem_give>
	return z_impl_k_sleep(timeout);
   20cc0:	2100      	movs	r1, #0
   20cc2:	f240 6067 	movw	r0, #1639	; 0x667
   20cc6:	f006 fc77 	bl	275b8 <z_impl_k_sleep>
   20cca:	e7ea      	b.n	20ca2 <qspi_device_uninit+0x1e>
   20ccc:	0bad0000 	.word	0x0bad0000
   20cd0:	2000b335 	.word	0x2000b335

00020cd4 <qspi_send_cmd>:
{
   20cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20cd6:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   20cd8:	684c      	ldr	r4, [r1, #4]
{
   20cda:	4605      	mov	r5, r0
   20cdc:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   20cde:	b174      	cbz	r4, 20cfe <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   20ce0:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   20ce4:	6888      	ldr	r0, [r1, #8]
   20ce6:	b310      	cbz	r0, 20d2e <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   20ce8:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   20cec:	b300      	cbz	r0, 20d30 <qspi_send_cmd+0x5c>
   20cee:	b1fb      	cbz	r3, 20d30 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   20cf0:	4298      	cmp	r0, r3
   20cf2:	d006      	beq.n	20d02 <qspi_send_cmd+0x2e>
		return -EINVAL;
   20cf4:	f06f 0015 	mvn.w	r0, #21
}
   20cf8:	370c      	adds	r7, #12
   20cfa:	46bd      	mov	sp, r7
   20cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   20cfe:	4623      	mov	r3, r4
   20d00:	e7f0      	b.n	20ce4 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   20d02:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   20d04:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   20d06:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   20d08:	d915      	bls.n	20d36 <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   20d0a:	466c      	mov	r4, sp
   20d0c:	b088      	sub	sp, #32
   20d0e:	466a      	mov	r2, sp
   20d10:	61d3      	str	r3, [r2, #28]
   20d12:	2304      	movs	r3, #4
   20d14:	4814      	ldr	r0, [pc, #80]	; (20d68 <qspi_send_cmd+0x94>)
   20d16:	e9c2 0105 	strd	r0, r1, [r2, #20]
   20d1a:	f842 3f10 	str.w	r3, [r2, #16]!
   20d1e:	2300      	movs	r3, #0
   20d20:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   20d24:	4811      	ldr	r0, [pc, #68]	; (20d6c <qspi_send_cmd+0x98>)
   20d26:	f7e9 ff19 	bl	ab5c <z_impl_z_log_msg_static_create>
   20d2a:	46a5      	mov	sp, r4
		return -EINVAL;
   20d2c:	e7e2      	b.n	20cf4 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   20d2e:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   20d30:	3301      	adds	r3, #1
   20d32:	4403      	add	r3, r0
   20d34:	e7e6      	b.n	20d04 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   20d36:	707b      	strb	r3, [r7, #1]
   20d38:	f240 1301 	movw	r3, #257	; 0x101
   20d3c:	807b      	strh	r3, [r7, #2]
   20d3e:	2300      	movs	r3, #0
	qspi_lock(dev);
   20d40:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   20d42:	713b      	strb	r3, [r7, #4]
   20d44:	7039      	strb	r1, [r7, #0]
   20d46:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   20d48:	f00d f997 	bl	2e07a <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   20d4c:	4621      	mov	r1, r4
   20d4e:	4632      	mov	r2, r6
   20d50:	4638      	mov	r0, r7
   20d52:	f003 faf1 	bl	24338 <nrfx_qspi_cinstr_xfer>
   20d56:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   20d58:	6928      	ldr	r0, [r5, #16]
   20d5a:	3018      	adds	r0, #24
   20d5c:	f00d f985 	bl	2e06a <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   20d60:	4620      	mov	r0, r4
   20d62:	f7ff ff41 	bl	20be8 <qspi_get_zephyr_ret_code>
   20d66:	e7c7      	b.n	20cf8 <qspi_send_cmd+0x24>
   20d68:	000347c9 	.word	0x000347c9
   20d6c:	0002fdcc 	.word	0x0002fdcc

00020d70 <qspi_nor_init>:
{
   20d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   20d74:	2202      	movs	r2, #2
   20d76:	b086      	sub	sp, #24
   20d78:	4b6a      	ldr	r3, [pc, #424]	; (20f24 <qspi_nor_init+0x1b4>)
   20d7a:	af00      	add	r7, sp, #0
   20d7c:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   20d80:	6843      	ldr	r3, [r0, #4]
{
   20d82:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   20d84:	6a1e      	ldr	r6, [r3, #32]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   20d86:	2100      	movs	r1, #0
   20d88:	4630      	mov	r0, r6
   20d8a:	f107 020c 	add.w	r2, r7, #12
   20d8e:	f00d fae4 	bl	2e35a <pinctrl_lookup_state>
	if (ret < 0) {
   20d92:	1e04      	subs	r4, r0, #0
   20d94:	db3a      	blt.n	20e0c <qspi_nor_init+0x9c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   20d96:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   20d98:	6832      	ldr	r2, [r6, #0]
   20d9a:	7919      	ldrb	r1, [r3, #4]
   20d9c:	6818      	ldr	r0, [r3, #0]
   20d9e:	f00d faef 	bl	2e380 <pinctrl_configure_pins>
	if (ret < 0) {
   20da2:	1e04      	subs	r4, r0, #0
   20da4:	db32      	blt.n	20e0c <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   20da6:	2200      	movs	r2, #0
   20da8:	2101      	movs	r1, #1
   20daa:	202b      	movs	r0, #43	; 0x2b
   20dac:	f7eb ff88 	bl	ccc0 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   20db0:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   20db2:	692a      	ldr	r2, [r5, #16]
   20db4:	4630      	mov	r0, r6
   20db6:	495c      	ldr	r1, [pc, #368]	; (20f28 <qspi_nor_init+0x1b8>)
   20db8:	f003 f9d0 	bl	2415c <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   20dbc:	f7ff ff14 	bl	20be8 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   20dc0:	1e04      	subs	r4, r0, #0
   20dc2:	db23      	blt.n	20e0c <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   20dc4:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   20dc6:	3b02      	subs	r3, #2
   20dc8:	2b01      	cmp	r3, #1
   20dca:	d924      	bls.n	20e16 <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   20dcc:	f896 800a 	ldrb.w	r8, [r6, #10]
   20dd0:	f1a8 0803 	sub.w	r8, r8, #3
   20dd4:	f1b8 0f01 	cmp.w	r8, #1
   20dd8:	bf8c      	ite	hi
   20dda:	f04f 0800 	movhi.w	r8, #0
   20dde:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   20de2:	4628      	mov	r0, r5
   20de4:	f00d f96b 	bl	2e0be <qspi_rdsr.constprop.0>
		if (ret < 0) {
   20de8:	1e04      	subs	r4, r0, #0
   20dea:	da17      	bge.n	20e1c <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   20dec:	466d      	mov	r5, sp
   20dee:	b088      	sub	sp, #32
   20df0:	466a      	mov	r2, sp
   20df2:	4b4e      	ldr	r3, [pc, #312]	; (20f2c <qspi_nor_init+0x1bc>)
   20df4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   20df8:	2303      	movs	r3, #3
   20dfa:	f842 3f10 	str.w	r3, [r2, #16]!
   20dfe:	2300      	movs	r3, #0
   20e00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20e04:	484a      	ldr	r0, [pc, #296]	; (20f30 <qspi_nor_init+0x1c0>)
   20e06:	f7e9 fea9 	bl	ab5c <z_impl_z_log_msg_static_create>
   20e0a:	46ad      	mov	sp, r5
}
   20e0c:	4620      	mov	r0, r4
   20e0e:	3718      	adds	r7, #24
   20e10:	46bd      	mov	sp, r7
   20e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   20e16:	f04f 0801 	mov.w	r8, #1
   20e1a:	e7e2      	b.n	20de2 <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   20e1c:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   20e1e:	f3c4 1480 	ubfx	r4, r4, #6, #1
   20e22:	45a0      	cmp	r8, r4
   20e24:	f107 0604 	add.w	r6, r7, #4
   20e28:	d031      	beq.n	20e8e <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   20e2a:	2300      	movs	r3, #0
			sr ^= qe_mask;
   20e2c:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   20e30:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   20e32:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   20e34:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   20e36:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   20e38:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   20e3c:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   20e3e:	617b      	str	r3, [r7, #20]
   20e40:	733a      	strb	r2, [r7, #12]
   20e42:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   20e44:	f107 010c 	add.w	r1, r7, #12
   20e48:	f7ff ff44 	bl	20cd4 <qspi_send_cmd>
	if (ret == 0) {
   20e4c:	1e04      	subs	r4, r0, #0
   20e4e:	d017      	beq.n	20e80 <qspi_nor_init+0x110>
		if (ret < 0) {
   20e50:	dadc      	bge.n	20e0c <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   20e52:	4a38      	ldr	r2, [pc, #224]	; (20f34 <qspi_nor_init+0x1c4>)
   20e54:	4b38      	ldr	r3, [pc, #224]	; (20f38 <qspi_nor_init+0x1c8>)
   20e56:	466d      	mov	r5, sp
   20e58:	b08a      	sub	sp, #40	; 0x28
   20e5a:	f1b8 0f00 	cmp.w	r8, #0
   20e5e:	bf18      	it	ne
   20e60:	4613      	movne	r3, r2
   20e62:	466a      	mov	r2, sp
   20e64:	4935      	ldr	r1, [pc, #212]	; (20f3c <qspi_nor_init+0x1cc>)
   20e66:	61d4      	str	r4, [r2, #28]
   20e68:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
   20e70:	8413      	strh	r3, [r2, #32]
   20e72:	4b33      	ldr	r3, [pc, #204]	; (20f40 <qspi_nor_init+0x1d0>)
   20e74:	f842 3f10 	str.w	r3, [r2, #16]!
   20e78:	2300      	movs	r3, #0
   20e7a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   20e7e:	e7c1      	b.n	20e04 <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   20e80:	4628      	mov	r0, r5
   20e82:	f00d f91c 	bl	2e0be <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   20e86:	1e04      	subs	r4, r0, #0
   20e88:	dbe3      	blt.n	20e52 <qspi_nor_init+0xe2>
   20e8a:	07e3      	lsls	r3, r4, #31
   20e8c:	d4f8      	bmi.n	20e80 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   20e8e:	4628      	mov	r0, r5
   20e90:	f7ff fef8 	bl	20c84 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   20e94:	2403      	movs	r4, #3
   20e96:	2300      	movs	r3, #0
   20e98:	e9c7 4302 	strd	r4, r3, [r7, #8]
   20e9c:	613b      	str	r3, [r7, #16]
   20e9e:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   20ea0:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   20ea2:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   20ea4:	733b      	strb	r3, [r7, #12]
   20ea6:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   20ea8:	f7ff fec6 	bl	20c38 <qspi_device_init>
	if (ret == 0) {
   20eac:	4602      	mov	r2, r0
   20eae:	b128      	cbz	r0, 20ebc <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   20eb0:	4628      	mov	r0, r5
   20eb2:	f7ff fee7 	bl	20c84 <qspi_device_uninit>
		return -ENODEV;
   20eb6:	f06f 0412 	mvn.w	r4, #18
   20eba:	e7a7      	b.n	20e0c <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   20ebc:	4628      	mov	r0, r5
   20ebe:	f107 010c 	add.w	r1, r7, #12
   20ec2:	f7ff ff07 	bl	20cd4 <qspi_send_cmd>
   20ec6:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   20ec8:	4628      	mov	r0, r5
   20eca:	f7ff fedb 	bl	20c84 <qspi_device_uninit>
	if (ret != 0) {
   20ece:	2e00      	cmp	r6, #0
   20ed0:	d1f1      	bne.n	20eb6 <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   20ed2:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   20ed4:	4622      	mov	r2, r4
   20ed6:	4639      	mov	r1, r7
   20ed8:	f105 001c 	add.w	r0, r5, #28
   20edc:	f009 faf6 	bl	2a4cc <memcmp>
   20ee0:	4604      	mov	r4, r0
   20ee2:	2800      	cmp	r0, #0
   20ee4:	d092      	beq.n	20e0c <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   20ee6:	466c      	mov	r4, sp
   20ee8:	b08c      	sub	sp, #48	; 0x30
   20eea:	466a      	mov	r2, sp
   20eec:	f897 8000 	ldrb.w	r8, [r7]
   20ef0:	f897 e001 	ldrb.w	lr, [r7, #1]
   20ef4:	f897 c002 	ldrb.w	ip, [r7, #2]
   20ef8:	7f28      	ldrb	r0, [r5, #28]
   20efa:	7f69      	ldrb	r1, [r5, #29]
   20efc:	7fab      	ldrb	r3, [r5, #30]
   20efe:	62d3      	str	r3, [r2, #44]	; 0x2c
   20f00:	2308      	movs	r3, #8
   20f02:	4d10      	ldr	r5, [pc, #64]	; (20f44 <qspi_nor_init+0x1d4>)
   20f04:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   20f08:	e9c2 5805 	strd	r5, r8, [r2, #20]
   20f0c:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   20f10:	f842 3f10 	str.w	r3, [r2, #16]!
   20f14:	f244 0140 	movw	r1, #16448	; 0x4040
   20f18:	4633      	mov	r3, r6
   20f1a:	4805      	ldr	r0, [pc, #20]	; (20f30 <qspi_nor_init+0x1c0>)
   20f1c:	f7e9 fe1e 	bl	ab5c <z_impl_z_log_msg_static_create>
   20f20:	46a5      	mov	sp, r4
		return -ENODEV;
   20f22:	e7c8      	b.n	20eb6 <qspi_nor_init+0x146>
   20f24:	40005000 	.word	0x40005000
   20f28:	0002e06f 	.word	0x0002e06f
   20f2c:	000347f6 	.word	0x000347f6
   20f30:	0002fdcc 	.word	0x0002fdcc
   20f34:	000347ec 	.word	0x000347ec
   20f38:	000347f0 	.word	0x000347f0
   20f3c:	00034806 	.word	0x00034806
   20f40:	01000004 	.word	0x01000004
   20f44:	00034817 	.word	0x00034817

00020f48 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   20f48:	b580      	push	{r7, lr}
   20f4a:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   20f4c:	b088      	sub	sp, #32
   20f4e:	466a      	mov	r2, sp
   20f50:	4b08      	ldr	r3, [pc, #32]	; (20f74 <qspi_nor_erase.part.0+0x2c>)
   20f52:	61d1      	str	r1, [r2, #28]
   20f54:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20f58:	2304      	movs	r3, #4
   20f5a:	f842 3f10 	str.w	r3, [r2, #16]!
   20f5e:	2300      	movs	r3, #0
   20f60:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20f64:	4804      	ldr	r0, [pc, #16]	; (20f78 <qspi_nor_erase.part.0+0x30>)
   20f66:	f7e9 fdf9 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   20f6a:	f06f 0015 	mvn.w	r0, #21
   20f6e:	46bd      	mov	sp, r7
   20f70:	bd80      	pop	{r7, pc}
   20f72:	bf00      	nop
   20f74:	00034849 	.word	0x00034849
   20f78:	0002fdcc 	.word	0x0002fdcc

00020f7c <qspi_nor_erase>:
{
   20f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   20f80:	1e0b      	subs	r3, r1, #0
{
   20f82:	4606      	mov	r6, r0
   20f84:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   20f86:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   20f8a:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   20f8c:	db05      	blt.n	20f9a <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   20f8e:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   20f90:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   20f94:	4699      	mov	r9, r3
	if (addr < 0 ||
   20f96:	4291      	cmp	r1, r2
   20f98:	d908      	bls.n	20fac <qspi_nor_erase+0x30>
   20f9a:	4629      	mov	r1, r5
   20f9c:	4618      	mov	r0, r3
   20f9e:	f7ff ffd3 	bl	20f48 <qspi_nor_erase.part.0>
   20fa2:	4604      	mov	r4, r0
}
   20fa4:	4620      	mov	r0, r4
   20fa6:	46bd      	mov	sp, r7
   20fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   20fac:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   20fb0:	2d00      	cmp	r5, #0
   20fb2:	f000 8081 	beq.w	210b8 <qspi_nor_erase+0x13c>
   20fb6:	f3c5 030b 	ubfx	r3, r5, #0, #12
   20fba:	4313      	orrs	r3, r2
   20fbc:	d17c      	bne.n	210b8 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   20fbe:	f7ff fe3b 	bl	20c38 <qspi_device_init>
	if (rv != 0) {
   20fc2:	4604      	mov	r4, r0
   20fc4:	bb60      	cbnz	r0, 21020 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   20fc6:	6930      	ldr	r0, [r6, #16]
   20fc8:	f00d f85e 	bl	2e088 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   20fcc:	4621      	mov	r1, r4
   20fce:	4630      	mov	r0, r6
   20fd0:	f00d f860 	bl	2e094 <qspi_nor_write_protection_set>
	if (rv != 0) {
   20fd4:	4604      	mov	r4, r0
   20fd6:	bb00      	cbnz	r0, 2101a <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   20fd8:	6930      	ldr	r0, [r6, #16]
   20fda:	f00d f84e 	bl	2e07a <qspi_lock.isra.0>
		if (size == params->size) {
   20fde:	f8da 3018 	ldr.w	r3, [sl, #24]
   20fe2:	42ab      	cmp	r3, r5
   20fe4:	d120      	bne.n	21028 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   20fe6:	f00d fcbe 	bl	2e966 <nrfx_qspi_chip_erase>
   20fea:	46ab      	mov	fp, r5
   20fec:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   20fee:	4641      	mov	r1, r8
   20ff0:	6930      	ldr	r0, [r6, #16]
   20ff2:	f7ff fe13 	bl	20c1c <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   20ff6:	4b32      	ldr	r3, [pc, #200]	; (210c0 <qspi_nor_erase+0x144>)
   20ff8:	4598      	cmp	r8, r3
   20ffa:	d147      	bne.n	2108c <qspi_nor_erase+0x110>
	while (size > 0) {
   20ffc:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   21000:	44d9      	add	r9, fp
	while (size > 0) {
   21002:	d1ec      	bne.n	20fde <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   21004:	6930      	ldr	r0, [r6, #16]
   21006:	3018      	adds	r0, #24
   21008:	f00d f82f 	bl	2e06a <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   2100c:	2101      	movs	r1, #1
   2100e:	4630      	mov	r0, r6
   21010:	f00d f840 	bl	2e094 <qspi_nor_write_protection_set>
   21014:	2c00      	cmp	r4, #0
   21016:	bf08      	it	eq
   21018:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   2101a:	6930      	ldr	r0, [r6, #16]
   2101c:	f00d f825 	bl	2e06a <k_sem_give>
	qspi_device_uninit(dev);
   21020:	4630      	mov	r0, r6
   21022:	f7ff fe2f 	bl	20c84 <qspi_device_uninit>
	return rv;
   21026:	e7bd      	b.n	20fa4 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21028:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2102c:	d30a      	bcc.n	21044 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   2102e:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21032:	b953      	cbnz	r3, 2104a <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21034:	4649      	mov	r1, r9
   21036:	2001      	movs	r0, #1
   21038:	f003 fa5c 	bl	244f4 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   2103c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21040:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   21042:	e7d4      	b.n	20fee <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21044:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21048:	d309      	bcc.n	2105e <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   2104a:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2104e:	b930      	cbnz	r0, 2105e <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21050:	4649      	mov	r1, r9
   21052:	f003 fa4f 	bl	244f4 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   21056:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   2105a:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   2105c:	e7c7      	b.n	20fee <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   2105e:	466c      	mov	r4, sp
   21060:	b088      	sub	sp, #32
   21062:	466a      	mov	r2, sp
   21064:	4b17      	ldr	r3, [pc, #92]	; (210c4 <qspi_nor_erase+0x148>)
   21066:	61d5      	str	r5, [r2, #28]
   21068:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2106c:	2304      	movs	r3, #4
   2106e:	f842 3f10 	str.w	r3, [r2, #16]!
   21072:	2300      	movs	r3, #0
   21074:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21078:	4813      	ldr	r0, [pc, #76]	; (210c8 <qspi_nor_erase+0x14c>)
   2107a:	f7e9 fd6f 	bl	ab5c <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   2107e:	4913      	ldr	r1, [pc, #76]	; (210cc <qspi_nor_erase+0x150>)
   21080:	46a5      	mov	sp, r4
   21082:	6930      	ldr	r0, [r6, #16]
   21084:	f7ff fdca 	bl	20c1c <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   21088:	f8df 8040 	ldr.w	r8, [pc, #64]	; 210cc <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   2108c:	466c      	mov	r4, sp
   2108e:	b088      	sub	sp, #32
   21090:	466a      	mov	r2, sp
   21092:	4b0f      	ldr	r3, [pc, #60]	; (210d0 <qspi_nor_erase+0x154>)
   21094:	61d5      	str	r5, [r2, #28]
   21096:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2109a:	2304      	movs	r3, #4
   2109c:	f842 3f10 	str.w	r3, [r2, #16]!
   210a0:	2300      	movs	r3, #0
   210a2:	4809      	ldr	r0, [pc, #36]	; (210c8 <qspi_nor_erase+0x14c>)
   210a4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   210a8:	f7e9 fd58 	bl	ab5c <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   210ac:	4640      	mov	r0, r8
   210ae:	46a5      	mov	sp, r4
   210b0:	f7ff fd9a 	bl	20be8 <qspi_get_zephyr_ret_code>
   210b4:	4604      	mov	r4, r0
			break;
   210b6:	e7a5      	b.n	21004 <qspi_nor_erase+0x88>
		return -EINVAL;
   210b8:	f06f 0415 	mvn.w	r4, #21
   210bc:	e772      	b.n	20fa4 <qspi_nor_erase+0x28>
   210be:	bf00      	nop
   210c0:	0bad0000 	.word	0x0bad0000
   210c4:	00034893 	.word	0x00034893
   210c8:	0002fdcc 	.word	0x0002fdcc
   210cc:	0bad0004 	.word	0x0bad0004
   210d0:	000348b1 	.word	0x000348b1

000210d4 <qspi_nor_write>:
{
   210d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210d8:	b083      	sub	sp, #12
   210da:	4605      	mov	r5, r0
   210dc:	4688      	mov	r8, r1
   210de:	461e      	mov	r6, r3
	if (!src) {
   210e0:	4691      	mov	r9, r2
{
   210e2:	af00      	add	r7, sp, #0
	if (!src) {
   210e4:	b30a      	cbz	r2, 2112a <qspi_nor_write+0x56>
	if ((size == 0)
   210e6:	b303      	cbz	r3, 2112a <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   210e8:	2b04      	cmp	r3, #4
   210ea:	d901      	bls.n	210f0 <qspi_nor_write+0x1c>
   210ec:	07b3      	lsls	r3, r6, #30
   210ee:	d11c      	bne.n	2112a <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   210f0:	f018 0f03 	tst.w	r8, #3
   210f4:	d119      	bne.n	2112a <qspi_nor_write+0x56>
	if (addr < 0 ||
   210f6:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   210fa:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   210fc:	db04      	blt.n	21108 <qspi_nor_write+0x34>
   210fe:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21100:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   21104:	4293      	cmp	r3, r2
   21106:	d917      	bls.n	21138 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   21108:	466c      	mov	r4, sp
   2110a:	b088      	sub	sp, #32
   2110c:	466a      	mov	r2, sp
   2110e:	4b42      	ldr	r3, [pc, #264]	; (21218 <qspi_nor_write+0x144>)
   21110:	61d6      	str	r6, [r2, #28]
   21112:	e9c2 3805 	strd	r3, r8, [r2, #20]
   21116:	2304      	movs	r3, #4
   21118:	f842 3f10 	str.w	r3, [r2, #16]!
   2111c:	2300      	movs	r3, #0
   2111e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21122:	483e      	ldr	r0, [pc, #248]	; (2121c <qspi_nor_write+0x148>)
   21124:	f7e9 fd1a 	bl	ab5c <z_impl_z_log_msg_static_create>
   21128:	46a5      	mov	sp, r4
		return -EINVAL;
   2112a:	f06f 0415 	mvn.w	r4, #21
}
   2112e:	4620      	mov	r0, r4
   21130:	370c      	adds	r7, #12
   21132:	46bd      	mov	sp, r7
   21134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   21138:	4628      	mov	r0, r5
   2113a:	f7ff fd7d 	bl	20c38 <qspi_device_init>
	if (rc != 0) {
   2113e:	4604      	mov	r4, r0
   21140:	2800      	cmp	r0, #0
   21142:	d160      	bne.n	21206 <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   21144:	6928      	ldr	r0, [r5, #16]
   21146:	f00c ff9f 	bl	2e088 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   2114a:	4621      	mov	r1, r4
   2114c:	4628      	mov	r0, r5
   2114e:	f00c ffa1 	bl	2e094 <qspi_nor_write_protection_set>
   21152:	4604      	mov	r4, r0
	qspi_lock(dev);
   21154:	6928      	ldr	r0, [r5, #16]
   21156:	f00c ff90 	bl	2e07a <qspi_lock.isra.0>
	if (!res) {
   2115a:	2c00      	cmp	r4, #0
   2115c:	d140      	bne.n	211e0 <qspi_nor_write+0x10c>
		if (size < 4U) {
   2115e:	2e03      	cmp	r6, #3
   21160:	d81c      	bhi.n	2119c <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   21162:	2104      	movs	r1, #4
   21164:	4642      	mov	r2, r8
   21166:	1878      	adds	r0, r7, r1
   21168:	f00d fbfa 	bl	2e960 <nrfx_qspi_read>
   2116c:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   2116e:	4601      	mov	r1, r0
   21170:	6928      	ldr	r0, [r5, #16]
   21172:	f7ff fd53 	bl	20c1c <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   21176:	4b2a      	ldr	r3, [pc, #168]	; (21220 <qspi_nor_write+0x14c>)
   21178:	429c      	cmp	r4, r3
   2117a:	d131      	bne.n	211e0 <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   2117c:	4632      	mov	r2, r6
   2117e:	4649      	mov	r1, r9
   21180:	1d38      	adds	r0, r7, #4
   21182:	f009 f9ca 	bl	2a51a <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21186:	2104      	movs	r1, #4
   21188:	4642      	mov	r2, r8
   2118a:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   2118c:	f00d fbe5 	bl	2e95a <nrfx_qspi_write>
   21190:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21192:	4601      	mov	r1, r0
   21194:	6928      	ldr	r0, [r5, #16]
   21196:	f7ff fd41 	bl	20c1c <qspi_wait_for_completion.isra.0>
   2119a:	e021      	b.n	211e0 <qspi_nor_write+0x10c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2119c:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   211a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   211a4:	d033      	beq.n	2120e <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   211a6:	f8df b078 	ldr.w	fp, [pc, #120]	; 21220 <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   211aa:	2e04      	cmp	r6, #4
   211ac:	46b2      	mov	sl, r6
   211ae:	bf28      	it	cs
   211b0:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   211b4:	4649      	mov	r1, r9
   211b6:	4652      	mov	r2, sl
   211b8:	1d38      	adds	r0, r7, #4
   211ba:	f009 f9ae 	bl	2a51a <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   211be:	2104      	movs	r1, #4
   211c0:	4642      	mov	r2, r8
   211c2:	1878      	adds	r0, r7, r1
   211c4:	f00d fbc9 	bl	2e95a <nrfx_qspi_write>
   211c8:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   211ca:	4601      	mov	r1, r0
   211cc:	6928      	ldr	r0, [r5, #16]
   211ce:	f7ff fd25 	bl	20c1c <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   211d2:	455c      	cmp	r4, fp
   211d4:	d104      	bne.n	211e0 <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   211d6:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   211da:	44d1      	add	r9, sl
				addr += len;
   211dc:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   211de:	d1e4      	bne.n	211aa <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   211e0:	6928      	ldr	r0, [r5, #16]
   211e2:	3018      	adds	r0, #24
   211e4:	f00c ff41 	bl	2e06a <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   211e8:	2101      	movs	r1, #1
   211ea:	4628      	mov	r0, r5
   211ec:	f00c ff52 	bl	2e094 <qspi_nor_write_protection_set>
   211f0:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   211f2:	6928      	ldr	r0, [r5, #16]
   211f4:	f00c ff39 	bl	2e06a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   211f8:	2c00      	cmp	r4, #0
   211fa:	bf14      	ite	ne
   211fc:	4620      	movne	r0, r4
   211fe:	4630      	moveq	r0, r6
   21200:	f7ff fcf2 	bl	20be8 <qspi_get_zephyr_ret_code>
   21204:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   21206:	4628      	mov	r0, r5
   21208:	f7ff fd3c 	bl	20c84 <qspi_device_uninit>
	return rc;
   2120c:	e78f      	b.n	2112e <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   2120e:	4642      	mov	r2, r8
   21210:	4631      	mov	r1, r6
   21212:	4648      	mov	r0, r9
   21214:	e7ba      	b.n	2118c <qspi_nor_write+0xb8>
   21216:	bf00      	nop
   21218:	000348cf 	.word	0x000348cf
   2121c:	0002fdcc 	.word	0x0002fdcc
   21220:	0bad0000 	.word	0x0bad0000

00021224 <qspi_nor_read>:
{
   21224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21228:	b085      	sub	sp, #20
   2122a:	4681      	mov	r9, r0
   2122c:	460e      	mov	r6, r1
   2122e:	461c      	mov	r4, r3
	if (!dest) {
   21230:	4690      	mov	r8, r2
{
   21232:	af00      	add	r7, sp, #0
	if (!dest) {
   21234:	b1d2      	cbz	r2, 2126c <qspi_nor_read+0x48>
	if (!size) {
   21236:	2b00      	cmp	r3, #0
   21238:	f000 80ac 	beq.w	21394 <qspi_nor_read+0x170>
	if (addr < 0 ||
   2123c:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   2123e:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   21240:	db03      	blt.n	2124a <qspi_nor_read+0x26>
   21242:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21244:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   21246:	4293      	cmp	r3, r2
   21248:	d917      	bls.n	2127a <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   2124a:	466d      	mov	r5, sp
   2124c:	b088      	sub	sp, #32
   2124e:	466a      	mov	r2, sp
   21250:	4b51      	ldr	r3, [pc, #324]	; (21398 <qspi_nor_read+0x174>)
   21252:	61d4      	str	r4, [r2, #28]
   21254:	e9c2 3605 	strd	r3, r6, [r2, #20]
   21258:	2304      	movs	r3, #4
   2125a:	f842 3f10 	str.w	r3, [r2, #16]!
   2125e:	2300      	movs	r3, #0
   21260:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21264:	484d      	ldr	r0, [pc, #308]	; (2139c <qspi_nor_read+0x178>)
   21266:	f7e9 fc79 	bl	ab5c <z_impl_z_log_msg_static_create>
   2126a:	46ad      	mov	sp, r5
		return -EINVAL;
   2126c:	f06f 0515 	mvn.w	r5, #21
}
   21270:	4628      	mov	r0, r5
   21272:	3714      	adds	r7, #20
   21274:	46bd      	mov	sp, r7
   21276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   2127a:	f7ff fcdd 	bl	20c38 <qspi_device_init>
	if (rc != 0) {
   2127e:	4605      	mov	r5, r0
   21280:	2800      	cmp	r0, #0
   21282:	f040 8081 	bne.w	21388 <qspi_nor_read+0x164>
	qspi_lock(dev);
   21286:	4275      	negs	r5, r6
   21288:	f005 0503 	and.w	r5, r5, #3
   2128c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21290:	f00c fef3 	bl	2e07a <qspi_lock.isra.0>
	if (flash_prefix > size) {
   21294:	42a5      	cmp	r5, r4
   21296:	bf28      	it	cs
   21298:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   2129a:	f1d8 0200 	rsbs	r2, r8, #0
   2129e:	f002 0203 	and.w	r2, r2, #3
   212a2:	f008 0303 	and.w	r3, r8, #3
   212a6:	bf58      	it	pl
   212a8:	4253      	negpl	r3, r2
   212aa:	425b      	negs	r3, r3
   212ac:	f003 0303 	and.w	r3, r3, #3
   212b0:	42a3      	cmp	r3, r4
   212b2:	bf28      	it	cs
   212b4:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   212b6:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   212b8:	1ae4      	subs	r4, r4, r3
   212ba:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   212be:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   212c2:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   212c4:	bfc8      	it	gt
   212c6:	46a2      	movgt	sl, r4
   212c8:	f002 0b03 	and.w	fp, r2, #3
   212cc:	bfc8      	it	gt
   212ce:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   212d2:	f1ba 0f00 	cmp.w	sl, #0
   212d6:	d01a      	beq.n	2130e <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   212d8:	eb08 0203 	add.w	r2, r8, r3
   212dc:	e9c7 3200 	strd	r3, r2, [r7]
   212e0:	4651      	mov	r1, sl
   212e2:	1972      	adds	r2, r6, r5
   212e4:	6878      	ldr	r0, [r7, #4]
   212e6:	f00d fb3b 	bl	2e960 <nrfx_qspi_read>
   212ea:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   212ec:	4601      	mov	r1, r0
   212ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
   212f2:	f7ff fc93 	bl	20c1c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   212f6:	4a2a      	ldr	r2, [pc, #168]	; (213a0 <qspi_nor_read+0x17c>)
   212f8:	4294      	cmp	r4, r2
   212fa:	d13c      	bne.n	21376 <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   212fc:	683b      	ldr	r3, [r7, #0]
   212fe:	429d      	cmp	r5, r3
   21300:	d005      	beq.n	2130e <qspi_nor_read+0xea>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   21302:	4652      	mov	r2, sl
   21304:	6879      	ldr	r1, [r7, #4]
   21306:	eb08 0005 	add.w	r0, r8, r5
   2130a:	f009 f8ef 	bl	2a4ec <memmove>
	if (flash_prefix != 0) {
   2130e:	b1c5      	cbz	r5, 21342 <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   21310:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   21314:	1af2      	subs	r2, r6, r3
   21316:	2104      	movs	r1, #4
   21318:	f107 0008 	add.w	r0, r7, #8
   2131c:	607b      	str	r3, [r7, #4]
   2131e:	f00d fb1f 	bl	2e960 <nrfx_qspi_read>
   21322:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21324:	4601      	mov	r1, r0
   21326:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2132a:	f7ff fc77 	bl	20c1c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2132e:	4a1c      	ldr	r2, [pc, #112]	; (213a0 <qspi_nor_read+0x17c>)
   21330:	687b      	ldr	r3, [r7, #4]
   21332:	4294      	cmp	r4, r2
   21334:	d11f      	bne.n	21376 <qspi_nor_read+0x152>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   21336:	3308      	adds	r3, #8
   21338:	462a      	mov	r2, r5
   2133a:	4640      	mov	r0, r8
   2133c:	19d9      	adds	r1, r3, r7
   2133e:	f009 f8ec 	bl	2a51a <memcpy>
	if (flash_suffix != 0) {
   21342:	f1bb 0f00 	cmp.w	fp, #0
   21346:	d023      	beq.n	21390 <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   21348:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   2134a:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   2134c:	4452      	add	r2, sl
   2134e:	1878      	adds	r0, r7, r1
   21350:	f00d fb06 	bl	2e960 <nrfx_qspi_read>
   21354:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21356:	4601      	mov	r1, r0
   21358:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2135c:	f7ff fc5e 	bl	20c1c <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21360:	4b0f      	ldr	r3, [pc, #60]	; (213a0 <qspi_nor_read+0x17c>)
   21362:	429c      	cmp	r4, r3
   21364:	d107      	bne.n	21376 <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   21366:	eb0a 0005 	add.w	r0, sl, r5
   2136a:	465a      	mov	r2, fp
   2136c:	f107 0108 	add.w	r1, r7, #8
   21370:	4440      	add	r0, r8
   21372:	f009 f8d2 	bl	2a51a <memcpy>
	k_sem_give(&dev_data->sem);
   21376:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2137a:	3018      	adds	r0, #24
   2137c:	f00c fe75 	bl	2e06a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21380:	4620      	mov	r0, r4
   21382:	f7ff fc31 	bl	20be8 <qspi_get_zephyr_ret_code>
   21386:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   21388:	4648      	mov	r0, r9
   2138a:	f7ff fc7b 	bl	20c84 <qspi_device_uninit>
	return rc;
   2138e:	e76f      	b.n	21270 <qspi_nor_read+0x4c>
	return res;
   21390:	4c03      	ldr	r4, [pc, #12]	; (213a0 <qspi_nor_read+0x17c>)
   21392:	e7f0      	b.n	21376 <qspi_nor_read+0x152>
		return 0;
   21394:	461d      	mov	r5, r3
   21396:	e76b      	b.n	21270 <qspi_nor_read+0x4c>
   21398:	00034919 	.word	0x00034919
   2139c:	0002fdcc 	.word	0x0002fdcc
   213a0:	0bad0000 	.word	0x0bad0000

000213a4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   213a4:	4b02      	ldr	r3, [pc, #8]	; (213b0 <flash_nrf_pages_layout+0xc>)
   213a6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   213a8:	2301      	movs	r3, #1
   213aa:	6013      	str	r3, [r2, #0]
}
   213ac:	4770      	bx	lr
   213ae:	bf00      	nop
   213b0:	2000af44 	.word	0x2000af44

000213b4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   213b4:	4800      	ldr	r0, [pc, #0]	; (213b8 <flash_nrf_get_parameters+0x4>)
   213b6:	4770      	bx	lr
   213b8:	00030b28 	.word	0x00030b28

000213bc <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   213bc:	b580      	push	{r7, lr}
   213be:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   213c0:	b088      	sub	sp, #32
   213c2:	466a      	mov	r2, sp
   213c4:	4b08      	ldr	r3, [pc, #32]	; (213e8 <flash_nrf_read.part.0+0x2c>)
   213c6:	61d1      	str	r1, [r2, #28]
   213c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   213cc:	2304      	movs	r3, #4
   213ce:	f842 3f10 	str.w	r3, [r2, #16]!
   213d2:	2300      	movs	r3, #0
   213d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   213d8:	4804      	ldr	r0, [pc, #16]	; (213ec <flash_nrf_read.part.0+0x30>)
   213da:	f7e9 fbbf 	bl	ab5c <z_impl_z_log_msg_static_create>
}
   213de:	f06f 0015 	mvn.w	r0, #21
   213e2:	46bd      	mov	sp, r7
   213e4:	bd80      	pop	{r7, pc}
   213e6:	bf00      	nop
   213e8:	00034978 	.word	0x00034978
   213ec:	0002fd6c 	.word	0x0002fd6c

000213f0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   213f0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   213f2:	2201      	movs	r2, #1
   213f4:	4806      	ldr	r0, [pc, #24]	; (21410 <nrf_flash_init+0x20>)
   213f6:	4611      	mov	r1, r2
   213f8:	f00e f80c 	bl	2f414 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   213fc:	f00d faa7 	bl	2e94e <nrfx_nvmc_flash_page_count_get>
   21400:	4c04      	ldr	r4, [pc, #16]	; (21414 <nrf_flash_init+0x24>)
   21402:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21404:	f00d faa0 	bl	2e948 <nrfx_nvmc_flash_page_size_get>
   21408:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2140a:	2000      	movs	r0, #0
   2140c:	bd10      	pop	{r4, pc}
   2140e:	bf00      	nop
   21410:	2000af4c 	.word	0x2000af4c
   21414:	2000af44 	.word	0x2000af44

00021418 <flash_nrf_erase>:
{
   21418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2141c:	af00      	add	r7, sp, #0
   2141e:	4688      	mov	r8, r1
   21420:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21422:	f00d fa91 	bl	2e948 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   21426:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21428:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   2142a:	4640      	mov	r0, r8
   2142c:	f00c fe62 	bl	2e0f4 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21430:	4645      	mov	r5, r8
	if (is_regular_addr_valid(addr, size)) {
   21432:	4603      	mov	r3, r0
   21434:	2800      	cmp	r0, #0
   21436:	d03f      	beq.n	214b8 <flash_nrf_erase+0xa0>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   21438:	fbb8 f3f6 	udiv	r3, r8, r6
   2143c:	fb06 8313 	mls	r3, r6, r3, r8
   21440:	b923      	cbnz	r3, 2144c <flash_nrf_erase+0x34>
   21442:	fbb4 f3f6 	udiv	r3, r4, r6
   21446:	fb06 4313 	mls	r3, r6, r3, r4
   2144a:	b19b      	cbz	r3, 21474 <flash_nrf_erase+0x5c>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2144c:	466d      	mov	r5, sp
   2144e:	b088      	sub	sp, #32
   21450:	466a      	mov	r2, sp
   21452:	4b1f      	ldr	r3, [pc, #124]	; (214d0 <flash_nrf_erase+0xb8>)
   21454:	61d4      	str	r4, [r2, #28]
   21456:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2145a:	2304      	movs	r3, #4
   2145c:	f842 3f10 	str.w	r3, [r2, #16]!
   21460:	2300      	movs	r3, #0
   21462:	481c      	ldr	r0, [pc, #112]	; (214d4 <flash_nrf_erase+0xbc>)
   21464:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21468:	f7e9 fb78 	bl	ab5c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   2146c:	f06f 0015 	mvn.w	r0, #21
   21470:	46ad      	mov	sp, r5
		return -EINVAL;
   21472:	e002      	b.n	2147a <flash_nrf_erase+0x62>
		if (!n_pages) {
   21474:	42a6      	cmp	r6, r4
   21476:	d903      	bls.n	21480 <flash_nrf_erase+0x68>
			return 0;
   21478:	2000      	movs	r0, #0
}
   2147a:	46bd      	mov	sp, r7
   2147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   21480:	f04f 32ff 	mov.w	r2, #4294967295
   21484:	f04f 33ff 	mov.w	r3, #4294967295
   21488:	4813      	ldr	r0, [pc, #76]	; (214d8 <flash_nrf_erase+0xc0>)
   2148a:	f004 fc5f 	bl	25d4c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2148e:	f00d fa5b 	bl	2e948 <nrfx_nvmc_flash_page_size_get>
   21492:	4606      	mov	r6, r0
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		if (e_ctx->flash_addr == e_ctx->flash_addr_next) {
   21494:	4545      	cmp	r5, r8
   21496:	d104      	bne.n	214a2 <flash_nrf_erase+0x8a>
			nrfx_nvmc_page_partial_erase_init(e_ctx->flash_addr,
   21498:	4628      	mov	r0, r5
   2149a:	2103      	movs	r1, #3
   2149c:	f002 fc8e 	bl	23dbc <nrfx_nvmc_page_partial_erase_init>
				CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE_MS);
			e_ctx->flash_addr_next += pg_size;
   214a0:	4435      	add	r5, r6
		}

		if (nrfx_nvmc_page_partial_erase_continue()) {
   214a2:	f002 fcb7 	bl	23e14 <nrfx_nvmc_page_partial_erase_continue>
   214a6:	b108      	cbz	r0, 214ac <flash_nrf_erase+0x94>
			e_ctx->len -= pg_size;
   214a8:	1ba4      	subs	r4, r4, r6
			e_ctx->flash_addr += pg_size;
   214aa:	44b0      	add	r8, r6
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   214ac:	2c00      	cmp	r4, #0
   214ae:	d1f1      	bne.n	21494 <flash_nrf_erase+0x7c>
	z_impl_k_sem_give(sem);
   214b0:	4809      	ldr	r0, [pc, #36]	; (214d8 <flash_nrf_erase+0xc0>)
   214b2:	f004 fc11 	bl	25cd8 <z_impl_k_sem_give>
}
   214b6:	e7df      	b.n	21478 <flash_nrf_erase+0x60>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   214b8:	466d      	mov	r5, sp
   214ba:	b088      	sub	sp, #32
   214bc:	466a      	mov	r2, sp
   214be:	4907      	ldr	r1, [pc, #28]	; (214dc <flash_nrf_erase+0xc4>)
   214c0:	61d4      	str	r4, [r2, #28]
   214c2:	e9c2 1805 	strd	r1, r8, [r2, #20]
   214c6:	2104      	movs	r1, #4
   214c8:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   214cc:	e7c9      	b.n	21462 <flash_nrf_erase+0x4a>
   214ce:	bf00      	nop
   214d0:	00034995 	.word	0x00034995
   214d4:	0002fd6c 	.word	0x0002fd6c
   214d8:	2000af4c 	.word	0x2000af4c
   214dc:	00034978 	.word	0x00034978

000214e0 <flash_nrf_write>:
{
   214e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214e4:	460e      	mov	r6, r1
   214e6:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   214e8:	4619      	mov	r1, r3
   214ea:	4630      	mov	r0, r6
{
   214ec:	461c      	mov	r4, r3
   214ee:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   214f0:	f00c fe00 	bl	2e0f4 <is_regular_addr_valid>
   214f4:	4603      	mov	r3, r0
   214f6:	b9a0      	cbnz	r0, 21522 <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   214f8:	466d      	mov	r5, sp
   214fa:	b088      	sub	sp, #32
   214fc:	466a      	mov	r2, sp
   214fe:	4920      	ldr	r1, [pc, #128]	; (21580 <flash_nrf_write+0xa0>)
   21500:	61d4      	str	r4, [r2, #28]
   21502:	e9c2 1605 	strd	r1, r6, [r2, #20]
   21506:	2104      	movs	r1, #4
   21508:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2150c:	481d      	ldr	r0, [pc, #116]	; (21584 <flash_nrf_write+0xa4>)
   2150e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21512:	f7e9 fb23 	bl	ab5c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   21516:	f06f 0015 	mvn.w	r0, #21
   2151a:	46ad      	mov	sp, r5
}
   2151c:	46bd      	mov	sp, r7
   2151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   21522:	ea46 0504 	orr.w	r5, r6, r4
   21526:	f015 0503 	ands.w	r5, r5, #3
   2152a:	d00b      	beq.n	21544 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2152c:	466d      	mov	r5, sp
   2152e:	b088      	sub	sp, #32
   21530:	466a      	mov	r2, sp
   21532:	4b15      	ldr	r3, [pc, #84]	; (21588 <flash_nrf_write+0xa8>)
   21534:	61d4      	str	r4, [r2, #28]
   21536:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2153a:	2304      	movs	r3, #4
   2153c:	f842 3f10 	str.w	r3, [r2, #16]!
   21540:	2300      	movs	r3, #0
   21542:	e7e3      	b.n	2150c <flash_nrf_write+0x2c>
	if (!len) {
   21544:	b1a4      	cbz	r4, 21570 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   21546:	f04f 32ff 	mov.w	r2, #4294967295
   2154a:	f04f 33ff 	mov.w	r3, #4294967295
   2154e:	480f      	ldr	r0, [pc, #60]	; (2158c <flash_nrf_write+0xac>)
   21550:	f004 fbfc 	bl	25d4c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   21554:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   21558:	42a5      	cmp	r5, r4
   2155a:	eb06 0005 	add.w	r0, r6, r5
   2155e:	d109      	bne.n	21574 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21560:	4a0b      	ldr	r2, [pc, #44]	; (21590 <flash_nrf_write+0xb0>)
   21562:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21566:	07db      	lsls	r3, r3, #31
   21568:	d5fb      	bpl.n	21562 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   2156a:	4808      	ldr	r0, [pc, #32]	; (2158c <flash_nrf_write+0xac>)
   2156c:	f004 fbb4 	bl	25cd8 <z_impl_k_sem_give>
	return ret;
   21570:	2000      	movs	r0, #0
   21572:	e7d3      	b.n	2151c <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21574:	f858 1005 	ldr.w	r1, [r8, r5]
   21578:	f002 fc82 	bl	23e80 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2157c:	3504      	adds	r5, #4
}
   2157e:	e7eb      	b.n	21558 <flash_nrf_write+0x78>
   21580:	00034978 	.word	0x00034978
   21584:	0002fd6c 	.word	0x0002fd6c
   21588:	000349b4 	.word	0x000349b4
   2158c:	2000af4c 	.word	0x2000af4c
   21590:	40039000 	.word	0x40039000

00021594 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   21594:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   21596:	794b      	ldrb	r3, [r1, #5]
   21598:	2b01      	cmp	r3, #1
   2159a:	d029      	beq.n	215f0 <uarte_nrfx_configure+0x5c>
   2159c:	2b03      	cmp	r3, #3
   2159e:	d124      	bne.n	215ea <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   215a0:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   215a2:	798b      	ldrb	r3, [r1, #6]
   215a4:	2b03      	cmp	r3, #3
   215a6:	d120      	bne.n	215ea <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   215a8:	79ce      	ldrb	r6, [r1, #7]
   215aa:	b10e      	cbz	r6, 215b0 <uarte_nrfx_configure+0x1c>
   215ac:	2e01      	cmp	r6, #1
   215ae:	d11c      	bne.n	215ea <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   215b0:	790a      	ldrb	r2, [r1, #4]
   215b2:	2a01      	cmp	r2, #1
   215b4:	d01e      	beq.n	215f4 <uarte_nrfx_configure+0x60>
   215b6:	2a02      	cmp	r2, #2
   215b8:	d020      	beq.n	215fc <uarte_nrfx_configure+0x68>
   215ba:	b9b2      	cbnz	r2, 215ea <uarte_nrfx_configure+0x56>
   215bc:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   215be:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   215c0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   215c2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   215c6:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   215ca:	d06e      	beq.n	216aa <uarte_nrfx_configure+0x116>
   215cc:	d833      	bhi.n	21636 <uarte_nrfx_configure+0xa2>
   215ce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   215d2:	d06d      	beq.n	216b0 <uarte_nrfx_configure+0x11c>
   215d4:	d81c      	bhi.n	21610 <uarte_nrfx_configure+0x7c>
   215d6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   215da:	d06b      	beq.n	216b4 <uarte_nrfx_configure+0x120>
   215dc:	d810      	bhi.n	21600 <uarte_nrfx_configure+0x6c>
   215de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   215e2:	d06a      	beq.n	216ba <uarte_nrfx_configure+0x126>
   215e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   215e8:	d06a      	beq.n	216c0 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   215ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   215ee:	e05b      	b.n	216a8 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   215f0:	2700      	movs	r7, #0
   215f2:	e7d6      	b.n	215a2 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   215f4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   215f8:	220e      	movs	r2, #14
   215fa:	e7e0      	b.n	215be <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   215fc:	2400      	movs	r4, #0
   215fe:	e7fb      	b.n	215f8 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   21600:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   21604:	d05f      	beq.n	216c6 <uarte_nrfx_configure+0x132>
   21606:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2160a:	d1ee      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2160c:	4b38      	ldr	r3, [pc, #224]	; (216f0 <uarte_nrfx_configure+0x15c>)
   2160e:	e03c      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21610:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   21614:	d05a      	beq.n	216cc <uarte_nrfx_configure+0x138>
   21616:	d807      	bhi.n	21628 <uarte_nrfx_configure+0x94>
   21618:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2161c:	d058      	beq.n	216d0 <uarte_nrfx_configure+0x13c>
   2161e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   21622:	d1e2      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   21624:	4b33      	ldr	r3, [pc, #204]	; (216f4 <uarte_nrfx_configure+0x160>)
   21626:	e030      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21628:	f647 2512 	movw	r5, #31250	; 0x7a12
   2162c:	42ab      	cmp	r3, r5
   2162e:	d1dc      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   21630:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   21634:	e029      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21636:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2163a:	d04b      	beq.n	216d4 <uarte_nrfx_configure+0x140>
   2163c:	d813      	bhi.n	21666 <uarte_nrfx_configure+0xd2>
   2163e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   21642:	d04a      	beq.n	216da <uarte_nrfx_configure+0x146>
   21644:	d809      	bhi.n	2165a <uarte_nrfx_configure+0xc6>
   21646:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   2164a:	42ab      	cmp	r3, r5
   2164c:	d047      	beq.n	216de <uarte_nrfx_configure+0x14a>
   2164e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   21652:	d1ca      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   21654:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21658:	e017      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   2165a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2165e:	d1c4      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   21660:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   21664:	e011      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21666:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2166a:	d03b      	beq.n	216e4 <uarte_nrfx_configure+0x150>
   2166c:	d808      	bhi.n	21680 <uarte_nrfx_configure+0xec>
   2166e:	4d22      	ldr	r5, [pc, #136]	; (216f8 <uarte_nrfx_configure+0x164>)
   21670:	42ab      	cmp	r3, r5
   21672:	d03a      	beq.n	216ea <uarte_nrfx_configure+0x156>
   21674:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   21678:	d1b7      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2167a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2167e:	e004      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   21680:	4d1e      	ldr	r5, [pc, #120]	; (216fc <uarte_nrfx_configure+0x168>)
   21682:	42ab      	cmp	r3, r5
   21684:	d1b1      	bne.n	215ea <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   21686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2168a:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2168c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   21690:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   21692:	433a      	orrs	r2, r7
   21694:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   21696:	4334      	orrs	r4, r6
   21698:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2169a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2169e:	1d2b      	adds	r3, r5, #4
   216a0:	c903      	ldmia	r1, {r0, r1}
   216a2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   216a6:	2000      	movs	r0, #0
}
   216a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   216aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   216ae:	e7ec      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   216b0:	4b13      	ldr	r3, [pc, #76]	; (21700 <uarte_nrfx_configure+0x16c>)
   216b2:	e7ea      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   216b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   216b8:	e7e7      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   216ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   216be:	e7e4      	b.n	2168a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   216c0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   216c4:	e7e1      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   216c6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   216ca:	e7de      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   216cc:	4b0d      	ldr	r3, [pc, #52]	; (21704 <uarte_nrfx_configure+0x170>)
   216ce:	e7dc      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   216d0:	4b0d      	ldr	r3, [pc, #52]	; (21708 <uarte_nrfx_configure+0x174>)
   216d2:	e7da      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   216d4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   216d8:	e7d7      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   216da:	4b0c      	ldr	r3, [pc, #48]	; (2170c <uarte_nrfx_configure+0x178>)
   216dc:	e7d5      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   216de:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   216e2:	e7d2      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   216e4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   216e8:	e7cf      	b.n	2168a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   216ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   216ee:	e7cc      	b.n	2168a <uarte_nrfx_configure+0xf6>
   216f0:	0013b000 	.word	0x0013b000
   216f4:	004ea000 	.word	0x004ea000
   216f8:	0003d090 	.word	0x0003d090
   216fc:	000f4240 	.word	0x000f4240
   21700:	00275000 	.word	0x00275000
   21704:	0075c000 	.word	0x0075c000
   21708:	003af000 	.word	0x003af000
   2170c:	013a9000 	.word	0x013a9000

00021710 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   21710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21714:	4680      	mov	r8, r0
   21716:	b087      	sub	sp, #28
   21718:	2200      	movs	r2, #0
   2171a:	2101      	movs	r1, #1
   2171c:	2008      	movs	r0, #8
   2171e:	f7eb facf 	bl	ccc0 <z_arm_irq_priority_set>
   21722:	2008      	movs	r0, #8
   21724:	f7eb fa9c 	bl	cc60 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   21728:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   2172a:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   2172e:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   21732:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   21734:	466a      	mov	r2, sp
   21736:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   2173a:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2173e:	f8d7 900c 	ldr.w	r9, [r7, #12]
   21742:	4648      	mov	r0, r9
   21744:	f00c fe09 	bl	2e35a <pinctrl_lookup_state>
	if (ret < 0) {
   21748:	1e05      	subs	r5, r0, #0
   2174a:	db25      	blt.n	21798 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
   2174c:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2174e:	f8d9 2000 	ldr.w	r2, [r9]
   21752:	7919      	ldrb	r1, [r3, #4]
   21754:	6818      	ldr	r0, [r3, #0]
   21756:	f00c fe13 	bl	2e380 <pinctrl_configure_pins>
	if (err < 0) {
   2175a:	1e05      	subs	r5, r0, #0
   2175c:	db1c      	blt.n	21798 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2175e:	4640      	mov	r0, r8
   21760:	1d31      	adds	r1, r6, #4
   21762:	f7ff ff17 	bl	21594 <uarte_nrfx_configure>
	if (err) {
   21766:	4605      	mov	r5, r0
   21768:	b9b0      	cbnz	r0, 21798 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2176a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2176c:	0799      	lsls	r1, r3, #30
   2176e:	d532      	bpl.n	217d6 <uarte_0_init+0xc6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   21770:	f106 0018 	add.w	r0, r6, #24
   21774:	f001 fe64 	bl	23440 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   21778:	4b2b      	ldr	r3, [pc, #172]	; (21828 <uarte_0_init+0x118>)
   2177a:	4298      	cmp	r0, r3
   2177c:	d010      	beq.n	217a0 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   2177e:	4b2b      	ldr	r3, [pc, #172]	; (2182c <uarte_0_init+0x11c>)
   21780:	9305      	str	r3, [sp, #20]
   21782:	2302      	movs	r3, #2
   21784:	9304      	str	r3, [sp, #16]
   21786:	462b      	mov	r3, r5
		return -EIO;
   21788:	f06f 0504 	mvn.w	r5, #4
   2178c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21790:	4827      	ldr	r0, [pc, #156]	; (21830 <uarte_0_init+0x120>)
   21792:	aa04      	add	r2, sp, #16
   21794:	f7e9 f9e2 	bl	ab5c <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   21798:	4628      	mov	r0, r5
   2179a:	b007      	add	sp, #28
   2179c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   217a0:	7e33      	ldrb	r3, [r6, #24]
    NRFX_ASSERT(tep);
   217a2:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   217a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   217aa:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   217ae:	d10a      	bne.n	217c6 <uarte_0_init+0xb6>
   217b0:	4920      	ldr	r1, [pc, #128]	; (21834 <uarte_0_init+0x124>)
   217b2:	4821      	ldr	r0, [pc, #132]	; (21838 <uarte_0_init+0x128>)
   217b4:	f240 224e 	movw	r2, #590	; 0x24e
   217b8:	f007 fa04 	bl	28bc4 <assert_print>
   217bc:	f240 214e 	movw	r1, #590	; 0x24e
   217c0:	481c      	ldr	r0, [pc, #112]	; (21834 <uarte_0_init+0x124>)
   217c2:	f007 f9f8 	bl	28bb6 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   217c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   217ca:	2301      	movs	r3, #1
   217cc:	7e32      	ldrb	r2, [r6, #24]
   217ce:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   217d0:	4a1a      	ldr	r2, [pc, #104]	; (2183c <uarte_0_init+0x12c>)
   217d2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   217d6:	2308      	movs	r3, #8
   217d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   217dc:	7a3b      	ldrb	r3, [r7, #8]
   217de:	b953      	cbnz	r3, 217f6 <uarte_0_init+0xe6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   217e0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   217e4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   217e8:	6973      	ldr	r3, [r6, #20]
   217ea:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   217ee:	2301      	movs	r3, #1
   217f0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   217f4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   217f6:	687b      	ldr	r3, [r7, #4]
   217f8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   217fa:	bf5c      	itt	pl
   217fc:	f44f 7380 	movpl.w	r3, #256	; 0x100
   21800:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21804:	687b      	ldr	r3, [r7, #4]
   21806:	06db      	lsls	r3, r3, #27
   21808:	bf44      	itt	mi
   2180a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2180e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21812:	6933      	ldr	r3, [r6, #16]
   21814:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21818:	2300      	movs	r3, #0
   2181a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2181e:	2301      	movs	r3, #1
   21820:	60a3      	str	r3, [r4, #8]
   21822:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   21824:	e7b8      	b.n	21798 <uarte_0_init+0x88>
   21826:	bf00      	nop
   21828:	0bad0000 	.word	0x0bad0000
   2182c:	000349f3 	.word	0x000349f3
   21830:	0002fdec 	.word	0x0002fdec
   21834:	00030f9f 	.word	0x00030f9f
   21838:	00030da5 	.word	0x00030da5
   2183c:	40017000 	.word	0x40017000

00021840 <uarte_nrfx_poll_out>:
{
   21840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21842:	4604      	mov	r4, r0
   21844:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   21846:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21848:	f00d fd93 	bl	2f372 <k_is_in_isr>
   2184c:	b9b0      	cbnz	r0, 2187c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   2184e:	4b2e      	ldr	r3, [pc, #184]	; (21908 <uarte_nrfx_poll_out+0xc8>)
   21850:	781b      	ldrb	r3, [r3, #0]
   21852:	b19b      	cbz	r3, 2187c <uarte_nrfx_poll_out+0x3c>
{
   21854:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   21856:	6860      	ldr	r0, [r4, #4]
   21858:	f00c fcff 	bl	2e25a <is_tx_ready.isra.0>
   2185c:	bb00      	cbnz	r0, 218a0 <uarte_nrfx_poll_out+0x60>
   2185e:	2001      	movs	r0, #1
   21860:	f00c fff5 	bl	2e84e <nrfx_busy_wait>
   21864:	3e01      	subs	r6, #1
   21866:	d1f6      	bne.n	21856 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   21868:	2100      	movs	r1, #0
   2186a:	2021      	movs	r0, #33	; 0x21
   2186c:	f005 fea4 	bl	275b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   21870:	e7f0      	b.n	21854 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   21872:	f386 8811 	msr	BASEPRI, r6
   21876:	f3bf 8f6f 	isb	sy
}
   2187a:	e7f5      	b.n	21868 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   2187c:	f04f 0320 	mov.w	r3, #32
   21880:	f3ef 8611 	mrs	r6, BASEPRI
   21884:	f383 8812 	msr	BASEPRI_MAX, r3
   21888:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2188c:	6860      	ldr	r0, [r4, #4]
   2188e:	4631      	mov	r1, r6
   21890:	f00c fce3 	bl	2e25a <is_tx_ready.isra.0>
   21894:	b990      	cbnz	r0, 218bc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   21896:	f386 8811 	msr	BASEPRI, r6
   2189a:	f3bf 8f6f 	isb	sy
}
   2189e:	e7ed      	b.n	2187c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   218a0:	f04f 0320 	mov.w	r3, #32
   218a4:	f3ef 8611 	mrs	r6, BASEPRI
   218a8:	f383 8812 	msr	BASEPRI_MAX, r3
   218ac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   218b0:	6860      	ldr	r0, [r4, #4]
   218b2:	4631      	mov	r1, r6
   218b4:	f00c fcd1 	bl	2e25a <is_tx_ready.isra.0>
   218b8:	2800      	cmp	r0, #0
   218ba:	d0da      	beq.n	21872 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   218bc:	693b      	ldr	r3, [r7, #16]
   218be:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   218c0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   218c2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   218c4:	6813      	ldr	r3, [r2, #0]
   218c6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   218ca:	2001      	movs	r0, #1
   218cc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   218d0:	2000      	movs	r0, #0
   218d2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   218d6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   218da:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   218de:	6852      	ldr	r2, [r2, #4]
   218e0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   218e4:	06d2      	lsls	r2, r2, #27
   218e6:	d508      	bpl.n	218fa <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   218e8:	2008      	movs	r0, #8
	return config->uarte_regs;
   218ea:	6862      	ldr	r2, [r4, #4]
   218ec:	6812      	ldr	r2, [r2, #0]
   218ee:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   218f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   218f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   218fa:	2201      	movs	r2, #1
   218fc:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   218fe:	f381 8811 	msr	BASEPRI, r1
   21902:	f3bf 8f6f 	isb	sy
}
   21906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21908:	2000b34a 	.word	0x2000b34a

0002190c <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   2190c:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2190e:	7e01      	ldrb	r1, [r0, #24]
   21910:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   21912:	2902      	cmp	r1, #2
{
   21914:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   21916:	d018      	beq.n	2194a <bt_rpmsg_send+0x3e>
   21918:	2904      	cmp	r1, #4
   2191a:	d015      	beq.n	21948 <bt_rpmsg_send+0x3c>
   2191c:	b339      	cbz	r1, 2196e <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   2191e:	466d      	mov	r5, sp
   21920:	b088      	sub	sp, #32
   21922:	466a      	mov	r2, sp
   21924:	4b13      	ldr	r3, [pc, #76]	; (21974 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   21926:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   2192a:	2303      	movs	r3, #3
   2192c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21930:	4811      	ldr	r0, [pc, #68]	; (21978 <bt_rpmsg_send+0x6c>)
   21932:	f842 3f10 	str.w	r3, [r2, #16]!
   21936:	f00c fcd9 	bl	2e2ec <z_log_msg_static_create.constprop.0>
   2193a:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   2193c:	4620      	mov	r0, r4
   2193e:	f7fe fbcd 	bl	200dc <net_buf_unref>
	return 0;
}
   21942:	2000      	movs	r0, #0
   21944:	46bd      	mov	sp, r7
   21946:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   21948:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   2194a:	f104 000c 	add.w	r0, r4, #12
   2194e:	f00c fa82 	bl	2de56 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   21952:	8a22      	ldrh	r2, [r4, #16]
   21954:	68e1      	ldr	r1, [r4, #12]
   21956:	4809      	ldr	r0, [pc, #36]	; (2197c <bt_rpmsg_send+0x70>)
   21958:	f7e9 ffec 	bl	b934 <ipc_service_send>
	if (err < 0) {
   2195c:	2800      	cmp	r0, #0
   2195e:	daed      	bge.n	2193c <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   21960:	466d      	mov	r5, sp
   21962:	b088      	sub	sp, #32
   21964:	466a      	mov	r2, sp
   21966:	4b06      	ldr	r3, [pc, #24]	; (21980 <bt_rpmsg_send+0x74>)
   21968:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2196c:	e7dd      	b.n	2192a <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   2196e:	2101      	movs	r1, #1
   21970:	e7eb      	b.n	2194a <bt_rpmsg_send+0x3e>
   21972:	bf00      	nop
   21974:	00034a2c 	.word	0x00034a2c
   21978:	0002fc3c 	.word	0x0002fc3c
   2197c:	2000af64 	.word	0x2000af64
   21980:	00034a3c 	.word	0x00034a3c

00021984 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   21984:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   21986:	480c      	ldr	r0, [pc, #48]	; (219b8 <bt_rpmsg_init+0x34>)
{
   21988:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   2198a:	f7ed fa09 	bl	eda0 <bt_hci_driver_register>
	if (err < 0) {
   2198e:	1e04      	subs	r4, r0, #0
   21990:	da0e      	bge.n	219b0 <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   21992:	466d      	mov	r5, sp
   21994:	b088      	sub	sp, #32
   21996:	466a      	mov	r2, sp
   21998:	4b08      	ldr	r3, [pc, #32]	; (219bc <bt_rpmsg_init+0x38>)
   2199a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2199e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   219a2:	2303      	movs	r3, #3
   219a4:	4806      	ldr	r0, [pc, #24]	; (219c0 <bt_rpmsg_init+0x3c>)
   219a6:	f842 3f10 	str.w	r3, [r2, #16]!
   219aa:	f00c fc9f 	bl	2e2ec <z_log_msg_static_create.constprop.0>
   219ae:	46ad      	mov	sp, r5
	}

	return err;
}
   219b0:	4620      	mov	r0, r4
   219b2:	46bd      	mov	sp, r7
   219b4:	bdb0      	pop	{r4, r5, r7, pc}
   219b6:	bf00      	nop
   219b8:	00030b78 	.word	0x00030b78
   219bc:	00034a54 	.word	0x00034a54
   219c0:	0002fc3c 	.word	0x0002fc3c

000219c4 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   219c4:	4801      	ldr	r0, [pc, #4]	; (219cc <hci_ept_bound+0x8>)
   219c6:	f004 b987 	b.w	25cd8 <z_impl_k_sem_give>
   219ca:	bf00      	nop
   219cc:	20008e6c 	.word	0x20008e6c

000219d0 <bt_rpmsg_open>:
{
   219d0:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   219d2:	481a      	ldr	r0, [pc, #104]	; (21a3c <bt_rpmsg_open+0x6c>)
{
   219d4:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   219d6:	f7e9 ff4d 	bl	b874 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   219da:	4604      	mov	r4, r0
   219dc:	b1a0      	cbz	r0, 21a08 <bt_rpmsg_open+0x38>
   219de:	f110 0f78 	cmn.w	r0, #120	; 0x78
   219e2:	d011      	beq.n	21a08 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   219e4:	466d      	mov	r5, sp
   219e6:	b088      	sub	sp, #32
   219e8:	466a      	mov	r2, sp
   219ea:	4b15      	ldr	r3, [pc, #84]	; (21a40 <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   219ec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   219f0:	2303      	movs	r3, #3
   219f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   219f6:	4813      	ldr	r0, [pc, #76]	; (21a44 <bt_rpmsg_open+0x74>)
   219f8:	f842 3f10 	str.w	r3, [r2, #16]!
   219fc:	f00c fc76 	bl	2e2ec <z_log_msg_static_create.constprop.0>
   21a00:	46ad      	mov	sp, r5
}
   21a02:	4620      	mov	r0, r4
   21a04:	46bd      	mov	sp, r7
   21a06:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   21a08:	4a0f      	ldr	r2, [pc, #60]	; (21a48 <bt_rpmsg_open+0x78>)
   21a0a:	4910      	ldr	r1, [pc, #64]	; (21a4c <bt_rpmsg_open+0x7c>)
   21a0c:	480b      	ldr	r0, [pc, #44]	; (21a3c <bt_rpmsg_open+0x6c>)
   21a0e:	f7e9 ff5f 	bl	b8d0 <ipc_service_register_endpoint>
	if (err) {
   21a12:	4604      	mov	r4, r0
   21a14:	b120      	cbz	r0, 21a20 <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   21a16:	466d      	mov	r5, sp
   21a18:	b088      	sub	sp, #32
   21a1a:	466a      	mov	r2, sp
   21a1c:	4b0c      	ldr	r3, [pc, #48]	; (21a50 <bt_rpmsg_open+0x80>)
   21a1e:	e7e5      	b.n	219ec <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   21a20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   21a24:	2300      	movs	r3, #0
   21a26:	480b      	ldr	r0, [pc, #44]	; (21a54 <bt_rpmsg_open+0x84>)
   21a28:	f004 f990 	bl	25d4c <z_impl_k_sem_take>
	if (err) {
   21a2c:	4604      	mov	r4, r0
   21a2e:	2800      	cmp	r0, #0
   21a30:	d0e7      	beq.n	21a02 <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   21a32:	466d      	mov	r5, sp
   21a34:	b088      	sub	sp, #32
   21a36:	466a      	mov	r2, sp
   21a38:	4b07      	ldr	r3, [pc, #28]	; (21a58 <bt_rpmsg_open+0x88>)
   21a3a:	e7d7      	b.n	219ec <bt_rpmsg_open+0x1c>
   21a3c:	0002f8b4 	.word	0x0002f8b4
   21a40:	00034a7e 	.word	0x00034a7e
   21a44:	0002fc3c 	.word	0x0002fc3c
   21a48:	20008ae0 	.word	0x20008ae0
   21a4c:	2000af64 	.word	0x2000af64
   21a50:	00034aae 	.word	0x00034aae
   21a54:	20008e6c 	.word	0x20008e6c
   21a58:	00034ad2 	.word	0x00034ad2

00021a5c <hci_ept_recv>:
{
   21a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a60:	b088      	sub	sp, #32
	pkt_indicator = *data++;
   21a62:	4680      	mov	r8, r0
   21a64:	f818 6b01 	ldrb.w	r6, [r8], #1
{
   21a68:	4682      	mov	sl, r0
	switch (pkt_indicator) {
   21a6a:	2e04      	cmp	r6, #4
{
   21a6c:	460c      	mov	r4, r1
   21a6e:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   21a70:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   21a74:	d00b      	beq.n	21a8e <hci_ept_recv+0x32>
   21a76:	2e05      	cmp	r6, #5
   21a78:	f000 80a3 	beq.w	21bc2 <hci_ept_recv+0x166>
   21a7c:	2e02      	cmp	r6, #2
   21a7e:	f040 80cd 	bne.w	21c1c <hci_ept_recv+0x1c0>
	if (remaining < sizeof(hdr)) {
   21a82:	2b03      	cmp	r3, #3
   21a84:	d867      	bhi.n	21b56 <hci_ept_recv+0xfa>
		LOG_ERR("Not enough data for ACL header");
   21a86:	4b6d      	ldr	r3, [pc, #436]	; (21c3c <hci_ept_recv+0x1e0>)
		LOG_ERR("No available ACL buffers!");
   21a88:	e9c7 6306 	strd	r6, r3, [r7, #24]
   21a8c:	e005      	b.n	21a9a <hci_ept_recv+0x3e>
	if (remaining < sizeof(hdr)) {
   21a8e:	2b01      	cmp	r3, #1
   21a90:	d80e      	bhi.n	21ab0 <hci_ept_recv+0x54>
		LOG_ERR("Not enough data for event header");
   21a92:	4b6b      	ldr	r3, [pc, #428]	; (21c40 <hci_ept_recv+0x1e4>)
		LOG_ERR("Event payload length is not correct");
   21a94:	61fb      	str	r3, [r7, #28]
   21a96:	2302      	movs	r3, #2
   21a98:	61bb      	str	r3, [r7, #24]
   21a9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21a9e:	4869      	ldr	r0, [pc, #420]	; (21c44 <hci_ept_recv+0x1e8>)
   21aa0:	f107 0218 	add.w	r2, r7, #24
   21aa4:	f00c fc22 	bl	2e2ec <z_log_msg_static_create.constprop.0>
}
   21aa8:	3720      	adds	r7, #32
   21aaa:	46bd      	mov	sp, r7
   21aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (evt_type) {
   21ab0:	7843      	ldrb	r3, [r0, #1]
   21ab2:	2b3e      	cmp	r3, #62	; 0x3e
   21ab4:	d118      	bne.n	21ae8 <hci_ept_recv+0x8c>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   21ab6:	78c3      	ldrb	r3, [r0, #3]
		switch (subevt_type) {
   21ab8:	2b02      	cmp	r3, #2
   21aba:	d013      	beq.n	21ae4 <hci_ept_recv+0x88>
   21abc:	2b0d      	cmp	r3, #13
   21abe:	d113      	bne.n	21ae8 <hci_ept_recv+0x8c>
			return (ext_adv->num_reports == 1) &&
   21ac0:	7903      	ldrb	r3, [r0, #4]
   21ac2:	2b01      	cmp	r3, #1
   21ac4:	d110      	bne.n	21ae8 <hci_ept_recv+0x8c>
   21ac6:	f8b0 6005 	ldrh.w	r6, [r0, #5]
   21aca:	f3c6 1600 	ubfx	r6, r6, #4, #1
	memcpy((void *)&hdr, data, sizeof(hdr));
   21ace:	2202      	movs	r2, #2
   21ad0:	4641      	mov	r1, r8
   21ad2:	1d38      	adds	r0, r7, #4
   21ad4:	f008 fd21 	bl	2a51a <memcpy>
	if (remaining != hdr.len) {
   21ad8:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   21ada:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   21adc:	429c      	cmp	r4, r3
   21ade:	d005      	beq.n	21aec <hci_ept_recv+0x90>
		LOG_ERR("Event payload length is not correct");
   21ae0:	4b59      	ldr	r3, [pc, #356]	; (21c48 <hci_ept_recv+0x1ec>)
   21ae2:	e7d7      	b.n	21a94 <hci_ept_recv+0x38>
			return true;
   21ae4:	2601      	movs	r6, #1
   21ae6:	e7f2      	b.n	21ace <hci_ept_recv+0x72>
		switch (subevt_type) {
   21ae8:	2600      	movs	r6, #0
   21aea:	e7f0      	b.n	21ace <hci_ept_recv+0x72>
   21aec:	b176      	cbz	r6, 21b0c <hci_ept_recv+0xb0>
   21aee:	f04f 0800 	mov.w	r8, #0
   21af2:	f04f 0900 	mov.w	r9, #0
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   21af6:	4642      	mov	r2, r8
   21af8:	464b      	mov	r3, r9
   21afa:	4631      	mov	r1, r6
   21afc:	7938      	ldrb	r0, [r7, #4]
   21afe:	f7ec f995 	bl	de2c <bt_buf_get_evt>
		if (!buf) {
   21b02:	4605      	mov	r5, r0
   21b04:	b928      	cbnz	r0, 21b12 <hci_ept_recv+0xb6>
			if (discardable) {
   21b06:	2e00      	cmp	r6, #0
   21b08:	d0f5      	beq.n	21af6 <hci_ept_recv+0x9a>
   21b0a:	e7cd      	b.n	21aa8 <hci_ept_recv+0x4c>
   21b0c:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   21b10:	e7ef      	b.n	21af2 <hci_ept_recv+0x96>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21b12:	f100 060c 	add.w	r6, r0, #12
   21b16:	2202      	movs	r2, #2
   21b18:	1d39      	adds	r1, r7, #4
   21b1a:	4630      	mov	r0, r6
   21b1c:	f00c f9dd 	bl	2deda <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   21b20:	4630      	mov	r0, r6
   21b22:	f00c f9d2 	bl	2deca <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   21b26:	4284      	cmp	r4, r0
   21b28:	d910      	bls.n	21b4c <hci_ept_recv+0xf0>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   21b2a:	466e      	mov	r6, sp
   21b2c:	b088      	sub	sp, #32
   21b2e:	466a      	mov	r2, sp
   21b30:	4b46      	ldr	r3, [pc, #280]	; (21c4c <hci_ept_recv+0x1f0>)
   21b32:	61d0      	str	r0, [r2, #28]
   21b34:	e9c2 3405 	strd	r3, r4, [r2, #20]
   21b38:	2304      	movs	r3, #4
   21b3a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21b3e:	4841      	ldr	r0, [pc, #260]	; (21c44 <hci_ept_recv+0x1e8>)
   21b40:	f842 3f10 	str.w	r3, [r2, #16]!
   21b44:	f00c fbd2 	bl	2e2ec <z_log_msg_static_create.constprop.0>
   21b48:	46b5      	mov	sp, r6
   21b4a:	e025      	b.n	21b98 <hci_ept_recv+0x13c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21b4c:	4622      	mov	r2, r4
   21b4e:	f10a 0103 	add.w	r1, sl, #3
   21b52:	4630      	mov	r0, r6
   21b54:	e02f      	b.n	21bb6 <hci_ept_recv+0x15a>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   21b56:	2200      	movs	r2, #0
   21b58:	2300      	movs	r3, #0
   21b5a:	2003      	movs	r0, #3
   21b5c:	f7ec f920 	bl	dda0 <bt_buf_get_rx>
	if (buf) {
   21b60:	4605      	mov	r5, r0
   21b62:	b1e8      	cbz	r0, 21ba0 <hci_ept_recv+0x144>
		memcpy((void *)&hdr, data, sizeof(hdr));
   21b64:	2204      	movs	r2, #4
   21b66:	4641      	mov	r1, r8
   21b68:	18b8      	adds	r0, r7, r2
   21b6a:	f008 fcd6 	bl	2a51a <memcpy>
   21b6e:	2204      	movs	r2, #4
   21b70:	f105 080c 	add.w	r8, r5, #12
   21b74:	4640      	mov	r0, r8
   21b76:	18b9      	adds	r1, r7, r2
   21b78:	f00c f9af 	bl	2deda <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   21b7c:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   21b7e:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   21b80:	429c      	cmp	r4, r3
   21b82:	d00f      	beq.n	21ba4 <hci_ept_recv+0x148>
		LOG_ERR("ACL payload length is not correct");
   21b84:	4b32      	ldr	r3, [pc, #200]	; (21c50 <hci_ept_recv+0x1f4>)
   21b86:	e9c7 6306 	strd	r6, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   21b8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21b8e:	482d      	ldr	r0, [pc, #180]	; (21c44 <hci_ept_recv+0x1e8>)
   21b90:	f107 0218 	add.w	r2, r7, #24
   21b94:	f00c fbaa 	bl	2e2ec <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   21b98:	4628      	mov	r0, r5
   21b9a:	f7fe fa9f 	bl	200dc <net_buf_unref>
	if (buf) {
   21b9e:	e783      	b.n	21aa8 <hci_ept_recv+0x4c>
		LOG_ERR("No available ACL buffers!");
   21ba0:	4b2c      	ldr	r3, [pc, #176]	; (21c54 <hci_ept_recv+0x1f8>)
   21ba2:	e771      	b.n	21a88 <hci_ept_recv+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   21ba4:	4640      	mov	r0, r8
   21ba6:	f00c f990 	bl	2deca <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   21baa:	4284      	cmp	r4, r0
   21bac:	d8bd      	bhi.n	21b2a <hci_ept_recv+0xce>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21bae:	4622      	mov	r2, r4
   21bb0:	4640      	mov	r0, r8
   21bb2:	f10a 0105 	add.w	r1, sl, #5
   21bb6:	f00c f990 	bl	2deda <net_buf_simple_add_mem>
		bt_recv(buf);
   21bba:	4628      	mov	r0, r5
   21bbc:	f7ed f8bc 	bl	ed38 <bt_recv>
}
   21bc0:	e772      	b.n	21aa8 <hci_ept_recv+0x4c>
	if (remaining < sizeof(hdr)) {
   21bc2:	2b03      	cmp	r3, #3
   21bc4:	d801      	bhi.n	21bca <hci_ept_recv+0x16e>
		LOG_ERR("Not enough data for ISO header");
   21bc6:	4b24      	ldr	r3, [pc, #144]	; (21c58 <hci_ept_recv+0x1fc>)
   21bc8:	e764      	b.n	21a94 <hci_ept_recv+0x38>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   21bca:	2200      	movs	r2, #0
   21bcc:	2300      	movs	r3, #0
   21bce:	4630      	mov	r0, r6
   21bd0:	f7ec f8e6 	bl	dda0 <bt_buf_get_rx>
	if (buf) {
   21bd4:	4605      	mov	r5, r0
   21bd6:	b1b0      	cbz	r0, 21c06 <hci_ept_recv+0x1aa>
		memcpy((void *)&hdr, data, sizeof(hdr));
   21bd8:	2204      	movs	r2, #4
   21bda:	4641      	mov	r1, r8
   21bdc:	18b8      	adds	r0, r7, r2
   21bde:	f008 fc9c 	bl	2a51a <memcpy>
   21be2:	2204      	movs	r2, #4
   21be4:	f105 060c 	add.w	r6, r5, #12
   21be8:	4630      	mov	r0, r6
   21bea:	18b9      	adds	r1, r7, r2
   21bec:	f00c f975 	bl	2deda <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   21bf0:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   21bf2:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   21bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
   21bf8:	429c      	cmp	r4, r3
   21bfa:	d006      	beq.n	21c0a <hci_ept_recv+0x1ae>
		LOG_ERR("ISO payload length is not correct");
   21bfc:	4b17      	ldr	r3, [pc, #92]	; (21c5c <hci_ept_recv+0x200>)
   21bfe:	61fb      	str	r3, [r7, #28]
   21c00:	2302      	movs	r3, #2
   21c02:	61bb      	str	r3, [r7, #24]
   21c04:	e7c1      	b.n	21b8a <hci_ept_recv+0x12e>
		LOG_ERR("No available ISO buffers!");
   21c06:	4b16      	ldr	r3, [pc, #88]	; (21c60 <hci_ept_recv+0x204>)
   21c08:	e744      	b.n	21a94 <hci_ept_recv+0x38>
	return net_buf_simple_tailroom(&buf->b);
   21c0a:	4630      	mov	r0, r6
   21c0c:	f00c f95d 	bl	2deca <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   21c10:	4284      	cmp	r4, r0
   21c12:	d88a      	bhi.n	21b2a <hci_ept_recv+0xce>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21c14:	4622      	mov	r2, r4
   21c16:	f10a 0105 	add.w	r1, sl, #5
   21c1a:	e79a      	b.n	21b52 <hci_ept_recv+0xf6>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   21c1c:	466c      	mov	r4, sp
   21c1e:	b088      	sub	sp, #32
   21c20:	466a      	mov	r2, sp
   21c22:	4b10      	ldr	r3, [pc, #64]	; (21c64 <hci_ept_recv+0x208>)
   21c24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   21c28:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   21c2c:	2303      	movs	r3, #3
   21c2e:	4805      	ldr	r0, [pc, #20]	; (21c44 <hci_ept_recv+0x1e8>)
   21c30:	f842 3f10 	str.w	r3, [r2, #16]!
   21c34:	f00c fb5a 	bl	2e2ec <z_log_msg_static_create.constprop.0>
   21c38:	46a5      	mov	sp, r4
   21c3a:	e735      	b.n	21aa8 <hci_ept_recv+0x4c>
   21c3c:	00034b5a 	.word	0x00034b5a
   21c40:	00034af2 	.word	0x00034af2
   21c44:	0002fc3c 	.word	0x0002fc3c
   21c48:	00034b13 	.word	0x00034b13
   21c4c:	00034b37 	.word	0x00034b37
   21c50:	00034b93 	.word	0x00034b93
   21c54:	00034b79 	.word	0x00034b79
   21c58:	00034bb5 	.word	0x00034bb5
   21c5c:	00034bee 	.word	0x00034bee
   21c60:	00034bd4 	.word	0x00034bd4
   21c64:	00034c10 	.word	0x00034c10

00021c68 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21c68:	2301      	movs	r3, #1
   21c6a:	4083      	lsls	r3, r0
{
   21c6c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21c6e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c70:	4a0b      	ldr	r2, [pc, #44]	; (21ca0 <compare_int_lock+0x38>)
   21c72:	e8d2 1fef 	ldaex	r1, [r2]
   21c76:	ea01 0504 	and.w	r5, r1, r4
   21c7a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   21c7e:	2e00      	cmp	r6, #0
   21c80:	d1f7      	bne.n	21c72 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21c86:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   21c88:	4806      	ldr	r0, [pc, #24]	; (21ca4 <compare_int_lock+0x3c>)
   21c8a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   21c8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21c92:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   21c96:	420b      	tst	r3, r1
}
   21c98:	bf14      	ite	ne
   21c9a:	2001      	movne	r0, #1
   21c9c:	2000      	moveq	r0, #0
   21c9e:	bd70      	pop	{r4, r5, r6, pc}
   21ca0:	2000af74 	.word	0x2000af74
   21ca4:	40015000 	.word	0x40015000

00021ca8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   21ca8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   21caa:	490e      	ldr	r1, [pc, #56]	; (21ce4 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   21cac:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   21cb0:	e9d1 3400 	ldrd	r3, r4, [r1]
   21cb4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   21cb6:	18c3      	adds	r3, r0, r3
   21cb8:	f144 0400 	adc.w	r4, r4, #0
   21cbc:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   21cc0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   21cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   21cc8:	d209      	bcs.n	21cde <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   21cca:	4b07      	ldr	r3, [pc, #28]	; (21ce8 <sys_clock_timeout_handler+0x40>)
   21ccc:	681b      	ldr	r3, [r3, #0]
   21cce:	0a1a      	lsrs	r2, r3, #8
   21cd0:	061b      	lsls	r3, r3, #24
   21cd2:	199c      	adds	r4, r3, r6
   21cd4:	4b05      	ldr	r3, [pc, #20]	; (21cec <sys_clock_timeout_handler+0x44>)
   21cd6:	f142 0500 	adc.w	r5, r2, #0
   21cda:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   21cde:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   21ce0:	f005 bfb8 	b.w	27c54 <sys_clock_announce>
   21ce4:	2000a388 	.word	0x2000a388
   21ce8:	2000af78 	.word	0x2000af78
   21cec:	2000a390 	.word	0x2000a390

00021cf0 <compare_int_unlock>:
	if (key) {
   21cf0:	b1d9      	cbz	r1, 21d2a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   21cf2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21cf4:	4a0d      	ldr	r2, [pc, #52]	; (21d2c <compare_int_unlock+0x3c>)
   21cf6:	4083      	lsls	r3, r0
   21cf8:	e8d2 cfef 	ldaex	ip, [r2]
   21cfc:	ea4c 0c03 	orr.w	ip, ip, r3
   21d00:	e8c2 cfe1 	stlex	r1, ip, [r2]
   21d04:	2900      	cmp	r1, #0
   21d06:	d1f7      	bne.n	21cf8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   21d0c:	4a08      	ldr	r2, [pc, #32]	; (21d30 <compare_int_unlock+0x40>)
   21d0e:	4083      	lsls	r3, r0
   21d10:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21d14:	4b07      	ldr	r3, [pc, #28]	; (21d34 <compare_int_unlock+0x44>)
   21d16:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   21d1a:	40c3      	lsrs	r3, r0
   21d1c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21d1e:	bf42      	ittt	mi
   21d20:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   21d24:	4b04      	ldrmi	r3, [pc, #16]	; (21d38 <compare_int_unlock+0x48>)
   21d26:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   21d2a:	4770      	bx	lr
   21d2c:	2000af74 	.word	0x2000af74
   21d30:	40015000 	.word	0x40015000
   21d34:	2000af6c 	.word	0x2000af6c
   21d38:	e000e100 	.word	0xe000e100

00021d3c <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d3c:	2801      	cmp	r0, #1
{
   21d3e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d40:	d908      	bls.n	21d54 <z_nrf_rtc_timer_compare_evt_address_get+0x18>
   21d42:	4906      	ldr	r1, [pc, #24]	; (21d5c <z_nrf_rtc_timer_compare_evt_address_get+0x20>)
   21d44:	4806      	ldr	r0, [pc, #24]	; (21d60 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   21d46:	227d      	movs	r2, #125	; 0x7d
   21d48:	f006 ff3c 	bl	28bc4 <assert_print>
   21d4c:	217d      	movs	r1, #125	; 0x7d
   21d4e:	4803      	ldr	r0, [pc, #12]	; (21d5c <z_nrf_rtc_timer_compare_evt_address_get+0x20>)
   21d50:	f006 ff31 	bl	28bb6 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   21d54:	0083      	lsls	r3, r0, #2
}
   21d56:	4803      	ldr	r0, [pc, #12]	; (21d64 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   21d58:	4418      	add	r0, r3
   21d5a:	bd08      	pop	{r3, pc}
   21d5c:	00034c5a 	.word	0x00034c5a
   21d60:	00030da5 	.word	0x00030da5
   21d64:	40015140 	.word	0x40015140

00021d68 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d68:	2801      	cmp	r0, #1
{
   21d6a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d6c:	d908      	bls.n	21d80 <z_nrf_rtc_timer_capture_task_address_get+0x18>
   21d6e:	4907      	ldr	r1, [pc, #28]	; (21d8c <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   21d70:	4807      	ldr	r0, [pc, #28]	; (21d90 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   21d72:	2284      	movs	r2, #132	; 0x84
   21d74:	f006 ff26 	bl	28bc4 <assert_print>
   21d78:	2184      	movs	r1, #132	; 0x84
   21d7a:	4804      	ldr	r0, [pc, #16]	; (21d8c <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   21d7c:	f006 ff1b 	bl	28bb6 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   21d80:	2800      	cmp	r0, #0
}
   21d82:	4804      	ldr	r0, [pc, #16]	; (21d94 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   21d84:	bf08      	it	eq
   21d86:	2000      	moveq	r0, #0
   21d88:	bd08      	pop	{r3, pc}
   21d8a:	bf00      	nop
   21d8c:	00034c5a 	.word	0x00034c5a
   21d90:	00030da5 	.word	0x00030da5
   21d94:	40015044 	.word	0x40015044

00021d98 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d98:	2801      	cmp	r0, #1
{
   21d9a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   21d9c:	d908      	bls.n	21db0 <z_nrf_rtc_timer_compare_read+0x18>
   21d9e:	4907      	ldr	r1, [pc, #28]	; (21dbc <z_nrf_rtc_timer_compare_read+0x24>)
   21da0:	4807      	ldr	r0, [pc, #28]	; (21dc0 <z_nrf_rtc_timer_compare_read+0x28>)
   21da2:	22ba      	movs	r2, #186	; 0xba
   21da4:	f006 ff0e 	bl	28bc4 <assert_print>
   21da8:	21ba      	movs	r1, #186	; 0xba
   21daa:	4804      	ldr	r0, [pc, #16]	; (21dbc <z_nrf_rtc_timer_compare_read+0x24>)
   21dac:	f006 ff03 	bl	28bb6 <assert_post_action>
    return p_reg->CC[ch];
   21db0:	4b04      	ldr	r3, [pc, #16]	; (21dc4 <z_nrf_rtc_timer_compare_read+0x2c>)
   21db2:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21db6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   21dba:	bd08      	pop	{r3, pc}
   21dbc:	00034c5a 	.word	0x00034c5a
   21dc0:	00030da5 	.word	0x00030da5
   21dc4:	40015000 	.word	0x40015000

00021dc8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21dc8:	4b0d      	ldr	r3, [pc, #52]	; (21e00 <z_nrf_rtc_timer_read+0x38>)
   21dca:	6818      	ldr	r0, [r3, #0]
   21dcc:	0a01      	lsrs	r1, r0, #8
   21dce:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   21dd0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   21dd4:	4b0b      	ldr	r3, [pc, #44]	; (21e04 <z_nrf_rtc_timer_read+0x3c>)
   21dd6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   21dda:	1818      	adds	r0, r3, r0
   21ddc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   21de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   21de4:	d20a      	bcs.n	21dfc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   21de6:	4b08      	ldr	r3, [pc, #32]	; (21e08 <z_nrf_rtc_timer_read+0x40>)
   21de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   21dec:	4290      	cmp	r0, r2
   21dee:	eb71 0303 	sbcs.w	r3, r1, r3
   21df2:	d203      	bcs.n	21dfc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   21df4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21df8:	f141 0100 	adc.w	r1, r1, #0
}
   21dfc:	4770      	bx	lr
   21dfe:	bf00      	nop
   21e00:	2000af78 	.word	0x2000af78
   21e04:	40015000 	.word	0x40015000
   21e08:	2000a390 	.word	0x2000a390

00021e0c <compare_set>:
{
   21e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e10:	4616      	mov	r6, r2
   21e12:	461f      	mov	r7, r3
   21e14:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   21e16:	f7ff ff27 	bl	21c68 <compare_int_lock>
   21e1a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21e1c:	f7ff ffd4 	bl	21dc8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21e20:	42b0      	cmp	r0, r6
   21e22:	eb71 0307 	sbcs.w	r3, r1, r7
   21e26:	d250      	bcs.n	21eca <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   21e28:	4b38      	ldr	r3, [pc, #224]	; (21f0c <compare_set+0x100>)
   21e2a:	1a30      	subs	r0, r6, r0
   21e2c:	eb67 0101 	sbc.w	r1, r7, r1
   21e30:	4298      	cmp	r0, r3
   21e32:	f171 0100 	sbcs.w	r1, r1, #0
   21e36:	d265      	bcs.n	21f04 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   21e38:	4b35      	ldr	r3, [pc, #212]	; (21f10 <compare_set+0x104>)
   21e3a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   21e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21e42:	429f      	cmp	r7, r3
   21e44:	bf08      	it	eq
   21e46:	4296      	cmpeq	r6, r2
   21e48:	d049      	beq.n	21ede <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21e4a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
   21e4e:	4931      	ldr	r1, [pc, #196]	; (21f14 <compare_set+0x108>)
   21e50:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   21e54:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   21e56:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   21e5a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   21e5e:	f00c fa6c 	bl	2e33a <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   21e62:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   21e66:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   21e68:	f104 0550 	add.w	r5, r4, #80	; 0x50
   21e6c:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21e6e:	b2ad      	uxth	r5, r5
   21e70:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   21e74:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   21e78:	4a27      	ldr	r2, [pc, #156]	; (21f18 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21e7a:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   21e7e:	9301      	str	r3, [sp, #4]
   21e80:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21e84:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   21e88:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   21e8c:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   21e90:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   21e94:	eba0 0008 	sub.w	r0, r0, r8
   21e98:	3803      	subs	r0, #3
   21e9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   21e9e:	4290      	cmp	r0, r2
   21ea0:	d91d      	bls.n	21ede <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ea2:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   21ea4:	b160      	cbz	r0, 21ec0 <compare_set+0xb4>
     return p_reg->COUNTER;
   21ea6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   21eaa:	eba8 000b 	sub.w	r0, r8, fp
   21eae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   21eb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21eb6:	d912      	bls.n	21ede <compare_set+0xd2>
					event_clear(chan);
   21eb8:	4620      	mov	r0, r4
   21eba:	f00c fa3e 	bl	2e33a <event_clear>
   21ebe:	4a16      	ldr	r2, [pc, #88]	; (21f18 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   21ec0:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   21ec4:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   21ec8:	e7da      	b.n	21e80 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   21eca:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21ecc:	4a13      	ldr	r2, [pc, #76]	; (21f1c <compare_set+0x110>)
   21ece:	40a3      	lsls	r3, r4
   21ed0:	e8d2 0fef 	ldaex	r0, [r2]
   21ed4:	4318      	orrs	r0, r3
   21ed6:	e8c2 0fe1 	stlex	r1, r0, [r2]
   21eda:	2900      	cmp	r1, #0
   21edc:	d1f8      	bne.n	21ed0 <compare_set+0xc4>
	return ret;
   21ede:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   21ee0:	490b      	ldr	r1, [pc, #44]	; (21f10 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   21ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   21ee4:	0123      	lsls	r3, r4, #4
   21ee6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   21eea:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   21eec:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   21ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21ef2:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   21ef4:	4620      	mov	r0, r4
   21ef6:	9900      	ldr	r1, [sp, #0]
   21ef8:	f7ff fefa 	bl	21cf0 <compare_int_unlock>
}
   21efc:	4628      	mov	r0, r5
   21efe:	b003      	add	sp, #12
   21f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   21f04:	f06f 0515 	mvn.w	r5, #21
   21f08:	e7f4      	b.n	21ef4 <compare_set+0xe8>
   21f0a:	bf00      	nop
   21f0c:	00800001 	.word	0x00800001
   21f10:	2000a368 	.word	0x2000a368
   21f14:	40015000 	.word	0x40015000
   21f18:	007ffffd 	.word	0x007ffffd
   21f1c:	2000af6c 	.word	0x2000af6c

00021f20 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   21f20:	2801      	cmp	r0, #1
{
   21f22:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   21f24:	d00a      	beq.n	21f3c <z_nrf_rtc_timer_set+0x1c>
   21f26:	4907      	ldr	r1, [pc, #28]	; (21f44 <z_nrf_rtc_timer_set+0x24>)
   21f28:	4807      	ldr	r0, [pc, #28]	; (21f48 <z_nrf_rtc_timer_set+0x28>)
   21f2a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   21f2e:	f006 fe49 	bl	28bc4 <assert_print>
   21f32:	f44f 71b6 	mov.w	r1, #364	; 0x16c
   21f36:	4803      	ldr	r0, [pc, #12]	; (21f44 <z_nrf_rtc_timer_set+0x24>)
   21f38:	f006 fe3d 	bl	28bb6 <assert_post_action>
}
   21f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   21f40:	f7ff bf64 	b.w	21e0c <compare_set>
   21f44:	00034c5a 	.word	0x00034c5a
   21f48:	00030da5 	.word	0x00030da5

00021f4c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   21f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   21f52:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21f54:	f04f 30ff 	mov.w	r0, #4294967295
   21f58:	f04f 31ff 	mov.w	r1, #4294967295
   21f5c:	4c19      	ldr	r4, [pc, #100]	; (21fc4 <sys_clock_driver_init+0x78>)
   21f5e:	4b1a      	ldr	r3, [pc, #104]	; (21fc8 <sys_clock_driver_init+0x7c>)
   21f60:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   21f64:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21f68:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   21f6c:	e9c3 0106 	strd	r0, r1, [r3, #24]
   21f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   21f74:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21f76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21f7a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   21f7e:	4b13      	ldr	r3, [pc, #76]	; (21fcc <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   21f80:	2101      	movs	r1, #1
   21f82:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   21f86:	2015      	movs	r0, #21
   21f88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21f8c:	462a      	mov	r2, r5
   21f8e:	f7ea fe97 	bl	ccc0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21f92:	2015      	movs	r0, #21
   21f94:	f7ea fe64 	bl	cc60 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21f98:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21f9a:	2203      	movs	r2, #3
   21f9c:	60a3      	str	r3, [r4, #8]
   21f9e:	6023      	str	r3, [r4, #0]
   21fa0:	4b0b      	ldr	r3, [pc, #44]	; (21fd0 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   21fa2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   21fa4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   21fa6:	4b0b      	ldr	r3, [pc, #44]	; (21fd4 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   21fa8:	4a0b      	ldr	r2, [pc, #44]	; (21fd8 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   21faa:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   21fac:	4b0b      	ldr	r3, [pc, #44]	; (21fdc <sys_clock_driver_init+0x90>)
   21fae:	9501      	str	r5, [sp, #4]
   21fb0:	9300      	str	r3, [sp, #0]
   21fb2:	2300      	movs	r3, #0
   21fb4:	f7ff ff2a 	bl	21e0c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   21fb8:	4630      	mov	r0, r6
   21fba:	f7fe fb67 	bl	2068c <z_nrf_clock_control_lf_on>

	return 0;
}
   21fbe:	4628      	mov	r0, r5
   21fc0:	b002      	add	sp, #8
   21fc2:	bd70      	pop	{r4, r5, r6, pc}
   21fc4:	40015000 	.word	0x40015000
   21fc8:	2000a368 	.word	0x2000a368
   21fcc:	e000e100 	.word	0xe000e100
   21fd0:	2000af74 	.word	0x2000af74
   21fd4:	2000af70 	.word	0x2000af70
   21fd8:	007fffff 	.word	0x007fffff
   21fdc:	00021ca9 	.word	0x00021ca9

00021fe0 <rtc_nrf_isr>:
{
   21fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   21fe4:	4b39      	ldr	r3, [pc, #228]	; (220cc <rtc_nrf_isr+0xec>)
   21fe6:	b085      	sub	sp, #20
   21fe8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   21fec:	0792      	lsls	r2, r2, #30
   21fee:	d50b      	bpl.n	22008 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ff0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   21ff4:	b142      	cbz	r2, 22008 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21ff6:	2200      	movs	r2, #0
   21ff8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   21ffc:	4a34      	ldr	r2, [pc, #208]	; (220d0 <rtc_nrf_isr+0xf0>)
   21ffe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   22002:	6813      	ldr	r3, [r2, #0]
   22004:	3301      	adds	r3, #1
   22006:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22008:	4d32      	ldr	r5, [pc, #200]	; (220d4 <rtc_nrf_isr+0xf4>)
   2200a:	2400      	movs	r4, #0
   2200c:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2200e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   22012:	4f2e      	ldr	r7, [pc, #184]	; (220cc <rtc_nrf_isr+0xec>)
   22014:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
   22018:	fa06 f904 	lsl.w	r9, r6, r4
   2201c:	ea19 0f03 	tst.w	r9, r3
   22020:	d02e      	beq.n	22080 <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   22022:	2301      	movs	r3, #1
   22024:	40a3      	lsls	r3, r4
   22026:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22028:	492b      	ldr	r1, [pc, #172]	; (220d8 <rtc_nrf_isr+0xf8>)
   2202a:	e8d1 2fef 	ldaex	r2, [r1]
   2202e:	ea02 0003 	and.w	r0, r2, r3
   22032:	e8c1 0fec 	stlex	ip, r0, [r1]
   22036:	f1bc 0f00 	cmp.w	ip, #0
   2203a:	d1f6      	bne.n	2202a <rtc_nrf_isr+0x4a>
   2203c:	fa22 f304 	lsr.w	r3, r2, r4
   22040:	07db      	lsls	r3, r3, #31
   22042:	d403      	bmi.n	2204c <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22044:	4b25      	ldr	r3, [pc, #148]	; (220dc <rtc_nrf_isr+0xfc>)
   22046:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2204a:	b1cb      	cbz	r3, 22080 <rtc_nrf_isr+0xa0>
			event_clear(chan);
   2204c:	4620      	mov	r0, r4
   2204e:	f00c f974 	bl	2e33a <event_clear>
		curr_time = z_nrf_rtc_timer_read();
   22052:	f7ff feb9 	bl	21dc8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   22056:	f04f 0220 	mov.w	r2, #32
   2205a:	f3ef 8311 	mrs	r3, BASEPRI
   2205e:	f382 8812 	msr	BASEPRI_MAX, r2
   22062:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   22066:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
   2206a:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
   2206e:	4550      	cmp	r0, sl
   22070:	eb71 010b 	sbcs.w	r1, r1, fp
   22074:	9302      	str	r3, [sp, #8]
   22076:	d20a      	bcs.n	2208e <rtc_nrf_isr+0xae>
	__asm__ volatile(
   22078:	f383 8811 	msr	BASEPRI, r3
   2207c:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22080:	3510      	adds	r5, #16
   22082:	b114      	cbz	r4, 2208a <rtc_nrf_isr+0xaa>
}
   22084:	b005      	add	sp, #20
   22086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2208a:	2401      	movs	r4, #1
   2208c:	e7c2      	b.n	22014 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
   2208e:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
   22090:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22094:	f04f 32ff 	mov.w	r2, #4294967295
			user_context = cc_data[chan].user_context;
   22098:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2209a:	f04f 33ff 	mov.w	r3, #4294967295
			cc_data[chan].callback = NULL;
   2209e:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
   220a0:	480a      	ldr	r0, [pc, #40]	; (220cc <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   220a2:	e9cc 2302 	strd	r2, r3, [ip, #8]
   220a6:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
   220aa:	4620      	mov	r0, r4
   220ac:	f00c f945 	bl	2e33a <event_clear>
   220b0:	9b02      	ldr	r3, [sp, #8]
   220b2:	f383 8811 	msr	BASEPRI, r3
   220b6:	f3bf 8f6f 	isb	sy
		if (handler) {
   220ba:	2900      	cmp	r1, #0
   220bc:	d0e0      	beq.n	22080 <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
   220be:	9b03      	ldr	r3, [sp, #12]
   220c0:	4652      	mov	r2, sl
   220c2:	9300      	str	r3, [sp, #0]
   220c4:	465b      	mov	r3, fp
   220c6:	4788      	blx	r1
   220c8:	e7da      	b.n	22080 <rtc_nrf_isr+0xa0>
   220ca:	bf00      	nop
   220cc:	40015000 	.word	0x40015000
   220d0:	2000af78 	.word	0x2000af78
   220d4:	2000a368 	.word	0x2000a368
   220d8:	2000af6c 	.word	0x2000af6c
   220dc:	40015140 	.word	0x40015140

000220e0 <z_nrf_rtc_timer_chan_alloc>:
{
   220e0:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   220e2:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   220e4:	4b0c      	ldr	r3, [pc, #48]	; (22118 <z_nrf_rtc_timer_chan_alloc+0x38>)
   220e6:	6818      	ldr	r0, [r3, #0]
   220e8:	b190      	cbz	r0, 22110 <z_nrf_rtc_timer_chan_alloc+0x30>
   220ea:	fab0 f080 	clz	r0, r0
   220ee:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   220f2:	fa04 f100 	lsl.w	r1, r4, r0
   220f6:	43c9      	mvns	r1, r1
   220f8:	e8d3 2fef 	ldaex	r2, [r3]
   220fc:	ea02 0501 	and.w	r5, r2, r1
   22100:	e8c3 5fe6 	stlex	r6, r5, [r3]
   22104:	2e00      	cmp	r6, #0
   22106:	d1f7      	bne.n	220f8 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   22108:	40c2      	lsrs	r2, r0
   2210a:	07d2      	lsls	r2, r2, #31
   2210c:	d5eb      	bpl.n	220e6 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   2210e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   22110:	f06f 000b 	mvn.w	r0, #11
   22114:	e7fb      	b.n	2210e <z_nrf_rtc_timer_chan_alloc+0x2e>
   22116:	bf00      	nop
   22118:	2000af70 	.word	0x2000af70

0002211c <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   2211c:	2801      	cmp	r0, #1
{
   2211e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   22120:	d00a      	beq.n	22138 <z_nrf_rtc_timer_chan_free+0x1c>
   22122:	490a      	ldr	r1, [pc, #40]	; (2214c <z_nrf_rtc_timer_chan_free+0x30>)
   22124:	480a      	ldr	r0, [pc, #40]	; (22150 <z_nrf_rtc_timer_chan_free+0x34>)
   22126:	f240 2229 	movw	r2, #553	; 0x229
   2212a:	f006 fd4b 	bl	28bc4 <assert_print>
   2212e:	f240 2129 	movw	r1, #553	; 0x229
   22132:	4806      	ldr	r0, [pc, #24]	; (2214c <z_nrf_rtc_timer_chan_free+0x30>)
   22134:	f006 fd3f 	bl	28bb6 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22138:	4b06      	ldr	r3, [pc, #24]	; (22154 <z_nrf_rtc_timer_chan_free+0x38>)
   2213a:	e8d3 1fef 	ldaex	r1, [r3]
   2213e:	f041 0102 	orr.w	r1, r1, #2
   22142:	e8c3 1fe2 	stlex	r2, r1, [r3]
   22146:	2a00      	cmp	r2, #0
   22148:	d1f7      	bne.n	2213a <z_nrf_rtc_timer_chan_free+0x1e>
}
   2214a:	bd08      	pop	{r3, pc}
   2214c:	00034c5a 	.word	0x00034c5a
   22150:	00030da5 	.word	0x00030da5
   22154:	2000af70 	.word	0x2000af70

00022158 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   22158:	1c43      	adds	r3, r0, #1
{
   2215a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2215c:	d021      	beq.n	221a2 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2215e:	2801      	cmp	r0, #1
   22160:	dd21      	ble.n	221a6 <sys_clock_set_timeout+0x4e>
   22162:	4a12      	ldr	r2, [pc, #72]	; (221ac <sys_clock_set_timeout+0x54>)
   22164:	4b12      	ldr	r3, [pc, #72]	; (221b0 <sys_clock_set_timeout+0x58>)
   22166:	4290      	cmp	r0, r2
   22168:	bfd4      	ite	le
   2216a:	4604      	movle	r4, r0
   2216c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2216e:	f7ff fe2b 	bl	21dc8 <z_nrf_rtc_timer_read>
   22172:	4b10      	ldr	r3, [pc, #64]	; (221b4 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   22174:	490e      	ldr	r1, [pc, #56]	; (221b0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22176:	e9d3 2300 	ldrd	r2, r3, [r3]
   2217a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   2217c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22180:	bf28      	it	cs
   22182:	2400      	movcs	r4, #0
	cyc += unannounced;
   22184:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   22186:	428c      	cmp	r4, r1
   22188:	bf28      	it	cs
   2218a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   2218c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2218e:	490a      	ldr	r1, [pc, #40]	; (221b8 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   22190:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22192:	9001      	str	r0, [sp, #4]
   22194:	9100      	str	r1, [sp, #0]
   22196:	f143 0300 	adc.w	r3, r3, #0
   2219a:	f7ff fe37 	bl	21e0c <compare_set>
}
   2219e:	b002      	add	sp, #8
   221a0:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   221a2:	4c03      	ldr	r4, [pc, #12]	; (221b0 <sys_clock_set_timeout+0x58>)
   221a4:	e7e3      	b.n	2216e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   221a6:	2401      	movs	r4, #1
   221a8:	e7e1      	b.n	2216e <sys_clock_set_timeout+0x16>
   221aa:	bf00      	nop
   221ac:	007ffffe 	.word	0x007ffffe
   221b0:	007fffff 	.word	0x007fffff
   221b4:	2000a388 	.word	0x2000a388
   221b8:	00021ca9 	.word	0x00021ca9

000221bc <sys_clock_elapsed>:
{
   221bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   221be:	f7ff fe03 	bl	21dc8 <z_nrf_rtc_timer_read>
   221c2:	4b02      	ldr	r3, [pc, #8]	; (221cc <sys_clock_elapsed+0x10>)
   221c4:	681b      	ldr	r3, [r3, #0]
}
   221c6:	1ac0      	subs	r0, r0, r3
   221c8:	bd08      	pop	{r3, pc}
   221ca:	bf00      	nop
   221cc:	2000a388 	.word	0x2000a388

000221d0 <nrf_gpio_pin_port_decode>:
{
   221d0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221d2:	6803      	ldr	r3, [r0, #0]
    switch (port)
   221d4:	095a      	lsrs	r2, r3, #5
   221d6:	d00c      	beq.n	221f2 <nrf_gpio_pin_port_decode+0x22>
   221d8:	2a01      	cmp	r2, #1
   221da:	d012      	beq.n	22202 <nrf_gpio_pin_port_decode+0x32>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221dc:	490e      	ldr	r1, [pc, #56]	; (22218 <nrf_gpio_pin_port_decode+0x48>)
   221de:	480f      	ldr	r0, [pc, #60]	; (2221c <nrf_gpio_pin_port_decode+0x4c>)
   221e0:	f240 2247 	movw	r2, #583	; 0x247
   221e4:	f006 fcee 	bl	28bc4 <assert_print>
   221e8:	f240 2147 	movw	r1, #583	; 0x247
   221ec:	480a      	ldr	r0, [pc, #40]	; (22218 <nrf_gpio_pin_port_decode+0x48>)
   221ee:	f006 fce2 	bl	28bb6 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   221f2:	f04f 32ff 	mov.w	r2, #4294967295
   221f6:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221fa:	07d9      	lsls	r1, r3, #31
   221fc:	d5ee      	bpl.n	221dc <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   221fe:	4808      	ldr	r0, [pc, #32]	; (22220 <nrf_gpio_pin_port_decode+0x50>)
   22200:	e008      	b.n	22214 <nrf_gpio_pin_port_decode+0x44>
    return (mask & (1UL << pin_number)) ? true : false;
   22202:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   22206:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2220a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2220c:	07d2      	lsls	r2, r2, #31
   2220e:	d5e5      	bpl.n	221dc <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   22210:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   22212:	4804      	ldr	r0, [pc, #16]	; (22224 <nrf_gpio_pin_port_decode+0x54>)
}
   22214:	bd08      	pop	{r3, pc}
   22216:	bf00      	nop
   22218:	00034718 	.word	0x00034718
   2221c:	00030da5 	.word	0x00030da5
   22220:	40842500 	.word	0x40842500
   22224:	40842800 	.word	0x40842800

00022228 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   22228:	b510      	push	{r4, lr}
   2222a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   2222c:	6902      	ldr	r2, [r0, #16]
{
   2222e:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   22230:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   22234:	4925      	ldr	r1, [pc, #148]	; (222cc <mbox_nrf_init+0xa4>)
   22236:	2000      	movs	r0, #0
   22238:	f001 fcf6 	bl	23c28 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2223c:	2200      	movs	r2, #0
   2223e:	2101      	movs	r1, #1
   22240:	202a      	movs	r0, #42	; 0x2a
   22242:	f7ea fd3d 	bl	ccc0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   22246:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   22248:	2284      	movs	r2, #132	; 0x84
   2224a:	2100      	movs	r1, #0
   2224c:	a807      	add	r0, sp, #28
   2224e:	f008 f96f 	bl	2a530 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   22252:	6863      	ldr	r3, [r4, #4]
   22254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   22258:	d30a      	bcc.n	22270 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   2225a:	4b1d      	ldr	r3, [pc, #116]	; (222d0 <mbox_nrf_init+0xa8>)
   2225c:	9305      	str	r3, [sp, #20]
   2225e:	2302      	movs	r3, #2
   22260:	9304      	str	r3, [sp, #16]
   22262:	2300      	movs	r3, #0
   22264:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   22268:	481a      	ldr	r0, [pc, #104]	; (222d4 <mbox_nrf_init+0xac>)
   2226a:	aa04      	add	r2, sp, #16
   2226c:	f7e8 fc76 	bl	ab5c <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   22270:	6823      	ldr	r3, [r4, #0]
   22272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   22276:	d30a      	bcc.n	2228e <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   22278:	4b17      	ldr	r3, [pc, #92]	; (222d8 <mbox_nrf_init+0xb0>)
   2227a:	9305      	str	r3, [sp, #20]
   2227c:	2302      	movs	r3, #2
   2227e:	9304      	str	r3, [sp, #16]
   22280:	2300      	movs	r3, #0
   22282:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   22286:	4813      	ldr	r0, [pc, #76]	; (222d4 <mbox_nrf_init+0xac>)
   22288:	aa04      	add	r2, sp, #16
   2228a:	f7e8 fc67 	bl	ab5c <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   2228e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   22290:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   22292:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   22294:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   22296:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   22298:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   2229a:	40d9      	lsrs	r1, r3
   2229c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   2229e:	bf44      	itt	mi
   222a0:	fa00 f103 	lslmi.w	r1, r0, r3
   222a4:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   222a8:	6821      	ldr	r1, [r4, #0]
   222aa:	40d9      	lsrs	r1, r3
   222ac:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   222ae:	bf48      	it	mi
   222b0:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   222b4:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   222b8:	bf48      	it	mi
   222ba:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   222bc:	2b10      	cmp	r3, #16
   222be:	d1ea      	bne.n	22296 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   222c0:	a807      	add	r0, sp, #28
   222c2:	f001 fcc9 	bl	23c58 <nrfx_ipc_config_load>

	return 0;
}
   222c6:	2000      	movs	r0, #0
   222c8:	b028      	add	sp, #160	; 0xa0
   222ca:	bd10      	pop	{r4, pc}
   222cc:	000223d1 	.word	0x000223d1
   222d0:	00034c8b 	.word	0x00034c8b
   222d4:	0002fd9c 	.word	0x0002fd9c
   222d8:	00034cb7 	.word	0x00034cb7

000222dc <mbox_nrf_set_enabled>:
{
   222dc:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   222de:	290f      	cmp	r1, #15
{
   222e0:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   222e2:	6905      	ldr	r5, [r0, #16]
{
   222e4:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   222e6:	d842      	bhi.n	2236e <mbox_nrf_set_enabled+0x92>
   222e8:	6843      	ldr	r3, [r0, #4]
   222ea:	681b      	ldr	r3, [r3, #0]
   222ec:	40cb      	lsrs	r3, r1
   222ee:	07db      	lsls	r3, r3, #31
   222f0:	d53d      	bpl.n	2236e <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   222f2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   222f6:	40cb      	lsrs	r3, r1
   222f8:	f003 0301 	and.w	r3, r3, #1
   222fc:	b91a      	cbnz	r2, 22306 <mbox_nrf_set_enabled+0x2a>
   222fe:	bb13      	cbnz	r3, 22346 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   22300:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22304:	e031      	b.n	2236a <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   22306:	2b00      	cmp	r3, #0
   22308:	d1fa      	bne.n	22300 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   2230a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2230e:	b94b      	cbnz	r3, 22324 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   22310:	4a18      	ldr	r2, [pc, #96]	; (22374 <mbox_nrf_set_enabled+0x98>)
   22312:	9205      	str	r2, [sp, #20]
   22314:	2202      	movs	r2, #2
   22316:	9204      	str	r2, [sp, #16]
   22318:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2231c:	4816      	ldr	r0, [pc, #88]	; (22378 <mbox_nrf_set_enabled+0x9c>)
   2231e:	aa04      	add	r2, sp, #16
   22320:	f7e8 fc1c 	bl	ab5c <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   22324:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   22328:	b913      	cbnz	r3, 22330 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   2232a:	202a      	movs	r0, #42	; 0x2a
   2232c:	f7ea fc98 	bl	cc60 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   22330:	2201      	movs	r2, #1
   22332:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   22336:	40a2      	lsls	r2, r4
   22338:	4313      	orrs	r3, r2
   2233a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   2233e:	b2e0      	uxtb	r0, r4
   22340:	f001 fcc6 	bl	23cd0 <nrfx_ipc_receive_event_enable>
   22344:	e00a      	b.n	2235c <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   22346:	b2c8      	uxtb	r0, r1
   22348:	f001 fcde 	bl	23d08 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   2234c:	2201      	movs	r2, #1
   2234e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   22352:	40a2      	lsls	r2, r4
   22354:	ea23 0302 	bic.w	r3, r3, r2
   22358:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   2235c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   22360:	b913      	cbnz	r3, 22368 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   22362:	202a      	movs	r0, #42	; 0x2a
   22364:	f7ea fc8a 	bl	cc7c <arch_irq_disable>
	return 0;
   22368:	2000      	movs	r0, #0
}
   2236a:	b007      	add	sp, #28
   2236c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2236e:	f06f 0015 	mvn.w	r0, #21
   22372:	e7fa      	b.n	2236a <mbox_nrf_set_enabled+0x8e>
   22374:	00034ce3 	.word	0x00034ce3
   22378:	0002fd9c 	.word	0x0002fd9c

0002237c <mbox_nrf_send>:
{
   2237c:	b530      	push	{r4, r5, lr}
   2237e:	4605      	mov	r5, r0
   22380:	460c      	mov	r4, r1
   22382:	b087      	sub	sp, #28
	if (msg) {
   22384:	b152      	cbz	r2, 2239c <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   22386:	4b10      	ldr	r3, [pc, #64]	; (223c8 <mbox_nrf_send+0x4c>)
   22388:	9305      	str	r3, [sp, #20]
   2238a:	2302      	movs	r3, #2
   2238c:	9304      	str	r3, [sp, #16]
   2238e:	2300      	movs	r3, #0
   22390:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   22394:	480d      	ldr	r0, [pc, #52]	; (223cc <mbox_nrf_send+0x50>)
   22396:	aa04      	add	r2, sp, #16
   22398:	f7e8 fbe0 	bl	ab5c <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   2239c:	2c0f      	cmp	r4, #15
   2239e:	d80f      	bhi.n	223c0 <mbox_nrf_send+0x44>
   223a0:	686b      	ldr	r3, [r5, #4]
   223a2:	685b      	ldr	r3, [r3, #4]
   223a4:	40e3      	lsrs	r3, r4
   223a6:	07db      	lsls	r3, r3, #31
   223a8:	d50a      	bpl.n	223c0 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   223aa:	2301      	movs	r3, #1
	return 0;
   223ac:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   223ae:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   223b0:	b2e4      	uxtb	r4, r4
   223b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   223b6:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   223ba:	6023      	str	r3, [r4, #0]
}
   223bc:	b007      	add	sp, #28
   223be:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   223c0:	f06f 0015 	mvn.w	r0, #21
   223c4:	e7fa      	b.n	223bc <mbox_nrf_send+0x40>
   223c6:	bf00      	nop
   223c8:	00034d13 	.word	0x00034d13
   223cc:	0002fd9c 	.word	0x0002fd9c

000223d0 <mbox_dispatcher>:
{
   223d0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   223d2:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   223d6:	280f      	cmp	r0, #15
{
   223d8:	4604      	mov	r4, r0
   223da:	460d      	mov	r5, r1
   223dc:	6873      	ldr	r3, [r6, #4]
   223de:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   223e0:	d803      	bhi.n	223ea <mbox_dispatcher+0x1a>
   223e2:	681b      	ldr	r3, [r3, #0]
   223e4:	40c3      	lsrs	r3, r0
   223e6:	07db      	lsls	r3, r3, #31
   223e8:	d40a      	bmi.n	22400 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   223ea:	4b15      	ldr	r3, [pc, #84]	; (22440 <mbox_dispatcher+0x70>)
   223ec:	9305      	str	r3, [sp, #20]
   223ee:	2302      	movs	r3, #2
   223f0:	9304      	str	r3, [sp, #16]
   223f2:	2300      	movs	r3, #0
   223f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   223f8:	4812      	ldr	r0, [pc, #72]	; (22444 <mbox_dispatcher+0x74>)
   223fa:	aa04      	add	r2, sp, #16
   223fc:	f7e8 fbae 	bl	ab5c <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   22400:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   22404:	40e3      	lsrs	r3, r4
   22406:	f013 0301 	ands.w	r3, r3, #1
   2240a:	d109      	bne.n	22420 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   2240c:	4a0e      	ldr	r2, [pc, #56]	; (22448 <mbox_dispatcher+0x78>)
   2240e:	9205      	str	r2, [sp, #20]
   22410:	2202      	movs	r2, #2
   22412:	9204      	str	r2, [sp, #16]
   22414:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   22418:	480a      	ldr	r0, [pc, #40]	; (22444 <mbox_dispatcher+0x74>)
   2241a:	aa04      	add	r2, sp, #16
   2241c:	f7e8 fb9e 	bl	ab5c <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   22420:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   22424:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   22428:	b145      	cbz	r5, 2243c <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   2242a:	2300      	movs	r3, #0
   2242c:	4621      	mov	r1, r4
   2242e:	4630      	mov	r0, r6
   22430:	46ac      	mov	ip, r5
   22432:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   22434:	b006      	add	sp, #24
   22436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   2243a:	4760      	bx	ip
}
   2243c:	b006      	add	sp, #24
   2243e:	bd70      	pop	{r4, r5, r6, pc}
   22440:	00034d2e 	.word	0x00034d2e
   22444:	0002fd9c 	.word	0x0002fd9c
   22448:	00034d4a 	.word	0x00034d4a

0002244c <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   2244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   22450:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   22454:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   22456:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   2245a:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   2245c:	d00a      	beq.n	22474 <z_impl_gpio_pin_configure+0x28>
   2245e:	4935      	ldr	r1, [pc, #212]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   22460:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   22464:	4834      	ldr	r0, [pc, #208]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   22466:	f006 fbad 	bl	28bc4 <assert_print>
   2246a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2246e:	4831      	ldr	r0, [pc, #196]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   22470:	f006 fba1 	bl	28bb6 <assert_post_action>
   22474:	f002 0230 	and.w	r2, r2, #48	; 0x30
   22478:	2a30      	cmp	r2, #48	; 0x30
   2247a:	d108      	bne.n	2248e <z_impl_gpio_pin_configure+0x42>
   2247c:	492d      	ldr	r1, [pc, #180]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   2247e:	f240 22b7 	movw	r2, #695	; 0x2b7
   22482:	482d      	ldr	r0, [pc, #180]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   22484:	f006 fb9e 	bl	28bc4 <assert_print>
   22488:	f240 21b7 	movw	r1, #695	; 0x2b7
   2248c:	e7ef      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   2248e:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   22492:	2a02      	cmp	r2, #2
   22494:	d108      	bne.n	224a8 <z_impl_gpio_pin_configure+0x5c>
   22496:	4927      	ldr	r1, [pc, #156]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   22498:	f240 22bb 	movw	r2, #699	; 0x2bb
   2249c:	4826      	ldr	r0, [pc, #152]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   2249e:	f006 fb91 	bl	28bc4 <assert_print>
   224a2:	f240 21bb 	movw	r1, #699	; 0x2bb
   224a6:	e7e2      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   224a8:	f003 0206 	and.w	r2, r3, #6
   224ac:	2a04      	cmp	r2, #4
   224ae:	d108      	bne.n	224c2 <z_impl_gpio_pin_configure+0x76>
   224b0:	4920      	ldr	r1, [pc, #128]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   224b2:	f240 22bf 	movw	r2, #703	; 0x2bf
   224b6:	4820      	ldr	r0, [pc, #128]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   224b8:	f006 fb84 	bl	28bc4 <assert_print>
   224bc:	f240 21bf 	movw	r1, #703	; 0x2bf
   224c0:	e7d5      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   224c2:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   224c6:	d012      	beq.n	224ee <z_impl_gpio_pin_configure+0xa2>
   224c8:	039d      	lsls	r5, r3, #14
   224ca:	d408      	bmi.n	224de <z_impl_gpio_pin_configure+0x92>
   224cc:	4919      	ldr	r1, [pc, #100]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   224ce:	f240 22c2 	movw	r2, #706	; 0x2c2
   224d2:	4819      	ldr	r0, [pc, #100]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   224d4:	f006 fb76 	bl	28bc4 <assert_print>
   224d8:	f240 21c2 	movw	r1, #706	; 0x2c2
   224dc:	e7c7      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   224de:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   224e2:	d014      	beq.n	2250e <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   224e4:	4a15      	ldr	r2, [pc, #84]	; (2253c <z_impl_gpio_pin_configure+0xf0>)
   224e6:	439a      	bics	r2, r3
   224e8:	d101      	bne.n	224ee <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   224ea:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   224ee:	2501      	movs	r5, #1
   224f0:	6824      	ldr	r4, [r4, #0]
   224f2:	408d      	lsls	r5, r1
   224f4:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   224f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   224fa:	d111      	bne.n	22520 <z_impl_gpio_pin_configure+0xd4>
   224fc:	490d      	ldr	r1, [pc, #52]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   224fe:	f240 22d2 	movw	r2, #722	; 0x2d2
   22502:	480d      	ldr	r0, [pc, #52]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   22504:	f006 fb5e 	bl	28bc4 <assert_print>
   22508:	f240 21d2 	movw	r1, #722	; 0x2d2
   2250c:	e7af      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2250e:	4909      	ldr	r1, [pc, #36]	; (22534 <z_impl_gpio_pin_configure+0xe8>)
   22510:	f240 22c6 	movw	r2, #710	; 0x2c6
   22514:	4808      	ldr	r0, [pc, #32]	; (22538 <z_impl_gpio_pin_configure+0xec>)
   22516:	f006 fb55 	bl	28bc4 <assert_print>
   2251a:	f240 21c6 	movw	r1, #710	; 0x2c6
   2251e:	e7a6      	b.n	2246e <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22520:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   22522:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22524:	bf4c      	ite	mi
   22526:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22528:	43ac      	bicpl	r4, r5
   2252a:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   2252c:	683b      	ldr	r3, [r7, #0]
}
   2252e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   22532:	4718      	bx	r3
   22534:	00034d80 	.word	0x00034d80
   22538:	00030da5 	.word	0x00030da5
   2253c:	00100001 	.word	0x00100001

00022540 <z_impl_gpio_pin_interrupt_configure>:
{
   22540:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   22542:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   22546:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	const struct gpio_driver_data *const data =
   2254a:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   2254c:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   22550:	d10a      	bne.n	22568 <z_impl_gpio_pin_interrupt_configure+0x28>
   22552:	4920      	ldr	r1, [pc, #128]	; (225d4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   22554:	f240 2261 	movw	r2, #609	; 0x261
   22558:	481f      	ldr	r0, [pc, #124]	; (225d8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   2255a:	f006 fb33 	bl	28bc4 <assert_print>
   2255e:	f240 2161 	movw	r1, #609	; 0x261
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   22562:	481c      	ldr	r0, [pc, #112]	; (225d4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   22564:	f006 fb27 	bl	28bb6 <assert_post_action>
   22568:	b943      	cbnz	r3, 2257c <z_impl_gpio_pin_interrupt_configure+0x3c>
   2256a:	491a      	ldr	r1, [pc, #104]	; (225d4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   2256c:	f240 2265 	movw	r2, #613	; 0x265
   22570:	4819      	ldr	r0, [pc, #100]	; (225d8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   22572:	f006 fb27 	bl	28bc4 <assert_print>
   22576:	f240 2165 	movw	r1, #613	; 0x265
   2257a:	e7f2      	b.n	22562 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   2257c:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   22580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   22584:	d108      	bne.n	22598 <z_impl_gpio_pin_interrupt_configure+0x58>
   22586:	4913      	ldr	r1, [pc, #76]	; (225d4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   22588:	f240 226f 	movw	r2, #623	; 0x26f
   2258c:	4812      	ldr	r0, [pc, #72]	; (225d8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   2258e:	f006 fb19 	bl	28bc4 <assert_print>
   22592:	f240 216f 	movw	r1, #623	; 0x26f
   22596:	e7e4      	b.n	22562 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22598:	2301      	movs	r3, #1
   2259a:	6836      	ldr	r6, [r6, #0]
   2259c:	408b      	lsls	r3, r1
   2259e:	4233      	tst	r3, r6
   225a0:	d108      	bne.n	225b4 <z_impl_gpio_pin_interrupt_configure+0x74>
   225a2:	490c      	ldr	r1, [pc, #48]	; (225d4 <z_impl_gpio_pin_interrupt_configure+0x94>)
   225a4:	f44f 721d 	mov.w	r2, #628	; 0x274
   225a8:	480b      	ldr	r0, [pc, #44]	; (225d8 <z_impl_gpio_pin_interrupt_configure+0x98>)
   225aa:	f006 fb0b 	bl	28bc4 <assert_print>
   225ae:	f44f 711d 	mov.w	r1, #628	; 0x274
   225b2:	e7d6      	b.n	22562 <z_impl_gpio_pin_interrupt_configure+0x22>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   225b4:	0216      	lsls	r6, r2, #8
   225b6:	d504      	bpl.n	225c2 <z_impl_gpio_pin_interrupt_configure+0x82>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   225b8:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   225ba:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   225bc:	bf18      	it	ne
   225be:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   225c2:	69a4      	ldr	r4, [r4, #24]
   225c4:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   225c8:	46a4      	mov	ip, r4
}
   225ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   225ce:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   225d2:	4760      	bx	ip
   225d4:	00034d80 	.word	0x00034d80
   225d8:	00030da5 	.word	0x00030da5

000225dc <gpio_pin_set>:
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   225dc:	2301      	movs	r3, #1
{
   225de:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   225e0:	fa03 f101 	lsl.w	r1, r3, r1
   225e4:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   225e6:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   225e8:	681b      	ldr	r3, [r3, #0]
   225ea:	4219      	tst	r1, r3
   225ec:	d10a      	bne.n	22604 <gpio_pin_set+0x28>
   225ee:	490c      	ldr	r1, [pc, #48]	; (22620 <gpio_pin_set+0x44>)
   225f0:	480c      	ldr	r0, [pc, #48]	; (22624 <gpio_pin_set+0x48>)
   225f2:	f240 523d 	movw	r2, #1341	; 0x53d
   225f6:	f006 fae5 	bl	28bc4 <assert_print>
   225fa:	f240 513d 	movw	r1, #1341	; 0x53d
   225fe:	4808      	ldr	r0, [pc, #32]	; (22620 <gpio_pin_set+0x44>)
   22600:	f006 fad9 	bl	28bb6 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22604:	6823      	ldr	r3, [r4, #0]
   22606:	4219      	tst	r1, r3
   22608:	d003      	beq.n	22612 <gpio_pin_set+0x36>
	if (value != 0)	{
   2260a:	b122      	cbz	r2, 22616 <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   2260c:	6883      	ldr	r3, [r0, #8]
   2260e:	691b      	ldr	r3, [r3, #16]
   22610:	e003      	b.n	2261a <gpio_pin_set+0x3e>
	if (value != 0)	{
   22612:	2a00      	cmp	r2, #0
   22614:	d0fa      	beq.n	2260c <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   22616:	6883      	ldr	r3, [r0, #8]
   22618:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   2261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   2261e:	4718      	bx	r3
   22620:	00034d80 	.word	0x00034d80
   22624:	00030da5 	.word	0x00030da5

00022628 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   22628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   2262a:	4b07      	ldr	r3, [pc, #28]	; (22648 <get_buttons.part.0+0x20>)
   2262c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22630:	9305      	str	r3, [sp, #20]
   22632:	2302      	movs	r3, #2
   22634:	4805      	ldr	r0, [pc, #20]	; (2264c <get_buttons.part.0+0x24>)
   22636:	aa04      	add	r2, sp, #16
   22638:	9304      	str	r3, [sp, #16]
   2263a:	f00b ff65 	bl	2e508 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   2263e:	2000      	movs	r0, #0
   22640:	b007      	add	sp, #28
   22642:	f85d fb04 	ldr.w	pc, [sp], #4
   22646:	bf00      	nop
   22648:	00034db1 	.word	0x00034db1
   2264c:	0002fd5c 	.word	0x0002fd5c

00022650 <get_buttons>:
{
   22650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   22654:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22656:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2265a:	4625      	mov	r5, r4
   2265c:	4e1a      	ldr	r6, [pc, #104]	; (226c8 <get_buttons+0x78>)
	return gpio_pin_get(spec->port, spec->pin);
   2265e:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22660:	7937      	ldrb	r7, [r6, #4]
   22662:	6843      	ldr	r3, [r0, #4]
   22664:	fa08 f707 	lsl.w	r7, r8, r7
   22668:	681b      	ldr	r3, [r3, #0]
   2266a:	421f      	tst	r7, r3
   2266c:	d10a      	bne.n	22684 <get_buttons+0x34>
   2266e:	4917      	ldr	r1, [pc, #92]	; (226cc <get_buttons+0x7c>)
   22670:	4817      	ldr	r0, [pc, #92]	; (226d0 <get_buttons+0x80>)
   22672:	f240 42e4 	movw	r2, #1252	; 0x4e4
   22676:	f006 faa5 	bl	28bc4 <assert_print>
   2267a:	f240 41e4 	movw	r1, #1252	; 0x4e4
   2267e:	4813      	ldr	r0, [pc, #76]	; (226cc <get_buttons+0x7c>)
   22680:	f006 fa99 	bl	28bb6 <assert_post_action>
	const struct gpio_driver_data *const data =
   22684:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   22688:	6883      	ldr	r3, [r0, #8]
   2268a:	a901      	add	r1, sp, #4
   2268c:	685b      	ldr	r3, [r3, #4]
   2268e:	4798      	blx	r3
	if (ret == 0) {
   22690:	2800      	cmp	r0, #0
   22692:	d00c      	beq.n	226ae <get_buttons+0x5e>
		if (val < 0) {
   22694:	db12      	blt.n	226bc <get_buttons+0x6c>
			ret |= 1U << i;
   22696:	fa08 f305 	lsl.w	r3, r8, r5
   2269a:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2269c:	3501      	adds	r5, #1
   2269e:	2d04      	cmp	r5, #4
   226a0:	f106 0608 	add.w	r6, r6, #8
   226a4:	d1db      	bne.n	2265e <get_buttons+0xe>
}
   226a6:	4620      	mov	r0, r4
   226a8:	b003      	add	sp, #12
   226aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   226ae:	f8d9 2000 	ldr.w	r2, [r9]
   226b2:	9b01      	ldr	r3, [sp, #4]
   226b4:	4053      	eors	r3, r2
		if (val) {
   226b6:	423b      	tst	r3, r7
   226b8:	d0f0      	beq.n	2269c <get_buttons+0x4c>
   226ba:	e7ec      	b.n	22696 <get_buttons+0x46>
}
   226bc:	b003      	add	sp, #12
   226be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   226c2:	f7ff bfb1 	b.w	22628 <get_buttons.part.0>
   226c6:	bf00      	nop
   226c8:	00030bd4 	.word	0x00030bd4
   226cc:	00034d80 	.word	0x00034d80
   226d0:	00030da5 	.word	0x00030da5

000226d4 <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   226d4:	2800      	cmp	r0, #0
{
   226d6:	b570      	push	{r4, r5, r6, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   226d8:	bf0c      	ite	eq
   226da:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   226de:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   226e2:	2500      	movs	r5, #0
   226e4:	4c06      	ldr	r4, [pc, #24]	; (22700 <callback_ctrl+0x2c>)
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   226e6:	6820      	ldr	r0, [r4, #0]
   226e8:	7921      	ldrb	r1, [r4, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   226ea:	4632      	mov	r2, r6
   226ec:	3501      	adds	r5, #1
   226ee:	f7ff ff27 	bl	22540 <z_impl_gpio_pin_interrupt_configure>
   226f2:	2d04      	cmp	r5, #4
   226f4:	d002      	beq.n	226fc <callback_ctrl+0x28>
   226f6:	3408      	adds	r4, #8
   226f8:	2800      	cmp	r0, #0
   226fa:	d0f4      	beq.n	226e6 <callback_ctrl+0x12>
}
   226fc:	bd70      	pop	{r4, r5, r6, pc}
   226fe:	bf00      	nop
   22700:	00030bd4 	.word	0x00030bd4

00022704 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   22704:	b510      	push	{r4, lr}
   22706:	b086      	sub	sp, #24
	__asm__ volatile(
   22708:	f04f 0320 	mov.w	r3, #32
   2270c:	f3ef 8411 	mrs	r4, BASEPRI
   22710:	f383 8812 	msr	BASEPRI_MAX, r3
   22714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22718:	4820      	ldr	r0, [pc, #128]	; (2279c <button_pressed+0x98>)
   2271a:	f003 f885 	bl	25828 <z_spin_lock_valid>
   2271e:	b940      	cbnz	r0, 22732 <button_pressed+0x2e>
   22720:	491f      	ldr	r1, [pc, #124]	; (227a0 <button_pressed+0x9c>)
   22722:	2294      	movs	r2, #148	; 0x94
   22724:	481f      	ldr	r0, [pc, #124]	; (227a4 <button_pressed+0xa0>)
   22726:	f006 fa4d 	bl	28bc4 <assert_print>
   2272a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2272c:	481c      	ldr	r0, [pc, #112]	; (227a0 <button_pressed+0x9c>)
   2272e:	f006 fa42 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   22732:	481a      	ldr	r0, [pc, #104]	; (2279c <button_pressed+0x98>)
   22734:	f003 f894 	bl	25860 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   22738:	2000      	movs	r0, #0
   2273a:	f7ff ffcb 	bl	226d4 <callback_ctrl>

	if (err) {
   2273e:	b148      	cbz	r0, 22754 <button_pressed+0x50>
		LOG_ERR("Cannot disable callbacks");
   22740:	4b19      	ldr	r3, [pc, #100]	; (227a8 <button_pressed+0xa4>)
   22742:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22746:	9305      	str	r3, [sp, #20]
   22748:	2302      	movs	r3, #2
   2274a:	4818      	ldr	r0, [pc, #96]	; (227ac <button_pressed+0xa8>)
   2274c:	aa04      	add	r2, sp, #16
   2274e:	9304      	str	r3, [sp, #16]
   22750:	f00b feda 	bl	2e508 <z_log_msg_static_create.constprop.0>
	}

	switch (state) {
   22754:	4b16      	ldr	r3, [pc, #88]	; (227b0 <button_pressed+0xac>)
   22756:	781a      	ldrb	r2, [r3, #0]
   22758:	b9ba      	cbnz	r2, 2278a <button_pressed+0x86>
	case STATE_WAITING:
		state = STATE_SCANNING;
   2275a:	2201      	movs	r2, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   2275c:	4815      	ldr	r0, [pc, #84]	; (227b4 <button_pressed+0xb0>)
		state = STATE_SCANNING;
   2275e:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   22760:	2221      	movs	r2, #33	; 0x21
   22762:	2300      	movs	r3, #0
   22764:	f003 ff88 	bl	26678 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22768:	480c      	ldr	r0, [pc, #48]	; (2279c <button_pressed+0x98>)
   2276a:	f003 f86b 	bl	25844 <z_spin_unlock_valid>
   2276e:	b930      	cbnz	r0, 2277e <button_pressed+0x7a>
   22770:	490b      	ldr	r1, [pc, #44]	; (227a0 <button_pressed+0x9c>)
   22772:	22c2      	movs	r2, #194	; 0xc2
   22774:	480b      	ldr	r0, [pc, #44]	; (227a4 <button_pressed+0xa0>)
   22776:	f006 fa25 	bl	28bc4 <assert_print>
   2277a:	21c2      	movs	r1, #194	; 0xc2
   2277c:	e7d6      	b.n	2272c <button_pressed+0x28>
	__asm__ volatile(
   2277e:	f384 8811 	msr	BASEPRI, r4
   22782:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   22786:	b006      	add	sp, #24
   22788:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   2278a:	490b      	ldr	r1, [pc, #44]	; (227b8 <button_pressed+0xb4>)
   2278c:	4805      	ldr	r0, [pc, #20]	; (227a4 <button_pressed+0xa0>)
   2278e:	22ba      	movs	r2, #186	; 0xba
   22790:	f006 fa18 	bl	28bc4 <assert_print>
   22794:	21ba      	movs	r1, #186	; 0xba
   22796:	4808      	ldr	r0, [pc, #32]	; (227b8 <button_pressed+0xb4>)
   22798:	e7c9      	b.n	2272e <button_pressed+0x2a>
   2279a:	bf00      	nop
   2279c:	2000b028 	.word	0x2000b028
   227a0:	00030eb4 	.word	0x00030eb4
   227a4:	00030da5 	.word	0x00030da5
   227a8:	00034dc6 	.word	0x00034dc6
   227ac:	0002fd5c 	.word	0x0002fd5c
   227b0:	2000b338 	.word	0x2000b338
   227b4:	2000a398 	.word	0x2000a398
   227b8:	00034ddf 	.word	0x00034ddf

000227bc <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   227bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227c0:	4607      	mov	r7, r0
   227c2:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   227c4:	2500      	movs	r5, #0
   227c6:	4e14      	ldr	r6, [pc, #80]	; (22818 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   227c8:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   227ca:	fa27 f205 	lsr.w	r2, r7, r5
   227ce:	f012 0201 	ands.w	r2, r2, #1
   227d2:	d117      	bne.n	22804 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   227d4:	fa28 f305 	lsr.w	r3, r8, r5
   227d8:	07db      	lsls	r3, r3, #31
   227da:	d515      	bpl.n	22808 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   227dc:	7931      	ldrb	r1, [r6, #4]
   227de:	6830      	ldr	r0, [r6, #0]
   227e0:	f7ff fefc 	bl	225dc <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   227e4:	4604      	mov	r4, r0
   227e6:	b178      	cbz	r0, 22808 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   227e8:	4b0c      	ldr	r3, [pc, #48]	; (2281c <dk_set_leds_state.part.0+0x60>)
   227ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   227ee:	9305      	str	r3, [sp, #20]
   227f0:	2302      	movs	r3, #2
   227f2:	480b      	ldr	r0, [pc, #44]	; (22820 <dk_set_leds_state.part.0+0x64>)
   227f4:	aa04      	add	r2, sp, #16
   227f6:	9304      	str	r3, [sp, #16]
   227f8:	f00b fe86 	bl	2e508 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   227fc:	4620      	mov	r0, r4
   227fe:	b006      	add	sp, #24
   22800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   22804:	2201      	movs	r2, #1
   22806:	e7e9      	b.n	227dc <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   22808:	3501      	adds	r5, #1
   2280a:	2d04      	cmp	r5, #4
   2280c:	f106 0608 	add.w	r6, r6, #8
   22810:	d1db      	bne.n	227ca <dk_set_leds_state.part.0+0xe>
	return 0;
   22812:	2400      	movs	r4, #0
   22814:	e7f2      	b.n	227fc <dk_set_leds_state.part.0+0x40>
   22816:	bf00      	nop
   22818:	00030bb4 	.word	0x00030bb4
   2281c:	00034e1d 	.word	0x00034e1d
   22820:	0002fd5c 	.word	0x0002fd5c

00022824 <buttons_scan_fn>:
{
   22824:	b5f0      	push	{r4, r5, r6, r7, lr}
   22826:	b087      	sub	sp, #28
	button_scan = get_buttons();
   22828:	f7ff ff12 	bl	22650 <get_buttons>
   2282c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2282e:	4b3d      	ldr	r3, [pc, #244]	; (22924 <buttons_scan_fn+0x100>)
   22830:	e8d3 2fef 	ldaex	r2, [r3]
   22834:	e8c3 4fe1 	stlex	r1, r4, [r3]
   22838:	2900      	cmp	r1, #0
   2283a:	d1f9      	bne.n	22830 <buttons_scan_fn+0xc>
	if (!initial_run) {
   2283c:	4b3a      	ldr	r3, [pc, #232]	; (22928 <buttons_scan_fn+0x104>)
   2283e:	4f3b      	ldr	r7, [pc, #236]	; (2292c <buttons_scan_fn+0x108>)
   22840:	781a      	ldrb	r2, [r3, #0]
   22842:	bb3a      	cbnz	r2, 22894 <buttons_scan_fn+0x70>
		if (button_scan != last_button_scan) {
   22844:	683e      	ldr	r6, [r7, #0]
   22846:	42a6      	cmp	r6, r4
   22848:	d019      	beq.n	2287e <buttons_scan_fn+0x5a>
	if (button_handler_cb != NULL) {
   2284a:	4b39      	ldr	r3, [pc, #228]	; (22930 <buttons_scan_fn+0x10c>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2284c:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   2284e:	681b      	ldr	r3, [r3, #0]
   22850:	b10b      	cbz	r3, 22856 <buttons_scan_fn+0x32>
		button_handler_cb(button_state, has_changed);
   22852:	4631      	mov	r1, r6
   22854:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   22856:	f04f 33ff 	mov.w	r3, #4294967295
   2285a:	f04f 32ff 	mov.w	r2, #4294967295
   2285e:	4835      	ldr	r0, [pc, #212]	; (22934 <buttons_scan_fn+0x110>)
   22860:	f003 f834 	bl	258cc <z_impl_k_mutex_lock>
	return list->head;
   22864:	4b34      	ldr	r3, [pc, #208]	; (22938 <buttons_scan_fn+0x114>)
   22866:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   22868:	b135      	cbz	r5, 22878 <buttons_scan_fn+0x54>
   2286a:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   2286c:	682b      	ldr	r3, [r5, #0]
   2286e:	4631      	mov	r1, r6
   22870:	4620      	mov	r0, r4
   22872:	4798      	blx	r3
	return node->next;
   22874:	686d      	ldr	r5, [r5, #4]
   22876:	e7f7      	b.n	22868 <buttons_scan_fn+0x44>
	return z_impl_k_mutex_unlock(mutex);
   22878:	482e      	ldr	r0, [pc, #184]	; (22934 <buttons_scan_fn+0x110>)
   2287a:	f003 f8dd 	bl	25a38 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2287e:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   22880:	b15c      	cbz	r4, 2289a <buttons_scan_fn+0x76>
		k_work_reschedule(&buttons_scan,
   22882:	f44f 72a4 	mov.w	r2, #328	; 0x148
   22886:	2300      	movs	r3, #0
   22888:	482c      	ldr	r0, [pc, #176]	; (2293c <buttons_scan_fn+0x118>)
}
   2288a:	b007      	add	sp, #28
   2288c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
   22890:	f003 bef2 	b.w	26678 <k_work_reschedule>
		initial_run = false;
   22894:	2200      	movs	r2, #0
   22896:	701a      	strb	r2, [r3, #0]
   22898:	e7f1      	b.n	2287e <buttons_scan_fn+0x5a>
	__asm__ volatile(
   2289a:	f04f 0320 	mov.w	r3, #32
   2289e:	f3ef 8511 	mrs	r5, BASEPRI
   228a2:	f383 8812 	msr	BASEPRI_MAX, r3
   228a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228aa:	4825      	ldr	r0, [pc, #148]	; (22940 <buttons_scan_fn+0x11c>)
   228ac:	f002 ffbc 	bl	25828 <z_spin_lock_valid>
   228b0:	b940      	cbnz	r0, 228c4 <buttons_scan_fn+0xa0>
   228b2:	4924      	ldr	r1, [pc, #144]	; (22944 <buttons_scan_fn+0x120>)
   228b4:	2294      	movs	r2, #148	; 0x94
   228b6:	4824      	ldr	r0, [pc, #144]	; (22948 <buttons_scan_fn+0x124>)
   228b8:	f006 f984 	bl	28bc4 <assert_print>
   228bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228be:	4821      	ldr	r0, [pc, #132]	; (22944 <buttons_scan_fn+0x120>)
   228c0:	f006 f979 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   228c4:	481e      	ldr	r0, [pc, #120]	; (22940 <buttons_scan_fn+0x11c>)
   228c6:	f002 ffcb 	bl	25860 <z_spin_lock_set_owner>
		switch (state) {
   228ca:	4b20      	ldr	r3, [pc, #128]	; (2294c <buttons_scan_fn+0x128>)
   228cc:	7818      	ldrb	r0, [r3, #0]
   228ce:	2801      	cmp	r0, #1
   228d0:	d11f      	bne.n	22912 <buttons_scan_fn+0xee>
			state = STATE_WAITING;
   228d2:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   228d4:	f7ff fefe 	bl	226d4 <callback_ctrl>
   228d8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228da:	4819      	ldr	r0, [pc, #100]	; (22940 <buttons_scan_fn+0x11c>)
   228dc:	f002 ffb2 	bl	25844 <z_spin_unlock_valid>
   228e0:	b930      	cbnz	r0, 228f0 <buttons_scan_fn+0xcc>
   228e2:	4918      	ldr	r1, [pc, #96]	; (22944 <buttons_scan_fn+0x120>)
   228e4:	22c2      	movs	r2, #194	; 0xc2
   228e6:	4818      	ldr	r0, [pc, #96]	; (22948 <buttons_scan_fn+0x124>)
   228e8:	f006 f96c 	bl	28bc4 <assert_print>
   228ec:	21c2      	movs	r1, #194	; 0xc2
   228ee:	e7e6      	b.n	228be <buttons_scan_fn+0x9a>
	__asm__ volatile(
   228f0:	f385 8811 	msr	BASEPRI, r5
   228f4:	f3bf 8f6f 	isb	sy
		if (err) {
   228f8:	b14c      	cbz	r4, 2290e <buttons_scan_fn+0xea>
			LOG_ERR("Cannot enable callbacks");
   228fa:	4b15      	ldr	r3, [pc, #84]	; (22950 <buttons_scan_fn+0x12c>)
   228fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22900:	9305      	str	r3, [sp, #20]
   22902:	2302      	movs	r3, #2
   22904:	4813      	ldr	r0, [pc, #76]	; (22954 <buttons_scan_fn+0x130>)
   22906:	aa04      	add	r2, sp, #16
   22908:	9304      	str	r3, [sp, #16]
   2290a:	f00b fdfd 	bl	2e508 <z_log_msg_static_create.constprop.0>
}
   2290e:	b007      	add	sp, #28
   22910:	bdf0      	pop	{r4, r5, r6, r7, pc}
			__ASSERT_NO_MSG(false);
   22912:	4911      	ldr	r1, [pc, #68]	; (22958 <buttons_scan_fn+0x134>)
   22914:	480c      	ldr	r0, [pc, #48]	; (22948 <buttons_scan_fn+0x124>)
   22916:	228a      	movs	r2, #138	; 0x8a
   22918:	f006 f954 	bl	28bc4 <assert_print>
   2291c:	218a      	movs	r1, #138	; 0x8a
   2291e:	480e      	ldr	r0, [pc, #56]	; (22958 <buttons_scan_fn+0x134>)
   22920:	e7ce      	b.n	228c0 <buttons_scan_fn+0x9c>
   22922:	bf00      	nop
   22924:	2000b038 	.word	0x2000b038
   22928:	20008ccc 	.word	0x20008ccc
   2292c:	2000b008 	.word	0x2000b008
   22930:	2000b03c 	.word	0x2000b03c
   22934:	2000b00c 	.word	0x2000b00c
   22938:	2000b020 	.word	0x2000b020
   2293c:	2000a398 	.word	0x2000a398
   22940:	2000b028 	.word	0x2000b028
   22944:	00030eb4 	.word	0x00030eb4
   22948:	00030da5 	.word	0x00030da5
   2294c:	2000b338 	.word	0x2000b338
   22950:	00034e33 	.word	0x00034e33
   22954:	0002fd5c 	.word	0x0002fd5c
   22958:	00034ddf 	.word	0x00034ddf

0002295c <dk_leds_init>:
{
   2295c:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2295e:	2600      	movs	r6, #0
   22960:	4c11      	ldr	r4, [pc, #68]	; (229a8 <dk_leds_init+0x4c>)
{
   22962:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   22964:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   22966:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   22968:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   2296a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2296e:	f7ff fd6d 	bl	2244c <z_impl_gpio_pin_configure>
		if (err) {
   22972:	4605      	mov	r5, r0
   22974:	b950      	cbnz	r0, 2298c <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   22976:	3601      	adds	r6, #1
   22978:	2e04      	cmp	r6, #4
   2297a:	f104 0408 	add.w	r4, r4, #8
   2297e:	d1f1      	bne.n	22964 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   22980:	210f      	movs	r1, #15
}
   22982:	b006      	add	sp, #24
   22984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22988:	f7ff bf18 	b.w	227bc <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   2298c:	4b07      	ldr	r3, [pc, #28]	; (229ac <dk_leds_init+0x50>)
   2298e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22992:	9305      	str	r3, [sp, #20]
   22994:	2302      	movs	r3, #2
   22996:	4806      	ldr	r0, [pc, #24]	; (229b0 <dk_leds_init+0x54>)
   22998:	aa04      	add	r2, sp, #16
   2299a:	9304      	str	r3, [sp, #16]
   2299c:	f00b fdb4 	bl	2e508 <z_log_msg_static_create.constprop.0>
}
   229a0:	4628      	mov	r0, r5
   229a2:	b006      	add	sp, #24
   229a4:	bd70      	pop	{r4, r5, r6, pc}
   229a6:	bf00      	nop
   229a8:	00030bb4 	.word	0x00030bb4
   229ac:	00034e4b 	.word	0x00034e4b
   229b0:	0002fd5c 	.word	0x0002fd5c

000229b4 <dk_button_handler_add>:
{
   229b4:	b510      	push	{r4, lr}
   229b6:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   229b8:	f04f 32ff 	mov.w	r2, #4294967295
   229bc:	f04f 33ff 	mov.w	r3, #4294967295
   229c0:	4809      	ldr	r0, [pc, #36]	; (229e8 <dk_button_handler_add+0x34>)
   229c2:	f002 ff83 	bl	258cc <z_impl_k_mutex_lock>
	parent->next = child;
   229c6:	2300      	movs	r3, #0
   229c8:	6063      	str	r3, [r4, #4]
	return list->tail;
   229ca:	4b08      	ldr	r3, [pc, #32]	; (229ec <dk_button_handler_add+0x38>)
	sys_slist_append(&button_handlers, &handler->node);
   229cc:	1d22      	adds	r2, r4, #4
   229ce:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   229d0:	b931      	cbnz	r1, 229e0 <dk_button_handler_add+0x2c>
	list->head = node;
   229d2:	e9c3 2200 	strd	r2, r2, [r3]
}
   229d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   229da:	4803      	ldr	r0, [pc, #12]	; (229e8 <dk_button_handler_add+0x34>)
   229dc:	f003 b82c 	b.w	25a38 <z_impl_k_mutex_unlock>
	parent->next = child;
   229e0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   229e2:	605a      	str	r2, [r3, #4]
}
   229e4:	e7f7      	b.n	229d6 <dk_button_handler_add+0x22>
   229e6:	bf00      	nop
   229e8:	2000b00c 	.word	0x2000b00c
   229ec:	2000b020 	.word	0x2000b020

000229f0 <dk_button_handler_remove>:
{
   229f0:	b538      	push	{r3, r4, r5, lr}
   229f2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   229f4:	f04f 32ff 	mov.w	r2, #4294967295
   229f8:	f04f 33ff 	mov.w	r3, #4294967295
   229fc:	4813      	ldr	r0, [pc, #76]	; (22a4c <dk_button_handler_remove+0x5c>)
   229fe:	f002 ff65 	bl	258cc <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a02:	2100      	movs	r1, #0
	return list->head;
   22a04:	4b12      	ldr	r3, [pc, #72]	; (22a50 <dk_button_handler_remove+0x60>)
	found = sys_slist_find_and_remove(&button_handlers, &handler->node);
   22a06:	1d28      	adds	r0, r5, #4
   22a08:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a0a:	b92a      	cbnz	r2, 22a18 <dk_button_handler_remove+0x28>
	return z_impl_k_mutex_unlock(mutex);
   22a0c:	480f      	ldr	r0, [pc, #60]	; (22a4c <dk_button_handler_remove+0x5c>)
   22a0e:	f003 f813 	bl	25a38 <z_impl_k_mutex_unlock>
	return found ? 0 : -ENOENT;
   22a12:	f06f 0001 	mvn.w	r0, #1
   22a16:	e00e      	b.n	22a36 <dk_button_handler_remove+0x46>
   22a18:	4290      	cmp	r0, r2
   22a1a:	d113      	bne.n	22a44 <dk_button_handler_remove+0x54>
	return node->next;
   22a1c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   22a1e:	b959      	cbnz	r1, 22a38 <dk_button_handler_remove+0x48>
   22a20:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   22a22:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22a24:	4288      	cmp	r0, r1
   22a26:	d100      	bne.n	22a2a <dk_button_handler_remove+0x3a>
	list->tail = node;
   22a28:	605a      	str	r2, [r3, #4]
	parent->next = child;
   22a2a:	2400      	movs	r4, #0
   22a2c:	606c      	str	r4, [r5, #4]
   22a2e:	4807      	ldr	r0, [pc, #28]	; (22a4c <dk_button_handler_remove+0x5c>)
   22a30:	f003 f802 	bl	25a38 <z_impl_k_mutex_unlock>
   22a34:	4620      	mov	r0, r4
}
   22a36:	bd38      	pop	{r3, r4, r5, pc}
   22a38:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22a3a:	685a      	ldr	r2, [r3, #4]
   22a3c:	4290      	cmp	r0, r2
	list->tail = node;
   22a3e:	bf08      	it	eq
   22a40:	6059      	streq	r1, [r3, #4]
}
   22a42:	e7f2      	b.n	22a2a <dk_button_handler_remove+0x3a>
	return node->next;
   22a44:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a46:	6812      	ldr	r2, [r2, #0]
   22a48:	e7df      	b.n	22a0a <dk_button_handler_remove+0x1a>
   22a4a:	bf00      	nop
   22a4c:	2000b00c 	.word	0x2000b00c
   22a50:	2000b020 	.word	0x2000b020

00022a54 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22a54:	4b05      	ldr	r3, [pc, #20]	; (22a6c <dk_read_buttons+0x18>)
   22a56:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   22a5a:	b100      	cbz	r0, 22a5e <dk_read_buttons+0xa>
		*button_state = current_state;
   22a5c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   22a5e:	4804      	ldr	r0, [pc, #16]	; (22a70 <dk_read_buttons+0x1c>)
   22a60:	b111      	cbz	r1, 22a68 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   22a62:	6802      	ldr	r2, [r0, #0]
   22a64:	405a      	eors	r2, r3
   22a66:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   22a68:	6003      	str	r3, [r0, #0]
}
   22a6a:	4770      	bx	lr
   22a6c:	2000b038 	.word	0x2000b038
   22a70:	2000b004 	.word	0x2000b004

00022a74 <dk_buttons_init>:
{
   22a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   22a78:	4b3b      	ldr	r3, [pc, #236]	; (22b68 <dk_buttons_init+0xf4>)
{
   22a7a:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   22a7c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   22a7e:	4d3b      	ldr	r5, [pc, #236]	; (22b6c <dk_buttons_init+0xf8>)
   22a80:	483b      	ldr	r0, [pc, #236]	; (22b70 <dk_buttons_init+0xfc>)
   22a82:	f00c fc92 	bl	2f3aa <z_impl_k_mutex_init>
   22a86:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22a88:	f04f 0800 	mov.w	r8, #0
   22a8c:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   22a8e:	88f2      	ldrh	r2, [r6, #6]
   22a90:	6830      	ldr	r0, [r6, #0]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   22a92:	f012 0f01 	tst.w	r2, #1
   22a96:	bf14      	ite	ne
   22a98:	2310      	movne	r3, #16
   22a9a:	2320      	moveq	r3, #32
				  spec->pin,
   22a9c:	7931      	ldrb	r1, [r6, #4]
	return gpio_pin_configure(spec->port,
   22a9e:	431a      	orrs	r2, r3
   22aa0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   22aa4:	f7ff fcd2 	bl	2244c <z_impl_gpio_pin_configure>
		if (err) {
   22aa8:	4604      	mov	r4, r0
   22aaa:	b168      	cbz	r0, 22ac8 <dk_buttons_init+0x54>
			LOG_ERR("Cannot configure button gpio");
   22aac:	4b31      	ldr	r3, [pc, #196]	; (22b74 <dk_buttons_init+0x100>)
			LOG_ERR("Cannot disable callbacks()");
   22aae:	9305      	str	r3, [sp, #20]
   22ab0:	2302      	movs	r3, #2
   22ab2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22ab6:	4830      	ldr	r0, [pc, #192]	; (22b78 <dk_buttons_init+0x104>)
   22ab8:	aa04      	add	r2, sp, #16
   22aba:	9304      	str	r3, [sp, #16]
   22abc:	f00b fd24 	bl	2e508 <z_log_msg_static_create.constprop.0>
}
   22ac0:	4620      	mov	r0, r4
   22ac2:	b007      	add	sp, #28
   22ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22ac8:	f108 0801 	add.w	r8, r8, #1
   22acc:	f1b8 0f04 	cmp.w	r8, #4
   22ad0:	f106 0608 	add.w	r6, r6, #8
   22ad4:	d1db      	bne.n	22a8e <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22ad6:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   22ad8:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   22ada:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   22ade:	6828      	ldr	r0, [r5, #0]
   22ae0:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   22ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22ae6:	f7ff fd2b 	bl	22540 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   22aea:	4604      	mov	r4, r0
   22aec:	b108      	cbz	r0, 22af2 <dk_buttons_init+0x7e>
			LOG_ERR("Cannot disable callbacks()");
   22aee:	4b23      	ldr	r3, [pc, #140]	; (22b7c <dk_buttons_init+0x108>)
   22af0:	e7dd      	b.n	22aae <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   22af2:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22af4:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   22af6:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22afa:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   22afc:	ea48 0803 	orr.w	r8, r8, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22b00:	f105 0508 	add.w	r5, r5, #8
   22b04:	d1eb      	bne.n	22ade <dk_buttons_init+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22b06:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   22b08:	4e1d      	ldr	r6, [pc, #116]	; (22b80 <dk_buttons_init+0x10c>)
   22b0a:	4b1e      	ldr	r3, [pc, #120]	; (22b84 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   22b0c:	e9c6 3801 	strd	r3, r8, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   22b10:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   22b14:	6883      	ldr	r3, [r0, #8]
   22b16:	69db      	ldr	r3, [r3, #28]
   22b18:	b133      	cbz	r3, 22b28 <dk_buttons_init+0xb4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   22b1a:	2201      	movs	r2, #1
   22b1c:	4631      	mov	r1, r6
   22b1e:	4798      	blx	r3
		if (err) {
   22b20:	4604      	mov	r4, r0
   22b22:	b120      	cbz	r0, 22b2e <dk_buttons_init+0xba>
			LOG_ERR("Cannot add callback");
   22b24:	4b18      	ldr	r3, [pc, #96]	; (22b88 <dk_buttons_init+0x114>)
   22b26:	e7c2      	b.n	22aae <dk_buttons_init+0x3a>
		return -ENOTSUP;
   22b28:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22b2c:	e7fa      	b.n	22b24 <dk_buttons_init+0xb0>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22b2e:	3501      	adds	r5, #1
   22b30:	2d04      	cmp	r5, #4
   22b32:	d1ed      	bne.n	22b10 <dk_buttons_init+0x9c>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   22b34:	4915      	ldr	r1, [pc, #84]	; (22b8c <dk_buttons_init+0x118>)
   22b36:	4816      	ldr	r0, [pc, #88]	; (22b90 <dk_buttons_init+0x11c>)
   22b38:	f003 fcb4 	bl	264a4 <k_work_init_delayable>
	state = STATE_SCANNING;
   22b3c:	2201      	movs	r2, #1
   22b3e:	4b15      	ldr	r3, [pc, #84]	; (22b94 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   22b40:	4813      	ldr	r0, [pc, #76]	; (22b90 <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   22b42:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   22b44:	2300      	movs	r3, #0
   22b46:	2200      	movs	r2, #0
   22b48:	f003 fd32 	bl	265b0 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   22b4c:	4621      	mov	r1, r4
   22b4e:	4620      	mov	r0, r4
   22b50:	f7ff ff80 	bl	22a54 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   22b54:	f7ff fd7c 	bl	22650 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22b58:	4b0f      	ldr	r3, [pc, #60]	; (22b98 <dk_buttons_init+0x124>)
   22b5a:	e8d3 2fef 	ldaex	r2, [r3]
   22b5e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   22b62:	2900      	cmp	r1, #0
   22b64:	d0ac      	beq.n	22ac0 <dk_buttons_init+0x4c>
   22b66:	e7f8      	b.n	22b5a <dk_buttons_init+0xe6>
   22b68:	2000b03c 	.word	0x2000b03c
   22b6c:	00030bd4 	.word	0x00030bd4
   22b70:	2000b00c 	.word	0x2000b00c
   22b74:	00034e65 	.word	0x00034e65
   22b78:	0002fd5c 	.word	0x0002fd5c
   22b7c:	00034e82 	.word	0x00034e82
   22b80:	2000b02c 	.word	0x2000b02c
   22b84:	00022705 	.word	0x00022705
   22b88:	00034e9d 	.word	0x00034e9d
   22b8c:	00022825 	.word	0x00022825
   22b90:	2000a398 	.word	0x2000a398
   22b94:	2000b338 	.word	0x2000b338
   22b98:	2000b038 	.word	0x2000b038

00022b9c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   22b9c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   22b9e:	2803      	cmp	r0, #3
{
   22ba0:	460a      	mov	r2, r1
   22ba2:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   22ba4:	d90e      	bls.n	22bc4 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   22ba6:	4b12      	ldr	r3, [pc, #72]	; (22bf0 <dk_set_led+0x54>)
		return -EINVAL;
   22ba8:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   22bac:	9305      	str	r3, [sp, #20]
   22bae:	2302      	movs	r3, #2
   22bb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22bb4:	480f      	ldr	r0, [pc, #60]	; (22bf4 <dk_set_led+0x58>)
   22bb6:	aa04      	add	r2, sp, #16
   22bb8:	9304      	str	r3, [sp, #16]
   22bba:	f00b fca5 	bl	2e508 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   22bbe:	4620      	mov	r0, r4
   22bc0:	b006      	add	sp, #24
   22bc2:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   22bc4:	4b0c      	ldr	r3, [pc, #48]	; (22bf8 <dk_set_led+0x5c>)
   22bc6:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   22bca:	7909      	ldrb	r1, [r1, #4]
   22bcc:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   22bd0:	f7ff fd04 	bl	225dc <gpio_pin_set>
	if (err) {
   22bd4:	4604      	mov	r4, r0
   22bd6:	2800      	cmp	r0, #0
   22bd8:	d0f1      	beq.n	22bbe <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   22bda:	4b08      	ldr	r3, [pc, #32]	; (22bfc <dk_set_led+0x60>)
   22bdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22be0:	9305      	str	r3, [sp, #20]
   22be2:	2302      	movs	r3, #2
   22be4:	4803      	ldr	r0, [pc, #12]	; (22bf4 <dk_set_led+0x58>)
   22be6:	aa04      	add	r2, sp, #16
   22be8:	9304      	str	r3, [sp, #16]
   22bea:	f00b fc8d 	bl	2e508 <z_log_msg_static_create.constprop.0>
   22bee:	e7e6      	b.n	22bbe <dk_set_led+0x22>
   22bf0:	00034eb1 	.word	0x00034eb1
   22bf4:	0002fd5c 	.word	0x0002fd5c
   22bf8:	00030bb4 	.word	0x00030bb4
   22bfc:	00034e1d 	.word	0x00034e1d

00022c00 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   22c02:	f7e7 fe6d 	bl	a8e0 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22c06:	4b07      	ldr	r3, [pc, #28]	; (22c24 <k_sys_fatal_error_handler+0x24>)
   22c08:	9305      	str	r3, [sp, #20]
   22c0a:	2302      	movs	r3, #2
   22c0c:	9304      	str	r3, [sp, #16]
   22c0e:	4806      	ldr	r0, [pc, #24]	; (22c28 <k_sys_fatal_error_handler+0x28>)
   22c10:	2300      	movs	r3, #0
   22c12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22c16:	aa04      	add	r2, sp, #16
   22c18:	f7e7 ffa0 	bl	ab5c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   22c1c:	2000      	movs	r0, #0
   22c1e:	f7ea fcad 	bl	d57c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22c22:	bf00      	nop
   22c24:	00034ee0 	.word	0x00034ee0
   22c28:	0002fd64 	.word	0x0002fd64

00022c2c <model_transition_decode>:
	60 * 10 * MSEC_PER_SEC,
};

int32_t model_transition_decode(uint8_t encoded_transition)
{
	uint8_t steps = (encoded_transition & 0x3f);
   22c2c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	uint8_t res = (encoded_transition >> 6);

	return (steps == TRANSITION_TIME_UNKNOWN) ?
		       SYS_FOREVER_MS :
   22c30:	2b3f      	cmp	r3, #63	; 0x3f
		       (model_transition_res[res] * steps);
   22c32:	bf18      	it	ne
   22c34:	4a04      	ldrne	r2, [pc, #16]	; (22c48 <model_transition_decode+0x1c>)
	uint8_t res = (encoded_transition >> 6);
   22c36:	ea4f 1090 	mov.w	r0, r0, lsr #6
		       (model_transition_res[res] * steps);
   22c3a:	bf1a      	itte	ne
   22c3c:	f852 0020 	ldrne.w	r0, [r2, r0, lsl #2]
   22c40:	4358      	mulne	r0, r3
		       SYS_FOREVER_MS :
   22c42:	f04f 30ff 	moveq.w	r0, #4294967295
}
   22c46:	4770      	bx	lr
   22c48:	00030bf4 	.word	0x00030bf4

00022c4c <model_transition_encode>:

uint8_t model_transition_encode(int32_t transition_time)
{
   22c4c:	b530      	push	{r4, r5, lr}
	if (transition_time == 0) {
   22c4e:	4604      	mov	r4, r0
{
   22c50:	b085      	sub	sp, #20
	if (transition_time == 0) {
   22c52:	b110      	cbz	r0, 22c5a <model_transition_encode+0xe>
		return 0;
	}
	if (transition_time == SYS_FOREVER_MS) {
   22c54:	1c43      	adds	r3, r0, #1
   22c56:	d102      	bne.n	22c5e <model_transition_encode+0x12>
		return TRANSITION_TIME_UNKNOWN;
   22c58:	203f      	movs	r0, #63	; 0x3f
		steps = MIN(0x3e, steps);
		return (i << 6) | steps;
	}

	return TRANSITION_TIME_UNKNOWN;
}
   22c5a:	b005      	add	sp, #20
   22c5c:	bd30      	pop	{r4, r5, pc}
	const int32_t limits[] = {
   22c5e:	466d      	mov	r5, sp
   22c60:	4b0f      	ldr	r3, [pc, #60]	; (22ca0 <model_transition_encode+0x54>)
   22c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   22c64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   22c68:	2300      	movs	r3, #0
		if (transition_time > limits[i]) {
   22c6a:	f855 2b04 	ldr.w	r2, [r5], #4
   22c6e:	42a2      	cmp	r2, r4
   22c70:	da03      	bge.n	22c7a <model_transition_encode+0x2e>
	for (uint8_t i = 0; i < ARRAY_SIZE(model_transition_res); ++i) {
   22c72:	3301      	adds	r3, #1
   22c74:	2b04      	cmp	r3, #4
   22c76:	d1f8      	bne.n	22c6a <model_transition_encode+0x1e>
   22c78:	e7ee      	b.n	22c58 <model_transition_encode+0xc>
		uint8_t steps = ((transition_time + model_transition_res[i] / 2) /
   22c7a:	4a0a      	ldr	r2, [pc, #40]	; (22ca4 <model_transition_encode+0x58>)
   22c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   22c80:	eb04 0052 	add.w	r0, r4, r2, lsr #1
   22c84:	fbb0 f0f2 	udiv	r0, r0, r2
   22c88:	b2c0      	uxtb	r0, r0
   22c8a:	2801      	cmp	r0, #1
   22c8c:	bf38      	it	cc
   22c8e:	2001      	movcc	r0, #1
		steps = MIN(0x3e, steps);
   22c90:	283e      	cmp	r0, #62	; 0x3e
   22c92:	bf28      	it	cs
   22c94:	203e      	movcs	r0, #62	; 0x3e
		return (i << 6) | steps;
   22c96:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   22c9a:	b2c0      	uxtb	r0, r0
   22c9c:	e7dd      	b.n	22c5a <model_transition_encode+0xe>
   22c9e:	bf00      	nop
   22ca0:	0002ffb4 	.word	0x0002ffb4
   22ca4:	00030bf4 	.word	0x00030bf4

00022ca8 <bt_mesh_onoff_srv_init>:

	return 0;
}

static int bt_mesh_onoff_srv_init(struct bt_mesh_model *model)
{
   22ca8:	b508      	push	{r3, lr}
	struct bt_mesh_onoff_srv *srv = model->user_data;
   22caa:	6a41      	ldr	r1, [r0, #36]	; 0x24

	srv->model = model;
	srv->pub.msg = &srv->pub_buf;
	srv->pub.update = update_handler;
   22cac:	4b05      	ldr	r3, [pc, #20]	; (22cc4 <bt_mesh_onoff_srv_init+0x1c>)
	srv->model = model;
   22cae:	61c8      	str	r0, [r1, #28]
	srv->pub.msg = &srv->pub_buf;
   22cb0:	f101 0068 	add.w	r0, r1, #104	; 0x68
   22cb4:	6308      	str	r0, [r1, #48]	; 0x30
	srv->pub.update = update_handler;
   22cb6:	634b      	str	r3, [r1, #52]	; 0x34
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   22cb8:	2209      	movs	r2, #9
   22cba:	3174      	adds	r1, #116	; 0x74
   22cbc:	f00b f8b6 	bl	2de2c <net_buf_simple_init_with_data>
				      sizeof(srv->pub_data));

	return 0;
}
   22cc0:	2000      	movs	r0, #0
   22cc2:	bd08      	pop	{r3, pc}
   22cc4:	0002e62f 	.word	0x0002e62f

00022cc8 <oob_stop>:

static void oob_stop(void)
{
	if (IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_BUTTON) ||
	    IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_BLINK)) {
		oob_state = OOB_IDLE;
   22cc8:	2200      	movs	r2, #0
{
   22cca:	b508      	push	{r3, lr}
		oob_state = OOB_IDLE;
   22ccc:	4b04      	ldr	r3, [pc, #16]	; (22ce0 <oob_stop+0x18>)
		k_work_cancel_delayable(&oob_work);
   22cce:	4805      	ldr	r0, [pc, #20]	; (22ce4 <oob_stop+0x1c>)
		oob_state = OOB_IDLE;
   22cd0:	701a      	strb	r2, [r3, #0]
		k_work_cancel_delayable(&oob_work);
   22cd2:	f003 fcd7 	bl	26684 <k_work_cancel_delayable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_BUTTON)) {
		dk_button_handler_remove(&button_handler);
	}
}
   22cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		dk_button_handler_remove(&button_handler);
   22cda:	4803      	ldr	r0, [pc, #12]	; (22ce8 <oob_stop+0x20>)
   22cdc:	f7ff be88 	b.w	229f0 <dk_button_handler_remove>
   22ce0:	2000b349 	.word	0x2000b349
   22ce4:	2000a3c8 	.word	0x2000a3c8
   22ce8:	2000b040 	.word	0x2000b040

00022cec <input>:
{
   22cec:	b508      	push	{r3, lr}
	button_handler.cb = oob_button_handler;
   22cee:	4806      	ldr	r0, [pc, #24]	; (22d08 <input+0x1c>)
   22cf0:	4b06      	ldr	r3, [pc, #24]	; (22d0c <input+0x20>)
   22cf2:	6003      	str	r3, [r0, #0]
	dk_button_handler_add(&button_handler);
   22cf4:	f7ff fe5e 	bl	229b4 <dk_button_handler_add>
	button_press_count = 0;
   22cf8:	2000      	movs	r0, #0
	oob_state = OOB_BUTTON;
   22cfa:	2202      	movs	r2, #2
	button_press_count = 0;
   22cfc:	4b04      	ldr	r3, [pc, #16]	; (22d10 <input+0x24>)
   22cfe:	6018      	str	r0, [r3, #0]
	oob_state = OOB_BUTTON;
   22d00:	4b04      	ldr	r3, [pc, #16]	; (22d14 <input+0x28>)
   22d02:	701a      	strb	r2, [r3, #0]
}
   22d04:	bd08      	pop	{r3, pc}
   22d06:	bf00      	nop
   22d08:	2000b040 	.word	0x2000b040
   22d0c:	00022d79 	.word	0x00022d79
   22d10:	2000b048 	.word	0x2000b048
   22d14:	2000b349 	.word	0x2000b349

00022d18 <output_string>:
{
   22d18:	b508      	push	{r3, lr}
   22d1a:	4601      	mov	r1, r0
	printk("OOB String: %s\n", string);
   22d1c:	4802      	ldr	r0, [pc, #8]	; (22d28 <output_string+0x10>)
   22d1e:	f005 fd49 	bl	287b4 <printk>
}
   22d22:	2000      	movs	r0, #0
   22d24:	bd08      	pop	{r3, pc}
   22d26:	bf00      	nop
   22d28:	00034f09 	.word	0x00034f09

00022d2c <output_number>:
	if (IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_LOG) &&
   22d2c:	2808      	cmp	r0, #8
{
   22d2e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_LOG) &&
   22d30:	d104      	bne.n	22d3c <output_number+0x10>
		printk("OOB Number: %u\n", number);
   22d32:	480c      	ldr	r0, [pc, #48]	; (22d64 <output_number+0x38>)
   22d34:	f005 fd3e 	bl	287b4 <printk>
		return 0;
   22d38:	2000      	movs	r0, #0
}
   22d3a:	bd08      	pop	{r3, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_DK_PROV_OOB_BLINK) &&
   22d3c:	2801      	cmp	r0, #1
   22d3e:	d10d      	bne.n	22d5c <output_number+0x30>
		oob_toggles = number * 2;
   22d40:	4a09      	ldr	r2, [pc, #36]	; (22d68 <output_number+0x3c>)
   22d42:	004b      	lsls	r3, r1, #1
   22d44:	6013      	str	r3, [r2, #0]
		oob_toggle_count = 0;
   22d46:	2200      	movs	r2, #0
   22d48:	4b08      	ldr	r3, [pc, #32]	; (22d6c <output_number+0x40>)
   22d4a:	601a      	str	r2, [r3, #0]
		oob_state = OOB_BLINK;
   22d4c:	4b08      	ldr	r3, [pc, #32]	; (22d70 <output_number+0x44>)
		k_work_reschedule(&oob_work, K_NO_WAIT);
   22d4e:	2200      	movs	r2, #0
		oob_state = OOB_BLINK;
   22d50:	7018      	strb	r0, [r3, #0]
		k_work_reschedule(&oob_work, K_NO_WAIT);
   22d52:	2300      	movs	r3, #0
   22d54:	4807      	ldr	r0, [pc, #28]	; (22d74 <output_number+0x48>)
   22d56:	f003 fc8f 	bl	26678 <k_work_reschedule>
		return 0;
   22d5a:	e7ed      	b.n	22d38 <output_number+0xc>
	return -ENOTSUP;
   22d5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22d60:	e7eb      	b.n	22d3a <output_number+0xe>
   22d62:	bf00      	nop
   22d64:	00034f19 	.word	0x00034f19
   22d68:	2000b050 	.word	0x2000b050
   22d6c:	2000b04c 	.word	0x2000b04c
   22d70:	2000b349 	.word	0x2000b349
   22d74:	2000a3c8 	.word	0x2000a3c8

00022d78 <oob_button_handler>:
	if (!(button_state & has_changed)) {
   22d78:	4208      	tst	r0, r1
{
   22d7a:	b510      	push	{r4, lr}
	if (!(button_state & has_changed)) {
   22d7c:	d017      	beq.n	22dae <oob_button_handler+0x36>
	uint32_t led = button_press_count++ & BIT_MASK(3);
   22d7e:	4b0c      	ldr	r3, [pc, #48]	; (22db0 <oob_button_handler+0x38>)
   22d80:	6818      	ldr	r0, [r3, #0]
   22d82:	1c42      	adds	r2, r0, #1
   22d84:	601a      	str	r2, [r3, #0]
			  BIT(led - 4) & DK_ALL_LEDS_MSK);
   22d86:	2301      	movs	r3, #1
	uint32_t led = button_press_count++ & BIT_MASK(3);
   22d88:	f000 0007 	and.w	r0, r0, #7
			  BIT(led - 4) & DK_ALL_LEDS_MSK);
   22d8c:	1f01      	subs	r1, r0, #4
	dk_set_leds_state(BIT(led) & DK_ALL_LEDS_MSK,
   22d8e:	fa03 f000 	lsl.w	r0, r3, r0
   22d92:	fa03 f101 	lsl.w	r1, r3, r1
   22d96:	f000 000f 	and.w	r0, r0, #15
   22d9a:	f00b fbb8 	bl	2e50e <dk_set_leds_state>
}
   22d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&oob_work, K_SECONDS(3));
   22da2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   22da6:	2300      	movs	r3, #0
   22da8:	4802      	ldr	r0, [pc, #8]	; (22db4 <oob_button_handler+0x3c>)
   22daa:	f003 bc65 	b.w	26678 <k_work_reschedule>
}
   22dae:	bd10      	pop	{r4, pc}
   22db0:	2000b048 	.word	0x2000b048
   22db4:	2000a3c8 	.word	0x2000a3c8

00022db8 <oob_timer_handler>:
{
   22db8:	b510      	push	{r4, lr}
	switch (oob_state) {
   22dba:	4c1b      	ldr	r4, [pc, #108]	; (22e28 <oob_timer_handler+0x70>)
   22dbc:	7820      	ldrb	r0, [r4, #0]
   22dbe:	2801      	cmp	r0, #1
   22dc0:	d006      	beq.n	22dd0 <oob_timer_handler+0x18>
   22dc2:	2802      	cmp	r0, #2
   22dc4:	d022      	beq.n	22e0c <oob_timer_handler+0x54>
   22dc6:	bb68      	cbnz	r0, 22e24 <oob_timer_handler+0x6c>
}
   22dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dk_set_leds(DK_NO_LEDS_MSK);
   22dcc:	f00b bba8 	b.w	2e520 <dk_set_leds>
	dk_set_leds(((oob_toggle_count++) & 0x01) ? DK_NO_LEDS_MSK :
   22dd0:	4c16      	ldr	r4, [pc, #88]	; (22e2c <oob_timer_handler+0x74>)
   22dd2:	6823      	ldr	r3, [r4, #0]
   22dd4:	f013 0f01 	tst.w	r3, #1
   22dd8:	f103 0201 	add.w	r2, r3, #1
   22ddc:	bf0c      	ite	eq
   22dde:	200f      	moveq	r0, #15
   22de0:	2000      	movne	r0, #0
   22de2:	6022      	str	r2, [r4, #0]
   22de4:	f00b fb9c 	bl	2e520 <dk_set_leds>
	if (oob_toggle_count == oob_toggles) {
   22de8:	4b11      	ldr	r3, [pc, #68]	; (22e30 <oob_timer_handler+0x78>)
   22dea:	6822      	ldr	r2, [r4, #0]
   22dec:	681b      	ldr	r3, [r3, #0]
		k_work_reschedule(&oob_work, K_MSEC(250));
   22dee:	4811      	ldr	r0, [pc, #68]	; (22e34 <oob_timer_handler+0x7c>)
	if (oob_toggle_count == oob_toggles) {
   22df0:	429a      	cmp	r2, r3
		oob_toggle_count = 0;
   22df2:	bf02      	ittt	eq
   22df4:	2300      	moveq	r3, #0
   22df6:	6023      	streq	r3, [r4, #0]
		k_work_reschedule(&oob_work, K_SECONDS(3));
   22df8:	f44f 32c0 	moveq.w	r2, #98304	; 0x18000
}
   22dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&oob_work, K_MSEC(250));
   22e00:	bf18      	it	ne
   22e02:	f44f 5200 	movne.w	r2, #8192	; 0x2000
   22e06:	2300      	movs	r3, #0
   22e08:	f003 bc36 	b.w	26678 <k_work_reschedule>
	dk_button_handler_remove(&button_handler);
   22e0c:	480a      	ldr	r0, [pc, #40]	; (22e38 <oob_timer_handler+0x80>)
   22e0e:	f7ff fdef 	bl	229f0 <dk_button_handler_remove>
	dk_set_leds(DK_NO_LEDS_MSK);
   22e12:	2000      	movs	r0, #0
   22e14:	f00b fb84 	bl	2e520 <dk_set_leds>
	bt_mesh_input_number(button_press_count);
   22e18:	4b08      	ldr	r3, [pc, #32]	; (22e3c <oob_timer_handler+0x84>)
   22e1a:	6818      	ldr	r0, [r3, #0]
   22e1c:	f7fa fcb2 	bl	1d784 <bt_mesh_input_number>
	oob_state = OOB_IDLE;
   22e20:	2300      	movs	r3, #0
   22e22:	7023      	strb	r3, [r4, #0]
}
   22e24:	bd10      	pop	{r4, pc}
   22e26:	bf00      	nop
   22e28:	2000b349 	.word	0x2000b349
   22e2c:	2000b04c 	.word	0x2000b04c
   22e30:	2000b050 	.word	0x2000b050
   22e34:	2000a3c8 	.word	0x2000a3c8
   22e38:	2000b040 	.word	0x2000b040
   22e3c:	2000b048 	.word	0x2000b048

00022e40 <bt_mesh_dk_prov_init>:
	.input_complete = oob_stop,
	.reset = prov_reset,
};

const struct bt_mesh_prov *bt_mesh_dk_prov_init(void)
{
   22e40:	b508      	push	{r3, lr}
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   22e42:	2110      	movs	r1, #16
   22e44:	4810      	ldr	r0, [pc, #64]	; (22e88 <bt_mesh_dk_prov_init+0x48>)
   22e46:	f7fd fea3 	bl	20b90 <z_impl_hwinfo_get_device_id>

	if (!IS_ENABLED(CONFIG_BT_MESH_DK_LEGACY_UUID_GEN)) {
		/* If device ID is shorter than UUID size, fill rest of buffer with
		 * inverted device ID.
		 */
		for (size_t i = id_len; i < sizeof(dev_uuid); i++) {
   22e4a:	4602      	mov	r2, r0
   22e4c:	4b0e      	ldr	r3, [pc, #56]	; (22e88 <bt_mesh_dk_prov_init+0x48>)
   22e4e:	2a0f      	cmp	r2, #15
   22e50:	d911      	bls.n	22e76 <bt_mesh_dk_prov_init+0x36>
			dev_uuid[i] = dev_uuid[i % id_len] ^ 0xff;
		}
	}

	dev_uuid[6] = (dev_uuid[6] & BIT_MASK(4)) | BIT(6);
   22e52:	799a      	ldrb	r2, [r3, #6]
	dev_uuid[8] = (dev_uuid[8] & BIT_MASK(6)) | BIT(7);

	k_work_init_delayable(&oob_work, oob_timer_handler);
   22e54:	490d      	ldr	r1, [pc, #52]	; (22e8c <bt_mesh_dk_prov_init+0x4c>)
	dev_uuid[6] = (dev_uuid[6] & BIT_MASK(4)) | BIT(6);
   22e56:	f002 020f 	and.w	r2, r2, #15
   22e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22e5e:	719a      	strb	r2, [r3, #6]
	dev_uuid[8] = (dev_uuid[8] & BIT_MASK(6)) | BIT(7);
   22e60:	7a1a      	ldrb	r2, [r3, #8]
	k_work_init_delayable(&oob_work, oob_timer_handler);
   22e62:	480b      	ldr	r0, [pc, #44]	; (22e90 <bt_mesh_dk_prov_init+0x50>)
	dev_uuid[8] = (dev_uuid[8] & BIT_MASK(6)) | BIT(7);
   22e64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22e6c:	721a      	strb	r2, [r3, #8]
	k_work_init_delayable(&oob_work, oob_timer_handler);
   22e6e:	f003 fb19 	bl	264a4 <k_work_init_delayable>

	return &prov;
}
   22e72:	4808      	ldr	r0, [pc, #32]	; (22e94 <bt_mesh_dk_prov_init+0x54>)
   22e74:	bd08      	pop	{r3, pc}
			dev_uuid[i] = dev_uuid[i % id_len] ^ 0xff;
   22e76:	fbb2 f1f0 	udiv	r1, r2, r0
   22e7a:	fb00 2111 	mls	r1, r0, r1, r2
   22e7e:	5c59      	ldrb	r1, [r3, r1]
   22e80:	43c9      	mvns	r1, r1
   22e82:	5499      	strb	r1, [r3, r2]
		for (size_t i = id_len; i < sizeof(dev_uuid); i++) {
   22e84:	3201      	adds	r2, #1
   22e86:	e7e2      	b.n	22e4e <bt_mesh_dk_prov_init+0xe>
   22e88:	2000b339 	.word	0x2000b339
   22e8c:	00022db9 	.word	0x00022db9
   22e90:	2000a3c8 	.word	0x2000a3c8
   22e94:	00030c44 	.word	0x00030c44

00022e98 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   22e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e9c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   22e9e:	4b15      	ldr	r3, [pc, #84]	; (22ef4 <tfm_ns_interface_dispatch+0x5c>)
   22ea0:	4604      	mov	r4, r0
   22ea2:	f893 8000 	ldrb.w	r8, [r3]
   22ea6:	460d      	mov	r5, r1
   22ea8:	4616      	mov	r6, r2
   22eaa:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   22eac:	f1b8 0f00 	cmp.w	r8, #0
   22eb0:	d115      	bne.n	22ede <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   22eb2:	4668      	mov	r0, sp
   22eb4:	f007 f9a6 	bl	2a204 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   22eb8:	463a      	mov	r2, r7
   22eba:	4631      	mov	r1, r6
   22ebc:	4628      	mov	r0, r5
   22ebe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   22ec0:	47a0      	blx	r4
   22ec2:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   22ec4:	4668      	mov	r0, sp
   22ec6:	f007 f99e 	bl	2a206 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   22eca:	f1b8 0f00 	cmp.w	r8, #0
   22ece:	d002      	beq.n	22ed6 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   22ed0:	4809      	ldr	r0, [pc, #36]	; (22ef8 <tfm_ns_interface_dispatch+0x60>)
   22ed2:	f002 fdb1 	bl	25a38 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   22ed6:	4620      	mov	r0, r4
   22ed8:	b022      	add	sp, #136	; 0x88
   22eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   22ede:	f04f 32ff 	mov.w	r2, #4294967295
   22ee2:	f04f 33ff 	mov.w	r3, #4294967295
   22ee6:	4804      	ldr	r0, [pc, #16]	; (22ef8 <tfm_ns_interface_dispatch+0x60>)
   22ee8:	f002 fcf0 	bl	258cc <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   22eec:	2800      	cmp	r0, #0
   22eee:	d0e0      	beq.n	22eb2 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   22ef0:	241f      	movs	r4, #31
   22ef2:	e7f0      	b.n	22ed6 <tfm_ns_interface_dispatch+0x3e>
   22ef4:	2000b34a 	.word	0x2000b34a
   22ef8:	20008e58 	.word	0x20008e58

00022efc <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   22efc:	b530      	push	{r4, r5, lr}
   22efe:	b095      	sub	sp, #84	; 0x54
   22f00:	4605      	mov	r5, r0
   22f02:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   22f04:	2230      	movs	r2, #48	; 0x30
   22f06:	2100      	movs	r1, #0
   22f08:	a808      	add	r0, sp, #32
   22f0a:	f007 fb11 	bl	2a530 <memset>
   22f0e:	233f      	movs	r3, #63	; 0x3f
   22f10:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   22f12:	ab07      	add	r3, sp, #28
   22f14:	9303      	str	r3, [sp, #12]
   22f16:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   22f18:	9406      	str	r4, [sp, #24]
   22f1a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   22f1e:	b154      	cbz	r4, 22f36 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   22f20:	2301      	movs	r3, #1
   22f22:	aa05      	add	r2, sp, #20
   22f24:	9200      	str	r2, [sp, #0]
   22f26:	2100      	movs	r1, #0
   22f28:	4804      	ldr	r0, [pc, #16]	; (22f3c <psa_generate_random+0x40>)
   22f2a:	9301      	str	r3, [sp, #4]
   22f2c:	aa03      	add	r2, sp, #12
   22f2e:	f000 f807 	bl	22f40 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   22f32:	b015      	add	sp, #84	; 0x54
   22f34:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   22f36:	4620      	mov	r0, r4
   22f38:	e7fb      	b.n	22f32 <psa_generate_random+0x36>
   22f3a:	bf00      	nop
   22f3c:	40000100 	.word	0x40000100

00022f40 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   22f40:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   22f42:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   22f46:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   22f4a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   22f4c:	d20d      	bcs.n	22f6a <psa_call+0x2a>
        (type < INT16_MIN) ||
   22f4e:	ea43 0504 	orr.w	r5, r3, r4
   22f52:	2dff      	cmp	r5, #255	; 0xff
   22f54:	d809      	bhi.n	22f6a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   22f56:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   22f5a:	4613      	mov	r3, r2
   22f5c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   22f60:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   22f62:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   22f64:	4803      	ldr	r0, [pc, #12]	; (22f74 <psa_call+0x34>)
   22f66:	f7ff bf97 	b.w	22e98 <tfm_ns_interface_dispatch>
}
   22f6a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   22f6e:	bc30      	pop	{r4, r5}
   22f70:	4770      	bx	lr
   22f72:	bf00      	nop
   22f74:	00007c21 	.word	0x00007c21

00022f78 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   22f78:	2300      	movs	r3, #0
{
   22f7a:	b507      	push	{r0, r1, r2, lr}
   22f7c:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   22f7e:	9300      	str	r3, [sp, #0]
   22f80:	4601      	mov	r1, r0
   22f82:	4803      	ldr	r0, [pc, #12]	; (22f90 <psa_connect+0x18>)
   22f84:	f7ff ff88 	bl	22e98 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   22f88:	b003      	add	sp, #12
   22f8a:	f85d fb04 	ldr.w	pc, [sp], #4
   22f8e:	bf00      	nop
   22f90:	00007c19 	.word	0x00007c19

00022f94 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   22f94:	2300      	movs	r3, #0
{
   22f96:	b507      	push	{r0, r1, r2, lr}
   22f98:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   22f9a:	461a      	mov	r2, r3
   22f9c:	9300      	str	r3, [sp, #0]
   22f9e:	4803      	ldr	r0, [pc, #12]	; (22fac <psa_close+0x18>)
   22fa0:	f7ff ff7a 	bl	22e98 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   22fa4:	b003      	add	sp, #12
   22fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   22faa:	bf00      	nop
   22fac:	00007c11 	.word	0x00007c11

00022fb0 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   22fb0:	4b04      	ldr	r3, [pc, #16]	; (22fc4 <SystemCoreClockUpdate+0x14>)
   22fb2:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   22fb6:	4b04      	ldr	r3, [pc, #16]	; (22fc8 <SystemCoreClockUpdate+0x18>)
   22fb8:	f002 0203 	and.w	r2, r2, #3
   22fbc:	40d3      	lsrs	r3, r2
   22fbe:	4a03      	ldr	r2, [pc, #12]	; (22fcc <SystemCoreClockUpdate+0x1c>)
   22fc0:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   22fc2:	4770      	bx	lr
   22fc4:	40005000 	.word	0x40005000
   22fc8:	07a12000 	.word	0x07a12000
   22fcc:	20008b00 	.word	0x20008b00

00022fd0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   22fd0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   22fd2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   22fd4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   22fd6:	fab2 f382 	clz	r3, r2
   22fda:	f1c3 031f 	rsb	r3, r3, #31
   22fde:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   22fe0:	fa05 f403 	lsl.w	r4, r5, r3
   22fe4:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22fe8:	e8d0 6fef 	ldaex	r6, [r0]
   22fec:	4296      	cmp	r6, r2
   22fee:	d104      	bne.n	22ffa <nrfx_flag32_alloc+0x2a>
   22ff0:	e8c0 4fec 	stlex	ip, r4, [r0]
   22ff4:	f1bc 0f00 	cmp.w	ip, #0
   22ff8:	d1f6      	bne.n	22fe8 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22ffa:	d1eb      	bne.n	22fd4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   22ffc:	4801      	ldr	r0, [pc, #4]	; (23004 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   22ffe:	700b      	strb	r3, [r1, #0]
}
   23000:	bd70      	pop	{r4, r5, r6, pc}
   23002:	bf00      	nop
   23004:	0bad0000 	.word	0x0bad0000

00023008 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   23008:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2300a:	6803      	ldr	r3, [r0, #0]
   2300c:	40cb      	lsrs	r3, r1
   2300e:	07db      	lsls	r3, r3, #31
   23010:	d410      	bmi.n	23034 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   23012:	2301      	movs	r3, #1
   23014:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   23016:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   23018:	ea43 0102 	orr.w	r1, r3, r2
   2301c:	e8d0 4fef 	ldaex	r4, [r0]
   23020:	4294      	cmp	r4, r2
   23022:	d104      	bne.n	2302e <nrfx_flag32_free+0x26>
   23024:	e8c0 1fec 	stlex	ip, r1, [r0]
   23028:	f1bc 0f00 	cmp.w	ip, #0
   2302c:	d1f6      	bne.n	2301c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2302e:	d1f2      	bne.n	23016 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   23030:	4801      	ldr	r0, [pc, #4]	; (23038 <nrfx_flag32_free+0x30>)
}
   23032:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23034:	4801      	ldr	r0, [pc, #4]	; (2303c <nrfx_flag32_free+0x34>)
   23036:	e7fc      	b.n	23032 <nrfx_flag32_free+0x2a>
   23038:	0bad0000 	.word	0x0bad0000
   2303c:	0bad0004 	.word	0x0bad0004

00023040 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   23040:	2200      	movs	r2, #0
{
   23042:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23044:	4b61      	ldr	r3, [pc, #388]	; (231cc <clock_stop+0x18c>)
    switch (domain)
   23046:	2803      	cmp	r0, #3
   23048:	d838      	bhi.n	230bc <clock_stop+0x7c>
   2304a:	e8df f000 	tbb	[pc, r0]
   2304e:	0d02      	.short	0x0d02
   23050:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   23052:	2102      	movs	r1, #2
   23054:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23058:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2305c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23060:	2201      	movs	r2, #1
   23062:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   23064:	2400      	movs	r4, #0
   23066:	e009      	b.n	2307c <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   23068:	2101      	movs	r1, #1
   2306a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2306e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23072:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   23076:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2307a:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2307c:	2301      	movs	r3, #1
   2307e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   23082:	2803      	cmp	r0, #3
   23084:	f200 8092 	bhi.w	231ac <clock_stop+0x16c>
   23088:	e8df f000 	tbb	[pc, r0]
   2308c:	82624221 	.word	0x82624221
    p_reg->INTENCLR = mask;
   23090:	f44f 7100 	mov.w	r1, #512	; 0x200
   23094:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23098:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2309c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   230a0:	2201      	movs	r2, #1
   230a2:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   230a4:	e7de      	b.n	23064 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   230a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   230aa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   230ae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   230b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   230b6:	2201      	movs	r2, #1
   230b8:	61da      	str	r2, [r3, #28]
   230ba:	e7d3      	b.n	23064 <clock_stop+0x24>
            NRFX_ASSERT(0);
   230bc:	4944      	ldr	r1, [pc, #272]	; (231d0 <clock_stop+0x190>)
   230be:	4845      	ldr	r0, [pc, #276]	; (231d4 <clock_stop+0x194>)
   230c0:	22d8      	movs	r2, #216	; 0xd8
   230c2:	f005 fd7f 	bl	28bc4 <assert_print>
   230c6:	21d8      	movs	r1, #216	; 0xd8
   230c8:	4841      	ldr	r0, [pc, #260]	; (231d0 <clock_stop+0x190>)
            NRFX_ASSERT(0);
   230ca:	f005 fd74 	bl	28bb6 <assert_post_action>
    switch (domain)
   230ce:	f242 7510 	movw	r5, #10000	; 0x2710
   230d2:	4e3e      	ldr	r6, [pc, #248]	; (231cc <clock_stop+0x18c>)
            if (p_clk_src != NULL)
   230d4:	b194      	cbz	r4, 230fc <clock_stop+0xbc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   230d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   230da:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   230de:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   230e0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   230e4:	03d9      	lsls	r1, r3, #15
   230e6:	d507      	bpl.n	230f8 <clock_stop+0xb8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   230e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   230ec:	2801      	cmp	r0, #1
   230ee:	d103      	bne.n	230f8 <clock_stop+0xb8>
   230f0:	f00b fbad 	bl	2e84e <nrfx_busy_wait>
   230f4:	3d01      	subs	r5, #1
   230f6:	d1ed      	bne.n	230d4 <clock_stop+0x94>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   230f8:	b002      	add	sp, #8
   230fa:	bd70      	pop	{r4, r5, r6, pc}
   230fc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23100:	03da      	lsls	r2, r3, #15
   23102:	d5f9      	bpl.n	230f8 <clock_stop+0xb8>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23104:	2001      	movs	r0, #1
   23106:	f00b fba2 	bl	2e84e <nrfx_busy_wait>
   2310a:	3d01      	subs	r5, #1
   2310c:	d1f6      	bne.n	230fc <clock_stop+0xbc>
   2310e:	e7f3      	b.n	230f8 <clock_stop+0xb8>
    switch (domain)
   23110:	f242 7510 	movw	r5, #10000	; 0x2710
   23114:	4e2d      	ldr	r6, [pc, #180]	; (231cc <clock_stop+0x18c>)
            if (p_clk_src != NULL)
   23116:	b18c      	cbz	r4, 2313c <clock_stop+0xfc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   23118:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2311c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   23120:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23122:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   23126:	03db      	lsls	r3, r3, #15
   23128:	d5e6      	bpl.n	230f8 <clock_stop+0xb8>
   2312a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2312e:	2801      	cmp	r0, #1
   23130:	d1e2      	bne.n	230f8 <clock_stop+0xb8>
   23132:	f00b fb8c 	bl	2e84e <nrfx_busy_wait>
   23136:	3d01      	subs	r5, #1
   23138:	d1ed      	bne.n	23116 <clock_stop+0xd6>
   2313a:	e7dd      	b.n	230f8 <clock_stop+0xb8>
   2313c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   23140:	03d8      	lsls	r0, r3, #15
   23142:	d5d9      	bpl.n	230f8 <clock_stop+0xb8>
   23144:	2001      	movs	r0, #1
   23146:	f00b fb82 	bl	2e84e <nrfx_busy_wait>
   2314a:	3d01      	subs	r5, #1
   2314c:	d1f6      	bne.n	2313c <clock_stop+0xfc>
   2314e:	e7d3      	b.n	230f8 <clock_stop+0xb8>
    switch (domain)
   23150:	f242 7510 	movw	r5, #10000	; 0x2710
   23154:	4e1d      	ldr	r6, [pc, #116]	; (231cc <clock_stop+0x18c>)
            if (p_clk_src != NULL)
   23156:	b18c      	cbz	r4, 2317c <clock_stop+0x13c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   23158:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   2315c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   23160:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   23162:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23166:	03d9      	lsls	r1, r3, #15
   23168:	d5c6      	bpl.n	230f8 <clock_stop+0xb8>
   2316a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2316e:	2801      	cmp	r0, #1
   23170:	d1c2      	bne.n	230f8 <clock_stop+0xb8>
   23172:	f00b fb6c 	bl	2e84e <nrfx_busy_wait>
   23176:	3d01      	subs	r5, #1
   23178:	d1ed      	bne.n	23156 <clock_stop+0x116>
   2317a:	e7bd      	b.n	230f8 <clock_stop+0xb8>
   2317c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23180:	03da      	lsls	r2, r3, #15
   23182:	d5b9      	bpl.n	230f8 <clock_stop+0xb8>
   23184:	2001      	movs	r0, #1
   23186:	f00b fb62 	bl	2e84e <nrfx_busy_wait>
   2318a:	3d01      	subs	r5, #1
   2318c:	d1f6      	bne.n	2317c <clock_stop+0x13c>
   2318e:	e7b3      	b.n	230f8 <clock_stop+0xb8>
    switch (domain)
   23190:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   23194:	4e0d      	ldr	r6, [pc, #52]	; (231cc <clock_stop+0x18c>)
   23196:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   2319a:	03db      	lsls	r3, r3, #15
   2319c:	d5ac      	bpl.n	230f8 <clock_stop+0xb8>
   2319e:	b97c      	cbnz	r4, 231c0 <clock_stop+0x180>
   231a0:	2001      	movs	r0, #1
   231a2:	f00b fb54 	bl	2e84e <nrfx_busy_wait>
   231a6:	3d01      	subs	r5, #1
   231a8:	d1f5      	bne.n	23196 <clock_stop+0x156>
   231aa:	e7a5      	b.n	230f8 <clock_stop+0xb8>
            NRFX_ASSERT(0);
   231ac:	490a      	ldr	r1, [pc, #40]	; (231d8 <clock_stop+0x198>)
   231ae:	4809      	ldr	r0, [pc, #36]	; (231d4 <clock_stop+0x194>)
   231b0:	f240 3247 	movw	r2, #839	; 0x347
   231b4:	f005 fd06 	bl	28bc4 <assert_print>
   231b8:	f240 3147 	movw	r1, #839	; 0x347
   231bc:	4806      	ldr	r0, [pc, #24]	; (231d8 <clock_stop+0x198>)
   231be:	e784      	b.n	230ca <clock_stop+0x8a>
   231c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   231c4:	2801      	cmp	r0, #1
   231c6:	d0ec      	beq.n	231a2 <clock_stop+0x162>
   231c8:	e796      	b.n	230f8 <clock_stop+0xb8>
   231ca:	bf00      	nop
   231cc:	40005000 	.word	0x40005000
   231d0:	00034f39 	.word	0x00034f39
   231d4:	00030da5 	.word	0x00030da5
   231d8:	00034f76 	.word	0x00034f76

000231dc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   231dc:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   231de:	b950      	cbnz	r0, 231f6 <nrfx_clock_init+0x1a>
   231e0:	490a      	ldr	r1, [pc, #40]	; (2320c <nrfx_clock_init+0x30>)
   231e2:	480b      	ldr	r0, [pc, #44]	; (23210 <nrfx_clock_init+0x34>)
   231e4:	f240 1215 	movw	r2, #277	; 0x115
   231e8:	f005 fcec 	bl	28bc4 <assert_print>
   231ec:	f240 1115 	movw	r1, #277	; 0x115
   231f0:	4806      	ldr	r0, [pc, #24]	; (2320c <nrfx_clock_init+0x30>)
   231f2:	f005 fce0 	bl	28bb6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   231f6:	4b07      	ldr	r3, [pc, #28]	; (23214 <nrfx_clock_init+0x38>)
   231f8:	791a      	ldrb	r2, [r3, #4]
   231fa:	b922      	cbnz	r2, 23206 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   231fc:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   231fe:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23200:	4805      	ldr	r0, [pc, #20]	; (23218 <nrfx_clock_init+0x3c>)
        m_clock_cb.module_initialized = true;
   23202:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   23204:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   23206:	4805      	ldr	r0, [pc, #20]	; (2321c <nrfx_clock_init+0x40>)
    return err_code;
   23208:	e7fc      	b.n	23204 <nrfx_clock_init+0x28>
   2320a:	bf00      	nop
   2320c:	00034f39 	.word	0x00034f39
   23210:	00030da5 	.word	0x00030da5
   23214:	2000b054 	.word	0x2000b054
   23218:	0bad0000 	.word	0x0bad0000
   2321c:	0bad000c 	.word	0x0bad000c

00023220 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   23220:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23222:	4b0f      	ldr	r3, [pc, #60]	; (23260 <nrfx_clock_enable+0x40>)
   23224:	791b      	ldrb	r3, [r3, #4]
   23226:	b953      	cbnz	r3, 2323e <nrfx_clock_enable+0x1e>
   23228:	490e      	ldr	r1, [pc, #56]	; (23264 <nrfx_clock_enable+0x44>)
   2322a:	480f      	ldr	r0, [pc, #60]	; (23268 <nrfx_clock_enable+0x48>)
   2322c:	f44f 7297 	mov.w	r2, #302	; 0x12e
   23230:	f005 fcc8 	bl	28bc4 <assert_print>
   23234:	f44f 7197 	mov.w	r1, #302	; 0x12e
   23238:	480a      	ldr	r0, [pc, #40]	; (23264 <nrfx_clock_enable+0x44>)
   2323a:	f005 fcbc 	bl	28bb6 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2323e:	2005      	movs	r0, #5
   23240:	f7e9 fd30 	bl	cca4 <arch_irq_is_enabled>
   23244:	b910      	cbnz	r0, 2324c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23246:	2005      	movs	r0, #5
   23248:	f7e9 fd0a 	bl	cc60 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2324c:	2201      	movs	r2, #1
   2324e:	4b07      	ldr	r3, [pc, #28]	; (2326c <nrfx_clock_enable+0x4c>)
   23250:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   23254:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   23258:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2325c:	bd08      	pop	{r3, pc}
   2325e:	bf00      	nop
   23260:	2000b054 	.word	0x2000b054
   23264:	00034f39 	.word	0x00034f39
   23268:	00030da5 	.word	0x00030da5
   2326c:	40005000 	.word	0x40005000

00023270 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   23270:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23272:	4b37      	ldr	r3, [pc, #220]	; (23350 <nrfx_clock_start+0xe0>)
   23274:	791b      	ldrb	r3, [r3, #4]
   23276:	b953      	cbnz	r3, 2328e <nrfx_clock_start+0x1e>
   23278:	4936      	ldr	r1, [pc, #216]	; (23354 <nrfx_clock_start+0xe4>)
   2327a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   2327e:	4836      	ldr	r0, [pc, #216]	; (23358 <nrfx_clock_start+0xe8>)
   23280:	f005 fca0 	bl	28bc4 <assert_print>
   23284:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   23288:	4832      	ldr	r0, [pc, #200]	; (23354 <nrfx_clock_start+0xe4>)
   2328a:	f005 fc94 	bl	28bb6 <assert_post_action>
    switch (domain)
   2328e:	4b33      	ldr	r3, [pc, #204]	; (2335c <nrfx_clock_start+0xec>)
   23290:	2803      	cmp	r0, #3
   23292:	d853      	bhi.n	2333c <nrfx_clock_start+0xcc>
   23294:	e8df f000 	tbb	[pc, r0]
   23298:	463a3002 	.word	0x463a3002
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2329c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   232a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   232a4:	03c9      	lsls	r1, r1, #15
   232a6:	d511      	bpl.n	232cc <nrfx_clock_start+0x5c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   232a8:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   232ac:	2b02      	cmp	r3, #2
   232ae:	d11c      	bne.n	232ea <nrfx_clock_start+0x7a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   232b0:	4a2a      	ldr	r2, [pc, #168]	; (2335c <nrfx_clock_start+0xec>)
   232b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   232b6:	2300      	movs	r3, #0
   232b8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   232bc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   232c0:	2302      	movs	r3, #2
   232c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   232c6:	2301      	movs	r3, #1
   232c8:	6093      	str	r3, [r2, #8]
}
   232ca:	e00d      	b.n	232e8 <nrfx_clock_start+0x78>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   232cc:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   232d0:	07d2      	lsls	r2, r2, #31
   232d2:	d50f      	bpl.n	232f4 <nrfx_clock_start+0x84>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   232d4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   232d8:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   232dc:	3a01      	subs	r2, #1
   232de:	2a01      	cmp	r2, #1
   232e0:	d805      	bhi.n	232ee <nrfx_clock_start+0x7e>
    p_reg->INTENSET = mask;
   232e2:	2202      	movs	r2, #2
   232e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   232e8:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   232ea:	2b01      	cmp	r3, #1
   232ec:	d002      	beq.n	232f4 <nrfx_clock_start+0x84>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   232ee:	2000      	movs	r0, #0
   232f0:	f7ff fea6 	bl	23040 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   232f4:	2301      	movs	r3, #1
   232f6:	e7db      	b.n	232b0 <nrfx_clock_start+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   232f8:	2200      	movs	r2, #0
   232fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   232fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   23302:	2201      	movs	r2, #1
   23304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23308:	601a      	str	r2, [r3, #0]
}
   2330a:	e7ed      	b.n	232e8 <nrfx_clock_start+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2330c:	2200      	movs	r2, #0
   2330e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23312:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   23316:	f44f 7200 	mov.w	r2, #512	; 0x200
   2331a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2331e:	2201      	movs	r2, #1
   23320:	621a      	str	r2, [r3, #32]
}
   23322:	e7e1      	b.n	232e8 <nrfx_clock_start+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23324:	2200      	movs	r2, #0
   23326:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2332a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   2332e:	f44f 7280 	mov.w	r2, #256	; 0x100
   23332:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23336:	2201      	movs	r2, #1
   23338:	619a      	str	r2, [r3, #24]
}
   2333a:	e7d5      	b.n	232e8 <nrfx_clock_start+0x78>
            NRFX_ASSERT(0);
   2333c:	4905      	ldr	r1, [pc, #20]	; (23354 <nrfx_clock_start+0xe4>)
   2333e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   23342:	4805      	ldr	r0, [pc, #20]	; (23358 <nrfx_clock_start+0xe8>)
   23344:	f005 fc3e 	bl	28bc4 <assert_print>
   23348:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   2334c:	e79c      	b.n	23288 <nrfx_clock_start+0x18>
   2334e:	bf00      	nop
   23350:	2000b054 	.word	0x2000b054
   23354:	00034f39 	.word	0x00034f39
   23358:	00030da5 	.word	0x00030da5
   2335c:	40005000 	.word	0x40005000

00023360 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   23360:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   23362:	4b09      	ldr	r3, [pc, #36]	; (23388 <nrfx_clock_stop+0x28>)
   23364:	791b      	ldrb	r3, [r3, #4]
   23366:	b953      	cbnz	r3, 2337e <nrfx_clock_stop+0x1e>
   23368:	4908      	ldr	r1, [pc, #32]	; (2338c <nrfx_clock_stop+0x2c>)
   2336a:	4809      	ldr	r0, [pc, #36]	; (23390 <nrfx_clock_stop+0x30>)
   2336c:	f240 12ad 	movw	r2, #429	; 0x1ad
   23370:	f005 fc28 	bl	28bc4 <assert_print>
   23374:	f240 11ad 	movw	r1, #429	; 0x1ad
   23378:	4804      	ldr	r0, [pc, #16]	; (2338c <nrfx_clock_stop+0x2c>)
   2337a:	f005 fc1c 	bl	28bb6 <assert_post_action>
    clock_stop(domain);
}
   2337e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   23382:	f7ff be5d 	b.w	23040 <clock_stop>
   23386:	bf00      	nop
   23388:	2000b054 	.word	0x2000b054
   2338c:	00034f39 	.word	0x00034f39
   23390:	00030da5 	.word	0x00030da5

00023394 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   23394:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23396:	4b28      	ldr	r3, [pc, #160]	; (23438 <nrfx_power_clock_irq_handler+0xa4>)
   23398:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2339c:	b152      	cbz	r2, 233b4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2339e:	2000      	movs	r0, #0
   233a0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   233a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   233a8:	2201      	movs	r2, #1
   233aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   233ae:	4b23      	ldr	r3, [pc, #140]	; (2343c <nrfx_power_clock_irq_handler+0xa8>)
   233b0:	681b      	ldr	r3, [r3, #0]
   233b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   233b4:	4b20      	ldr	r3, [pc, #128]	; (23438 <nrfx_power_clock_irq_handler+0xa4>)
   233b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   233ba:	b18a      	cbz	r2, 233e0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233bc:	2200      	movs	r2, #0
   233be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   233c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   233c6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   233ca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   233ce:	f002 0203 	and.w	r2, r2, #3
   233d2:	2a01      	cmp	r2, #1
   233d4:	f04f 0102 	mov.w	r1, #2
   233d8:	d126      	bne.n	23428 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   233da:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233de:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   233e0:	4b15      	ldr	r3, [pc, #84]	; (23438 <nrfx_power_clock_irq_handler+0xa4>)
   233e2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   233e6:	b162      	cbz	r2, 23402 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233e8:	2200      	movs	r2, #0
   233ea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   233ee:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   233f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   233f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   233fa:	4b10      	ldr	r3, [pc, #64]	; (2343c <nrfx_power_clock_irq_handler+0xa8>)
   233fc:	2004      	movs	r0, #4
   233fe:	681b      	ldr	r3, [r3, #0]
   23400:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23402:	4b0d      	ldr	r3, [pc, #52]	; (23438 <nrfx_power_clock_irq_handler+0xa4>)
   23404:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   23408:	b1aa      	cbz	r2, 23436 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2340a:	2200      	movs	r2, #0
   2340c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23410:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   23414:	f44f 7200 	mov.w	r2, #512	; 0x200
   23418:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   2341c:	4b07      	ldr	r3, [pc, #28]	; (2343c <nrfx_power_clock_irq_handler+0xa8>)
   2341e:	2005      	movs	r0, #5
    }
#endif
}
   23420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   23424:	681b      	ldr	r3, [r3, #0]
   23426:	4718      	bx	r3
   23428:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2342c:	4b03      	ldr	r3, [pc, #12]	; (2343c <nrfx_power_clock_irq_handler+0xa8>)
   2342e:	2001      	movs	r0, #1
   23430:	681b      	ldr	r3, [r3, #0]
   23432:	4798      	blx	r3
   23434:	e7d4      	b.n	233e0 <nrfx_power_clock_irq_handler+0x4c>
}
   23436:	bd10      	pop	{r4, pc}
   23438:	40005000 	.word	0x40005000
   2343c:	2000b054 	.word	0x2000b054

00023440 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23440:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   23442:	4801      	ldr	r0, [pc, #4]	; (23448 <nrfx_dppi_channel_alloc+0x8>)
   23444:	f7ff bdc4 	b.w	22fd0 <nrfx_flag32_alloc>
   23448:	20008b04 	.word	0x20008b04

0002344c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   2344c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   2344e:	4a04      	ldr	r2, [pc, #16]	; (23460 <nrfx_dppi_channel_free+0x14>)
   23450:	4083      	lsls	r3, r0
{
   23452:	4601      	mov	r1, r0
   23454:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   23458:	4802      	ldr	r0, [pc, #8]	; (23464 <nrfx_dppi_channel_free+0x18>)
   2345a:	f7ff bdd5 	b.w	23008 <nrfx_flag32_free>
   2345e:	bf00      	nop
   23460:	40017000 	.word	0x40017000
   23464:	20008b04 	.word	0x20008b04

00023468 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23468:	4b03      	ldr	r3, [pc, #12]	; (23478 <pin_in_use_by_te+0x10>)
   2346a:	3008      	adds	r0, #8
   2346c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23470:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23474:	4770      	bx	lr
   23476:	bf00      	nop
   23478:	20008b08 	.word	0x20008b08

0002347c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2347c:	4b04      	ldr	r3, [pc, #16]	; (23490 <pin_has_trigger+0x14>)
   2347e:	3008      	adds	r0, #8
   23480:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23484:	f010 001c 	ands.w	r0, r0, #28
   23488:	bf18      	it	ne
   2348a:	2001      	movne	r0, #1
   2348c:	4770      	bx	lr
   2348e:	bf00      	nop
   23490:	20008b08 	.word	0x20008b08

00023494 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23494:	4b03      	ldr	r3, [pc, #12]	; (234a4 <pin_is_output+0x10>)
   23496:	3008      	adds	r0, #8
   23498:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2349c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   234a0:	4770      	bx	lr
   234a2:	bf00      	nop
   234a4:	20008b08 	.word	0x20008b08

000234a8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   234a8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234aa:	4c0d      	ldr	r4, [pc, #52]	; (234e0 <call_handler+0x38>)
   234ac:	f100 0308 	add.w	r3, r0, #8
   234b0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   234b4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234b6:	05da      	lsls	r2, r3, #23
{
   234b8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234ba:	d507      	bpl.n	234cc <call_handler+0x24>
   234bc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   234c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   234c4:	6852      	ldr	r2, [r2, #4]
   234c6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   234ca:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   234cc:	68a3      	ldr	r3, [r4, #8]
   234ce:	b12b      	cbz	r3, 234dc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   234d0:	4631      	mov	r1, r6
   234d2:	4628      	mov	r0, r5
   234d4:	68e2      	ldr	r2, [r4, #12]
    }
}
   234d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   234da:	4718      	bx	r3
}
   234dc:	bd70      	pop	{r4, r5, r6, pc}
   234de:	bf00      	nop
   234e0:	20008b08 	.word	0x20008b08

000234e4 <release_handler>:
{
   234e4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   234e6:	4a18      	ldr	r2, [pc, #96]	; (23548 <release_handler+0x64>)
   234e8:	3008      	adds	r0, #8
   234ea:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   234ee:	05d9      	lsls	r1, r3, #23
   234f0:	d51d      	bpl.n	2352e <release_handler+0x4a>
   234f2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   234f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   234fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   234fe:	2000      	movs	r0, #0
   23500:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23504:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   23508:	f413 7f80 	tst.w	r3, #256	; 0x100
   2350c:	d003      	beq.n	23516 <release_handler+0x32>
   2350e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   23512:	4299      	cmp	r1, r3
   23514:	d00b      	beq.n	2352e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23516:	3001      	adds	r0, #1
   23518:	2830      	cmp	r0, #48	; 0x30
   2351a:	d1f3      	bne.n	23504 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2351c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2351e:	480b      	ldr	r0, [pc, #44]	; (2354c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   23520:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23524:	f7ff fd70 	bl	23008 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23528:	4b09      	ldr	r3, [pc, #36]	; (23550 <release_handler+0x6c>)
   2352a:	4298      	cmp	r0, r3
   2352c:	d100      	bne.n	23530 <release_handler+0x4c>
}
   2352e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23530:	4908      	ldr	r1, [pc, #32]	; (23554 <release_handler+0x70>)
   23532:	4809      	ldr	r0, [pc, #36]	; (23558 <release_handler+0x74>)
   23534:	f44f 7299 	mov.w	r2, #306	; 0x132
   23538:	f005 fb44 	bl	28bc4 <assert_print>
   2353c:	f44f 7199 	mov.w	r1, #306	; 0x132
   23540:	4804      	ldr	r0, [pc, #16]	; (23554 <release_handler+0x70>)
   23542:	f005 fb38 	bl	28bb6 <assert_post_action>
   23546:	bf00      	nop
   23548:	20008b08 	.word	0x20008b08
   2354c:	20008b7c 	.word	0x20008b7c
   23550:	0bad0000 	.word	0x0bad0000
   23554:	00034fbf 	.word	0x00034fbf
   23558:	00030da5 	.word	0x00030da5

0002355c <pin_handler_trigger_uninit>:
{
   2355c:	b538      	push	{r3, r4, r5, lr}
   2355e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23560:	f7ff ff82 	bl	23468 <pin_in_use_by_te>
   23564:	4c0b      	ldr	r4, [pc, #44]	; (23594 <pin_handler_trigger_uninit+0x38>)
   23566:	f102 0508 	add.w	r5, r2, #8
   2356a:	b160      	cbz	r0, 23586 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2356c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2356e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23572:	0b5b      	lsrs	r3, r3, #13
   23574:	009b      	lsls	r3, r3, #2
   23576:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2357a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   2357e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   23582:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   23586:	4610      	mov	r0, r2
   23588:	f7ff ffac 	bl	234e4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2358c:	2300      	movs	r3, #0
   2358e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23592:	bd38      	pop	{r3, r4, r5, pc}
   23594:	20008b08 	.word	0x20008b08

00023598 <nrf_gpio_pin_port_decode>:
{
   23598:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2359a:	6802      	ldr	r2, [r0, #0]
{
   2359c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2359e:	4610      	mov	r0, r2
   235a0:	f00b f957 	bl	2e852 <nrf_gpio_pin_present_check>
   235a4:	b950      	cbnz	r0, 235bc <nrf_gpio_pin_port_decode+0x24>
   235a6:	490f      	ldr	r1, [pc, #60]	; (235e4 <nrf_gpio_pin_port_decode+0x4c>)
   235a8:	f240 2247 	movw	r2, #583	; 0x247
   235ac:	480e      	ldr	r0, [pc, #56]	; (235e8 <nrf_gpio_pin_port_decode+0x50>)
   235ae:	f005 fb09 	bl	28bc4 <assert_print>
   235b2:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   235b6:	480b      	ldr	r0, [pc, #44]	; (235e4 <nrf_gpio_pin_port_decode+0x4c>)
   235b8:	f005 fafd 	bl	28bb6 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   235bc:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   235c0:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   235c2:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   235c4:	d00a      	beq.n	235dc <nrf_gpio_pin_port_decode+0x44>
   235c6:	2a01      	cmp	r2, #1
   235c8:	d00a      	beq.n	235e0 <nrf_gpio_pin_port_decode+0x48>
            NRFX_ASSERT(0);
   235ca:	4906      	ldr	r1, [pc, #24]	; (235e4 <nrf_gpio_pin_port_decode+0x4c>)
   235cc:	f44f 7213 	mov.w	r2, #588	; 0x24c
   235d0:	4805      	ldr	r0, [pc, #20]	; (235e8 <nrf_gpio_pin_port_decode+0x50>)
   235d2:	f005 faf7 	bl	28bc4 <assert_print>
   235d6:	f44f 7113 	mov.w	r1, #588	; 0x24c
   235da:	e7ec      	b.n	235b6 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   235dc:	4803      	ldr	r0, [pc, #12]	; (235ec <nrf_gpio_pin_port_decode+0x54>)
}
   235de:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   235e0:	4803      	ldr	r0, [pc, #12]	; (235f0 <nrf_gpio_pin_port_decode+0x58>)
   235e2:	e7fc      	b.n	235de <nrf_gpio_pin_port_decode+0x46>
   235e4:	00034718 	.word	0x00034718
   235e8:	00030da5 	.word	0x00030da5
   235ec:	40842500 	.word	0x40842500
   235f0:	40842800 	.word	0x40842800

000235f4 <nrfx_gpiote_input_configure>:
{
   235f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   235f6:	4604      	mov	r4, r0
   235f8:	4617      	mov	r7, r2
   235fa:	461d      	mov	r5, r3
   235fc:	b085      	sub	sp, #20
    if (p_input_config)
   235fe:	b1d9      	cbz	r1, 23638 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   23600:	f00b f938 	bl	2e874 <pin_is_task_output>
   23604:	bb00      	cbnz	r0, 23648 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23606:	460b      	mov	r3, r1
   23608:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2360c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23610:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23614:	f10d 020f 	add.w	r2, sp, #15
   23618:	f10d 010e 	add.w	r1, sp, #14
   2361c:	4620      	mov	r0, r4
   2361e:	f00b f934 	bl	2e88a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23622:	4a44      	ldr	r2, [pc, #272]	; (23734 <nrfx_gpiote_input_configure+0x140>)
   23624:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23628:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2362c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23630:	f043 0301 	orr.w	r3, r3, #1
   23634:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   23638:	b36f      	cbz	r7, 23696 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   2363a:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2363c:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2363e:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   23640:	f7ff ff28 	bl	23494 <pin_is_output>
   23644:	b110      	cbz	r0, 2364c <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   23646:	b1da      	cbz	r2, 23680 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   23648:	483b      	ldr	r0, [pc, #236]	; (23738 <nrfx_gpiote_input_configure+0x144>)
   2364a:	e026      	b.n	2369a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2364c:	4839      	ldr	r0, [pc, #228]	; (23734 <nrfx_gpiote_input_configure+0x140>)
   2364e:	f104 0c08 	add.w	ip, r4, #8
   23652:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   23656:	f021 0120 	bic.w	r1, r1, #32
   2365a:	04c9      	lsls	r1, r1, #19
   2365c:	0cc9      	lsrs	r1, r1, #19
   2365e:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   23662:	b16a      	cbz	r2, 23680 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   23664:	2e03      	cmp	r6, #3
   23666:	d8ef      	bhi.n	23648 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   23668:	687b      	ldr	r3, [r7, #4]
   2366a:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2366c:	00ba      	lsls	r2, r7, #2
   2366e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23672:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   23676:	b996      	cbnz	r6, 2369e <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   23678:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   2367c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23680:	4a2c      	ldr	r2, [pc, #176]	; (23734 <nrfx_gpiote_input_configure+0x140>)
   23682:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   23686:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2368a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2368e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   23692:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   23696:	bb15      	cbnz	r5, 236de <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   23698:	4828      	ldr	r0, [pc, #160]	; (2373c <nrfx_gpiote_input_configure+0x148>)
}
   2369a:	b005      	add	sp, #20
   2369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2369e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   236a2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   236a6:	f023 0303 	bic.w	r3, r3, #3
   236aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   236ae:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   236b2:	f041 0120 	orr.w	r1, r1, #32
   236b6:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   236ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   236be:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   236c2:	0223      	lsls	r3, r4, #8
   236c4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   236c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   236cc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   236d0:	ea43 030e 	orr.w	r3, r3, lr
   236d4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   236d8:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   236dc:	e7d0      	b.n	23680 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   236de:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   236e0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   236e4:	f7ff fefe 	bl	234e4 <release_handler>
    if (!handler)
   236e8:	2e00      	cmp	r6, #0
   236ea:	d0d5      	beq.n	23698 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   236ec:	4d11      	ldr	r5, [pc, #68]	; (23734 <nrfx_gpiote_input_configure+0x140>)
   236ee:	e9d5 2300 	ldrd	r2, r3, [r5]
   236f2:	4296      	cmp	r6, r2
   236f4:	d101      	bne.n	236fa <nrfx_gpiote_input_configure+0x106>
   236f6:	429f      	cmp	r7, r3
   236f8:	d019      	beq.n	2372e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   236fa:	4811      	ldr	r0, [pc, #68]	; (23740 <nrfx_gpiote_input_configure+0x14c>)
   236fc:	f10d 010f 	add.w	r1, sp, #15
   23700:	f7ff fc66 	bl	22fd0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23704:	4b0d      	ldr	r3, [pc, #52]	; (2373c <nrfx_gpiote_input_configure+0x148>)
   23706:	4298      	cmp	r0, r3
   23708:	d1c7      	bne.n	2369a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   2370a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   2370e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23712:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23716:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23718:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   2371c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23720:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   23724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23728:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   2372c:	e7b4      	b.n	23698 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2372e:	2200      	movs	r2, #0
   23730:	e7ed      	b.n	2370e <nrfx_gpiote_input_configure+0x11a>
   23732:	bf00      	nop
   23734:	20008b08 	.word	0x20008b08
   23738:	0bad0004 	.word	0x0bad0004
   2373c:	0bad0000 	.word	0x0bad0000
   23740:	20008b7c 	.word	0x20008b7c

00023744 <nrfx_gpiote_output_configure>:
{
   23744:	b5f0      	push	{r4, r5, r6, r7, lr}
   23746:	4604      	mov	r4, r0
   23748:	4615      	mov	r5, r2
   2374a:	b085      	sub	sp, #20
    if (p_config)
   2374c:	b321      	cbz	r1, 23798 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   2374e:	f7ff fea1 	bl	23494 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   23752:	b920      	cbnz	r0, 2375e <nrfx_gpiote_output_configure+0x1a>
   23754:	4620      	mov	r0, r4
   23756:	f7ff fe87 	bl	23468 <pin_in_use_by_te>
   2375a:	2800      	cmp	r0, #0
   2375c:	d161      	bne.n	23822 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2375e:	4620      	mov	r0, r4
   23760:	f7ff fe8c 	bl	2347c <pin_has_trigger>
   23764:	b110      	cbz	r0, 2376c <nrfx_gpiote_output_configure+0x28>
   23766:	784b      	ldrb	r3, [r1, #1]
   23768:	2b01      	cmp	r3, #1
   2376a:	d05a      	beq.n	23822 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2376c:	2301      	movs	r3, #1
   2376e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   23772:	2300      	movs	r3, #0
   23774:	1c4a      	adds	r2, r1, #1
   23776:	e9cd 1300 	strd	r1, r3, [sp]
   2377a:	4620      	mov	r0, r4
   2377c:	1c8b      	adds	r3, r1, #2
   2377e:	f10d 010f 	add.w	r1, sp, #15
   23782:	f00b f882 	bl	2e88a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23786:	4a28      	ldr	r2, [pc, #160]	; (23828 <nrfx_gpiote_output_configure+0xe4>)
   23788:	f104 0108 	add.w	r1, r4, #8
   2378c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23790:	f043 0303 	orr.w	r3, r3, #3
   23794:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   23798:	b915      	cbnz	r5, 237a0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   2379a:	4824      	ldr	r0, [pc, #144]	; (2382c <nrfx_gpiote_output_configure+0xe8>)
}
   2379c:	b005      	add	sp, #20
   2379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   237a0:	4620      	mov	r0, r4
   237a2:	f7ff fe77 	bl	23494 <pin_is_output>
        if (pin_is_input(pin))
   237a6:	2800      	cmp	r0, #0
   237a8:	d03b      	beq.n	23822 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   237aa:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   237ae:	2300      	movs	r3, #0
   237b0:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   237b2:	4e1d      	ldr	r6, [pc, #116]	; (23828 <nrfx_gpiote_output_configure+0xe4>)
   237b4:	f104 0708 	add.w	r7, r4, #8
   237b8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   237bc:	0089      	lsls	r1, r1, #2
   237be:	f020 0020 	bic.w	r0, r0, #32
   237c2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   237c6:	04c0      	lsls	r0, r0, #19
   237c8:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   237cc:	0cc0      	lsrs	r0, r0, #19
   237ce:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   237d2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   237d6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   237da:	786a      	ldrb	r2, [r5, #1]
   237dc:	2a00      	cmp	r2, #0
   237de:	d0dc      	beq.n	2379a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   237e0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   237e4:	78ad      	ldrb	r5, [r5, #2]
   237e6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   237ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   237ee:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   237f2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   237f6:	0223      	lsls	r3, r4, #8
   237f8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   237fc:	0412      	lsls	r2, r2, #16
   237fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23802:	ea43 030e 	orr.w	r3, r3, lr
   23806:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23808:	052a      	lsls	r2, r5, #20
   2380a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2380e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23812:	4313      	orrs	r3, r2
   23814:	f040 0020 	orr.w	r0, r0, #32
   23818:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2381c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23820:	e7bb      	b.n	2379a <nrfx_gpiote_output_configure+0x56>
{
   23822:	4803      	ldr	r0, [pc, #12]	; (23830 <nrfx_gpiote_output_configure+0xec>)
   23824:	e7ba      	b.n	2379c <nrfx_gpiote_output_configure+0x58>
   23826:	bf00      	nop
   23828:	20008b08 	.word	0x20008b08
   2382c:	0bad0000 	.word	0x0bad0000
   23830:	0bad0004 	.word	0x0bad0004

00023834 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23834:	4b01      	ldr	r3, [pc, #4]	; (2383c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   23836:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2383a:	4770      	bx	lr
   2383c:	20008b08 	.word	0x20008b08

00023840 <nrfx_gpiote_channel_get>:
{
   23840:	4602      	mov	r2, r0
   23842:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   23844:	b951      	cbnz	r1, 2385c <nrfx_gpiote_channel_get+0x1c>
   23846:	490c      	ldr	r1, [pc, #48]	; (23878 <nrfx_gpiote_channel_get+0x38>)
   23848:	480c      	ldr	r0, [pc, #48]	; (2387c <nrfx_gpiote_channel_get+0x3c>)
   2384a:	f240 2235 	movw	r2, #565	; 0x235
   2384e:	f005 f9b9 	bl	28bc4 <assert_print>
   23852:	f240 2135 	movw	r1, #565	; 0x235
   23856:	4808      	ldr	r0, [pc, #32]	; (23878 <nrfx_gpiote_channel_get+0x38>)
   23858:	f005 f9ad 	bl	28bb6 <assert_post_action>
    if (pin_in_use_by_te(pin))
   2385c:	f7ff fe04 	bl	23468 <pin_in_use_by_te>
   23860:	b138      	cbz	r0, 23872 <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23862:	4b07      	ldr	r3, [pc, #28]	; (23880 <nrfx_gpiote_channel_get+0x40>)
   23864:	3208      	adds	r2, #8
   23866:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   2386a:	4806      	ldr	r0, [pc, #24]	; (23884 <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2386c:	0b5b      	lsrs	r3, r3, #13
   2386e:	700b      	strb	r3, [r1, #0]
}
   23870:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23872:	4805      	ldr	r0, [pc, #20]	; (23888 <nrfx_gpiote_channel_get+0x48>)
   23874:	e7fc      	b.n	23870 <nrfx_gpiote_channel_get+0x30>
   23876:	bf00      	nop
   23878:	00034fbf 	.word	0x00034fbf
   2387c:	00030da5 	.word	0x00030da5
   23880:	20008b08 	.word	0x20008b08
   23884:	0bad0000 	.word	0x0bad0000
   23888:	0bad0004 	.word	0x0bad0004

0002388c <nrfx_gpiote_init>:
{
   2388c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2388e:	4c0f      	ldr	r4, [pc, #60]	; (238cc <nrfx_gpiote_init+0x40>)
   23890:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   23894:	b9bd      	cbnz	r5, 238c6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   23896:	2260      	movs	r2, #96	; 0x60
   23898:	4629      	mov	r1, r5
   2389a:	f104 0010 	add.w	r0, r4, #16
   2389e:	f006 fe47 	bl	2a530 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   238a2:	202f      	movs	r0, #47	; 0x2f
   238a4:	f7e9 f9dc 	bl	cc60 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   238a8:	4b09      	ldr	r3, [pc, #36]	; (238d0 <nrfx_gpiote_init+0x44>)
    return err_code;
   238aa:	480a      	ldr	r0, [pc, #40]	; (238d4 <nrfx_gpiote_init+0x48>)
   238ac:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   238b0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   238b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   238b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   238bc:	2301      	movs	r3, #1
   238be:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   238c2:	6763      	str	r3, [r4, #116]	; 0x74
}
   238c4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   238c6:	4804      	ldr	r0, [pc, #16]	; (238d8 <nrfx_gpiote_init+0x4c>)
   238c8:	e7fc      	b.n	238c4 <nrfx_gpiote_init+0x38>
   238ca:	bf00      	nop
   238cc:	20008b08 	.word	0x20008b08
   238d0:	4002f000 	.word	0x4002f000
   238d4:	0bad0000 	.word	0x0bad0000
   238d8:	0bad0005 	.word	0x0bad0005

000238dc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   238dc:	4b03      	ldr	r3, [pc, #12]	; (238ec <nrfx_gpiote_is_init+0x10>)
   238de:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   238e2:	3800      	subs	r0, #0
   238e4:	bf18      	it	ne
   238e6:	2001      	movne	r0, #1
   238e8:	4770      	bx	lr
   238ea:	bf00      	nop
   238ec:	20008b08 	.word	0x20008b08

000238f0 <nrfx_gpiote_channel_free>:
{
   238f0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   238f2:	4801      	ldr	r0, [pc, #4]	; (238f8 <nrfx_gpiote_channel_free+0x8>)
   238f4:	f7ff bb88 	b.w	23008 <nrfx_flag32_free>
   238f8:	20008b78 	.word	0x20008b78

000238fc <nrfx_gpiote_channel_alloc>:
{
   238fc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   238fe:	4801      	ldr	r0, [pc, #4]	; (23904 <nrfx_gpiote_channel_alloc+0x8>)
   23900:	f7ff bb66 	b.w	22fd0 <nrfx_flag32_alloc>
   23904:	20008b78 	.word	0x20008b78

00023908 <nrfx_gpiote_trigger_enable>:
{
   23908:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2390a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   2390c:	f7ff fdb6 	bl	2347c <pin_has_trigger>
   23910:	b950      	cbnz	r0, 23928 <nrfx_gpiote_trigger_enable+0x20>
   23912:	492a      	ldr	r1, [pc, #168]	; (239bc <nrfx_gpiote_trigger_enable+0xb4>)
   23914:	f240 32df 	movw	r2, #991	; 0x3df
   23918:	4829      	ldr	r0, [pc, #164]	; (239c0 <nrfx_gpiote_trigger_enable+0xb8>)
   2391a:	f005 f953 	bl	28bc4 <assert_print>
   2391e:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   23922:	4826      	ldr	r0, [pc, #152]	; (239bc <nrfx_gpiote_trigger_enable+0xb4>)
   23924:	f005 f947 	bl	28bb6 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23928:	4620      	mov	r0, r4
   2392a:	f7ff fd9d 	bl	23468 <pin_in_use_by_te>
   2392e:	4a25      	ldr	r2, [pc, #148]	; (239c4 <nrfx_gpiote_trigger_enable+0xbc>)
   23930:	f104 0508 	add.w	r5, r4, #8
   23934:	b1e0      	cbz	r0, 23970 <nrfx_gpiote_trigger_enable+0x68>
    return !pin_is_output(pin);
   23936:	4620      	mov	r0, r4
   23938:	f7ff fdac 	bl	23494 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2393c:	b9c0      	cbnz	r0, 23970 <nrfx_gpiote_trigger_enable+0x68>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2393e:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   23942:	4c21      	ldr	r4, [pc, #132]	; (239c8 <nrfx_gpiote_trigger_enable+0xc0>)
   23944:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   23946:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23948:	50e0      	str	r0, [r4, r3]
   2394a:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2394c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23950:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23954:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   23958:	f040 0001 	orr.w	r0, r0, #1
   2395c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   23960:	b121      	cbz	r1, 2396c <nrfx_gpiote_trigger_enable+0x64>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23962:	2301      	movs	r3, #1
   23964:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   23966:	4a19      	ldr	r2, [pc, #100]	; (239cc <nrfx_gpiote_trigger_enable+0xc4>)
   23968:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2396c:	b003      	add	sp, #12
   2396e:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   23970:	b941      	cbnz	r1, 23984 <nrfx_gpiote_trigger_enable+0x7c>
   23972:	4912      	ldr	r1, [pc, #72]	; (239bc <nrfx_gpiote_trigger_enable+0xb4>)
   23974:	f240 32ee 	movw	r2, #1006	; 0x3ee
   23978:	4811      	ldr	r0, [pc, #68]	; (239c0 <nrfx_gpiote_trigger_enable+0xb8>)
   2397a:	f005 f923 	bl	28bc4 <assert_print>
   2397e:	f240 31ee 	movw	r1, #1006	; 0x3ee
   23982:	e7ce      	b.n	23922 <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23984:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   23988:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2398c:	2b04      	cmp	r3, #4
   2398e:	d011      	beq.n	239b4 <nrfx_gpiote_trigger_enable+0xac>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23990:	2b05      	cmp	r3, #5
   23992:	d011      	beq.n	239b8 <nrfx_gpiote_trigger_enable+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23994:	a801      	add	r0, sp, #4
   23996:	9401      	str	r4, [sp, #4]
   23998:	f7ff fdfe 	bl	23598 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2399c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2399e:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   239a0:	40d9      	lsrs	r1, r3
   239a2:	f001 0101 	and.w	r1, r1, #1
   239a6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   239a8:	4620      	mov	r0, r4
}
   239aa:	b003      	add	sp, #12
   239ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   239b0:	f00a bfb8 	b.w	2e924 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   239b4:	2103      	movs	r1, #3
   239b6:	e7f7      	b.n	239a8 <nrfx_gpiote_trigger_enable+0xa0>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   239b8:	2102      	movs	r1, #2
   239ba:	e7f5      	b.n	239a8 <nrfx_gpiote_trigger_enable+0xa0>
   239bc:	00034fbf 	.word	0x00034fbf
   239c0:	00030da5 	.word	0x00030da5
   239c4:	20008b08 	.word	0x20008b08
   239c8:	4002f100 	.word	0x4002f100
   239cc:	4002f000 	.word	0x4002f000

000239d0 <nrfx_gpiote_trigger_disable>:
{
   239d0:	b508      	push	{r3, lr}
   239d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   239d4:	f7ff fd48 	bl	23468 <pin_in_use_by_te>
   239d8:	b1c8      	cbz	r0, 23a0e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   239da:	4610      	mov	r0, r2
   239dc:	f7ff fd5a 	bl	23494 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   239e0:	b9a8      	cbnz	r0, 23a0e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   239e2:	4b0e      	ldr	r3, [pc, #56]	; (23a1c <nrfx_gpiote_trigger_disable+0x4c>)
   239e4:	3208      	adds	r2, #8
   239e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   239ea:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   239ec:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   239ee:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   239f0:	490b      	ldr	r1, [pc, #44]	; (23a20 <nrfx_gpiote_trigger_disable+0x50>)
   239f2:	009b      	lsls	r3, r3, #2
   239f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   239f8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   239fc:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23a00:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23a04:	f022 0203 	bic.w	r2, r2, #3
   23a08:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23a0c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23a0e:	2100      	movs	r1, #0
}
   23a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23a14:	4610      	mov	r0, r2
   23a16:	f00a bf85 	b.w	2e924 <nrf_gpio_cfg_sense_set>
   23a1a:	bf00      	nop
   23a1c:	20008b08 	.word	0x20008b08
   23a20:	4002f000 	.word	0x4002f000

00023a24 <nrfx_gpiote_pin_uninit>:
{
   23a24:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23a26:	4b10      	ldr	r3, [pc, #64]	; (23a68 <nrfx_gpiote_pin_uninit+0x44>)
   23a28:	f100 0208 	add.w	r2, r0, #8
   23a2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   23a30:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23a32:	07db      	lsls	r3, r3, #31
   23a34:	d516      	bpl.n	23a64 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   23a36:	f7ff ffcb 	bl	239d0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   23a3a:	4620      	mov	r0, r4
   23a3c:	f7ff fd8e 	bl	2355c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a40:	a801      	add	r0, sp, #4
   23a42:	9401      	str	r4, [sp, #4]
   23a44:	f7ff fda8 	bl	23598 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23a48:	9b01      	ldr	r3, [sp, #4]
   23a4a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   23a4e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23a52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23a56:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   23a5a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   23a5e:	4803      	ldr	r0, [pc, #12]	; (23a6c <nrfx_gpiote_pin_uninit+0x48>)
}
   23a60:	b002      	add	sp, #8
   23a62:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23a64:	4802      	ldr	r0, [pc, #8]	; (23a70 <nrfx_gpiote_pin_uninit+0x4c>)
   23a66:	e7fb      	b.n	23a60 <nrfx_gpiote_pin_uninit+0x3c>
   23a68:	20008b08 	.word	0x20008b08
   23a6c:	0bad0000 	.word	0x0bad0000
   23a70:	0bad0004 	.word	0x0bad0004

00023a74 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   23a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   23a78:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   23a7a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23a7c:	4634      	mov	r4, r6
{
   23a7e:	4b64      	ldr	r3, [pc, #400]	; (23c10 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   23a80:	4864      	ldr	r0, [pc, #400]	; (23c14 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23a82:	4965      	ldr	r1, [pc, #404]	; (23c18 <nrfx_gpiote_irq_handler+0x1a4>)
{
   23a84:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a86:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   23a88:	b135      	cbz	r5, 23a98 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   23a8a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23a8e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23a90:	bf1e      	ittt	ne
   23a92:	601c      	strne	r4, [r3, #0]
   23a94:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   23a96:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23a98:	3304      	adds	r3, #4
   23a9a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23a9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23aa0:	d1f1      	bne.n	23a86 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23aa2:	f8df a170 	ldr.w	sl, [pc, #368]	; 23c14 <nrfx_gpiote_irq_handler+0x1a0>
   23aa6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   23aaa:	2b00      	cmp	r3, #0
   23aac:	f000 8093 	beq.w	23bd6 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   23ab0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 23c1c <nrfx_gpiote_irq_handler+0x1a8>
   23ab4:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23ab8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23aba:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23abe:	4b58      	ldr	r3, [pc, #352]	; (23c20 <nrfx_gpiote_irq_handler+0x1ac>)
   23ac0:	6a1a      	ldr	r2, [r3, #32]
   23ac2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23ac4:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23ac6:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   23aca:	f10d 0b10 	add.w	fp, sp, #16
   23ace:	ea4f 1349 	mov.w	r3, r9, lsl #5
   23ad2:	9300      	str	r3, [sp, #0]
   23ad4:	e04a      	b.n	23b6c <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   23ad6:	fa94 f4a4 	rbit	r4, r4
   23ada:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   23ade:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23ae0:	4a50      	ldr	r2, [pc, #320]	; (23c24 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   23ae2:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23ae4:	f104 0308 	add.w	r3, r4, #8
   23ae8:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   23aec:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23aee:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   23af0:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   23af4:	fa03 f101 	lsl.w	r1, r3, r1
   23af8:	f81b 3000 	ldrb.w	r3, [fp, r0]
   23afc:	08ba      	lsrs	r2, r7, #2
   23afe:	ea23 0301 	bic.w	r3, r3, r1
   23b02:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23b06:	a803      	add	r0, sp, #12
   23b08:	9201      	str	r2, [sp, #4]
   23b0a:	9403      	str	r4, [sp, #12]
   23b0c:	f7ff fd44 	bl	23598 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23b10:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   23b12:	9a01      	ldr	r2, [sp, #4]
   23b14:	3380      	adds	r3, #128	; 0x80
   23b16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23b1a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   23b1e:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23b20:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   23b22:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   23b26:	d52b      	bpl.n	23b80 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   23b28:	4639      	mov	r1, r7
   23b2a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23b2c:	b2dd      	uxtb	r5, r3
   23b2e:	f7ff fcbb 	bl	234a8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23b32:	a803      	add	r0, sp, #12
   23b34:	9403      	str	r4, [sp, #12]
   23b36:	f7ff fd2f 	bl	23598 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23b3a:	9b03      	ldr	r3, [sp, #12]
   23b3c:	3380      	adds	r3, #128	; 0x80
   23b3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23b42:	f3c3 4301 	ubfx	r3, r3, #16, #2
   23b46:	429d      	cmp	r5, r3
   23b48:	d107      	bne.n	23b5a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23b4a:	2100      	movs	r1, #0
   23b4c:	4620      	mov	r0, r4
   23b4e:	f00a fee9 	bl	2e924 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23b52:	4629      	mov	r1, r5
   23b54:	4620      	mov	r0, r4
   23b56:	f00a fee5 	bl	2e924 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23b5a:	a803      	add	r0, sp, #12
   23b5c:	9403      	str	r4, [sp, #12]
   23b5e:	f7ff fd1b 	bl	23598 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   23b62:	2201      	movs	r2, #1
   23b64:	9b03      	ldr	r3, [sp, #12]
   23b66:	fa02 f303 	lsl.w	r3, r2, r3
   23b6a:	6203      	str	r3, [r0, #32]
            while (latch[i])
   23b6c:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   23b70:	2c00      	cmp	r4, #0
   23b72:	d1b0      	bne.n	23ad6 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23b74:	f1b9 0f00 	cmp.w	r9, #0
   23b78:	d11d      	bne.n	23bb6 <nrfx_gpiote_irq_handler+0x142>
   23b7a:	f04f 0901 	mov.w	r9, #1
   23b7e:	e7a6      	b.n	23ace <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23b80:	2b02      	cmp	r3, #2
   23b82:	d10c      	bne.n	23b9e <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23b84:	2103      	movs	r1, #3
   23b86:	4620      	mov	r0, r4
   23b88:	f00a fecc 	bl	2e924 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23b8c:	f005 0305 	and.w	r3, r5, #5
   23b90:	2b01      	cmp	r3, #1
   23b92:	d1e2      	bne.n	23b5a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   23b94:	4639      	mov	r1, r7
   23b96:	4620      	mov	r0, r4
   23b98:	f7ff fc86 	bl	234a8 <call_handler>
   23b9c:	e7dd      	b.n	23b5a <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23b9e:	2102      	movs	r1, #2
   23ba0:	4620      	mov	r0, r4
   23ba2:	9301      	str	r3, [sp, #4]
   23ba4:	f00a febe 	bl	2e924 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23ba8:	2d03      	cmp	r5, #3
   23baa:	d0f3      	beq.n	23b94 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23bac:	9b01      	ldr	r3, [sp, #4]
   23bae:	2b03      	cmp	r3, #3
   23bb0:	d1d3      	bne.n	23b5a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   23bb2:	2d02      	cmp	r5, #2
   23bb4:	e7ed      	b.n	23b92 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23bb6:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   23bba:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   23bbe:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23bc2:	4917      	ldr	r1, [pc, #92]	; (23c20 <nrfx_gpiote_irq_handler+0x1ac>)
   23bc4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23bc6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23bca:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   23bcc:	4313      	orrs	r3, r2
   23bce:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23bd0:	620a      	str	r2, [r1, #32]
   23bd2:	f47f af78 	bne.w	23ac6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   23bd6:	2401      	movs	r4, #1
    while (mask)
   23bd8:	b916      	cbnz	r6, 23be0 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   23bda:	b007      	add	sp, #28
   23bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   23be0:	fa96 f3a6 	rbit	r3, r6
   23be4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23be8:	fa04 f203 	lsl.w	r2, r4, r3
   23bec:	009b      	lsls	r3, r3, #2
   23bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23bf2:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   23bf6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23bfa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23bfe:	f3c0 2005 	ubfx	r0, r0, #8, #6
   23c02:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   23c06:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23c0a:	f7ff fc4d 	bl	234a8 <call_handler>
   23c0e:	e7e3      	b.n	23bd8 <nrfx_gpiote_irq_handler+0x164>
   23c10:	4002f100 	.word	0x4002f100
   23c14:	4002f000 	.word	0x4002f000
   23c18:	4002f120 	.word	0x4002f120
   23c1c:	40842500 	.word	0x40842500
   23c20:	40842800 	.word	0x40842800
   23c24:	20008b08 	.word	0x20008b08

00023c28 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   23c28:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23c2a:	4c08      	ldr	r4, [pc, #32]	; (23c4c <nrfx_ipc_init+0x24>)
{
   23c2c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23c2e:	7923      	ldrb	r3, [r4, #4]
{
   23c30:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23c32:	b943      	cbnz	r3, 23c46 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   23c34:	202a      	movs	r0, #42	; 0x2a
   23c36:	f7e9 f813 	bl	cc60 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23c3a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   23c3c:	4804      	ldr	r0, [pc, #16]	; (23c50 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23c3e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   23c40:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   23c42:	60a5      	str	r5, [r4, #8]
}
   23c44:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   23c46:	4803      	ldr	r0, [pc, #12]	; (23c54 <nrfx_ipc_init+0x2c>)
   23c48:	e7fc      	b.n	23c44 <nrfx_ipc_init+0x1c>
   23c4a:	bf00      	nop
   23c4c:	2000b05c 	.word	0x2000b05c
   23c50:	0bad0000 	.word	0x0bad0000
   23c54:	0bad000c 	.word	0x0bad000c

00023c58 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   23c58:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   23c5a:	b940      	cbnz	r0, 23c6e <nrfx_ipc_config_load+0x16>
   23c5c:	4918      	ldr	r1, [pc, #96]	; (23cc0 <nrfx_ipc_config_load+0x68>)
   23c5e:	2245      	movs	r2, #69	; 0x45
   23c60:	4818      	ldr	r0, [pc, #96]	; (23cc4 <nrfx_ipc_config_load+0x6c>)
   23c62:	f004 ffaf 	bl	28bc4 <assert_print>
   23c66:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23c68:	4815      	ldr	r0, [pc, #84]	; (23cc0 <nrfx_ipc_config_load+0x68>)
   23c6a:	f004 ffa4 	bl	28bb6 <assert_post_action>
   23c6e:	4b16      	ldr	r3, [pc, #88]	; (23cc8 <nrfx_ipc_config_load+0x70>)
   23c70:	791b      	ldrb	r3, [r3, #4]
   23c72:	2b01      	cmp	r3, #1
   23c74:	d006      	beq.n	23c84 <nrfx_ipc_config_load+0x2c>
   23c76:	4912      	ldr	r1, [pc, #72]	; (23cc0 <nrfx_ipc_config_load+0x68>)
   23c78:	2246      	movs	r2, #70	; 0x46
   23c7a:	4812      	ldr	r0, [pc, #72]	; (23cc4 <nrfx_ipc_config_load+0x6c>)
   23c7c:	f004 ffa2 	bl	28bc4 <assert_print>
   23c80:	2146      	movs	r1, #70	; 0x46
   23c82:	e7f1      	b.n	23c68 <nrfx_ipc_config_load+0x10>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23c84:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   23c86:	4a11      	ldr	r2, [pc, #68]	; (23ccc <nrfx_ipc_config_load+0x74>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   23c88:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23c8c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23c90:	3301      	adds	r3, #1
   23c92:	2b10      	cmp	r3, #16
   23c94:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   23c98:	d1f6      	bne.n	23c88 <nrfx_ipc_config_load+0x30>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   23c9a:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   23c9c:	4a0b      	ldr	r2, [pc, #44]	; (23ccc <nrfx_ipc_config_load+0x74>)
   23c9e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   23ca2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   23ca6:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   23caa:	3301      	adds	r3, #1
   23cac:	2b10      	cmp	r3, #16
   23cae:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   23cb2:	d1f6      	bne.n	23ca2 <nrfx_ipc_config_load+0x4a>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   23cb4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   23cb8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23cbc:	bd38      	pop	{r3, r4, r5, pc}
   23cbe:	bf00      	nop
   23cc0:	00035009 	.word	0x00035009
   23cc4:	00030da5 	.word	0x00030da5
   23cc8:	2000b05c 	.word	0x2000b05c
   23ccc:	4002a000 	.word	0x4002a000

00023cd0 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   23cd0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23cd2:	4b09      	ldr	r3, [pc, #36]	; (23cf8 <nrfx_ipc_receive_event_enable+0x28>)
   23cd4:	791b      	ldrb	r3, [r3, #4]
   23cd6:	2b01      	cmp	r3, #1
   23cd8:	d008      	beq.n	23cec <nrfx_ipc_receive_event_enable+0x1c>
   23cda:	4908      	ldr	r1, [pc, #32]	; (23cfc <nrfx_ipc_receive_event_enable+0x2c>)
   23cdc:	4808      	ldr	r0, [pc, #32]	; (23d00 <nrfx_ipc_receive_event_enable+0x30>)
   23cde:	226b      	movs	r2, #107	; 0x6b
   23ce0:	f004 ff70 	bl	28bc4 <assert_print>
   23ce4:	216b      	movs	r1, #107	; 0x6b
   23ce6:	4805      	ldr	r0, [pc, #20]	; (23cfc <nrfx_ipc_receive_event_enable+0x2c>)
   23ce8:	f004 ff65 	bl	28bb6 <assert_post_action>
   23cec:	4a05      	ldr	r2, [pc, #20]	; (23d04 <nrfx_ipc_receive_event_enable+0x34>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   23cee:	4083      	lsls	r3, r0
   23cf0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23cf4:	bd08      	pop	{r3, pc}
   23cf6:	bf00      	nop
   23cf8:	2000b05c 	.word	0x2000b05c
   23cfc:	00035009 	.word	0x00035009
   23d00:	00030da5 	.word	0x00030da5
   23d04:	4002a000 	.word	0x4002a000

00023d08 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   23d08:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   23d0a:	4b09      	ldr	r3, [pc, #36]	; (23d30 <nrfx_ipc_receive_event_disable+0x28>)
   23d0c:	791b      	ldrb	r3, [r3, #4]
   23d0e:	2b01      	cmp	r3, #1
   23d10:	d008      	beq.n	23d24 <nrfx_ipc_receive_event_disable+0x1c>
   23d12:	4908      	ldr	r1, [pc, #32]	; (23d34 <nrfx_ipc_receive_event_disable+0x2c>)
   23d14:	4808      	ldr	r0, [pc, #32]	; (23d38 <nrfx_ipc_receive_event_disable+0x30>)
   23d16:	2271      	movs	r2, #113	; 0x71
   23d18:	f004 ff54 	bl	28bc4 <assert_print>
   23d1c:	2171      	movs	r1, #113	; 0x71
   23d1e:	4805      	ldr	r0, [pc, #20]	; (23d34 <nrfx_ipc_receive_event_disable+0x2c>)
   23d20:	f004 ff49 	bl	28bb6 <assert_post_action>
    p_reg->INTENCLR = mask;
   23d24:	4a05      	ldr	r2, [pc, #20]	; (23d3c <nrfx_ipc_receive_event_disable+0x34>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   23d26:	4083      	lsls	r3, r0
   23d28:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   23d2c:	bd08      	pop	{r3, pc}
   23d2e:	bf00      	nop
   23d30:	2000b05c 	.word	0x2000b05c
   23d34:	00035009 	.word	0x00035009
   23d38:	00030da5 	.word	0x00030da5
   23d3c:	4002a000 	.word	0x4002a000

00023d40 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   23d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   23d42:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d44:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   23d46:	4b12      	ldr	r3, [pc, #72]	; (23d90 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   23d48:	4d12      	ldr	r5, [pc, #72]	; (23d94 <nrfx_ipc_irq_handler+0x54>)
   23d4a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   23d4e:	b904      	cbnz	r4, 23d52 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   23d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   23d52:	fa94 f0a4 	rbit	r0, r4
   23d56:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   23d5a:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   23d5e:	280f      	cmp	r0, #15
   23d60:	ea24 0403 	bic.w	r4, r4, r3
   23d64:	dd0a      	ble.n	23d7c <nrfx_ipc_irq_handler+0x3c>
   23d66:	490c      	ldr	r1, [pc, #48]	; (23d98 <nrfx_ipc_irq_handler+0x58>)
   23d68:	480c      	ldr	r0, [pc, #48]	; (23d9c <nrfx_ipc_irq_handler+0x5c>)
   23d6a:	f240 12e7 	movw	r2, #487	; 0x1e7
   23d6e:	f004 ff29 	bl	28bc4 <assert_print>
   23d72:	f240 11e7 	movw	r1, #487	; 0x1e7
   23d76:	4808      	ldr	r0, [pc, #32]	; (23d98 <nrfx_ipc_irq_handler+0x58>)
   23d78:	f004 ff1d 	bl	28bb6 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d7c:	4b08      	ldr	r3, [pc, #32]	; (23da0 <nrfx_ipc_irq_handler+0x60>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   23d7e:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d80:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   23d82:	682b      	ldr	r3, [r5, #0]
   23d84:	2b00      	cmp	r3, #0
   23d86:	d0e2      	beq.n	23d4e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   23d88:	68a9      	ldr	r1, [r5, #8]
   23d8a:	4798      	blx	r3
   23d8c:	e7df      	b.n	23d4e <nrfx_ipc_irq_handler+0xe>
   23d8e:	bf00      	nop
   23d90:	4002a000 	.word	0x4002a000
   23d94:	2000b05c 	.word	0x2000b05c
   23d98:	00030f6d 	.word	0x00030f6d
   23d9c:	00030da5 	.word	0x00030da5
   23da0:	4002a100 	.word	0x4002a100

00023da4 <nvmc_word_write>:
   23da4:	4a04      	ldr	r2, [pc, #16]	; (23db8 <nvmc_word_write+0x14>)
   23da6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23daa:	07db      	lsls	r3, r3, #31
   23dac:	d5fb      	bpl.n	23da6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   23dae:	6001      	str	r1, [r0, #0]
   23db0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   23db4:	4770      	bx	lr
   23db6:	bf00      	nop
   23db8:	40039000 	.word	0x40039000

00023dbc <nrfx_nvmc_page_partial_erase_init>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   23dbc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    nvmc_readonly_mode_set();
}

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
nrfx_err_t nrfx_nvmc_page_partial_erase_init(uint32_t addr, uint32_t duration_ms)
{
   23dc0:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   23dc2:	d30a      	bcc.n	23dda <nrfx_nvmc_page_partial_erase_init+0x1e>
    NRFX_ASSERT(is_valid_address(addr, false));
   23dc4:	490c      	ldr	r1, [pc, #48]	; (23df8 <nrfx_nvmc_page_partial_erase_init+0x3c>)
   23dc6:	480d      	ldr	r0, [pc, #52]	; (23dfc <nrfx_nvmc_page_partial_erase_init+0x40>)
   23dc8:	f44f 7298 	mov.w	r2, #304	; 0x130
   23dcc:	f004 fefa 	bl	28bc4 <assert_print>
   23dd0:	f44f 7198 	mov.w	r1, #304	; 0x130
   23dd4:	4808      	ldr	r0, [pc, #32]	; (23df8 <nrfx_nvmc_page_partial_erase_init+0x3c>)
   23dd6:	f004 feee 	bl	28bb6 <assert_post_action>
    return !(addr % flash_page_size_get());
   23dda:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   23dde:	b943      	cbnz	r3, 23df2 <nrfx_nvmc_page_partial_erase_init+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    m_partial_erase_time_elapsed = 0;
   23de0:	4a07      	ldr	r2, [pc, #28]	; (23e00 <nrfx_nvmc_page_partial_erase_init+0x44>)
   23de2:	6013      	str	r3, [r2, #0]
    m_partial_erase_page_addr = addr;
   23de4:	4b07      	ldr	r3, [pc, #28]	; (23e04 <nrfx_nvmc_page_partial_erase_init+0x48>)
   23de6:	6018      	str	r0, [r3, #0]

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set(NRF_NVMC_Type * p_reg,
                                                           uint32_t        duration_ms)
{
    p_reg->ERASEPAGEPARTIALCFG = duration_ms;
   23de8:	4b07      	ldr	r3, [pc, #28]	; (23e08 <nrfx_nvmc_page_partial_erase_init+0x4c>)
    nrf_nvmc_partial_erase_duration_set(NRF_NVMC, duration_ms);

    return NRFX_SUCCESS;
   23dea:	4808      	ldr	r0, [pc, #32]	; (23e0c <nrfx_nvmc_page_partial_erase_init+0x50>)
   23dec:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
}
   23df0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   23df2:	4807      	ldr	r0, [pc, #28]	; (23e10 <nrfx_nvmc_page_partial_erase_init+0x54>)
   23df4:	e7fc      	b.n	23df0 <nrfx_nvmc_page_partial_erase_init+0x34>
   23df6:	bf00      	nop
   23df8:	00035044 	.word	0x00035044
   23dfc:	00030da5 	.word	0x00030da5
   23e00:	2000b068 	.word	0x2000b068
   23e04:	20008b84 	.word	0x20008b84
   23e08:	40039000 	.word	0x40039000
   23e0c:	0bad0000 	.word	0x0bad0000
   23e10:	0bad000a 	.word	0x0bad000a

00023e14 <nrfx_nvmc_page_partial_erase_continue>:

bool nrfx_nvmc_page_partial_erase_continue(void)
{
   23e14:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_partial_erase_page_addr != NVMC_PARTIAL_ERASE_INVALID_ADDR);
   23e16:	4c15      	ldr	r4, [pc, #84]	; (23e6c <nrfx_nvmc_page_partial_erase_continue+0x58>)
   23e18:	6821      	ldr	r1, [r4, #0]
   23e1a:	1c4b      	adds	r3, r1, #1
   23e1c:	d10a      	bne.n	23e34 <nrfx_nvmc_page_partial_erase_continue+0x20>
   23e1e:	4914      	ldr	r1, [pc, #80]	; (23e70 <nrfx_nvmc_page_partial_erase_continue+0x5c>)
   23e20:	4814      	ldr	r0, [pc, #80]	; (23e74 <nrfx_nvmc_page_partial_erase_continue+0x60>)
   23e22:	f44f 72a0 	mov.w	r2, #320	; 0x140
   23e26:	f004 fecd 	bl	28bc4 <assert_print>
   23e2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   23e2e:	4810      	ldr	r0, [pc, #64]	; (23e70 <nrfx_nvmc_page_partial_erase_continue+0x5c>)
   23e30:	f004 fec1 	bl	28bb6 <assert_post_action>
    p_reg->CONFIG = (uint32_t)mode;
   23e34:	2004      	movs	r0, #4
}

NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get(NRF_NVMC_Type const * p_reg)
{
    return p_reg->ERASEPAGEPARTIALCFG;
   23e36:	4a10      	ldr	r2, [pc, #64]	; (23e78 <nrfx_nvmc_page_partial_erase_continue+0x64>)
   23e38:	f8d2 351c 	ldr.w	r3, [r2, #1308]	; 0x51c
    p_reg->CONFIG = (uint32_t)mode;
   23e3c:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   23e40:	f04f 30ff 	mov.w	r0, #4294967295
   23e44:	6008      	str	r0, [r1, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   23e46:	f8d2 0400 	ldr.w	r0, [r2, #1024]	; 0x400
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif

    nrf_nvmc_page_partial_erase_start(NRF_NVMC, m_partial_erase_page_addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23e4a:	f010 0001 	ands.w	r0, r0, #1
   23e4e:	d0fa      	beq.n	23e46 <nrfx_nvmc_page_partial_erase_continue+0x32>
    p_reg->CONFIGNS = (uint32_t)mode;
   23e50:	2100      	movs	r1, #0
   23e52:	f8c2 1584 	str.w	r1, [r2, #1412]	; 0x584
    {}
    nvmc_readonly_mode_set();

    m_partial_erase_time_elapsed += duration_ms;
   23e56:	4a09      	ldr	r2, [pc, #36]	; (23e7c <nrfx_nvmc_page_partial_erase_continue+0x68>)
   23e58:	6815      	ldr	r5, [r2, #0]
   23e5a:	442b      	add	r3, r5
    if (m_partial_erase_time_elapsed < NVMC_PAGE_ERASE_DURATION_MS)
   23e5c:	2b56      	cmp	r3, #86	; 0x56
    m_partial_erase_time_elapsed += duration_ms;
   23e5e:	6013      	str	r3, [r2, #0]
    {
        return false;
    }
    else
    {
        m_partial_erase_page_addr = NVMC_PARTIAL_ERASE_INVALID_ADDR;
   23e60:	bf86      	itte	hi
   23e62:	f04f 33ff 	movhi.w	r3, #4294967295
   23e66:	6023      	strhi	r3, [r4, #0]
        return false;
   23e68:	4608      	movls	r0, r1
        return true;
    }
}
   23e6a:	bd38      	pop	{r3, r4, r5, pc}
   23e6c:	20008b84 	.word	0x20008b84
   23e70:	00035044 	.word	0x00035044
   23e74:	00030da5 	.word	0x00030da5
   23e78:	40039000 	.word	0x40039000
   23e7c:	2000b068 	.word	0x2000b068

00023e80 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   23e80:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   23e84:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   23e86:	d30a      	bcc.n	23e9e <nrfx_nvmc_word_write+0x1e>
    NRFX_ASSERT(is_valid_address(addr, true));
   23e88:	490f      	ldr	r1, [pc, #60]	; (23ec8 <nrfx_nvmc_word_write+0x48>)
   23e8a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   23e8e:	480f      	ldr	r0, [pc, #60]	; (23ecc <nrfx_nvmc_word_write+0x4c>)
   23e90:	f004 fe98 	bl	28bc4 <assert_print>
   23e94:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   23e98:	480b      	ldr	r0, [pc, #44]	; (23ec8 <nrfx_nvmc_word_write+0x48>)
   23e9a:	f004 fe8c 	bl	28bb6 <assert_post_action>
   23e9e:	f010 0403 	ands.w	r4, r0, #3
   23ea2:	d008      	beq.n	23eb6 <nrfx_nvmc_word_write+0x36>
   23ea4:	4908      	ldr	r1, [pc, #32]	; (23ec8 <nrfx_nvmc_word_write+0x48>)
   23ea6:	f240 1295 	movw	r2, #405	; 0x195
   23eaa:	4808      	ldr	r0, [pc, #32]	; (23ecc <nrfx_nvmc_word_write+0x4c>)
   23eac:	f004 fe8a 	bl	28bc4 <assert_print>
   23eb0:	f240 1195 	movw	r1, #405	; 0x195
   23eb4:	e7f0      	b.n	23e98 <nrfx_nvmc_word_write+0x18>
   23eb6:	2301      	movs	r3, #1
   23eb8:	4d05      	ldr	r5, [pc, #20]	; (23ed0 <nrfx_nvmc_word_write+0x50>)
   23eba:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   23ebe:	f7ff ff71 	bl	23da4 <nvmc_word_write>
   23ec2:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   23ec6:	bd38      	pop	{r3, r4, r5, pc}
   23ec8:	00035044 	.word	0x00035044
   23ecc:	00030da5 	.word	0x00030da5
   23ed0:	40039000 	.word	0x40039000

00023ed4 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   23ed4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   23ed6:	4d42      	ldr	r5, [pc, #264]	; (23fe0 <qspi_xfer+0x10c>)
   23ed8:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   23edc:	b944      	cbnz	r4, 23ef0 <qspi_xfer+0x1c>
   23ede:	4941      	ldr	r1, [pc, #260]	; (23fe4 <qspi_xfer+0x110>)
   23ee0:	2268      	movs	r2, #104	; 0x68
   23ee2:	4841      	ldr	r0, [pc, #260]	; (23fe8 <qspi_xfer+0x114>)
   23ee4:	f004 fe6e 	bl	28bc4 <assert_print>
   23ee8:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   23eea:	483e      	ldr	r0, [pc, #248]	; (23fe4 <qspi_xfer+0x110>)
   23eec:	f004 fe63 	bl	28bb6 <assert_post_action>
   23ef0:	b930      	cbnz	r0, 23f00 <qspi_xfer+0x2c>
   23ef2:	493c      	ldr	r1, [pc, #240]	; (23fe4 <qspi_xfer+0x110>)
   23ef4:	2269      	movs	r2, #105	; 0x69
   23ef6:	483c      	ldr	r0, [pc, #240]	; (23fe8 <qspi_xfer+0x114>)
   23ef8:	f004 fe64 	bl	28bc4 <assert_print>
   23efc:	2169      	movs	r1, #105	; 0x69
   23efe:	e7f4      	b.n	23eea <qspi_xfer+0x16>
   23f00:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   23f04:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   23f08:	d165      	bne.n	23fd6 <qspi_xfer+0x102>
   23f0a:	0786      	lsls	r6, r0, #30
   23f0c:	d163      	bne.n	23fd6 <qspi_xfer+0x102>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   23f0e:	2c01      	cmp	r4, #1
   23f10:	d001      	beq.n	23f16 <qspi_xfer+0x42>
   23f12:	429c      	cmp	r4, r3
   23f14:	d161      	bne.n	23fda <qspi_xfer+0x106>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   23f16:	682c      	ldr	r4, [r5, #0]
   23f18:	bb04      	cbnz	r4, 23f5c <qspi_xfer+0x88>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23f1a:	2b02      	cmp	r3, #2
   23f1c:	4b33      	ldr	r3, [pc, #204]	; (23fec <qspi_xfer+0x118>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   23f1e:	bf0b      	itete	eq
   23f20:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   23f24:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23f28:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23f2c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23f30:	bf0b      	itete	eq
   23f32:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   23f36:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   23f3a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   23f3c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23f3e:	2100      	movs	r1, #0
   23f40:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23f44:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   23f48:	2201      	movs	r2, #1
   23f4a:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   23f4e:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23f50:	4a26      	ldr	r2, [pc, #152]	; (23fec <qspi_xfer+0x118>)
   23f52:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   23f56:	2b00      	cmp	r3, #0
   23f58:	d0fb      	beq.n	23f52 <qspi_xfer+0x7e>
   23f5a:	e00d      	b.n	23f78 <qspi_xfer+0xa4>
        if (m_cb.p_buffer_primary)
   23f5c:	68ae      	ldr	r6, [r5, #8]
   23f5e:	4c23      	ldr	r4, [pc, #140]	; (23fec <qspi_xfer+0x118>)
   23f60:	b166      	cbz	r6, 23f7c <qspi_xfer+0xa8>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23f62:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   23f64:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   23f66:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   23f68:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23f6a:	d12d      	bne.n	23fc8 <qspi_xfer+0xf4>
    p_reg->WRITE.DST = dest_addr;
   23f6c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23f70:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   23f74:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   23f78:	481d      	ldr	r0, [pc, #116]	; (23ff0 <qspi_xfer+0x11c>)
}
   23f7a:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23f7c:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   23f7e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   23f82:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   23f84:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   23f86:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   23f88:	bf0c      	ite	eq
   23f8a:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   23f8e:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23f92:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23f96:	bf0b      	itete	eq
   23f98:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23f9c:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23fa0:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   23fa4:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   23fa8:	bf08      	it	eq
   23faa:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fac:	490f      	ldr	r1, [pc, #60]	; (23fec <qspi_xfer+0x118>)
        task = NRF_QSPI_TASK_READSTART;
   23fae:	bf18      	it	ne
   23fb0:	2304      	movne	r3, #4
   23fb2:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   23fb6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23fbc:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   23fc0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23fc4:	601a      	str	r2, [r3, #0]
}
   23fc6:	e7d7      	b.n	23f78 <qspi_xfer+0xa4>
    p_reg->READ.SRC = src_addr;
   23fc8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   23fcc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   23fd0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   23fd4:	e7d0      	b.n	23f78 <qspi_xfer+0xa4>
        return NRFX_ERROR_INVALID_ADDR;
   23fd6:	4807      	ldr	r0, [pc, #28]	; (23ff4 <qspi_xfer+0x120>)
   23fd8:	e7cf      	b.n	23f7a <qspi_xfer+0xa6>
        return NRFX_ERROR_BUSY;
   23fda:	4807      	ldr	r0, [pc, #28]	; (23ff8 <qspi_xfer+0x124>)
   23fdc:	e7cd      	b.n	23f7a <qspi_xfer+0xa6>
   23fde:	bf00      	nop
   23fe0:	2000b06c 	.word	0x2000b06c
   23fe4:	00035080 	.word	0x00035080
   23fe8:	00030da5 	.word	0x00030da5
   23fec:	4002b000 	.word	0x4002b000
   23ff0:	0bad0000 	.word	0x0bad0000
   23ff4:	0bad000a 	.word	0x0bad000a
   23ff8:	0bad000b 	.word	0x0bad000b

00023ffc <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   23ffc:	b538      	push	{r3, r4, r5, lr}
   23ffe:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24000:	4d06      	ldr	r5, [pc, #24]	; (2401c <qspi_ready_wait+0x20>)
   24002:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   24006:	b933      	cbnz	r3, 24016 <qspi_ready_wait+0x1a>
   24008:	200a      	movs	r0, #10
   2400a:	f00a fc20 	bl	2e84e <nrfx_busy_wait>
   2400e:	3c01      	subs	r4, #1
   24010:	d1f7      	bne.n	24002 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   24012:	4803      	ldr	r0, [pc, #12]	; (24020 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   24014:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   24016:	4803      	ldr	r0, [pc, #12]	; (24024 <qspi_ready_wait+0x28>)
   24018:	e7fc      	b.n	24014 <qspi_ready_wait+0x18>
   2401a:	bf00      	nop
   2401c:	4002b000 	.word	0x4002b000
   24020:	0bad0007 	.word	0x0bad0007
   24024:	0bad0000 	.word	0x0bad0000

00024028 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   24028:	4b08      	ldr	r3, [pc, #32]	; (2404c <qspi_event_xfer_handle.constprop.0+0x24>)
   2402a:	689a      	ldr	r2, [r3, #8]
   2402c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2402e:	691a      	ldr	r2, [r3, #16]
   24030:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   24032:	699a      	ldr	r2, [r3, #24]
   24034:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   24036:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   24038:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   2403a:	b132      	cbz	r2, 2404a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   2403c:	695a      	ldr	r2, [r3, #20]
   2403e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   24040:	69da      	ldr	r2, [r3, #28]
   24042:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   24044:	2200      	movs	r2, #0
   24046:	60da      	str	r2, [r3, #12]
   24048:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   2404a:	4770      	bx	lr
   2404c:	2000b06c 	.word	0x2000b06c

00024050 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   24050:	b508      	push	{r3, lr}
    switch (port)
   24052:	0943      	lsrs	r3, r0, #5
   24054:	d00c      	beq.n	24070 <nrf_gpio_cfg.constprop.0+0x20>
   24056:	2b01      	cmp	r3, #1
   24058:	d01d      	beq.n	24096 <nrf_gpio_cfg.constprop.0+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2405a:	4913      	ldr	r1, [pc, #76]	; (240a8 <nrf_gpio_cfg.constprop.0+0x58>)
   2405c:	4813      	ldr	r0, [pc, #76]	; (240ac <nrf_gpio_cfg.constprop.0+0x5c>)
   2405e:	f240 2247 	movw	r2, #583	; 0x247
   24062:	f004 fdaf 	bl	28bc4 <assert_print>
   24066:	f240 2147 	movw	r1, #583	; 0x247
   2406a:	480f      	ldr	r0, [pc, #60]	; (240a8 <nrf_gpio_cfg.constprop.0+0x58>)
   2406c:	f004 fda3 	bl	28bb6 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   24070:	f04f 33ff 	mov.w	r3, #4294967295
   24074:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24076:	07da      	lsls	r2, r3, #31
   24078:	d5ef      	bpl.n	2405a <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   2407a:	4a0d      	ldr	r2, [pc, #52]	; (240b0 <nrf_gpio_cfg.constprop.0+0x60>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2407c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   24080:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   24084:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   24088:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2408c:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   24090:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   24094:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   24096:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   2409a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2409e:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   240a0:	07db      	lsls	r3, r3, #31
   240a2:	d5da      	bpl.n	2405a <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   240a4:	4a03      	ldr	r2, [pc, #12]	; (240b4 <nrf_gpio_cfg.constprop.0+0x64>)
   240a6:	e7e9      	b.n	2407c <nrf_gpio_cfg.constprop.0+0x2c>
   240a8:	00034718 	.word	0x00034718
   240ac:	00030da5 	.word	0x00030da5
   240b0:	40842500 	.word	0x40842500
   240b4:	40842800 	.word	0x40842800

000240b8 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   240b8:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   240ba:	4b0e      	ldr	r3, [pc, #56]	; (240f4 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   240bc:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   240be:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   240c2:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   240c6:	2807      	cmp	r0, #7
   240c8:	d813      	bhi.n	240f2 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   240ca:	e8df f000 	tbb	[pc, r0]
   240ce:	0f11      	.short	0x0f11
   240d0:	080a0b0d 	.word	0x080a0b0d
   240d4:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   240d6:	0e10      	lsrs	r0, r2, #24
   240d8:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   240da:	0c10      	lsrs	r0, r2, #16
   240dc:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   240de:	0a10      	lsrs	r0, r2, #8
   240e0:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   240e2:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   240e4:	0e1a      	lsrs	r2, r3, #24
   240e6:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   240e8:	0c1a      	lsrs	r2, r3, #16
   240ea:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   240ec:	0a1a      	lsrs	r2, r3, #8
   240ee:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   240f0:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   240f2:	bd10      	pop	{r4, pc}
   240f4:	4002b000 	.word	0x4002b000

000240f8 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   240f8:	3802      	subs	r0, #2
   240fa:	2807      	cmp	r0, #7
   240fc:	d81f      	bhi.n	2413e <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   240fe:	e8df f000 	tbb	[pc, r0]
   24102:	2729      	.short	0x2729
   24104:	21231125 	.word	0x21231125
   24108:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   2410a:	79cb      	ldrb	r3, [r1, #7]
   2410c:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   2410e:	798a      	ldrb	r2, [r1, #6]
   24110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   24114:	794a      	ldrb	r2, [r1, #5]
   24116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   2411a:	790a      	ldrb	r2, [r1, #4]
   2411c:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   2411e:	4a0e      	ldr	r2, [pc, #56]	; (24158 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24120:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   24124:	78cb      	ldrb	r3, [r1, #3]
   24126:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   24128:	788a      	ldrb	r2, [r1, #2]
   2412a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   2412e:	784a      	ldrb	r2, [r1, #1]
   24130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   24134:	780a      	ldrb	r2, [r1, #0]
   24136:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   24138:	4a07      	ldr	r2, [pc, #28]	; (24158 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   2413a:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   2413e:	4770      	bx	lr
    switch (length)
   24140:	2300      	movs	r3, #0
   24142:	e7e4      	b.n	2410e <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   24144:	2300      	movs	r3, #0
   24146:	e7e5      	b.n	24114 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   24148:	2300      	movs	r3, #0
   2414a:	e7e6      	b.n	2411a <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   2414c:	2300      	movs	r3, #0
   2414e:	e7eb      	b.n	24128 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   24150:	2300      	movs	r3, #0
   24152:	e7ec      	b.n	2412e <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   24154:	2300      	movs	r3, #0
   24156:	e7ed      	b.n	24134 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   24158:	4002b000 	.word	0x4002b000

0002415c <nrfx_qspi_init>:
{
   2415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2415e:	460d      	mov	r5, r1
   24160:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   24162:	4604      	mov	r4, r0
   24164:	b950      	cbnz	r0, 2417c <nrfx_qspi_init+0x20>
   24166:	496d      	ldr	r1, [pc, #436]	; (2431c <nrfx_qspi_init+0x1c0>)
   24168:	486d      	ldr	r0, [pc, #436]	; (24320 <nrfx_qspi_init+0x1c4>)
   2416a:	f44f 7288 	mov.w	r2, #272	; 0x110
   2416e:	f004 fd29 	bl	28bc4 <assert_print>
   24172:	f44f 7188 	mov.w	r1, #272	; 0x110
   24176:	4869      	ldr	r0, [pc, #420]	; (2431c <nrfx_qspi_init+0x1c0>)
   24178:	f004 fd1d 	bl	28bb6 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2417c:	4f69      	ldr	r7, [pc, #420]	; (24324 <nrfx_qspi_init+0x1c8>)
   2417e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   24182:	2b00      	cmp	r3, #0
   24184:	f040 80c6 	bne.w	24314 <nrfx_qspi_init+0x1b8>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   24188:	7cc2      	ldrb	r2, [r0, #19]
   2418a:	b112      	cbz	r2, 24192 <nrfx_qspi_init+0x36>
   2418c:	7d03      	ldrb	r3, [r0, #20]
   2418e:	2b00      	cmp	r3, #0
   24190:	d170      	bne.n	24274 <nrfx_qspi_init+0x118>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24192:	7920      	ldrb	r0, [r4, #4]
   24194:	28ff      	cmp	r0, #255	; 0xff
   24196:	f000 80bf 	beq.w	24318 <nrfx_qspi_init+0x1bc>
   2419a:	7963      	ldrb	r3, [r4, #5]
   2419c:	2bff      	cmp	r3, #255	; 0xff
   2419e:	f000 80bb 	beq.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   241a2:	79a3      	ldrb	r3, [r4, #6]
   241a4:	2bff      	cmp	r3, #255	; 0xff
   241a6:	f000 80b7 	beq.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   241aa:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   241ac:	29ff      	cmp	r1, #255	; 0xff
   241ae:	f000 80b3 	beq.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   241b2:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   241b4:	f8df c170 	ldr.w	ip, [pc, #368]	; 24328 <nrfx_qspi_init+0x1cc>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   241b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   241bc:	4563      	cmp	r3, ip
   241be:	f040 80ab 	bne.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   241c2:	290e      	cmp	r1, #14
   241c4:	f040 80a8 	bne.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241c8:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   241ca:	2bff      	cmp	r3, #255	; 0xff
   241cc:	d002      	beq.n	241d4 <nrfx_qspi_init+0x78>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241ce:	2b0f      	cmp	r3, #15
   241d0:	f040 80a2 	bne.w	24318 <nrfx_qspi_init+0x1bc>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241d4:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   241d6:	2bff      	cmp	r3, #255	; 0xff
   241d8:	d002      	beq.n	241e0 <nrfx_qspi_init+0x84>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   241da:	2b10      	cmp	r3, #16
   241dc:	f040 809c 	bne.w	24318 <nrfx_qspi_init+0x1bc>
    if (!p_config->skip_gpio_cfg)
   241e0:	b9d2      	cbnz	r2, 24218 <nrfx_qspi_init+0xbc>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   241e2:	2103      	movs	r1, #3
   241e4:	f7ff ff34 	bl	24050 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   241e8:	2103      	movs	r1, #3
   241ea:	7960      	ldrb	r0, [r4, #5]
   241ec:	f7ff ff30 	bl	24050 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   241f0:	2103      	movs	r1, #3
   241f2:	79a0      	ldrb	r0, [r4, #6]
   241f4:	f7ff ff2c 	bl	24050 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   241f8:	79e0      	ldrb	r0, [r4, #7]
   241fa:	2103      	movs	r1, #3
   241fc:	f7ff ff28 	bl	24050 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24200:	7a20      	ldrb	r0, [r4, #8]
   24202:	28ff      	cmp	r0, #255	; 0xff
   24204:	d002      	beq.n	2420c <nrfx_qspi_init+0xb0>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   24206:	2103      	movs	r1, #3
   24208:	f7ff ff22 	bl	24050 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2420c:	7a60      	ldrb	r0, [r4, #9]
   2420e:	28ff      	cmp	r0, #255	; 0xff
   24210:	d002      	beq.n	24218 <nrfx_qspi_init+0xbc>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   24212:	2103      	movs	r1, #3
   24214:	f7ff ff1c 	bl	24050 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   24218:	7d23      	ldrb	r3, [r4, #20]
   2421a:	bb5b      	cbnz	r3, 24274 <nrfx_qspi_init+0x118>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   2421c:	7923      	ldrb	r3, [r4, #4]
   2421e:	2bff      	cmp	r3, #255	; 0xff
   24220:	bf14      	ite	ne
   24222:	461a      	movne	r2, r3
   24224:	f04f 32ff 	moveq.w	r2, #4294967295
   24228:	4b40      	ldr	r3, [pc, #256]	; (2432c <nrfx_qspi_init+0x1d0>)
   2422a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   2422e:	7962      	ldrb	r2, [r4, #5]
   24230:	2aff      	cmp	r2, #255	; 0xff
   24232:	bf08      	it	eq
   24234:	f04f 32ff 	moveq.w	r2, #4294967295
   24238:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   2423c:	79a2      	ldrb	r2, [r4, #6]
   2423e:	2aff      	cmp	r2, #255	; 0xff
   24240:	bf08      	it	eq
   24242:	f04f 32ff 	moveq.w	r2, #4294967295
   24246:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   2424a:	79e2      	ldrb	r2, [r4, #7]
   2424c:	2aff      	cmp	r2, #255	; 0xff
   2424e:	bf08      	it	eq
   24250:	f04f 32ff 	moveq.w	r2, #4294967295
   24254:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   24258:	7a22      	ldrb	r2, [r4, #8]
   2425a:	2aff      	cmp	r2, #255	; 0xff
   2425c:	bf08      	it	eq
   2425e:	f04f 32ff 	moveq.w	r2, #4294967295
   24262:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   24266:	7a62      	ldrb	r2, [r4, #9]
   24268:	2aff      	cmp	r2, #255	; 0xff
   2426a:	bf08      	it	eq
   2426c:	f04f 32ff 	moveq.w	r2, #4294967295
   24270:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   24274:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   24276:	4a2d      	ldr	r2, [pc, #180]	; (2432c <nrfx_qspi_init+0x1d0>)
   24278:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2427c:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   2427e:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   24280:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24282:	019b      	lsls	r3, r3, #6
   24284:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   24288:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2428a:	7b61      	ldrb	r1, [r4, #13]
   2428c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   24290:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   24294:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   24296:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   2429a:	bbb1      	cbnz	r1, 2430a <nrfx_qspi_init+0x1ae>
        regval |= ((1 << 16) | (1 << 17));
   2429c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   242a0:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   242a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   242a8:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   242ac:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   242b0:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   242b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   242b6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   242ba:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   242bc:	7be1      	ldrb	r1, [r4, #15]
   242be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   242c2:	7c21      	ldrb	r1, [r4, #16]
   242c4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   242c8:	7c61      	ldrb	r1, [r4, #17]
   242ca:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   242ce:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   242d2:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   242d4:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   242d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   242dc:	2301      	movs	r3, #1
   242de:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   242e2:	b115      	cbz	r5, 242ea <nrfx_qspi_init+0x18e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   242e4:	202b      	movs	r0, #43	; 0x2b
   242e6:	f7e8 fcbb 	bl	cc60 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   242ea:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   242ec:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   242ee:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   242f2:	4b0e      	ldr	r3, [pc, #56]	; (2432c <nrfx_qspi_init+0x1d0>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   242f4:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   242f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   242fc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24300:	601a      	str	r2, [r3, #0]
}
   24302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   24306:	f7ff be79 	b.w	23ffc <qspi_ready_wait>
        regval &= ~(1 << 17);
   2430a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   2430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24312:	e7c5      	b.n	242a0 <nrfx_qspi_init+0x144>
        return NRFX_ERROR_INVALID_STATE;
   24314:	4806      	ldr	r0, [pc, #24]	; (24330 <nrfx_qspi_init+0x1d4>)
}
   24316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24318:	4806      	ldr	r0, [pc, #24]	; (24334 <nrfx_qspi_init+0x1d8>)
   2431a:	e7fc      	b.n	24316 <nrfx_qspi_init+0x1ba>
   2431c:	00035080 	.word	0x00035080
   24320:	00030da5 	.word	0x00030da5
   24324:	2000b06c 	.word	0x2000b06c
   24328:	000d1211 	.word	0x000d1211
   2432c:	4002b000 	.word	0x4002b000
   24330:	0bad0005 	.word	0x0bad0005
   24334:	0bad0004 	.word	0x0bad0004

00024338 <nrfx_qspi_cinstr_xfer>:
{
   24338:	b570      	push	{r4, r5, r6, lr}
   2433a:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2433c:	4a25      	ldr	r2, [pc, #148]	; (243d4 <nrfx_qspi_cinstr_xfer+0x9c>)
{
   2433e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   24340:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   24344:	b952      	cbnz	r2, 2435c <nrfx_qspi_cinstr_xfer+0x24>
   24346:	4924      	ldr	r1, [pc, #144]	; (243d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   24348:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   2434c:	4823      	ldr	r0, [pc, #140]	; (243dc <nrfx_qspi_cinstr_xfer+0xa4>)
   2434e:	f004 fc39 	bl	28bc4 <assert_print>
   24352:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   24356:	4820      	ldr	r0, [pc, #128]	; (243d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   24358:	f004 fc2d 	bl	28bb6 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   2435c:	2a01      	cmp	r2, #1
   2435e:	d136      	bne.n	243ce <nrfx_qspi_cinstr_xfer+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24360:	2200      	movs	r2, #0
   24362:	4e1f      	ldr	r6, [pc, #124]	; (243e0 <nrfx_qspi_cinstr_xfer+0xa8>)
   24364:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   24368:	b111      	cbz	r1, 24370 <nrfx_qspi_cinstr_xfer+0x38>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   2436a:	7840      	ldrb	r0, [r0, #1]
   2436c:	f7ff fec4 	bl	240f8 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   24370:	2301      	movs	r3, #1
   24372:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24376:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24378:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2437a:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2437c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24380:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24382:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24384:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24386:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2438a:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2438c:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   24390:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24392:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24396:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   2439a:	f7ff fe2f 	bl	23ffc <qspi_ready_wait>
   2439e:	4b11      	ldr	r3, [pc, #68]	; (243e4 <nrfx_qspi_cinstr_xfer+0xac>)
   243a0:	4298      	cmp	r0, r3
   243a2:	d10a      	bne.n	243ba <nrfx_qspi_cinstr_xfer+0x82>
        NRFX_ASSERT(p_config->wipwait);
   243a4:	792b      	ldrb	r3, [r5, #4]
   243a6:	b98b      	cbnz	r3, 243cc <nrfx_qspi_cinstr_xfer+0x94>
   243a8:	490b      	ldr	r1, [pc, #44]	; (243d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   243aa:	f240 126b 	movw	r2, #363	; 0x16b
   243ae:	480b      	ldr	r0, [pc, #44]	; (243dc <nrfx_qspi_cinstr_xfer+0xa4>)
   243b0:	f004 fc08 	bl	28bc4 <assert_print>
   243b4:	f240 116b 	movw	r1, #363	; 0x16b
   243b8:	e7cd      	b.n	24356 <nrfx_qspi_cinstr_xfer+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243ba:	2300      	movs	r3, #0
   243bc:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   243c0:	b11c      	cbz	r4, 243ca <nrfx_qspi_cinstr_xfer+0x92>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   243c2:	4621      	mov	r1, r4
   243c4:	7868      	ldrb	r0, [r5, #1]
   243c6:	f7ff fe77 	bl	240b8 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   243ca:	4807      	ldr	r0, [pc, #28]	; (243e8 <nrfx_qspi_cinstr_xfer+0xb0>)
}
   243cc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   243ce:	4807      	ldr	r0, [pc, #28]	; (243ec <nrfx_qspi_cinstr_xfer+0xb4>)
   243d0:	e7fc      	b.n	243cc <nrfx_qspi_cinstr_xfer+0x94>
   243d2:	bf00      	nop
   243d4:	2000b06c 	.word	0x2000b06c
   243d8:	00035080 	.word	0x00035080
   243dc:	00030da5 	.word	0x00030da5
   243e0:	4002b000 	.word	0x4002b000
   243e4:	0bad0007 	.word	0x0bad0007
   243e8:	0bad0000 	.word	0x0bad0000
   243ec:	0bad000b 	.word	0x0bad000b

000243f0 <nrfx_qspi_mem_busy_check>:
{
   243f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   243f2:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   243f4:	4a0c      	ldr	r2, [pc, #48]	; (24428 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   243f6:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   243f8:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   243fa:	f10d 0207 	add.w	r2, sp, #7
   243fe:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   24400:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   24404:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   24408:	f7ff ff96 	bl	24338 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   2440c:	4b07      	ldr	r3, [pc, #28]	; (2442c <nrfx_qspi_mem_busy_check+0x3c>)
   2440e:	4298      	cmp	r0, r3
   24410:	d106      	bne.n	24420 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   24412:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   24416:	f013 0f01 	tst.w	r3, #1
   2441a:	4b05      	ldr	r3, [pc, #20]	; (24430 <nrfx_qspi_mem_busy_check+0x40>)
   2441c:	bf18      	it	ne
   2441e:	4618      	movne	r0, r3
}
   24420:	b005      	add	sp, #20
   24422:	f85d fb04 	ldr.w	pc, [sp], #4
   24426:	bf00      	nop
   24428:	01000205 	.word	0x01000205
   2442c:	0bad0000 	.word	0x0bad0000
   24430:	0bad000b 	.word	0x0bad000b

00024434 <nrfx_qspi_uninit>:
{
   24434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   24438:	4e29      	ldr	r6, [pc, #164]	; (244e0 <nrfx_qspi_uninit+0xac>)
   2443a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   2443e:	b953      	cbnz	r3, 24456 <nrfx_qspi_uninit+0x22>
   24440:	4928      	ldr	r1, [pc, #160]	; (244e4 <nrfx_qspi_uninit+0xb0>)
   24442:	4829      	ldr	r0, [pc, #164]	; (244e8 <nrfx_qspi_uninit+0xb4>)
   24444:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   24448:	f004 fbbc 	bl	28bc4 <assert_print>
   2444c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   24450:	4824      	ldr	r0, [pc, #144]	; (244e4 <nrfx_qspi_uninit+0xb0>)
   24452:	f004 fbb0 	bl	28bb6 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   24456:	202b      	movs	r0, #43	; 0x2b
   24458:	f7e8 fc10 	bl	cc7c <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   2445c:	4b23      	ldr	r3, [pc, #140]	; (244ec <nrfx_qspi_uninit+0xb8>)
   2445e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   24462:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   24466:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   2446a:	bf04      	itt	eq
   2446c:	4a20      	ldreq	r2, [pc, #128]	; (244f0 <nrfx_qspi_uninit+0xbc>)
   2446e:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   24472:	2201      	movs	r2, #1
   24474:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24478:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   2447a:	2200      	movs	r2, #0
   2447c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24480:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   24484:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   24488:	bb22      	cbnz	r2, 244d4 <nrfx_qspi_uninit+0xa0>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   2448a:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   2448e:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   24492:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   24494:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   24498:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   2449c:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   244a0:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   244a4:	f00a fa56 	bl	2e954 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   244a8:	fa5f f089 	uxtb.w	r0, r9
   244ac:	f00a fa52 	bl	2e954 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   244b0:	fa5f f088 	uxtb.w	r0, r8
   244b4:	f00a fa4e 	bl	2e954 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   244b8:	b2f8      	uxtb	r0, r7
   244ba:	f00a fa4b 	bl	2e954 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   244be:	b2e8      	uxtb	r0, r5
   244c0:	28ff      	cmp	r0, #255	; 0xff
   244c2:	b2e4      	uxtb	r4, r4
   244c4:	d001      	beq.n	244ca <nrfx_qspi_uninit+0x96>
        nrf_gpio_cfg_default(pins.io2_pin);
   244c6:	f00a fa45 	bl	2e954 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   244ca:	2cff      	cmp	r4, #255	; 0xff
   244cc:	d002      	beq.n	244d4 <nrfx_qspi_uninit+0xa0>
        nrf_gpio_cfg_default(pins.io3_pin);
   244ce:	4620      	mov	r0, r4
   244d0:	f00a fa40 	bl	2e954 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   244d4:	2300      	movs	r3, #0
   244d6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   244da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   244de:	bf00      	nop
   244e0:	2000b06c 	.word	0x2000b06c
   244e4:	00035080 	.word	0x00035080
   244e8:	00030da5 	.word	0x00030da5
   244ec:	4002b000 	.word	0x4002b000
   244f0:	00030100 	.word	0x00030100

000244f4 <nrfx_qspi_erase>:
{
   244f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   244f6:	4a1a      	ldr	r2, [pc, #104]	; (24560 <nrfx_qspi_erase+0x6c>)
   244f8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   244fc:	b953      	cbnz	r3, 24514 <nrfx_qspi_erase+0x20>
   244fe:	4919      	ldr	r1, [pc, #100]	; (24564 <nrfx_qspi_erase+0x70>)
   24500:	4819      	ldr	r0, [pc, #100]	; (24568 <nrfx_qspi_erase+0x74>)
   24502:	f44f 720a 	mov.w	r2, #552	; 0x228
   24506:	f004 fb5d 	bl	28bc4 <assert_print>
   2450a:	f44f 710a 	mov.w	r1, #552	; 0x228
   2450e:	4815      	ldr	r0, [pc, #84]	; (24564 <nrfx_qspi_erase+0x70>)
   24510:	f004 fb51 	bl	28bb6 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   24514:	078c      	lsls	r4, r1, #30
   24516:	d11e      	bne.n	24556 <nrfx_qspi_erase+0x62>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   24518:	6814      	ldr	r4, [r2, #0]
   2451a:	b10c      	cbz	r4, 24520 <nrfx_qspi_erase+0x2c>
   2451c:	2b01      	cmp	r3, #1
   2451e:	d11c      	bne.n	2455a <nrfx_qspi_erase+0x66>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   24520:	2304      	movs	r3, #4
   24522:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   24526:	4b11      	ldr	r3, [pc, #68]	; (2456c <nrfx_qspi_erase+0x78>)
   24528:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2452c:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   2452e:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24532:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24536:	2101      	movs	r1, #1
   24538:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   2453a:	6810      	ldr	r0, [r2, #0]
   2453c:	b940      	cbnz	r0, 24550 <nrfx_qspi_erase+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2453e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   24542:	2900      	cmp	r1, #0
   24544:	d0fb      	beq.n	2453e <nrfx_qspi_erase+0x4a>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   24546:	2301      	movs	r3, #1
   24548:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   2454c:	4808      	ldr	r0, [pc, #32]	; (24570 <nrfx_qspi_erase+0x7c>)
}
   2454e:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   24550:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   24554:	e7fa      	b.n	2454c <nrfx_qspi_erase+0x58>
        return NRFX_ERROR_INVALID_ADDR;
   24556:	4807      	ldr	r0, [pc, #28]	; (24574 <nrfx_qspi_erase+0x80>)
   24558:	e7f9      	b.n	2454e <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_BUSY;
   2455a:	4807      	ldr	r0, [pc, #28]	; (24578 <nrfx_qspi_erase+0x84>)
   2455c:	e7f7      	b.n	2454e <nrfx_qspi_erase+0x5a>
   2455e:	bf00      	nop
   24560:	2000b06c 	.word	0x2000b06c
   24564:	00035080 	.word	0x00035080
   24568:	00030da5 	.word	0x00030da5
   2456c:	4002b000 	.word	0x4002b000
   24570:	0bad0000 	.word	0x0bad0000
   24574:	0bad000a 	.word	0x0bad000a
   24578:	0bad000b 	.word	0x0bad000b

0002457c <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   2457c:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2457e:	4b17      	ldr	r3, [pc, #92]	; (245dc <nrfx_qspi_irq_handler+0x60>)
   24580:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   24584:	b1e2      	cbz	r2, 245c0 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24586:	2200      	movs	r2, #0
    switch (m_cb.state)
   24588:	4c15      	ldr	r4, [pc, #84]	; (245e0 <nrfx_qspi_irq_handler+0x64>)
   2458a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2458e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   24592:	2a03      	cmp	r2, #3
   24594:	d015      	beq.n	245c2 <nrfx_qspi_irq_handler+0x46>
   24596:	2a04      	cmp	r2, #4
   24598:	d015      	beq.n	245c6 <nrfx_qspi_irq_handler+0x4a>
   2459a:	2a02      	cmp	r2, #2
   2459c:	d104      	bne.n	245a8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   2459e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   245a0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   245a4:	f7ff fd40 	bl	24028 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   245a8:	68a3      	ldr	r3, [r4, #8]
   245aa:	b913      	cbnz	r3, 245b2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   245ac:	2301      	movs	r3, #1
   245ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   245b2:	e9d4 3100 	ldrd	r3, r1, [r4]
   245b6:	2000      	movs	r0, #0
   245b8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   245ba:	2300      	movs	r3, #0
   245bc:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   245c0:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   245c2:	2302      	movs	r3, #2
   245c4:	e7ec      	b.n	245a0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   245c6:	2203      	movs	r2, #3
   245c8:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   245cc:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   245d0:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   245d2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   245d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   245da:	e7e5      	b.n	245a8 <nrfx_qspi_irq_handler+0x2c>
   245dc:	4002b000 	.word	0x4002b000
   245e0:	2000b06c 	.word	0x2000b06c

000245e4 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   245e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245e8:	460e      	mov	r6, r1
   245ea:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   245ec:	4d0c      	ldr	r5, [pc, #48]	; (24620 <metal_generic_dev_open+0x3c>)
   245ee:	f855 4f18 	ldr.w	r4, [r5, #24]!
   245f2:	42ac      	cmp	r4, r5
   245f4:	d103      	bne.n	245fe <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   245f6:	f06f 0012 	mvn.w	r0, #18
   245fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   245fe:	4631      	mov	r1, r6
   24600:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   24604:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   24608:	f005 ff41 	bl	2a48e <strcmp>
   2460c:	b930      	cbnz	r0, 2461c <metal_generic_dev_open+0x38>
			*device = dev;
   2460e:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   24612:	4640      	mov	r0, r8
}
   24614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   24618:	f00a baa2 	b.w	2eb60 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   2461c:	6824      	ldr	r4, [r4, #0]
   2461e:	e7e8      	b.n	245f2 <metal_generic_dev_open+0xe>
   24620:	2000b0a0 	.word	0x2000b0a0

00024624 <metal_bus_unregister>:
{
   24624:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   24626:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2462a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2462c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   2462e:	f100 0324 	add.w	r3, r0, #36	; 0x24
   24632:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   24634:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   24638:	6843      	ldr	r3, [r0, #4]
{
   2463a:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   2463c:	b103      	cbz	r3, 24640 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   2463e:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   24640:	4b05      	ldr	r3, [pc, #20]	; (24658 <metal_bus_unregister+0x34>)
   24642:	781a      	ldrb	r2, [r3, #0]
   24644:	2a06      	cmp	r2, #6
   24646:	d905      	bls.n	24654 <metal_bus_unregister+0x30>
   24648:	685b      	ldr	r3, [r3, #4]
   2464a:	b11b      	cbz	r3, 24654 <metal_bus_unregister+0x30>
   2464c:	2007      	movs	r0, #7
   2464e:	6822      	ldr	r2, [r4, #0]
   24650:	4902      	ldr	r1, [pc, #8]	; (2465c <metal_bus_unregister+0x38>)
   24652:	4798      	blx	r3
}
   24654:	2000      	movs	r0, #0
   24656:	bd10      	pop	{r4, pc}
   24658:	2000b0a0 	.word	0x2000b0a0
   2465c:	000350bc 	.word	0x000350bc

00024660 <metal_bus_find>:
{
   24660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24664:	4607      	mov	r7, r0
   24666:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   24668:	4e0b      	ldr	r6, [pc, #44]	; (24698 <metal_bus_find+0x38>)
   2466a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   2466e:	42b4      	cmp	r4, r6
   24670:	d102      	bne.n	24678 <metal_bus_find+0x18>
	return -ENOENT;
   24672:	f06f 0001 	mvn.w	r0, #1
   24676:	e00a      	b.n	2468e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   24678:	4639      	mov	r1, r7
   2467a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   2467e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   24682:	f005 ff04 	bl	2a48e <strcmp>
   24686:	b920      	cbnz	r0, 24692 <metal_bus_find+0x32>
   24688:	b11d      	cbz	r5, 24692 <metal_bus_find+0x32>
			*result = bus;
   2468a:	f8c5 8000 	str.w	r8, [r5]
}
   2468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   24692:	6824      	ldr	r4, [r4, #0]
   24694:	e7eb      	b.n	2466e <metal_bus_find+0xe>
   24696:	bf00      	nop
   24698:	2000b0a0 	.word	0x2000b0a0

0002469c <metal_bus_register>:
{
   2469c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   2469e:	4604      	mov	r4, r0
   246a0:	b910      	cbnz	r0, 246a8 <metal_bus_register+0xc>
		return -EINVAL;
   246a2:	f06f 0015 	mvn.w	r0, #21
}
   246a6:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   246a8:	6800      	ldr	r0, [r0, #0]
   246aa:	2800      	cmp	r0, #0
   246ac:	d0f9      	beq.n	246a2 <metal_bus_register+0x6>
   246ae:	f005 fede 	bl	2a46e <strlen>
   246b2:	2800      	cmp	r0, #0
   246b4:	d0f5      	beq.n	246a2 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   246b6:	2100      	movs	r1, #0
   246b8:	6820      	ldr	r0, [r4, #0]
   246ba:	f7ff ffd1 	bl	24660 <metal_bus_find>
   246be:	b1c8      	cbz	r0, 246f4 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   246c0:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   246c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   246c8:	4b0c      	ldr	r3, [pc, #48]	; (246fc <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   246ca:	f104 0224 	add.w	r2, r4, #36	; 0x24
   246ce:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   246d0:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   246d4:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   246d6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   246d8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   246da:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   246dc:	781a      	ldrb	r2, [r3, #0]
   246de:	2a06      	cmp	r2, #6
   246e0:	d901      	bls.n	246e6 <metal_bus_register+0x4a>
   246e2:	685b      	ldr	r3, [r3, #4]
   246e4:	b90b      	cbnz	r3, 246ea <metal_bus_register+0x4e>
	return 0;
   246e6:	2000      	movs	r0, #0
   246e8:	e7dd      	b.n	246a6 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   246ea:	2007      	movs	r0, #7
   246ec:	6822      	ldr	r2, [r4, #0]
   246ee:	4904      	ldr	r1, [pc, #16]	; (24700 <metal_bus_register+0x64>)
   246f0:	4798      	blx	r3
   246f2:	e7f8      	b.n	246e6 <metal_bus_register+0x4a>
		return -EEXIST;
   246f4:	f06f 0010 	mvn.w	r0, #16
   246f8:	e7d5      	b.n	246a6 <metal_bus_register+0xa>
   246fa:	bf00      	nop
   246fc:	2000b0a0 	.word	0x2000b0a0
   24700:	000350be 	.word	0x000350be

00024704 <metal_device_close>:
	metal_assert(device && device->bus);
   24704:	4601      	mov	r1, r0
{
   24706:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   24708:	b108      	cbz	r0, 2470e <metal_device_close+0xa>
   2470a:	6840      	ldr	r0, [r0, #4]
   2470c:	b940      	cbnz	r0, 24720 <metal_device_close+0x1c>
   2470e:	4907      	ldr	r1, [pc, #28]	; (2472c <metal_device_close+0x28>)
   24710:	4807      	ldr	r0, [pc, #28]	; (24730 <metal_device_close+0x2c>)
   24712:	2251      	movs	r2, #81	; 0x51
   24714:	f004 fa56 	bl	28bc4 <assert_print>
   24718:	2151      	movs	r1, #81	; 0x51
   2471a:	4804      	ldr	r0, [pc, #16]	; (2472c <metal_device_close+0x28>)
   2471c:	f004 fa4b 	bl	28bb6 <assert_post_action>
	if (device->bus->ops.dev_close)
   24720:	68c3      	ldr	r3, [r0, #12]
   24722:	b113      	cbz	r3, 2472a <metal_device_close+0x26>
}
   24724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   24728:	4718      	bx	r3
}
   2472a:	bd10      	pop	{r4, pc}
   2472c:	000350d1 	.word	0x000350d1
   24730:	00030da5 	.word	0x00030da5

00024734 <metal_register_generic_device>:
{
   24734:	b510      	push	{r4, lr}
   24736:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   24738:	6800      	ldr	r0, [r0, #0]
   2473a:	b910      	cbnz	r0, 24742 <metal_register_generic_device+0xe>
		return -EINVAL;
   2473c:	f06f 0015 	mvn.w	r0, #21
}
   24740:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   24742:	f005 fe94 	bl	2a46e <strlen>
   24746:	2800      	cmp	r0, #0
   24748:	d0f8      	beq.n	2473c <metal_register_generic_device+0x8>
   2474a:	68a3      	ldr	r3, [r4, #8]
   2474c:	2b01      	cmp	r3, #1
   2474e:	d8f5      	bhi.n	2473c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   24750:	4b06      	ldr	r3, [pc, #24]	; (2476c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   24752:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   24756:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   24758:	4b05      	ldr	r3, [pc, #20]	; (24770 <metal_register_generic_device+0x3c>)
   2475a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   2475c:	f103 0018 	add.w	r0, r3, #24
   24760:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   24762:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   24764:	61d9      	str	r1, [r3, #28]
	return 0;
   24766:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   24768:	6011      	str	r1, [r2, #0]
}
   2476a:	e7e9      	b.n	24740 <metal_register_generic_device+0xc>
   2476c:	20008b88 	.word	0x20008b88
   24770:	2000b0a0 	.word	0x2000b0a0

00024774 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   24774:	b538      	push	{r3, r4, r5, lr}
   24776:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   24778:	4c0d      	ldr	r4, [pc, #52]	; (247b0 <metal_init+0x3c>)
   2477a:	2220      	movs	r2, #32
   2477c:	4620      	mov	r0, r4
   2477e:	2100      	movs	r1, #0
   24780:	f005 fed6 	bl	2a530 <memset>

	_metal.common.log_handler   = params->log_handler;
   24784:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   24786:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   24788:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   2478a:	4623      	mov	r3, r4
   2478c:	792a      	ldrb	r2, [r5, #4]
   2478e:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   24792:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   24796:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   2479a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   2479e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   247a2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   247a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   247aa:	f000 b80f 	b.w	247cc <metal_sys_init>
   247ae:	bf00      	nop
   247b0:	2000b0a0 	.word	0x2000b0a0

000247b4 <metal_finish>:

void metal_finish(void)
{
   247b4:	b508      	push	{r3, lr}
	metal_sys_finish();
   247b6:	f000 f811 	bl	247dc <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   247ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   247be:	2220      	movs	r2, #32
   247c0:	2100      	movs	r1, #0
   247c2:	4801      	ldr	r0, [pc, #4]	; (247c8 <metal_finish+0x14>)
   247c4:	f005 beb4 	b.w	2a530 <memset>
   247c8:	2000b0a0 	.word	0x2000b0a0

000247cc <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   247cc:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   247ce:	4802      	ldr	r0, [pc, #8]	; (247d8 <metal_sys_init+0xc>)
   247d0:	f7ff ff64 	bl	2469c <metal_bus_register>
	return 0;
}
   247d4:	2000      	movs	r0, #0
   247d6:	bd08      	pop	{r3, pc}
   247d8:	20008b88 	.word	0x20008b88

000247dc <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   247dc:	4801      	ldr	r0, [pc, #4]	; (247e4 <metal_sys_finish+0x8>)
   247de:	f7ff bf21 	b.w	24624 <metal_bus_unregister>
   247e2:	bf00      	nop
   247e4:	20008b88 	.word	0x20008b88

000247e8 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   247e8:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   247ea:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   247ec:	2b06      	cmp	r3, #6
{
   247ee:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   247f0:	bf88      	it	hi
   247f2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   247f4:	4b09      	ldr	r3, [pc, #36]	; (2481c <metal_zephyr_log_handler+0x34>)
{
   247f6:	ac05      	add	r4, sp, #20
   247f8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   247fc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   24800:	4807      	ldr	r0, [pc, #28]	; (24820 <metal_zephyr_log_handler+0x38>)
   24802:	f003 ffd7 	bl	287b4 <printk>

	va_start(args, format);
	vprintk(format, args);
   24806:	4621      	mov	r1, r4
   24808:	4628      	mov	r0, r5
	va_start(args, format);
   2480a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   2480c:	f003 ffd0 	bl	287b0 <vprintk>
	va_end(args);
}
   24810:	b002      	add	sp, #8
   24812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24816:	b003      	add	sp, #12
   24818:	4770      	bx	lr
   2481a:	bf00      	nop
   2481c:	00030c94 	.word	0x00030c94
   24820:	00031e14 	.word	0x00031e14

00024824 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   24824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24828:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   2482a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2482c:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   2482e:	4293      	cmp	r3, r2
{
   24830:	4617      	mov	r7, r2
   24832:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   24834:	d341      	bcc.n	248ba <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   24836:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   24838:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   2483c:	42bd      	cmp	r5, r7
   2483e:	d103      	bne.n	24848 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   24840:	2000      	movs	r0, #0
}
   24842:	b007      	add	sp, #28
   24844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   24848:	fb0b f805 	mul.w	r8, fp, r5
   2484c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24850:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   24852:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   24856:	1d23      	adds	r3, r4, #4
   24858:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   2485a:	b9ca      	cbnz	r2, 24890 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   2485c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2485e:	6861      	ldr	r1, [r4, #4]
   24860:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   24862:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   24866:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   24868:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   2486a:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   2486e:	1e5c      	subs	r4, r3, #1
   24870:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   24874:	425b      	negs	r3, r3
   24876:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   2487a:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   2487c:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   24880:	6884      	ldr	r4, [r0, #8]
   24882:	3306      	adds	r3, #6
   24884:	42a1      	cmp	r1, r4
   24886:	bf28      	it	cs
   24888:	f04f 31ff 	movcs.w	r1, #4294967295
   2488c:	f00a f934 	bl	2eaf8 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24890:	f859 3008 	ldr.w	r3, [r9, r8]
   24894:	4630      	mov	r0, r6
   24896:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   24898:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   2489a:	b2a9      	uxth	r1, r5
   2489c:	6a1b      	ldr	r3, [r3, #32]
   2489e:	9301      	str	r3, [sp, #4]
   248a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   248a2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   248a6:	9300      	str	r3, [sp, #0]
   248a8:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   248ac:	9b05      	ldr	r3, [sp, #20]
   248ae:	f00a f99c 	bl	2ebea <virtqueue_create>
		if (ret)
   248b2:	2800      	cmp	r0, #0
   248b4:	d1c5      	bne.n	24842 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   248b6:	3501      	adds	r5, #1
   248b8:	e7c0      	b.n	2483c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   248ba:	4801      	ldr	r0, [pc, #4]	; (248c0 <virtio_create_virtqueues+0x9c>)
   248bc:	e7c1      	b.n	24842 <virtio_create_virtqueues+0x1e>
   248be:	bf00      	nop
   248c0:	fffff440 	.word	0xfffff440

000248c4 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   248c4:	b510      	push	{r4, lr}
	if (vq) {
   248c6:	4604      	mov	r4, r0
   248c8:	b190      	cbz	r0, 248f0 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   248ca:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   248cc:	8943      	ldrh	r3, [r0, #10]
   248ce:	429a      	cmp	r2, r3
   248d0:	d009      	beq.n	248e6 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   248d2:	4b08      	ldr	r3, [pc, #32]	; (248f4 <virtqueue_free+0x30>)
   248d4:	781a      	ldrb	r2, [r3, #0]
   248d6:	2a03      	cmp	r2, #3
   248d8:	d905      	bls.n	248e6 <virtqueue_free+0x22>
   248da:	685b      	ldr	r3, [r3, #4]
   248dc:	b11b      	cbz	r3, 248e6 <virtqueue_free+0x22>
   248de:	6842      	ldr	r2, [r0, #4]
   248e0:	4905      	ldr	r1, [pc, #20]	; (248f8 <virtqueue_free+0x34>)
   248e2:	2004      	movs	r0, #4
   248e4:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   248e6:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   248e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   248ec:	f00a bf2a 	b.w	2f744 <k_free>
   248f0:	bd10      	pop	{r4, pc}
   248f2:	bf00      	nop
   248f4:	2000b0a0 	.word	0x2000b0a0
   248f8:	000351a0 	.word	0x000351a0

000248fc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   248fc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   248fe:	8944      	ldrh	r4, [r0, #10]
   24900:	428c      	cmp	r4, r1
   24902:	d912      	bls.n	2492a <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   24904:	6a03      	ldr	r3, [r0, #32]
   24906:	3c01      	subs	r4, #1
   24908:	885d      	ldrh	r5, [r3, #2]
   2490a:	402c      	ands	r4, r5
   2490c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   24910:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   24912:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   24914:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   24918:	6a02      	ldr	r2, [r0, #32]
   2491a:	8853      	ldrh	r3, [r2, #2]
   2491c:	3301      	adds	r3, #1
   2491e:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   24920:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   24922:	3301      	adds	r3, #1
   24924:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   24926:	2000      	movs	r0, #0
}
   24928:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   2492a:	4801      	ldr	r0, [pc, #4]	; (24930 <virtqueue_add_consumed_buffer+0x34>)
   2492c:	e7fc      	b.n	24928 <virtqueue_add_consumed_buffer+0x2c>
   2492e:	bf00      	nop
   24930:	fffff441 	.word	0xfffff441

00024934 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   24934:	b470      	push	{r4, r5, r6}
   24936:	9e03      	ldr	r6, [sp, #12]
   24938:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   2493a:	b158      	cbz	r0, 24954 <rpmsg_send_offchannel_raw+0x20>
   2493c:	6a00      	ldr	r0, [r0, #32]
   2493e:	b148      	cbz	r0, 24954 <rpmsg_send_offchannel_raw+0x20>
   24940:	b143      	cbz	r3, 24954 <rpmsg_send_offchannel_raw+0x20>
   24942:	3401      	adds	r4, #1
   24944:	d006      	beq.n	24954 <rpmsg_send_offchannel_raw+0x20>
   24946:	2e00      	cmp	r6, #0
   24948:	db04      	blt.n	24954 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   2494a:	6f84      	ldr	r4, [r0, #120]	; 0x78
   2494c:	b114      	cbz	r4, 24954 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   2494e:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   24950:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   24952:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24954:	4801      	ldr	r0, [pc, #4]	; (2495c <rpmsg_send_offchannel_raw+0x28>)
}
   24956:	bc70      	pop	{r4, r5, r6}
   24958:	4770      	bx	lr
   2495a:	bf00      	nop
   2495c:	fffff82d 	.word	0xfffff82d

00024960 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   24960:	b470      	push	{r4, r5, r6}
   24962:	9e03      	ldr	r6, [sp, #12]
   24964:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24966:	b160      	cbz	r0, 24982 <rpmsg_send_offchannel_nocopy+0x22>
   24968:	6a00      	ldr	r0, [r0, #32]
   2496a:	b150      	cbz	r0, 24982 <rpmsg_send_offchannel_nocopy+0x22>
   2496c:	b14b      	cbz	r3, 24982 <rpmsg_send_offchannel_nocopy+0x22>
   2496e:	3401      	adds	r4, #1
   24970:	d007      	beq.n	24982 <rpmsg_send_offchannel_nocopy+0x22>
   24972:	2e00      	cmp	r6, #0
   24974:	db05      	blt.n	24982 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   24976:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   2497a:	b114      	cbz	r4, 24982 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   2497c:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   2497e:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   24980:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   24982:	4801      	ldr	r0, [pc, #4]	; (24988 <rpmsg_send_offchannel_nocopy+0x28>)
}
   24984:	bc70      	pop	{r4, r5, r6}
   24986:	4770      	bx	lr
   24988:	fffff82d 	.word	0xfffff82d

0002498c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   2498c:	b570      	push	{r4, r5, r6, lr}
   2498e:	460c      	mov	r4, r1
   24990:	4611      	mov	r1, r2
   24992:	4605      	mov	r5, r0
   24994:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   24996:	4b0c      	ldr	r3, [pc, #48]	; (249c8 <rpmsg_register_endpoint+0x3c>)
   24998:	2220      	movs	r2, #32
   2499a:	2900      	cmp	r1, #0
   2499c:	bf08      	it	eq
   2499e:	4619      	moveq	r1, r3
   249a0:	4620      	mov	r0, r4
   249a2:	f005 fd50 	bl	2a446 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   249a6:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   249a8:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   249aa:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   249ac:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   249ae:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   249b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   249b2:	9b06      	ldr	r3, [sp, #24]
   249b4:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   249b6:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   249b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   249bc:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   249c0:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   249c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   249c4:	6013      	str	r3, [r2, #0]
}
   249c6:	bd70      	pop	{r4, r5, r6, pc}
   249c8:	00033113 	.word	0x00033113

000249cc <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   249cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   249d0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   249d4:	460d      	mov	r5, r1
   249d6:	4692      	mov	sl, r2
   249d8:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   249da:	4606      	mov	r6, r0
   249dc:	2800      	cmp	r0, #0
   249de:	d06c      	beq.n	24aba <rpmsg_create_ept+0xee>
   249e0:	2900      	cmp	r1, #0
   249e2:	d06a      	beq.n	24aba <rpmsg_create_ept+0xee>
   249e4:	f1b9 0f00 	cmp.w	r9, #0
   249e8:	d067      	beq.n	24aba <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   249ea:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   249ee:	4640      	mov	r0, r8
   249f0:	f00a fa64 	bl	2eebc <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   249f4:	1c78      	adds	r0, r7, #1
   249f6:	d140      	bne.n	24a7a <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   249f8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   249fa:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   249fe:	f014 0401 	ands.w	r4, r4, #1
   24a02:	d00b      	beq.n	24a1c <rpmsg_create_ept+0x50>
	for (bit = start;
   24a04:	2400      	movs	r4, #0
	     bit++)
   24a06:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24a08:	2c80      	cmp	r4, #128	; 0x80
   24a0a:	d054      	beq.n	24ab6 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24a0c:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24a0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   24a12:	f004 011f 	and.w	r1, r4, #31
   24a16:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24a18:	07d1      	lsls	r1, r2, #31
   24a1a:	d4f4      	bmi.n	24a06 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24a1c:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24a1e:	0960      	lsrs	r0, r4, #5
   24a20:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   24a24:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24a28:	f004 041f 	and.w	r4, r4, #31
   24a2c:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24a2e:	430a      	orrs	r2, r1
   24a30:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   24a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24a36:	4652      	mov	r2, sl
   24a38:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24a3e:	4631      	mov	r1, r6
   24a40:	9300      	str	r3, [sp, #0]
   24a42:	4628      	mov	r0, r5
   24a44:	463b      	mov	r3, r7
   24a46:	f7ff ffa1 	bl	2498c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   24a4a:	4640      	mov	r0, r8
   24a4c:	f001 f944 	bl	25cd8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24a50:	7834      	ldrb	r4, [r6, #0]
   24a52:	b174      	cbz	r4, 24a72 <rpmsg_create_ept+0xa6>
   24a54:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24a58:	b15c      	cbz	r4, 24a72 <rpmsg_create_ept+0xa6>
   24a5a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   24a5c:	3301      	adds	r3, #1
   24a5e:	d12e      	bne.n	24abe <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24a60:	2100      	movs	r1, #0
   24a62:	4630      	mov	r0, r6
   24a64:	f00a fa59 	bl	2ef1a <rpmsg_send_ns_message>

	if (status)
   24a68:	4604      	mov	r4, r0
   24a6a:	b110      	cbz	r0, 24a72 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   24a6c:	4630      	mov	r0, r6
   24a6e:	f00a fa2b 	bl	2eec8 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   24a72:	4620      	mov	r0, r4
   24a74:	b004      	add	sp, #16
   24a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   24a7a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   24a7e:	d3d9      	bcc.n	24a34 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24a80:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   24a84:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   24a86:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   24a8a:	d80f      	bhi.n	24aac <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24a8c:	0958      	lsrs	r0, r3, #5
   24a8e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24a92:	f003 031f 	and.w	r3, r3, #31
   24a96:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   24a9a:	07d2      	lsls	r2, r2, #31
   24a9c:	d40b      	bmi.n	24ab6 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24a9e:	2201      	movs	r2, #1
   24aa0:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24aa4:	4323      	orrs	r3, r4
   24aa6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   24aaa:	e7c3      	b.n	24a34 <rpmsg_create_ept+0x68>
   24aac:	4c05      	ldr	r4, [pc, #20]	; (24ac4 <rpmsg_create_ept+0xf8>)
   24aae:	4640      	mov	r0, r8
   24ab0:	f001 f912 	bl	25cd8 <z_impl_k_sem_give>
}
   24ab4:	e7dd      	b.n	24a72 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   24ab6:	4c04      	ldr	r4, [pc, #16]	; (24ac8 <rpmsg_create_ept+0xfc>)
   24ab8:	e7f9      	b.n	24aae <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   24aba:	4c02      	ldr	r4, [pc, #8]	; (24ac4 <rpmsg_create_ept+0xf8>)
   24abc:	e7d9      	b.n	24a72 <rpmsg_create_ept+0xa6>
   24abe:	2400      	movs	r4, #0
   24ac0:	e7d7      	b.n	24a72 <rpmsg_create_ept+0xa6>
   24ac2:	bf00      	nop
   24ac4:	fffff82d 	.word	0xfffff82d
   24ac8:	fffff829 	.word	0xfffff829

00024acc <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   24acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   24ad0:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   24ad4:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   24ad8:	2300      	movs	r3, #0
{
   24ada:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   24adc:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   24ade:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   24ae2:	2310      	movs	r3, #16
	rp_hdr.src = src;
   24ae4:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   24ae8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24aea:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   24aec:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   24af0:	f8ad 501c 	strh.w	r5, [sp, #28]
   24af4:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   24af6:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24af8:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   24afc:	42b1      	cmp	r1, r6
   24afe:	bf28      	it	cs
   24b00:	f04f 31ff 	movcs.w	r1, #4294967295
   24b04:	eb0d 0203 	add.w	r2, sp, r3
   24b08:	f009 ffbc 	bl	2ea84 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   24b0c:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   24b0e:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   24b10:	d00a      	beq.n	24b28 <rpmsg_virtio_send_offchannel_nocopy+0x5c>
   24b12:	4923      	ldr	r1, [pc, #140]	; (24ba0 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   24b14:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   24b18:	4822      	ldr	r0, [pc, #136]	; (24ba4 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   24b1a:	f004 f853 	bl	28bc4 <assert_print>
   24b1e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   24b22:	481f      	ldr	r0, [pc, #124]	; (24ba0 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   24b24:	f004 f847 	bl	28bb6 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   24b28:	f104 0658 	add.w	r6, r4, #88	; 0x58
   24b2c:	4630      	mov	r0, r6
   24b2e:	f00a fa84 	bl	2f03a <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   24b32:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   24b36:	699b      	ldr	r3, [r3, #24]
   24b38:	b9cb      	cbnz	r3, 24b6e <rpmsg_virtio_send_offchannel_nocopy+0xa2>
		buff_len = rvdev->config.h2r_buf_size;
   24b3a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24b3e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24b42:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24b46:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24b48:	b9c3      	cbnz	r3, 24b7c <rpmsg_virtio_send_offchannel_nocopy+0xb0>
		vqbuf.len = len;
   24b4a:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24b4e:	f8cd 8000 	str.w	r8, [sp]
   24b52:	2201      	movs	r2, #1
   24b54:	a902      	add	r1, sp, #8
   24b56:	f00a f875 	bl	2ec44 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   24b5a:	b1a8      	cbz	r0, 24b88 <rpmsg_virtio_send_offchannel_nocopy+0xbc>
   24b5c:	4910      	ldr	r1, [pc, #64]	; (24ba0 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   24b5e:	f240 12b9 	movw	r2, #441	; 0x1b9
   24b62:	4810      	ldr	r0, [pc, #64]	; (24ba4 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   24b64:	f004 f82e 	bl	28bc4 <assert_print>
   24b68:	f240 11b9 	movw	r1, #441	; 0x1b9
   24b6c:	e7d9      	b.n	24b22 <rpmsg_virtio_send_offchannel_nocopy+0x56>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   24b6e:	4639      	mov	r1, r7
   24b70:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24b74:	f00a f8fc 	bl	2ed70 <virtqueue_get_buffer_length>
   24b78:	4602      	mov	r2, r0
   24b7a:	e7e0      	b.n	24b3e <rpmsg_virtio_send_offchannel_nocopy+0x72>
	if (role == RPMSG_REMOTE) {
   24b7c:	2b01      	cmp	r3, #1
   24b7e:	d103      	bne.n	24b88 <rpmsg_virtio_send_offchannel_nocopy+0xbc>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   24b80:	4639      	mov	r1, r7
   24b82:	f7ff febb 	bl	248fc <virtqueue_add_consumed_buffer>
   24b86:	e7e8      	b.n	24b5a <rpmsg_virtio_send_offchannel_nocopy+0x8e>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   24b88:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24b8c:	f00a f947 	bl	2ee1e <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   24b90:	4630      	mov	r0, r6
   24b92:	f00a fa50 	bl	2f036 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   24b96:	4628      	mov	r0, r5
   24b98:	b008      	add	sp, #32
   24b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24b9e:	bf00      	nop
   24ba0:	000351c2 	.word	0x000351c2
   24ba4:	00030da5 	.word	0x00030da5

00024ba8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   24ba8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   24bac:	6803      	ldr	r3, [r0, #0]
   24bae:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   24bb0:	f107 0658 	add.w	r6, r7, #88	; 0x58
   24bb4:	4630      	mov	r0, r6
   24bb6:	f00a fa40 	bl	2f03a <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24bba:	4638      	mov	r0, r7
   24bbc:	f10d 020a 	add.w	r2, sp, #10
   24bc0:	a903      	add	r1, sp, #12
   24bc2:	f00a faad 	bl	2f120 <rpmsg_virtio_get_rx_buffer>
   24bc6:	4604      	mov	r4, r0
   24bc8:	4630      	mov	r0, r6
   24bca:	f00a fa34 	bl	2f036 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   24bce:	2c00      	cmp	r4, #0
   24bd0:	d04e      	beq.n	24c70 <rpmsg_virtio_rx_callback+0xc8>
		rp_hdr->reserved = idx;
   24bd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24bd6:	4630      	mov	r0, r6
   24bd8:	60a3      	str	r3, [r4, #8]
   24bda:	f00a fa2e 	bl	2f03a <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   24bde:	f04f 33ff 	mov.w	r3, #4294967295
   24be2:	2100      	movs	r1, #0
   24be4:	4638      	mov	r0, r7
   24be6:	6862      	ldr	r2, [r4, #4]
   24be8:	f00a f9cb 	bl	2ef82 <rpmsg_get_endpoint>
   24bec:	4605      	mov	r5, r0
   24bee:	4630      	mov	r0, r6
   24bf0:	f00a fa21 	bl	2f036 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   24bf4:	b1e5      	cbz	r5, 24c30 <rpmsg_virtio_rx_callback+0x88>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   24bf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   24bf8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   24bfa:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   24bfc:	bf08      	it	eq
   24bfe:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   24c00:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   24c02:	bf08      	it	eq
   24c04:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   24c06:	6823      	ldr	r3, [r4, #0]
   24c08:	89a2      	ldrh	r2, [r4, #12]
   24c0a:	9100      	str	r1, [sp, #0]
   24c0c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   24c10:	f104 0110 	add.w	r1, r4, #16
   24c14:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   24c16:	2800      	cmp	r0, #0
   24c18:	da0a      	bge.n	24c30 <rpmsg_virtio_rx_callback+0x88>
   24c1a:	4917      	ldr	r1, [pc, #92]	; (24c78 <rpmsg_virtio_rx_callback+0xd0>)
   24c1c:	4817      	ldr	r0, [pc, #92]	; (24c7c <rpmsg_virtio_rx_callback+0xd4>)
   24c1e:	f240 2243 	movw	r2, #579	; 0x243
   24c22:	f003 ffcf 	bl	28bc4 <assert_print>
   24c26:	f240 2143 	movw	r1, #579	; 0x243
   24c2a:	4813      	ldr	r0, [pc, #76]	; (24c78 <rpmsg_virtio_rx_callback+0xd0>)
   24c2c:	f003 ffc3 	bl	28bb6 <assert_post_action>
   24c30:	4630      	mov	r0, r6
   24c32:	f00a fa02 	bl	2f03a <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   24c36:	68a3      	ldr	r3, [r4, #8]
   24c38:	2b00      	cmp	r3, #0
   24c3a:	db06      	blt.n	24c4a <rpmsg_virtio_rx_callback+0xa2>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   24c3c:	4621      	mov	r1, r4
   24c3e:	4638      	mov	r0, r7
   24c40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24c44:	9a03      	ldr	r2, [sp, #12]
   24c46:	f00a fa82 	bl	2f14e <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24c4a:	4638      	mov	r0, r7
   24c4c:	f10d 020a 	add.w	r2, sp, #10
   24c50:	a903      	add	r1, sp, #12
   24c52:	f00a fa65 	bl	2f120 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   24c56:	4604      	mov	r4, r0
   24c58:	b118      	cbz	r0, 24c62 <rpmsg_virtio_rx_callback+0xba>
   24c5a:	4630      	mov	r0, r6
   24c5c:	f00a f9eb 	bl	2f036 <k_sem_give>
	while (rp_hdr) {
   24c60:	e7b7      	b.n	24bd2 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   24c62:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   24c66:	f00a f8da 	bl	2ee1e <virtqueue_kick>
   24c6a:	4630      	mov	r0, r6
   24c6c:	f00a f9e3 	bl	2f036 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   24c70:	b004      	add	sp, #16
   24c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24c76:	bf00      	nop
   24c78:	000351c2 	.word	0x000351c2
   24c7c:	00030da5 	.word	0x00030da5

00024c80 <rpmsg_virtio_send_offchannel_raw>:
{
   24c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24c84:	b085      	sub	sp, #20
   24c86:	460f      	mov	r7, r1
   24c88:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24c8a:	a903      	add	r1, sp, #12
   24c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   24c8e:	4606      	mov	r6, r0
   24c90:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   24c92:	f00a faa7 	bl	2f1e4 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   24c96:	4604      	mov	r4, r0
   24c98:	b348      	cbz	r0, 24cee <rpmsg_virtio_send_offchannel_raw+0x6e>
	if (len > (int)buff_len)
   24c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24c9c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   24c9e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   24ca2:	429d      	cmp	r5, r3
   24ca4:	bfa8      	it	ge
   24ca6:	461d      	movge	r5, r3
   24ca8:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   24caa:	f8d0 c008 	ldr.w	ip, [r0, #8]
   24cae:	1a61      	subs	r1, r4, r1
   24cb0:	4561      	cmp	r1, ip
   24cb2:	bf28      	it	cs
   24cb4:	f04f 31ff 	movcs.w	r1, #4294967295
   24cb8:	462b      	mov	r3, r5
   24cba:	464a      	mov	r2, r9
   24cbc:	f009 fee2 	bl	2ea84 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   24cc0:	4285      	cmp	r5, r0
   24cc2:	d00a      	beq.n	24cda <rpmsg_virtio_send_offchannel_raw+0x5a>
   24cc4:	490b      	ldr	r1, [pc, #44]	; (24cf4 <rpmsg_virtio_send_offchannel_raw+0x74>)
   24cc6:	480c      	ldr	r0, [pc, #48]	; (24cf8 <rpmsg_virtio_send_offchannel_raw+0x78>)
   24cc8:	f240 2203 	movw	r2, #515	; 0x203
   24ccc:	f003 ff7a 	bl	28bc4 <assert_print>
   24cd0:	f240 2103 	movw	r1, #515	; 0x203
   24cd4:	4807      	ldr	r0, [pc, #28]	; (24cf4 <rpmsg_virtio_send_offchannel_raw+0x74>)
   24cd6:	f003 ff6e 	bl	28bb6 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   24cda:	4623      	mov	r3, r4
   24cdc:	4642      	mov	r2, r8
   24cde:	4639      	mov	r1, r7
   24ce0:	4630      	mov	r0, r6
   24ce2:	9500      	str	r5, [sp, #0]
   24ce4:	f7ff fef2 	bl	24acc <rpmsg_virtio_send_offchannel_nocopy>
}
   24ce8:	b005      	add	sp, #20
   24cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   24cee:	4803      	ldr	r0, [pc, #12]	; (24cfc <rpmsg_virtio_send_offchannel_raw+0x7c>)
   24cf0:	e7fa      	b.n	24ce8 <rpmsg_virtio_send_offchannel_raw+0x68>
   24cf2:	bf00      	nop
   24cf4:	000351c2 	.word	0x000351c2
   24cf8:	00030da5 	.word	0x00030da5
   24cfc:	fffff82e 	.word	0xfffff82e

00024d00 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   24d00:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   24d02:	4604      	mov	r4, r0
   24d04:	b1e0      	cbz	r0, 24d40 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   24d06:	f100 0558 	add.w	r5, r0, #88	; 0x58
   24d0a:	4628      	mov	r0, r5
   24d0c:	f00a f995 	bl	2f03a <__metal_mutex_acquire>
   24d10:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24d14:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24d16:	b953      	cbnz	r3, 24d2e <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   24d18:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   24d1c:	3c10      	subs	r4, #16
	if (length <= 0) {
   24d1e:	2c00      	cmp	r4, #0
   24d20:	dc00      	bgt.n	24d24 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   24d22:	4c08      	ldr	r4, [pc, #32]	; (24d44 <rpmsg_virtio_get_buffer_size+0x44>)
   24d24:	4628      	mov	r0, r5
   24d26:	f00a f986 	bl	2f036 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   24d2a:	4620      	mov	r0, r4
   24d2c:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   24d2e:	2b01      	cmp	r3, #1
   24d30:	d1f7      	bne.n	24d22 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   24d32:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24d36:	f00a f8a9 	bl	2ee8c <virtqueue_get_desc_size>
   24d3a:	f1a0 0410 	sub.w	r4, r0, #16
   24d3e:	e7ee      	b.n	24d1e <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   24d40:	4c01      	ldr	r4, [pc, #4]	; (24d48 <rpmsg_virtio_get_buffer_size+0x48>)
   24d42:	e7f2      	b.n	24d2a <rpmsg_virtio_get_buffer_size+0x2a>
   24d44:	fffff82e 	.word	0xfffff82e
   24d48:	fffff82d 	.word	0xfffff82d

00024d4c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d50:	b08a      	sub	sp, #40	; 0x28
   24d52:	460d      	mov	r5, r1
   24d54:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   24d58:	4690      	mov	r8, r2
   24d5a:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   24d5c:	4604      	mov	r4, r0
   24d5e:	b920      	cbnz	r0, 24d6a <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   24d60:	4f81      	ldr	r7, [pc, #516]	; (24f68 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   24d62:	4638      	mov	r0, r7
   24d64:	b00a      	add	sp, #40	; 0x28
   24d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   24d6a:	2900      	cmp	r1, #0
   24d6c:	d0f8      	beq.n	24d60 <rpmsg_init_vdev_with_config+0x14>
   24d6e:	2b00      	cmp	r3, #0
   24d70:	d0f6      	beq.n	24d60 <rpmsg_init_vdev_with_config+0x14>
	memset(rdev, 0, sizeof(*rdev));
   24d72:	2294      	movs	r2, #148	; 0x94
   24d74:	2100      	movs	r1, #0
   24d76:	f005 fbdb 	bl	2a530 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24d7a:	2201      	movs	r2, #1
   24d7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24d80:	4611      	mov	r1, r2
   24d82:	f00a fb47 	bl	2f414 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24d86:	4b79      	ldr	r3, [pc, #484]	; (24f6c <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   24d88:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   24d8c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   24d90:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   24d92:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   24d94:	4b76      	ldr	r3, [pc, #472]	; (24f70 <rpmsg_init_vdev_with_config+0x224>)
   24d96:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   24d98:	4b76      	ldr	r3, [pc, #472]	; (24f74 <rpmsg_init_vdev_with_config+0x228>)
   24d9a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   24d9e:	4b76      	ldr	r3, [pc, #472]	; (24f78 <rpmsg_init_vdev_with_config+0x22c>)
   24da0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   24da4:	4b75      	ldr	r3, [pc, #468]	; (24f7c <rpmsg_init_vdev_with_config+0x230>)
   24da6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   24daa:	4b75      	ldr	r3, [pc, #468]	; (24f80 <rpmsg_init_vdev_with_config+0x234>)
   24dac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   24db0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24db4:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   24db8:	f1b8 0f00 	cmp.w	r8, #0
   24dbc:	d16e      	bne.n	24e9c <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   24dbe:	2f00      	cmp	r7, #0
   24dc0:	d0ce      	beq.n	24d60 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   24dc2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   24dc6:	f104 0394 	add.w	r3, r4, #148	; 0x94
   24dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   24dce:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   24dd2:	6a03      	ldr	r3, [r0, #32]
   24dd4:	689b      	ldr	r3, [r3, #8]
   24dd6:	4798      	blx	r3
   24dd8:	2300      	movs	r3, #0
   24dda:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   24ddc:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   24de0:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   24de2:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   24de6:	f1b8 0f00 	cmp.w	r8, #0
   24dea:	d16d      	bne.n	24ec8 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   24dec:	7a3b      	ldrb	r3, [r7, #8]
   24dee:	2b00      	cmp	r3, #0
   24df0:	d068      	beq.n	24ec4 <rpmsg_init_vdev_with_config+0x178>
   24df2:	f109 030c 	add.w	r3, r9, #12
   24df6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   24dfa:	f1b9 0f00 	cmp.w	r9, #0
   24dfe:	d0af      	beq.n	24d60 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   24e00:	f8d9 2008 	ldr.w	r2, [r9, #8]
   24e04:	2a00      	cmp	r2, #0
   24e06:	f000 80ad 	beq.w	24f64 <rpmsg_init_vdev_with_config+0x218>
   24e0a:	689b      	ldr	r3, [r3, #8]
   24e0c:	2b00      	cmp	r3, #0
   24e0e:	f000 80a9 	beq.w	24f64 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   24e12:	4b5c      	ldr	r3, [pc, #368]	; (24f84 <rpmsg_init_vdev_with_config+0x238>)
   24e14:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   24e16:	4b5c      	ldr	r3, [pc, #368]	; (24f88 <rpmsg_init_vdev_with_config+0x23c>)
   24e18:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   24e1a:	4b5c      	ldr	r3, [pc, #368]	; (24f8c <rpmsg_init_vdev_with_config+0x240>)
   24e1c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   24e1e:	4b5c      	ldr	r3, [pc, #368]	; (24f90 <rpmsg_init_vdev_with_config+0x244>)
   24e20:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   24e22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24e24:	681b      	ldr	r3, [r3, #0]
   24e26:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   24e2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24e2c:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   24e2e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   24e32:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   24e36:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   24e3a:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   24e3c:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   24e40:	9300      	str	r3, [sp, #0]
   24e42:	2202      	movs	r2, #2
   24e44:	2100      	movs	r1, #0
   24e46:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   24e4a:	ab04      	add	r3, sp, #16
   24e4c:	f7ff fcea 	bl	24824 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   24e50:	4607      	mov	r7, r0
   24e52:	2800      	cmp	r0, #0
   24e54:	d185      	bne.n	24d62 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   24e56:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24e5a:	f009 ffb2 	bl	2edc2 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   24e5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24e60:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   24e62:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   24e64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24e66:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   24e68:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   24e6a:	f1b8 0f00 	cmp.w	r8, #0
   24e6e:	d161      	bne.n	24f34 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24e70:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   24e72:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24e76:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24e78:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24e7c:	895b      	ldrh	r3, [r3, #10]
   24e7e:	4553      	cmp	r3, sl
   24e80:	d834      	bhi.n	24eec <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   24e82:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   24e86:	e9c4 4400 	strd	r4, r4, [r4]
   24e8a:	2b00      	cmp	r3, #0
   24e8c:	d159      	bne.n	24f42 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   24e8e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   24e92:	2104      	movs	r1, #4
   24e94:	6a03      	ldr	r3, [r0, #32]
   24e96:	685b      	ldr	r3, [r3, #4]
   24e98:	4798      	blx	r3
}
   24e9a:	e762      	b.n	24d62 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   24e9c:	f1b8 0f01 	cmp.w	r8, #1
   24ea0:	d195      	bne.n	24dce <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   24ea2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   24ea6:	6a03      	ldr	r3, [r0, #32]
   24ea8:	681b      	ldr	r3, [r3, #0]
   24eaa:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   24eac:	0642      	lsls	r2, r0, #25
   24eae:	d506      	bpl.n	24ebe <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   24eb0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   24eb4:	2100      	movs	r1, #0
   24eb6:	6a03      	ldr	r3, [r0, #32]
   24eb8:	685b      	ldr	r3, [r3, #4]
   24eba:	4798      	blx	r3
}
   24ebc:	e7f1      	b.n	24ea2 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   24ebe:	0743      	lsls	r3, r0, #29
   24ec0:	d5ef      	bpl.n	24ea2 <rpmsg_init_vdev_with_config+0x156>
   24ec2:	e784      	b.n	24dce <rpmsg_init_vdev_with_config+0x82>
   24ec4:	464b      	mov	r3, r9
   24ec6:	e796      	b.n	24df6 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   24ec8:	f1b8 0f01 	cmp.w	r8, #1
   24ecc:	d1b1      	bne.n	24e32 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   24ece:	4b2e      	ldr	r3, [pc, #184]	; (24f88 <rpmsg_init_vdev_with_config+0x23c>)
   24ed0:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   24ed2:	4b2c      	ldr	r3, [pc, #176]	; (24f84 <rpmsg_init_vdev_with_config+0x238>)
   24ed4:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   24ed6:	4b2e      	ldr	r3, [pc, #184]	; (24f90 <rpmsg_init_vdev_with_config+0x244>)
   24ed8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   24eda:	4b2c      	ldr	r3, [pc, #176]	; (24f8c <rpmsg_init_vdev_with_config+0x240>)
   24edc:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   24ede:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24ee0:	699b      	ldr	r3, [r3, #24]
   24ee2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   24ee6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24ee8:	681b      	ldr	r3, [r3, #0]
   24eea:	e7a0      	b.n	24e2e <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   24eec:	4648      	mov	r0, r9
   24eee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   24ef2:	f00a f968 	bl	2f1c6 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   24ef6:	4605      	mov	r5, r0
   24ef8:	b1c8      	cbz	r0, 24f2e <rpmsg_init_vdev_with_config+0x1e2>
   24efa:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   24efc:	9008      	str	r0, [sp, #32]
   24efe:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   24f00:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   24f02:	2200      	movs	r2, #0
   24f04:	4281      	cmp	r1, r0
   24f06:	bf28      	it	cs
   24f08:	f04f 31ff 	movcs.w	r1, #4294967295
   24f0c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24f10:	4630      	mov	r0, r6
   24f12:	f009 fdf1 	bl	2eaf8 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   24f16:	9500      	str	r5, [sp, #0]
   24f18:	2301      	movs	r3, #1
   24f1a:	2200      	movs	r2, #0
   24f1c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   24f20:	a908      	add	r1, sp, #32
   24f22:	f009 fe8f 	bl	2ec44 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   24f26:	b918      	cbnz	r0, 24f30 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24f28:	f10a 0a01 	add.w	sl, sl, #1
   24f2c:	e7a4      	b.n	24e78 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   24f2e:	4819      	ldr	r0, [pc, #100]	; (24f94 <rpmsg_init_vdev_with_config+0x248>)
   24f30:	4607      	mov	r7, r0
   24f32:	e716      	b.n	24d62 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   24f34:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   24f38:	e9c4 4400 	strd	r4, r4, [r4]
   24f3c:	2b00      	cmp	r3, #0
   24f3e:	f43f af10 	beq.w	24d62 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   24f42:	2300      	movs	r3, #0
   24f44:	9302      	str	r3, [sp, #8]
   24f46:	4b14      	ldr	r3, [pc, #80]	; (24f98 <rpmsg_init_vdev_with_config+0x24c>)
   24f48:	4620      	mov	r0, r4
   24f4a:	9301      	str	r3, [sp, #4]
   24f4c:	2335      	movs	r3, #53	; 0x35
   24f4e:	4a13      	ldr	r2, [pc, #76]	; (24f9c <rpmsg_init_vdev_with_config+0x250>)
   24f50:	9300      	str	r3, [sp, #0]
   24f52:	f104 0108 	add.w	r1, r4, #8
   24f56:	f7ff fd19 	bl	2498c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   24f5a:	f1b8 0f00 	cmp.w	r8, #0
   24f5e:	f47f af00 	bne.w	24d62 <rpmsg_init_vdev_with_config+0x16>
   24f62:	e794      	b.n	24e8e <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   24f64:	4f0b      	ldr	r7, [pc, #44]	; (24f94 <rpmsg_init_vdev_with_config+0x248>)
   24f66:	e6fc      	b.n	24d62 <rpmsg_init_vdev_with_config+0x16>
   24f68:	fffff82d 	.word	0xfffff82d
   24f6c:	00024c81 	.word	0x00024c81
   24f70:	0002f027 	.word	0x0002f027
   24f74:	0002f187 	.word	0x0002f187
   24f78:	0002f1e5 	.word	0x0002f1e5
   24f7c:	00024acd 	.word	0x00024acd
   24f80:	0002f047 	.word	0x0002f047
   24f84:	00035205 	.word	0x00035205
   24f88:	0003520b 	.word	0x0003520b
   24f8c:	00024ba9 	.word	0x00024ba9
   24f90:	0002f035 	.word	0x0002f035
   24f94:	fffff82e 	.word	0xfffff82e
   24f98:	0002f089 	.word	0x0002f089
   24f9c:	00035211 	.word	0x00035211

00024fa0 <rpmsg_init_vdev>:
{
   24fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24fa2:	4605      	mov	r5, r0
   24fa4:	460e      	mov	r6, r1
   24fa6:	4617      	mov	r7, r2
   24fa8:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   24faa:	4a07      	ldr	r2, [pc, #28]	; (24fc8 <rpmsg_init_vdev+0x28>)
   24fac:	ac03      	add	r4, sp, #12
   24fae:	ca07      	ldmia	r2, {r0, r1, r2}
   24fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   24fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24fb6:	4631      	mov	r1, r6
   24fb8:	9200      	str	r2, [sp, #0]
   24fba:	4628      	mov	r0, r5
   24fbc:	463a      	mov	r2, r7
   24fbe:	9401      	str	r4, [sp, #4]
   24fc0:	f7ff fec4 	bl	24d4c <rpmsg_init_vdev_with_config>
}
   24fc4:	b007      	add	sp, #28
   24fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24fc8:	0002ffc4 	.word	0x0002ffc4

00024fcc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   24fcc:	4b01      	ldr	r3, [pc, #4]	; (24fd4 <z_impl_z_errno+0x8>)
   24fce:	6898      	ldr	r0, [r3, #8]
}
   24fd0:	3064      	adds	r0, #100	; 0x64
   24fd2:	4770      	bx	lr
   24fd4:	2000b0c0 	.word	0x2000b0c0

00024fd8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24fdc:	b086      	sub	sp, #24
   24fde:	4604      	mov	r4, r0
   24fe0:	460e      	mov	r6, r1
   24fe2:	af00      	add	r7, sp, #0
	__asm__ volatile(
   24fe4:	f04f 0320 	mov.w	r3, #32
   24fe8:	f3ef 8811 	mrs	r8, BASEPRI
   24fec:	f383 8812 	msr	BASEPRI_MAX, r3
   24ff0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24ff4:	f002 fb0c 	bl	27610 <z_impl_z_current_get>
   24ff8:	2c04      	cmp	r4, #4
   24ffa:	bf98      	it	ls
   24ffc:	4b32      	ldrls	r3, [pc, #200]	; (250c8 <z_fatal_error+0xf0>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   24ffe:	46e9      	mov	r9, sp
   25000:	b08a      	sub	sp, #40	; 0x28
   25002:	4605      	mov	r5, r0
   25004:	466a      	mov	r2, sp
   25006:	bf94      	ite	ls
   25008:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   2500c:	4b2f      	ldrhi	r3, [pc, #188]	; (250cc <z_fatal_error+0xf4>)
   2500e:	61d3      	str	r3, [r2, #28]
   25010:	f240 3301 	movw	r3, #769	; 0x301
   25014:	f04f 0a00 	mov.w	sl, #0
   25018:	8493      	strh	r3, [r2, #36]	; 0x24
   2501a:	492d      	ldr	r1, [pc, #180]	; (250d0 <z_fatal_error+0xf8>)
   2501c:	4b2d      	ldr	r3, [pc, #180]	; (250d4 <z_fatal_error+0xfc>)
   2501e:	e9c2 1405 	strd	r1, r4, [r2, #20]
   25022:	f8c2 a020 	str.w	sl, [r2, #32]
   25026:	f842 3f10 	str.w	r3, [r2, #16]!
   2502a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2502e:	4653      	mov	r3, sl
   25030:	4829      	ldr	r0, [pc, #164]	; (250d8 <z_fatal_error+0x100>)
   25032:	f7e5 fd93 	bl	ab5c <z_impl_z_log_msg_static_create>
   25036:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25038:	b17e      	cbz	r6, 2505a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2503a:	69f3      	ldr	r3, [r6, #28]
   2503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25040:	b15b      	cbz	r3, 2505a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   25042:	4b26      	ldr	r3, [pc, #152]	; (250dc <z_fatal_error+0x104>)
   25044:	617b      	str	r3, [r7, #20]
   25046:	2302      	movs	r3, #2
   25048:	613b      	str	r3, [r7, #16]
   2504a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2504e:	4653      	mov	r3, sl
   25050:	4821      	ldr	r0, [pc, #132]	; (250d8 <z_fatal_error+0x100>)
   25052:	f107 0210 	add.w	r2, r7, #16
   25056:	f7e5 fd81 	bl	ab5c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2505a:	b12d      	cbz	r5, 25068 <z_fatal_error+0x90>
   2505c:	4628      	mov	r0, r5
   2505e:	f00a f991 	bl	2f384 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25062:	b108      	cbz	r0, 25068 <z_fatal_error+0x90>
   25064:	7803      	ldrb	r3, [r0, #0]
   25066:	b903      	cbnz	r3, 2506a <z_fatal_error+0x92>
		thread_name = "unknown";
   25068:	481d      	ldr	r0, [pc, #116]	; (250e0 <z_fatal_error+0x108>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2506a:	46e9      	mov	r9, sp
   2506c:	b08a      	sub	sp, #40	; 0x28
   2506e:	466a      	mov	r2, sp
   25070:	4b1c      	ldr	r3, [pc, #112]	; (250e4 <z_fatal_error+0x10c>)
   25072:	61d0      	str	r0, [r2, #28]
   25074:	e9c2 3505 	strd	r3, r5, [r2, #20]
   25078:	f240 3301 	movw	r3, #769	; 0x301
   2507c:	8413      	strh	r3, [r2, #32]
   2507e:	4b1a      	ldr	r3, [pc, #104]	; (250e8 <z_fatal_error+0x110>)
   25080:	f842 3f10 	str.w	r3, [r2, #16]!
   25084:	2300      	movs	r3, #0
   25086:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2508a:	4813      	ldr	r0, [pc, #76]	; (250d8 <z_fatal_error+0x100>)
   2508c:	f7e5 fd66 	bl	ab5c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25090:	4631      	mov	r1, r6
   25092:	46cd      	mov	sp, r9
   25094:	4620      	mov	r0, r4
   25096:	f7fd fdb3 	bl	22c00 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2509a:	2c04      	cmp	r4, #4
   2509c:	d108      	bne.n	250b0 <z_fatal_error+0xd8>
   2509e:	4913      	ldr	r1, [pc, #76]	; (250ec <z_fatal_error+0x114>)
   250a0:	4813      	ldr	r0, [pc, #76]	; (250f0 <z_fatal_error+0x118>)
   250a2:	2293      	movs	r2, #147	; 0x93
   250a4:	f003 fd8e 	bl	28bc4 <assert_print>
   250a8:	2193      	movs	r1, #147	; 0x93
   250aa:	4810      	ldr	r0, [pc, #64]	; (250ec <z_fatal_error+0x114>)
   250ac:	f003 fd83 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   250b0:	f388 8811 	msr	BASEPRI, r8
   250b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   250b8:	4628      	mov	r0, r5
   250ba:	f7e8 faa9 	bl	d610 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   250be:	3718      	adds	r7, #24
   250c0:	46bd      	mov	sp, r7
   250c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   250c6:	bf00      	nop
   250c8:	00030cb8 	.word	0x00030cb8
   250cc:	00035214 	.word	0x00035214
   250d0:	0003522a 	.word	0x0003522a
   250d4:	01000005 	.word	0x01000005
   250d8:	0002fdbc 	.word	0x0002fdbc
   250dc:	00035252 	.word	0x00035252
   250e0:	00035222 	.word	0x00035222
   250e4:	00035273 	.word	0x00035273
   250e8:	01000004 	.word	0x01000004
   250ec:	0003528b 	.word	0x0003528b
   250f0:	00030da5 	.word	0x00030da5

000250f4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   250f4:	4b0f      	ldr	r3, [pc, #60]	; (25134 <z_sys_init_run_level+0x40>)
{
   250f6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   250f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   250fc:	3001      	adds	r0, #1
   250fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   25102:	42a6      	cmp	r6, r4
   25104:	d800      	bhi.n	25108 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   25106:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   25108:	e9d4 3500 	ldrd	r3, r5, [r4]
   2510c:	4628      	mov	r0, r5
   2510e:	4798      	blx	r3
		if (dev != NULL) {
   25110:	b16d      	cbz	r5, 2512e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   25112:	b138      	cbz	r0, 25124 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   25114:	2800      	cmp	r0, #0
   25116:	bfb8      	it	lt
   25118:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   2511a:	28ff      	cmp	r0, #255	; 0xff
   2511c:	bfa8      	it	ge
   2511e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   25120:	68eb      	ldr	r3, [r5, #12]
   25122:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   25124:	68ea      	ldr	r2, [r5, #12]
   25126:	7853      	ldrb	r3, [r2, #1]
   25128:	f043 0301 	orr.w	r3, r3, #1
   2512c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2512e:	3408      	adds	r4, #8
   25130:	e7e7      	b.n	25102 <z_sys_init_run_level+0xe>
   25132:	bf00      	nop
   25134:	00030ccc 	.word	0x00030ccc

00025138 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   25138:	2201      	movs	r2, #1
{
   2513a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2513c:	4b09      	ldr	r3, [pc, #36]	; (25164 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2513e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   25140:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   25142:	f7ff ffd7 	bl	250f4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   25146:	f003 fa21 	bl	2858c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2514a:	2004      	movs	r0, #4
   2514c:	f7ff ffd2 	bl	250f4 <z_sys_init_run_level>

	z_init_static_threads();
   25150:	f000 faf2 	bl	25738 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   25154:	f7e3 f996 	bl	8484 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25158:	4a03      	ldr	r2, [pc, #12]	; (25168 <bg_thread_main+0x30>)
   2515a:	7b13      	ldrb	r3, [r2, #12]
   2515c:	f023 0301 	bic.w	r3, r3, #1
   25160:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25162:	bd08      	pop	{r3, pc}
   25164:	2000b34a 	.word	0x2000b34a
   25168:	2000a480 	.word	0x2000a480

0002516c <z_bss_zero>:
{
   2516c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2516e:	4803      	ldr	r0, [pc, #12]	; (2517c <z_bss_zero+0x10>)
   25170:	4a03      	ldr	r2, [pc, #12]	; (25180 <z_bss_zero+0x14>)
   25172:	2100      	movs	r1, #0
   25174:	1a12      	subs	r2, r2, r0
   25176:	f00a f8da 	bl	2f32e <z_early_memset>
}
   2517a:	bd08      	pop	{r3, pc}
   2517c:	200090f8 	.word	0x200090f8
   25180:	2000b34c 	.word	0x2000b34c

00025184 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   25184:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   25186:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   25188:	4e13      	ldr	r6, [pc, #76]	; (251d8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   2518a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   2518c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   25190:	2300      	movs	r3, #0
{
   25192:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   25194:	e9cd 2304 	strd	r2, r3, [sp, #16]
   25198:	220f      	movs	r2, #15
   2519a:	9301      	str	r3, [sp, #4]
   2519c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   251a0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   251a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   251a6:	4d0d      	ldr	r5, [pc, #52]	; (251dc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   251a8:	490d      	ldr	r1, [pc, #52]	; (251e0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   251aa:	fb03 5500 	mla	r5, r3, r0, r5
{
   251ae:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   251b0:	fb02 1100 	mla	r1, r2, r0, r1
   251b4:	4b0b      	ldr	r3, [pc, #44]	; (251e4 <z_init_cpu+0x60>)
   251b6:	4630      	mov	r0, r6
   251b8:	9500      	str	r5, [sp, #0]
   251ba:	f000 fa37 	bl	2562c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   251be:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   251c0:	752c      	strb	r4, [r5, #20]
   251c2:	f023 0304 	bic.w	r3, r3, #4
   251c6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   251c8:	4b07      	ldr	r3, [pc, #28]	; (251e8 <z_init_cpu+0x64>)
   251ca:	3401      	adds	r4, #1
   251cc:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   251d0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   251d2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   251d4:	b006      	add	sp, #24
   251d6:	bd70      	pop	{r4, r5, r6, pc}
   251d8:	2000a3f8 	.word	0x2000a3f8
   251dc:	2000b0c0 	.word	0x2000b0c0
   251e0:	2000d9c8 	.word	0x2000d9c8
   251e4:	00025871 	.word	0x00025871
   251e8:	2000d1c8 	.word	0x2000d1c8

000251ec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   251ec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   251ee:	2000      	movs	r0, #0
{
   251f0:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   251f2:	f7ff ff7f 	bl	250f4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   251f6:	4b2f      	ldr	r3, [pc, #188]	; (252b4 <z_cstart+0xc8>)
	uint32_t msp =
   251f8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   251fc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   25200:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25204:	2400      	movs	r4, #0
   25206:	23e0      	movs	r3, #224	; 0xe0
   25208:	4d2b      	ldr	r5, [pc, #172]	; (252b8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2520a:	4e2c      	ldr	r6, [pc, #176]	; (252bc <z_cstart+0xd0>)
   2520c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25210:	77ec      	strb	r4, [r5, #31]
   25212:	762c      	strb	r4, [r5, #24]
   25214:	766c      	strb	r4, [r5, #25]
   25216:	76ac      	strb	r4, [r5, #26]
   25218:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2521c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2521e:	4f28      	ldr	r7, [pc, #160]	; (252c0 <z_cstart+0xd4>)
   25220:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25224:	626b      	str	r3, [r5, #36]	; 0x24
   25226:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2522a:	f7e8 f955 	bl	d4d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2522e:	f7e7 fc85 	bl	cb3c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25232:	f04f 33ff 	mov.w	r3, #4294967295
   25236:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25238:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2523a:	f7e8 fbb5 	bl	d9a8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2523e:	f7e8 f9fd 	bl	d63c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   25242:	f7e5 fab1 	bl	a7a8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   25246:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2524a:	ad06      	add	r5, sp, #24
   2524c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2524e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   25252:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   25256:	f003 f97b 	bl	28550 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2525a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2525c:	f00a f85b 	bl	2f316 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25260:	2001      	movs	r0, #1
   25262:	f7ff ff47 	bl	250f4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   25266:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   25268:	4d16      	ldr	r5, [pc, #88]	; (252c4 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2526a:	f7ff ff43 	bl	250f4 <z_sys_init_run_level>
	z_sched_init();
   2526e:	f002 f899 	bl	273a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25272:	4b15      	ldr	r3, [pc, #84]	; (252c8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   25274:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25276:	9305      	str	r3, [sp, #20]
   25278:	2301      	movs	r3, #1
   2527a:	4914      	ldr	r1, [pc, #80]	; (252cc <z_cstart+0xe0>)
   2527c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25280:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25284:	4628      	mov	r0, r5
   25286:	463b      	mov	r3, r7
   25288:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2528c:	9400      	str	r4, [sp, #0]
   2528e:	f000 f9cd 	bl	2562c <z_setup_new_thread>
   25292:	4606      	mov	r6, r0
   25294:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   25296:	4628      	mov	r0, r5
   25298:	f022 0204 	bic.w	r2, r2, #4
   2529c:	736a      	strb	r2, [r5, #13]
   2529e:	f001 fb85 	bl	269ac <z_ready_thread>
	z_init_cpu(0);
   252a2:	4620      	mov	r0, r4
   252a4:	f7ff ff6e 	bl	25184 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   252a8:	463a      	mov	r2, r7
   252aa:	4631      	mov	r1, r6
   252ac:	4628      	mov	r0, r5
   252ae:	f7e7 fdc7 	bl	ce40 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   252b2:	bf00      	nop
   252b4:	2000d1c8 	.word	0x2000d1c8
   252b8:	e000ed00 	.word	0xe000ed00
   252bc:	2000b0c0 	.word	0x2000b0c0
   252c0:	00025139 	.word	0x00025139
   252c4:	2000a480 	.word	0x2000a480
   252c8:	0003271f 	.word	0x0003271f
   252cc:	2000db08 	.word	0x2000db08

000252d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   252d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   252d2:	4c0b      	ldr	r4, [pc, #44]	; (25300 <statics_init+0x30>)
   252d4:	4d0b      	ldr	r5, [pc, #44]	; (25304 <statics_init+0x34>)
   252d6:	42ac      	cmp	r4, r5
   252d8:	d90f      	bls.n	252fa <statics_init+0x2a>
   252da:	490b      	ldr	r1, [pc, #44]	; (25308 <statics_init+0x38>)
   252dc:	480b      	ldr	r0, [pc, #44]	; (2530c <statics_init+0x3c>)
   252de:	2218      	movs	r2, #24
   252e0:	f003 fc70 	bl	28bc4 <assert_print>
   252e4:	2118      	movs	r1, #24
   252e6:	4808      	ldr	r0, [pc, #32]	; (25308 <statics_init+0x38>)
   252e8:	f003 fc65 	bl	28bb6 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   252ec:	4620      	mov	r0, r4
   252ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   252f2:	f00a f820 	bl	2f336 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   252f6:	3418      	adds	r4, #24
   252f8:	e7ed      	b.n	252d6 <statics_init+0x6>
   252fa:	d3f7      	bcc.n	252ec <statics_init+0x1c>
		}
	}
	return 0;
}
   252fc:	2000      	movs	r0, #0
   252fe:	bd38      	pop	{r3, r4, r5, pc}
   25300:	20008e2c 	.word	0x20008e2c
   25304:	20008e44 	.word	0x20008e44
   25308:	000352fa 	.word	0x000352fa
   2530c:	00030da5 	.word	0x00030da5

00025310 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25314:	b085      	sub	sp, #20
   25316:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   2531a:	4680      	mov	r8, r0
   2531c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2531e:	4648      	mov	r0, r9
   25320:	4659      	mov	r1, fp
{
   25322:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25324:	f00a f925 	bl	2f572 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   25328:	f1bb 3fff 	cmp.w	fp, #4294967295
   2532c:	bf08      	it	eq
   2532e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25332:	4605      	mov	r5, r0
   25334:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   25336:	bf04      	itt	eq
   25338:	f04f 35ff 	moveq.w	r5, #4294967295
   2533c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25340:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   25344:	f04f 0320 	mov.w	r3, #32
   25348:	f3ef 8411 	mrs	r4, BASEPRI
   2534c:	f383 8812 	msr	BASEPRI_MAX, r3
   25350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25354:	4630      	mov	r0, r6
   25356:	f000 fa67 	bl	25828 <z_spin_lock_valid>
   2535a:	b938      	cbnz	r0, 2536c <k_heap_aligned_alloc+0x5c>
   2535c:	492c      	ldr	r1, [pc, #176]	; (25410 <k_heap_aligned_alloc+0x100>)
   2535e:	2294      	movs	r2, #148	; 0x94
   25360:	482c      	ldr	r0, [pc, #176]	; (25414 <k_heap_aligned_alloc+0x104>)
   25362:	f003 fc2f 	bl	28bc4 <assert_print>
   25366:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25368:	4829      	ldr	r0, [pc, #164]	; (25410 <k_heap_aligned_alloc+0x100>)
   2536a:	e027      	b.n	253bc <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   2536c:	4630      	mov	r0, r6
   2536e:	f000 fa77 	bl	25860 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25372:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   25376:	b113      	cbz	r3, 2537e <k_heap_aligned_alloc+0x6e>
   25378:	ea5b 0909 	orrs.w	r9, fp, r9
   2537c:	d117      	bne.n	253ae <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2537e:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   25382:	4652      	mov	r2, sl
   25384:	4640      	mov	r0, r8
   25386:	9903      	ldr	r1, [sp, #12]
   25388:	f7e3 fdf6 	bl	8f78 <sys_heap_aligned_alloc>
   2538c:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   2538e:	f002 fcef 	bl	27d70 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   25392:	f1b9 0f00 	cmp.w	r9, #0
   25396:	d013      	beq.n	253c0 <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25398:	4630      	mov	r0, r6
   2539a:	f000 fa53 	bl	25844 <z_spin_unlock_valid>
   2539e:	bb70      	cbnz	r0, 253fe <k_heap_aligned_alloc+0xee>
   253a0:	491b      	ldr	r1, [pc, #108]	; (25410 <k_heap_aligned_alloc+0x100>)
   253a2:	22c2      	movs	r2, #194	; 0xc2
   253a4:	481b      	ldr	r0, [pc, #108]	; (25414 <k_heap_aligned_alloc+0x104>)
   253a6:	f003 fc0d 	bl	28bc4 <assert_print>
   253aa:	21c2      	movs	r1, #194	; 0xc2
   253ac:	e7dc      	b.n	25368 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   253ae:	491a      	ldr	r1, [pc, #104]	; (25418 <k_heap_aligned_alloc+0x108>)
   253b0:	4818      	ldr	r0, [pc, #96]	; (25414 <k_heap_aligned_alloc+0x104>)
   253b2:	224c      	movs	r2, #76	; 0x4c
   253b4:	f003 fc06 	bl	28bc4 <assert_print>
   253b8:	214c      	movs	r1, #76	; 0x4c
   253ba:	4817      	ldr	r0, [pc, #92]	; (25418 <k_heap_aligned_alloc+0x108>)
   253bc:	f003 fbfb 	bl	28bb6 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   253c0:	1a28      	subs	r0, r5, r0
   253c2:	eb67 0101 	sbc.w	r1, r7, r1
   253c6:	2801      	cmp	r0, #1
   253c8:	f171 0300 	sbcs.w	r3, r1, #0
   253cc:	dbe4      	blt.n	25398 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   253ce:	e9cd 0100 	strd	r0, r1, [sp]
   253d2:	465a      	mov	r2, fp
   253d4:	4621      	mov	r1, r4
   253d6:	4630      	mov	r0, r6
   253d8:	f001 fda4 	bl	26f24 <z_pend_curr>
   253dc:	f04f 0320 	mov.w	r3, #32
   253e0:	f3ef 8411 	mrs	r4, BASEPRI
   253e4:	f383 8812 	msr	BASEPRI_MAX, r3
   253e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253ec:	4630      	mov	r0, r6
   253ee:	f000 fa1b 	bl	25828 <z_spin_lock_valid>
   253f2:	2800      	cmp	r0, #0
   253f4:	d0b2      	beq.n	2535c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   253f6:	4630      	mov	r0, r6
   253f8:	f000 fa32 	bl	25860 <z_spin_lock_set_owner>
	return k;
   253fc:	e7c1      	b.n	25382 <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   253fe:	f384 8811 	msr	BASEPRI, r4
   25402:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25406:	4648      	mov	r0, r9
   25408:	b005      	add	sp, #20
   2540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2540e:	bf00      	nop
   25410:	00030eb4 	.word	0x00030eb4
   25414:	00030da5 	.word	0x00030da5
   25418:	000352fa 	.word	0x000352fa

0002541c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2541e:	4604      	mov	r4, r0
   25420:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25422:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   25426:	f04f 0320 	mov.w	r3, #32
   2542a:	f3ef 8711 	mrs	r7, BASEPRI
   2542e:	f383 8812 	msr	BASEPRI_MAX, r3
   25432:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25436:	4628      	mov	r0, r5
   25438:	f000 f9f6 	bl	25828 <z_spin_lock_valid>
   2543c:	b940      	cbnz	r0, 25450 <k_heap_free+0x34>
   2543e:	4915      	ldr	r1, [pc, #84]	; (25494 <k_heap_free+0x78>)
   25440:	2294      	movs	r2, #148	; 0x94
   25442:	4815      	ldr	r0, [pc, #84]	; (25498 <k_heap_free+0x7c>)
   25444:	f003 fbbe 	bl	28bc4 <assert_print>
   25448:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2544a:	4812      	ldr	r0, [pc, #72]	; (25494 <k_heap_free+0x78>)
   2544c:	f003 fbb3 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25450:	4628      	mov	r0, r5
   25452:	f000 fa05 	bl	25860 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   25456:	4620      	mov	r0, r4
   25458:	4631      	mov	r1, r6
   2545a:	f7e3 fd5b 	bl	8f14 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2545e:	f104 000c 	add.w	r0, r4, #12
   25462:	f00a f86c 	bl	2f53e <z_unpend_all>
   25466:	b128      	cbz	r0, 25474 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   25468:	4639      	mov	r1, r7
   2546a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2546c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   25470:	f001 bb04 	b.w	26a7c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25474:	4628      	mov	r0, r5
   25476:	f000 f9e5 	bl	25844 <z_spin_unlock_valid>
   2547a:	b930      	cbnz	r0, 2548a <k_heap_free+0x6e>
   2547c:	4905      	ldr	r1, [pc, #20]	; (25494 <k_heap_free+0x78>)
   2547e:	22c2      	movs	r2, #194	; 0xc2
   25480:	4805      	ldr	r0, [pc, #20]	; (25498 <k_heap_free+0x7c>)
   25482:	f003 fb9f 	bl	28bc4 <assert_print>
   25486:	21c2      	movs	r1, #194	; 0xc2
   25488:	e7df      	b.n	2544a <k_heap_free+0x2e>
	__asm__ volatile(
   2548a:	f387 8811 	msr	BASEPRI, r7
   2548e:	f3bf 8f6f 	isb	sy
}
   25492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25494:	00030eb4 	.word	0x00030eb4
   25498:	00030da5 	.word	0x00030da5

0002549c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   2549c:	2000      	movs	r0, #0
{
   2549e:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   254a0:	4c0a      	ldr	r4, [pc, #40]	; (254cc <init_mem_slab_module+0x30>)
   254a2:	4d0b      	ldr	r5, [pc, #44]	; (254d0 <init_mem_slab_module+0x34>)
   254a4:	42ac      	cmp	r4, r5
   254a6:	d90f      	bls.n	254c8 <init_mem_slab_module+0x2c>
   254a8:	490a      	ldr	r1, [pc, #40]	; (254d4 <init_mem_slab_module+0x38>)
   254aa:	480b      	ldr	r0, [pc, #44]	; (254d8 <init_mem_slab_module+0x3c>)
   254ac:	223d      	movs	r2, #61	; 0x3d
   254ae:	f003 fb89 	bl	28bc4 <assert_print>
   254b2:	213d      	movs	r1, #61	; 0x3d
   254b4:	4807      	ldr	r0, [pc, #28]	; (254d4 <init_mem_slab_module+0x38>)
   254b6:	f003 fb7e 	bl	28bb6 <assert_post_action>
		rc = create_free_list(slab);
   254ba:	4620      	mov	r0, r4
   254bc:	f009 ff43 	bl	2f346 <create_free_list>
		if (rc < 0) {
   254c0:	2800      	cmp	r0, #0
   254c2:	db02      	blt.n	254ca <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   254c4:	3420      	adds	r4, #32
   254c6:	e7ed      	b.n	254a4 <init_mem_slab_module+0x8>
   254c8:	d3f7      	bcc.n	254ba <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   254ca:	bd38      	pop	{r3, r4, r5, pc}
   254cc:	20008d8c 	.word	0x20008d8c
   254d0:	20008e2c 	.word	0x20008e2c
   254d4:	0003531c 	.word	0x0003531c
   254d8:	00030da5 	.word	0x00030da5

000254dc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   254dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   254e0:	4604      	mov	r4, r0
   254e2:	460d      	mov	r5, r1
   254e4:	4690      	mov	r8, r2
   254e6:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   254e8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   254ec:	f04f 0320 	mov.w	r3, #32
   254f0:	f3ef 8911 	mrs	r9, BASEPRI
   254f4:	f383 8812 	msr	BASEPRI_MAX, r3
   254f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254fc:	4630      	mov	r0, r6
   254fe:	f000 f993 	bl	25828 <z_spin_lock_valid>
   25502:	b940      	cbnz	r0, 25516 <k_mem_slab_alloc+0x3a>
   25504:	491e      	ldr	r1, [pc, #120]	; (25580 <k_mem_slab_alloc+0xa4>)
   25506:	2294      	movs	r2, #148	; 0x94
   25508:	481e      	ldr	r0, [pc, #120]	; (25584 <k_mem_slab_alloc+0xa8>)
   2550a:	f003 fb5b 	bl	28bc4 <assert_print>
   2550e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25510:	481b      	ldr	r0, [pc, #108]	; (25580 <k_mem_slab_alloc+0xa4>)
   25512:	f003 fb50 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25516:	4630      	mov	r0, r6
   25518:	f000 f9a2 	bl	25860 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2551c:	69a3      	ldr	r3, [r4, #24]
   2551e:	b18b      	cbz	r3, 25544 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   25520:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   25522:	681b      	ldr	r3, [r3, #0]
   25524:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   25526:	69e3      	ldr	r3, [r4, #28]
   25528:	3301      	adds	r3, #1
   2552a:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2552c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2552e:	4630      	mov	r0, r6
   25530:	f000 f988 	bl	25844 <z_spin_unlock_valid>
   25534:	b9f0      	cbnz	r0, 25574 <k_mem_slab_alloc+0x98>
   25536:	4912      	ldr	r1, [pc, #72]	; (25580 <k_mem_slab_alloc+0xa4>)
   25538:	22c2      	movs	r2, #194	; 0xc2
   2553a:	4812      	ldr	r0, [pc, #72]	; (25584 <k_mem_slab_alloc+0xa8>)
   2553c:	f003 fb42 	bl	28bc4 <assert_print>
   25540:	21c2      	movs	r1, #194	; 0xc2
   25542:	e7e5      	b.n	25510 <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   25544:	ea58 0207 	orrs.w	r2, r8, r7
   25548:	d103      	bne.n	25552 <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   2554a:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   2554e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   25550:	e7ed      	b.n	2552e <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   25552:	4622      	mov	r2, r4
   25554:	4649      	mov	r1, r9
   25556:	4630      	mov	r0, r6
   25558:	e9cd 8700 	strd	r8, r7, [sp]
   2555c:	f001 fce2 	bl	26f24 <z_pend_curr>
		if (result == 0) {
   25560:	4604      	mov	r4, r0
   25562:	b918      	cbnz	r0, 2556c <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   25564:	4b08      	ldr	r3, [pc, #32]	; (25588 <k_mem_slab_alloc+0xac>)
   25566:	689b      	ldr	r3, [r3, #8]
   25568:	695b      	ldr	r3, [r3, #20]
   2556a:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   2556c:	4620      	mov	r0, r4
   2556e:	b003      	add	sp, #12
   25570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   25574:	f389 8811 	msr	BASEPRI, r9
   25578:	f3bf 8f6f 	isb	sy
	return result;
   2557c:	e7f6      	b.n	2556c <k_mem_slab_alloc+0x90>
   2557e:	bf00      	nop
   25580:	00030eb4 	.word	0x00030eb4
   25584:	00030da5 	.word	0x00030da5
   25588:	2000b0c0 	.word	0x2000b0c0

0002558c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25590:	4604      	mov	r4, r0
   25592:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   25594:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25598:	f04f 0320 	mov.w	r3, #32
   2559c:	f3ef 8711 	mrs	r7, BASEPRI
   255a0:	f383 8812 	msr	BASEPRI_MAX, r3
   255a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255a8:	4630      	mov	r0, r6
   255aa:	f000 f93d 	bl	25828 <z_spin_lock_valid>
   255ae:	b940      	cbnz	r0, 255c2 <k_mem_slab_free+0x36>
   255b0:	491c      	ldr	r1, [pc, #112]	; (25624 <k_mem_slab_free+0x98>)
   255b2:	2294      	movs	r2, #148	; 0x94
   255b4:	481c      	ldr	r0, [pc, #112]	; (25628 <k_mem_slab_free+0x9c>)
   255b6:	f003 fb05 	bl	28bc4 <assert_print>
   255ba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255bc:	4819      	ldr	r0, [pc, #100]	; (25624 <k_mem_slab_free+0x98>)
   255be:	f003 fafa 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   255c2:	4630      	mov	r0, r6
   255c4:	f000 f94c 	bl	25860 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   255c8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   255cc:	f1b8 0f00 	cmp.w	r8, #0
   255d0:	d10f      	bne.n	255f2 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   255d2:	4620      	mov	r0, r4
   255d4:	f001 fea8 	bl	27328 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   255d8:	b158      	cbz	r0, 255f2 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   255da:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   255dc:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   255e0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   255e2:	f001 f9e3 	bl	269ac <z_ready_thread>
			z_reschedule(&slab->lock, key);
   255e6:	4639      	mov	r1, r7
   255e8:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   255ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   255ee:	f001 ba45 	b.w	26a7c <z_reschedule>
	**(char ***) mem = slab->free_list;
   255f2:	682b      	ldr	r3, [r5, #0]
   255f4:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255f6:	4630      	mov	r0, r6
   255f8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   255fa:	682b      	ldr	r3, [r5, #0]
   255fc:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   255fe:	69e3      	ldr	r3, [r4, #28]
   25600:	3b01      	subs	r3, #1
   25602:	61e3      	str	r3, [r4, #28]
   25604:	f000 f91e 	bl	25844 <z_spin_unlock_valid>
   25608:	b930      	cbnz	r0, 25618 <k_mem_slab_free+0x8c>
   2560a:	4906      	ldr	r1, [pc, #24]	; (25624 <k_mem_slab_free+0x98>)
   2560c:	22c2      	movs	r2, #194	; 0xc2
   2560e:	4806      	ldr	r0, [pc, #24]	; (25628 <k_mem_slab_free+0x9c>)
   25610:	f003 fad8 	bl	28bc4 <assert_print>
   25614:	21c2      	movs	r1, #194	; 0xc2
   25616:	e7d1      	b.n	255bc <k_mem_slab_free+0x30>
	__asm__ volatile(
   25618:	f387 8811 	msr	BASEPRI, r7
   2561c:	f3bf 8f6f 	isb	sy
}
   25620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25624:	00030eb4 	.word	0x00030eb4
   25628:	00030da5 	.word	0x00030da5

0002562c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2562c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2562e:	4604      	mov	r4, r0
   25630:	980b      	ldr	r0, [sp, #44]	; 0x2c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   25632:	280f      	cmp	r0, #15
   25634:	d12a      	bne.n	2568c <z_setup_new_thread+0x60>
   25636:	4d1d      	ldr	r5, [pc, #116]	; (256ac <z_setup_new_thread+0x80>)
   25638:	42ab      	cmp	r3, r5
   2563a:	d12b      	bne.n	25694 <z_setup_new_thread+0x68>
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2563c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2563e:	f104 0558 	add.w	r5, r4, #88	; 0x58
   25642:	7326      	strb	r6, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25644:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25646:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
	thread_base->pended_on = NULL;
   2564a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2564c:	3207      	adds	r2, #7
   2564e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   25652:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
	thread_base->thread_state = (uint8_t)initial_state;
   25656:	7366      	strb	r6, [r4, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   25658:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2565a:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	thread_base->prio = priority;
   2565c:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2565e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   25662:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   25664:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   25666:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25668:	9202      	str	r2, [sp, #8]
   2566a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2566c:	4620      	mov	r0, r4
   2566e:	9201      	str	r2, [sp, #4]
   25670:	9a08      	ldr	r2, [sp, #32]
   25672:	9200      	str	r2, [sp, #0]
   25674:	4632      	mov	r2, r6
   25676:	f7e7 fbc3 	bl	ce00 <arch_new_thread>
	if (!_current) {
   2567a:	4b0d      	ldr	r3, [pc, #52]	; (256b0 <z_setup_new_thread+0x84>)
	new_thread->init_data = NULL;
   2567c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2567e:	689b      	ldr	r3, [r3, #8]
   25680:	b103      	cbz	r3, 25684 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   25682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   25684:	4630      	mov	r0, r6
   25686:	6763      	str	r3, [r4, #116]	; 0x74
   25688:	b004      	add	sp, #16
   2568a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2568c:	f100 0510 	add.w	r5, r0, #16
   25690:	2d1e      	cmp	r5, #30
   25692:	d9d3      	bls.n	2563c <z_setup_new_thread+0x10>
   25694:	4907      	ldr	r1, [pc, #28]	; (256b4 <z_setup_new_thread+0x88>)
   25696:	4808      	ldr	r0, [pc, #32]	; (256b8 <z_setup_new_thread+0x8c>)
   25698:	f44f 7206 	mov.w	r2, #536	; 0x218
   2569c:	f003 fa92 	bl	28bc4 <assert_print>
   256a0:	f44f 7106 	mov.w	r1, #536	; 0x218
   256a4:	4803      	ldr	r0, [pc, #12]	; (256b4 <z_setup_new_thread+0x88>)
   256a6:	f003 fa86 	bl	28bb6 <assert_post_action>
   256aa:	bf00      	nop
   256ac:	00025871 	.word	0x00025871
   256b0:	2000b0c0 	.word	0x2000b0c0
   256b4:	00035341 	.word	0x00035341
   256b8:	00030da5 	.word	0x00030da5

000256bc <z_impl_k_thread_create>:
{
   256bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   256be:	b087      	sub	sp, #28
   256c0:	4604      	mov	r4, r0
   256c2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   256c6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   256ca:	b155      	cbz	r5, 256e2 <z_impl_k_thread_create+0x26>
   256cc:	4917      	ldr	r1, [pc, #92]	; (2572c <z_impl_k_thread_create+0x70>)
   256ce:	4818      	ldr	r0, [pc, #96]	; (25730 <z_impl_k_thread_create+0x74>)
   256d0:	f240 2287 	movw	r2, #647	; 0x287
   256d4:	f003 fa76 	bl	28bc4 <assert_print>
   256d8:	f240 2187 	movw	r1, #647	; 0x287
   256dc:	4813      	ldr	r0, [pc, #76]	; (2572c <z_impl_k_thread_create+0x70>)
   256de:	f003 fa6a 	bl	28bb6 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   256e2:	9505      	str	r5, [sp, #20]
   256e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   256e6:	9504      	str	r5, [sp, #16]
   256e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   256ea:	9503      	str	r5, [sp, #12]
   256ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   256ee:	9502      	str	r5, [sp, #8]
   256f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   256f2:	9501      	str	r5, [sp, #4]
   256f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   256f6:	9500      	str	r5, [sp, #0]
   256f8:	f7ff ff98 	bl	2562c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   256fc:	f1b6 3fff 	cmp.w	r6, #4294967295
   25700:	bf08      	it	eq
   25702:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   25706:	d005      	beq.n	25714 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25708:	ea56 0307 	orrs.w	r3, r6, r7
   2570c:	d105      	bne.n	2571a <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   2570e:	4620      	mov	r0, r4
   25710:	f001 f9e8 	bl	26ae4 <z_sched_start>
}
   25714:	4620      	mov	r0, r4
   25716:	b007      	add	sp, #28
   25718:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2571a:	463a      	mov	r2, r7
   2571c:	4633      	mov	r3, r6
   2571e:	4905      	ldr	r1, [pc, #20]	; (25734 <z_impl_k_thread_create+0x78>)
   25720:	f104 0018 	add.w	r0, r4, #24
   25724:	f002 f906 	bl	27934 <z_add_timeout>
   25728:	e7f4      	b.n	25714 <z_impl_k_thread_create+0x58>
   2572a:	bf00      	nop
   2572c:	00035341 	.word	0x00035341
   25730:	00030da5 	.word	0x00030da5
   25734:	00027229 	.word	0x00027229

00025738 <z_init_static_threads>:
{
   25738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2573c:	4c35      	ldr	r4, [pc, #212]	; (25814 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2573e:	4d36      	ldr	r5, [pc, #216]	; (25818 <z_init_static_threads+0xe0>)
{
   25740:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   25742:	42ac      	cmp	r4, r5
   25744:	4626      	mov	r6, r4
   25746:	d926      	bls.n	25796 <z_init_static_threads+0x5e>
   25748:	4934      	ldr	r1, [pc, #208]	; (2581c <z_init_static_threads+0xe4>)
   2574a:	f240 22ee 	movw	r2, #750	; 0x2ee
   2574e:	4834      	ldr	r0, [pc, #208]	; (25820 <z_init_static_threads+0xe8>)
   25750:	f003 fa38 	bl	28bc4 <assert_print>
   25754:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   25758:	4830      	ldr	r0, [pc, #192]	; (2581c <z_init_static_threads+0xe4>)
   2575a:	f003 fa2c 	bl	28bb6 <assert_post_action>
		z_setup_new_thread(
   2575e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25762:	9305      	str	r3, [sp, #20]
   25764:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25768:	9304      	str	r3, [sp, #16]
   2576a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2576e:	9303      	str	r3, [sp, #12]
   25770:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25774:	9302      	str	r3, [sp, #8]
   25776:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2577a:	9301      	str	r3, [sp, #4]
   2577c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25780:	9300      	str	r3, [sp, #0]
   25782:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25786:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2578a:	f7ff ff4f 	bl	2562c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2578e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25792:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25794:	e7d5      	b.n	25742 <z_init_static_threads+0xa>
   25796:	42ae      	cmp	r6, r5
   25798:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2579c:	d3df      	bcc.n	2575e <z_init_static_threads+0x26>
	k_sched_lock();
   2579e:	f001 f9e1 	bl	26b64 <k_sched_lock>
   257a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   257a6:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   257aa:	4c1a      	ldr	r4, [pc, #104]	; (25814 <z_init_static_threads+0xdc>)
   257ac:	f8df 9074 	ldr.w	r9, [pc, #116]	; 25824 <z_init_static_threads+0xec>
   257b0:	42ac      	cmp	r4, r5
   257b2:	d928      	bls.n	25806 <z_init_static_threads+0xce>
   257b4:	4919      	ldr	r1, [pc, #100]	; (2581c <z_init_static_threads+0xe4>)
   257b6:	f240 320d 	movw	r2, #781	; 0x30d
   257ba:	4819      	ldr	r0, [pc, #100]	; (25820 <z_init_static_threads+0xe8>)
   257bc:	f003 fa02 	bl	28bc4 <assert_print>
   257c0:	f240 310d 	movw	r1, #781	; 0x30d
   257c4:	e7c8      	b.n	25758 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   257c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   257c8:	1c5a      	adds	r2, r3, #1
   257ca:	d00d      	beq.n	257e8 <z_init_static_threads+0xb0>
   257cc:	2100      	movs	r1, #0
   257ce:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   257d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   257d4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257d8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   257dc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   257e0:	d104      	bne.n	257ec <z_init_static_threads+0xb4>
	z_sched_start(thread);
   257e2:	4640      	mov	r0, r8
   257e4:	f001 f97e 	bl	26ae4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   257e8:	3430      	adds	r4, #48	; 0x30
   257ea:	e7e1      	b.n	257b0 <z_init_static_threads+0x78>
   257ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   257f0:	2300      	movs	r3, #0
   257f2:	f7e2 fcaf 	bl	8154 <__aeabi_uldivmod>
   257f6:	4602      	mov	r2, r0
   257f8:	460b      	mov	r3, r1
   257fa:	f108 0018 	add.w	r0, r8, #24
   257fe:	4649      	mov	r1, r9
   25800:	f002 f898 	bl	27934 <z_add_timeout>
   25804:	e7f0      	b.n	257e8 <z_init_static_threads+0xb0>
   25806:	d3de      	bcc.n	257c6 <z_init_static_threads+0x8e>
}
   25808:	b007      	add	sp, #28
   2580a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2580e:	f001 b9f5 	b.w	26bfc <k_sched_unlock>
   25812:	bf00      	nop
   25814:	0002fb3c 	.word	0x0002fb3c
   25818:	0002fb3c 	.word	0x0002fb3c
   2581c:	00035341 	.word	0x00035341
   25820:	00030da5 	.word	0x00030da5
   25824:	00027229 	.word	0x00027229

00025828 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   25828:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2582a:	b138      	cbz	r0, 2583c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2582c:	4b04      	ldr	r3, [pc, #16]	; (25840 <z_spin_lock_valid+0x18>)
   2582e:	f000 0003 	and.w	r0, r0, #3
   25832:	7d1b      	ldrb	r3, [r3, #20]
   25834:	1ac0      	subs	r0, r0, r3
   25836:	bf18      	it	ne
   25838:	2001      	movne	r0, #1
   2583a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2583c:	2001      	movs	r0, #1
}
   2583e:	4770      	bx	lr
   25840:	2000b0c0 	.word	0x2000b0c0

00025844 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25844:	4a05      	ldr	r2, [pc, #20]	; (2585c <z_spin_unlock_valid+0x18>)
{
   25846:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25848:	7d11      	ldrb	r1, [r2, #20]
   2584a:	6892      	ldr	r2, [r2, #8]
   2584c:	430a      	orrs	r2, r1
   2584e:	6801      	ldr	r1, [r0, #0]
   25850:	2000      	movs	r0, #0
   25852:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   25854:	bf04      	itt	eq
   25856:	6018      	streq	r0, [r3, #0]
	return true;
   25858:	2001      	moveq	r0, #1
}
   2585a:	4770      	bx	lr
   2585c:	2000b0c0 	.word	0x2000b0c0

00025860 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   25860:	4b02      	ldr	r3, [pc, #8]	; (2586c <z_spin_lock_set_owner+0xc>)
   25862:	7d1a      	ldrb	r2, [r3, #20]
   25864:	689b      	ldr	r3, [r3, #8]
   25866:	4313      	orrs	r3, r2
   25868:	6003      	str	r3, [r0, #0]
}
   2586a:	4770      	bx	lr
   2586c:	2000b0c0 	.word	0x2000b0c0

00025870 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25870:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   25872:	4c12      	ldr	r4, [pc, #72]	; (258bc <idle+0x4c>)
   25874:	68a3      	ldr	r3, [r4, #8]
   25876:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2587a:	2b00      	cmp	r3, #0
   2587c:	db10      	blt.n	258a0 <idle+0x30>
   2587e:	4d10      	ldr	r5, [pc, #64]	; (258c0 <idle+0x50>)
	__asm__ volatile(
   25880:	f04f 0220 	mov.w	r2, #32
   25884:	f3ef 8311 	mrs	r3, BASEPRI
   25888:	f382 8812 	msr	BASEPRI_MAX, r2
   2588c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25890:	f002 f96e 	bl	27b70 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25894:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   25896:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25898:	b95b      	cbnz	r3, 258b2 <idle+0x42>
	arch_cpu_idle();
   2589a:	f7e7 f955 	bl	cb48 <arch_cpu_idle>
}
   2589e:	e7ef      	b.n	25880 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   258a0:	4908      	ldr	r1, [pc, #32]	; (258c4 <idle+0x54>)
   258a2:	4809      	ldr	r0, [pc, #36]	; (258c8 <idle+0x58>)
   258a4:	2227      	movs	r2, #39	; 0x27
   258a6:	f003 f98d 	bl	28bc4 <assert_print>
   258aa:	2127      	movs	r1, #39	; 0x27
   258ac:	4805      	ldr	r0, [pc, #20]	; (258c4 <idle+0x54>)
   258ae:	f003 f982 	bl	28bb6 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   258b2:	f7e6 fee3 	bl	c67c <pm_system_suspend>
   258b6:	2800      	cmp	r0, #0
   258b8:	d1e2      	bne.n	25880 <idle+0x10>
   258ba:	e7ee      	b.n	2589a <idle+0x2a>
   258bc:	2000b0c0 	.word	0x2000b0c0
   258c0:	2000b34a 	.word	0x2000b34a
   258c4:	00035364 	.word	0x00035364
   258c8:	00030da5 	.word	0x00030da5

000258cc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   258cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   258d0:	4604      	mov	r4, r0
   258d2:	4617      	mov	r7, r2
   258d4:	461e      	mov	r6, r3
   258d6:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   258da:	b145      	cbz	r5, 258ee <z_impl_k_mutex_lock+0x22>
   258dc:	4951      	ldr	r1, [pc, #324]	; (25a24 <z_impl_k_mutex_lock+0x158>)
   258de:	4852      	ldr	r0, [pc, #328]	; (25a28 <z_impl_k_mutex_lock+0x15c>)
   258e0:	2265      	movs	r2, #101	; 0x65
   258e2:	f003 f96f 	bl	28bc4 <assert_print>
   258e6:	2165      	movs	r1, #101	; 0x65
   258e8:	484e      	ldr	r0, [pc, #312]	; (25a24 <z_impl_k_mutex_lock+0x158>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258ea:	f003 f964 	bl	28bb6 <assert_post_action>
   258ee:	f04f 0320 	mov.w	r3, #32
   258f2:	f3ef 8811 	mrs	r8, BASEPRI
   258f6:	f383 8812 	msr	BASEPRI_MAX, r3
   258fa:	f3bf 8f6f 	isb	sy
   258fe:	484b      	ldr	r0, [pc, #300]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   25900:	f7ff ff92 	bl	25828 <z_spin_lock_valid>
   25904:	b938      	cbnz	r0, 25916 <z_impl_k_mutex_lock+0x4a>
   25906:	494a      	ldr	r1, [pc, #296]	; (25a30 <z_impl_k_mutex_lock+0x164>)
   25908:	2294      	movs	r2, #148	; 0x94
   2590a:	4847      	ldr	r0, [pc, #284]	; (25a28 <z_impl_k_mutex_lock+0x15c>)
   2590c:	f003 f95a 	bl	28bc4 <assert_print>
   25910:	2194      	movs	r1, #148	; 0x94
   25912:	4847      	ldr	r0, [pc, #284]	; (25a30 <z_impl_k_mutex_lock+0x164>)
   25914:	e7e9      	b.n	258ea <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   25916:	4845      	ldr	r0, [pc, #276]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   25918:	f7ff ffa2 	bl	25860 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2591c:	68e3      	ldr	r3, [r4, #12]
   2591e:	4a45      	ldr	r2, [pc, #276]	; (25a34 <z_impl_k_mutex_lock+0x168>)
   25920:	b19b      	cbz	r3, 2594a <z_impl_k_mutex_lock+0x7e>
   25922:	68a0      	ldr	r0, [r4, #8]
   25924:	6891      	ldr	r1, [r2, #8]
   25926:	4288      	cmp	r0, r1
   25928:	d022      	beq.n	25970 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2592a:	ea57 0306 	orrs.w	r3, r7, r6
   2592e:	d127      	bne.n	25980 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25930:	483e      	ldr	r0, [pc, #248]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   25932:	f7ff ff87 	bl	25844 <z_spin_unlock_valid>
   25936:	b1a0      	cbz	r0, 25962 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   25938:	f388 8811 	msr	BASEPRI, r8
   2593c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25940:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25944:	b002      	add	sp, #8
   25946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2594a:	6891      	ldr	r1, [r2, #8]
   2594c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   25950:	3301      	adds	r3, #1
   25952:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25954:	6893      	ldr	r3, [r2, #8]
   25956:	4835      	ldr	r0, [pc, #212]	; (25a2c <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25958:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2595a:	60a3      	str	r3, [r4, #8]
   2595c:	f7ff ff72 	bl	25844 <z_spin_unlock_valid>
   25960:	b940      	cbnz	r0, 25974 <z_impl_k_mutex_lock+0xa8>
   25962:	4933      	ldr	r1, [pc, #204]	; (25a30 <z_impl_k_mutex_lock+0x164>)
   25964:	22c2      	movs	r2, #194	; 0xc2
   25966:	4830      	ldr	r0, [pc, #192]	; (25a28 <z_impl_k_mutex_lock+0x15c>)
   25968:	f003 f92c 	bl	28bc4 <assert_print>
   2596c:	21c2      	movs	r1, #194	; 0xc2
   2596e:	e7d0      	b.n	25912 <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   25970:	6921      	ldr	r1, [r4, #16]
   25972:	e7ed      	b.n	25950 <z_impl_k_mutex_lock+0x84>
   25974:	f388 8811 	msr	BASEPRI, r8
   25978:	f3bf 8f6f 	isb	sy
		return 0;
   2597c:	2000      	movs	r0, #0
   2597e:	e7e1      	b.n	25944 <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25980:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25984:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25988:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2598c:	4299      	cmp	r1, r3
   2598e:	bfa8      	it	ge
   25990:	4619      	movge	r1, r3
   25992:	4291      	cmp	r1, r2
   25994:	bfb8      	it	lt
   25996:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25998:	428b      	cmp	r3, r1
   2599a:	dd02      	ble.n	259a2 <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   2599c:	f009 fcfd 	bl	2f39a <adjust_owner_prio.isra.0>
   259a0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   259a2:	4622      	mov	r2, r4
   259a4:	4641      	mov	r1, r8
   259a6:	e9cd 7600 	strd	r7, r6, [sp]
   259aa:	4820      	ldr	r0, [pc, #128]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   259ac:	f001 faba 	bl	26f24 <z_pend_curr>
	if (got_mutex == 0) {
   259b0:	2800      	cmp	r0, #0
   259b2:	d0e3      	beq.n	2597c <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   259b4:	f04f 0320 	mov.w	r3, #32
   259b8:	f3ef 8611 	mrs	r6, BASEPRI
   259bc:	f383 8812 	msr	BASEPRI_MAX, r3
   259c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259c4:	4819      	ldr	r0, [pc, #100]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   259c6:	f7ff ff2f 	bl	25828 <z_spin_lock_valid>
   259ca:	2800      	cmp	r0, #0
   259cc:	d09b      	beq.n	25906 <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   259ce:	4817      	ldr	r0, [pc, #92]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   259d0:	f7ff ff46 	bl	25860 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   259d4:	68a0      	ldr	r0, [r4, #8]
   259d6:	b1c0      	cbz	r0, 25a0a <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   259d8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   259da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   259dc:	429c      	cmp	r4, r3
   259de:	d00a      	beq.n	259f6 <z_impl_k_mutex_lock+0x12a>
   259e0:	b14b      	cbz	r3, 259f6 <z_impl_k_mutex_lock+0x12a>
   259e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   259e6:	4299      	cmp	r1, r3
   259e8:	bfa8      	it	ge
   259ea:	4619      	movge	r1, r3
   259ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   259f0:	4299      	cmp	r1, r3
   259f2:	bfb8      	it	lt
   259f4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   259f6:	f009 fcd0 	bl	2f39a <adjust_owner_prio.isra.0>
   259fa:	b130      	cbz	r0, 25a0a <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   259fc:	4631      	mov	r1, r6
   259fe:	480b      	ldr	r0, [pc, #44]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   25a00:	f001 f83c 	bl	26a7c <z_reschedule>
	return -EAGAIN;
   25a04:	f06f 000a 	mvn.w	r0, #10
   25a08:	e79c      	b.n	25944 <z_impl_k_mutex_lock+0x78>
	if (resched) {
   25a0a:	2d00      	cmp	r5, #0
   25a0c:	d1f6      	bne.n	259fc <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a0e:	4807      	ldr	r0, [pc, #28]	; (25a2c <z_impl_k_mutex_lock+0x160>)
   25a10:	f7ff ff18 	bl	25844 <z_spin_unlock_valid>
   25a14:	2800      	cmp	r0, #0
   25a16:	d0a4      	beq.n	25962 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   25a18:	f386 8811 	msr	BASEPRI, r6
   25a1c:	f3bf 8f6f 	isb	sy
   25a20:	e7f0      	b.n	25a04 <z_impl_k_mutex_lock+0x138>
   25a22:	bf00      	nop
   25a24:	00035385 	.word	0x00035385
   25a28:	00030da5 	.word	0x00030da5
   25a2c:	2000b0e8 	.word	0x2000b0e8
   25a30:	00030eb4 	.word	0x00030eb4
   25a34:	2000b0c0 	.word	0x2000b0c0

00025a38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25a38:	b570      	push	{r4, r5, r6, lr}
   25a3a:	4604      	mov	r4, r0
   25a3c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   25a40:	b146      	cbz	r6, 25a54 <z_impl_k_mutex_unlock+0x1c>
   25a42:	4930      	ldr	r1, [pc, #192]	; (25b04 <z_impl_k_mutex_unlock+0xcc>)
   25a44:	22cd      	movs	r2, #205	; 0xcd
   25a46:	4830      	ldr	r0, [pc, #192]	; (25b08 <z_impl_k_mutex_unlock+0xd0>)
   25a48:	f003 f8bc 	bl	28bc4 <assert_print>
   25a4c:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   25a4e:	482d      	ldr	r0, [pc, #180]	; (25b04 <z_impl_k_mutex_unlock+0xcc>)
   25a50:	f003 f8b1 	bl	28bb6 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   25a54:	6883      	ldr	r3, [r0, #8]
   25a56:	2b00      	cmp	r3, #0
   25a58:	d04e      	beq.n	25af8 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   25a5a:	4a2c      	ldr	r2, [pc, #176]	; (25b0c <z_impl_k_mutex_unlock+0xd4>)
   25a5c:	6892      	ldr	r2, [r2, #8]
   25a5e:	4293      	cmp	r3, r2
   25a60:	d14d      	bne.n	25afe <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   25a62:	68c3      	ldr	r3, [r0, #12]
   25a64:	b933      	cbnz	r3, 25a74 <z_impl_k_mutex_unlock+0x3c>
   25a66:	4927      	ldr	r1, [pc, #156]	; (25b04 <z_impl_k_mutex_unlock+0xcc>)
   25a68:	22e5      	movs	r2, #229	; 0xe5
   25a6a:	4827      	ldr	r0, [pc, #156]	; (25b08 <z_impl_k_mutex_unlock+0xd0>)
   25a6c:	f003 f8aa 	bl	28bc4 <assert_print>
   25a70:	21e5      	movs	r1, #229	; 0xe5
   25a72:	e7ec      	b.n	25a4e <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25a74:	2b01      	cmp	r3, #1
   25a76:	d003      	beq.n	25a80 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   25a78:	3b01      	subs	r3, #1
   25a7a:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   25a7c:	2000      	movs	r0, #0
}
   25a7e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   25a80:	f04f 0320 	mov.w	r3, #32
   25a84:	f3ef 8511 	mrs	r5, BASEPRI
   25a88:	f383 8812 	msr	BASEPRI_MAX, r3
   25a8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a90:	481f      	ldr	r0, [pc, #124]	; (25b10 <z_impl_k_mutex_unlock+0xd8>)
   25a92:	f7ff fec9 	bl	25828 <z_spin_lock_valid>
   25a96:	b938      	cbnz	r0, 25aa8 <z_impl_k_mutex_unlock+0x70>
   25a98:	491e      	ldr	r1, [pc, #120]	; (25b14 <z_impl_k_mutex_unlock+0xdc>)
   25a9a:	2294      	movs	r2, #148	; 0x94
   25a9c:	481a      	ldr	r0, [pc, #104]	; (25b08 <z_impl_k_mutex_unlock+0xd0>)
   25a9e:	f003 f891 	bl	28bc4 <assert_print>
   25aa2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aa4:	481b      	ldr	r0, [pc, #108]	; (25b14 <z_impl_k_mutex_unlock+0xdc>)
   25aa6:	e7d3      	b.n	25a50 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   25aa8:	4819      	ldr	r0, [pc, #100]	; (25b10 <z_impl_k_mutex_unlock+0xd8>)
   25aaa:	f7ff fed9 	bl	25860 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25aae:	6921      	ldr	r1, [r4, #16]
   25ab0:	68a0      	ldr	r0, [r4, #8]
   25ab2:	f009 fc72 	bl	2f39a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25ab6:	4620      	mov	r0, r4
   25ab8:	f001 fc36 	bl	27328 <z_unpend_first_thread>
	mutex->owner = new_owner;
   25abc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25abe:	b150      	cbz	r0, 25ad6 <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   25ac0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25ac4:	6122      	str	r2, [r4, #16]
   25ac6:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   25ac8:	f000 ff70 	bl	269ac <z_ready_thread>
		z_reschedule(&lock, key);
   25acc:	4629      	mov	r1, r5
   25ace:	4810      	ldr	r0, [pc, #64]	; (25b10 <z_impl_k_mutex_unlock+0xd8>)
   25ad0:	f000 ffd4 	bl	26a7c <z_reschedule>
   25ad4:	e7d2      	b.n	25a7c <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   25ad6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ad8:	480d      	ldr	r0, [pc, #52]	; (25b10 <z_impl_k_mutex_unlock+0xd8>)
   25ada:	f7ff feb3 	bl	25844 <z_spin_unlock_valid>
   25ade:	b930      	cbnz	r0, 25aee <z_impl_k_mutex_unlock+0xb6>
   25ae0:	490c      	ldr	r1, [pc, #48]	; (25b14 <z_impl_k_mutex_unlock+0xdc>)
   25ae2:	22c2      	movs	r2, #194	; 0xc2
   25ae4:	4808      	ldr	r0, [pc, #32]	; (25b08 <z_impl_k_mutex_unlock+0xd0>)
   25ae6:	f003 f86d 	bl	28bc4 <assert_print>
   25aea:	21c2      	movs	r1, #194	; 0xc2
   25aec:	e7da      	b.n	25aa4 <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   25aee:	f385 8811 	msr	BASEPRI, r5
   25af2:	f3bf 8f6f 	isb	sy
   25af6:	e7c1      	b.n	25a7c <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   25af8:	f06f 0015 	mvn.w	r0, #21
   25afc:	e7bf      	b.n	25a7e <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   25afe:	f04f 30ff 	mov.w	r0, #4294967295
   25b02:	e7bc      	b.n	25a7e <z_impl_k_mutex_unlock+0x46>
   25b04:	00035385 	.word	0x00035385
   25b08:	00030da5 	.word	0x00030da5
   25b0c:	2000b0c0 	.word	0x2000b0c0
   25b10:	2000b0e8 	.word	0x2000b0e8
   25b14:	00030eb4 	.word	0x00030eb4

00025b18 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   25b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25b1c:	4604      	mov	r4, r0
   25b1e:	460d      	mov	r5, r1
   25b20:	4690      	mov	r8, r2
   25b22:	4699      	mov	r9, r3
   25b24:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25b28:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25b2c:	f04f 0320 	mov.w	r3, #32
   25b30:	f3ef 8711 	mrs	r7, BASEPRI
   25b34:	f383 8812 	msr	BASEPRI_MAX, r3
   25b38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b3c:	4630      	mov	r0, r6
   25b3e:	f7ff fe73 	bl	25828 <z_spin_lock_valid>
   25b42:	b940      	cbnz	r0, 25b56 <queue_insert+0x3e>
   25b44:	4936      	ldr	r1, [pc, #216]	; (25c20 <queue_insert+0x108>)
   25b46:	2294      	movs	r2, #148	; 0x94
   25b48:	4836      	ldr	r0, [pc, #216]	; (25c24 <queue_insert+0x10c>)
   25b4a:	f003 f83b 	bl	28bc4 <assert_print>
   25b4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b50:	4833      	ldr	r0, [pc, #204]	; (25c20 <queue_insert+0x108>)
   25b52:	f003 f830 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25b56:	4630      	mov	r0, r6
   25b58:	f7ff fe82 	bl	25860 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   25b5c:	f1ba 0f00 	cmp.w	sl, #0
   25b60:	d000      	beq.n	25b64 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   25b62:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25b64:	f104 000c 	add.w	r0, r4, #12
   25b68:	f001 fbde 	bl	27328 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   25b6c:	b158      	cbz	r0, 25b86 <queue_insert+0x6e>
   25b6e:	2300      	movs	r3, #0
   25b70:	f8c0 8014 	str.w	r8, [r0, #20]
   25b74:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25b76:	f000 ff19 	bl	269ac <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25b7a:	4630      	mov	r0, r6
   25b7c:	4639      	mov	r1, r7
   25b7e:	f000 ff7d 	bl	26a7c <z_reschedule>
		return 0;
   25b82:	2000      	movs	r0, #0
   25b84:	e017      	b.n	25bb6 <queue_insert+0x9e>
	if (alloc) {
   25b86:	f1b9 0f00 	cmp.w	r9, #0
   25b8a:	d026      	beq.n	25bda <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   25b8c:	2108      	movs	r1, #8
   25b8e:	f002 fce5 	bl	2855c <z_thread_aligned_alloc>
		if (anode == NULL) {
   25b92:	b990      	cbnz	r0, 25bba <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b94:	4630      	mov	r0, r6
   25b96:	f7ff fe55 	bl	25844 <z_spin_unlock_valid>
   25b9a:	b930      	cbnz	r0, 25baa <queue_insert+0x92>
   25b9c:	4920      	ldr	r1, [pc, #128]	; (25c20 <queue_insert+0x108>)
   25b9e:	22c2      	movs	r2, #194	; 0xc2
   25ba0:	4820      	ldr	r0, [pc, #128]	; (25c24 <queue_insert+0x10c>)
   25ba2:	f003 f80f 	bl	28bc4 <assert_print>
   25ba6:	21c2      	movs	r1, #194	; 0xc2
   25ba8:	e7d2      	b.n	25b50 <queue_insert+0x38>
	__asm__ volatile(
   25baa:	f387 8811 	msr	BASEPRI, r7
   25bae:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25bb2:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   25bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25bba:	2201      	movs	r2, #1
		anode->data = data;
   25bbc:	f8c0 8004 	str.w	r8, [r0, #4]
   25bc0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25bc2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25bc4:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25bc8:	b95d      	cbnz	r5, 25be2 <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25bca:	6822      	ldr	r2, [r4, #0]
   25bcc:	430a      	orrs	r2, r1
   25bce:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25bd0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   25bd2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25bd4:	b96a      	cbnz	r2, 25bf2 <queue_insert+0xda>
	list->tail = node;
   25bd6:	6060      	str	r0, [r4, #4]
}
   25bd8:	e00b      	b.n	25bf2 <queue_insert+0xda>
}
   25bda:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   25bdc:	f8c8 9000 	str.w	r9, [r8]
}
   25be0:	e7ef      	b.n	25bc2 <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25be2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25be4:	2a03      	cmp	r2, #3
   25be6:	d810      	bhi.n	25c0a <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25be8:	6001      	str	r1, [r0, #0]
	return list->tail;
   25bea:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25bec:	b939      	cbnz	r1, 25bfe <queue_insert+0xe6>
	list->head = node;
   25bee:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25bf2:	2104      	movs	r1, #4
   25bf4:	f104 0014 	add.w	r0, r4, #20
   25bf8:	f009 fd91 	bl	2f71e <z_handle_obj_poll_events>
   25bfc:	e7bd      	b.n	25b7a <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25bfe:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c00:	f002 0203 	and.w	r2, r2, #3
   25c04:	4302      	orrs	r2, r0
   25c06:	600a      	str	r2, [r1, #0]
   25c08:	e7e5      	b.n	25bd6 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c0a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c0e:	430a      	orrs	r2, r1
   25c10:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c12:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c14:	f002 0203 	and.w	r2, r2, #3
   25c18:	ea40 0302 	orr.w	r3, r0, r2
   25c1c:	602b      	str	r3, [r5, #0]
}
   25c1e:	e7e8      	b.n	25bf2 <queue_insert+0xda>
   25c20:	00030eb4 	.word	0x00030eb4
   25c24:	00030da5 	.word	0x00030da5

00025c28 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25c2c:	4605      	mov	r5, r0
   25c2e:	4691      	mov	r9, r2
   25c30:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25c32:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25c36:	f04f 0320 	mov.w	r3, #32
   25c3a:	f3ef 8811 	mrs	r8, BASEPRI
   25c3e:	f383 8812 	msr	BASEPRI_MAX, r3
   25c42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c46:	4630      	mov	r0, r6
   25c48:	f7ff fdee 	bl	25828 <z_spin_lock_valid>
   25c4c:	b940      	cbnz	r0, 25c60 <z_impl_k_queue_get+0x38>
   25c4e:	491f      	ldr	r1, [pc, #124]	; (25ccc <z_impl_k_queue_get+0xa4>)
   25c50:	2294      	movs	r2, #148	; 0x94
   25c52:	481f      	ldr	r0, [pc, #124]	; (25cd0 <z_impl_k_queue_get+0xa8>)
   25c54:	f002 ffb6 	bl	28bc4 <assert_print>
   25c58:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c5a:	481c      	ldr	r0, [pc, #112]	; (25ccc <z_impl_k_queue_get+0xa4>)
   25c5c:	f002 ffab 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25c60:	4630      	mov	r0, r6
   25c62:	f7ff fdfd 	bl	25860 <z_spin_lock_set_owner>
	return list->head;
   25c66:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25c68:	b1c4      	cbz	r4, 25c9c <z_impl_k_queue_get+0x74>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c6a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c6c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c6e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c72:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25c74:	4620      	mov	r0, r4
   25c76:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   25c7a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   25c7c:	bf08      	it	eq
   25c7e:	606b      	streq	r3, [r5, #4]
   25c80:	f009 fb9a 	bl	2f3b8 <z_queue_node_peek>
   25c84:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c86:	4630      	mov	r0, r6
   25c88:	f7ff fddc 	bl	25844 <z_spin_unlock_valid>
   25c8c:	b9b0      	cbnz	r0, 25cbc <z_impl_k_queue_get+0x94>
   25c8e:	490f      	ldr	r1, [pc, #60]	; (25ccc <z_impl_k_queue_get+0xa4>)
   25c90:	22c2      	movs	r2, #194	; 0xc2
   25c92:	480f      	ldr	r0, [pc, #60]	; (25cd0 <z_impl_k_queue_get+0xa8>)
   25c94:	f002 ff96 	bl	28bc4 <assert_print>
   25c98:	21c2      	movs	r1, #194	; 0xc2
   25c9a:	e7de      	b.n	25c5a <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25c9c:	ea59 0307 	orrs.w	r3, r9, r7
   25ca0:	d0f1      	beq.n	25c86 <z_impl_k_queue_get+0x5e>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25ca2:	4641      	mov	r1, r8
   25ca4:	4630      	mov	r0, r6
   25ca6:	e9cd 9700 	strd	r9, r7, [sp]
   25caa:	f105 020c 	add.w	r2, r5, #12
   25cae:	f001 f939 	bl	26f24 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   25cb2:	b938      	cbnz	r0, 25cc4 <z_impl_k_queue_get+0x9c>
   25cb4:	4b07      	ldr	r3, [pc, #28]	; (25cd4 <z_impl_k_queue_get+0xac>)
   25cb6:	689b      	ldr	r3, [r3, #8]
   25cb8:	695c      	ldr	r4, [r3, #20]
   25cba:	e003      	b.n	25cc4 <z_impl_k_queue_get+0x9c>
	__asm__ volatile(
   25cbc:	f388 8811 	msr	BASEPRI, r8
   25cc0:	f3bf 8f6f 	isb	sy
}
   25cc4:	4620      	mov	r0, r4
   25cc6:	b003      	add	sp, #12
   25cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25ccc:	00030eb4 	.word	0x00030eb4
   25cd0:	00030da5 	.word	0x00030da5
   25cd4:	2000b0c0 	.word	0x2000b0c0

00025cd8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25cd8:	b538      	push	{r3, r4, r5, lr}
   25cda:	4604      	mov	r4, r0
	__asm__ volatile(
   25cdc:	f04f 0320 	mov.w	r3, #32
   25ce0:	f3ef 8511 	mrs	r5, BASEPRI
   25ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   25ce8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25cec:	4814      	ldr	r0, [pc, #80]	; (25d40 <z_impl_k_sem_give+0x68>)
   25cee:	f7ff fd9b 	bl	25828 <z_spin_lock_valid>
   25cf2:	b940      	cbnz	r0, 25d06 <z_impl_k_sem_give+0x2e>
   25cf4:	4913      	ldr	r1, [pc, #76]	; (25d44 <z_impl_k_sem_give+0x6c>)
   25cf6:	4814      	ldr	r0, [pc, #80]	; (25d48 <z_impl_k_sem_give+0x70>)
   25cf8:	2294      	movs	r2, #148	; 0x94
   25cfa:	f002 ff63 	bl	28bc4 <assert_print>
   25cfe:	2194      	movs	r1, #148	; 0x94
   25d00:	4810      	ldr	r0, [pc, #64]	; (25d44 <z_impl_k_sem_give+0x6c>)
   25d02:	f002 ff58 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25d06:	480e      	ldr	r0, [pc, #56]	; (25d40 <z_impl_k_sem_give+0x68>)
   25d08:	f7ff fdaa 	bl	25860 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25d0c:	4620      	mov	r0, r4
   25d0e:	f001 fb0b 	bl	27328 <z_unpend_first_thread>

	if (thread != NULL) {
   25d12:	b148      	cbz	r0, 25d28 <z_impl_k_sem_give+0x50>
   25d14:	2200      	movs	r2, #0
   25d16:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25d18:	f000 fe48 	bl	269ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25d1c:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25d22:	4807      	ldr	r0, [pc, #28]	; (25d40 <z_impl_k_sem_give+0x68>)
   25d24:	f000 beaa 	b.w	26a7c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25d28:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25d2c:	429a      	cmp	r2, r3
   25d2e:	bf18      	it	ne
   25d30:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25d32:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25d34:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25d36:	f104 0010 	add.w	r0, r4, #16
   25d3a:	f009 fcf0 	bl	2f71e <z_handle_obj_poll_events>
}
   25d3e:	e7ed      	b.n	25d1c <z_impl_k_sem_give+0x44>
   25d40:	2000b0ec 	.word	0x2000b0ec
   25d44:	00030eb4 	.word	0x00030eb4
   25d48:	00030da5 	.word	0x00030da5

00025d4c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25d4e:	4604      	mov	r4, r0
   25d50:	4616      	mov	r6, r2
   25d52:	461d      	mov	r5, r3
   25d54:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25d58:	b15b      	cbz	r3, 25d72 <z_impl_k_sem_take+0x26>
   25d5a:	ea52 0305 	orrs.w	r3, r2, r5
   25d5e:	d008      	beq.n	25d72 <z_impl_k_sem_take+0x26>
   25d60:	4926      	ldr	r1, [pc, #152]	; (25dfc <z_impl_k_sem_take+0xb0>)
   25d62:	4827      	ldr	r0, [pc, #156]	; (25e00 <z_impl_k_sem_take+0xb4>)
   25d64:	2279      	movs	r2, #121	; 0x79
   25d66:	f002 ff2d 	bl	28bc4 <assert_print>
   25d6a:	2179      	movs	r1, #121	; 0x79
   25d6c:	4823      	ldr	r0, [pc, #140]	; (25dfc <z_impl_k_sem_take+0xb0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d6e:	f002 ff22 	bl	28bb6 <assert_post_action>
   25d72:	f04f 0320 	mov.w	r3, #32
   25d76:	f3ef 8711 	mrs	r7, BASEPRI
   25d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   25d7e:	f3bf 8f6f 	isb	sy
   25d82:	4820      	ldr	r0, [pc, #128]	; (25e04 <z_impl_k_sem_take+0xb8>)
   25d84:	f7ff fd50 	bl	25828 <z_spin_lock_valid>
   25d88:	b938      	cbnz	r0, 25d9a <z_impl_k_sem_take+0x4e>
   25d8a:	491f      	ldr	r1, [pc, #124]	; (25e08 <z_impl_k_sem_take+0xbc>)
   25d8c:	2294      	movs	r2, #148	; 0x94
   25d8e:	481c      	ldr	r0, [pc, #112]	; (25e00 <z_impl_k_sem_take+0xb4>)
   25d90:	f002 ff18 	bl	28bc4 <assert_print>
   25d94:	2194      	movs	r1, #148	; 0x94
   25d96:	481c      	ldr	r0, [pc, #112]	; (25e08 <z_impl_k_sem_take+0xbc>)
   25d98:	e7e9      	b.n	25d6e <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   25d9a:	481a      	ldr	r0, [pc, #104]	; (25e04 <z_impl_k_sem_take+0xb8>)
   25d9c:	f7ff fd60 	bl	25860 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25da0:	68a3      	ldr	r3, [r4, #8]
   25da2:	b19b      	cbz	r3, 25dcc <z_impl_k_sem_take+0x80>
		sem->count--;
   25da4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25da6:	4817      	ldr	r0, [pc, #92]	; (25e04 <z_impl_k_sem_take+0xb8>)
   25da8:	60a3      	str	r3, [r4, #8]
   25daa:	f7ff fd4b 	bl	25844 <z_spin_unlock_valid>
   25dae:	b930      	cbnz	r0, 25dbe <z_impl_k_sem_take+0x72>
   25db0:	4915      	ldr	r1, [pc, #84]	; (25e08 <z_impl_k_sem_take+0xbc>)
   25db2:	22c2      	movs	r2, #194	; 0xc2
   25db4:	4812      	ldr	r0, [pc, #72]	; (25e00 <z_impl_k_sem_take+0xb4>)
   25db6:	f002 ff05 	bl	28bc4 <assert_print>
   25dba:	21c2      	movs	r1, #194	; 0xc2
   25dbc:	e7eb      	b.n	25d96 <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   25dbe:	f387 8811 	msr	BASEPRI, r7
   25dc2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25dc6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25dc8:	b003      	add	sp, #12
   25dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25dcc:	ea56 0305 	orrs.w	r3, r6, r5
   25dd0:	d10b      	bne.n	25dea <z_impl_k_sem_take+0x9e>
   25dd2:	480c      	ldr	r0, [pc, #48]	; (25e04 <z_impl_k_sem_take+0xb8>)
   25dd4:	f7ff fd36 	bl	25844 <z_spin_unlock_valid>
   25dd8:	2800      	cmp	r0, #0
   25dda:	d0e9      	beq.n	25db0 <z_impl_k_sem_take+0x64>
   25ddc:	f387 8811 	msr	BASEPRI, r7
   25de0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25de4:	f06f 000f 	mvn.w	r0, #15
   25de8:	e7ee      	b.n	25dc8 <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25dea:	4622      	mov	r2, r4
   25dec:	4639      	mov	r1, r7
   25dee:	e9cd 6500 	strd	r6, r5, [sp]
   25df2:	4804      	ldr	r0, [pc, #16]	; (25e04 <z_impl_k_sem_take+0xb8>)
   25df4:	f001 f896 	bl	26f24 <z_pend_curr>
	return ret;
   25df8:	e7e6      	b.n	25dc8 <z_impl_k_sem_take+0x7c>
   25dfa:	bf00      	nop
   25dfc:	000353a7 	.word	0x000353a7
   25e00:	00030da5 	.word	0x00030da5
   25e04:	2000b0ec 	.word	0x2000b0ec
   25e08:	00030eb4 	.word	0x00030eb4

00025e0c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25e0e:	2400      	movs	r4, #0
   25e10:	4b08      	ldr	r3, [pc, #32]	; (25e34 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   25e16:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25e18:	ab02      	add	r3, sp, #8
   25e1a:	9300      	str	r3, [sp, #0]
   25e1c:	4906      	ldr	r1, [pc, #24]	; (25e38 <k_sys_work_q_init+0x2c>)
   25e1e:	f04f 33ff 	mov.w	r3, #4294967295
   25e22:	4806      	ldr	r0, [pc, #24]	; (25e3c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25e24:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25e28:	f000 fa66 	bl	262f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25e2c:	4620      	mov	r0, r4
   25e2e:	b004      	add	sp, #16
   25e30:	bd10      	pop	{r4, pc}
   25e32:	bf00      	nop
   25e34:	000353c7 	.word	0x000353c7
   25e38:	2000df08 	.word	0x2000df08
   25e3c:	2000a508 	.word	0x2000a508

00025e40 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e44:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e46:	4e68      	ldr	r6, [pc, #416]	; (25fe8 <work_queue_main+0x1a8>)
	return list->head;
   25e48:	4f68      	ldr	r7, [pc, #416]	; (25fec <work_queue_main+0x1ac>)
   25e4a:	b085      	sub	sp, #20
	__asm__ volatile(
   25e4c:	f04f 0320 	mov.w	r3, #32
   25e50:	f3ef 8811 	mrs	r8, BASEPRI
   25e54:	f383 8812 	msr	BASEPRI_MAX, r3
   25e58:	f3bf 8f6f 	isb	sy
   25e5c:	4630      	mov	r0, r6
   25e5e:	f7ff fce3 	bl	25828 <z_spin_lock_valid>
   25e62:	b940      	cbnz	r0, 25e76 <work_queue_main+0x36>
   25e64:	4962      	ldr	r1, [pc, #392]	; (25ff0 <work_queue_main+0x1b0>)
   25e66:	2294      	movs	r2, #148	; 0x94
   25e68:	4862      	ldr	r0, [pc, #392]	; (25ff4 <work_queue_main+0x1b4>)
   25e6a:	f002 feab 	bl	28bc4 <assert_print>
   25e6e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e70:	485f      	ldr	r0, [pc, #380]	; (25ff0 <work_queue_main+0x1b0>)
   25e72:	f002 fea0 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25e76:	4630      	mov	r0, r6
   25e78:	f7ff fcf2 	bl	25860 <z_spin_lock_set_owner>
   25e7c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   25e80:	b9a5      	cbnz	r5, 25eac <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   25e82:	2102      	movs	r1, #2
   25e84:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   25e88:	f009 fad4 	bl	2f434 <flag_test_and_clear>
   25e8c:	bb80      	cbnz	r0, 25ef0 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25e8e:	2300      	movs	r3, #0
   25e90:	f04f 32ff 	mov.w	r2, #4294967295
   25e94:	9302      	str	r3, [sp, #8]
   25e96:	f04f 33ff 	mov.w	r3, #4294967295
   25e9a:	4641      	mov	r1, r8
   25e9c:	e9cd 2300 	strd	r2, r3, [sp]
   25ea0:	4630      	mov	r0, r6
   25ea2:	f104 0290 	add.w	r2, r4, #144	; 0x90
   25ea6:	f001 fca7 	bl	277f8 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   25eaa:	e7cf      	b.n	25e4c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25eac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   25eb0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25eb2:	4295      	cmp	r5, r2
	list->tail = node;
   25eb4:	bf08      	it	eq
   25eb6:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   25eba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   25ebe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ec2:	4630      	mov	r0, r6
   25ec4:	f043 0302 	orr.w	r3, r3, #2
   25ec8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   25ecc:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   25ece:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   25ed2:	f023 0304 	bic.w	r3, r3, #4
   25ed6:	f043 0301 	orr.w	r3, r3, #1
   25eda:	60eb      	str	r3, [r5, #12]
   25edc:	f7ff fcb2 	bl	25844 <z_spin_unlock_valid>
   25ee0:	b980      	cbnz	r0, 25f04 <work_queue_main+0xc4>
   25ee2:	4943      	ldr	r1, [pc, #268]	; (25ff0 <work_queue_main+0x1b0>)
   25ee4:	22c2      	movs	r2, #194	; 0xc2
   25ee6:	4843      	ldr	r0, [pc, #268]	; (25ff4 <work_queue_main+0x1b4>)
   25ee8:	f002 fe6c 	bl	28bc4 <assert_print>
   25eec:	21c2      	movs	r1, #194	; 0xc2
   25eee:	e7bf      	b.n	25e70 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25ef0:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25ef4:	2200      	movs	r2, #0
   25ef6:	2101      	movs	r1, #1
   25ef8:	4628      	mov	r0, r5
   25efa:	f001 fc31 	bl	27760 <z_sched_wake>
   25efe:	2800      	cmp	r0, #0
   25f00:	d1f8      	bne.n	25ef4 <work_queue_main+0xb4>
   25f02:	e7c4      	b.n	25e8e <work_queue_main+0x4e>
	__asm__ volatile(
   25f04:	f388 8811 	msr	BASEPRI, r8
   25f08:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   25f0c:	f1b9 0f00 	cmp.w	r9, #0
   25f10:	d109      	bne.n	25f26 <work_queue_main+0xe6>
   25f12:	4939      	ldr	r1, [pc, #228]	; (25ff8 <work_queue_main+0x1b8>)
   25f14:	4837      	ldr	r0, [pc, #220]	; (25ff4 <work_queue_main+0x1b4>)
   25f16:	f240 229b 	movw	r2, #667	; 0x29b
   25f1a:	f002 fe53 	bl	28bc4 <assert_print>
   25f1e:	f240 219b 	movw	r1, #667	; 0x29b
   25f22:	4835      	ldr	r0, [pc, #212]	; (25ff8 <work_queue_main+0x1b8>)
   25f24:	e7a5      	b.n	25e72 <work_queue_main+0x32>
		handler(work);
   25f26:	4628      	mov	r0, r5
   25f28:	47c8      	blx	r9
	__asm__ volatile(
   25f2a:	f04f 0320 	mov.w	r3, #32
   25f2e:	f3ef 8a11 	mrs	sl, BASEPRI
   25f32:	f383 8812 	msr	BASEPRI_MAX, r3
   25f36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f3a:	4630      	mov	r0, r6
   25f3c:	f7ff fc74 	bl	25828 <z_spin_lock_valid>
   25f40:	2800      	cmp	r0, #0
   25f42:	d08f      	beq.n	25e64 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   25f44:	4630      	mov	r0, r6
   25f46:	f7ff fc8b 	bl	25860 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   25f4a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25f4c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25f4e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25f52:	d417      	bmi.n	25f84 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   25f54:	60ea      	str	r2, [r5, #12]
   25f56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f5a:	4630      	mov	r0, r6
   25f5c:	f023 0302 	bic.w	r3, r3, #2
   25f60:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   25f64:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25f68:	f7ff fc6c 	bl	25844 <z_spin_unlock_valid>
   25f6c:	2800      	cmp	r0, #0
   25f6e:	d0b8      	beq.n	25ee2 <work_queue_main+0xa2>
	__asm__ volatile(
   25f70:	f38a 8811 	msr	BASEPRI, sl
   25f74:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25f78:	2d00      	cmp	r5, #0
   25f7a:	f47f af67 	bne.w	25e4c <work_queue_main+0xc>
	z_impl_k_yield();
   25f7e:	f001 fa1d 	bl	273bc <z_impl_k_yield>
}
   25f82:	e763      	b.n	25e4c <work_queue_main+0xc>
	return list->head;
   25f84:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   25f86:	f023 0303 	bic.w	r3, r3, #3
   25f8a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25f8c:	2800      	cmp	r0, #0
   25f8e:	d0e2      	beq.n	25f56 <work_queue_main+0x116>
	return node->next;
   25f90:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   25f94:	46c3      	mov	fp, r8
	return node->next;
   25f96:	f8d0 9000 	ldr.w	r9, [r0]
   25f9a:	2800      	cmp	r0, #0
   25f9c:	d0db      	beq.n	25f56 <work_queue_main+0x116>
		if (wc->work == work) {
   25f9e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25fa0:	4602      	mov	r2, r0
		if (wc->work == work) {
   25fa2:	429d      	cmp	r5, r3
   25fa4:	d10d      	bne.n	25fc2 <work_queue_main+0x182>
   25fa6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25fa8:	f1b8 0f00 	cmp.w	r8, #0
   25fac:	d112      	bne.n	25fd4 <work_queue_main+0x194>
   25fae:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   25fb0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25fb2:	4283      	cmp	r3, r0
   25fb4:	d100      	bne.n	25fb8 <work_queue_main+0x178>
	list->tail = node;
   25fb6:	607a      	str	r2, [r7, #4]
	parent->next = child;
   25fb8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   25fbc:	f7ff fe8c 	bl	25cd8 <z_impl_k_sem_give>
}
   25fc0:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25fc2:	f1b9 0f00 	cmp.w	r9, #0
   25fc6:	d00d      	beq.n	25fe4 <work_queue_main+0x1a4>
	return node->next;
   25fc8:	f8d9 3000 	ldr.w	r3, [r9]
   25fcc:	4648      	mov	r0, r9
   25fce:	4690      	mov	r8, r2
   25fd0:	4699      	mov	r9, r3
   25fd2:	e7e2      	b.n	25f9a <work_queue_main+0x15a>
	parent->next = child;
   25fd4:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25fd8:	687b      	ldr	r3, [r7, #4]
   25fda:	4283      	cmp	r3, r0
	list->tail = node;
   25fdc:	bf08      	it	eq
   25fde:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   25fe2:	e7e9      	b.n	25fb8 <work_queue_main+0x178>
   25fe4:	464b      	mov	r3, r9
   25fe6:	e7f1      	b.n	25fcc <work_queue_main+0x18c>
   25fe8:	2000b0f8 	.word	0x2000b0f8
   25fec:	2000b0f0 	.word	0x2000b0f0
   25ff0:	00030eb4 	.word	0x00030eb4
   25ff4:	00030da5 	.word	0x00030da5
   25ff8:	000353d0 	.word	0x000353d0

00025ffc <cancel_sync_locked>:
{
   25ffc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25ffe:	68c3      	ldr	r3, [r0, #12]
{
   26000:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   26002:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   26006:	079b      	lsls	r3, r3, #30
{
   26008:	460c      	mov	r4, r1
	if (ret) {
   2600a:	d50d      	bpl.n	26028 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2600c:	2201      	movs	r2, #1
   2600e:	2100      	movs	r1, #0
   26010:	f104 0008 	add.w	r0, r4, #8
   26014:	f009 f9fe 	bl	2f414 <z_impl_k_sem_init>
	parent->next = child;
   26018:	2300      	movs	r3, #0
   2601a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2601c:	4b05      	ldr	r3, [pc, #20]	; (26034 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2601e:	6065      	str	r5, [r4, #4]
   26020:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   26022:	b91a      	cbnz	r2, 2602c <cancel_sync_locked+0x30>
	list->head = node;
   26024:	e9c3 4400 	strd	r4, r4, [r3]
}
   26028:	4630      	mov	r0, r6
   2602a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2602c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2602e:	605c      	str	r4, [r3, #4]
}
   26030:	e7fa      	b.n	26028 <cancel_sync_locked+0x2c>
   26032:	bf00      	nop
   26034:	2000b0f0 	.word	0x2000b0f0

00026038 <submit_to_queue_locked>:
{
   26038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2603a:	68c3      	ldr	r3, [r0, #12]
{
   2603c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2603e:	079a      	lsls	r2, r3, #30
{
   26040:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26042:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26046:	d438      	bmi.n	260ba <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   26048:	075b      	lsls	r3, r3, #29
   2604a:	d424      	bmi.n	26096 <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   2604c:	680b      	ldr	r3, [r1, #0]
   2604e:	b90b      	cbnz	r3, 26054 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   26050:	6883      	ldr	r3, [r0, #8]
   26052:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   26054:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   26056:	07dd      	lsls	r5, r3, #31
   26058:	d520      	bpl.n	2609c <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   2605a:	68a3      	ldr	r3, [r4, #8]
   2605c:	b953      	cbnz	r3, 26074 <submit_to_queue_locked+0x3c>
   2605e:	4928      	ldr	r1, [pc, #160]	; (26100 <submit_to_queue_locked+0xc8>)
   26060:	4828      	ldr	r0, [pc, #160]	; (26104 <submit_to_queue_locked+0xcc>)
   26062:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   26066:	f002 fdad 	bl	28bc4 <assert_print>
   2606a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2606e:	4824      	ldr	r0, [pc, #144]	; (26100 <submit_to_queue_locked+0xc8>)
   26070:	f002 fda1 	bl	28bb6 <assert_post_action>
			ret = 2;
   26074:	2602      	movs	r6, #2
			*queuep = work->queue;
   26076:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   26078:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   2607a:	2d00      	cmp	r5, #0
   2607c:	d03c      	beq.n	260f8 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2607e:	4b22      	ldr	r3, [pc, #136]	; (26108 <submit_to_queue_locked+0xd0>)
   26080:	689b      	ldr	r3, [r3, #8]
   26082:	42ab      	cmp	r3, r5
   26084:	d00c      	beq.n	260a0 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   26086:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2608a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2608c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26090:	d416      	bmi.n	260c0 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   26092:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   26096:	2300      	movs	r3, #0
   26098:	603b      	str	r3, [r7, #0]
	return ret;
   2609a:	e027      	b.n	260ec <submit_to_queue_locked+0xb4>
		ret = 1;
   2609c:	2601      	movs	r6, #1
   2609e:	e7eb      	b.n	26078 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   260a0:	f009 f967 	bl	2f372 <k_is_in_isr>
   260a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   260a8:	2800      	cmp	r0, #0
   260aa:	d1ee      	bne.n	2608a <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   260ac:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   260ae:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   260b2:	d5ee      	bpl.n	26092 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   260b4:	b152      	cbz	r2, 260cc <submit_to_queue_locked+0x94>
   260b6:	075b      	lsls	r3, r3, #29
   260b8:	d408      	bmi.n	260cc <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   260ba:	f06f 060f 	mvn.w	r6, #15
   260be:	e7ea      	b.n	26096 <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   260c0:	2a00      	cmp	r2, #0
   260c2:	d1fa      	bne.n	260ba <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   260c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   260c8:	2b00      	cmp	r3, #0
   260ca:	d1f6      	bne.n	260ba <submit_to_queue_locked+0x82>
	parent->next = child;
   260cc:	2300      	movs	r3, #0
   260ce:	6023      	str	r3, [r4, #0]
	return list->tail;
   260d0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   260d4:	b963      	cbnz	r3, 260f0 <submit_to_queue_locked+0xb8>
	list->head = node;
   260d6:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   260da:	4628      	mov	r0, r5
   260dc:	f009 f9c3 	bl	2f466 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   260e0:	68e3      	ldr	r3, [r4, #12]
   260e2:	f043 0304 	orr.w	r3, r3, #4
   260e6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   260e8:	683b      	ldr	r3, [r7, #0]
   260ea:	60a3      	str	r3, [r4, #8]
}
   260ec:	4630      	mov	r0, r6
   260ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   260f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   260f2:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   260f6:	e7f0      	b.n	260da <submit_to_queue_locked+0xa2>
		return -EINVAL;
   260f8:	f06f 0615 	mvn.w	r6, #21
   260fc:	e7cb      	b.n	26096 <submit_to_queue_locked+0x5e>
   260fe:	bf00      	nop
   26100:	000353d0 	.word	0x000353d0
   26104:	00030da5 	.word	0x00030da5
   26108:	2000b0c0 	.word	0x2000b0c0

0002610c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   2610c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2610e:	4604      	mov	r4, r0
	__asm__ volatile(
   26110:	f04f 0320 	mov.w	r3, #32
   26114:	f3ef 8511 	mrs	r5, BASEPRI
   26118:	f383 8812 	msr	BASEPRI_MAX, r3
   2611c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26120:	4817      	ldr	r0, [pc, #92]	; (26180 <work_timeout+0x74>)
   26122:	f7ff fb81 	bl	25828 <z_spin_lock_valid>
   26126:	b940      	cbnz	r0, 2613a <work_timeout+0x2e>
   26128:	4916      	ldr	r1, [pc, #88]	; (26184 <work_timeout+0x78>)
   2612a:	2294      	movs	r2, #148	; 0x94
   2612c:	4816      	ldr	r0, [pc, #88]	; (26188 <work_timeout+0x7c>)
   2612e:	f002 fd49 	bl	28bc4 <assert_print>
   26132:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26134:	4813      	ldr	r0, [pc, #76]	; (26184 <work_timeout+0x78>)
   26136:	f002 fd3e 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2613a:	4811      	ldr	r0, [pc, #68]	; (26180 <work_timeout+0x74>)
   2613c:	f7ff fb90 	bl	25860 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   26140:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26142:	2103      	movs	r1, #3
   26144:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   26146:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26148:	f1a4 0610 	sub.w	r6, r4, #16
   2614c:	f009 f972 	bl	2f434 <flag_test_and_clear>
   26150:	b128      	cbz	r0, 2615e <work_timeout+0x52>
		queue = dw->queue;
   26152:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   26154:	4630      	mov	r0, r6
   26156:	a901      	add	r1, sp, #4
		queue = dw->queue;
   26158:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2615a:	f7ff ff6d 	bl	26038 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2615e:	4808      	ldr	r0, [pc, #32]	; (26180 <work_timeout+0x74>)
   26160:	f7ff fb70 	bl	25844 <z_spin_unlock_valid>
   26164:	b930      	cbnz	r0, 26174 <work_timeout+0x68>
   26166:	4907      	ldr	r1, [pc, #28]	; (26184 <work_timeout+0x78>)
   26168:	22c2      	movs	r2, #194	; 0xc2
   2616a:	4807      	ldr	r0, [pc, #28]	; (26188 <work_timeout+0x7c>)
   2616c:	f002 fd2a 	bl	28bc4 <assert_print>
   26170:	21c2      	movs	r1, #194	; 0xc2
   26172:	e7df      	b.n	26134 <work_timeout+0x28>
	__asm__ volatile(
   26174:	f385 8811 	msr	BASEPRI, r5
   26178:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   2617c:	b002      	add	sp, #8
   2617e:	bd70      	pop	{r4, r5, r6, pc}
   26180:	2000b0f8 	.word	0x2000b0f8
   26184:	00030eb4 	.word	0x00030eb4
   26188:	00030da5 	.word	0x00030da5

0002618c <k_work_init>:
{
   2618c:	b538      	push	{r3, r4, r5, lr}
   2618e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   26190:	4604      	mov	r4, r0
   26192:	b940      	cbnz	r0, 261a6 <k_work_init+0x1a>
   26194:	490b      	ldr	r1, [pc, #44]	; (261c4 <k_work_init+0x38>)
   26196:	2289      	movs	r2, #137	; 0x89
   26198:	480b      	ldr	r0, [pc, #44]	; (261c8 <k_work_init+0x3c>)
   2619a:	f002 fd13 	bl	28bc4 <assert_print>
   2619e:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   261a0:	4808      	ldr	r0, [pc, #32]	; (261c4 <k_work_init+0x38>)
   261a2:	f002 fd08 	bl	28bb6 <assert_post_action>
   261a6:	b931      	cbnz	r1, 261b6 <k_work_init+0x2a>
   261a8:	4906      	ldr	r1, [pc, #24]	; (261c4 <k_work_init+0x38>)
   261aa:	228a      	movs	r2, #138	; 0x8a
   261ac:	4806      	ldr	r0, [pc, #24]	; (261c8 <k_work_init+0x3c>)
   261ae:	f002 fd09 	bl	28bc4 <assert_print>
   261b2:	218a      	movs	r1, #138	; 0x8a
   261b4:	e7f4      	b.n	261a0 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   261b6:	2210      	movs	r2, #16
   261b8:	2100      	movs	r1, #0
   261ba:	f004 f9b9 	bl	2a530 <memset>
   261be:	6065      	str	r5, [r4, #4]
}
   261c0:	bd38      	pop	{r3, r4, r5, pc}
   261c2:	bf00      	nop
   261c4:	000353d0 	.word	0x000353d0
   261c8:	00030da5 	.word	0x00030da5

000261cc <k_work_busy_get>:
{
   261cc:	b538      	push	{r3, r4, r5, lr}
   261ce:	4604      	mov	r4, r0
	__asm__ volatile(
   261d0:	f04f 0320 	mov.w	r3, #32
   261d4:	f3ef 8511 	mrs	r5, BASEPRI
   261d8:	f383 8812 	msr	BASEPRI_MAX, r3
   261dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261e0:	4811      	ldr	r0, [pc, #68]	; (26228 <k_work_busy_get+0x5c>)
   261e2:	f7ff fb21 	bl	25828 <z_spin_lock_valid>
   261e6:	b940      	cbnz	r0, 261fa <k_work_busy_get+0x2e>
   261e8:	4910      	ldr	r1, [pc, #64]	; (2622c <k_work_busy_get+0x60>)
   261ea:	2294      	movs	r2, #148	; 0x94
   261ec:	4810      	ldr	r0, [pc, #64]	; (26230 <k_work_busy_get+0x64>)
   261ee:	f002 fce9 	bl	28bc4 <assert_print>
   261f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261f4:	480d      	ldr	r0, [pc, #52]	; (2622c <k_work_busy_get+0x60>)
   261f6:	f002 fcde 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   261fa:	480b      	ldr	r0, [pc, #44]	; (26228 <k_work_busy_get+0x5c>)
   261fc:	f7ff fb30 	bl	25860 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   26200:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26202:	4809      	ldr	r0, [pc, #36]	; (26228 <k_work_busy_get+0x5c>)
   26204:	f004 040f 	and.w	r4, r4, #15
   26208:	f7ff fb1c 	bl	25844 <z_spin_unlock_valid>
   2620c:	b930      	cbnz	r0, 2621c <k_work_busy_get+0x50>
   2620e:	4907      	ldr	r1, [pc, #28]	; (2622c <k_work_busy_get+0x60>)
   26210:	22c2      	movs	r2, #194	; 0xc2
   26212:	4807      	ldr	r0, [pc, #28]	; (26230 <k_work_busy_get+0x64>)
   26214:	f002 fcd6 	bl	28bc4 <assert_print>
   26218:	21c2      	movs	r1, #194	; 0xc2
   2621a:	e7eb      	b.n	261f4 <k_work_busy_get+0x28>
	__asm__ volatile(
   2621c:	f385 8811 	msr	BASEPRI, r5
   26220:	f3bf 8f6f 	isb	sy
}
   26224:	4620      	mov	r0, r4
   26226:	bd38      	pop	{r3, r4, r5, pc}
   26228:	2000b0f8 	.word	0x2000b0f8
   2622c:	00030eb4 	.word	0x00030eb4
   26230:	00030da5 	.word	0x00030da5

00026234 <z_work_submit_to_queue>:
{
   26234:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   26236:	460c      	mov	r4, r1
{
   26238:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   2623a:	b951      	cbnz	r1, 26252 <z_work_submit_to_queue+0x1e>
   2623c:	491c      	ldr	r1, [pc, #112]	; (262b0 <z_work_submit_to_queue+0x7c>)
   2623e:	481d      	ldr	r0, [pc, #116]	; (262b4 <z_work_submit_to_queue+0x80>)
   26240:	f44f 72ba 	mov.w	r2, #372	; 0x174
   26244:	f002 fcbe 	bl	28bc4 <assert_print>
   26248:	f44f 71ba 	mov.w	r1, #372	; 0x174
   2624c:	4818      	ldr	r0, [pc, #96]	; (262b0 <z_work_submit_to_queue+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2624e:	f002 fcb2 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   26252:	f04f 0320 	mov.w	r3, #32
   26256:	f3ef 8511 	mrs	r5, BASEPRI
   2625a:	f383 8812 	msr	BASEPRI_MAX, r3
   2625e:	f3bf 8f6f 	isb	sy
   26262:	4815      	ldr	r0, [pc, #84]	; (262b8 <z_work_submit_to_queue+0x84>)
   26264:	f7ff fae0 	bl	25828 <z_spin_lock_valid>
   26268:	b938      	cbnz	r0, 2627a <z_work_submit_to_queue+0x46>
   2626a:	4914      	ldr	r1, [pc, #80]	; (262bc <z_work_submit_to_queue+0x88>)
   2626c:	2294      	movs	r2, #148	; 0x94
   2626e:	4811      	ldr	r0, [pc, #68]	; (262b4 <z_work_submit_to_queue+0x80>)
   26270:	f002 fca8 	bl	28bc4 <assert_print>
   26274:	2194      	movs	r1, #148	; 0x94
   26276:	4811      	ldr	r0, [pc, #68]	; (262bc <z_work_submit_to_queue+0x88>)
   26278:	e7e9      	b.n	2624e <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   2627a:	480f      	ldr	r0, [pc, #60]	; (262b8 <z_work_submit_to_queue+0x84>)
   2627c:	f7ff faf0 	bl	25860 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   26280:	4620      	mov	r0, r4
   26282:	a901      	add	r1, sp, #4
   26284:	f7ff fed8 	bl	26038 <submit_to_queue_locked>
   26288:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2628a:	480b      	ldr	r0, [pc, #44]	; (262b8 <z_work_submit_to_queue+0x84>)
   2628c:	f7ff fada 	bl	25844 <z_spin_unlock_valid>
   26290:	b930      	cbnz	r0, 262a0 <z_work_submit_to_queue+0x6c>
   26292:	490a      	ldr	r1, [pc, #40]	; (262bc <z_work_submit_to_queue+0x88>)
   26294:	22c2      	movs	r2, #194	; 0xc2
   26296:	4807      	ldr	r0, [pc, #28]	; (262b4 <z_work_submit_to_queue+0x80>)
   26298:	f002 fc94 	bl	28bc4 <assert_print>
   2629c:	21c2      	movs	r1, #194	; 0xc2
   2629e:	e7ea      	b.n	26276 <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   262a0:	f385 8811 	msr	BASEPRI, r5
   262a4:	f3bf 8f6f 	isb	sy
}
   262a8:	4620      	mov	r0, r4
   262aa:	b003      	add	sp, #12
   262ac:	bd30      	pop	{r4, r5, pc}
   262ae:	bf00      	nop
   262b0:	000353d0 	.word	0x000353d0
   262b4:	00030da5 	.word	0x00030da5
   262b8:	2000b0f8 	.word	0x2000b0f8
   262bc:	00030eb4 	.word	0x00030eb4

000262c0 <k_work_submit>:
{
   262c0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   262c2:	4801      	ldr	r0, [pc, #4]	; (262c8 <k_work_submit+0x8>)
   262c4:	f009 b909 	b.w	2f4da <k_work_submit_to_queue>
   262c8:	2000a508 	.word	0x2000a508

000262cc <k_work_queue_init>:
{
   262cc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   262ce:	b950      	cbnz	r0, 262e6 <k_work_queue_init+0x1a>
   262d0:	4907      	ldr	r1, [pc, #28]	; (262f0 <k_work_queue_init+0x24>)
   262d2:	4808      	ldr	r0, [pc, #32]	; (262f4 <k_work_queue_init+0x28>)
   262d4:	f240 22b9 	movw	r2, #697	; 0x2b9
   262d8:	f002 fc74 	bl	28bc4 <assert_print>
   262dc:	f240 21b9 	movw	r1, #697	; 0x2b9
   262e0:	4803      	ldr	r0, [pc, #12]	; (262f0 <k_work_queue_init+0x24>)
   262e2:	f002 fc68 	bl	28bb6 <assert_post_action>
	*queue = (struct k_work_q) {
   262e6:	22a8      	movs	r2, #168	; 0xa8
   262e8:	2100      	movs	r1, #0
   262ea:	f004 f921 	bl	2a530 <memset>
}
   262ee:	bd08      	pop	{r3, pc}
   262f0:	000353d0 	.word	0x000353d0
   262f4:	00030da5 	.word	0x00030da5

000262f8 <k_work_queue_start>:
{
   262f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   262fa:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   262fc:	4604      	mov	r4, r0
{
   262fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   26300:	b950      	cbnz	r0, 26318 <k_work_queue_start+0x20>
   26302:	492a      	ldr	r1, [pc, #168]	; (263ac <k_work_queue_start+0xb4>)
   26304:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   26308:	4829      	ldr	r0, [pc, #164]	; (263b0 <k_work_queue_start+0xb8>)
   2630a:	f002 fc5b 	bl	28bc4 <assert_print>
   2630e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   26312:	4826      	ldr	r0, [pc, #152]	; (263ac <k_work_queue_start+0xb4>)
   26314:	f002 fc4f 	bl	28bb6 <assert_post_action>
   26318:	b941      	cbnz	r1, 2632c <k_work_queue_start+0x34>
   2631a:	4924      	ldr	r1, [pc, #144]	; (263ac <k_work_queue_start+0xb4>)
   2631c:	f240 22c9 	movw	r2, #713	; 0x2c9
   26320:	4823      	ldr	r0, [pc, #140]	; (263b0 <k_work_queue_start+0xb8>)
   26322:	f002 fc4f 	bl	28bc4 <assert_print>
   26326:	f240 21c9 	movw	r1, #713	; 0x2c9
   2632a:	e7f2      	b.n	26312 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   2632c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26330:	f010 0001 	ands.w	r0, r0, #1
   26334:	d008      	beq.n	26348 <k_work_queue_start+0x50>
   26336:	491d      	ldr	r1, [pc, #116]	; (263ac <k_work_queue_start+0xb4>)
   26338:	f240 22ca 	movw	r2, #714	; 0x2ca
   2633c:	481c      	ldr	r0, [pc, #112]	; (263b0 <k_work_queue_start+0xb8>)
   2633e:	f002 fc41 	bl	28bc4 <assert_print>
   26342:	f240 21ca 	movw	r1, #714	; 0x2ca
   26346:	e7e4      	b.n	26312 <k_work_queue_start+0x1a>
	list->tail = NULL;
   26348:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2634c:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   26350:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   26354:	f104 0098 	add.w	r0, r4, #152	; 0x98
   26358:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   2635c:	b31d      	cbz	r5, 263a6 <k_work_queue_start+0xae>
   2635e:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26360:	2800      	cmp	r0, #0
   26362:	f240 1001 	movw	r0, #257	; 0x101
   26366:	bf08      	it	eq
   26368:	2001      	moveq	r0, #1
	*flagp = flags;
   2636a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2636e:	2000      	movs	r0, #0
   26370:	f04f 36ff 	mov.w	r6, #4294967295
   26374:	f04f 37ff 	mov.w	r7, #4294967295
   26378:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2637c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26380:	e9cd 6706 	strd	r6, r7, [sp, #24]
   26384:	4620      	mov	r0, r4
   26386:	4b0b      	ldr	r3, [pc, #44]	; (263b4 <k_work_queue_start+0xbc>)
   26388:	9400      	str	r4, [sp, #0]
   2638a:	f7ff f997 	bl	256bc <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2638e:	b125      	cbz	r5, 2639a <k_work_queue_start+0xa2>
   26390:	6829      	ldr	r1, [r5, #0]
   26392:	b111      	cbz	r1, 2639a <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   26394:	4620      	mov	r0, r4
   26396:	f008 fff2 	bl	2f37e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2639a:	4620      	mov	r0, r4
}
   2639c:	b009      	add	sp, #36	; 0x24
   2639e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   263a2:	f008 bff1 	b.w	2f388 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   263a6:	2001      	movs	r0, #1
   263a8:	e7df      	b.n	2636a <k_work_queue_start+0x72>
   263aa:	bf00      	nop
   263ac:	000353d0 	.word	0x000353d0
   263b0:	00030da5 	.word	0x00030da5
   263b4:	00025e41 	.word	0x00025e41

000263b8 <k_work_queue_drain>:
{
   263b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   263ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   263bc:	4604      	mov	r4, r0
   263be:	b950      	cbnz	r0, 263d6 <k_work_queue_drain+0x1e>
   263c0:	4934      	ldr	r1, [pc, #208]	; (26494 <k_work_queue_drain+0xdc>)
   263c2:	f240 22ed 	movw	r2, #749	; 0x2ed
   263c6:	4834      	ldr	r0, [pc, #208]	; (26498 <k_work_queue_drain+0xe0>)
   263c8:	f002 fbfc 	bl	28bc4 <assert_print>
   263cc:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   263d0:	4830      	ldr	r0, [pc, #192]	; (26494 <k_work_queue_drain+0xdc>)
   263d2:	f002 fbf0 	bl	28bb6 <assert_post_action>
   263d6:	f008 ffcc 	bl	2f372 <k_is_in_isr>
   263da:	b140      	cbz	r0, 263ee <k_work_queue_drain+0x36>
   263dc:	492d      	ldr	r1, [pc, #180]	; (26494 <k_work_queue_drain+0xdc>)
   263de:	f240 22ee 	movw	r2, #750	; 0x2ee
   263e2:	482d      	ldr	r0, [pc, #180]	; (26498 <k_work_queue_drain+0xe0>)
   263e4:	f002 fbee 	bl	28bc4 <assert_print>
   263e8:	f240 21ee 	movw	r1, #750	; 0x2ee
   263ec:	e7f0      	b.n	263d0 <k_work_queue_drain+0x18>
	__asm__ volatile(
   263ee:	f04f 0320 	mov.w	r3, #32
   263f2:	f3ef 8611 	mrs	r6, BASEPRI
   263f6:	f383 8812 	msr	BASEPRI_MAX, r3
   263fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263fe:	4827      	ldr	r0, [pc, #156]	; (2649c <k_work_queue_drain+0xe4>)
   26400:	f7ff fa12 	bl	25828 <z_spin_lock_valid>
   26404:	b938      	cbnz	r0, 26416 <k_work_queue_drain+0x5e>
   26406:	4926      	ldr	r1, [pc, #152]	; (264a0 <k_work_queue_drain+0xe8>)
   26408:	2294      	movs	r2, #148	; 0x94
   2640a:	4823      	ldr	r0, [pc, #140]	; (26498 <k_work_queue_drain+0xe0>)
   2640c:	f002 fbda 	bl	28bc4 <assert_print>
   26410:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26412:	4823      	ldr	r0, [pc, #140]	; (264a0 <k_work_queue_drain+0xe8>)
   26414:	e7dd      	b.n	263d2 <k_work_queue_drain+0x1a>
	z_spin_lock_set_owner(l);
   26416:	4821      	ldr	r0, [pc, #132]	; (2649c <k_work_queue_drain+0xe4>)
   26418:	f7ff fa22 	bl	25860 <z_spin_lock_set_owner>
	return *flagp;
   2641c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   26420:	f013 0f06 	tst.w	r3, #6
   26424:	d11d      	bne.n	26462 <k_work_queue_drain+0xaa>
	    || plug
   26426:	b1b5      	cbz	r5, 26456 <k_work_queue_drain+0x9e>
	*flagp |= BIT(bit);
   26428:	f043 030c 	orr.w	r3, r3, #12
   2642c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   26430:	4620      	mov	r0, r4
   26432:	f009 f818 	bl	2f466 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   26436:	2300      	movs	r3, #0
   26438:	f04f 32ff 	mov.w	r2, #4294967295
   2643c:	9302      	str	r3, [sp, #8]
   2643e:	f04f 33ff 	mov.w	r3, #4294967295
   26442:	4631      	mov	r1, r6
   26444:	e9cd 2300 	strd	r2, r3, [sp]
   26448:	4814      	ldr	r0, [pc, #80]	; (2649c <k_work_queue_drain+0xe4>)
   2644a:	f104 0298 	add.w	r2, r4, #152	; 0x98
   2644e:	f001 f9d3 	bl	277f8 <z_sched_wait>
}
   26452:	b004      	add	sp, #16
   26454:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   26456:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   2645a:	b14d      	cbz	r5, 26470 <k_work_queue_drain+0xb8>
	*flagp |= BIT(bit);
   2645c:	f043 0304 	orr.w	r3, r3, #4
   26460:	e7e4      	b.n	2642c <k_work_queue_drain+0x74>
   26462:	f043 0204 	orr.w	r2, r3, #4
   26466:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   2646a:	2d00      	cmp	r5, #0
   2646c:	d0e0      	beq.n	26430 <k_work_queue_drain+0x78>
   2646e:	e7db      	b.n	26428 <k_work_queue_drain+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26470:	480a      	ldr	r0, [pc, #40]	; (2649c <k_work_queue_drain+0xe4>)
   26472:	f7ff f9e7 	bl	25844 <z_spin_unlock_valid>
   26476:	b930      	cbnz	r0, 26486 <k_work_queue_drain+0xce>
   26478:	4909      	ldr	r1, [pc, #36]	; (264a0 <k_work_queue_drain+0xe8>)
   2647a:	22c2      	movs	r2, #194	; 0xc2
   2647c:	4806      	ldr	r0, [pc, #24]	; (26498 <k_work_queue_drain+0xe0>)
   2647e:	f002 fba1 	bl	28bc4 <assert_print>
   26482:	21c2      	movs	r1, #194	; 0xc2
   26484:	e7c5      	b.n	26412 <k_work_queue_drain+0x5a>
	__asm__ volatile(
   26486:	f386 8811 	msr	BASEPRI, r6
   2648a:	f3bf 8f6f 	isb	sy
	int ret = 0;
   2648e:	4628      	mov	r0, r5
	return ret;
   26490:	e7df      	b.n	26452 <k_work_queue_drain+0x9a>
   26492:	bf00      	nop
   26494:	000353d0 	.word	0x000353d0
   26498:	00030da5 	.word	0x00030da5
   2649c:	2000b0f8 	.word	0x2000b0f8
   264a0:	00030eb4 	.word	0x00030eb4

000264a4 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   264a4:	b538      	push	{r3, r4, r5, lr}
   264a6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   264a8:	4604      	mov	r4, r0
   264aa:	b950      	cbnz	r0, 264c2 <k_work_init_delayable+0x1e>
   264ac:	490e      	ldr	r1, [pc, #56]	; (264e8 <k_work_init_delayable+0x44>)
   264ae:	f44f 7250 	mov.w	r2, #832	; 0x340
   264b2:	480e      	ldr	r0, [pc, #56]	; (264ec <k_work_init_delayable+0x48>)
   264b4:	f002 fb86 	bl	28bc4 <assert_print>
   264b8:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   264bc:	480a      	ldr	r0, [pc, #40]	; (264e8 <k_work_init_delayable+0x44>)
   264be:	f002 fb7a 	bl	28bb6 <assert_post_action>
   264c2:	b941      	cbnz	r1, 264d6 <k_work_init_delayable+0x32>
   264c4:	4908      	ldr	r1, [pc, #32]	; (264e8 <k_work_init_delayable+0x44>)
   264c6:	f240 3241 	movw	r2, #833	; 0x341
   264ca:	4808      	ldr	r0, [pc, #32]	; (264ec <k_work_init_delayable+0x48>)
   264cc:	f002 fb7a 	bl	28bc4 <assert_print>
   264d0:	f240 3141 	movw	r1, #833	; 0x341
   264d4:	e7f2      	b.n	264bc <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   264d6:	2230      	movs	r2, #48	; 0x30
   264d8:	2100      	movs	r1, #0
   264da:	f004 f829 	bl	2a530 <memset>
   264de:	f44f 7380 	mov.w	r3, #256	; 0x100
   264e2:	6065      	str	r5, [r4, #4]
   264e4:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   264e6:	bd38      	pop	{r3, r4, r5, pc}
   264e8:	000353d0 	.word	0x000353d0
   264ec:	00030da5 	.word	0x00030da5

000264f0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   264f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   264f2:	4616      	mov	r6, r2
   264f4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   264f6:	460c      	mov	r4, r1
{
   264f8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   264fa:	b951      	cbnz	r1, 26512 <k_work_schedule_for_queue+0x22>
   264fc:	4927      	ldr	r1, [pc, #156]	; (2659c <k_work_schedule_for_queue+0xac>)
   264fe:	4828      	ldr	r0, [pc, #160]	; (265a0 <k_work_schedule_for_queue+0xb0>)
   26500:	f240 32b7 	movw	r2, #951	; 0x3b7
   26504:	f002 fb5e 	bl	28bc4 <assert_print>
   26508:	f240 31b7 	movw	r1, #951	; 0x3b7
   2650c:	4823      	ldr	r0, [pc, #140]	; (2659c <k_work_schedule_for_queue+0xac>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2650e:	f002 fb52 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   26512:	f04f 0320 	mov.w	r3, #32
   26516:	f3ef 8711 	mrs	r7, BASEPRI
   2651a:	f383 8812 	msr	BASEPRI_MAX, r3
   2651e:	f3bf 8f6f 	isb	sy
   26522:	4820      	ldr	r0, [pc, #128]	; (265a4 <k_work_schedule_for_queue+0xb4>)
   26524:	f7ff f980 	bl	25828 <z_spin_lock_valid>
   26528:	b938      	cbnz	r0, 2653a <k_work_schedule_for_queue+0x4a>
   2652a:	491f      	ldr	r1, [pc, #124]	; (265a8 <k_work_schedule_for_queue+0xb8>)
   2652c:	2294      	movs	r2, #148	; 0x94
   2652e:	481c      	ldr	r0, [pc, #112]	; (265a0 <k_work_schedule_for_queue+0xb0>)
   26530:	f002 fb48 	bl	28bc4 <assert_print>
   26534:	2194      	movs	r1, #148	; 0x94
   26536:	481c      	ldr	r0, [pc, #112]	; (265a8 <k_work_schedule_for_queue+0xb8>)
   26538:	e7e9      	b.n	2650e <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   2653a:	481a      	ldr	r0, [pc, #104]	; (265a4 <k_work_schedule_for_queue+0xb4>)
   2653c:	f7ff f990 	bl	25860 <z_spin_lock_set_owner>
	return *flagp;
   26540:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26542:	f013 0f0e 	tst.w	r3, #14
   26546:	d120      	bne.n	2658a <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26548:	ea55 0206 	orrs.w	r2, r5, r6
   2654c:	d10f      	bne.n	2656e <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   2654e:	4620      	mov	r0, r4
   26550:	a901      	add	r1, sp, #4
   26552:	f7ff fd71 	bl	26038 <submit_to_queue_locked>
   26556:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26558:	4812      	ldr	r0, [pc, #72]	; (265a4 <k_work_schedule_for_queue+0xb4>)
   2655a:	f7ff f973 	bl	25844 <z_spin_unlock_valid>
   2655e:	b9b0      	cbnz	r0, 2658e <k_work_schedule_for_queue+0x9e>
   26560:	4911      	ldr	r1, [pc, #68]	; (265a8 <k_work_schedule_for_queue+0xb8>)
   26562:	22c2      	movs	r2, #194	; 0xc2
   26564:	480e      	ldr	r0, [pc, #56]	; (265a0 <k_work_schedule_for_queue+0xb0>)
   26566:	f002 fb2d 	bl	28bc4 <assert_print>
   2656a:	21c2      	movs	r1, #194	; 0xc2
   2656c:	e7e3      	b.n	26536 <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   2656e:	f043 0308 	orr.w	r3, r3, #8
   26572:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26574:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26576:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   2657a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2657c:	4632      	mov	r2, r6
   2657e:	462b      	mov	r3, r5
   26580:	490a      	ldr	r1, [pc, #40]	; (265ac <k_work_schedule_for_queue+0xbc>)
   26582:	f001 f9d7 	bl	27934 <z_add_timeout>
	return ret;
   26586:	2401      	movs	r4, #1
   26588:	e7e6      	b.n	26558 <k_work_schedule_for_queue+0x68>
	int ret = 0;
   2658a:	2400      	movs	r4, #0
   2658c:	e7e4      	b.n	26558 <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   2658e:	f387 8811 	msr	BASEPRI, r7
   26592:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26596:	4620      	mov	r0, r4
   26598:	b003      	add	sp, #12
   2659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2659c:	000353d0 	.word	0x000353d0
   265a0:	00030da5 	.word	0x00030da5
   265a4:	2000b0f8 	.word	0x2000b0f8
   265a8:	00030eb4 	.word	0x00030eb4
   265ac:	0002610d 	.word	0x0002610d

000265b0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   265b0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   265b2:	4801      	ldr	r0, [pc, #4]	; (265b8 <k_work_schedule+0x8>)
   265b4:	f7ff bf9c 	b.w	264f0 <k_work_schedule_for_queue>
   265b8:	2000a508 	.word	0x2000a508

000265bc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   265bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   265be:	4616      	mov	r6, r2
   265c0:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   265c2:	460c      	mov	r4, r1
{
   265c4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   265c6:	b951      	cbnz	r1, 265de <k_work_reschedule_for_queue+0x22>
   265c8:	4926      	ldr	r1, [pc, #152]	; (26664 <k_work_reschedule_for_queue+0xa8>)
   265ca:	4827      	ldr	r0, [pc, #156]	; (26668 <k_work_reschedule_for_queue+0xac>)
   265cc:	f240 32db 	movw	r2, #987	; 0x3db
   265d0:	f002 faf8 	bl	28bc4 <assert_print>
   265d4:	f240 31db 	movw	r1, #987	; 0x3db
   265d8:	4822      	ldr	r0, [pc, #136]	; (26664 <k_work_reschedule_for_queue+0xa8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265da:	f002 faec 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   265de:	f04f 0320 	mov.w	r3, #32
   265e2:	f3ef 8711 	mrs	r7, BASEPRI
   265e6:	f383 8812 	msr	BASEPRI_MAX, r3
   265ea:	f3bf 8f6f 	isb	sy
   265ee:	481f      	ldr	r0, [pc, #124]	; (2666c <k_work_reschedule_for_queue+0xb0>)
   265f0:	f7ff f91a 	bl	25828 <z_spin_lock_valid>
   265f4:	b938      	cbnz	r0, 26606 <k_work_reschedule_for_queue+0x4a>
   265f6:	491e      	ldr	r1, [pc, #120]	; (26670 <k_work_reschedule_for_queue+0xb4>)
   265f8:	2294      	movs	r2, #148	; 0x94
   265fa:	481b      	ldr	r0, [pc, #108]	; (26668 <k_work_reschedule_for_queue+0xac>)
   265fc:	f002 fae2 	bl	28bc4 <assert_print>
   26600:	2194      	movs	r1, #148	; 0x94
   26602:	481b      	ldr	r0, [pc, #108]	; (26670 <k_work_reschedule_for_queue+0xb4>)
   26604:	e7e9      	b.n	265da <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   26606:	4819      	ldr	r0, [pc, #100]	; (2666c <k_work_reschedule_for_queue+0xb0>)
   26608:	f7ff f92a 	bl	25860 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2660c:	4620      	mov	r0, r4
   2660e:	f008 ff1c 	bl	2f44a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26612:	ea55 0306 	orrs.w	r3, r5, r6
   26616:	d10f      	bne.n	26638 <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   26618:	4620      	mov	r0, r4
   2661a:	a901      	add	r1, sp, #4
   2661c:	f7ff fd0c 	bl	26038 <submit_to_queue_locked>
   26620:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26622:	4812      	ldr	r0, [pc, #72]	; (2666c <k_work_reschedule_for_queue+0xb0>)
   26624:	f7ff f90e 	bl	25844 <z_spin_unlock_valid>
   26628:	b9a8      	cbnz	r0, 26656 <k_work_reschedule_for_queue+0x9a>
   2662a:	4911      	ldr	r1, [pc, #68]	; (26670 <k_work_reschedule_for_queue+0xb4>)
   2662c:	22c2      	movs	r2, #194	; 0xc2
   2662e:	480e      	ldr	r0, [pc, #56]	; (26668 <k_work_reschedule_for_queue+0xac>)
   26630:	f002 fac8 	bl	28bc4 <assert_print>
   26634:	21c2      	movs	r1, #194	; 0xc2
   26636:	e7e4      	b.n	26602 <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   26638:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2663a:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2663e:	f043 0308 	orr.w	r3, r3, #8
   26642:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26644:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26646:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   26648:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2664a:	490a      	ldr	r1, [pc, #40]	; (26674 <k_work_reschedule_for_queue+0xb8>)
   2664c:	462b      	mov	r3, r5
   2664e:	f001 f971 	bl	27934 <z_add_timeout>
	return ret;
   26652:	2401      	movs	r4, #1
   26654:	e7e5      	b.n	26622 <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   26656:	f387 8811 	msr	BASEPRI, r7
   2665a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2665e:	4620      	mov	r0, r4
   26660:	b003      	add	sp, #12
   26662:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26664:	000353d0 	.word	0x000353d0
   26668:	00030da5 	.word	0x00030da5
   2666c:	2000b0f8 	.word	0x2000b0f8
   26670:	00030eb4 	.word	0x00030eb4
   26674:	0002610d 	.word	0x0002610d

00026678 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26678:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2667a:	4801      	ldr	r0, [pc, #4]	; (26680 <k_work_reschedule+0x8>)
   2667c:	f7ff bf9e 	b.w	265bc <k_work_reschedule_for_queue>
   26680:	2000a508 	.word	0x2000a508

00026684 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   26684:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   26686:	4604      	mov	r4, r0
   26688:	b950      	cbnz	r0, 266a0 <k_work_cancel_delayable+0x1c>
   2668a:	491d      	ldr	r1, [pc, #116]	; (26700 <k_work_cancel_delayable+0x7c>)
   2668c:	481d      	ldr	r0, [pc, #116]	; (26704 <k_work_cancel_delayable+0x80>)
   2668e:	f240 32fd 	movw	r2, #1021	; 0x3fd
   26692:	f002 fa97 	bl	28bc4 <assert_print>
   26696:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2669a:	4819      	ldr	r0, [pc, #100]	; (26700 <k_work_cancel_delayable+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2669c:	f002 fa8b 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   266a0:	f04f 0320 	mov.w	r3, #32
   266a4:	f3ef 8511 	mrs	r5, BASEPRI
   266a8:	f383 8812 	msr	BASEPRI_MAX, r3
   266ac:	f3bf 8f6f 	isb	sy
   266b0:	4815      	ldr	r0, [pc, #84]	; (26708 <k_work_cancel_delayable+0x84>)
   266b2:	f7ff f8b9 	bl	25828 <z_spin_lock_valid>
   266b6:	b938      	cbnz	r0, 266c8 <k_work_cancel_delayable+0x44>
   266b8:	4914      	ldr	r1, [pc, #80]	; (2670c <k_work_cancel_delayable+0x88>)
   266ba:	2294      	movs	r2, #148	; 0x94
   266bc:	4811      	ldr	r0, [pc, #68]	; (26704 <k_work_cancel_delayable+0x80>)
   266be:	f002 fa81 	bl	28bc4 <assert_print>
   266c2:	2194      	movs	r1, #148	; 0x94
   266c4:	4811      	ldr	r0, [pc, #68]	; (2670c <k_work_cancel_delayable+0x88>)
   266c6:	e7e9      	b.n	2669c <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   266c8:	480f      	ldr	r0, [pc, #60]	; (26708 <k_work_cancel_delayable+0x84>)
   266ca:	f7ff f8c9 	bl	25860 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   266ce:	4620      	mov	r0, r4
   266d0:	f008 febb 	bl	2f44a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   266d4:	4620      	mov	r0, r4
   266d6:	f008 fecd 	bl	2f474 <cancel_async_locked>
   266da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266dc:	480a      	ldr	r0, [pc, #40]	; (26708 <k_work_cancel_delayable+0x84>)
   266de:	f7ff f8b1 	bl	25844 <z_spin_unlock_valid>
   266e2:	b930      	cbnz	r0, 266f2 <k_work_cancel_delayable+0x6e>
   266e4:	4909      	ldr	r1, [pc, #36]	; (2670c <k_work_cancel_delayable+0x88>)
   266e6:	22c2      	movs	r2, #194	; 0xc2
   266e8:	4806      	ldr	r0, [pc, #24]	; (26704 <k_work_cancel_delayable+0x80>)
   266ea:	f002 fa6b 	bl	28bc4 <assert_print>
   266ee:	21c2      	movs	r1, #194	; 0xc2
   266f0:	e7e8      	b.n	266c4 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   266f2:	f385 8811 	msr	BASEPRI, r5
   266f6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   266fa:	4620      	mov	r0, r4
   266fc:	bd38      	pop	{r3, r4, r5, pc}
   266fe:	bf00      	nop
   26700:	000353d0 	.word	0x000353d0
   26704:	00030da5 	.word	0x00030da5
   26708:	2000b0f8 	.word	0x2000b0f8
   2670c:	00030eb4 	.word	0x00030eb4

00026710 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   26710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26714:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   26716:	4605      	mov	r5, r0
   26718:	b950      	cbnz	r0, 26730 <k_work_cancel_delayable_sync+0x20>
   2671a:	4933      	ldr	r1, [pc, #204]	; (267e8 <k_work_cancel_delayable_sync+0xd8>)
   2671c:	f240 420e 	movw	r2, #1038	; 0x40e
   26720:	4832      	ldr	r0, [pc, #200]	; (267ec <k_work_cancel_delayable_sync+0xdc>)
   26722:	f002 fa4f 	bl	28bc4 <assert_print>
   26726:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   2672a:	482f      	ldr	r0, [pc, #188]	; (267e8 <k_work_cancel_delayable_sync+0xd8>)
   2672c:	f002 fa43 	bl	28bb6 <assert_post_action>
   26730:	b941      	cbnz	r1, 26744 <k_work_cancel_delayable_sync+0x34>
   26732:	492d      	ldr	r1, [pc, #180]	; (267e8 <k_work_cancel_delayable_sync+0xd8>)
   26734:	f240 420f 	movw	r2, #1039	; 0x40f
   26738:	482c      	ldr	r0, [pc, #176]	; (267ec <k_work_cancel_delayable_sync+0xdc>)
   2673a:	f002 fa43 	bl	28bc4 <assert_print>
   2673e:	f240 410f 	movw	r1, #1039	; 0x40f
   26742:	e7f2      	b.n	2672a <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   26744:	f008 fe15 	bl	2f372 <k_is_in_isr>
   26748:	4604      	mov	r4, r0
   2674a:	b140      	cbz	r0, 2675e <k_work_cancel_delayable_sync+0x4e>
   2674c:	4926      	ldr	r1, [pc, #152]	; (267e8 <k_work_cancel_delayable_sync+0xd8>)
   2674e:	f44f 6282 	mov.w	r2, #1040	; 0x410
   26752:	4826      	ldr	r0, [pc, #152]	; (267ec <k_work_cancel_delayable_sync+0xdc>)
   26754:	f002 fa36 	bl	28bc4 <assert_print>
   26758:	f44f 6182 	mov.w	r1, #1040	; 0x410
   2675c:	e7e5      	b.n	2672a <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   2675e:	f04f 0320 	mov.w	r3, #32
   26762:	f3ef 8811 	mrs	r8, BASEPRI
   26766:	f383 8812 	msr	BASEPRI_MAX, r3
   2676a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2676e:	4820      	ldr	r0, [pc, #128]	; (267f0 <k_work_cancel_delayable_sync+0xe0>)
   26770:	f7ff f85a 	bl	25828 <z_spin_lock_valid>
   26774:	b938      	cbnz	r0, 26786 <k_work_cancel_delayable_sync+0x76>
   26776:	491f      	ldr	r1, [pc, #124]	; (267f4 <k_work_cancel_delayable_sync+0xe4>)
   26778:	2294      	movs	r2, #148	; 0x94
   2677a:	481c      	ldr	r0, [pc, #112]	; (267ec <k_work_cancel_delayable_sync+0xdc>)
   2677c:	f002 fa22 	bl	28bc4 <assert_print>
   26780:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26782:	481c      	ldr	r0, [pc, #112]	; (267f4 <k_work_cancel_delayable_sync+0xe4>)
   26784:	e7d2      	b.n	2672c <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   26786:	481a      	ldr	r0, [pc, #104]	; (267f0 <k_work_cancel_delayable_sync+0xe0>)
   26788:	f7ff f86a 	bl	25860 <z_spin_lock_set_owner>
	return *flagp;
   2678c:	68eb      	ldr	r3, [r5, #12]
   2678e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   26792:	2b00      	cmp	r3, #0
   26794:	bf14      	ite	ne
   26796:	2701      	movne	r7, #1
   26798:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2679a:	d00a      	beq.n	267b2 <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   2679c:	4628      	mov	r0, r5
   2679e:	f008 fe54 	bl	2f44a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   267a2:	4628      	mov	r0, r5
   267a4:	f008 fe66 	bl	2f474 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   267a8:	4631      	mov	r1, r6
   267aa:	4628      	mov	r0, r5
   267ac:	f7ff fc26 	bl	25ffc <cancel_sync_locked>
   267b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   267b2:	480f      	ldr	r0, [pc, #60]	; (267f0 <k_work_cancel_delayable_sync+0xe0>)
   267b4:	f7ff f846 	bl	25844 <z_spin_unlock_valid>
   267b8:	b930      	cbnz	r0, 267c8 <k_work_cancel_delayable_sync+0xb8>
   267ba:	490e      	ldr	r1, [pc, #56]	; (267f4 <k_work_cancel_delayable_sync+0xe4>)
   267bc:	22c2      	movs	r2, #194	; 0xc2
   267be:	480b      	ldr	r0, [pc, #44]	; (267ec <k_work_cancel_delayable_sync+0xdc>)
   267c0:	f002 fa00 	bl	28bc4 <assert_print>
   267c4:	21c2      	movs	r1, #194	; 0xc2
   267c6:	e7dc      	b.n	26782 <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   267c8:	f388 8811 	msr	BASEPRI, r8
   267cc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   267d0:	b13c      	cbz	r4, 267e2 <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   267d2:	f04f 32ff 	mov.w	r2, #4294967295
   267d6:	f04f 33ff 	mov.w	r3, #4294967295
   267da:	f106 0008 	add.w	r0, r6, #8
   267de:	f7ff fab5 	bl	25d4c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   267e2:	4638      	mov	r0, r7
   267e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   267e8:	000353d0 	.word	0x000353d0
   267ec:	00030da5 	.word	0x00030da5
   267f0:	2000b0f8 	.word	0x2000b0f8
   267f4:	00030eb4 	.word	0x00030eb4

000267f8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   267f8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   267fa:	4d07      	ldr	r5, [pc, #28]	; (26818 <z_reset_time_slice+0x20>)
   267fc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   267fe:	b154      	cbz	r4, 26816 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   26800:	f7fb fcdc 	bl	221bc <sys_clock_elapsed>
   26804:	4b05      	ldr	r3, [pc, #20]	; (2681c <z_reset_time_slice+0x24>)
   26806:	4404      	add	r4, r0
   26808:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2680a:	6828      	ldr	r0, [r5, #0]
   2680c:	2100      	movs	r1, #0
	}
}
   2680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   26812:	f001 b9e1 	b.w	27bd8 <z_set_timeout_expiry>
}
   26816:	bd38      	pop	{r3, r4, r5, pc}
   26818:	2000b104 	.word	0x2000b104
   2681c:	2000b0c0 	.word	0x2000b0c0

00026820 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   26820:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   26822:	4d12      	ldr	r5, [pc, #72]	; (2686c <update_cache+0x4c>)
   26824:	462b      	mov	r3, r5
   26826:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2682a:	429c      	cmp	r4, r3
   2682c:	d000      	beq.n	26830 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2682e:	b904      	cbnz	r4, 26832 <update_cache+0x12>
   26830:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   26832:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   26834:	b988      	cbnz	r0, 2685a <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   26836:	b943      	cbnz	r3, 2684a <update_cache+0x2a>
   26838:	490d      	ldr	r1, [pc, #52]	; (26870 <update_cache+0x50>)
   2683a:	480e      	ldr	r0, [pc, #56]	; (26874 <update_cache+0x54>)
   2683c:	2289      	movs	r2, #137	; 0x89
   2683e:	f002 f9c1 	bl	28bc4 <assert_print>
   26842:	2189      	movs	r1, #137	; 0x89
   26844:	480a      	ldr	r0, [pc, #40]	; (26870 <update_cache+0x50>)
   26846:	f002 f9b6 	bl	28bb6 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2684a:	7b5a      	ldrb	r2, [r3, #13]
   2684c:	06d2      	lsls	r2, r2, #27
   2684e:	d104      	bne.n	2685a <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26850:	69a2      	ldr	r2, [r4, #24]
   26852:	b912      	cbnz	r2, 2685a <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   26854:	89da      	ldrh	r2, [r3, #14]
   26856:	2a7f      	cmp	r2, #127	; 0x7f
   26858:	d805      	bhi.n	26866 <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2685a:	429c      	cmp	r4, r3
   2685c:	d002      	beq.n	26864 <update_cache+0x44>
			z_reset_time_slice(thread);
   2685e:	4620      	mov	r0, r4
   26860:	f7ff ffca 	bl	267f8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   26864:	4623      	mov	r3, r4
   26866:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   26868:	bd38      	pop	{r3, r4, r5, pc}
   2686a:	bf00      	nop
   2686c:	2000b0c0 	.word	0x2000b0c0
   26870:	000353f1 	.word	0x000353f1
   26874:	00030da5 	.word	0x00030da5

00026878 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   26878:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2687a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2687e:	7b42      	ldrb	r2, [r0, #13]
   26880:	2b00      	cmp	r3, #0
   26882:	db37      	blt.n	268f4 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26884:	06d3      	lsls	r3, r2, #27
   26886:	d135      	bne.n	268f4 <ready_thread+0x7c>
	return node->next != NULL;
   26888:	6983      	ldr	r3, [r0, #24]
   2688a:	2b00      	cmp	r3, #0
   2688c:	d132      	bne.n	268f4 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   2688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26892:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26894:	4a18      	ldr	r2, [pc, #96]	; (268f8 <ready_thread+0x80>)
   26896:	4290      	cmp	r0, r2
   26898:	d108      	bne.n	268ac <ready_thread+0x34>
   2689a:	4918      	ldr	r1, [pc, #96]	; (268fc <ready_thread+0x84>)
   2689c:	4818      	ldr	r0, [pc, #96]	; (26900 <ready_thread+0x88>)
   2689e:	22ba      	movs	r2, #186	; 0xba
   268a0:	f002 f990 	bl	28bc4 <assert_print>
   268a4:	21ba      	movs	r1, #186	; 0xba
   268a6:	4815      	ldr	r0, [pc, #84]	; (268fc <ready_thread+0x84>)
   268a8:	f002 f985 	bl	28bb6 <assert_post_action>
	return list->head == list;
   268ac:	4915      	ldr	r1, [pc, #84]	; (26904 <ready_thread+0x8c>)
   268ae:	460a      	mov	r2, r1
   268b0:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268b4:	4294      	cmp	r4, r2
   268b6:	bf18      	it	ne
   268b8:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   268ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   268bc:	b923      	cbnz	r3, 268c8 <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   268be:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   268c2:	6020      	str	r0, [r4, #0]
	list->tail = node;
   268c4:	6248      	str	r0, [r1, #36]	; 0x24
}
   268c6:	e00c      	b.n	268e2 <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   268c8:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   268cc:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   268d0:	42b5      	cmp	r5, r6
   268d2:	d00b      	beq.n	268ec <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   268d4:	42ae      	cmp	r6, r5
   268d6:	dd09      	ble.n	268ec <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   268d8:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   268da:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   268de:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   268e0:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   268e2:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   268e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   268e8:	f7ff bf9a 	b.w	26820 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   268ec:	42a3      	cmp	r3, r4
   268ee:	d0e6      	beq.n	268be <ready_thread+0x46>
   268f0:	681b      	ldr	r3, [r3, #0]
   268f2:	e7e3      	b.n	268bc <ready_thread+0x44>
}
   268f4:	bd70      	pop	{r4, r5, r6, pc}
   268f6:	bf00      	nop
   268f8:	2000a3f8 	.word	0x2000a3f8
   268fc:	000353f1 	.word	0x000353f1
   26900:	00030da5 	.word	0x00030da5
   26904:	2000b0c0 	.word	0x2000b0c0

00026908 <k_sched_time_slice_set>:
{
   26908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2690a:	4604      	mov	r4, r0
   2690c:	460d      	mov	r5, r1
	__asm__ volatile(
   2690e:	f04f 0320 	mov.w	r3, #32
   26912:	f3ef 8711 	mrs	r7, BASEPRI
   26916:	f383 8812 	msr	BASEPRI_MAX, r3
   2691a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2691e:	481d      	ldr	r0, [pc, #116]	; (26994 <k_sched_time_slice_set+0x8c>)
   26920:	f7fe ff82 	bl	25828 <z_spin_lock_valid>
   26924:	b940      	cbnz	r0, 26938 <k_sched_time_slice_set+0x30>
   26926:	491c      	ldr	r1, [pc, #112]	; (26998 <k_sched_time_slice_set+0x90>)
   26928:	2294      	movs	r2, #148	; 0x94
   2692a:	481c      	ldr	r0, [pc, #112]	; (2699c <k_sched_time_slice_set+0x94>)
   2692c:	f002 f94a 	bl	28bc4 <assert_print>
   26930:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26932:	4819      	ldr	r0, [pc, #100]	; (26998 <k_sched_time_slice_set+0x90>)
   26934:	f002 f93f 	bl	28bb6 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26938:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   2693a:	4816      	ldr	r0, [pc, #88]	; (26994 <k_sched_time_slice_set+0x8c>)
   2693c:	f7fe ff90 	bl	25860 <z_spin_lock_set_owner>
   26940:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26944:	f240 30e7 	movw	r0, #999	; 0x3e7
   26948:	4631      	mov	r1, r6
   2694a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2694e:	2300      	movs	r3, #0
   26950:	fbe4 010c 	umlal	r0, r1, r4, ip
   26954:	f7e1 fbfe 	bl	8154 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26958:	42b4      	cmp	r4, r6
   2695a:	dd02      	ble.n	26962 <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   2695c:	2802      	cmp	r0, #2
   2695e:	bfb8      	it	lt
   26960:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26962:	4a0f      	ldr	r2, [pc, #60]	; (269a0 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   26964:	4b0f      	ldr	r3, [pc, #60]	; (269a4 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26966:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   26968:	4a0f      	ldr	r2, [pc, #60]	; (269a8 <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   2696a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2696c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2696e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   26970:	f7ff ff42 	bl	267f8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26974:	4807      	ldr	r0, [pc, #28]	; (26994 <k_sched_time_slice_set+0x8c>)
   26976:	f7fe ff65 	bl	25844 <z_spin_unlock_valid>
   2697a:	b930      	cbnz	r0, 2698a <k_sched_time_slice_set+0x82>
   2697c:	4906      	ldr	r1, [pc, #24]	; (26998 <k_sched_time_slice_set+0x90>)
   2697e:	22c2      	movs	r2, #194	; 0xc2
   26980:	4806      	ldr	r0, [pc, #24]	; (2699c <k_sched_time_slice_set+0x94>)
   26982:	f002 f91f 	bl	28bc4 <assert_print>
   26986:	21c2      	movs	r1, #194	; 0xc2
   26988:	e7d3      	b.n	26932 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   2698a:	f387 8811 	msr	BASEPRI, r7
   2698e:	f3bf 8f6f 	isb	sy
}
   26992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26994:	2000b108 	.word	0x2000b108
   26998:	00030eb4 	.word	0x00030eb4
   2699c:	00030da5 	.word	0x00030da5
   269a0:	2000b104 	.word	0x2000b104
   269a4:	2000b0c0 	.word	0x2000b0c0
   269a8:	2000b100 	.word	0x2000b100

000269ac <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   269ac:	b538      	push	{r3, r4, r5, lr}
   269ae:	4604      	mov	r4, r0
	__asm__ volatile(
   269b0:	f04f 0320 	mov.w	r3, #32
   269b4:	f3ef 8511 	mrs	r5, BASEPRI
   269b8:	f383 8812 	msr	BASEPRI_MAX, r3
   269bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269c0:	4811      	ldr	r0, [pc, #68]	; (26a08 <z_ready_thread+0x5c>)
   269c2:	f7fe ff31 	bl	25828 <z_spin_lock_valid>
   269c6:	b940      	cbnz	r0, 269da <z_ready_thread+0x2e>
   269c8:	4910      	ldr	r1, [pc, #64]	; (26a0c <z_ready_thread+0x60>)
   269ca:	2294      	movs	r2, #148	; 0x94
   269cc:	4810      	ldr	r0, [pc, #64]	; (26a10 <z_ready_thread+0x64>)
   269ce:	f002 f8f9 	bl	28bc4 <assert_print>
   269d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269d4:	480d      	ldr	r0, [pc, #52]	; (26a0c <z_ready_thread+0x60>)
   269d6:	f002 f8ee 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   269da:	480b      	ldr	r0, [pc, #44]	; (26a08 <z_ready_thread+0x5c>)
   269dc:	f7fe ff40 	bl	25860 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   269e0:	4620      	mov	r0, r4
   269e2:	f7ff ff49 	bl	26878 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269e6:	4808      	ldr	r0, [pc, #32]	; (26a08 <z_ready_thread+0x5c>)
   269e8:	f7fe ff2c 	bl	25844 <z_spin_unlock_valid>
   269ec:	b930      	cbnz	r0, 269fc <z_ready_thread+0x50>
   269ee:	4907      	ldr	r1, [pc, #28]	; (26a0c <z_ready_thread+0x60>)
   269f0:	22c2      	movs	r2, #194	; 0xc2
   269f2:	4807      	ldr	r0, [pc, #28]	; (26a10 <z_ready_thread+0x64>)
   269f4:	f002 f8e6 	bl	28bc4 <assert_print>
   269f8:	21c2      	movs	r1, #194	; 0xc2
   269fa:	e7eb      	b.n	269d4 <z_ready_thread+0x28>
	__asm__ volatile(
   269fc:	f385 8811 	msr	BASEPRI, r5
   26a00:	f3bf 8f6f 	isb	sy
		}
	}
}
   26a04:	bd38      	pop	{r3, r4, r5, pc}
   26a06:	bf00      	nop
   26a08:	2000b108 	.word	0x2000b108
   26a0c:	00030eb4 	.word	0x00030eb4
   26a10:	00030da5 	.word	0x00030da5

00026a14 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26a14:	b538      	push	{r3, r4, r5, lr}
   26a16:	4604      	mov	r4, r0
	__asm__ volatile(
   26a18:	f04f 0320 	mov.w	r3, #32
   26a1c:	f3ef 8511 	mrs	r5, BASEPRI
   26a20:	f383 8812 	msr	BASEPRI_MAX, r3
   26a24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a28:	4811      	ldr	r0, [pc, #68]	; (26a70 <z_unpend_thread_no_timeout+0x5c>)
   26a2a:	f7fe fefd 	bl	25828 <z_spin_lock_valid>
   26a2e:	b940      	cbnz	r0, 26a42 <z_unpend_thread_no_timeout+0x2e>
   26a30:	4910      	ldr	r1, [pc, #64]	; (26a74 <z_unpend_thread_no_timeout+0x60>)
   26a32:	2294      	movs	r2, #148	; 0x94
   26a34:	4810      	ldr	r0, [pc, #64]	; (26a78 <z_unpend_thread_no_timeout+0x64>)
   26a36:	f002 f8c5 	bl	28bc4 <assert_print>
   26a3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a3c:	480d      	ldr	r0, [pc, #52]	; (26a74 <z_unpend_thread_no_timeout+0x60>)
   26a3e:	f002 f8ba 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26a42:	480b      	ldr	r0, [pc, #44]	; (26a70 <z_unpend_thread_no_timeout+0x5c>)
   26a44:	f7fe ff0c 	bl	25860 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   26a48:	4620      	mov	r0, r4
   26a4a:	f000 fb97 	bl	2717c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a4e:	4808      	ldr	r0, [pc, #32]	; (26a70 <z_unpend_thread_no_timeout+0x5c>)
   26a50:	f7fe fef8 	bl	25844 <z_spin_unlock_valid>
   26a54:	b930      	cbnz	r0, 26a64 <z_unpend_thread_no_timeout+0x50>
   26a56:	4907      	ldr	r1, [pc, #28]	; (26a74 <z_unpend_thread_no_timeout+0x60>)
   26a58:	22c2      	movs	r2, #194	; 0xc2
   26a5a:	4807      	ldr	r0, [pc, #28]	; (26a78 <z_unpend_thread_no_timeout+0x64>)
   26a5c:	f002 f8b2 	bl	28bc4 <assert_print>
   26a60:	21c2      	movs	r1, #194	; 0xc2
   26a62:	e7eb      	b.n	26a3c <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   26a64:	f385 8811 	msr	BASEPRI, r5
   26a68:	f3bf 8f6f 	isb	sy
	}
}
   26a6c:	bd38      	pop	{r3, r4, r5, pc}
   26a6e:	bf00      	nop
   26a70:	2000b108 	.word	0x2000b108
   26a74:	00030eb4 	.word	0x00030eb4
   26a78:	00030da5 	.word	0x00030da5

00026a7c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26a7c:	b538      	push	{r3, r4, r5, lr}
   26a7e:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26a80:	460c      	mov	r4, r1
   26a82:	b9c1      	cbnz	r1, 26ab6 <z_reschedule+0x3a>
   26a84:	f3ef 8505 	mrs	r5, IPSR
   26a88:	b9ad      	cbnz	r5, 26ab6 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   26a8a:	4a13      	ldr	r2, [pc, #76]	; (26ad8 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   26a8c:	69d1      	ldr	r1, [r2, #28]
   26a8e:	6892      	ldr	r2, [r2, #8]
   26a90:	4291      	cmp	r1, r2
   26a92:	d010      	beq.n	26ab6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a94:	f7fe fed6 	bl	25844 <z_spin_unlock_valid>
   26a98:	b940      	cbnz	r0, 26aac <z_reschedule+0x30>
   26a9a:	4910      	ldr	r1, [pc, #64]	; (26adc <z_reschedule+0x60>)
   26a9c:	22e1      	movs	r2, #225	; 0xe1
   26a9e:	4810      	ldr	r0, [pc, #64]	; (26ae0 <z_reschedule+0x64>)
   26aa0:	f002 f890 	bl	28bc4 <assert_print>
   26aa4:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26aa6:	480d      	ldr	r0, [pc, #52]	; (26adc <z_reschedule+0x60>)
   26aa8:	f002 f885 	bl	28bb6 <assert_post_action>
	ret = arch_swap(key);
   26aac:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26ab2:	f7e6 b94b 	b.w	cd4c <arch_swap>
   26ab6:	4618      	mov	r0, r3
   26ab8:	f7fe fec4 	bl	25844 <z_spin_unlock_valid>
   26abc:	b930      	cbnz	r0, 26acc <z_reschedule+0x50>
   26abe:	4907      	ldr	r1, [pc, #28]	; (26adc <z_reschedule+0x60>)
   26ac0:	22c2      	movs	r2, #194	; 0xc2
   26ac2:	4807      	ldr	r0, [pc, #28]	; (26ae0 <z_reschedule+0x64>)
   26ac4:	f002 f87e 	bl	28bc4 <assert_print>
   26ac8:	21c2      	movs	r1, #194	; 0xc2
   26aca:	e7ec      	b.n	26aa6 <z_reschedule+0x2a>
   26acc:	f384 8811 	msr	BASEPRI, r4
   26ad0:	f3bf 8f6f 	isb	sy
   26ad4:	bd38      	pop	{r3, r4, r5, pc}
   26ad6:	bf00      	nop
   26ad8:	2000b0c0 	.word	0x2000b0c0
   26adc:	00030eb4 	.word	0x00030eb4
   26ae0:	00030da5 	.word	0x00030da5

00026ae4 <z_sched_start>:
{
   26ae4:	b538      	push	{r3, r4, r5, lr}
   26ae6:	4604      	mov	r4, r0
	__asm__ volatile(
   26ae8:	f04f 0320 	mov.w	r3, #32
   26aec:	f3ef 8511 	mrs	r5, BASEPRI
   26af0:	f383 8812 	msr	BASEPRI_MAX, r3
   26af4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26af8:	4817      	ldr	r0, [pc, #92]	; (26b58 <z_sched_start+0x74>)
   26afa:	f7fe fe95 	bl	25828 <z_spin_lock_valid>
   26afe:	b940      	cbnz	r0, 26b12 <z_sched_start+0x2e>
   26b00:	4916      	ldr	r1, [pc, #88]	; (26b5c <z_sched_start+0x78>)
   26b02:	2294      	movs	r2, #148	; 0x94
   26b04:	4816      	ldr	r0, [pc, #88]	; (26b60 <z_sched_start+0x7c>)
   26b06:	f002 f85d 	bl	28bc4 <assert_print>
   26b0a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b0c:	4813      	ldr	r0, [pc, #76]	; (26b5c <z_sched_start+0x78>)
   26b0e:	f002 f852 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26b12:	4811      	ldr	r0, [pc, #68]	; (26b58 <z_sched_start+0x74>)
   26b14:	f7fe fea4 	bl	25860 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26b18:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   26b1a:	075a      	lsls	r2, r3, #29
   26b1c:	d40f      	bmi.n	26b3e <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b1e:	480e      	ldr	r0, [pc, #56]	; (26b58 <z_sched_start+0x74>)
   26b20:	f7fe fe90 	bl	25844 <z_spin_unlock_valid>
   26b24:	b930      	cbnz	r0, 26b34 <z_sched_start+0x50>
   26b26:	490d      	ldr	r1, [pc, #52]	; (26b5c <z_sched_start+0x78>)
   26b28:	22c2      	movs	r2, #194	; 0xc2
   26b2a:	480d      	ldr	r0, [pc, #52]	; (26b60 <z_sched_start+0x7c>)
   26b2c:	f002 f84a 	bl	28bc4 <assert_print>
   26b30:	21c2      	movs	r1, #194	; 0xc2
   26b32:	e7eb      	b.n	26b0c <z_sched_start+0x28>
	__asm__ volatile(
   26b34:	f385 8811 	msr	BASEPRI, r5
   26b38:	f3bf 8f6f 	isb	sy
}
   26b3c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26b3e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   26b42:	4620      	mov	r0, r4
   26b44:	7363      	strb	r3, [r4, #13]
   26b46:	f7ff fe97 	bl	26878 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   26b4a:	4629      	mov	r1, r5
}
   26b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   26b50:	4801      	ldr	r0, [pc, #4]	; (26b58 <z_sched_start+0x74>)
   26b52:	f7ff bf93 	b.w	26a7c <z_reschedule>
   26b56:	bf00      	nop
   26b58:	2000b108 	.word	0x2000b108
   26b5c:	00030eb4 	.word	0x00030eb4
   26b60:	00030da5 	.word	0x00030da5

00026b64 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   26b64:	b510      	push	{r4, lr}
	__asm__ volatile(
   26b66:	f04f 0320 	mov.w	r3, #32
   26b6a:	f3ef 8411 	mrs	r4, BASEPRI
   26b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   26b72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b76:	481c      	ldr	r0, [pc, #112]	; (26be8 <k_sched_lock+0x84>)
   26b78:	f7fe fe56 	bl	25828 <z_spin_lock_valid>
   26b7c:	b938      	cbnz	r0, 26b8e <k_sched_lock+0x2a>
   26b7e:	491b      	ldr	r1, [pc, #108]	; (26bec <k_sched_lock+0x88>)
   26b80:	2294      	movs	r2, #148	; 0x94
   26b82:	481b      	ldr	r0, [pc, #108]	; (26bf0 <k_sched_lock+0x8c>)
   26b84:	f002 f81e 	bl	28bc4 <assert_print>
   26b88:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b8a:	4818      	ldr	r0, [pc, #96]	; (26bec <k_sched_lock+0x88>)
   26b8c:	e00c      	b.n	26ba8 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   26b8e:	4816      	ldr	r0, [pc, #88]	; (26be8 <k_sched_lock+0x84>)
   26b90:	f7fe fe66 	bl	25860 <z_spin_lock_set_owner>
   26b94:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26b98:	b143      	cbz	r3, 26bac <k_sched_lock+0x48>
   26b9a:	4916      	ldr	r1, [pc, #88]	; (26bf4 <k_sched_lock+0x90>)
   26b9c:	22fd      	movs	r2, #253	; 0xfd
   26b9e:	4814      	ldr	r0, [pc, #80]	; (26bf0 <k_sched_lock+0x8c>)
   26ba0:	f002 f810 	bl	28bc4 <assert_print>
   26ba4:	21fd      	movs	r1, #253	; 0xfd
   26ba6:	4813      	ldr	r0, [pc, #76]	; (26bf4 <k_sched_lock+0x90>)
   26ba8:	f002 f805 	bl	28bb6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26bac:	4b12      	ldr	r3, [pc, #72]	; (26bf8 <k_sched_lock+0x94>)
   26bae:	689a      	ldr	r2, [r3, #8]
   26bb0:	7bd3      	ldrb	r3, [r2, #15]
   26bb2:	2b01      	cmp	r3, #1
   26bb4:	d106      	bne.n	26bc4 <k_sched_lock+0x60>
   26bb6:	490f      	ldr	r1, [pc, #60]	; (26bf4 <k_sched_lock+0x90>)
   26bb8:	22fe      	movs	r2, #254	; 0xfe
   26bba:	480d      	ldr	r0, [pc, #52]	; (26bf0 <k_sched_lock+0x8c>)
   26bbc:	f002 f802 	bl	28bc4 <assert_print>
   26bc0:	21fe      	movs	r1, #254	; 0xfe
   26bc2:	e7f0      	b.n	26ba6 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   26bc4:	3b01      	subs	r3, #1
   26bc6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bc8:	4807      	ldr	r0, [pc, #28]	; (26be8 <k_sched_lock+0x84>)
   26bca:	f7fe fe3b 	bl	25844 <z_spin_unlock_valid>
   26bce:	b930      	cbnz	r0, 26bde <k_sched_lock+0x7a>
   26bd0:	4906      	ldr	r1, [pc, #24]	; (26bec <k_sched_lock+0x88>)
   26bd2:	22c2      	movs	r2, #194	; 0xc2
   26bd4:	4806      	ldr	r0, [pc, #24]	; (26bf0 <k_sched_lock+0x8c>)
   26bd6:	f001 fff5 	bl	28bc4 <assert_print>
   26bda:	21c2      	movs	r1, #194	; 0xc2
   26bdc:	e7d5      	b.n	26b8a <k_sched_lock+0x26>
	__asm__ volatile(
   26bde:	f384 8811 	msr	BASEPRI, r4
   26be2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26be6:	bd10      	pop	{r4, pc}
   26be8:	2000b108 	.word	0x2000b108
   26bec:	00030eb4 	.word	0x00030eb4
   26bf0:	00030da5 	.word	0x00030da5
   26bf4:	00035413 	.word	0x00035413
   26bf8:	2000b0c0 	.word	0x2000b0c0

00026bfc <k_sched_unlock>:

void k_sched_unlock(void)
{
   26bfc:	b510      	push	{r4, lr}
	__asm__ volatile(
   26bfe:	f04f 0320 	mov.w	r3, #32
   26c02:	f3ef 8411 	mrs	r4, BASEPRI
   26c06:	f383 8812 	msr	BASEPRI_MAX, r3
   26c0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c0e:	4820      	ldr	r0, [pc, #128]	; (26c90 <k_sched_unlock+0x94>)
   26c10:	f7fe fe0a 	bl	25828 <z_spin_lock_valid>
   26c14:	b938      	cbnz	r0, 26c26 <k_sched_unlock+0x2a>
   26c16:	491f      	ldr	r1, [pc, #124]	; (26c94 <k_sched_unlock+0x98>)
   26c18:	2294      	movs	r2, #148	; 0x94
   26c1a:	481f      	ldr	r0, [pc, #124]	; (26c98 <k_sched_unlock+0x9c>)
   26c1c:	f001 ffd2 	bl	28bc4 <assert_print>
   26c20:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c22:	481c      	ldr	r0, [pc, #112]	; (26c94 <k_sched_unlock+0x98>)
   26c24:	e00f      	b.n	26c46 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   26c26:	481a      	ldr	r0, [pc, #104]	; (26c90 <k_sched_unlock+0x94>)
   26c28:	f7fe fe1a 	bl	25860 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   26c2c:	4b1b      	ldr	r3, [pc, #108]	; (26c9c <k_sched_unlock+0xa0>)
   26c2e:	689a      	ldr	r2, [r3, #8]
   26c30:	7bd3      	ldrb	r3, [r2, #15]
   26c32:	b953      	cbnz	r3, 26c4a <k_sched_unlock+0x4e>
   26c34:	491a      	ldr	r1, [pc, #104]	; (26ca0 <k_sched_unlock+0xa4>)
   26c36:	f240 32e7 	movw	r2, #999	; 0x3e7
   26c3a:	4817      	ldr	r0, [pc, #92]	; (26c98 <k_sched_unlock+0x9c>)
   26c3c:	f001 ffc2 	bl	28bc4 <assert_print>
   26c40:	f240 31e7 	movw	r1, #999	; 0x3e7
   26c44:	4816      	ldr	r0, [pc, #88]	; (26ca0 <k_sched_unlock+0xa4>)
   26c46:	f001 ffb6 	bl	28bb6 <assert_post_action>
   26c4a:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   26c4e:	b140      	cbz	r0, 26c62 <k_sched_unlock+0x66>
   26c50:	4913      	ldr	r1, [pc, #76]	; (26ca0 <k_sched_unlock+0xa4>)
   26c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26c56:	4810      	ldr	r0, [pc, #64]	; (26c98 <k_sched_unlock+0x9c>)
   26c58:	f001 ffb4 	bl	28bc4 <assert_print>
   26c5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   26c60:	e7f0      	b.n	26c44 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   26c62:	3301      	adds	r3, #1
   26c64:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26c66:	f7ff fddb 	bl	26820 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c6a:	4809      	ldr	r0, [pc, #36]	; (26c90 <k_sched_unlock+0x94>)
   26c6c:	f7fe fdea 	bl	25844 <z_spin_unlock_valid>
   26c70:	b930      	cbnz	r0, 26c80 <k_sched_unlock+0x84>
   26c72:	4908      	ldr	r1, [pc, #32]	; (26c94 <k_sched_unlock+0x98>)
   26c74:	22c2      	movs	r2, #194	; 0xc2
   26c76:	4808      	ldr	r0, [pc, #32]	; (26c98 <k_sched_unlock+0x9c>)
   26c78:	f001 ffa4 	bl	28bc4 <assert_print>
   26c7c:	21c2      	movs	r1, #194	; 0xc2
   26c7e:	e7d0      	b.n	26c22 <k_sched_unlock+0x26>
	__asm__ volatile(
   26c80:	f384 8811 	msr	BASEPRI, r4
   26c84:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   26c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   26c8c:	f008 bc4d 	b.w	2f52a <z_reschedule_unlocked>
   26c90:	2000b108 	.word	0x2000b108
   26c94:	00030eb4 	.word	0x00030eb4
   26c98:	00030da5 	.word	0x00030da5
   26c9c:	2000b0c0 	.word	0x2000b0c0
   26ca0:	000353f1 	.word	0x000353f1

00026ca4 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   26ca4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26ca6:	4b0b      	ldr	r3, [pc, #44]	; (26cd4 <z_priq_dumb_remove+0x30>)
   26ca8:	4299      	cmp	r1, r3
   26caa:	d10a      	bne.n	26cc2 <z_priq_dumb_remove+0x1e>
   26cac:	490a      	ldr	r1, [pc, #40]	; (26cd8 <z_priq_dumb_remove+0x34>)
   26cae:	480b      	ldr	r0, [pc, #44]	; (26cdc <z_priq_dumb_remove+0x38>)
   26cb0:	f240 4273 	movw	r2, #1139	; 0x473
   26cb4:	f001 ff86 	bl	28bc4 <assert_print>
   26cb8:	f240 4173 	movw	r1, #1139	; 0x473
   26cbc:	4806      	ldr	r0, [pc, #24]	; (26cd8 <z_priq_dumb_remove+0x34>)
   26cbe:	f001 ff7a 	bl	28bb6 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26cc2:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   26cc6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26cc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26cca:	2300      	movs	r3, #0
	node->prev = NULL;
   26ccc:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   26cd0:	bd08      	pop	{r3, pc}
   26cd2:	bf00      	nop
   26cd4:	2000a3f8 	.word	0x2000a3f8
   26cd8:	000353f1 	.word	0x000353f1
   26cdc:	00030da5 	.word	0x00030da5

00026ce0 <move_thread_to_end_of_prio_q>:
{
   26ce0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   26ce2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26ce6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26ce8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   26cea:	7b43      	ldrb	r3, [r0, #13]
   26cec:	da06      	bge.n	26cfc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26cf2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26cf4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26cf6:	481d      	ldr	r0, [pc, #116]	; (26d6c <move_thread_to_end_of_prio_q+0x8c>)
   26cf8:	f7ff ffd4 	bl	26ca4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26cfc:	7b63      	ldrb	r3, [r4, #13]
   26cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26d02:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26d04:	4b1a      	ldr	r3, [pc, #104]	; (26d70 <move_thread_to_end_of_prio_q+0x90>)
   26d06:	429c      	cmp	r4, r3
   26d08:	d108      	bne.n	26d1c <move_thread_to_end_of_prio_q+0x3c>
   26d0a:	491a      	ldr	r1, [pc, #104]	; (26d74 <move_thread_to_end_of_prio_q+0x94>)
   26d0c:	481a      	ldr	r0, [pc, #104]	; (26d78 <move_thread_to_end_of_prio_q+0x98>)
   26d0e:	22ba      	movs	r2, #186	; 0xba
   26d10:	f001 ff58 	bl	28bc4 <assert_print>
   26d14:	21ba      	movs	r1, #186	; 0xba
   26d16:	4817      	ldr	r0, [pc, #92]	; (26d74 <move_thread_to_end_of_prio_q+0x94>)
   26d18:	f001 ff4d 	bl	28bb6 <assert_post_action>
	return list->head == list;
   26d1c:	4a17      	ldr	r2, [pc, #92]	; (26d7c <move_thread_to_end_of_prio_q+0x9c>)
   26d1e:	4611      	mov	r1, r2
   26d20:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   26d24:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d26:	428b      	cmp	r3, r1
   26d28:	bf08      	it	eq
   26d2a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26d2c:	b923      	cbnz	r3, 26d38 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   26d2e:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   26d32:	6004      	str	r4, [r0, #0]
	list->tail = node;
   26d34:	6254      	str	r4, [r2, #36]	; 0x24
}
   26d36:	e00c      	b.n	26d52 <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   26d38:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26d3c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26d40:	42b5      	cmp	r5, r6
   26d42:	d00e      	beq.n	26d62 <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26d44:	42ae      	cmp	r6, r5
   26d46:	dd0c      	ble.n	26d62 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   26d48:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   26d4a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   26d4e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   26d50:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   26d52:	6890      	ldr	r0, [r2, #8]
   26d54:	1b03      	subs	r3, r0, r4
   26d56:	4258      	negs	r0, r3
   26d58:	4158      	adcs	r0, r3
}
   26d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26d5e:	f7ff bd5f 	b.w	26820 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26d62:	4298      	cmp	r0, r3
   26d64:	d0e3      	beq.n	26d2e <move_thread_to_end_of_prio_q+0x4e>
   26d66:	681b      	ldr	r3, [r3, #0]
   26d68:	e7e0      	b.n	26d2c <move_thread_to_end_of_prio_q+0x4c>
   26d6a:	bf00      	nop
   26d6c:	2000b0e0 	.word	0x2000b0e0
   26d70:	2000a3f8 	.word	0x2000a3f8
   26d74:	000353f1 	.word	0x000353f1
   26d78:	00030da5 	.word	0x00030da5
   26d7c:	2000b0c0 	.word	0x2000b0c0

00026d80 <z_time_slice>:
{
   26d80:	b570      	push	{r4, r5, r6, lr}
   26d82:	4605      	mov	r5, r0
	__asm__ volatile(
   26d84:	f04f 0320 	mov.w	r3, #32
   26d88:	f3ef 8611 	mrs	r6, BASEPRI
   26d8c:	f383 8812 	msr	BASEPRI_MAX, r3
   26d90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d94:	4824      	ldr	r0, [pc, #144]	; (26e28 <z_time_slice+0xa8>)
   26d96:	f7fe fd47 	bl	25828 <z_spin_lock_valid>
   26d9a:	b940      	cbnz	r0, 26dae <z_time_slice+0x2e>
   26d9c:	4923      	ldr	r1, [pc, #140]	; (26e2c <z_time_slice+0xac>)
   26d9e:	2294      	movs	r2, #148	; 0x94
   26da0:	4823      	ldr	r0, [pc, #140]	; (26e30 <z_time_slice+0xb0>)
   26da2:	f001 ff0f 	bl	28bc4 <assert_print>
   26da6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26da8:	4820      	ldr	r0, [pc, #128]	; (26e2c <z_time_slice+0xac>)
   26daa:	f001 ff04 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26dae:	481e      	ldr	r0, [pc, #120]	; (26e28 <z_time_slice+0xa8>)
   26db0:	f7fe fd56 	bl	25860 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   26db4:	4b1f      	ldr	r3, [pc, #124]	; (26e34 <z_time_slice+0xb4>)
   26db6:	4a20      	ldr	r2, [pc, #128]	; (26e38 <z_time_slice+0xb8>)
   26db8:	689c      	ldr	r4, [r3, #8]
   26dba:	6811      	ldr	r1, [r2, #0]
   26dbc:	428c      	cmp	r4, r1
   26dbe:	d10d      	bne.n	26ddc <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   26dc0:	4620      	mov	r0, r4
   26dc2:	f7ff fd19 	bl	267f8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26dc6:	4818      	ldr	r0, [pc, #96]	; (26e28 <z_time_slice+0xa8>)
   26dc8:	f7fe fd3c 	bl	25844 <z_spin_unlock_valid>
   26dcc:	bb30      	cbnz	r0, 26e1c <z_time_slice+0x9c>
   26dce:	4917      	ldr	r1, [pc, #92]	; (26e2c <z_time_slice+0xac>)
   26dd0:	22c2      	movs	r2, #194	; 0xc2
   26dd2:	4817      	ldr	r0, [pc, #92]	; (26e30 <z_time_slice+0xb0>)
   26dd4:	f001 fef6 	bl	28bc4 <assert_print>
   26dd8:	21c2      	movs	r1, #194	; 0xc2
   26dda:	e7e5      	b.n	26da8 <z_time_slice+0x28>
	pending_current = NULL;
   26ddc:	2100      	movs	r1, #0
   26dde:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   26de0:	4a16      	ldr	r2, [pc, #88]	; (26e3c <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   26de2:	6812      	ldr	r2, [r2, #0]
   26de4:	b1c2      	cbz	r2, 26e18 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   26de6:	89e2      	ldrh	r2, [r4, #14]
   26de8:	2a7f      	cmp	r2, #127	; 0x7f
   26dea:	d815      	bhi.n	26e18 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   26dec:	7b62      	ldrb	r2, [r4, #13]
   26dee:	06d2      	lsls	r2, r2, #27
   26df0:	d112      	bne.n	26e18 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26df2:	4a13      	ldr	r2, [pc, #76]	; (26e40 <z_time_slice+0xc0>)
   26df4:	f994 100e 	ldrsb.w	r1, [r4, #14]
   26df8:	6812      	ldr	r2, [r2, #0]
   26dfa:	4291      	cmp	r1, r2
   26dfc:	db0c      	blt.n	26e18 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   26dfe:	4a11      	ldr	r2, [pc, #68]	; (26e44 <z_time_slice+0xc4>)
   26e00:	4294      	cmp	r4, r2
   26e02:	d009      	beq.n	26e18 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   26e04:	691a      	ldr	r2, [r3, #16]
   26e06:	42aa      	cmp	r2, r5
   26e08:	dc03      	bgt.n	26e12 <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   26e0a:	4620      	mov	r0, r4
   26e0c:	f7ff ff68 	bl	26ce0 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   26e10:	e7d6      	b.n	26dc0 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   26e12:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   26e14:	611a      	str	r2, [r3, #16]
   26e16:	e7d6      	b.n	26dc6 <z_time_slice+0x46>
   26e18:	2200      	movs	r2, #0
   26e1a:	e7fb      	b.n	26e14 <z_time_slice+0x94>
	__asm__ volatile(
   26e1c:	f386 8811 	msr	BASEPRI, r6
   26e20:	f3bf 8f6f 	isb	sy
}
   26e24:	bd70      	pop	{r4, r5, r6, pc}
   26e26:	bf00      	nop
   26e28:	2000b108 	.word	0x2000b108
   26e2c:	00030eb4 	.word	0x00030eb4
   26e30:	00030da5 	.word	0x00030da5
   26e34:	2000b0c0 	.word	0x2000b0c0
   26e38:	2000b0fc 	.word	0x2000b0fc
   26e3c:	2000b104 	.word	0x2000b104
   26e40:	2000b100 	.word	0x2000b100
   26e44:	2000a3f8 	.word	0x2000a3f8

00026e48 <unready_thread>:
{
   26e48:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   26e4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26e4e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26e50:	2a00      	cmp	r2, #0
   26e52:	7b43      	ldrb	r3, [r0, #13]
   26e54:	da06      	bge.n	26e64 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26e5a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e5c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26e5e:	4806      	ldr	r0, [pc, #24]	; (26e78 <unready_thread+0x30>)
   26e60:	f7ff ff20 	bl	26ca4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   26e64:	4b05      	ldr	r3, [pc, #20]	; (26e7c <unready_thread+0x34>)
   26e66:	6898      	ldr	r0, [r3, #8]
   26e68:	1b03      	subs	r3, r0, r4
   26e6a:	4258      	negs	r0, r3
   26e6c:	4158      	adcs	r0, r3
}
   26e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   26e72:	f7ff bcd5 	b.w	26820 <update_cache>
   26e76:	bf00      	nop
   26e78:	2000b0e0 	.word	0x2000b0e0
   26e7c:	2000b0c0 	.word	0x2000b0c0

00026e80 <add_to_waitq_locked>:
{
   26e80:	b538      	push	{r3, r4, r5, lr}
   26e82:	4604      	mov	r4, r0
   26e84:	460d      	mov	r5, r1
	unready_thread(thread);
   26e86:	f7ff ffdf 	bl	26e48 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26e8a:	7b63      	ldrb	r3, [r4, #13]
   26e8c:	f043 0302 	orr.w	r3, r3, #2
   26e90:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26e92:	b345      	cbz	r5, 26ee6 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26e94:	4b14      	ldr	r3, [pc, #80]	; (26ee8 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   26e96:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26e98:	429c      	cmp	r4, r3
   26e9a:	d108      	bne.n	26eae <add_to_waitq_locked+0x2e>
   26e9c:	4913      	ldr	r1, [pc, #76]	; (26eec <add_to_waitq_locked+0x6c>)
   26e9e:	4814      	ldr	r0, [pc, #80]	; (26ef0 <add_to_waitq_locked+0x70>)
   26ea0:	22ba      	movs	r2, #186	; 0xba
   26ea2:	f001 fe8f 	bl	28bc4 <assert_print>
   26ea6:	21ba      	movs	r1, #186	; 0xba
   26ea8:	4810      	ldr	r0, [pc, #64]	; (26eec <add_to_waitq_locked+0x6c>)
   26eaa:	f001 fe84 	bl	28bb6 <assert_post_action>
	return list->head == list;
   26eae:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26eb0:	429d      	cmp	r5, r3
   26eb2:	d109      	bne.n	26ec8 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   26eb4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26eb6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26eba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26ebc:	606c      	str	r4, [r5, #4]
}
   26ebe:	e012      	b.n	26ee6 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   26ec0:	686a      	ldr	r2, [r5, #4]
   26ec2:	4293      	cmp	r3, r2
   26ec4:	d0f6      	beq.n	26eb4 <add_to_waitq_locked+0x34>
   26ec6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26ec8:	2b00      	cmp	r3, #0
   26eca:	d0f3      	beq.n	26eb4 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   26ecc:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26ed0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26ed4:	428a      	cmp	r2, r1
   26ed6:	d0f3      	beq.n	26ec0 <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26ed8:	4291      	cmp	r1, r2
   26eda:	ddf1      	ble.n	26ec0 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   26edc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26ede:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26ee2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26ee4:	605c      	str	r4, [r3, #4]
}
   26ee6:	bd38      	pop	{r3, r4, r5, pc}
   26ee8:	2000a3f8 	.word	0x2000a3f8
   26eec:	000353f1 	.word	0x000353f1
   26ef0:	00030da5 	.word	0x00030da5

00026ef4 <pend_locked>:
{
   26ef4:	b570      	push	{r4, r5, r6, lr}
   26ef6:	4615      	mov	r5, r2
   26ef8:	461c      	mov	r4, r3
   26efa:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26efc:	f7ff ffc0 	bl	26e80 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26f00:	f1b4 3fff 	cmp.w	r4, #4294967295
   26f04:	bf08      	it	eq
   26f06:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26f0a:	d008      	beq.n	26f1e <pend_locked+0x2a>
   26f0c:	462a      	mov	r2, r5
   26f0e:	4623      	mov	r3, r4
   26f10:	f106 0018 	add.w	r0, r6, #24
   26f14:	4902      	ldr	r1, [pc, #8]	; (26f20 <pend_locked+0x2c>)
}
   26f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26f1a:	f000 bd0b 	b.w	27934 <z_add_timeout>
   26f1e:	bd70      	pop	{r4, r5, r6, pc}
   26f20:	00027229 	.word	0x00027229

00026f24 <z_pend_curr>:
{
   26f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f28:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   26f2c:	f8df a090 	ldr.w	sl, [pc, #144]	; 26fc0 <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26f30:	4c24      	ldr	r4, [pc, #144]	; (26fc4 <z_pend_curr+0xa0>)
{
   26f32:	4617      	mov	r7, r2
	pending_current = _current;
   26f34:	4b24      	ldr	r3, [pc, #144]	; (26fc8 <z_pend_curr+0xa4>)
   26f36:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26f3a:	42a0      	cmp	r0, r4
{
   26f3c:	4605      	mov	r5, r0
   26f3e:	460e      	mov	r6, r1
	pending_current = _current;
   26f40:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26f42:	d10a      	bne.n	26f5a <z_pend_curr+0x36>
   26f44:	4921      	ldr	r1, [pc, #132]	; (26fcc <z_pend_curr+0xa8>)
   26f46:	4822      	ldr	r0, [pc, #136]	; (26fd0 <z_pend_curr+0xac>)
   26f48:	f240 324e 	movw	r2, #846	; 0x34e
   26f4c:	f001 fe3a 	bl	28bc4 <assert_print>
   26f50:	f240 314e 	movw	r1, #846	; 0x34e
   26f54:	481d      	ldr	r0, [pc, #116]	; (26fcc <z_pend_curr+0xa8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f56:	f001 fe2e 	bl	28bb6 <assert_post_action>
	__asm__ volatile(
   26f5a:	f04f 0220 	mov.w	r2, #32
   26f5e:	f3ef 8311 	mrs	r3, BASEPRI
   26f62:	f382 8812 	msr	BASEPRI_MAX, r2
   26f66:	f3bf 8f6f 	isb	sy
   26f6a:	4620      	mov	r0, r4
   26f6c:	f7fe fc5c 	bl	25828 <z_spin_lock_valid>
   26f70:	b938      	cbnz	r0, 26f82 <z_pend_curr+0x5e>
   26f72:	4918      	ldr	r1, [pc, #96]	; (26fd4 <z_pend_curr+0xb0>)
   26f74:	2294      	movs	r2, #148	; 0x94
   26f76:	4816      	ldr	r0, [pc, #88]	; (26fd0 <z_pend_curr+0xac>)
   26f78:	f001 fe24 	bl	28bc4 <assert_print>
   26f7c:	2194      	movs	r1, #148	; 0x94
   26f7e:	4815      	ldr	r0, [pc, #84]	; (26fd4 <z_pend_curr+0xb0>)
   26f80:	e7e9      	b.n	26f56 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   26f82:	4620      	mov	r0, r4
   26f84:	f7fe fc6c 	bl	25860 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   26f88:	f8da 0008 	ldr.w	r0, [sl, #8]
   26f8c:	4642      	mov	r2, r8
   26f8e:	464b      	mov	r3, r9
   26f90:	4639      	mov	r1, r7
   26f92:	f7ff ffaf 	bl	26ef4 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f96:	4628      	mov	r0, r5
   26f98:	f7fe fc54 	bl	25844 <z_spin_unlock_valid>
   26f9c:	b930      	cbnz	r0, 26fac <z_pend_curr+0x88>
   26f9e:	490d      	ldr	r1, [pc, #52]	; (26fd4 <z_pend_curr+0xb0>)
   26fa0:	22e1      	movs	r2, #225	; 0xe1
   26fa2:	480b      	ldr	r0, [pc, #44]	; (26fd0 <z_pend_curr+0xac>)
   26fa4:	f001 fe0e 	bl	28bc4 <assert_print>
   26fa8:	21e1      	movs	r1, #225	; 0xe1
   26faa:	e7e8      	b.n	26f7e <z_pend_curr+0x5a>
   26fac:	4620      	mov	r0, r4
   26fae:	f7fe fc49 	bl	25844 <z_spin_unlock_valid>
   26fb2:	2800      	cmp	r0, #0
   26fb4:	d0f3      	beq.n	26f9e <z_pend_curr+0x7a>
   26fb6:	4630      	mov	r0, r6
}
   26fb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26fbc:	f7e5 bec6 	b.w	cd4c <arch_swap>
   26fc0:	2000b0c0 	.word	0x2000b0c0
   26fc4:	2000b108 	.word	0x2000b108
   26fc8:	2000b0fc 	.word	0x2000b0fc
   26fcc:	000353f1 	.word	0x000353f1
   26fd0:	00030da5 	.word	0x00030da5
   26fd4:	00030eb4 	.word	0x00030eb4

00026fd8 <z_set_prio>:
{
   26fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26fdc:	4604      	mov	r4, r0
   26fde:	460e      	mov	r6, r1
   26fe0:	f04f 0320 	mov.w	r3, #32
   26fe4:	f3ef 8911 	mrs	r9, BASEPRI
   26fe8:	f383 8812 	msr	BASEPRI_MAX, r3
   26fec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ff0:	4831      	ldr	r0, [pc, #196]	; (270b8 <z_set_prio+0xe0>)
   26ff2:	f7fe fc19 	bl	25828 <z_spin_lock_valid>
   26ff6:	4607      	mov	r7, r0
   26ff8:	b938      	cbnz	r0, 2700a <z_set_prio+0x32>
   26ffa:	4930      	ldr	r1, [pc, #192]	; (270bc <z_set_prio+0xe4>)
   26ffc:	2294      	movs	r2, #148	; 0x94
   26ffe:	4830      	ldr	r0, [pc, #192]	; (270c0 <z_set_prio+0xe8>)
   27000:	f001 fde0 	bl	28bc4 <assert_print>
   27004:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27006:	482d      	ldr	r0, [pc, #180]	; (270bc <z_set_prio+0xe4>)
   27008:	e020      	b.n	2704c <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   2700a:	482b      	ldr	r0, [pc, #172]	; (270b8 <z_set_prio+0xe0>)
   2700c:	f7fe fc28 	bl	25860 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   27010:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   27012:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27014:	06da      	lsls	r2, r3, #27
   27016:	d11b      	bne.n	27050 <z_set_prio+0x78>
	return node->next != NULL;
   27018:	69a5      	ldr	r5, [r4, #24]
   2701a:	b9cd      	cbnz	r5, 27050 <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   2701c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 270c4 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27024:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27026:	4621      	mov	r1, r4
   27028:	4640      	mov	r0, r8
   2702a:	f7ff fe3b 	bl	26ca4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2702e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   27030:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   27032:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27036:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27038:	4b23      	ldr	r3, [pc, #140]	; (270c8 <z_set_prio+0xf0>)
   2703a:	429c      	cmp	r4, r3
   2703c:	d115      	bne.n	2706a <z_set_prio+0x92>
   2703e:	4923      	ldr	r1, [pc, #140]	; (270cc <z_set_prio+0xf4>)
   27040:	481f      	ldr	r0, [pc, #124]	; (270c0 <z_set_prio+0xe8>)
   27042:	22ba      	movs	r2, #186	; 0xba
   27044:	f001 fdbe 	bl	28bc4 <assert_print>
   27048:	21ba      	movs	r1, #186	; 0xba
   2704a:	4820      	ldr	r0, [pc, #128]	; (270cc <z_set_prio+0xf4>)
   2704c:	f001 fdb3 	bl	28bb6 <assert_post_action>
   27050:	2700      	movs	r7, #0
			thread->base.prio = prio;
   27052:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27054:	4818      	ldr	r0, [pc, #96]	; (270b8 <z_set_prio+0xe0>)
   27056:	f7fe fbf5 	bl	25844 <z_spin_unlock_valid>
   2705a:	bb30      	cbnz	r0, 270aa <z_set_prio+0xd2>
   2705c:	4917      	ldr	r1, [pc, #92]	; (270bc <z_set_prio+0xe4>)
   2705e:	22c2      	movs	r2, #194	; 0xc2
   27060:	4817      	ldr	r0, [pc, #92]	; (270c0 <z_set_prio+0xe8>)
   27062:	f001 fdaf 	bl	28bc4 <assert_print>
   27066:	21c2      	movs	r1, #194	; 0xc2
   27068:	e7cd      	b.n	27006 <z_set_prio+0x2e>
	return list->head == list;
   2706a:	4643      	mov	r3, r8
   2706c:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27070:	4542      	cmp	r2, r8
   27072:	bf18      	it	ne
   27074:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   27076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27078:	b925      	cbnz	r5, 27084 <z_set_prio+0xac>
	node->prev = tail;
   2707a:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2707e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27080:	625c      	str	r4, [r3, #36]	; 0x24
}
   27082:	e00a      	b.n	2709a <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   27084:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   27088:	428e      	cmp	r6, r1
   2708a:	d00a      	beq.n	270a2 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2708c:	42b1      	cmp	r1, r6
   2708e:	dd08      	ble.n	270a2 <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   27090:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   27092:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   27096:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   27098:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2709a:	2001      	movs	r0, #1
   2709c:	f7ff fbc0 	bl	26820 <update_cache>
   270a0:	e7d8      	b.n	27054 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   270a2:	42aa      	cmp	r2, r5
   270a4:	d0e9      	beq.n	2707a <z_set_prio+0xa2>
   270a6:	682d      	ldr	r5, [r5, #0]
   270a8:	e7e6      	b.n	27078 <z_set_prio+0xa0>
	__asm__ volatile(
   270aa:	f389 8811 	msr	BASEPRI, r9
   270ae:	f3bf 8f6f 	isb	sy
}
   270b2:	4638      	mov	r0, r7
   270b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   270b8:	2000b108 	.word	0x2000b108
   270bc:	00030eb4 	.word	0x00030eb4
   270c0:	00030da5 	.word	0x00030da5
   270c4:	2000b0e0 	.word	0x2000b0e0
   270c8:	2000a3f8 	.word	0x2000a3f8
   270cc:	000353f1 	.word	0x000353f1

000270d0 <z_impl_k_thread_suspend>:
{
   270d0:	b570      	push	{r4, r5, r6, lr}
   270d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   270d4:	3018      	adds	r0, #24
   270d6:	f000 fcd9 	bl	27a8c <z_abort_timeout>
	__asm__ volatile(
   270da:	f04f 0320 	mov.w	r3, #32
   270de:	f3ef 8611 	mrs	r6, BASEPRI
   270e2:	f383 8812 	msr	BASEPRI_MAX, r3
   270e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270ea:	481f      	ldr	r0, [pc, #124]	; (27168 <z_impl_k_thread_suspend+0x98>)
   270ec:	f7fe fb9c 	bl	25828 <z_spin_lock_valid>
   270f0:	b940      	cbnz	r0, 27104 <z_impl_k_thread_suspend+0x34>
   270f2:	491e      	ldr	r1, [pc, #120]	; (2716c <z_impl_k_thread_suspend+0x9c>)
   270f4:	2294      	movs	r2, #148	; 0x94
   270f6:	481e      	ldr	r0, [pc, #120]	; (27170 <z_impl_k_thread_suspend+0xa0>)
   270f8:	f001 fd64 	bl	28bc4 <assert_print>
   270fc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270fe:	481b      	ldr	r0, [pc, #108]	; (2716c <z_impl_k_thread_suspend+0x9c>)
   27100:	f001 fd59 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27104:	4818      	ldr	r0, [pc, #96]	; (27168 <z_impl_k_thread_suspend+0x98>)
   27106:	f7fe fbab 	bl	25860 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2710a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2710e:	7b63      	ldrb	r3, [r4, #13]
   27110:	2a00      	cmp	r2, #0
   27112:	da06      	bge.n	27122 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   27118:	4621      	mov	r1, r4
   2711a:	4816      	ldr	r0, [pc, #88]	; (27174 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2711c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2711e:	f7ff fdc1 	bl	26ca4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   27122:	4d15      	ldr	r5, [pc, #84]	; (27178 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27124:	7b63      	ldrb	r3, [r4, #13]
   27126:	68a8      	ldr	r0, [r5, #8]
   27128:	f043 0310 	orr.w	r3, r3, #16
   2712c:	7363      	strb	r3, [r4, #13]
   2712e:	1b03      	subs	r3, r0, r4
   27130:	4258      	negs	r0, r3
   27132:	4158      	adcs	r0, r3
   27134:	f7ff fb74 	bl	26820 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27138:	480b      	ldr	r0, [pc, #44]	; (27168 <z_impl_k_thread_suspend+0x98>)
   2713a:	f7fe fb83 	bl	25844 <z_spin_unlock_valid>
   2713e:	b930      	cbnz	r0, 2714e <z_impl_k_thread_suspend+0x7e>
   27140:	490a      	ldr	r1, [pc, #40]	; (2716c <z_impl_k_thread_suspend+0x9c>)
   27142:	22c2      	movs	r2, #194	; 0xc2
   27144:	480a      	ldr	r0, [pc, #40]	; (27170 <z_impl_k_thread_suspend+0xa0>)
   27146:	f001 fd3d 	bl	28bc4 <assert_print>
   2714a:	21c2      	movs	r1, #194	; 0xc2
   2714c:	e7d7      	b.n	270fe <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   2714e:	f386 8811 	msr	BASEPRI, r6
   27152:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   27156:	68ab      	ldr	r3, [r5, #8]
   27158:	42a3      	cmp	r3, r4
   2715a:	d103      	bne.n	27164 <z_impl_k_thread_suspend+0x94>
}
   2715c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   27160:	f008 b9e3 	b.w	2f52a <z_reschedule_unlocked>
}
   27164:	bd70      	pop	{r4, r5, r6, pc}
   27166:	bf00      	nop
   27168:	2000b108 	.word	0x2000b108
   2716c:	00030eb4 	.word	0x00030eb4
   27170:	00030da5 	.word	0x00030da5
   27174:	2000b0e0 	.word	0x2000b0e0
   27178:	2000b0c0 	.word	0x2000b0c0

0002717c <unpend_thread_no_timeout>:
{
   2717c:	b510      	push	{r4, lr}
   2717e:	4604      	mov	r4, r0
   27180:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   27182:	b950      	cbnz	r0, 2719a <unpend_thread_no_timeout+0x1e>
   27184:	490a      	ldr	r1, [pc, #40]	; (271b0 <unpend_thread_no_timeout+0x34>)
   27186:	480b      	ldr	r0, [pc, #44]	; (271b4 <unpend_thread_no_timeout+0x38>)
   27188:	f240 22d6 	movw	r2, #726	; 0x2d6
   2718c:	f001 fd1a 	bl	28bc4 <assert_print>
   27190:	f240 21d6 	movw	r1, #726	; 0x2d6
   27194:	4806      	ldr	r0, [pc, #24]	; (271b0 <unpend_thread_no_timeout+0x34>)
   27196:	f001 fd0e 	bl	28bb6 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2719a:	4621      	mov	r1, r4
   2719c:	f7ff fd82 	bl	26ca4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   271a0:	7b63      	ldrb	r3, [r4, #13]
   271a2:	f023 0302 	bic.w	r3, r3, #2
   271a6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   271a8:	2300      	movs	r3, #0
   271aa:	60a3      	str	r3, [r4, #8]
}
   271ac:	bd10      	pop	{r4, pc}
   271ae:	bf00      	nop
   271b0:	000353f1 	.word	0x000353f1
   271b4:	00030da5 	.word	0x00030da5

000271b8 <z_unpend_thread>:
{
   271b8:	b538      	push	{r3, r4, r5, lr}
   271ba:	4604      	mov	r4, r0
	__asm__ volatile(
   271bc:	f04f 0320 	mov.w	r3, #32
   271c0:	f3ef 8511 	mrs	r5, BASEPRI
   271c4:	f383 8812 	msr	BASEPRI_MAX, r3
   271c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271cc:	4813      	ldr	r0, [pc, #76]	; (2721c <z_unpend_thread+0x64>)
   271ce:	f7fe fb2b 	bl	25828 <z_spin_lock_valid>
   271d2:	b940      	cbnz	r0, 271e6 <z_unpend_thread+0x2e>
   271d4:	4912      	ldr	r1, [pc, #72]	; (27220 <z_unpend_thread+0x68>)
   271d6:	2294      	movs	r2, #148	; 0x94
   271d8:	4812      	ldr	r0, [pc, #72]	; (27224 <z_unpend_thread+0x6c>)
   271da:	f001 fcf3 	bl	28bc4 <assert_print>
   271de:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271e0:	480f      	ldr	r0, [pc, #60]	; (27220 <z_unpend_thread+0x68>)
   271e2:	f001 fce8 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   271e6:	480d      	ldr	r0, [pc, #52]	; (2721c <z_unpend_thread+0x64>)
   271e8:	f7fe fb3a 	bl	25860 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   271ec:	4620      	mov	r0, r4
   271ee:	f7ff ffc5 	bl	2717c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271f2:	480a      	ldr	r0, [pc, #40]	; (2721c <z_unpend_thread+0x64>)
   271f4:	f7fe fb26 	bl	25844 <z_spin_unlock_valid>
   271f8:	b930      	cbnz	r0, 27208 <z_unpend_thread+0x50>
   271fa:	4909      	ldr	r1, [pc, #36]	; (27220 <z_unpend_thread+0x68>)
   271fc:	22c2      	movs	r2, #194	; 0xc2
   271fe:	4809      	ldr	r0, [pc, #36]	; (27224 <z_unpend_thread+0x6c>)
   27200:	f001 fce0 	bl	28bc4 <assert_print>
   27204:	21c2      	movs	r1, #194	; 0xc2
   27206:	e7eb      	b.n	271e0 <z_unpend_thread+0x28>
	__asm__ volatile(
   27208:	f385 8811 	msr	BASEPRI, r5
   2720c:	f3bf 8f6f 	isb	sy
   27210:	f104 0018 	add.w	r0, r4, #24
}
   27214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27218:	f000 bc38 	b.w	27a8c <z_abort_timeout>
   2721c:	2000b108 	.word	0x2000b108
   27220:	00030eb4 	.word	0x00030eb4
   27224:	00030da5 	.word	0x00030da5

00027228 <z_thread_timeout>:
{
   27228:	b570      	push	{r4, r5, r6, lr}
   2722a:	4604      	mov	r4, r0
	__asm__ volatile(
   2722c:	f04f 0320 	mov.w	r3, #32
   27230:	f3ef 8611 	mrs	r6, BASEPRI
   27234:	f383 8812 	msr	BASEPRI_MAX, r3
   27238:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2723c:	481a      	ldr	r0, [pc, #104]	; (272a8 <z_thread_timeout+0x80>)
   2723e:	f7fe faf3 	bl	25828 <z_spin_lock_valid>
   27242:	b940      	cbnz	r0, 27256 <z_thread_timeout+0x2e>
   27244:	4919      	ldr	r1, [pc, #100]	; (272ac <z_thread_timeout+0x84>)
   27246:	2294      	movs	r2, #148	; 0x94
   27248:	4819      	ldr	r0, [pc, #100]	; (272b0 <z_thread_timeout+0x88>)
   2724a:	f001 fcbb 	bl	28bc4 <assert_print>
   2724e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27250:	4816      	ldr	r0, [pc, #88]	; (272ac <z_thread_timeout+0x84>)
   27252:	f001 fcb0 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27256:	4814      	ldr	r0, [pc, #80]	; (272a8 <z_thread_timeout+0x80>)
   27258:	f7fe fb02 	bl	25860 <z_spin_lock_set_owner>
		if (!killed) {
   2725c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   27260:	f013 0f28 	tst.w	r3, #40	; 0x28
   27264:	d110      	bne.n	27288 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   27266:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2726a:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2726e:	b113      	cbz	r3, 27276 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   27270:	4628      	mov	r0, r5
   27272:	f7ff ff83 	bl	2717c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27276:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   2727a:	4628      	mov	r0, r5
   2727c:	f023 0314 	bic.w	r3, r3, #20
   27280:	f804 3c0b 	strb.w	r3, [r4, #-11]
   27284:	f7ff faf8 	bl	26878 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27288:	4807      	ldr	r0, [pc, #28]	; (272a8 <z_thread_timeout+0x80>)
   2728a:	f7fe fadb 	bl	25844 <z_spin_unlock_valid>
   2728e:	b930      	cbnz	r0, 2729e <z_thread_timeout+0x76>
   27290:	4906      	ldr	r1, [pc, #24]	; (272ac <z_thread_timeout+0x84>)
   27292:	22c2      	movs	r2, #194	; 0xc2
   27294:	4806      	ldr	r0, [pc, #24]	; (272b0 <z_thread_timeout+0x88>)
   27296:	f001 fc95 	bl	28bc4 <assert_print>
   2729a:	21c2      	movs	r1, #194	; 0xc2
   2729c:	e7d8      	b.n	27250 <z_thread_timeout+0x28>
	__asm__ volatile(
   2729e:	f386 8811 	msr	BASEPRI, r6
   272a2:	f3bf 8f6f 	isb	sy
}
   272a6:	bd70      	pop	{r4, r5, r6, pc}
   272a8:	2000b108 	.word	0x2000b108
   272ac:	00030eb4 	.word	0x00030eb4
   272b0:	00030da5 	.word	0x00030da5

000272b4 <z_unpend1_no_timeout>:
{
   272b4:	b570      	push	{r4, r5, r6, lr}
   272b6:	4605      	mov	r5, r0
	__asm__ volatile(
   272b8:	f04f 0320 	mov.w	r3, #32
   272bc:	f3ef 8611 	mrs	r6, BASEPRI
   272c0:	f383 8812 	msr	BASEPRI_MAX, r3
   272c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272c8:	4814      	ldr	r0, [pc, #80]	; (2731c <z_unpend1_no_timeout+0x68>)
   272ca:	f7fe faad 	bl	25828 <z_spin_lock_valid>
   272ce:	b940      	cbnz	r0, 272e2 <z_unpend1_no_timeout+0x2e>
   272d0:	4913      	ldr	r1, [pc, #76]	; (27320 <z_unpend1_no_timeout+0x6c>)
   272d2:	2294      	movs	r2, #148	; 0x94
   272d4:	4813      	ldr	r0, [pc, #76]	; (27324 <z_unpend1_no_timeout+0x70>)
   272d6:	f001 fc75 	bl	28bc4 <assert_print>
   272da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272dc:	4810      	ldr	r0, [pc, #64]	; (27320 <z_unpend1_no_timeout+0x6c>)
   272de:	f001 fc6a 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   272e2:	480e      	ldr	r0, [pc, #56]	; (2731c <z_unpend1_no_timeout+0x68>)
   272e4:	f7fe fabc 	bl	25860 <z_spin_lock_set_owner>
	return list->head == list;
   272e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272ea:	42a5      	cmp	r5, r4
   272ec:	d00e      	beq.n	2730c <z_unpend1_no_timeout+0x58>
		if (thread != NULL) {
   272ee:	b114      	cbz	r4, 272f6 <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   272f0:	4620      	mov	r0, r4
   272f2:	f7ff ff43 	bl	2717c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272f6:	4809      	ldr	r0, [pc, #36]	; (2731c <z_unpend1_no_timeout+0x68>)
   272f8:	f7fe faa4 	bl	25844 <z_spin_unlock_valid>
   272fc:	b940      	cbnz	r0, 27310 <z_unpend1_no_timeout+0x5c>
   272fe:	4908      	ldr	r1, [pc, #32]	; (27320 <z_unpend1_no_timeout+0x6c>)
   27300:	22c2      	movs	r2, #194	; 0xc2
   27302:	4808      	ldr	r0, [pc, #32]	; (27324 <z_unpend1_no_timeout+0x70>)
   27304:	f001 fc5e 	bl	28bc4 <assert_print>
   27308:	21c2      	movs	r1, #194	; 0xc2
   2730a:	e7e7      	b.n	272dc <z_unpend1_no_timeout+0x28>
   2730c:	2400      	movs	r4, #0
   2730e:	e7f2      	b.n	272f6 <z_unpend1_no_timeout+0x42>
	__asm__ volatile(
   27310:	f386 8811 	msr	BASEPRI, r6
   27314:	f3bf 8f6f 	isb	sy
}
   27318:	4620      	mov	r0, r4
   2731a:	bd70      	pop	{r4, r5, r6, pc}
   2731c:	2000b108 	.word	0x2000b108
   27320:	00030eb4 	.word	0x00030eb4
   27324:	00030da5 	.word	0x00030da5

00027328 <z_unpend_first_thread>:
{
   27328:	b570      	push	{r4, r5, r6, lr}
   2732a:	4605      	mov	r5, r0
	__asm__ volatile(
   2732c:	f04f 0320 	mov.w	r3, #32
   27330:	f3ef 8611 	mrs	r6, BASEPRI
   27334:	f383 8812 	msr	BASEPRI_MAX, r3
   27338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2733c:	4816      	ldr	r0, [pc, #88]	; (27398 <z_unpend_first_thread+0x70>)
   2733e:	f7fe fa73 	bl	25828 <z_spin_lock_valid>
   27342:	b940      	cbnz	r0, 27356 <z_unpend_first_thread+0x2e>
   27344:	4915      	ldr	r1, [pc, #84]	; (2739c <z_unpend_first_thread+0x74>)
   27346:	2294      	movs	r2, #148	; 0x94
   27348:	4815      	ldr	r0, [pc, #84]	; (273a0 <z_unpend_first_thread+0x78>)
   2734a:	f001 fc3b 	bl	28bc4 <assert_print>
   2734e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27350:	4812      	ldr	r0, [pc, #72]	; (2739c <z_unpend_first_thread+0x74>)
   27352:	f001 fc30 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27356:	4810      	ldr	r0, [pc, #64]	; (27398 <z_unpend_first_thread+0x70>)
   27358:	f7fe fa82 	bl	25860 <z_spin_lock_set_owner>
	return list->head == list;
   2735c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2735e:	42a5      	cmp	r5, r4
   27360:	d012      	beq.n	27388 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   27362:	b134      	cbz	r4, 27372 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   27364:	4620      	mov	r0, r4
   27366:	f7ff ff09 	bl	2717c <unpend_thread_no_timeout>
   2736a:	f104 0018 	add.w	r0, r4, #24
   2736e:	f000 fb8d 	bl	27a8c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27372:	4809      	ldr	r0, [pc, #36]	; (27398 <z_unpend_first_thread+0x70>)
   27374:	f7fe fa66 	bl	25844 <z_spin_unlock_valid>
   27378:	b940      	cbnz	r0, 2738c <z_unpend_first_thread+0x64>
   2737a:	4908      	ldr	r1, [pc, #32]	; (2739c <z_unpend_first_thread+0x74>)
   2737c:	22c2      	movs	r2, #194	; 0xc2
   2737e:	4808      	ldr	r0, [pc, #32]	; (273a0 <z_unpend_first_thread+0x78>)
   27380:	f001 fc20 	bl	28bc4 <assert_print>
   27384:	21c2      	movs	r1, #194	; 0xc2
   27386:	e7e3      	b.n	27350 <z_unpend_first_thread+0x28>
   27388:	2400      	movs	r4, #0
   2738a:	e7f2      	b.n	27372 <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   2738c:	f386 8811 	msr	BASEPRI, r6
   27390:	f3bf 8f6f 	isb	sy
}
   27394:	4620      	mov	r0, r4
   27396:	bd70      	pop	{r4, r5, r6, pc}
   27398:	2000b108 	.word	0x2000b108
   2739c:	00030eb4 	.word	0x00030eb4
   273a0:	00030da5 	.word	0x00030da5

000273a4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   273a4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   273a6:	4b04      	ldr	r3, [pc, #16]	; (273b8 <z_sched_init+0x14>)
   273a8:	4608      	mov	r0, r1
   273aa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   273ae:	e9c3 2208 	strd	r2, r2, [r3, #32]
   273b2:	f7ff baa9 	b.w	26908 <k_sched_time_slice_set>
   273b6:	bf00      	nop
   273b8:	2000b0c0 	.word	0x2000b0c0

000273bc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   273bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   273c2:	b14b      	cbz	r3, 273d8 <z_impl_k_yield+0x1c>
   273c4:	4935      	ldr	r1, [pc, #212]	; (2749c <z_impl_k_yield+0xe0>)
   273c6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   273ca:	4835      	ldr	r0, [pc, #212]	; (274a0 <z_impl_k_yield+0xe4>)
   273cc:	f001 fbfa 	bl	28bc4 <assert_print>
   273d0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   273d4:	4831      	ldr	r0, [pc, #196]	; (2749c <z_impl_k_yield+0xe0>)
   273d6:	e012      	b.n	273fe <z_impl_k_yield+0x42>
	__asm__ volatile(
   273d8:	f04f 0320 	mov.w	r3, #32
   273dc:	f3ef 8611 	mrs	r6, BASEPRI
   273e0:	f383 8812 	msr	BASEPRI_MAX, r3
   273e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273e8:	482e      	ldr	r0, [pc, #184]	; (274a4 <z_impl_k_yield+0xe8>)
   273ea:	f7fe fa1d 	bl	25828 <z_spin_lock_valid>
   273ee:	b940      	cbnz	r0, 27402 <z_impl_k_yield+0x46>
   273f0:	492d      	ldr	r1, [pc, #180]	; (274a8 <z_impl_k_yield+0xec>)
   273f2:	2294      	movs	r2, #148	; 0x94
   273f4:	482a      	ldr	r0, [pc, #168]	; (274a0 <z_impl_k_yield+0xe4>)
   273f6:	f001 fbe5 	bl	28bc4 <assert_print>
   273fa:	2194      	movs	r1, #148	; 0x94
   273fc:	482a      	ldr	r0, [pc, #168]	; (274a8 <z_impl_k_yield+0xec>)
   273fe:	f001 fbda 	bl	28bb6 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   27402:	4c2a      	ldr	r4, [pc, #168]	; (274ac <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   27404:	4827      	ldr	r0, [pc, #156]	; (274a4 <z_impl_k_yield+0xe8>)
   27406:	f7fe fa2b 	bl	25860 <z_spin_lock_set_owner>
   2740a:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   2740c:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27410:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27412:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27418:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2741a:	f7ff fc43 	bl	26ca4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   2741e:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   27420:	7b5a      	ldrb	r2, [r3, #13]
   27422:	f062 027f 	orn	r2, r2, #127	; 0x7f
   27426:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27428:	4a21      	ldr	r2, [pc, #132]	; (274b0 <z_impl_k_yield+0xf4>)
   2742a:	4293      	cmp	r3, r2
   2742c:	d106      	bne.n	2743c <z_impl_k_yield+0x80>
   2742e:	491b      	ldr	r1, [pc, #108]	; (2749c <z_impl_k_yield+0xe0>)
   27430:	22ba      	movs	r2, #186	; 0xba
   27432:	481b      	ldr	r0, [pc, #108]	; (274a0 <z_impl_k_yield+0xe4>)
   27434:	f001 fbc6 	bl	28bc4 <assert_print>
   27438:	21ba      	movs	r1, #186	; 0xba
   2743a:	e7cb      	b.n	273d4 <z_impl_k_yield+0x18>
	return list->head == list;
   2743c:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   2743e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27440:	42aa      	cmp	r2, r5
   27442:	bf08      	it	eq
   27444:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27446:	b922      	cbnz	r2, 27452 <z_impl_k_yield+0x96>
	node->prev = tail;
   27448:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   2744c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2744e:	6263      	str	r3, [r4, #36]	; 0x24
}
   27450:	e00c      	b.n	2746c <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   27452:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   27456:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2745a:	42b8      	cmp	r0, r7
   2745c:	d014      	beq.n	27488 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2745e:	4287      	cmp	r7, r0
   27460:	dd12      	ble.n	27488 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   27462:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   27464:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   27468:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2746a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2746c:	2001      	movs	r0, #1
   2746e:	f7ff f9d7 	bl	26820 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27472:	480c      	ldr	r0, [pc, #48]	; (274a4 <z_impl_k_yield+0xe8>)
   27474:	f7fe f9e6 	bl	25844 <z_spin_unlock_valid>
   27478:	b950      	cbnz	r0, 27490 <z_impl_k_yield+0xd4>
   2747a:	490b      	ldr	r1, [pc, #44]	; (274a8 <z_impl_k_yield+0xec>)
   2747c:	22e1      	movs	r2, #225	; 0xe1
   2747e:	4808      	ldr	r0, [pc, #32]	; (274a0 <z_impl_k_yield+0xe4>)
   27480:	f001 fba0 	bl	28bc4 <assert_print>
   27484:	21e1      	movs	r1, #225	; 0xe1
   27486:	e7b9      	b.n	273fc <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   27488:	428a      	cmp	r2, r1
   2748a:	d0dd      	beq.n	27448 <z_impl_k_yield+0x8c>
   2748c:	6812      	ldr	r2, [r2, #0]
   2748e:	e7da      	b.n	27446 <z_impl_k_yield+0x8a>
   27490:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27496:	f7e5 bc59 	b.w	cd4c <arch_swap>
   2749a:	bf00      	nop
   2749c:	000353f1 	.word	0x000353f1
   274a0:	00030da5 	.word	0x00030da5
   274a4:	2000b108 	.word	0x2000b108
   274a8:	00030eb4 	.word	0x00030eb4
   274ac:	2000b0c0 	.word	0x2000b0c0
   274b0:	2000a3f8 	.word	0x2000a3f8

000274b4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   274b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274b8:	4605      	mov	r5, r0
   274ba:	460e      	mov	r6, r1
   274bc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   274c0:	b14b      	cbz	r3, 274d6 <z_tick_sleep+0x22>
   274c2:	4936      	ldr	r1, [pc, #216]	; (2759c <z_tick_sleep+0xe8>)
   274c4:	f240 528c 	movw	r2, #1420	; 0x58c
   274c8:	4835      	ldr	r0, [pc, #212]	; (275a0 <z_tick_sleep+0xec>)
   274ca:	f001 fb7b 	bl	28bc4 <assert_print>
   274ce:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   274d2:	4832      	ldr	r0, [pc, #200]	; (2759c <z_tick_sleep+0xe8>)
   274d4:	e020      	b.n	27518 <z_tick_sleep+0x64>
	if (ticks == 0) {
   274d6:	ea50 0301 	orrs.w	r3, r0, r1
   274da:	d103      	bne.n	274e4 <z_tick_sleep+0x30>
	z_impl_k_yield();
   274dc:	f7ff ff6e 	bl	273bc <z_impl_k_yield>
		return 0;
   274e0:	2000      	movs	r0, #0
   274e2:	e058      	b.n	27596 <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   274e4:	1c82      	adds	r2, r0, #2
   274e6:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   274ea:	db17      	blt.n	2751c <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   274ec:	f008 f837 	bl	2f55e <sys_clock_tick_get_32>
   274f0:	182c      	adds	r4, r5, r0
   274f2:	f04f 0320 	mov.w	r3, #32
   274f6:	f3ef 8811 	mrs	r8, BASEPRI
   274fa:	f383 8812 	msr	BASEPRI_MAX, r3
   274fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27502:	4828      	ldr	r0, [pc, #160]	; (275a4 <z_tick_sleep+0xf0>)
   27504:	f7fe f990 	bl	25828 <z_spin_lock_valid>
   27508:	b960      	cbnz	r0, 27524 <z_tick_sleep+0x70>
   2750a:	4927      	ldr	r1, [pc, #156]	; (275a8 <z_tick_sleep+0xf4>)
   2750c:	2294      	movs	r2, #148	; 0x94
   2750e:	4824      	ldr	r0, [pc, #144]	; (275a0 <z_tick_sleep+0xec>)
   27510:	f001 fb58 	bl	28bc4 <assert_print>
   27514:	2194      	movs	r1, #148	; 0x94
   27516:	4824      	ldr	r0, [pc, #144]	; (275a8 <z_tick_sleep+0xf4>)
   27518:	f001 fb4d 	bl	28bb6 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2751c:	f06f 0401 	mvn.w	r4, #1
   27520:	1a24      	subs	r4, r4, r0
   27522:	e7e6      	b.n	274f2 <z_tick_sleep+0x3e>
	pending_current = _current;
   27524:	4f21      	ldr	r7, [pc, #132]	; (275ac <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   27526:	481f      	ldr	r0, [pc, #124]	; (275a4 <z_tick_sleep+0xf0>)
   27528:	f7fe f99a 	bl	25860 <z_spin_lock_set_owner>
   2752c:	68b8      	ldr	r0, [r7, #8]
   2752e:	4b20      	ldr	r3, [pc, #128]	; (275b0 <z_tick_sleep+0xfc>)
   27530:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27532:	f7ff fc89 	bl	26e48 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27536:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27538:	462a      	mov	r2, r5
   2753a:	4633      	mov	r3, r6
   2753c:	3018      	adds	r0, #24
   2753e:	491d      	ldr	r1, [pc, #116]	; (275b4 <z_tick_sleep+0x100>)
   27540:	f000 f9f8 	bl	27934 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27544:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27546:	4817      	ldr	r0, [pc, #92]	; (275a4 <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27548:	7b53      	ldrb	r3, [r2, #13]
   2754a:	f043 0310 	orr.w	r3, r3, #16
   2754e:	7353      	strb	r3, [r2, #13]
   27550:	f7fe f978 	bl	25844 <z_spin_unlock_valid>
   27554:	b930      	cbnz	r0, 27564 <z_tick_sleep+0xb0>
   27556:	4914      	ldr	r1, [pc, #80]	; (275a8 <z_tick_sleep+0xf4>)
   27558:	22e1      	movs	r2, #225	; 0xe1
   2755a:	4811      	ldr	r0, [pc, #68]	; (275a0 <z_tick_sleep+0xec>)
   2755c:	f001 fb32 	bl	28bc4 <assert_print>
   27560:	21e1      	movs	r1, #225	; 0xe1
   27562:	e7d8      	b.n	27516 <z_tick_sleep+0x62>
   27564:	4640      	mov	r0, r8
   27566:	f7e5 fbf1 	bl	cd4c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2756a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2756c:	7b5b      	ldrb	r3, [r3, #13]
   2756e:	06db      	lsls	r3, r3, #27
   27570:	d508      	bpl.n	27584 <z_tick_sleep+0xd0>
   27572:	490a      	ldr	r1, [pc, #40]	; (2759c <z_tick_sleep+0xe8>)
   27574:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
   27578:	4809      	ldr	r0, [pc, #36]	; (275a0 <z_tick_sleep+0xec>)
   2757a:	f001 fb23 	bl	28bc4 <assert_print>
   2757e:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   27582:	e7a6      	b.n	274d2 <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27584:	f007 ffeb 	bl	2f55e <sys_clock_tick_get_32>
   27588:	1a20      	subs	r0, r4, r0
   2758a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2758e:	2801      	cmp	r0, #1
   27590:	f173 0300 	sbcs.w	r3, r3, #0
   27594:	dba4      	blt.n	274e0 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   27596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2759a:	bf00      	nop
   2759c:	000353f1 	.word	0x000353f1
   275a0:	00030da5 	.word	0x00030da5
   275a4:	2000b108 	.word	0x2000b108
   275a8:	00030eb4 	.word	0x00030eb4
   275ac:	2000b0c0 	.word	0x2000b0c0
   275b0:	2000b0fc 	.word	0x2000b0fc
   275b4:	00027229 	.word	0x00027229

000275b8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   275b8:	b508      	push	{r3, lr}
   275ba:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   275be:	b153      	cbz	r3, 275d6 <z_impl_k_sleep+0x1e>
   275c0:	4910      	ldr	r1, [pc, #64]	; (27604 <z_impl_k_sleep+0x4c>)
   275c2:	4811      	ldr	r0, [pc, #68]	; (27608 <z_impl_k_sleep+0x50>)
   275c4:	f240 52b7 	movw	r2, #1463	; 0x5b7
   275c8:	f001 fafc 	bl	28bc4 <assert_print>
   275cc:	f240 51b7 	movw	r1, #1463	; 0x5b7
   275d0:	480c      	ldr	r0, [pc, #48]	; (27604 <z_impl_k_sleep+0x4c>)
   275d2:	f001 faf0 	bl	28bb6 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   275d6:	f1b1 3fff 	cmp.w	r1, #4294967295
   275da:	bf08      	it	eq
   275dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   275e0:	d106      	bne.n	275f0 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   275e2:	4b0a      	ldr	r3, [pc, #40]	; (2760c <z_impl_k_sleep+0x54>)
   275e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   275e6:	f7ff fd73 	bl	270d0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   275ea:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   275ee:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   275f0:	f7ff ff60 	bl	274b4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   275f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   275f8:	fb80 0303 	smull	r0, r3, r0, r3
   275fc:	0bc0      	lsrs	r0, r0, #15
   275fe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   27602:	e7f4      	b.n	275ee <z_impl_k_sleep+0x36>
   27604:	000353f1 	.word	0x000353f1
   27608:	00030da5 	.word	0x00030da5
   2760c:	2000b0c0 	.word	0x2000b0c0

00027610 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27610:	4b01      	ldr	r3, [pc, #4]	; (27618 <z_impl_z_current_get+0x8>)
   27612:	6898      	ldr	r0, [r3, #8]
   27614:	4770      	bx	lr
   27616:	bf00      	nop
   27618:	2000b0c0 	.word	0x2000b0c0

0002761c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2761c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27620:	4604      	mov	r4, r0
   27622:	f04f 0320 	mov.w	r3, #32
   27626:	f3ef 8611 	mrs	r6, BASEPRI
   2762a:	f383 8812 	msr	BASEPRI_MAX, r3
   2762e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27632:	4845      	ldr	r0, [pc, #276]	; (27748 <z_thread_abort+0x12c>)
   27634:	f7fe f8f8 	bl	25828 <z_spin_lock_valid>
   27638:	b940      	cbnz	r0, 2764c <z_thread_abort+0x30>
   2763a:	4944      	ldr	r1, [pc, #272]	; (2774c <z_thread_abort+0x130>)
   2763c:	2294      	movs	r2, #148	; 0x94
   2763e:	4844      	ldr	r0, [pc, #272]	; (27750 <z_thread_abort+0x134>)
   27640:	f001 fac0 	bl	28bc4 <assert_print>
   27644:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27646:	4841      	ldr	r0, [pc, #260]	; (2774c <z_thread_abort+0x130>)
   27648:	f001 fab5 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2764c:	483e      	ldr	r0, [pc, #248]	; (27748 <z_thread_abort+0x12c>)
   2764e:	f7fe f907 	bl	25860 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   27652:	7b23      	ldrb	r3, [r4, #12]
   27654:	07d9      	lsls	r1, r3, #31
   27656:	d518      	bpl.n	2768a <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27658:	483b      	ldr	r0, [pc, #236]	; (27748 <z_thread_abort+0x12c>)
   2765a:	f7fe f8f3 	bl	25844 <z_spin_unlock_valid>
   2765e:	b930      	cbnz	r0, 2766e <z_thread_abort+0x52>
   27660:	493a      	ldr	r1, [pc, #232]	; (2774c <z_thread_abort+0x130>)
   27662:	22c2      	movs	r2, #194	; 0xc2
   27664:	483a      	ldr	r0, [pc, #232]	; (27750 <z_thread_abort+0x134>)
   27666:	f001 faad 	bl	28bc4 <assert_print>
   2766a:	21c2      	movs	r1, #194	; 0xc2
   2766c:	e7eb      	b.n	27646 <z_thread_abort+0x2a>
	__asm__ volatile(
   2766e:	f386 8811 	msr	BASEPRI, r6
   27672:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   27676:	4937      	ldr	r1, [pc, #220]	; (27754 <z_thread_abort+0x138>)
   27678:	f240 62c3 	movw	r2, #1731	; 0x6c3
   2767c:	4834      	ldr	r0, [pc, #208]	; (27750 <z_thread_abort+0x134>)
   2767e:	f001 faa1 	bl	28bc4 <assert_print>
   27682:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   27686:	4833      	ldr	r0, [pc, #204]	; (27754 <z_thread_abort+0x138>)
   27688:	e7de      	b.n	27648 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2768a:	7b63      	ldrb	r3, [r4, #13]
   2768c:	071a      	lsls	r2, r3, #28
   2768e:	d50a      	bpl.n	276a6 <z_thread_abort+0x8a>
   27690:	482d      	ldr	r0, [pc, #180]	; (27748 <z_thread_abort+0x12c>)
   27692:	f7fe f8d7 	bl	25844 <z_spin_unlock_valid>
   27696:	2800      	cmp	r0, #0
   27698:	d0e2      	beq.n	27660 <z_thread_abort+0x44>
   2769a:	f386 8811 	msr	BASEPRI, r6
   2769e:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   276a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   276a6:	f023 0220 	bic.w	r2, r3, #32
   276aa:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   276ae:	09d2      	lsrs	r2, r2, #7
   276b0:	d127      	bne.n	27702 <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   276b2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   276b4:	68a3      	ldr	r3, [r4, #8]
   276b6:	b113      	cbz	r3, 276be <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   276b8:	4620      	mov	r0, r4
   276ba:	f7ff fd5f 	bl	2717c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   276be:	f104 0018 	add.w	r0, r4, #24
   276c2:	f000 f9e3 	bl	27a8c <z_abort_timeout>
   276c6:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   276ca:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   276ce:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276d0:	42bd      	cmp	r5, r7
   276d2:	d000      	beq.n	276d6 <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   276d4:	b9fd      	cbnz	r5, 27716 <z_thread_abort+0xfa>
		update_cache(1);
   276d6:	2001      	movs	r0, #1
   276d8:	f7ff f8a2 	bl	26820 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   276dc:	4b1e      	ldr	r3, [pc, #120]	; (27758 <z_thread_abort+0x13c>)
   276de:	689b      	ldr	r3, [r3, #8]
   276e0:	42a3      	cmp	r3, r4
   276e2:	d1d5      	bne.n	27690 <z_thread_abort+0x74>
   276e4:	f3ef 8305 	mrs	r3, IPSR
   276e8:	2b00      	cmp	r3, #0
   276ea:	d1d1      	bne.n	27690 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276ec:	4816      	ldr	r0, [pc, #88]	; (27748 <z_thread_abort+0x12c>)
   276ee:	f7fe f8a9 	bl	25844 <z_spin_unlock_valid>
   276f2:	b9e8      	cbnz	r0, 27730 <z_thread_abort+0x114>
   276f4:	4915      	ldr	r1, [pc, #84]	; (2774c <z_thread_abort+0x130>)
   276f6:	22e1      	movs	r2, #225	; 0xe1
   276f8:	4815      	ldr	r0, [pc, #84]	; (27750 <z_thread_abort+0x134>)
   276fa:	f001 fa63 	bl	28bc4 <assert_print>
   276fe:	21e1      	movs	r1, #225	; 0xe1
   27700:	e7a1      	b.n	27646 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27702:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27706:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2770a:	4621      	mov	r1, r4
   2770c:	4813      	ldr	r0, [pc, #76]	; (2775c <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2770e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27710:	f7ff fac8 	bl	26ca4 <z_priq_dumb_remove>
}
   27714:	e7ce      	b.n	276b4 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   27716:	4628      	mov	r0, r5
   27718:	f7ff fd30 	bl	2717c <unpend_thread_no_timeout>
   2771c:	f105 0018 	add.w	r0, r5, #24
   27720:	f000 f9b4 	bl	27a8c <z_abort_timeout>
		ready_thread(thread);
   27724:	4628      	mov	r0, r5
   27726:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2772a:	f7ff f8a5 	bl	26878 <ready_thread>
   2772e:	e7ce      	b.n	276ce <z_thread_abort+0xb2>
   27730:	4630      	mov	r0, r6
   27732:	f7e5 fb0b 	bl	cd4c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27736:	4907      	ldr	r1, [pc, #28]	; (27754 <z_thread_abort+0x138>)
   27738:	f240 62f2 	movw	r2, #1778	; 0x6f2
   2773c:	4804      	ldr	r0, [pc, #16]	; (27750 <z_thread_abort+0x134>)
   2773e:	f001 fa41 	bl	28bc4 <assert_print>
   27742:	f240 61f2 	movw	r1, #1778	; 0x6f2
   27746:	e79e      	b.n	27686 <z_thread_abort+0x6a>
   27748:	2000b108 	.word	0x2000b108
   2774c:	00030eb4 	.word	0x00030eb4
   27750:	00030da5 	.word	0x00030da5
   27754:	000353f1 	.word	0x000353f1
   27758:	2000b0c0 	.word	0x2000b0c0
   2775c:	2000b0e0 	.word	0x2000b0e0

00027760 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27764:	4606      	mov	r6, r0
   27766:	4688      	mov	r8, r1
   27768:	4617      	mov	r7, r2
	__asm__ volatile(
   2776a:	f04f 0320 	mov.w	r3, #32
   2776e:	f3ef 8911 	mrs	r9, BASEPRI
   27772:	f383 8812 	msr	BASEPRI_MAX, r3
   27776:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2777a:	481c      	ldr	r0, [pc, #112]	; (277ec <z_sched_wake+0x8c>)
   2777c:	f7fe f854 	bl	25828 <z_spin_lock_valid>
   27780:	4605      	mov	r5, r0
   27782:	b940      	cbnz	r0, 27796 <z_sched_wake+0x36>
   27784:	491a      	ldr	r1, [pc, #104]	; (277f0 <z_sched_wake+0x90>)
   27786:	2294      	movs	r2, #148	; 0x94
   27788:	481a      	ldr	r0, [pc, #104]	; (277f4 <z_sched_wake+0x94>)
   2778a:	f001 fa1b 	bl	28bc4 <assert_print>
   2778e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27790:	4817      	ldr	r0, [pc, #92]	; (277f0 <z_sched_wake+0x90>)
   27792:	f001 fa10 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27796:	4815      	ldr	r0, [pc, #84]	; (277ec <z_sched_wake+0x8c>)
   27798:	f7fe f862 	bl	25860 <z_spin_lock_set_owner>
	return list->head == list;
   2779c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2779e:	42a6      	cmp	r6, r4
   277a0:	d018      	beq.n	277d4 <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   277a2:	b1cc      	cbz	r4, 277d8 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   277a4:	4620      	mov	r0, r4
   277a6:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   277aa:	6167      	str	r7, [r4, #20]
   277ac:	f7ff fce6 	bl	2717c <unpend_thread_no_timeout>
   277b0:	f104 0018 	add.w	r0, r4, #24
   277b4:	f000 f96a 	bl	27a8c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   277b8:	4620      	mov	r0, r4
   277ba:	f7ff f85d 	bl	26878 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   277be:	480b      	ldr	r0, [pc, #44]	; (277ec <z_sched_wake+0x8c>)
   277c0:	f7fe f840 	bl	25844 <z_spin_unlock_valid>
   277c4:	b950      	cbnz	r0, 277dc <z_sched_wake+0x7c>
   277c6:	490a      	ldr	r1, [pc, #40]	; (277f0 <z_sched_wake+0x90>)
   277c8:	22c2      	movs	r2, #194	; 0xc2
   277ca:	480a      	ldr	r0, [pc, #40]	; (277f4 <z_sched_wake+0x94>)
   277cc:	f001 f9fa 	bl	28bc4 <assert_print>
   277d0:	21c2      	movs	r1, #194	; 0xc2
   277d2:	e7dd      	b.n	27790 <z_sched_wake+0x30>
	bool ret = false;
   277d4:	2500      	movs	r5, #0
   277d6:	e7f2      	b.n	277be <z_sched_wake+0x5e>
   277d8:	4625      	mov	r5, r4
   277da:	e7f0      	b.n	277be <z_sched_wake+0x5e>
	__asm__ volatile(
   277dc:	f389 8811 	msr	BASEPRI, r9
   277e0:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   277e4:	4628      	mov	r0, r5
   277e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   277ea:	bf00      	nop
   277ec:	2000b108 	.word	0x2000b108
   277f0:	00030eb4 	.word	0x00030eb4
   277f4:	00030da5 	.word	0x00030da5

000277f8 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   277f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   277fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   277fe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27800:	e9cd 6700 	strd	r6, r7, [sp]
   27804:	f7ff fb8e 	bl	26f24 <z_pend_curr>

	if (data != NULL) {
   27808:	b11c      	cbz	r4, 27812 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2780a:	4b03      	ldr	r3, [pc, #12]	; (27818 <z_sched_wait+0x20>)
   2780c:	689b      	ldr	r3, [r3, #8]
   2780e:	695b      	ldr	r3, [r3, #20]
   27810:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27812:	b002      	add	sp, #8
   27814:	bdd0      	pop	{r4, r6, r7, pc}
   27816:	bf00      	nop
   27818:	2000b0c0 	.word	0x2000b0c0

0002781c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2781c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2781e:	4806      	ldr	r0, [pc, #24]	; (27838 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   27820:	4a06      	ldr	r2, [pc, #24]	; (2783c <z_data_copy+0x20>)
   27822:	4907      	ldr	r1, [pc, #28]	; (27840 <z_data_copy+0x24>)
   27824:	1a12      	subs	r2, r2, r0
   27826:	f007 fd84 	bl	2f332 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2782a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2782e:	4a05      	ldr	r2, [pc, #20]	; (27844 <z_data_copy+0x28>)
   27830:	4905      	ldr	r1, [pc, #20]	; (27848 <z_data_copy+0x2c>)
   27832:	4806      	ldr	r0, [pc, #24]	; (2784c <z_data_copy+0x30>)
   27834:	f007 bd7d 	b.w	2f332 <z_early_memcpy>
   27838:	20008000 	.word	0x20008000
   2783c:	200090f8 	.word	0x200090f8
   27840:	000354d8 	.word	0x000354d8
   27844:	00000000 	.word	0x00000000
   27848:	000354d8 	.word	0x000354d8
   2784c:	20008000 	.word	0x20008000

00027850 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27850:	4b03      	ldr	r3, [pc, #12]	; (27860 <elapsed+0x10>)
   27852:	681b      	ldr	r3, [r3, #0]
   27854:	b90b      	cbnz	r3, 2785a <elapsed+0xa>
   27856:	f7fa bcb1 	b.w	221bc <sys_clock_elapsed>
}
   2785a:	2000      	movs	r0, #0
   2785c:	4770      	bx	lr
   2785e:	bf00      	nop
   27860:	2000b10c 	.word	0x2000b10c

00027864 <next_timeout>:

static int32_t next_timeout(void)
{
   27864:	b510      	push	{r4, lr}
	return list->head == list;
   27866:	4b11      	ldr	r3, [pc, #68]	; (278ac <next_timeout+0x48>)
   27868:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2786a:	429c      	cmp	r4, r3
   2786c:	d10a      	bne.n	27884 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2786e:	f7ff ffef 	bl	27850 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   27872:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27876:	4b0e      	ldr	r3, [pc, #56]	; (278b0 <next_timeout+0x4c>)
   27878:	691b      	ldr	r3, [r3, #16]
   2787a:	b113      	cbz	r3, 27882 <next_timeout+0x1e>
   2787c:	4298      	cmp	r0, r3
   2787e:	bfa8      	it	ge
   27880:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   27882:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   27884:	f7ff ffe4 	bl	27850 <elapsed>
	if ((to == NULL) ||
   27888:	2c00      	cmp	r4, #0
   2788a:	d0f2      	beq.n	27872 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2788c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   27890:	1a1b      	subs	r3, r3, r0
   27892:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   27896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2789a:	f172 0100 	sbcs.w	r1, r2, #0
   2789e:	dae8      	bge.n	27872 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   278a0:	2a00      	cmp	r2, #0
   278a2:	bfac      	ite	ge
   278a4:	4618      	movge	r0, r3
   278a6:	2000      	movlt	r0, #0
   278a8:	e7e5      	b.n	27876 <next_timeout+0x12>
   278aa:	bf00      	nop
   278ac:	20008bb4 	.word	0x20008bb4
   278b0:	2000b0c0 	.word	0x2000b0c0

000278b4 <remove_timeout>:
{
   278b4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   278b6:	b170      	cbz	r0, 278d6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   278b8:	4b0b      	ldr	r3, [pc, #44]	; (278e8 <remove_timeout+0x34>)
   278ba:	685b      	ldr	r3, [r3, #4]
   278bc:	4298      	cmp	r0, r3
   278be:	d00a      	beq.n	278d6 <remove_timeout+0x22>
   278c0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   278c2:	b143      	cbz	r3, 278d6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   278c4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   278c8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   278cc:	1912      	adds	r2, r2, r4
   278ce:	eb41 0105 	adc.w	r1, r1, r5
   278d2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   278d6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   278da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   278dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   278de:	2300      	movs	r3, #0
	node->prev = NULL;
   278e0:	e9c0 3300 	strd	r3, r3, [r0]
}
   278e4:	bd30      	pop	{r4, r5, pc}
   278e6:	bf00      	nop
   278e8:	20008bb4 	.word	0x20008bb4

000278ec <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   278ec:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   278ee:	6804      	ldr	r4, [r0, #0]
   278f0:	b1d4      	cbz	r4, 27928 <timeout_rem+0x3c>
	return (node == list->tail) ? NULL : node->next;
   278f2:	2400      	movs	r4, #0
	return list->head == list;
   278f4:	4a0e      	ldr	r2, [pc, #56]	; (27930 <timeout_rem+0x44>)
	return (node == list->tail) ? NULL : node->next;
   278f6:	4625      	mov	r5, r4
	return list->head == list;
   278f8:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   278fa:	6851      	ldr	r1, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278fc:	4293      	cmp	r3, r2
   278fe:	bf08      	it	eq
   27900:	2300      	moveq	r3, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   27902:	b933      	cbnz	r3, 27912 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   27904:	f7ff ffa4 	bl	27850 <elapsed>
   27908:	4603      	mov	r3, r0
   2790a:	1a20      	subs	r0, r4, r0
   2790c:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   27910:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   27912:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   27916:	18a4      	adds	r4, r4, r2
   27918:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   2791c:	4283      	cmp	r3, r0
   2791e:	d0f1      	beq.n	27904 <timeout_rem+0x18>
	return (node == list->tail) ? NULL : node->next;
   27920:	4299      	cmp	r1, r3
   27922:	d0ef      	beq.n	27904 <timeout_rem+0x18>
   27924:	681b      	ldr	r3, [r3, #0]
   27926:	e7ec      	b.n	27902 <timeout_rem+0x16>
		return 0;
   27928:	4620      	mov	r0, r4
   2792a:	4621      	mov	r1, r4
   2792c:	e7f0      	b.n	27910 <timeout_rem+0x24>
   2792e:	bf00      	nop
   27930:	20008bb4 	.word	0x20008bb4

00027934 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27934:	f1b3 3fff 	cmp.w	r3, #4294967295
   27938:	bf08      	it	eq
   2793a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2793e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27942:	4604      	mov	r4, r0
   27944:	4692      	mov	sl, r2
   27946:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27948:	f000 8090 	beq.w	27a6c <z_add_timeout+0x138>
	return node->next != NULL;
   2794c:	6806      	ldr	r6, [r0, #0]
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2794e:	b146      	cbz	r6, 27962 <z_add_timeout+0x2e>
   27950:	4947      	ldr	r1, [pc, #284]	; (27a70 <z_add_timeout+0x13c>)
   27952:	4848      	ldr	r0, [pc, #288]	; (27a74 <z_add_timeout+0x140>)
   27954:	2263      	movs	r2, #99	; 0x63
   27956:	f001 f935 	bl	28bc4 <assert_print>
   2795a:	2163      	movs	r1, #99	; 0x63
   2795c:	4844      	ldr	r0, [pc, #272]	; (27a70 <z_add_timeout+0x13c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2795e:	f001 f92a 	bl	28bb6 <assert_post_action>
	to->fn = fn;
   27962:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   27964:	f04f 0320 	mov.w	r3, #32
   27968:	f3ef 8711 	mrs	r7, BASEPRI
   2796c:	f383 8812 	msr	BASEPRI_MAX, r3
   27970:	f3bf 8f6f 	isb	sy
   27974:	4840      	ldr	r0, [pc, #256]	; (27a78 <z_add_timeout+0x144>)
   27976:	f7fd ff57 	bl	25828 <z_spin_lock_valid>
   2797a:	b938      	cbnz	r0, 2798c <z_add_timeout+0x58>
   2797c:	493f      	ldr	r1, [pc, #252]	; (27a7c <z_add_timeout+0x148>)
   2797e:	2294      	movs	r2, #148	; 0x94
   27980:	483c      	ldr	r0, [pc, #240]	; (27a74 <z_add_timeout+0x140>)
   27982:	f001 f91f 	bl	28bc4 <assert_print>
   27986:	2194      	movs	r1, #148	; 0x94
   27988:	483c      	ldr	r0, [pc, #240]	; (27a7c <z_add_timeout+0x148>)
   2798a:	e7e8      	b.n	2795e <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   2798c:	483a      	ldr	r0, [pc, #232]	; (27a78 <z_add_timeout+0x144>)
   2798e:	f7fd ff67 	bl	25860 <z_spin_lock_set_owner>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   27992:	f1ba 3fff 	cmp.w	sl, #4294967295
   27996:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2799a:	da23      	bge.n	279e4 <z_add_timeout+0xb0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2799c:	f06f 0301 	mvn.w	r3, #1
   279a0:	4937      	ldr	r1, [pc, #220]	; (27a80 <z_add_timeout+0x14c>)
   279a2:	e9d1 2000 	ldrd	r2, r0, [r1]
   279a6:	1a9b      	subs	r3, r3, r2
   279a8:	f04f 32ff 	mov.w	r2, #4294967295
   279ac:	eb62 0000 	sbc.w	r0, r2, r0
   279b0:	ebb3 030a 	subs.w	r3, r3, sl
   279b4:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   279b8:	2b01      	cmp	r3, #1
   279ba:	f170 0200 	sbcs.w	r2, r0, #0
   279be:	da01      	bge.n	279c4 <z_add_timeout+0x90>
   279c0:	2301      	movs	r3, #1
   279c2:	4630      	mov	r0, r6
   279c4:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   279c8:	4b2e      	ldr	r3, [pc, #184]	; (27a84 <z_add_timeout+0x150>)
   279ca:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   279cc:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   279d0:	429a      	cmp	r2, r3
   279d2:	bf18      	it	ne
   279d4:	4616      	movne	r6, r2
		for (t = first(); t != NULL; t = next(t)) {
   279d6:	b986      	cbnz	r6, 279fa <z_add_timeout+0xc6>
	node->prev = tail;
   279d8:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   279dc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   279e0:	605c      	str	r4, [r3, #4]
}
   279e2:	e01c      	b.n	27a1e <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   279e4:	f7ff ff34 	bl	27850 <elapsed>
   279e8:	f11a 0801 	adds.w	r8, sl, #1
   279ec:	f145 0500 	adc.w	r5, r5, #0
   279f0:	eb18 0300 	adds.w	r3, r8, r0
   279f4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   279f8:	e7e4      	b.n	279c4 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   279fa:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   279fe:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   27a02:	428a      	cmp	r2, r1
   27a04:	eb70 0e05 	sbcs.w	lr, r0, r5
   27a08:	da23      	bge.n	27a52 <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   27a0a:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   27a0c:	6872      	ldr	r2, [r6, #4]
   27a0e:	eb65 0500 	sbc.w	r5, r5, r0
   27a12:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   27a16:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   27a1a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27a1c:	6074      	str	r4, [r6, #4]
	return list->head == list;
   27a1e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27a20:	429a      	cmp	r2, r3
   27a22:	d00b      	beq.n	27a3c <z_add_timeout+0x108>
		if (to == first()) {
   27a24:	4294      	cmp	r4, r2
   27a26:	d109      	bne.n	27a3c <z_add_timeout+0x108>
			int32_t next_time = next_timeout();
   27a28:	f7ff ff1c 	bl	27864 <next_timeout>
			if (next_time == 0 ||
   27a2c:	b118      	cbz	r0, 27a36 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   27a2e:	4b16      	ldr	r3, [pc, #88]	; (27a88 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   27a30:	691b      	ldr	r3, [r3, #16]
   27a32:	4283      	cmp	r3, r0
   27a34:	d002      	beq.n	27a3c <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   27a36:	2100      	movs	r1, #0
   27a38:	f7fa fb8e 	bl	22158 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a3c:	480e      	ldr	r0, [pc, #56]	; (27a78 <z_add_timeout+0x144>)
   27a3e:	f7fd ff01 	bl	25844 <z_spin_unlock_valid>
   27a42:	b978      	cbnz	r0, 27a64 <z_add_timeout+0x130>
   27a44:	490d      	ldr	r1, [pc, #52]	; (27a7c <z_add_timeout+0x148>)
   27a46:	22c2      	movs	r2, #194	; 0xc2
   27a48:	480a      	ldr	r0, [pc, #40]	; (27a74 <z_add_timeout+0x140>)
   27a4a:	f001 f8bb 	bl	28bc4 <assert_print>
   27a4e:	21c2      	movs	r1, #194	; 0xc2
   27a50:	e79a      	b.n	27988 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   27a52:	1a52      	subs	r2, r2, r1
   27a54:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   27a58:	4566      	cmp	r6, ip
   27a5a:	e9c4 2004 	strd	r2, r0, [r4, #16]
   27a5e:	d0bb      	beq.n	279d8 <z_add_timeout+0xa4>
   27a60:	6836      	ldr	r6, [r6, #0]
   27a62:	e7b8      	b.n	279d6 <z_add_timeout+0xa2>
	__asm__ volatile(
   27a64:	f387 8811 	msr	BASEPRI, r7
   27a68:	f3bf 8f6f 	isb	sy
}
   27a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27a70:	0003543e 	.word	0x0003543e
   27a74:	00030da5 	.word	0x00030da5
   27a78:	2000b110 	.word	0x2000b110
   27a7c:	00030eb4 	.word	0x00030eb4
   27a80:	2000a5b0 	.word	0x2000a5b0
   27a84:	20008bb4 	.word	0x20008bb4
   27a88:	2000b0c0 	.word	0x2000b0c0

00027a8c <z_abort_timeout>:
{
   27a8c:	b538      	push	{r3, r4, r5, lr}
   27a8e:	4604      	mov	r4, r0
	__asm__ volatile(
   27a90:	f04f 0320 	mov.w	r3, #32
   27a94:	f3ef 8511 	mrs	r5, BASEPRI
   27a98:	f383 8812 	msr	BASEPRI_MAX, r3
   27a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27aa0:	4814      	ldr	r0, [pc, #80]	; (27af4 <z_abort_timeout+0x68>)
   27aa2:	f7fd fec1 	bl	25828 <z_spin_lock_valid>
   27aa6:	b940      	cbnz	r0, 27aba <z_abort_timeout+0x2e>
   27aa8:	4913      	ldr	r1, [pc, #76]	; (27af8 <z_abort_timeout+0x6c>)
   27aaa:	2294      	movs	r2, #148	; 0x94
   27aac:	4813      	ldr	r0, [pc, #76]	; (27afc <z_abort_timeout+0x70>)
   27aae:	f001 f889 	bl	28bc4 <assert_print>
   27ab2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ab4:	4810      	ldr	r0, [pc, #64]	; (27af8 <z_abort_timeout+0x6c>)
   27ab6:	f001 f87e 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27aba:	480e      	ldr	r0, [pc, #56]	; (27af4 <z_abort_timeout+0x68>)
   27abc:	f7fd fed0 	bl	25860 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   27ac0:	6823      	ldr	r3, [r4, #0]
   27ac2:	b173      	cbz	r3, 27ae2 <z_abort_timeout+0x56>
			remove_timeout(to);
   27ac4:	4620      	mov	r0, r4
   27ac6:	f7ff fef5 	bl	278b4 <remove_timeout>
			ret = 0;
   27aca:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27acc:	4809      	ldr	r0, [pc, #36]	; (27af4 <z_abort_timeout+0x68>)
   27ace:	f7fd feb9 	bl	25844 <z_spin_unlock_valid>
   27ad2:	b948      	cbnz	r0, 27ae8 <z_abort_timeout+0x5c>
   27ad4:	4908      	ldr	r1, [pc, #32]	; (27af8 <z_abort_timeout+0x6c>)
   27ad6:	22c2      	movs	r2, #194	; 0xc2
   27ad8:	4808      	ldr	r0, [pc, #32]	; (27afc <z_abort_timeout+0x70>)
   27ada:	f001 f873 	bl	28bc4 <assert_print>
   27ade:	21c2      	movs	r1, #194	; 0xc2
   27ae0:	e7e8      	b.n	27ab4 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   27ae2:	f06f 0415 	mvn.w	r4, #21
   27ae6:	e7f1      	b.n	27acc <z_abort_timeout+0x40>
	__asm__ volatile(
   27ae8:	f385 8811 	msr	BASEPRI, r5
   27aec:	f3bf 8f6f 	isb	sy
}
   27af0:	4620      	mov	r0, r4
   27af2:	bd38      	pop	{r3, r4, r5, pc}
   27af4:	2000b110 	.word	0x2000b110
   27af8:	00030eb4 	.word	0x00030eb4
   27afc:	00030da5 	.word	0x00030da5

00027b00 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   27b00:	b570      	push	{r4, r5, r6, lr}
   27b02:	4604      	mov	r4, r0
	__asm__ volatile(
   27b04:	f04f 0320 	mov.w	r3, #32
   27b08:	f3ef 8611 	mrs	r6, BASEPRI
   27b0c:	f383 8812 	msr	BASEPRI_MAX, r3
   27b10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b14:	4813      	ldr	r0, [pc, #76]	; (27b64 <z_timeout_remaining+0x64>)
   27b16:	f7fd fe87 	bl	25828 <z_spin_lock_valid>
   27b1a:	b940      	cbnz	r0, 27b2e <z_timeout_remaining+0x2e>
   27b1c:	4912      	ldr	r1, [pc, #72]	; (27b68 <z_timeout_remaining+0x68>)
   27b1e:	2294      	movs	r2, #148	; 0x94
   27b20:	4812      	ldr	r0, [pc, #72]	; (27b6c <z_timeout_remaining+0x6c>)
   27b22:	f001 f84f 	bl	28bc4 <assert_print>
   27b26:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b28:	480f      	ldr	r0, [pc, #60]	; (27b68 <z_timeout_remaining+0x68>)
   27b2a:	f001 f844 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27b2e:	480d      	ldr	r0, [pc, #52]	; (27b64 <z_timeout_remaining+0x64>)
   27b30:	f7fd fe96 	bl	25860 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   27b34:	4620      	mov	r0, r4
   27b36:	f7ff fed9 	bl	278ec <timeout_rem>
   27b3a:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b3c:	4809      	ldr	r0, [pc, #36]	; (27b64 <z_timeout_remaining+0x64>)
   27b3e:	460c      	mov	r4, r1
   27b40:	f7fd fe80 	bl	25844 <z_spin_unlock_valid>
   27b44:	b930      	cbnz	r0, 27b54 <z_timeout_remaining+0x54>
   27b46:	4908      	ldr	r1, [pc, #32]	; (27b68 <z_timeout_remaining+0x68>)
   27b48:	22c2      	movs	r2, #194	; 0xc2
   27b4a:	4808      	ldr	r0, [pc, #32]	; (27b6c <z_timeout_remaining+0x6c>)
   27b4c:	f001 f83a 	bl	28bc4 <assert_print>
   27b50:	21c2      	movs	r1, #194	; 0xc2
   27b52:	e7e9      	b.n	27b28 <z_timeout_remaining+0x28>
	__asm__ volatile(
   27b54:	f386 8811 	msr	BASEPRI, r6
   27b58:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   27b5c:	4628      	mov	r0, r5
   27b5e:	4621      	mov	r1, r4
   27b60:	bd70      	pop	{r4, r5, r6, pc}
   27b62:	bf00      	nop
   27b64:	2000b110 	.word	0x2000b110
   27b68:	00030eb4 	.word	0x00030eb4
   27b6c:	00030da5 	.word	0x00030da5

00027b70 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   27b70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27b72:	f04f 0320 	mov.w	r3, #32
   27b76:	f3ef 8511 	mrs	r5, BASEPRI
   27b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   27b7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27b82:	4812      	ldr	r0, [pc, #72]	; (27bcc <z_get_next_timeout_expiry+0x5c>)
   27b84:	f7fd fe50 	bl	25828 <z_spin_lock_valid>
   27b88:	b940      	cbnz	r0, 27b9c <z_get_next_timeout_expiry+0x2c>
   27b8a:	4911      	ldr	r1, [pc, #68]	; (27bd0 <z_get_next_timeout_expiry+0x60>)
   27b8c:	2294      	movs	r2, #148	; 0x94
   27b8e:	4811      	ldr	r0, [pc, #68]	; (27bd4 <z_get_next_timeout_expiry+0x64>)
   27b90:	f001 f818 	bl	28bc4 <assert_print>
   27b94:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b96:	480e      	ldr	r0, [pc, #56]	; (27bd0 <z_get_next_timeout_expiry+0x60>)
   27b98:	f001 f80d 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27b9c:	480b      	ldr	r0, [pc, #44]	; (27bcc <z_get_next_timeout_expiry+0x5c>)
   27b9e:	f7fd fe5f 	bl	25860 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   27ba2:	f7ff fe5f 	bl	27864 <next_timeout>
   27ba6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ba8:	4808      	ldr	r0, [pc, #32]	; (27bcc <z_get_next_timeout_expiry+0x5c>)
   27baa:	f7fd fe4b 	bl	25844 <z_spin_unlock_valid>
   27bae:	b930      	cbnz	r0, 27bbe <z_get_next_timeout_expiry+0x4e>
   27bb0:	4907      	ldr	r1, [pc, #28]	; (27bd0 <z_get_next_timeout_expiry+0x60>)
   27bb2:	22c2      	movs	r2, #194	; 0xc2
   27bb4:	4807      	ldr	r0, [pc, #28]	; (27bd4 <z_get_next_timeout_expiry+0x64>)
   27bb6:	f001 f805 	bl	28bc4 <assert_print>
   27bba:	21c2      	movs	r1, #194	; 0xc2
   27bbc:	e7eb      	b.n	27b96 <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   27bbe:	f385 8811 	msr	BASEPRI, r5
   27bc2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   27bc6:	4620      	mov	r0, r4
   27bc8:	bd38      	pop	{r3, r4, r5, pc}
   27bca:	bf00      	nop
   27bcc:	2000b110 	.word	0x2000b110
   27bd0:	00030eb4 	.word	0x00030eb4
   27bd4:	00030da5 	.word	0x00030da5

00027bd8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   27bd8:	b570      	push	{r4, r5, r6, lr}
   27bda:	4604      	mov	r4, r0
   27bdc:	460d      	mov	r5, r1
	__asm__ volatile(
   27bde:	f04f 0320 	mov.w	r3, #32
   27be2:	f3ef 8611 	mrs	r6, BASEPRI
   27be6:	f383 8812 	msr	BASEPRI_MAX, r3
   27bea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bee:	4816      	ldr	r0, [pc, #88]	; (27c48 <z_set_timeout_expiry+0x70>)
   27bf0:	f7fd fe1a 	bl	25828 <z_spin_lock_valid>
   27bf4:	b940      	cbnz	r0, 27c08 <z_set_timeout_expiry+0x30>
   27bf6:	4915      	ldr	r1, [pc, #84]	; (27c4c <z_set_timeout_expiry+0x74>)
   27bf8:	2294      	movs	r2, #148	; 0x94
   27bfa:	4815      	ldr	r0, [pc, #84]	; (27c50 <z_set_timeout_expiry+0x78>)
   27bfc:	f000 ffe2 	bl	28bc4 <assert_print>
   27c00:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c02:	4812      	ldr	r0, [pc, #72]	; (27c4c <z_set_timeout_expiry+0x74>)
   27c04:	f000 ffd7 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27c08:	480f      	ldr	r0, [pc, #60]	; (27c48 <z_set_timeout_expiry+0x70>)
   27c0a:	f7fd fe29 	bl	25860 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   27c0e:	f7ff fe29 	bl	27864 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   27c12:	2801      	cmp	r0, #1
   27c14:	dd07      	ble.n	27c26 <z_set_timeout_expiry+0x4e>
   27c16:	42a0      	cmp	r0, r4
   27c18:	db05      	blt.n	27c26 <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27c1a:	42a0      	cmp	r0, r4
   27c1c:	4629      	mov	r1, r5
   27c1e:	bfa8      	it	ge
   27c20:	4620      	movge	r0, r4
   27c22:	f7fa fa99 	bl	22158 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c26:	4808      	ldr	r0, [pc, #32]	; (27c48 <z_set_timeout_expiry+0x70>)
   27c28:	f7fd fe0c 	bl	25844 <z_spin_unlock_valid>
   27c2c:	b930      	cbnz	r0, 27c3c <z_set_timeout_expiry+0x64>
   27c2e:	4907      	ldr	r1, [pc, #28]	; (27c4c <z_set_timeout_expiry+0x74>)
   27c30:	22c2      	movs	r2, #194	; 0xc2
   27c32:	4807      	ldr	r0, [pc, #28]	; (27c50 <z_set_timeout_expiry+0x78>)
   27c34:	f000 ffc6 	bl	28bc4 <assert_print>
   27c38:	21c2      	movs	r1, #194	; 0xc2
   27c3a:	e7e2      	b.n	27c02 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   27c3c:	f386 8811 	msr	BASEPRI, r6
   27c40:	f3bf 8f6f 	isb	sy
		}
	}
}
   27c44:	bd70      	pop	{r4, r5, r6, pc}
   27c46:	bf00      	nop
   27c48:	2000b110 	.word	0x2000b110
   27c4c:	00030eb4 	.word	0x00030eb4
   27c50:	00030da5 	.word	0x00030da5

00027c54 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   27c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27c58:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27c5a:	f7ff f891 	bl	26d80 <z_time_slice>
	__asm__ volatile(
   27c5e:	f04f 0320 	mov.w	r3, #32
   27c62:	f3ef 8711 	mrs	r7, BASEPRI
   27c66:	f383 8812 	msr	BASEPRI_MAX, r3
   27c6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c6e:	483a      	ldr	r0, [pc, #232]	; (27d58 <sys_clock_announce+0x104>)
   27c70:	f7fd fdda 	bl	25828 <z_spin_lock_valid>
   27c74:	b940      	cbnz	r0, 27c88 <sys_clock_announce+0x34>
   27c76:	4939      	ldr	r1, [pc, #228]	; (27d5c <sys_clock_announce+0x108>)
   27c78:	2294      	movs	r2, #148	; 0x94
   27c7a:	4839      	ldr	r0, [pc, #228]	; (27d60 <sys_clock_announce+0x10c>)
   27c7c:	f000 ffa2 	bl	28bc4 <assert_print>
   27c80:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c82:	4836      	ldr	r0, [pc, #216]	; (27d5c <sys_clock_announce+0x108>)
   27c84:	f000 ff97 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27c88:	4833      	ldr	r0, [pc, #204]	; (27d58 <sys_clock_announce+0x104>)
   27c8a:	f7fd fde9 	bl	25860 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   27c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 27d64 <sys_clock_announce+0x110>
	return list->head == list;
   27c92:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 27d68 <sys_clock_announce+0x114>
   27c96:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   27c9a:	4a34      	ldr	r2, [pc, #208]	; (27d6c <sys_clock_announce+0x118>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c9c:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   27c9e:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   27ca2:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   27ca6:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27caa:	d00b      	beq.n	27cc4 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27cac:	b155      	cbz	r5, 27cc4 <sys_clock_announce+0x70>
   27cae:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   27cb2:	42b4      	cmp	r4, r6
   27cb4:	eb71 0e00 	sbcs.w	lr, r1, r0
   27cb8:	da1c      	bge.n	27cf4 <sys_clock_announce+0xa0>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   27cba:	1b36      	subs	r6, r6, r4
   27cbc:	eb60 0001 	sbc.w	r0, r0, r1
   27cc0:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   27cc4:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   27cc6:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   27cca:	eb4c 0101 	adc.w	r1, ip, r1
   27cce:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   27cd2:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   27cd6:	f7ff fdc5 	bl	27864 <next_timeout>
   27cda:	4621      	mov	r1, r4
   27cdc:	f7fa fa3c 	bl	22158 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ce0:	481d      	ldr	r0, [pc, #116]	; (27d58 <sys_clock_announce+0x104>)
   27ce2:	f7fd fdaf 	bl	25844 <z_spin_unlock_valid>
   27ce6:	b1a8      	cbz	r0, 27d14 <sys_clock_announce+0xc0>
	__asm__ volatile(
   27ce8:	f387 8811 	msr	BASEPRI, r7
   27cec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   27cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   27cf4:	18f3      	adds	r3, r6, r3
   27cf6:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   27cfa:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   27cfe:	2200      	movs	r2, #0
   27d00:	2300      	movs	r3, #0
		remove_timeout(t);
   27d02:	4628      	mov	r0, r5
		t->dticks = 0;
   27d04:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   27d08:	f7ff fdd4 	bl	278b4 <remove_timeout>
   27d0c:	4812      	ldr	r0, [pc, #72]	; (27d58 <sys_clock_announce+0x104>)
   27d0e:	f7fd fd99 	bl	25844 <z_spin_unlock_valid>
   27d12:	b930      	cbnz	r0, 27d22 <sys_clock_announce+0xce>
   27d14:	4911      	ldr	r1, [pc, #68]	; (27d5c <sys_clock_announce+0x108>)
   27d16:	22c2      	movs	r2, #194	; 0xc2
   27d18:	4811      	ldr	r0, [pc, #68]	; (27d60 <sys_clock_announce+0x10c>)
   27d1a:	f000 ff53 	bl	28bc4 <assert_print>
   27d1e:	21c2      	movs	r1, #194	; 0xc2
   27d20:	e7af      	b.n	27c82 <sys_clock_announce+0x2e>
   27d22:	f387 8811 	msr	BASEPRI, r7
   27d26:	f3bf 8f6f 	isb	sy
		t->fn(t);
   27d2a:	4628      	mov	r0, r5
   27d2c:	68ab      	ldr	r3, [r5, #8]
   27d2e:	4798      	blx	r3
	__asm__ volatile(
   27d30:	f04f 0320 	mov.w	r3, #32
   27d34:	f3ef 8711 	mrs	r7, BASEPRI
   27d38:	f383 8812 	msr	BASEPRI_MAX, r3
   27d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d40:	4805      	ldr	r0, [pc, #20]	; (27d58 <sys_clock_announce+0x104>)
   27d42:	f7fd fd71 	bl	25828 <z_spin_lock_valid>
   27d46:	2800      	cmp	r0, #0
   27d48:	d095      	beq.n	27c76 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   27d4a:	4803      	ldr	r0, [pc, #12]	; (27d58 <sys_clock_announce+0x104>)
   27d4c:	f7fd fd88 	bl	25860 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   27d50:	f8d8 4000 	ldr.w	r4, [r8]
   27d54:	1ba4      	subs	r4, r4, r6
   27d56:	e79e      	b.n	27c96 <sys_clock_announce+0x42>
   27d58:	2000b110 	.word	0x2000b110
   27d5c:	00030eb4 	.word	0x00030eb4
   27d60:	00030da5 	.word	0x00030da5
   27d64:	2000b10c 	.word	0x2000b10c
   27d68:	20008bb4 	.word	0x20008bb4
   27d6c:	2000a5b0 	.word	0x2000a5b0

00027d70 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27d70:	b570      	push	{r4, r5, r6, lr}
   27d72:	f04f 0320 	mov.w	r3, #32
   27d76:	f3ef 8611 	mrs	r6, BASEPRI
   27d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   27d7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d82:	4815      	ldr	r0, [pc, #84]	; (27dd8 <sys_clock_tick_get+0x68>)
   27d84:	f7fd fd50 	bl	25828 <z_spin_lock_valid>
   27d88:	b940      	cbnz	r0, 27d9c <sys_clock_tick_get+0x2c>
   27d8a:	4914      	ldr	r1, [pc, #80]	; (27ddc <sys_clock_tick_get+0x6c>)
   27d8c:	2294      	movs	r2, #148	; 0x94
   27d8e:	4814      	ldr	r0, [pc, #80]	; (27de0 <sys_clock_tick_get+0x70>)
   27d90:	f000 ff18 	bl	28bc4 <assert_print>
   27d94:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d96:	4811      	ldr	r0, [pc, #68]	; (27ddc <sys_clock_tick_get+0x6c>)
   27d98:	f000 ff0d 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27d9c:	480e      	ldr	r0, [pc, #56]	; (27dd8 <sys_clock_tick_get+0x68>)
   27d9e:	f7fd fd5f 	bl	25860 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   27da2:	f7ff fd55 	bl	27850 <elapsed>
   27da6:	4a0f      	ldr	r2, [pc, #60]	; (27de4 <sys_clock_tick_get+0x74>)
   27da8:	e9d2 4500 	ldrd	r4, r5, [r2]
   27dac:	1904      	adds	r4, r0, r4
   27dae:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27db2:	4809      	ldr	r0, [pc, #36]	; (27dd8 <sys_clock_tick_get+0x68>)
   27db4:	f7fd fd46 	bl	25844 <z_spin_unlock_valid>
   27db8:	b930      	cbnz	r0, 27dc8 <sys_clock_tick_get+0x58>
   27dba:	4908      	ldr	r1, [pc, #32]	; (27ddc <sys_clock_tick_get+0x6c>)
   27dbc:	22c2      	movs	r2, #194	; 0xc2
   27dbe:	4808      	ldr	r0, [pc, #32]	; (27de0 <sys_clock_tick_get+0x70>)
   27dc0:	f000 ff00 	bl	28bc4 <assert_print>
   27dc4:	21c2      	movs	r1, #194	; 0xc2
   27dc6:	e7e6      	b.n	27d96 <sys_clock_tick_get+0x26>
	__asm__ volatile(
   27dc8:	f386 8811 	msr	BASEPRI, r6
   27dcc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   27dd0:	4620      	mov	r0, r4
   27dd2:	4629      	mov	r1, r5
   27dd4:	bd70      	pop	{r4, r5, r6, pc}
   27dd6:	bf00      	nop
   27dd8:	2000b110 	.word	0x2000b110
   27ddc:	00030eb4 	.word	0x00030eb4
   27de0:	00030da5 	.word	0x00030da5
   27de4:	2000a5b0 	.word	0x2000a5b0

00027de8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27de8:	b570      	push	{r4, r5, r6, lr}
   27dea:	4604      	mov	r4, r0
	__asm__ volatile(
   27dec:	f04f 0320 	mov.w	r3, #32
   27df0:	f3ef 8511 	mrs	r5, BASEPRI
   27df4:	f383 8812 	msr	BASEPRI_MAX, r3
   27df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27dfc:	4844      	ldr	r0, [pc, #272]	; (27f10 <z_timer_expiration_handler+0x128>)
   27dfe:	f7fd fd13 	bl	25828 <z_spin_lock_valid>
   27e02:	b940      	cbnz	r0, 27e16 <z_timer_expiration_handler+0x2e>
   27e04:	4943      	ldr	r1, [pc, #268]	; (27f14 <z_timer_expiration_handler+0x12c>)
   27e06:	2294      	movs	r2, #148	; 0x94
   27e08:	4843      	ldr	r0, [pc, #268]	; (27f18 <z_timer_expiration_handler+0x130>)
   27e0a:	f000 fedb 	bl	28bc4 <assert_print>
   27e0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e10:	4840      	ldr	r0, [pc, #256]	; (27f14 <z_timer_expiration_handler+0x12c>)
   27e12:	f000 fed0 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27e16:	483e      	ldr	r0, [pc, #248]	; (27f10 <z_timer_expiration_handler+0x128>)
   27e18:	f7fd fd22 	bl	25860 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27e1c:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27e20:	3301      	adds	r3, #1
   27e22:	f142 0200 	adc.w	r2, r2, #0
   27e26:	2b02      	cmp	r3, #2
   27e28:	f172 0200 	sbcs.w	r2, r2, #0
   27e2c:	d322      	bcc.n	27e74 <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   27e2e:	f007 fb9a 	bl	2f566 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27e32:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27e36:	3001      	adds	r0, #1
   27e38:	f141 0100 	adc.w	r1, r1, #0
   27e3c:	18c0      	adds	r0, r0, r3
   27e3e:	eb41 0102 	adc.w	r1, r1, r2
   27e42:	2801      	cmp	r0, #1
   27e44:	f171 0100 	sbcs.w	r1, r1, #0
   27e48:	db24      	blt.n	27e94 <z_timer_expiration_handler+0xac>
   27e4a:	f007 fb8c 	bl	2f566 <z_impl_k_uptime_ticks>
   27e4e:	3001      	adds	r0, #1
   27e50:	f141 0300 	adc.w	r3, r1, #0
   27e54:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   27e58:	1880      	adds	r0, r0, r2
   27e5a:	f06f 0201 	mvn.w	r2, #1
   27e5e:	eb43 0301 	adc.w	r3, r3, r1
   27e62:	f04f 31ff 	mov.w	r1, #4294967295
   27e66:	1a12      	subs	r2, r2, r0
   27e68:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e6c:	4620      	mov	r0, r4
   27e6e:	492b      	ldr	r1, [pc, #172]	; (27f1c <z_timer_expiration_handler+0x134>)
   27e70:	f7ff fd60 	bl	27934 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   27e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27e76:	3301      	adds	r3, #1
   27e78:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27e7a:	6a23      	ldr	r3, [r4, #32]
   27e7c:	b333      	cbz	r3, 27ecc <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e7e:	4824      	ldr	r0, [pc, #144]	; (27f10 <z_timer_expiration_handler+0x128>)
   27e80:	f7fd fce0 	bl	25844 <z_spin_unlock_valid>
   27e84:	b958      	cbnz	r0, 27e9e <z_timer_expiration_handler+0xb6>
   27e86:	4923      	ldr	r1, [pc, #140]	; (27f14 <z_timer_expiration_handler+0x12c>)
   27e88:	22c2      	movs	r2, #194	; 0xc2
   27e8a:	4823      	ldr	r0, [pc, #140]	; (27f18 <z_timer_expiration_handler+0x130>)
   27e8c:	f000 fe9a 	bl	28bc4 <assert_print>
   27e90:	21c2      	movs	r1, #194	; 0xc2
   27e92:	e7bd      	b.n	27e10 <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27e94:	f06f 0201 	mvn.w	r2, #1
   27e98:	f04f 33ff 	mov.w	r3, #4294967295
   27e9c:	e7e6      	b.n	27e6c <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   27e9e:	f385 8811 	msr	BASEPRI, r5
   27ea2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27ea6:	4620      	mov	r0, r4
   27ea8:	6a23      	ldr	r3, [r4, #32]
   27eaa:	4798      	blx	r3
	__asm__ volatile(
   27eac:	f04f 0320 	mov.w	r3, #32
   27eb0:	f3ef 8511 	mrs	r5, BASEPRI
   27eb4:	f383 8812 	msr	BASEPRI_MAX, r3
   27eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ebc:	4814      	ldr	r0, [pc, #80]	; (27f10 <z_timer_expiration_handler+0x128>)
   27ebe:	f7fd fcb3 	bl	25828 <z_spin_lock_valid>
   27ec2:	2800      	cmp	r0, #0
   27ec4:	d09e      	beq.n	27e04 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   27ec6:	4812      	ldr	r0, [pc, #72]	; (27f10 <z_timer_expiration_handler+0x128>)
   27ec8:	f7fd fcca 	bl	25860 <z_spin_lock_set_owner>
	return list->head == list;
   27ecc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ed0:	42a6      	cmp	r6, r4
   27ed2:	d000      	beq.n	27ed6 <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27ed4:	b94e      	cbnz	r6, 27eea <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ed6:	480e      	ldr	r0, [pc, #56]	; (27f10 <z_timer_expiration_handler+0x128>)
   27ed8:	f7fd fcb4 	bl	25844 <z_spin_unlock_valid>
   27edc:	2800      	cmp	r0, #0
   27ede:	d0d2      	beq.n	27e86 <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   27ee0:	f385 8811 	msr	BASEPRI, r5
   27ee4:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27ee8:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   27eea:	4630      	mov	r0, r6
   27eec:	f7fe fd92 	bl	26a14 <z_unpend_thread_no_timeout>
   27ef0:	2300      	movs	r3, #0
   27ef2:	4807      	ldr	r0, [pc, #28]	; (27f10 <z_timer_expiration_handler+0x128>)
   27ef4:	67f3      	str	r3, [r6, #124]	; 0x7c
   27ef6:	f7fd fca5 	bl	25844 <z_spin_unlock_valid>
   27efa:	2800      	cmp	r0, #0
   27efc:	d0c3      	beq.n	27e86 <z_timer_expiration_handler+0x9e>
   27efe:	f385 8811 	msr	BASEPRI, r5
   27f02:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   27f06:	4630      	mov	r0, r6
}
   27f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   27f0c:	f7fe bd4e 	b.w	269ac <z_ready_thread>
   27f10:	2000b114 	.word	0x2000b114
   27f14:	00030eb4 	.word	0x00030eb4
   27f18:	00030da5 	.word	0x00030da5
   27f1c:	00027de9 	.word	0x00027de9

00027f20 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27f20:	f1b3 3fff 	cmp.w	r3, #4294967295
   27f24:	bf08      	it	eq
   27f26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f2e:	4619      	mov	r1, r3
   27f30:	4605      	mov	r5, r0
   27f32:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   27f36:	4614      	mov	r4, r2
   27f38:	4691      	mov	r9, r2
   27f3a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27f3c:	d037      	beq.n	27fae <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27f3e:	f1b0 3fff 	cmp.w	r0, #4294967295
   27f42:	bf08      	it	eq
   27f44:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27f48:	4637      	mov	r7, r6
   27f4a:	4682      	mov	sl, r0
   27f4c:	d011      	beq.n	27f72 <z_impl_k_timer_start+0x52>
   27f4e:	ea50 0306 	orrs.w	r3, r0, r6
   27f52:	d00e      	beq.n	27f72 <z_impl_k_timer_start+0x52>
   27f54:	1c72      	adds	r2, r6, #1
   27f56:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   27f5a:	db0a      	blt.n	27f72 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   27f5c:	2e02      	cmp	r6, #2
   27f5e:	4684      	mov	ip, r0
   27f60:	f170 0000 	sbcs.w	r0, r0, #0
   27f64:	bfbc      	itt	lt
   27f66:	2702      	movlt	r7, #2
   27f68:	f04f 0c00 	movlt.w	ip, #0
   27f6c:	3f01      	subs	r7, #1
   27f6e:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27f72:	1c63      	adds	r3, r4, #1
   27f74:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   27f78:	db0a      	blt.n	27f90 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27f7a:	2c01      	cmp	r4, #1
   27f7c:	f171 0300 	sbcs.w	r3, r1, #0
   27f80:	4622      	mov	r2, r4
   27f82:	bfbc      	itt	lt
   27f84:	2201      	movlt	r2, #1
   27f86:	2100      	movlt	r1, #0
   27f88:	f112 39ff 	adds.w	r9, r2, #4294967295
   27f8c:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   27f90:	4628      	mov	r0, r5
   27f92:	f7ff fd7b 	bl	27a8c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27f96:	2300      	movs	r3, #0
	timer->period = period;
   27f98:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   27f9c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27f9e:	464a      	mov	r2, r9
   27fa0:	4643      	mov	r3, r8
   27fa2:	4628      	mov	r0, r5
		     duration);
}
   27fa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27fa8:	4902      	ldr	r1, [pc, #8]	; (27fb4 <z_impl_k_timer_start+0x94>)
   27faa:	f7ff bcc3 	b.w	27934 <z_add_timeout>
}
   27fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27fb2:	bf00      	nop
   27fb4:	00027de9 	.word	0x00027de9

00027fb8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   27fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27fbc:	2500      	movs	r5, #0
{
   27fbe:	460f      	mov	r7, r1
   27fc0:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   27fc2:	4680      	mov	r8, r0
	int events_registered = 0;
   27fc4:	462e      	mov	r6, r5
	event->poller = NULL;
   27fc6:	46aa      	mov	sl, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27fc8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 28154 <register_events+0x19c>
{
   27fcc:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   27fce:	42bd      	cmp	r5, r7
   27fd0:	db03      	blt.n	27fda <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   27fd2:	4630      	mov	r0, r6
   27fd4:	b003      	add	sp, #12
   27fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   27fda:	f04f 0320 	mov.w	r3, #32
   27fde:	f3ef 8b11 	mrs	fp, BASEPRI
   27fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   27fe6:	f3bf 8f6f 	isb	sy
   27fea:	4648      	mov	r0, r9
   27fec:	f7fd fc1c 	bl	25828 <z_spin_lock_valid>
   27ff0:	b938      	cbnz	r0, 28002 <register_events+0x4a>
   27ff2:	4959      	ldr	r1, [pc, #356]	; (28158 <register_events+0x1a0>)
   27ff4:	2294      	movs	r2, #148	; 0x94
   27ff6:	4859      	ldr	r0, [pc, #356]	; (2815c <register_events+0x1a4>)
   27ff8:	f000 fde4 	bl	28bc4 <assert_print>
   27ffc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ffe:	4856      	ldr	r0, [pc, #344]	; (28158 <register_events+0x1a0>)
   28000:	e05b      	b.n	280ba <register_events+0x102>
	z_spin_lock_set_owner(l);
   28002:	4648      	mov	r0, r9
   28004:	f7fd fc2c 	bl	25860 <z_spin_lock_set_owner>
	switch (event->type) {
   28008:	f898 300d 	ldrb.w	r3, [r8, #13]
   2800c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28010:	2b08      	cmp	r3, #8
   28012:	d84b      	bhi.n	280ac <register_events+0xf4>
   28014:	e8df f003 	tbb	[pc, r3]
   28018:	4a053c29 	.word	0x4a053c29
   2801c:	4a4a4a25 	.word	0x4a4a4a25
   28020:	43          	.byte	0x43
   28021:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   28022:	f8d8 3010 	ldr.w	r3, [r8, #16]
   28026:	689b      	ldr	r3, [r3, #8]
   28028:	b1fb      	cbz	r3, 2806a <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2802a:	2302      	movs	r3, #2
	event->state |= state;
   2802c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   28030:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   28034:	f3c2 3086 	ubfx	r0, r2, #14, #7
   28038:	4303      	orrs	r3, r0
   2803a:	f363 3294 	bfi	r2, r3, #14, #7
   2803e:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   28042:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28046:	4648      	mov	r0, r9
   28048:	f7fd fbfc 	bl	25844 <z_spin_unlock_valid>
   2804c:	f108 0814 	add.w	r8, r8, #20
   28050:	2800      	cmp	r0, #0
   28052:	d179      	bne.n	28148 <register_events+0x190>
   28054:	4940      	ldr	r1, [pc, #256]	; (28158 <register_events+0x1a0>)
   28056:	22c2      	movs	r2, #194	; 0xc2
   28058:	4840      	ldr	r0, [pc, #256]	; (2815c <register_events+0x1a4>)
   2805a:	f000 fdb3 	bl	28bc4 <assert_print>
   2805e:	21c2      	movs	r1, #194	; 0xc2
   28060:	e7cd      	b.n	27ffe <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   28062:	f8d8 3010 	ldr.w	r3, [r8, #16]
   28066:	681b      	ldr	r3, [r3, #0]
   28068:	bb4b      	cbnz	r3, 280be <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   2806a:	9b01      	ldr	r3, [sp, #4]
   2806c:	2b00      	cmp	r3, #0
   2806e:	d1ea      	bne.n	28046 <register_events+0x8e>
   28070:	7823      	ldrb	r3, [r4, #0]
   28072:	2b00      	cmp	r3, #0
   28074:	d0e7      	beq.n	28046 <register_events+0x8e>
	switch (event->type) {
   28076:	f898 300d 	ldrb.w	r3, [r8, #13]
   2807a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2807e:	2b08      	cmp	r3, #8
   28080:	d85b      	bhi.n	2813a <register_events+0x182>
   28082:	e8df f003 	tbb	[pc, r3]
   28086:	3f2d      	.short	0x3f2d
   28088:	5a315a1e 	.word	0x5a315a1e
   2808c:	5a5a      	.short	0x5a5a
   2808e:	4c          	.byte	0x4c
   2808f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   28090:	f8d8 3010 	ldr.w	r3, [r8, #16]
   28094:	689b      	ldr	r3, [r3, #8]
   28096:	2b00      	cmp	r3, #0
   28098:	d0e7      	beq.n	2806a <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   2809a:	2301      	movs	r3, #1
   2809c:	e7c6      	b.n	2802c <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   2809e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   280a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   280a4:	2b00      	cmp	r3, #0
   280a6:	d0e0      	beq.n	2806a <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   280a8:	2310      	movs	r3, #16
   280aa:	e7bf      	b.n	2802c <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   280ac:	492c      	ldr	r1, [pc, #176]	; (28160 <register_events+0x1a8>)
   280ae:	2263      	movs	r2, #99	; 0x63
   280b0:	482a      	ldr	r0, [pc, #168]	; (2815c <register_events+0x1a4>)
   280b2:	f000 fd87 	bl	28bc4 <assert_print>
   280b6:	2163      	movs	r1, #99	; 0x63
   280b8:	4829      	ldr	r0, [pc, #164]	; (28160 <register_events+0x1a8>)
   280ba:	f000 fd7c 	bl	28bb6 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   280be:	2304      	movs	r3, #4
   280c0:	e7b4      	b.n	2802c <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   280c2:	f8d8 0010 	ldr.w	r0, [r8, #16]
   280c6:	b930      	cbnz	r0, 280d6 <register_events+0x11e>
   280c8:	4925      	ldr	r1, [pc, #148]	; (28160 <register_events+0x1a8>)
   280ca:	228d      	movs	r2, #141	; 0x8d
   280cc:	4823      	ldr	r0, [pc, #140]	; (2815c <register_events+0x1a4>)
   280ce:	f000 fd79 	bl	28bc4 <assert_print>
   280d2:	218d      	movs	r1, #141	; 0x8d
   280d4:	e7f0      	b.n	280b8 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   280d6:	4622      	mov	r2, r4
   280d8:	4641      	mov	r1, r8
   280da:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   280dc:	f007 fa94 	bl	2f608 <add_event>
	event->poller = poller;
   280e0:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   280e4:	3601      	adds	r6, #1
   280e6:	e7ae      	b.n	28046 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   280e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
   280ec:	b930      	cbnz	r0, 280fc <register_events+0x144>
   280ee:	491c      	ldr	r1, [pc, #112]	; (28160 <register_events+0x1a8>)
   280f0:	2291      	movs	r2, #145	; 0x91
   280f2:	481a      	ldr	r0, [pc, #104]	; (2815c <register_events+0x1a4>)
   280f4:	f000 fd66 	bl	28bc4 <assert_print>
   280f8:	2191      	movs	r1, #145	; 0x91
   280fa:	e7dd      	b.n	280b8 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   280fc:	4622      	mov	r2, r4
   280fe:	4641      	mov	r1, r8
   28100:	3014      	adds	r0, #20
   28102:	e7eb      	b.n	280dc <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28104:	f8d8 0010 	ldr.w	r0, [r8, #16]
   28108:	b930      	cbnz	r0, 28118 <register_events+0x160>
   2810a:	4915      	ldr	r1, [pc, #84]	; (28160 <register_events+0x1a8>)
   2810c:	2295      	movs	r2, #149	; 0x95
   2810e:	4813      	ldr	r0, [pc, #76]	; (2815c <register_events+0x1a4>)
   28110:	f000 fd58 	bl	28bc4 <assert_print>
   28114:	2195      	movs	r1, #149	; 0x95
   28116:	e7cf      	b.n	280b8 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   28118:	4622      	mov	r2, r4
   2811a:	4641      	mov	r1, r8
   2811c:	e7de      	b.n	280dc <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2811e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   28122:	b930      	cbnz	r0, 28132 <register_events+0x17a>
   28124:	490e      	ldr	r1, [pc, #56]	; (28160 <register_events+0x1a8>)
   28126:	2299      	movs	r2, #153	; 0x99
   28128:	480c      	ldr	r0, [pc, #48]	; (2815c <register_events+0x1a4>)
   2812a:	f000 fd4b 	bl	28bc4 <assert_print>
   2812e:	2199      	movs	r1, #153	; 0x99
   28130:	e7c2      	b.n	280b8 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   28132:	4622      	mov	r2, r4
   28134:	4641      	mov	r1, r8
   28136:	3028      	adds	r0, #40	; 0x28
   28138:	e7d0      	b.n	280dc <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   2813a:	4909      	ldr	r1, [pc, #36]	; (28160 <register_events+0x1a8>)
   2813c:	22a6      	movs	r2, #166	; 0xa6
   2813e:	4807      	ldr	r0, [pc, #28]	; (2815c <register_events+0x1a4>)
   28140:	f000 fd40 	bl	28bc4 <assert_print>
   28144:	21a6      	movs	r1, #166	; 0xa6
   28146:	e7b7      	b.n	280b8 <register_events+0x100>
	__asm__ volatile(
   28148:	f38b 8811 	msr	BASEPRI, fp
   2814c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28150:	3501      	adds	r5, #1
   28152:	e73c      	b.n	27fce <register_events+0x16>
   28154:	2000b118 	.word	0x2000b118
   28158:	00030eb4 	.word	0x00030eb4
   2815c:	00030da5 	.word	0x00030da5
   28160:	00035462 	.word	0x00035462

00028164 <clear_event_registrations>:
{
   28164:	2314      	movs	r3, #20
   28166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2816a:	4615      	mov	r5, r2
	while (num_events--) {
   2816c:	460c      	mov	r4, r1
	event->poller = NULL;
   2816e:	2600      	movs	r6, #0
   28170:	fb03 0001 	mla	r0, r3, r1, r0
   28174:	4f3b      	ldr	r7, [pc, #236]	; (28264 <clear_event_registrations+0x100>)
	while (num_events--) {
   28176:	b90c      	cbnz	r4, 2817c <clear_event_registrations+0x18>
}
   28178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   2817c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   28180:	f1a0 0814 	sub.w	r8, r0, #20
   28184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   28188:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   2818c:	2b08      	cmp	r3, #8
   2818e:	d830      	bhi.n	281f2 <clear_event_registrations+0x8e>
   28190:	e8df f003 	tbb	[pc, r3]
   28194:	2f051b3f 	.word	0x2f051b3f
   28198:	2f2f2f11 	.word	0x2f2f2f11
   2819c:	25          	.byte	0x25
   2819d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2819e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   281a2:	bb6b      	cbnz	r3, 28200 <clear_event_registrations+0x9c>
   281a4:	4930      	ldr	r1, [pc, #192]	; (28268 <clear_event_registrations+0x104>)
   281a6:	22b6      	movs	r2, #182	; 0xb6
   281a8:	4830      	ldr	r0, [pc, #192]	; (2826c <clear_event_registrations+0x108>)
   281aa:	f000 fd0b 	bl	28bc4 <assert_print>
   281ae:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   281b0:	482d      	ldr	r0, [pc, #180]	; (28268 <clear_event_registrations+0x104>)
   281b2:	f000 fd00 	bl	28bb6 <assert_post_action>
   281b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   281ba:	bb0b      	cbnz	r3, 28200 <clear_event_registrations+0x9c>
   281bc:	492a      	ldr	r1, [pc, #168]	; (28268 <clear_event_registrations+0x104>)
   281be:	22ba      	movs	r2, #186	; 0xba
   281c0:	482a      	ldr	r0, [pc, #168]	; (2826c <clear_event_registrations+0x108>)
   281c2:	f000 fcff 	bl	28bc4 <assert_print>
   281c6:	21ba      	movs	r1, #186	; 0xba
   281c8:	e7f2      	b.n	281b0 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   281ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
   281ce:	b9bb      	cbnz	r3, 28200 <clear_event_registrations+0x9c>
   281d0:	4925      	ldr	r1, [pc, #148]	; (28268 <clear_event_registrations+0x104>)
   281d2:	22be      	movs	r2, #190	; 0xbe
   281d4:	4825      	ldr	r0, [pc, #148]	; (2826c <clear_event_registrations+0x108>)
   281d6:	f000 fcf5 	bl	28bc4 <assert_print>
   281da:	21be      	movs	r1, #190	; 0xbe
   281dc:	e7e8      	b.n	281b0 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   281de:	f850 3c04 	ldr.w	r3, [r0, #-4]
   281e2:	b96b      	cbnz	r3, 28200 <clear_event_registrations+0x9c>
   281e4:	4920      	ldr	r1, [pc, #128]	; (28268 <clear_event_registrations+0x104>)
   281e6:	22c2      	movs	r2, #194	; 0xc2
   281e8:	4820      	ldr	r0, [pc, #128]	; (2826c <clear_event_registrations+0x108>)
   281ea:	f000 fceb 	bl	28bc4 <assert_print>
   281ee:	21c2      	movs	r1, #194	; 0xc2
   281f0:	e7de      	b.n	281b0 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   281f2:	491d      	ldr	r1, [pc, #116]	; (28268 <clear_event_registrations+0x104>)
   281f4:	22cf      	movs	r2, #207	; 0xcf
   281f6:	481d      	ldr	r0, [pc, #116]	; (2826c <clear_event_registrations+0x108>)
   281f8:	f000 fce4 	bl	28bc4 <assert_print>
   281fc:	21cf      	movs	r1, #207	; 0xcf
   281fe:	e7d7      	b.n	281b0 <clear_event_registrations+0x4c>
	return node->next != NULL;
   28200:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   28204:	b12b      	cbz	r3, 28212 <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   28206:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2820a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2820c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2820e:	e940 6605 	strd	r6, r6, [r0, #-20]
   28212:	4638      	mov	r0, r7
   28214:	f7fd fb16 	bl	25844 <z_spin_unlock_valid>
   28218:	b938      	cbnz	r0, 2822a <clear_event_registrations+0xc6>
   2821a:	4915      	ldr	r1, [pc, #84]	; (28270 <clear_event_registrations+0x10c>)
   2821c:	22c2      	movs	r2, #194	; 0xc2
   2821e:	4813      	ldr	r0, [pc, #76]	; (2826c <clear_event_registrations+0x108>)
   28220:	f000 fcd0 	bl	28bc4 <assert_print>
   28224:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28226:	4812      	ldr	r0, [pc, #72]	; (28270 <clear_event_registrations+0x10c>)
   28228:	e7c3      	b.n	281b2 <clear_event_registrations+0x4e>
   2822a:	f385 8811 	msr	BASEPRI, r5
   2822e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28232:	f04f 0320 	mov.w	r3, #32
   28236:	f3ef 8511 	mrs	r5, BASEPRI
   2823a:	f383 8812 	msr	BASEPRI_MAX, r3
   2823e:	f3bf 8f6f 	isb	sy
   28242:	4638      	mov	r0, r7
   28244:	f7fd faf0 	bl	25828 <z_spin_lock_valid>
   28248:	3c01      	subs	r4, #1
   2824a:	b930      	cbnz	r0, 2825a <clear_event_registrations+0xf6>
   2824c:	4908      	ldr	r1, [pc, #32]	; (28270 <clear_event_registrations+0x10c>)
   2824e:	2294      	movs	r2, #148	; 0x94
   28250:	4806      	ldr	r0, [pc, #24]	; (2826c <clear_event_registrations+0x108>)
   28252:	f000 fcb7 	bl	28bc4 <assert_print>
   28256:	2194      	movs	r1, #148	; 0x94
   28258:	e7e5      	b.n	28226 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   2825a:	4638      	mov	r0, r7
   2825c:	f7fd fb00 	bl	25860 <z_spin_lock_set_owner>
	return k;
   28260:	4640      	mov	r0, r8
   28262:	e788      	b.n	28176 <clear_event_registrations+0x12>
   28264:	2000b118 	.word	0x2000b118
   28268:	00035462 	.word	0x00035462
   2826c:	00030da5 	.word	0x00030da5
   28270:	00030eb4 	.word	0x00030eb4

00028274 <k_poll_event_init>:
{
   28274:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   28276:	b142      	cbz	r2, 2828a <k_poll_event_init+0x16>
   28278:	4911      	ldr	r1, [pc, #68]	; (282c0 <k_poll_event_init+0x4c>)
   2827a:	222d      	movs	r2, #45	; 0x2d
   2827c:	4811      	ldr	r0, [pc, #68]	; (282c4 <k_poll_event_init+0x50>)
   2827e:	f000 fca1 	bl	28bc4 <assert_print>
   28282:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28284:	480e      	ldr	r0, [pc, #56]	; (282c0 <k_poll_event_init+0x4c>)
   28286:	f000 fc96 	bl	28bb6 <assert_post_action>
   2828a:	293f      	cmp	r1, #63	; 0x3f
   2828c:	d906      	bls.n	2829c <k_poll_event_init+0x28>
   2828e:	490c      	ldr	r1, [pc, #48]	; (282c0 <k_poll_event_init+0x4c>)
   28290:	222f      	movs	r2, #47	; 0x2f
   28292:	480c      	ldr	r0, [pc, #48]	; (282c4 <k_poll_event_init+0x50>)
   28294:	f000 fc96 	bl	28bc4 <assert_print>
   28298:	212f      	movs	r1, #47	; 0x2f
   2829a:	e7f3      	b.n	28284 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   2829c:	b933      	cbnz	r3, 282ac <k_poll_event_init+0x38>
   2829e:	4908      	ldr	r1, [pc, #32]	; (282c0 <k_poll_event_init+0x4c>)
   282a0:	2230      	movs	r2, #48	; 0x30
   282a2:	4808      	ldr	r0, [pc, #32]	; (282c4 <k_poll_event_init+0x50>)
   282a4:	f000 fc8e 	bl	28bc4 <assert_print>
   282a8:	2130      	movs	r1, #48	; 0x30
   282aa:	e7eb      	b.n	28284 <k_poll_event_init+0x10>
	event->poller = NULL;
   282ac:	6082      	str	r2, [r0, #8]
	event->type = type;
   282ae:	0209      	lsls	r1, r1, #8
   282b0:	7b02      	ldrb	r2, [r0, #12]
   282b2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   282b6:	4311      	orrs	r1, r2
	event->obj = obj;
   282b8:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   282bc:	bd08      	pop	{r3, pc}
   282be:	bf00      	nop
   282c0:	00035462 	.word	0x00035462
   282c4:	00030da5 	.word	0x00030da5

000282c8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   282c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282cc:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   282ce:	4b51      	ldr	r3, [pc, #324]	; (28414 <z_impl_k_poll+0x14c>)
{
   282d0:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   282d2:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   282d6:	2301      	movs	r3, #1
{
   282d8:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   282da:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   282de:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   282e2:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   282e6:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   282ea:	f1bb 0f00 	cmp.w	fp, #0
   282ee:	d00a      	beq.n	28306 <z_impl_k_poll+0x3e>
   282f0:	4949      	ldr	r1, [pc, #292]	; (28418 <z_impl_k_poll+0x150>)
   282f2:	f240 122d 	movw	r2, #301	; 0x12d
   282f6:	4849      	ldr	r0, [pc, #292]	; (2841c <z_impl_k_poll+0x154>)
   282f8:	f000 fc64 	bl	28bc4 <assert_print>
   282fc:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   28300:	4845      	ldr	r0, [pc, #276]	; (28418 <z_impl_k_poll+0x150>)
   28302:	f000 fc58 	bl	28bb6 <assert_post_action>
   28306:	b940      	cbnz	r0, 2831a <z_impl_k_poll+0x52>
   28308:	4943      	ldr	r1, [pc, #268]	; (28418 <z_impl_k_poll+0x150>)
   2830a:	f44f 7297 	mov.w	r2, #302	; 0x12e
   2830e:	4843      	ldr	r0, [pc, #268]	; (2841c <z_impl_k_poll+0x154>)
   28310:	f000 fc58 	bl	28bc4 <assert_print>
   28314:	f44f 7197 	mov.w	r1, #302	; 0x12e
   28318:	e7f2      	b.n	28300 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   2831a:	2900      	cmp	r1, #0
   2831c:	da08      	bge.n	28330 <z_impl_k_poll+0x68>
   2831e:	493e      	ldr	r1, [pc, #248]	; (28418 <z_impl_k_poll+0x150>)
   28320:	f240 122f 	movw	r2, #303	; 0x12f
   28324:	483d      	ldr	r0, [pc, #244]	; (2841c <z_impl_k_poll+0x154>)
   28326:	f000 fc4d 	bl	28bc4 <assert_print>
   2832a:	f240 112f 	movw	r1, #303	; 0x12f
   2832e:	e7e7      	b.n	28300 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   28330:	ea57 0306 	orrs.w	r3, r7, r6
   28334:	bf0c      	ite	eq
   28336:	2301      	moveq	r3, #1
   28338:	2300      	movne	r3, #0
   2833a:	f7ff fe3d 	bl	27fb8 <register_events>
   2833e:	4681      	mov	r9, r0
   28340:	f04f 0320 	mov.w	r3, #32
   28344:	f3ef 8a11 	mrs	sl, BASEPRI
   28348:	f383 8812 	msr	BASEPRI_MAX, r3
   2834c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28350:	4833      	ldr	r0, [pc, #204]	; (28420 <z_impl_k_poll+0x158>)
   28352:	f7fd fa69 	bl	25828 <z_spin_lock_valid>
   28356:	b938      	cbnz	r0, 28368 <z_impl_k_poll+0xa0>
   28358:	4932      	ldr	r1, [pc, #200]	; (28424 <z_impl_k_poll+0x15c>)
   2835a:	2294      	movs	r2, #148	; 0x94
   2835c:	482f      	ldr	r0, [pc, #188]	; (2841c <z_impl_k_poll+0x154>)
   2835e:	f000 fc31 	bl	28bc4 <assert_print>
   28362:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28364:	482f      	ldr	r0, [pc, #188]	; (28424 <z_impl_k_poll+0x15c>)
   28366:	e7cc      	b.n	28302 <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   28368:	482d      	ldr	r0, [pc, #180]	; (28420 <z_impl_k_poll+0x158>)
   2836a:	f7fd fa79 	bl	25860 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2836e:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   28372:	b9bc      	cbnz	r4, 283a4 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   28374:	4628      	mov	r0, r5
   28376:	4652      	mov	r2, sl
   28378:	4649      	mov	r1, r9
   2837a:	f7ff fef3 	bl	28164 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2837e:	4828      	ldr	r0, [pc, #160]	; (28420 <z_impl_k_poll+0x158>)
   28380:	f7fd fa60 	bl	25844 <z_spin_unlock_valid>
   28384:	b930      	cbnz	r0, 28394 <z_impl_k_poll+0xcc>
   28386:	4927      	ldr	r1, [pc, #156]	; (28424 <z_impl_k_poll+0x15c>)
   28388:	22c2      	movs	r2, #194	; 0xc2
   2838a:	4824      	ldr	r0, [pc, #144]	; (2841c <z_impl_k_poll+0x154>)
   2838c:	f000 fc1a 	bl	28bc4 <assert_print>
   28390:	21c2      	movs	r1, #194	; 0xc2
   28392:	e7e7      	b.n	28364 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   28394:	f38a 8811 	msr	BASEPRI, sl
   28398:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2839c:	4620      	mov	r0, r4
   2839e:	b003      	add	sp, #12
   283a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283a4:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   283a8:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283ac:	d10b      	bne.n	283c6 <z_impl_k_poll+0xfe>
   283ae:	481c      	ldr	r0, [pc, #112]	; (28420 <z_impl_k_poll+0x158>)
   283b0:	f7fd fa48 	bl	25844 <z_spin_unlock_valid>
   283b4:	2800      	cmp	r0, #0
   283b6:	d0e6      	beq.n	28386 <z_impl_k_poll+0xbe>
   283b8:	f38a 8811 	msr	BASEPRI, sl
   283bc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   283c0:	f06f 040a 	mvn.w	r4, #10
   283c4:	e7ea      	b.n	2839c <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   283c6:	4651      	mov	r1, sl
   283c8:	e9cd 7600 	strd	r7, r6, [sp]
   283cc:	4a16      	ldr	r2, [pc, #88]	; (28428 <z_impl_k_poll+0x160>)
   283ce:	4814      	ldr	r0, [pc, #80]	; (28420 <z_impl_k_poll+0x158>)
   283d0:	f7fe fda8 	bl	26f24 <z_pend_curr>
   283d4:	4604      	mov	r4, r0
	__asm__ volatile(
   283d6:	f04f 0320 	mov.w	r3, #32
   283da:	f3ef 8611 	mrs	r6, BASEPRI
   283de:	f383 8812 	msr	BASEPRI_MAX, r3
   283e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283e6:	480e      	ldr	r0, [pc, #56]	; (28420 <z_impl_k_poll+0x158>)
   283e8:	f7fd fa1e 	bl	25828 <z_spin_lock_valid>
   283ec:	2800      	cmp	r0, #0
   283ee:	d0b3      	beq.n	28358 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   283f0:	480b      	ldr	r0, [pc, #44]	; (28420 <z_impl_k_poll+0x158>)
   283f2:	f7fd fa35 	bl	25860 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   283f6:	4628      	mov	r0, r5
   283f8:	4632      	mov	r2, r6
   283fa:	4649      	mov	r1, r9
   283fc:	f7ff feb2 	bl	28164 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28400:	4807      	ldr	r0, [pc, #28]	; (28420 <z_impl_k_poll+0x158>)
   28402:	f7fd fa1f 	bl	25844 <z_spin_unlock_valid>
   28406:	2800      	cmp	r0, #0
   28408:	d0bd      	beq.n	28386 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   2840a:	f386 8811 	msr	BASEPRI, r6
   2840e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   28412:	e7c3      	b.n	2839c <z_impl_k_poll+0xd4>
   28414:	2000b0c0 	.word	0x2000b0c0
   28418:	00035462 	.word	0x00035462
   2841c:	00030da5 	.word	0x00030da5
   28420:	2000b118 	.word	0x2000b118
   28424:	00030eb4 	.word	0x00030eb4
   28428:	20008bbc 	.word	0x20008bbc

0002842c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2842c:	b570      	push	{r4, r5, r6, lr}
   2842e:	4604      	mov	r4, r0
   28430:	460d      	mov	r5, r1
	__asm__ volatile(
   28432:	f04f 0320 	mov.w	r3, #32
   28436:	f3ef 8611 	mrs	r6, BASEPRI
   2843a:	f383 8812 	msr	BASEPRI_MAX, r3
   2843e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28442:	481b      	ldr	r0, [pc, #108]	; (284b0 <z_impl_k_poll_signal_raise+0x84>)
   28444:	f7fd f9f0 	bl	25828 <z_spin_lock_valid>
   28448:	b940      	cbnz	r0, 2845c <z_impl_k_poll_signal_raise+0x30>
   2844a:	491a      	ldr	r1, [pc, #104]	; (284b4 <z_impl_k_poll_signal_raise+0x88>)
   2844c:	2294      	movs	r2, #148	; 0x94
   2844e:	481a      	ldr	r0, [pc, #104]	; (284b8 <z_impl_k_poll_signal_raise+0x8c>)
   28450:	f000 fbb8 	bl	28bc4 <assert_print>
   28454:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28456:	4817      	ldr	r0, [pc, #92]	; (284b4 <z_impl_k_poll_signal_raise+0x88>)
   28458:	f000 fbad 	bl	28bb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2845c:	4814      	ldr	r0, [pc, #80]	; (284b0 <z_impl_k_poll_signal_raise+0x84>)
   2845e:	f7fd f9ff 	bl	25860 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   28462:	2101      	movs	r1, #1
	return list->head == list;
   28464:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   28466:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28468:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2846a:	60a1      	str	r1, [r4, #8]
   2846c:	d10a      	bne.n	28484 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2846e:	4810      	ldr	r0, [pc, #64]	; (284b0 <z_impl_k_poll_signal_raise+0x84>)
   28470:	f7fd f9e8 	bl	25844 <z_spin_unlock_valid>
   28474:	b9b0      	cbnz	r0, 284a4 <z_impl_k_poll_signal_raise+0x78>
   28476:	490f      	ldr	r1, [pc, #60]	; (284b4 <z_impl_k_poll_signal_raise+0x88>)
   28478:	22c2      	movs	r2, #194	; 0xc2
   2847a:	480f      	ldr	r0, [pc, #60]	; (284b8 <z_impl_k_poll_signal_raise+0x8c>)
   2847c:	f000 fba2 	bl	28bc4 <assert_print>
   28480:	21c2      	movs	r1, #194	; 0xc2
   28482:	e7e8      	b.n	28456 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   28484:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28488:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2848a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2848c:	2300      	movs	r3, #0
	node->prev = NULL;
   2848e:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28492:	f007 f8ea 	bl	2f66a <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   28496:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28498:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2849a:	4805      	ldr	r0, [pc, #20]	; (284b0 <z_impl_k_poll_signal_raise+0x84>)
   2849c:	f7fe faee 	bl	26a7c <z_reschedule>
	return rc;
}
   284a0:	4620      	mov	r0, r4
   284a2:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   284a4:	f386 8811 	msr	BASEPRI, r6
   284a8:	f3bf 8f6f 	isb	sy
		return 0;
   284ac:	2400      	movs	r4, #0
   284ae:	e7f7      	b.n	284a0 <z_impl_k_poll_signal_raise+0x74>
   284b0:	2000b118 	.word	0x2000b118
   284b4:	00030eb4 	.word	0x00030eb4
   284b8:	00030da5 	.word	0x00030da5

000284bc <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   284bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   284be:	3204      	adds	r2, #4
   284c0:	4605      	mov	r5, r0
   284c2:	460c      	mov	r4, r1
   284c4:	d217      	bcs.n	284f6 <z_heap_aligned_alloc+0x3a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   284c6:	2600      	movs	r6, #0
   284c8:	2700      	movs	r7, #0
   284ca:	f041 0104 	orr.w	r1, r1, #4
   284ce:	e9cd 6700 	strd	r6, r7, [sp]
   284d2:	f7fc ff1d 	bl	25310 <k_heap_aligned_alloc>
	if (mem == NULL) {
   284d6:	b170      	cbz	r0, 284f6 <z_heap_aligned_alloc+0x3a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   284d8:	f840 5b04 	str.w	r5, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   284dc:	b164      	cbz	r4, 284f8 <z_heap_aligned_alloc+0x3c>
   284de:	3c01      	subs	r4, #1
   284e0:	4220      	tst	r0, r4
   284e2:	d009      	beq.n	284f8 <z_heap_aligned_alloc+0x3c>
   284e4:	4905      	ldr	r1, [pc, #20]	; (284fc <z_heap_aligned_alloc+0x40>)
   284e6:	4806      	ldr	r0, [pc, #24]	; (28500 <z_heap_aligned_alloc+0x44>)
   284e8:	2225      	movs	r2, #37	; 0x25
   284ea:	f000 fb6b 	bl	28bc4 <assert_print>
   284ee:	2125      	movs	r1, #37	; 0x25
   284f0:	4802      	ldr	r0, [pc, #8]	; (284fc <z_heap_aligned_alloc+0x40>)
   284f2:	f000 fb60 	bl	28bb6 <assert_post_action>
		return NULL;
   284f6:	2000      	movs	r0, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   284f8:	b003      	add	sp, #12
   284fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   284fc:	00035483 	.word	0x00035483
   28500:	00030da5 	.word	0x00030da5

00028504 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   28504:	2803      	cmp	r0, #3
{
   28506:	460a      	mov	r2, r1
   28508:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2850a:	d901      	bls.n	28510 <k_aligned_alloc+0xc>
   2850c:	0783      	lsls	r3, r0, #30
   2850e:	d008      	beq.n	28522 <k_aligned_alloc+0x1e>
   28510:	490c      	ldr	r1, [pc, #48]	; (28544 <k_aligned_alloc+0x40>)
   28512:	2242      	movs	r2, #66	; 0x42
   28514:	480c      	ldr	r0, [pc, #48]	; (28548 <k_aligned_alloc+0x44>)
   28516:	f000 fb55 	bl	28bc4 <assert_print>
   2851a:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2851c:	4809      	ldr	r0, [pc, #36]	; (28544 <k_aligned_alloc+0x40>)
   2851e:	f000 fb4a 	bl	28bb6 <assert_post_action>
   28522:	1e43      	subs	r3, r0, #1
   28524:	4203      	tst	r3, r0
   28526:	d006      	beq.n	28536 <k_aligned_alloc+0x32>
   28528:	4906      	ldr	r1, [pc, #24]	; (28544 <k_aligned_alloc+0x40>)
   2852a:	2246      	movs	r2, #70	; 0x46
   2852c:	4806      	ldr	r0, [pc, #24]	; (28548 <k_aligned_alloc+0x44>)
   2852e:	f000 fb49 	bl	28bc4 <assert_print>
   28532:	2146      	movs	r1, #70	; 0x46
   28534:	e7f2      	b.n	2851c <k_aligned_alloc+0x18>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28536:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   28538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2853c:	4803      	ldr	r0, [pc, #12]	; (2854c <k_aligned_alloc+0x48>)
   2853e:	f7ff bfbd 	b.w	284bc <z_heap_aligned_alloc>
   28542:	bf00      	nop
   28544:	00035483 	.word	0x00035483
   28548:	00030da5 	.word	0x00030da5
   2854c:	20008e2c 	.word	0x20008e2c

00028550 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   28550:	4b01      	ldr	r3, [pc, #4]	; (28558 <k_thread_system_pool_assign+0x8>)
   28552:	6743      	str	r3, [r0, #116]	; 0x74
}
   28554:	4770      	bx	lr
   28556:	bf00      	nop
   28558:	20008e2c 	.word	0x20008e2c

0002855c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2855c:	b538      	push	{r3, r4, r5, lr}
   2855e:	4604      	mov	r4, r0
   28560:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28562:	f006 ff06 	bl	2f372 <k_is_in_isr>
   28566:	b920      	cbnz	r0, 28572 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28568:	4b06      	ldr	r3, [pc, #24]	; (28584 <z_thread_aligned_alloc+0x28>)
   2856a:	689b      	ldr	r3, [r3, #8]
   2856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2856e:	b90b      	cbnz	r3, 28574 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   28570:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   28572:	4b05      	ldr	r3, [pc, #20]	; (28588 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   28574:	462a      	mov	r2, r5
   28576:	4621      	mov	r1, r4
   28578:	4618      	mov	r0, r3
}
   2857a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2857e:	f7ff bf9d 	b.w	284bc <z_heap_aligned_alloc>
   28582:	bf00      	nop
   28584:	2000b0c0 	.word	0x2000b0c0
   28588:	20008e2c 	.word	0x20008e2c

0002858c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2858c:	4801      	ldr	r0, [pc, #4]	; (28594 <boot_banner+0x8>)
   2858e:	f000 b911 	b.w	287b4 <printk>
   28592:	bf00      	nop
   28594:	000354a7 	.word	0x000354a7

00028598 <led_status>:
{
   28598:	b538      	push	{r3, r4, r5, lr}
	status->remaining_time = led->remaining ? led->remaining :
   2859a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
{
   2859e:	4605      	mov	r5, r0
   285a0:	460c      	mov	r4, r1
	status->remaining_time = led->remaining ? led->remaining :
   285a2:	b123      	cbz	r3, 285ae <led_status+0x16>
   285a4:	604b      	str	r3, [r1, #4]
	status->target_on_off = led->value;
   285a6:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
	status->present_on_off = led->value || status->remaining_time;
   285aa:	2301      	movs	r3, #1
   285ac:	e016      	b.n	285dc <led_status+0x44>
	return z_timeout_remaining(&dwork->timeout);
   285ae:	3098      	adds	r0, #152	; 0x98
   285b0:	f7ff faa6 	bl	27b00 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   285b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   285b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
   285bc:	fba0 3203 	umull	r3, r2, r0, r3
   285c0:	185b      	adds	r3, r3, r1
   285c2:	f142 0200 	adc.w	r2, r2, #0
   285c6:	0bdb      	lsrs	r3, r3, #15
   285c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	status->remaining_time = led->remaining ? led->remaining :
   285cc:	6063      	str	r3, [r4, #4]
	status->target_on_off = led->value;
   285ce:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
	status->present_on_off = led->value || status->remaining_time;
   285d2:	2a00      	cmp	r2, #0
   285d4:	d1e9      	bne.n	285aa <led_status+0x12>
   285d6:	3b00      	subs	r3, #0
   285d8:	bf18      	it	ne
   285da:	2301      	movne	r3, #1
	status->target_on_off = led->value;
   285dc:	7062      	strb	r2, [r4, #1]
	status->present_on_off = led->value || status->remaining_time;
   285de:	7023      	strb	r3, [r4, #0]
}
   285e0:	bd38      	pop	{r3, r4, r5, pc}

000285e2 <led_get>:
	led_status(led, rsp);
   285e2:	4611      	mov	r1, r2
   285e4:	f7ff bfd8 	b.w	28598 <led_status>

000285e8 <cbpprintf_external>:
{
   285e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   285ec:	4606      	mov	r6, r0
   285ee:	460d      	mov	r5, r1
   285f0:	4617      	mov	r7, r2
	if (buf == NULL) {
   285f2:	4698      	mov	r8, r3
   285f4:	b32b      	cbz	r3, 28642 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   285f6:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   285fa:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   285fe:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   28602:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   28604:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   28606:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2860a:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2860e:	441c      	add	r4, r3
   28610:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   28612:	45ca      	cmp	sl, r9
   28614:	d309      	bcc.n	2862a <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   28616:	4639      	mov	r1, r7
   28618:	4630      	mov	r0, r6
   2861a:	46ac      	mov	ip, r5
   2861c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   28620:	f108 0308 	add.w	r3, r8, #8
}
   28624:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   28628:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2862a:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2862e:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   28632:	4620      	mov	r0, r4
		*ps = s;
   28634:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   28638:	f001 ff19 	bl	2a46e <strlen>
   2863c:	3001      	adds	r0, #1
   2863e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   28640:	e7e7      	b.n	28612 <cbpprintf_external+0x2a>
}
   28642:	f06f 0015 	mvn.w	r0, #21
   28646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002864a <is_ptr>:
{
   2864a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2864c:	2500      	movs	r5, #0
{
   2864e:	4602      	mov	r2, r0
	bool mod = false;
   28650:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   28652:	4614      	mov	r4, r2
   28654:	f814 3b01 	ldrb.w	r3, [r4], #1
   28658:	b90b      	cbnz	r3, 2865e <is_ptr+0x14>
					return false;
   2865a:	4618      	mov	r0, r3
   2865c:	e009      	b.n	28672 <is_ptr+0x28>
		if (mod) {
   2865e:	b198      	cbz	r0, 28688 <is_ptr+0x3e>
			if (cnt == n) {
   28660:	428d      	cmp	r5, r1
   28662:	d107      	bne.n	28674 <is_ptr+0x2a>
				if (c == 'p') {
   28664:	2b70      	cmp	r3, #112	; 0x70
   28666:	d004      	beq.n	28672 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   28668:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2866c:	2a3a      	cmp	r2, #58	; 0x3a
   2866e:	d80b      	bhi.n	28688 <is_ptr+0x3e>
					return false;
   28670:	2000      	movs	r0, #0
}
   28672:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   28674:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   28678:	2e3a      	cmp	r6, #58	; 0x3a
   2867a:	d805      	bhi.n	28688 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2867c:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2867e:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   28680:	1c94      	adds	r4, r2, #2
   28682:	2b00      	cmp	r3, #0
   28684:	d0e9      	beq.n	2865a <is_ptr+0x10>
   28686:	2000      	movs	r0, #0
		if (c == '%') {
   28688:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2868a:	4622      	mov	r2, r4
			mod = !mod;
   2868c:	bf08      	it	eq
   2868e:	f080 0001 	eoreq.w	r0, r0, #1
   28692:	e7de      	b.n	28652 <is_ptr+0x8>

00028694 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   28694:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   28696:	2364      	movs	r3, #100	; 0x64
{
   28698:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2869a:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2869c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2869e:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   286a0:	b969      	cbnz	r1, 286be <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   286a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   286a4:	429a      	cmp	r2, r3
   286a6:	fbb2 f4f3 	udiv	r4, r2, r3
   286aa:	d20c      	bcs.n	286c6 <u8_to_dec+0x32>
   286ac:	2b01      	cmp	r3, #1
   286ae:	d00a      	beq.n	286c6 <u8_to_dec+0x32>
   286b0:	b948      	cbnz	r0, 286c6 <u8_to_dec+0x32>
		value -= digit * divisor;
   286b2:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   286b6:	240a      	movs	r4, #10
   286b8:	fbb3 f3f4 	udiv	r3, r3, r4
   286bc:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   286be:	3e01      	subs	r6, #1
   286c0:	d1f0      	bne.n	286a4 <u8_to_dec+0x10>
		*buf = '\0';
   286c2:	702e      	strb	r6, [r5, #0]
	return num_digits;
   286c4:	e7ed      	b.n	286a2 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   286c6:	3430      	adds	r4, #48	; 0x30
   286c8:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   286cc:	fbb2 f4f3 	udiv	r4, r2, r3
   286d0:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   286d4:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   286d8:	3901      	subs	r1, #1
			num_digits++;
   286da:	3001      	adds	r0, #1
			buflen--;
   286dc:	b2c9      	uxtb	r1, r1
			num_digits++;
   286de:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   286e0:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   286e2:	b2db      	uxtb	r3, r3
   286e4:	e7dc      	b.n	286a0 <u8_to_dec+0xc>

000286e6 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   286e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   286ea:	b2db      	uxtb	r3, r3
   286ec:	2b09      	cmp	r3, #9
   286ee:	d802      	bhi.n	286f6 <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   286f0:	2000      	movs	r0, #0
		*x = c - '0';
   286f2:	700b      	strb	r3, [r1, #0]
   286f4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   286f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   286fa:	2b05      	cmp	r3, #5
   286fc:	d802      	bhi.n	28704 <char2hex+0x1e>
		*x = c - 'a' + 10;
   286fe:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   28700:	b2c3      	uxtb	r3, r0
   28702:	e7f5      	b.n	286f0 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   28704:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   28708:	2b05      	cmp	r3, #5
   2870a:	d801      	bhi.n	28710 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2870c:	3837      	subs	r0, #55	; 0x37
   2870e:	e7f7      	b.n	28700 <char2hex+0x1a>
		return -EINVAL;
   28710:	f06f 0015 	mvn.w	r0, #21
}
   28714:	4770      	bx	lr

00028716 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   28716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28718:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2871a:	f001 0001 	and.w	r0, r1, #1
   2871e:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   28722:	429e      	cmp	r6, r3
   28724:	ea4f 0751 	mov.w	r7, r1, lsr #1
   28728:	d903      	bls.n	28732 <hex2bin+0x1c>
		return 0;
   2872a:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2872c:	4630      	mov	r0, r6
   2872e:	b003      	add	sp, #12
   28730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   28732:	b158      	cbz	r0, 2874c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   28734:	7828      	ldrb	r0, [r5, #0]
   28736:	f10d 0107 	add.w	r1, sp, #7
   2873a:	f7ff ffd4 	bl	286e6 <char2hex>
   2873e:	2800      	cmp	r0, #0
   28740:	dbf3      	blt.n	2872a <hex2bin+0x14>
		buf[0] = dec;
   28742:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   28746:	3501      	adds	r5, #1
		buf[0] = dec;
   28748:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2874c:	3501      	adds	r5, #1
   2874e:	4417      	add	r7, r2
   28750:	42ba      	cmp	r2, r7
   28752:	d0eb      	beq.n	2872c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   28754:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   28758:	f10d 0107 	add.w	r1, sp, #7
   2875c:	f7ff ffc3 	bl	286e6 <char2hex>
   28760:	2800      	cmp	r0, #0
   28762:	dbe2      	blt.n	2872a <hex2bin+0x14>
		buf[i] = dec << 4;
   28764:	f89d 4007 	ldrb.w	r4, [sp, #7]
   28768:	0124      	lsls	r4, r4, #4
   2876a:	b2e4      	uxtb	r4, r4
   2876c:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2876e:	f815 0b02 	ldrb.w	r0, [r5], #2
   28772:	f7ff ffb8 	bl	286e6 <char2hex>
   28776:	2800      	cmp	r0, #0
   28778:	dbd7      	blt.n	2872a <hex2bin+0x14>
		buf[i] += dec;
   2877a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2877e:	441c      	add	r4, r3
   28780:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   28784:	e7e4      	b.n	28750 <hex2bin+0x3a>

00028786 <arch_printk_char_out>:
}
   28786:	2000      	movs	r0, #0
   28788:	4770      	bx	lr

0002878a <str_out>:
{
   2878a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2878c:	688a      	ldr	r2, [r1, #8]
   2878e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   28790:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   28792:	b114      	cbz	r4, 2879a <str_out+0x10>
   28794:	684b      	ldr	r3, [r1, #4]
   28796:	4293      	cmp	r3, r2
   28798:	dc01      	bgt.n	2879e <str_out+0x14>
		ctx->count++;
   2879a:	608d      	str	r5, [r1, #8]
}
   2879c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2879e:	3b01      	subs	r3, #1
   287a0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   287a2:	bf08      	it	eq
   287a4:	2200      	moveq	r2, #0
   287a6:	608d      	str	r5, [r1, #8]
   287a8:	bf0c      	ite	eq
   287aa:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   287ac:	54a0      	strbne	r0, [r4, r2]
   287ae:	e7f5      	b.n	2879c <str_out+0x12>

000287b0 <vprintk>:
		z_log_vprintk(fmt, ap);
   287b0:	f000 bb42 	b.w	28e38 <z_log_vprintk>

000287b4 <printk>:
{
   287b4:	b40f      	push	{r0, r1, r2, r3}
   287b6:	b507      	push	{r0, r1, r2, lr}
   287b8:	a904      	add	r1, sp, #16
   287ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   287be:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   287c0:	f000 fb3a 	bl	28e38 <z_log_vprintk>
}
   287c4:	b003      	add	sp, #12
   287c6:	f85d eb04 	ldr.w	lr, [sp], #4
   287ca:	b004      	add	sp, #16
   287cc:	4770      	bx	lr

000287ce <snprintk>:
{
   287ce:	b40c      	push	{r2, r3}
   287d0:	b507      	push	{r0, r1, r2, lr}
   287d2:	ab04      	add	r3, sp, #16
   287d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   287d8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   287da:	f7e0 fb85 	bl	8ee8 <vsnprintk>
}
   287de:	b003      	add	sp, #12
   287e0:	f85d eb04 	ldr.w	lr, [sp], #4
   287e4:	b002      	add	sp, #8
   287e6:	4770      	bx	lr

000287e8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   287e8:	4604      	mov	r4, r0
   287ea:	b508      	push	{r3, lr}
   287ec:	4608      	mov	r0, r1
   287ee:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   287f0:	461a      	mov	r2, r3
   287f2:	47a0      	blx	r4
	return z_impl_z_current_get();
   287f4:	f7fe ff0c 	bl	27610 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   287f8:	f7e4 ff0a 	bl	d610 <z_impl_k_thread_abort>

000287fc <chunk_size>:
		return ((uint16_t *)cmem)[f];
   287fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   28800:	8840      	ldrh	r0, [r0, #2]
}
   28802:	0840      	lsrs	r0, r0, #1
   28804:	4770      	bx	lr

00028806 <free_list_add>:
{
   28806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28808:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2880a:	f7ff fff7 	bl	287fc <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2880e:	fab0 f080 	clz	r0, r0
   28812:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   28816:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2881a:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2881e:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   28820:	1d17      	adds	r7, r2, #4
{
   28822:	460c      	mov	r4, r1
   28824:	3206      	adds	r2, #6
   28826:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   28828:	b956      	cbnz	r6, 28840 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2882a:	2101      	movs	r1, #1
   2882c:	fa01 f000 	lsl.w	r0, r1, r0
   28830:	68d9      	ldr	r1, [r3, #12]
   28832:	4301      	orrs	r1, r0
   28834:	60d9      	str	r1, [r3, #12]
		b->next = c;
   28836:	f8cc 4010 	str.w	r4, [ip, #16]
   2883a:	53dd      	strh	r5, [r3, r7]
   2883c:	529d      	strh	r5, [r3, r2]
}
   2883e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   28840:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   28842:	3104      	adds	r1, #4
   28844:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   28846:	53d8      	strh	r0, [r3, r7]
   28848:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2884c:	529e      	strh	r6, [r3, r2]
   2884e:	80c5      	strh	r5, [r0, #6]
   28850:	525d      	strh	r5, [r3, r1]
   28852:	e7f4      	b.n	2883e <free_list_add+0x38>

00028854 <free_list_remove_bidx>:
{
   28854:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   28856:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2885a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2885c:	4299      	cmp	r1, r3
   2885e:	f102 0104 	add.w	r1, r2, #4
   28862:	d10a      	bne.n	2887a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   28864:	2301      	movs	r3, #1
   28866:	fa03 f202 	lsl.w	r2, r3, r2
   2886a:	68c3      	ldr	r3, [r0, #12]
   2886c:	ea23 0302 	bic.w	r3, r3, r2
   28870:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   28872:	2300      	movs	r3, #0
   28874:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   28878:	bd10      	pop	{r4, pc}
   2887a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2887c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   28880:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   28884:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   28888:	80cb      	strh	r3, [r1, #6]
   2888a:	8082      	strh	r2, [r0, #4]
}
   2888c:	e7f4      	b.n	28878 <free_list_remove_bidx+0x24>

0002888e <free_list_remove>:
{
   2888e:	b508      	push	{r3, lr}
   28890:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   28892:	f7ff ffb3 	bl	287fc <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28896:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2889a:	4618      	mov	r0, r3
}
   2889c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   288a0:	f1c2 021f 	rsb	r2, r2, #31
   288a4:	f7ff bfd6 	b.w	28854 <free_list_remove_bidx>

000288a8 <alloc_chunk>:
{
   288a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   288ac:	fab1 f581 	clz	r5, r1
   288b0:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   288b4:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   288b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   288bc:	4603      	mov	r3, r0
   288be:	460e      	mov	r6, r1
	if (b->next) {
   288c0:	b1c2      	cbz	r2, 288f4 <alloc_chunk+0x4c>
   288c2:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   288c4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   288c8:	4618      	mov	r0, r3
   288ca:	4621      	mov	r1, r4
   288cc:	f7ff ff96 	bl	287fc <chunk_size>
   288d0:	42b0      	cmp	r0, r6
   288d2:	d306      	bcc.n	288e2 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   288d4:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   288d6:	4618      	mov	r0, r3
   288d8:	f7ff ffbc 	bl	28854 <free_list_remove_bidx>
}
   288dc:	4620      	mov	r0, r4
   288de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   288e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   288e6:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   288e8:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   288ea:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   288ee:	d001      	beq.n	288f4 <alloc_chunk+0x4c>
   288f0:	4282      	cmp	r2, r0
   288f2:	d1e7      	bne.n	288c4 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   288f4:	f04f 34ff 	mov.w	r4, #4294967295
   288f8:	f1c5 0220 	rsb	r2, r5, #32
   288fc:	4094      	lsls	r4, r2
   288fe:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   28900:	4014      	ands	r4, r2
   28902:	d0eb      	beq.n	288dc <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   28904:	fa94 f2a4 	rbit	r2, r4
   28908:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2890c:	1d11      	adds	r1, r2, #4
   2890e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   28912:	4621      	mov	r1, r4
   28914:	e7df      	b.n	288d6 <alloc_chunk+0x2e>

00028916 <merge_chunks>:
{
   28916:	b538      	push	{r3, r4, r5, lr}
   28918:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2891a:	f7ff ff6f 	bl	287fc <chunk_size>
{
   2891e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   28920:	4604      	mov	r4, r0
   28922:	4611      	mov	r1, r2
   28924:	4618      	mov	r0, r3
   28926:	f7ff ff69 	bl	287fc <chunk_size>
   2892a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2892c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2892e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   28932:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   28934:	4618      	mov	r0, r3
   28936:	f7ff ff61 	bl	287fc <chunk_size>
	void *cmem = &buf[c];
   2893a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2893c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   28940:	bd38      	pop	{r3, r4, r5, pc}

00028942 <split_chunks>:
{
   28942:	b538      	push	{r3, r4, r5, lr}
   28944:	460c      	mov	r4, r1
   28946:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   28948:	f7ff ff58 	bl	287fc <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2894c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2894e:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   28950:	4405      	add	r5, r0
   28952:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28956:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   28958:	8060      	strh	r0, [r4, #2]
   2895a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2895e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   28960:	8044      	strh	r4, [r0, #2]
   28962:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   28966:	4618      	mov	r0, r3
   28968:	4611      	mov	r1, r2
   2896a:	f7ff ff47 	bl	287fc <chunk_size>
	void *cmem = &buf[c];
   2896e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   28970:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   28974:	bd38      	pop	{r3, r4, r5, pc}

00028976 <free_chunk>:
{
   28976:	b538      	push	{r3, r4, r5, lr}
   28978:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2897a:	f7ff ff3f 	bl	287fc <chunk_size>
   2897e:	460c      	mov	r4, r1
   28980:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   28982:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28986:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   28988:	07da      	lsls	r2, r3, #31
   2898a:	d40a      	bmi.n	289a2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2898c:	4628      	mov	r0, r5
   2898e:	f7ff ff7e 	bl	2888e <free_list_remove>
	return c + chunk_size(h, c);
   28992:	4621      	mov	r1, r4
   28994:	4628      	mov	r0, r5
   28996:	f7ff ff31 	bl	287fc <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2899a:	1822      	adds	r2, r4, r0
   2899c:	4628      	mov	r0, r5
   2899e:	f7ff ffba 	bl	28916 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   289a2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   289a6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   289a8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   289ac:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   289ae:	07db      	lsls	r3, r3, #31
   289b0:	d40c      	bmi.n	289cc <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   289b2:	4628      	mov	r0, r5
   289b4:	f7ff ff6b 	bl	2888e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   289b8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   289bc:	4622      	mov	r2, r4
   289be:	1a61      	subs	r1, r4, r1
   289c0:	4628      	mov	r0, r5
   289c2:	f7ff ffa8 	bl	28916 <merge_chunks>
   289c6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   289ca:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   289cc:	4621      	mov	r1, r4
   289ce:	4628      	mov	r0, r5
}
   289d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   289d4:	f7ff bf17 	b.w	28806 <free_list_add>

000289d8 <sys_heap_alloc>:
{
   289d8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   289da:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   289dc:	b909      	cbnz	r1, 289e2 <sys_heap_alloc+0xa>
		return NULL;
   289de:	2000      	movs	r0, #0
}
   289e0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   289e2:	68ab      	ldr	r3, [r5, #8]
   289e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   289e8:	d9f9      	bls.n	289de <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   289ea:	310b      	adds	r1, #11
   289ec:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   289ee:	4621      	mov	r1, r4
   289f0:	4628      	mov	r0, r5
   289f2:	f7ff ff59 	bl	288a8 <alloc_chunk>
	if (c == 0U) {
   289f6:	4606      	mov	r6, r0
   289f8:	2800      	cmp	r0, #0
   289fa:	d0f0      	beq.n	289de <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   289fc:	4601      	mov	r1, r0
   289fe:	4628      	mov	r0, r5
   28a00:	f7ff fefc 	bl	287fc <chunk_size>
   28a04:	42a0      	cmp	r0, r4
   28a06:	d907      	bls.n	28a18 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   28a08:	4628      	mov	r0, r5
   28a0a:	1932      	adds	r2, r6, r4
   28a0c:	f7ff ff99 	bl	28942 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28a10:	4611      	mov	r1, r2
   28a12:	4628      	mov	r0, r5
   28a14:	f7ff fef7 	bl	28806 <free_list_add>
	void *cmem = &buf[c];
   28a18:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   28a1c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28a1e:	8853      	ldrh	r3, [r2, #2]
   28a20:	3004      	adds	r0, #4
   28a22:	f043 0301 	orr.w	r3, r3, #1
   28a26:	8053      	strh	r3, [r2, #2]
	return mem;
   28a28:	e7da      	b.n	289e0 <sys_heap_alloc+0x8>

00028a2a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28a2a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   28a2c:	f013 0307 	ands.w	r3, r3, #7
   28a30:	d105      	bne.n	28a3e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   28a32:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   28a34:	2b00      	cmp	r3, #0
   28a36:	bf0c      	ite	eq
   28a38:	2000      	moveq	r0, #0
   28a3a:	2003      	movne	r0, #3
   28a3c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28a3e:	2b02      	cmp	r3, #2
   28a40:	d105      	bne.n	28a4e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   28a42:	8bc0      	ldrh	r0, [r0, #30]
   28a44:	fab0 f080 	clz	r0, r0
   28a48:	0940      	lsrs	r0, r0, #5
   28a4a:	0080      	lsls	r0, r0, #2
   28a4c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   28a4e:	2b01      	cmp	r3, #1
   28a50:	d105      	bne.n	28a5e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   28a52:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   28a54:	2b00      	cmp	r3, #0
   28a56:	bf0c      	ite	eq
   28a58:	2000      	moveq	r0, #0
   28a5a:	2005      	movne	r0, #5
   28a5c:	4770      	bx	lr
	int evt = EVT_NOP;
   28a5e:	2000      	movs	r0, #0
}
   28a60:	4770      	bx	lr

00028a62 <validate_args>:
{
   28a62:	b510      	push	{r4, lr}
   28a64:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28a66:	b100      	cbz	r0, 28a6a <validate_args+0x8>
   28a68:	b911      	cbnz	r1, 28a70 <validate_args+0xe>
		return -EINVAL;
   28a6a:	f06f 0015 	mvn.w	r0, #21
}
   28a6e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   28a70:	1d08      	adds	r0, r1, #4
   28a72:	f000 f82f 	bl	28ad4 <sys_notify_validate>
	if ((rv == 0)
   28a76:	2800      	cmp	r0, #0
   28a78:	d1f9      	bne.n	28a6e <validate_args+0xc>
	    && ((cli->notify.flags
   28a7a:	68a3      	ldr	r3, [r4, #8]
   28a7c:	2b03      	cmp	r3, #3
   28a7e:	d9f6      	bls.n	28a6e <validate_args+0xc>
   28a80:	e7f3      	b.n	28a6a <validate_args+0x8>

00028a82 <notify_one>:
{
   28a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a86:	460d      	mov	r5, r1
   28a88:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28a8a:	4619      	mov	r1, r3
   28a8c:	1d28      	adds	r0, r5, #4
{
   28a8e:	4690      	mov	r8, r2
   28a90:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28a92:	f7e0 fd9f 	bl	95d4 <sys_notify_finalize>
	if (cb) {
   28a96:	4604      	mov	r4, r0
   28a98:	b138      	cbz	r0, 28aaa <notify_one+0x28>
		cb(mgr, cli, state, res);
   28a9a:	4633      	mov	r3, r6
   28a9c:	4642      	mov	r2, r8
   28a9e:	4629      	mov	r1, r5
   28aa0:	4638      	mov	r0, r7
   28aa2:	46a4      	mov	ip, r4
}
   28aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   28aa8:	4760      	bx	ip
}
   28aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028aae <onoff_manager_init>:
{
   28aae:	b538      	push	{r3, r4, r5, lr}
   28ab0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   28ab2:	4605      	mov	r5, r0
   28ab4:	b158      	cbz	r0, 28ace <onoff_manager_init+0x20>
	    || (transitions == NULL)
   28ab6:	b151      	cbz	r1, 28ace <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   28ab8:	680b      	ldr	r3, [r1, #0]
   28aba:	b143      	cbz	r3, 28ace <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   28abc:	684b      	ldr	r3, [r1, #4]
   28abe:	b133      	cbz	r3, 28ace <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   28ac0:	2220      	movs	r2, #32
   28ac2:	2100      	movs	r1, #0
   28ac4:	f001 fd34 	bl	2a530 <memset>
	return 0;
   28ac8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   28aca:	612c      	str	r4, [r5, #16]
}
   28acc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28ace:	f06f 0015 	mvn.w	r0, #21
   28ad2:	e7fb      	b.n	28acc <onoff_manager_init+0x1e>

00028ad4 <sys_notify_validate>:
	if (notify == NULL) {
   28ad4:	4603      	mov	r3, r0
   28ad6:	b140      	cbz	r0, 28aea <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   28ad8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   28ada:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   28ade:	2a02      	cmp	r2, #2
   28ae0:	d006      	beq.n	28af0 <sys_notify_validate+0x1c>
   28ae2:	2a03      	cmp	r2, #3
   28ae4:	d004      	beq.n	28af0 <sys_notify_validate+0x1c>
   28ae6:	2a01      	cmp	r2, #1
   28ae8:	d005      	beq.n	28af6 <sys_notify_validate+0x22>
   28aea:	f06f 0015 	mvn.w	r0, #21
}
   28aee:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   28af0:	681a      	ldr	r2, [r3, #0]
   28af2:	2a00      	cmp	r2, #0
   28af4:	d0f9      	beq.n	28aea <sys_notify_validate+0x16>
		notify->result = 0;
   28af6:	2000      	movs	r0, #0
   28af8:	6098      	str	r0, [r3, #8]
   28afa:	4770      	bx	lr

00028afc <encode_uint>:
{
   28afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b00:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   28b02:	78d3      	ldrb	r3, [r2, #3]
{
   28b04:	4680      	mov	r8, r0
	switch (specifier) {
   28b06:	2b6f      	cmp	r3, #111	; 0x6f
{
   28b08:	460f      	mov	r7, r1
   28b0a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28b0c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   28b10:	d029      	beq.n	28b66 <encode_uint+0x6a>
   28b12:	d824      	bhi.n	28b5e <encode_uint+0x62>
		return 10;
   28b14:	2b58      	cmp	r3, #88	; 0x58
   28b16:	bf0c      	ite	eq
   28b18:	2610      	moveq	r6, #16
   28b1a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   28b1c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   28b20:	4632      	mov	r2, r6
   28b22:	2300      	movs	r3, #0
   28b24:	4640      	mov	r0, r8
   28b26:	4639      	mov	r1, r7
   28b28:	f7df fb14 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b2c:	2a09      	cmp	r2, #9
   28b2e:	b2d4      	uxtb	r4, r2
   28b30:	d81e      	bhi.n	28b70 <encode_uint+0x74>
   28b32:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   28b34:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b36:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   28b38:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b3c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   28b40:	d301      	bcc.n	28b46 <encode_uint+0x4a>
   28b42:	45d1      	cmp	r9, sl
   28b44:	d811      	bhi.n	28b6a <encode_uint+0x6e>
	if (conv->flag_hash) {
   28b46:	782b      	ldrb	r3, [r5, #0]
   28b48:	069b      	lsls	r3, r3, #26
   28b4a:	d505      	bpl.n	28b58 <encode_uint+0x5c>
		if (radix == 8) {
   28b4c:	2e08      	cmp	r6, #8
   28b4e:	d115      	bne.n	28b7c <encode_uint+0x80>
			conv->altform_0 = true;
   28b50:	78ab      	ldrb	r3, [r5, #2]
   28b52:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   28b56:	70ab      	strb	r3, [r5, #2]
}
   28b58:	4648      	mov	r0, r9
   28b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   28b5e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   28b62:	2b70      	cmp	r3, #112	; 0x70
   28b64:	e7d7      	b.n	28b16 <encode_uint+0x1a>
	switch (specifier) {
   28b66:	2608      	movs	r6, #8
   28b68:	e7d8      	b.n	28b1c <encode_uint+0x20>
		value /= radix;
   28b6a:	4680      	mov	r8, r0
   28b6c:	460f      	mov	r7, r1
   28b6e:	e7d7      	b.n	28b20 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b70:	f1bb 0f19 	cmp.w	fp, #25
   28b74:	bf94      	ite	ls
   28b76:	3437      	addls	r4, #55	; 0x37
   28b78:	3457      	addhi	r4, #87	; 0x57
   28b7a:	e7db      	b.n	28b34 <encode_uint+0x38>
		} else if (radix == 16) {
   28b7c:	2e10      	cmp	r6, #16
   28b7e:	d1eb      	bne.n	28b58 <encode_uint+0x5c>
			conv->altform_0c = true;
   28b80:	78ab      	ldrb	r3, [r5, #2]
   28b82:	f043 0310 	orr.w	r3, r3, #16
   28b86:	e7e6      	b.n	28b56 <encode_uint+0x5a>

00028b88 <outs>:
{
   28b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b8c:	4607      	mov	r7, r0
   28b8e:	4688      	mov	r8, r1
   28b90:	4615      	mov	r5, r2
   28b92:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28b94:	4614      	mov	r4, r2
   28b96:	42b4      	cmp	r4, r6
   28b98:	d305      	bcc.n	28ba6 <outs+0x1e>
   28b9a:	b10e      	cbz	r6, 28ba0 <outs+0x18>
	return (int)count;
   28b9c:	1b60      	subs	r0, r4, r5
   28b9e:	e008      	b.n	28bb2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28ba0:	7823      	ldrb	r3, [r4, #0]
   28ba2:	2b00      	cmp	r3, #0
   28ba4:	d0fa      	beq.n	28b9c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   28ba6:	4641      	mov	r1, r8
   28ba8:	f814 0b01 	ldrb.w	r0, [r4], #1
   28bac:	47b8      	blx	r7
		if (rc < 0) {
   28bae:	2800      	cmp	r0, #0
   28bb0:	daf1      	bge.n	28b96 <outs+0xe>
}
   28bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028bb6 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   28bb6:	4040      	eors	r0, r0
   28bb8:	f380 8811 	msr	BASEPRI, r0
   28bbc:	f04f 0004 	mov.w	r0, #4
   28bc0:	df02      	svc	2
}
   28bc2:	4770      	bx	lr

00028bc4 <assert_print>:

void assert_print(const char *fmt, ...)
{
   28bc4:	b40f      	push	{r0, r1, r2, r3}
   28bc6:	b507      	push	{r0, r1, r2, lr}
   28bc8:	a904      	add	r1, sp, #16
   28bca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   28bce:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   28bd0:	f7ff fdee 	bl	287b0 <vprintk>

	va_end(ap);
}
   28bd4:	b003      	add	sp, #12
   28bd6:	f85d eb04 	ldr.w	lr, [sp], #4
   28bda:	b004      	add	sp, #16
   28bdc:	4770      	bx	lr

00028bde <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   28bde:	68c3      	ldr	r3, [r0, #12]
   28be0:	6802      	ldr	r2, [r0, #0]
   28be2:	4293      	cmp	r3, r2
   28be4:	d904      	bls.n	28bf0 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   28be6:	3b01      	subs	r3, #1
   28be8:	1a9a      	subs	r2, r3, r2
		return false;
   28bea:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28bec:	600a      	str	r2, [r1, #0]
}
   28bee:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28bf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   28bf2:	b913      	cbnz	r3, 28bfa <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28bf4:	3801      	subs	r0, #1
   28bf6:	1a82      	subs	r2, r0, r2
		return false;
   28bf8:	e7f7      	b.n	28bea <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   28bfa:	1a82      	subs	r2, r0, r2
	return true;
   28bfc:	2001      	movs	r0, #1
   28bfe:	e7f5      	b.n	28bec <free_space+0xe>

00028c00 <get_usage>:
{
   28c00:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   28c02:	a901      	add	r1, sp, #4
{
   28c04:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   28c06:	f7ff ffea 	bl	28bde <free_space>
   28c0a:	b120      	cbz	r0, 28c16 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   28c0c:	9b01      	ldr	r3, [sp, #4]
   28c0e:	68e2      	ldr	r2, [r4, #12]
   28c10:	3b01      	subs	r3, #1
   28c12:	4413      	add	r3, r2
   28c14:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   28c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28c18:	9b01      	ldr	r3, [sp, #4]
   28c1a:	1ac0      	subs	r0, r0, r3
}
   28c1c:	3801      	subs	r0, #1
   28c1e:	b002      	add	sp, #8
   28c20:	bd10      	pop	{r4, pc}

00028c22 <idx_inc>:
{
   28c22:	b510      	push	{r4, lr}
   28c24:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   28c26:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28c28:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   28c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28c2c:	07d2      	lsls	r2, r2, #31
   28c2e:	d502      	bpl.n	28c36 <idx_inc+0x14>
		return i & (buffer->size - 1);
   28c30:	3b01      	subs	r3, #1
   28c32:	4018      	ands	r0, r3
}
   28c34:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   28c36:	4298      	cmp	r0, r3
   28c38:	bf28      	it	cs
   28c3a:	1ac0      	subcs	r0, r0, r3
   28c3c:	e7fa      	b.n	28c34 <idx_inc+0x12>

00028c3e <add_skip_item>:
{
   28c3e:	b538      	push	{r3, r4, r5, lr}
   28c40:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28c42:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   28c44:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28c46:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   28c48:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28c4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28c50:	6801      	ldr	r1, [r0, #0]
   28c52:	462a      	mov	r2, r5
{
   28c54:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28c56:	f7ff ffe4 	bl	28c22 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28c5a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28c5c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28c5e:	462a      	mov	r2, r5
   28c60:	4620      	mov	r0, r4
   28c62:	f7ff ffde 	bl	28c22 <idx_inc>
   28c66:	6060      	str	r0, [r4, #4]
}
   28c68:	bd38      	pop	{r3, r4, r5, pc}

00028c6a <max_utilization_update>:
{
   28c6a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   28c6c:	6903      	ldr	r3, [r0, #16]
{
   28c6e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   28c70:	075b      	lsls	r3, r3, #29
   28c72:	d506      	bpl.n	28c82 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   28c74:	6a85      	ldr	r5, [r0, #40]	; 0x28
   28c76:	f7ff ffc3 	bl	28c00 <get_usage>
   28c7a:	4285      	cmp	r5, r0
   28c7c:	bf2c      	ite	cs
   28c7e:	62a5      	strcs	r5, [r4, #40]	; 0x28
   28c80:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   28c82:	bd38      	pop	{r3, r4, r5, pc}

00028c84 <drop_item_locked>:
{
   28c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c88:	461f      	mov	r7, r3
	*user_packet = false;
   28c8a:	2300      	movs	r3, #0
   28c8c:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28c8e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   28c92:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   28c96:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   28c98:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   28c9c:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   28c9e:	f003 0303 	and.w	r3, r3, #3
   28ca2:	2b02      	cmp	r3, #2
{
   28ca4:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28ca6:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28caa:	d103      	bne.n	28cb4 <drop_item_locked+0x30>
		return item->skip.len;
   28cac:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   28cb0:	08ad      	lsrs	r5, r5, #2
   28cb2:	d12e      	bne.n	28d12 <drop_item_locked+0x8e>
   28cb4:	4630      	mov	r0, r6
   28cb6:	69e3      	ldr	r3, [r4, #28]
   28cb8:	4798      	blx	r3
   28cba:	4605      	mov	r5, r0
	} else if (allow_drop) {
   28cbc:	f1b8 0f00 	cmp.w	r8, #0
   28cc0:	d038      	beq.n	28d34 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   28cc2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   28cc6:	079b      	lsls	r3, r3, #30
   28cc8:	d531      	bpl.n	28d2e <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   28cca:	4620      	mov	r0, r4
   28ccc:	f10b 0101 	add.w	r1, fp, #1
   28cd0:	f7ff ffb5 	bl	28c3e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   28cd4:	6861      	ldr	r1, [r4, #4]
   28cd6:	462a      	mov	r2, r5
   28cd8:	4620      	mov	r0, r4
   28cda:	f7ff ffa2 	bl	28c22 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28cde:	6821      	ldr	r1, [r4, #0]
   28ce0:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   28ce2:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28ce4:	4620      	mov	r0, r4
   28ce6:	f7ff ff9c 	bl	28c22 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28cea:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   28cec:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28cee:	68e1      	ldr	r1, [r4, #12]
   28cf0:	4620      	mov	r0, r4
   28cf2:	f7ff ff96 	bl	28c22 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   28cf6:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   28cf8:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   28cfc:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28d00:	f002 0203 	and.w	r2, r2, #3
   28d04:	2a02      	cmp	r2, #2
   28d06:	d10e      	bne.n	28d26 <drop_item_locked+0xa2>
		return item->skip.len;
   28d08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   28d0c:	089b      	lsrs	r3, r3, #2
   28d0e:	d00a      	beq.n	28d26 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   28d10:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   28d12:	68e1      	ldr	r1, [r4, #12]
   28d14:	462a      	mov	r2, r5
   28d16:	4620      	mov	r0, r4
   28d18:	f7ff ff83 	bl	28c22 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   28d1c:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   28d20:	4630      	mov	r0, r6
   28d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   28d26:	4630      	mov	r0, r6
   28d28:	69e3      	ldr	r3, [r4, #28]
   28d2a:	4798      	blx	r3
   28d2c:	4405      	add	r5, r0
			*user_packet = true;
   28d2e:	2301      	movs	r3, #1
   28d30:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   28d32:	e7ee      	b.n	28d12 <drop_item_locked+0x8e>
		item = NULL;
   28d34:	4646      	mov	r6, r8
	return item;
   28d36:	e7f3      	b.n	28d20 <drop_item_locked+0x9c>

00028d38 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   28d38:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   28d3c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   28d3e:	bf88      	it	hi
   28d40:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   28d42:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   28d44:	1e18      	subs	r0, r3, #0
   28d46:	bf18      	it	ne
   28d48:	2001      	movne	r0, #1
   28d4a:	4770      	bx	lr

00028d4c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   28d4c:	4770      	bx	lr

00028d4e <nordicsemi_nrf53_init>:
{
   28d4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28d50:	f04f 0320 	mov.w	r3, #32
   28d54:	f3ef 8511 	mrs	r5, BASEPRI
   28d58:	f383 8812 	msr	BASEPRI_MAX, r3
   28d5c:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   28d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   28d64:	2401      	movs	r4, #1
   28d66:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   28d68:	4621      	mov	r1, r4
   28d6a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   28d6e:	2021      	movs	r0, #33	; 0x21
   28d70:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   28d74:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   28d78:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   28d7c:	f7e1 fbb0 	bl	a4e0 <soc_secure_gpio_pin_mcu_select>
   28d80:	4621      	mov	r1, r4
   28d82:	2020      	movs	r0, #32
   28d84:	f7e1 fbac 	bl	a4e0 <soc_secure_gpio_pin_mcu_select>
   28d88:	4621      	mov	r1, r4
   28d8a:	200b      	movs	r0, #11
   28d8c:	f7e1 fba8 	bl	a4e0 <soc_secure_gpio_pin_mcu_select>
   28d90:	4621      	mov	r1, r4
   28d92:	200a      	movs	r0, #10
   28d94:	f7e1 fba4 	bl	a4e0 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   28d98:	f385 8811 	msr	BASEPRI, r5
   28d9c:	f3bf 8f6f 	isb	sy
}
   28da0:	2000      	movs	r0, #0
   28da2:	bd38      	pop	{r3, r4, r5, pc}

00028da4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   28da4:	2806      	cmp	r0, #6
   28da6:	d108      	bne.n	28dba <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   28da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   28dac:	2201      	movs	r2, #1
   28dae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28db2:	f3bf 8f4f 	dsb	sy
        __WFE();
   28db6:	bf20      	wfe
    while (true)
   28db8:	e7fd      	b.n	28db6 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   28dba:	4770      	bx	lr

00028dbc <pm_state_exit_post_ops>:
   28dbc:	2300      	movs	r3, #0
   28dbe:	f383 8811 	msr	BASEPRI, r3
   28dc2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   28dc6:	4770      	bx	lr

00028dc8 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   28dc8:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   28dca:	ab01      	add	r3, sp, #4
   28dcc:	f005 fd0b 	bl	2e7e6 <tfm_platform_mem_read>

	switch (status) {
   28dd0:	2802      	cmp	r0, #2
   28dd2:	d00a      	beq.n	28dea <soc_secure_mem_read+0x22>
   28dd4:	2803      	cmp	r0, #3
   28dd6:	d00b      	beq.n	28df0 <soc_secure_mem_read+0x28>
   28dd8:	b968      	cbnz	r0, 28df6 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   28dda:	9801      	ldr	r0, [sp, #4]
   28ddc:	3800      	subs	r0, #0
   28dde:	bf18      	it	ne
   28de0:	2001      	movne	r0, #1
   28de2:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   28de4:	b003      	add	sp, #12
   28de6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   28dea:	f06f 0015 	mvn.w	r0, #21
   28dee:	e7f9      	b.n	28de4 <soc_secure_mem_read+0x1c>
	switch (status) {
   28df0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28df4:	e7f6      	b.n	28de4 <soc_secure_mem_read+0x1c>
		return -EPERM;
   28df6:	f04f 30ff 	mov.w	r0, #4294967295
   28dfa:	e7f3      	b.n	28de4 <soc_secure_mem_read+0x1c>

00028dfc <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   28dfc:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   28dfe:	075b      	lsls	r3, r3, #29
   28e00:	d40b      	bmi.n	28e1a <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28e02:	6803      	ldr	r3, [r0, #0]
   28e04:	8842      	ldrh	r2, [r0, #2]
   28e06:	f3c3 2349 	ubfx	r3, r3, #9, #10
   28e0a:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   28e0e:	1898      	adds	r0, r3, r2
   28e10:	3017      	adds	r0, #23
   28e12:	f020 0007 	bic.w	r0, r0, #7
   28e16:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   28e18:	4770      	bx	lr
	return 0;
   28e1a:	2000      	movs	r0, #0
}
   28e1c:	4770      	bx	lr

00028e1e <dummy_timestamp>:
}
   28e1e:	2000      	movs	r0, #0
   28e20:	4770      	bx	lr

00028e22 <default_get_timestamp>:
   28e22:	f005 ba96 	b.w	2e352 <sys_clock_cycle_get_32>

00028e26 <atomic_inc>:
{
   28e26:	4603      	mov	r3, r0
}
   28e28:	e8d3 0fef 	ldaex	r0, [r3]
   28e2c:	1c42      	adds	r2, r0, #1
   28e2e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   28e32:	2900      	cmp	r1, #0
   28e34:	d1f8      	bne.n	28e28 <atomic_inc+0x2>
   28e36:	4770      	bx	lr

00028e38 <z_log_vprintk>:
{
   28e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   28e3a:	2300      	movs	r3, #0
   28e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   28e40:	461a      	mov	r2, r3
   28e42:	4619      	mov	r1, r3
   28e44:	4618      	mov	r0, r3
   28e46:	e9cd 3300 	strd	r3, r3, [sp]
   28e4a:	f7e1 fee9 	bl	ac20 <z_impl_z_log_msg_runtime_vcreate>
}
   28e4e:	b005      	add	sp, #20
   28e50:	f85d fb04 	ldr.w	pc, [sp], #4

00028e54 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   28e54:	2001      	movs	r0, #1
   28e56:	f7e1 bc4f 	b.w	a6f8 <z_log_dropped>

00028e5a <z_log_get_tag>:
}
   28e5a:	2000      	movs	r0, #0
   28e5c:	4770      	bx	lr

00028e5e <z_cbprintf_cpy>:
{
   28e5e:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   28e60:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   28e64:	1b9b      	subs	r3, r3, r6
   28e66:	428b      	cmp	r3, r1
{
   28e68:	460c      	mov	r4, r1
   28e6a:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   28e6c:	d30a      	bcc.n	28e84 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   28e6e:	6813      	ldr	r3, [r2, #0]
   28e70:	460a      	mov	r2, r1
   28e72:	4601      	mov	r1, r0
   28e74:	1998      	adds	r0, r3, r6
   28e76:	f001 fb50 	bl	2a51a <memcpy>
	return len;
   28e7a:	4620      	mov	r0, r4
	desc->off += len;
   28e7c:	68ab      	ldr	r3, [r5, #8]
   28e7e:	4423      	add	r3, r4
   28e80:	60ab      	str	r3, [r5, #8]
}
   28e82:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   28e84:	f06f 001b 	mvn.w	r0, #27
   28e88:	e7fb      	b.n	28e82 <z_cbprintf_cpy+0x24>

00028e8a <z_log_msg_finalize>:
{
   28e8a:	b570      	push	{r4, r5, r6, lr}
   28e8c:	460e      	mov	r6, r1
   28e8e:	4615      	mov	r5, r2
   28e90:	4619      	mov	r1, r3
	if (!msg) {
   28e92:	4604      	mov	r4, r0
   28e94:	b918      	cbnz	r0, 28e9e <z_log_msg_finalize+0x14>
}
   28e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   28e9a:	f7e1 bc2d 	b.w	a6f8 <z_log_dropped>
	if (data) {
   28e9e:	b13b      	cbz	r3, 28eb0 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   28ea0:	f3c2 2349 	ubfx	r3, r2, #9, #10
   28ea4:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   28ea6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   28eaa:	4418      	add	r0, r3
   28eac:	f001 fb35 	bl	2a51a <memcpy>
	msg->hdr.source = source;
   28eb0:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   28eb4:	4620      	mov	r0, r4
}
   28eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   28eba:	f7e1 be0b 	b.w	aad4 <z_log_msg_commit>

00028ebe <buffer_write>:
{
   28ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ec0:	4606      	mov	r6, r0
   28ec2:	460d      	mov	r5, r1
   28ec4:	4614      	mov	r4, r2
   28ec6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28ec8:	4621      	mov	r1, r4
   28eca:	4628      	mov	r0, r5
   28ecc:	463a      	mov	r2, r7
   28ece:	47b0      	blx	r6
	} while (len != 0);
   28ed0:	1a24      	subs	r4, r4, r0
		buf += processed;
   28ed2:	4405      	add	r5, r0
	} while (len != 0);
   28ed4:	d1f8      	bne.n	28ec8 <buffer_write+0xa>
}
   28ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028ed8 <cbvprintf>:
{
   28ed8:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   28eda:	2400      	movs	r4, #0
   28edc:	9400      	str	r4, [sp, #0]
   28ede:	f7e0 fbb9 	bl	9654 <z_cbvprintf_impl>
}
   28ee2:	b002      	add	sp, #8
   28ee4:	bd10      	pop	{r4, pc}

00028ee6 <log_output_flush>:
{
   28ee6:	b510      	push	{r4, lr}
		     output->control_block->offset,
   28ee8:	6842      	ldr	r2, [r0, #4]
{
   28eea:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28eec:	e9d2 2300 	ldrd	r2, r3, [r2]
   28ef0:	6881      	ldr	r1, [r0, #8]
   28ef2:	6800      	ldr	r0, [r0, #0]
   28ef4:	f7ff ffe3 	bl	28ebe <buffer_write>
	output->control_block->offset = 0;
   28ef8:	2200      	movs	r2, #0
   28efa:	6863      	ldr	r3, [r4, #4]
   28efc:	601a      	str	r2, [r3, #0]
}
   28efe:	bd10      	pop	{r4, pc}

00028f00 <cr_out_func>:
	if (c == '\n') {
   28f00:	280a      	cmp	r0, #10
{
   28f02:	b538      	push	{r3, r4, r5, lr}
   28f04:	4604      	mov	r4, r0
   28f06:	460d      	mov	r5, r1
	if (c == '\n') {
   28f08:	d102      	bne.n	28f10 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   28f0a:	200d      	movs	r0, #13
   28f0c:	f7e1 ff08 	bl	ad20 <out_func>
	out_func(c, ctx);
   28f10:	4629      	mov	r1, r5
   28f12:	4620      	mov	r0, r4
   28f14:	f7e1 ff04 	bl	ad20 <out_func>
}
   28f18:	2000      	movs	r0, #0
   28f1a:	bd38      	pop	{r3, r4, r5, pc}

00028f1c <nvs_flash_rd>:
{
   28f1c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   28f1e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28f20:	8984      	ldrh	r4, [r0, #12]
   28f22:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   28f24:	fa16 f181 	uxtah	r1, r6, r1
   28f28:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   28f2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   28f2e:	6884      	ldr	r4, [r0, #8]
   28f30:	6824      	ldr	r4, [r4, #0]
   28f32:	46a4      	mov	ip, r4
}
   28f34:	bc70      	pop	{r4, r5, r6}
   28f36:	4760      	bx	ip

00028f38 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   28f38:	680b      	ldr	r3, [r1, #0]
   28f3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   28f3e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   28f40:	89c0      	ldrh	r0, [r0, #14]
   28f42:	0c1a      	lsrs	r2, r3, #16
   28f44:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   28f48:	bf04      	itt	eq
   28f4a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   28f4e:	600b      	streq	r3, [r1, #0]
}
   28f50:	4770      	bx	lr

00028f52 <nvs_flash_block_cmp>:
{
   28f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f56:	4681      	mov	r9, r0
   28f58:	460e      	mov	r6, r1
   28f5a:	4617      	mov	r7, r2
   28f5c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   28f60:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28f62:	681d      	ldr	r5, [r3, #0]
   28f64:	426d      	negs	r5, r5
	block_size =
   28f66:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   28f6a:	b91c      	cbnz	r4, 28f74 <nvs_flash_block_cmp+0x22>
	return 0;
   28f6c:	4620      	mov	r0, r4
}
   28f6e:	b009      	add	sp, #36	; 0x24
   28f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   28f74:	42ac      	cmp	r4, r5
   28f76:	46a0      	mov	r8, r4
   28f78:	bf28      	it	cs
   28f7a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   28f7c:	466a      	mov	r2, sp
   28f7e:	4643      	mov	r3, r8
   28f80:	4631      	mov	r1, r6
   28f82:	4648      	mov	r0, r9
   28f84:	f7ff ffca 	bl	28f1c <nvs_flash_rd>
		if (rc) {
   28f88:	2800      	cmp	r0, #0
   28f8a:	d1f0      	bne.n	28f6e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   28f8c:	4642      	mov	r2, r8
   28f8e:	4669      	mov	r1, sp
   28f90:	4638      	mov	r0, r7
   28f92:	f001 fa9b 	bl	2a4cc <memcmp>
		if (rc) {
   28f96:	b920      	cbnz	r0, 28fa2 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   28f98:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   28f9c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   28f9e:	4447      	add	r7, r8
   28fa0:	e7e3      	b.n	28f6a <nvs_flash_block_cmp+0x18>
			return 1;
   28fa2:	2001      	movs	r0, #1
   28fa4:	e7e3      	b.n	28f6e <nvs_flash_block_cmp+0x1c>

00028fa6 <nvs_flash_cmp_const>:
{
   28fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28faa:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28fac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   28fae:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28fb0:	681d      	ldr	r5, [r3, #0]
{
   28fb2:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28fb4:	426d      	negs	r5, r5
	block_size =
   28fb6:	f005 0520 	and.w	r5, r5, #32
{
   28fba:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   28fbc:	4668      	mov	r0, sp
{
   28fbe:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   28fc0:	462a      	mov	r2, r5
   28fc2:	f001 fab5 	bl	2a530 <memset>
	while (len) {
   28fc6:	b91c      	cbnz	r4, 28fd0 <nvs_flash_cmp_const+0x2a>
	return 0;
   28fc8:	4620      	mov	r0, r4
}
   28fca:	b008      	add	sp, #32
   28fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   28fd0:	42ac      	cmp	r4, r5
   28fd2:	46a0      	mov	r8, r4
   28fd4:	bf28      	it	cs
   28fd6:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   28fd8:	466a      	mov	r2, sp
   28fda:	4643      	mov	r3, r8
   28fdc:	4631      	mov	r1, r6
   28fde:	4638      	mov	r0, r7
   28fe0:	f7ff ffb7 	bl	28f52 <nvs_flash_block_cmp>
		if (rc) {
   28fe4:	2800      	cmp	r0, #0
   28fe6:	d1f0      	bne.n	28fca <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   28fe8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   28fec:	4446      	add	r6, r8
   28fee:	e7ea      	b.n	28fc6 <nvs_flash_cmp_const+0x20>

00028ff0 <nvs_flash_erase_sector>:
{
   28ff0:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28ff2:	8982      	ldrh	r2, [r0, #12]
   28ff4:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   28ff6:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28ff8:	0c09      	lsrs	r1, r1, #16
{
   28ffa:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28ffc:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   29000:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   29002:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   29004:	6883      	ldr	r3, [r0, #8]
   29006:	689b      	ldr	r3, [r3, #8]
   29008:	4798      	blx	r3
	if (rc) {
   2900a:	b950      	cbnz	r0, 29022 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2900c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2900e:	4629      	mov	r1, r5
   29010:	4620      	mov	r0, r4
   29012:	89a3      	ldrh	r3, [r4, #12]
   29014:	7912      	ldrb	r2, [r2, #4]
   29016:	f7ff ffc6 	bl	28fa6 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2901a:	2800      	cmp	r0, #0
   2901c:	bf18      	it	ne
   2901e:	f06f 0005 	mvnne.w	r0, #5
}
   29022:	bd38      	pop	{r3, r4, r5, pc}

00029024 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   29024:	4601      	mov	r1, r0
{
   29026:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   29028:	2207      	movs	r2, #7
{
   2902a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2902c:	20ff      	movs	r0, #255	; 0xff
   2902e:	f7e0 fafb 	bl	9628 <crc8_ccitt>
	entry->crc8 = crc8;
   29032:	71e0      	strb	r0, [r4, #7]
}
   29034:	bd10      	pop	{r4, pc}

00029036 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   29036:	2300      	movs	r3, #0
   29038:	f7e1 bd90 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002903c <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2903c:	7803      	ldrb	r3, [r0, #0]
   2903e:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   29040:	bf81      	itttt	hi
   29042:	f101 31ff 	addhi.w	r1, r1, #4294967295
   29046:	18c9      	addhi	r1, r1, r3
   29048:	425b      	neghi	r3, r3
   2904a:	4019      	andhi	r1, r3
}
   2904c:	4608      	mov	r0, r1
   2904e:	4770      	bx	lr

00029050 <nvs_ate_valid>:
{
   29050:	b570      	push	{r4, r5, r6, lr}
   29052:	460c      	mov	r4, r1
   29054:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   29056:	2108      	movs	r1, #8
   29058:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2905a:	f7ff ffef 	bl	2903c <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2905e:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   29060:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   29062:	4621      	mov	r1, r4
   29064:	20ff      	movs	r0, #255	; 0xff
   29066:	f7e0 fadf 	bl	9628 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2906a:	79e3      	ldrb	r3, [r4, #7]
   2906c:	4283      	cmp	r3, r0
   2906e:	d107      	bne.n	29080 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   29070:	89aa      	ldrh	r2, [r5, #12]
   29072:	8863      	ldrh	r3, [r4, #2]
   29074:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   29076:	4283      	cmp	r3, r0
   29078:	bf2c      	ite	cs
   2907a:	2000      	movcs	r0, #0
   2907c:	2001      	movcc	r0, #1
}
   2907e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   29080:	2000      	movs	r0, #0
   29082:	e7fc      	b.n	2907e <nvs_ate_valid+0x2e>

00029084 <nvs_close_ate_valid>:
{
   29084:	b538      	push	{r3, r4, r5, lr}
   29086:	4605      	mov	r5, r0
   29088:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2908a:	f7ff ffe1 	bl	29050 <nvs_ate_valid>
   2908e:	b1a0      	cbz	r0, 290ba <nvs_close_ate_valid+0x36>
   29090:	88a0      	ldrh	r0, [r4, #4]
   29092:	b998      	cbnz	r0, 290bc <nvs_close_ate_valid+0x38>
   29094:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29098:	8822      	ldrh	r2, [r4, #0]
   2909a:	429a      	cmp	r2, r3
   2909c:	d10d      	bne.n	290ba <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2909e:	2108      	movs	r1, #8
   290a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   290a2:	f7ff ffcb 	bl	2903c <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   290a6:	8862      	ldrh	r2, [r4, #2]
   290a8:	89ab      	ldrh	r3, [r5, #12]
   290aa:	1a9b      	subs	r3, r3, r2
   290ac:	fbb3 f2f0 	udiv	r2, r3, r0
   290b0:	fb02 3010 	mls	r0, r2, r0, r3
   290b4:	fab0 f080 	clz	r0, r0
   290b8:	0940      	lsrs	r0, r0, #5
}
   290ba:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   290bc:	2000      	movs	r0, #0
   290be:	e7fc      	b.n	290ba <nvs_close_ate_valid+0x36>

000290c0 <nvs_prev_ate>:
{
   290c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   290c2:	4604      	mov	r4, r0
   290c4:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   290c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   290c8:	2108      	movs	r1, #8
   290ca:	f7ff ffb7 	bl	2903c <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   290ce:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   290d0:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   290d2:	6829      	ldr	r1, [r5, #0]
   290d4:	4620      	mov	r0, r4
   290d6:	f7ff ff21 	bl	28f1c <nvs_flash_rd>
	if (rc) {
   290da:	4606      	mov	r6, r0
   290dc:	2800      	cmp	r0, #0
   290de:	d136      	bne.n	2914e <nvs_prev_ate+0x8e>
	*addr += ate_size;
   290e0:	682b      	ldr	r3, [r5, #0]
   290e2:	443b      	add	r3, r7
   290e4:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   290e6:	89a2      	ldrh	r2, [r4, #12]
   290e8:	b299      	uxth	r1, r3
   290ea:	1bd2      	subs	r2, r2, r7
   290ec:	4291      	cmp	r1, r2
   290ee:	d12e      	bne.n	2914e <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   290f0:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   290f2:	bf09      	itett	eq
   290f4:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   290f6:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   290fa:	f102 32ff 	addeq.w	r2, r2, #4294967295
   290fe:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   29102:	4620      	mov	r0, r4
   29104:	2308      	movs	r3, #8
   29106:	466a      	mov	r2, sp
   29108:	6029      	str	r1, [r5, #0]
   2910a:	f7ff ff07 	bl	28f1c <nvs_flash_rd>
	if (rc) {
   2910e:	b9e8      	cbnz	r0, 2914c <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   29110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29112:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   29114:	466b      	mov	r3, sp
		if (data8[i] != value) {
   29116:	f813 1b01 	ldrb.w	r1, [r3], #1
   2911a:	428a      	cmp	r2, r1
   2911c:	d10c      	bne.n	29138 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2911e:	3001      	adds	r0, #1
   29120:	2808      	cmp	r0, #8
   29122:	d1f8      	bne.n	29116 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   29124:	6863      	ldr	r3, [r4, #4]
   29126:	e005      	b.n	29134 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   29128:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2912a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2912e:	0c1b      	lsrs	r3, r3, #16
   29130:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   29132:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   29134:	602b      	str	r3, [r5, #0]
		return 0;
   29136:	e00a      	b.n	2914e <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   29138:	4669      	mov	r1, sp
   2913a:	4620      	mov	r0, r4
   2913c:	f7ff ffa2 	bl	29084 <nvs_close_ate_valid>
   29140:	2800      	cmp	r0, #0
   29142:	d1f1      	bne.n	29128 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   29144:	4629      	mov	r1, r5
   29146:	4620      	mov	r0, r4
   29148:	f7e2 f840 	bl	b1cc <nvs_recover_last_ate>
   2914c:	4606      	mov	r6, r0
}
   2914e:	4630      	mov	r0, r6
   29150:	b003      	add	sp, #12
   29152:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029154 <nvs_flash_al_wrt>:
{
   29154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29158:	4607      	mov	r7, r0
   2915a:	4690      	mov	r8, r2
	if (!len) {
   2915c:	461e      	mov	r6, r3
{
   2915e:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   29160:	b91b      	cbnz	r3, 2916a <nvs_flash_al_wrt+0x16>
		return 0;
   29162:	2000      	movs	r0, #0
}
   29164:	b009      	add	sp, #36	; 0x24
   29166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2916a:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2916c:	8983      	ldrh	r3, [r0, #12]
   2916e:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   29170:	fa14 f181 	uxtah	r1, r4, r1
   29174:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   29178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2917a:	681d      	ldr	r5, [r3, #0]
   2917c:	426d      	negs	r5, r5
	if (blen > 0) {
   2917e:	4035      	ands	r5, r6
   29180:	d00c      	beq.n	2919c <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   29182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   29184:	6883      	ldr	r3, [r0, #8]
   29186:	4621      	mov	r1, r4
   29188:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2918c:	462b      	mov	r3, r5
   2918e:	47c8      	blx	r9
		if (rc) {
   29190:	2800      	cmp	r0, #0
   29192:	d1e7      	bne.n	29164 <nvs_flash_al_wrt+0x10>
	if (len) {
   29194:	1b76      	subs	r6, r6, r5
   29196:	d0e4      	beq.n	29162 <nvs_flash_al_wrt+0xe>
		offset += blen;
   29198:	442c      	add	r4, r5
		data8 += blen;
   2919a:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2919c:	4632      	mov	r2, r6
   2919e:	4641      	mov	r1, r8
   291a0:	4668      	mov	r0, sp
   291a2:	f001 f9ba 	bl	2a51a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   291a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   291a8:	eb0d 0006 	add.w	r0, sp, r6
   291ac:	681a      	ldr	r2, [r3, #0]
   291ae:	7919      	ldrb	r1, [r3, #4]
   291b0:	1b92      	subs	r2, r2, r6
   291b2:	f001 f9bd 	bl	2a530 <memset>
				 fs->flash_parameters->write_block_size);
   291b6:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   291ba:	681b      	ldr	r3, [r3, #0]
   291bc:	6882      	ldr	r2, [r0, #8]
   291be:	4621      	mov	r1, r4
   291c0:	6855      	ldr	r5, [r2, #4]
   291c2:	466a      	mov	r2, sp
   291c4:	47a8      	blx	r5
	return rc;
   291c6:	e7cd      	b.n	29164 <nvs_flash_al_wrt+0x10>

000291c8 <nvs_flash_ate_wrt>:
{
   291c8:	b510      	push	{r4, lr}
   291ca:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   291cc:	2308      	movs	r3, #8
   291ce:	6841      	ldr	r1, [r0, #4]
{
   291d0:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   291d2:	f7ff ffbf 	bl	29154 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   291d6:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   291d8:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   291da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   291dc:	f7ff ff2e 	bl	2903c <nvs_al_size.isra.0>
   291e0:	6863      	ldr	r3, [r4, #4]
   291e2:	1a1b      	subs	r3, r3, r0
   291e4:	6063      	str	r3, [r4, #4]
}
   291e6:	4610      	mov	r0, r2
   291e8:	bd10      	pop	{r4, pc}

000291ea <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   291ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   291ee:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   291f0:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   291f4:	2300      	movs	r3, #0
{
   291f6:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   291f8:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   291fc:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   291fe:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   29200:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   29204:	f7ff ff0e 	bl	29024 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   29208:	4669      	mov	r1, sp
   2920a:	4620      	mov	r0, r4
   2920c:	f7ff ffdc 	bl	291c8 <nvs_flash_ate_wrt>
}
   29210:	b002      	add	sp, #8
   29212:	bd10      	pop	{r4, pc}

00029214 <nvs_gc>:
{
   29214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   29218:	2108      	movs	r1, #8
{
   2921a:	b095      	sub	sp, #84	; 0x54
   2921c:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2921e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   29220:	f7ff ff0c 	bl	2903c <nvs_al_size.isra.0>
   29224:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   29226:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   29228:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2922a:	0c1b      	lsrs	r3, r3, #16
   2922c:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   2922e:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   29230:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   29232:	f7ff fe81 	bl	28f38 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   29236:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2923a:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2923c:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2923e:	445e      	add	r6, fp
   29240:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   29242:	2308      	movs	r3, #8
   29244:	4631      	mov	r1, r6
   29246:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   29248:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2924a:	f7ff fe67 	bl	28f1c <nvs_flash_rd>
	if (rc < 0) {
   2924e:	1e02      	subs	r2, r0, #0
   29250:	f2c0 80a9 	blt.w	293a6 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   29254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29256:	aa06      	add	r2, sp, #24
   29258:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2925a:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2925c:	f812 0b01 	ldrb.w	r0, [r2], #1
   29260:	4281      	cmp	r1, r0
   29262:	f040 808f 	bne.w	29384 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   29266:	3301      	adds	r3, #1
   29268:	2b08      	cmp	r3, #8
   2926a:	d1f7      	bne.n	2925c <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2926c:	68a3      	ldr	r3, [r4, #8]
   2926e:	6862      	ldr	r2, [r4, #4]
   29270:	442b      	add	r3, r5
   29272:	429a      	cmp	r2, r3
   29274:	d27e      	bcs.n	29374 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   29276:	4659      	mov	r1, fp
   29278:	4620      	mov	r0, r4
   2927a:	f7ff feb9 	bl	28ff0 <nvs_flash_erase_sector>
   2927e:	4602      	mov	r2, r0
	if (rc) {
   29280:	e091      	b.n	293a6 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   29282:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   29286:	0c36      	lsrs	r6, r6, #16
   29288:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2928a:	441e      	add	r6, r3
   2928c:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2928e:	aa08      	add	r2, sp, #32
   29290:	4620      	mov	r0, r4
   29292:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   29294:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   29298:	f7ff ff12 	bl	290c0 <nvs_prev_ate>
		if (rc) {
   2929c:	4602      	mov	r2, r0
   2929e:	2800      	cmp	r0, #0
   292a0:	f040 8081 	bne.w	293a6 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   292a4:	4620      	mov	r0, r4
   292a6:	a908      	add	r1, sp, #32
   292a8:	f7ff fed2 	bl	29050 <nvs_ate_valid>
   292ac:	b918      	cbnz	r0, 292b6 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   292ae:	9b01      	ldr	r3, [sp, #4]
   292b0:	459a      	cmp	sl, r3
   292b2:	d1ec      	bne.n	2928e <nvs_gc+0x7a>
   292b4:	e7da      	b.n	2926c <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   292b6:	6863      	ldr	r3, [r4, #4]
   292b8:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   292ba:	aa0a      	add	r2, sp, #40	; 0x28
   292bc:	4620      	mov	r0, r4
   292be:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   292c0:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   292c2:	f7ff fefd 	bl	290c0 <nvs_prev_ate>
			if (rc) {
   292c6:	4602      	mov	r2, r0
   292c8:	2800      	cmp	r0, #0
   292ca:	d16c      	bne.n	293a6 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   292cc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   292d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   292d4:	429a      	cmp	r2, r3
   292d6:	d027      	beq.n	29328 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   292d8:	6862      	ldr	r2, [r4, #4]
   292da:	9b05      	ldr	r3, [sp, #20]
   292dc:	429a      	cmp	r2, r3
   292de:	d1ec      	bne.n	292ba <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   292e0:	4556      	cmp	r6, sl
   292e2:	d1e4      	bne.n	292ae <nvs_gc+0x9a>
   292e4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   292e8:	2b00      	cmp	r3, #0
   292ea:	d0e0      	beq.n	292ae <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   292ec:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   292f0:	ea4f 431a 	mov.w	r3, sl, lsr #16
   292f4:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   292f6:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   292f8:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   292fa:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   292fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   29300:	f7ff fe90 	bl	29024 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   29304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   29306:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2930a:	681e      	ldr	r6, [r3, #0]
   2930c:	4276      	negs	r6, r6
	block_size =
   2930e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   29312:	f1b9 0f00 	cmp.w	r9, #0
   29316:	d10e      	bne.n	29336 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   29318:	4620      	mov	r0, r4
   2931a:	a908      	add	r1, sp, #32
   2931c:	f7ff ff54 	bl	291c8 <nvs_flash_ate_wrt>
			if (rc) {
   29320:	4602      	mov	r2, r0
   29322:	2800      	cmp	r0, #0
   29324:	d0c3      	beq.n	292ae <nvs_gc+0x9a>
   29326:	e03e      	b.n	293a6 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   29328:	4620      	mov	r0, r4
   2932a:	a90a      	add	r1, sp, #40	; 0x28
   2932c:	f7ff fe90 	bl	29050 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   29330:	2800      	cmp	r0, #0
   29332:	d0d1      	beq.n	292d8 <nvs_gc+0xc4>
   29334:	e7d4      	b.n	292e0 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   29336:	454e      	cmp	r6, r9
   29338:	46b0      	mov	r8, r6
   2933a:	bf28      	it	cs
   2933c:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2933e:	aa0c      	add	r2, sp, #48	; 0x30
   29340:	4643      	mov	r3, r8
   29342:	4639      	mov	r1, r7
   29344:	4620      	mov	r0, r4
   29346:	f7ff fde9 	bl	28f1c <nvs_flash_rd>
		if (rc) {
   2934a:	4602      	mov	r2, r0
   2934c:	bb58      	cbnz	r0, 293a6 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2934e:	4643      	mov	r3, r8
   29350:	68a1      	ldr	r1, [r4, #8]
   29352:	aa0c      	add	r2, sp, #48	; 0x30
   29354:	4620      	mov	r0, r4
   29356:	f7ff fefd 	bl	29154 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2935a:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2935c:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2935e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   29360:	f7ff fe6c 	bl	2903c <nvs_al_size.isra.0>
   29364:	68a3      	ldr	r3, [r4, #8]
   29366:	4403      	add	r3, r0
   29368:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2936a:	b9e2      	cbnz	r2, 293a6 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2936c:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   29370:	4447      	add	r7, r8
   29372:	e7ce      	b.n	29312 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   29374:	4620      	mov	r0, r4
   29376:	f7ff ff38 	bl	291ea <nvs_add_gc_done_ate>
		if (rc) {
   2937a:	4602      	mov	r2, r0
   2937c:	2800      	cmp	r0, #0
   2937e:	f43f af7a 	beq.w	29276 <nvs_gc+0x62>
   29382:	e010      	b.n	293a6 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   29384:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   29386:	4620      	mov	r0, r4
   29388:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2938a:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2938c:	f7ff fe7a 	bl	29084 <nvs_close_ate_valid>
   29390:	2800      	cmp	r0, #0
   29392:	f47f af76 	bne.w	29282 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   29396:	4620      	mov	r0, r4
   29398:	a904      	add	r1, sp, #16
   2939a:	f7e1 ff17 	bl	b1cc <nvs_recover_last_ate>
		if (rc) {
   2939e:	4602      	mov	r2, r0
   293a0:	2800      	cmp	r0, #0
   293a2:	f43f af74 	beq.w	2928e <nvs_gc+0x7a>
}
   293a6:	4610      	mov	r0, r2
   293a8:	b015      	add	sp, #84	; 0x54
   293aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000293ae <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   293ae:	2300      	movs	r3, #0
   293b0:	461a      	mov	r2, r3
   293b2:	f7e2 b915 	b.w	b5e0 <nvs_write>

000293b6 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   293b6:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   293b8:	2400      	movs	r4, #0
   293ba:	9400      	str	r4, [sp, #0]
   293bc:	f7e2 f9ec 	bl	b798 <nvs_read_hist>
	return rc;
}
   293c0:	b002      	add	sp, #8
   293c2:	bd10      	pop	{r4, pc}

000293c4 <z_log_msg_static_create.constprop.0>:
   293c4:	2300      	movs	r3, #0
   293c6:	f7e1 bbc9 	b.w	ab5c <z_impl_z_log_msg_static_create>

000293ca <get_tx_buffer_size>:
	return data->tx_buffer_size;
   293ca:	6903      	ldr	r3, [r0, #16]
}
   293cc:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   293d0:	4770      	bx	lr

000293d2 <drop_tx_buffer>:
}
   293d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293d6:	4770      	bx	lr

000293d8 <release_rx_buffer>:
{
   293d8:	4608      	mov	r0, r1
   293da:	b508      	push	{r3, lr}
   293dc:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   293de:	b118      	cbz	r0, 293e8 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   293e0:	f005 fdbc 	bl	2ef5c <rpmsg_release_rx_buffer>
	return 0;
   293e4:	2000      	movs	r0, #0
}
   293e6:	bd08      	pop	{r3, pc}
		return -ENOENT;
   293e8:	f06f 0001 	mvn.w	r0, #1
   293ec:	e7fb      	b.n	293e6 <release_rx_buffer+0xe>

000293ee <hold_rx_buffer>:
{
   293ee:	4608      	mov	r0, r1
   293f0:	b508      	push	{r3, lr}
   293f2:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   293f4:	b118      	cbz	r0, 293fe <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   293f6:	f005 fda9 	bl	2ef4c <rpmsg_hold_rx_buffer>
	return 0;
   293fa:	2000      	movs	r0, #0
}
   293fc:	bd08      	pop	{r3, pc}
		return -ENOENT;
   293fe:	f06f 0001 	mvn.w	r0, #1
   29402:	e7fb      	b.n	293fc <hold_rx_buffer+0xe>

00029404 <send_nocopy>:
{
   29404:	b513      	push	{r0, r1, r4, lr}
   29406:	4604      	mov	r4, r0
   29408:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2940a:	6921      	ldr	r1, [r4, #16]
   2940c:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   29410:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   29414:	2902      	cmp	r1, #2
   29416:	d109      	bne.n	2942c <send_nocopy+0x28>
	if (len == 0) {
   29418:	b15b      	cbz	r3, 29432 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2941a:	b168      	cbz	r0, 29438 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2941c:	9300      	str	r3, [sp, #0]
   2941e:	4613      	mov	r3, r2
   29420:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   29424:	f7fb fa9c 	bl	24960 <rpmsg_send_offchannel_nocopy>
}
   29428:	b002      	add	sp, #8
   2942a:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2942c:	f06f 000f 	mvn.w	r0, #15
   29430:	e7fa      	b.n	29428 <send_nocopy+0x24>
		return -EBADMSG;
   29432:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   29436:	e7f7      	b.n	29428 <send_nocopy+0x24>
		return -ENOENT;
   29438:	f06f 0001 	mvn.w	r0, #1
   2943c:	e7f4      	b.n	29428 <send_nocopy+0x24>

0002943e <get_tx_buffer>:
{
   2943e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29442:	461c      	mov	r4, r3
   29444:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   29448:	4616      	mov	r6, r2
   2944a:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2944c:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2944e:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   29450:	b339      	cbz	r1, 294a2 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   29452:	b34a      	cbz	r2, 294a8 <get_tx_buffer+0x6a>
   29454:	b344      	cbz	r4, 294a8 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   29456:	1c6a      	adds	r2, r5, #1
   29458:	f143 0300 	adc.w	r3, r3, #0
   2945c:	2a02      	cmp	r2, #2
   2945e:	f173 0300 	sbcs.w	r3, r3, #0
   29462:	d224      	bcs.n	294ae <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   29464:	6822      	ldr	r2, [r4, #0]
   29466:	b142      	cbz	r2, 2947a <get_tx_buffer+0x3c>
   29468:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   2946c:	429a      	cmp	r2, r3
   2946e:	d904      	bls.n	2947a <get_tx_buffer+0x3c>
		return -ENOMEM;
   29470:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   29474:	6023      	str	r3, [r4, #0]
}
   29476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2947a:	ea05 0908 	and.w	r9, r5, r8
   2947e:	f109 0301 	add.w	r3, r9, #1
   29482:	425a      	negs	r2, r3
   29484:	415a      	adcs	r2, r3
   29486:	4621      	mov	r1, r4
   29488:	4638      	mov	r0, r7
   2948a:	f005 fd70 	bl	2ef6e <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2948e:	b988      	cbnz	r0, 294b4 <get_tx_buffer+0x76>
   29490:	f1b8 3fff 	cmp.w	r8, #4294967295
   29494:	bf08      	it	eq
   29496:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2949a:	d0f0      	beq.n	2947e <get_tx_buffer+0x40>
		return -ENOBUFS;
   2949c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   294a0:	e7e9      	b.n	29476 <get_tx_buffer+0x38>
		return -ENOENT;
   294a2:	f06f 0001 	mvn.w	r0, #1
   294a6:	e7e6      	b.n	29476 <get_tx_buffer+0x38>
		return -EINVAL;
   294a8:	f06f 0015 	mvn.w	r0, #21
   294ac:	e7e3      	b.n	29476 <get_tx_buffer+0x38>
		return -ENOTSUP;
   294ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   294b2:	e7e0      	b.n	29476 <get_tx_buffer+0x38>
	(*r_data) = payload;
   294b4:	6030      	str	r0, [r6, #0]
	return 0;
   294b6:	2000      	movs	r0, #0
   294b8:	e7dd      	b.n	29476 <get_tx_buffer+0x38>

000294ba <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   294ba:	f005 bd9d 	b.w	2eff8 <rpmsg_destroy_ept>

000294be <get_ept_slot_with_name>:
{
   294be:	b538      	push	{r3, r4, r5, lr}
   294c0:	460d      	mov	r5, r1
   294c2:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   294c4:	f100 0140 	add.w	r1, r0, #64	; 0x40
   294c8:	4628      	mov	r0, r5
   294ca:	f000 ffe0 	bl	2a48e <strcmp>
   294ce:	b130      	cbz	r0, 294de <get_ept_slot_with_name+0x20>
   294d0:	4628      	mov	r0, r5
   294d2:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   294d6:	f000 ffda 	bl	2a48e <strcmp>
   294da:	b920      	cbnz	r0, 294e6 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   294dc:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   294de:	2370      	movs	r3, #112	; 0x70
   294e0:	fb03 4000 	mla	r0, r3, r0, r4
}
   294e4:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   294e6:	2000      	movs	r0, #0
   294e8:	e7fc      	b.n	294e4 <get_ept_slot_with_name+0x26>

000294ea <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   294ea:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   294ee:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   294f2:	f005 bff2 	b.w	2f4da <k_work_submit_to_queue>

000294f6 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   294f6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   294fa:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   294fe:	3b00      	subs	r3, #0
   29500:	bf18      	it	ne
   29502:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   29504:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29508:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2950c:	f005 bcd0 	b.w	2eeb0 <virtqueue_notification>

00029510 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   29510:	68cb      	ldr	r3, [r1, #12]
   29512:	b133      	cbz	r3, 29522 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   29514:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   29516:	6883      	ldr	r3, [r0, #8]
   29518:	681b      	ldr	r3, [r3, #0]
   2951a:	b113      	cbz	r3, 29522 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2951c:	2200      	movs	r2, #0
   2951e:	6909      	ldr	r1, [r1, #16]
   29520:	4718      	bx	r3
}
   29522:	4770      	bx	lr

00029524 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   29524:	f7fc ba88 	b.w	25a38 <z_impl_k_mutex_unlock>

00029528 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29528:	e8d0 3fef 	ldaex	r3, [r0]
   2952c:	e8c0 1fe2 	stlex	r2, r1, [r0]
   29530:	2a00      	cmp	r2, #0
   29532:	d1f9      	bne.n	29528 <atomic_set.isra.0>
}
   29534:	4770      	bx	lr

00029536 <backend_init>:
{
   29536:	b510      	push	{r4, lr}
	data->role = conf->role;
   29538:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2953a:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2953c:	681b      	ldr	r3, [r3, #0]
   2953e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   29542:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   29546:	f005 ff30 	bl	2f3aa <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2954a:	2100      	movs	r1, #0
   2954c:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   29550:	f7ff ffea 	bl	29528 <atomic_set.isra.0>
}
   29554:	4608      	mov	r0, r1
   29556:	bd10      	pop	{r4, pc}

00029558 <ns_bind_cb>:
{
   29558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2955c:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2955e:	460d      	mov	r5, r1
   29560:	b379      	cbz	r1, 295c2 <ns_bind_cb+0x6a>
   29562:	780b      	ldrb	r3, [r1, #0]
   29564:	b36b      	cbz	r3, 295c2 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   29566:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2956a:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2956e:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   29570:	f04f 32ff 	mov.w	r2, #4294967295
   29574:	f04f 33ff 	mov.w	r3, #4294967295
   29578:	4620      	mov	r0, r4
   2957a:	f7fc f9a7 	bl	258cc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2957e:	462a      	mov	r2, r5
   29580:	4640      	mov	r0, r8
   29582:	a901      	add	r1, sp, #4
   29584:	f7e2 fa44 	bl	ba10 <get_ept>
	if (rpmsg_ept == NULL) {
   29588:	9e01      	ldr	r6, [sp, #4]
   2958a:	b92e      	cbnz	r6, 29598 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2958c:	4620      	mov	r0, r4
}
   2958e:	b002      	add	sp, #8
   29590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   29594:	f7ff bfc6 	b.w	29524 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   29598:	b158      	cbz	r0, 295b2 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2959a:	4620      	mov	r0, r4
   2959c:	f7ff ffc2 	bl	29524 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   295a0:	463b      	mov	r3, r7
   295a2:	462a      	mov	r2, r5
   295a4:	4631      	mov	r1, r6
   295a6:	4640      	mov	r0, r8
}
   295a8:	b002      	add	sp, #8
   295aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   295ae:	f7e2 ba0d 	b.w	b9cc <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   295b2:	2220      	movs	r2, #32
   295b4:	4629      	mov	r1, r5
   295b6:	f106 0040 	add.w	r0, r6, #64	; 0x40
   295ba:	f000 ff44 	bl	2a446 <strncpy>
		rpmsg_ept->dest = dest;
   295be:	6637      	str	r7, [r6, #96]	; 0x60
   295c0:	e7e4      	b.n	2958c <ns_bind_cb+0x34>
}
   295c2:	b002      	add	sp, #8
   295c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000295c8 <ept_cb>:
{
   295c8:	b510      	push	{r4, lr}
   295ca:	4608      	mov	r0, r1
   295cc:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   295ce:	4611      	mov	r1, r2
   295d0:	b952      	cbnz	r2, 295e8 <ept_cb+0x20>
		if (!ept->bound) {
   295d2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   295d6:	b92a      	cbnz	r2, 295e4 <ept_cb+0x1c>
			ept->bound = true;
   295d8:	2201      	movs	r2, #1
			bound_cb(ept);
   295da:	4618      	mov	r0, r3
			ept->bound = true;
   295dc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   295e0:	f7e2 fb68 	bl	bcb4 <bound_cb>
}
   295e4:	2000      	movs	r0, #0
   295e6:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   295e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   295ea:	6854      	ldr	r4, [r2, #4]
   295ec:	2c00      	cmp	r4, #0
   295ee:	d0f9      	beq.n	295e4 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   295f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   295f2:	47a0      	blx	r4
   295f4:	e7f6      	b.n	295e4 <ept_cb+0x1c>

000295f6 <deregister_ept>:
{
   295f6:	b510      	push	{r4, lr}
   295f8:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   295fa:	6903      	ldr	r3, [r0, #16]
   295fc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   29600:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   29604:	2b02      	cmp	r3, #2
   29606:	d10a      	bne.n	2961e <deregister_ept+0x28>
	if (!rpmsg_ept) {
   29608:	b161      	cbz	r1, 29624 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2960a:	4608      	mov	r0, r1
   2960c:	f005 fcf4 	bl	2eff8 <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   29610:	2270      	movs	r2, #112	; 0x70
   29612:	2100      	movs	r1, #0
   29614:	4620      	mov	r0, r4
   29616:	f000 ff8b 	bl	2a530 <memset>
	return 0;
   2961a:	2000      	movs	r0, #0
}
   2961c:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2961e:	f06f 000f 	mvn.w	r0, #15
   29622:	e7fb      	b.n	2961c <deregister_ept+0x26>
		return -ENOENT;
   29624:	f06f 0001 	mvn.w	r0, #1
   29628:	e7f8      	b.n	2961c <deregister_ept+0x26>

0002962a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2962a:	f005 bce5 	b.w	2eff8 <rpmsg_destroy_ept>

0002962e <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2962e:	b538      	push	{r3, r4, r5, lr}
   29630:	460d      	mov	r5, r1
	if (!instance) {
   29632:	4604      	mov	r4, r0
   29634:	b160      	cbz	r0, 29650 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   29636:	30e0      	adds	r0, #224	; 0xe0
   29638:	f005 fe5f 	bl	2f2fa <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2963c:	b10d      	cbz	r5, 29642 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2963e:	2000      	movs	r0, #0
}
   29640:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   29642:	220c      	movs	r2, #12
   29644:	4629      	mov	r1, r5
   29646:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   2964a:	f000 ff71 	bl	2a530 <memset>
   2964e:	e7f6      	b.n	2963e <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   29650:	f06f 0015 	mvn.w	r0, #21
   29654:	e7f4      	b.n	29640 <ipc_rpmsg_deinit+0x12>

00029656 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   29656:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   29658:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2965c:	b113      	cbz	r3, 29664 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2965e:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   29662:	4718      	bx	r3
}
   29664:	4770      	bx	lr

00029666 <virtio_set_features>:
}
   29666:	4770      	bx	lr

00029668 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   29668:	6983      	ldr	r3, [r0, #24]
   2966a:	b913      	cbnz	r3, 29672 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2966c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   29670:	7019      	strb	r1, [r3, #0]
}
   29672:	4770      	bx	lr

00029674 <virtio_get_features>:
}
   29674:	2001      	movs	r0, #1
   29676:	4770      	bx	lr

00029678 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   29678:	6983      	ldr	r3, [r0, #24]
   2967a:	2b01      	cmp	r3, #1
   2967c:	d104      	bne.n	29688 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2967e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   29682:	7818      	ldrb	r0, [r3, #0]
   29684:	b2c0      	uxtb	r0, r0
   29686:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   29688:	2004      	movs	r0, #4
}
   2968a:	4770      	bx	lr

0002968c <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2968c:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2968e:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   29690:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   29692:	4620      	mov	r0, r4
   29694:	f006 f85d 	bl	2f752 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   29698:	4605      	mov	r5, r0
   2969a:	b118      	cbz	r0, 296a4 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   2969c:	4622      	mov	r2, r4
   2969e:	2100      	movs	r1, #0
   296a0:	f000 ff46 	bl	2a530 <memset>
	}

	return vqs;
}
   296a4:	4628      	mov	r0, r5
   296a6:	bd38      	pop	{r3, r4, r5, pc}

000296a8 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   296a8:	b538      	push	{r3, r4, r5, lr}
   296aa:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   296ac:	2230      	movs	r2, #48	; 0x30
   296ae:	2100      	movs	r1, #0
   296b0:	f000 ff3e 	bl	2a530 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   296b4:	2218      	movs	r2, #24
   296b6:	2100      	movs	r1, #0
   296b8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   296bc:	f000 ff38 	bl	2a530 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   296c0:	2218      	movs	r2, #24
   296c2:	2100      	movs	r1, #0
   296c4:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   296c8:	f000 ff32 	bl	2a530 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   296cc:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   296d0:	f7fb f8f8 	bl	248c4 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   296d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   296d8:	f7fb f8f4 	bl	248c4 <virtqueue_free>
	vr->shm_io = 0;
   296dc:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   296de:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   296e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   296e6:	f7fb f80d 	bl	24704 <metal_device_close>
	metal_finish();
   296ea:	f7fb f863 	bl	247b4 <metal_finish>
	if (io->ops.close)
   296ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   296f0:	f104 0540 	add.w	r5, r4, #64	; 0x40
   296f4:	b10b      	cbz	r3, 296fa <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   296f6:	4628      	mov	r0, r5
   296f8:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   296fa:	2238      	movs	r2, #56	; 0x38
   296fc:	2100      	movs	r1, #0
   296fe:	4628      	mov	r0, r5
   29700:	f000 ff16 	bl	2a530 <memset>

	return 0;
}
   29704:	2000      	movs	r0, #0
   29706:	bd38      	pop	{r3, r4, r5, pc}

00029708 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   29708:	4770      	bx	lr

0002970a <get_sectors_cb>:
{
   2970a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2970c:	684c      	ldr	r4, [r1, #4]
   2970e:	6803      	ldr	r3, [r0, #0]
   29710:	42a3      	cmp	r3, r4
   29712:	d201      	bcs.n	29718 <get_sectors_cb+0xe>
		*bail_value = true;
   29714:	2001      	movs	r0, #1
}
   29716:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   29718:	688a      	ldr	r2, [r1, #8]
   2971a:	4422      	add	r2, r4
   2971c:	4293      	cmp	r3, r2
   2971e:	d301      	bcc.n	29724 <get_sectors_cb+0x1a>
		*bail_value = false;
   29720:	2000      	movs	r0, #0
   29722:	e7f8      	b.n	29716 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   29724:	694e      	ldr	r6, [r1, #20]
   29726:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2972a:	42b5      	cmp	r5, r6
   2972c:	d303      	bcc.n	29736 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2972e:	f06f 030b 	mvn.w	r3, #11
   29732:	618b      	str	r3, [r1, #24]
		return true;
   29734:	e7f4      	b.n	29720 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   29736:	1b1b      	subs	r3, r3, r4
   29738:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2973c:	6843      	ldr	r3, [r0, #4]
   2973e:	6908      	ldr	r0, [r1, #16]
   29740:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   29744:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   29746:	690b      	ldr	r3, [r1, #16]
   29748:	3301      	adds	r3, #1
   2974a:	610b      	str	r3, [r1, #16]
	return true;
   2974c:	e7e2      	b.n	29714 <get_sectors_cb+0xa>

0002974e <settings_load>:
	return settings_load_subtree(NULL);
   2974e:	2000      	movs	r0, #0
   29750:	f7e2 bcfe 	b.w	c150 <settings_load_subtree>

00029754 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   29754:	2200      	movs	r2, #0
   29756:	4611      	mov	r1, r2
   29758:	f7e2 bcc0 	b.w	c0dc <settings_save_one>

0002975c <settings_name_steq>:
{
   2975c:	4603      	mov	r3, r0
   2975e:	b510      	push	{r4, lr}
   29760:	4608      	mov	r0, r1
	if (next) {
   29762:	b10a      	cbz	r2, 29768 <settings_name_steq+0xc>
		*next = NULL;
   29764:	2100      	movs	r1, #0
   29766:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   29768:	b153      	cbz	r3, 29780 <settings_name_steq+0x24>
   2976a:	b1d0      	cbz	r0, 297a2 <settings_name_steq+0x46>
   2976c:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2976e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   29772:	b180      	cbz	r0, 29796 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   29774:	f813 4b01 	ldrb.w	r4, [r3], #1
   29778:	42a0      	cmp	r0, r4
   2977a:	d101      	bne.n	29780 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2977c:	283d      	cmp	r0, #61	; 0x3d
   2977e:	d1f6      	bne.n	2976e <settings_name_steq+0x12>
		return 0;
   29780:	2000      	movs	r0, #0
   29782:	e00e      	b.n	297a2 <settings_name_steq+0x46>
			*next = name + 1;
   29784:	3301      	adds	r3, #1
   29786:	6013      	str	r3, [r2, #0]
   29788:	e00a      	b.n	297a0 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2978a:	283d      	cmp	r0, #61	; 0x3d
   2978c:	d008      	beq.n	297a0 <settings_name_steq+0x44>
   2978e:	fab0 f080 	clz	r0, r0
   29792:	0940      	lsrs	r0, r0, #5
   29794:	e005      	b.n	297a2 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   29796:	7818      	ldrb	r0, [r3, #0]
   29798:	282f      	cmp	r0, #47	; 0x2f
   2979a:	d1f6      	bne.n	2978a <settings_name_steq+0x2e>
		if (next) {
   2979c:	2a00      	cmp	r2, #0
   2979e:	d1f1      	bne.n	29784 <settings_name_steq+0x28>
		return 1;
   297a0:	2001      	movs	r0, #1
}
   297a2:	bd10      	pop	{r4, pc}

000297a4 <settings_name_next>:
{
   297a4:	b510      	push	{r4, lr}
	if (next) {
   297a6:	b109      	cbz	r1, 297ac <settings_name_next+0x8>
		*next = NULL;
   297a8:	2300      	movs	r3, #0
   297aa:	600b      	str	r3, [r1, #0]
	if (!name) {
   297ac:	b158      	cbz	r0, 297c6 <settings_name_next+0x22>
   297ae:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   297b0:	781a      	ldrb	r2, [r3, #0]
   297b2:	461c      	mov	r4, r3
   297b4:	3301      	adds	r3, #1
   297b6:	b12a      	cbz	r2, 297c4 <settings_name_next+0x20>
   297b8:	2a3d      	cmp	r2, #61	; 0x3d
   297ba:	d003      	beq.n	297c4 <settings_name_next+0x20>
   297bc:	2a2f      	cmp	r2, #47	; 0x2f
   297be:	d1f7      	bne.n	297b0 <settings_name_next+0xc>
		if (next) {
   297c0:	b101      	cbz	r1, 297c4 <settings_name_next+0x20>
			*next = name + 1;
   297c2:	600b      	str	r3, [r1, #0]
   297c4:	1a20      	subs	r0, r4, r0
}
   297c6:	bd10      	pop	{r4, pc}

000297c8 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   297c8:	3008      	adds	r0, #8
   297ca:	4770      	bx	lr

000297cc <settings_nvs_read_fn>:
{
   297cc:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   297ce:	4613      	mov	r3, r2
{
   297d0:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   297d2:	460a      	mov	r2, r1
   297d4:	8881      	ldrh	r1, [r0, #4]
   297d6:	6800      	ldr	r0, [r0, #0]
   297d8:	f7ff fded 	bl	293b6 <nvs_read>
}
   297dc:	42a0      	cmp	r0, r4
   297de:	bfa8      	it	ge
   297e0:	4620      	movge	r0, r4
   297e2:	bd10      	pop	{r4, pc}

000297e4 <settings_nvs_save>:
{
   297e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297e8:	b097      	sub	sp, #92	; 0x5c
   297ea:	4604      	mov	r4, r0
   297ec:	469a      	mov	sl, r3
	if (!name) {
   297ee:	4689      	mov	r9, r1
{
   297f0:	9201      	str	r2, [sp, #4]
	if (!name) {
   297f2:	2900      	cmp	r1, #0
   297f4:	d07e      	beq.n	298f4 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   297f6:	b1da      	cbz	r2, 29830 <settings_nvs_save+0x4c>
   297f8:	faba f78a 	clz	r7, sl
   297fc:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   297fe:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   29800:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   29804:	3501      	adds	r5, #1
   29806:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   29808:	46a8      	mov	r8, r5
		name_id--;
   2980a:	1e6e      	subs	r6, r5, #1
   2980c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2980e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   29812:	d029      	beq.n	29868 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   29814:	234a      	movs	r3, #74	; 0x4a
   29816:	4631      	mov	r1, r6
   29818:	4658      	mov	r0, fp
   2981a:	aa03      	add	r2, sp, #12
   2981c:	f7ff fdcb 	bl	293b6 <nvs_read>
		if (rc < 0) {
   29820:	2800      	cmp	r0, #0
   29822:	da07      	bge.n	29834 <settings_nvs_save+0x50>
		name_id--;
   29824:	f110 0f02 	cmn.w	r0, #2
   29828:	bf08      	it	eq
   2982a:	46b0      	moveq	r8, r6
   2982c:	4635      	mov	r5, r6
   2982e:	e7ec      	b.n	2980a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   29830:	2701      	movs	r7, #1
   29832:	e7e4      	b.n	297fe <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   29834:	f100 0358 	add.w	r3, r0, #88	; 0x58
   29838:	eb0d 0003 	add.w	r0, sp, r3
   2983c:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2983e:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   29840:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   29844:	4648      	mov	r0, r9
   29846:	f000 fe22 	bl	2a48e <strcmp>
   2984a:	2800      	cmp	r0, #0
   2984c:	d1ee      	bne.n	2982c <settings_nvs_save+0x48>
		if (!delete) {
   2984e:	b32f      	cbz	r7, 2989c <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   29850:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   29852:	42b3      	cmp	r3, r6
   29854:	d00b      	beq.n	2986e <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   29856:	4631      	mov	r1, r6
   29858:	4658      	mov	r0, fp
   2985a:	f7ff fda8 	bl	293ae <nvs_delete>
		if (rc >= 0) {
   2985e:	2800      	cmp	r0, #0
   29860:	da12      	bge.n	29888 <settings_nvs_save+0xa4>
}
   29862:	b017      	add	sp, #92	; 0x5c
   29864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   29868:	b3b7      	cbz	r7, 298d8 <settings_nvs_save+0xf4>
			return 0;
   2986a:	2000      	movs	r0, #0
   2986c:	e7f9      	b.n	29862 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2986e:	4622      	mov	r2, r4
   29870:	1e73      	subs	r3, r6, #1
   29872:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2987a:	2302      	movs	r3, #2
   2987c:	4658      	mov	r0, fp
   2987e:	f7e1 feaf 	bl	b5e0 <nvs_write>
			if (rc < 0) {
   29882:	2800      	cmp	r0, #0
   29884:	dae7      	bge.n	29856 <settings_nvs_save+0x72>
   29886:	e7ec      	b.n	29862 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   29888:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2988c:	313f      	adds	r1, #63	; 0x3f
   2988e:	4658      	mov	r0, fp
   29890:	b289      	uxth	r1, r1
   29892:	f7ff fd8c 	bl	293ae <nvs_delete>
	if (rc < 0) {
   29896:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2989a:	e7e2      	b.n	29862 <settings_nvs_save+0x7e>
		name_id--;
   2989c:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2989e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   298a2:	d02a      	beq.n	298fa <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   298a4:	f104 0508 	add.w	r5, r4, #8
   298a8:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   298ac:	4653      	mov	r3, sl
   298ae:	4628      	mov	r0, r5
   298b0:	9a01      	ldr	r2, [sp, #4]
   298b2:	b289      	uxth	r1, r1
   298b4:	f7e1 fe94 	bl	b5e0 <nvs_write>
	if (rc < 0) {
   298b8:	2800      	cmp	r0, #0
   298ba:	dbd2      	blt.n	29862 <settings_nvs_save+0x7e>
	if (write_name) {
   298bc:	b977      	cbnz	r7, 298dc <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   298be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   298c0:	4543      	cmp	r3, r8
   298c2:	d2d2      	bcs.n	2986a <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   298c4:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   298c6:	2302      	movs	r3, #2
   298c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   298cc:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   298ce:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   298d2:	f7e1 fe85 	bl	b5e0 <nvs_write>
   298d6:	e7de      	b.n	29896 <settings_nvs_save+0xb2>
	write_name = true;
   298d8:	2701      	movs	r7, #1
   298da:	e7e0      	b.n	2989e <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   298dc:	4648      	mov	r0, r9
   298de:	f000 fdc6 	bl	2a46e <strlen>
   298e2:	464a      	mov	r2, r9
   298e4:	4603      	mov	r3, r0
   298e6:	4641      	mov	r1, r8
   298e8:	4628      	mov	r0, r5
   298ea:	f7e1 fe79 	bl	b5e0 <nvs_write>
		if (rc < 0) {
   298ee:	2800      	cmp	r0, #0
   298f0:	dae5      	bge.n	298be <settings_nvs_save+0xda>
   298f2:	e7b6      	b.n	29862 <settings_nvs_save+0x7e>
		return -EINVAL;
   298f4:	f06f 0015 	mvn.w	r0, #21
   298f8:	e7b3      	b.n	29862 <settings_nvs_save+0x7e>
		return -ENOMEM;
   298fa:	f06f 000b 	mvn.w	r0, #11
   298fe:	e7b0      	b.n	29862 <settings_nvs_save+0x7e>

00029900 <settings_nvs_backend_init>:
{
   29900:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   29902:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   29904:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   29906:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   29908:	b1c3      	cbz	r3, 2993c <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2990a:	f100 0608 	add.w	r6, r0, #8
   2990e:	4630      	mov	r0, r6
   29910:	f7e1 fc8e 	bl	b230 <nvs_mount>
	if (rc) {
   29914:	4605      	mov	r5, r0
   29916:	b970      	cbnz	r0, 29936 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   29918:	2302      	movs	r3, #2
   2991a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2991e:	4630      	mov	r0, r6
   29920:	f10d 0206 	add.w	r2, sp, #6
   29924:	f7ff fd47 	bl	293b6 <nvs_read>
	if (rc < 0) {
   29928:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2992a:	bfb4      	ite	lt
   2992c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   29930:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   29934:	8723      	strh	r3, [r4, #56]	; 0x38
}
   29936:	4628      	mov	r0, r5
   29938:	b002      	add	sp, #8
   2993a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2993c:	f06f 0512 	mvn.w	r5, #18
   29940:	e7f9      	b.n	29936 <settings_nvs_backend_init+0x36>

00029942 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   29942:	b538      	push	{r3, r4, r5, lr}
   29944:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   29946:	42ab      	cmp	r3, r5
{
   29948:	4611      	mov	r1, r2
   2994a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2994c:	d804      	bhi.n	29958 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2994e:	461a      	mov	r2, r3
   29950:	f000 fde3 	bl	2a51a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   29954:	4620      	mov	r0, r4
   29956:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   29958:	2400      	movs	r4, #0
   2995a:	e7fb      	b.n	29954 <_copy+0x12>

0002995c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2995c:	f000 bde8 	b.w	2a530 <memset>

00029960 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   29960:	09c3      	lsrs	r3, r0, #7
   29962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29966:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2996a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2996e:	b2c0      	uxtb	r0, r0
   29970:	4770      	bx	lr

00029972 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   29972:	78cb      	ldrb	r3, [r1, #3]
   29974:	7802      	ldrb	r2, [r0, #0]
   29976:	4053      	eors	r3, r2
   29978:	7003      	strb	r3, [r0, #0]
   2997a:	884b      	ldrh	r3, [r1, #2]
   2997c:	7842      	ldrb	r2, [r0, #1]
   2997e:	4053      	eors	r3, r2
   29980:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   29982:	680a      	ldr	r2, [r1, #0]
   29984:	7883      	ldrb	r3, [r0, #2]
   29986:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2998a:	7083      	strb	r3, [r0, #2]
   2998c:	680a      	ldr	r2, [r1, #0]
   2998e:	78c3      	ldrb	r3, [r0, #3]
   29990:	4053      	eors	r3, r2
   29992:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   29994:	79cb      	ldrb	r3, [r1, #7]
   29996:	7902      	ldrb	r2, [r0, #4]
   29998:	4053      	eors	r3, r2
   2999a:	7103      	strb	r3, [r0, #4]
   2999c:	88cb      	ldrh	r3, [r1, #6]
   2999e:	7942      	ldrb	r2, [r0, #5]
   299a0:	4053      	eors	r3, r2
   299a2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   299a4:	684a      	ldr	r2, [r1, #4]
   299a6:	7983      	ldrb	r3, [r0, #6]
   299a8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299ac:	7183      	strb	r3, [r0, #6]
   299ae:	684a      	ldr	r2, [r1, #4]
   299b0:	79c3      	ldrb	r3, [r0, #7]
   299b2:	4053      	eors	r3, r2
   299b4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   299b6:	7acb      	ldrb	r3, [r1, #11]
   299b8:	7a02      	ldrb	r2, [r0, #8]
   299ba:	4053      	eors	r3, r2
   299bc:	7203      	strb	r3, [r0, #8]
   299be:	7a42      	ldrb	r2, [r0, #9]
   299c0:	894b      	ldrh	r3, [r1, #10]
   299c2:	4053      	eors	r3, r2
   299c4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   299c6:	688a      	ldr	r2, [r1, #8]
   299c8:	7a83      	ldrb	r3, [r0, #10]
   299ca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299ce:	7283      	strb	r3, [r0, #10]
   299d0:	688a      	ldr	r2, [r1, #8]
   299d2:	7ac3      	ldrb	r3, [r0, #11]
   299d4:	4053      	eors	r3, r2
   299d6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   299d8:	7bcb      	ldrb	r3, [r1, #15]
   299da:	7b02      	ldrb	r2, [r0, #12]
   299dc:	4053      	eors	r3, r2
   299de:	7303      	strb	r3, [r0, #12]
   299e0:	89cb      	ldrh	r3, [r1, #14]
   299e2:	7b42      	ldrb	r2, [r0, #13]
   299e4:	4053      	eors	r3, r2
   299e6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   299e8:	68ca      	ldr	r2, [r1, #12]
   299ea:	7b83      	ldrb	r3, [r0, #14]
   299ec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299f0:	7383      	strb	r3, [r0, #14]
   299f2:	68ca      	ldr	r2, [r1, #12]
   299f4:	7bc3      	ldrb	r3, [r0, #15]
   299f6:	4053      	eors	r3, r2
   299f8:	73c3      	strb	r3, [r0, #15]
}
   299fa:	4770      	bx	lr

000299fc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   299fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   299fe:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29a00:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   29a02:	f88d 2000 	strb.w	r2, [sp]
   29a06:	7942      	ldrb	r2, [r0, #5]
   29a08:	f88d 2001 	strb.w	r2, [sp, #1]
   29a0c:	7a82      	ldrb	r2, [r0, #10]
   29a0e:	f88d 2002 	strb.w	r2, [sp, #2]
   29a12:	7bc2      	ldrb	r2, [r0, #15]
   29a14:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29a18:	7902      	ldrb	r2, [r0, #4]
   29a1a:	f88d 2004 	strb.w	r2, [sp, #4]
   29a1e:	7a42      	ldrb	r2, [r0, #9]
   29a20:	f88d 2005 	strb.w	r2, [sp, #5]
   29a24:	7b82      	ldrb	r2, [r0, #14]
   29a26:	f88d 2006 	strb.w	r2, [sp, #6]
   29a2a:	78c2      	ldrb	r2, [r0, #3]
   29a2c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   29a30:	7a02      	ldrb	r2, [r0, #8]
   29a32:	f88d 2008 	strb.w	r2, [sp, #8]
   29a36:	7b42      	ldrb	r2, [r0, #13]
   29a38:	f88d 2009 	strb.w	r2, [sp, #9]
   29a3c:	7882      	ldrb	r2, [r0, #2]
   29a3e:	f88d 200a 	strb.w	r2, [sp, #10]
   29a42:	79c2      	ldrb	r2, [r0, #7]
   29a44:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29a48:	7b02      	ldrb	r2, [r0, #12]
   29a4a:	f88d 200c 	strb.w	r2, [sp, #12]
   29a4e:	7842      	ldrb	r2, [r0, #1]
   29a50:	f88d 200d 	strb.w	r2, [sp, #13]
   29a54:	7982      	ldrb	r2, [r0, #6]
   29a56:	f88d 200e 	strb.w	r2, [sp, #14]
   29a5a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29a5e:	2310      	movs	r3, #16
   29a60:	466a      	mov	r2, sp
   29a62:	4619      	mov	r1, r3
   29a64:	f7ff ff6d 	bl	29942 <_copy>
}
   29a68:	b005      	add	sp, #20
   29a6a:	f85d fb04 	ldr.w	pc, [sp], #4

00029a6e <mult_row_column>:
{
   29a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a70:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29a72:	7808      	ldrb	r0, [r1, #0]
{
   29a74:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29a76:	f7ff ff73 	bl	29960 <_double_byte>
   29a7a:	4605      	mov	r5, r0
   29a7c:	7860      	ldrb	r0, [r4, #1]
   29a7e:	f7ff ff6f 	bl	29960 <_double_byte>
   29a82:	78a2      	ldrb	r2, [r4, #2]
   29a84:	7863      	ldrb	r3, [r4, #1]
   29a86:	4053      	eors	r3, r2
   29a88:	78e2      	ldrb	r2, [r4, #3]
   29a8a:	4053      	eors	r3, r2
   29a8c:	405d      	eors	r5, r3
   29a8e:	4068      	eors	r0, r5
   29a90:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   29a92:	7860      	ldrb	r0, [r4, #1]
   29a94:	7827      	ldrb	r7, [r4, #0]
   29a96:	f7ff ff63 	bl	29960 <_double_byte>
   29a9a:	4605      	mov	r5, r0
   29a9c:	78a0      	ldrb	r0, [r4, #2]
   29a9e:	f7ff ff5f 	bl	29960 <_double_byte>
   29aa2:	78a3      	ldrb	r3, [r4, #2]
   29aa4:	405f      	eors	r7, r3
   29aa6:	78e3      	ldrb	r3, [r4, #3]
   29aa8:	405f      	eors	r7, r3
   29aaa:	407d      	eors	r5, r7
   29aac:	4068      	eors	r0, r5
   29aae:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   29ab0:	7863      	ldrb	r3, [r4, #1]
   29ab2:	7827      	ldrb	r7, [r4, #0]
   29ab4:	78a0      	ldrb	r0, [r4, #2]
   29ab6:	405f      	eors	r7, r3
   29ab8:	f7ff ff52 	bl	29960 <_double_byte>
   29abc:	4605      	mov	r5, r0
   29abe:	78e0      	ldrb	r0, [r4, #3]
   29ac0:	f7ff ff4e 	bl	29960 <_double_byte>
   29ac4:	78e3      	ldrb	r3, [r4, #3]
   29ac6:	405f      	eors	r7, r3
   29ac8:	407d      	eors	r5, r7
   29aca:	4068      	eors	r0, r5
   29acc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   29ace:	7820      	ldrb	r0, [r4, #0]
   29ad0:	f7ff ff46 	bl	29960 <_double_byte>
   29ad4:	7862      	ldrb	r2, [r4, #1]
   29ad6:	7823      	ldrb	r3, [r4, #0]
   29ad8:	4053      	eors	r3, r2
   29ada:	78a2      	ldrb	r2, [r4, #2]
   29adc:	4053      	eors	r3, r2
   29ade:	ea80 0503 	eor.w	r5, r0, r3
   29ae2:	78e0      	ldrb	r0, [r4, #3]
   29ae4:	f7ff ff3c 	bl	29960 <_double_byte>
   29ae8:	b2ed      	uxtb	r5, r5
   29aea:	4045      	eors	r5, r0
   29aec:	70f5      	strb	r5, [r6, #3]
}
   29aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029af0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   29af0:	b570      	push	{r4, r5, r6, lr}
   29af2:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   29af4:	4605      	mov	r5, r0
{
   29af6:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   29af8:	2800      	cmp	r0, #0
   29afa:	d049      	beq.n	29b90 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   29afc:	2900      	cmp	r1, #0
   29afe:	d049      	beq.n	29b94 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   29b00:	2a00      	cmp	r2, #0
   29b02:	d049      	beq.n	29b98 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   29b04:	2310      	movs	r3, #16
   29b06:	460a      	mov	r2, r1
   29b08:	4668      	mov	r0, sp
   29b0a:	4619      	mov	r1, r3
   29b0c:	f7ff ff19 	bl	29942 <_copy>
	add_round_key(state, s->words);
   29b10:	4621      	mov	r1, r4
   29b12:	4668      	mov	r0, sp
   29b14:	f7ff ff2d 	bl	29972 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   29b18:	3410      	adds	r4, #16
   29b1a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   29b1e:	4668      	mov	r0, sp
   29b20:	f7e2 fe96 	bl	c850 <sub_bytes>
		shift_rows(state);
   29b24:	4668      	mov	r0, sp
   29b26:	f7ff ff69 	bl	299fc <shift_rows>
	mult_row_column(t, s);
   29b2a:	4669      	mov	r1, sp
   29b2c:	a804      	add	r0, sp, #16
   29b2e:	f7ff ff9e 	bl	29a6e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29b32:	a901      	add	r1, sp, #4
   29b34:	a805      	add	r0, sp, #20
   29b36:	f7ff ff9a 	bl	29a6e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29b3a:	a902      	add	r1, sp, #8
   29b3c:	a806      	add	r0, sp, #24
   29b3e:	f7ff ff96 	bl	29a6e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   29b42:	a903      	add	r1, sp, #12
   29b44:	a807      	add	r0, sp, #28
   29b46:	f7ff ff92 	bl	29a6e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29b4a:	2310      	movs	r3, #16
   29b4c:	4668      	mov	r0, sp
   29b4e:	4619      	mov	r1, r3
   29b50:	eb0d 0203 	add.w	r2, sp, r3
   29b54:	f7ff fef5 	bl	29942 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   29b58:	4621      	mov	r1, r4
   29b5a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   29b5c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   29b5e:	f7ff ff08 	bl	29972 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   29b62:	42b4      	cmp	r4, r6
   29b64:	d1db      	bne.n	29b1e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   29b66:	f7e2 fe73 	bl	c850 <sub_bytes>
	shift_rows(state);
   29b6a:	4668      	mov	r0, sp
   29b6c:	f7ff ff46 	bl	299fc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   29b70:	4621      	mov	r1, r4
   29b72:	4668      	mov	r0, sp
   29b74:	f7ff fefd 	bl	29972 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   29b78:	2310      	movs	r3, #16
   29b7a:	466a      	mov	r2, sp
   29b7c:	4619      	mov	r1, r3
   29b7e:	4628      	mov	r0, r5
   29b80:	f7ff fedf 	bl	29942 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   29b84:	4668      	mov	r0, sp
   29b86:	2210      	movs	r2, #16
   29b88:	2100      	movs	r1, #0
   29b8a:	f7ff fee7 	bl	2995c <_set>

	return TC_CRYPTO_SUCCESS;
   29b8e:	2001      	movs	r0, #1
}
   29b90:	b008      	add	sp, #32
   29b92:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29b94:	4608      	mov	r0, r1
   29b96:	e7fb      	b.n	29b90 <tc_aes_encrypt+0xa0>
   29b98:	4610      	mov	r0, r2
   29b9a:	e7f9      	b.n	29b90 <tc_aes_encrypt+0xa0>

00029b9c <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29b9c:	460a      	mov	r2, r1
{
   29b9e:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29ba0:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   29ba4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29ba6:	2b00      	cmp	r3, #0
   29ba8:	bfac      	ite	ge
   29baa:	2300      	movge	r3, #0
   29bac:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   29bae:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29bb2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   29bb6:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   29bb8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   29bbc:	d002      	beq.n	29bc4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   29bbe:	7813      	ldrb	r3, [r2, #0]
   29bc0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29bc2:	e7f4      	b.n	29bae <gf_double+0x12>
	}
}
   29bc4:	bd10      	pop	{r4, pc}

00029bc6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29bc6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   29bc8:	b120      	cbz	r0, 29bd4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   29bca:	2258      	movs	r2, #88	; 0x58
   29bcc:	2100      	movs	r1, #0
   29bce:	f7ff fec5 	bl	2995c <_set>
   29bd2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29bd4:	bd08      	pop	{r3, pc}

00029bd6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   29bd6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29bd8:	4604      	mov	r4, r0
   29bda:	b188      	cbz	r0, 29c00 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29bdc:	2210      	movs	r2, #16
   29bde:	2100      	movs	r1, #0
   29be0:	f7ff febc 	bl	2995c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29be4:	2210      	movs	r2, #16
   29be6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29bea:	2100      	movs	r1, #0
   29bec:	f7ff feb6 	bl	2995c <_set>
	s->leftover_offset = 0;
   29bf0:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29bf2:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   29bf4:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   29bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   29bfa:	2001      	movs	r0, #1
   29bfc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   29c00:	bd10      	pop	{r4, pc}

00029c02 <tc_cmac_setup>:
{
   29c02:	b570      	push	{r4, r5, r6, lr}
   29c04:	4604      	mov	r4, r0
   29c06:	460d      	mov	r5, r1
   29c08:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   29c0a:	b310      	cbz	r0, 29c52 <tc_cmac_setup+0x50>
   29c0c:	b311      	cbz	r1, 29c54 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   29c0e:	2258      	movs	r2, #88	; 0x58
   29c10:	2100      	movs	r1, #0
   29c12:	f7ff fea3 	bl	2995c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29c16:	4629      	mov	r1, r5
   29c18:	4630      	mov	r0, r6
	s->sched = sched;
   29c1a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29c1c:	f7e2 fe24 	bl	c868 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29c20:	2210      	movs	r2, #16
   29c22:	2100      	movs	r1, #0
   29c24:	4620      	mov	r0, r4
   29c26:	f7ff fe99 	bl	2995c <_set>
	gf_double (s->K1, s->iv);
   29c2a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29c2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29c30:	4621      	mov	r1, r4
   29c32:	4620      	mov	r0, r4
   29c34:	f7ff ff5c 	bl	29af0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   29c38:	4621      	mov	r1, r4
   29c3a:	4628      	mov	r0, r5
   29c3c:	f7ff ffae 	bl	29b9c <gf_double>
	gf_double (s->K2, s->K1);
   29c40:	4629      	mov	r1, r5
   29c42:	f104 0020 	add.w	r0, r4, #32
   29c46:	f7ff ffa9 	bl	29b9c <gf_double>
	tc_cmac_init(s);
   29c4a:	4620      	mov	r0, r4
   29c4c:	f7ff ffc3 	bl	29bd6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29c50:	2001      	movs	r0, #1
}
   29c52:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29c54:	4608      	mov	r0, r1
   29c56:	e7fc      	b.n	29c52 <tc_cmac_setup+0x50>

00029c58 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   29c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c5c:	460e      	mov	r6, r1
   29c5e:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29c60:	4604      	mov	r4, r0
   29c62:	2800      	cmp	r0, #0
   29c64:	d060      	beq.n	29d28 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29c66:	b1fa      	cbz	r2, 29ca8 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   29c68:	2900      	cmp	r1, #0
   29c6a:	d05d      	beq.n	29d28 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   29c6c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   29c70:	ea53 0102 	orrs.w	r1, r3, r2
   29c74:	d058      	beq.n	29d28 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   29c76:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   29c78:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   29c7c:	f142 32ff 	adc.w	r2, r2, #4294967295
   29c80:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   29c84:	f1b8 0f00 	cmp.w	r8, #0
   29c88:	d02c      	beq.n	29ce4 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29c8a:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29c8e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   29c92:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29c94:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   29c96:	d20a      	bcs.n	29cae <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29c98:	462b      	mov	r3, r5
   29c9a:	4632      	mov	r2, r6
   29c9c:	4629      	mov	r1, r5
   29c9e:	f7ff fe50 	bl	29942 <_copy>
			s->leftover_offset += data_length;
   29ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29ca4:	442b      	add	r3, r5
   29ca6:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   29ca8:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   29caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   29cae:	463b      	mov	r3, r7
   29cb0:	4632      	mov	r2, r6
   29cb2:	4639      	mov	r1, r7
   29cb4:	f7ff fe45 	bl	29942 <_copy>
		s->leftover_offset = 0;
   29cb8:	2300      	movs	r3, #0
   29cba:	3d10      	subs	r5, #16
   29cbc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   29cbe:	4445      	add	r5, r8
		data += remaining_space;
   29cc0:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29cc2:	1e63      	subs	r3, r4, #1
   29cc4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   29cc8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29ccc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29cd0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   29cd2:	ea82 0200 	eor.w	r2, r2, r0
   29cd6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29cd8:	d1f6      	bne.n	29cc8 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29cda:	4621      	mov	r1, r4
   29cdc:	4620      	mov	r0, r4
   29cde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29ce0:	f7ff ff06 	bl	29af0 <tc_aes_encrypt>
   29ce4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   29ce8:	2d10      	cmp	r5, #16
   29cea:	d80a      	bhi.n	29d02 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   29cec:	2d00      	cmp	r5, #0
   29cee:	d0db      	beq.n	29ca8 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   29cf0:	462b      	mov	r3, r5
   29cf2:	4632      	mov	r2, r6
   29cf4:	4629      	mov	r1, r5
   29cf6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29cfa:	f7ff fe22 	bl	29942 <_copy>
		s->leftover_offset = data_length;
   29cfe:	6465      	str	r5, [r4, #68]	; 0x44
   29d00:	e7d2      	b.n	29ca8 <tc_cmac_update+0x50>
   29d02:	1e63      	subs	r3, r4, #1
   29d04:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   29d06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29d0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d0e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   29d10:	ea82 0200 	eor.w	r2, r2, r0
   29d14:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d16:	d1f6      	bne.n	29d06 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29d18:	4621      	mov	r1, r4
   29d1a:	4620      	mov	r0, r4
   29d1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29d1e:	f7ff fee7 	bl	29af0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   29d22:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   29d24:	3d10      	subs	r5, #16
   29d26:	e7df      	b.n	29ce8 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   29d28:	2000      	movs	r0, #0
   29d2a:	e7be      	b.n	29caa <tc_cmac_update+0x52>

00029d2c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   29d2c:	b570      	push	{r4, r5, r6, lr}
   29d2e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29d30:	4605      	mov	r5, r0
   29d32:	b1f0      	cbz	r0, 29d72 <tc_cmac_final+0x46>
   29d34:	b371      	cbz	r1, 29d94 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29d36:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29d38:	2a10      	cmp	r2, #16
   29d3a:	d11b      	bne.n	29d74 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29d3c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d3e:	1e63      	subs	r3, r4, #1
   29d40:	3901      	subs	r1, #1
   29d42:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29d46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29d4a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d4e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29d50:	ea82 0206 	eor.w	r2, r2, r6
   29d54:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   29d58:	ea82 0206 	eor.w	r2, r2, r6
   29d5c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d5e:	d1f2      	bne.n	29d46 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29d60:	4621      	mov	r1, r4
   29d62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29d64:	4628      	mov	r0, r5
   29d66:	f7ff fec3 	bl	29af0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   29d6a:	4620      	mov	r0, r4
   29d6c:	f7ff ff2b 	bl	29bc6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29d70:	2001      	movs	r0, #1
}
   29d72:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   29d74:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29d78:	2100      	movs	r1, #0
   29d7a:	f1c2 0210 	rsb	r2, r2, #16
   29d7e:	4420      	add	r0, r4
   29d80:	f7ff fdec 	bl	2995c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29d84:	2280      	movs	r2, #128	; 0x80
   29d86:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   29d88:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29d8c:	4423      	add	r3, r4
   29d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29d92:	e7d4      	b.n	29d3e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   29d94:	4608      	mov	r0, r1
   29d96:	e7ec      	b.n	29d72 <tc_cmac_final+0x46>

00029d98 <tc_sha256_update>:
{
   29d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d9a:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   29d9c:	b110      	cbz	r0, 29da4 <tc_sha256_update+0xc>
   29d9e:	b1f9      	cbz	r1, 29de0 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   29da0:	b90a      	cbnz	r2, 29da6 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   29da2:	2001      	movs	r0, #1
}
   29da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   29da6:	2700      	movs	r7, #0
   29da8:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   29daa:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   29dae:	6e83      	ldr	r3, [r0, #104]	; 0x68
   29db0:	1c5a      	adds	r2, r3, #1
   29db2:	6682      	str	r2, [r0, #104]	; 0x68
   29db4:	f814 1b01 	ldrb.w	r1, [r4], #1
   29db8:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   29dba:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   29dbc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   29dc0:	d90b      	bls.n	29dda <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   29dc2:	4631      	mov	r1, r6
   29dc4:	f7e2 fda4 	bl	c910 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   29dc8:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   29dcc:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   29dd0:	f142 0200 	adc.w	r2, r2, #0
   29dd4:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   29dd8:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   29dda:	42a5      	cmp	r5, r4
   29ddc:	d1e7      	bne.n	29dae <tc_sha256_update+0x16>
   29dde:	e7e0      	b.n	29da2 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   29de0:	4608      	mov	r0, r1
   29de2:	e7df      	b.n	29da4 <tc_sha256_update+0xc>

00029de4 <tc_sha256_final>:
{
   29de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29de6:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   29de8:	4605      	mov	r5, r0
   29dea:	2800      	cmp	r0, #0
   29dec:	d054      	beq.n	29e98 <tc_sha256_final+0xb4>
   29dee:	2900      	cmp	r1, #0
   29df0:	d053      	beq.n	29e9a <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   29df2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   29df4:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   29df8:	00d8      	lsls	r0, r3, #3
   29dfa:	1812      	adds	r2, r2, r0
   29dfc:	f141 0100 	adc.w	r1, r1, #0
   29e00:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   29e04:	2280      	movs	r2, #128	; 0x80
   29e06:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   29e08:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   29e0a:	4423      	add	r3, r4
   29e0c:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   29e0e:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   29e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   29e16:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   29e1a:	d90a      	bls.n	29e32 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   29e1c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   29e20:	4639      	mov	r1, r7
   29e22:	4430      	add	r0, r6
   29e24:	f7ff fd9a 	bl	2995c <_set>
		compress(s->iv, s->leftover);
   29e28:	4631      	mov	r1, r6
   29e2a:	4620      	mov	r0, r4
   29e2c:	f7e2 fd70 	bl	c910 <compress>
		s->leftover_offset = 0;
   29e30:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   29e32:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   29e34:	2100      	movs	r1, #0
   29e36:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   29e3a:	4430      	add	r0, r6
   29e3c:	f7ff fd8e 	bl	2995c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   29e40:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   29e42:	4631      	mov	r1, r6
   29e44:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   29e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   29e48:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   29e4a:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   29e4c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   29e50:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   29e54:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   29e56:	0e1b      	lsrs	r3, r3, #24
   29e58:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   29e5c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   29e5e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   29e62:	f7e2 fd55 	bl	c910 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   29e66:	1d2b      	adds	r3, r5, #4
   29e68:	1f21      	subs	r1, r4, #4
   29e6a:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   29e6c:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   29e70:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   29e72:	0e10      	lsrs	r0, r2, #24
   29e74:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   29e78:	0c10      	lsrs	r0, r2, #16
   29e7a:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   29e7e:	0a10      	lsrs	r0, r2, #8
   29e80:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   29e84:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   29e88:	42ab      	cmp	r3, r5
   29e8a:	d1ef      	bne.n	29e6c <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   29e8c:	4620      	mov	r0, r4
   29e8e:	2270      	movs	r2, #112	; 0x70
   29e90:	2100      	movs	r1, #0
   29e92:	f7ff fd63 	bl	2995c <_set>
	return TC_CRYPTO_SUCCESS;
   29e96:	2001      	movs	r0, #1
}
   29e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   29e9a:	4608      	mov	r0, r1
   29e9c:	e7fc      	b.n	29e98 <tc_sha256_final+0xb4>

00029e9e <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   29e9e:	b530      	push	{r4, r5, lr}
   29ea0:	1e43      	subs	r3, r0, #1
   29ea2:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   29ea4:	42a9      	cmp	r1, r5
   29ea6:	d106      	bne.n	29eb6 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   29ea8:	2136      	movs	r1, #54	; 0x36
   29eaa:	245c      	movs	r4, #92	; 0x5c
   29eac:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   29eae:	1a13      	subs	r3, r2, r0
   29eb0:	2b3f      	cmp	r3, #63	; 0x3f
   29eb2:	d90c      	bls.n	29ece <rekey+0x30>
	}
}
   29eb4:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   29eb6:	780c      	ldrb	r4, [r1, #0]
   29eb8:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   29ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   29ec0:	f811 4b01 	ldrb.w	r4, [r1], #1
   29ec4:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   29ec8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   29ecc:	e7ea      	b.n	29ea4 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   29ece:	f802 1b01 	strb.w	r1, [r2], #1
   29ed2:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   29ed6:	e7ea      	b.n	29eae <rekey+0x10>

00029ed8 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   29ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   29eda:	460e      	mov	r6, r1
   29edc:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   29ede:	4605      	mov	r5, r0
{
   29ee0:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   29ee2:	b1b8      	cbz	r0, 29f14 <tc_hmac_set_key+0x3c>
   29ee4:	b341      	cbz	r1, 29f38 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   29ee6:	b34a      	cbz	r2, 29f3c <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   29ee8:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   29eea:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   29eee:	d813      	bhi.n	29f18 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   29ef0:	a810      	add	r0, sp, #64	; 0x40
   29ef2:	f7e2 fdf7 	bl	cae4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   29ef6:	4622      	mov	r2, r4
   29ef8:	4669      	mov	r1, sp
   29efa:	a810      	add	r0, sp, #64	; 0x40
   29efc:	f7ff ff4c 	bl	29d98 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   29f00:	a910      	add	r1, sp, #64	; 0x40
   29f02:	a834      	add	r0, sp, #208	; 0xd0
   29f04:	f7ff ff6e 	bl	29de4 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   29f08:	4622      	mov	r2, r4
   29f0a:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   29f0c:	4638      	mov	r0, r7
   29f0e:	f7ff ffc6 	bl	29e9e <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   29f12:	2001      	movs	r0, #1
}
   29f14:	b04d      	add	sp, #308	; 0x134
   29f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   29f18:	f7e2 fde4 	bl	cae4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   29f1c:	4622      	mov	r2, r4
   29f1e:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   29f20:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   29f24:	4628      	mov	r0, r5
   29f26:	f7ff ff37 	bl	29d98 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   29f2a:	4629      	mov	r1, r5
   29f2c:	4620      	mov	r0, r4
   29f2e:	f7ff ff59 	bl	29de4 <tc_sha256_final>
		rekey(ctx->key,
   29f32:	2220      	movs	r2, #32
   29f34:	4621      	mov	r1, r4
   29f36:	e7e9      	b.n	29f0c <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   29f38:	4608      	mov	r0, r1
   29f3a:	e7eb      	b.n	29f14 <tc_hmac_set_key+0x3c>
   29f3c:	4610      	mov	r0, r2
   29f3e:	e7e9      	b.n	29f14 <tc_hmac_set_key+0x3c>

00029f40 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   29f40:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   29f42:	4604      	mov	r4, r0
   29f44:	b140      	cbz	r0, 29f58 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   29f46:	f7e2 fdcd 	bl	cae4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   29f4a:	2240      	movs	r2, #64	; 0x40
   29f4c:	4620      	mov	r0, r4
   29f4e:	f104 0170 	add.w	r1, r4, #112	; 0x70
   29f52:	f7ff ff21 	bl	29d98 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   29f56:	2001      	movs	r0, #1
}
   29f58:	bd10      	pop	{r4, pc}

00029f5a <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   29f5a:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   29f5c:	b110      	cbz	r0, 29f64 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   29f5e:	f7ff ff1b 	bl	29d98 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   29f62:	2001      	movs	r0, #1
}
   29f64:	bd08      	pop	{r3, pc}

00029f66 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   29f66:	b570      	push	{r4, r5, r6, lr}
   29f68:	460e      	mov	r6, r1
   29f6a:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29f6c:	4605      	mov	r5, r0
   29f6e:	b1f0      	cbz	r0, 29fae <tc_hmac_final+0x48>
   29f70:	2920      	cmp	r1, #32
   29f72:	d11c      	bne.n	29fae <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   29f74:	b1ea      	cbz	r2, 29fb2 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   29f76:	4611      	mov	r1, r2
   29f78:	f7ff ff34 	bl	29de4 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   29f7c:	4620      	mov	r0, r4
   29f7e:	f7e2 fdb1 	bl	cae4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   29f82:	2240      	movs	r2, #64	; 0x40
   29f84:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   29f88:	4620      	mov	r0, r4
   29f8a:	f7ff ff05 	bl	29d98 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   29f8e:	4632      	mov	r2, r6
   29f90:	4629      	mov	r1, r5
   29f92:	4620      	mov	r0, r4
   29f94:	f7ff ff00 	bl	29d98 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   29f98:	4621      	mov	r1, r4
   29f9a:	4628      	mov	r0, r5
   29f9c:	f7ff ff22 	bl	29de4 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   29fa0:	4620      	mov	r0, r4
   29fa2:	22f0      	movs	r2, #240	; 0xf0
   29fa4:	2100      	movs	r1, #0
   29fa6:	f7ff fcd9 	bl	2995c <_set>

	return TC_CRYPTO_SUCCESS;
   29faa:	2001      	movs	r0, #1
}
   29fac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29fae:	2000      	movs	r0, #0
   29fb0:	e7fc      	b.n	29fac <tc_hmac_final+0x46>
   29fb2:	4610      	mov	r0, r2
   29fb4:	e7fa      	b.n	29fac <tc_hmac_final+0x46>

00029fb6 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   29fb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fba:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   29fbc:	f04f 0b01 	mov.w	fp, #1
{
   29fc0:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   29fc2:	2300      	movs	r3, #0
{
   29fc4:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   29fc6:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   29fca:	4631      	mov	r1, r6
{
   29fcc:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   29fce:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   29fd0:	f88d 3006 	strb.w	r3, [sp, #6]
{
   29fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   29fd8:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   29fdc:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   29fe0:	f7ff ff7a 	bl	29ed8 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   29fe4:	4620      	mov	r0, r4
   29fe6:	f7ff ffab 	bl	29f40 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   29fea:	2220      	movs	r2, #32
   29fec:	4629      	mov	r1, r5
   29fee:	4620      	mov	r0, r4
   29ff0:	f7ff ffb3 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   29ff4:	465a      	mov	r2, fp
   29ff6:	4620      	mov	r0, r4
   29ff8:	f10d 0106 	add.w	r1, sp, #6
   29ffc:	f7ff ffad 	bl	29f5a <tc_hmac_update>

	if (data && datalen)
   2a000:	f1b8 0f00 	cmp.w	r8, #0
   2a004:	d007      	beq.n	2a016 <update+0x60>
   2a006:	f1b9 0f00 	cmp.w	r9, #0
   2a00a:	d004      	beq.n	2a016 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2a00c:	464a      	mov	r2, r9
   2a00e:	4641      	mov	r1, r8
   2a010:	4620      	mov	r0, r4
   2a012:	f7ff ffa2 	bl	29f5a <tc_hmac_update>
	if (additional_data && additional_datalen)
   2a016:	b13f      	cbz	r7, 2a028 <update+0x72>
   2a018:	f1ba 0f00 	cmp.w	sl, #0
   2a01c:	d004      	beq.n	2a028 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2a01e:	4652      	mov	r2, sl
   2a020:	4639      	mov	r1, r7
   2a022:	4620      	mov	r0, r4
   2a024:	f7ff ff99 	bl	29f5a <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2a028:	4622      	mov	r2, r4
   2a02a:	2120      	movs	r1, #32
   2a02c:	4630      	mov	r0, r6
   2a02e:	f7ff ff9a 	bl	29f66 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2a032:	2220      	movs	r2, #32
   2a034:	4631      	mov	r1, r6
   2a036:	4620      	mov	r0, r4
   2a038:	f7ff ff4e 	bl	29ed8 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2a03c:	4620      	mov	r0, r4
   2a03e:	f7ff ff7f 	bl	29f40 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2a042:	2220      	movs	r2, #32
   2a044:	4629      	mov	r1, r5
   2a046:	4620      	mov	r0, r4
   2a048:	f7ff ff87 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2a04c:	4622      	mov	r2, r4
   2a04e:	2120      	movs	r1, #32
   2a050:	4628      	mov	r0, r5
   2a052:	f7ff ff88 	bl	29f66 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2a056:	f1b8 0f00 	cmp.w	r8, #0
   2a05a:	d03a      	beq.n	2a0d2 <update+0x11c>
   2a05c:	f1b9 0f00 	cmp.w	r9, #0
   2a060:	d037      	beq.n	2a0d2 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2a062:	2220      	movs	r2, #32
   2a064:	4631      	mov	r1, r6
   2a066:	4620      	mov	r0, r4
   2a068:	f7ff ff36 	bl	29ed8 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2a06c:	4620      	mov	r0, r4
   2a06e:	f7ff ff67 	bl	29f40 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2a072:	2220      	movs	r2, #32
   2a074:	4629      	mov	r1, r5
   2a076:	4620      	mov	r0, r4
   2a078:	f7ff ff6f 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2a07c:	2201      	movs	r2, #1
   2a07e:	f10d 0107 	add.w	r1, sp, #7
   2a082:	4620      	mov	r0, r4
   2a084:	f7ff ff69 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2a088:	464a      	mov	r2, r9
   2a08a:	4641      	mov	r1, r8
   2a08c:	4620      	mov	r0, r4
   2a08e:	f7ff ff64 	bl	29f5a <tc_hmac_update>
	if (additional_data && additional_datalen)
   2a092:	b13f      	cbz	r7, 2a0a4 <update+0xee>
   2a094:	f1ba 0f00 	cmp.w	sl, #0
   2a098:	d004      	beq.n	2a0a4 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2a09a:	4652      	mov	r2, sl
   2a09c:	4639      	mov	r1, r7
   2a09e:	4620      	mov	r0, r4
   2a0a0:	f7ff ff5b 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2a0a4:	4622      	mov	r2, r4
   2a0a6:	2120      	movs	r1, #32
   2a0a8:	4630      	mov	r0, r6
   2a0aa:	f7ff ff5c 	bl	29f66 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2a0ae:	2220      	movs	r2, #32
   2a0b0:	4631      	mov	r1, r6
   2a0b2:	4620      	mov	r0, r4
   2a0b4:	f7ff ff10 	bl	29ed8 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2a0b8:	4620      	mov	r0, r4
   2a0ba:	f7ff ff41 	bl	29f40 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2a0be:	2220      	movs	r2, #32
   2a0c0:	4629      	mov	r1, r5
   2a0c2:	4620      	mov	r0, r4
   2a0c4:	f7ff ff49 	bl	29f5a <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2a0c8:	4622      	mov	r2, r4
   2a0ca:	2120      	movs	r1, #32
   2a0cc:	4628      	mov	r0, r5
   2a0ce:	f7ff ff4a 	bl	29f66 <tc_hmac_final>
}
   2a0d2:	b003      	add	sp, #12
   2a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a0d8 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a0da:	460c      	mov	r4, r1
   2a0dc:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2a0de:	4605      	mov	r5, r0
   2a0e0:	b1b0      	cbz	r0, 2a110 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2a0e2:	b1b9      	cbz	r1, 2a114 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2a0e4:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2a0e6:	2220      	movs	r2, #32
   2a0e8:	2100      	movs	r1, #0
   2a0ea:	30f0      	adds	r0, #240	; 0xf0
   2a0ec:	f7ff fc36 	bl	2995c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2a0f0:	2220      	movs	r2, #32
   2a0f2:	2101      	movs	r1, #1
   2a0f4:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2a0f8:	f7ff fc30 	bl	2995c <_set>
	update(prng, personalization, plen, 0, 0);
   2a0fc:	4628      	mov	r0, r5
   2a0fe:	4633      	mov	r3, r6
   2a100:	463a      	mov	r2, r7
   2a102:	4621      	mov	r1, r4
   2a104:	9600      	str	r6, [sp, #0]
   2a106:	f7ff ff56 	bl	29fb6 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2a10a:	2001      	movs	r0, #1
	prng->countdown = 0;
   2a10c:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2a110:	b003      	add	sp, #12
   2a112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2a114:	4608      	mov	r0, r1
   2a116:	e7fb      	b.n	2a110 <tc_hmac_prng_init+0x38>

0002a118 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2a118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a11a:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2a11c:	4605      	mov	r5, r0
   2a11e:	b180      	cbz	r0, 2a142 <tc_hmac_prng_reseed+0x2a>
   2a120:	b179      	cbz	r1, 2a142 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2a122:	2a1f      	cmp	r2, #31
   2a124:	d90d      	bls.n	2a142 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2a126:	b153      	cbz	r3, 2a13e <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2a128:	b16c      	cbz	r4, 2a146 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2a12a:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2a12c:	f7ff ff43 	bl	29fb6 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2a130:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2a134:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2a136:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2a13a:	b003      	add	sp, #12
   2a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2a13e:	9300      	str	r3, [sp, #0]
   2a140:	e7f4      	b.n	2a12c <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2a142:	2000      	movs	r0, #0
   2a144:	e7f9      	b.n	2a13a <tc_hmac_prng_reseed+0x22>
   2a146:	4620      	mov	r0, r4
   2a148:	e7f7      	b.n	2a13a <tc_hmac_prng_reseed+0x22>

0002a14a <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2a14a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a14e:	460d      	mov	r5, r1
   2a150:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2a152:	4680      	mov	r8, r0
   2a154:	b3d8      	cbz	r0, 2a1ce <tc_hmac_prng_generate+0x84>
   2a156:	b3d2      	cbz	r2, 2a1ce <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2a158:	1e4b      	subs	r3, r1, #1
   2a15a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2a15e:	d236      	bcs.n	2a1ce <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2a160:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2a164:	b3ab      	cbz	r3, 2a1d2 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2a166:	3b01      	subs	r3, #1
   2a168:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2a16c:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2a170:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2a174:	2220      	movs	r2, #32
   2a176:	4649      	mov	r1, r9
   2a178:	4620      	mov	r0, r4
   2a17a:	f7ff fead 	bl	29ed8 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2a17e:	4620      	mov	r0, r4
   2a180:	f7ff fede 	bl	29f40 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2a184:	2220      	movs	r2, #32
   2a186:	4639      	mov	r1, r7
   2a188:	4620      	mov	r0, r4
   2a18a:	f7ff fee6 	bl	29f5a <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2a18e:	4622      	mov	r2, r4
   2a190:	2120      	movs	r1, #32
   2a192:	4638      	mov	r0, r7
   2a194:	f7ff fee7 	bl	29f66 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2a198:	2d20      	cmp	r5, #32
   2a19a:	462e      	mov	r6, r5
   2a19c:	bf28      	it	cs
   2a19e:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2a1a0:	4640      	mov	r0, r8
   2a1a2:	4633      	mov	r3, r6
   2a1a4:	463a      	mov	r2, r7
   2a1a6:	4631      	mov	r1, r6
   2a1a8:	f7ff fbcb 	bl	29942 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2a1ac:	2d20      	cmp	r5, #32
   2a1ae:	bf38      	it	cc
   2a1b0:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2a1b2:	3d20      	subs	r5, #32
		out += bufferlen;
   2a1b4:	44b0      	add	r8, r6
	while (outlen != 0) {
   2a1b6:	d1dd      	bne.n	2a174 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2a1b8:	4620      	mov	r0, r4
   2a1ba:	462b      	mov	r3, r5
   2a1bc:	462a      	mov	r2, r5
   2a1be:	4629      	mov	r1, r5
   2a1c0:	9500      	str	r5, [sp, #0]
   2a1c2:	f7ff fef8 	bl	29fb6 <update>

	return TC_CRYPTO_SUCCESS;
   2a1c6:	2001      	movs	r0, #1
}
   2a1c8:	b003      	add	sp, #12
   2a1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2a1ce:	2000      	movs	r0, #0
   2a1d0:	e7fa      	b.n	2a1c8 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2a1d2:	f04f 30ff 	mov.w	r0, #4294967295
   2a1d6:	e7f7      	b.n	2a1c8 <tc_hmac_prng_generate+0x7e>

0002a1d8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2a1d8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2a1da:	6800      	ldr	r0, [r0, #0]
   2a1dc:	f7e2 bcda 	b.w	cb94 <z_arm_fatal_error>

0002a1e0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2a1e0:	2100      	movs	r1, #0
   2a1e2:	2001      	movs	r0, #1
   2a1e4:	f7e2 bcd6 	b.w	cb94 <z_arm_fatal_error>

0002a1e8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2a1e8:	b508      	push	{r3, lr}
	handler();
   2a1ea:	f7e2 fd8f 	bl	cd0c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2a1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2a1f2:	f7e2 be59 	b.w	cea8 <z_arm_exc_exit>

0002a1f6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2a1f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2a1f8:	f383 880b 	msr	PSPLIM, r3
}
   2a1fc:	4770      	bx	lr

0002a1fe <z_log_msg_static_create.constprop.0>:
   2a1fe:	2300      	movs	r3, #0
   2a200:	f7e0 bcac 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002a204 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2a204:	4770      	bx	lr

0002a206 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2a206:	4770      	bx	lr

0002a208 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2a208:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2a20c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2a210:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2a212:	bf08      	it	eq
   2a214:	f06f 0015 	mvneq.w	r0, #21
   2a218:	4770      	bx	lr

0002a21a <mpu_configure_region>:
{
   2a21a:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2a21c:	890a      	ldrh	r2, [r1, #8]
   2a21e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2a220:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2a222:	684c      	ldr	r4, [r1, #4]
   2a224:	f002 021f 	and.w	r2, r2, #31
{
   2a228:	b085      	sub	sp, #20
   2a22a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2a22e:	9300      	str	r3, [sp, #0]
   2a230:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2a234:	f023 031f 	bic.w	r3, r3, #31
   2a238:	1e62      	subs	r2, r4, #1
   2a23a:	4413      	add	r3, r2
   2a23c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2a240:	2807      	cmp	r0, #7
   2a242:	9303      	str	r3, [sp, #12]
   2a244:	d904      	bls.n	2a250 <mpu_configure_region+0x36>
}
   2a246:	b005      	add	sp, #20
   2a248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2a24c:	f7e3 ba2c 	b.w	d6a8 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2a250:	4669      	mov	r1, sp
   2a252:	f7e3 fa0f 	bl	d674 <region_init>
}
   2a256:	b005      	add	sp, #20
   2a258:	bd30      	pop	{r4, r5, pc}

0002a25a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   2a25a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a25e:	4684      	mov	ip, r0
   2a260:	4688      	mov	r8, r1
	register const char *s = nptr;
   2a262:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2a264:	4621      	mov	r1, r4
   2a266:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a26a:	2b20      	cmp	r3, #32
   2a26c:	d0fa      	beq.n	2a264 <strtol+0xa>
   2a26e:	f1a3 0009 	sub.w	r0, r3, #9
   2a272:	2804      	cmp	r0, #4
   2a274:	d9f6      	bls.n	2a264 <strtol+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2a276:	2b2d      	cmp	r3, #45	; 0x2d
   2a278:	d123      	bne.n	2a2c2 <strtol+0x68>
		neg = 1;
		c = *s++;
   2a27a:	784b      	ldrb	r3, [r1, #1]
   2a27c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2a27e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a280:	bb2a      	cbnz	r2, 2a2ce <strtol+0x74>
   2a282:	2b30      	cmp	r3, #48	; 0x30
   2a284:	d030      	beq.n	2a2e8 <strtol+0x8e>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2a286:	220a      	movs	r2, #10
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2a288:	2600      	movs	r6, #0
   2a28a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   2a28e:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   2a290:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   2a294:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2a296:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a29a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   2a29e:	2d09      	cmp	r5, #9
   2a2a0:	d829      	bhi.n	2a2f6 <strtol+0x9c>
			c -= '0';
   2a2a2:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2a2a4:	429a      	cmp	r2, r3
   2a2a6:	dd36      	ble.n	2a316 <strtol+0xbc>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a2a8:	1c75      	adds	r5, r6, #1
   2a2aa:	d007      	beq.n	2a2bc <strtol+0x62>
   2a2ac:	4570      	cmp	r0, lr
   2a2ae:	d82f      	bhi.n	2a310 <strtol+0xb6>
   2a2b0:	d101      	bne.n	2a2b6 <strtol+0x5c>
   2a2b2:	454b      	cmp	r3, r9
   2a2b4:	dc2c      	bgt.n	2a310 <strtol+0xb6>
			any = -1;
		} else {
			any = 1;
   2a2b6:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   2a2b8:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2a2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   2a2c0:	e7eb      	b.n	2a29a <strtol+0x40>
	} else if (c == '+') {
   2a2c2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2a2c4:	bf04      	itt	eq
   2a2c6:	784b      	ldrbeq	r3, [r1, #1]
   2a2c8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2a2ca:	2100      	movs	r1, #0
   2a2cc:	e7d8      	b.n	2a280 <strtol+0x26>
	if ((base == 0 || base == 16) &&
   2a2ce:	2a10      	cmp	r2, #16
   2a2d0:	d1da      	bne.n	2a288 <strtol+0x2e>
   2a2d2:	2b30      	cmp	r3, #48	; 0x30
   2a2d4:	d1d8      	bne.n	2a288 <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a2d6:	7820      	ldrb	r0, [r4, #0]
   2a2d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2a2dc:	2858      	cmp	r0, #88	; 0x58
   2a2de:	d1d3      	bne.n	2a288 <strtol+0x2e>
		c = s[1];
   2a2e0:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2a2e2:	2210      	movs	r2, #16
		s += 2;
   2a2e4:	3402      	adds	r4, #2
	if (base == 0) {
   2a2e6:	e7cf      	b.n	2a288 <strtol+0x2e>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a2e8:	7822      	ldrb	r2, [r4, #0]
   2a2ea:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2a2ee:	2a58      	cmp	r2, #88	; 0x58
   2a2f0:	d0f6      	beq.n	2a2e0 <strtol+0x86>
		base = c == '0' ? 8 : 10;
   2a2f2:	2208      	movs	r2, #8
   2a2f4:	e7c8      	b.n	2a288 <strtol+0x2e>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a2f6:	f043 0520 	orr.w	r5, r3, #32
   2a2fa:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   2a2fc:	2d19      	cmp	r5, #25
   2a2fe:	d80a      	bhi.n	2a316 <strtol+0xbc>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a300:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   2a304:	2d1a      	cmp	r5, #26
   2a306:	bf34      	ite	cc
   2a308:	2537      	movcc	r5, #55	; 0x37
   2a30a:	2557      	movcs	r5, #87	; 0x57
   2a30c:	1b5b      	subs	r3, r3, r5
   2a30e:	e7c9      	b.n	2a2a4 <strtol+0x4a>
			any = -1;
   2a310:	f04f 36ff 	mov.w	r6, #4294967295
   2a314:	e7d2      	b.n	2a2bc <strtol+0x62>
		}
	}

	if (any < 0) {
   2a316:	1c73      	adds	r3, r6, #1
   2a318:	d109      	bne.n	2a32e <strtol+0xd4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a31a:	f7fa fe57 	bl	24fcc <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2a31e:	2322      	movs	r3, #34	; 0x22
   2a320:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   2a322:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2a324:	f1b8 0f00 	cmp.w	r8, #0
   2a328:	d107      	bne.n	2a33a <strtol+0xe0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2a32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2a32e:	b101      	cbz	r1, 2a332 <strtol+0xd8>
		acc = -acc;
   2a330:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2a332:	f1b8 0f00 	cmp.w	r8, #0
   2a336:	d0f8      	beq.n	2a32a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a338:	b10e      	cbz	r6, 2a33e <strtol+0xe4>
   2a33a:	f104 3cff 	add.w	ip, r4, #4294967295
   2a33e:	f8c8 c000 	str.w	ip, [r8]
   2a342:	e7f2      	b.n	2a32a <strtol+0xd0>

0002a344 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a348:	4684      	mov	ip, r0
   2a34a:	460f      	mov	r7, r1
	register const char *s = nptr;
   2a34c:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2a34e:	4621      	mov	r1, r4
   2a350:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a354:	2b20      	cmp	r3, #32
   2a356:	d0fa      	beq.n	2a34e <strtoul+0xa>
   2a358:	f1a3 0009 	sub.w	r0, r3, #9
   2a35c:	2804      	cmp	r0, #4
   2a35e:	d9f6      	bls.n	2a34e <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2a360:	2b2d      	cmp	r3, #45	; 0x2d
   2a362:	d125      	bne.n	2a3b0 <strtoul+0x6c>
		neg = 1;
   2a364:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   2a368:	784b      	ldrb	r3, [r1, #1]
   2a36a:	1c8c      	adds	r4, r1, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a36c:	bb3a      	cbnz	r2, 2a3be <strtoul+0x7a>
   2a36e:	2b30      	cmp	r3, #48	; 0x30
   2a370:	d032      	beq.n	2a3d8 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2a372:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a374:	f04f 31ff 	mov.w	r1, #4294967295
   2a378:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2a37c:	2500      	movs	r5, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2a37e:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   2a382:	4628      	mov	r0, r5
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2a384:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a388:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   2a38c:	2e09      	cmp	r6, #9
   2a38e:	d82a      	bhi.n	2a3e6 <strtoul+0xa2>
			c -= '0';
   2a390:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2a392:	429a      	cmp	r2, r3
   2a394:	dd37      	ble.n	2a406 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a396:	1c6e      	adds	r6, r5, #1
   2a398:	d007      	beq.n	2a3aa <strtoul+0x66>
   2a39a:	4288      	cmp	r0, r1
   2a39c:	d830      	bhi.n	2a400 <strtoul+0xbc>
   2a39e:	d101      	bne.n	2a3a4 <strtoul+0x60>
   2a3a0:	4543      	cmp	r3, r8
   2a3a2:	dc2d      	bgt.n	2a400 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
   2a3a4:	2501      	movs	r5, #1
			acc *= base;
			acc += c;
   2a3a6:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2a3aa:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   2a3ae:	e7eb      	b.n	2a388 <strtoul+0x44>
	} else if (c == '+') {
   2a3b0:	2b2b      	cmp	r3, #43	; 0x2b
	register int neg = 0, any, cutlim;
   2a3b2:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
   2a3b6:	bf04      	itt	eq
   2a3b8:	784b      	ldrbeq	r3, [r1, #1]
   2a3ba:	1c8c      	addeq	r4, r1, #2
   2a3bc:	e7d6      	b.n	2a36c <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   2a3be:	2a10      	cmp	r2, #16
   2a3c0:	d1d8      	bne.n	2a374 <strtoul+0x30>
   2a3c2:	2b30      	cmp	r3, #48	; 0x30
   2a3c4:	d1d6      	bne.n	2a374 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a3c6:	7821      	ldrb	r1, [r4, #0]
   2a3c8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2a3cc:	2958      	cmp	r1, #88	; 0x58
   2a3ce:	d1d1      	bne.n	2a374 <strtoul+0x30>
		c = s[1];
   2a3d0:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2a3d2:	2210      	movs	r2, #16
		s += 2;
   2a3d4:	3402      	adds	r4, #2
	if (base == 0) {
   2a3d6:	e7cd      	b.n	2a374 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a3d8:	7822      	ldrb	r2, [r4, #0]
   2a3da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2a3de:	2a58      	cmp	r2, #88	; 0x58
   2a3e0:	d0f6      	beq.n	2a3d0 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2a3e2:	2208      	movs	r2, #8
   2a3e4:	e7c6      	b.n	2a374 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a3e6:	f043 0620 	orr.w	r6, r3, #32
   2a3ea:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   2a3ec:	2e19      	cmp	r6, #25
   2a3ee:	d80a      	bhi.n	2a406 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a3f0:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   2a3f4:	2e1a      	cmp	r6, #26
   2a3f6:	bf34      	ite	cc
   2a3f8:	2637      	movcc	r6, #55	; 0x37
   2a3fa:	2657      	movcs	r6, #87	; 0x57
   2a3fc:	1b9b      	subs	r3, r3, r6
   2a3fe:	e7c8      	b.n	2a392 <strtoul+0x4e>
			any = -1;
   2a400:	f04f 35ff 	mov.w	r5, #4294967295
   2a404:	e7d1      	b.n	2a3aa <strtoul+0x66>
		}
	}
	if (any < 0) {
   2a406:	1c6b      	adds	r3, r5, #1
   2a408:	d107      	bne.n	2a41a <strtoul+0xd6>
   2a40a:	f7fa fddf 	bl	24fcc <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2a40e:	2322      	movs	r3, #34	; 0x22
   2a410:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2a412:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2a414:	b947      	cbnz	r7, 2a428 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2a41a:	f1be 0f00 	cmp.w	lr, #0
   2a41e:	d000      	beq.n	2a422 <strtoul+0xde>
		acc = -acc;
   2a420:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2a422:	2f00      	cmp	r7, #0
   2a424:	d0f7      	beq.n	2a416 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a426:	b10d      	cbz	r5, 2a42c <strtoul+0xe8>
   2a428:	f104 3cff 	add.w	ip, r4, #4294967295
   2a42c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2a430:	e7f1      	b.n	2a416 <strtoul+0xd2>

0002a432 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2a432:	4603      	mov	r3, r0
   2a434:	3901      	subs	r1, #1
   2a436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2a43a:	b90a      	cbnz	r2, 2a440 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2a43c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2a43e:	4770      	bx	lr
		*d = *s;
   2a440:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2a444:	e7f7      	b.n	2a436 <strcpy+0x4>

0002a446 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2a446:	4603      	mov	r3, r0
{
   2a448:	b510      	push	{r4, lr}
   2a44a:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   2a44c:	b922      	cbnz	r2, 2a458 <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2a44e:	2100      	movs	r1, #0
   2a450:	441a      	add	r2, r3
	while (n > 0) {
   2a452:	4293      	cmp	r3, r2
   2a454:	d108      	bne.n	2a468 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   2a456:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   2a458:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a45c:	2c00      	cmp	r4, #0
   2a45e:	d0f6      	beq.n	2a44e <strncpy+0x8>
		*d = *s;
   2a460:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   2a464:	3a01      	subs	r2, #1
   2a466:	e7f1      	b.n	2a44c <strncpy+0x6>
		*d = '\0';
   2a468:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2a46c:	e7f1      	b.n	2a452 <strncpy+0xc>

0002a46e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2a46e:	4603      	mov	r3, r0
	size_t n = 0;
   2a470:	2000      	movs	r0, #0

	while (*s != '\0') {
   2a472:	5c1a      	ldrb	r2, [r3, r0]
   2a474:	b902      	cbnz	r2, 2a478 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2a476:	4770      	bx	lr
		n++;
   2a478:	3001      	adds	r0, #1
   2a47a:	e7fa      	b.n	2a472 <strlen+0x4>

0002a47c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2a47c:	4603      	mov	r3, r0
	size_t n = 0;
   2a47e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2a480:	5c1a      	ldrb	r2, [r3, r0]
   2a482:	b10a      	cbz	r2, 2a488 <strnlen+0xc>
   2a484:	4288      	cmp	r0, r1
   2a486:	d100      	bne.n	2a48a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2a488:	4770      	bx	lr
		n++;
   2a48a:	3001      	adds	r0, #1
   2a48c:	e7f8      	b.n	2a480 <strnlen+0x4>

0002a48e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2a48e:	1e43      	subs	r3, r0, #1
   2a490:	3901      	subs	r1, #1
   2a492:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a496:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2a49a:	4282      	cmp	r2, r0
   2a49c:	d101      	bne.n	2a4a2 <strcmp+0x14>
   2a49e:	2a00      	cmp	r2, #0
   2a4a0:	d1f7      	bne.n	2a492 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2a4a2:	1a10      	subs	r0, r2, r0
   2a4a4:	4770      	bx	lr

0002a4a6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2a4a6:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2a4a8:	460b      	mov	r3, r1
   2a4aa:	4605      	mov	r5, r0
   2a4ac:	b162      	cbz	r2, 2a4c8 <strncmp+0x22>
   2a4ae:	f810 6b01 	ldrb.w	r6, [r0], #1
   2a4b2:	781c      	ldrb	r4, [r3, #0]
   2a4b4:	3101      	adds	r1, #1
   2a4b6:	42b4      	cmp	r4, r6
   2a4b8:	d100      	bne.n	2a4bc <strncmp+0x16>
   2a4ba:	b91c      	cbnz	r4, 2a4c4 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2a4bc:	782a      	ldrb	r2, [r5, #0]
   2a4be:	781b      	ldrb	r3, [r3, #0]
   2a4c0:	1ad0      	subs	r0, r2, r3
   2a4c2:	e002      	b.n	2a4ca <strncmp+0x24>
		n--;
   2a4c4:	3a01      	subs	r2, #1
   2a4c6:	e7ef      	b.n	2a4a8 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   2a4c8:	4610      	mov	r0, r2
}
   2a4ca:	bd70      	pop	{r4, r5, r6, pc}

0002a4cc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2a4cc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2a4ce:	b15a      	cbz	r2, 2a4e8 <memcmp+0x1c>
   2a4d0:	3901      	subs	r1, #1
   2a4d2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2a4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   2a4d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2a4dc:	42a0      	cmp	r0, r4
   2a4de:	d001      	beq.n	2a4e4 <memcmp+0x18>
   2a4e0:	429a      	cmp	r2, r3
   2a4e2:	d0f7      	beq.n	2a4d4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2a4e4:	1ad0      	subs	r0, r2, r3
}
   2a4e6:	bd10      	pop	{r4, pc}
		return 0;
   2a4e8:	4610      	mov	r0, r2
   2a4ea:	e7fc      	b.n	2a4e6 <memcmp+0x1a>

0002a4ec <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2a4ec:	1a43      	subs	r3, r0, r1
   2a4ee:	4293      	cmp	r3, r2
{
   2a4f0:	b510      	push	{r4, lr}
   2a4f2:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2a4f6:	d308      	bcc.n	2a50a <memmove+0x1e>
	char *dest = d;
   2a4f8:	4602      	mov	r2, r0
   2a4fa:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2a4fc:	429a      	cmp	r2, r3
   2a4fe:	d00b      	beq.n	2a518 <memmove+0x2c>
			*dest = *src;
   2a500:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a504:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2a508:	e7f8      	b.n	2a4fc <memmove+0x10>
   2a50a:	440a      	add	r2, r1
			dest[n] = src[n];
   2a50c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   2a510:	428a      	cmp	r2, r1
			dest[n] = src[n];
   2a512:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2a516:	d1f9      	bne.n	2a50c <memmove+0x20>
		}
	}

	return d;
}
   2a518:	bd10      	pop	{r4, pc}

0002a51a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2a51a:	b510      	push	{r4, lr}
   2a51c:	1e43      	subs	r3, r0, #1
   2a51e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2a520:	4291      	cmp	r1, r2
   2a522:	d100      	bne.n	2a526 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2a524:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2a526:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a52a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2a52e:	e7f7      	b.n	2a520 <memcpy+0x6>

0002a530 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   2a530:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   2a532:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2a534:	4402      	add	r2, r0
   2a536:	4293      	cmp	r3, r2
   2a538:	d100      	bne.n	2a53c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2a53a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2a53c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2a540:	e7f9      	b.n	2a536 <memset+0x6>

0002a542 <_stdout_hook_default>:
}
   2a542:	f04f 30ff 	mov.w	r0, #4294967295
   2a546:	4770      	bx	lr

0002a548 <bt_settings_decode_key>:
{
   2a548:	b570      	push	{r4, r5, r6, lr}
   2a54a:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2a54c:	2100      	movs	r1, #0
{
   2a54e:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2a550:	f7ff f928 	bl	297a4 <settings_name_next>
   2a554:	280d      	cmp	r0, #13
   2a556:	d118      	bne.n	2a58a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2a558:	7b23      	ldrb	r3, [r4, #12]
   2a55a:	2b30      	cmp	r3, #48	; 0x30
   2a55c:	d013      	beq.n	2a586 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2a55e:	2b31      	cmp	r3, #49	; 0x31
   2a560:	d113      	bne.n	2a58a <bt_settings_decode_key+0x42>
   2a562:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2a564:	f805 3b06 	strb.w	r3, [r5], #6
   2a568:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2a56c:	462a      	mov	r2, r5
   2a56e:	4620      	mov	r0, r4
   2a570:	2301      	movs	r3, #1
   2a572:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2a574:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2a576:	f7fe f8ce 	bl	28716 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2a57a:	42b4      	cmp	r4, r6
   2a57c:	f105 35ff 	add.w	r5, r5, #4294967295
   2a580:	d1f4      	bne.n	2a56c <bt_settings_decode_key+0x24>
	return 0;
   2a582:	2000      	movs	r0, #0
}
   2a584:	bd70      	pop	{r4, r5, r6, pc}
   2a586:	2300      	movs	r3, #0
   2a588:	e7ec      	b.n	2a564 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2a58a:	f06f 0015 	mvn.w	r0, #21
   2a58e:	e7f9      	b.n	2a584 <bt_settings_decode_key+0x3c>

0002a590 <xor16>:
#define LOG_LEVEL CONFIG_BT_HCI_CORE_LOG_LEVEL
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_aes_ccm);

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   2a590:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   2a592:	780b      	ldrb	r3, [r1, #0]
   2a594:	7814      	ldrb	r4, [r2, #0]
   2a596:	4063      	eors	r3, r4
   2a598:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   2a59a:	7854      	ldrb	r4, [r2, #1]
   2a59c:	784b      	ldrb	r3, [r1, #1]
   2a59e:	4063      	eors	r3, r4
   2a5a0:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   2a5a2:	7894      	ldrb	r4, [r2, #2]
   2a5a4:	788b      	ldrb	r3, [r1, #2]
   2a5a6:	4063      	eors	r3, r4
   2a5a8:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   2a5aa:	78d4      	ldrb	r4, [r2, #3]
   2a5ac:	78cb      	ldrb	r3, [r1, #3]
   2a5ae:	4063      	eors	r3, r4
   2a5b0:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   2a5b2:	7914      	ldrb	r4, [r2, #4]
   2a5b4:	790b      	ldrb	r3, [r1, #4]
   2a5b6:	4063      	eors	r3, r4
   2a5b8:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   2a5ba:	7954      	ldrb	r4, [r2, #5]
   2a5bc:	794b      	ldrb	r3, [r1, #5]
   2a5be:	4063      	eors	r3, r4
   2a5c0:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   2a5c2:	7994      	ldrb	r4, [r2, #6]
   2a5c4:	798b      	ldrb	r3, [r1, #6]
   2a5c6:	4063      	eors	r3, r4
   2a5c8:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   2a5ca:	79d4      	ldrb	r4, [r2, #7]
   2a5cc:	79cb      	ldrb	r3, [r1, #7]
   2a5ce:	4063      	eors	r3, r4
   2a5d0:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   2a5d2:	7a14      	ldrb	r4, [r2, #8]
   2a5d4:	7a0b      	ldrb	r3, [r1, #8]
   2a5d6:	4063      	eors	r3, r4
   2a5d8:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   2a5da:	7a54      	ldrb	r4, [r2, #9]
   2a5dc:	7a4b      	ldrb	r3, [r1, #9]
   2a5de:	4063      	eors	r3, r4
   2a5e0:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   2a5e2:	7a8b      	ldrb	r3, [r1, #10]
   2a5e4:	7a94      	ldrb	r4, [r2, #10]
   2a5e6:	4063      	eors	r3, r4
   2a5e8:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   2a5ea:	7ad4      	ldrb	r4, [r2, #11]
   2a5ec:	7acb      	ldrb	r3, [r1, #11]
   2a5ee:	4063      	eors	r3, r4
   2a5f0:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   2a5f2:	7b14      	ldrb	r4, [r2, #12]
   2a5f4:	7b0b      	ldrb	r3, [r1, #12]
   2a5f6:	4063      	eors	r3, r4
   2a5f8:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   2a5fa:	7b54      	ldrb	r4, [r2, #13]
   2a5fc:	7b4b      	ldrb	r3, [r1, #13]
   2a5fe:	4063      	eors	r3, r4
   2a600:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   2a602:	7b94      	ldrb	r4, [r2, #14]
   2a604:	7b8b      	ldrb	r3, [r1, #14]
   2a606:	4063      	eors	r3, r4
   2a608:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   2a60a:	7bcb      	ldrb	r3, [r1, #15]
   2a60c:	7bd2      	ldrb	r2, [r2, #15]
   2a60e:	4053      	eors	r3, r2
   2a610:	73c3      	strb	r3, [r0, #15]
}
   2a612:	bd10      	pop	{r4, pc}

0002a614 <ccm_crypt.isra.0>:
	}

	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   2a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   2a618:	2401      	movs	r4, #1
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   2a61a:	b089      	sub	sp, #36	; 0x24
   2a61c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
   2a620:	4607      	mov	r7, r0
	blk_cnt = (msg_len + 15) / 16;
   2a622:	f105 060f 	add.w	r6, r5, #15
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   2a626:	4690      	mov	r8, r2
		last_blk = 16U;
   2a628:	f015 050f 	ands.w	r5, r5, #15
	memcpy(&a_i[1], nonce, 13);
   2a62c:	f04f 020d 	mov.w	r2, #13
   2a630:	eb0d 0004 	add.w	r0, sp, r4
static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
   2a634:	4699      	mov	r9, r3
		last_blk = 16U;
   2a636:	bf08      	it	eq
   2a638:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   2a63a:	f88d 4000 	strb.w	r4, [sp]

	for (j = 0; j < blk_cnt; j++) {
   2a63e:	f04f 0b00 	mov.w	fp, #0
	memcpy(&a_i[1], nonce, 13);
   2a642:	f7ff ff6a 	bl	2a51a <memcpy>
	blk_cnt = (msg_len + 15) / 16;
   2a646:	1136      	asrs	r6, r6, #4
	for (j = 0; j < blk_cnt; j++) {
   2a648:	eb06 0a04 	add.w	sl, r6, r4
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   2a64c:	3e01      	subs	r6, #1
	for (j = 0; j < blk_cnt; j++) {
   2a64e:	4554      	cmp	r4, sl
   2a650:	d102      	bne.n	2a658 <ccm_crypt.isra.0+0x44>
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
}
   2a652:	b009      	add	sp, #36	; 0x24
   2a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = bt_encrypt_be(key, a_i, s_i);
   2a658:	4669      	mov	r1, sp
   2a65a:	ba63      	rev16	r3, r4
   2a65c:	4638      	mov	r0, r7
   2a65e:	aa04      	add	r2, sp, #16
   2a660:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a664:	f000 fc45 	bl	2aef2 <bt_encrypt_be>
		if (err) {
   2a668:	4601      	mov	r1, r0
   2a66a:	2800      	cmp	r0, #0
   2a66c:	d1f1      	bne.n	2a652 <ccm_crypt.isra.0+0x3e>
		if (j < blk_cnt - 1) {
   2a66e:	1e63      	subs	r3, r4, #1
   2a670:	429e      	cmp	r6, r3
   2a672:	eb08 020b 	add.w	r2, r8, fp
   2a676:	eb09 000b 	add.w	r0, r9, fp
   2a67a:	d80d      	bhi.n	2a698 <ccm_crypt.isra.0+0x84>
			for (i = 0; i < last_blk; i++) {
   2a67c:	f10d 0c10 	add.w	ip, sp, #16
					in_msg[(j * 16) + i] ^ s_i[i];
   2a680:	f812 3b01 	ldrb.w	r3, [r2], #1
   2a684:	f81c eb01 	ldrb.w	lr, [ip], #1
			for (i = 0; i < last_blk; i++) {
   2a688:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   2a68a:	ea83 030e 	eor.w	r3, r3, lr
			for (i = 0; i < last_blk; i++) {
   2a68e:	428d      	cmp	r5, r1
				out_msg[(j * 16) + i] =
   2a690:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2a694:	d8f4      	bhi.n	2a680 <ccm_crypt.isra.0+0x6c>
   2a696:	e002      	b.n	2a69e <ccm_crypt.isra.0+0x8a>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   2a698:	a904      	add	r1, sp, #16
   2a69a:	f7ff ff79 	bl	2a590 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   2a69e:	3401      	adds	r4, #1
   2a6a0:	f10b 0b10 	add.w	fp, fp, #16
   2a6a4:	e7d3      	b.n	2a64e <ccm_crypt.isra.0+0x3a>

0002a6a6 <ccm_auth.isra.0>:
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   2a6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		last_blk = 16U;
   2a6aa:	f013 090f 	ands.w	r9, r3, #15
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   2a6ae:	461d      	mov	r5, r3
	b[0] = 0x01;
   2a6b0:	f04f 0301 	mov.w	r3, #1
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   2a6b4:	b08d      	sub	sp, #52	; 0x34
   2a6b6:	4680      	mov	r8, r0
   2a6b8:	4617      	mov	r7, r2
	memcpy(b + 1, nonce, 13);
   2a6ba:	eb0d 0003 	add.w	r0, sp, r3
   2a6be:	f04f 020d 	mov.w	r2, #13
		last_blk = 16U;
   2a6c2:	bf08      	it	eq
   2a6c4:	f04f 0910 	moveq.w	r9, #16
	b[0] = 0x01;
   2a6c8:	f88d 3000 	strb.w	r3, [sp]
static int ccm_auth(const uint8_t key[16], uint8_t nonce[13],
   2a6cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	memcpy(b + 1, nonce, 13);
   2a6ce:	f7ff ff24 	bl	2a51a <memcpy>
   2a6d2:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   2a6d4:	4669      	mov	r1, sp
   2a6d6:	4640      	mov	r0, r8
   2a6d8:	aa08      	add	r2, sp, #32
   2a6da:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a6de:	f000 fc08 	bl	2aef2 <bt_encrypt_be>
	if (err) {
   2a6e2:	2800      	cmp	r0, #0
   2a6e4:	f040 8097 	bne.w	2a816 <ccm_auth.isra.0+0x170>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2a6e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2a6ea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   2a6ee:	f1a3 0202 	sub.w	r2, r3, #2
   2a6f2:	bf14      	ite	ne
   2a6f4:	2301      	movne	r3, #1
   2a6f6:	2300      	moveq	r3, #0
   2a6f8:	0852      	lsrs	r2, r2, #1
   2a6fa:	019b      	lsls	r3, r3, #6
   2a6fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2a700:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   2a704:	f10d 0a10 	add.w	sl, sp, #16
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2a708:	f88d 3000 	strb.w	r3, [sp]
	err = bt_encrypt_be(key, b, X0);
   2a70c:	4652      	mov	r2, sl
   2a70e:	ba6b      	rev16	r3, r5
   2a710:	4669      	mov	r1, sp
   2a712:	4640      	mov	r0, r8
   2a714:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a718:	f000 fbeb 	bl	2aef2 <bt_encrypt_be>
	if (err) {
   2a71c:	4606      	mov	r6, r0
   2a71e:	bb98      	cbnz	r0, 2a788 <ccm_auth.isra.0+0xe2>
	if (aad_len) {
   2a720:	b394      	cbz	r4, 2a788 <ccm_auth.isra.0+0xe2>
		while (aad_len > 16) {
   2a722:	2002      	movs	r0, #2
			b[i] = X0[i] ^ b[i];
   2a724:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2a728:	f88d 3000 	strb.w	r3, [sp]
   2a72c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2a730:	4063      	eors	r3, r4
		aad_len += sizeof(uint16_t);
   2a732:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   2a734:	f88d 3001 	strb.w	r3, [sp, #1]
		aad_len += sizeof(uint16_t);
   2a738:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   2a73a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a73c:	2c10      	cmp	r4, #16
   2a73e:	4433      	add	r3, r6
   2a740:	d809      	bhi.n	2a756 <ccm_auth.isra.0+0xb0>
   2a742:	aa04      	add	r2, sp, #16
		for (; i < aad_len; i++, j++) {
   2a744:	42a0      	cmp	r0, r4
   2a746:	db37      	blt.n	2a7b8 <ccm_auth.isra.0+0x112>
		for (i = aad_len; i < 16; i++) {
   2a748:	2c10      	cmp	r4, #16
   2a74a:	d13d      	bne.n	2a7c8 <ccm_auth.isra.0+0x122>
		err = bt_encrypt_be(key, b, X0);
   2a74c:	4669      	mov	r1, sp
   2a74e:	4640      	mov	r0, r8
   2a750:	f000 fbcf 	bl	2aef2 <bt_encrypt_be>
		if (err) {
   2a754:	e018      	b.n	2a788 <ccm_auth.isra.0+0xe2>
		while (aad_len > 16) {
   2a756:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   2a758:	f81a e001 	ldrb.w	lr, [sl, r1]
   2a75c:	f813 cb01 	ldrb.w	ip, [r3], #1
   2a760:	ea8c 0c0e 	eor.w	ip, ip, lr
   2a764:	f80d c001 	strb.w	ip, [sp, r1]
				i++, j++;
   2a768:	3101      	adds	r1, #1
			} while (i < 16);
   2a76a:	2910      	cmp	r1, #16
   2a76c:	d1f4      	bne.n	2a758 <ccm_auth.isra.0+0xb2>
				i++, j++;
   2a76e:	f106 0b10 	add.w	fp, r6, #16
   2a772:	ebab 0600 	sub.w	r6, fp, r0
			aad_len -= 16;
   2a776:	3c10      	subs	r4, #16
			err = bt_encrypt_be(key, b, X0);
   2a778:	4652      	mov	r2, sl
   2a77a:	4669      	mov	r1, sp
   2a77c:	4640      	mov	r0, r8
			aad_len -= 16;
   2a77e:	b2e4      	uxtb	r4, r4
			err = bt_encrypt_be(key, b, X0);
   2a780:	f000 fbb7 	bl	2aef2 <bt_encrypt_be>
			if (err) {
   2a784:	2800      	cmp	r0, #0
   2a786:	d0d8      	beq.n	2a73a <ccm_auth.isra.0+0x94>
	blk_cnt = (msg_len + 15) / 16;
   2a788:	2400      	movs	r4, #0
   2a78a:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   2a78c:	ab04      	add	r3, sp, #16
	blk_cnt = (msg_len + 15) / 16;
   2a78e:	112d      	asrs	r5, r5, #4
			memcpy(&b[i], &Xn[i], 16 - i);
   2a790:	eb03 0609 	add.w	r6, r3, r9
	for (j = 0; j < blk_cnt; j++) {
   2a794:	42a5      	cmp	r5, r4
   2a796:	d11c      	bne.n	2a7d2 <ccm_auth.isra.0+0x12c>
   2a798:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   2a79c:	a808      	add	r0, sp, #32
   2a79e:	ab04      	add	r3, sp, #16
   2a7a0:	eb02 0a01 	add.w	sl, r2, r1
	for (i = 0; i < mic_size; i++) {
   2a7a4:	4592      	cmp	sl, r2
   2a7a6:	d036      	beq.n	2a816 <ccm_auth.isra.0+0x170>
		mic[i] = s0[i] ^ Xn[i];
   2a7a8:	f810 1b01 	ldrb.w	r1, [r0], #1
   2a7ac:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a7b0:	4061      	eors	r1, r4
   2a7b2:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < mic_size; i++) {
   2a7b6:	e7f5      	b.n	2a7a4 <ccm_auth.isra.0+0xfe>
			b[i] = X0[i] ^ aad[j];
   2a7b8:	5c16      	ldrb	r6, [r2, r0]
   2a7ba:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a7be:	4071      	eors	r1, r6
   2a7c0:	f80d 1000 	strb.w	r1, [sp, r0]
		for (; i < aad_len; i++, j++) {
   2a7c4:	3001      	adds	r0, #1
   2a7c6:	e7bd      	b.n	2a744 <ccm_auth.isra.0+0x9e>
			b[i] = X0[i];
   2a7c8:	5d13      	ldrb	r3, [r2, r4]
   2a7ca:	f80d 3004 	strb.w	r3, [sp, r4]
		for (i = aad_len; i < 16; i++) {
   2a7ce:	3401      	adds	r4, #1
   2a7d0:	e7ba      	b.n	2a748 <ccm_auth.isra.0+0xa2>
		if (j + 1 == blk_cnt) {
   2a7d2:	3401      	adds	r4, #1
   2a7d4:	42a5      	cmp	r5, r4
   2a7d6:	d121      	bne.n	2a81c <ccm_auth.isra.0+0x176>
			for (i = 0; i < last_blk; i++) {
   2a7d8:	4669      	mov	r1, sp
   2a7da:	4638      	mov	r0, r7
   2a7dc:	2300      	movs	r3, #0
   2a7de:	f10d 0c10 	add.w	ip, sp, #16
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2a7e2:	f81c 2b01 	ldrb.w	r2, [ip], #1
   2a7e6:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2a7ea:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2a7ec:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   2a7f0:	4599      	cmp	r9, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2a7f2:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   2a7f6:	dcf4      	bgt.n	2a7e2 <ccm_auth.isra.0+0x13c>
			memcpy(&b[i], &Xn[i], 16 - i);
   2a7f8:	4631      	mov	r1, r6
   2a7fa:	f1c9 0210 	rsb	r2, r9, #16
   2a7fe:	eb0d 0009 	add.w	r0, sp, r9
   2a802:	f7ff fe8a 	bl	2a51a <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   2a806:	4669      	mov	r1, sp
   2a808:	4640      	mov	r0, r8
   2a80a:	aa04      	add	r2, sp, #16
   2a80c:	f000 fb71 	bl	2aef2 <bt_encrypt_be>
		if (err) {
   2a810:	3710      	adds	r7, #16
   2a812:	2800      	cmp	r0, #0
   2a814:	d0be      	beq.n	2a794 <ccm_auth.isra.0+0xee>
}
   2a816:	b00d      	add	sp, #52	; 0x34
   2a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xor16(b, Xn, &cleartext_msg[j * 16]);
   2a81c:	463a      	mov	r2, r7
   2a81e:	4668      	mov	r0, sp
   2a820:	a904      	add	r1, sp, #16
   2a822:	f7ff feb5 	bl	2a590 <xor16>
   2a826:	e7ee      	b.n	2a806 <ccm_auth.isra.0+0x160>

0002a828 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *enc_data, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *plaintext, size_t mic_size)
{
   2a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a82c:	b089      	sub	sp, #36	; 0x24
   2a82e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   2a832:	4607      	mov	r7, r0
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic) || len > UINT16_MAX) {
   2a834:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   2a838:	4688      	mov	r8, r1
   2a83a:	4615      	mov	r5, r2
   2a83c:	461c      	mov	r4, r3
   2a83e:	9e15      	ldr	r6, [sp, #84]	; 0x54
	if (aad_len >= 0xff00 || mic_size > sizeof(mic) || len > UINT16_MAX) {
   2a840:	d224      	bcs.n	2a88c <bt_ccm_decrypt+0x64>
   2a842:	2e10      	cmp	r6, #16
   2a844:	d822      	bhi.n	2a88c <bt_ccm_decrypt+0x64>
   2a846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2a84a:	d21f      	bcs.n	2a88c <bt_ccm_decrypt+0x64>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_data, plaintext, len);
   2a84c:	fa1f fa83 	uxth.w	sl, r3
   2a850:	f8cd a000 	str.w	sl, [sp]
   2a854:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2a856:	f7ff fedd 	bl	2a614 <ccm_crypt.isra.0>

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   2a85a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2a85c:	f10d 0910 	add.w	r9, sp, #16
   2a860:	4641      	mov	r1, r8
   2a862:	4638      	mov	r0, r7
   2a864:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2a866:	9300      	str	r3, [sp, #0]
   2a868:	e9cd b901 	strd	fp, r9, [sp, #4]
   2a86c:	4653      	mov	r3, sl
   2a86e:	9603      	str	r6, [sp, #12]
   2a870:	f7ff ff19 	bl	2a6a6 <ccm_auth.isra.0>

	if (memcmp(mic, enc_data + len, mic_size)) {
   2a874:	4632      	mov	r2, r6
   2a876:	4648      	mov	r0, r9
   2a878:	1929      	adds	r1, r5, r4
   2a87a:	f7ff fe27 	bl	2a4cc <memcmp>
		return -EBADMSG;
   2a87e:	2800      	cmp	r0, #0
   2a880:	bf18      	it	ne
   2a882:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   2a886:	b009      	add	sp, #36	; 0x24
   2a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   2a88c:	f06f 0015 	mvn.w	r0, #21
   2a890:	e7f9      	b.n	2a886 <bt_ccm_decrypt+0x5e>

0002a892 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13],
		   const uint8_t *plaintext, size_t len, const uint8_t *aad,
		   size_t aad_len, uint8_t *enc_data, size_t mic_size)
{
   2a892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a896:	b085      	sub	sp, #20
   2a898:	e9dd c80d 	ldrd	ip, r8, [sp, #52]	; 0x34
	LOG_DBG("nonce %s", bt_hex(nonce, 13));
	LOG_DBG("msg (len %zu) %s", len, bt_hex(plaintext, len));
	LOG_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16 || len > UINT16_MAX) {
   2a89c:	f5bc 4f7f 	cmp.w	ip, #65280	; 0xff00
{
   2a8a0:	4605      	mov	r5, r0
   2a8a2:	460e      	mov	r6, r1
   2a8a4:	4617      	mov	r7, r2
   2a8a6:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
	uint8_t *mic = enc_data + len;
   2a8aa:	eb08 0903 	add.w	r9, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16 || len > UINT16_MAX) {
   2a8ae:	d21a      	bcs.n	2a8e6 <bt_ccm_encrypt+0x54>
   2a8b0:	f1be 0f10 	cmp.w	lr, #16
   2a8b4:	d817      	bhi.n	2a8e6 <bt_ccm_encrypt+0x54>
   2a8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2a8ba:	d214      	bcs.n	2a8e6 <bt_ccm_encrypt+0x54>
		return -EINVAL;
	}

	ccm_auth(key, nonce, plaintext, len, aad, aad_len, mic, mic_size);
   2a8bc:	b29c      	uxth	r4, r3
   2a8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2a8c0:	e9cd 9e02 	strd	r9, lr, [sp, #8]
   2a8c4:	f8cd c004 	str.w	ip, [sp, #4]
   2a8c8:	9300      	str	r3, [sp, #0]
   2a8ca:	4623      	mov	r3, r4
   2a8cc:	f7ff feeb 	bl	2a6a6 <ccm_auth.isra.0>

	ccm_crypt(key, nonce, plaintext, enc_data, len);
   2a8d0:	4628      	mov	r0, r5
   2a8d2:	4643      	mov	r3, r8
   2a8d4:	463a      	mov	r2, r7
   2a8d6:	4631      	mov	r1, r6
   2a8d8:	9400      	str	r4, [sp, #0]
   2a8da:	f7ff fe9b 	bl	2a614 <ccm_crypt.isra.0>

	return 0;
   2a8de:	2000      	movs	r0, #0
}
   2a8e0:	b005      	add	sp, #20
   2a8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2a8e6:	f06f 0015 	mvn.w	r0, #21
   2a8ea:	e7f9      	b.n	2a8e0 <bt_ccm_encrypt+0x4e>

0002a8ec <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2a8ec:	b510      	push	{r4, lr}
   2a8ee:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2a8f0:	7801      	ldrb	r1, [r0, #0]
   2a8f2:	7822      	ldrb	r2, [r4, #0]
{
   2a8f4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2a8f6:	428a      	cmp	r2, r1
   2a8f8:	d00f      	beq.n	2a91a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2a8fa:	4669      	mov	r1, sp
   2a8fc:	f7e3 fa1a 	bl	dd34 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2a900:	4620      	mov	r0, r4
   2a902:	a905      	add	r1, sp, #20
   2a904:	f7e3 fa16 	bl	dd34 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2a908:	2210      	movs	r2, #16
   2a90a:	f10d 0115 	add.w	r1, sp, #21
   2a90e:	f10d 0001 	add.w	r0, sp, #1
   2a912:	f7ff fddb 	bl	2a4cc <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2a916:	b00a      	add	sp, #40	; 0x28
   2a918:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2a91a:	2a01      	cmp	r2, #1
   2a91c:	d006      	beq.n	2a92c <bt_uuid_cmp+0x40>
   2a91e:	2a02      	cmp	r2, #2
   2a920:	d007      	beq.n	2a932 <bt_uuid_cmp+0x46>
   2a922:	b972      	cbnz	r2, 2a942 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2a924:	8840      	ldrh	r0, [r0, #2]
   2a926:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2a928:	1ac0      	subs	r0, r0, r3
   2a92a:	e7f4      	b.n	2a916 <bt_uuid_cmp+0x2a>
   2a92c:	6840      	ldr	r0, [r0, #4]
   2a92e:	6863      	ldr	r3, [r4, #4]
   2a930:	e7fa      	b.n	2a928 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a932:	2210      	movs	r2, #16
   2a934:	1c61      	adds	r1, r4, #1
   2a936:	3001      	adds	r0, #1
}
   2a938:	b00a      	add	sp, #40	; 0x28
   2a93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a93e:	f7ff bdc5 	b.w	2a4cc <memcmp>
	switch (u1->type) {
   2a942:	f06f 0015 	mvn.w	r0, #21
   2a946:	e7e6      	b.n	2a916 <bt_uuid_cmp+0x2a>

0002a948 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2a948:	2a04      	cmp	r2, #4
{
   2a94a:	b510      	push	{r4, lr}
	switch (data_len) {
   2a94c:	d00a      	beq.n	2a964 <bt_uuid_create+0x1c>
   2a94e:	2a10      	cmp	r2, #16
   2a950:	d00d      	beq.n	2a96e <bt_uuid_create+0x26>
   2a952:	2a02      	cmp	r2, #2
   2a954:	f04f 0300 	mov.w	r3, #0
   2a958:	d10f      	bne.n	2a97a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2a95a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2a95c:	880b      	ldrh	r3, [r1, #0]
   2a95e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2a960:	2001      	movs	r0, #1
}
   2a962:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2a964:	2301      	movs	r3, #1
   2a966:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a968:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2a96a:	6043      	str	r3, [r0, #4]
		break;
   2a96c:	e7f8      	b.n	2a960 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2a96e:	2302      	movs	r3, #2
   2a970:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2a974:	f7ff fdd1 	bl	2a51a <memcpy>
		break;
   2a978:	e7f2      	b.n	2a960 <bt_uuid_create+0x18>
	switch (data_len) {
   2a97a:	4618      	mov	r0, r3
   2a97c:	e7f1      	b.n	2a962 <bt_uuid_create+0x1a>

0002a97e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2a97e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2a980:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2a982:	2106      	movs	r1, #6
{
   2a984:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a986:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a98a:	f7e5 ffa9 	bl	108e0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2a98e:	b918      	cbnz	r0, 2a998 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2a990:	79a3      	ldrb	r3, [r4, #6]
   2a992:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a996:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2a998:	bd10      	pop	{r4, pc}

0002a99a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a99a:	280f      	cmp	r0, #15
   2a99c:	d807      	bhi.n	2a9ae <bt_hci_evt_get_flags+0x14>
   2a99e:	280d      	cmp	r0, #13
   2a9a0:	d80b      	bhi.n	2a9ba <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2a9a2:	2805      	cmp	r0, #5
   2a9a4:	bf08      	it	eq
   2a9a6:	2003      	moveq	r0, #3
   2a9a8:	bf18      	it	ne
   2a9aa:	2002      	movne	r0, #2
   2a9ac:	4770      	bx	lr
	switch (evt) {
   2a9ae:	2813      	cmp	r0, #19
   2a9b0:	d003      	beq.n	2a9ba <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2a9b2:	281a      	cmp	r0, #26
   2a9b4:	bf08      	it	eq
   2a9b6:	2001      	moveq	r0, #1
   2a9b8:	e7f6      	b.n	2a9a8 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2a9ba:	2001      	movs	r0, #1
	}
}
   2a9bc:	4770      	bx	lr

0002a9be <hci_data_buf_overflow>:
}
   2a9be:	4770      	bx	lr

0002a9c0 <atomic_or>:
{
   2a9c0:	4603      	mov	r3, r0
   2a9c2:	b510      	push	{r4, lr}
}
   2a9c4:	e8d3 0fef 	ldaex	r0, [r3]
   2a9c8:	ea40 0201 	orr.w	r2, r0, r1
   2a9cc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2a9d0:	2c00      	cmp	r4, #0
   2a9d2:	d1f7      	bne.n	2a9c4 <atomic_or+0x4>
   2a9d4:	bd10      	pop	{r4, pc}

0002a9d6 <z_log_msg_static_create.constprop.0>:
   2a9d6:	2300      	movs	r3, #0
   2a9d8:	f7e0 b8c0 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002a9dc <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a9dc:	e8d0 3fef 	ldaex	r3, [r0]
   2a9e0:	400b      	ands	r3, r1
   2a9e2:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2a9e6:	2a00      	cmp	r2, #0
   2a9e8:	d1f8      	bne.n	2a9dc <atomic_and.isra.0>
}
   2a9ea:	4770      	bx	lr

0002a9ec <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   2a9ec:	4770      	bx	lr

0002a9ee <bt_hci_disconnect>:
{
   2a9ee:	b570      	push	{r4, r5, r6, lr}
   2a9f0:	4606      	mov	r6, r0
   2a9f2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a9f4:	f240 4006 	movw	r0, #1030	; 0x406
   2a9f8:	2103      	movs	r1, #3
   2a9fa:	f7e3 fda3 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   2a9fe:	4604      	mov	r4, r0
   2aa00:	b168      	cbz	r0, 2aa1e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2aa02:	2103      	movs	r1, #3
   2aa04:	300c      	adds	r0, #12
   2aa06:	f7f5 fca3 	bl	20350 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2aa0a:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2aa0c:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2aa0e:	4621      	mov	r1, r4
}
   2aa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2aa14:	2200      	movs	r2, #0
   2aa16:	f240 4006 	movw	r0, #1030	; 0x406
   2aa1a:	f7e3 bddd 	b.w	e5d8 <bt_hci_cmd_send_sync>
}
   2aa1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aa22:	bd70      	pop	{r4, r5, r6, pc}

0002aa24 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2aa24:	68c0      	ldr	r0, [r0, #12]
   2aa26:	f7e3 be65 	b.w	e6f4 <bt_hci_le_enh_conn_complete>

0002aa2a <bt_le_conn_params_valid>:
{
   2aa2a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2aa2c:	8803      	ldrh	r3, [r0, #0]
   2aa2e:	8842      	ldrh	r2, [r0, #2]
   2aa30:	4293      	cmp	r3, r2
   2aa32:	d819      	bhi.n	2aa68 <bt_le_conn_params_valid+0x3e>
   2aa34:	2b05      	cmp	r3, #5
   2aa36:	d917      	bls.n	2aa68 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2aa38:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2aa3c:	d814      	bhi.n	2aa68 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2aa3e:	8883      	ldrh	r3, [r0, #4]
   2aa40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2aa44:	d210      	bcs.n	2aa68 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2aa46:	f640 4476 	movw	r4, #3190	; 0xc76
   2aa4a:	88c0      	ldrh	r0, [r0, #6]
   2aa4c:	f1a0 010a 	sub.w	r1, r0, #10
   2aa50:	b289      	uxth	r1, r1
   2aa52:	42a1      	cmp	r1, r4
   2aa54:	d808      	bhi.n	2aa68 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2aa56:	3301      	adds	r3, #1
   2aa58:	b29b      	uxth	r3, r3
   2aa5a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2aa5c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2aa60:	bf34      	ite	cc
   2aa62:	2001      	movcc	r0, #1
   2aa64:	2000      	movcs	r0, #0
}
   2aa66:	bd10      	pop	{r4, pc}
		return false;
   2aa68:	2000      	movs	r0, #0
   2aa6a:	e7fc      	b.n	2aa66 <bt_le_conn_params_valid+0x3c>

0002aa6c <le_conn_param_neg_reply>:
{
   2aa6c:	b570      	push	{r4, r5, r6, lr}
   2aa6e:	4606      	mov	r6, r0
   2aa70:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2aa72:	f242 0021 	movw	r0, #8225	; 0x2021
   2aa76:	2103      	movs	r1, #3
   2aa78:	f7e3 fd64 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   2aa7c:	4604      	mov	r4, r0
   2aa7e:	b918      	cbnz	r0, 2aa88 <le_conn_param_neg_reply+0x1c>
}
   2aa80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2aa84:	f7e3 ba1c 	b.w	dec0 <le_conn_param_neg_reply.part.0>
   2aa88:	2103      	movs	r1, #3
   2aa8a:	300c      	adds	r0, #12
   2aa8c:	f7f5 fc60 	bl	20350 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2aa90:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2aa92:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2aa94:	4621      	mov	r1, r4
}
   2aa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2aa9a:	f242 0021 	movw	r0, #8225	; 0x2021
   2aa9e:	f7e3 bf5f 	b.w	e960 <bt_hci_cmd_send>

0002aaa2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2aaa2:	2000      	movs	r0, #0
   2aaa4:	4770      	bx	lr

0002aaa6 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   2aaa6:	2000      	movs	r0, #0
   2aaa8:	4770      	bx	lr

0002aaaa <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2aaaa:	2207      	movs	r2, #7
{
   2aaac:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2aaae:	f7ff fd0d 	bl	2a4cc <memcmp>
}
   2aab2:	fab0 f080 	clz	r0, r0
   2aab6:	0940      	lsrs	r0, r0, #5
   2aab8:	bd08      	pop	{r3, pc}

0002aaba <bt_lookup_id_addr>:
	return addr;
   2aaba:	2800      	cmp	r0, #0
}
   2aabc:	bf0c      	ite	eq
   2aabe:	4608      	moveq	r0, r1
   2aac0:	2000      	movne	r0, #0
   2aac2:	4770      	bx	lr

0002aac4 <bt_id_set_adv_random_addr>:
{
   2aac4:	b570      	push	{r4, r5, r6, lr}
   2aac6:	460d      	mov	r5, r1
	CHECKIF(adv == NULL || addr == NULL) {
   2aac8:	4604      	mov	r4, r0
   2aaca:	b3d0      	cbz	r0, 2ab42 <bt_id_set_adv_random_addr+0x7e>
   2aacc:	b3c9      	cbz	r1, 2ab42 <bt_id_set_adv_random_addr+0x7e>
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   2aace:	f100 0610 	add.w	r6, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aad2:	e8d6 3faf 	lda	r3, [r6]
   2aad6:	079b      	lsls	r3, r3, #30
   2aad8:	d40f      	bmi.n	2aafa <bt_id_set_adv_random_addr+0x36>
	memcpy(dst, src, sizeof(*dst));
   2aada:	2206      	movs	r2, #6
   2aadc:	3003      	adds	r0, #3
   2aade:	f7ff fd1c 	bl	2a51a <memcpy>
		adv->random_addr.type = BT_ADDR_LE_RANDOM;
   2aae2:	2301      	movs	r3, #1
   2aae4:	70a3      	strb	r3, [r4, #2]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aae6:	e8d6 3fef 	ldaex	r3, [r6]
   2aaea:	f043 0308 	orr.w	r3, r3, #8
   2aaee:	e8c6 3fe2 	stlex	r2, r3, [r6]
   2aaf2:	2a00      	cmp	r2, #0
   2aaf4:	d1f7      	bne.n	2aae6 <bt_id_set_adv_random_addr+0x22>
	return 0;
   2aaf6:	2000      	movs	r0, #0
}
   2aaf8:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR,
   2aafa:	2107      	movs	r1, #7
   2aafc:	f242 0035 	movw	r0, #8245	; 0x2035
   2ab00:	f7e3 fd20 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   2ab04:	4606      	mov	r6, r0
   2ab06:	b1f8      	cbz	r0, 2ab48 <bt_id_set_adv_random_addr+0x84>
   2ab08:	2107      	movs	r1, #7
   2ab0a:	300c      	adds	r0, #12
   2ab0c:	f7f5 fc20 	bl	20350 <net_buf_simple_add>
	cp->handle = adv->handle;
   2ab10:	7863      	ldrb	r3, [r4, #1]
   2ab12:	2206      	movs	r2, #6
   2ab14:	4629      	mov	r1, r5
   2ab16:	f800 3b01 	strb.w	r3, [r0], #1
   2ab1a:	f7ff fcfe 	bl	2a51a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR, buf,
   2ab1e:	2200      	movs	r2, #0
   2ab20:	4631      	mov	r1, r6
   2ab22:	f242 0035 	movw	r0, #8245	; 0x2035
   2ab26:	f7e3 fd57 	bl	e5d8 <bt_hci_cmd_send_sync>
	if (err) {
   2ab2a:	2800      	cmp	r0, #0
   2ab2c:	d1e4      	bne.n	2aaf8 <bt_id_set_adv_random_addr+0x34>
	if (&adv->random_addr.a != addr) {
   2ab2e:	1ce0      	adds	r0, r4, #3
   2ab30:	4285      	cmp	r5, r0
   2ab32:	d003      	beq.n	2ab3c <bt_id_set_adv_random_addr+0x78>
   2ab34:	2206      	movs	r2, #6
   2ab36:	4629      	mov	r1, r5
   2ab38:	f7ff fcef 	bl	2a51a <memcpy>
	adv->random_addr.type = BT_ADDR_LE_RANDOM;
   2ab3c:	2301      	movs	r3, #1
   2ab3e:	70a3      	strb	r3, [r4, #2]
	return 0;
   2ab40:	e7d9      	b.n	2aaf6 <bt_id_set_adv_random_addr+0x32>
		return -EINVAL;
   2ab42:	f06f 0015 	mvn.w	r0, #21
   2ab46:	e7d7      	b.n	2aaf8 <bt_id_set_adv_random_addr+0x34>
		return -ENOBUFS;
   2ab48:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ab4c:	e7d4      	b.n	2aaf8 <bt_id_set_adv_random_addr+0x34>

0002ab4e <bt_id_set_adv_private_addr>:
{
   2ab4e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2ab50:	4604      	mov	r4, r0
   2ab52:	b180      	cbz	r0, 2ab76 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2ab54:	2106      	movs	r1, #6
   2ab56:	4668      	mov	r0, sp
   2ab58:	f7e5 fec2 	bl	108e0 <bt_rand>
	if (err) {
   2ab5c:	b948      	cbnz	r0, 2ab72 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2ab5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2ab62:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2ab64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2ab68:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2ab6a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2ab6e:	f7ff ffa9 	bl	2aac4 <bt_id_set_adv_random_addr>
}
   2ab72:	b002      	add	sp, #8
   2ab74:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2ab76:	f06f 0015 	mvn.w	r0, #21
   2ab7a:	e7fa      	b.n	2ab72 <bt_id_set_adv_private_addr+0x24>

0002ab7c <bt_id_scan_random_addr_check>:
}
   2ab7c:	2001      	movs	r0, #1
   2ab7e:	4770      	bx	lr

0002ab80 <bt_id_adv_limited_stopped>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ab80:	3010      	adds	r0, #16
   2ab82:	e8d0 3fef 	ldaex	r3, [r0]
   2ab86:	f023 0310 	bic.w	r3, r3, #16
   2ab8a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2ab8e:	2a00      	cmp	r2, #0
   2ab90:	d1f7      	bne.n	2ab82 <bt_id_adv_limited_stopped+0x2>
}
   2ab92:	4770      	bx	lr

0002ab94 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2ab94:	2000      	movs	r0, #0
   2ab96:	4770      	bx	lr

0002ab98 <get_adv_channel_map>:
{
   2ab98:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2ab9a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2ab9e:	bf0c      	ite	eq
   2aba0:	2007      	moveq	r0, #7
   2aba2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2aba4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2aba6:	bf48      	it	mi
   2aba8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2abac:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2abae:	bf48      	it	mi
   2abb0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2abb4:	4770      	bx	lr

0002abb6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2abb6:	e8d0 0faf 	lda	r0, [r0]
}
   2abba:	4770      	bx	lr

0002abbc <atomic_test_bit>:
{
   2abbc:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2abbe:	f7ff fffa 	bl	2abb6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2abc2:	4108      	asrs	r0, r1
}
   2abc4:	f000 0001 	and.w	r0, r0, #1
   2abc8:	bd08      	pop	{r3, pc}

0002abca <atomic_and>:
{
   2abca:	4603      	mov	r3, r0
   2abcc:	b510      	push	{r4, lr}
}
   2abce:	e8d3 0fef 	ldaex	r0, [r3]
   2abd2:	ea00 0201 	and.w	r2, r0, r1
   2abd6:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2abda:	2c00      	cmp	r4, #0
   2abdc:	d1f7      	bne.n	2abce <atomic_and+0x4>
   2abde:	bd10      	pop	{r4, pc}

0002abe0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2abe0:	2207      	movs	r2, #7
   2abe2:	f7ff bc9a 	b.w	2a51a <memcpy>

0002abe6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2abe6:	2301      	movs	r3, #1
{
   2abe8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2abea:	fa03 f101 	lsl.w	r1, r3, r1
{
   2abee:	4604      	mov	r4, r0
	if (val) {
   2abf0:	b142      	cbz	r2, 2ac04 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2abf2:	e8d4 3fef 	ldaex	r3, [r4]
   2abf6:	430b      	orrs	r3, r1
   2abf8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2abfc:	2a00      	cmp	r2, #0
   2abfe:	d1f8      	bne.n	2abf2 <atomic_set_bit_to+0xc>
}
   2ac00:	bc10      	pop	{r4}
   2ac02:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ac04:	43c9      	mvns	r1, r1
}
   2ac06:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ac08:	f7ff bfdf 	b.w	2abca <atomic_and>

0002ac0c <le_adv_update>:
{
   2ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac10:	b087      	sub	sp, #28
   2ac12:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   2ac16:	4604      	mov	r4, r0
   2ac18:	460f      	mov	r7, r1
   2ac1a:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   2ac1c:	2100      	movs	r1, #0
   2ac1e:	2210      	movs	r2, #16
   2ac20:	a802      	add	r0, sp, #8
{
   2ac22:	461e      	mov	r6, r3
   2ac24:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   2ac28:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
	struct bt_ad d[2] = {};
   2ac2c:	f7ff fc80 	bl	2a530 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2ac30:	bb65      	cbnz	r5, 2ac8c <le_adv_update+0x80>
	if (!(ext_adv && scannable)) {
   2ac32:	f1bb 0f00 	cmp.w	fp, #0
   2ac36:	d002      	beq.n	2ac3e <le_adv_update+0x32>
   2ac38:	f1b8 0f00 	cmp.w	r8, #0
   2ac3c:	d119      	bne.n	2ac72 <le_adv_update+0x66>
		d[0].len = ad_len;
   2ac3e:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		d_len = 1;
   2ac42:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   2ac44:	f242 0137 	movw	r1, #8247	; 0x2037
   2ac48:	4620      	mov	r0, r4
   2ac4a:	aa02      	add	r2, sp, #8
   2ac4c:	f7e4 fe34 	bl	f8b8 <hci_set_ad_ext>
		if (err) {
   2ac50:	b960      	cbnz	r0, 2ac6c <le_adv_update+0x60>
	if (scannable) {
   2ac52:	f1b8 0f00 	cmp.w	r8, #0
   2ac56:	d12e      	bne.n	2acb6 <le_adv_update+0xaa>
   2ac58:	3410      	adds	r4, #16
   2ac5a:	e8d4 3fef 	ldaex	r3, [r4]
   2ac5e:	f043 0304 	orr.w	r3, r3, #4
   2ac62:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2ac66:	2a00      	cmp	r2, #0
   2ac68:	d1f7      	bne.n	2ac5a <le_adv_update+0x4e>
	return 0;
   2ac6a:	2000      	movs	r0, #0
}
   2ac6c:	b007      	add	sp, #28
   2ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d[0].len = sd_len;
   2ac72:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   2ac74:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   2ac76:	9303      	str	r3, [sp, #12]
		d_len = 1;
   2ac78:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA,
   2ac7a:	f242 0138 	movw	r1, #8248	; 0x2038
   2ac7e:	4620      	mov	r0, r4
   2ac80:	aa02      	add	r2, sp, #8
   2ac82:	f7e4 fe19 	bl	f8b8 <hci_set_ad_ext>
		if (err) {
   2ac86:	2800      	cmp	r0, #0
   2ac88:	d0e6      	beq.n	2ac58 <le_adv_update+0x4c>
   2ac8a:	e7ef      	b.n	2ac6c <le_adv_update+0x60>
		const char *name = bt_get_name();
   2ac8c:	f7e4 fb56 	bl	f33c <bt_get_name>
   2ac90:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2ac92:	bb27      	cbnz	r7, 2acde <le_adv_update+0xd2>
   2ac94:	bb7e      	cbnz	r6, 2acf6 <le_adv_update+0xea>
		data = (struct bt_data)BT_DATA(
   2ac96:	4648      	mov	r0, r9
   2ac98:	f7ff fbe9 	bl	2a46e <strlen>
   2ac9c:	2209      	movs	r2, #9
   2ac9e:	f88d 0001 	strb.w	r0, [sp, #1]
   2aca2:	f88d 2000 	strb.w	r2, [sp]
   2aca6:	f8cd 9004 	str.w	r9, [sp, #4]
	if (!(ext_adv && scannable)) {
   2acaa:	f1bb 0f00 	cmp.w	fp, #0
   2acae:	d024      	beq.n	2acfa <le_adv_update+0xee>
   2acb0:	f1b8 0f00 	cmp.w	r8, #0
   2acb4:	d021      	beq.n	2acfa <le_adv_update+0xee>
		d[0].len = sd_len;
   2acb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
		if (name_type == ADV_NAME_TYPE_SD) {
   2acb8:	2d02      	cmp	r5, #2
		d[0].data = sd;
   2acba:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   2acbc:	9303      	str	r3, [sp, #12]
		if (name_type == ADV_NAME_TYPE_SD) {
   2acbe:	d1db      	bne.n	2ac78 <le_adv_update+0x6c>
			d[1].len = 1;
   2acc0:	2301      	movs	r3, #1
			d[1].data = &data;
   2acc2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2acc6:	9305      	str	r3, [sp, #20]
			d_len = 2;
   2acc8:	462b      	mov	r3, r5
   2acca:	e7d6      	b.n	2ac7a <le_adv_update+0x6e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2accc:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   2acd0:	3908      	subs	r1, #8
   2acd2:	2901      	cmp	r1, #1
   2acd4:	d91a      	bls.n	2ad0c <le_adv_update+0x100>
	for (i = 0; i < ad_len; i++) {
   2acd6:	3201      	adds	r2, #1
   2acd8:	4592      	cmp	sl, r2
   2acda:	d1f7      	bne.n	2accc <le_adv_update+0xc0>
   2acdc:	e7da      	b.n	2ac94 <le_adv_update+0x88>
   2acde:	2200      	movs	r2, #0
   2ace0:	e7fa      	b.n	2acd8 <le_adv_update+0xcc>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2ace2:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   2ace6:	3908      	subs	r1, #8
   2ace8:	2901      	cmp	r1, #1
   2acea:	d90f      	bls.n	2ad0c <le_adv_update+0x100>
	for (i = 0; i < ad_len; i++) {
   2acec:	3201      	adds	r2, #1
   2acee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2acf0:	4293      	cmp	r3, r2
   2acf2:	d1f6      	bne.n	2ace2 <le_adv_update+0xd6>
   2acf4:	e7cf      	b.n	2ac96 <le_adv_update+0x8a>
   2acf6:	2200      	movs	r2, #0
   2acf8:	e7f9      	b.n	2acee <le_adv_update+0xe2>
		if (name_type == ADV_NAME_TYPE_AD) {
   2acfa:	2d01      	cmp	r5, #1
		d[0].len = ad_len;
   2acfc:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		if (name_type == ADV_NAME_TYPE_AD) {
   2ad00:	d19f      	bne.n	2ac42 <le_adv_update+0x36>
			d_len = 2;
   2ad02:	2302      	movs	r3, #2
			d[1].data = &data;
   2ad04:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2ad08:	9505      	str	r5, [sp, #20]
			d_len = 2;
   2ad0a:	e79b      	b.n	2ac44 <le_adv_update+0x38>
			return -EINVAL;
   2ad0c:	f06f 0015 	mvn.w	r0, #21
   2ad10:	e7ac      	b.n	2ac6c <le_adv_update+0x60>

0002ad12 <get_adv_name_type>:
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   2ad12:	f100 0210 	add.w	r2, r0, #16
{
   2ad16:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   2ad18:	2109      	movs	r1, #9
   2ad1a:	4610      	mov	r0, r2
   2ad1c:	f7ff ff4e 	bl	2abbc <atomic_test_bit>
   2ad20:	b928      	cbnz	r0, 2ad2e <get_adv_name_type+0x1c>
}
   2ad22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   2ad26:	2108      	movs	r1, #8
   2ad28:	4610      	mov	r0, r2
   2ad2a:	f7ff bf47 	b.w	2abbc <atomic_test_bit>
}
   2ad2e:	2002      	movs	r0, #2
   2ad30:	bd08      	pop	{r3, pc}

0002ad32 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2ad32:	6843      	ldr	r3, [r0, #4]
   2ad34:	f013 0008 	ands.w	r0, r3, #8
   2ad38:	d00a      	beq.n	2ad50 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2ad3a:	035a      	lsls	r2, r3, #13
   2ad3c:	d407      	bmi.n	2ad4e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2ad3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2ad42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2ad46:	bf14      	ite	ne
   2ad48:	2002      	movne	r0, #2
   2ad4a:	2001      	moveq	r0, #1
   2ad4c:	4770      	bx	lr
   2ad4e:	2001      	movs	r0, #1
}
   2ad50:	4770      	bx	lr

0002ad52 <bt_le_adv_set_enable_ext>:
{
   2ad52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad56:	4680      	mov	r8, r0
   2ad58:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   2ad5a:	f242 0039 	movw	r0, #8249	; 0x2039
   2ad5e:	2106      	movs	r1, #6
{
   2ad60:	b086      	sub	sp, #24
   2ad62:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   2ad64:	f7e3 fbee 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   2ad68:	4606      	mov	r6, r0
   2ad6a:	b388      	cbz	r0, 2add0 <bt_le_adv_set_enable_ext+0x7e>
	return net_buf_simple_add_u8(&buf->b, val);
   2ad6c:	f100 050c 	add.w	r5, r0, #12
	if (enable) {
   2ad70:	b337      	cbz	r7, 2adc0 <bt_le_adv_set_enable_ext+0x6e>
   2ad72:	2101      	movs	r1, #1
   2ad74:	4628      	mov	r0, r5
   2ad76:	f003 f8bc 	bl	2def2 <net_buf_simple_add_u8>
   2ad7a:	2101      	movs	r1, #1
   2ad7c:	4628      	mov	r0, r5
   2ad7e:	f003 f8b8 	bl	2def2 <net_buf_simple_add_u8>
   2ad82:	4628      	mov	r0, r5
   2ad84:	f898 1001 	ldrb.w	r1, [r8, #1]
   2ad88:	f003 f8b3 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   2ad8c:	b1d4      	cbz	r4, 2adc4 <bt_le_adv_set_enable_ext+0x72>
	net_buf_simple_add_le16(&buf->b, val);
   2ad8e:	8821      	ldrh	r1, [r4, #0]
   2ad90:	4628      	mov	r0, r5
   2ad92:	f003 f8b5 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   2ad96:	78a1      	ldrb	r1, [r4, #2]
	return net_buf_simple_add_u8(&buf->b, val);
   2ad98:	4628      	mov	r0, r5
   2ad9a:	f003 f8aa 	bl	2def2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2ad9e:	4630      	mov	r0, r6
   2ada0:	f108 0210 	add.w	r2, r8, #16
   2ada4:	a903      	add	r1, sp, #12
   2ada6:	2307      	movs	r3, #7
   2ada8:	9700      	str	r7, [sp, #0]
   2adaa:	f7e3 fbb9 	bl	e520 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
   2adae:	2200      	movs	r2, #0
   2adb0:	4631      	mov	r1, r6
   2adb2:	f242 0039 	movw	r0, #8249	; 0x2039
   2adb6:	f7e3 fc0f 	bl	e5d8 <bt_hci_cmd_send_sync>
}
   2adba:	b006      	add	sp, #24
   2adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2adc0:	4639      	mov	r1, r7
   2adc2:	e7d7      	b.n	2ad74 <bt_le_adv_set_enable_ext+0x22>
	net_buf_simple_add_le16(&buf->b, val);
   2adc4:	4621      	mov	r1, r4
   2adc6:	4628      	mov	r0, r5
   2adc8:	f003 f89a 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   2adcc:	4621      	mov	r1, r4
   2adce:	e7e3      	b.n	2ad98 <bt_le_adv_set_enable_ext+0x46>
		return -ENOBUFS;
   2add0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2add4:	e7f1      	b.n	2adba <bt_le_adv_set_enable_ext+0x68>

0002add6 <bt_le_adv_set_enable>:
		return bt_le_adv_set_enable_ext(adv, enable, NULL);
   2add6:	2200      	movs	r2, #0
   2add8:	f7ff bfbb 	b.w	2ad52 <bt_le_adv_set_enable_ext>

0002addc <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2addc:	3020      	adds	r0, #32
   2adde:	f7fb bc51 	b.w	26684 <k_work_cancel_delayable>

0002ade2 <bt_le_ext_adv_update_param>:
{
   2ade2:	b538      	push	{r3, r4, r5, lr}
   2ade4:	4604      	mov	r4, r0
	if (!valid_adv_ext_param(param)) {
   2ade6:	4608      	mov	r0, r1
{
   2ade8:	460d      	mov	r5, r1
	if (!valid_adv_ext_param(param)) {
   2adea:	f7e4 fcdf 	bl	f7ac <valid_adv_ext_param>
   2adee:	b1b0      	cbz	r0, 2ae1e <bt_le_ext_adv_update_param+0x3c>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2adf0:	f104 0210 	add.w	r2, r4, #16
   2adf4:	2107      	movs	r1, #7
   2adf6:	4610      	mov	r0, r2
   2adf8:	f7ff fee0 	bl	2abbc <atomic_test_bit>
   2adfc:	b978      	cbnz	r0, 2ae1e <bt_le_ext_adv_update_param+0x3c>
	if (param->id != adv->id) {
   2adfe:	7829      	ldrb	r1, [r5, #0]
   2ae00:	7823      	ldrb	r3, [r4, #0]
   2ae02:	4299      	cmp	r1, r3
   2ae04:	d004      	beq.n	2ae10 <bt_le_ext_adv_update_param+0x2e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ae06:	f06f 0110 	mvn.w	r1, #16
   2ae0a:	4610      	mov	r0, r2
   2ae0c:	f7ff fedd 	bl	2abca <atomic_and>
	return le_ext_adv_param_set(adv, param, false);
   2ae10:	4629      	mov	r1, r5
   2ae12:	4620      	mov	r0, r4
}
   2ae14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return le_ext_adv_param_set(adv, param, false);
   2ae18:	2200      	movs	r2, #0
   2ae1a:	f7e4 bebd 	b.w	fb98 <le_ext_adv_param_set>
}
   2ae1e:	f06f 0015 	mvn.w	r0, #21
   2ae22:	bd38      	pop	{r3, r4, r5, pc}

0002ae24 <bt_le_ext_adv_stop>:
{
   2ae24:	b538      	push	{r3, r4, r5, lr}
   2ae26:	4604      	mov	r4, r0
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   2ae28:	f104 0510 	add.w	r5, r4, #16
	(void)bt_le_lim_adv_cancel_timeout(adv);
   2ae2c:	f7ff ffd6 	bl	2addc <bt_le_lim_adv_cancel_timeout>
   2ae30:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   2ae34:	4628      	mov	r0, r5
   2ae36:	f7ff fec8 	bl	2abca <atomic_and>
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2ae3a:	2107      	movs	r1, #7
   2ae3c:	4628      	mov	r0, r5
   2ae3e:	f7ff febd 	bl	2abbc <atomic_test_bit>
   2ae42:	b1c8      	cbz	r0, 2ae78 <bt_le_ext_adv_stop+0x54>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ae44:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2ae48:	4628      	mov	r0, r5
   2ae4a:	f7ff febe 	bl	2abca <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   2ae4e:	0643      	lsls	r3, r0, #25
   2ae50:	d502      	bpl.n	2ae58 <bt_le_ext_adv_stop+0x34>
		bt_id_adv_limited_stopped(adv);
   2ae52:	4620      	mov	r0, r4
   2ae54:	f7ff fe94 	bl	2ab80 <bt_id_adv_limited_stopped>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2ae58:	210a      	movs	r1, #10
   2ae5a:	4628      	mov	r0, r5
   2ae5c:	f7ff feae 	bl	2abbc <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ae60:	b118      	cbz	r0, 2ae6a <bt_le_ext_adv_stop+0x46>
		le_adv_stop_free_conn(adv, 0);
   2ae62:	2100      	movs	r1, #0
   2ae64:	4620      	mov	r0, r4
   2ae66:	f7e4 fc5f 	bl	f728 <le_adv_stop_free_conn>
	return bt_le_adv_set_enable_ext(adv, false, NULL);
   2ae6a:	2200      	movs	r2, #0
   2ae6c:	4620      	mov	r0, r4
}
   2ae6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_le_adv_set_enable_ext(adv, false, NULL);
   2ae72:	4611      	mov	r1, r2
   2ae74:	f7ff bf6d 	b.w	2ad52 <bt_le_adv_set_enable_ext>
}
   2ae78:	bd38      	pop	{r3, r4, r5, pc}

0002ae7a <bt_le_ext_adv_set_data>:
{
   2ae7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2ae7e:	4615      	mov	r5, r2
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   2ae80:	f100 0210 	add.w	r2, r0, #16
{
   2ae84:	4604      	mov	r4, r0
   2ae86:	4688      	mov	r8, r1
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   2ae88:	4610      	mov	r0, r2
   2ae8a:	210c      	movs	r1, #12
{
   2ae8c:	4699      	mov	r9, r3
   2ae8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   2ae92:	f7ff fe93 	bl	2abbc <atomic_test_bit>
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   2ae96:	210b      	movs	r1, #11
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   2ae98:	4606      	mov	r6, r0
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   2ae9a:	4610      	mov	r0, r2
   2ae9c:	f7ff fe8e 	bl	2abbc <atomic_test_bit>
   2aea0:	4607      	mov	r7, r0
	if (ext_adv) {
   2aea2:	b146      	cbz	r6, 2aeb6 <bt_le_ext_adv_set_data+0x3c>
		if ((scannable && ad_len) ||
   2aea4:	b928      	cbnz	r0, 2aeb2 <bt_le_ext_adv_set_data+0x38>
		    (!scannable && sd_len)) {
   2aea6:	f1ba 0f00 	cmp.w	sl, #0
   2aeaa:	d004      	beq.n	2aeb6 <bt_le_ext_adv_set_data+0x3c>
			return -ENOTSUP;
   2aeac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aeb0:	e00e      	b.n	2aed0 <bt_le_ext_adv_set_data+0x56>
		if ((scannable && ad_len) ||
   2aeb2:	2d00      	cmp	r5, #0
   2aeb4:	d1fa      	bne.n	2aeac <bt_le_ext_adv_set_data+0x32>
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
   2aeb6:	4620      	mov	r0, r4
   2aeb8:	f7ff ff2b 	bl	2ad12 <get_adv_name_type>
   2aebc:	464b      	mov	r3, r9
   2aebe:	e9cd 7002 	strd	r7, r0, [sp, #8]
   2aec2:	462a      	mov	r2, r5
   2aec4:	4641      	mov	r1, r8
   2aec6:	4620      	mov	r0, r4
   2aec8:	e9cd a600 	strd	sl, r6, [sp]
   2aecc:	f7ff fe9e 	bl	2ac0c <le_adv_update>
}
   2aed0:	b004      	add	sp, #16
   2aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002aed6 <atomic_and>:
{
   2aed6:	4603      	mov	r3, r0
   2aed8:	b510      	push	{r4, lr}
}
   2aeda:	e8d3 0fef 	ldaex	r0, [r3]
   2aede:	ea00 0201 	and.w	r2, r0, r1
   2aee2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2aee6:	2c00      	cmp	r4, #0
   2aee8:	d1f7      	bne.n	2aeda <atomic_and+0x4>
   2aeea:	bd10      	pop	{r4, pc}

0002aeec <bt_le_scan_set_enable>:
		return set_le_ext_scan_enable(enable, 0);
   2aeec:	2100      	movs	r1, #0
   2aeee:	f7e5 b95f 	b.w	101b0 <set_le_ext_scan_enable>

0002aef2 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2aef2:	b530      	push	{r4, r5, lr}
   2aef4:	460d      	mov	r5, r1
   2aef6:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2aef8:	4601      	mov	r1, r0
{
   2aefa:	b0ad      	sub	sp, #180	; 0xb4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2aefc:	b108      	cbz	r0, 2af02 <bt_encrypt_be+0x10>
   2aefe:	b105      	cbz	r5, 2af02 <bt_encrypt_be+0x10>
   2af00:	b91a      	cbnz	r2, 2af0a <bt_encrypt_be+0x18>
		return -EINVAL;
   2af02:	f06f 0015 	mvn.w	r0, #21
	}

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   2af06:	b02d      	add	sp, #180	; 0xb4
   2af08:	bd30      	pop	{r4, r5, pc}
	if (tc_aes128_set_encrypt_key(&s, key) == TC_CRYPTO_FAIL) {
   2af0a:	4668      	mov	r0, sp
   2af0c:	f7e1 fcac 	bl	c868 <tc_aes128_set_encrypt_key>
   2af10:	2800      	cmp	r0, #0
   2af12:	d0f6      	beq.n	2af02 <bt_encrypt_be+0x10>
	if (tc_aes_encrypt(enc_data, plaintext, &s) == TC_CRYPTO_FAIL) {
   2af14:	466a      	mov	r2, sp
   2af16:	4629      	mov	r1, r5
   2af18:	4620      	mov	r0, r4
   2af1a:	f7fe fde9 	bl	29af0 <tc_aes_encrypt>
   2af1e:	2800      	cmp	r0, #0
   2af20:	d0ef      	beq.n	2af02 <bt_encrypt_be+0x10>
	return 0;
   2af22:	2000      	movs	r0, #0
   2af24:	e7ef      	b.n	2af06 <bt_encrypt_be+0x14>

0002af26 <tx_complete_work>:
	tx_notify(conn);
   2af26:	3828      	subs	r0, #40	; 0x28
   2af28:	f7e5 be26 	b.w	10b78 <tx_notify>

0002af2c <bt_conn_reset_rx_state>:
{
   2af2c:	b510      	push	{r4, lr}
   2af2e:	4604      	mov	r4, r0
	if (!conn->rx) {
   2af30:	6900      	ldr	r0, [r0, #16]
   2af32:	b118      	cbz	r0, 2af3c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2af34:	f7f5 f8d2 	bl	200dc <net_buf_unref>
	conn->rx = NULL;
   2af38:	2300      	movs	r3, #0
   2af3a:	6123      	str	r3, [r4, #16]
}
   2af3c:	bd10      	pop	{r4, pc}

0002af3e <conn_lookup_handle>:
{
   2af3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af42:	4607      	mov	r7, r0
   2af44:	460e      	mov	r6, r1
   2af46:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2af48:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2af4a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2af4e:	42b4      	cmp	r4, r6
   2af50:	d103      	bne.n	2af5a <conn_lookup_handle+0x1c>
	return NULL;
   2af52:	2300      	movs	r3, #0
}
   2af54:	4618      	mov	r0, r3
   2af56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2af5a:	fb09 7004 	mla	r0, r9, r4, r7
   2af5e:	f7e6 f8c9 	bl	110f4 <bt_conn_ref>
   2af62:	4603      	mov	r3, r0
		if (!conn) {
   2af64:	b158      	cbz	r0, 2af7e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2af66:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2af68:	2d01      	cmp	r5, #1
   2af6a:	d002      	beq.n	2af72 <conn_lookup_handle+0x34>
   2af6c:	3d07      	subs	r5, #7
   2af6e:	2d01      	cmp	r5, #1
   2af70:	d803      	bhi.n	2af7a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2af72:	881a      	ldrh	r2, [r3, #0]
   2af74:	4542      	cmp	r2, r8
   2af76:	d0ed      	beq.n	2af54 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2af78:	4618      	mov	r0, r3
   2af7a:	f7e6 f8df 	bl	1113c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2af7e:	3401      	adds	r4, #1
   2af80:	e7e5      	b.n	2af4e <conn_lookup_handle+0x10>

0002af82 <bt_conn_connected>:
{
   2af82:	b510      	push	{r4, lr}
   2af84:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2af86:	f7e6 fd0b 	bl	119a0 <bt_l2cap_connected>
	notify_connected(conn);
   2af8a:	4620      	mov	r0, r4
}
   2af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2af90:	f7e5 bdc4 	b.w	10b1c <notify_connected>

0002af94 <bt_conn_disconnect>:
{
   2af94:	b510      	push	{r4, lr}
	switch (conn->state) {
   2af96:	7a83      	ldrb	r3, [r0, #10]
{
   2af98:	4604      	mov	r4, r0
	switch (conn->state) {
   2af9a:	3b02      	subs	r3, #2
   2af9c:	2b06      	cmp	r3, #6
   2af9e:	d816      	bhi.n	2afce <bt_conn_disconnect+0x3a>
   2afa0:	e8df f003 	tbb	[pc, r3]
   2afa4:	15151504 	.word	0x15151504
   2afa8:	0b09      	.short	0x0b09
   2afaa:	09          	.byte	0x09
   2afab:	00          	.byte	0x00
		conn->err = reason;
   2afac:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2afae:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2afb0:	4620      	mov	r0, r4
   2afb2:	f7e6 f8f3 	bl	1119c <bt_conn_set_state>
{
   2afb6:	2000      	movs	r0, #0
}
   2afb8:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2afba:	8800      	ldrh	r0, [r0, #0]
   2afbc:	f7ff fd17 	bl	2a9ee <bt_hci_disconnect>
	if (err) {
   2afc0:	2800      	cmp	r0, #0
   2afc2:	d1f9      	bne.n	2afb8 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2afc4:	7aa3      	ldrb	r3, [r4, #10]
   2afc6:	2b07      	cmp	r3, #7
   2afc8:	d1f5      	bne.n	2afb6 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2afca:	2108      	movs	r1, #8
   2afcc:	e7f0      	b.n	2afb0 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2afce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2afd2:	e7f1      	b.n	2afb8 <bt_conn_disconnect+0x24>

0002afd4 <bt_conn_get_security>:
}
   2afd4:	2001      	movs	r0, #1
   2afd6:	4770      	bx	lr

0002afd8 <bt_conn_is_peer_addr_le>:
{
   2afd8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2afda:	7a03      	ldrb	r3, [r0, #8]
{
   2afdc:	4604      	mov	r4, r0
	if (id != conn->id) {
   2afde:	428b      	cmp	r3, r1
{
   2afe0:	4615      	mov	r5, r2
	if (id != conn->id) {
   2afe2:	d115      	bne.n	2b010 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2afe4:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2afe8:	2207      	movs	r2, #7
   2afea:	4628      	mov	r0, r5
   2afec:	f7ff fa6e 	bl	2a4cc <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2aff0:	b180      	cbz	r0, 2b014 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2aff2:	78e3      	ldrb	r3, [r4, #3]
   2aff4:	2207      	movs	r2, #7
   2aff6:	b943      	cbnz	r3, 2b00a <bt_conn_is_peer_addr_le+0x32>
   2aff8:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2affc:	4628      	mov	r0, r5
   2affe:	f7ff fa65 	bl	2a4cc <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2b002:	fab0 f080 	clz	r0, r0
   2b006:	0940      	lsrs	r0, r0, #5
}
   2b008:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2b00a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2b00e:	e7f5      	b.n	2affc <bt_conn_is_peer_addr_le+0x24>
		return false;
   2b010:	2000      	movs	r0, #0
   2b012:	e7f9      	b.n	2b008 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2b014:	2001      	movs	r0, #1
   2b016:	e7f7      	b.n	2b008 <bt_conn_is_peer_addr_le+0x30>

0002b018 <bt_conn_exists_le>:
{
   2b018:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2b01a:	f7e6 fa71 	bl	11500 <bt_conn_lookup_addr_le>
	if (conn) {
   2b01e:	b110      	cbz	r0, 2b026 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   2b020:	f7e6 f88c 	bl	1113c <bt_conn_unref>
		return true;
   2b024:	2001      	movs	r0, #1
}
   2b026:	bd08      	pop	{r3, pc}

0002b028 <bt_conn_le_conn_update>:
{
   2b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b02a:	4607      	mov	r7, r0
   2b02c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2b02e:	f242 0013 	movw	r0, #8211	; 0x2013
   2b032:	210e      	movs	r1, #14
   2b034:	f7e3 fa86 	bl	e544 <bt_hci_cmd_create>
	if (!buf) {
   2b038:	4606      	mov	r6, r0
   2b03a:	b1d0      	cbz	r0, 2b072 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2b03c:	210e      	movs	r1, #14
   2b03e:	300c      	adds	r0, #12
   2b040:	f7f5 f986 	bl	20350 <net_buf_simple_add>
   2b044:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2b046:	220e      	movs	r2, #14
   2b048:	2100      	movs	r1, #0
   2b04a:	f7ff fa71 	bl	2a530 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2b04e:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b050:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2b052:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2b054:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b056:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2b058:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2b05a:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b05c:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2b060:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2b062:	88ab      	ldrh	r3, [r5, #4]
   2b064:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2b066:	88eb      	ldrh	r3, [r5, #6]
   2b068:	8123      	strh	r3, [r4, #8]
}
   2b06a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b06e:	f7e3 bab3 	b.w	e5d8 <bt_hci_cmd_send_sync>
}
   2b072:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b078 <l2cap_connected>:
}
   2b078:	4770      	bx	lr

0002b07a <z_log_msg_static_create.constprop.0>:
   2b07a:	2300      	movs	r3, #0
   2b07c:	f7df bd6e 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002b080 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b082:	4605      	mov	r5, r0
   2b084:	460f      	mov	r7, r1
   2b086:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2b088:	2300      	movs	r3, #0
   2b08a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2b08e:	2104      	movs	r1, #4
   2b090:	2000      	movs	r0, #0
   2b092:	f7e6 f953 	bl	1133c <bt_conn_create_pdu_timeout>
	if (!buf) {
   2b096:	4604      	mov	r4, r0
   2b098:	b920      	cbnz	r0, 2b0a4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2b09a:	4628      	mov	r0, r5
}
   2b09c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b0a0:	f7e6 bc42 	b.w	11928 <l2cap_create_le_sig_pdu.part.0>
   2b0a4:	2104      	movs	r1, #4
   2b0a6:	300c      	adds	r0, #12
   2b0a8:	f7f5 f952 	bl	20350 <net_buf_simple_add>
	hdr->code = code;
   2b0ac:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2b0ae:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2b0b0:	8046      	strh	r6, [r0, #2]
}
   2b0b2:	4620      	mov	r0, r4
   2b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b0b6 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2b0b6:	4770      	bx	lr

0002b0b8 <bt_l2cap_chan_del>:
{
   2b0b8:	b570      	push	{r4, r5, r6, lr}
   2b0ba:	4604      	mov	r4, r0
	if (!chan->conn) {
   2b0bc:	e9d0 3500 	ldrd	r3, r5, [r0]
   2b0c0:	b123      	cbz	r3, 2b0cc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2b0c2:	686b      	ldr	r3, [r5, #4]
   2b0c4:	b103      	cbz	r3, 2b0c8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2b0c6:	4798      	blx	r3
	chan->conn = NULL;
   2b0c8:	2300      	movs	r3, #0
   2b0ca:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2b0cc:	68e3      	ldr	r3, [r4, #12]
   2b0ce:	b10b      	cbz	r3, 2b0d4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2b0d0:	4620      	mov	r0, r4
   2b0d2:	4798      	blx	r3
	if (ops->released) {
   2b0d4:	6a2b      	ldr	r3, [r5, #32]
   2b0d6:	b11b      	cbz	r3, 2b0e0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2b0d8:	4620      	mov	r0, r4
}
   2b0da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2b0de:	4718      	bx	r3
}
   2b0e0:	bd70      	pop	{r4, r5, r6, pc}

0002b0e2 <bt_l2cap_disconnected>:
{
   2b0e2:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2b0e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b0e6:	b130      	cbz	r0, 2b0f6 <bt_l2cap_disconnected+0x14>
	return node->next;
   2b0e8:	f850 4908 	ldr.w	r4, [r0], #-8
   2b0ec:	b104      	cbz	r4, 2b0f0 <bt_l2cap_disconnected+0xe>
   2b0ee:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2b0f0:	f7ff ffe2 	bl	2b0b8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b0f4:	b904      	cbnz	r4, 2b0f8 <bt_l2cap_disconnected+0x16>
}
   2b0f6:	bd38      	pop	{r3, r4, r5, pc}
   2b0f8:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b0fa:	b12d      	cbz	r5, 2b108 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2b0fc:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b0fe:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2b100:	f7ff ffda 	bl	2b0b8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b104:	462c      	mov	r4, r5
   2b106:	e7f7      	b.n	2b0f8 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2b108:	4620      	mov	r0, r4
}
   2b10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2b10e:	f7ff bfd3 	b.w	2b0b8 <bt_l2cap_chan_del>

0002b112 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2b112:	3104      	adds	r1, #4
   2b114:	f7e6 b912 	b.w	1133c <bt_conn_create_pdu_timeout>

0002b118 <bt_l2cap_send_cb>:
{
   2b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b11c:	4614      	mov	r4, r2
   2b11e:	4605      	mov	r5, r0
   2b120:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2b122:	f102 000c 	add.w	r0, r2, #12
   2b126:	2104      	movs	r1, #4
   2b128:	461e      	mov	r6, r3
   2b12a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2b12e:	f7f5 f8bf 	bl	202b0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b132:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2b134:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b136:	3a04      	subs	r2, #4
   2b138:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b13a:	4643      	mov	r3, r8
   2b13c:	4632      	mov	r2, r6
   2b13e:	4621      	mov	r1, r4
   2b140:	4628      	mov	r0, r5
}
   2b142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b146:	f7e5 bf3f 	b.w	10fc8 <bt_conn_send_cb>

0002b14a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2b14a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b14c:	b128      	cbz	r0, 2b15a <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b14e:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b150:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b152:	428b      	cmp	r3, r1
   2b154:	d001      	beq.n	2b15a <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2b156:	6880      	ldr	r0, [r0, #8]
   2b158:	e7f8      	b.n	2b14c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2b15a:	4770      	bx	lr

0002b15c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2b15c:	4770      	bx	lr

0002b15e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2b15e:	4603      	mov	r3, r0
	return list->head;
   2b160:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2b162:	b128      	cbz	r0, 2b170 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b164:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2b166:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b168:	4288      	cmp	r0, r1
	list->head = node;
   2b16a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2b16c:	bf08      	it	eq
   2b16e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2b170:	4770      	bx	lr

0002b172 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2b172:	4603      	mov	r3, r0
	size_t bytes = 0;
   2b174:	2000      	movs	r0, #0

	while (buf) {
   2b176:	b903      	cbnz	r3, 2b17a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2b178:	4770      	bx	lr
		bytes += buf->len;
   2b17a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2b17c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2b17e:	4410      	add	r0, r2
		buf = buf->frags;
   2b180:	e7f9      	b.n	2b176 <net_buf_frags_len+0x4>

0002b182 <attr_read_type_cb>:
{
   2b182:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2b184:	68d4      	ldr	r4, [r2, #12]
   2b186:	3102      	adds	r1, #2
   2b188:	7823      	ldrb	r3, [r4, #0]
   2b18a:	b913      	cbnz	r3, 2b192 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2b18c:	7021      	strb	r1, [r4, #0]
	return true;
   2b18e:	2001      	movs	r0, #1
}
   2b190:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2b192:	428b      	cmp	r3, r1
   2b194:	d0fb      	beq.n	2b18e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2b196:	8a03      	ldrh	r3, [r0, #16]
   2b198:	3b02      	subs	r3, #2
   2b19a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2b19c:	2000      	movs	r0, #0
   2b19e:	6110      	str	r0, [r2, #16]
		return false;
   2b1a0:	e7f6      	b.n	2b190 <attr_read_type_cb+0xe>

0002b1a2 <att_prepare_write_req>:
}
   2b1a2:	2006      	movs	r0, #6
   2b1a4:	4770      	bx	lr

0002b1a6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b1a6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b1aa:	4108      	asrs	r0, r1
}
   2b1ac:	f000 0001 	and.w	r0, r0, #1
   2b1b0:	4770      	bx	lr

0002b1b2 <write_cb>:
{
   2b1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b1b4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b1b6:	4601      	mov	r1, r0
{
   2b1b8:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b1ba:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2b1be:	6820      	ldr	r0, [r4, #0]
   2b1c0:	f000 fee6 	bl	2bf90 <bt_gatt_check_perm>
   2b1c4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2b1c6:	bb00      	cbnz	r0, 2b20a <write_cb+0x58>
	if (!data->req) {
   2b1c8:	7a23      	ldrb	r3, [r4, #8]
   2b1ca:	b1b3      	cbz	r3, 2b1fa <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2b1cc:	f1a3 0218 	sub.w	r2, r3, #24
   2b1d0:	4253      	negs	r3, r2
   2b1d2:	4153      	adcs	r3, r2
   2b1d4:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2b1d6:	9301      	str	r3, [sp, #4]
   2b1d8:	8a63      	ldrh	r3, [r4, #18]
   2b1da:	4629      	mov	r1, r5
   2b1dc:	9300      	str	r3, [sp, #0]
   2b1de:	68ae      	ldr	r6, [r5, #8]
   2b1e0:	8a23      	ldrh	r3, [r4, #16]
   2b1e2:	68e2      	ldr	r2, [r4, #12]
   2b1e4:	6820      	ldr	r0, [r4, #0]
   2b1e6:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2b1e8:	2800      	cmp	r0, #0
   2b1ea:	db08      	blt.n	2b1fe <write_cb+0x4c>
   2b1ec:	8a23      	ldrh	r3, [r4, #16]
   2b1ee:	4298      	cmp	r0, r3
   2b1f0:	d10e      	bne.n	2b210 <write_cb+0x5e>
	data->err = 0U;
   2b1f2:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2b1f4:	2001      	movs	r0, #1
	data->err = 0U;
   2b1f6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b1f8:	e008      	b.n	2b20c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b1fa:	2302      	movs	r3, #2
   2b1fc:	e7eb      	b.n	2b1d6 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2b1fe:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2b202:	d305      	bcc.n	2b210 <write_cb+0x5e>
		return -err;
   2b204:	4240      	negs	r0, r0
   2b206:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2b208:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2b20a:	2000      	movs	r0, #0
}
   2b20c:	b002      	add	sp, #8
   2b20e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2b210:	200e      	movs	r0, #14
   2b212:	e7f9      	b.n	2b208 <write_cb+0x56>

0002b214 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2b214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b216:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b21a:	2300      	movs	r3, #0
   2b21c:	461a      	mov	r2, r3
   2b21e:	9300      	str	r3, [sp, #0]
   2b220:	f7e8 fa62 	bl	136e8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2b224:	b005      	add	sp, #20
   2b226:	f85d fb04 	ldr.w	pc, [sp], #4

0002b22a <find_type_cb>:
{
   2b22a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2b22e:	f642 0301 	movw	r3, #10241	; 0x2801
   2b232:	2500      	movs	r5, #0
{
   2b234:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   2b236:	f8d2 9000 	ldr.w	r9, [r2]
{
   2b23a:	4607      	mov	r7, r0
   2b23c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2b23e:	6800      	ldr	r0, [r0, #0]
   2b240:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   2b242:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   2b246:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2b248:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2b24c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2b250:	f7ff fb4c 	bl	2a8ec <bt_uuid_cmp>
   2b254:	2800      	cmp	r0, #0
   2b256:	d079      	beq.n	2b34c <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2b258:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b25c:	6838      	ldr	r0, [r7, #0]
   2b25e:	a90b      	add	r1, sp, #44	; 0x2c
   2b260:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2b264:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2b268:	f7ff fb40 	bl	2a8ec <bt_uuid_cmp>
   2b26c:	b138      	cbz	r0, 2b27e <find_type_cb+0x54>
		if (data->group &&
   2b26e:	68a3      	ldr	r3, [r4, #8]
   2b270:	b11b      	cbz	r3, 2b27a <find_type_cb+0x50>
   2b272:	885a      	ldrh	r2, [r3, #2]
   2b274:	42b2      	cmp	r2, r6
   2b276:	d200      	bcs.n	2b27a <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   2b278:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2b27a:	2001      	movs	r0, #1
   2b27c:	e009      	b.n	2b292 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2b27e:	6861      	ldr	r1, [r4, #4]
   2b280:	4608      	mov	r0, r1
   2b282:	f7ff ff76 	bl	2b172 <net_buf_frags_len>
   2b286:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   2b28a:	1a1b      	subs	r3, r3, r0
   2b28c:	2b03      	cmp	r3, #3
   2b28e:	d803      	bhi.n	2b298 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   2b290:	2000      	movs	r0, #0
}
   2b292:	b011      	add	sp, #68	; 0x44
   2b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   2b298:	4608      	mov	r0, r1
   2b29a:	f7f4 ff77 	bl	2018c <net_buf_frag_last>
   2b29e:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2b2a0:	6860      	ldr	r0, [r4, #4]
   2b2a2:	f7ff ff66 	bl	2b172 <net_buf_frags_len>
   2b2a6:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2b2aa:	f105 0b0c 	add.w	fp, r5, #12
   2b2ae:	ebaa 0a00 	sub.w	sl, sl, r0
   2b2b2:	4658      	mov	r0, fp
   2b2b4:	f002 fe09 	bl	2deca <net_buf_simple_tailroom>
   2b2b8:	4582      	cmp	sl, r0
   2b2ba:	d23f      	bcs.n	2b33c <find_type_cb+0x112>
   2b2bc:	6860      	ldr	r0, [r4, #4]
   2b2be:	f7ff ff58 	bl	2b172 <net_buf_frags_len>
   2b2c2:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   2b2c6:	1a18      	subs	r0, r3, r0
	if (!len) {
   2b2c8:	b970      	cbnz	r0, 2b2e8 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   2b2ca:	6863      	ldr	r3, [r4, #4]
   2b2cc:	7a98      	ldrb	r0, [r3, #10]
   2b2ce:	f7f4 fd23 	bl	1fd18 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b2d2:	2200      	movs	r2, #0
   2b2d4:	2300      	movs	r3, #0
   2b2d6:	f002 fda2 	bl	2de1e <net_buf_alloc_fixed>
		if (!frag) {
   2b2da:	4605      	mov	r5, r0
   2b2dc:	2800      	cmp	r0, #0
   2b2de:	d0d7      	beq.n	2b290 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   2b2e0:	4601      	mov	r1, r0
   2b2e2:	6860      	ldr	r0, [r4, #4]
   2b2e4:	f7f4 ff90 	bl	20208 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2b2e8:	2300      	movs	r3, #0
   2b2ea:	9300      	str	r3, [sp, #0]
   2b2ec:	4639      	mov	r1, r7
   2b2ee:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2b2f2:	2310      	movs	r3, #16
   2b2f4:	4640      	mov	r0, r8
   2b2f6:	aa02      	add	r2, sp, #8
   2b2f8:	47c8      	blx	r9
	if (read < 0) {
   2b2fa:	1e07      	subs	r7, r0, #0
   2b2fc:	db26      	blt.n	2b34c <find_type_cb+0x122>
	if (read != data->value_len) {
   2b2fe:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2b300:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   2b302:	42ba      	cmp	r2, r7
   2b304:	d01e      	beq.n	2b344 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2b306:	4601      	mov	r1, r0
   2b308:	a80b      	add	r0, sp, #44	; 0x2c
   2b30a:	f7ff fb1d 	bl	2a948 <bt_uuid_create>
   2b30e:	b1e8      	cbz	r0, 2b34c <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2b310:	b2fa      	uxtb	r2, r7
   2b312:	a902      	add	r1, sp, #8
   2b314:	a806      	add	r0, sp, #24
   2b316:	f7ff fb17 	bl	2a948 <bt_uuid_create>
   2b31a:	b1b8      	cbz	r0, 2b34c <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2b31c:	a906      	add	r1, sp, #24
   2b31e:	a80b      	add	r0, sp, #44	; 0x2c
   2b320:	f7ff fae4 	bl	2a8ec <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2b324:	b990      	cbnz	r0, 2b34c <find_type_cb+0x122>
	data->err = 0x00;
   2b326:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   2b328:	2104      	movs	r1, #4
   2b32a:	7463      	strb	r3, [r4, #17]
   2b32c:	f105 000c 	add.w	r0, r5, #12
   2b330:	f7f5 f80e 	bl	20350 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2b334:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2b336:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2b338:	68a3      	ldr	r3, [r4, #8]
   2b33a:	e79d      	b.n	2b278 <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   2b33c:	4658      	mov	r0, fp
   2b33e:	f002 fdc4 	bl	2deca <net_buf_simple_tailroom>
   2b342:	e7c1      	b.n	2b2c8 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   2b344:	a902      	add	r1, sp, #8
   2b346:	f7ff f8c1 	bl	2a4cc <memcmp>
   2b34a:	e7eb      	b.n	2b324 <find_type_cb+0xfa>
	data->group = NULL;
   2b34c:	2300      	movs	r3, #0
   2b34e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   2b350:	e793      	b.n	2b27a <find_type_cb+0x50>

0002b352 <find_info_cb>:
{
   2b352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2b354:	6893      	ldr	r3, [r2, #8]
{
   2b356:	4605      	mov	r5, r0
   2b358:	460e      	mov	r6, r1
   2b35a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2b35c:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   2b35e:	b963      	cbnz	r3, 2b37a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2b360:	6850      	ldr	r0, [r2, #4]
   2b362:	2101      	movs	r1, #1
   2b364:	300c      	adds	r0, #12
   2b366:	f7f4 fff3 	bl	20350 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b36a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b36c:	682b      	ldr	r3, [r5, #0]
   2b36e:	781b      	ldrb	r3, [r3, #0]
   2b370:	2b00      	cmp	r3, #0
   2b372:	bf14      	ite	ne
   2b374:	2302      	movne	r3, #2
   2b376:	2301      	moveq	r3, #1
   2b378:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2b37a:	68a3      	ldr	r3, [r4, #8]
   2b37c:	781b      	ldrb	r3, [r3, #0]
   2b37e:	2b01      	cmp	r3, #1
   2b380:	d003      	beq.n	2b38a <find_info_cb+0x38>
   2b382:	2b02      	cmp	r3, #2
   2b384:	d019      	beq.n	2b3ba <find_info_cb+0x68>
   2b386:	2000      	movs	r0, #0
   2b388:	e016      	b.n	2b3b8 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b38a:	682b      	ldr	r3, [r5, #0]
   2b38c:	781b      	ldrb	r3, [r3, #0]
   2b38e:	2b00      	cmp	r3, #0
   2b390:	d1f9      	bne.n	2b386 <find_info_cb+0x34>
   2b392:	6860      	ldr	r0, [r4, #4]
   2b394:	2104      	movs	r1, #4
   2b396:	300c      	adds	r0, #12
   2b398:	f7f4 ffda 	bl	20350 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b39c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b39e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b3a0:	682a      	ldr	r2, [r5, #0]
   2b3a2:	68e3      	ldr	r3, [r4, #12]
   2b3a4:	8852      	ldrh	r2, [r2, #2]
   2b3a6:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b3a8:	6863      	ldr	r3, [r4, #4]
   2b3aa:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2b3ac:	8a1b      	ldrh	r3, [r3, #16]
   2b3ae:	1ac0      	subs	r0, r0, r3
   2b3b0:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2b3b2:	bf94      	ite	ls
   2b3b4:	2000      	movls	r0, #0
   2b3b6:	2001      	movhi	r0, #1
}
   2b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2b3ba:	682b      	ldr	r3, [r5, #0]
   2b3bc:	781b      	ldrb	r3, [r3, #0]
   2b3be:	2b02      	cmp	r3, #2
   2b3c0:	d1e1      	bne.n	2b386 <find_info_cb+0x34>
   2b3c2:	6860      	ldr	r0, [r4, #4]
   2b3c4:	2112      	movs	r1, #18
   2b3c6:	300c      	adds	r0, #12
   2b3c8:	f7f4 ffc2 	bl	20350 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2b3cc:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2b3ce:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2b3d0:	6829      	ldr	r1, [r5, #0]
   2b3d2:	68e0      	ldr	r0, [r4, #12]
   2b3d4:	2210      	movs	r2, #16
   2b3d6:	3101      	adds	r1, #1
   2b3d8:	3002      	adds	r0, #2
   2b3da:	f7ff f89e 	bl	2a51a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2b3de:	6863      	ldr	r3, [r4, #4]
   2b3e0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2b3e2:	8a1b      	ldrh	r3, [r3, #16]
   2b3e4:	1ac0      	subs	r0, r0, r3
   2b3e6:	2812      	cmp	r0, #18
   2b3e8:	e7e3      	b.n	2b3b2 <find_info_cb+0x60>

0002b3ea <att_chan_mtu_updated>:
{
   2b3ea:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2b3ec:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2b3ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3f0:	b352      	cbz	r2, 2b448 <att_chan_mtu_updated+0x5e>
	return node->next;
   2b3f2:	6813      	ldr	r3, [r2, #0]
   2b3f4:	b103      	cbz	r3, 2b3f8 <att_chan_mtu_updated+0xe>
   2b3f6:	3bf0      	subs	r3, #240	; 0xf0
   2b3f8:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2b3fc:	2200      	movs	r2, #0
   2b3fe:	4611      	mov	r1, r2
   2b400:	e000      	b.n	2b404 <att_chan_mtu_updated+0x1a>
   2b402:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2b404:	4284      	cmp	r4, r0
   2b406:	d007      	beq.n	2b418 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b408:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b40a:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b40c:	42b1      	cmp	r1, r6
   2b40e:	bf38      	it	cc
   2b410:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b412:	42a2      	cmp	r2, r4
   2b414:	bf38      	it	cc
   2b416:	4622      	movcc	r2, r4
   2b418:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b41a:	b12b      	cbz	r3, 2b428 <att_chan_mtu_updated+0x3e>
   2b41c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2b420:	2b00      	cmp	r3, #0
   2b422:	d1ee      	bne.n	2b402 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2b424:	4284      	cmp	r4, r0
   2b426:	d1ef      	bne.n	2b408 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b428:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2b42a:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b42c:	428b      	cmp	r3, r1
   2b42e:	d801      	bhi.n	2b434 <att_chan_mtu_updated+0x4a>
   2b430:	4290      	cmp	r0, r2
   2b432:	d90b      	bls.n	2b44c <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b434:	4282      	cmp	r2, r0
   2b436:	bf38      	it	cc
   2b438:	4602      	movcc	r2, r0
   2b43a:	4299      	cmp	r1, r3
   2b43c:	6828      	ldr	r0, [r5, #0]
   2b43e:	bf38      	it	cc
   2b440:	4619      	movcc	r1, r3
}
   2b442:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b444:	f7e8 bfbe 	b.w	143c4 <bt_gatt_att_max_mtu_changed>
   2b448:	4611      	mov	r1, r2
   2b44a:	e7ed      	b.n	2b428 <att_chan_mtu_updated+0x3e>
}
   2b44c:	bc70      	pop	{r4, r5, r6}
   2b44e:	4770      	bx	lr

0002b450 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2b450:	68d0      	ldr	r0, [r2, #12]
   2b452:	3104      	adds	r1, #4
   2b454:	7803      	ldrb	r3, [r0, #0]
   2b456:	b913      	cbnz	r3, 2b45e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2b458:	7001      	strb	r1, [r0, #0]
	return true;
   2b45a:	2001      	movs	r0, #1
   2b45c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2b45e:	428b      	cmp	r3, r1
   2b460:	d0fb      	beq.n	2b45a <attr_read_group_cb+0xa>
		data->group = NULL;
   2b462:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2b464:	6891      	ldr	r1, [r2, #8]
   2b466:	8a0b      	ldrh	r3, [r1, #16]
   2b468:	3b04      	subs	r3, #4
   2b46a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2b46c:	6110      	str	r0, [r2, #16]
}
   2b46e:	4770      	bx	lr

0002b470 <att_chan_read>:
{
   2b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b474:	4680      	mov	r8, r0
   2b476:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b478:	4610      	mov	r0, r2
{
   2b47a:	4699      	mov	r9, r3
   2b47c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b47e:	f7ff fe78 	bl	2b172 <net_buf_frags_len>
   2b482:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2b486:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b488:	4283      	cmp	r3, r0
   2b48a:	d97a      	bls.n	2b582 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2b48c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2b490:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2b492:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2b494:	f7f4 fe7a 	bl	2018c <net_buf_frag_last>
	size_t len, total = 0;
   2b498:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2b49c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b49e:	4630      	mov	r0, r6
   2b4a0:	f7ff fe67 	bl	2b172 <net_buf_frags_len>
   2b4a4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2b4a8:	f105 070c 	add.w	r7, r5, #12
   2b4ac:	1a24      	subs	r4, r4, r0
   2b4ae:	4638      	mov	r0, r7
   2b4b0:	f002 fd0b 	bl	2deca <net_buf_simple_tailroom>
   2b4b4:	4284      	cmp	r4, r0
   2b4b6:	d211      	bcs.n	2b4dc <att_chan_read+0x6c>
   2b4b8:	4630      	mov	r0, r6
   2b4ba:	f7ff fe5a 	bl	2b172 <net_buf_frags_len>
   2b4be:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b4c2:	1a24      	subs	r4, r4, r0
		if (!len) {
   2b4c4:	bb34      	cbnz	r4, 2b514 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b4c6:	7ab0      	ldrb	r0, [r6, #10]
   2b4c8:	f7f4 fc26 	bl	1fd18 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b4cc:	2200      	movs	r2, #0
   2b4ce:	2300      	movs	r3, #0
   2b4d0:	f002 fca5 	bl	2de1e <net_buf_alloc_fixed>
			if (!frag) {
   2b4d4:	4605      	mov	r5, r0
   2b4d6:	b930      	cbnz	r0, 2b4e6 <att_chan_read+0x76>
	return total;
   2b4d8:	4657      	mov	r7, sl
   2b4da:	e02c      	b.n	2b536 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2b4dc:	4638      	mov	r0, r7
   2b4de:	f002 fcf4 	bl	2deca <net_buf_simple_tailroom>
   2b4e2:	4604      	mov	r4, r0
   2b4e4:	e7ee      	b.n	2b4c4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2b4e6:	4601      	mov	r1, r0
   2b4e8:	4630      	mov	r0, r6
   2b4ea:	f7f4 fe8d 	bl	20208 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b4ee:	4630      	mov	r0, r6
   2b4f0:	f7ff fe3f 	bl	2b172 <net_buf_frags_len>
   2b4f4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b4f8:	f105 070c 	add.w	r7, r5, #12
   2b4fc:	1a24      	subs	r4, r4, r0
   2b4fe:	4638      	mov	r0, r7
   2b500:	f002 fce3 	bl	2deca <net_buf_simple_tailroom>
   2b504:	4284      	cmp	r4, r0
   2b506:	d21a      	bcs.n	2b53e <att_chan_read+0xce>
   2b508:	4630      	mov	r0, r6
   2b50a:	f7ff fe32 	bl	2b172 <net_buf_frags_len>
   2b50e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2b512:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b514:	68e9      	ldr	r1, [r5, #12]
   2b516:	8a2a      	ldrh	r2, [r5, #16]
   2b518:	f8cd 9000 	str.w	r9, [sp]
   2b51c:	f8db 7004 	ldr.w	r7, [fp, #4]
   2b520:	440a      	add	r2, r1
   2b522:	9803      	ldr	r0, [sp, #12]
   2b524:	4659      	mov	r1, fp
   2b526:	b2a3      	uxth	r3, r4
   2b528:	47b8      	blx	r7
		if (read < 0) {
   2b52a:	1e07      	subs	r7, r0, #0
   2b52c:	da0c      	bge.n	2b548 <att_chan_read+0xd8>
				return total;
   2b52e:	f1ba 0f00 	cmp.w	sl, #0
   2b532:	bf18      	it	ne
   2b534:	4657      	movne	r7, sl
}
   2b536:	4638      	mov	r0, r7
   2b538:	b005      	add	sp, #20
   2b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b53e:	4638      	mov	r0, r7
   2b540:	f002 fcc3 	bl	2deca <net_buf_simple_tailroom>
   2b544:	4604      	mov	r4, r0
   2b546:	e7e5      	b.n	2b514 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2b548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b54a:	b993      	cbnz	r3, 2b572 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2b54c:	4639      	mov	r1, r7
   2b54e:	f105 000c 	add.w	r0, r5, #12
   2b552:	f7f4 fefd 	bl	20350 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b556:	4630      	mov	r0, r6
   2b558:	f7ff fe0b 	bl	2b172 <net_buf_frags_len>
   2b55c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2b560:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b562:	4283      	cmp	r3, r0
		total += read;
   2b564:	44ba      	add	sl, r7
		offset += read;
   2b566:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b56a:	d9b5      	bls.n	2b4d8 <att_chan_read+0x68>
   2b56c:	42a7      	cmp	r7, r4
   2b56e:	d096      	beq.n	2b49e <att_chan_read+0x2e>
   2b570:	e7b2      	b.n	2b4d8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b572:	4639      	mov	r1, r7
   2b574:	4628      	mov	r0, r5
   2b576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b57a:	4798      	blx	r3
   2b57c:	2800      	cmp	r0, #0
   2b57e:	d1e5      	bne.n	2b54c <att_chan_read+0xdc>
   2b580:	e7aa      	b.n	2b4d8 <att_chan_read+0x68>
		return 0;
   2b582:	2700      	movs	r7, #0
   2b584:	e7d7      	b.n	2b536 <att_chan_read+0xc6>

0002b586 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b586:	2200      	movs	r2, #0
	return list->head;
   2b588:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b58a:	b903      	cbnz	r3, 2b58e <sys_slist_find_and_remove.isra.0+0x8>
   2b58c:	4770      	bx	lr
   2b58e:	428b      	cmp	r3, r1
   2b590:	d10f      	bne.n	2b5b2 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2b592:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b594:	b93a      	cbnz	r2, 2b5a6 <sys_slist_find_and_remove.isra.0+0x20>
   2b596:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2b598:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b59a:	4291      	cmp	r1, r2
   2b59c:	d100      	bne.n	2b5a0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2b59e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2b5a0:	2300      	movs	r3, #0
   2b5a2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b5a4:	4770      	bx	lr
	parent->next = child;
   2b5a6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b5a8:	6843      	ldr	r3, [r0, #4]
   2b5aa:	4299      	cmp	r1, r3
	list->tail = node;
   2b5ac:	bf08      	it	eq
   2b5ae:	6042      	streq	r2, [r0, #4]
}
   2b5b0:	e7f6      	b.n	2b5a0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2b5b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b5b4:	681b      	ldr	r3, [r3, #0]
   2b5b6:	e7e8      	b.n	2b58a <sys_slist_find_and_remove.isra.0+0x4>

0002b5b8 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2b5b8:	2006      	movs	r0, #6
   2b5ba:	4770      	bx	lr

0002b5bc <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b5bc:	2301      	movs	r3, #1
{
   2b5be:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b5c0:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b5c4:	e8d0 3fef 	ldaex	r3, [r0]
   2b5c8:	ea43 0201 	orr.w	r2, r3, r1
   2b5cc:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2b5d0:	2c00      	cmp	r4, #0
   2b5d2:	d1f7      	bne.n	2b5c4 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2b5d4:	4219      	tst	r1, r3
}
   2b5d6:	bf14      	ite	ne
   2b5d8:	2001      	movne	r0, #1
   2b5da:	2000      	moveq	r0, #0
   2b5dc:	bd10      	pop	{r4, pc}

0002b5de <chan_req_send>:
{
   2b5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5e0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b5e2:	6888      	ldr	r0, [r1, #8]
   2b5e4:	f7ff fdc5 	bl	2b172 <net_buf_frags_len>
   2b5e8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2b5ea:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b5ec:	4283      	cmp	r3, r0
   2b5ee:	d30d      	bcc.n	2b60c <chan_req_send+0x2e>
	req->buf = NULL;
   2b5f0:	2600      	movs	r6, #0
	chan->req = req;
   2b5f2:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2b5f6:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2b5f8:	4628      	mov	r0, r5
	req->buf = NULL;
   2b5fa:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2b5fc:	4639      	mov	r1, r7
   2b5fe:	f7e6 fc13 	bl	11e28 <chan_send>
	if (err) {
   2b602:	b110      	cbz	r0, 2b60a <chan_req_send+0x2c>
		req->buf = buf;
   2b604:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2b606:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b60c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b610:	e7fb      	b.n	2b60a <chan_req_send+0x2c>

0002b612 <process_queue>:
{
   2b612:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2b614:	2200      	movs	r2, #0
{
   2b616:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2b618:	2300      	movs	r3, #0
   2b61a:	4608      	mov	r0, r1
{
   2b61c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2b61e:	f002 fc03 	bl	2de28 <net_buf_get>
	if (buf) {
   2b622:	4605      	mov	r5, r0
   2b624:	b158      	cbz	r0, 2b63e <process_queue+0x2c>
	return chan_send(chan, buf);
   2b626:	4601      	mov	r1, r0
   2b628:	4620      	mov	r0, r4
   2b62a:	f7e6 fbfd 	bl	11e28 <chan_send>
		if (err) {
   2b62e:	4604      	mov	r4, r0
   2b630:	b118      	cbz	r0, 2b63a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2b632:	4629      	mov	r1, r5
   2b634:	4630      	mov	r0, r6
   2b636:	f003 fee3 	bl	2f400 <k_queue_prepend>
}
   2b63a:	4620      	mov	r0, r4
   2b63c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b63e:	f06f 0401 	mvn.w	r4, #1
   2b642:	e7fa      	b.n	2b63a <process_queue+0x28>

0002b644 <bt_att_chan_send_rsp>:
{
   2b644:	b538      	push	{r3, r4, r5, lr}
   2b646:	4604      	mov	r4, r0
   2b648:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2b64a:	f7e6 fbed 	bl	11e28 <chan_send>
	if (err) {
   2b64e:	b130      	cbz	r0, 2b65e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2b650:	4629      	mov	r1, r5
   2b652:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2b656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2b65a:	f7f4 bd1f 	b.w	2009c <net_buf_put>
}
   2b65e:	bd38      	pop	{r3, r4, r5, pc}

0002b660 <read_cb>:
{
   2b660:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2b662:	2300      	movs	r3, #0
{
   2b664:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2b666:	6816      	ldr	r6, [r2, #0]
{
   2b668:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2b66a:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b66c:	4629      	mov	r1, r5
	data->err = 0x00;
   2b66e:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b670:	2295      	movs	r2, #149	; 0x95
   2b672:	f000 fc8d 	bl	2bf90 <bt_gatt_check_perm>
   2b676:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2b678:	b980      	cbnz	r0, 2b69c <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b67a:	e9cd 0000 	strd	r0, r0, [sp]
   2b67e:	4629      	mov	r1, r5
   2b680:	4630      	mov	r0, r6
   2b682:	88a3      	ldrh	r3, [r4, #4]
   2b684:	68a2      	ldr	r2, [r4, #8]
   2b686:	f7ff fef3 	bl	2b470 <att_chan_read>
	if (ret < 0) {
   2b68a:	2800      	cmp	r0, #0
   2b68c:	da09      	bge.n	2b6a2 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2b68e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2b692:	bf32      	itee	cc
   2b694:	200e      	movcc	r0, #14
		return -err;
   2b696:	4240      	negcs	r0, r0
   2b698:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2b69a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2b69c:	2000      	movs	r0, #0
}
   2b69e:	b002      	add	sp, #8
   2b6a0:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2b6a2:	2001      	movs	r0, #1
   2b6a4:	e7fb      	b.n	2b69e <read_cb+0x3e>

0002b6a6 <read_vl_cb>:
{
   2b6a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2b6aa:	2300      	movs	r3, #0
{
   2b6ac:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2b6ae:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b6b2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2b6b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b6b8:	4631      	mov	r1, r6
	data->err = 0x00;
   2b6ba:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b6bc:	2295      	movs	r2, #149	; 0x95
   2b6be:	f000 fc67 	bl	2bf90 <bt_gatt_check_perm>
   2b6c2:	4605      	mov	r5, r0
   2b6c4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2b6c6:	b9e0      	cbnz	r0, 2b702 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2b6c8:	68a0      	ldr	r0, [r4, #8]
   2b6ca:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2b6ce:	8a02      	ldrh	r2, [r0, #16]
   2b6d0:	1a9b      	subs	r3, r3, r2
   2b6d2:	2b01      	cmp	r3, #1
   2b6d4:	dd15      	ble.n	2b702 <read_vl_cb+0x5c>
   2b6d6:	2102      	movs	r1, #2
   2b6d8:	300c      	adds	r0, #12
   2b6da:	f7f4 fe39 	bl	20350 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b6de:	e9cd 5500 	strd	r5, r5, [sp]
   2b6e2:	4607      	mov	r7, r0
   2b6e4:	88a3      	ldrh	r3, [r4, #4]
   2b6e6:	4631      	mov	r1, r6
   2b6e8:	4640      	mov	r0, r8
   2b6ea:	68a2      	ldr	r2, [r4, #8]
   2b6ec:	f7ff fec0 	bl	2b470 <att_chan_read>
	if (read < 0) {
   2b6f0:	1e03      	subs	r3, r0, #0
   2b6f2:	da0a      	bge.n	2b70a <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2b6f4:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2b6f8:	bf32      	itee	cc
   2b6fa:	230e      	movcc	r3, #14
		return -err;
   2b6fc:	425b      	negcs	r3, r3
   2b6fe:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2b700:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2b702:	2000      	movs	r0, #0
}
   2b704:	b002      	add	sp, #8
   2b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2b70a:	2001      	movs	r0, #1
	rsp->len = read;
   2b70c:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2b70e:	e7f9      	b.n	2b704 <read_vl_cb+0x5e>

0002b710 <bt_att_sent>:
{
   2b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b712:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2b714:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b718:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b71a:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2b71e:	e8d3 1fef 	ldaex	r1, [r3]
   2b722:	f021 0110 	bic.w	r1, r1, #16
   2b726:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2b72a:	2a00      	cmp	r2, #0
   2b72c:	d1f7      	bne.n	2b71e <bt_att_sent+0xe>
	if (!att) {
   2b72e:	b30c      	cbz	r4, 2b774 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b730:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2b734:	b98b      	cbnz	r3, 2b75a <bt_att_sent+0x4a>
   2b736:	6863      	ldr	r3, [r4, #4]
   2b738:	b17b      	cbz	r3, 2b75a <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b73a:	1d20      	adds	r0, r4, #4
   2b73c:	f7ff fd0f 	bl	2b15e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b740:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b742:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b744:	4638      	mov	r0, r7
   2b746:	f7ff ff4a 	bl	2b5de <chan_req_send>
   2b74a:	2800      	cmp	r0, #0
   2b74c:	da12      	bge.n	2b774 <bt_att_sent+0x64>
	return list->head;
   2b74e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2b750:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b752:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b754:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b756:	b903      	cbnz	r3, 2b75a <bt_att_sent+0x4a>
	list->tail = node;
   2b758:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2b75a:	4638      	mov	r0, r7
   2b75c:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2b760:	f7ff ff57 	bl	2b612 <process_queue>
	if (!err) {
   2b764:	b130      	cbz	r0, 2b774 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2b766:	4638      	mov	r0, r7
   2b768:	f104 010c 	add.w	r1, r4, #12
}
   2b76c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2b770:	f7ff bf4f 	b.w	2b612 <process_queue>
}
   2b774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b776 <att_req_send_process>:
{
   2b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2b77a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2b77c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b77e:	2c00      	cmp	r4, #0
   2b780:	d03b      	beq.n	2b7fa <att_req_send_process+0x84>
	return node->next;
   2b782:	f854 69f0 	ldr.w	r6, [r4], #-240
   2b786:	b106      	cbz	r6, 2b78a <att_req_send_process+0x14>
   2b788:	3ef0      	subs	r6, #240	; 0xf0
{
   2b78a:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2b78c:	f108 0704 	add.w	r7, r8, #4
{
   2b790:	461d      	mov	r5, r3
   2b792:	e013      	b.n	2b7bc <att_req_send_process+0x46>
		if (!req && prev &&
   2b794:	b1c3      	cbz	r3, 2b7c8 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2b796:	2103      	movs	r1, #3
   2b798:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2b79c:	f7ff fd03 	bl	2b1a6 <atomic_test_bit>
   2b7a0:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2b7a2:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2b7a6:	f7ff fcfe 	bl	2b1a6 <atomic_test_bit>
		if (!req && prev &&
   2b7aa:	4282      	cmp	r2, r0
   2b7ac:	d10c      	bne.n	2b7c8 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b7ae:	b326      	cbz	r6, 2b7fa <att_req_send_process+0x84>
   2b7b0:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2b7b4:	b102      	cbz	r2, 2b7b8 <att_req_send_process+0x42>
   2b7b6:	3af0      	subs	r2, #240	; 0xf0
{
   2b7b8:	4634      	mov	r4, r6
   2b7ba:	4616      	mov	r6, r2
		if (chan->req) {
   2b7bc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2b7c0:	2a00      	cmp	r2, #0
   2b7c2:	d1f4      	bne.n	2b7ae <att_req_send_process+0x38>
		if (!req && prev &&
   2b7c4:	2d00      	cmp	r5, #0
   2b7c6:	d0e5      	beq.n	2b794 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2b7c8:	4638      	mov	r0, r7
   2b7ca:	f7ff fcc8 	bl	2b15e <sys_slist_get>
	if (node) {
   2b7ce:	4605      	mov	r5, r0
   2b7d0:	b908      	cbnz	r0, 2b7d6 <att_req_send_process+0x60>
   2b7d2:	4623      	mov	r3, r4
   2b7d4:	e7eb      	b.n	2b7ae <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2b7d6:	4601      	mov	r1, r0
   2b7d8:	4620      	mov	r0, r4
   2b7da:	f7e6 fb8f 	bl	11efc <bt_att_chan_req_send>
   2b7de:	2800      	cmp	r0, #0
   2b7e0:	da0b      	bge.n	2b7fa <att_req_send_process+0x84>
	return list->head;
   2b7e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2b7e6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b7e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2b7ec:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b7f0:	2b00      	cmp	r3, #0
   2b7f2:	d1ee      	bne.n	2b7d2 <att_req_send_process+0x5c>
	list->tail = node;
   2b7f4:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2b7f8:	e7eb      	b.n	2b7d2 <att_req_send_process+0x5c>
}
   2b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b7fe <bt_att_status>:
{
   2b7fe:	b538      	push	{r3, r4, r5, lr}
   2b800:	4605      	mov	r5, r0
   2b802:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b804:	2100      	movs	r1, #0
   2b806:	f7ff fcce 	bl	2b1a6 <atomic_test_bit>
   2b80a:	b1c0      	cbz	r0, 2b83e <bt_att_status+0x40>
	if (!chan->att) {
   2b80c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2b810:	b1a8      	cbz	r0, 2b83e <bt_att_status+0x40>
	if (chan->req) {
   2b812:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2b816:	b993      	cbnz	r3, 2b83e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2b818:	3004      	adds	r0, #4
   2b81a:	f7ff fca0 	bl	2b15e <sys_slist_get>
	if (!node) {
   2b81e:	4604      	mov	r4, r0
   2b820:	b168      	cbz	r0, 2b83e <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b822:	4601      	mov	r1, r0
   2b824:	1f28      	subs	r0, r5, #4
   2b826:	f7e6 fb69 	bl	11efc <bt_att_chan_req_send>
   2b82a:	2800      	cmp	r0, #0
   2b82c:	da07      	bge.n	2b83e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2b82e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2b832:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2b834:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b836:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b838:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b83a:	b902      	cbnz	r2, 2b83e <bt_att_status+0x40>
	list->tail = node;
   2b83c:	609c      	str	r4, [r3, #8]
}
   2b83e:	bd38      	pop	{r3, r4, r5, pc}

0002b840 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2b840:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2b842:	6883      	ldr	r3, [r0, #8]
   2b844:	699b      	ldr	r3, [r3, #24]
   2b846:	b10b      	cbz	r3, 2b84c <att_sent+0xc>
		chan->ops->sent(chan);
   2b848:	3004      	adds	r0, #4
   2b84a:	4718      	bx	r3
}
   2b84c:	4770      	bx	lr

0002b84e <att_tx_complete>:
{
   2b84e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b852:	4606      	mov	r6, r0
   2b854:	460d      	mov	r5, r1
	if (!err) {
   2b856:	4614      	mov	r4, r2
   2b858:	b122      	cbz	r2, 2b864 <att_tx_complete+0x16>
}
   2b85a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2b85e:	4608      	mov	r0, r1
   2b860:	f7e6 ba20 	b.w	11ca4 <tx_meta_data_free>
		att_sent(conn, user_data);
   2b864:	f7ff ffec 	bl	2b840 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2b868:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2b86a:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2b86c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2b870:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2b874:	f7e6 fa16 	bl	11ca4 <tx_meta_data_free>
	if (!err && func) {
   2b878:	b92f      	cbnz	r7, 2b886 <att_tx_complete+0x38>
}
   2b87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2b87e:	4649      	mov	r1, r9
   2b880:	4630      	mov	r0, r6
   2b882:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2b884:	3401      	adds	r4, #1
   2b886:	b2a3      	uxth	r3, r4
   2b888:	4543      	cmp	r3, r8
   2b88a:	d3f8      	bcc.n	2b87e <att_tx_complete+0x30>
   2b88c:	e7f5      	b.n	2b87a <att_tx_complete+0x2c>

0002b88e <att_req_sent>:
{
   2b88e:	b510      	push	{r4, lr}
   2b890:	460c      	mov	r4, r1
	if (!err) {
   2b892:	b90a      	cbnz	r2, 2b898 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2b894:	f7ff ffd4 	bl	2b840 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2b898:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2b89a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2b89e:	b12b      	cbz	r3, 2b8ac <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2b8a0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b8a4:	2300      	movs	r3, #0
   2b8a6:	30c0      	adds	r0, #192	; 0xc0
   2b8a8:	f7fa fee6 	bl	26678 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2b8ac:	4620      	mov	r0, r4
}
   2b8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2b8b2:	f7e6 b9f7 	b.w	11ca4 <tx_meta_data_free>

0002b8b6 <att_cfm_sent>:
{
   2b8b6:	b510      	push	{r4, lr}
   2b8b8:	460c      	mov	r4, r1
	if (!err) {
   2b8ba:	b90a      	cbnz	r2, 2b8c0 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2b8bc:	f7ff ffc0 	bl	2b840 <att_sent>
   2b8c0:	6823      	ldr	r3, [r4, #0]
   2b8c2:	3398      	adds	r3, #152	; 0x98
   2b8c4:	e8d3 1fef 	ldaex	r1, [r3]
   2b8c8:	f021 0102 	bic.w	r1, r1, #2
   2b8cc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2b8d0:	2a00      	cmp	r2, #0
   2b8d2:	d1f7      	bne.n	2b8c4 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2b8d4:	4620      	mov	r0, r4
}
   2b8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2b8da:	f7e6 b9e3 	b.w	11ca4 <tx_meta_data_free>

0002b8de <att_rsp_sent>:
{
   2b8de:	b510      	push	{r4, lr}
   2b8e0:	460c      	mov	r4, r1
	if (!err) {
   2b8e2:	b90a      	cbnz	r2, 2b8e8 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2b8e4:	f7ff ffac 	bl	2b840 <att_sent>
   2b8e8:	6823      	ldr	r3, [r4, #0]
   2b8ea:	3398      	adds	r3, #152	; 0x98
   2b8ec:	e8d3 1fef 	ldaex	r1, [r3]
   2b8f0:	f021 0101 	bic.w	r1, r1, #1
   2b8f4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2b8f8:	2a00      	cmp	r2, #0
   2b8fa:	d1f7      	bne.n	2b8ec <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2b8fc:	4620      	mov	r0, r4
}
   2b8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2b902:	f7e6 b9cf 	b.w	11ca4 <tx_meta_data_free>

0002b906 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2b906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b90a:	4688      	mov	r8, r1
   2b90c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2b90e:	2101      	movs	r1, #1
   2b910:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2b912:	4605      	mov	r5, r0
   2b914:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2b916:	f7e6 fbef 	bl	120f8 <bt_att_chan_create_pdu>
	if (!buf) {
   2b91a:	4604      	mov	r4, r0
   2b91c:	b170      	cbz	r0, 2b93c <send_err_rsp.part.0+0x36>
   2b91e:	2104      	movs	r1, #4
   2b920:	300c      	adds	r0, #12
   2b922:	f7f4 fd15 	bl	20350 <net_buf_simple_add>
	rsp->request = req;
   2b926:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2b92a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2b92e:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2b930:	4621      	mov	r1, r4
   2b932:	4628      	mov	r0, r5
}
   2b934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2b938:	f7ff be84 	b.w	2b644 <bt_att_chan_send_rsp>
}
   2b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b940 <att_write_req>:
{
   2b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b942:	460c      	mov	r4, r1
   2b944:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b946:	f101 000c 	add.w	r0, r1, #12
   2b94a:	f002 fa9f 	bl	2de8c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2b94e:	8a22      	ldrh	r2, [r4, #16]
   2b950:	4603      	mov	r3, r0
   2b952:	9201      	str	r2, [sp, #4]
   2b954:	68e2      	ldr	r2, [r4, #12]
   2b956:	2112      	movs	r1, #18
   2b958:	9200      	str	r2, [sp, #0]
   2b95a:	4628      	mov	r0, r5
   2b95c:	2213      	movs	r2, #19
   2b95e:	f7e6 fca1 	bl	122a4 <att_write_rsp.constprop.0>
}
   2b962:	b003      	add	sp, #12
   2b964:	bd30      	pop	{r4, r5, pc}

0002b966 <att_write_cmd>:
{
   2b966:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b968:	460c      	mov	r4, r1
   2b96a:	4605      	mov	r5, r0
   2b96c:	f101 000c 	add.w	r0, r1, #12
   2b970:	f002 fa8c 	bl	2de8c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2b974:	8a22      	ldrh	r2, [r4, #16]
   2b976:	4603      	mov	r3, r0
   2b978:	9201      	str	r2, [sp, #4]
   2b97a:	68e2      	ldr	r2, [r4, #12]
   2b97c:	4628      	mov	r0, r5
   2b97e:	9200      	str	r2, [sp, #0]
   2b980:	2200      	movs	r2, #0
   2b982:	4611      	mov	r1, r2
   2b984:	f7e6 fc8e 	bl	122a4 <att_write_rsp.constprop.0>
}
   2b988:	b003      	add	sp, #12
   2b98a:	bd30      	pop	{r4, r5, pc}

0002b98c <bt_att_create_pdu>:
{
   2b98c:	b538      	push	{r3, r4, r5, lr}
   2b98e:	460d      	mov	r5, r1
   2b990:	4614      	mov	r4, r2
	att = att_get(conn);
   2b992:	f7e6 fa17 	bl	11dc4 <att_get>
	if (!att) {
   2b996:	b158      	cbz	r0, 2b9b0 <bt_att_create_pdu+0x24>
	return list->head;
   2b998:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b99a:	b14b      	cbz	r3, 2b9b0 <bt_att_create_pdu+0x24>
   2b99c:	4618      	mov	r0, r3
	return node->next;
   2b99e:	f850 39f0 	ldr.w	r3, [r0], #-240
   2b9a2:	b103      	cbz	r3, 2b9a6 <bt_att_create_pdu+0x1a>
   2b9a4:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2b9a6:	1c62      	adds	r2, r4, #1
   2b9a8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2b9aa:	428a      	cmp	r2, r1
   2b9ac:	d90b      	bls.n	2b9c6 <bt_att_create_pdu+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b9ae:	b90b      	cbnz	r3, 2b9b4 <bt_att_create_pdu+0x28>
}
   2b9b0:	2000      	movs	r0, #0
   2b9b2:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b9b4:	4618      	mov	r0, r3
   2b9b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2b9ba:	2b00      	cmp	r3, #0
   2b9bc:	d0f4      	beq.n	2b9a8 <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2b9be:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b9c0:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2b9c2:	428a      	cmp	r2, r1
   2b9c4:	d8f6      	bhi.n	2b9b4 <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   2b9c6:	4622      	mov	r2, r4
   2b9c8:	4629      	mov	r1, r5
}
   2b9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   2b9ce:	f7e6 bb93 	b.w	120f8 <bt_att_chan_create_pdu>

0002b9d2 <att_read_blob_req>:
{
   2b9d2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2b9d4:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b9d6:	210c      	movs	r1, #12
   2b9d8:	8813      	ldrh	r3, [r2, #0]
   2b9da:	8852      	ldrh	r2, [r2, #2]
   2b9dc:	9200      	str	r2, [sp, #0]
   2b9de:	220d      	movs	r2, #13
   2b9e0:	f7e6 fdea 	bl	125b8 <att_read_rsp>
}
   2b9e4:	b003      	add	sp, #12
   2b9e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9ea <att_read_req>:
{
   2b9ea:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b9ec:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2b9ee:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b9f0:	210a      	movs	r1, #10
   2b9f2:	881b      	ldrh	r3, [r3, #0]
   2b9f4:	9200      	str	r2, [sp, #0]
   2b9f6:	220b      	movs	r2, #11
   2b9f8:	f7e6 fdde 	bl	125b8 <att_read_rsp>
}
   2b9fc:	b003      	add	sp, #12
   2b9fe:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba02 <att_mtu_req>:
{
   2ba02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba04:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2ba06:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2ba0a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2ba0c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2ba0e:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2ba10:	f7ff fbc9 	bl	2b1a6 <atomic_test_bit>
   2ba14:	4604      	mov	r4, r0
   2ba16:	b9f0      	cbnz	r0, 2ba56 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2ba18:	68db      	ldr	r3, [r3, #12]
   2ba1a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2ba1c:	2e16      	cmp	r6, #22
   2ba1e:	d91c      	bls.n	2ba5a <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2ba20:	4638      	mov	r0, r7
   2ba22:	2202      	movs	r2, #2
   2ba24:	f7ff ffb2 	bl	2b98c <bt_att_create_pdu>
	if (!pdu) {
   2ba28:	4607      	mov	r7, r0
   2ba2a:	b1c0      	cbz	r0, 2ba5e <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2ba2c:	2102      	movs	r1, #2
   2ba2e:	300c      	adds	r0, #12
   2ba30:	f7f4 fc8e 	bl	20350 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2ba34:	2345      	movs	r3, #69	; 0x45
	bt_att_chan_send_rsp(chan, pdu);
   2ba36:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2ba38:	7003      	strb	r3, [r0, #0]
   2ba3a:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2ba3c:	4628      	mov	r0, r5
   2ba3e:	f7ff fe01 	bl	2b644 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2ba42:	2e45      	cmp	r6, #69	; 0x45
   2ba44:	bf28      	it	cs
   2ba46:	2645      	movcs	r6, #69	; 0x45
	att_chan_mtu_updated(chan);
   2ba48:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2ba4a:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2ba4c:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2ba4e:	f7ff fccc 	bl	2b3ea <att_chan_mtu_updated>
	return 0;
   2ba52:	4620      	mov	r0, r4
}
   2ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2ba56:	2006      	movs	r0, #6
   2ba58:	e7fc      	b.n	2ba54 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2ba5a:	2004      	movs	r0, #4
   2ba5c:	e7fa      	b.n	2ba54 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2ba5e:	200e      	movs	r0, #14
   2ba60:	e7f8      	b.n	2ba54 <att_mtu_req+0x52>

0002ba62 <bt_att_get_mtu>:
{
   2ba62:	b508      	push	{r3, lr}
	att = att_get(conn);
   2ba64:	f7e6 f9ae 	bl	11dc4 <att_get>
	if (!att) {
   2ba68:	b138      	cbz	r0, 2ba7a <bt_att_get_mtu+0x18>
	return list->head;
   2ba6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba6c:	b128      	cbz	r0, 2ba7a <bt_att_get_mtu+0x18>
	return node->next;
   2ba6e:	6803      	ldr	r3, [r0, #0]
   2ba70:	b103      	cbz	r3, 2ba74 <bt_att_get_mtu+0x12>
   2ba72:	3bf0      	subs	r3, #240	; 0xf0
		if (chan->chan.tx.mtu > mtu) {
   2ba74:	f830 0cc6 	ldrh.w	r0, [r0, #-198]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba78:	b903      	cbnz	r3, 2ba7c <bt_att_get_mtu+0x1a>
}
   2ba7a:	bd08      	pop	{r3, pc}
   2ba7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2ba80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   2ba82:	4298      	cmp	r0, r3
   2ba84:	bf38      	it	cc
   2ba86:	4618      	movcc	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba88:	2a00      	cmp	r2, #0
   2ba8a:	d0f6      	beq.n	2ba7a <bt_att_get_mtu+0x18>
   2ba8c:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
   2ba90:	e7f4      	b.n	2ba7c <bt_att_get_mtu+0x1a>

0002ba92 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2ba92:	8a0a      	ldrh	r2, [r1, #16]
   2ba94:	2300      	movs	r3, #0
   2ba96:	68c9      	ldr	r1, [r1, #12]
   2ba98:	f7e6 bf36 	b.w	12908 <att_handle_rsp>

0002ba9c <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2ba9c:	2001      	movs	r0, #1
   2ba9e:	4770      	bx	lr

0002baa0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2baa0:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2baa2:	f7e6 f98f 	bl	11dc4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2baa6:	b178      	cbz	r0, 2bac8 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2baa8:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2baaa:	b16b      	cbz	r3, 2bac8 <bt_att_clear_out_of_sync_sent+0x28>
   2baac:	3bf0      	subs	r3, #240	; 0xf0
   2baae:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2bab2:	e8d2 0fef 	ldaex	r0, [r2]
   2bab6:	f020 0020 	bic.w	r0, r0, #32
   2baba:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2babe:	2900      	cmp	r1, #0
   2bac0:	d1f7      	bne.n	2bab2 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2bac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2bac6:	e7f0      	b.n	2baaa <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2bac8:	bd08      	pop	{r3, pc}

0002baca <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2baca:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2bacc:	2104      	movs	r1, #4
   2bace:	f7ff fb3c 	bl	2b14a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2bad2:	b128      	cbz	r0, 2bae0 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2bad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2bad8:	2105      	movs	r1, #5
   2bada:	3094      	adds	r0, #148	; 0x94
   2badc:	f7ff bb63 	b.w	2b1a6 <atomic_test_bit>
}
   2bae0:	bd08      	pop	{r3, pc}

0002bae2 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2bae2:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2bae4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2bae8:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2baea:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2baec:	8082      	strh	r2, [r0, #4]
}
   2baee:	4770      	bx	lr

0002baf0 <found_attr>:
	*found = attr;
   2baf0:	6010      	str	r0, [r2, #0]
}
   2baf2:	2000      	movs	r0, #0
   2baf4:	4770      	bx	lr

0002baf6 <gatt_ccc_changed>:
{
   2baf6:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2baf8:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2bafa:	895a      	ldrh	r2, [r3, #10]
   2bafc:	428a      	cmp	r2, r1
   2bafe:	d003      	beq.n	2bb08 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2bb00:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2bb02:	68db      	ldr	r3, [r3, #12]
   2bb04:	b103      	cbz	r3, 2bb08 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2bb06:	4718      	bx	r3
}
   2bb08:	4770      	bx	lr

0002bb0a <gatt_indicate_rsp>:
{
   2bb0a:	b510      	push	{r4, lr}
   2bb0c:	9c02      	ldr	r4, [sp, #8]
   2bb0e:	460a      	mov	r2, r1
	if (params->func) {
   2bb10:	68a3      	ldr	r3, [r4, #8]
   2bb12:	b10b      	cbz	r3, 2bb18 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2bb14:	4621      	mov	r1, r4
   2bb16:	4798      	blx	r3
	params->_ref--;
   2bb18:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2bb1a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2bb1c:	3b01      	subs	r3, #1
   2bb1e:	b2db      	uxtb	r3, r3
   2bb20:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2bb22:	b122      	cbz	r2, 2bb2e <gatt_indicate_rsp+0x24>
   2bb24:	b91b      	cbnz	r3, 2bb2e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2bb26:	4620      	mov	r0, r4
}
   2bb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2bb2c:	4710      	bx	r2
}
   2bb2e:	bd10      	pop	{r4, pc}

0002bb30 <match_uuid>:
	data->attr = attr;
   2bb30:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2bb32:	8091      	strh	r1, [r2, #4]
}
   2bb34:	2000      	movs	r0, #0
   2bb36:	4770      	bx	lr

0002bb38 <ccc_set_cb>:
}
   2bb38:	2000      	movs	r0, #0
   2bb3a:	4770      	bx	lr

0002bb3c <gen_hash_m>:
{
   2bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2bb3e:	6807      	ldr	r7, [r0, #0]
{
   2bb40:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2bb42:	783d      	ldrb	r5, [r7, #0]
{
   2bb44:	4614      	mov	r4, r2
   2bb46:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2bb48:	b9dd      	cbnz	r5, 2bb82 <gen_hash_m+0x46>
	switch (u16->val) {
   2bb4a:	887b      	ldrh	r3, [r7, #2]
   2bb4c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2bb50:	d004      	beq.n	2bb5c <gen_hash_m+0x20>
   2bb52:	d810      	bhi.n	2bb76 <gen_hash_m+0x3a>
   2bb54:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2bb58:	2b03      	cmp	r3, #3
   2bb5a:	d812      	bhi.n	2bb82 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2bb5c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bb60:	2202      	movs	r2, #2
   2bb62:	4620      	mov	r0, r4
   2bb64:	f10d 010a 	add.w	r1, sp, #10
   2bb68:	f7fe f876 	bl	29c58 <tc_cmac_update>
   2bb6c:	b968      	cbnz	r0, 2bb8a <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2bb6e:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2bb72:	65a2      	str	r2, [r4, #88]	; 0x58
   2bb74:	e006      	b.n	2bb84 <gen_hash_m+0x48>
	switch (u16->val) {
   2bb76:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2bb7a:	33ff      	adds	r3, #255	; 0xff
   2bb7c:	b29b      	uxth	r3, r3
   2bb7e:	2b04      	cmp	r3, #4
   2bb80:	d91e      	bls.n	2bbc0 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2bb82:	2501      	movs	r5, #1
}
   2bb84:	4628      	mov	r0, r5
   2bb86:	b009      	add	sp, #36	; 0x24
   2bb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2bb8a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bb8c:	2202      	movs	r2, #2
   2bb8e:	4620      	mov	r0, r4
   2bb90:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2bb94:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bb98:	f7fe f85e 	bl	29c58 <tc_cmac_update>
   2bb9c:	2800      	cmp	r0, #0
   2bb9e:	d0e6      	beq.n	2bb6e <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2bba0:	2000      	movs	r0, #0
   2bba2:	9000      	str	r0, [sp, #0]
   2bba4:	aa03      	add	r2, sp, #12
   2bba6:	2313      	movs	r3, #19
   2bba8:	4631      	mov	r1, r6
   2bbaa:	6877      	ldr	r7, [r6, #4]
   2bbac:	47b8      	blx	r7
		if (len < 0) {
   2bbae:	1e02      	subs	r2, r0, #0
   2bbb0:	dbdf      	blt.n	2bb72 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2bbb2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bbb4:	4620      	mov	r0, r4
   2bbb6:	f7fe f84f 	bl	29c58 <tc_cmac_update>
   2bbba:	2800      	cmp	r0, #0
   2bbbc:	d1e1      	bne.n	2bb82 <gen_hash_m+0x46>
   2bbbe:	e7d6      	b.n	2bb6e <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2bbc0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bbc4:	2202      	movs	r2, #2
   2bbc6:	4620      	mov	r0, r4
   2bbc8:	f10d 010a 	add.w	r1, sp, #10
   2bbcc:	f7fe f844 	bl	29c58 <tc_cmac_update>
   2bbd0:	2800      	cmp	r0, #0
   2bbd2:	d0cc      	beq.n	2bb6e <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2bbd4:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bbd6:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2bbd8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bbdc:	f10d 010a 	add.w	r1, sp, #10
   2bbe0:	e7e8      	b.n	2bbb4 <gen_hash_m+0x78>

0002bbe2 <bt_addr_le_eq>:
   2bbe2:	2207      	movs	r2, #7
{
   2bbe4:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2bbe6:	f7fe fc71 	bl	2a4cc <memcmp>
}
   2bbea:	fab0 f080 	clz	r0, r0
   2bbee:	0940      	lsrs	r0, r0, #5
   2bbf0:	bd08      	pop	{r3, pc}

0002bbf2 <ccc_find_cfg>:
{
   2bbf2:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2bbf4:	7803      	ldrb	r3, [r0, #0]
{
   2bbf6:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2bbf8:	4293      	cmp	r3, r2
   2bbfa:	d105      	bne.n	2bc08 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2bbfc:	3001      	adds	r0, #1
   2bbfe:	f7ff fff0 	bl	2bbe2 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2bc02:	b108      	cbz	r0, 2bc08 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2bc04:	4620      	mov	r0, r4
}
   2bc06:	bd10      	pop	{r4, pc}
	return NULL;
   2bc08:	2000      	movs	r0, #0
   2bc0a:	e7fc      	b.n	2bc06 <ccc_find_cfg+0x14>

0002bc0c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bc0c:	e8d0 0faf 	lda	r0, [r0]
}
   2bc10:	4770      	bx	lr

0002bc12 <atomic_or>:
{
   2bc12:	4603      	mov	r3, r0
   2bc14:	b510      	push	{r4, lr}
}
   2bc16:	e8d3 0fef 	ldaex	r0, [r3]
   2bc1a:	ea40 0201 	orr.w	r2, r0, r1
   2bc1e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2bc22:	2c00      	cmp	r4, #0
   2bc24:	d1f7      	bne.n	2bc16 <atomic_or+0x4>
   2bc26:	bd10      	pop	{r4, pc}

0002bc28 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2bc28:	2207      	movs	r2, #7
   2bc2a:	f7fe bc76 	b.w	2a51a <memcpy>

0002bc2e <cf_write>:
{
   2bc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bc32:	461f      	mov	r7, r3
   2bc34:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2bc38:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   2bc3a:	2b01      	cmp	r3, #1
{
   2bc3c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   2bc3e:	d82e      	bhi.n	2bc9e <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   2bc40:	443b      	add	r3, r7
   2bc42:	2b01      	cmp	r3, #1
   2bc44:	463d      	mov	r5, r7
   2bc46:	dc2d      	bgt.n	2bca4 <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   2bc48:	f7e6 ff9c 	bl	12b84 <find_cf_cfg>
	if (!cfg) {
   2bc4c:	4604      	mov	r4, r0
   2bc4e:	b918      	cbnz	r0, 2bc58 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   2bc50:	f7e6 ff98 	bl	12b84 <find_cf_cfg>
	if (!cfg) {
   2bc54:	4604      	mov	r4, r0
   2bc56:	b340      	cbz	r0, 2bcaa <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2bc58:	b197      	cbz	r7, 2bc80 <cf_write+0x52>
		    !(value[i / 8] & BIT(i % 8))) {
   2bc5a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2bc5c:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   2bc5e:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2bc62:	fa21 f003 	lsr.w	r0, r1, r3
   2bc66:	07c7      	lsls	r7, r0, #31
   2bc68:	d503      	bpl.n	2bc72 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   2bc6a:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2bc6e:	07c0      	lsls	r0, r0, #31
   2bc70:	d51e      	bpl.n	2bcb0 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2bc72:	3301      	adds	r3, #1
   2bc74:	2b03      	cmp	r3, #3
   2bc76:	d1f4      	bne.n	2bc62 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2bc78:	f002 0207 	and.w	r2, r2, #7
   2bc7c:	4311      	orrs	r1, r2
   2bc7e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2bc80:	f106 0190 	add.w	r1, r6, #144	; 0x90
   2bc84:	1c60      	adds	r0, r4, #1
   2bc86:	f7ff ffcf 	bl	2bc28 <bt_addr_le_copy>
	cfg->id = conn->id;
   2bc8a:	4620      	mov	r0, r4
   2bc8c:	7a33      	ldrb	r3, [r6, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2bc8e:	2101      	movs	r1, #1
   2bc90:	f800 3b0c 	strb.w	r3, [r0], #12
   2bc94:	f7ff ffbd 	bl	2bc12 <atomic_or>
}
   2bc98:	4628      	mov	r0, r5
   2bc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bc9e:	f06f 0506 	mvn.w	r5, #6
   2bca2:	e7f9      	b.n	2bc98 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2bca4:	f06f 050c 	mvn.w	r5, #12
   2bca8:	e7f6      	b.n	2bc98 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2bcaa:	f06f 0510 	mvn.w	r5, #16
   2bcae:	e7f3      	b.n	2bc98 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2bcb0:	f06f 0512 	mvn.w	r5, #18
   2bcb4:	e7f0      	b.n	2bc98 <cf_write+0x6a>

0002bcb6 <atomic_and>:
{
   2bcb6:	4603      	mov	r3, r0
   2bcb8:	b510      	push	{r4, lr}
}
   2bcba:	e8d3 0fef 	ldaex	r0, [r3]
   2bcbe:	ea00 0201 	and.w	r2, r0, r1
   2bcc2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2bcc6:	2c00      	cmp	r4, #0
   2bcc8:	d1f7      	bne.n	2bcba <atomic_and+0x4>
   2bcca:	bd10      	pop	{r4, pc}

0002bccc <gatt_foreach_iter>:
{
   2bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   2bcce:	4299      	cmp	r1, r3
{
   2bcd0:	4604      	mov	r4, r0
   2bcd2:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   2bcd6:	460d      	mov	r5, r1
   2bcd8:	9e08      	ldr	r6, [sp, #32]
	if (handle > end_handle) {
   2bcda:	d901      	bls.n	2bce0 <gatt_foreach_iter+0x14>
		return BT_GATT_ITER_STOP;
   2bcdc:	2000      	movs	r0, #0
}
   2bcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (handle < start_handle) {
   2bce0:	4291      	cmp	r1, r2
   2bce2:	d201      	bcs.n	2bce8 <gatt_foreach_iter+0x1c>
		return BT_GATT_ITER_CONTINUE;
   2bce4:	2001      	movs	r0, #1
   2bce6:	e7fa      	b.n	2bcde <gatt_foreach_iter+0x12>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2bce8:	b960      	cbnz	r0, 2bd04 <gatt_foreach_iter+0x38>
	if (attr_data && attr_data != attr->user_data) {
   2bcea:	b98f      	cbnz	r7, 2bd10 <gatt_foreach_iter+0x44>
	*num_matches -= 1;
   2bcec:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2bcee:	4629      	mov	r1, r5
	*num_matches -= 1;
   2bcf0:	3b01      	subs	r3, #1
   2bcf2:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   2bcf4:	4620      	mov	r0, r4
   2bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bcf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2bcfa:	4798      	blx	r3
	if (!*num_matches) {
   2bcfc:	8833      	ldrh	r3, [r6, #0]
   2bcfe:	2b00      	cmp	r3, #0
   2bd00:	d1ed      	bne.n	2bcde <gatt_foreach_iter+0x12>
   2bd02:	e7eb      	b.n	2bcdc <gatt_foreach_iter+0x10>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2bd04:	6821      	ldr	r1, [r4, #0]
   2bd06:	f7fe fdf1 	bl	2a8ec <bt_uuid_cmp>
   2bd0a:	2800      	cmp	r0, #0
   2bd0c:	d0ed      	beq.n	2bcea <gatt_foreach_iter+0x1e>
   2bd0e:	e7e9      	b.n	2bce4 <gatt_foreach_iter+0x18>
	if (attr_data && attr_data != attr->user_data) {
   2bd10:	68e3      	ldr	r3, [r4, #12]
   2bd12:	42bb      	cmp	r3, r7
   2bd14:	d1e6      	bne.n	2bce4 <gatt_foreach_iter+0x18>
   2bd16:	e7e9      	b.n	2bcec <gatt_foreach_iter+0x20>

0002bd18 <z_log_msg_static_create.constprop.0>:
   2bd18:	2300      	movs	r3, #0
   2bd1a:	f7de bf1f 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002bd1e <find_next>:
static uint8_t find_next(const struct bt_gatt_attr *attr, uint16_t handle,
   2bd1e:	6010      	str	r0, [r2, #0]
   2bd20:	2000      	movs	r0, #0
   2bd22:	4770      	bx	lr

0002bd24 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2bd24:	2a02      	cmp	r2, #2
{
   2bd26:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2bd28:	d108      	bne.n	2bd3c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2bd2a:	2300      	movs	r3, #0
   2bd2c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2bd30:	461a      	mov	r2, r3
   2bd32:	7a00      	ldrb	r0, [r0, #8]
   2bd34:	f7e7 f916 	bl	12f64 <sc_save>
}
   2bd38:	2002      	movs	r0, #2
   2bd3a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2bd3c:	f7e7 fb14 	bl	13368 <sc_clear>
   2bd40:	e7fa      	b.n	2bd38 <sc_ccc_cfg_write+0x14>

0002bd42 <read_appearance>:
{
   2bd42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bd44:	4615      	mov	r5, r2
   2bd46:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2bd4a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2bd4c:	f7fe fea9 	bl	2aaa2 <bt_get_appearance>
	if (offset > value_len) {
   2bd50:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2bd52:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2bd56:	d80e      	bhi.n	2bd76 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2bd58:	f1c6 0402 	rsb	r4, r6, #2
   2bd5c:	42bc      	cmp	r4, r7
   2bd5e:	bfa8      	it	ge
   2bd60:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bd62:	f10d 0306 	add.w	r3, sp, #6
   2bd66:	4622      	mov	r2, r4
   2bd68:	4628      	mov	r0, r5
   2bd6a:	1999      	adds	r1, r3, r6
   2bd6c:	f7fe fbd5 	bl	2a51a <memcpy>
}
   2bd70:	4620      	mov	r0, r4
   2bd72:	b003      	add	sp, #12
   2bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bd76:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bd7a:	e7f9      	b.n	2bd70 <read_appearance+0x2e>

0002bd7c <read_name>:
{
   2bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd80:	4698      	mov	r8, r3
   2bd82:	4615      	mov	r5, r2
   2bd84:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   2bd88:	f7e3 fad8 	bl	f33c <bt_get_name>
   2bd8c:	4607      	mov	r7, r0
				 strlen(name));
   2bd8e:	f7fe fb6e 	bl	2a46e <strlen>
	if (offset > value_len) {
   2bd92:	b283      	uxth	r3, r0
   2bd94:	42b3      	cmp	r3, r6
   2bd96:	d30c      	bcc.n	2bdb2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2bd98:	1b9c      	subs	r4, r3, r6
   2bd9a:	4544      	cmp	r4, r8
   2bd9c:	bfa8      	it	ge
   2bd9e:	4644      	movge	r4, r8
   2bda0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2bda2:	4622      	mov	r2, r4
   2bda4:	4628      	mov	r0, r5
   2bda6:	19b9      	adds	r1, r7, r6
   2bda8:	f7fe fbb7 	bl	2a51a <memcpy>
}
   2bdac:	4620      	mov	r0, r4
   2bdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bdb2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bdb6:	e7f9      	b.n	2bdac <read_name+0x30>

0002bdb8 <cf_read>:
{
   2bdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bdba:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2bdbc:	2300      	movs	r3, #0
{
   2bdbe:	4615      	mov	r5, r2
   2bdc0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2bdc4:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   2bdc8:	f7e6 fedc 	bl	12b84 <find_cf_cfg>
	if (cfg) {
   2bdcc:	b128      	cbz	r0, 2bdda <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2bdce:	f100 0108 	add.w	r1, r0, #8
   2bdd2:	2201      	movs	r2, #1
   2bdd4:	a801      	add	r0, sp, #4
   2bdd6:	f7fe fba0 	bl	2a51a <memcpy>
	if (offset > value_len) {
   2bdda:	2e01      	cmp	r6, #1
   2bddc:	d80d      	bhi.n	2bdfa <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2bdde:	f1c6 0401 	rsb	r4, r6, #1
   2bde2:	42bc      	cmp	r4, r7
   2bde4:	bfa8      	it	ge
   2bde6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bde8:	ab01      	add	r3, sp, #4
   2bdea:	4622      	mov	r2, r4
   2bdec:	4628      	mov	r0, r5
   2bdee:	1999      	adds	r1, r3, r6
   2bdf0:	f7fe fb93 	bl	2a51a <memcpy>
}
   2bdf4:	4620      	mov	r0, r4
   2bdf6:	b003      	add	sp, #12
   2bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bdfa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2bdfe:	e7f9      	b.n	2bdf4 <cf_read+0x3c>

0002be00 <bt_gatt_attr_read_service>:
{
   2be00:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2be02:	68c9      	ldr	r1, [r1, #12]
{
   2be04:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2be06:	780a      	ldrb	r2, [r1, #0]
{
   2be08:	461c      	mov	r4, r3
   2be0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2be0e:	b992      	cbnz	r2, 2be36 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2be10:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   2be12:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2be14:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2be18:	d818      	bhi.n	2be4c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2be1a:	f1c3 0202 	rsb	r2, r3, #2
   2be1e:	4294      	cmp	r4, r2
   2be20:	bfa8      	it	ge
   2be22:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2be24:	4622      	mov	r2, r4
   2be26:	f10d 0106 	add.w	r1, sp, #6
   2be2a:	4419      	add	r1, r3
   2be2c:	f7fe fb75 	bl	2a51a <memcpy>
}
   2be30:	4620      	mov	r0, r4
   2be32:	b002      	add	sp, #8
   2be34:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2be36:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2be38:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2be3c:	d806      	bhi.n	2be4c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2be3e:	f1c3 0210 	rsb	r2, r3, #16
   2be42:	4294      	cmp	r4, r2
   2be44:	bfa8      	it	ge
   2be46:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2be48:	4622      	mov	r2, r4
   2be4a:	e7ee      	b.n	2be2a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2be4c:	f06f 0406 	mvn.w	r4, #6
   2be50:	e7ee      	b.n	2be30 <bt_gatt_attr_read_service+0x30>

0002be52 <bt_gatt_attr_read_ccc>:
{
   2be52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2be54:	68c9      	ldr	r1, [r1, #12]
{
   2be56:	4615      	mov	r5, r2
   2be58:	461f      	mov	r7, r3
   2be5a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   2be5e:	f7e6 feb9 	bl	12bd4 <find_ccc_cfg>
	if (cfg) {
   2be62:	b100      	cbz	r0, 2be66 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2be64:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   2be66:	2e02      	cmp	r6, #2
   2be68:	f8ad 0006 	strh.w	r0, [sp, #6]
   2be6c:	d80e      	bhi.n	2be8c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2be6e:	f1c6 0402 	rsb	r4, r6, #2
   2be72:	42bc      	cmp	r4, r7
   2be74:	bfa8      	it	ge
   2be76:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2be78:	f10d 0306 	add.w	r3, sp, #6
   2be7c:	4622      	mov	r2, r4
   2be7e:	4628      	mov	r0, r5
   2be80:	1999      	adds	r1, r3, r6
   2be82:	f7fe fb4a 	bl	2a51a <memcpy>
}
   2be86:	4620      	mov	r0, r4
   2be88:	b003      	add	sp, #12
   2be8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2be8c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2be90:	e7f9      	b.n	2be86 <bt_gatt_attr_read_ccc+0x34>

0002be92 <sc_restore_rsp>:
{
   2be92:	b538      	push	{r3, r4, r5, lr}
   2be94:	4604      	mov	r4, r0
   2be96:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2be98:	f7ff fe00 	bl	2ba9c <bt_att_fixed_chan_only>
   2be9c:	b150      	cbz	r0, 2beb4 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2be9e:	4620      	mov	r0, r4
   2bea0:	f7e6 fe70 	bl	12b84 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2bea4:	b130      	cbz	r0, 2beb4 <sc_restore_rsp+0x22>
   2bea6:	7a03      	ldrb	r3, [r0, #8]
   2bea8:	07db      	lsls	r3, r3, #31
   2beaa:	d503      	bpl.n	2beb4 <sc_restore_rsp+0x22>
   2beac:	2101      	movs	r1, #1
   2beae:	300c      	adds	r0, #12
   2beb0:	f7ff feaf 	bl	2bc12 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2beb4:	b985      	cbnz	r5, 2bed8 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2beb6:	7a20      	ldrb	r0, [r4, #8]
   2beb8:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2bebc:	f7e6 fe7a 	bl	12bb4 <find_sc_cfg>
		if (sc_cfg) {
   2bec0:	4604      	mov	r4, r0
   2bec2:	b148      	cbz	r0, 2bed8 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2bec4:	4629      	mov	r1, r5
   2bec6:	2204      	movs	r2, #4
   2bec8:	3008      	adds	r0, #8
   2beca:	f7fe fb31 	bl	2a530 <memset>
		sc_store(cfg);
   2bece:	4620      	mov	r0, r4
}
   2bed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2bed4:	f7e7 b812 	b.w	12efc <sc_store>
}
   2bed8:	bd38      	pop	{r3, r4, r5, pc}

0002beda <bt_gatt_attr_value_handle>:
{
   2beda:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bedc:	4604      	mov	r4, r0
   2bede:	b910      	cbnz	r0, 2bee6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2bee0:	2000      	movs	r0, #0
}
   2bee2:	b002      	add	sp, #8
   2bee4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bee6:	2300      	movs	r3, #0
   2bee8:	f88d 3004 	strb.w	r3, [sp, #4]
   2beec:	f642 0303 	movw	r3, #10243	; 0x2803
   2bef0:	6800      	ldr	r0, [r0, #0]
   2bef2:	a901      	add	r1, sp, #4
   2bef4:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bef8:	f7fe fcf8 	bl	2a8ec <bt_uuid_cmp>
   2befc:	2800      	cmp	r0, #0
   2befe:	d1ef      	bne.n	2bee0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2bf00:	68e3      	ldr	r3, [r4, #12]
   2bf02:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bf04:	2800      	cmp	r0, #0
   2bf06:	d1ec      	bne.n	2bee2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bf08:	4620      	mov	r0, r4
   2bf0a:	f7e7 fbad 	bl	13668 <bt_gatt_attr_get_handle>
   2bf0e:	3001      	adds	r0, #1
   2bf10:	b280      	uxth	r0, r0
	return handle;
   2bf12:	e7e6      	b.n	2bee2 <bt_gatt_attr_value_handle+0x8>

0002bf14 <bt_gatt_attr_read_chrc>:
{
   2bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bf16:	68cc      	ldr	r4, [r1, #12]
{
   2bf18:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2bf1a:	79a3      	ldrb	r3, [r4, #6]
{
   2bf1c:	b087      	sub	sp, #28
   2bf1e:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2bf20:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2bf24:	4615      	mov	r5, r2
   2bf26:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bf2a:	f7ff ffd6 	bl	2beda <bt_gatt_attr_value_handle>
   2bf2e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bf32:	6821      	ldr	r1, [r4, #0]
   2bf34:	780b      	ldrb	r3, [r1, #0]
   2bf36:	b99b      	cbnz	r3, 2bf60 <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   2bf38:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bf3a:	884b      	ldrh	r3, [r1, #2]
   2bf3c:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   2bf40:	42b4      	cmp	r4, r6
   2bf42:	d315      	bcc.n	2bf70 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2bf44:	1ba4      	subs	r4, r4, r6
   2bf46:	42bc      	cmp	r4, r7
   2bf48:	bfa8      	it	ge
   2bf4a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bf4c:	ab01      	add	r3, sp, #4
   2bf4e:	b2a4      	uxth	r4, r4
   2bf50:	4622      	mov	r2, r4
   2bf52:	4628      	mov	r0, r5
   2bf54:	1999      	adds	r1, r3, r6
   2bf56:	f7fe fae0 	bl	2a51a <memcpy>
}
   2bf5a:	4620      	mov	r0, r4
   2bf5c:	b007      	add	sp, #28
   2bf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bf60:	2210      	movs	r2, #16
   2bf62:	3101      	adds	r1, #1
   2bf64:	f10d 0007 	add.w	r0, sp, #7
   2bf68:	f7fe fad7 	bl	2a51a <memcpy>
		value_len += 16U;
   2bf6c:	2413      	movs	r4, #19
   2bf6e:	e7e7      	b.n	2bf40 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bf70:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bf74:	e7f1      	b.n	2bf5a <bt_gatt_attr_read_chrc+0x46>

0002bf76 <bt_gatt_foreach_attr>:
{
   2bf76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2bf78:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bf7c:	2300      	movs	r3, #0
   2bf7e:	461a      	mov	r2, r3
   2bf80:	9300      	str	r3, [sp, #0]
   2bf82:	f7e7 fbb1 	bl	136e8 <bt_gatt_foreach_attr_type>
}
   2bf86:	b005      	add	sp, #20
   2bf88:	f85d fb04 	ldr.w	pc, [sp], #4

0002bf8c <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2bf8c:	f7ff bd69 	b.w	2ba62 <bt_att_get_mtu>

0002bf90 <bt_gatt_check_perm>:
{
   2bf90:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2bf92:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bf94:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2bf96:	d504      	bpl.n	2bfa2 <bt_gatt_check_perm+0x12>
   2bf98:	f013 0f95 	tst.w	r3, #149	; 0x95
   2bf9c:	d01d      	beq.n	2bfda <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bf9e:	684c      	ldr	r4, [r1, #4]
   2bfa0:	b1dc      	cbz	r4, 2bfda <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bfa2:	0794      	lsls	r4, r2, #30
   2bfa4:	d504      	bpl.n	2bfb0 <bt_gatt_check_perm+0x20>
   2bfa6:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2bfaa:	d018      	beq.n	2bfde <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bfac:	6889      	ldr	r1, [r1, #8]
   2bfae:	b1b1      	cbz	r1, 2bfde <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   2bfb0:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2bfb4:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2bfb8:	d001      	beq.n	2bfbe <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   2bfba:	2005      	movs	r0, #5
}
   2bfbc:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bfbe:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bfc2:	d105      	bne.n	2bfd0 <bt_gatt_check_perm+0x40>
	return 0;
   2bfc4:	f014 0f0c 	tst.w	r4, #12
   2bfc8:	bf14      	ite	ne
   2bfca:	200f      	movne	r0, #15
   2bfcc:	2000      	moveq	r0, #0
   2bfce:	e7f5      	b.n	2bfbc <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bfd0:	f7ff f800 	bl	2afd4 <bt_conn_get_security>
   2bfd4:	2802      	cmp	r0, #2
   2bfd6:	d8f5      	bhi.n	2bfc4 <bt_gatt_check_perm+0x34>
   2bfd8:	e7ef      	b.n	2bfba <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2bfda:	2002      	movs	r0, #2
   2bfdc:	e7ee      	b.n	2bfbc <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2bfde:	2003      	movs	r0, #3
   2bfe0:	e7ec      	b.n	2bfbc <bt_gatt_check_perm+0x2c>

0002bfe2 <gatt_notify>:
{
   2bfe2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bfe6:	4614      	mov	r4, r2
   2bfe8:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2bfea:	2294      	movs	r2, #148	; 0x94
   2bfec:	6861      	ldr	r1, [r4, #4]
{
   2bfee:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2bff0:	f7ff ffce 	bl	2bf90 <bt_gatt_check_perm>
   2bff4:	bb58      	cbnz	r0, 2c04e <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   2bff6:	2201      	movs	r2, #1
   2bff8:	4630      	mov	r0, r6
   2bffa:	6861      	ldr	r1, [r4, #4]
   2bffc:	f7e7 fe5c 	bl	13cb8 <bt_gatt_is_subscribed>
   2c000:	b348      	cbz	r0, 2c056 <gatt_notify+0x74>
				sizeof(*nfy) + params->len);
   2c002:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2c004:	211b      	movs	r1, #27
   2c006:	4630      	mov	r0, r6
   2c008:	3202      	adds	r2, #2
   2c00a:	f7ff fcbf 	bl	2b98c <bt_att_create_pdu>
	if (!buf) {
   2c00e:	4605      	mov	r5, r0
   2c010:	b320      	cbz	r0, 2c05c <gatt_notify+0x7a>
   2c012:	f100 090c 	add.w	r9, r0, #12
   2c016:	2102      	movs	r1, #2
   2c018:	4648      	mov	r0, r9
   2c01a:	f7f4 f999 	bl	20350 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2c01e:	4607      	mov	r7, r0
   2c020:	f827 8b02 	strh.w	r8, [r7], #2
   2c024:	89a1      	ldrh	r1, [r4, #12]
   2c026:	4648      	mov	r0, r9
   2c028:	f7f4 f992 	bl	20350 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   2c02c:	89a2      	ldrh	r2, [r4, #12]
   2c02e:	68a1      	ldr	r1, [r4, #8]
   2c030:	4638      	mov	r0, r7
   2c032:	f7fe fa72 	bl	2a51a <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   2c036:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2c03a:	4628      	mov	r0, r5
   2c03c:	2301      	movs	r3, #1
   2c03e:	f7ff fd50 	bl	2bae2 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   2c042:	4629      	mov	r1, r5
   2c044:	4630      	mov	r0, r6
}
   2c046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   2c04a:	f7e6 bd13 	b.w	12a74 <bt_att_send>
		return -EPERM;
   2c04e:	f04f 30ff 	mov.w	r0, #4294967295
}
   2c052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   2c056:	f06f 0015 	mvn.w	r0, #21
   2c05a:	e7fa      	b.n	2c052 <gatt_notify+0x70>
		return -ENOMEM;
   2c05c:	f06f 000b 	mvn.w	r0, #11
   2c060:	e7f7      	b.n	2c052 <gatt_notify+0x70>

0002c062 <bt_gatt_change_aware>:
{
   2c062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c064:	4605      	mov	r5, r0
   2c066:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2c068:	f7e6 fd8c 	bl	12b84 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c06c:	b1d0      	cbz	r0, 2c0a4 <bt_gatt_change_aware+0x42>
   2c06e:	7a03      	ldrb	r3, [r0, #8]
   2c070:	07db      	lsls	r3, r3, #31
   2c072:	d517      	bpl.n	2c0a4 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2c074:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c078:	4620      	mov	r0, r4
   2c07a:	f7ff fdc7 	bl	2bc0c <atomic_get>
   2c07e:	f010 0601 	ands.w	r6, r0, #1
   2c082:	d10f      	bne.n	2c0a4 <bt_gatt_change_aware+0x42>
	if (!req) {
   2c084:	b17f      	cbz	r7, 2c0a6 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c086:	f06f 0102 	mvn.w	r1, #2
   2c08a:	4620      	mov	r0, r4
   2c08c:	f7ff fe13 	bl	2bcb6 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2c090:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2c094:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2c096:	d008      	beq.n	2c0aa <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2c098:	f7ff fd02 	bl	2baa0 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c09c:	2101      	movs	r1, #1
   2c09e:	4620      	mov	r0, r4
   2c0a0:	f7ff fdb7 	bl	2bc12 <atomic_or>
		return true;
   2c0a4:	2601      	movs	r6, #1
}
   2c0a6:	4630      	mov	r0, r6
   2c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2c0aa:	f7ff fcf7 	bl	2ba9c <bt_att_fixed_chan_only>
   2c0ae:	2800      	cmp	r0, #0
   2c0b0:	d0f9      	beq.n	2c0a6 <bt_gatt_change_aware+0x44>
   2c0b2:	4628      	mov	r0, r5
   2c0b4:	f7ff fd09 	bl	2baca <bt_att_out_of_sync_sent_on_fixed>
   2c0b8:	2800      	cmp	r0, #0
   2c0ba:	d0f4      	beq.n	2c0a6 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c0bc:	f06f 0102 	mvn.w	r1, #2
   2c0c0:	4620      	mov	r0, r4
   2c0c2:	f7ff fdf8 	bl	2bcb6 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2c0c6:	4628      	mov	r0, r5
   2c0c8:	e7e6      	b.n	2c098 <bt_gatt_change_aware+0x36>

0002c0ca <ccc_delayed_store>:
{
   2c0ca:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2c0cc:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2c0d0:	4605      	mov	r5, r0
		if (!conn) {
   2c0d2:	b184      	cbz	r4, 2c0f6 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2c0d4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2c0d8:	4631      	mov	r1, r6
   2c0da:	7a20      	ldrb	r0, [r4, #8]
   2c0dc:	f7fe fce3 	bl	2aaa6 <bt_addr_le_is_bonded>
   2c0e0:	b148      	cbz	r0, 2c0f6 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2c0e2:	2300      	movs	r3, #0
   2c0e4:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2c0e8:	4631      	mov	r1, r6
   2c0ea:	7a20      	ldrb	r0, [r4, #8]
   2c0ec:	f7e8 f97e 	bl	143ec <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2c0f0:	4620      	mov	r0, r4
   2c0f2:	f7e5 f823 	bl	1113c <bt_conn_unref>
}
   2c0f6:	bd70      	pop	{r4, r5, r6, pc}

0002c0f8 <bt_smp_recv>:
{
   2c0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2c0fa:	2100      	movs	r1, #0
   2c0fc:	f04f 32ff 	mov.w	r2, #4294967295
   2c100:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2c104:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2c106:	4608      	mov	r0, r1
   2c108:	f7ff f803 	bl	2b112 <bt_l2cap_create_pdu_timeout>
   2c10c:	f100 060c 	add.w	r6, r0, #12
   2c110:	4604      	mov	r4, r0
   2c112:	2101      	movs	r1, #1
   2c114:	4630      	mov	r0, r6
   2c116:	f7f4 f91b 	bl	20350 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2c11a:	2505      	movs	r5, #5
   2c11c:	2101      	movs	r1, #1
   2c11e:	7005      	strb	r5, [r0, #0]
   2c120:	4630      	mov	r0, r6
   2c122:	f7f4 f915 	bl	20350 <net_buf_simple_add>
   2c126:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2c128:	7005      	strb	r5, [r0, #0]
   2c12a:	4622      	mov	r2, r4
   2c12c:	2106      	movs	r1, #6
   2c12e:	4638      	mov	r0, r7
   2c130:	9300      	str	r3, [sp, #0]
   2c132:	f7fe fff1 	bl	2b118 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2c136:	b110      	cbz	r0, 2c13e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2c138:	4620      	mov	r0, r4
   2c13a:	f7f3 ffcf 	bl	200dc <net_buf_unref>
}
   2c13e:	2000      	movs	r0, #0
   2c140:	b003      	add	sp, #12
   2c142:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c144 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2c144:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c148:	4770      	bx	lr

0002c14a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2c14a:	2000      	movs	r0, #0
   2c14c:	4770      	bx	lr

0002c14e <model_start>:
	if (mod->cb && mod->cb->start) {
   2c14e:	6a03      	ldr	r3, [r0, #32]
   2c150:	b113      	cbz	r3, 2c158 <model_start+0xa>
   2c152:	685b      	ldr	r3, [r3, #4]
   2c154:	b103      	cbz	r3, 2c158 <model_start+0xa>
		mod->cb->start(mod);
   2c156:	4718      	bx	r3
}
   2c158:	4770      	bx	lr

0002c15a <node_id_is_running>:
	return sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING;
   2c15a:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
}
   2c15e:	1e43      	subs	r3, r0, #1
   2c160:	4258      	negs	r0, r3
   2c162:	4158      	adcs	r0, r3
   2c164:	4770      	bx	lr

0002c166 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c166:	e8d0 0faf 	lda	r0, [r0]
}
   2c16a:	4770      	bx	lr

0002c16c <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c16c:	e8d0 3fef 	ldaex	r3, [r0]
   2c170:	430b      	orrs	r3, r1
   2c172:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c176:	2a00      	cmp	r2, #0
   2c178:	d1f8      	bne.n	2c16c <atomic_or.isra.0>
}
   2c17a:	4770      	bx	lr

0002c17c <bt_mesh_fixed_group_match>:
	switch (addr) {
   2c17c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   2c180:	38fc      	subs	r0, #252	; 0xfc
{
   2c182:	b508      	push	{r3, lr}
	switch (addr) {
   2c184:	2803      	cmp	r0, #3
   2c186:	d811      	bhi.n	2c1ac <bt_mesh_fixed_group_match+0x30>
   2c188:	e8df f000 	tbb	[pc, r0]
   2c18c:	020d0a04 	.word	0x020d0a04
		return true;
   2c190:	2001      	movs	r0, #1
}
   2c192:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   2c194:	f7e8 fc68 	bl	14a68 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2c198:	1e43      	subs	r3, r0, #1
   2c19a:	4258      	negs	r0, r3
   2c19c:	4158      	adcs	r0, r3
   2c19e:	e7f8      	b.n	2c192 <bt_mesh_fixed_group_match+0x16>
		return (bt_mesh_friend_get() == BT_MESH_FEATURE_ENABLED);
   2c1a0:	f7e8 fcaa 	bl	14af8 <bt_mesh_friend_get>
   2c1a4:	e7f8      	b.n	2c198 <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2c1a6:	f7e8 fd39 	bl	14c1c <bt_mesh_relay_get>
   2c1aa:	e7f5      	b.n	2c198 <bt_mesh_fixed_group_match+0x1c>
	switch (addr) {
   2c1ac:	2000      	movs	r0, #0
   2c1ae:	e7f0      	b.n	2c192 <bt_mesh_fixed_group_match+0x16>

0002c1b0 <bt_mesh_scan_cb>:
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   2c1b0:	2a03      	cmp	r2, #3
{
   2c1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c1b6:	460f      	mov	r7, r1
   2c1b8:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   2c1ba:	d010      	beq.n	2c1de <bt_mesh_scan_cb+0x2e>
}
   2c1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   2c1c0:	2200      	movs	r2, #0
   2c1c2:	4639      	mov	r1, r7
   2c1c4:	4620      	mov	r0, r4
   2c1c6:	f7e9 fe0d 	bl	15de4 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
   2c1ca:	68a3      	ldr	r3, [r4, #8]
		net_buf_simple_pull(buf, len);
   2c1cc:	4629      	mov	r1, r5
   2c1ce:	fa13 f686 	uxtah	r6, r3, r6
   2c1d2:	4620      	mov	r0, r4
   2c1d4:	6026      	str	r6, [r4, #0]
	buf->len = state->len;
   2c1d6:	f8a4 8004 	strh.w	r8, [r4, #4]
   2c1da:	f7f4 f885 	bl	202e8 <net_buf_simple_pull>
	while (buf->len > 1) {
   2c1de:	88a3      	ldrh	r3, [r4, #4]
   2c1e0:	2b01      	cmp	r3, #1
   2c1e2:	d9eb      	bls.n	2c1bc <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
   2c1e4:	4620      	mov	r0, r4
   2c1e6:	f001 fe49 	bl	2de7c <net_buf_simple_pull_u8>
		if (len == 0U) {
   2c1ea:	4605      	mov	r5, r0
   2c1ec:	2800      	cmp	r0, #0
   2c1ee:	d0e5      	beq.n	2c1bc <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   2c1f0:	88a3      	ldrh	r3, [r4, #4]
   2c1f2:	4283      	cmp	r3, r0
   2c1f4:	d3e2      	bcc.n	2c1bc <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   2c1f6:	4620      	mov	r0, r4
   2c1f8:	f001 fe63 	bl	2dec2 <net_buf_simple_headroom>
   2c1fc:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   2c1fe:	4620      	mov	r0, r4
	state->len = buf->len;
   2c200:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2c204:	f001 fe3a 	bl	2de7c <net_buf_simple_pull_u8>
		buf->len = len - 1;
   2c208:	1e6b      	subs	r3, r5, #1
		switch (type) {
   2c20a:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   2c20c:	80a3      	strh	r3, [r4, #4]
		switch (type) {
   2c20e:	d0d7      	beq.n	2c1c0 <bt_mesh_scan_cb+0x10>
   2c210:	282b      	cmp	r0, #43	; 0x2b
   2c212:	d005      	beq.n	2c220 <bt_mesh_scan_cb+0x70>
   2c214:	2829      	cmp	r0, #41	; 0x29
   2c216:	d1d8      	bne.n	2c1ca <bt_mesh_scan_cb+0x1a>
			bt_mesh_pb_adv_recv(buf);
   2c218:	4620      	mov	r0, r4
   2c21a:	f7f2 fcff 	bl	1ec1c <bt_mesh_pb_adv_recv>
			break;
   2c21e:	e7d4      	b.n	2c1ca <bt_mesh_scan_cb+0x1a>
			bt_mesh_beacon_recv(buf);
   2c220:	4620      	mov	r0, r4
   2c222:	f7e8 ffb3 	bl	1518c <bt_mesh_beacon_recv>
			break;
   2c226:	e7d0      	b.n	2c1ca <bt_mesh_scan_cb+0x1a>

0002c228 <adv_buf_destroy>:
{
   2c228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c22a:	4604      	mov	r4, r0
	struct bt_mesh_adv adv = *BT_MESH_ADV(buf);
   2c22c:	6983      	ldr	r3, [r0, #24]
   2c22e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c232:	ab04      	add	r3, sp, #16
   2c234:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2c238:	4605      	mov	r5, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c23a:	7aa0      	ldrb	r0, [r4, #10]
   2c23c:	460e      	mov	r6, r1
   2c23e:	f7f3 fd6b 	bl	1fd18 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2c242:	4621      	mov	r1, r4
   2c244:	f003 f8dc 	bl	2f400 <k_queue_prepend>
}

static inline void bt_mesh_adv_send_end(
	int err, struct bt_mesh_adv const *adv)
{
	if (adv->started && adv->cb && adv->cb->end) {
   2c248:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c24c:	075b      	lsls	r3, r3, #29
   2c24e:	d508      	bpl.n	2c262 <adv_buf_destroy+0x3a>
   2c250:	b13d      	cbz	r5, 2c262 <adv_buf_destroy+0x3a>
   2c252:	686b      	ldr	r3, [r5, #4]
   2c254:	b12b      	cbz	r3, 2c262 <adv_buf_destroy+0x3a>
		adv->cb->end(err, adv->cb_data);
   2c256:	4631      	mov	r1, r6
   2c258:	2000      	movs	r0, #0
}
   2c25a:	b004      	add	sp, #16
   2c25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c260:	4718      	bx	r3
   2c262:	b004      	add	sp, #16
   2c264:	bd70      	pop	{r4, r5, r6, pc}

0002c266 <bt_mesh_adv_buf_get_by_tag>:
	return bt_mesh_adv_buf_get(timeout);
   2c266:	4610      	mov	r0, r2
   2c268:	4619      	mov	r1, r3
   2c26a:	f7e8 bda1 	b.w	14db0 <bt_mesh_adv_buf_get>

0002c26e <bt_mesh_adv_gatt_send>:
{
   2c26e:	b508      	push	{r3, lr}
	if (bt_mesh_is_provisioned()) {
   2c270:	f7e8 faa0 	bl	147b4 <bt_mesh_is_provisioned>
   2c274:	b118      	cbz	r0, 2c27e <bt_mesh_adv_gatt_send+0x10>
}
   2c276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_mesh_proxy_adv_start();
   2c27a:	f7f3 ba81 	b.w	1f780 <bt_mesh_proxy_adv_start>
}
   2c27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bt_mesh_pb_gatt_srv_adv_start();
   2c282:	f7f2 bef7 	b.w	1f074 <bt_mesh_pb_gatt_srv_adv_start>

0002c286 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   2c286:	7a43      	ldrb	r3, [r0, #9]
   2c288:	7203      	strb	r3, [r0, #8]
	sub->beacons_cur = 0U;
   2c28a:	2300      	movs	r3, #0
   2c28c:	7243      	strb	r3, [r0, #9]
}
   2c28e:	4770      	bx	lr

0002c290 <beacon_cache_match>:
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   2c290:	2215      	movs	r2, #21
{
   2c292:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   2c294:	300a      	adds	r0, #10
   2c296:	f7fe f919 	bl	2a4cc <memcmp>
}
   2c29a:	fab0 f080 	clz	r0, r0
   2c29e:	0940      	lsrs	r0, r0, #5
   2c2a0:	bd08      	pop	{r3, pc}

0002c2a2 <subnet_by_id>:
{
   2c2a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   2c2a6:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
{
   2c2aa:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   2c2ac:	f100 067a 	add.w	r6, r0, #122	; 0x7a
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   2c2b0:	b1dc      	cbz	r4, 2c2ea <subnet_by_id+0x48>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   2c2b2:	2400      	movs	r4, #0
	if (memcmp(params->net_id, keys->net_id, 8)) {
   2c2b4:	f1a6 0818 	sub.w	r8, r6, #24
   2c2b8:	2208      	movs	r2, #8
   2c2ba:	4641      	mov	r1, r8
   2c2bc:	6828      	ldr	r0, [r5, #0]
   2c2be:	f7fe f905 	bl	2a4cc <memcmp>
   2c2c2:	b990      	cbnz	r0, 2c2ea <subnet_by_id+0x48>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   2c2c4:	af02      	add	r7, sp, #8
   2c2c6:	9700      	str	r7, [sp, #0]
   2c2c8:	4642      	mov	r2, r8
   2c2ca:	7b29      	ldrb	r1, [r5, #12]
   2c2cc:	4630      	mov	r0, r6
   2c2ce:	68ab      	ldr	r3, [r5, #8]
   2c2d0:	f000 fc8e 	bl	2cbf0 <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
   2c2d4:	2208      	movs	r2, #8
   2c2d6:	4639      	mov	r1, r7
   2c2d8:	6868      	ldr	r0, [r5, #4]
   2c2da:	f7fe f8f7 	bl	2a4cc <memcmp>
   2c2de:	b920      	cbnz	r0, 2c2ea <subnet_by_id+0x48>
			return true;
   2c2e0:	2001      	movs	r0, #1
			params->new_key = (i > 0);
   2c2e2:	736c      	strb	r4, [r5, #13]
}
   2c2e4:	b004      	add	sp, #16
   2c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   2c2ea:	365a      	adds	r6, #90	; 0x5a
   2c2ec:	b92c      	cbnz	r4, 2c2fa <subnet_by_id+0x58>
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   2c2ee:	f816 0c4a 	ldrb.w	r0, [r6, #-74]
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   2c2f2:	2401      	movs	r4, #1
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   2c2f4:	2800      	cmp	r0, #0
   2c2f6:	d0f5      	beq.n	2c2e4 <subnet_by_id+0x42>
   2c2f8:	e7dc      	b.n	2c2b4 <subnet_by_id+0x12>
	return false;
   2c2fa:	2000      	movs	r0, #0
   2c2fc:	e7f2      	b.n	2c2e4 <subnet_by_id+0x42>

0002c2fe <k_uptime_get_32>:
{
   2c2fe:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   2c300:	f003 f931 	bl	2f566 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   2c304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c308:	fba0 0302 	umull	r0, r3, r0, r2
   2c30c:	fb02 3301 	mla	r3, r2, r1, r3
   2c310:	0bc0      	lsrs	r0, r0, #15
}
   2c312:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2c316:	bd08      	pop	{r3, pc}

0002c318 <beacon_complete>:
{
   2c318:	b510      	push	{r4, lr}
   2c31a:	460c      	mov	r4, r1
	sub->beacon_sent = k_uptime_get_32();
   2c31c:	f7ff ffef 	bl	2c2fe <k_uptime_get_32>
   2c320:	6020      	str	r0, [r4, #0]
}
   2c322:	bd10      	pop	{r4, pc}

0002c324 <bt_mesh_beacon_cache_clear>:
	(void)memset(sub->beacon_cache, 0, 21);
   2c324:	2215      	movs	r2, #21
   2c326:	2100      	movs	r1, #0
   2c328:	300a      	adds	r0, #10
   2c32a:	f7fe b901 	b.w	2a530 <memset>

0002c32e <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   2c32e:	2901      	cmp	r1, #1
   2c330:	d001      	beq.n	2c336 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   2c332:	f7e8 bee3 	b.w	150fc <bt_mesh_beacon_update>
}
   2c336:	4770      	bx	lr

0002c338 <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2c338:	2200      	movs	r2, #0
   2c33a:	8102      	strh	r2, [r0, #8]
	bt_mesh_beacon_update(sub);
   2c33c:	f7e8 bede 	b.w	150fc <bt_mesh_beacon_update>

0002c340 <sys_get_be24>:
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   2c340:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   2c344:	7802      	ldrb	r2, [r0, #0]
   2c346:	ba5b      	rev16	r3, r3
   2c348:	b29b      	uxth	r3, r3
}
   2c34a:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   2c34e:	4770      	bx	lr

0002c350 <z_log_msg_static_create.constprop.0>:
   2c350:	2300      	movs	r3, #0
   2c352:	f7de bc03 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002c356 <net_encrypt>:
{
   2c356:	b570      	push	{r4, r5, r6, lr}
   2c358:	460d      	mov	r5, r1
   2c35a:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2c35c:	4601      	mov	r1, r0
   2c35e:	1c68      	adds	r0, r5, #1
{
   2c360:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2c362:	f000 fb15 	bl	2c990 <bt_mesh_net_encrypt>
	if (err) {
   2c366:	b938      	cbnz	r0, 2c378 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2c368:	4631      	mov	r1, r6
   2c36a:	6820      	ldr	r0, [r4, #0]
   2c36c:	f105 0211 	add.w	r2, r5, #17
}
   2c370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2c374:	f7ec baea 	b.w	1894c <bt_mesh_net_obfuscate>
}
   2c378:	bd70      	pop	{r4, r5, r6, pc}

0002c37a <bt_mesh_net_clear>:
{
   2c37a:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   2c37c:	2003      	movs	r0, #3
   2c37e:	f7ef fcfd 	bl	1bd7c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   2c382:	2004      	movs	r0, #4
   2c384:	f7ef fcfa 	bl	1bd7c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2c388:	2007      	movs	r0, #7
   2c38a:	f7ef fcf7 	bl	1bd7c <bt_mesh_settings_store_schedule>
}
   2c38e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
   2c392:	2005      	movs	r0, #5
   2c394:	f7ef bcf2 	b.w	1bd7c <bt_mesh_settings_store_schedule>

0002c398 <bt_mesh_friend_cred_create>:
{
   2c398:	b530      	push	{r4, r5, lr}
	p[0] = 0x01;
   2c39a:	2501      	movs	r5, #1
{
   2c39c:	b087      	sub	sp, #28
   2c39e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   2c3a2:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   2c3a6:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   2c3aa:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   2c3ac:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   2c3b0:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2c3b2:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   2c3b6:	0a1a      	lsrs	r2, r3, #8
   2c3b8:	0a23      	lsrs	r3, r4, #8
   2c3ba:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   2c3be:	f100 0311 	add.w	r3, r0, #17
   2c3c2:	9301      	str	r3, [sp, #4]
   2c3c4:	1c43      	adds	r3, r0, #1
   2c3c6:	f88d 100f 	strb.w	r1, [sp, #15]
   2c3ca:	f88d 2011 	strb.w	r2, [sp, #17]
   2c3ce:	9300      	str	r3, [sp, #0]
   2c3d0:	2209      	movs	r2, #9
   2c3d2:	4603      	mov	r3, r0
   2c3d4:	a903      	add	r1, sp, #12
   2c3d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2c3d8:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   2c3dc:	f88d 4014 	strb.w	r4, [sp, #20]
   2c3e0:	f7ec f9f6 	bl	187d0 <bt_mesh_k2>
}
   2c3e4:	b007      	add	sp, #28
   2c3e6:	bd30      	pop	{r4, r5, pc}

0002c3e8 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   2c3e8:	2101      	movs	r1, #1
   2c3ea:	f7e9 bfdf 	b.w	163ac <update_subnet_settings>

0002c3ee <key_refresh>:
{
   2c3ee:	b538      	push	{r3, r4, r5, lr}
   2c3f0:	4604      	mov	r4, r0
	switch (new_phase) {
   2c3f2:	2903      	cmp	r1, #3
   2c3f4:	d80a      	bhi.n	2c40c <key_refresh+0x1e>
   2c3f6:	e8df f001 	tbb	[pc, r1]
   2c3fa:	0216      	.short	0x0216
   2c3fc:	130e      	.short	0x130e
		sub->kr_phase = new_phase;
   2c3fe:	2301      	movs	r3, #1
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   2c400:	2102      	movs	r1, #2
		sub->kr_phase = new_phase;
   2c402:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2c406:	4620      	mov	r0, r4
   2c408:	f7e9 fec8 	bl	1619c <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   2c40c:	8c20      	ldrh	r0, [r4, #32]
}
   2c40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   2c412:	f7ff bfe9 	b.w	2c3e8 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   2c416:	2302      	movs	r3, #2
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   2c418:	2103      	movs	r1, #3
		sub->kr_phase = new_phase;
   2c41a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   2c41e:	e7f2      	b.n	2c406 <key_refresh+0x18>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   2c420:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2c424:	b16b      	cbz	r3, 2c442 <key_refresh+0x54>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   2c426:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   2c428:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   2c42c:	225a      	movs	r2, #90	; 0x5a
		sub->kr_phase = BT_MESH_KR_NORMAL;
   2c42e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   2c432:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c436:	f7fe f870 	bl	2a51a <memcpy>
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2c43a:	2104      	movs	r1, #4
		sub->keys[1].valid = 0U;
   2c43c:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2c440:	e7e1      	b.n	2c406 <key_refresh+0x18>
}
   2c442:	bd38      	pop	{r3, r4, r5, pc}

0002c444 <bt_mesh_kr_update>:
	if (!new_key) {
   2c444:	b16a      	cbz	r2, 2c462 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   2c446:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2c44a:	2b01      	cmp	r3, #1
   2c44c:	d104      	bne.n	2c458 <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   2c44e:	f1c1 0103 	rsb	r1, r1, #3
   2c452:	b2c9      	uxtb	r1, r1
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2c454:	f7ff bfcb 	b.w	2c3ee <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   2c458:	2b02      	cmp	r3, #2
   2c45a:	d102      	bne.n	2c462 <bt_mesh_kr_update+0x1e>
   2c45c:	b909      	cbnz	r1, 2c462 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2c45e:	2103      	movs	r1, #3
   2c460:	e7f8      	b.n	2c454 <bt_mesh_kr_update+0x10>
}
   2c462:	4770      	bx	lr

0002c464 <subnet_del>:
{
   2c464:	b510      	push	{r4, lr}
   2c466:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   2c468:	2100      	movs	r1, #0
   2c46a:	8c00      	ldrh	r0, [r0, #32]
   2c46c:	f7e9 ff9e 	bl	163ac <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   2c470:	8c20      	ldrh	r0, [r4, #32]
   2c472:	f7e9 fba9 	bl	15bc8 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   2c476:	2101      	movs	r1, #1
   2c478:	4620      	mov	r0, r4
   2c47a:	f7e9 fe8f 	bl	1619c <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   2c47e:	22e4      	movs	r2, #228	; 0xe4
   2c480:	2100      	movs	r1, #0
   2c482:	4620      	mov	r0, r4
   2c484:	f7fe f854 	bl	2a530 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   2c488:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c48c:	8423      	strh	r3, [r4, #32]
}
   2c48e:	bd10      	pop	{r4, pc}

0002c490 <bt_mesh_subnet_exists>:
{
   2c490:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   2c492:	f7e9 ff47 	bl	16324 <bt_mesh_subnet_get>
}
   2c496:	3800      	subs	r0, #0
   2c498:	bf18      	it	ne
   2c49a:	2001      	movne	r0, #1
   2c49c:	bd08      	pop	{r3, pc}

0002c49e <bt_mesh_subnet_update>:
{
   2c49e:	b538      	push	{r3, r4, r5, lr}
	sub = bt_mesh_subnet_get(net_idx);
   2c4a0:	f7e9 ff40 	bl	16324 <bt_mesh_subnet_get>
{
   2c4a4:	460d      	mov	r5, r1
	if (!sub) {
   2c4a6:	4604      	mov	r4, r0
   2c4a8:	b338      	cbz	r0, 2c4fa <bt_mesh_subnet_update+0x5c>
	switch (sub->kr_phase) {
   2c4aa:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2c4ae:	2b01      	cmp	r3, #1
   2c4b0:	d019      	beq.n	2c4e6 <bt_mesh_subnet_update+0x48>
   2c4b2:	d90e      	bls.n	2c4d2 <bt_mesh_subnet_update+0x34>
   2c4b4:	3b02      	subs	r3, #2
   2c4b6:	2b01      	cmp	r3, #1
   2c4b8:	d91d      	bls.n	2c4f6 <bt_mesh_subnet_update+0x58>
	err = net_keys_create(&sub->keys[1], key);
   2c4ba:	4629      	mov	r1, r5
   2c4bc:	f104 008a 	add.w	r0, r4, #138	; 0x8a
   2c4c0:	f7e9 feb4 	bl	1622c <net_keys_create>
	if (err) {
   2c4c4:	b9b8      	cbnz	r0, 2c4f6 <bt_mesh_subnet_update+0x58>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   2c4c6:	2101      	movs	r1, #1
   2c4c8:	4620      	mov	r0, r4
   2c4ca:	f7ff ff90 	bl	2c3ee <key_refresh>
			return STATUS_SUCCESS;
   2c4ce:	2000      	movs	r0, #0
   2c4d0:	e012      	b.n	2c4f8 <bt_mesh_subnet_update+0x5a>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   2c4d2:	f100 0131 	add.w	r1, r0, #49	; 0x31
   2c4d6:	2210      	movs	r2, #16
   2c4d8:	4628      	mov	r0, r5
   2c4da:	f7fd fff7 	bl	2a4cc <memcmp>
   2c4de:	2800      	cmp	r0, #0
   2c4e0:	d1eb      	bne.n	2c4ba <bt_mesh_subnet_update+0x1c>
			return STATUS_IDX_ALREADY_STORED;
   2c4e2:	2006      	movs	r0, #6
   2c4e4:	e008      	b.n	2c4f8 <bt_mesh_subnet_update+0x5a>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   2c4e6:	f100 018b 	add.w	r1, r0, #139	; 0x8b
   2c4ea:	2210      	movs	r2, #16
   2c4ec:	4628      	mov	r0, r5
   2c4ee:	f7fd ffed 	bl	2a4cc <memcmp>
   2c4f2:	2800      	cmp	r0, #0
   2c4f4:	d0eb      	beq.n	2c4ce <bt_mesh_subnet_update+0x30>
		return STATUS_CANNOT_UPDATE;
   2c4f6:	200b      	movs	r0, #11
}
   2c4f8:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INVALID_NETKEY;
   2c4fa:	2004      	movs	r0, #4
   2c4fc:	e7fc      	b.n	2c4f8 <bt_mesh_subnet_update+0x5a>

0002c4fe <bt_mesh_subnet_del>:
{
   2c4fe:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   2c500:	f7e9 ff10 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   2c504:	b118      	cbz	r0, 2c50e <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   2c506:	f7ff ffad 	bl	2c464 <subnet_del>
	return STATUS_SUCCESS;
   2c50a:	2000      	movs	r0, #0
}
   2c50c:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   2c50e:	2004      	movs	r0, #4
   2c510:	e7fc      	b.n	2c50c <bt_mesh_subnet_del+0xe>

0002c512 <bt_mesh_subnet_kr_phase_get>:
{
   2c512:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   2c514:	f7e9 ff06 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   2c518:	b120      	cbz	r0, 2c524 <bt_mesh_subnet_kr_phase_get+0x12>
	*phase = sub->kr_phase;
   2c51a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	return STATUS_SUCCESS;
   2c51e:	2000      	movs	r0, #0
   2c520:	700b      	strb	r3, [r1, #0]
}
   2c522:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   2c524:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2c526:	2004      	movs	r0, #4
   2c528:	e7fa      	b.n	2c520 <bt_mesh_subnet_kr_phase_get+0xe>

0002c52a <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2c52a:	2902      	cmp	r1, #2
{
   2c52c:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2c52e:	d00c      	beq.n	2c54a <bt_mesh_subnet_node_id_set+0x20>
	sub = bt_mesh_subnet_get(net_idx);
   2c530:	f7e9 fef8 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   2c534:	b158      	cbz	r0, 2c54e <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   2c536:	b129      	cbz	r1, 2c544 <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   2c538:	f7f3 f808 	bl	1f54c <bt_mesh_proxy_identity_start>
	bt_mesh_adv_gatt_update();
   2c53c:	f7ef fb1e 	bl	1bb7c <bt_mesh_adv_gatt_update>
	return STATUS_SUCCESS;
   2c540:	2000      	movs	r0, #0
}
   2c542:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   2c544:	f7f3 f80c 	bl	1f560 <bt_mesh_proxy_identity_stop>
   2c548:	e7f8      	b.n	2c53c <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   2c54a:	200f      	movs	r0, #15
   2c54c:	e7f9      	b.n	2c542 <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   2c54e:	2004      	movs	r0, #4
   2c550:	e7f7      	b.n	2c542 <bt_mesh_subnet_node_id_set+0x18>

0002c552 <bt_mesh_subnet_node_id_get>:
{
   2c552:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   2c554:	f7e9 fee6 	bl	16324 <bt_mesh_subnet_get>
	if (!sub) {
   2c558:	b120      	cbz	r0, 2c564 <bt_mesh_subnet_node_id_get+0x12>
	*node_id = sub->node_id;
   2c55a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	return STATUS_SUCCESS;
   2c55e:	2000      	movs	r0, #0
   2c560:	700b      	strb	r3, [r1, #0]
}
   2c562:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   2c564:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2c566:	2004      	movs	r0, #4
   2c568:	e7fa      	b.n	2c560 <bt_mesh_subnet_node_id_get+0xe>

0002c56a <app_key_del>:
{
   2c56a:	b510      	push	{r4, lr}
   2c56c:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   2c56e:	2100      	movs	r1, #0
   2c570:	8840      	ldrh	r0, [r0, #2]
   2c572:	f7ea f96b 	bl	1684c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   2c576:	4620      	mov	r0, r4
   2c578:	2101      	movs	r1, #1
   2c57a:	f7ea f8d7 	bl	1672c <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   2c57e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c582:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   2c584:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   2c586:	1d60      	adds	r0, r4, #5
   2c588:	2222      	movs	r2, #34	; 0x22
}
   2c58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   2c58e:	2100      	movs	r1, #0
   2c590:	f7fd bfce 	b.w	2a530 <memset>

0002c594 <send_cb_finalize>:
{
   2c594:	b570      	push	{r4, r5, r6, lr}
   2c596:	460d      	mov	r5, r1
	if (!cb) {
   2c598:	4604      	mov	r4, r0
   2c59a:	b160      	cbz	r0, 2c5b6 <send_cb_finalize+0x22>
	if (cb->start) {
   2c59c:	6803      	ldr	r3, [r0, #0]
   2c59e:	b11b      	cbz	r3, 2c5a8 <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   2c5a0:	460a      	mov	r2, r1
   2c5a2:	2100      	movs	r1, #0
   2c5a4:	4608      	mov	r0, r1
   2c5a6:	4798      	blx	r3
	if (cb->end) {
   2c5a8:	6863      	ldr	r3, [r4, #4]
   2c5aa:	b123      	cbz	r3, 2c5b6 <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2c5ac:	4629      	mov	r1, r5
	}
}
   2c5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   2c5b2:	2000      	movs	r0, #0
   2c5b4:	4718      	bx	r3
}
   2c5b6:	bd70      	pop	{r4, r5, r6, pc}

0002c5b8 <seg_tx_buf_build>:
{
   2c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2c5bc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
{
   2c5c0:	4604      	mov	r4, r0
		return BT_MESH_CTL_SEG_SDU_MAX;
   2c5c2:	f013 0f02 	tst.w	r3, #2
   2c5c6:	bf0c      	ite	eq
   2c5c8:	f04f 080c 	moveq.w	r8, #12
   2c5cc:	f04f 0808 	movne.w	r8, #8
{
   2c5d0:	4616      	mov	r6, r2
   2c5d2:	460f      	mov	r7, r1
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2c5d4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2c5d6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2c5d8:	fb08 3311 	mls	r3, r8, r1, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   2c5dc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2c5e0:	4598      	cmp	r8, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   2c5e2:	4610      	mov	r0, r2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2c5e4:	bfa8      	it	ge
   2c5e6:	fa5f f883 	uxtbge.w	r8, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   2c5ea:	f001 fc82 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2c5ee:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2c5f2:	f3c5 050c 	ubfx	r5, r5, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2c5f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2c5fa:	09a9      	lsrs	r1, r5, #6
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   2c5fc:	00ad      	lsls	r5, r5, #2
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2c5fe:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   2c602:	4630      	mov	r0, r6
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   2c604:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2c608:	f001 fc73 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   2c60c:	b2e9      	uxtb	r1, r5
   2c60e:	4630      	mov	r0, r6
   2c610:	f001 fc6f 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2c614:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   2c618:	4630      	mov	r0, r6
   2c61a:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
   2c61e:	b2c9      	uxtb	r1, r1
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2c620:	eb04 0487 	add.w	r4, r4, r7, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2c624:	f001 fc65 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2c628:	4642      	mov	r2, r8
   2c62a:	4630      	mov	r0, r6
   2c62c:	6861      	ldr	r1, [r4, #4]
}
   2c62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2c632:	f001 bc52 	b.w	2deda <net_buf_simple_add_mem>

0002c636 <seg_rx_assemble>:
{
   2c636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->len  = 0U;
   2c63a:	2500      	movs	r5, #0
   2c63c:	4606      	mov	r6, r0
   2c63e:	460c      	mov	r4, r1
   2c640:	4617      	mov	r7, r2
   2c642:	4680      	mov	r8, r0
	buf->data = buf->__buf;
   2c644:	688b      	ldr	r3, [r1, #8]
	buf->len  = 0U;
   2c646:	808d      	strh	r5, [r1, #4]
	buf->data = buf->__buf;
   2c648:	600b      	str	r3, [r1, #0]
				       MIN(seg_len(rx->ctl),
   2c64a:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   2c64c:	4620      	mov	r0, r4
		return BT_MESH_CTL_SEG_SDU_MAX;
   2c64e:	f013 0f20 	tst.w	r3, #32
   2c652:	bf0c      	ite	eq
   2c654:	220c      	moveq	r2, #12
   2c656:	2208      	movne	r2, #8
				       MIN(seg_len(rx->ctl),
   2c658:	8bb3      	ldrh	r3, [r6, #28]
		net_buf_simple_add_mem(buf, rx->seg[i],
   2c65a:	f858 1f04 	ldr.w	r1, [r8, #4]!
				       MIN(seg_len(rx->ctl),
   2c65e:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   2c662:	429a      	cmp	r2, r3
   2c664:	bfa8      	it	ge
   2c666:	461a      	movge	r2, r3
   2c668:	f001 fc37 	bl	2deda <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   2c66c:	7ff3      	ldrb	r3, [r6, #31]
   2c66e:	3501      	adds	r5, #1
   2c670:	f003 021f 	and.w	r2, r3, #31
   2c674:	42aa      	cmp	r2, r5
   2c676:	dae8      	bge.n	2c64a <seg_rx_assemble+0x14>
	if (!rx->ctl) {
   2c678:	069b      	lsls	r3, r3, #26
   2c67a:	d406      	bmi.n	2c68a <seg_rx_assemble+0x54>
		buf->len -= APP_MIC_LEN(aszmic);
   2c67c:	2f00      	cmp	r7, #0
   2c67e:	bf0c      	ite	eq
   2c680:	2204      	moveq	r2, #4
   2c682:	2208      	movne	r2, #8
   2c684:	88a3      	ldrh	r3, [r4, #4]
   2c686:	1a9b      	subs	r3, r3, r2
   2c688:	80a3      	strh	r3, [r4, #4]
}
   2c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c68e <sdu_try_decrypt>:
{
   2c68e:	b570      	push	{r4, r5, r6, lr}
	if (ctx->seg) {
   2c690:	69d0      	ldr	r0, [r2, #28]
{
   2c692:	460d      	mov	r5, r1
   2c694:	4614      	mov	r4, r2
	if (ctx->seg) {
   2c696:	b118      	cbz	r0, 2c6a0 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   2c698:	7852      	ldrb	r2, [r2, #1]
   2c69a:	6961      	ldr	r1, [r4, #20]
   2c69c:	f7ff ffcb 	bl	2c636 <seg_rx_assemble>
	buf->len  = 0U;
   2c6a0:	2200      	movs	r2, #0
	net_buf_simple_reset(ctx->sdu);
   2c6a2:	69a3      	ldr	r3, [r4, #24]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2c6a4:	4621      	mov	r1, r4
   2c6a6:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2c6a8:	689a      	ldr	r2, [r3, #8]
   2c6aa:	4628      	mov	r0, r5
   2c6ac:	601a      	str	r2, [r3, #0]
   2c6ae:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
}
   2c6b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2c6b6:	f000 ba36 	b.w	2cb26 <bt_mesh_app_decrypt>

0002c6ba <seg_send_start>:
{
   2c6ba:	b570      	push	{r4, r5, r6, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   2c6bc:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
{
   2c6c0:	460d      	mov	r5, r1
	if (!tx->started && tx->cb && tx->cb->start) {
   2c6c2:	071b      	lsls	r3, r3, #28
{
   2c6c4:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   2c6c6:	d40b      	bmi.n	2c6e0 <seg_send_start+0x26>
   2c6c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2c6ca:	b14b      	cbz	r3, 2c6e0 <seg_send_start+0x26>
   2c6cc:	681b      	ldr	r3, [r3, #0]
   2c6ce:	b13b      	cbz	r3, 2c6e0 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   2c6d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   2c6d2:	4798      	blx	r3
		tx->started = 1U;
   2c6d4:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   2c6d8:	f043 0308 	orr.w	r3, r3, #8
   2c6dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	tx->seg_send_started = 1U;
   2c6e0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   2c6e4:	f043 0320 	orr.w	r3, r3, #32
   2c6e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if (err) {
   2c6ec:	b155      	cbz	r5, 2c704 <seg_send_start+0x4a>
	if (!tx->nack_count) {
   2c6ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2c6f2:	b13b      	cbz	r3, 2c704 <seg_send_start+0x4a>
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   2c6f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2c6f8:	2200      	movs	r2, #0
}
   2c6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   2c6fe:	2300      	movs	r3, #0
   2c700:	f7f9 bfba 	b.w	26678 <k_work_reschedule>
}
   2c704:	bd70      	pop	{r4, r5, r6, pc}

0002c706 <z_log_msg_static_create.constprop.0>:
   2c706:	2300      	movs	r3, #0
   2c708:	f7de ba28 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002c70c <seg_retransmit>:
	seg_tx_send_unacked(tx);
   2c70c:	3850      	subs	r0, #80	; 0x50
   2c70e:	f7ea bbbb 	b.w	16e88 <seg_tx_send_unacked>

0002c712 <seg_sent>:
	if (!tx->seg_send_started) {
   2c712:	f891 3047 	ldrb.w	r3, [r1, #71]	; 0x47
   2c716:	069b      	lsls	r3, r3, #26
   2c718:	d508      	bpl.n	2c72c <seg_sent+0x1a>
	if (!tx->nack_count) {
   2c71a:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
   2c71e:	b12b      	cbz	r3, 2c72c <seg_sent+0x1a>
	k_work_reschedule(&tx->retransmit, K_NO_WAIT);
   2c720:	2200      	movs	r2, #0
   2c722:	2300      	movs	r3, #0
   2c724:	f101 0050 	add.w	r0, r1, #80	; 0x50
   2c728:	f7f9 bfa6 	b.w	26678 <k_work_reschedule>
}
   2c72c:	4770      	bx	lr

0002c72e <send_ack.isra.0>:
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   2c72e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_msg_ctx ctx = {
   2c730:	8c07      	ldrh	r7, [r0, #32]
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   2c732:	b08b      	sub	sp, #44	; 0x2c
   2c734:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   2c736:	f8ad 7010 	strh.w	r7, [sp, #16]
   2c73a:	2100      	movs	r1, #0
   2c73c:	f64f 77ff 	movw	r7, #65535	; 0xffff
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   2c740:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   2c744:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   2c748:	ab04      	add	r3, sp, #16
static int send_ack(struct bt_mesh_subnet *sub, uint16_t src, uint16_t dst,
   2c74a:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   2c74c:	f8cd 1016 	str.w	r1, [sp, #22]
   2c750:	f88d 101a 	strb.w	r1, [sp, #26]
   2c754:	f8ad 7012 	strh.w	r7, [sp, #18]
   2c758:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   2c75c:	9109      	str	r1, [sp, #36]	; 0x24
   2c75e:	9007      	str	r0, [sp, #28]
   2c760:	9308      	str	r3, [sp, #32]
   2c762:	b33c      	cbz	r4, 2c7b4 <send_ack.isra.0+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   2c764:	f7ec fdd6 	bl	19314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   2c768:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   2c76c:	f7e8 f9e4 	bl	14b38 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2c770:	b22d      	sxth	r5, r5
   2c772:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   2c774:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2c778:	dd1a      	ble.n	2c7b0 <send_ack.isra.0+0x82>
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   2c77a:	2100      	movs	r1, #0
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   2c77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   2c77e:	03e4      	lsls	r4, r4, #15
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   2c780:	881b      	ldrh	r3, [r3, #0]
	dst[0] = val >> 8;
   2c782:	0e32      	lsrs	r2, r6, #24
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   2c784:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2c788:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   2c78c:	0c33      	lsrs	r3, r6, #16
	dst[1] = val;
   2c78e:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
   2c792:	ba73      	rev16	r3, r6
   2c794:	ba64      	rev16	r4, r4
   2c796:	f88d 200a 	strb.w	r2, [sp, #10]
   2c79a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   2c79e:	e9cd 1100 	strd	r1, r1, [sp]
   2c7a2:	2306      	movs	r3, #6
   2c7a4:	aa02      	add	r2, sp, #8
   2c7a6:	a807      	add	r0, sp, #28
   2c7a8:	f8ad 4008 	strh.w	r4, [sp, #8]
   2c7ac:	f7ea ff34 	bl	17618 <bt_mesh_ctl_send>
}
   2c7b0:	b00b      	add	sp, #44	; 0x2c
   2c7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   2c7b4:	4628      	mov	r0, r5
   2c7b6:	e7d7      	b.n	2c768 <send_ack.isra.0+0x3a>

0002c7b8 <seg_ack>:
{
   2c7b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   2c7ba:	f810 3c11 	ldrb.w	r3, [r0, #-17]
{
   2c7be:	4604      	mov	r4, r0
	if (!rx->in_use || rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   2c7c0:	065a      	lsls	r2, r3, #25
   2c7c2:	d55b      	bpl.n	2c87c <seg_ack+0xc4>
   2c7c4:	2201      	movs	r2, #1
   2c7c6:	f003 031f 	and.w	r3, r3, #31
   2c7ca:	3301      	adds	r3, #1
   2c7cc:	fa02 f303 	lsl.w	r3, r2, r3
   2c7d0:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   2c7d4:	3b01      	subs	r3, #1
   2c7d6:	429a      	cmp	r2, r3
   2c7d8:	d050      	beq.n	2c87c <seg_ack+0xc4>
   2c7da:	f002 fec4 	bl	2f566 <z_impl_k_uptime_ticks>
   2c7de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c7e2:	fba0 0302 	umull	r0, r3, r0, r2
   2c7e6:	fb02 3101 	mla	r1, r2, r1, r3
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   2c7ea:	f854 2c08 	ldr.w	r2, [r4, #-8]
   2c7ee:	0bc3      	lsrs	r3, r0, #15
   2c7f0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   2c7f4:	1a9b      	subs	r3, r3, r2
   2c7f6:	f64e 2260 	movw	r2, #60000	; 0xea60
   2c7fa:	4293      	cmp	r3, r2
   2c7fc:	d907      	bls.n	2c80e <seg_ack+0x56>
		seg_rx_reset(rx, false);
   2c7fe:	2100      	movs	r1, #0
   2c800:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
}
   2c804:	b004      	add	sp, #16
   2c806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx, false);
   2c80a:	f7ea ba7b 	b.w	16d04 <seg_rx_reset>
		 rx->block, rx->obo);
   2c80e:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   2c812:	09db      	lsrs	r3, r3, #7
   2c814:	9302      	str	r3, [sp, #8]
   2c816:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2c81a:	9301      	str	r3, [sp, #4]
   2c81c:	f1a4 0320 	sub.w	r3, r4, #32
   2c820:	9300      	str	r3, [sp, #0]
   2c822:	f854 0c30 	ldr.w	r0, [r4, #-48]
   2c826:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   2c82a:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   2c82e:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   2c832:	f7ff ff7c 	bl	2c72e <send_ack.isra.0>
	timeout = ack_timeout(rx);
   2c836:	f814 0c10 	ldrb.w	r0, [r4, #-16]
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2c83a:	28ff      	cmp	r0, #255	; 0xff
   2c83c:	d101      	bne.n	2c842 <seg_ack+0x8a>
		ttl = bt_mesh_default_ttl_get();
   2c83e:	f7e8 f93b 	bl	14ab8 <bt_mesh_default_ttl_get>
	to = CONFIG_BT_MESH_SEG_ACK_BASE_TIMEOUT +
   2c842:	2396      	movs	r3, #150	; 0x96
   2c844:	2532      	movs	r5, #50	; 0x32
   2c846:	fb15 3500 	smlabb	r5, r5, r0, r3
	return MAX(to, 400);
   2c84a:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   2c84e:	bfb8      	it	lt
   2c850:	f44f 75c8 	movlt.w	r5, #400	; 0x190
   2c854:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c858:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c85c:	2100      	movs	r1, #0
   2c85e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c862:	2300      	movs	r3, #0
   2c864:	fbc5 0106 	smlal	r0, r1, r5, r6
   2c868:	f7db fc74 	bl	8154 <__aeabi_uldivmod>
   2c86c:	4602      	mov	r2, r0
   2c86e:	460b      	mov	r3, r1
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   2c870:	4620      	mov	r0, r4
}
   2c872:	b004      	add	sp, #16
   2c874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&rx->ack, K_MSEC(timeout));
   2c878:	f7f9 be9a 	b.w	265b0 <k_work_schedule>
}
   2c87c:	b004      	add	sp, #16
   2c87e:	bd70      	pop	{r4, r5, r6, pc}

0002c880 <hb_unsolicited_pub_end_cb>:
	if (!err) {
   2c880:	b908      	cbnz	r0, 2c886 <hb_unsolicited_pub_end_cb+0x6>
		notify_pub_sent();
   2c882:	f7eb bcad 	b.w	181e0 <notify_pub_sent>
}
   2c886:	4770      	bx	lr

0002c888 <hb_publish_start_cb>:
{
   2c888:	4608      	mov	r0, r1
   2c88a:	4611      	mov	r1, r2
	if (err) {
   2c88c:	b108      	cbz	r0, 2c892 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   2c88e:	f7eb bcc9 	b.w	18224 <hb_publish_end_cb>
}
   2c892:	4770      	bx	lr

0002c894 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2c894:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2c896:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   2c898:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   2c89a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2c89e:	700a      	strb	r2, [r1, #0]
   2c8a0:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2c8a2:	70c8      	strb	r0, [r1, #3]
}
   2c8a4:	4770      	bx	lr

0002c8a6 <create_app_nonce>:
{
   2c8a6:	b538      	push	{r3, r4, r5, lr}
   2c8a8:	460c      	mov	r4, r1
   2c8aa:	780b      	ldrb	r3, [r1, #0]
   2c8ac:	4601      	mov	r1, r0
   2c8ae:	4605      	mov	r5, r0
   2c8b0:	3301      	adds	r3, #1
   2c8b2:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   2c8b6:	68a3      	ldr	r3, [r4, #8]
   2c8b8:	7860      	ldrb	r0, [r4, #1]
   2c8ba:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   2c8be:	f7ff ffe9 	bl	2c894 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   2c8c2:	8863      	ldrh	r3, [r4, #2]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2c8c4:	f105 0109 	add.w	r1, r5, #9
	dst[0] = val >> 8;
   2c8c8:	0a1a      	lsrs	r2, r3, #8
   2c8ca:	716a      	strb	r2, [r5, #5]
	dst[1] = val;
   2c8cc:	71ab      	strb	r3, [r5, #6]
	sys_put_be16(ctx->dst, &nonce[7]);
   2c8ce:	88a3      	ldrh	r3, [r4, #4]
	dst[0] = val >> 8;
   2c8d0:	0a1a      	lsrs	r2, r3, #8
   2c8d2:	71ea      	strb	r2, [r5, #7]
	dst[1] = val;
   2c8d4:	722b      	strb	r3, [r5, #8]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2c8d6:	68e0      	ldr	r0, [r4, #12]
}
   2c8d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2c8dc:	f7ff bfda 	b.w	2c894 <sys_put_be32>

0002c8e0 <bt_mesh_aes_cmac>:
{
   2c8e0:	b570      	push	{r4, r5, r6, lr}
   2c8e2:	b0c2      	sub	sp, #264	; 0x108
   2c8e4:	460c      	mov	r4, r1
   2c8e6:	4615      	mov	r5, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c8e8:	4601      	mov	r1, r0
   2c8ea:	aa16      	add	r2, sp, #88	; 0x58
   2c8ec:	4668      	mov	r0, sp
{
   2c8ee:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c8f0:	f7fd f987 	bl	29c02 <tc_cmac_setup>
   2c8f4:	b918      	cbnz	r0, 2c8fe <bt_mesh_aes_cmac+0x1e>
		return -EIO;
   2c8f6:	f06f 0004 	mvn.w	r0, #4
}
   2c8fa:	b042      	add	sp, #264	; 0x108
   2c8fc:	bd70      	pop	{r4, r5, r6, pc}
   2c8fe:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
		if (tc_cmac_update(&state, sg->data,
   2c902:	4668      	mov	r0, sp
   2c904:	e9d4 1200 	ldrd	r1, r2, [r4]
   2c908:	f7fd f9a6 	bl	29c58 <tc_cmac_update>
   2c90c:	2800      	cmp	r0, #0
   2c90e:	d0f2      	beq.n	2c8f6 <bt_mesh_aes_cmac+0x16>
	for (; sg_len; sg_len--, sg++) {
   2c910:	3408      	adds	r4, #8
   2c912:	42ac      	cmp	r4, r5
   2c914:	d1f5      	bne.n	2c902 <bt_mesh_aes_cmac+0x22>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   2c916:	4669      	mov	r1, sp
   2c918:	4630      	mov	r0, r6
   2c91a:	f7fd fa07 	bl	29d2c <tc_cmac_final>
   2c91e:	2800      	cmp	r0, #0
   2c920:	d0e9      	beq.n	2c8f6 <bt_mesh_aes_cmac+0x16>
	return 0;
   2c922:	2000      	movs	r0, #0
   2c924:	e7e9      	b.n	2c8fa <bt_mesh_aes_cmac+0x1a>

0002c926 <bt_mesh_aes_cmac_one>:
{
   2c926:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   2c928:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   2c92c:	2201      	movs	r2, #1
   2c92e:	4669      	mov	r1, sp
   2c930:	f7ff ffd6 	bl	2c8e0 <bt_mesh_aes_cmac>
}
   2c934:	b003      	add	sp, #12
   2c936:	f85d fb04 	ldr.w	pc, [sp], #4

0002c93a <bt_mesh_s1>:
	const uint8_t zero[16] = { 0 };
   2c93a:	2200      	movs	r2, #0
{
   2c93c:	b530      	push	{r4, r5, lr}
   2c93e:	b085      	sub	sp, #20
   2c940:	460d      	mov	r5, r1
   2c942:	4604      	mov	r4, r0
	const uint8_t zero[16] = { 0 };
   2c944:	e9cd 2200 	strd	r2, r2, [sp]
   2c948:	e9cd 2202 	strd	r2, r2, [sp, #8]
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   2c94c:	f7fd fd8f 	bl	2a46e <strlen>
   2c950:	462b      	mov	r3, r5
   2c952:	4602      	mov	r2, r0
   2c954:	4621      	mov	r1, r4
   2c956:	4668      	mov	r0, sp
   2c958:	f7ff ffe5 	bl	2c926 <bt_mesh_aes_cmac_one>
}
   2c95c:	b005      	add	sp, #20
   2c95e:	bd30      	pop	{r4, r5, pc}

0002c960 <bt_mesh_k1>:
{
   2c960:	b570      	push	{r4, r5, r6, lr}
   2c962:	4606      	mov	r6, r0
   2c964:	9d04      	ldr	r5, [sp, #16]
   2c966:	4610      	mov	r0, r2
   2c968:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2c96a:	460a      	mov	r2, r1
   2c96c:	462b      	mov	r3, r5
   2c96e:	4631      	mov	r1, r6
   2c970:	f7ff ffd9 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   2c974:	2800      	cmp	r0, #0
   2c976:	db0a      	blt.n	2c98e <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2c978:	4620      	mov	r0, r4
   2c97a:	f7fd fd78 	bl	2a46e <strlen>
   2c97e:	462b      	mov	r3, r5
   2c980:	4602      	mov	r2, r0
   2c982:	4621      	mov	r1, r4
   2c984:	4628      	mov	r0, r5
}
   2c986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2c98a:	f7ff bfcc 	b.w	2c926 <bt_mesh_aes_cmac_one>
}
   2c98e:	bd70      	pop	{r4, r5, r6, pc}

0002c990 <bt_mesh_net_encrypt>:
{
   2c990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2c994:	680c      	ldr	r4, [r1, #0]
{
   2c996:	4607      	mov	r7, r0
   2c998:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2c99a:	f994 2001 	ldrsb.w	r2, [r4, #1]
{
   2c99e:	460d      	mov	r5, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2c9a0:	2a00      	cmp	r2, #0
   2c9a2:	bfb4      	ite	lt
   2c9a4:	2608      	movlt	r6, #8
   2c9a6:	2604      	movge	r6, #4
   2c9a8:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   2c9ac:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   2c9b0:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   2c9b4:	f894 c004 	ldrb.w	ip, [r4, #4]
	nonce[5] = pdu[5];
   2c9b8:	7961      	ldrb	r1, [r4, #5]
	nonce[6] = pdu[6];
   2c9ba:	79a2      	ldrb	r2, [r4, #6]
{
   2c9bc:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2c9be:	b35b      	cbz	r3, 2ca18 <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   2c9c0:	2303      	movs	r3, #3
   2c9c2:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[7] = 0U;
   2c9c6:	2300      	movs	r3, #0
	nonce[2] = pdu[2];
   2c9c8:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2c9cc:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2c9d0:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2c9d4:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   2c9d8:	f88d 2016 	strb.w	r2, [sp, #22]
	sys_put_be32(iv_index, &nonce[9]);
   2c9dc:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2c9e0:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2c9e4:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2c9e8:	f7ff ff54 	bl	2c894 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2c9ec:	2100      	movs	r1, #0
   2c9ee:	88ab      	ldrh	r3, [r5, #4]
   2c9f0:	1de2      	adds	r2, r4, #7
   2c9f2:	e9cd 1100 	strd	r1, r1, [sp]
   2c9f6:	4638      	mov	r0, r7
   2c9f8:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2c9fc:	3b07      	subs	r3, #7
   2c9fe:	a904      	add	r1, sp, #16
   2ca00:	f7fd ff47 	bl	2a892 <bt_ccm_encrypt>
	if (!err) {
   2ca04:	4604      	mov	r4, r0
   2ca06:	b918      	cbnz	r0, 2ca10 <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   2ca08:	4631      	mov	r1, r6
   2ca0a:	4628      	mov	r0, r5
   2ca0c:	f7f3 fca0 	bl	20350 <net_buf_simple_add>
}
   2ca10:	4620      	mov	r0, r4
   2ca12:	b009      	add	sp, #36	; 0x24
   2ca14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2ca18:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2ca1c:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2ca20:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2ca24:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2ca28:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2ca2c:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   2ca30:	f88d 2016 	strb.w	r2, [sp, #22]
   2ca34:	e7d2      	b.n	2c9dc <bt_mesh_net_encrypt+0x4c>

0002ca36 <bt_mesh_net_decrypt>:
{
   2ca36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2ca3a:	680c      	ldr	r4, [r1, #0]
{
   2ca3c:	4605      	mov	r5, r0
   2ca3e:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2ca40:	f994 2001 	ldrsb.w	r2, [r4, #1]
{
   2ca44:	460f      	mov	r7, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2ca46:	2a00      	cmp	r2, #0
   2ca48:	bfb4      	ite	lt
   2ca4a:	2608      	movlt	r6, #8
   2ca4c:	2604      	movge	r6, #4
   2ca4e:	f894 9001 	ldrb.w	r9, [r4, #1]
	nonce[2] = pdu[2];
   2ca52:	f894 8002 	ldrb.w	r8, [r4, #2]
	nonce[3] = pdu[3];
   2ca56:	f894 e003 	ldrb.w	lr, [r4, #3]
	nonce[4] = pdu[4];
   2ca5a:	f894 c004 	ldrb.w	ip, [r4, #4]
	nonce[5] = pdu[5];
   2ca5e:	7961      	ldrb	r1, [r4, #5]
	nonce[6] = pdu[6];
   2ca60:	79a2      	ldrb	r2, [r4, #6]
{
   2ca62:	b089      	sub	sp, #36	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2ca64:	b33b      	cbz	r3, 2cab6 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   2ca66:	2303      	movs	r3, #3
   2ca68:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[7] = 0U;
   2ca6c:	2300      	movs	r3, #0
	nonce[2] = pdu[2];
   2ca6e:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2ca72:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2ca76:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2ca7a:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   2ca7e:	f88d 2016 	strb.w	r2, [sp, #22]
	sys_put_be32(iv_index, &nonce[9]);
   2ca82:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2ca86:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2ca8a:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2ca8e:	f7ff ff01 	bl	2c894 <sys_put_be32>
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ca92:	2100      	movs	r1, #0
	buf->len -= mic_len;
   2ca94:	88bb      	ldrh	r3, [r7, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ca96:	1de2      	adds	r2, r4, #7
	buf->len -= mic_len;
   2ca98:	1b9b      	subs	r3, r3, r6
   2ca9a:	b29b      	uxth	r3, r3
   2ca9c:	80bb      	strh	r3, [r7, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ca9e:	4628      	mov	r0, r5
   2caa0:	e9cd 1100 	strd	r1, r1, [sp]
   2caa4:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2caa8:	3b07      	subs	r3, #7
   2caaa:	a904      	add	r1, sp, #16
   2caac:	f7fd febc 	bl	2a828 <bt_ccm_decrypt>
}
   2cab0:	b009      	add	sp, #36	; 0x24
   2cab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2cab6:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2caba:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2cabe:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2cac2:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2cac6:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2caca:	f88d 1015 	strb.w	r1, [sp, #21]
	nonce[6] = pdu[6];
   2cace:	f88d 2016 	strb.w	r2, [sp, #22]
   2cad2:	e7d6      	b.n	2ca82 <bt_mesh_net_decrypt+0x4c>

0002cad4 <bt_mesh_app_encrypt>:
{
   2cad4:	b570      	push	{r4, r5, r6, lr}
   2cad6:	460d      	mov	r5, r1
   2cad8:	b088      	sub	sp, #32
   2cada:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   2cadc:	a804      	add	r0, sp, #16
{
   2cade:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   2cae0:	f7ff fee1 	bl	2c8a6 <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2cae4:	6929      	ldr	r1, [r5, #16]
   2cae6:	7868      	ldrb	r0, [r5, #1]
   2cae8:	1e0b      	subs	r3, r1, #0
   2caea:	bf18      	it	ne
   2caec:	2301      	movne	r3, #1
   2caee:	2800      	cmp	r0, #0
   2caf0:	bf0c      	ite	eq
   2caf2:	2004      	moveq	r0, #4
   2caf4:	2008      	movne	r0, #8
   2caf6:	6822      	ldr	r2, [r4, #0]
   2caf8:	011b      	lsls	r3, r3, #4
   2cafa:	e9cd 2002 	strd	r2, r0, [sp, #8]
   2cafe:	e9cd 1300 	strd	r1, r3, [sp]
   2cb02:	4630      	mov	r0, r6
   2cb04:	88a3      	ldrh	r3, [r4, #4]
   2cb06:	a904      	add	r1, sp, #16
   2cb08:	f7fd fec3 	bl	2a892 <bt_ccm_encrypt>
	if (!err) {
   2cb0c:	4606      	mov	r6, r0
   2cb0e:	b938      	cbnz	r0, 2cb20 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   2cb10:	786b      	ldrb	r3, [r5, #1]
   2cb12:	4620      	mov	r0, r4
   2cb14:	2b00      	cmp	r3, #0
   2cb16:	bf0c      	ite	eq
   2cb18:	2104      	moveq	r1, #4
   2cb1a:	2108      	movne	r1, #8
   2cb1c:	f7f3 fc18 	bl	20350 <net_buf_simple_add>
}
   2cb20:	4630      	mov	r0, r6
   2cb22:	b008      	add	sp, #32
   2cb24:	bd70      	pop	{r4, r5, r6, pc}

0002cb26 <bt_mesh_app_decrypt>:
{
   2cb26:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cb28:	460d      	mov	r5, r1
   2cb2a:	b089      	sub	sp, #36	; 0x24
   2cb2c:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   2cb2e:	a804      	add	r0, sp, #16
{
   2cb30:	4614      	mov	r4, r2
   2cb32:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   2cb34:	f7ff feb7 	bl	2c8a6 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2cb38:	692a      	ldr	r2, [r5, #16]
   2cb3a:	7868      	ldrb	r0, [r5, #1]
   2cb3c:	1e13      	subs	r3, r2, #0
   2cb3e:	bf18      	it	ne
   2cb40:	2301      	movne	r3, #1
   2cb42:	2800      	cmp	r0, #0
   2cb44:	bf0c      	ite	eq
   2cb46:	2004      	moveq	r0, #4
   2cb48:	2008      	movne	r0, #8
   2cb4a:	6831      	ldr	r1, [r6, #0]
   2cb4c:	011b      	lsls	r3, r3, #4
   2cb4e:	e9cd 1002 	strd	r1, r0, [sp, #8]
   2cb52:	e9cd 2300 	strd	r2, r3, [sp]
   2cb56:	4638      	mov	r0, r7
   2cb58:	88a3      	ldrh	r3, [r4, #4]
   2cb5a:	6822      	ldr	r2, [r4, #0]
   2cb5c:	a904      	add	r1, sp, #16
   2cb5e:	f7fd fe63 	bl	2a828 <bt_ccm_decrypt>
	if (!err) {
   2cb62:	4605      	mov	r5, r0
   2cb64:	b918      	cbnz	r0, 2cb6e <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   2cb66:	4630      	mov	r0, r6
   2cb68:	88a1      	ldrh	r1, [r4, #4]
   2cb6a:	f7f3 fbf1 	bl	20350 <net_buf_simple_add>
}
   2cb6e:	4628      	mov	r0, r5
   2cb70:	b009      	add	sp, #36	; 0x24
   2cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cb74 <bt_mesh_prov_salt>:
{
   2cb74:	b510      	push	{r4, lr}
   2cb76:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_sg sg[] = {
   2cb78:	9004      	str	r0, [sp, #16]
   2cb7a:	2010      	movs	r0, #16
	const uint8_t prov_salt_key[16] = { 0 };
   2cb7c:	2400      	movs	r4, #0
	struct bt_mesh_sg sg[] = {
   2cb7e:	e9cd 0105 	strd	r0, r1, [sp, #20]
   2cb82:	e9cd 0207 	strd	r0, r2, [sp, #28]
   2cb86:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   2cb88:	eb0d 0100 	add.w	r1, sp, r0
   2cb8c:	2203      	movs	r2, #3
   2cb8e:	4668      	mov	r0, sp
	const uint8_t prov_salt_key[16] = { 0 };
   2cb90:	e9cd 4400 	strd	r4, r4, [sp]
   2cb94:	e9cd 4402 	strd	r4, r4, [sp, #8]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   2cb98:	f7ff fea2 	bl	2c8e0 <bt_mesh_aes_cmac>
}
   2cb9c:	b00a      	add	sp, #40	; 0x28
   2cb9e:	bd10      	pop	{r4, pc}

0002cba0 <bt_mesh_prov_conf_salt>:
{
   2cba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const uint8_t conf_salt_key[16] = { 0 };
   2cba2:	2200      	movs	r2, #0
{
   2cba4:	460b      	mov	r3, r1
	const uint8_t conf_salt_key[16] = { 0 };
   2cba6:	e9cd 2200 	strd	r2, r2, [sp]
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2cbaa:	4601      	mov	r1, r0
	const uint8_t conf_salt_key[16] = { 0 };
   2cbac:	e9cd 2202 	strd	r2, r2, [sp, #8]
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2cbb0:	4668      	mov	r0, sp
   2cbb2:	2291      	movs	r2, #145	; 0x91
   2cbb4:	f7ff feb7 	bl	2c926 <bt_mesh_aes_cmac_one>
}
   2cbb8:	b005      	add	sp, #20
   2cbba:	f85d fb04 	ldr.w	pc, [sp], #4

0002cbbe <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   2cbbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2cbc0:	9100      	str	r1, [sp, #0]
   2cbc2:	2110      	movs	r1, #16
   2cbc4:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2cbc8:	9103      	str	r1, [sp, #12]

	LOG_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	LOG_DBG("RandomDevice %s", bt_hex(rand, 16));
	LOG_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   2cbca:	2202      	movs	r2, #2
   2cbcc:	4669      	mov	r1, sp
   2cbce:	f7ff fe87 	bl	2c8e0 <bt_mesh_aes_cmac>
}
   2cbd2:	b005      	add	sp, #20
   2cbd4:	f85d fb04 	ldr.w	pc, [sp], #4

0002cbd8 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   2cbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   2cbda:	2408      	movs	r4, #8
   2cbdc:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2cbe0:	2300      	movs	r3, #0
   2cbe2:	e9cd 3300 	strd	r3, r3, [sp]
   2cbe6:	2319      	movs	r3, #25
   2cbe8:	f7fd fe1e 	bl	2a828 <bt_ccm_decrypt>
}
   2cbec:	b004      	add	sp, #16
   2cbee:	bd10      	pop	{r4, pc}

0002cbf0 <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2cbf0:	b530      	push	{r4, r5, lr}
   2cbf2:	4604      	mov	r4, r0
   2cbf4:	4608      	mov	r0, r1
   2cbf6:	461d      	mov	r5, r3
   2cbf8:	b089      	sub	sp, #36	; 0x24
   2cbfa:	4611      	mov	r1, r2

	LOG_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	LOG_DBG("NetId %s", bt_hex(net_id, 8));
	LOG_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   2cbfc:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   2cc00:	2208      	movs	r2, #8
   2cc02:	f10d 0001 	add.w	r0, sp, #1
   2cc06:	f7fd fc88 	bl	2a51a <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   2cc0a:	4628      	mov	r0, r5
   2cc0c:	f10d 0109 	add.w	r1, sp, #9
   2cc10:	f7ff fe40 	bl	2c894 <sys_put_be32>

	LOG_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2cc14:	4620      	mov	r0, r4
   2cc16:	220d      	movs	r2, #13
   2cc18:	4669      	mov	r1, sp
   2cc1a:	ab04      	add	r3, sp, #16
   2cc1c:	f7ff fe83 	bl	2c926 <bt_mesh_aes_cmac_one>
	if (!err) {
   2cc20:	4604      	mov	r4, r0
   2cc22:	b920      	cbnz	r0, 2cc2e <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   2cc24:	2208      	movs	r2, #8
   2cc26:	980c      	ldr	r0, [sp, #48]	; 0x30
   2cc28:	a904      	add	r1, sp, #16
   2cc2a:	f7fd fc76 	bl	2a51a <memcpy>
	}

	return err;
}
   2cc2e:	4620      	mov	r0, r4
   2cc30:	b009      	add	sp, #36	; 0x24
   2cc32:	bd30      	pop	{r4, r5, pc}

0002cc34 <model_group_get>:
{
   2cc34:	4602      	mov	r2, r0
	for (i = 0; i < mod->groups_cnt; i++) {
   2cc36:	2300      	movs	r3, #0
{
   2cc38:	b530      	push	{r4, r5, lr}
	for (i = 0; i < mod->groups_cnt; i++) {
   2cc3a:	8b05      	ldrh	r5, [r0, #24]
   2cc3c:	429d      	cmp	r5, r3
   2cc3e:	dc01      	bgt.n	2cc44 <model_group_get+0x10>
	return NULL;
   2cc40:	2000      	movs	r0, #0
}
   2cc42:	bd30      	pop	{r4, r5, pc}
		if (mod->groups[i] == addr) {
   2cc44:	6954      	ldr	r4, [r2, #20]
   2cc46:	eb04 0043 	add.w	r0, r4, r3, lsl #1
   2cc4a:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
   2cc4e:	428c      	cmp	r4, r1
   2cc50:	d0f7      	beq.n	2cc42 <model_group_get+0xe>
	for (i = 0; i < mod->groups_cnt; i++) {
   2cc52:	3301      	adds	r3, #1
   2cc54:	e7f2      	b.n	2cc3c <model_group_get+0x8>

0002cc56 <find_group_mod_visitor>:
{
   2cc56:	b538      	push	{r3, r4, r5, lr}
	if (mod->elem_idx != ctx->mod->elem_idx) {
   2cc58:	684b      	ldr	r3, [r1, #4]
   2cc5a:	7902      	ldrb	r2, [r0, #4]
   2cc5c:	791b      	ldrb	r3, [r3, #4]
{
   2cc5e:	4605      	mov	r5, r0
	if (mod->elem_idx != ctx->mod->elem_idx) {
   2cc60:	429a      	cmp	r2, r3
{
   2cc62:	460c      	mov	r4, r1
	if (mod->elem_idx != ctx->mod->elem_idx) {
   2cc64:	d001      	beq.n	2cc6a <find_group_mod_visitor+0x14>
		return BT_MESH_WALK_CONTINUE;
   2cc66:	2001      	movs	r0, #1
}
   2cc68:	bd38      	pop	{r3, r4, r5, pc}
	ctx->entry = model_group_get(mod, ctx->addr);
   2cc6a:	8909      	ldrh	r1, [r1, #8]
   2cc6c:	f7ff ffe2 	bl	2cc34 <model_group_get>
   2cc70:	6020      	str	r0, [r4, #0]
	if (ctx->entry) {
   2cc72:	2800      	cmp	r0, #0
   2cc74:	d0f7      	beq.n	2cc66 <find_group_mod_visitor+0x10>
		return BT_MESH_WALK_STOP;
   2cc76:	2000      	movs	r0, #0
		ctx->mod = mod;
   2cc78:	6065      	str	r5, [r4, #4]
		return BT_MESH_WALK_STOP;
   2cc7a:	e7f5      	b.n	2cc68 <find_group_mod_visitor+0x12>

0002cc7c <k_uptime_get_32>:
{
   2cc7c:	b508      	push	{r3, lr}
   2cc7e:	f002 fc72 	bl	2f566 <z_impl_k_uptime_ticks>
   2cc82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2cc86:	fba0 0302 	umull	r0, r3, r0, r2
   2cc8a:	fb02 3301 	mla	r3, r2, r1, r3
   2cc8e:	0bc0      	lsrs	r0, r0, #15
}
   2cc90:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2cc94:	bd08      	pop	{r3, pc}

0002cc96 <z_log_msg_static_create.constprop.0>:
   2cc96:	2300      	movs	r3, #0
   2cc98:	f7dd bf60 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002cc9c <publish_sent>:
{
   2cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cca0:	460e      	mov	r6, r1
	struct bt_mesh_model_pub *pub = mod->pub;
   2cca2:	688c      	ldr	r4, [r1, #8]
	elapsed = k_uptime_get_32() - pub->period_start;
   2cca4:	f7ff ffea 	bl	2cc7c <k_uptime_get_32>
   2cca8:	68e4      	ldr	r4, [r4, #12]
	if (mod->pub->count) {
   2ccaa:	68b5      	ldr	r5, [r6, #8]
	elapsed = k_uptime_get_32() - pub->period_start;
   2ccac:	4601      	mov	r1, r0
   2ccae:	1b07      	subs	r7, r0, r4
	if (mod->pub->count) {
   2ccb0:	7ae8      	ldrb	r0, [r5, #11]
   2ccb2:	280f      	cmp	r0, #15
   2ccb4:	d927      	bls.n	2cd06 <publish_sent+0x6a>
		period = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   2ccb6:	2332      	movs	r3, #50	; 0x32
   2ccb8:	7a6a      	ldrb	r2, [r5, #9]
   2ccba:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
   2ccbe:	fb0c 3303 	mla	r3, ip, r3, r3
		period *= BT_MESH_PUB_MSG_NUM(mod->pub);
   2ccc2:	f002 0207 	and.w	r2, r2, #7
   2ccc6:	3201      	adds	r2, #1
   2ccc8:	eba2 1210 	sub.w	r2, r2, r0, lsr #4
		if (period && elapsed >= period) {
   2cccc:	4353      	muls	r3, r2
   2ccce:	d01a      	beq.n	2cd06 <publish_sent+0x6a>
   2ccd0:	429f      	cmp	r7, r3
	if (elapsed >= period) {
   2ccd2:	d21f      	bcs.n	2cd14 <publish_sent+0x78>
	return period - elapsed;
   2ccd4:	1a60      	subs	r0, r4, r1
	if (delay) {
   2ccd6:	18c0      	adds	r0, r0, r3
   2ccd8:	d01e      	beq.n	2cd18 <publish_sent+0x7c>
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   2ccda:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   2ccde:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2cce2:	f240 30e7 	movw	r0, #999	; 0x3e7
   2cce6:	2100      	movs	r1, #0
   2cce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ccec:	2300      	movs	r3, #0
   2ccee:	fbc4 0106 	smlal	r0, r1, r4, r6
   2ccf2:	f7db fa2f 	bl	8154 <__aeabi_uldivmod>
   2ccf6:	4602      	mov	r2, r0
   2ccf8:	460b      	mov	r3, r1
   2ccfa:	f105 0018 	add.w	r0, r5, #24
}
   2ccfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&mod->pub->timer, K_MSEC(delay));
   2cd02:	f7f9 bc55 	b.w	265b0 <k_work_schedule>
		period = bt_mesh_model_pub_period_get(mod);
   2cd06:	4630      	mov	r0, r6
   2cd08:	f7ec f864 	bl	18dd4 <bt_mesh_model_pub_period_get>
   2cd0c:	4603      	mov	r3, r0
		if (!period) {
   2cd0e:	b118      	cbz	r0, 2cd18 <publish_sent+0x7c>
	if (elapsed >= period) {
   2cd10:	4287      	cmp	r7, r0
   2cd12:	e7de      	b.n	2ccd2 <publish_sent+0x36>
			return 1;
   2cd14:	2001      	movs	r0, #1
   2cd16:	e7e0      	b.n	2ccda <publish_sent+0x3e>
}
   2cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cd1c <publish_start>:
{
   2cd1c:	4608      	mov	r0, r1
   2cd1e:	4611      	mov	r1, r2
	if (err) {
   2cd20:	b108      	cbz	r0, 2cd26 <publish_start+0xa>
   2cd22:	f7ec b87f 	b.w	18e24 <publish_start.part.0>
}
   2cd26:	4770      	bx	lr

0002cd28 <commit_mod>:
{
   2cd28:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   2cd2a:	6885      	ldr	r5, [r0, #8]
   2cd2c:	b1dd      	cbz	r5, 2cd66 <commit_mod+0x3e>
   2cd2e:	696b      	ldr	r3, [r5, #20]
   2cd30:	b1cb      	cbz	r3, 2cd66 <commit_mod+0x3e>
   2cd32:	88ab      	ldrh	r3, [r5, #4]
   2cd34:	b1bb      	cbz	r3, 2cd66 <commit_mod+0x3e>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   2cd36:	f7ec f84d 	bl	18dd4 <bt_mesh_model_pub_period_get>
		if (ms > 0) {
   2cd3a:	1e04      	subs	r4, r0, #0
   2cd3c:	dd13      	ble.n	2cd66 <commit_mod+0x3e>
   2cd3e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2cd42:	f240 30e7 	movw	r0, #999	; 0x3e7
   2cd46:	2100      	movs	r1, #0
   2cd48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2cd4c:	2300      	movs	r3, #0
   2cd4e:	fbc4 0106 	smlal	r0, r1, r4, r6
   2cd52:	f7db f9ff 	bl	8154 <__aeabi_uldivmod>
   2cd56:	4602      	mov	r2, r0
   2cd58:	460b      	mov	r3, r1
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   2cd5a:	f105 0018 	add.w	r0, r5, #24
}
   2cd5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&mod->pub->timer, K_MSEC(ms));
   2cd62:	f7f9 bc25 	b.w	265b0 <k_work_schedule>
}
   2cd66:	bd70      	pop	{r4, r5, r6, pc}

0002cd68 <bt_mesh_access_send>:
{
   2cd68:	b530      	push	{r4, r5, lr}
   2cd6a:	461d      	mov	r5, r3
	struct bt_mesh_net_tx tx = {
   2cd6c:	2300      	movs	r3, #0
{
   2cd6e:	b085      	sub	sp, #20
	struct bt_mesh_net_tx tx = {
   2cd70:	e9cd 0302 	strd	r0, r3, [sp, #8]
{
   2cd74:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   2cd76:	9301      	str	r3, [sp, #4]
   2cd78:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   2cd7c:	f7e7 fd1a 	bl	147b4 <bt_mesh_is_provisioned>
   2cd80:	b918      	cbnz	r0, 2cd8a <bt_mesh_access_send+0x22>
   2cd82:	f7eb fe67 	bl	18a54 <bt_mesh_access_send.part.0>
}
   2cd86:	b005      	add	sp, #20
   2cd88:	bd30      	pop	{r4, r5, pc}
	return bt_mesh_trans_send(&tx, buf, cb, cb_data);
   2cd8a:	462a      	mov	r2, r5
   2cd8c:	4621      	mov	r1, r4
   2cd8e:	9b08      	ldr	r3, [sp, #32]
   2cd90:	a801      	add	r0, sp, #4
   2cd92:	f7ea fd33 	bl	177fc <bt_mesh_trans_send>
   2cd96:	e7f6      	b.n	2cd86 <bt_mesh_access_send+0x1e>

0002cd98 <bt_mesh_model_has_key>:
{
   2cd98:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < mod->keys_cnt; i++) {
   2cd9a:	2300      	movs	r3, #0
		if (mod->keys[i] == key ||
   2cd9c:	f64f 76fc 	movw	r6, #65532	; 0xfffc
		     BT_MESH_IS_DEV_KEY(key))) {
   2cda0:	1cca      	adds	r2, r1, #3
	for (i = 0; i < mod->keys_cnt; i++) {
   2cda2:	8a05      	ldrh	r5, [r0, #16]
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   2cda4:	b292      	uxth	r2, r2
	for (i = 0; i < mod->keys_cnt; i++) {
   2cda6:	429d      	cmp	r5, r3
   2cda8:	dc01      	bgt.n	2cdae <bt_mesh_model_has_key+0x16>
	return false;
   2cdaa:	2000      	movs	r0, #0
}
   2cdac:	bd70      	pop	{r4, r5, r6, pc}
		if (mod->keys[i] == key ||
   2cdae:	68c4      	ldr	r4, [r0, #12]
   2cdb0:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
   2cdb4:	428c      	cmp	r4, r1
   2cdb6:	d005      	beq.n	2cdc4 <bt_mesh_model_has_key+0x2c>
   2cdb8:	42b4      	cmp	r4, r6
   2cdba:	d101      	bne.n	2cdc0 <bt_mesh_model_has_key+0x28>
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   2cdbc:	2a01      	cmp	r2, #1
   2cdbe:	d901      	bls.n	2cdc4 <bt_mesh_model_has_key+0x2c>
	for (i = 0; i < mod->keys_cnt; i++) {
   2cdc0:	3301      	adds	r3, #1
   2cdc2:	e7f0      	b.n	2cda6 <bt_mesh_model_has_key+0xe>
			return true;
   2cdc4:	2001      	movs	r0, #1
   2cdc6:	e7f1      	b.n	2cdac <bt_mesh_model_has_key+0x14>

0002cdc8 <bt_mesh_model_find_vnd>:
{
   2cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2cdca:	2300      	movs	r3, #0
{
   2cdcc:	4604      	mov	r4, r0
		if (elem->vnd_models[i].vnd.company == company &&
   2cdce:	f04f 0c28 	mov.w	ip, #40	; 0x28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2cdd2:	7947      	ldrb	r7, [r0, #5]
   2cdd4:	b2d8      	uxtb	r0, r3
   2cdd6:	4287      	cmp	r7, r0
   2cdd8:	d801      	bhi.n	2cdde <bt_mesh_model_find_vnd+0x16>
	return NULL;
   2cdda:	2000      	movs	r0, #0
}
   2cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2cdde:	fb0c f503 	mul.w	r5, ip, r3
   2cde2:	68e6      	ldr	r6, [r4, #12]
   2cde4:	1970      	adds	r0, r6, r5
   2cde6:	5b75      	ldrh	r5, [r6, r5]
   2cde8:	428d      	cmp	r5, r1
   2cdea:	d102      	bne.n	2cdf2 <bt_mesh_model_find_vnd+0x2a>
   2cdec:	8845      	ldrh	r5, [r0, #2]
   2cdee:	4295      	cmp	r5, r2
   2cdf0:	d0f4      	beq.n	2cddc <bt_mesh_model_find_vnd+0x14>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2cdf2:	3301      	adds	r3, #1
   2cdf4:	e7ee      	b.n	2cdd4 <bt_mesh_model_find_vnd+0xc>

0002cdf6 <bt_mesh_model_find>:
{
   2cdf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cdf8:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   2cdfa:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   2cdfc:	2728      	movs	r7, #40	; 0x28
	for (i = 0U; i < elem->model_count; i++) {
   2cdfe:	7906      	ldrb	r6, [r0, #4]
   2ce00:	b2d8      	uxtb	r0, r3
   2ce02:	4286      	cmp	r6, r0
   2ce04:	d801      	bhi.n	2ce0a <bt_mesh_model_find+0x14>
	return NULL;
   2ce06:	2000      	movs	r0, #0
   2ce08:	e007      	b.n	2ce1a <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   2ce0a:	fb07 f403 	mul.w	r4, r7, r3
   2ce0e:	6895      	ldr	r5, [r2, #8]
   2ce10:	3301      	adds	r3, #1
   2ce12:	1928      	adds	r0, r5, r4
   2ce14:	5b2c      	ldrh	r4, [r5, r4]
   2ce16:	428c      	cmp	r4, r1
   2ce18:	d1f2      	bne.n	2ce00 <bt_mesh_model_find+0xa>
}
   2ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ce1c <bt_mesh_model_extensions_walk>:
{
   2ce1c:	460b      	mov	r3, r1
	(void)cb(model, user_data);
   2ce1e:	4611      	mov	r1, r2
   2ce20:	4718      	bx	r3

0002ce22 <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   2ce22:	88c3      	ldrh	r3, [r0, #6]
   2ce24:	f043 0301 	orr.w	r3, r3, #1
   2ce28:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ce2a:	2008      	movs	r0, #8
   2ce2c:	f7ee bfa6 	b.w	1bd7c <bt_mesh_settings_store_schedule>

0002ce30 <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   2ce30:	88c3      	ldrh	r3, [r0, #6]
   2ce32:	f043 0302 	orr.w	r3, r3, #2
   2ce36:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ce38:	2008      	movs	r0, #8
   2ce3a:	f7ee bf9f 	b.w	1bd7c <bt_mesh_settings_store_schedule>

0002ce3e <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   2ce3e:	88c3      	ldrh	r3, [r0, #6]
   2ce40:	f043 0304 	orr.w	r3, r3, #4
   2ce44:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ce46:	2008      	movs	r0, #8
   2ce48:	f7ee bf98 	b.w	1bd7c <bt_mesh_settings_store_schedule>

0002ce4c <bt_mesh_model_msg_init>:
#define LOG_LEVEL CONFIG_BT_MESH_ACCESS_LOG_LEVEL
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_mesh_msg);

void bt_mesh_model_msg_init(struct net_buf_simple *msg, uint32_t opcode)
{
   2ce4c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   2ce4e:	6883      	ldr	r3, [r0, #8]
   2ce50:	4604      	mov	r4, r0
   2ce52:	b913      	cbnz	r3, 2ce5a <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2ce54:	f100 030c 	add.w	r3, r0, #12
   2ce58:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   2ce5a:	68a3      	ldr	r3, [r4, #8]
	net_buf_simple_init(msg, 0);

	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2ce5c:	29ff      	cmp	r1, #255	; 0xff
   2ce5e:	6023      	str	r3, [r4, #0]
	buf->len = 0U;
   2ce60:	f04f 0300 	mov.w	r3, #0
   2ce64:	80a3      	strh	r3, [r4, #4]
   2ce66:	d805      	bhi.n	2ce74 <bt_mesh_model_msg_init+0x28>
	case 1:
		net_buf_simple_add_u8(msg, opcode);
   2ce68:	4620      	mov	r0, r4
		break;
	default:
		LOG_WRN("Unknown opcode format");
		break;
	}
}
   2ce6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   2ce6e:	b2c9      	uxtb	r1, r1
   2ce70:	f001 b83f 	b.w	2def2 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2ce74:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		net_buf_simple_add_be16(msg, opcode);
   2ce78:	b28d      	uxth	r5, r1
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2ce7a:	d205      	bcs.n	2ce88 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   2ce7c:	4629      	mov	r1, r5
   2ce7e:	4620      	mov	r0, r4
}
   2ce80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2ce84:	f001 b845 	b.w	2df12 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2ce88:	4620      	mov	r0, r4
   2ce8a:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2ce8e:	f001 f830 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2ce92:	4629      	mov	r1, r5
   2ce94:	4620      	mov	r0, r4
}
   2ce96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2ce9a:	f001 b831 	b.w	2df00 <net_buf_simple_add_le16>

0002ce9e <bt_mesh_msg_send>:
	return true;
}

int bt_mesh_msg_send(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		     struct net_buf_simple *buf)
{
   2ce9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cea0:	4613      	mov	r3, r2
   2cea2:	4604      	mov	r4, r0
	if (!ctx && !model->pub) {
   2cea4:	b989      	cbnz	r1, 2ceca <bt_mesh_msg_send+0x2c>
   2cea6:	6882      	ldr	r2, [r0, #8]
   2cea8:	b1aa      	cbz	r2, 2ced6 <bt_mesh_msg_send+0x38>

	if (ctx) {
		return bt_mesh_model_send(model, ctx, buf, NULL, 0);
	}

	net_buf_simple_reset(model->pub->msg);
   2ceaa:	6912      	ldr	r2, [r2, #16]
	buf->len  = 0U;
   2ceac:	8091      	strh	r1, [r2, #4]
	buf->data = buf->__buf;
   2ceae:	6891      	ldr	r1, [r2, #8]
   2ceb0:	6011      	str	r1, [r2, #0]
	net_buf_simple_add_mem(model->pub->msg, buf->data, buf->len);
   2ceb2:	6880      	ldr	r0, [r0, #8]
   2ceb4:	889a      	ldrh	r2, [r3, #4]
   2ceb6:	6819      	ldr	r1, [r3, #0]
   2ceb8:	6900      	ldr	r0, [r0, #16]
   2ceba:	f001 f80e 	bl	2deda <net_buf_simple_add_mem>

	return bt_mesh_model_publish(model);
   2cebe:	4620      	mov	r0, r4
}
   2cec0:	b003      	add	sp, #12
   2cec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_mesh_model_publish(model);
   2cec6:	f7ec babb 	b.w	19440 <bt_mesh_model_publish>
		return bt_mesh_model_send(model, ctx, buf, NULL, 0);
   2ceca:	2300      	movs	r3, #0
   2cecc:	9300      	str	r3, [sp, #0]
   2cece:	f7ec fa87 	bl	193e0 <bt_mesh_model_send>
}
   2ced2:	b003      	add	sp, #12
   2ced4:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
   2ced6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ceda:	e7fa      	b.n	2ced2 <bt_mesh_msg_send+0x34>

0002cedc <node_reset_pending_handler>:
	bt_mesh_reset();
   2cedc:	f7e7 bc1e 	b.w	1471c <bt_mesh_reset>

0002cee0 <mod_sub_list_visitor>:
{
   2cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mod->elem_idx != visit->elem_idx) {
   2cee2:	7902      	ldrb	r2, [r0, #4]
   2cee4:	880b      	ldrh	r3, [r1, #0]
{
   2cee6:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   2cee8:	429a      	cmp	r2, r3
{
   2ceea:	460e      	mov	r6, r1
	if (mod->elem_idx != visit->elem_idx) {
   2ceec:	d015      	beq.n	2cf1a <mod_sub_list_visitor+0x3a>
		return BT_MESH_WALK_CONTINUE;
   2ceee:	2001      	movs	r0, #1
}
   2cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   2cef2:	6963      	ldr	r3, [r4, #20]
   2cef4:	006f      	lsls	r7, r5, #1
   2cef6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   2cefa:	b14b      	cbz	r3, 2cf10 <mod_sub_list_visitor+0x30>
		if (net_buf_simple_tailroom(visit->msg) <
   2cefc:	6870      	ldr	r0, [r6, #4]
   2cefe:	f000 ffe4 	bl	2deca <net_buf_simple_tailroom>
   2cf02:	2805      	cmp	r0, #5
   2cf04:	d90b      	bls.n	2cf1e <mod_sub_list_visitor+0x3e>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   2cf06:	6963      	ldr	r3, [r4, #20]
   2cf08:	6870      	ldr	r0, [r6, #4]
   2cf0a:	5bd9      	ldrh	r1, [r3, r7]
   2cf0c:	f000 fff8 	bl	2df00 <net_buf_simple_add_le16>
	for (i = 0; i < mod->groups_cnt; i++) {
   2cf10:	3501      	adds	r5, #1
   2cf12:	8b23      	ldrh	r3, [r4, #24]
   2cf14:	42ab      	cmp	r3, r5
   2cf16:	dcec      	bgt.n	2cef2 <mod_sub_list_visitor+0x12>
   2cf18:	e7e9      	b.n	2ceee <mod_sub_list_visitor+0xe>
   2cf1a:	2500      	movs	r5, #0
   2cf1c:	e7f9      	b.n	2cf12 <mod_sub_list_visitor+0x32>
			return BT_MESH_WALK_STOP;
   2cf1e:	2000      	movs	r0, #0
   2cf20:	e7e6      	b.n	2cef0 <mod_sub_list_visitor+0x10>

0002cf22 <key_idx_unpack>:
}

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2cf22:	b410      	push	{r4}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2cf24:	6804      	ldr	r4, [r0, #0]
   2cf26:	8824      	ldrh	r4, [r4, #0]
   2cf28:	f3c4 040b 	ubfx	r4, r4, #0, #12
   2cf2c:	800c      	strh	r4, [r1, #0]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2cf2e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 3);
   2cf30:	2103      	movs	r1, #3
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2cf32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
}
   2cf36:	bc10      	pop	{r4}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2cf38:	091b      	lsrs	r3, r3, #4
   2cf3a:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2cf3c:	f7f3 b9d4 	b.w	202e8 <net_buf_simple_pull>

0002cf40 <bt_mesh_hb_pwr2>:
	if (!val) {
   2cf40:	b150      	cbz	r0, 2cf58 <bt_mesh_hb_pwr2+0x18>
	} else if (val == 0xff || val == 0x11) {
   2cf42:	28ff      	cmp	r0, #255	; 0xff
   2cf44:	d006      	beq.n	2cf54 <bt_mesh_hb_pwr2+0x14>
   2cf46:	2811      	cmp	r0, #17
   2cf48:	d004      	beq.n	2cf54 <bt_mesh_hb_pwr2+0x14>
		return (1 << (val - 1));
   2cf4a:	2301      	movs	r3, #1
   2cf4c:	3801      	subs	r0, #1
   2cf4e:	4083      	lsls	r3, r0
   2cf50:	b298      	uxth	r0, r3
   2cf52:	4770      	bx	lr
		return 0xffff;
   2cf54:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2cf58:	4770      	bx	lr

0002cf5a <get_model>:
{
   2cf5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   2cf5c:	888b      	ldrh	r3, [r1, #4]
{
   2cf5e:	4605      	mov	r5, r0
	if (buf->len < 4) {
   2cf60:	2b03      	cmp	r3, #3
{
   2cf62:	460c      	mov	r4, r1
   2cf64:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   2cf66:	4608      	mov	r0, r1
	if (buf->len < 4) {
   2cf68:	d809      	bhi.n	2cf7e <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   2cf6a:	f000 ff8f 	bl	2de8c <net_buf_simple_pull_le16>
		*vnd = false;
   2cf6e:	2300      	movs	r3, #0
   2cf70:	7033      	strb	r3, [r6, #0]
		id = net_buf_simple_pull_le16(buf);
   2cf72:	4601      	mov	r1, r0
		return bt_mesh_model_find(elem, id);
   2cf74:	4628      	mov	r0, r5
}
   2cf76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   2cf7a:	f7ff bf3c 	b.w	2cdf6 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   2cf7e:	f000 ff85 	bl	2de8c <net_buf_simple_pull_le16>
   2cf82:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   2cf84:	4620      	mov	r0, r4
   2cf86:	f000 ff81 	bl	2de8c <net_buf_simple_pull_le16>
		*vnd = true;
   2cf8a:	2301      	movs	r3, #1
   2cf8c:	7033      	strb	r3, [r6, #0]
		id = net_buf_simple_pull_le16(buf);
   2cf8e:	4602      	mov	r2, r0
		return bt_mesh_model_find_vnd(elem, company, id);
   2cf90:	4639      	mov	r1, r7
   2cf92:	4628      	mov	r0, r5
}
   2cf94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2cf98:	f7ff bf16 	b.w	2cdc8 <bt_mesh_model_find_vnd>

0002cf9c <create_mod_app_status.constprop.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   2cf9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cfa0:	4604      	mov	r4, r0
   2cfa2:	4617      	mov	r7, r2
   2cfa4:	461e      	mov	r6, r3
   2cfa6:	460d      	mov	r5, r1
   2cfa8:	f89d 9020 	ldrb.w	r9, [sp, #32]
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2cfac:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2cfb0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2cfb4:	f7ff ff4a 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2cfb8:	4649      	mov	r1, r9
   2cfba:	4620      	mov	r0, r4
   2cfbc:	f000 ff99 	bl	2def2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2cfc0:	4639      	mov	r1, r7
   2cfc2:	4620      	mov	r0, r4
   2cfc4:	f000 ff9c 	bl	2df00 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2cfc8:	4631      	mov	r1, r6
   2cfca:	4620      	mov	r0, r4
   2cfcc:	f000 ff98 	bl	2df00 <net_buf_simple_add_le16>
	if (vnd) {
   2cfd0:	b14d      	cbz	r5, 2cfe6 <create_mod_app_status.constprop.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   2cfd2:	2104      	movs	r1, #4
   2cfd4:	4620      	mov	r0, r4
   2cfd6:	f7f3 f9bb 	bl	20350 <net_buf_simple_add>
   2cfda:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2cfdc:	4641      	mov	r1, r8
}
   2cfde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2cfe2:	f7fd ba9a 	b.w	2a51a <memcpy>
   2cfe6:	2102      	movs	r1, #2
   2cfe8:	4620      	mov	r0, r4
   2cfea:	f7f3 f9b1 	bl	20350 <net_buf_simple_add>
   2cfee:	2202      	movs	r2, #2
   2cff0:	e7f4      	b.n	2cfdc <create_mod_app_status.constprop.0+0x40>

0002cff2 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   2cff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cff6:	461e      	mov	r6, r3
	if (!model->pub) {
   2cff8:	6883      	ldr	r3, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   2cffa:	4604      	mov	r4, r0
   2cffc:	460d      	mov	r5, r1
   2cffe:	4617      	mov	r7, r2
   2d000:	f89d 801c 	ldrb.w	r8, [sp, #28]
	if (!model->pub) {
   2d004:	2b00      	cmp	r3, #0
   2d006:	d07b      	beq.n	2d100 <_mod_pub_set.constprop.0+0x10e>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   2d008:	2e00      	cmp	r6, #0
   2d00a:	d177      	bne.n	2d0fc <_mod_pub_set.constprop.0+0x10a>
	if (!model->pub->update && period) {
   2d00c:	695a      	ldr	r2, [r3, #20]
   2d00e:	b912      	cbnz	r2, 2d016 <_mod_pub_set.constprop.0+0x24>
   2d010:	f1b8 0f00 	cmp.w	r8, #0
   2d014:	d174      	bne.n	2d100 <_mod_pub_set.constprop.0+0x10e>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   2d016:	bb1d      	cbnz	r5, 2d060 <_mod_pub_set.constprop.0+0x6e>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   2d018:	889a      	ldrh	r2, [r3, #4]
   2d01a:	b1f2      	cbz	r2, 2d05a <_mod_pub_set.constprop.0+0x68>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   2d01c:	809d      	strh	r5, [r3, #4]
		model->pub->key = 0U;
   2d01e:	68a3      	ldr	r3, [r4, #8]
   2d020:	88da      	ldrh	r2, [r3, #6]
   2d022:	f365 020b 	bfi	r2, r5, #0, #12
   2d026:	80da      	strh	r2, [r3, #6]
		model->pub->cred = 0U;
   2d028:	68a3      	ldr	r3, [r4, #8]
   2d02a:	79da      	ldrb	r2, [r3, #7]
   2d02c:	f365 1204 	bfi	r2, r5, #4, #1
   2d030:	71da      	strb	r2, [r3, #7]
		model->pub->ttl = 0U;
   2d032:	68a3      	ldr	r3, [r4, #8]
   2d034:	721d      	strb	r5, [r3, #8]
		model->pub->period = 0U;
   2d036:	68a3      	ldr	r3, [r4, #8]
   2d038:	729d      	strb	r5, [r3, #10]
		model->pub->retransmit = 0U;
   2d03a:	68a3      	ldr	r3, [r4, #8]
   2d03c:	725d      	strb	r5, [r3, #9]
		model->pub->count = 0U;
   2d03e:	68a3      	ldr	r3, [r4, #8]
   2d040:	7ada      	ldrb	r2, [r3, #11]
   2d042:	f365 1207 	bfi	r2, r5, #4, #4
   2d046:	72da      	strb	r2, [r3, #11]
		if (model->pub->update) {
   2d048:	68a0      	ldr	r0, [r4, #8]
   2d04a:	6943      	ldr	r3, [r0, #20]
   2d04c:	b113      	cbz	r3, 2d054 <_mod_pub_set.constprop.0+0x62>
			(void)k_work_cancel_delayable(&model->pub->timer);
   2d04e:	3018      	adds	r0, #24
   2d050:	f7f9 fb18 	bl	26684 <k_work_cancel_delayable>
			bt_mesh_model_pub_store(model);
   2d054:	4620      	mov	r0, r4
   2d056:	f7ff fef2 	bl	2ce3e <bt_mesh_model_pub_store>
}
   2d05a:	4630      	mov	r0, r6
   2d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   2d060:	4638      	mov	r0, r7
   2d062:	f7e9 fd95 	bl	16b90 <bt_mesh_app_key_exists>
   2d066:	b908      	cbnz	r0, 2d06c <_mod_pub_set.constprop.0+0x7a>
		return STATUS_INVALID_APPKEY;
   2d068:	2603      	movs	r6, #3
   2d06a:	e7f6      	b.n	2d05a <_mod_pub_set.constprop.0+0x68>
	if (!bt_mesh_app_key_exists(app_idx) || !bt_mesh_model_has_key(model, app_idx)) {
   2d06c:	4639      	mov	r1, r7
   2d06e:	4620      	mov	r0, r4
   2d070:	f7ff fe92 	bl	2cd98 <bt_mesh_model_has_key>
   2d074:	2800      	cmp	r0, #0
   2d076:	d0f7      	beq.n	2d068 <_mod_pub_set.constprop.0+0x76>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   2d078:	68a3      	ldr	r3, [r4, #8]
   2d07a:	8898      	ldrh	r0, [r3, #4]
   2d07c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   2d080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2d084:	d205      	bcs.n	2d092 <_mod_pub_set.constprop.0+0xa0>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   2d086:	f7ea fba9 	bl	177dc <bt_mesh_va_label_get>
		if (uuid) {
   2d08a:	b110      	cbz	r0, 2d092 <_mod_pub_set.constprop.0+0xa0>
			bt_mesh_va_del(uuid, NULL);
   2d08c:	2100      	movs	r1, #0
   2d08e:	f7ea fb81 	bl	17794 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   2d092:	68a3      	ldr	r3, [r4, #8]
   2d094:	809d      	strh	r5, [r3, #4]
	model->pub->key = app_idx;
   2d096:	68a3      	ldr	r3, [r4, #8]
   2d098:	88da      	ldrh	r2, [r3, #6]
   2d09a:	f367 020b 	bfi	r2, r7, #0, #12
   2d09e:	80da      	strh	r2, [r3, #6]
	model->pub->cred = cred_flag;
   2d0a0:	68a3      	ldr	r3, [r4, #8]
   2d0a2:	79da      	ldrb	r2, [r3, #7]
   2d0a4:	f36f 1204 	bfc	r2, #4, #1
   2d0a8:	71da      	strb	r2, [r3, #7]
	model->pub->ttl = ttl;
   2d0aa:	68a3      	ldr	r3, [r4, #8]
   2d0ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2d0b0:	721a      	strb	r2, [r3, #8]
	model->pub->period = period;
   2d0b2:	68a3      	ldr	r3, [r4, #8]
	model->pub->retransmit = retransmit;
   2d0b4:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   2d0b8:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
   2d0bc:	68a3      	ldr	r3, [r4, #8]
   2d0be:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   2d0c0:	68a3      	ldr	r3, [r4, #8]
   2d0c2:	695b      	ldr	r3, [r3, #20]
   2d0c4:	2b00      	cmp	r3, #0
   2d0c6:	d0c5      	beq.n	2d054 <_mod_pub_set.constprop.0+0x62>
		period_ms = bt_mesh_model_pub_period_get(model);
   2d0c8:	4620      	mov	r0, r4
   2d0ca:	f7eb fe83 	bl	18dd4 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   2d0ce:	1e05      	subs	r5, r0, #0
   2d0d0:	68a0      	ldr	r0, [r4, #8]
   2d0d2:	ddbc      	ble.n	2d04e <_mod_pub_set.constprop.0+0x5c>
   2d0d4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			k_work_reschedule(&model->pub->timer,
   2d0d8:	f100 0718 	add.w	r7, r0, #24
   2d0dc:	2100      	movs	r1, #0
   2d0de:	f240 30e7 	movw	r0, #999	; 0x3e7
   2d0e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d0e6:	2300      	movs	r3, #0
   2d0e8:	fbc5 010c 	smlal	r0, r1, r5, ip
   2d0ec:	f7db f832 	bl	8154 <__aeabi_uldivmod>
   2d0f0:	4602      	mov	r2, r0
   2d0f2:	460b      	mov	r3, r1
   2d0f4:	4638      	mov	r0, r7
   2d0f6:	f7f9 fabf 	bl	26678 <k_work_reschedule>
   2d0fa:	e7ab      	b.n	2d054 <_mod_pub_set.constprop.0+0x62>
		return STATUS_FEAT_NOT_SUPP;
   2d0fc:	260a      	movs	r6, #10
   2d0fe:	e7ac      	b.n	2d05a <_mod_pub_set.constprop.0+0x68>
		return STATUS_NVAL_PUB_PARAM;
   2d100:	2607      	movs	r6, #7
   2d102:	e7aa      	b.n	2d05a <_mod_pub_set.constprop.0+0x68>

0002d104 <mod_unbind.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2d104:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d106:	4604      	mov	r4, r0
   2d108:	b085      	sub	sp, #20
	if (!bt_mesh_app_key_exists(key_idx)) {
   2d10a:	4608      	mov	r0, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2d10c:	460e      	mov	r6, r1
	if (!bt_mesh_app_key_exists(key_idx)) {
   2d10e:	f7e9 fd3f 	bl	16b90 <bt_mesh_app_key_exists>
   2d112:	bb10      	cbnz	r0, 2d15a <mod_unbind.constprop.0+0x56>
		return STATUS_INVALID_APPKEY;
   2d114:	2003      	movs	r0, #3
}
   2d116:	b005      	add	sp, #20
   2d118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (model->keys[i] != key_idx) {
   2d11a:	68e3      	ldr	r3, [r4, #12]
   2d11c:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   2d120:	42b2      	cmp	r2, r6
   2d122:	d114      	bne.n	2d14e <mod_unbind.constprop.0+0x4a>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2d124:	f823 7015 	strh.w	r7, [r3, r5, lsl #1]
			bt_mesh_model_bind_store(model);
   2d128:	4620      	mov	r0, r4
   2d12a:	f7ff fe7a 	bl	2ce22 <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   2d12e:	68a3      	ldr	r3, [r4, #8]
   2d130:	b16b      	cbz	r3, 2d14e <mod_unbind.constprop.0+0x4a>
   2d132:	88db      	ldrh	r3, [r3, #6]
   2d134:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2d138:	42b3      	cmp	r3, r6
   2d13a:	d108      	bne.n	2d14e <mod_unbind.constprop.0+0x4a>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   2d13c:	2300      	movs	r3, #0
   2d13e:	4620      	mov	r0, r4
   2d140:	461a      	mov	r2, r3
   2d142:	4619      	mov	r1, r3
   2d144:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d148:	9300      	str	r3, [sp, #0]
   2d14a:	f7ff ff52 	bl	2cff2 <_mod_pub_set.constprop.0>
	for (i = 0; i < model->keys_cnt; i++) {
   2d14e:	3501      	adds	r5, #1
   2d150:	8a23      	ldrh	r3, [r4, #16]
   2d152:	429d      	cmp	r5, r3
   2d154:	dbe1      	blt.n	2d11a <mod_unbind.constprop.0+0x16>
   2d156:	2000      	movs	r0, #0
   2d158:	e7dd      	b.n	2d116 <mod_unbind.constprop.0+0x12>
   2d15a:	2500      	movs	r5, #0
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2d15c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2d160:	e7f6      	b.n	2d150 <mod_unbind.constprop.0+0x4c>

0002d162 <mod_app_key_del>:
	mod_unbind(mod, *app_idx, true);
   2d162:	9b00      	ldr	r3, [sp, #0]
   2d164:	8819      	ldrh	r1, [r3, #0]
   2d166:	f7ff bfcd 	b.w	2d104 <mod_unbind.constprop.0>

0002d16a <z_log_msg_static_create.constprop.0>:
   2d16a:	2300      	movs	r3, #0
   2d16c:	f7dd bcf6 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002d170 <beacon_get>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2d170:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d174:	b530      	push	{r4, r5, lr}
   2d176:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2d178:	ab03      	add	r3, sp, #12
{
   2d17a:	4604      	mov	r4, r0
   2d17c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   2d17e:	a805      	add	r0, sp, #20
   2d180:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2d184:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d188:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   2d18a:	f7ff fe5f 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   2d18e:	f7e7 fc3b 	bl	14a08 <bt_mesh_beacon_enabled>
   2d192:	4601      	mov	r1, r0
   2d194:	a805      	add	r0, sp, #20
   2d196:	f000 feac 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d19a:	2300      	movs	r3, #0
   2d19c:	4629      	mov	r1, r5
   2d19e:	4620      	mov	r0, r4
   2d1a0:	9300      	str	r3, [sp, #0]
   2d1a2:	aa05      	add	r2, sp, #20
   2d1a4:	f7ec f91c 	bl	193e0 <bt_mesh_model_send>
   2d1a8:	b108      	cbz	r0, 2d1ae <beacon_get+0x3e>
   2d1aa:	f7ec fbc1 	bl	19930 <beacon_get.part.0>
}
   2d1ae:	2000      	movs	r0, #0
   2d1b0:	b009      	add	sp, #36	; 0x24
   2d1b2:	bd30      	pop	{r4, r5, pc}

0002d1b4 <default_ttl_get>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2d1b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d1b8:	b530      	push	{r4, r5, lr}
   2d1ba:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2d1bc:	ab03      	add	r3, sp, #12
{
   2d1be:	4604      	mov	r4, r0
   2d1c0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2d1c2:	a805      	add	r0, sp, #20
   2d1c4:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2d1c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d1cc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2d1ce:	f7ff fe3d 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   2d1d2:	f7e7 fc71 	bl	14ab8 <bt_mesh_default_ttl_get>
   2d1d6:	4601      	mov	r1, r0
   2d1d8:	a805      	add	r0, sp, #20
   2d1da:	f000 fe8a 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d1de:	2300      	movs	r3, #0
   2d1e0:	4629      	mov	r1, r5
   2d1e2:	4620      	mov	r0, r4
   2d1e4:	9300      	str	r3, [sp, #0]
   2d1e6:	aa05      	add	r2, sp, #20
   2d1e8:	f7ec f8fa 	bl	193e0 <bt_mesh_model_send>
   2d1ec:	b108      	cbz	r0, 2d1f2 <default_ttl_get+0x3e>
   2d1ee:	f7ec fbeb 	bl	199c8 <default_ttl_get.part.0>
}
   2d1f2:	2000      	movs	r0, #0
   2d1f4:	b009      	add	sp, #36	; 0x24
   2d1f6:	bd30      	pop	{r4, r5, pc}

0002d1f8 <send_gatt_proxy_status>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2d1f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d1fc:	b530      	push	{r4, r5, lr}
   2d1fe:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2d200:	ab03      	add	r3, sp, #12
{
   2d202:	4604      	mov	r4, r0
   2d204:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   2d206:	a805      	add	r0, sp, #20
   2d208:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2d20c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d210:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   2d212:	f7ff fe1b 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   2d216:	f7e7 fc27 	bl	14a68 <bt_mesh_gatt_proxy_get>
   2d21a:	4601      	mov	r1, r0
   2d21c:	a805      	add	r0, sp, #20
   2d21e:	f000 fe68 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d222:	2300      	movs	r3, #0
   2d224:	4629      	mov	r1, r5
   2d226:	4620      	mov	r0, r4
   2d228:	9300      	str	r3, [sp, #0]
   2d22a:	aa05      	add	r2, sp, #20
   2d22c:	f7ec f8d8 	bl	193e0 <bt_mesh_model_send>
   2d230:	b108      	cbz	r0, 2d236 <send_gatt_proxy_status+0x3e>
   2d232:	f7ec fc0f 	bl	19a54 <send_gatt_proxy_status.part.0>
}
   2d236:	2000      	movs	r0, #0
   2d238:	b009      	add	sp, #36	; 0x24
   2d23a:	bd30      	pop	{r4, r5, pc}

0002d23c <gatt_proxy_set>:
{
   2d23c:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d23e:	6813      	ldr	r3, [r2, #0]
{
   2d240:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d242:	7818      	ldrb	r0, [r3, #0]
{
   2d244:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d246:	2801      	cmp	r0, #1
   2d248:	d807      	bhi.n	2d25a <gatt_proxy_set+0x1e>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   2d24a:	f7e7 fbe7 	bl	14a1c <bt_mesh_gatt_proxy_set>
	return send_gatt_proxy_status(model, ctx);
   2d24e:	4629      	mov	r1, r5
   2d250:	4620      	mov	r0, r4
}
   2d252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_gatt_proxy_status(model, ctx);
   2d256:	f7ff bfcf 	b.w	2d1f8 <send_gatt_proxy_status>
}
   2d25a:	f06f 0015 	mvn.w	r0, #21
   2d25e:	bd38      	pop	{r3, r4, r5, pc}

0002d260 <gatt_proxy_get>:
	return send_gatt_proxy_status(model, ctx);
   2d260:	f7ff bfca 	b.w	2d1f8 <send_gatt_proxy_status>

0002d264 <net_transmit_get>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2d264:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d268:	b530      	push	{r4, r5, lr}
   2d26a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2d26c:	ab03      	add	r3, sp, #12
{
   2d26e:	4604      	mov	r4, r0
   2d270:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   2d272:	a805      	add	r0, sp, #20
   2d274:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2d278:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d27c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   2d27e:	f7ff fde5 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   2d282:	f7e7 fc59 	bl	14b38 <bt_mesh_net_transmit_get>
   2d286:	4601      	mov	r1, r0
   2d288:	a805      	add	r0, sp, #20
   2d28a:	f000 fe32 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d28e:	2300      	movs	r3, #0
   2d290:	4629      	mov	r1, r5
   2d292:	4620      	mov	r0, r4
   2d294:	9300      	str	r3, [sp, #0]
   2d296:	aa05      	add	r2, sp, #20
   2d298:	f7ec f8a2 	bl	193e0 <bt_mesh_model_send>
   2d29c:	b108      	cbz	r0, 2d2a2 <net_transmit_get+0x3e>
   2d29e:	f7ec fbeb 	bl	19a78 <net_transmit_get.part.0>
}
   2d2a2:	2000      	movs	r0, #0
   2d2a4:	b009      	add	sp, #36	; 0x24
   2d2a6:	bd30      	pop	{r4, r5, pc}

0002d2a8 <reset_send_start>:
	if (err) {
   2d2a8:	4608      	mov	r0, r1
   2d2aa:	b109      	cbz	r1, 2d2b0 <reset_send_start+0x8>
   2d2ac:	f7ed bc68 	b.w	1ab80 <reset_send_start.part.0>
}
   2d2b0:	4770      	bx	lr

0002d2b2 <send_friend_status>:
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2d2b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d2b6:	b530      	push	{r4, r5, lr}
   2d2b8:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2d2ba:	ab03      	add	r3, sp, #12
{
   2d2bc:	4604      	mov	r4, r0
   2d2be:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   2d2c0:	a805      	add	r0, sp, #20
   2d2c2:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2d2c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d2ca:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   2d2cc:	f7ff fdbe 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   2d2d0:	f7e7 fc12 	bl	14af8 <bt_mesh_friend_get>
   2d2d4:	4601      	mov	r1, r0
   2d2d6:	a805      	add	r0, sp, #20
   2d2d8:	f000 fe0b 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d2dc:	2300      	movs	r3, #0
   2d2de:	4629      	mov	r1, r5
   2d2e0:	4620      	mov	r0, r4
   2d2e2:	9300      	str	r3, [sp, #0]
   2d2e4:	aa05      	add	r2, sp, #20
   2d2e6:	f7ec f87b 	bl	193e0 <bt_mesh_model_send>
   2d2ea:	b108      	cbz	r0, 2d2f0 <send_friend_status+0x3e>
   2d2ec:	f7ed fc64 	bl	1abb8 <send_friend_status.part.0>
}
   2d2f0:	2000      	movs	r0, #0
   2d2f2:	b009      	add	sp, #36	; 0x24
   2d2f4:	bd30      	pop	{r4, r5, pc}

0002d2f6 <friend_set>:
{
   2d2f6:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d2f8:	6813      	ldr	r3, [r2, #0]
{
   2d2fa:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d2fc:	7818      	ldrb	r0, [r3, #0]
{
   2d2fe:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2d300:	2801      	cmp	r0, #1
   2d302:	d807      	bhi.n	2d314 <friend_set+0x1e>
	(void)bt_mesh_friend_set(buf->data[0]);
   2d304:	f7e7 fbde 	bl	14ac4 <bt_mesh_friend_set>
	return send_friend_status(model, ctx);
   2d308:	4629      	mov	r1, r5
   2d30a:	4620      	mov	r0, r4
}
   2d30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_friend_status(model, ctx);
   2d310:	f7ff bfcf 	b.w	2d2b2 <send_friend_status>
}
   2d314:	f06f 0015 	mvn.w	r0, #21
   2d318:	bd38      	pop	{r3, r4, r5, pc}

0002d31a <friend_get>:
	return send_friend_status(model, ctx);
   2d31a:	f7ff bfca 	b.w	2d2b2 <send_friend_status>

0002d31e <cfg_srv_init>:
{
   2d31e:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   2d320:	7900      	ldrb	r0, [r0, #4]
   2d322:	b108      	cbz	r0, 2d328 <cfg_srv_init+0xa>
   2d324:	f7ed bca2 	b.w	1ac6c <cfg_srv_init.part.0>
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   2d328:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2d32c:	68db      	ldr	r3, [r3, #12]
   2d32e:	801a      	strh	r2, [r3, #0]
}
   2d330:	4770      	bx	lr

0002d332 <app_key_del>:
{
   2d332:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d334:	b085      	sub	sp, #20
   2d336:	4604      	mov	r4, r0
   2d338:	460d      	mov	r5, r1
   2d33a:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2d33c:	a903      	add	r1, sp, #12
   2d33e:	f10d 020e 	add.w	r2, sp, #14
   2d342:	f7ff fdee 	bl	2cf22 <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   2d346:	f8bd 600e 	ldrh.w	r6, [sp, #14]
   2d34a:	f8bd 700c 	ldrh.w	r7, [sp, #12]
   2d34e:	4630      	mov	r0, r6
   2d350:	4639      	mov	r1, r7
   2d352:	f7e9 fb69 	bl	16a28 <bt_mesh_app_key_del>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d356:	4633      	mov	r3, r6
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   2d358:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d35a:	4629      	mov	r1, r5
   2d35c:	4620      	mov	r0, r4
   2d35e:	9700      	str	r7, [sp, #0]
   2d360:	f7ed fc98 	bl	1ac94 <send_app_key_status>
}
   2d364:	b005      	add	sp, #20
   2d366:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d368 <app_key_update>:
{
   2d368:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d36c:	4614      	mov	r4, r2
   2d36e:	4605      	mov	r5, r0
   2d370:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2d372:	4620      	mov	r0, r4
   2d374:	f10d 020e 	add.w	r2, sp, #14
   2d378:	a903      	add	r1, sp, #12
   2d37a:	f7ff fdd2 	bl	2cf22 <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2d37e:	f8bd 700e 	ldrh.w	r7, [sp, #14]
   2d382:	f8bd 800c 	ldrh.w	r8, [sp, #12]
   2d386:	6822      	ldr	r2, [r4, #0]
   2d388:	4641      	mov	r1, r8
   2d38a:	4638      	mov	r0, r7
   2d38c:	f7e9 fb08 	bl	169a0 <bt_mesh_app_key_update>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d390:	463b      	mov	r3, r7
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2d392:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d394:	4631      	mov	r1, r6
   2d396:	4628      	mov	r0, r5
   2d398:	f8cd 8000 	str.w	r8, [sp]
   2d39c:	f7ed fc7a 	bl	1ac94 <send_app_key_status>
}
   2d3a0:	b004      	add	sp, #16
   2d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d3a6 <app_key_add>:
{
   2d3a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d3aa:	4614      	mov	r4, r2
   2d3ac:	4605      	mov	r5, r0
   2d3ae:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2d3b0:	4620      	mov	r0, r4
   2d3b2:	f10d 020e 	add.w	r2, sp, #14
   2d3b6:	a903      	add	r1, sp, #12
   2d3b8:	f7ff fdb3 	bl	2cf22 <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2d3bc:	f8bd 700e 	ldrh.w	r7, [sp, #14]
   2d3c0:	f8bd 800c 	ldrh.w	r8, [sp, #12]
   2d3c4:	6822      	ldr	r2, [r4, #0]
   2d3c6:	4641      	mov	r1, r8
   2d3c8:	4638      	mov	r0, r7
   2d3ca:	f7e9 faa7 	bl	1691c <bt_mesh_app_key_add>
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d3ce:	463b      	mov	r3, r7
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2d3d0:	4602      	mov	r2, r0
	return send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2d3d2:	4631      	mov	r1, r6
   2d3d4:	4628      	mov	r0, r5
   2d3d6:	f8cd 8000 	str.w	r8, [sp]
   2d3da:	f7ed fc5b 	bl	1ac94 <send_app_key_status>
}
   2d3de:	b004      	add	sp, #16
   2d3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d3e4 <mod_sub_clear_visitor>:
{
   2d3e4:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   2d3e6:	f7ed fc91 	bl	1ad0c <mod_sub_list_clear>
}
   2d3ea:	2001      	movs	r0, #1
   2d3ec:	bd08      	pop	{r3, pc}

0002d3ee <mod_reset>:
{
   2d3ee:	b510      	push	{r4, lr}
   2d3f0:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   2d3f2:	f7ed fc8b 	bl	1ad0c <mod_sub_list_clear>
		if (clear_count) {
   2d3f6:	b110      	cbz	r0, 2d3fe <mod_reset+0x10>
			bt_mesh_model_sub_store(mod);
   2d3f8:	4620      	mov	r0, r4
   2d3fa:	f7ff fd19 	bl	2ce30 <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   2d3fe:	6a23      	ldr	r3, [r4, #32]
   2d400:	b12b      	cbz	r3, 2d40e <mod_reset+0x20>
   2d402:	68db      	ldr	r3, [r3, #12]
   2d404:	b11b      	cbz	r3, 2d40e <mod_reset+0x20>
		mod->cb->reset(mod);
   2d406:	4620      	mov	r0, r4
}
   2d408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2d40c:	4718      	bx	r3
}
   2d40e:	bd10      	pop	{r4, pc}

0002d410 <node_identity_set>:
{
   2d410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d412:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   2d414:	4610      	mov	r0, r2
{
   2d416:	460e      	mov	r6, r1
   2d418:	4617      	mov	r7, r2
	idx = net_buf_simple_pull_le16(buf);
   2d41a:	f000 fd37 	bl	2de8c <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2d41e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2d422:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2d424:	d303      	bcc.n	2d42e <node_identity_set+0x1e>
		return -EINVAL;
   2d426:	f06f 0015 	mvn.w	r0, #21
}
   2d42a:	b003      	add	sp, #12
   2d42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	node_id = net_buf_simple_pull_u8(buf);
   2d42e:	4638      	mov	r0, r7
   2d430:	f000 fd24 	bl	2de7c <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   2d434:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   2d436:	4607      	mov	r7, r0
	if (node_id != 0x00 && node_id != 0x01) {
   2d438:	d8f5      	bhi.n	2d426 <node_identity_set+0x16>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   2d43a:	4601      	mov	r1, r0
   2d43c:	4620      	mov	r0, r4
   2d43e:	f7ff f874 	bl	2c52a <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   2d442:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   2d444:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   2d446:	d103      	bne.n	2d450 <node_identity_set+0x40>
		return send_node_id_status(model, ctx, status, idx,
   2d448:	2300      	movs	r3, #0
   2d44a:	9300      	str	r3, [sp, #0]
	return send_node_id_status(model, ctx, status, idx, node_id);
   2d44c:	4623      	mov	r3, r4
   2d44e:	e005      	b.n	2d45c <node_identity_set+0x4c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   2d450:	280a      	cmp	r0, #10
   2d452:	d108      	bne.n	2d466 <node_identity_set+0x56>
		return send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   2d454:	2302      	movs	r3, #2
   2d456:	2200      	movs	r2, #0
   2d458:	9300      	str	r3, [sp, #0]
   2d45a:	4623      	mov	r3, r4
	return send_node_id_status(model, ctx, status, idx, node_id);
   2d45c:	4631      	mov	r1, r6
   2d45e:	4628      	mov	r0, r5
   2d460:	f7ed fd52 	bl	1af08 <send_node_id_status>
   2d464:	e7e1      	b.n	2d42a <node_identity_set+0x1a>
   2d466:	9700      	str	r7, [sp, #0]
   2d468:	e7f0      	b.n	2d44c <node_identity_set+0x3c>

0002d46a <heartbeat_pub_get>:
{
   2d46a:	b530      	push	{r4, r5, lr}
   2d46c:	4604      	mov	r4, r0
   2d46e:	460d      	mov	r5, r1
   2d470:	b085      	sub	sp, #20
	bt_mesh_hb_pub_get(&pub);
   2d472:	4668      	mov	r0, sp
   2d474:	f7eb f8a4 	bl	185c0 <bt_mesh_hb_pub_get>
	return hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   2d478:	466b      	mov	r3, sp
   2d47a:	2200      	movs	r2, #0
   2d47c:	4629      	mov	r1, r5
   2d47e:	4620      	mov	r0, r4
   2d480:	f7ed fe90 	bl	1b1a4 <hb_pub_send_status>
}
   2d484:	b005      	add	sp, #20
   2d486:	bd30      	pop	{r4, r5, pc}

0002d488 <heartbeat_sub_set>:
{
   2d488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d48c:	4606      	mov	r6, r0
   2d48e:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   2d490:	4610      	mov	r0, r2
{
   2d492:	4614      	mov	r4, r2
   2d494:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   2d496:	f000 fcf9 	bl	2de8c <net_buf_simple_pull_le16>
   2d49a:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   2d49c:	4620      	mov	r0, r4
   2d49e:	f000 fcf5 	bl	2de8c <net_buf_simple_pull_le16>
   2d4a2:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   2d4a4:	4620      	mov	r0, r4
   2d4a6:	f000 fce9 	bl	2de7c <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   2d4aa:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   2d4ac:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   2d4ae:	d905      	bls.n	2d4bc <heartbeat_sub_set+0x34>
		return -EINVAL;
   2d4b0:	f06f 0415 	mvn.w	r4, #21
}
   2d4b4:	4620      	mov	r0, r4
   2d4b6:	b005      	add	sp, #20
   2d4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   2d4bc:	f7ff fd40 	bl	2cf40 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   2d4c0:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   2d4c2:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   2d4c4:	4602      	mov	r2, r0
   2d4c6:	4640      	mov	r0, r8
   2d4c8:	f7eb f884 	bl	185d4 <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   2d4cc:	2800      	cmp	r0, #0
   2d4ce:	d1ef      	bne.n	2d4b0 <heartbeat_sub_set+0x28>
	bt_mesh_hb_sub_get(&sub);
   2d4d0:	4668      	mov	r0, sp
   2d4d2:	f7eb f8d7 	bl	18684 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   2d4d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2d4da:	b103      	cbz	r3, 2d4de <heartbeat_sub_set+0x56>
   2d4dc:	b914      	cbnz	r4, 2d4e4 <heartbeat_sub_set+0x5c>
		sub.min_hops = BT_MESH_TTL_MAX;
   2d4de:	237f      	movs	r3, #127	; 0x7f
   2d4e0:	f88d 300e 	strb.w	r3, [sp, #14]
	err = hb_sub_send_status(model, ctx, &sub);
   2d4e4:	466a      	mov	r2, sp
   2d4e6:	4639      	mov	r1, r7
   2d4e8:	4630      	mov	r0, r6
   2d4ea:	f7ed ff19 	bl	1b320 <hb_sub_send_status>
	if (err) {
   2d4ee:	4604      	mov	r4, r0
   2d4f0:	2800      	cmp	r0, #0
   2d4f2:	d1df      	bne.n	2d4b4 <heartbeat_sub_set+0x2c>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   2d4f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2d4f8:	2b00      	cmp	r3, #0
   2d4fa:	d0db      	beq.n	2d4b4 <heartbeat_sub_set+0x2c>
   2d4fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2d500:	2b00      	cmp	r3, #0
   2d502:	d0d7      	beq.n	2d4b4 <heartbeat_sub_set+0x2c>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   2d504:	2d00      	cmp	r5, #0
   2d506:	d1d5      	bne.n	2d4b4 <heartbeat_sub_set+0x2c>
		bt_mesh_hb_sub_reset_count();
   2d508:	f7eb f8b6 	bl	18678 <bt_mesh_hb_sub_reset_count>
   2d50c:	e7d2      	b.n	2d4b4 <heartbeat_sub_set+0x2c>

0002d50e <heartbeat_sub_get>:
{
   2d50e:	b530      	push	{r4, r5, lr}
   2d510:	4604      	mov	r4, r0
   2d512:	460d      	mov	r5, r1
   2d514:	b085      	sub	sp, #20
	bt_mesh_hb_sub_get(&sub);
   2d516:	4668      	mov	r0, sp
   2d518:	f7eb f8b4 	bl	18684 <bt_mesh_hb_sub_get>
	return hb_sub_send_status(model, ctx, &sub);
   2d51c:	466a      	mov	r2, sp
   2d51e:	4629      	mov	r1, r5
   2d520:	4620      	mov	r0, r4
   2d522:	f7ed fefd 	bl	1b320 <hb_sub_send_status>
}
   2d526:	b005      	add	sp, #20
   2d528:	bd30      	pop	{r4, r5, pc}

0002d52a <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   2d52a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2d52e:	b123      	cbz	r3, 2d53a <attention_off+0x10>
   2d530:	695b      	ldr	r3, [r3, #20]
   2d532:	b113      	cbz	r3, 2d53a <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   2d534:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2d538:	4718      	bx	r3
}
   2d53a:	4770      	bx	lr

0002d53c <health_period_set_unrel>:
{
   2d53c:	b510      	push	{r4, lr}
   2d53e:	4604      	mov	r4, r0
	period = net_buf_simple_pull_u8(buf);
   2d540:	4610      	mov	r0, r2
   2d542:	f000 fc9b 	bl	2de7c <net_buf_simple_pull_u8>
	if (period > 15) {
   2d546:	280f      	cmp	r0, #15
	model->pub->period_div = period;
   2d548:	bf97      	itett	ls
   2d54a:	68a3      	ldrls	r3, [r4, #8]
		return -EINVAL;
   2d54c:	f06f 0015 	mvnhi.w	r0, #21
	model->pub->period_div = period;
   2d550:	7ada      	ldrbls	r2, [r3, #11]
   2d552:	f360 0203 	bfils	r2, r0, #0, #4
   2d556:	bf9c      	itt	ls
   2d558:	72da      	strbls	r2, [r3, #11]
	return 0;
   2d55a:	2000      	movls	r0, #0
}
   2d55c:	bd10      	pop	{r4, pc}

0002d55e <health_fault_test_unrel>:
{
   2d55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d562:	4604      	mov	r4, r0
	struct bt_mesh_health_srv *srv = model->user_data;
   2d564:	6a47      	ldr	r7, [r0, #36]	; 0x24
	test_id = net_buf_simple_pull_u8(buf);
   2d566:	4610      	mov	r0, r2
{
   2d568:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   2d56a:	f000 fc87 	bl	2de7c <net_buf_simple_pull_u8>
   2d56e:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   2d570:	4628      	mov	r0, r5
   2d572:	f000 fc8b 	bl	2de8c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   2d576:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2d578:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   2d57a:	b133      	cbz	r3, 2d58a <health_fault_test_unrel+0x2c>
   2d57c:	68db      	ldr	r3, [r3, #12]
   2d57e:	b123      	cbz	r3, 2d58a <health_fault_test_unrel+0x2c>
		return srv->cb->fault_test(model, test_id, company_id);
   2d580:	4631      	mov	r1, r6
   2d582:	4620      	mov	r0, r4
}
   2d584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return srv->cb->fault_test(model, test_id, company_id);
   2d588:	4718      	bx	r3
}
   2d58a:	2000      	movs	r0, #0
   2d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d590 <health_fault_clear_unrel>:
{
   2d590:	b570      	push	{r4, r5, r6, lr}
   2d592:	4604      	mov	r4, r0
	struct bt_mesh_health_srv *srv = model->user_data;
   2d594:	6a45      	ldr	r5, [r0, #36]	; 0x24
	company_id = net_buf_simple_pull_le16(buf);
   2d596:	4610      	mov	r0, r2
   2d598:	f000 fc78 	bl	2de8c <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   2d59c:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2d59e:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   2d5a0:	b12b      	cbz	r3, 2d5ae <health_fault_clear_unrel+0x1e>
   2d5a2:	689b      	ldr	r3, [r3, #8]
   2d5a4:	b11b      	cbz	r3, 2d5ae <health_fault_clear_unrel+0x1e>
		return srv->cb->fault_clear(model, company_id);
   2d5a6:	4620      	mov	r0, r4
}
   2d5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return srv->cb->fault_clear(model, company_id);
   2d5ac:	4718      	bx	r3
}
   2d5ae:	2000      	movs	r0, #0
   2d5b0:	bd70      	pop	{r4, r5, r6, pc}

0002d5b2 <attention_get>:
	return send_attention_status(model, ctx);
   2d5b2:	f7ed bf17 	b.w	1b3e4 <send_attention_status>

0002d5b6 <send_health_period_status>:
{
   2d5b6:	b530      	push	{r4, r5, lr}
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   2d5b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2d5bc:	4604      	mov	r4, r0
   2d5be:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   2d5c0:	ab03      	add	r3, sp, #12
{
   2d5c2:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   2d5c4:	a805      	add	r0, sp, #20
   2d5c6:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   2d5ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d5ce:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   2d5d0:	f7ff fc3c 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   2d5d4:	68a3      	ldr	r3, [r4, #8]
   2d5d6:	a805      	add	r0, sp, #20
   2d5d8:	7ad9      	ldrb	r1, [r3, #11]
   2d5da:	f001 010f 	and.w	r1, r1, #15
   2d5de:	f000 fc88 	bl	2def2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2d5e2:	2300      	movs	r3, #0
   2d5e4:	4629      	mov	r1, r5
   2d5e6:	4620      	mov	r0, r4
   2d5e8:	9300      	str	r3, [sp, #0]
   2d5ea:	aa05      	add	r2, sp, #20
   2d5ec:	f7eb fef8 	bl	193e0 <bt_mesh_model_send>
   2d5f0:	b108      	cbz	r0, 2d5f6 <send_health_period_status+0x40>
   2d5f2:	f7ed ff33 	bl	1b45c <send_health_period_status.part.0>
}
   2d5f6:	2000      	movs	r0, #0
   2d5f8:	b009      	add	sp, #36	; 0x24
   2d5fa:	bd30      	pop	{r4, r5, pc}

0002d5fc <health_period_set>:
{
   2d5fc:	b538      	push	{r3, r4, r5, lr}
   2d5fe:	4604      	mov	r4, r0
   2d600:	460d      	mov	r5, r1
	err = health_period_set_unrel(model, ctx, buf);
   2d602:	f7ff ff9b 	bl	2d53c <health_period_set_unrel>
	if (err) {
   2d606:	b928      	cbnz	r0, 2d614 <health_period_set+0x18>
	return send_health_period_status(model, ctx);
   2d608:	4629      	mov	r1, r5
   2d60a:	4620      	mov	r0, r4
}
   2d60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_health_period_status(model, ctx);
   2d610:	f7ff bfd1 	b.w	2d5b6 <send_health_period_status>
}
   2d614:	bd38      	pop	{r3, r4, r5, pc}

0002d616 <health_period_get>:
	return send_health_period_status(model, ctx);
   2d616:	f7ff bfce 	b.w	2d5b6 <send_health_period_status>

0002d61a <attention_set_unrel>:
{
   2d61a:	b510      	push	{r4, lr}
   2d61c:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   2d61e:	4610      	mov	r0, r2
   2d620:	f000 fc2c 	bl	2de7c <net_buf_simple_pull_u8>
   2d624:	4601      	mov	r1, r0
	bt_mesh_attention(model, time);
   2d626:	4620      	mov	r0, r4
   2d628:	f7ee f8c8 	bl	1b7bc <bt_mesh_attention>
}
   2d62c:	2000      	movs	r0, #0
   2d62e:	bd10      	pop	{r4, pc}

0002d630 <attention_set>:
{
   2d630:	b538      	push	{r3, r4, r5, lr}
   2d632:	4604      	mov	r4, r0
   2d634:	460d      	mov	r5, r1
	err = attention_set_unrel(model, ctx, buf);
   2d636:	f7ff fff0 	bl	2d61a <attention_set_unrel>
	if (err) {
   2d63a:	b928      	cbnz	r0, 2d648 <attention_set+0x18>
	return send_attention_status(model, ctx);
   2d63c:	4629      	mov	r1, r5
   2d63e:	4620      	mov	r0, r4
}
   2d640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return send_attention_status(model, ctx);
   2d644:	f7ed bece 	b.w	1b3e4 <send_attention_status>
}
   2d648:	bd38      	pop	{r3, r4, r5, pc}

0002d64a <atomic_and>:
{
   2d64a:	4603      	mov	r3, r0
   2d64c:	b510      	push	{r4, lr}
}
   2d64e:	e8d3 0fef 	ldaex	r0, [r3]
   2d652:	ea00 0201 	and.w	r2, r0, r1
   2d656:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d65a:	2c00      	cmp	r4, #0
   2d65c:	d1f7      	bne.n	2d64e <atomic_and+0x4>
   2d65e:	bd10      	pop	{r4, pc}

0002d660 <atomic_or>:
{
   2d660:	4603      	mov	r3, r0
   2d662:	b510      	push	{r4, lr}
}
   2d664:	e8d3 0fef 	ldaex	r0, [r3]
   2d668:	ea40 0201 	orr.w	r2, r0, r1
   2d66c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d670:	2c00      	cmp	r4, #0
   2d672:	d1f7      	bne.n	2d664 <atomic_or+0x4>
   2d674:	bd10      	pop	{r4, pc}

0002d676 <schedule_send.isra.0>:
static bool schedule_send(struct bt_mesh_ext_adv *adv)
   2d676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv) {
   2d67a:	4604      	mov	r4, r0
   2d67c:	2800      	cmp	r0, #0
   2d67e:	d056      	beq.n	2d72e <schedule_send.isra.0+0xb8>
	timestamp = adv->timestamp;
   2d680:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
	if (atomic_test_and_clear_bit(adv->flags, ADV_FLAG_PROXY)) {
   2d684:	f100 0804 	add.w	r8, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d688:	f06f 0104 	mvn.w	r1, #4
   2d68c:	4640      	mov	r0, r8
   2d68e:	f7ff ffdc 	bl	2d64a <atomic_and>
   2d692:	0742      	lsls	r2, r0, #29
   2d694:	d507      	bpl.n	2d6a6 <schedule_send.isra.0+0x30>
		(void)bt_le_ext_adv_stop(adv->instance);
   2d696:	68a0      	ldr	r0, [r4, #8]
   2d698:	f7fd fbc4 	bl	2ae24 <bt_le_ext_adv_stop>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d69c:	f06f 0101 	mvn.w	r1, #1
   2d6a0:	4640      	mov	r0, r8
   2d6a2:	f7ff ffd2 	bl	2d64a <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d6a6:	e8d8 3faf 	lda	r3, [r8]
	if (atomic_test_bit(adv->flags, ADV_FLAG_ACTIVE)) {
   2d6aa:	07db      	lsls	r3, r3, #31
   2d6ac:	d505      	bpl.n	2d6ba <schedule_send.isra.0+0x44>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d6ae:	4640      	mov	r0, r8
}
   2d6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d6b4:	2110      	movs	r1, #16
   2d6b6:	f7ff bfd3 	b.w	2d660 <atomic_or>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d6ba:	2108      	movs	r1, #8
   2d6bc:	4640      	mov	r0, r8
   2d6be:	f7ff ffcf 	bl	2d660 <atomic_or>
	} else if (atomic_test_and_set_bit(adv->flags, ADV_FLAG_SCHEDULED)) {
   2d6c2:	ea10 0501 	ands.w	r5, r0, r1
   2d6c6:	d132      	bne.n	2d72e <schedule_send.isra.0+0xb8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d6c8:	f06f 0110 	mvn.w	r1, #16
   2d6cc:	4640      	mov	r0, r8
   2d6ce:	f7ff ffbc 	bl	2d64a <atomic_and>
   2d6d2:	f001 ff48 	bl	2f566 <z_impl_k_uptime_ticks>
   2d6d6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   2d6da:	fba0 320c 	umull	r3, r2, r0, ip
   2d6de:	fb0c 2101 	mla	r1, ip, r1, r2
   2d6e2:	0bdb      	lsrs	r3, r3, #15
   2d6e4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	delta = uptime - *reftime;
   2d6e8:	1bdb      	subs	r3, r3, r7
   2d6ea:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   2d6ee:	eb61 0106 	sbc.w	r1, r1, r6
		k_work_reschedule(&adv->work, K_MSEC(ADV_INT_FAST_MS - delta));
   2d6f2:	f1d3 0314 	rsbs	r3, r3, #20
   2d6f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2d6fa:	2900      	cmp	r1, #0
   2d6fc:	bfbc      	itt	lt
   2d6fe:	462b      	movlt	r3, r5
   2d700:	4619      	movlt	r1, r3
   2d702:	f240 32e7 	movw	r2, #999	; 0x3e7
   2d706:	03c9      	lsls	r1, r1, #15
   2d708:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   2d70c:	03db      	lsls	r3, r3, #15
   2d70e:	1898      	adds	r0, r3, r2
   2d710:	f141 0100 	adc.w	r1, r1, #0
   2d714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d718:	2300      	movs	r3, #0
   2d71a:	f7da fd1b 	bl	8154 <__aeabi_uldivmod>
   2d71e:	4602      	mov	r2, r0
   2d720:	460b      	mov	r3, r1
   2d722:	f104 0018 	add.w	r0, r4, #24
}
   2d726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&adv->work, K_MSEC(ADV_INT_FAST_MS - delta));
   2d72a:	f7f8 bfa5 	b.w	26678 <k_work_reschedule>
}
   2d72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d732 <bt_mesh_adv_buf_local_ready>:
void bt_mesh_adv_buf_local_ready(void)
   2d732:	f7ee ba23 	b.w	1bb7c <bt_mesh_adv_gatt_update>

0002d736 <store_pending>:
{
   2d736:	b508      	push	{r3, lr}
	    atomic_test_and_clear_bit(pending_flags, BT_MESH_SETTINGS_RPL_PENDING)) {
   2d738:	2000      	movs	r0, #0
   2d73a:	f7ee faa7 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
	if (IS_ENABLED(CONFIG_BT_MESH_RPL_STORAGE_MODE_SETTINGS) &&
   2d73e:	b118      	cbz	r0, 2d748 <store_pending+0x12>
		bt_mesh_rpl_pending_store(BT_MESH_ADDR_ALL_NODES);
   2d740:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2d744:	f7ee fd0e 	bl	1c164 <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d748:	2001      	movs	r0, #1
   2d74a:	f7ee fa9f 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d74e:	b108      	cbz	r0, 2d754 <store_pending+0x1e>
		bt_mesh_subnet_pending_store();
   2d750:	f7e8 ffd8 	bl	16704 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d754:	2002      	movs	r0, #2
   2d756:	f7ee fa99 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d75a:	b108      	cbz	r0, 2d760 <store_pending+0x2a>
		bt_mesh_app_key_pending_store();
   2d75c:	f7e9 fabe 	bl	16cdc <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d760:	2003      	movs	r0, #3
   2d762:	f7ee fa93 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d766:	b108      	cbz	r0, 2d76c <store_pending+0x36>
		bt_mesh_net_pending_net_store();
   2d768:	f7e8 fca2 	bl	160b0 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d76c:	2004      	movs	r0, #4
   2d76e:	f7ee fa8d 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d772:	b108      	cbz	r0, 2d778 <store_pending+0x42>
		bt_mesh_net_pending_iv_store();
   2d774:	f7e8 fc64 	bl	16040 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d778:	2005      	movs	r0, #5
   2d77a:	f7ee fa87 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d77e:	b108      	cbz	r0, 2d784 <store_pending+0x4e>
		bt_mesh_net_pending_seq_store();
   2d780:	f7e8 fcca 	bl	16118 <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d784:	2006      	movs	r0, #6
   2d786:	f7ee fa81 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d78a:	b108      	cbz	r0, 2d790 <store_pending+0x5a>
		bt_mesh_hb_pub_pending_store();
   2d78c:	f7ea ffce 	bl	1872c <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d790:	2007      	movs	r0, #7
   2d792:	f7ee fa7b 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d796:	b108      	cbz	r0, 2d79c <store_pending+0x66>
		bt_mesh_cfg_pending_store();
   2d798:	f7e7 fa6e 	bl	14c78 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d79c:	2008      	movs	r0, #8
   2d79e:	f7ee fa75 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d7a2:	b108      	cbz	r0, 2d7a8 <store_pending+0x72>
		bt_mesh_model_pending_store();
   2d7a4:	f7eb ff90 	bl	196c8 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2d7a8:	2009      	movs	r0, #9
   2d7aa:	f7ee fa6f 	bl	1bc8c <atomic_test_and_clear_bit.constprop.0>
   2d7ae:	b118      	cbz	r0, 2d7b8 <store_pending+0x82>
}
   2d7b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   2d7b4:	f7ea bc7e 	b.w	180b4 <bt_mesh_va_pending_store>
}
   2d7b8:	bd08      	pop	{r3, pc}

0002d7ba <bt_mesh_rpl_update>:
	if (rpl->old_iv && !rx->old_iv) {
   2d7ba:	f990 3001 	ldrsb.w	r3, [r0, #1]
   2d7be:	2b00      	cmp	r3, #0
   2d7c0:	da07      	bge.n	2d7d2 <bt_mesh_rpl_update+0x18>
   2d7c2:	7d0b      	ldrb	r3, [r1, #20]
   2d7c4:	f013 0301 	ands.w	r3, r3, #1
		rpl->seg = 0;
   2d7c8:	bf02      	ittt	eq
   2d7ca:	6842      	ldreq	r2, [r0, #4]
   2d7cc:	f363 221f 	bfieq	r2, r3, #8, #24
   2d7d0:	6042      	streq	r2, [r0, #4]
	rpl->src = rx->ctx.addr;
   2d7d2:	890a      	ldrh	r2, [r1, #8]
   2d7d4:	8803      	ldrh	r3, [r0, #0]
   2d7d6:	f362 030e 	bfi	r3, r2, #0, #15
   2d7da:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
   2d7dc:	8a0b      	ldrh	r3, [r1, #16]
   2d7de:	8043      	strh	r3, [r0, #2]
   2d7e0:	7c8b      	ldrb	r3, [r1, #18]
   2d7e2:	7103      	strb	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
   2d7e4:	7d0a      	ldrb	r2, [r1, #20]
   2d7e6:	7843      	ldrb	r3, [r0, #1]
   2d7e8:	f362 13c7 	bfi	r3, r2, #7, #1
   2d7ec:	7043      	strb	r3, [r0, #1]
		schedule_rpl_store(rpl, false);
   2d7ee:	f7ee bb3b 	b.w	1be68 <schedule_rpl_store.constprop.0>

0002d7f2 <purge_buffers>:
{
   2d7f2:	b510      	push	{r4, lr}
   2d7f4:	4604      	mov	r4, r0
	while ((buf = (void *)net_buf_slist_get(list))) {
   2d7f6:	4620      	mov	r0, r4
   2d7f8:	f7f2 fc0a 	bl	20010 <net_buf_slist_get>
   2d7fc:	b900      	cbnz	r0, 2d800 <purge_buffers+0xe>
}
   2d7fe:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   2d800:	f7f2 fc6c 	bl	200dc <net_buf_unref>
   2d804:	e7f7      	b.n	2d7f6 <purge_buffers+0x4>

0002d806 <friend_recv_delay>:
{
   2d806:	b510      	push	{r4, lr}
   2d808:	4604      	mov	r4, r0
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2d80a:	7880      	ldrb	r0, [r0, #2]
	frnd->pending_req = 1U;
   2d80c:	78e3      	ldrb	r3, [r4, #3]
   2d80e:	03c0      	lsls	r0, r0, #15
   2d810:	f043 0304 	orr.w	r3, r3, #4
   2d814:	f500 10cc 	add.w	r0, r0, #1671168	; 0x198000
   2d818:	70e3      	strb	r3, [r4, #3]
   2d81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d81e:	2300      	movs	r3, #0
   2d820:	2100      	movs	r1, #0
   2d822:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   2d826:	f7da fc95 	bl	8154 <__aeabi_uldivmod>
   2d82a:	4602      	mov	r2, r0
   2d82c:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
   2d82e:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   2d832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_reschedule(&frnd->timer, K_MSEC(delay));
   2d836:	f7f8 bf1f 	b.w	26678 <k_work_reschedule>

0002d83a <friend_clear_sent>:
{
   2d83a:	b570      	push	{r4, r5, r6, lr}
			  K_SECONDS(frnd->clear.repeat_sec));
   2d83c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   2d840:	460c      	mov	r4, r1
			  K_SECONDS(frnd->clear.repeat_sec));
   2d842:	f8b1 50b6 	ldrh.w	r5, [r1, #182]	; 0xb6
   2d846:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2d84a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2d84e:	2100      	movs	r1, #0
   2d850:	435d      	muls	r5, r3
   2d852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d856:	2300      	movs	r3, #0
   2d858:	fbe5 0106 	umlal	r0, r1, r5, r6
   2d85c:	f7da fc7a 	bl	8154 <__aeabi_uldivmod>
   2d860:	4602      	mov	r2, r0
   2d862:	460b      	mov	r3, r1
	k_work_reschedule(&frnd->clear.timer,
   2d864:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2d868:	f7f8 ff06 	bl	26678 <k_work_reschedule>
	frnd->clear.repeat_sec *= 2U;
   2d86c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   2d870:	005b      	lsls	r3, r3, #1
   2d872:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
}
   2d876:	bd70      	pop	{r4, r5, r6, pc}

0002d878 <friend_lpn_matches>:
{
   2d878:	b510      	push	{r4, lr}
	if (!frnd->established) {
   2d87a:	78c3      	ldrb	r3, [r0, #3]
{
   2d87c:	4604      	mov	r4, r0
	if (!frnd->established) {
   2d87e:	f013 0010 	ands.w	r0, r3, #16
   2d882:	d013      	beq.n	2d8ac <friend_lpn_matches+0x34>
	if (net_idx != frnd->subnet->net_idx) {
   2d884:	6923      	ldr	r3, [r4, #16]
   2d886:	8c1b      	ldrh	r3, [r3, #32]
   2d888:	428b      	cmp	r3, r1
   2d88a:	d11c      	bne.n	2d8c6 <friend_lpn_matches+0x4e>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   2d88c:	b213      	sxth	r3, r2
   2d88e:	2b00      	cmp	r3, #0
   2d890:	dc0d      	bgt.n	2d8ae <friend_lpn_matches+0x36>
		if (frnd->sub_list[i] == addr) {
   2d892:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   2d896:	4293      	cmp	r3, r2
   2d898:	d017      	beq.n	2d8ca <friend_lpn_matches+0x52>
   2d89a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   2d89e:	4293      	cmp	r3, r2
   2d8a0:	d013      	beq.n	2d8ca <friend_lpn_matches+0x52>
   2d8a2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
   2d8a6:	1a83      	subs	r3, r0, r2
   2d8a8:	4258      	negs	r0, r3
   2d8aa:	4158      	adcs	r0, r3
}
   2d8ac:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   2d8ae:	8820      	ldrh	r0, [r4, #0]
   2d8b0:	2800      	cmp	r0, #0
   2d8b2:	d0fb      	beq.n	2d8ac <friend_lpn_matches+0x34>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   2d8b4:	4282      	cmp	r2, r0
   2d8b6:	d306      	bcc.n	2d8c6 <friend_lpn_matches+0x4e>
   2d8b8:	7a23      	ldrb	r3, [r4, #8]
   2d8ba:	4403      	add	r3, r0
   2d8bc:	429a      	cmp	r2, r3
   2d8be:	bfac      	ite	ge
   2d8c0:	2000      	movge	r0, #0
   2d8c2:	2001      	movlt	r0, #1
   2d8c4:	e7f2      	b.n	2d8ac <friend_lpn_matches+0x34>
		return false;
   2d8c6:	2000      	movs	r0, #0
   2d8c8:	e7f0      	b.n	2d8ac <friend_lpn_matches+0x34>
			return true;
   2d8ca:	2001      	movs	r0, #1
   2d8cc:	e7ee      	b.n	2d8ac <friend_lpn_matches+0x34>

0002d8ce <buf_send_start>:
{
   2d8ce:	b538      	push	{r3, r4, r5, lr}
	if (!frnd->pending_buf) {
   2d8d0:	78d3      	ldrb	r3, [r2, #3]
{
   2d8d2:	4615      	mov	r5, r2
	if (!frnd->pending_buf) {
   2d8d4:	071a      	lsls	r2, r3, #28
   2d8d6:	d50c      	bpl.n	2d8f2 <buf_send_start+0x24>
	frnd->pending_buf = 0U;
   2d8d8:	f36f 03c3 	bfc	r3, #3, #1
	if (!frnd->established && frnd->last) {
   2d8dc:	f013 0410 	ands.w	r4, r3, #16
	frnd->pending_buf = 0U;
   2d8e0:	70eb      	strb	r3, [r5, #3]
	if (!frnd->established && frnd->last) {
   2d8e2:	d106      	bne.n	2d8f2 <buf_send_start+0x24>
   2d8e4:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   2d8e8:	b118      	cbz	r0, 2d8f2 <buf_send_start+0x24>
		net_buf_unref(frnd->last);
   2d8ea:	f7f2 fbf7 	bl	200dc <net_buf_unref>
		frnd->last = NULL;
   2d8ee:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   2d8f2:	bd38      	pop	{r3, r4, r5, pc}

0002d8f4 <buf_send_end>:
{
   2d8f4:	b570      	push	{r4, r5, r6, lr}
	if (frnd->pending_req || frnd->pending_buf) {
   2d8f6:	78ca      	ldrb	r2, [r1, #3]
{
   2d8f8:	460b      	mov	r3, r1
	if (frnd->pending_req || frnd->pending_buf) {
   2d8fa:	f012 010c 	ands.w	r1, r2, #12
   2d8fe:	d11c      	bne.n	2d93a <buf_send_end+0x46>
	if (frnd->established) {
   2d900:	06d2      	lsls	r2, r2, #27
		k_work_reschedule(&frnd->timer, K_MSEC(frnd->poll_to));
   2d902:	f103 0560 	add.w	r5, r3, #96	; 0x60
	if (frnd->established) {
   2d906:	d514      	bpl.n	2d932 <buf_send_end+0x3e>
   2d908:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2d90c:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_work_reschedule(&frnd->timer, K_MSEC(frnd->poll_to));
   2d910:	685c      	ldr	r4, [r3, #4]
   2d912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d916:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2d91a:	2300      	movs	r3, #0
   2d91c:	fbc4 0106 	smlal	r0, r1, r4, r6
   2d920:	f7da fc18 	bl	8154 <__aeabi_uldivmod>
   2d924:	4602      	mov	r2, r0
   2d926:	460b      	mov	r3, r1
		k_work_reschedule(&frnd->timer, K_SECONDS(1));
   2d928:	4628      	mov	r0, r5
}
   2d92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_reschedule(&frnd->timer, K_SECONDS(1));
   2d92e:	f7f8 bea3 	b.w	26678 <k_work_reschedule>
   2d932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2d936:	2300      	movs	r3, #0
   2d938:	e7f6      	b.n	2d928 <buf_send_end+0x34>
}
   2d93a:	bd70      	pop	{r4, r5, r6, pc}

0002d93c <z_log_msg_static_create.constprop.0>:
   2d93c:	2300      	movs	r3, #0
   2d93e:	f7dd b90d 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002d942 <net_buf_skip.isra.0>:
static inline struct net_buf *net_buf_skip(struct net_buf *buf, size_t len)
   2d942:	b570      	push	{r4, r5, r6, lr}
   2d944:	4604      	mov	r4, r0
   2d946:	460d      	mov	r5, r1
	while (buf && len--) {
   2d948:	b11c      	cbz	r4, 2d952 <net_buf_skip.isra.0+0x10>
	return net_buf_simple_pull_u8(&buf->b);
   2d94a:	f104 060c 	add.w	r6, r4, #12
	while (buf && len--) {
   2d94e:	3d01      	subs	r5, #1
   2d950:	d200      	bcs.n	2d954 <net_buf_skip.isra.0+0x12>
}
   2d952:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_pull_u8(&buf->b);
   2d954:	4630      	mov	r0, r6
   2d956:	f000 fa91 	bl	2de7c <net_buf_simple_pull_u8>
		if (!buf->len) {
   2d95a:	8a20      	ldrh	r0, [r4, #16]
   2d95c:	2800      	cmp	r0, #0
   2d95e:	d1f6      	bne.n	2d94e <net_buf_skip.isra.0+0xc>
			buf = net_buf_frag_del(NULL, buf);
   2d960:	4621      	mov	r1, r4
   2d962:	f7f2 fc71 	bl	20248 <net_buf_frag_del>
   2d966:	4604      	mov	r4, r0
   2d968:	e7ee      	b.n	2d948 <net_buf_skip.isra.0+0x6>

0002d96a <clear_timeout>:
{
   2d96a:	b570      	push	{r4, r5, r6, lr}
	if (frnd->clear.frnd == BT_MESH_ADDR_UNASSIGNED) {
   2d96c:	f830 3c04 	ldrh.w	r3, [r0, #-4]
{
   2d970:	4604      	mov	r4, r0
	if (frnd->clear.frnd == BT_MESH_ADDR_UNASSIGNED) {
   2d972:	b1ab      	cbz	r3, 2d9a0 <clear_timeout+0x36>
   2d974:	f001 fdf7 	bl	2f566 <z_impl_k_uptime_ticks>
   2d978:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   2d97c:	fba0 3206 	umull	r3, r2, r0, r6
   2d980:	fb06 2201 	mla	r2, r6, r1, r2
   2d984:	0bdb      	lsrs	r3, r3, #15
   2d986:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	duration = k_uptime_get_32() - frnd->clear.start;
   2d98a:	f854 2c08 	ldr.w	r2, [r4, #-8]
	if (duration > 2 * frnd->poll_to) {
   2d98e:	f854 5cb4 	ldr.w	r5, [r4, #-180]
	duration = k_uptime_get_32() - frnd->clear.start;
   2d992:	1a9b      	subs	r3, r3, r2
	if (duration > 2 * frnd->poll_to) {
   2d994:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   2d998:	d903      	bls.n	2d9a2 <clear_timeout+0x38>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   2d99a:	2300      	movs	r3, #0
   2d99c:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   2d9a0:	bd70      	pop	{r4, r5, r6, pc}
	send_friend_clear(frnd);
   2d9a2:	f1a4 00b8 	sub.w	r0, r4, #184	; 0xb8
}
   2d9a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_clear(frnd);
   2d9aa:	f7ee bce1 	b.w	1c370 <send_friend_clear>

0002d9ae <is_seg>:
{
   2d9ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return list->head;
   2d9b2:	6804      	ldr	r4, [r0, #0]
   2d9b4:	4688      	mov	r8, r1
   2d9b6:	4616      	mov	r6, r2
	if (!buf) {
   2d9b8:	b33c      	cbz	r4, 2da0a <is_seg+0x5c>
	net_buf_simple_save(&buf->b, &state);
   2d9ba:	f104 090c 	add.w	r9, r4, #12
	state->offset = net_buf_simple_headroom(buf);
   2d9be:	4648      	mov	r0, r9
   2d9c0:	f000 fa7f 	bl	2dec2 <net_buf_simple_headroom>
	net_buf_skip(buf, 5);   /* skip IVI, NID, CTL, TTL, SEQ */
   2d9c4:	2105      	movs	r1, #5
   2d9c6:	4605      	mov	r5, r0
   2d9c8:	4620      	mov	r0, r4
	state->len = buf->len;
   2d9ca:	f8b4 a010 	ldrh.w	sl, [r4, #16]
   2d9ce:	f7ff ffb8 	bl	2d942 <net_buf_skip.isra.0>
	return net_buf_simple_pull_be16(&buf->b);
   2d9d2:	4648      	mov	r0, r9
   2d9d4:	f000 fa62 	bl	2de9c <net_buf_simple_pull_be16>
   2d9d8:	4607      	mov	r7, r0
	net_buf_skip(buf, 3);   /* skip DST, OP/AID */
   2d9da:	2103      	movs	r1, #3
   2d9dc:	4620      	mov	r0, r4
   2d9de:	f7ff ffb0 	bl	2d942 <net_buf_skip.isra.0>
   2d9e2:	4648      	mov	r0, r9
   2d9e4:	f000 fa5a 	bl	2de9c <net_buf_simple_pull_be16>
	buf->data = buf->__buf + state->offset;
   2d9e8:	6963      	ldr	r3, [r4, #20]
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2d9ea:	45b8      	cmp	r8, r7
   2d9ec:	fa13 f585 	uxtah	r5, r3, r5
   2d9f0:	60e5      	str	r5, [r4, #12]
	buf->len = state->len;
   2d9f2:	f8a4 a010 	strh.w	sl, [r4, #16]
   2d9f6:	d106      	bne.n	2da06 <is_seg+0x58>
   2d9f8:	f3c0 008c 	ubfx	r0, r0, #2, #13
   2d9fc:	1b83      	subs	r3, r0, r6
   2d9fe:	4258      	negs	r0, r3
   2da00:	4158      	adcs	r0, r3
}
   2da02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2da06:	2000      	movs	r0, #0
   2da08:	e7fb      	b.n	2da02 <is_seg+0x54>
		return false;
   2da0a:	4620      	mov	r0, r4
   2da0c:	e7f9      	b.n	2da02 <is_seg+0x54>

0002da0e <friend_queue_has_space.part.0>:
static bool friend_queue_has_space(struct bt_mesh_friend *frnd, uint16_t addr,
   2da0e:	b538      	push	{r3, r4, r5, lr}
   2da10:	4604      	mov	r4, r0
   2da12:	461d      	mov	r5, r3
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2da14:	b942      	cbnz	r2, 2da28 <friend_queue_has_space.part.0+0x1a>
		total += seg->seg_count;
   2da16:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
   2da1a:	f1c0 0010 	rsb	r0, r0, #16
   2da1e:	42a8      	cmp	r0, r5
   2da20:	bf94      	ite	ls
   2da22:	2000      	movls	r0, #0
   2da24:	2001      	movhi	r0, #1
}
   2da26:	bd38      	pop	{r3, r4, r5, pc}
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2da28:	8812      	ldrh	r2, [r2, #0]
   2da2a:	3090      	adds	r0, #144	; 0x90
   2da2c:	f3c2 020c 	ubfx	r2, r2, #0, #13
   2da30:	f7ff ffbd 	bl	2d9ae <is_seg>
   2da34:	2800      	cmp	r0, #0
   2da36:	d1f6      	bne.n	2da26 <friend_queue_has_space.part.0+0x18>
   2da38:	e7ed      	b.n	2da16 <friend_queue_has_space.part.0+0x8>

0002da3a <subnet_evt>:
	if (evt == BT_MESH_KEY_ADDED) {
   2da3a:	b109      	cbz	r1, 2da40 <subnet_evt+0x6>
   2da3c:	f7ee be2e 	b.w	1c69c <subnet_evt.part.0>
}
   2da40:	4770      	bx	lr

0002da42 <friend_purge_old_ack>:
{
   2da42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da46:	4605      	mov	r5, r0
   2da48:	4689      	mov	r9, r1
   2da4a:	4692      	mov	sl, r2
	sys_snode_t *cur, *prev = NULL;
   2da4c:	2700      	movs	r7, #0
   2da4e:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   2da52:	b90c      	cbnz	r4, 2da58 <friend_purge_old_ack+0x16>
}
   2da54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (buf->len != 16) {
   2da58:	8a23      	ldrh	r3, [r4, #16]
   2da5a:	2b10      	cmp	r3, #16
   2da5c:	d117      	bne.n	2da8e <friend_purge_old_ack+0x4c>
	net_buf_simple_save(&buf->b, &state);
   2da5e:	f104 0b0c 	add.w	fp, r4, #12
	state->offset = net_buf_simple_headroom(buf);
   2da62:	4658      	mov	r0, fp
   2da64:	f000 fa2d 	bl	2dec2 <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   2da68:	2101      	movs	r1, #1
   2da6a:	4606      	mov	r6, r0
   2da6c:	4620      	mov	r0, r4
	state->len = buf->len;
   2da6e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   2da72:	f7ff ff66 	bl	2d942 <net_buf_skip.isra.0>
	return net_buf_simple_pull_u8(&buf->b);
   2da76:	4658      	mov	r0, fp
   2da78:	f000 fa00 	bl	2de7c <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   2da7c:	f010 0f80 	tst.w	r0, #128	; 0x80
   2da80:	b2b6      	uxth	r6, r6
   2da82:	d107      	bne.n	2da94 <friend_purge_old_ack+0x52>
	buf->data = buf->__buf + state->offset;
   2da84:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   2da86:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   2da8a:	4433      	add	r3, r6
   2da8c:	60e3      	str	r3, [r4, #12]
	return node->next;
   2da8e:	4627      	mov	r7, r4
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   2da90:	6824      	ldr	r4, [r4, #0]
   2da92:	e7de      	b.n	2da52 <friend_purge_old_ack+0x10>
	return net_buf_simple_pull(&buf->b, len);
   2da94:	2103      	movs	r1, #3
   2da96:	4658      	mov	r0, fp
   2da98:	f7f2 fc26 	bl	202e8 <net_buf_simple_pull>
	return net_buf_simple_pull_be16(&buf->b);
   2da9c:	4658      	mov	r0, fp
   2da9e:	f000 f9fd 	bl	2de9c <net_buf_simple_pull_be16>
	if (src != net_buf_pull_be16(buf)) {
   2daa2:	4582      	cmp	sl, r0
   2daa4:	d1ee      	bne.n	2da84 <friend_purge_old_ack+0x42>
	net_buf_skip(buf, 2); /* skip dst */
   2daa6:	2102      	movs	r1, #2
   2daa8:	4620      	mov	r0, r4
   2daaa:	f7ff ff4a 	bl	2d942 <net_buf_skip.isra.0>
	return net_buf_simple_pull_mem(&buf->b, len);
   2daae:	2101      	movs	r1, #1
   2dab0:	4658      	mov	r0, fp
   2dab2:	f7f2 fc33 	bl	2031c <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1)) != TRANS_CTL_OP_ACK) {
   2dab6:	7803      	ldrb	r3, [r0, #0]
   2dab8:	065b      	lsls	r3, r3, #25
   2daba:	d1e3      	bne.n	2da84 <friend_purge_old_ack+0x42>
	return net_buf_simple_pull_be16(&buf->b);
   2dabc:	4658      	mov	r0, fp
   2dabe:	f000 f9ed 	bl	2de9c <net_buf_simple_pull_be16>
	found = ((net_buf_pull_be16(buf) >> 2) & TRANS_SEQ_ZERO_MASK) ==
   2dac2:	f8d9 3000 	ldr.w	r3, [r9]
   2dac6:	f3c0 008f 	ubfx	r0, r0, #2, #16
   2daca:	4058      	eors	r0, r3
	buf->data = buf->__buf + state->offset;
   2dacc:	6963      	ldr	r3, [r4, #20]
   2dace:	f3c0 000c 	ubfx	r0, r0, #0, #13
   2dad2:	4433      	add	r3, r6
   2dad4:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   2dad6:	f8a4 8010 	strh.w	r8, [r4, #16]
		if (is_segack(buf, seq_auth, src)) {
   2dada:	2800      	cmp	r0, #0
   2dadc:	d1d7      	bne.n	2da8e <friend_purge_old_ack+0x4c>
   2dade:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dae0:	b99f      	cbnz	r7, 2db0a <friend_purge_old_ack+0xc8>
   2dae2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
	list->head = node;
   2dae6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   2daea:	4294      	cmp	r4, r2
   2daec:	d101      	bne.n	2daf2 <friend_purge_old_ack+0xb0>
	list->tail = node;
   2daee:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
	parent->next = child;
   2daf2:	2300      	movs	r3, #0
   2daf4:	6023      	str	r3, [r4, #0]
			frnd->queue_size--;
   2daf6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
			net_buf_unref(buf);
   2dafa:	4620      	mov	r0, r4
			frnd->queue_size--;
   2dafc:	3b01      	subs	r3, #1
   2dafe:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
   2db02:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
   2db06:	f7f2 bae9 	b.w	200dc <net_buf_unref>
   2db0a:	603b      	str	r3, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2db0c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2db10:	429c      	cmp	r4, r3
	list->tail = node;
   2db12:	bf08      	it	eq
   2db14:	f8c5 70a4 	streq.w	r7, [r5, #164]	; 0xa4
}
   2db18:	e7eb      	b.n	2daf2 <friend_purge_old_ack+0xb0>

0002db1a <bt_mesh_friend_clear>:
	struct bt_mesh_net_tx tx = {
   2db1a:	4603      	mov	r3, r0
{
   2db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_net_tx tx = {
   2db1e:	2700      	movs	r7, #0
   2db20:	f853 2b04 	ldr.w	r2, [r3], #4
{
   2db24:	b087      	sub	sp, #28
   2db26:	460c      	mov	r4, r1
	struct bt_mesh_net_tx tx = {
   2db28:	e9cd 2303 	strd	r2, r3, [sp, #12]
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   2db2c:	680d      	ldr	r5, [r1, #0]
{
   2db2e:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
   2db30:	9705      	str	r7, [sp, #20]
		.src  = bt_mesh_primary_addr(),
   2db32:	f7eb fbef 	bl	19314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   2db36:	f8ad 0014 	strh.w	r0, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   2db3a:	f7e6 fffd 	bl	14b38 <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
   2db3e:	88a3      	ldrh	r3, [r4, #4]
	struct bt_mesh_net_tx tx = {
   2db40:	f88d 0016 	strb.w	r0, [sp, #22]
	if (buf->len < sizeof(*msg)) {
   2db44:	2b03      	cmp	r3, #3
   2db46:	d928      	bls.n	2db9a <bt_mesh_friend_clear+0x80>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   2db48:	8829      	ldrh	r1, [r5, #0]
   2db4a:	6830      	ldr	r0, [r6, #0]
   2db4c:	ba49      	rev16	r1, r1
   2db4e:	463b      	mov	r3, r7
   2db50:	463a      	mov	r2, r7
   2db52:	8c00      	ldrh	r0, [r0, #32]
   2db54:	b289      	uxth	r1, r1
   2db56:	f7ee fffd 	bl	1cb54 <bt_mesh_friend_find>
   2db5a:	886c      	ldrh	r4, [r5, #2]
	if (!frnd) {
   2db5c:	4606      	mov	r6, r0
   2db5e:	ba64      	rev16	r4, r4
   2db60:	b2a4      	uxth	r4, r4
   2db62:	b1b8      	cbz	r0, 2db94 <bt_mesh_friend_clear+0x7a>
	if (lpn_counter - frnd->lpn_counter > 255) {
   2db64:	8943      	ldrh	r3, [r0, #10]
   2db66:	1ae4      	subs	r4, r4, r3
   2db68:	2cff      	cmp	r4, #255	; 0xff
   2db6a:	dc13      	bgt.n	2db94 <bt_mesh_friend_clear+0x7a>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   2db6c:	227f      	movs	r2, #127	; 0x7f
   2db6e:	9b04      	ldr	r3, [sp, #16]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   2db70:	2106      	movs	r1, #6
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   2db72:	72da      	strb	r2, [r3, #11]
	cfm.lpn_addr    = msg->lpn_addr;
   2db74:	882b      	ldrh	r3, [r5, #0]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   2db76:	aa02      	add	r2, sp, #8
	cfm.lpn_addr    = msg->lpn_addr;
   2db78:	f8ad 3008 	strh.w	r3, [sp, #8]
	cfm.lpn_counter = msg->lpn_counter;
   2db7c:	886b      	ldrh	r3, [r5, #2]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   2db7e:	a803      	add	r0, sp, #12
	cfm.lpn_counter = msg->lpn_counter;
   2db80:	f8ad 300a 	strh.w	r3, [sp, #10]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   2db84:	e9cd 7700 	strd	r7, r7, [sp]
   2db88:	2304      	movs	r3, #4
   2db8a:	f7e9 fd45 	bl	17618 <bt_mesh_ctl_send>
	friend_clear(frnd);
   2db8e:	4630      	mov	r0, r6
   2db90:	f7ee fb9c 	bl	1c2cc <friend_clear>
		return 0;
   2db94:	2000      	movs	r0, #0
}
   2db96:	b007      	add	sp, #28
   2db98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   2db9a:	f06f 0015 	mvn.w	r0, #21
   2db9e:	e7fa      	b.n	2db96 <bt_mesh_friend_clear+0x7c>

0002dba0 <bt_mesh_friend_sub_add>:
{
   2dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   2dba4:	888b      	ldrh	r3, [r1, #4]
{
   2dba6:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   2dba8:	2b02      	cmp	r3, #2
   2dbaa:	d936      	bls.n	2dc1a <bt_mesh_friend_sub_add+0x7a>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   2dbac:	2301      	movs	r3, #1
   2dbae:	6804      	ldr	r4, [r0, #0]
   2dbb0:	8901      	ldrh	r1, [r0, #8]
   2dbb2:	461a      	mov	r2, r3
   2dbb4:	8c20      	ldrh	r0, [r4, #32]
   2dbb6:	f7ee ffcd 	bl	1cb54 <bt_mesh_friend_find>
	if (!frnd) {
   2dbba:	4604      	mov	r4, r0
   2dbbc:	b188      	cbz	r0, 2dbe2 <bt_mesh_friend_sub_add+0x42>
	if (frnd->pending_buf) {
   2dbbe:	78c3      	ldrb	r3, [r0, #3]
   2dbc0:	071b      	lsls	r3, r3, #28
   2dbc2:	d40e      	bmi.n	2dbe2 <bt_mesh_friend_sub_add+0x42>
	friend_recv_delay(frnd);
   2dbc4:	f7ff fe1f 	bl	2d806 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   2dbc8:	4628      	mov	r0, r5
   2dbca:	f000 f957 	bl	2de7c <net_buf_simple_pull_u8>
	if (empty_idx != INT_MAX) {
   2dbce:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
	xact = net_buf_simple_pull_u8(buf);
   2dbd2:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   2dbd4:	88ab      	ldrh	r3, [r5, #4]
   2dbd6:	2b01      	cmp	r3, #1
   2dbd8:	d806      	bhi.n	2dbe8 <bt_mesh_friend_sub_add+0x48>
	enqueue_sub_cfm(frnd, xact);
   2dbda:	4631      	mov	r1, r6
   2dbdc:	4620      	mov	r0, r4
   2dbde:	f7ee fecd 	bl	1c97c <enqueue_sub_cfm>
		return 0;
   2dbe2:	2000      	movs	r0, #0
}
   2dbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   2dbe8:	4628      	mov	r0, r5
   2dbea:	f000 f957 	bl	2de9c <net_buf_simple_pull_be16>
	int empty_idx = INT_MAX;
   2dbee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
	for (int i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   2dbf2:	2200      	movs	r2, #0
   2dbf4:	f104 0754 	add.w	r7, r4, #84	; 0x54
		if (frnd->sub_list[i] == addr) {
   2dbf8:	f837 1f02 	ldrh.w	r1, [r7, #2]!
   2dbfc:	4288      	cmp	r0, r1
   2dbfe:	d0e9      	beq.n	2dbd4 <bt_mesh_friend_sub_add+0x34>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   2dc00:	2900      	cmp	r1, #0
   2dc02:	bf08      	it	eq
   2dc04:	4613      	moveq	r3, r2
	for (int i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   2dc06:	3201      	adds	r2, #1
   2dc08:	2a03      	cmp	r2, #3
   2dc0a:	d1f5      	bne.n	2dbf8 <bt_mesh_friend_sub_add+0x58>
	if (empty_idx != INT_MAX) {
   2dc0c:	4543      	cmp	r3, r8
		frnd->sub_list[empty_idx] = addr;
   2dc0e:	bf1c      	itt	ne
   2dc10:	eb04 0343 	addne.w	r3, r4, r3, lsl #1
   2dc14:	f8a3 0056 	strhne.w	r0, [r3, #86]	; 0x56
   2dc18:	e7dc      	b.n	2dbd4 <bt_mesh_friend_sub_add+0x34>
		return -EINVAL;
   2dc1a:	f06f 0015 	mvn.w	r0, #21
   2dc1e:	e7e1      	b.n	2dbe4 <bt_mesh_friend_sub_add+0x44>

0002dc20 <bt_mesh_friend_sub_rem>:
{
   2dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   2dc22:	888b      	ldrh	r3, [r1, #4]
{
   2dc24:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   2dc26:	2b02      	cmp	r3, #2
   2dc28:	d934      	bls.n	2dc94 <bt_mesh_friend_sub_rem+0x74>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   2dc2a:	2301      	movs	r3, #1
   2dc2c:	6804      	ldr	r4, [r0, #0]
   2dc2e:	8901      	ldrh	r1, [r0, #8]
   2dc30:	461a      	mov	r2, r3
   2dc32:	8c20      	ldrh	r0, [r4, #32]
   2dc34:	f7ee ff8e 	bl	1cb54 <bt_mesh_friend_find>
	if (!frnd) {
   2dc38:	4604      	mov	r4, r0
   2dc3a:	b180      	cbz	r0, 2dc5e <bt_mesh_friend_sub_rem+0x3e>
	if (frnd->pending_buf) {
   2dc3c:	78c3      	ldrb	r3, [r0, #3]
   2dc3e:	f013 0708 	ands.w	r7, r3, #8
   2dc42:	d10c      	bne.n	2dc5e <bt_mesh_friend_sub_rem+0x3e>
	friend_recv_delay(frnd);
   2dc44:	f7ff fddf 	bl	2d806 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   2dc48:	4628      	mov	r0, r5
   2dc4a:	f000 f917 	bl	2de7c <net_buf_simple_pull_u8>
   2dc4e:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   2dc50:	88ab      	ldrh	r3, [r5, #4]
   2dc52:	2b01      	cmp	r3, #1
   2dc54:	d805      	bhi.n	2dc62 <bt_mesh_friend_sub_rem+0x42>
	enqueue_sub_cfm(frnd, xact);
   2dc56:	4631      	mov	r1, r6
   2dc58:	4620      	mov	r0, r4
   2dc5a:	f7ee fe8f 	bl	1c97c <enqueue_sub_cfm>
		return 0;
   2dc5e:	2000      	movs	r0, #0
}
   2dc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   2dc62:	4628      	mov	r0, r5
   2dc64:	f000 f91a 	bl	2de9c <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   2dc68:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   2dc6c:	4283      	cmp	r3, r0
   2dc6e:	d00d      	beq.n	2dc8c <bt_mesh_friend_sub_rem+0x6c>
   2dc70:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   2dc74:	4283      	cmp	r3, r0
   2dc76:	d00b      	beq.n	2dc90 <bt_mesh_friend_sub_rem+0x70>
   2dc78:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   2dc7c:	4283      	cmp	r3, r0
   2dc7e:	d1e7      	bne.n	2dc50 <bt_mesh_friend_sub_rem+0x30>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   2dc80:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   2dc82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   2dc86:	f8a3 7056 	strh.w	r7, [r3, #86]	; 0x56
			return;
   2dc8a:	e7e1      	b.n	2dc50 <bt_mesh_friend_sub_rem+0x30>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   2dc8c:	2300      	movs	r3, #0
   2dc8e:	e7f8      	b.n	2dc82 <bt_mesh_friend_sub_rem+0x62>
   2dc90:	2301      	movs	r3, #1
   2dc92:	e7f6      	b.n	2dc82 <bt_mesh_friend_sub_rem+0x62>
		return -EINVAL;
   2dc94:	f06f 0015 	mvn.w	r0, #21
   2dc98:	e7e2      	b.n	2dc60 <bt_mesh_friend_sub_rem+0x40>

0002dc9a <pub_key_ready>:
}
   2dc9a:	4770      	bx	lr

0002dc9c <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2dc9c:	b538      	push	{r3, r4, r5, lr}
   2dc9e:	4604      	mov	r4, r0
   2dca0:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   2dca2:	2105      	movs	r1, #5
   2dca4:	f7f2 f942 	bl	1ff2c <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   2dca8:	4629      	mov	r1, r5
   2dcaa:	4620      	mov	r0, r4
}
   2dcac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   2dcb0:	f000 b91f 	b.w	2def2 <net_buf_simple_add_u8>

0002dcb4 <z_log_msg_static_create.constprop.0>:
   2dcb4:	2300      	movs	r3, #0
   2dcb6:	f7dc bf51 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002dcba <prov_fail>:
	prov_send_fail_msg(reason);
   2dcba:	f7ef be4f 	b.w	1d95c <prov_send_fail_msg>

0002dcbe <atomic_or>:
{
   2dcbe:	4603      	mov	r3, r0
   2dcc0:	b510      	push	{r4, lr}
}
   2dcc2:	e8d3 0fef 	ldaex	r0, [r3]
   2dcc6:	ea40 0201 	orr.w	r2, r0, r1
   2dcca:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2dcce:	2c00      	cmp	r4, #0
   2dcd0:	d1f7      	bne.n	2dcc2 <atomic_or+0x4>
   2dcd2:	bd10      	pop	{r4, pc}

0002dcd4 <z_log_msg_static_create.constprop.0>:
   2dcd4:	2300      	movs	r3, #0
   2dcd6:	f7dc bf41 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002dcda <adv_buf_create>:
{
   2dcda:	b507      	push	{r0, r1, r2, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, BT_MESH_LOCAL_ADV,
   2dcdc:	2300      	movs	r3, #0
   2dcde:	f243 3234 	movw	r2, #13108	; 0x3334
   2dce2:	2101      	movs	r1, #1
   2dce4:	e9cd 2300 	strd	r2, r3, [sp]
   2dce8:	f040 0208 	orr.w	r2, r0, #8
   2dcec:	2000      	movs	r0, #0
   2dcee:	f7e7 f843 	bl	14d78 <bt_mesh_adv_create>
	if (!buf) {
   2dcf2:	b920      	cbnz	r0, 2dcfe <adv_buf_create+0x24>
}
   2dcf4:	b003      	add	sp, #12
   2dcf6:	f85d eb04 	ldr.w	lr, [sp], #4
   2dcfa:	f7f0 badd 	b.w	1e2b8 <adv_buf_create.part.0>
   2dcfe:	b003      	add	sp, #12
   2dd00:	f85d fb04 	ldr.w	pc, [sp], #4

0002dd04 <net_buf_add_u8.isra.0>:
	return net_buf_simple_add_u8(&buf->b, val);
   2dd04:	300c      	adds	r0, #12
   2dd06:	f000 b8f4 	b.w	2def2 <net_buf_simple_add_u8>

0002dd0a <buf_start>:
{
   2dd0a:	4608      	mov	r0, r1
   2dd0c:	4611      	mov	r1, r2
	if (err) {
   2dd0e:	b108      	cbz	r0, 2dd14 <buf_start+0xa>
		buf_sent(err, user_data);
   2dd10:	f7f0 bdac 	b.w	1e86c <buf_sent>
}
   2dd14:	4770      	bx	lr

0002dd16 <bt_mesh_pb_adv_reset>:

void bt_mesh_pb_adv_reset(void)
{
	reset_adv_link();
   2dd16:	f7f0 bb33 	b.w	1e380 <reset_adv_link>

0002dd1a <clear_tx>:
}
   2dd1a:	4770      	bx	lr

0002dd1c <bt_mesh_pb_gatt_reset>:
}

void bt_mesh_pb_gatt_reset(void)
{
	reset_state();
   2dd1c:	f7f0 bff2 	b.w	1ed04 <reset_state>

0002dd20 <prov_ccc_changed>:
}
   2dd20:	4770      	bx	lr

0002dd22 <proxy_msg_recv>:
	switch (role->msg_type) {
   2dd22:	7903      	ldrb	r3, [r0, #4]
   2dd24:	2b03      	cmp	r3, #3
   2dd26:	d104      	bne.n	2dd32 <proxy_msg_recv+0x10>
		bt_mesh_pb_gatt_recv(role->conn, &role->buf);
   2dd28:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2dd2c:	6800      	ldr	r0, [r0, #0]
   2dd2e:	f7f1 b85d 	b.w	1edec <bt_mesh_pb_gatt_recv>
}
   2dd32:	4770      	bx	lr

0002dd34 <proxy_ccc_changed>:
}
   2dd34:	4770      	bx	lr

0002dd36 <beacon_send>:
{
   2dd36:	b530      	push	{r4, r5, lr}
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2dd38:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   2dd3c:	460d      	mov	r5, r1
   2dd3e:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2dd40:	ab06      	add	r3, sp, #24
{
   2dd42:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf, 1);
   2dd44:	2101      	movs	r1, #1
   2dd46:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2dd48:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2dd4c:	9303      	str	r3, [sp, #12]
	net_buf_simple_reserve(&buf, 1);
   2dd4e:	f7f2 f8ed 	bl	1ff2c <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   2dd52:	4628      	mov	r0, r5
   2dd54:	a903      	add	r1, sp, #12
   2dd56:	f7e7 f95d 	bl	15014 <bt_mesh_beacon_create>
	return bt_mesh_proxy_msg_send(client->cli->conn, BT_MESH_PROXY_BEACON,
   2dd5a:	2300      	movs	r3, #0
   2dd5c:	6820      	ldr	r0, [r4, #0]
   2dd5e:	9300      	str	r3, [sp, #0]
   2dd60:	2101      	movs	r1, #1
   2dd62:	aa03      	add	r2, sp, #12
   2dd64:	6800      	ldr	r0, [r0, #0]
   2dd66:	f7f1 feb1 	bl	1facc <bt_mesh_proxy_msg_send>
}
   2dd6a:	b00d      	add	sp, #52	; 0x34
   2dd6c:	bd30      	pop	{r4, r5, pc}

0002dd6e <send_beacon_cb>:
{
   2dd6e:	b508      	push	{r3, lr}
   2dd70:	460b      	mov	r3, r1
	return beacon_send(client, sub) != 0;
   2dd72:	4601      	mov	r1, r0
   2dd74:	4618      	mov	r0, r3
   2dd76:	f7ff ffde 	bl	2dd36 <beacon_send>
}
   2dd7a:	3800      	subs	r0, #0
   2dd7c:	bf18      	it	ne
   2dd7e:	2001      	movne	r0, #1
   2dd80:	bd08      	pop	{r3, pc}

0002dd82 <gatt_recv>:
{
   2dd82:	4611      	mov	r1, r2
	if (len < 1) {
   2dd84:	461a      	mov	r2, r3
   2dd86:	b133      	cbz	r3, 2dd96 <gatt_recv+0x14>
	if (PDU_TYPE(data) == BT_MESH_PROXY_PROV) {
   2dd88:	780b      	ldrb	r3, [r1, #0]
   2dd8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2dd8e:	2b03      	cmp	r3, #3
   2dd90:	d001      	beq.n	2dd96 <gatt_recv+0x14>
	return bt_mesh_proxy_msg_recv(conn, buf, len);
   2dd92:	f7f1 be1b 	b.w	1f9cc <bt_mesh_proxy_msg_recv>
}
   2dd96:	f06f 0015 	mvn.w	r0, #21
   2dd9a:	4770      	bx	lr

0002dd9c <filter_add>:
{
   2dd9c:	b530      	push	{r4, r5, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   2dd9e:	b181      	cbz	r1, 2ddc2 <filter_add+0x26>
   2dda0:	1c82      	adds	r2, r0, #2
   2dda2:	4613      	mov	r3, r2
   2dda4:	f100 0422 	add.w	r4, r0, #34	; 0x22
		if (client->filter[i] == addr) {
   2dda8:	f833 5f02 	ldrh.w	r5, [r3, #2]!
   2ddac:	428d      	cmp	r5, r1
   2ddae:	d008      	beq.n	2ddc2 <filter_add+0x26>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2ddb0:	42a3      	cmp	r3, r4
   2ddb2:	d1f9      	bne.n	2dda8 <filter_add+0xc>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2ddb4:	2300      	movs	r3, #0
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   2ddb6:	f832 4f02 	ldrh.w	r4, [r2, #2]!
   2ddba:	b91c      	cbnz	r4, 2ddc4 <filter_add+0x28>
			client->filter[i] = addr;
   2ddbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2ddc0:	8081      	strh	r1, [r0, #4]
}
   2ddc2:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2ddc4:	3301      	adds	r3, #1
   2ddc6:	2b10      	cmp	r3, #16
   2ddc8:	d1f5      	bne.n	2ddb6 <filter_add+0x1a>
   2ddca:	e7fa      	b.n	2ddc2 <filter_add+0x26>

0002ddcc <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2ddcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   2ddd0:	b510      	push	{r4, lr}
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2ddd2:	8c02      	ldrh	r2, [r0, #32]
{
   2ddd4:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2ddd6:	429a      	cmp	r2, r3
   2ddd8:	d006      	beq.n	2dde8 <sub_count_cb+0x1c>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   2ddda:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   2ddde:	2b01      	cmp	r3, #1
   2dde0:	d104      	bne.n	2ddec <sub_count_cb+0x20>
		(*count)++;
   2dde2:	6823      	ldr	r3, [r4, #0]
   2dde4:	3301      	adds	r3, #1
   2dde6:	6023      	str	r3, [r4, #0]
}
   2dde8:	2000      	movs	r0, #0
   2ddea:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   2ddec:	f7e6 fe3c 	bl	14a68 <bt_mesh_gatt_proxy_get>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   2ddf0:	2801      	cmp	r0, #1
   2ddf2:	d1f9      	bne.n	2dde8 <sub_count_cb+0x1c>
   2ddf4:	e7f5      	b.n	2dde2 <sub_count_cb+0x16>

0002ddf6 <buf_send_end>:
	net_buf_unref(buf);
   2ddf6:	4608      	mov	r0, r1
   2ddf8:	f7f2 b970 	b.w	200dc <net_buf_unref>

0002ddfc <proxy_sar_timeout>:
	if (role->conn) {
   2ddfc:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2de00:	b110      	cbz	r0, 2de08 <proxy_sar_timeout+0xc>
		bt_conn_disconnect(role->conn,
   2de02:	2113      	movs	r1, #19
   2de04:	f7fd b8c6 	b.w	2af94 <bt_conn_disconnect>
}
   2de08:	4770      	bx	lr

0002de0a <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2de0a:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2de0c:	0e02      	lsrs	r2, r0, #24
	dst[1] = val;
   2de0e:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   2de10:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2de14:	700a      	strb	r2, [r1, #0]
   2de16:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2de18:	70c8      	strb	r0, [r1, #3]
}
   2de1a:	4770      	bx	lr

0002de1c <fixed_data_unref>:
}
   2de1c:	4770      	bx	lr

0002de1e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2de1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2de20:	6849      	ldr	r1, [r1, #4]
   2de22:	6809      	ldr	r1, [r1, #0]
   2de24:	f7f1 bfaa 	b.w	1fd7c <net_buf_alloc_len>

0002de28 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2de28:	f7f7 befe 	b.w	25c28 <z_impl_k_queue_get>

0002de2c <net_buf_simple_init_with_data>:
	buf->size  = size;
   2de2c:	b292      	uxth	r2, r2
	buf->__buf = data;
   2de2e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2de30:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2de32:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2de34:	8082      	strh	r2, [r0, #4]
}
   2de36:	4770      	bx	lr

0002de38 <net_buf_simple_clone>:
{
   2de38:	460b      	mov	r3, r1
	memcpy(clone, original, sizeof(struct net_buf_simple));
   2de3a:	220c      	movs	r2, #12
   2de3c:	4601      	mov	r1, r0
   2de3e:	4618      	mov	r0, r3
   2de40:	f7fc bb6b 	b.w	2a51a <memcpy>

0002de44 <net_buf_simple_push_be16>:
{
   2de44:	b510      	push	{r4, lr}
   2de46:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   2de48:	2102      	movs	r1, #2
   2de4a:	f7f2 fa31 	bl	202b0 <net_buf_simple_push>
	dst[0] = val >> 8;
   2de4e:	0a23      	lsrs	r3, r4, #8
   2de50:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2de52:	7044      	strb	r4, [r0, #1]
}
   2de54:	bd10      	pop	{r4, pc}

0002de56 <net_buf_simple_push_u8>:
{
   2de56:	b510      	push	{r4, lr}
   2de58:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2de5a:	2101      	movs	r1, #1
   2de5c:	f7f2 fa28 	bl	202b0 <net_buf_simple_push>
	*data = val;
   2de60:	7004      	strb	r4, [r0, #0]
}
   2de62:	bd10      	pop	{r4, pc}

0002de64 <net_buf_simple_push_be24>:
{
   2de64:	b510      	push	{r4, lr}
   2de66:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   2de68:	2103      	movs	r1, #3
   2de6a:	f7f2 fa21 	bl	202b0 <net_buf_simple_push>
	dst[0] = val >> 16;
   2de6e:	0c23      	lsrs	r3, r4, #16
   2de70:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   2de72:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2de76:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   2de78:	7084      	strb	r4, [r0, #2]
}
   2de7a:	bd10      	pop	{r4, pc}

0002de7c <net_buf_simple_pull_u8>:
{
   2de7c:	b510      	push	{r4, lr}
	val = buf->data[0];
   2de7e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   2de80:	2101      	movs	r1, #1
	val = buf->data[0];
   2de82:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2de84:	f7f2 fa30 	bl	202e8 <net_buf_simple_pull>
}
   2de88:	4620      	mov	r0, r4
   2de8a:	bd10      	pop	{r4, pc}

0002de8c <net_buf_simple_pull_le16>:
{
   2de8c:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2de8e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2de90:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2de92:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2de94:	f7f2 fa28 	bl	202e8 <net_buf_simple_pull>
}
   2de98:	4620      	mov	r0, r4
   2de9a:	bd10      	pop	{r4, pc}

0002de9c <net_buf_simple_pull_be16>:
{
   2de9c:	b510      	push	{r4, lr}
   2de9e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2dea0:	2102      	movs	r1, #2
   2dea2:	881c      	ldrh	r4, [r3, #0]
   2dea4:	f7f2 fa20 	bl	202e8 <net_buf_simple_pull>
   2dea8:	ba64      	rev16	r4, r4
   2deaa:	b2a4      	uxth	r4, r4
}
   2deac:	4620      	mov	r0, r4
   2deae:	bd10      	pop	{r4, pc}

0002deb0 <net_buf_simple_pull_be32>:
{
   2deb0:	b510      	push	{r4, lr}
   2deb2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2deb4:	2104      	movs	r1, #4
   2deb6:	681c      	ldr	r4, [r3, #0]
   2deb8:	f7f2 fa16 	bl	202e8 <net_buf_simple_pull>
   2debc:	ba24      	rev	r4, r4
}
   2debe:	4620      	mov	r0, r4
   2dec0:	bd10      	pop	{r4, pc}

0002dec2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2dec2:	6802      	ldr	r2, [r0, #0]
   2dec4:	6880      	ldr	r0, [r0, #8]
}
   2dec6:	1a10      	subs	r0, r2, r0
   2dec8:	4770      	bx	lr

0002deca <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2deca:	8883      	ldrh	r3, [r0, #4]
   2decc:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2dece:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2ded0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2ded2:	6803      	ldr	r3, [r0, #0]
   2ded4:	1a5b      	subs	r3, r3, r1
}
   2ded6:	1ad0      	subs	r0, r2, r3
   2ded8:	4770      	bx	lr

0002deda <net_buf_simple_add_mem>:
{
   2deda:	b538      	push	{r3, r4, r5, lr}
   2dedc:	460d      	mov	r5, r1
   2dede:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2dee0:	4611      	mov	r1, r2
   2dee2:	f7f2 fa35 	bl	20350 <net_buf_simple_add>
   2dee6:	4622      	mov	r2, r4
   2dee8:	4629      	mov	r1, r5
}
   2deea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2deee:	f7fc bb14 	b.w	2a51a <memcpy>

0002def2 <net_buf_simple_add_u8>:
{
   2def2:	b510      	push	{r4, lr}
   2def4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2def6:	2101      	movs	r1, #1
   2def8:	f7f2 fa2a 	bl	20350 <net_buf_simple_add>
	*u8 = val;
   2defc:	7004      	strb	r4, [r0, #0]
}
   2defe:	bd10      	pop	{r4, pc}

0002df00 <net_buf_simple_add_le16>:
{
   2df00:	b510      	push	{r4, lr}
   2df02:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2df04:	2102      	movs	r1, #2
   2df06:	f7f2 fa23 	bl	20350 <net_buf_simple_add>
	dst[0] = val;
   2df0a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2df0c:	0a24      	lsrs	r4, r4, #8
   2df0e:	7044      	strb	r4, [r0, #1]
}
   2df10:	bd10      	pop	{r4, pc}

0002df12 <net_buf_simple_add_be16>:
{
   2df12:	b510      	push	{r4, lr}
   2df14:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   2df16:	2102      	movs	r1, #2
   2df18:	f7f2 fa1a 	bl	20350 <net_buf_simple_add>
	dst[0] = val >> 8;
   2df1c:	0a23      	lsrs	r3, r4, #8
   2df1e:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2df20:	7044      	strb	r4, [r0, #1]
}
   2df22:	bd10      	pop	{r4, pc}

0002df24 <net_buf_simple_add_le24>:
{
   2df24:	b510      	push	{r4, lr}
   2df26:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   2df28:	2103      	movs	r1, #3
   2df2a:	f7f2 fa11 	bl	20350 <net_buf_simple_add>
	dst[1] = val >> 8;
   2df2e:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   2df32:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   2df34:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   2df36:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   2df38:	7084      	strb	r4, [r0, #2]
}
   2df3a:	bd10      	pop	{r4, pc}

0002df3c <net_buf_simple_add_be32>:
{
   2df3c:	b510      	push	{r4, lr}
   2df3e:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   2df40:	2104      	movs	r1, #4
   2df42:	f7f2 fa05 	bl	20350 <net_buf_simple_add>
   2df46:	4601      	mov	r1, r0
   2df48:	4620      	mov	r0, r4
}
   2df4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   2df4e:	f7ff bf5c 	b.w	2de0a <sys_put_be32>

0002df52 <set_on_state>:
	__asm__ volatile(
   2df52:	f04f 0320 	mov.w	r3, #32
   2df56:	f3ef 8211 	mrs	r2, BASEPRI
   2df5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2df5e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2df62:	6803      	ldr	r3, [r0, #0]
   2df64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2df68:	f043 0302 	orr.w	r3, r3, #2
   2df6c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2df6e:	f382 8811 	msr	BASEPRI, r2
   2df72:	f3bf 8f6f 	isb	sy
}
   2df76:	4770      	bx	lr

0002df78 <async_start>:
{
   2df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df7a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2df7c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2df7e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2df80:	f04f 0520 	mov.w	r5, #32
   2df84:	f3ef 8611 	mrs	r6, BASEPRI
   2df88:	f385 8812 	msr	BASEPRI_MAX, r5
   2df8c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2df90:	250c      	movs	r5, #12
   2df92:	4369      	muls	r1, r5
   2df94:	440c      	add	r4, r1
   2df96:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2df9a:	f005 0c07 	and.w	ip, r5, #7
   2df9e:	f1bc 0f01 	cmp.w	ip, #1
   2dfa2:	d10c      	bne.n	2dfbe <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2dfa4:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2dfa8:	f386 8811 	msr	BASEPRI, r6
   2dfac:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2dfb0:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2dfb4:	6843      	ldr	r3, [r0, #4]
   2dfb6:	585b      	ldr	r3, [r3, r1]
   2dfb8:	4798      	blx	r3
	return 0;
   2dfba:	2000      	movs	r0, #0
}
   2dfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2dfbe:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2dfc2:	42af      	cmp	r7, r5
   2dfc4:	f386 8811 	msr	BASEPRI, r6
   2dfc8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2dfcc:	bf0c      	ite	eq
   2dfce:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2dfd2:	f04f 30ff 	movne.w	r0, #4294967295
   2dfd6:	e7f1      	b.n	2dfbc <async_start+0x44>

0002dfd8 <api_start>:
{
   2dfd8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2dfda:	2480      	movs	r4, #128	; 0x80
   2dfdc:	9400      	str	r4, [sp, #0]
   2dfde:	f7ff ffcb 	bl	2df78 <async_start>
}
   2dfe2:	b002      	add	sp, #8
   2dfe4:	bd10      	pop	{r4, pc}

0002dfe6 <onoff_started_callback>:
	return &data->mgr[type];
   2dfe6:	6900      	ldr	r0, [r0, #16]
   2dfe8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2dfea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2dfee:	2100      	movs	r1, #0
   2dff0:	4710      	bx	r2

0002dff2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2dff2:	2003      	movs	r0, #3
   2dff4:	f7f5 b93c 	b.w	23270 <nrfx_clock_start>

0002dff8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2dff8:	2002      	movs	r0, #2
   2dffa:	f7f5 b939 	b.w	23270 <nrfx_clock_start>

0002dffe <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2dffe:	2000      	movs	r0, #0
   2e000:	f7f5 b936 	b.w	23270 <nrfx_clock_start>

0002e004 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e004:	2003      	movs	r0, #3
   2e006:	f7f5 b9ab 	b.w	23360 <nrfx_clock_stop>

0002e00a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e00a:	2002      	movs	r0, #2
   2e00c:	f7f5 b9a8 	b.w	23360 <nrfx_clock_stop>

0002e010 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e010:	2000      	movs	r0, #0
   2e012:	f7f5 b9a5 	b.w	23360 <nrfx_clock_stop>

0002e016 <blocking_start_callback>:
{
   2e016:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e018:	f7f7 be5e 	b.w	25cd8 <z_impl_k_sem_give>

0002e01c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e01c:	2280      	movs	r2, #128	; 0x80
   2e01e:	f7f2 b9f9 	b.w	20414 <stop>

0002e022 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e022:	6843      	ldr	r3, [r0, #4]
}
   2e024:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e026:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e028:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2e02a:	600b      	str	r3, [r1, #0]
}
   2e02c:	4770      	bx	lr

0002e02e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e02e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2e030:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e034:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2e036:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e03a:	6098      	str	r0, [r3, #8]
}
   2e03c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e03e:	60d9      	str	r1, [r3, #12]
   2e040:	4770      	bx	lr

0002e042 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e042:	6843      	ldr	r3, [r0, #4]
}
   2e044:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e046:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2e048:	6099      	str	r1, [r3, #8]
}
   2e04a:	4770      	bx	lr

0002e04c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e04c:	6843      	ldr	r3, [r0, #4]
}
   2e04e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e050:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2e052:	60d9      	str	r1, [r3, #12]
}
   2e054:	4770      	bx	lr

0002e056 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e056:	6843      	ldr	r3, [r0, #4]
   2e058:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e05a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2e05c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e060:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e062:	6090      	str	r0, [r2, #8]
}
   2e064:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e066:	60d3      	str	r3, [r2, #12]
   2e068:	4770      	bx	lr

0002e06a <k_sem_give>:
   2e06a:	f7f7 be35 	b.w	25cd8 <z_impl_k_sem_give>

0002e06e <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e06e:	b918      	cbnz	r0, 2e078 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2e070:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e074:	f7ff bff9 	b.w	2e06a <k_sem_give>
}
   2e078:	4770      	bx	lr

0002e07a <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e07a:	f04f 32ff 	mov.w	r2, #4294967295
   2e07e:	f04f 33ff 	mov.w	r3, #4294967295
   2e082:	3018      	adds	r0, #24
   2e084:	f7f7 be62 	b.w	25d4c <z_impl_k_sem_take>

0002e088 <qspi_trans_lock.isra.0>:
   2e088:	f04f 32ff 	mov.w	r2, #4294967295
   2e08c:	f04f 33ff 	mov.w	r3, #4294967295
   2e090:	f7f7 be5c 	b.w	25d4c <z_impl_k_sem_take>

0002e094 <qspi_nor_write_protection_set>:
{
   2e094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e096:	2200      	movs	r2, #0
   2e098:	4291      	cmp	r1, r2
   2e09a:	bf0c      	ite	eq
   2e09c:	2306      	moveq	r3, #6
   2e09e:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e0a0:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e0a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e0a6:	9203      	str	r2, [sp, #12]
   2e0a8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e0ac:	f7f2 fe12 	bl	20cd4 <qspi_send_cmd>
		ret = -EIO;
   2e0b0:	2800      	cmp	r0, #0
}
   2e0b2:	bf18      	it	ne
   2e0b4:	f06f 0004 	mvnne.w	r0, #4
   2e0b8:	b005      	add	sp, #20
   2e0ba:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0be <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e0be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e0c0:	23ff      	movs	r3, #255	; 0xff
   2e0c2:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e0c6:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e0ca:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e0cc:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e0ce:	2301      	movs	r3, #1
   2e0d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e0d4:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e0d6:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e0d8:	f88d 300c 	strb.w	r3, [sp, #12]
   2e0dc:	ab01      	add	r3, sp, #4
   2e0de:	9204      	str	r2, [sp, #16]
   2e0e0:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e0e2:	f7f2 fdf7 	bl	20cd4 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e0e6:	2800      	cmp	r0, #0
   2e0e8:	bfa8      	it	ge
   2e0ea:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e0ee:	b007      	add	sp, #28
   2e0f0:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0f4 <is_regular_addr_valid>:
{
   2e0f4:	b538      	push	{r3, r4, r5, lr}
   2e0f6:	4605      	mov	r5, r0
   2e0f8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e0fa:	f000 fc22 	bl	2e942 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e0fe:	2d00      	cmp	r5, #0
   2e100:	db07      	blt.n	2e112 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e102:	42a8      	cmp	r0, r5
   2e104:	d905      	bls.n	2e112 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e106:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e108:	4284      	cmp	r4, r0
   2e10a:	bf8c      	ite	hi
   2e10c:	2000      	movhi	r0, #0
   2e10e:	2001      	movls	r0, #1
}
   2e110:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e112:	2000      	movs	r0, #0
   2e114:	e7fc      	b.n	2e110 <is_regular_addr_valid+0x1c>

0002e116 <flash_nrf_read>:
{
   2e116:	b570      	push	{r4, r5, r6, lr}
   2e118:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   2e11a:	4619      	mov	r1, r3
   2e11c:	4620      	mov	r0, r4
{
   2e11e:	4616      	mov	r6, r2
   2e120:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
   2e122:	f7ff ffe7 	bl	2e0f4 <is_regular_addr_valid>
   2e126:	b928      	cbnz	r0, 2e134 <flash_nrf_read+0x1e>
   2e128:	4629      	mov	r1, r5
   2e12a:	4620      	mov	r0, r4
}
   2e12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e130:	f7f3 b944 	b.w	213bc <flash_nrf_read.part.0>
	if (!len) {
   2e134:	b15d      	cbz	r5, 2e14e <flash_nrf_read+0x38>
	if (addr < PM_APP_ADDRESS) {
   2e136:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   2e13a:	462a      	mov	r2, r5
   2e13c:	4621      	mov	r1, r4
   2e13e:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   2e140:	da03      	bge.n	2e14a <flash_nrf_read+0x34>
}
   2e142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   2e146:	f7fa be3f 	b.w	28dc8 <soc_secure_mem_read>
	memcpy(data, (void *)addr, len);
   2e14a:	f7fc f9e6 	bl	2a51a <memcpy>
}
   2e14e:	2000      	movs	r0, #0
   2e150:	bd70      	pop	{r4, r5, r6, pc}

0002e152 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e154:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e156:	2300      	movs	r3, #0
{
   2e158:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2e15a:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e15c:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e15e:	60a3      	str	r3, [r4, #8]
{
   2e160:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2e162:	6913      	ldr	r3, [r2, #16]
   2e164:	4669      	mov	r1, sp
   2e166:	aa01      	add	r2, sp, #4
   2e168:	4798      	blx	r3

	while (layout_size--) {
   2e16a:	9b01      	ldr	r3, [sp, #4]
   2e16c:	1e5a      	subs	r2, r3, #1
   2e16e:	9201      	str	r2, [sp, #4]
   2e170:	b91b      	cbnz	r3, 2e17a <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e172:	f06f 0015 	mvn.w	r0, #21
}
   2e176:	b003      	add	sp, #12
   2e178:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e17a:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e17c:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e17e:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e180:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e182:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e184:	b985      	cbnz	r5, 2e1a8 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e186:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e188:	f8d0 c000 	ldr.w	ip, [r0]
   2e18c:	4563      	cmp	r3, ip
   2e18e:	bf28      	it	cs
   2e190:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2e192:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2e196:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e198:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e19a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e19c:	6802      	ldr	r2, [r0, #0]
   2e19e:	429a      	cmp	r2, r3
   2e1a0:	d806      	bhi.n	2e1b0 <flash_get_page_info+0x5e>
		layout++;
   2e1a2:	3008      	adds	r0, #8
   2e1a4:	9000      	str	r0, [sp, #0]
   2e1a6:	e7e0      	b.n	2e16a <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e1a8:	1a6b      	subs	r3, r5, r1
   2e1aa:	fbb3 f3f7 	udiv	r3, r3, r7
   2e1ae:	e7eb      	b.n	2e188 <flash_get_page_info+0x36>
			return 0;
   2e1b0:	2000      	movs	r0, #0
   2e1b2:	e7e0      	b.n	2e176 <flash_get_page_info+0x24>

0002e1b4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e1b4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e1b6:	2200      	movs	r2, #0
   2e1b8:	f7ff bfcb 	b.w	2e152 <flash_get_page_info>

0002e1bc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2e1c0:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2e1c2:	6883      	ldr	r3, [r0, #8]
{
   2e1c4:	b086      	sub	sp, #24
   2e1c6:	4688      	mov	r8, r1
   2e1c8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e1ca:	691b      	ldr	r3, [r3, #16]
   2e1cc:	aa02      	add	r2, sp, #8
   2e1ce:	a901      	add	r1, sp, #4
   2e1d0:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2e1d2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e1d4:	4625      	mov	r5, r4
   2e1d6:	9b02      	ldr	r3, [sp, #8]
   2e1d8:	42ab      	cmp	r3, r5
   2e1da:	d802      	bhi.n	2e1e2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e1dc:	b006      	add	sp, #24
   2e1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2e1e2:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2e1e4:	9f01      	ldr	r7, [sp, #4]
   2e1e6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2e1ea:	687b      	ldr	r3, [r7, #4]
   2e1ec:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e1ee:	683a      	ldr	r2, [r7, #0]
   2e1f0:	eb0a 0306 	add.w	r3, sl, r6
   2e1f4:	42b2      	cmp	r2, r6
   2e1f6:	d802      	bhi.n	2e1fe <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e1f8:	469a      	mov	sl, r3
   2e1fa:	3501      	adds	r5, #1
   2e1fc:	e7eb      	b.n	2e1d6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2e1fe:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2e200:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e202:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e204:	a803      	add	r0, sp, #12
   2e206:	47c0      	blx	r8
   2e208:	2800      	cmp	r0, #0
   2e20a:	d0e7      	beq.n	2e1dc <flash_page_foreach+0x20>
			off += page_info.size;
   2e20c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e20e:	3601      	adds	r6, #1
			off += page_info.size;
   2e210:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e212:	e7ec      	b.n	2e1ee <flash_page_foreach+0x32>

0002e214 <uarte_nrfx_config_get>:
{
   2e214:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2e216:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2e218:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e21c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e220:	2000      	movs	r0, #0
   2e222:	4770      	bx	lr

0002e224 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e224:	6843      	ldr	r3, [r0, #4]
   2e226:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e228:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e22c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e230:	4770      	bx	lr

0002e232 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2e232:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2e234:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e236:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e238:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e23c:	b150      	cbz	r0, 2e254 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e23e:	2000      	movs	r0, #0
	*c = *data->rx_data;
   2e240:	6952      	ldr	r2, [r2, #20]
   2e242:	7812      	ldrb	r2, [r2, #0]
   2e244:	700a      	strb	r2, [r1, #0]
   2e246:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e24a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e24e:	2201      	movs	r2, #1
   2e250:	601a      	str	r2, [r3, #0]
	return 0;
   2e252:	4770      	bx	lr
		return -1;
   2e254:	f04f 30ff 	mov.w	r0, #4294967295
}
   2e258:	4770      	bx	lr

0002e25a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e25a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e25c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e25e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e262:	b940      	cbnz	r0, 2e276 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e264:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e266:	079b      	lsls	r3, r3, #30
   2e268:	d406      	bmi.n	2e278 <is_tx_ready.isra.0+0x1e>
   2e26a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e26e:	3800      	subs	r0, #0
   2e270:	bf18      	it	ne
   2e272:	2001      	movne	r0, #1
   2e274:	4770      	bx	lr
   2e276:	2001      	movs	r0, #1
}
   2e278:	4770      	bx	lr

0002e27a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2e27a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2e27c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2e27e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2e282:	05c9      	lsls	r1, r1, #23
   2e284:	d518      	bpl.n	2e2b8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e286:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e28a:	b1a9      	cbz	r1, 2e2b8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2e28c:	f04f 0020 	mov.w	r0, #32
   2e290:	f3ef 8111 	mrs	r1, BASEPRI
   2e294:	f380 8812 	msr	BASEPRI_MAX, r0
   2e298:	f3bf 8f6f 	isb	sy
   2e29c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e2a0:	b130      	cbz	r0, 2e2b0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e2a2:	2000      	movs	r0, #0
   2e2a4:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2e2a8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e2ac:	2001      	movs	r0, #1
   2e2ae:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2e2b0:	f381 8811 	msr	BASEPRI, r1
   2e2b4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e2b8:	6852      	ldr	r2, [r2, #4]
   2e2ba:	06d2      	lsls	r2, r2, #27
   2e2bc:	d515      	bpl.n	2e2ea <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2e2be:	f04f 0120 	mov.w	r1, #32
   2e2c2:	f3ef 8211 	mrs	r2, BASEPRI
   2e2c6:	f381 8812 	msr	BASEPRI_MAX, r1
   2e2ca:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e2ce:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2e2d2:	b111      	cbz	r1, 2e2da <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e2d4:	2100      	movs	r1, #0
   2e2d6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2e2da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2e2de:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2e2e2:	f382 8811 	msr	BASEPRI, r2
   2e2e6:	f3bf 8f6f 	isb	sy
}
   2e2ea:	4770      	bx	lr

0002e2ec <z_log_msg_static_create.constprop.0>:
   2e2ec:	2300      	movs	r3, #0
   2e2ee:	f7dc bc35 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002e2f2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e2f2:	2000      	movs	r0, #0
   2e2f4:	4770      	bx	lr

0002e2f6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e2f6:	b538      	push	{r3, r4, r5, lr}
   2e2f8:	460c      	mov	r4, r1
   2e2fa:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e2fc:	f7e1 f816 	bl	f32c <bt_is_ready>
   2e300:	b128      	cbz	r0, 2e30e <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e302:	4629      	mov	r1, r5
   2e304:	4620      	mov	r0, r4
}
   2e306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e30a:	f7e0 b9bd 	b.w	e688 <bt_hci_le_rand>
}
   2e30e:	f06f 000a 	mvn.w	r0, #10
   2e312:	bd38      	pop	{r3, r4, r5, pc}

0002e314 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2e314:	4608      	mov	r0, r1
   2e316:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2e318:	4611      	mov	r1, r2
   2e31a:	f7f4 fdef 	bl	22efc <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2e31e:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e320:	bf18      	it	ne
   2e322:	f06f 0004 	mvnne.w	r0, #4
   2e326:	bd08      	pop	{r3, pc}

0002e328 <entropy_psa_crypto_rng_init>:
{
   2e328:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2e32a:	f000 fa5a 	bl	2e7e2 <psa_crypto_init>
		return -EIO;
   2e32e:	2800      	cmp	r0, #0
}
   2e330:	bf18      	it	ne
   2e332:	f06f 0004 	mvnne.w	r0, #4
   2e336:	bd08      	pop	{r3, pc}

0002e338 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e338:	4770      	bx	lr

0002e33a <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e33a:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2e33c:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e340:	009b      	lsls	r3, r3, #2
   2e342:	b29b      	uxth	r3, r3
   2e344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e348:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2e34c:	601a      	str	r2, [r3, #0]
   2e34e:	681b      	ldr	r3, [r3, #0]
}
   2e350:	4770      	bx	lr

0002e352 <sys_clock_cycle_get_32>:
{
   2e352:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e354:	f7f3 fd38 	bl	21dc8 <z_nrf_rtc_timer_read>
}
   2e358:	bd08      	pop	{r3, pc}

0002e35a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e35a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e35c:	6843      	ldr	r3, [r0, #4]
   2e35e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e360:	7a05      	ldrb	r5, [r0, #8]
   2e362:	6844      	ldr	r4, [r0, #4]
   2e364:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e368:	42a3      	cmp	r3, r4
   2e36a:	d302      	bcc.n	2e372 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e36c:	f06f 0001 	mvn.w	r0, #1
}
   2e370:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e372:	795c      	ldrb	r4, [r3, #5]
   2e374:	428c      	cmp	r4, r1
   2e376:	d001      	beq.n	2e37c <pinctrl_lookup_state+0x22>
		(*state)++;
   2e378:	3308      	adds	r3, #8
   2e37a:	e7f0      	b.n	2e35e <pinctrl_lookup_state+0x4>
			return 0;
   2e37c:	2000      	movs	r0, #0
   2e37e:	e7f7      	b.n	2e370 <pinctrl_lookup_state+0x16>

0002e380 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e384:	4615      	mov	r5, r2
   2e386:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e388:	f04f 0901 	mov.w	r9, #1
   2e38c:	b085      	sub	sp, #20
   2e38e:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e392:	45d0      	cmp	r8, sl
   2e394:	d103      	bne.n	2e39e <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e396:	2000      	movs	r0, #0
}
   2e398:	b005      	add	sp, #20
   2e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e39e:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e3a2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e3a6:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e3aa:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e3ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e3b0:	bf08      	it	eq
   2e3b2:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e3b6:	2b22      	cmp	r3, #34	; 0x22
   2e3b8:	f200 8091 	bhi.w	2e4de <pinctrl_configure_pins+0x15e>
   2e3bc:	e8df f003 	tbb	[pc, r3]
   2e3c0:	38231e12 	.word	0x38231e12
   2e3c4:	8f383426 	.word	0x8f383426
   2e3c8:	3b8f8f8f 	.word	0x3b8f8f8f
   2e3cc:	8f8f8f65 	.word	0x8f8f8f65
   2e3d0:	8f8f8f8f 	.word	0x8f8f8f8f
   2e3d4:	71688f8f 	.word	0x71688f8f
   2e3d8:	8f8f7774 	.word	0x8f8f7774
   2e3dc:	83807a8f 	.word	0x83807a8f
   2e3e0:	8986      	.short	0x8986
   2e3e2:	8c          	.byte	0x8c
   2e3e3:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2e3e4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e3e8:	a803      	add	r0, sp, #12
   2e3ea:	9403      	str	r4, [sp, #12]
   2e3ec:	f7f3 fef0 	bl	221d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e3f0:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2e3f2:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e3f4:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2e3f8:	6083      	str	r3, [r0, #8]
   2e3fa:	e002      	b.n	2e402 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e3fc:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e400:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2e402:	46b3      	mov	fp, r6
   2e404:	e01e      	b.n	2e444 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e406:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e40a:	e7ed      	b.n	2e3e8 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e40c:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e40e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e412:	a803      	add	r0, sp, #12
   2e414:	9403      	str	r4, [sp, #12]
   2e416:	f7f3 fedb 	bl	221d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e41a:	9b03      	ldr	r3, [sp, #12]
   2e41c:	f04f 0b01 	mov.w	fp, #1
   2e420:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2e424:	60c3      	str	r3, [r0, #12]
   2e426:	e00d      	b.n	2e444 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e428:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e42c:	2601      	movs	r6, #1
   2e42e:	e7f0      	b.n	2e412 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2e430:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e434:	e7e4      	b.n	2e400 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e43a:	2f00      	cmp	r7, #0
   2e43c:	d1e0      	bne.n	2e400 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e43e:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2e440:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e442:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e444:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e448:	a803      	add	r0, sp, #12
   2e44a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e44e:	2a00      	cmp	r2, #0
   2e450:	bf1c      	itt	ne
   2e452:	2601      	movne	r6, #1
   2e454:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e458:	9301      	str	r3, [sp, #4]
   2e45a:	9403      	str	r4, [sp, #12]
   2e45c:	f7f3 feb8 	bl	221d0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e460:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e462:	9b01      	ldr	r3, [sp, #4]
   2e464:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e468:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e46c:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e470:	023b      	lsls	r3, r7, #8
   2e472:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2e476:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e47a:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2e47e:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e480:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e484:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e488:	e783      	b.n	2e392 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e48a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e48e:	e7d4      	b.n	2e43a <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e490:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e494:	f8da 3000 	ldr.w	r3, [sl]
   2e498:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e49c:	2b00      	cmp	r3, #0
   2e49e:	d0c5      	beq.n	2e42c <pinctrl_configure_pins+0xac>
   2e4a0:	e7a2      	b.n	2e3e8 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e4a2:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e4a6:	e7f5      	b.n	2e494 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e4a8:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e4ac:	e7f2      	b.n	2e494 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e4ae:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e4b2:	e7ef      	b.n	2e494 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2e4b4:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e4b8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e4ba:	f04f 0b00 	mov.w	fp, #0
   2e4be:	e7c1      	b.n	2e444 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2e4c0:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2e4c4:	e790      	b.n	2e3e8 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2e4c6:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2e4ca:	e7f5      	b.n	2e4b8 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2e4cc:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2e4d0:	e7f2      	b.n	2e4b8 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2e4d2:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2e4d6:	e7ef      	b.n	2e4b8 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2e4d8:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2e4dc:	e7ec      	b.n	2e4b8 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2e4de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e4e2:	e759      	b.n	2e398 <pinctrl_configure_pins+0x18>

0002e4e4 <mbox_nrf_register_callback>:
{
   2e4e4:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2e4e6:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2e4e8:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2e4ea:	bf9f      	itttt	ls
   2e4ec:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2e4f0:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2e4f4:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2e4f6:	2000      	movls	r0, #0
		return -EINVAL;
   2e4f8:	bf88      	it	hi
   2e4fa:	f06f 0015 	mvnhi.w	r0, #21
}
   2e4fe:	bd10      	pop	{r4, pc}

0002e500 <mbox_nrf_mtu_get>:
}
   2e500:	2000      	movs	r0, #0
   2e502:	4770      	bx	lr

0002e504 <mbox_nrf_max_channels_get>:
}
   2e504:	2010      	movs	r0, #16
   2e506:	4770      	bx	lr

0002e508 <z_log_msg_static_create.constprop.0>:
   2e508:	2300      	movs	r3, #0
   2e50a:	f7dc bb27 	b.w	ab5c <z_impl_z_log_msg_static_create>

0002e50e <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2e50e:	ea40 0301 	orr.w	r3, r0, r1
   2e512:	2b0f      	cmp	r3, #15
   2e514:	d801      	bhi.n	2e51a <dk_set_leds_state+0xc>
   2e516:	f7f4 b951 	b.w	227bc <dk_set_leds_state.part.0>
}
   2e51a:	f06f 0015 	mvn.w	r0, #21
   2e51e:	4770      	bx	lr

0002e520 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   2e520:	210f      	movs	r1, #15
   2e522:	f7ff bff4 	b.w	2e50e <dk_set_leds_state>

0002e526 <tid_check_and_update>:
{
   2e526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e528:	4604      	mov	r4, r0
   2e52a:	460d      	mov	r5, r1
   2e52c:	4616      	mov	r6, r2
	return z_impl_k_uptime_ticks();
   2e52e:	f001 f81a 	bl	2f566 <z_impl_k_uptime_ticks>
   2e532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e536:	fba0 3002 	umull	r3, r0, r0, r2
   2e53a:	fb02 0001 	mla	r0, r2, r1, r0
   2e53e:	e9d4 1702 	ldrd	r1, r7, [r4, #8]
   2e542:	0bdb      	lsrs	r3, r3, #15
   2e544:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
   2e548:	0bc0      	lsrs	r0, r0, #15
	*reftime = uptime;
   2e54a:	e9c4 3002 	strd	r3, r0, [r4, #8]
	if (prev_transaction->src == ctx->addr &&
   2e54e:	f8b4 c000 	ldrh.w	ip, [r4]
   2e552:	88b2      	ldrh	r2, [r6, #4]
   2e554:	4594      	cmp	ip, r2
   2e556:	d112      	bne.n	2e57e <tid_check_and_update+0x58>
   2e558:	f8b4 e002 	ldrh.w	lr, [r4, #2]
   2e55c:	f8b6 c006 	ldrh.w	ip, [r6, #6]
   2e560:	45e6      	cmp	lr, ip
   2e562:	d10c      	bne.n	2e57e <tid_check_and_update+0x58>
	    prev_transaction->dst == ctx->recv_dst &&
   2e564:	f894 c010 	ldrb.w	ip, [r4, #16]
   2e568:	45ac      	cmp	ip, r5
   2e56a:	d108      	bne.n	2e57e <tid_check_and_update+0x58>
	delta = uptime - *reftime;
   2e56c:	1a5b      	subs	r3, r3, r1
	    prev_transaction->tid == tid && uptime_delta < 6000) {
   2e56e:	f241 7170 	movw	r1, #6000	; 0x1770
   2e572:	eb60 0007 	sbc.w	r0, r0, r7
   2e576:	428b      	cmp	r3, r1
   2e578:	f170 0000 	sbcs.w	r0, r0, #0
   2e57c:	db05      	blt.n	2e58a <tid_check_and_update+0x64>
	return 0;
   2e57e:	2000      	movs	r0, #0
	prev_transaction->src = ctx->addr;
   2e580:	8022      	strh	r2, [r4, #0]
	prev_transaction->dst = ctx->recv_dst;
   2e582:	88f3      	ldrh	r3, [r6, #6]
	prev_transaction->tid = tid;
   2e584:	7425      	strb	r5, [r4, #16]
	prev_transaction->dst = ctx->recv_dst;
   2e586:	8063      	strh	r3, [r4, #2]
}
   2e588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EALREADY;
   2e58a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e58e:	e7fb      	b.n	2e588 <tid_check_and_update+0x62>

0002e590 <model_delay_decode>:
}

int32_t model_delay_decode(uint8_t encoded_delay)
{
	return encoded_delay * DELAY_TIME_STEP_MS;
}
   2e590:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2e594:	4770      	bx	lr

0002e596 <bt_mesh_onoff_srv_reset>:
	buf->len  = 0U;
   2e596:	2200      	movs	r2, #0

static void bt_mesh_onoff_srv_reset(struct bt_mesh_model *model)
{
	net_buf_simple_reset(model->pub->msg);
   2e598:	6883      	ldr	r3, [r0, #8]
   2e59a:	691b      	ldr	r3, [r3, #16]
   2e59c:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2e59e:	689a      	ldr	r2, [r3, #8]
   2e5a0:	601a      	str	r2, [r3, #0]
}
   2e5a2:	4770      	bx	lr

0002e5a4 <encode_status>:
{
   2e5a4:	b538      	push	{r3, r4, r5, lr}
   2e5a6:	460c      	mov	r4, r1
   2e5a8:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(buf, BT_MESH_ONOFF_OP_STATUS);
   2e5aa:	f248 2104 	movw	r1, #33284	; 0x8204
   2e5ae:	f7fe fc4d 	bl	2ce4c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(buf, !!status->present_on_off);
   2e5b2:	4628      	mov	r0, r5
   2e5b4:	7821      	ldrb	r1, [r4, #0]
   2e5b6:	f7ff fc9c 	bl	2def2 <net_buf_simple_add_u8>
	if (status->remaining_time != 0) {
   2e5ba:	6863      	ldr	r3, [r4, #4]
   2e5bc:	b163      	cbz	r3, 2e5d8 <_flash_used+0x4>
		net_buf_simple_add_u8(buf, status->target_on_off);
   2e5be:	7861      	ldrb	r1, [r4, #1]
   2e5c0:	4628      	mov	r0, r5
   2e5c2:	f7ff fc96 	bl	2def2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(
   2e5c6:	6860      	ldr	r0, [r4, #4]
   2e5c8:	f7f4 fb40 	bl	22c4c <model_transition_encode>
   2e5cc:	4601      	mov	r1, r0
   2e5ce:	4628      	mov	r0, r5
}
   2e5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(
   2e5d4:	f7ff bc8d 	b.w	2def2 <net_buf_simple_add_u8>
}
   2e5d8:	bd38      	pop	{r3, r4, r5, pc}

0002e5da <rsp_status>:
{
   2e5da:	b530      	push	{r4, r5, lr}
   2e5dc:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2e5de:	f44f 2110 	mov.w	r1, #589824	; 0x90000
{
   2e5e2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2e5e4:	ab02      	add	r3, sp, #8
   2e5e6:	e9cd 1306 	strd	r1, r3, [sp, #24]
{
   2e5ea:	4604      	mov	r4, r0
	encode_status(&msg, status);
   2e5ec:	4611      	mov	r1, r2
   2e5ee:	a805      	add	r0, sp, #20
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2e5f0:	9305      	str	r3, [sp, #20]
	encode_status(&msg, status);
   2e5f2:	f7ff ffd7 	bl	2e5a4 <encode_status>
	(void)bt_mesh_model_send(model, rx_ctx, &msg, NULL, NULL);
   2e5f6:	2300      	movs	r3, #0
   2e5f8:	4629      	mov	r1, r5
   2e5fa:	4620      	mov	r0, r4
   2e5fc:	9300      	str	r3, [sp, #0]
   2e5fe:	aa05      	add	r2, sp, #20
   2e600:	f7ea feee 	bl	193e0 <bt_mesh_model_send>
}
   2e604:	b009      	add	sp, #36	; 0x24
   2e606:	bd30      	pop	{r4, r5, pc}

0002e608 <handle_get>:
{
   2e608:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_mesh_onoff_status status = { 0 };
   2e60a:	2500      	movs	r5, #0
{
   2e60c:	4604      	mov	r4, r0
   2e60e:	460e      	mov	r6, r1
	struct bt_mesh_onoff_srv *srv = model->user_data;
   2e610:	6a40      	ldr	r0, [r0, #36]	; 0x24
	struct bt_mesh_onoff_status status = { 0 };
   2e612:	e9cd 5500 	strd	r5, r5, [sp]
	srv->handlers->get(srv, ctx, &status);
   2e616:	6983      	ldr	r3, [r0, #24]
   2e618:	466a      	mov	r2, sp
   2e61a:	685b      	ldr	r3, [r3, #4]
   2e61c:	4798      	blx	r3
	rsp_status(model, ctx, &status);
   2e61e:	4620      	mov	r0, r4
   2e620:	466a      	mov	r2, sp
   2e622:	4631      	mov	r1, r6
   2e624:	f7ff ffd9 	bl	2e5da <rsp_status>
}
   2e628:	4628      	mov	r0, r5
   2e62a:	b002      	add	sp, #8
   2e62c:	bd70      	pop	{r4, r5, r6, pc}

0002e62e <update_handler>:
{
   2e62e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_mesh_onoff_status status = { 0 };
   2e630:	2400      	movs	r4, #0
{
   2e632:	4605      	mov	r5, r0
	struct bt_mesh_onoff_srv *srv = model->user_data;
   2e634:	6a40      	ldr	r0, [r0, #36]	; 0x24
	struct bt_mesh_onoff_status status = { 0 };
   2e636:	e9cd 4400 	strd	r4, r4, [sp]
	srv->handlers->get(srv, NULL, &status);
   2e63a:	6983      	ldr	r3, [r0, #24]
   2e63c:	466a      	mov	r2, sp
   2e63e:	4621      	mov	r1, r4
   2e640:	685b      	ldr	r3, [r3, #4]
   2e642:	4798      	blx	r3
	encode_status(model->pub->msg, &status);
   2e644:	68ab      	ldr	r3, [r5, #8]
   2e646:	4669      	mov	r1, sp
   2e648:	6918      	ldr	r0, [r3, #16]
   2e64a:	f7ff ffab 	bl	2e5a4 <encode_status>
}
   2e64e:	4620      	mov	r0, r4
   2e650:	b003      	add	sp, #12
   2e652:	bd30      	pop	{r4, r5, pc}

0002e654 <bt_mesh_onoff_srv_pub>:
};

int bt_mesh_onoff_srv_pub(struct bt_mesh_onoff_srv *srv,
			  struct bt_mesh_msg_ctx *ctx,
			  const struct bt_mesh_onoff_status *status)
{
   2e654:	b530      	push	{r4, r5, lr}
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2e656:	f44f 2310 	mov.w	r3, #589824	; 0x90000
{
   2e65a:	4604      	mov	r4, r0
   2e65c:	460d      	mov	r5, r1
   2e65e:	b087      	sub	sp, #28
				 BT_MESH_ONOFF_MSG_MAXLEN_STATUS);
	encode_status(&msg, status);
   2e660:	4611      	mov	r1, r2
   2e662:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(msg, BT_MESH_ONOFF_OP_STATUS,
   2e664:	9304      	str	r3, [sp, #16]
   2e666:	f8cd d00c 	str.w	sp, [sp, #12]
   2e66a:	f8cd d014 	str.w	sp, [sp, #20]
	encode_status(&msg, status);
   2e66e:	f7ff ff99 	bl	2e5a4 <encode_status>
	return bt_mesh_msg_send(srv->model, ctx, &msg);
   2e672:	4629      	mov	r1, r5
   2e674:	69e0      	ldr	r0, [r4, #28]
   2e676:	aa03      	add	r2, sp, #12
   2e678:	f7fe fc11 	bl	2ce9e <bt_mesh_msg_send>
}
   2e67c:	b007      	add	sp, #28
   2e67e:	bd30      	pop	{r4, r5, pc}

0002e680 <onoff_set>:
{
   2e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e684:	4698      	mov	r8, r3
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_SET &&
   2e686:	8893      	ldrh	r3, [r2, #4]
{
   2e688:	4607      	mov	r7, r0
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_SET &&
   2e68a:	2b02      	cmp	r3, #2
{
   2e68c:	460e      	mov	r6, r1
   2e68e:	4614      	mov	r4, r2
   2e690:	b086      	sub	sp, #24
	if (buf->len != BT_MESH_ONOFF_MSG_MINLEN_SET &&
   2e692:	d001      	beq.n	2e698 <onoff_set+0x18>
   2e694:	2b04      	cmp	r3, #4
   2e696:	d15e      	bne.n	2e756 <onoff_set+0xd6>
	struct bt_mesh_onoff_status status = { 0 };
   2e698:	f04f 0900 	mov.w	r9, #0
	uint8_t on_off = net_buf_simple_pull_u8(buf);
   2e69c:	4620      	mov	r0, r4
	struct bt_mesh_onoff_status status = { 0 };
   2e69e:	e9cd 9900 	strd	r9, r9, [sp]
	struct bt_mesh_onoff_srv *srv = model->user_data;
   2e6a2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
	uint8_t on_off = net_buf_simple_pull_u8(buf);
   2e6a4:	f7ff fbea 	bl	2de7c <net_buf_simple_pull_u8>
   2e6a8:	4682      	mov	sl, r0
	uint8_t tid = net_buf_simple_pull_u8(buf);
   2e6aa:	4620      	mov	r0, r4
   2e6ac:	f7ff fbe6 	bl	2de7c <net_buf_simple_pull_u8>
	if (on_off > 1) {
   2e6b0:	f1ba 0f01 	cmp.w	sl, #1
	uint8_t tid = net_buf_simple_pull_u8(buf);
   2e6b4:	4601      	mov	r1, r0
	if (on_off > 1) {
   2e6b6:	d851      	bhi.n	2e75c <onoff_set+0xdc>
	set.on_off = on_off;
   2e6b8:	f00a 0a01 	and.w	sl, sl, #1
	if (tid_check_and_update(&srv->prev_transaction, tid, ctx) != 0) {
   2e6bc:	4632      	mov	r2, r6
   2e6be:	4628      	mov	r0, r5
	set.on_off = on_off;
   2e6c0:	f88d a010 	strb.w	sl, [sp, #16]
	if (tid_check_and_update(&srv->prev_transaction, tid, ctx) != 0) {
   2e6c4:	f7ff ff2f 	bl	2e526 <tid_check_and_update>
   2e6c8:	b160      	cbz	r0, 2e6e4 <onoff_set+0x64>
		srv->handlers->get(srv, NULL, &status);
   2e6ca:	69ab      	ldr	r3, [r5, #24]
   2e6cc:	466a      	mov	r2, sp
   2e6ce:	4649      	mov	r1, r9
   2e6d0:	4628      	mov	r0, r5
   2e6d2:	685b      	ldr	r3, [r3, #4]
   2e6d4:	4798      	blx	r3
	if (ack) {
   2e6d6:	f1b8 0f00 	cmp.w	r8, #0
   2e6da:	d136      	bne.n	2e74a <onoff_set+0xca>
	return 0;
   2e6dc:	2000      	movs	r0, #0
}
   2e6de:	b006      	add	sp, #24
   2e6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (buf->len == 2) {
   2e6e4:	88a3      	ldrh	r3, [r4, #4]
   2e6e6:	2b02      	cmp	r3, #2
   2e6e8:	d11a      	bne.n	2e720 <onoff_set+0xa0>

static inline void
model_transition_buf_pull(struct net_buf_simple *buf,
			  struct bt_mesh_model_transition *transition)
{
	transition->time = model_transition_decode(net_buf_simple_pull_u8(buf));
   2e6ea:	4620      	mov	r0, r4
   2e6ec:	f7ff fbc6 	bl	2de7c <net_buf_simple_pull_u8>
   2e6f0:	f7f4 fa9c 	bl	22c2c <model_transition_decode>
   2e6f4:	9002      	str	r0, [sp, #8]
	transition->delay = model_delay_decode(net_buf_simple_pull_u8(buf));
   2e6f6:	4620      	mov	r0, r4
   2e6f8:	f7ff fbc0 	bl	2de7c <net_buf_simple_pull_u8>
   2e6fc:	f7ff ff48 	bl	2e590 <model_delay_decode>
   2e700:	9003      	str	r0, [sp, #12]
   2e702:	a802      	add	r0, sp, #8
	srv->handlers->set(srv, ctx, &set, &status);
   2e704:	69ab      	ldr	r3, [r5, #24]
		set.transition = &transition;
   2e706:	9005      	str	r0, [sp, #20]
	srv->handlers->set(srv, ctx, &set, &status);
   2e708:	4631      	mov	r1, r6
   2e70a:	4628      	mov	r0, r5
   2e70c:	681c      	ldr	r4, [r3, #0]
   2e70e:	aa04      	add	r2, sp, #16
   2e710:	466b      	mov	r3, sp
   2e712:	47a0      	blx	r4
	(void)bt_mesh_onoff_srv_pub(srv, NULL, &status);
   2e714:	466a      	mov	r2, sp
   2e716:	2100      	movs	r1, #0
   2e718:	4628      	mov	r0, r5
   2e71a:	f7ff ff9b 	bl	2e654 <bt_mesh_onoff_srv_pub>
   2e71e:	e7da      	b.n	2e6d6 <onoff_set+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e720:	f105 0380 	add.w	r3, r5, #128	; 0x80
   2e724:	e8d3 3faf 	lda	r3, [r3]
	} else if (!atomic_test_bit(&srv->flags, GEN_ONOFF_SRV_NO_DTT)) {
   2e728:	07db      	lsls	r3, r3, #31
   2e72a:	d4eb      	bmi.n	2e704 <onoff_set+0x84>
static inline bool
bt_mesh_dtt_srv_transition_get(struct bt_mesh_model *model,
			       struct bt_mesh_model_transition *transition)
{
	struct bt_mesh_dtt_srv *srv =
		bt_mesh_dtt_srv_get(bt_mesh_model_elem(model));
   2e72c:	69e8      	ldr	r0, [r5, #28]
   2e72e:	f7ea fb97 	bl	18e60 <bt_mesh_model_elem>
	struct bt_mesh_model *model = bt_mesh_model_find(
   2e732:	f241 0104 	movw	r1, #4100	; 0x1004
   2e736:	f7fe fb5e 	bl	2cdf6 <bt_mesh_model_find>
	return (struct bt_mesh_dtt_srv *)(model ? model->user_data : NULL);
   2e73a:	4604      	mov	r4, r0
   2e73c:	b110      	cbz	r0, 2e744 <onoff_set+0xc4>
   2e73e:	6a44      	ldr	r4, [r0, #36]	; 0x24

	transition->time = srv ? srv->transition_time : 0;
   2e740:	b104      	cbz	r4, 2e744 <onoff_set+0xc4>
   2e742:	6824      	ldr	r4, [r4, #0]
   2e744:	2000      	movs	r0, #0
   2e746:	9402      	str	r4, [sp, #8]
		set.transition = &transition;
   2e748:	e7da      	b.n	2e700 <onoff_set+0x80>
		rsp_status(model, ctx, &status);
   2e74a:	466a      	mov	r2, sp
   2e74c:	4631      	mov	r1, r6
   2e74e:	4638      	mov	r0, r7
   2e750:	f7ff ff43 	bl	2e5da <rsp_status>
   2e754:	e7c2      	b.n	2e6dc <onoff_set+0x5c>
		return -EMSGSIZE;
   2e756:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2e75a:	e7c0      	b.n	2e6de <onoff_set+0x5e>
		return -EINVAL;
   2e75c:	f06f 0015 	mvn.w	r0, #21
   2e760:	e7bd      	b.n	2e6de <onoff_set+0x5e>

0002e762 <handle_set_unack>:
	return onoff_set(model, ctx, buf, false);
   2e762:	2300      	movs	r3, #0
   2e764:	f7ff bf8c 	b.w	2e680 <onoff_set>

0002e768 <handle_set>:
	return onoff_set(model, ctx, buf, true);
   2e768:	2301      	movs	r3, #1
   2e76a:	f7ff bf89 	b.w	2e680 <onoff_set>

0002e76e <prov_reset>:
{
   2e76e:	b508      	push	{r3, lr}
	oob_stop();
   2e770:	f7f4 faaa 	bl	22cc8 <oob_stop>
}
   2e774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   2e778:	2003      	movs	r0, #3
   2e77a:	f7ef bcff 	b.w	1e17c <bt_mesh_prov_enable>

0002e77e <prov_complete>:
	oob_stop();
   2e77e:	f7f4 baa3 	b.w	22cc8 <oob_stop>

0002e782 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2e782:	2000      	movs	r0, #0
   2e784:	4770      	bx	lr

0002e786 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2e786:	2300      	movs	r3, #0
{
   2e788:	b570      	push	{r4, r5, r6, lr}
   2e78a:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2e78c:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2e790:	ab03      	add	r3, sp, #12
   2e792:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2e794:	2304      	movs	r3, #4
{
   2e796:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2e798:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2e79a:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2e79c:	b169      	cbz	r1, 2e7ba <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2e79e:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2e7a0:	680b      	ldr	r3, [r1, #0]
   2e7a2:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2e7a4:	684b      	ldr	r3, [r1, #4]
   2e7a6:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2e7a8:	2101      	movs	r1, #1
   2e7aa:	2041      	movs	r0, #65	; 0x41
   2e7ac:	f7f4 fbe4 	bl	22f78 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2e7b0:	1e05      	subs	r5, r0, #0
   2e7b2:	dc04      	bgt.n	2e7be <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2e7b4:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2e7b6:	b008      	add	sp, #32
   2e7b8:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2e7ba:	2601      	movs	r6, #1
   2e7bc:	e7f4      	b.n	2e7a8 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2e7be:	1e23      	subs	r3, r4, #0
   2e7c0:	bf18      	it	ne
   2e7c2:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2e7c4:	2100      	movs	r1, #0
   2e7c6:	e9cd 4300 	strd	r4, r3, [sp]
   2e7ca:	aa04      	add	r2, sp, #16
   2e7cc:	4633      	mov	r3, r6
   2e7ce:	f7f4 fbb7 	bl	22f40 <psa_call>
   2e7d2:	4604      	mov	r4, r0
    psa_close(handle);
   2e7d4:	4628      	mov	r0, r5
   2e7d6:	f7f4 fbdd 	bl	22f94 <psa_close>
    if (status < PSA_SUCCESS) {
   2e7da:	2c00      	cmp	r4, #0
   2e7dc:	dbea      	blt.n	2e7b4 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2e7de:	4620      	mov	r0, r4
   2e7e0:	e7e9      	b.n	2e7b6 <tfm_platform_ioctl+0x30>

0002e7e2 <psa_crypto_init>:
}
   2e7e2:	2000      	movs	r0, #0
   2e7e4:	4770      	bx	lr

0002e7e6 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2e7e6:	b510      	push	{r4, lr}
   2e7e8:	b088      	sub	sp, #32
   2e7ea:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2e7ec:	ab05      	add	r3, sp, #20
   2e7ee:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2e7f0:	230c      	movs	r3, #12
   2e7f2:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2e7f4:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2e7f6:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2e7fa:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2e7fe:	eb0d 0103 	add.w	r1, sp, r3
   2e802:	aa03      	add	r2, sp, #12
   2e804:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2e806:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2e80a:	f7ff ffbc 	bl	2e786 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2e80e:	9b00      	ldr	r3, [sp, #0]
   2e810:	6023      	str	r3, [r4, #0]

	return ret;
}
   2e812:	b008      	add	sp, #32
   2e814:	bd10      	pop	{r4, pc}

0002e816 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2e816:	2300      	movs	r3, #0
{
   2e818:	b510      	push	{r4, lr}
   2e81a:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2e81c:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2e820:	ab05      	add	r3, sp, #20
   2e822:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2e824:	230c      	movs	r3, #12
   2e826:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2e828:	2304      	movs	r3, #4
{
   2e82a:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2e82c:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2e82e:	aa03      	add	r2, sp, #12
   2e830:	eb0d 0103 	add.w	r1, sp, r3
   2e834:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2e836:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2e838:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2e83c:	f7ff ffa3 	bl	2e786 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2e840:	9b00      	ldr	r3, [sp, #0]
   2e842:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2e844:	b008      	add	sp, #32
   2e846:	bd10      	pop	{r4, pc}

0002e848 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2e848:	f7f4 bbb2 	b.w	22fb0 <SystemCoreClockUpdate>

0002e84c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e84c:	4700      	bx	r0

0002e84e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e84e:	f000 be8c 	b.w	2f56a <z_impl_k_busy_wait>

0002e852 <nrf_gpio_pin_present_check>:
    switch (port)
   2e852:	0943      	lsrs	r3, r0, #5
   2e854:	d00b      	beq.n	2e86e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2e856:	2b01      	cmp	r3, #1
   2e858:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e85c:	bf18      	it	ne
   2e85e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2e860:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e864:	fa23 f000 	lsr.w	r0, r3, r0
}
   2e868:	f000 0001 	and.w	r0, r0, #1
   2e86c:	4770      	bx	lr
    switch (port)
   2e86e:	f04f 33ff 	mov.w	r3, #4294967295
   2e872:	e7f5      	b.n	2e860 <nrf_gpio_pin_present_check+0xe>

0002e874 <pin_is_task_output>:
{
   2e874:	b508      	push	{r3, lr}
   2e876:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2e878:	f7f4 fe0c 	bl	23494 <pin_is_output>
   2e87c:	b110      	cbz	r0, 2e884 <pin_is_task_output+0x10>
   2e87e:	4610      	mov	r0, r2
   2e880:	f7f4 fdf2 	bl	23468 <pin_in_use_by_te>
}
   2e884:	f000 0001 	and.w	r0, r0, #1
   2e888:	bd08      	pop	{r3, pc}

0002e88a <nrf_gpio_reconfigure>:
{
   2e88a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e88e:	4617      	mov	r7, r2
   2e890:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2e894:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e896:	a801      	add	r0, sp, #4
{
   2e898:	460c      	mov	r4, r1
   2e89a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e89c:	f7f4 fe7c 	bl	23598 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2e8a0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2e8a2:	1e39      	subs	r1, r7, #0
   2e8a4:	bf18      	it	ne
   2e8a6:	2101      	movne	r1, #1
   2e8a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e8ac:	1e23      	subs	r3, r4, #0
   2e8ae:	bf18      	it	ne
   2e8b0:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e8b2:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e8b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e8b8:	bf14      	ite	ne
   2e8ba:	210c      	movne	r1, #12
   2e8bc:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2e8be:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2e8c0:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2e8c4:	bf14      	ite	ne
   2e8c6:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2e8ca:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2e8cc:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e8d0:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2e8d4:	bf14      	ite	ne
   2e8d6:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2e8da:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2e8dc:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e8e0:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2e8e2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2e8e6:	b104      	cbz	r4, 2e8ea <nrf_gpio_reconfigure+0x60>
   2e8e8:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2e8ea:	b10f      	cbz	r7, 2e8f0 <nrf_gpio_reconfigure+0x66>
   2e8ec:	783f      	ldrb	r7, [r7, #0]
   2e8ee:	007f      	lsls	r7, r7, #1
   2e8f0:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2e8f2:	b10e      	cbz	r6, 2e8f8 <nrf_gpio_reconfigure+0x6e>
   2e8f4:	7836      	ldrb	r6, [r6, #0]
   2e8f6:	00b6      	lsls	r6, r6, #2
   2e8f8:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2e8fa:	b18d      	cbz	r5, 2e920 <nrf_gpio_reconfigure+0x96>
   2e8fc:	7829      	ldrb	r1, [r5, #0]
   2e8fe:	0209      	lsls	r1, r1, #8
   2e900:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2e902:	f1b8 0f00 	cmp.w	r8, #0
   2e906:	d003      	beq.n	2e910 <nrf_gpio_reconfigure+0x86>
   2e908:	f898 8000 	ldrb.w	r8, [r8]
   2e90c:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2e910:	4321      	orrs	r1, r4
   2e912:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2e916:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2e91a:	b002      	add	sp, #8
   2e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2e920:	4629      	mov	r1, r5
   2e922:	e7ed      	b.n	2e900 <nrf_gpio_reconfigure+0x76>

0002e924 <nrf_gpio_cfg_sense_set>:
{
   2e924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2e926:	f10d 030f 	add.w	r3, sp, #15
   2e92a:	9301      	str	r3, [sp, #4]
   2e92c:	2300      	movs	r3, #0
{
   2e92e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2e932:	461a      	mov	r2, r3
   2e934:	4619      	mov	r1, r3
   2e936:	9300      	str	r3, [sp, #0]
   2e938:	f7ff ffa7 	bl	2e88a <nrf_gpio_reconfigure>
}
   2e93c:	b005      	add	sp, #20
   2e93e:	f85d fb04 	ldr.w	pc, [sp], #4

0002e942 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2e942:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2e946:	4770      	bx	lr

0002e948 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2e948:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2e94c:	4770      	bx	lr

0002e94e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2e94e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2e952:	4770      	bx	lr

0002e954 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2e954:	2100      	movs	r1, #0
   2e956:	f7f5 bb7b 	b.w	24050 <nrf_gpio_cfg.constprop.0>

0002e95a <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2e95a:	2302      	movs	r3, #2
   2e95c:	f7f5 baba 	b.w	23ed4 <qspi_xfer>

0002e960 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2e960:	2303      	movs	r3, #3
   2e962:	f7f5 bab7 	b.w	23ed4 <qspi_xfer>

0002e966 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2e966:	2100      	movs	r1, #0
   2e968:	2002      	movs	r0, #2
   2e96a:	f7f5 bdc3 	b.w	244f4 <nrfx_qspi_erase>

0002e96e <metal_device_open>:
{
   2e96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e970:	460c      	mov	r4, r1
   2e972:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2e974:	4606      	mov	r6, r0
   2e976:	b918      	cbnz	r0, 2e980 <metal_device_open+0x12>
		return -EINVAL;
   2e978:	f06f 0015 	mvn.w	r0, #21
}
   2e97c:	b002      	add	sp, #8
   2e97e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2e980:	f7fb fd75 	bl	2a46e <strlen>
   2e984:	2800      	cmp	r0, #0
   2e986:	d0f7      	beq.n	2e978 <metal_device_open+0xa>
   2e988:	2c00      	cmp	r4, #0
   2e98a:	d0f5      	beq.n	2e978 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2e98c:	4620      	mov	r0, r4
   2e98e:	f7fb fd6e 	bl	2a46e <strlen>
   2e992:	2800      	cmp	r0, #0
   2e994:	d0f0      	beq.n	2e978 <metal_device_open+0xa>
   2e996:	2d00      	cmp	r5, #0
   2e998:	d0ee      	beq.n	2e978 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2e99a:	4630      	mov	r0, r6
   2e99c:	a901      	add	r1, sp, #4
   2e99e:	f7f5 fe5f 	bl	24660 <metal_bus_find>
	if (error)
   2e9a2:	2800      	cmp	r0, #0
   2e9a4:	d1ea      	bne.n	2e97c <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2e9a6:	9801      	ldr	r0, [sp, #4]
   2e9a8:	6883      	ldr	r3, [r0, #8]
   2e9aa:	b12b      	cbz	r3, 2e9b8 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2e9ac:	462a      	mov	r2, r5
   2e9ae:	4621      	mov	r1, r4
}
   2e9b0:	b002      	add	sp, #8
   2e9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2e9b6:	4718      	bx	r3
		return -ENODEV;
   2e9b8:	f06f 0012 	mvn.w	r0, #18
   2e9bc:	e7de      	b.n	2e97c <metal_device_open+0xe>

0002e9be <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2e9be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e9c2:	b089      	sub	sp, #36	; 0x24
   2e9c4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2e9c6:	4604      	mov	r4, r0
   2e9c8:	4689      	mov	r9, r1
   2e9ca:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2e9cc:	2100      	movs	r1, #0
   2e9ce:	2220      	movs	r2, #32
   2e9d0:	4668      	mov	r0, sp
{
   2e9d2:	461f      	mov	r7, r3
   2e9d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2e9d6:	f7fb fdab 	bl	2a530 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2e9da:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2e9dc:	bf97      	itett	ls
   2e9de:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2e9e0:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2e9e4:	40b3      	lslls	r3, r6
   2e9e6:	f103 33ff 	addls.w	r3, r3, #4294967295
   2e9ea:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2e9ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2e9ee:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2e9f2:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2e9f6:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2e9f8:	3418      	adds	r4, #24
   2e9fa:	b145      	cbz	r5, 2ea0e <metal_io_init+0x50>
   2e9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2e9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ea00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ea04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2ea08:	b009      	add	sp, #36	; 0x24
   2ea0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2ea0e:	466d      	mov	r5, sp
   2ea10:	e7f4      	b.n	2e9fc <metal_io_init+0x3e>

0002ea12 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2ea12:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ea14:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ea16:	1c66      	adds	r6, r4, #1
   2ea18:	d031      	beq.n	2ea7e <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ea1a:	6885      	ldr	r5, [r0, #8]
   2ea1c:	42a9      	cmp	r1, r5
   2ea1e:	d22e      	bcs.n	2ea7e <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2ea20:	1864      	adds	r4, r4, r1
   2ea22:	d02c      	beq.n	2ea7e <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ea24:	185e      	adds	r6, r3, r1
   2ea26:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ea28:	bf88      	it	hi
   2ea2a:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2ea2c:	6a05      	ldr	r5, [r0, #32]
   2ea2e:	b135      	cbz	r5, 2ea3e <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2ea30:	9300      	str	r3, [sp, #0]
   2ea32:	2305      	movs	r3, #5
   2ea34:	47a8      	blx	r5
   2ea36:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2ea38:	4618      	mov	r0, r3
   2ea3a:	b002      	add	sp, #8
   2ea3c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2ea3e:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2ea42:	4619      	mov	r1, r3
   2ea44:	1aa4      	subs	r4, r4, r2
   2ea46:	1910      	adds	r0, r2, r4
   2ea48:	b119      	cbz	r1, 2ea52 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2ea4a:	ea40 0502 	orr.w	r5, r0, r2
   2ea4e:	07ad      	lsls	r5, r5, #30
   2ea50:	d10a      	bne.n	2ea68 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2ea52:	2903      	cmp	r1, #3
   2ea54:	dc0d      	bgt.n	2ea72 <metal_io_block_read+0x60>
   2ea56:	3801      	subs	r0, #1
   2ea58:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2ea5a:	428a      	cmp	r2, r1
   2ea5c:	d0ec      	beq.n	2ea38 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2ea5e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2ea62:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2ea66:	e7f8      	b.n	2ea5a <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2ea68:	7800      	ldrb	r0, [r0, #0]
			len--;
   2ea6a:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2ea6c:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2ea70:	e7e9      	b.n	2ea46 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2ea72:	f850 4b04 	ldr.w	r4, [r0], #4
   2ea76:	3904      	subs	r1, #4
   2ea78:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2ea7c:	e7e9      	b.n	2ea52 <metal_io_block_read+0x40>
		return -ERANGE;
   2ea7e:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2ea82:	e7d9      	b.n	2ea38 <metal_io_block_read+0x26>

0002ea84 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2ea84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ea86:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ea88:	1c65      	adds	r5, r4, #1
   2ea8a:	d032      	beq.n	2eaf2 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ea8c:	6885      	ldr	r5, [r0, #8]
   2ea8e:	42a9      	cmp	r1, r5
   2ea90:	d22f      	bcs.n	2eaf2 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2ea92:	1864      	adds	r4, r4, r1
   2ea94:	d02d      	beq.n	2eaf2 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ea96:	185e      	adds	r6, r3, r1
   2ea98:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ea9a:	bf88      	it	hi
   2ea9c:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2ea9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2eaa0:	b1cd      	cbz	r5, 2ead6 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2eaa2:	9300      	str	r3, [sp, #0]
   2eaa4:	2305      	movs	r3, #5
   2eaa6:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2eaa8:	b002      	add	sp, #8
   2eaaa:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2eaac:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2eab0:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2eab2:	7005      	strb	r5, [r0, #0]
			len--;
   2eab4:	4615      	mov	r5, r2
   2eab6:	18a0      	adds	r0, r4, r2
		while ( len && (
   2eab8:	b119      	cbz	r1, 2eac2 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2eaba:	ea40 0602 	orr.w	r6, r0, r2
   2eabe:	07b6      	lsls	r6, r6, #30
   2eac0:	d1f4      	bne.n	2eaac <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2eac2:	2903      	cmp	r1, #3
   2eac4:	dc0a      	bgt.n	2eadc <metal_io_block_write+0x58>
   2eac6:	3d01      	subs	r5, #1
   2eac8:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2eaca:	4288      	cmp	r0, r1
   2eacc:	d10c      	bne.n	2eae8 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2eace:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2ead2:	4618      	mov	r0, r3
   2ead4:	e7e8      	b.n	2eaa8 <metal_io_block_write+0x24>
   2ead6:	4619      	mov	r1, r3
   2ead8:	1aa4      	subs	r4, r4, r2
   2eada:	e7eb      	b.n	2eab4 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2eadc:	f855 2b04 	ldr.w	r2, [r5], #4
   2eae0:	3904      	subs	r1, #4
   2eae2:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2eae6:	e7ec      	b.n	2eac2 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2eae8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2eaec:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2eaf0:	e7eb      	b.n	2eaca <metal_io_block_write+0x46>
		return -ERANGE;
   2eaf2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2eaf6:	e7d7      	b.n	2eaa8 <metal_io_block_write+0x24>

0002eaf8 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2eaf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2eafa:	6804      	ldr	r4, [r0, #0]
   2eafc:	461d      	mov	r5, r3
		: NULL);
   2eafe:	1c66      	adds	r6, r4, #1
   2eb00:	d02b      	beq.n	2eb5a <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2eb02:	6883      	ldr	r3, [r0, #8]
   2eb04:	4299      	cmp	r1, r3
   2eb06:	d228      	bcs.n	2eb5a <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2eb08:	1864      	adds	r4, r4, r1
   2eb0a:	d026      	beq.n	2eb5a <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2eb0c:	186e      	adds	r6, r5, r1
   2eb0e:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2eb10:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2eb12:	bf88      	it	hi
   2eb14:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2eb16:	b12e      	cbz	r6, 2eb24 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2eb18:	2305      	movs	r3, #5
   2eb1a:	9500      	str	r5, [sp, #0]
   2eb1c:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2eb1e:	4628      	mov	r0, r5
}
   2eb20:	b002      	add	sp, #8
   2eb22:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2eb24:	4621      	mov	r1, r4
   2eb26:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2eb28:	b94b      	cbnz	r3, 2eb3e <metal_io_block_set+0x46>
   2eb2a:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2eb2c:	4299      	cmp	r1, r3
   2eb2e:	d111      	bne.n	2eb54 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2eb30:	f3bf 8f5b 	dmb	ish
   2eb34:	e7f3      	b.n	2eb1e <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2eb36:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2eb3a:	3b01      	subs	r3, #1
   2eb3c:	e7f4      	b.n	2eb28 <metal_io_block_set+0x30>
   2eb3e:	0788      	lsls	r0, r1, #30
   2eb40:	d1f9      	bne.n	2eb36 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2eb42:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2eb46:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2eb48:	2b03      	cmp	r3, #3
   2eb4a:	ddee      	ble.n	2eb2a <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2eb4c:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2eb50:	3b04      	subs	r3, #4
   2eb52:	e7f9      	b.n	2eb48 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2eb54:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2eb58:	e7e8      	b.n	2eb2c <metal_io_block_set+0x34>
		return -ERANGE;
   2eb5a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2eb5e:	e7df      	b.n	2eb20 <metal_io_block_set+0x28>

0002eb60 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2eb60:	2000      	movs	r0, #0
   2eb62:	4770      	bx	lr

0002eb64 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2eb64:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2eb66:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2eb68:	4602      	mov	r2, r0
   2eb6a:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2eb6c:	b984      	cbnz	r4, 2eb90 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2eb6e:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2eb70:	291f      	cmp	r1, #31
   2eb72:	bf98      	it	ls
   2eb74:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2eb78:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2eb7a:	b161      	cbz	r1, 2eb96 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2eb7c:	6880      	ldr	r0, [r0, #8]
   2eb7e:	4283      	cmp	r3, r0
   2eb80:	d209      	bcs.n	2eb96 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2eb82:	6910      	ldr	r0, [r2, #16]
   2eb84:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2eb86:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2eb8a:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2eb8c:	bc10      	pop	{r4}
   2eb8e:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2eb90:	4623      	mov	r3, r4
}
   2eb92:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2eb94:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2eb96:	f04f 30ff 	mov.w	r0, #4294967295
   2eb9a:	e7f7      	b.n	2eb8c <metal_io_phys+0x28>

0002eb9c <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2eb9c:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2eb9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2eba0:	4605      	mov	r5, r0
   2eba2:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2eba4:	b9e3      	cbnz	r3, 2ebe0 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2eba6:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2eba8:	1c62      	adds	r2, r4, #1
   2ebaa:	bf09      	itett	eq
   2ebac:	6843      	ldreq	r3, [r0, #4]
   2ebae:	400c      	andne	r4, r1
   2ebb0:	681c      	ldreq	r4, [r3, #0]
   2ebb2:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2ebb4:	4621      	mov	r1, r4
   2ebb6:	4628      	mov	r0, r5
   2ebb8:	f7ff ffd4 	bl	2eb64 <metal_io_phys>
   2ebbc:	4286      	cmp	r6, r0
   2ebbe:	d007      	beq.n	2ebd0 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2ebc0:	692b      	ldr	r3, [r5, #16]
   2ebc2:	3301      	adds	r3, #1
   2ebc4:	441c      	add	r4, r3
		} while (offset < io->size);
   2ebc6:	68ab      	ldr	r3, [r5, #8]
   2ebc8:	429c      	cmp	r4, r3
   2ebca:	d3f3      	bcc.n	2ebb4 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2ebcc:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ebd0:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2ebd2:	1c43      	adds	r3, r0, #1
   2ebd4:	d007      	beq.n	2ebe6 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ebd6:	68ab      	ldr	r3, [r5, #8]
   2ebd8:	42a3      	cmp	r3, r4
   2ebda:	d904      	bls.n	2ebe6 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2ebdc:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2ebde:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2ebe0:	4798      	blx	r3
   2ebe2:	4604      	mov	r4, r0
   2ebe4:	e7f4      	b.n	2ebd0 <metal_io_phys_to_virt+0x34>
		: NULL);
   2ebe6:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2ebe8:	e7f9      	b.n	2ebde <metal_io_phys_to_virt+0x42>

0002ebea <virtqueue_create>:
{
   2ebea:	b530      	push	{r4, r5, lr}
   2ebec:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2ebee:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2ebf2:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2ebf4:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2ebf6:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2ebf8:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2ebfa:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2ebfc:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2ebfe:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2ec00:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2ec02:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2ec06:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2ec0a:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2ec0e:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2ec10:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2ec12:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2ec16:	1c6a      	adds	r2, r5, #1
   2ec18:	4413      	add	r3, r2
   2ec1a:	426d      	negs	r5, r5
   2ec1c:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2ec1e:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2ec20:	6983      	ldr	r3, [r0, #24]
   2ec22:	b953      	cbnz	r3, 2ec3a <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2ec24:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2ec26:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2ec28:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2ec2a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2ec2e:	db06      	blt.n	2ec3e <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2ec30:	2300      	movs	r3, #0
   2ec32:	7393      	strb	r3, [r2, #14]
   2ec34:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2ec38:	73d3      	strb	r3, [r2, #15]
}
   2ec3a:	2000      	movs	r0, #0
   2ec3c:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2ec3e:	3301      	adds	r3, #1
   2ec40:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2ec42:	e7f0      	b.n	2ec26 <virtqueue_create+0x3c>

0002ec44 <virtqueue_add_buffer>:
{
   2ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2ec48:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2ec4c:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2ec4e:	4655      	mov	r5, sl
   2ec50:	2600      	movs	r6, #0
{
   2ec52:	b085      	sub	sp, #20
	needed = readable + writable;
   2ec54:	eb02 0803 	add.w	r8, r2, r3
{
   2ec58:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2ec5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ec5c:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2ec60:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2ec64:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2ec66:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2ec6a:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2ec6e:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2ec70:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2ec72:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2ec74:	45b0      	cmp	r8, r6
   2ec76:	dc1a      	bgt.n	2ecae <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2ec78:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2ec7a:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2ec7c:	eba3 030b 	sub.w	r3, r3, fp
   2ec80:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2ec82:	69e3      	ldr	r3, [r4, #28]
   2ec84:	8961      	ldrh	r1, [r4, #10]
   2ec86:	885a      	ldrh	r2, [r3, #2]
   2ec88:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2ec8a:	400a      	ands	r2, r1
   2ec8c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2ec90:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2ec94:	f3bf 8f5b 	dmb	ish
}
   2ec98:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2ec9a:	69e2      	ldr	r2, [r4, #28]
   2ec9c:	8853      	ldrh	r3, [r2, #2]
   2ec9e:	3301      	adds	r3, #1
   2eca0:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2eca2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2eca4:	3301      	adds	r3, #1
   2eca6:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2eca8:	b005      	add	sp, #20
   2ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2ecae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2ecb0:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2ecb2:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2ecb6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2ecba:	9302      	str	r3, [sp, #8]
   2ecbc:	6803      	ldr	r3, [r0, #0]
   2ecbe:	9203      	str	r2, [sp, #12]
   2ecc0:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2ecc2:	6883      	ldr	r3, [r0, #8]
   2ecc4:	3708      	adds	r7, #8
   2ecc6:	4299      	cmp	r1, r3
   2ecc8:	bf28      	it	cs
   2ecca:	f04f 31ff 	movcs.w	r1, #4294967295
   2ecce:	f7ff ff49 	bl	2eb64 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2ecd2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2ecd6:	5098      	str	r0, [r3, r2]
   2ecd8:	2200      	movs	r2, #0
   2ecda:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2ecdc:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2ece0:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2ece2:	9a01      	ldr	r2, [sp, #4]
   2ece4:	4296      	cmp	r6, r2
   2ece6:	bfac      	ite	ge
   2ece8:	2200      	movge	r2, #0
   2ecea:	2201      	movlt	r2, #1
		if (i >= readable)
   2ecec:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2ecee:	bfd8      	it	le
   2ecf0:	f042 0202 	orrle.w	r2, r2, #2
   2ecf4:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2ecf6:	3601      	adds	r6, #1
   2ecf8:	89ed      	ldrh	r5, [r5, #14]
   2ecfa:	e7bb      	b.n	2ec74 <virtqueue_add_buffer+0x30>

0002ecfc <virtqueue_get_buffer>:
{
   2ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2ecfe:	b350      	cbz	r0, 2ed56 <virtqueue_get_buffer+0x5a>
   2ed00:	6a05      	ldr	r5, [r0, #32]
   2ed02:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2ed04:	886b      	ldrh	r3, [r5, #2]
   2ed06:	42a3      	cmp	r3, r4
   2ed08:	d030      	beq.n	2ed6c <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2ed0a:	1c63      	adds	r3, r4, #1
   2ed0c:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2ed0e:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2ed10:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2ed14:	3b01      	subs	r3, #1
   2ed16:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2ed18:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2ed1c:	686b      	ldr	r3, [r5, #4]
   2ed1e:	b29e      	uxth	r6, r3
	if (len)
   2ed20:	b109      	cbz	r1, 2ed26 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2ed22:	68ad      	ldr	r5, [r5, #8]
   2ed24:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2ed26:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2ed2a:	b29b      	uxth	r3, r3
   2ed2c:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2ed30:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2ed34:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2ed36:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2ed38:	442f      	add	r7, r5
	dxp->ndescs--;
   2ed3a:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2ed3c:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2ed3e:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2ed40:	898d      	ldrh	r5, [r1, #12]
   2ed42:	076f      	lsls	r7, r5, #29
   2ed44:	d50e      	bpl.n	2ed64 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2ed46:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2ed48:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2ed4a:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2ed4c:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2ed4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2ed50:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2ed52:	b102      	cbz	r2, 2ed56 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2ed54:	8014      	strh	r4, [r2, #0]
}
   2ed56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2ed58:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2ed5a:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2ed5c:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2ed5e:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2ed62:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2ed64:	898d      	ldrh	r5, [r1, #12]
   2ed66:	07ed      	lsls	r5, r5, #31
   2ed68:	d4f6      	bmi.n	2ed58 <virtqueue_get_buffer+0x5c>
   2ed6a:	e7ec      	b.n	2ed46 <virtqueue_get_buffer+0x4a>
		return NULL;
   2ed6c:	2000      	movs	r0, #0
   2ed6e:	e7f2      	b.n	2ed56 <virtqueue_get_buffer+0x5a>

0002ed70 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2ed70:	6983      	ldr	r3, [r0, #24]
   2ed72:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2ed76:	6898      	ldr	r0, [r3, #8]
   2ed78:	4770      	bx	lr

0002ed7a <virtqueue_get_available_buffer>:
{
   2ed7a:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2ed7c:	f3bf 8f5b 	dmb	ish
{
   2ed80:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2ed82:	69c1      	ldr	r1, [r0, #28]
{
   2ed84:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2ed86:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2ed88:	884a      	ldrh	r2, [r1, #2]
{
   2ed8a:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2ed8c:	429a      	cmp	r2, r3
   2ed8e:	d016      	beq.n	2edbe <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2ed90:	1c5a      	adds	r2, r3, #1
   2ed92:	8602      	strh	r2, [r0, #48]	; 0x30
   2ed94:	8942      	ldrh	r2, [r0, #10]
   2ed96:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2ed98:	4013      	ands	r3, r2
   2ed9a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2ed9e:	888a      	ldrh	r2, [r1, #4]
   2eda0:	802a      	strh	r2, [r5, #0]
   2eda2:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2eda4:	6982      	ldr	r2, [r0, #24]
   2eda6:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2eda8:	58d1      	ldr	r1, [r2, r3]
   2edaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2edac:	f7ff fef6 	bl	2eb9c <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2edb0:	882a      	ldrh	r2, [r5, #0]
   2edb2:	69a3      	ldr	r3, [r4, #24]
   2edb4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2edb8:	689b      	ldr	r3, [r3, #8]
   2edba:	6033      	str	r3, [r6, #0]
}
   2edbc:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2edbe:	2000      	movs	r0, #0
   2edc0:	e7fc      	b.n	2edbc <virtqueue_get_available_buffer+0x42>

0002edc2 <virtqueue_disable_cb>:
{
   2edc2:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2edc4:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2edc6:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2edc8:	6912      	ldr	r2, [r2, #16]
   2edca:	0092      	lsls	r2, r2, #2
   2edcc:	d517      	bpl.n	2edfe <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2edce:	b943      	cbnz	r3, 2ede2 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2edd0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2edd2:	69c2      	ldr	r2, [r0, #28]
   2edd4:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2edd6:	8944      	ldrh	r4, [r0, #10]
   2edd8:	3b01      	subs	r3, #1
   2edda:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2eddc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2ede0:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2ede2:	6803      	ldr	r3, [r0, #0]
   2ede4:	699b      	ldr	r3, [r3, #24]
   2ede6:	2b01      	cmp	r3, #1
   2ede8:	d108      	bne.n	2edfc <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2edea:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2edec:	6a02      	ldr	r2, [r0, #32]
   2edee:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2edf0:	8940      	ldrh	r0, [r0, #10]
   2edf2:	3b01      	subs	r3, #1
   2edf4:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2edf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2edfa:	8093      	strh	r3, [r2, #4]
}
   2edfc:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2edfe:	b923      	cbnz	r3, 2ee0a <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2ee00:	69c2      	ldr	r2, [r0, #28]
   2ee02:	8813      	ldrh	r3, [r2, #0]
   2ee04:	f043 0301 	orr.w	r3, r3, #1
   2ee08:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2ee0a:	6803      	ldr	r3, [r0, #0]
   2ee0c:	699b      	ldr	r3, [r3, #24]
   2ee0e:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2ee10:	bf01      	itttt	eq
   2ee12:	6a02      	ldreq	r2, [r0, #32]
   2ee14:	8813      	ldrheq	r3, [r2, #0]
   2ee16:	f043 0301 	orreq.w	r3, r3, #1
   2ee1a:	8013      	strheq	r3, [r2, #0]
}
   2ee1c:	e7ee      	b.n	2edfc <virtqueue_disable_cb+0x3a>

0002ee1e <virtqueue_kick>:
{
   2ee1e:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2ee20:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2ee24:	6803      	ldr	r3, [r0, #0]
{
   2ee26:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2ee28:	691a      	ldr	r2, [r3, #16]
   2ee2a:	699b      	ldr	r3, [r3, #24]
   2ee2c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2ee30:	d01a      	beq.n	2ee68 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2ee32:	b97b      	cbnz	r3, 2ee54 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2ee34:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2ee36:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2ee38:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2ee3a:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2ee3c:	3b01      	subs	r3, #1
   2ee3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2ee42:	8892      	ldrh	r2, [r2, #4]
   2ee44:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2ee46:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2ee48:	b29b      	uxth	r3, r3
   2ee4a:	429a      	cmp	r2, r3
   2ee4c:	d814      	bhi.n	2ee78 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2ee4e:	2300      	movs	r3, #0
   2ee50:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2ee52:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2ee54:	2b01      	cmp	r3, #1
   2ee56:	d1fa      	bne.n	2ee4e <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2ee58:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2ee5a:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2ee5c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2ee5e:	6941      	ldr	r1, [r0, #20]
   2ee60:	3b01      	subs	r3, #1
   2ee62:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2ee66:	e7ec      	b.n	2ee42 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2ee68:	b963      	cbnz	r3, 2ee84 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2ee6a:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2ee6c:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2ee6e:	43db      	mvns	r3, r3
   2ee70:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2ee74:	2b00      	cmp	r3, #0
   2ee76:	d0ea      	beq.n	2ee4e <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2ee78:	6923      	ldr	r3, [r4, #16]
   2ee7a:	2b00      	cmp	r3, #0
   2ee7c:	d0e7      	beq.n	2ee4e <virtqueue_kick+0x30>
		vq->notify(vq);
   2ee7e:	4620      	mov	r0, r4
   2ee80:	4798      	blx	r3
   2ee82:	e7e4      	b.n	2ee4e <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2ee84:	2b01      	cmp	r3, #1
   2ee86:	d1e2      	bne.n	2ee4e <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2ee88:	69c3      	ldr	r3, [r0, #28]
   2ee8a:	e7ef      	b.n	2ee6c <virtqueue_kick+0x4e>

0002ee8c <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2ee8c:	69c3      	ldr	r3, [r0, #28]
   2ee8e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2ee90:	8859      	ldrh	r1, [r3, #2]
   2ee92:	4291      	cmp	r1, r2
   2ee94:	d00a      	beq.n	2eeac <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2ee96:	8941      	ldrh	r1, [r0, #10]
   2ee98:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2ee9a:	400a      	ands	r2, r1
   2ee9c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2eea0:	889a      	ldrh	r2, [r3, #4]
   2eea2:	6983      	ldr	r3, [r0, #24]
   2eea4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2eea8:	6898      	ldr	r0, [r3, #8]
	return len;
   2eeaa:	4770      	bx	lr
		return 0;
   2eeac:	2000      	movs	r0, #0
}
   2eeae:	4770      	bx	lr

0002eeb0 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2eeb0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2eeb4:	68c3      	ldr	r3, [r0, #12]
   2eeb6:	b103      	cbz	r3, 2eeba <virtqueue_notification+0xa>
		vq->callback(vq);
   2eeb8:	4718      	bx	r3
}
   2eeba:	4770      	bx	lr

0002eebc <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2eebc:	f04f 32ff 	mov.w	r2, #4294967295
   2eec0:	f04f 33ff 	mov.w	r3, #4294967295
   2eec4:	f7f6 bf42 	b.w	25d4c <z_impl_k_sem_take>

0002eec8 <rpmsg_unregister_endpoint>:
{
   2eec8:	b570      	push	{r4, r5, r6, lr}
   2eeca:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2eecc:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2eece:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2eed2:	4630      	mov	r0, r6
   2eed4:	f7ff fff2 	bl	2eebc <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2eed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2eeda:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2eede:	2b7f      	cmp	r3, #127	; 0x7f
   2eee0:	d80b      	bhi.n	2eefa <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2eee2:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2eee4:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2eee6:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2eee8:	f003 031f 	and.w	r3, r3, #31
   2eeec:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2eeee:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2eef2:	ea23 0302 	bic.w	r3, r3, r2
   2eef6:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2eefa:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2eefe:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2ef00:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2ef02:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2ef06:	6011      	str	r1, [r2, #0]
	node->next = node;
   2ef08:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2ef0c:	2300      	movs	r3, #0
   2ef0e:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2ef10:	4630      	mov	r0, r6
}
   2ef12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ef16:	f7f6 bedf 	b.w	25cd8 <z_impl_k_sem_give>

0002ef1a <rpmsg_send_ns_message>:
{
   2ef1a:	b510      	push	{r4, lr}
   2ef1c:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   2ef1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   2ef20:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2ef22:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2ef24:	2220      	movs	r2, #32
   2ef26:	4601      	mov	r1, r0
   2ef28:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2ef2a:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2ef2c:	f7fb fa8b 	bl	2a446 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2ef30:	2328      	movs	r3, #40	; 0x28
   2ef32:	2201      	movs	r2, #1
   2ef34:	e9cd 3200 	strd	r3, r2, [sp]
   2ef38:	4620      	mov	r0, r4
   2ef3a:	2235      	movs	r2, #53	; 0x35
   2ef3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2ef3e:	ab02      	add	r3, sp, #8
   2ef40:	f7f5 fcf8 	bl	24934 <rpmsg_send_offchannel_raw>
}
   2ef44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2ef48:	b00c      	add	sp, #48	; 0x30
   2ef4a:	bd10      	pop	{r4, pc}

0002ef4c <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2ef4c:	b128      	cbz	r0, 2ef5a <rpmsg_hold_rx_buffer+0xe>
   2ef4e:	6a00      	ldr	r0, [r0, #32]
   2ef50:	b118      	cbz	r0, 2ef5a <rpmsg_hold_rx_buffer+0xe>
   2ef52:	b111      	cbz	r1, 2ef5a <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2ef54:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2ef56:	b103      	cbz	r3, 2ef5a <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2ef58:	4718      	bx	r3
}
   2ef5a:	4770      	bx	lr

0002ef5c <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2ef5c:	b130      	cbz	r0, 2ef6c <rpmsg_release_rx_buffer+0x10>
   2ef5e:	6a00      	ldr	r0, [r0, #32]
   2ef60:	b120      	cbz	r0, 2ef6c <rpmsg_release_rx_buffer+0x10>
   2ef62:	b119      	cbz	r1, 2ef6c <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2ef64:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2ef68:	b103      	cbz	r3, 2ef6c <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2ef6a:	4718      	bx	r3
}
   2ef6c:	4770      	bx	lr

0002ef6e <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2ef6e:	b130      	cbz	r0, 2ef7e <rpmsg_get_tx_payload_buffer+0x10>
   2ef70:	6a00      	ldr	r0, [r0, #32]
   2ef72:	b120      	cbz	r0, 2ef7e <rpmsg_get_tx_payload_buffer+0x10>
   2ef74:	b119      	cbz	r1, 2ef7e <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2ef76:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2ef7a:	b103      	cbz	r3, 2ef7e <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2ef7c:	4718      	bx	r3
}
   2ef7e:	2000      	movs	r0, #0
   2ef80:	4770      	bx	lr

0002ef82 <rpmsg_get_endpoint>:
{
   2ef82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ef86:	4606      	mov	r6, r0
   2ef88:	4688      	mov	r8, r1
   2ef8a:	4617      	mov	r7, r2
   2ef8c:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2ef8e:	6804      	ldr	r4, [r0, #0]
   2ef90:	42a6      	cmp	r6, r4
   2ef92:	d101      	bne.n	2ef98 <rpmsg_get_endpoint+0x16>
	return NULL;
   2ef94:	2500      	movs	r5, #0
   2ef96:	e023      	b.n	2efe0 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2ef98:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2ef9a:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2ef9e:	d002      	beq.n	2efa6 <rpmsg_get_endpoint+0x24>
   2efa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2efa2:	42bb      	cmp	r3, r7
   2efa4:	d01c      	beq.n	2efe0 <rpmsg_get_endpoint+0x5e>
		if (name)
   2efa6:	f1b8 0f00 	cmp.w	r8, #0
   2efaa:	d101      	bne.n	2efb0 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2efac:	6824      	ldr	r4, [r4, #0]
   2efae:	e7ef      	b.n	2ef90 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2efb0:	2220      	movs	r2, #32
   2efb2:	4641      	mov	r1, r8
   2efb4:	4628      	mov	r0, r5
   2efb6:	f7fb fa76 	bl	2a4a6 <strncmp>
		if (!name || !name_match)
   2efba:	2800      	cmp	r0, #0
   2efbc:	d1f6      	bne.n	2efac <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2efbe:	f1b9 3fff 	cmp.w	r9, #4294967295
   2efc2:	d002      	beq.n	2efca <rpmsg_get_endpoint+0x48>
   2efc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2efc6:	454b      	cmp	r3, r9
   2efc8:	d00a      	beq.n	2efe0 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2efca:	1c7b      	adds	r3, r7, #1
   2efcc:	d00b      	beq.n	2efe6 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2efce:	6824      	ldr	r4, [r4, #0]
   2efd0:	42b4      	cmp	r4, r6
   2efd2:	d0df      	beq.n	2ef94 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2efd4:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2efd8:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2efdc:	429f      	cmp	r7, r3
   2efde:	d1e7      	bne.n	2efb0 <rpmsg_get_endpoint+0x2e>
}
   2efe0:	4628      	mov	r0, r5
   2efe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2efe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2efe8:	3301      	adds	r3, #1
   2efea:	d0f9      	beq.n	2efe0 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2efec:	6824      	ldr	r4, [r4, #0]
   2efee:	42b4      	cmp	r4, r6
   2eff0:	d0d0      	beq.n	2ef94 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2eff2:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2eff6:	e7d6      	b.n	2efa6 <rpmsg_get_endpoint+0x24>

0002eff8 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2eff8:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2effa:	4604      	mov	r4, r0
   2effc:	b190      	cbz	r0, 2f024 <rpmsg_destroy_ept+0x2c>
   2effe:	6a03      	ldr	r3, [r0, #32]
   2f000:	b183      	cbz	r3, 2f024 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2f002:	7802      	ldrb	r2, [r0, #0]
   2f004:	b14a      	cbz	r2, 2f01a <rpmsg_destroy_ept+0x22>
   2f006:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2f00a:	b133      	cbz	r3, 2f01a <rpmsg_destroy_ept+0x22>
   2f00c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2f00e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2f012:	d302      	bcc.n	2f01a <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2f014:	2101      	movs	r1, #1
   2f016:	f7ff ff80 	bl	2ef1a <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2f01a:	4620      	mov	r0, r4
}
   2f01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2f020:	f7ff bf52 	b.w	2eec8 <rpmsg_unregister_endpoint>
}
   2f024:	bd10      	pop	{r4, pc}

0002f026 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2f026:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2f02a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2f02e:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2f032:	4770      	bx	lr

0002f034 <rpmsg_virtio_tx_callback>:
}
   2f034:	4770      	bx	lr

0002f036 <k_sem_give>:
   2f036:	f7f6 be4f 	b.w	25cd8 <z_impl_k_sem_give>

0002f03a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2f03a:	f04f 32ff 	mov.w	r2, #4294967295
   2f03e:	f04f 33ff 	mov.w	r3, #4294967295
   2f042:	f7f6 be83 	b.w	25d4c <z_impl_k_sem_take>

0002f046 <rpmsg_virtio_release_tx_buffer>:
{
   2f046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f048:	460c      	mov	r4, r1
   2f04a:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2f04c:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2f050:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2f054:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2f056:	b2b6      	uxth	r6, r6
   2f058:	f7ff ffef 	bl	2f03a <__metal_mutex_acquire>
	r_desc->idx = idx;
   2f05c:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2f060:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2f064:	f1a4 0310 	sub.w	r3, r4, #16
   2f068:	f844 2c0c 	str.w	r2, [r4, #-12]
   2f06c:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2f070:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2f074:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2f078:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2f07c:	4638      	mov	r0, r7
   2f07e:	6013      	str	r3, [r2, #0]
   2f080:	f7ff ffd9 	bl	2f036 <k_sem_give>
}
   2f084:	2000      	movs	r0, #0
   2f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002f088 <rpmsg_virtio_ns_callback>:
{
   2f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2f08c:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2f08e:	2a28      	cmp	r2, #40	; 0x28
{
   2f090:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2f092:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2f096:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2f098:	d126      	bne.n	2f0e8 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2f09a:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2f09c:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2f09e:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2f0a0:	42a1      	cmp	r1, r4
   2f0a2:	bf28      	it	cs
   2f0a4:	f04f 31ff 	movcs.w	r1, #4294967295
   2f0a8:	2320      	movs	r3, #32
   2f0aa:	466a      	mov	r2, sp
   2f0ac:	f7ff fcb1 	bl	2ea12 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2f0b0:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2f0b4:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2f0b8:	4630      	mov	r0, r6
   2f0ba:	f7ff ffbe 	bl	2f03a <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2f0be:	4643      	mov	r3, r8
   2f0c0:	f04f 32ff 	mov.w	r2, #4294967295
   2f0c4:	4669      	mov	r1, sp
   2f0c6:	4628      	mov	r0, r5
   2f0c8:	f7ff ff5b 	bl	2ef82 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2f0ce:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2f0d0:	07db      	lsls	r3, r3, #31
   2f0d2:	d519      	bpl.n	2f108 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2f0d4:	b960      	cbnz	r0, 2f0f0 <rpmsg_virtio_ns_callback+0x68>
   2f0d6:	4630      	mov	r0, r6
   2f0d8:	f7ff ffad 	bl	2f036 <k_sem_give>
		if (rdev->ns_unbind_cb)
   2f0dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2f0de:	b11b      	cbz	r3, 2f0e8 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2f0e0:	4642      	mov	r2, r8
   2f0e2:	4669      	mov	r1, sp
   2f0e4:	4628      	mov	r0, r5
   2f0e6:	4798      	blx	r3
}
   2f0e8:	2000      	movs	r0, #0
   2f0ea:	b008      	add	sp, #32
   2f0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2f0f0:	f04f 33ff 	mov.w	r3, #4294967295
   2f0f4:	6283      	str	r3, [r0, #40]	; 0x28
   2f0f6:	4630      	mov	r0, r6
   2f0f8:	f7ff ff9d 	bl	2f036 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2f0fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f0fe:	2b00      	cmp	r3, #0
   2f100:	d0ec      	beq.n	2f0dc <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2f102:	4620      	mov	r0, r4
   2f104:	4798      	blx	r3
   2f106:	e7e9      	b.n	2f0dc <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2f108:	b920      	cbnz	r0, 2f114 <rpmsg_virtio_ns_callback+0x8c>
   2f10a:	4630      	mov	r0, r6
   2f10c:	f7ff ff93 	bl	2f036 <k_sem_give>
			if (rdev->ns_bind_cb)
   2f110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2f112:	e7e4      	b.n	2f0de <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2f114:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2f118:	4630      	mov	r0, r6
   2f11a:	f7ff ff8c 	bl	2f036 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2f11e:	e7e3      	b.n	2f0e8 <rpmsg_virtio_ns_callback+0x60>

0002f120 <rpmsg_virtio_get_rx_buffer>:
{
   2f120:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2f122:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2f126:	4613      	mov	r3, r2
   2f128:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2f12a:	b925      	cbnz	r5, 2f136 <rpmsg_virtio_get_rx_buffer+0x16>
}
   2f12c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2f12e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2f132:	f7ff bde3 	b.w	2ecfc <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2f136:	2d01      	cmp	r5, #1
   2f138:	d106      	bne.n	2f148 <rpmsg_virtio_get_rx_buffer+0x28>
}
   2f13a:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2f13c:	460a      	mov	r2, r1
   2f13e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2f142:	4619      	mov	r1, r3
   2f144:	f7ff be19 	b.w	2ed7a <virtqueue_get_available_buffer>
}
   2f148:	2000      	movs	r0, #0
   2f14a:	bc30      	pop	{r4, r5}
   2f14c:	4770      	bx	lr

0002f14e <rpmsg_virtio_return_buffer>:
{
   2f14e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f150:	460c      	mov	r4, r1
   2f152:	4619      	mov	r1, r3
   2f154:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2f158:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2f15a:	b95d      	cbnz	r5, 2f174 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2f15c:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2f15e:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2f162:	2301      	movs	r3, #1
   2f164:	462a      	mov	r2, r5
   2f166:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2f16a:	a902      	add	r1, sp, #8
   2f16c:	f7ff fd6a 	bl	2ec44 <virtqueue_add_buffer>
}
   2f170:	b004      	add	sp, #16
   2f172:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2f174:	2d01      	cmp	r5, #1
   2f176:	d1fb      	bne.n	2f170 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2f178:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2f17c:	b004      	add	sp, #16
   2f17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2f182:	f7f5 bbbb 	b.w	248fc <virtqueue_add_consumed_buffer>

0002f186 <rpmsg_virtio_release_rx_buffer>:
{
   2f186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f188:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2f18a:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2f18e:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2f192:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2f194:	b2b6      	uxth	r6, r6
{
   2f196:	460d      	mov	r5, r1
   2f198:	f7ff ff4f 	bl	2f03a <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2f19c:	4631      	mov	r1, r6
   2f19e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2f1a2:	f7ff fde5 	bl	2ed70 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2f1a6:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2f1a8:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2f1aa:	f1a5 0110 	sub.w	r1, r5, #16
   2f1ae:	4620      	mov	r0, r4
   2f1b0:	f7ff ffcd 	bl	2f14e <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2f1b4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2f1b8:	f7ff fe31 	bl	2ee1e <virtqueue_kick>
   2f1bc:	4638      	mov	r0, r7
}
   2f1be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2f1c2:	f7ff bf38 	b.w	2f036 <k_sem_give>

0002f1c6 <rpmsg_virtio_shm_pool_get_buffer>:
{
   2f1c6:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2f1c8:	b148      	cbz	r0, 2f1de <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2f1ca:	b149      	cbz	r1, 2f1e0 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2f1cc:	6843      	ldr	r3, [r0, #4]
   2f1ce:	428b      	cmp	r3, r1
   2f1d0:	d306      	bcc.n	2f1e0 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2f1d2:	6882      	ldr	r2, [r0, #8]
   2f1d4:	6804      	ldr	r4, [r0, #0]
   2f1d6:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2f1d8:	1a5b      	subs	r3, r3, r1
   2f1da:	6043      	str	r3, [r0, #4]
	return buffer;
   2f1dc:	18a0      	adds	r0, r4, r2
}
   2f1de:	bd10      	pop	{r4, pc}
		return NULL;
   2f1e0:	2000      	movs	r0, #0
   2f1e2:	e7fc      	b.n	2f1de <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002f1e4 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2f1e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2f1e8:	4605      	mov	r5, r0
   2f1ea:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2f1ee:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2f1f0:	6a03      	ldr	r3, [r0, #32]
   2f1f2:	4617      	mov	r7, r2
   2f1f4:	681b      	ldr	r3, [r3, #0]
   2f1f6:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2f1f8:	0743      	lsls	r3, r0, #29
   2f1fa:	d403      	bmi.n	2f204 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2f1fc:	2000      	movs	r0, #0
}
   2f1fe:	b002      	add	sp, #8
   2f200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2f204:	f643 2398 	movw	r3, #15000	; 0x3a98
   2f208:	2f00      	cmp	r7, #0
   2f20a:	bf18      	it	ne
   2f20c:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2f20e:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2f212:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2f216:	4640      	mov	r0, r8
   2f218:	f7ff ff0f 	bl	2f03a <__metal_mutex_acquire>
	return list->next == list;
   2f21c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2f220:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2f224:	4554      	cmp	r4, sl
   2f226:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2f22a:	d025      	beq.n	2f278 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2f22c:	b324      	cbz	r4, 2f278 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2f22e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2f232:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2f234:	6822      	ldr	r2, [r4, #0]
   2f236:	601a      	str	r2, [r3, #0]
	node->next = node;
   2f238:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2f23c:	f1b9 0f00 	cmp.w	r9, #0
   2f240:	d10e      	bne.n	2f260 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2f242:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2f246:	6033      	str	r3, [r6, #0]
   2f248:	4640      	mov	r0, r8
   2f24a:	f7ff fef4 	bl	2f036 <k_sem_give>
	rp_hdr->reserved = idx;
   2f24e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2f252:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2f256:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2f258:	6833      	ldr	r3, [r6, #0]
   2f25a:	3b10      	subs	r3, #16
   2f25c:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2f25e:	e7ce      	b.n	2f1fe <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2f260:	f1b9 0f01 	cmp.w	r9, #1
   2f264:	d1f0      	bne.n	2f248 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2f266:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2f268:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2f26c:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2f270:	f7ff fd7e 	bl	2ed70 <virtqueue_get_buffer_length>
   2f274:	6030      	str	r0, [r6, #0]
   2f276:	e7e7      	b.n	2f248 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   2f278:	f1b9 0f00 	cmp.w	r9, #0
   2f27c:	d12a      	bne.n	2f2d4 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2f27e:	4631      	mov	r1, r6
   2f280:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2f284:	f10d 0206 	add.w	r2, sp, #6
   2f288:	f7ff fd38 	bl	2ecfc <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2f28c:	4604      	mov	r4, r0
   2f28e:	2800      	cmp	r0, #0
   2f290:	d1da      	bne.n	2f248 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2f292:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2f296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2f298:	b953      	cbnz	r3, 2f2b0 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   2f29a:	4640      	mov	r0, r8
   2f29c:	f7ff fecb 	bl	2f036 <k_sem_give>
		if (rp_hdr || !tick_count)
   2f2a0:	2f00      	cmp	r7, #0
   2f2a2:	d0ab      	beq.n	2f1fc <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2f2a4:	2021      	movs	r0, #33	; 0x21
   2f2a6:	2100      	movs	r1, #0
   2f2a8:	f7f8 f986 	bl	275b8 <z_impl_k_sleep>
		tick_count--;
   2f2ac:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   2f2ae:	e7b2      	b.n	2f216 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2f2b0:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   2f2b4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   2f2b8:	f7ff ff85 	bl	2f1c6 <rpmsg_virtio_shm_pool_get_buffer>
   2f2bc:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   2f2be:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   2f2c2:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   2f2c6:	6033      	str	r3, [r6, #0]
   2f2c8:	4640      	mov	r0, r8
   2f2ca:	f7ff feb4 	bl	2f036 <k_sem_give>
		if (rp_hdr || !tick_count)
   2f2ce:	2c00      	cmp	r4, #0
   2f2d0:	d0e6      	beq.n	2f2a0 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   2f2d2:	e7bc      	b.n	2f24e <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   2f2d4:	f1b9 0f01 	cmp.w	r9, #1
   2f2d8:	d1df      	bne.n	2f29a <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2f2da:	4632      	mov	r2, r6
   2f2dc:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2f2e0:	f10d 0106 	add.w	r1, sp, #6
   2f2e4:	f7ff fd49 	bl	2ed7a <virtqueue_get_available_buffer>
   2f2e8:	4604      	mov	r4, r0
   2f2ea:	e7ed      	b.n	2f2c8 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002f2ec <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2f2ec:	b120      	cbz	r0, 2f2f8 <rpmsg_virtio_init_shm_pool+0xc>
   2f2ee:	b119      	cbz	r1, 2f2f8 <rpmsg_virtio_init_shm_pool+0xc>
   2f2f0:	b112      	cbz	r2, 2f2f8 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2f2f2:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2f2f6:	6001      	str	r1, [r0, #0]
}
   2f2f8:	4770      	bx	lr

0002f2fa <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2f2fa:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2f2fc:	4604      	mov	r4, r0
   2f2fe:	b918      	cbnz	r0, 2f308 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   2f300:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2f302:	3834      	subs	r0, #52	; 0x34
   2f304:	f7ff fe78 	bl	2eff8 <rpmsg_destroy_ept>
	return list->next == list;
   2f308:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2f30a:	4284      	cmp	r4, r0
   2f30c:	d1f9      	bne.n	2f302 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2f30e:	2300      	movs	r3, #0
		rvdev->svq = 0;
   2f310:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2f314:	e7f4      	b.n	2f300 <rpmsg_deinit_vdev+0x6>

0002f316 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2f316:	4770      	bx	lr

0002f318 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2f318:	b140      	cbz	r0, 2f32c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2f31a:	68c3      	ldr	r3, [r0, #12]
   2f31c:	7858      	ldrb	r0, [r3, #1]
   2f31e:	f010 0001 	ands.w	r0, r0, #1
   2f322:	bf1e      	ittt	ne
   2f324:	7818      	ldrbne	r0, [r3, #0]
   2f326:	fab0 f080 	clzne	r0, r0
   2f32a:	0940      	lsrne	r0, r0, #5
}
   2f32c:	4770      	bx	lr

0002f32e <z_early_memset>:
	(void) memset(dst, c, n);
   2f32e:	f7fb b8ff 	b.w	2a530 <memset>

0002f332 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2f332:	f7fb b8f2 	b.w	2a51a <memcpy>

0002f336 <k_heap_init>:
{
   2f336:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2f338:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2f33c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2f340:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2f342:	f7d9 be93 	b.w	906c <sys_heap_init>

0002f346 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2f346:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2f34a:	4313      	orrs	r3, r2
   2f34c:	f013 0303 	ands.w	r3, r3, #3
   2f350:	d10c      	bne.n	2f36c <create_free_list+0x26>
	slab->free_list = NULL;
   2f352:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f354:	68c1      	ldr	r1, [r0, #12]
   2f356:	4299      	cmp	r1, r3
   2f358:	d801      	bhi.n	2f35e <create_free_list+0x18>
	return 0;
   2f35a:	2000      	movs	r0, #0
   2f35c:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2f35e:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2f360:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2f362:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2f364:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2f366:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2f368:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2f36a:	e7f3      	b.n	2f354 <create_free_list+0xe>
		return -EINVAL;
   2f36c:	f06f 0015 	mvn.w	r0, #21
}
   2f370:	4770      	bx	lr

0002f372 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2f372:	f3ef 8005 	mrs	r0, IPSR
}
   2f376:	3800      	subs	r0, #0
   2f378:	bf18      	it	ne
   2f37a:	2001      	movne	r0, #1
   2f37c:	4770      	bx	lr

0002f37e <z_impl_k_thread_name_set>:
}
   2f37e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2f382:	4770      	bx	lr

0002f384 <k_thread_name_get>:
}
   2f384:	2000      	movs	r0, #0
   2f386:	4770      	bx	lr

0002f388 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2f388:	f7f7 bbac 	b.w	26ae4 <z_sched_start>

0002f38c <z_pm_save_idle_exit>:
{
   2f38c:	b508      	push	{r3, lr}
	pm_system_resume();
   2f38e:	f7dd f93d 	bl	c60c <pm_system_resume>
}
   2f392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2f396:	f7fe bfcf 	b.w	2e338 <sys_clock_idle_exit>

0002f39a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2f39a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f39e:	428b      	cmp	r3, r1
   2f3a0:	d001      	beq.n	2f3a6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2f3a2:	f7f7 be19 	b.w	26fd8 <z_set_prio>
}
   2f3a6:	2000      	movs	r0, #0
   2f3a8:	4770      	bx	lr

0002f3aa <z_impl_k_mutex_init>:
{
   2f3aa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2f3ac:	2000      	movs	r0, #0
   2f3ae:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2f3b2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2f3b6:	4770      	bx	lr

0002f3b8 <z_queue_node_peek>:
{
   2f3b8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2f3ba:	4604      	mov	r4, r0
   2f3bc:	b130      	cbz	r0, 2f3cc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f3be:	6802      	ldr	r2, [r0, #0]
   2f3c0:	0793      	lsls	r3, r2, #30
   2f3c2:	d003      	beq.n	2f3cc <z_queue_node_peek+0x14>
		ret = anode->data;
   2f3c4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2f3c6:	b109      	cbz	r1, 2f3cc <z_queue_node_peek+0x14>
			k_free(anode);
   2f3c8:	f000 f9bc 	bl	2f744 <k_free>
}
   2f3cc:	4620      	mov	r0, r4
   2f3ce:	bd10      	pop	{r4, pc}

0002f3d0 <z_impl_k_queue_init>:
	list->head = NULL;
   2f3d0:	2300      	movs	r3, #0
	list->tail = NULL;
   2f3d2:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2f3d6:	6083      	str	r3, [r0, #8]
   2f3d8:	f100 030c 	add.w	r3, r0, #12
   2f3dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2f3e0:	f100 0314 	add.w	r3, r0, #20
   2f3e4:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2f3e8:	4770      	bx	lr

0002f3ea <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2f3ea:	2301      	movs	r3, #1
{
   2f3ec:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2f3ee:	9300      	str	r3, [sp, #0]
   2f3f0:	2300      	movs	r3, #0
{
   2f3f2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2f3f4:	4619      	mov	r1, r3
   2f3f6:	f7f6 fb8f 	bl	25b18 <queue_insert>
}
   2f3fa:	b003      	add	sp, #12
   2f3fc:	f85d fb04 	ldr.w	pc, [sp], #4

0002f400 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2f400:	2300      	movs	r3, #0
{
   2f402:	b507      	push	{r0, r1, r2, lr}
   2f404:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2f406:	9300      	str	r3, [sp, #0]
   2f408:	4619      	mov	r1, r3
   2f40a:	f7f6 fb85 	bl	25b18 <queue_insert>
}
   2f40e:	b003      	add	sp, #12
   2f410:	f85d fb04 	ldr.w	pc, [sp], #4

0002f414 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2f414:	b15a      	cbz	r2, 2f42e <z_impl_k_sem_init+0x1a>
   2f416:	428a      	cmp	r2, r1
   2f418:	d309      	bcc.n	2f42e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2f41a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2f41e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2f422:	e9c0 0000 	strd	r0, r0, [r0]
   2f426:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2f42a:	2000      	movs	r0, #0
   2f42c:	4770      	bx	lr
		return -EINVAL;
   2f42e:	f06f 0015 	mvn.w	r0, #21
}
   2f432:	4770      	bx	lr

0002f434 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2f434:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2f436:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2f438:	408b      	lsls	r3, r1
   2f43a:	ea22 0303 	bic.w	r3, r2, r3
   2f43e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2f440:	fa22 f001 	lsr.w	r0, r2, r1
}
   2f444:	f000 0001 	and.w	r0, r0, #1
   2f448:	4770      	bx	lr

0002f44a <unschedule_locked>:
{
   2f44a:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f44c:	2103      	movs	r1, #3
{
   2f44e:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2f450:	300c      	adds	r0, #12
   2f452:	f7ff ffef 	bl	2f434 <flag_test_and_clear>
   2f456:	4604      	mov	r4, r0
   2f458:	b118      	cbz	r0, 2f462 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2f45a:	f105 0010 	add.w	r0, r5, #16
   2f45e:	f7f8 fb15 	bl	27a8c <z_abort_timeout>
}
   2f462:	4620      	mov	r0, r4
   2f464:	bd38      	pop	{r3, r4, r5, pc}

0002f466 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2f466:	b120      	cbz	r0, 2f472 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2f468:	2200      	movs	r2, #0
   2f46a:	3090      	adds	r0, #144	; 0x90
   2f46c:	4611      	mov	r1, r2
   2f46e:	f7f8 b977 	b.w	27760 <z_sched_wake>
}
   2f472:	4770      	bx	lr

0002f474 <cancel_async_locked>:
{
   2f474:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2f476:	68c3      	ldr	r3, [r0, #12]
{
   2f478:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2f47a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2f47e:	079b      	lsls	r3, r3, #30
   2f480:	d416      	bmi.n	2f4b0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2f482:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2f484:	2102      	movs	r1, #2
   2f486:	300c      	adds	r0, #12
   2f488:	f7ff ffd4 	bl	2f434 <flag_test_and_clear>
   2f48c:	b180      	cbz	r0, 2f4b0 <cancel_async_locked+0x3c>
	return list->head;
   2f48e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f492:	b16a      	cbz	r2, 2f4b0 <cancel_async_locked+0x3c>
   2f494:	4294      	cmp	r4, r2
   2f496:	d11d      	bne.n	2f4d4 <cancel_async_locked+0x60>
	return node->next;
   2f498:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f49a:	b99e      	cbnz	r6, 2f4c4 <cancel_async_locked+0x50>
   2f49c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2f4a0:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2f4a4:	429c      	cmp	r4, r3
   2f4a6:	d101      	bne.n	2f4ac <cancel_async_locked+0x38>
	list->tail = node;
   2f4a8:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2f4ac:	2300      	movs	r3, #0
   2f4ae:	6023      	str	r3, [r4, #0]
	return *flagp;
   2f4b0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2f4b2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2f4b6:	bf1e      	ittt	ne
   2f4b8:	f043 0302 	orrne.w	r3, r3, #2
   2f4bc:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2f4be:	f040 0002 	orrne.w	r0, r0, #2
}
   2f4c2:	bd70      	pop	{r4, r5, r6, pc}
   2f4c4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f4c6:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   2f4ca:	4294      	cmp	r4, r2
	list->tail = node;
   2f4cc:	bf08      	it	eq
   2f4ce:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   2f4d2:	e7eb      	b.n	2f4ac <cancel_async_locked+0x38>
	return node->next;
   2f4d4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f4d6:	6812      	ldr	r2, [r2, #0]
   2f4d8:	e7db      	b.n	2f492 <cancel_async_locked+0x1e>

0002f4da <k_work_submit_to_queue>:
{
   2f4da:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2f4dc:	f7f6 feaa 	bl	26234 <z_work_submit_to_queue>
	if (ret > 0) {
   2f4e0:	1e04      	subs	r4, r0, #0
   2f4e2:	dd09      	ble.n	2f4f8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2f4e4:	f04f 0320 	mov.w	r3, #32
   2f4e8:	f3ef 8011 	mrs	r0, BASEPRI
   2f4ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2f4f0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f4f4:	f000 f80d 	bl	2f512 <z_reschedule_irqlock>
}
   2f4f8:	4620      	mov	r0, r4
   2f4fa:	bd10      	pop	{r4, pc}

0002f4fc <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2f4fc:	f7f6 be66 	b.w	261cc <k_work_busy_get>

0002f500 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2f500:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2f504:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2f508:	4283      	cmp	r3, r0
		return b2 - b1;
   2f50a:	bf14      	ite	ne
   2f50c:	1ac0      	subne	r0, r0, r3
	return 0;
   2f50e:	2000      	moveq	r0, #0
}
   2f510:	4770      	bx	lr

0002f512 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f512:	4603      	mov	r3, r0
   2f514:	b920      	cbnz	r0, 2f520 <z_reschedule_irqlock+0xe>
   2f516:	f3ef 8205 	mrs	r2, IPSR
   2f51a:	b90a      	cbnz	r2, 2f520 <z_reschedule_irqlock+0xe>
   2f51c:	f7dd bc16 	b.w	cd4c <arch_swap>
	__asm__ volatile(
   2f520:	f383 8811 	msr	BASEPRI, r3
   2f524:	f3bf 8f6f 	isb	sy
}
   2f528:	4770      	bx	lr

0002f52a <z_reschedule_unlocked>:
	__asm__ volatile(
   2f52a:	f04f 0320 	mov.w	r3, #32
   2f52e:	f3ef 8011 	mrs	r0, BASEPRI
   2f532:	f383 8812 	msr	BASEPRI_MAX, r3
   2f536:	f3bf 8f6f 	isb	sy
   2f53a:	f7ff bfea 	b.w	2f512 <z_reschedule_irqlock>

0002f53e <z_unpend_all>:
{
   2f53e:	b538      	push	{r3, r4, r5, lr}
   2f540:	4605      	mov	r5, r0
	int need_sched = 0;
   2f542:	2000      	movs	r0, #0
	return list->head == list;
   2f544:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f546:	42a5      	cmp	r5, r4
   2f548:	d000      	beq.n	2f54c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f54a:	b904      	cbnz	r4, 2f54e <z_unpend_all+0x10>
}
   2f54c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2f54e:	4620      	mov	r0, r4
   2f550:	f7f7 fe32 	bl	271b8 <z_unpend_thread>
		z_ready_thread(thread);
   2f554:	4620      	mov	r0, r4
   2f556:	f7f7 fa29 	bl	269ac <z_ready_thread>
		need_sched = 1;
   2f55a:	2001      	movs	r0, #1
   2f55c:	e7f2      	b.n	2f544 <z_unpend_all+0x6>

0002f55e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2f55e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2f560:	f7f8 fc06 	bl	27d70 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2f564:	bd08      	pop	{r3, pc}

0002f566 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2f566:	f7f8 bc03 	b.w	27d70 <sys_clock_tick_get>

0002f56a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2f56a:	b108      	cbz	r0, 2f570 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2f56c:	f7da be5a 	b.w	a224 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2f570:	4770      	bx	lr

0002f572 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f572:	f1b1 3fff 	cmp.w	r1, #4294967295
   2f576:	bf08      	it	eq
   2f578:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2f57c:	b538      	push	{r3, r4, r5, lr}
   2f57e:	460c      	mov	r4, r1
   2f580:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f582:	d014      	beq.n	2f5ae <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f584:	4308      	orrs	r0, r1
   2f586:	d103      	bne.n	2f590 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2f588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2f58c:	f7f8 bbf0 	b.w	27d70 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2f590:	f06f 0001 	mvn.w	r0, #1
   2f594:	f04f 33ff 	mov.w	r3, #4294967295
   2f598:	1b40      	subs	r0, r0, r5
   2f59a:	eb63 0101 	sbc.w	r1, r3, r1
   2f59e:	2900      	cmp	r1, #0
   2f5a0:	da04      	bge.n	2f5ac <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2f5a2:	f7f8 fbe5 	bl	27d70 <sys_clock_tick_get>
   2f5a6:	1940      	adds	r0, r0, r5
   2f5a8:	eb41 0104 	adc.w	r1, r1, r4
}
   2f5ac:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2f5ae:	f04f 30ff 	mov.w	r0, #4294967295
   2f5b2:	4601      	mov	r1, r0
   2f5b4:	e7fa      	b.n	2f5ac <sys_clock_timeout_end_calc+0x3a>

0002f5b6 <k_timer_init>:
	timer->status = 0U;
   2f5b6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2f5b8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2f5bc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2f5c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2f5c4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2f5c8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2f5ca:	6343      	str	r3, [r0, #52]	; 0x34
}
   2f5cc:	4770      	bx	lr

0002f5ce <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2f5ce:	b510      	push	{r4, lr}
   2f5d0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2f5d2:	f7f8 fa5b 	bl	27a8c <z_abort_timeout>

	if (inactive) {
   2f5d6:	b9b0      	cbnz	r0, 2f606 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2f5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f5da:	b10b      	cbz	r3, 2f5e0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2f5dc:	4620      	mov	r0, r4
   2f5de:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2f5e0:	f104 0018 	add.w	r0, r4, #24
   2f5e4:	f7f7 fe66 	bl	272b4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2f5e8:	b168      	cbz	r0, 2f606 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2f5ea:	f7f7 f9df 	bl	269ac <z_ready_thread>
   2f5ee:	f04f 0320 	mov.w	r3, #32
   2f5f2:	f3ef 8011 	mrs	r0, BASEPRI
   2f5f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f5fa:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2f5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f602:	f7ff bf86 	b.w	2f512 <z_reschedule_irqlock>
   2f606:	bd10      	pop	{r4, pc}

0002f608 <add_event>:
{
   2f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f60a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2f60c:	e9d0 1300 	ldrd	r1, r3, [r0]
   2f610:	4288      	cmp	r0, r1
   2f612:	4604      	mov	r4, r0
   2f614:	d105      	bne.n	2f622 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2f616:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2f618:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2f61c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2f61e:	6065      	str	r5, [r4, #4]
   2f620:	e01d      	b.n	2f65e <add_event+0x56>
	if ((pending == NULL) ||
   2f622:	2b00      	cmp	r3, #0
   2f624:	d0f7      	beq.n	2f616 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f626:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f628:	b100      	cbz	r0, 2f62c <add_event+0x24>
   2f62a:	3860      	subs	r0, #96	; 0x60
   2f62c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2f630:	4639      	mov	r1, r7
   2f632:	f7ff ff65 	bl	2f500 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2f636:	2800      	cmp	r0, #0
   2f638:	dced      	bgt.n	2f616 <add_event+0xe>
	return list->head == list;
   2f63a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f63c:	42b4      	cmp	r4, r6
   2f63e:	d0ea      	beq.n	2f616 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2f640:	2e00      	cmp	r6, #0
   2f642:	d0e8      	beq.n	2f616 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2f644:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f646:	b101      	cbz	r1, 2f64a <add_event+0x42>
   2f648:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2f64a:	4638      	mov	r0, r7
   2f64c:	f7ff ff58 	bl	2f500 <z_sched_prio_cmp>
   2f650:	2800      	cmp	r0, #0
   2f652:	dd05      	ble.n	2f660 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2f654:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2f656:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2f65a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2f65c:	6075      	str	r5, [r6, #4]
}
   2f65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2f660:	6863      	ldr	r3, [r4, #4]
   2f662:	429e      	cmp	r6, r3
   2f664:	d0d7      	beq.n	2f616 <add_event+0xe>
   2f666:	6836      	ldr	r6, [r6, #0]
   2f668:	e7ea      	b.n	2f640 <add_event+0x38>

0002f66a <signal_poll_event>:
{
   2f66a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2f66e:	6884      	ldr	r4, [r0, #8]
{
   2f670:	4605      	mov	r5, r0
   2f672:	460e      	mov	r6, r1
	if (poller != NULL) {
   2f674:	b144      	cbz	r4, 2f688 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2f676:	7863      	ldrb	r3, [r4, #1]
   2f678:	2b01      	cmp	r3, #1
   2f67a:	d12e      	bne.n	2f6da <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2f67c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2f680:	f013 0302 	ands.w	r3, r3, #2
   2f684:	d10a      	bne.n	2f69c <signal_poll_event+0x32>
		poller->is_polling = false;
   2f686:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2f688:	2000      	movs	r0, #0
	event->state |= state;
   2f68a:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2f68c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2f68e:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2f692:	4316      	orrs	r6, r2
   2f694:	f366 3394 	bfi	r3, r6, #14, #7
   2f698:	60eb      	str	r3, [r5, #12]
	return retcode;
   2f69a:	e03e      	b.n	2f71a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2f69c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2f6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   2f6a4:	bf08      	it	eq
   2f6a6:	f112 0f02 	cmneq.w	r2, #2
   2f6aa:	d032      	beq.n	2f712 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2f6ac:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2f6b0:	4640      	mov	r0, r8
   2f6b2:	f7f7 fd81 	bl	271b8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2f6b6:	2e08      	cmp	r6, #8
   2f6b8:	bf0c      	ite	eq
   2f6ba:	f06f 0303 	mvneq.w	r3, #3
   2f6be:	2300      	movne	r3, #0
   2f6c0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2f6c2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2f6c6:	06db      	lsls	r3, r3, #27
   2f6c8:	d109      	bne.n	2f6de <signal_poll_event+0x74>
   2f6ca:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2f6ce:	b937      	cbnz	r7, 2f6de <signal_poll_event+0x74>
	z_ready_thread(thread);
   2f6d0:	4640      	mov	r0, r8
   2f6d2:	f7f7 f96b 	bl	269ac <z_ready_thread>
		poller->is_polling = false;
   2f6d6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2f6d8:	e7d6      	b.n	2f688 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2f6da:	2b02      	cmp	r3, #2
   2f6dc:	d001      	beq.n	2f6e2 <signal_poll_event+0x78>
		poller->is_polling = false;
   2f6de:	2300      	movs	r3, #0
   2f6e0:	e7d1      	b.n	2f686 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2f6e2:	7823      	ldrb	r3, [r4, #0]
   2f6e4:	2b00      	cmp	r3, #0
   2f6e6:	d0cf      	beq.n	2f688 <signal_poll_event+0x1e>
   2f6e8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2f6ec:	2f00      	cmp	r7, #0
   2f6ee:	d0f2      	beq.n	2f6d6 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2f6f0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2f6f4:	f1a4 0914 	sub.w	r9, r4, #20
   2f6f8:	f104 0014 	add.w	r0, r4, #20
   2f6fc:	f7f8 f9c6 	bl	27a8c <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2f700:	4649      	mov	r1, r9
   2f702:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2f704:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2f708:	f7f6 fd94 	bl	26234 <z_work_submit_to_queue>
		poller->is_polling = false;
   2f70c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2f710:	e7ba      	b.n	2f688 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2f712:	2300      	movs	r3, #0
		return -EAGAIN;
   2f714:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2f718:	7023      	strb	r3, [r4, #0]
}
   2f71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002f71e <z_handle_obj_poll_events>:
{
   2f71e:	4603      	mov	r3, r0
	return list->head == list;
   2f720:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2f722:	4283      	cmp	r3, r0
   2f724:	d008      	beq.n	2f738 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2f726:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2f72a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2f72c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f72e:	2300      	movs	r3, #0
	node->prev = NULL;
   2f730:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2f734:	f7ff bf99 	b.w	2f66a <signal_poll_event>
}
   2f738:	4770      	bx	lr

0002f73a <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2f73a:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2f73c:	e9c0 0000 	strd	r0, r0, [r0]
   2f740:	6083      	str	r3, [r0, #8]
}
   2f742:	4770      	bx	lr

0002f744 <k_free>:
	if (ptr != NULL) {
   2f744:	b120      	cbz	r0, 2f750 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2f746:	1f01      	subs	r1, r0, #4
   2f748:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2f74c:	f7f5 be66 	b.w	2541c <k_heap_free>
}
   2f750:	4770      	bx	lr

0002f752 <k_malloc>:
{
   2f752:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2f754:	2004      	movs	r0, #4
   2f756:	f7f8 bed5 	b.w	28504 <k_aligned_alloc>

0002f75a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f75a:	4770      	bx	lr
