
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	f8 a4 00 20 c9 a0 00 00 f5 bf 01 00 9d a0 00 00     ... ............
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	9d a0 00 00 9d a0 00 00 9d a0 00 00 9d a0 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	65 9b 00 00 9d a0 00 00 00 00 00 00 cd 9a 00 00     e...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	9d a0 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
			switch (*fmt) {
  a0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
  b0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
  c0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
  d0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
  e0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
  f0:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
				align = VA_STACK_ALIGN(void *);
 100:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
			switch (*fmt) {
 110:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
 120:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 130:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
		if (is_str_arg) {
 140:	09 9c 00 00 09 9c 00 00 09 9c 00 00 09 9c 00 00     ................
			int v = va_arg(ap, int);

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
 150:	09 9c 00 00                                         ....

Disassembly of section text:

00000158 <sym_100189>:
				parsing = false;
     158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				continue;
     15c:	ed2d 8b06 	vpush	{d8-d10}
				if (fmt[-1] == 'l') {
     160:	b08b      	sub	sp, #44	; 0x2c
     162:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
					if (fmt[-2] == 'l') {
     166:	468b      	mov	fp, r1
     168:	9401      	str	r4, [sp, #4]
     16a:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
     16e:	461e      	mov	r6, r3
     170:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
						align = VA_STACK_ALIGN(long long);
     174:	9402      	str	r4, [sp, #8]
				size = sizeof(void *);
     176:	b32a      	cbz	r2, 1c4 <CONFIG_SRAM_SIZE+0x4>
     178:	2801      	cmp	r0, #1
					v.ld = va_arg(ap, long double);
     17a:	4614      	mov	r4, r2
     17c:	d025      	beq.n	1ca <CONFIG_SRAM_SIZE+0xa>
     17e:	b128      	cbz	r0, 18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     180:	2000      	movs	r0, #0
				buf = (void *) ROUND_UP(buf, align);
     182:	b00b      	add	sp, #44	; 0x2c
     184:	ecbd 8b06 	vpop	{d8-d10}
					v.ld = va_arg(ap, long double);
     188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (buf0 != NULL) {
     18c:	2d00      	cmp	r5, #0
					if (BUF_OFFSET + size > len) {
     18e:	f000 8295 	beq.w	6bc <CONFIG_BT_COMPANY_ID+0xcb>
     192:	ee07 5a10 	vmov	s14, r5
     196:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
						*(long double *)buf = v.ld;
     19a:	eef8 5a47 	vcvt.f32.u32	s11, s14
				parsing = false;
     19e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			switch (*fmt) {
     1a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
     1a6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
			if (*++fmt == '\0') {
     1aa:	eddf 6a9f 	vldr	s13, [pc, #636]	; 428 <CONFIG_BT_HCI_TX_STACK_SIZE+0x28>
     1ae:	ee67 7a06 	vmul.f32	s15, s14, s12
			if (!parsing) {
     1b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
     1b6:	edcb 7a00 	vstr	s15, [fp]
				if (*fmt == '%') {
     1ba:	b00b      	add	sp, #44	; 0x2c
     1bc:	ecbd 8b06 	vpop	{d8-d10}
					parsing = true;
     1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					arg_idx++;
     1c4:	2801      	cmp	r0, #1
     1c6:	ac06      	add	r4, sp, #24
				align = VA_STACK_ALIGN(size_t);
     1c8:	d1d9      	bne.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     1ca:	4d98      	ldr	r5, [pc, #608]	; (42c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>)
     1cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
			switch (*fmt) {
     1d0:	2100      	movs	r1, #0
     1d2:	4628      	mov	r0, r5
				parsing = false;
     1d4:	f01f f91d 	bl	1f412 <memset>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
     1dc:	2100      	movs	r1, #0
			long long v = va_arg(ap, long long);
     1de:	4894      	ldr	r0, [pc, #592]	; (430 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>)
     1e0:	f01f f917 	bl	1f412 <memset>
     1e4:	4633      	mov	r3, r6
     1e6:	462a      	mov	r2, r5
     1e8:	462e      	mov	r6, r5

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ea:	f505 7720 	add.w	r7, r5, #640	; 0x280
				}
			}
			buf += sizeof(long long);
     1ee:	4619      	mov	r1, r3
     1f0:	ed93 6af0 	vldr	s12, [r3, #960]	; 0x3c0
		if (is_str_arg) {
     1f4:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
		} else if (size == sizeof(int)) {
     1f8:	edd1 6aa0 	vldr	s13, [r1, #640]	; 0x280
			int v = va_arg(ap, int);
     1fc:	ed91 7a00 	vldr	s14, [r1]
		} else if (size == sizeof(long long)) {
     200:	ee67 7ac6 	vnmul.f32	s15, s15, s12
			long long v = va_arg(ap, long long);
     204:	eee6 7a87 	vfma.f32	s15, s13, s14
     208:	edc2 7a00 	vstr	s15, [r2]
     20c:	edd3 7a00 	vldr	s15, [r3]
			if (buf0 != NULL) {
     210:	ed93 6af0 	vldr	s12, [r3, #960]	; 0x3c0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     214:	edd3 6aa0 	vldr	s13, [r3, #640]	; 0x280
			s = va_arg(ap, char *);
     218:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
     21c:	ee67 7a86 	vmul.f32	s15, s15, s12
			if (is_ro && !do_ro) {
     220:	eee6 7a87 	vfma.f32	s15, s13, s14
     224:	3208      	adds	r2, #8
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     226:	4297      	cmp	r7, r2
     228:	f103 0304 	add.w	r3, r3, #4
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     22c:	ed42 7a01 	vstr	s15, [r2, #-4]
     230:	d1dd      	bne.n	1ee <CONFIG_SRAM_SIZE+0x2e>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     232:	4b7f      	ldr	r3, [pc, #508]	; (430 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>)
     234:	ed9f 8a7f 	vldr	s16, [pc, #508]	; 434 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
					__ASSERT(false, "String with too many arguments");
     238:	469a      	mov	sl, r3
     23a:	f503 78a0 	add.w	r8, r3, #320	; 0x140
     23e:	9303      	str	r3, [sp, #12]
     240:	4633      	mov	r3, r6
     242:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 42c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     246:	4626      	mov	r6, r4
					__ASSERT(false, "str_ptr_pos[] too small");
     248:	4654      	mov	r4, sl
     24a:	469a      	mov	sl, r3
     24c:	e006      	b.n	25c <CONFIG_SRAM_SIZE+0x9c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     24e:	ed84 8a00 	vstr	s16, [r4]
				if (buf0 != NULL) {
     252:	3404      	adds	r4, #4
     254:	45a0      	cmp	r8, r4
					str_ptr_pos[s_idx] = s_ptr_idx;
     256:	f109 0908 	add.w	r9, r9, #8
     25a:	d016      	beq.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     25c:	edd9 0a00 	vldr	s1, [r9]
     260:	eef5 0a40 	vcmp.f32	s1, #0.0
					str_ptr_arg[s_idx] = arg_idx;
     264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						s_rw_cnt++;
     268:	ed99 0a01 	vldr	s0, [r9, #4]
     26c:	d104      	bne.n	278 <CONFIG_SRAM_SIZE+0xb8>
     26e:	eeb5 0a40 	vcmp.f32	s0, #0.0
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					__ASSERT(false, "str_ptr_pos[] too small");
     276:	d0ea      	beq.n	24e <CONFIG_SRAM_SIZE+0x8e>
     278:	f01f f87f 	bl	1f37a <atan2f>
     27c:	3404      	adds	r4, #4
     27e:	ed04 0a01 	vstr	s0, [r4, #-4]
     282:	45a0      	cmp	r8, r4
     284:	f109 0908 	add.w	r9, r9, #8
					str_ptr_pos[s_idx] = s_ptr_idx;
     288:	d1e8      	bne.n	25c <CONFIG_SRAM_SIZE+0x9c>
     28a:	4634      	mov	r4, r6
     28c:	eddf 6a69 	vldr	s13, [pc, #420]	; 434 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
					str_ptr_arg[s_idx] = arg_idx;
     290:	4656      	mov	r6, sl
					str_ptr_pos[s_idx] = s_ptr_idx;
     292:	ed9f 6a69 	vldr	s12, [pc, #420]	; 438 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     296:	eddf 5a69 	vldr	s11, [pc, #420]	; 43c <CONFIG_BT_HCI_TX_STACK_SIZE+0x3c>
					str_ptr_arg[s_idx] = arg_idx;
     29a:	f04f 0800 	mov.w	r8, #0
					if (is_ro) {
     29e:	9b03      	ldr	r3, [sp, #12]
     2a0:	4a67      	ldr	r2, [pc, #412]	; (440 <CONFIG_BT_HCI_TX_STACK_SIZE+0x40>)
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a2:	e006      	b.n	2b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x32>
     2a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
     2a8:	edc0 7a00 	vstr	s15, [r0]
						s_ro_cnt++;
     2ac:	4688      	mov	r8, r1
				s_idx++;
     2ae:	429a      	cmp	r2, r3
					if (BUF_OFFSET + size > len) {
     2b0:	d021      	beq.n	2f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x76>
     2b2:	ecb3 7a01 	vldmia	r3!, {s14}
			switch (*fmt) {
     2b6:	eeb4 7a66 	vcmp.f32	s14, s13
					if (BUF_OFFSET + size > len) {
     2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				} else if (is_ro) {
     2be:	d0f6      	beq.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     2c0:	edd3 7a00 	vldr	s15, [r3]
					len += 1;
     2c4:	eef4 7a66 	vcmp.f32	s15, s13
				} else if (rws_pos_en) {
     2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     2cc:	495d      	ldr	r1, [pc, #372]	; (444 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>)
     2ce:	eb01 0088 	add.w	r0, r1, r8, lsl #2
					len += strlen(s) + 1 + 1;
     2d2:	f108 0101 	add.w	r1, r8, #1
     2d6:	d0ea      	beq.n	2ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2e>
     2d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
     2dc:	eef4 7ac6 	vcmpe.f32	s15, s12
     2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     2e4:	d4de      	bmi.n	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     2e6:	eef4 7ae5 	vcmpe.f32	s15, s11
     2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     2ee:	bfa8      	it	ge
     2f0:	ee77 7ae6 	vsubge.f32	s15, s15, s13
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f4:	e7d8      	b.n	2a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x28>
     2f6:	ed9f 8a54 	vldr	s16, [pc, #336]	; 448 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     2fa:	ed96 6a01 	vldr	s12, [r6, #4]
     2fe:	edd6 6a00 	vldr	s13, [r6]
     302:	2201      	movs	r2, #1
     304:	eeb0 5a48 	vmov.f32	s10, s16
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>)
     30a:	edd3 5a03 	vldr	s11, [r3, #12]
		__ASSERT(false, "too many format args");
     30e:	edd3 4a02 	vldr	s9, [r3, #8]
     312:	ee65 7aa6 	vmul.f32	s15, s11, s13
     316:	3310      	adds	r3, #16
     318:	eee4 7ac6 	vfms.f32	s15, s9, s12
     31c:	ee25 7a86 	vmul.f32	s14, s11, s12

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     320:	ed93 6a01 	vldr	s12, [r3, #4]
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	eea4 7aa6 	vfma.f32	s14, s9, s13
     328:	ee25 4a86 	vmul.f32	s8, s11, s12

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     32c:	edd3 6a00 	vldr	s13, [r3]
     330:	ee37 8a88 	vadd.f32	s16, s15, s16

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     334:	ee37 5a05 	vadd.f32	s10, s14, s10
     338:	ee64 7a86 	vmul.f32	s15, s9, s12
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	eeb0 7a44 	vmov.f32	s14, s8
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     340:	eee6 7ae5 	vfms.f32	s15, s13, s11
		for (i = 0; i < s_idx; i++) {
     344:	eea4 7aa6 	vfma.f32	s14, s9, s13
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     348:	3202      	adds	r2, #2
     34a:	2a4f      	cmp	r2, #79	; 0x4f
		for (i = 0; i < s_idx; i++) {
     34c:	ee35 5a07 	vadd.f32	s10, s10, s14
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     350:	ee38 8a27 	vadd.f32	s16, s16, s15
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     354:	d1d9      	bne.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     356:	4b3d      	ldr	r3, [pc, #244]	; (44c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>)
     358:	ed53 6a02 	vldr	s13, [r3, #-8]
     35c:	edd3 7a01 	vldr	s15, [r3, #4]
			*buf++ = str_ptr_arg[i];
     360:	ed53 5a01 	vldr	s11, [r3, #-4]
	for (i = 0; i < s_idx; i++) {
     364:	ed93 6a00 	vldr	s12, [r3]
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     368:	ee26 7aa7 	vmul.f32	s14, s13, s15
		pkg_hdr->desc.rw_str_cnt = 0;
     36c:	ee65 7aa7 	vmul.f32	s15, s11, s15
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	eea6 7a65 	vfms.f32	s14, s12, s11
     374:	eee6 7a26 	vfma.f32	s15, s12, s13
			if (BUF_OFFSET + 1 > len) {
     378:	3308      	adds	r3, #8
     37a:	429f      	cmp	r7, r3
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     37c:	ee38 8a07 	vadd.f32	s16, s16, s14
			if (BUF_OFFSET + 1 > len) {
     380:	ee35 5a27 	vadd.f32	s10, s10, s15
			*buf++ = pos;
     384:	d1e8      	bne.n	358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     386:	ee15 0a10 	vmov	r0, s10
		for (i = 0; i < s_idx; i++) {
     38a:	f004 fb0b 	bl	49a4 <__aeabi_f2d>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     38e:	ec41 0b19 	vmov	d9, r0, r1
     392:	ee18 0a10 	vmov	r0, s16
     396:	f004 fb05 	bl	49a4 <__aeabi_f2d>
		if (rws_pos_en) {
     39a:	eeb0 1a49 	vmov.f32	s2, s18
			*buf++ = str_ptr_arg[i];
     39e:	eef0 1a69 	vmov.f32	s3, s19
     3a2:	ec41 0b10 	vmov	d0, r0, r1
			size = 0;
     3a6:	f01e ffe6 	bl	1f376 <atan2>
		if (BUF_OFFSET + 1 + size > len) {
     3aa:	a31b      	add	r3, pc, #108	; (adr r3, 418 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>)
     3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
     3b0:	ec51 0b10 	vmov	r0, r1, d0
		*buf++ = str_ptr_pos[i];
     3b4:	f004 fb4e 	bl	4a54 <__aeabi_dmul>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     3b8:	a319      	add	r3, pc, #100	; (adr r3, 420 <CONFIG_BT_HCI_TX_STACK_SIZE+0x20>)
     3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
     3be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
     3c2:	f004 fc71 	bl	4ca8 <__aeabi_ddiv>
		buf += size;
     3c6:	f004 fddf 	bl	4f88 <__aeabi_d2f>
	for (i = 0; i < s_idx; i++) {
     3ca:	ee07 0a90 	vmov	s15, r0
     3ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	bf48      	it	mi
     3d8:	eddf 7a1b 	vldrmi	s15, [pc, #108]	; 448 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     3dc:	ea5f 0358 	movs.w	r3, r8, lsr #1
			size = strlen(s) + 1;
     3e0:	edcb 7a01 	vstr	s15, [fp, #4]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e4:	9303      	str	r3, [sp, #12]
			size = strlen(s) + 1;
     3e6:	d04d      	beq.n	484 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     3e8:	4618      	mov	r0, r3
     3ea:	46a1      	mov	r9, r4
     3ec:	4540      	cmp	r0, r8
		return -EFAULT;
     3ee:	d246      	bcs.n	47e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     3f0:	f04f 0c00 	mov.w	ip, #0
     3f4:	ebc0 7680 	rsb	r6, r0, r0, lsl #30
     3f8:	4c12      	ldr	r4, [pc, #72]	; (444 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>)
     3fa:	00b6      	lsls	r6, r6, #2
     3fc:	eba8 0e00 	sub.w	lr, r8, r0
     400:	ea4f 0a80 	mov.w	sl, r0, lsl #2
     404:	f1bc 0f00 	cmp.w	ip, #0
     408:	4661      	mov	r1, ip
     40a:	db32      	blt.n	472 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     40c:	4622      	mov	r2, r4
     40e:	eb0a 0304 	add.w	r3, sl, r4
     412:	e025      	b.n	460 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     414:	f3af 8000 	nop.w
     418:	00000000 	.word	0x00000000
     41c:	41b1e1a3 	.word	0x41b1e1a3
     420:	60000000 	.word	0x60000000
     424:	4167f7ec 	.word	0x4167f7ec
     428:	3e99999a 	.word	0x3e99999a
     42c:	20003efc 	.word	0x20003efc
     430:	20004efc 	.word	0x20004efc
     434:	40c90fdb 	.word	0x40c90fdb
     438:	c0490fdb 	.word	0xc0490fdb
     43c:	40490fdb 	.word	0x40490fdb
     440:	20005038 	.word	0x20005038
     444:	20003dc0 	.word	0x20003dc0
     448:	00000000 	.word	0x00000000
     44c:	20004174 	.word	0x20004174
     450:	1a09      	subs	r1, r1, r0
     452:	ed82 7a00 	vstr	s14, [r2]
     456:	edc3 7a00 	vstr	s15, [r3]
     45a:	4432      	add	r2, r6
     45c:	4433      	add	r3, r6
     45e:	d408      	bmi.n	472 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     460:	ed93 7a00 	vldr	s14, [r3]
     464:	edd2 7a00 	vldr	s15, [r2]
     468:	eeb4 7ae7 	vcmpe.f32	s14, s15
     46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     470:	dbee      	blt.n	450 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     472:	f10c 0c01 	add.w	ip, ip, #1
     476:	45e6      	cmp	lr, ip
     478:	f104 0404 	add.w	r4, r4, #4
     47c:	d1c2      	bne.n	404 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     47e:	0840      	lsrs	r0, r0, #1
     480:	d1b4      	bne.n	3ec <CONFIG_DM_INITIATOR_DELAY_US+0x4>
     482:	464c      	mov	r4, r9
     484:	4bb8      	ldr	r3, [pc, #736]	; (768 <__data_size+0x5e>)
     486:	9a03      	ldr	r2, [sp, #12]
     488:	f018 0f01 	tst.w	r8, #1
     48c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     490:	edd3 7a00 	vldr	s15, [r3]
     494:	d107      	bne.n	4a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa6>
     496:	ed53 6a01 	vldr	s13, [r3, #-4]
     49a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
     4a2:	ee67 7a87 	vmul.f32	s15, s15, s14
     4a6:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 76c <__data_size+0x62>
     4aa:	eddf 6ab1 	vldr	s13, [pc, #708]	; 770 <__data_size+0x66>
     4ae:	ee27 7a67 	vnmul.f32	s14, s14, s15
     4b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
     4b6:	ed9d 7a01 	vldr	s14, [sp, #4]
     4ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     4be:	eeb8 8a47 	vcvt.f32.u32	s16, s14
     4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4c6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 774 <__data_size+0x6a>
     4ca:	bf48      	it	mi
     4cc:	eddf 7aaa 	vldrmi	s15, [pc, #680]	; 778 <__data_size+0x6e>
     4d0:	ee38 8a47 	vsub.f32	s16, s16, s14
     4d4:	eddf 0aa9 	vldr	s1, [pc, #676]	; 77c <__data_size+0x72>
     4d8:	edc4 7a00 	vstr	s15, [r4]
     4dc:	eec8 0a20 	vdiv.f32	s1, s16, s1
     4e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
     4e4:	f018 ffb2 	bl	1944c <powf>
     4e8:	eddf 0aa5 	vldr	s1, [pc, #660]	; 780 <__data_size+0x76>
     4ec:	eef0 7a40 	vmov.f32	s15, s0
     4f0:	eec8 0a20 	vdiv.f32	s1, s16, s1
     4f4:	edc4 7a03 	vstr	s15, [r4, #12]
     4f8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
     4fc:	f018 ffa6 	bl	1944c <powf>
     500:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
     504:	eef0 7a40 	vmov.f32	s15, s0
     508:	eec8 0a20 	vdiv.f32	s1, s16, s1
     50c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
     510:	edc4 7a02 	vstr	s15, [r4, #8]
     514:	f018 ff9a 	bl	1944c <powf>
     518:	9b02      	ldr	r3, [sp, #8]
     51a:	ed8b 0a02 	vstr	s0, [fp, #8]
     51e:	b16b      	cbz	r3, 53c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x28>
     520:	e9dd 121e 	ldrd	r1, r2, [sp, #120]	; 0x78
     524:	4b97      	ldr	r3, [pc, #604]	; (784 <__data_size+0x7a>)
     526:	f851 0b04 	ldr.w	r0, [r1], #4
     52a:	3308      	adds	r3, #8
     52c:	f843 0c08 	str.w	r0, [r3, #-8]
     530:	f852 0b04 	ldr.w	r0, [r2], #4
     534:	429f      	cmp	r7, r3
     536:	f843 0c04 	str.w	r0, [r3, #-4]
     53a:	d1f4      	bne.n	526 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x12>
     53c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 78c <__data_size+0x82>
     540:	2301      	movs	r3, #1
     542:	f5a9 6100 	sub.w	r1, r9, #2048	; 0x800
     546:	460f      	mov	r7, r1
     548:	2200      	movs	r2, #0
     54a:	488f      	ldr	r0, [pc, #572]	; (788 <__data_size+0x7e>)
     54c:	f01d fd54 	bl	1dff8 <arm_cfft_f32>
     550:	463e      	mov	r6, r7
     552:	46b8      	mov	r8, r7
     554:	f04f 0a00 	mov.w	sl, #0
     558:	e008      	b.n	56c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x58>
     55a:	f019 f80f 	bl	1957c <sqrtf>
     55e:	3704      	adds	r7, #4
     560:	ed07 0a01 	vstr	s0, [r7, #-4]
     564:	45b9      	cmp	r9, r7
     566:	f108 0808 	add.w	r8, r8, #8
     56a:	d013      	beq.n	594 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x80>
     56c:	ed98 0a01 	vldr	s0, [r8, #4]
     570:	edd8 7a00 	vldr	s15, [r8]
     574:	ee20 0a00 	vmul.f32	s0, s0, s0
     578:	eea7 0aa7 	vfma.f32	s0, s15, s15
     57c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
     580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     584:	dae9      	bge.n	55a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x46>
     586:	f8c7 a000 	str.w	sl, [r7]
     58a:	3704      	adds	r7, #4
     58c:	45b9      	cmp	r9, r7
     58e:	f108 0808 	add.w	r8, r8, #8
     592:	d1eb      	bne.n	56c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x58>
     594:	4b7d      	ldr	r3, [pc, #500]	; (78c <__data_size+0x82>)
     596:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
     59a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
     59e:	682a      	ldr	r2, [r5, #0]
     5a0:	f845 1b04 	str.w	r1, [r5], #4
     5a4:	42a8      	cmp	r0, r5
     5a6:	601a      	str	r2, [r3, #0]
     5a8:	d1f7      	bne.n	59a <CONFIG_BT_LONG_WQ_STACK_SIZE+0x86>
     5aa:	f44f 7100 	mov.w	r1, #512	; 0x200
     5ae:	ab04      	add	r3, sp, #16
     5b0:	4874      	ldr	r0, [pc, #464]	; (784 <__data_size+0x7a>)
     5b2:	aa05      	add	r2, sp, #20
     5b4:	f01d fa40 	bl	1da38 <arm_max_f32>
     5b8:	9904      	ldr	r1, [sp, #16]
     5ba:	4b75      	ldr	r3, [pc, #468]	; (790 <__data_size+0x86>)
     5bc:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
     5c0:	f000 8161 	beq.w	886 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x86>
     5c4:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
     5c8:	ed93 8a00 	vldr	s16, [r3]
     5cc:	2000      	movs	r0, #0
     5ce:	eddd 6a05 	vldr	s13, [sp, #20]
     5d2:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
     5d6:	f240 12ff 	movw	r2, #511	; 0x1ff
     5da:	e006      	b.n	5ea <CONFIG_BT_LONG_WQ_STACK_SIZE+0xd6>
     5dc:	4291      	cmp	r1, r2
     5de:	d078      	beq.n	6d2 <CONFIG_BT_COMPANY_ID+0xe1>
     5e0:	2001      	movs	r0, #1
     5e2:	4615      	mov	r5, r2
     5e4:	eeb0 8a67 	vmov.f32	s16, s15
     5e8:	461a      	mov	r2, r3
     5ea:	eb06 0382 	add.w	r3, r6, r2, lsl #2
     5ee:	edd3 7a00 	vldr	s15, [r3]
     5f2:	eef4 7ac8 	vcmpe.f32	s15, s16
     5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5fa:	f102 0301 	add.w	r3, r2, #1
     5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
     602:	d5eb      	bpl.n	5dc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc8>
     604:	ee28 7a06 	vmul.f32	s14, s16, s12
     608:	eeb4 7ae6 	vcmpe.f32	s14, s13
     60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     610:	f102 0301 	add.w	r3, r2, #1
     614:	f3c3 0308 	ubfx	r3, r3, #0, #9
     618:	dd59      	ble.n	6ce <CONFIG_BT_COMPANY_ID+0xdd>
     61a:	1c53      	adds	r3, r2, #1
     61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
     620:	2800      	cmp	r0, #0
     622:	d054      	beq.n	6ce <CONFIG_BT_COMPANY_ID+0xdd>
     624:	f5b5 7fff 	cmp.w	r5, #510	; 0x1fe
     628:	462f      	mov	r7, r5
     62a:	f0c0 80bb 	bcc.w	7a4 <__data_size+0x9a>
     62e:	1c6b      	adds	r3, r5, #1
     630:	f3c3 0308 	ubfx	r3, r3, #0, #9
     634:	ee07 3a90 	vmov	s15, r3
     638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     63c:	2f00      	cmp	r7, #0
     63e:	d14f      	bne.n	6e0 <CONFIG_BT_COMPANY_ID+0xef>
     640:	4a54      	ldr	r2, [pc, #336]	; (794 <__data_size+0x8a>)
     642:	ed92 6a00 	vldr	s12, [r2]
     646:	eeb4 8ac6 	vcmpe.f32	s16, s12
     64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     64e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
     652:	edd5 6a01 	vldr	s13, [r5, #4]
     656:	db40      	blt.n	6da <CONFIG_BT_COMPANY_ID+0xe9>
     658:	eef4 6ac8 	vcmpe.f32	s13, s16
     65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     660:	d83b      	bhi.n	6da <CONFIG_BT_COMPANY_ID+0xe9>
     662:	ee36 7a26 	vadd.f32	s14, s12, s13
     666:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
     66a:	ee37 7a07 	vadd.f32	s14, s14, s14
     66e:	ee98 7a25 	vfnms.f32	s14, s16, s11
     672:	ee36 6ac6 	vsub.f32	s12, s13, s12
     676:	eef0 6a47 	vmov.f32	s13, s14
     67a:	ee86 7a26 	vdiv.f32	s14, s12, s13
     67e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
     682:	db5b      	blt.n	73c <__data_size+0x32>
     684:	4b44      	ldr	r3, [pc, #272]	; (798 <__data_size+0x8e>)
     686:	f8cb 3000 	str.w	r3, [fp]
     68a:	eddb 7a01 	vldr	s15, [fp, #4]
     68e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 79c <__data_size+0x92>
     692:	eef0 6ae7 	vabs.f32	s13, s15
     696:	eef4 6a47 	vcmp.f32	s13, s14
     69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     69e:	d909      	bls.n	6b4 <CONFIG_BT_COMPANY_ID+0xc3>
     6a0:	edd4 7a00 	vldr	s15, [r4]
     6a4:	eef0 6ae7 	vabs.f32	s13, s15
     6a8:	eef4 6a47 	vcmp.f32	s13, s14
     6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6b0:	f200 80e4 	bhi.w	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     6b4:	edcb 7a03 	vstr	s15, [fp, #12]
     6b8:	2000      	movs	r0, #0
     6ba:	e562      	b.n	182 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15>
     6bc:	2300      	movs	r3, #0
     6be:	4628      	mov	r0, r5
     6c0:	f8cb 3000 	str.w	r3, [fp]
     6c4:	b00b      	add	sp, #44	; 0x2c
     6c6:	ecbd 8b06 	vpop	{d8-d10}
     6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6ce:	4291      	cmp	r1, r2
     6d0:	d187      	bne.n	5e2 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xce>
     6d2:	eeb0 8a67 	vmov.f32	s16, s15
     6d6:	460d      	mov	r5, r1
     6d8:	e7a4      	b.n	624 <CONFIG_BT_COMPANY_ID+0x33>
     6da:	ed9f 7a27 	vldr	s14, [pc, #156]	; 778 <__data_size+0x6e>
     6de:	e7ce      	b.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     6e0:	f240 12ff 	movw	r2, #511	; 0x1ff
     6e4:	eb06 0185 	add.w	r1, r6, r5, lsl #2
     6e8:	4297      	cmp	r7, r2
     6ea:	ed11 6a01 	vldr	s12, [r1, #-4]
     6ee:	d1aa      	bne.n	646 <CONFIG_BT_COMPANY_ID+0x55>
     6f0:	eeb4 6ac8 	vcmpe.f32	s12, s16
     6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6f8:	edd6 6a00 	vldr	s13, [r6]
     6fc:	d9ac      	bls.n	658 <CONFIG_BT_COMPANY_ID+0x67>
     6fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 778 <__data_size+0x6e>
     702:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 76c <__data_size+0x62>
     706:	ee77 7a86 	vadd.f32	s15, s15, s12
     70a:	eddf 6a25 	vldr	s13, [pc, #148]	; 7a0 <__data_size+0x96>
     70e:	ee67 7a87 	vmul.f32	s15, s15, s14
     712:	ee87 7aa6 	vdiv.f32	s14, s15, s13
     716:	eef0 7ac7 	vabs.f32	s15, s14
     71a:	eddf 6a20 	vldr	s13, [pc, #128]	; 79c <__data_size+0x92>
     71e:	eef4 7a66 	vcmp.f32	s15, s13
     722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     726:	ed8b 7a00 	vstr	s14, [fp]
     72a:	d8ae      	bhi.n	68a <CONFIG_BT_COMPANY_ID+0x99>
     72c:	2000      	movs	r0, #0
     72e:	ed8b 7a03 	vstr	s14, [fp, #12]
     732:	b00b      	add	sp, #44	; 0x2c
     734:	ecbd 8b06 	vpop	{d8-d10}
     738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     73c:	ee77 7a27 	vadd.f32	s15, s14, s15
     740:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 76c <__data_size+0x62>
     744:	ed9f 6a16 	vldr	s12, [pc, #88]	; 7a0 <__data_size+0x96>
     748:	ee67 7a87 	vmul.f32	s15, s15, s14
     74c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 778 <__data_size+0x6e>
     750:	ee87 7a86 	vdiv.f32	s14, s15, s12
     754:	eeb4 7ae6 	vcmpe.f32	s14, s13
     758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     75c:	d5db      	bpl.n	716 <__data_size+0xc>
     75e:	edcb 6a00 	vstr	s13, [fp]
     762:	eeb0 7a66 	vmov.f32	s14, s13
     766:	e7e1      	b.n	72c <__data_size+0x22>
     768:	20003dc0 	.word	0x20003dc0
     76c:	4d8f0d18 	.word	0x4d8f0d18
     770:	4b3fbf63 	.word	0x4b3fbf63
     774:	42200000 	.word	0x42200000
     778:	00000000 	.word	0x00000000
     77c:	42300000 	.word	0x42300000
     780:	42080000 	.word	0x42080000
     784:	20003efc 	.word	0x20003efc
     788:	00021488 	.word	0x00021488
     78c:	200046fc 	.word	0x200046fc
     790:	200046f4 	.word	0x200046f4
     794:	200046f8 	.word	0x200046f8
     798:	7fc00000 	.word	0x7fc00000
     79c:	7f7fffff 	.word	0x7f7fffff
     7a0:	4e742400 	.word	0x4e742400
     7a4:	46aa      	mov	sl, r5
     7a6:	eef0 8a48 	vmov.f32	s17, s16
     7aa:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
     7ae:	f1ba 0f00 	cmp.w	sl, #0
     7b2:	d058      	beq.n	866 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66>
     7b4:	f10a 38ff 	add.w	r8, sl, #4294967295
     7b8:	ee78 7aa8 	vadd.f32	s15, s17, s17
     7bc:	eef4 7ac8 	vcmpe.f32	s15, s16
     7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7c4:	dc3e      	bgt.n	844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>
     7c6:	ee18 0a90 	vmov	r0, s17
     7ca:	f004 f8eb 	bl	49a4 <__aeabi_f2d>
     7ce:	4602      	mov	r2, r0
     7d0:	460b      	mov	r3, r1
     7d2:	eb06 0188 	add.w	r1, r6, r8, lsl #2
     7d6:	6808      	ldr	r0, [r1, #0]
     7d8:	ec43 2b1a 	vmov	d10, r2, r3
     7dc:	f004 f8e2 	bl	49a4 <__aeabi_f2d>
     7e0:	a330      	add	r3, pc, #192	; (adr r3, 8a4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa4>)
     7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
     7e6:	f004 f935 	bl	4a54 <__aeabi_dmul>
     7ea:	4602      	mov	r2, r0
     7ec:	460b      	mov	r3, r1
     7ee:	ec51 0b1a 	vmov	r0, r1, d10
     7f2:	f004 fbbf 	bl	4f74 <__aeabi_dcmpgt>
     7f6:	bb28      	cbnz	r0, 844 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44>
     7f8:	45aa      	cmp	sl, r5
     7fa:	bf86      	itte	hi
     7fc:	f505 7300 	addhi.w	r3, r5, #512	; 0x200
     800:	eba3 030a 	subhi.w	r3, r3, sl
     804:	eba5 030a 	subls.w	r3, r5, sl
     808:	2b07      	cmp	r3, #7
     80a:	d90e      	bls.n	82a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a>
     80c:	45aa      	cmp	sl, r5
     80e:	dd2d      	ble.n	86c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6c>
     810:	f240 17f9 	movw	r7, #505	; 0x1f9
     814:	4557      	cmp	r7, sl
     816:	f46f 73fc 	mvn.w	r3, #504	; 0x1f8
     81a:	bfb8      	it	lt
     81c:	4657      	movlt	r7, sl
     81e:	441f      	add	r7, r3
     820:	eb06 0387 	add.w	r3, r6, r7, lsl #2
     824:	463d      	mov	r5, r7
     826:	ed93 8a00 	vldr	s16, [r3]
     82a:	1c7b      	adds	r3, r7, #1
     82c:	425a      	negs	r2, r3
     82e:	f3c2 0208 	ubfx	r2, r2, #0, #9
     832:	f3c3 0308 	ubfx	r3, r3, #0, #9
     836:	bf58      	it	pl
     838:	4253      	negpl	r3, r2
     83a:	ee07 3a90 	vmov	s15, r3
     83e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     842:	e6fb      	b.n	63c <CONFIG_BT_COMPANY_ID+0x4b>
     844:	ee68 8a89 	vmul.f32	s17, s17, s18
     848:	eef4 8ac8 	vcmpe.f32	s17, s16
     84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     850:	ddd2      	ble.n	7f8 <__data_size+0xee>
     852:	45a8      	cmp	r8, r5
     854:	eb06 0388 	add.w	r3, r6, r8, lsl #2
     858:	d0ce      	beq.n	7f8 <__data_size+0xee>
     85a:	46c2      	mov	sl, r8
     85c:	edd3 8a00 	vldr	s17, [r3]
     860:	f1ba 0f00 	cmp.w	sl, #0
     864:	d1a6      	bne.n	7b4 <__data_size+0xaa>
     866:	f240 18ff 	movw	r8, #511	; 0x1ff
     86a:	e7a5      	b.n	7b8 <__data_size+0xae>
     86c:	f10a 0707 	add.w	r7, sl, #7
     870:	eb06 0387 	add.w	r3, r6, r7, lsl #2
     874:	463d      	mov	r5, r7
     876:	ed93 8a00 	vldr	s16, [r3]
     87a:	e7d6      	b.n	82a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a>
     87c:	2300      	movs	r3, #0
     87e:	2002      	movs	r0, #2
     880:	f8cb 300c 	str.w	r3, [fp, #12]
     884:	e47d      	b.n	182 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15>
     886:	ed93 8a00 	vldr	s16, [r3]
     88a:	ed13 6a01 	vldr	s12, [r3, #-4]
     88e:	460d      	mov	r5, r1
     890:	eddf 7a03 	vldr	s15, [pc, #12]	; 8a0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa0>
     894:	f240 13ff 	movw	r3, #511	; 0x1ff
     898:	e6d5      	b.n	646 <CONFIG_BT_COMPANY_ID+0x55>
     89a:	bf00      	nop
     89c:	f3af 8000 	nop.w
     8a0:	43ff8000 	.word	0x43ff8000
     8a4:	9999999a 	.word	0x9999999a
     8a8:	3ff19999 	.word	0x3ff19999
     8ac:	00000000 	.word	0x00000000

000008b0 <sym_100278>:
     8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b4:	ed2d 8b0c 	vpush	{d8-d13}
     8b8:	2300      	movs	r3, #0
     8ba:	b0b5      	sub	sp, #212	; 0xd4
     8bc:	9303      	str	r3, [sp, #12]
     8be:	4bd2      	ldr	r3, [pc, #840]	; (c08 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x8>)
     8c0:	ed9f dad2 	vldr	s26, [pc, #840]	; c0c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0xc>
     8c4:	ed93 aa00 	vldr	s20, [r3]
     8c8:	edd3 9a01 	vldr	s19, [r3, #4]
     8cc:	4603      	mov	r3, r0
     8ce:	eddf dad0 	vldr	s27, [pc, #832]	; c10 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x10>
     8d2:	f04f 0827 	mov.w	r8, #39	; 0x27
     8d6:	4689      	mov	r9, r1
     8d8:	ed9f 8bc9 	vldr	d8, [pc, #804]	; c00 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE>
     8dc:	3310      	adds	r3, #16
     8de:	9004      	str	r0, [sp, #16]
     8e0:	9105      	str	r1, [sp, #20]
     8e2:	9002      	str	r0, [sp, #8]
     8e4:	f100 0a08 	add.w	sl, r0, #8
     8e8:	9301      	str	r3, [sp, #4]
     8ea:	9f03      	ldr	r7, [sp, #12]
     8ec:	2428      	movs	r4, #40	; 0x28
     8ee:	463d      	mov	r5, r7
     8f0:	2600      	movs	r6, #0
     8f2:	9b04      	ldr	r3, [sp, #16]
     8f4:	9a02      	ldr	r2, [sp, #8]
     8f6:	a80b      	add	r0, sp, #44	; 0x2c
     8f8:	9901      	ldr	r1, [sp, #4]
     8fa:	9313      	str	r3, [sp, #76]	; 0x4c
     8fc:	9322      	str	r3, [sp, #136]	; 0x88
     8fe:	4603      	mov	r3, r0
     900:	a80c      	add	r0, sp, #48	; 0x30
     902:	3701      	adds	r7, #1
     904:	9211      	str	r2, [sp, #68]	; 0x44
     906:	9220      	str	r2, [sp, #128]	; 0x80
     908:	4602      	mov	r2, r0
     90a:	a81a      	add	r0, sp, #104	; 0x68
     90c:	911a      	str	r1, [sp, #104]	; 0x68
     90e:	9717      	str	r7, [sp, #92]	; 0x5c
     910:	4601      	mov	r1, r0
     912:	9726      	str	r7, [sp, #152]	; 0x98
     914:	a80e      	add	r0, sp, #56	; 0x38
     916:	9703      	str	r7, [sp, #12]
     918:	f1c7 0727 	rsb	r7, r7, #39	; 0x27
     91c:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
     920:	971b      	str	r7, [sp, #108]	; 0x6c
     922:	9416      	str	r4, [sp, #88]	; 0x58
     924:	9515      	str	r5, [sp, #84]	; 0x54
     926:	9419      	str	r4, [sp, #100]	; 0x64
     928:	942b      	str	r4, [sp, #172]	; 0xac
     92a:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
     92e:	ed8d aa0c 	vstr	s20, [sp, #48]	; 0x30
     932:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
     936:	e9cd a80e 	strd	sl, r8, [sp, #56]	; 0x38
     93a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
     93e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
     942:	9614      	str	r6, [sp, #80]	; 0x50
     944:	9623      	str	r6, [sp, #140]	; 0x8c
     946:	f000 fe77 	bl	1638 <sym_100220>
     94a:	9b04      	ldr	r3, [sp, #16]
     94c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
     950:	931d      	str	r3, [sp, #116]	; 0x74
     952:	932b      	str	r3, [sp, #172]	; 0xac
     954:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
     958:	9901      	ldr	r1, [sp, #4]
     95a:	eef1 7a67 	vneg.f32	s15, s15
     95e:	f841 3c08 	str.w	r3, [r1, #-8]
     962:	2327      	movs	r3, #39	; 0x27
     964:	9314      	str	r3, [sp, #80]	; 0x50
     966:	464b      	mov	r3, r9
     968:	9a02      	ldr	r2, [sp, #8]
     96a:	9805      	ldr	r0, [sp, #20]
     96c:	9f03      	ldr	r7, [sp, #12]
     96e:	9229      	str	r2, [sp, #164]	; 0xa4
     970:	4aa5      	ldr	r2, [pc, #660]	; (c08 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x8>)
     972:	f50a 7ba0 	add.w	fp, sl, #320	; 0x140
     976:	9011      	str	r0, [sp, #68]	; 0x44
     978:	9512      	str	r5, [sp, #72]	; 0x48
     97a:	952d      	str	r5, [sp, #180]	; 0xb4
     97c:	9420      	str	r4, [sp, #128]	; 0x80
     97e:	942e      	str	r4, [sp, #184]	; 0xb8
     980:	9431      	str	r4, [sp, #196]	; 0xc4
     982:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
     986:	ed8a da01 	vstr	s26, [sl, #4]
     98a:	e9cd b81a 	strd	fp, r8, [sp, #104]	; 0x68
     98e:	e9cd 771e 	strd	r7, r7, [sp, #120]	; 0x78
     992:	e9cd a826 	strd	sl, r8, [sp, #152]	; 0x98
     996:	6811      	ldr	r1, [r2, #0]
     998:	962c      	str	r6, [sp, #176]	; 0xb0
     99a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
     99e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
     9a2:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
     9a6:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
     9aa:	972f      	str	r7, [sp, #188]	; 0xbc
     9ac:	6852      	ldr	r2, [r2, #4]
     9ae:	980c      	ldr	r0, [sp, #48]	; 0x30
     9b0:	ea4f 04c8 	mov.w	r4, r8, lsl #3
     9b4:	9024      	str	r0, [sp, #144]	; 0x90
     9b6:	eb09 05c8 	add.w	r5, r9, r8, lsl #3
     9ba:	6019      	str	r1, [r3, #0]
     9bc:	605a      	str	r2, [r3, #4]
     9be:	3308      	adds	r3, #8
     9c0:	429d      	cmp	r5, r3
     9c2:	d1fa      	bne.n	9ba <sym_100278+0x10a>
     9c4:	4b90      	ldr	r3, [pc, #576]	; (c08 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x8>)
     9c6:	aa21      	add	r2, sp, #132	; 0x84
     9c8:	ed93 0a02 	vldr	s0, [r3, #8]
     9cc:	edd3 0a03 	vldr	s1, [r3, #12]
     9d0:	a91a      	add	r1, sp, #104	; 0x68
     9d2:	a80e      	add	r0, sp, #56	; 0x38
     9d4:	f001 f918 	bl	1c08 <sym_100279>
     9d8:	9b01      	ldr	r3, [sp, #4]
     9da:	edd9 7a01 	vldr	s15, [r9, #4]
     9de:	ed13 7a02 	vldr	s14, [r3, #-8]
     9e2:	ed9a 6a01 	vldr	s12, [sl, #4]
     9e6:	edd9 6a00 	vldr	s13, [r9]
     9ea:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
     9ee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
     9f2:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
     9f6:	eddd 1a0d 	vldr	s3, [sp, #52]	; 0x34
     9fa:	ee67 0ac7 	vnmul.f32	s1, s15, s14
     9fe:	ee27 0a86 	vmul.f32	s0, s15, s12
     a02:	f1b8 0f01 	cmp.w	r8, #1
     a06:	ee21 1a05 	vmul.f32	s2, s2, s10
     a0a:	ee61 1aa5 	vmul.f32	s3, s3, s11
     a0e:	eee6 0a86 	vfma.f32	s1, s13, s12
     a12:	eea6 0a87 	vfma.f32	s0, s13, s14
     a16:	d01d      	beq.n	a54 <sym_100278+0x1a4>
     a18:	4652      	mov	r2, sl
     a1a:	464b      	mov	r3, r9
     a1c:	f1a9 0108 	sub.w	r1, r9, #8
     a20:	440c      	add	r4, r1
     a22:	edd3 7a03 	vldr	s15, [r3, #12]
     a26:	edd2 6a02 	vldr	s13, [r2, #8]
     a2a:	edd2 5a03 	vldr	s11, [r2, #12]
     a2e:	ed93 6a02 	vldr	s12, [r3, #8]
     a32:	ee27 7ae6 	vnmul.f32	s14, s15, s13
     a36:	ee67 7aa5 	vmul.f32	s15, s15, s11
     a3a:	eea6 7a25 	vfma.f32	s14, s12, s11
     a3e:	eee6 7a26 	vfma.f32	s15, s12, s13
     a42:	3308      	adds	r3, #8
     a44:	42a3      	cmp	r3, r4
     a46:	ee70 0a87 	vadd.f32	s1, s1, s14
     a4a:	ee30 0a27 	vadd.f32	s0, s0, s15
     a4e:	f102 0208 	add.w	r2, r2, #8
     a52:	d1e6      	bne.n	a22 <sym_100278+0x172>
     a54:	ee61 7a20 	vmul.f32	s15, s2, s1
     a58:	ee20 9ae1 	vnmul.f32	s18, s1, s3
     a5c:	eee1 7a80 	vfma.f32	s15, s3, s0
     a60:	eea1 9a00 	vfma.f32	s18, s2, s0
     a64:	eeb4 9a67 	vcmp.f32	s18, s15
     a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a6c:	eef0 aa67 	vmov.f32	s21, s15
     a70:	f180 8133 	bvs.w	cda <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0xda>
     a74:	464c      	mov	r4, r9
     a76:	4657      	mov	r7, sl
     a78:	f109 0604 	add.w	r6, r9, #4
     a7c:	ed97 1a00 	vldr	s2, [r7]
     a80:	edd7 1a01 	vldr	s3, [r7, #4]
     a84:	ee61 7a2a 	vmul.f32	s15, s2, s21
     a88:	ee2a 7ae1 	vnmul.f32	s14, s21, s3
     a8c:	eee9 7a21 	vfma.f32	s15, s18, s3
     a90:	eea9 7a01 	vfma.f32	s14, s18, s2
     a94:	eef4 7a47 	vcmp.f32	s15, s14
     a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a9c:	f180 80de 	bvs.w	c5c <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x5c>
     aa0:	ed94 6a01 	vldr	s12, [r4, #4]
     aa4:	ed56 6a01 	vldr	s13, [r6, #-4]
     aa8:	ee77 7a86 	vadd.f32	s15, s15, s12
     aac:	ee36 7a87 	vadd.f32	s14, s13, s14
     ab0:	3408      	adds	r4, #8
     ab2:	42a5      	cmp	r5, r4
     ab4:	f106 0608 	add.w	r6, r6, #8
     ab8:	ed06 7a03 	vstr	s14, [r6, #-12]
     abc:	f107 0708 	add.w	r7, r7, #8
     ac0:	ed44 7a01 	vstr	s15, [r4, #-4]
     ac4:	d1da      	bne.n	a7c <sym_100278+0x1cc>
     ac6:	464b      	mov	r3, r9
     ac8:	4652      	mov	r2, sl
     aca:	4641      	mov	r1, r8
     acc:	46ca      	mov	sl, r9
     ace:	2000      	movs	r0, #0
     ad0:	46c1      	mov	r9, r8
     ad2:	46d8      	mov	r8, fp
     ad4:	469b      	mov	fp, r3
     ad6:	4613      	mov	r3, r2
     ad8:	ed92 0a00 	vldr	s0, [r2]
     adc:	ed92 ba01 	vldr	s22, [r2, #4]
     ae0:	eef0 ca40 	vmov.f32	s25, s0
     ae4:	eef1 0a4b 	vneg.f32	s1, s22
     ae8:	eedb ca4d 	vfnma.f32	s25, s22, s26
     aec:	eea0 ba2d 	vfma.f32	s22, s0, s27
     af0:	eef4 ca4b 	vcmp.f32	s25, s22
     af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     af8:	f180 80cb 	bvs.w	c92 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x92>
     afc:	ed9b 0a00 	vldr	s0, [fp]
     b00:	eddb ba01 	vldr	s23, [fp, #4]
     b04:	eeb0 ca40 	vmov.f32	s24, s0
     b08:	eef1 0a6b 	vneg.f32	s1, s23
     b0c:	ee9b ca8d 	vfnms.f32	s24, s23, s26
     b10:	eee0 ba0d 	vfma.f32	s23, s0, s26
     b14:	eeb4 ca6b 	vcmp.f32	s24, s23
     b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b1c:	f180 80cb 	bvs.w	cb6 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0xb6>
     b20:	4616      	mov	r6, r2
     b22:	465d      	mov	r5, fp
     b24:	eb00 0408 	add.w	r4, r0, r8
     b28:	eb0b 07c1 	add.w	r7, fp, r1, lsl #3
     b2c:	ed95 1a00 	vldr	s2, [r5]
     b30:	edd5 1a01 	vldr	s3, [r5, #4]
     b34:	ee6b 7a01 	vmul.f32	s15, s22, s2
     b38:	ee21 7acb 	vnmul.f32	s14, s3, s22
     b3c:	eeec 7aa1 	vfma.f32	s15, s25, s3
     b40:	eeac 7a81 	vfma.f32	s14, s25, s2
     b44:	eef4 7a47 	vcmp.f32	s15, s14
     b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b4c:	eeb0 9a67 	vmov.f32	s18, s15
     b50:	eef0 aa47 	vmov.f32	s21, s14
     b54:	f105 0508 	add.w	r5, r5, #8
     b58:	d66e      	bvs.n	c38 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x38>
     b5a:	ed96 1a00 	vldr	s2, [r6]
     b5e:	edd6 1a01 	vldr	s3, [r6, #4]
     b62:	ee6b 7a81 	vmul.f32	s15, s23, s2
     b66:	ee21 7aeb 	vnmul.f32	s14, s3, s23
     b6a:	eeec 7a21 	vfma.f32	s15, s24, s3
     b6e:	eeac 7a01 	vfma.f32	s14, s24, s2
     b72:	eef4 7a47 	vcmp.f32	s15, s14
     b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b7a:	f106 0608 	add.w	r6, r6, #8
     b7e:	d649      	bvs.n	c14 <CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE+0x14>
     b80:	ed94 6a01 	vldr	s12, [r4, #4]
     b84:	edd4 6a00 	vldr	s13, [r4]
     b88:	ee37 7a2a 	vadd.f32	s14, s14, s21
     b8c:	ee77 7a89 	vadd.f32	s15, s15, s18
     b90:	ee36 7a87 	vadd.f32	s14, s13, s14
     b94:	ee77 7a86 	vadd.f32	s15, s15, s12
     b98:	42bd      	cmp	r5, r7
     b9a:	f104 0408 	add.w	r4, r4, #8
     b9e:	ed04 7a02 	vstr	s14, [r4, #-8]
     ba2:	ed44 7a01 	vstr	s15, [r4, #-4]
     ba6:	d1c1      	bne.n	b2c <sym_100278+0x27c>
     ba8:	3901      	subs	r1, #1
     baa:	f102 0208 	add.w	r2, r2, #8
     bae:	f10b 0b08 	add.w	fp, fp, #8
     bb2:	f500 70a4 	add.w	r0, r0, #328	; 0x148
     bb6:	d18f      	bne.n	ad8 <sym_100278+0x228>
     bb8:	46c8      	mov	r8, r9
     bba:	46d1      	mov	r9, sl
     bbc:	469a      	mov	sl, r3
     bbe:	9b02      	ldr	r3, [sp, #8]
     bc0:	9a01      	ldr	r2, [sp, #4]
     bc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     bc6:	9302      	str	r3, [sp, #8]
     bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bca:	f1b8 0801 	subs.w	r8, r8, #1
     bce:	f842 3c08 	str.w	r3, [r2, #-8]
     bd2:	f502 73a4 	add.w	r3, r2, #328	; 0x148
     bd6:	9301      	str	r3, [sp, #4]
     bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     bda:	ed8a da01 	vstr	s26, [sl, #4]
     bde:	f8c9 3000 	str.w	r3, [r9]
     be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     be4:	f50a 7aa4 	add.w	sl, sl, #328	; 0x148
     be8:	f8c9 3004 	str.w	r3, [r9, #4]
     bec:	f109 0908 	add.w	r9, r9, #8
     bf0:	f47f ae7b 	bne.w	8ea <sym_100278+0x3a>
     bf4:	b035      	add	sp, #212	; 0xd4
     bf6:	ecbd 8b0c 	vpop	{d8-d13}
     bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bfe:	bf00      	nop
     c00:	00000028 	.word	0x00000028
     c04:	00000001 	.word	0x00000001
     c08:	0001fb24 	.word	0x0001fb24
     c0c:	00000000 	.word	0x00000000
     c10:	80000000 	.word	0x80000000
     c14:	eef0 0a6b 	vmov.f32	s1, s23
     c18:	eeb0 0a4c 	vmov.f32	s0, s24
     c1c:	9209      	str	r2, [sp, #36]	; 0x24
     c1e:	9308      	str	r3, [sp, #32]
     c20:	9107      	str	r1, [sp, #28]
     c22:	9006      	str	r0, [sp, #24]
     c24:	f004 fa18 	bl	5058 <__mulsc3>
     c28:	a806      	add	r0, sp, #24
     c2a:	eeb0 7a40 	vmov.f32	s14, s0
     c2e:	c80b      	ldmia	r0, {r0, r1, r3}
     c30:	eef0 7a60 	vmov.f32	s15, s1
     c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c36:	e7a3      	b.n	b80 <sym_100278+0x2d0>
     c38:	eef0 0a4b 	vmov.f32	s1, s22
     c3c:	eeb0 0a6c 	vmov.f32	s0, s25
     c40:	9209      	str	r2, [sp, #36]	; 0x24
     c42:	9308      	str	r3, [sp, #32]
     c44:	9107      	str	r1, [sp, #28]
     c46:	9006      	str	r0, [sp, #24]
     c48:	f004 fa06 	bl	5058 <__mulsc3>
     c4c:	a806      	add	r0, sp, #24
     c4e:	eef0 aa40 	vmov.f32	s21, s0
     c52:	c80b      	ldmia	r0, {r0, r1, r3}
     c54:	eeb0 9a60 	vmov.f32	s18, s1
     c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c5a:	e77e      	b.n	b5a <sym_100278+0x2aa>
     c5c:	eef0 0a6a 	vmov.f32	s1, s21
     c60:	eeb0 0a49 	vmov.f32	s0, s18
     c64:	f004 f9f8 	bl	5058 <__mulsc3>
     c68:	ed94 7a01 	vldr	s14, [r4, #4]
     c6c:	ed56 6a01 	vldr	s13, [r6, #-4]
     c70:	ee30 7a87 	vadd.f32	s14, s1, s14
     c74:	ee36 0a80 	vadd.f32	s0, s13, s0
     c78:	3408      	adds	r4, #8
     c7a:	42ac      	cmp	r4, r5
     c7c:	f106 0608 	add.w	r6, r6, #8
     c80:	ed06 0a03 	vstr	s0, [r6, #-12]
     c84:	f107 0708 	add.w	r7, r7, #8
     c88:	ed04 7a01 	vstr	s14, [r4, #-4]
     c8c:	f47f aef6 	bne.w	a7c <sym_100278+0x1cc>
     c90:	e719      	b.n	ac6 <sym_100278+0x216>
     c92:	eef0 1a6d 	vmov.f32	s3, s27
     c96:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
     c9a:	9209      	str	r2, [sp, #36]	; 0x24
     c9c:	9308      	str	r3, [sp, #32]
     c9e:	9107      	str	r1, [sp, #28]
     ca0:	9006      	str	r0, [sp, #24]
     ca2:	f004 f9d9 	bl	5058 <__mulsc3>
     ca6:	a806      	add	r0, sp, #24
     ca8:	eef0 ca40 	vmov.f32	s25, s0
     cac:	c80b      	ldmia	r0, {r0, r1, r3}
     cae:	eeb0 ba60 	vmov.f32	s22, s1
     cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cb4:	e722      	b.n	afc <sym_100278+0x24c>
     cb6:	eef0 1a4d 	vmov.f32	s3, s26
     cba:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
     cbe:	9209      	str	r2, [sp, #36]	; 0x24
     cc0:	9308      	str	r3, [sp, #32]
     cc2:	9107      	str	r1, [sp, #28]
     cc4:	9006      	str	r0, [sp, #24]
     cc6:	f004 f9c7 	bl	5058 <__mulsc3>
     cca:	a806      	add	r0, sp, #24
     ccc:	eeb0 ca40 	vmov.f32	s24, s0
     cd0:	c80b      	ldmia	r0, {r0, r1, r3}
     cd2:	eef0 ba60 	vmov.f32	s23, s1
     cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     cd8:	e722      	b.n	b20 <sym_100278+0x270>
     cda:	f004 f9bd 	bl	5058 <__mulsc3>
     cde:	eeb0 9a40 	vmov.f32	s18, s0
     ce2:	eef0 aa60 	vmov.f32	s21, s1
     ce6:	e6c5      	b.n	a74 <sym_100278+0x1c4>

00000ce8 <sym_100261>:
     ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cec:	ed2d 8b08 	vpush	{d8-d11}
     cf0:	ed9f 9a5f 	vldr	s18, [pc, #380]	; e70 <sym_100261+0x188>
     cf4:	eddf 7a5f 	vldr	s15, [pc, #380]	; e74 <sym_100261+0x18c>
     cf8:	ee20 0a09 	vmul.f32	s0, s0, s18
     cfc:	edd0 6a01 	vldr	s13, [r0, #4]
     d00:	eec0 9a27 	vdiv.f32	s19, s0, s15
     d04:	ee20 0a26 	vmul.f32	s0, s0, s13
     d08:	ee80 8a27 	vdiv.f32	s16, s0, s15
     d0c:	ed90 7a00 	vldr	s14, [r0]
     d10:	b083      	sub	sp, #12
     d12:	9f14      	ldr	r7, [sp, #80]	; 0x50
     d14:	4693      	mov	fp, r2
     d16:	eeb0 0a48 	vmov.f32	s0, s16
     d1a:	463a      	mov	r2, r7
     d1c:	4605      	mov	r5, r0
     d1e:	469a      	mov	sl, r3
     d20:	460e      	mov	r6, r1
     d22:	ee69 9a87 	vmul.f32	s19, s19, s14
     d26:	f002 fc27 	bl	3578 <sym_100260>
     d2a:	eeb4 0a40 	vcmp.f32	s0, s0
     d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d32:	d666      	bvs.n	e02 <sym_100261+0x11a>
     d34:	ee07 7a90 	vmov	s15, r7
     d38:	ed95 7a02 	vldr	s14, [r5, #8]
     d3c:	eef8 aae7 	vcvt.f32.s32	s21, s15
     d40:	edd5 7a05 	vldr	s15, [r5, #20]
     d44:	ee10 0a10 	vmov	r0, s0
     d48:	ee6a aa87 	vmul.f32	s21, s21, s14
     d4c:	ed8d 0a01 	vstr	s0, [sp, #4]
     d50:	eec9 8a27 	vdiv.f32	s17, s18, s15
     d54:	f003 fe26 	bl	49a4 <__aeabi_f2d>
     d58:	4680      	mov	r8, r0
     d5a:	ee1a 0a90 	vmov	r0, s21
     d5e:	4689      	mov	r9, r1
     d60:	f003 fe20 	bl	49a4 <__aeabi_f2d>
     d64:	a340      	add	r3, pc, #256	; (adr r3, e68 <sym_100261+0x180>)
     d66:	e9d3 2300 	ldrd	r2, r3, [r3]
     d6a:	f003 fe73 	bl	4a54 <__aeabi_dmul>
     d6e:	460b      	mov	r3, r1
     d70:	4602      	mov	r2, r0
     d72:	4649      	mov	r1, r9
     d74:	4640      	mov	r0, r8
     d76:	f004 f8df 	bl	4f38 <__aeabi_dcmplt>
     d7a:	69ab      	ldr	r3, [r5, #24]
     d7c:	f1b0 0800 	subs.w	r8, r0, #0
     d80:	bf18      	it	ne
     d82:	f04f 0801 	movne.w	r8, #1
     d86:	2b01      	cmp	r3, #1
     d88:	dd3b      	ble.n	e02 <sym_100261+0x11a>
     d8a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
     d8e:	2401      	movs	r4, #1
     d90:	ed9d 0a01 	vldr	s0, [sp, #4]
     d94:	e018      	b.n	dc8 <sym_100261+0xe0>
     d96:	eef4 aac0 	vcmpe.f32	s21, s0
     d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d9e:	dd08      	ble.n	db2 <sym_100261+0xca>
     da0:	eeb4 0ac9 	vcmpe.f32	s0, s18
     da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     da8:	bf4c      	ite	mi
     daa:	f04f 0801 	movmi.w	r8, #1
     dae:	f04f 0800 	movpl.w	r8, #0
     db2:	eef0 7ae8 	vabs.f32	s15, s17
     db6:	eef4 9ae7 	vcmpe.f32	s19, s15
     dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dbe:	69ab      	ldr	r3, [r5, #24]
     dc0:	da29      	bge.n	e16 <sym_100261+0x12e>
     dc2:	3401      	adds	r4, #1
     dc4:	429c      	cmp	r4, r3
     dc6:	da1c      	bge.n	e02 <sym_100261+0x11a>
     dc8:	eeb0 aa48 	vmov.f32	s20, s16
     dcc:	ee38 8a28 	vadd.f32	s16, s16, s17
     dd0:	463a      	mov	r2, r7
     dd2:	4631      	mov	r1, r6
     dd4:	4628      	mov	r0, r5
     dd6:	eeb0 9a40 	vmov.f32	s18, s0
     dda:	eeb0 0a48 	vmov.f32	s0, s16
     dde:	f002 fbcb 	bl	3578 <sym_100260>
     de2:	eeb4 0a40 	vcmp.f32	s0, s0
     de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dea:	d60a      	bvs.n	e02 <sym_100261+0x11a>
     dec:	f1b8 0f00 	cmp.w	r8, #0
     df0:	d0d1      	beq.n	d96 <sym_100261+0xae>
     df2:	eeb4 0ac9 	vcmpe.f32	s0, s18
     df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dfa:	bf58      	it	pl
     dfc:	ee68 8acb 	vnmulpl.f32	s17, s17, s22
     e00:	e7d7      	b.n	db2 <sym_100261+0xca>
     e02:	4b1d      	ldr	r3, [pc, #116]	; (e78 <sym_100261+0x190>)
     e04:	f8cb 3000 	str.w	r3, [fp]
     e08:	f8ca 3000 	str.w	r3, [sl]
     e0c:	b003      	add	sp, #12
     e0e:	ecbd 8b08 	vpop	{d8-d11}
     e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e16:	42a3      	cmp	r3, r4
     e18:	ddf3      	ble.n	e02 <sym_100261+0x11a>
     e1a:	eeb4 0ac9 	vcmpe.f32	s0, s18
     e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e22:	d50f      	bpl.n	e44 <sym_100261+0x15c>
     e24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e2c:	bf48      	it	mi
     e2e:	ed9f 8a13 	vldrmi	s16, [pc, #76]	; e7c <sym_100261+0x194>
     e32:	ed8b 8a00 	vstr	s16, [fp]
     e36:	ed8a 0a00 	vstr	s0, [sl]
     e3a:	b003      	add	sp, #12
     e3c:	ecbd 8b08 	vpop	{d8-d11}
     e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e44:	eeb5 aac0 	vcmpe.f32	s20, #0.0
     e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e4c:	bf48      	it	mi
     e4e:	ed9f aa0b 	vldrmi	s20, [pc, #44]	; e7c <sym_100261+0x194>
     e52:	ed8b aa00 	vstr	s20, [fp]
     e56:	ed8a 9a00 	vstr	s18, [sl]
     e5a:	b003      	add	sp, #12
     e5c:	ecbd 8b08 	vpop	{d8-d11}
     e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e64:	f3af 8000 	nop.w
     e68:	9999999a 	.word	0x9999999a
     e6c:	3fc99999 	.word	0x3fc99999
     e70:	40c90fdb 	.word	0x40c90fdb
     e74:	4d8ef3c2 	.word	0x4d8ef3c2
     e78:	7fc00000 	.word	0x7fc00000
     e7c:	00000000 	.word	0x00000000

00000e80 <sym_100228>:
     e80:	b510      	push	{r4, lr}
     e82:	4604      	mov	r4, r0
     e84:	4b05      	ldr	r3, [pc, #20]	; (e9c <sym_100228+0x1c>)
     e86:	6900      	ldr	r0, [r0, #16]
     e88:	6023      	str	r3, [r4, #0]
     e8a:	b108      	cbz	r0, e90 <sym_100228+0x10>
     e8c:	7923      	ldrb	r3, [r4, #4]
     e8e:	b90b      	cbnz	r3, e94 <sym_100228+0x14>
     e90:	4620      	mov	r0, r4
     e92:	bd10      	pop	{r4, pc}
     e94:	f002 fb22 	bl	34dc <sym_100265>
     e98:	4620      	mov	r0, r4
     e9a:	bd10      	pop	{r4, pc}
     e9c:	0001fb6c 	.word	0x0001fb6c

00000ea0 <sym_100230>:
     ea0:	b510      	push	{r4, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <sym_100230+0x28>)
     ea6:	6900      	ldr	r0, [r0, #16]
     ea8:	6023      	str	r3, [r4, #0]
     eaa:	b108      	cbz	r0, eb0 <sym_100230+0x10>
     eac:	7923      	ldrb	r3, [r4, #4]
     eae:	b923      	cbnz	r3, eba <sym_100230+0x1a>
     eb0:	4620      	mov	r0, r4
     eb2:	f000 f95f 	bl	1174 <sym_100204>
     eb6:	4620      	mov	r0, r4
     eb8:	bd10      	pop	{r4, pc}
     eba:	f002 fb0f 	bl	34dc <sym_100265>
     ebe:	4620      	mov	r0, r4
     ec0:	f000 f958 	bl	1174 <sym_100204>
     ec4:	4620      	mov	r0, r4
     ec6:	bd10      	pop	{r4, pc}
     ec8:	0001fb6c 	.word	0x0001fb6c

00000ecc <sym_100232>:
     ecc:	b510      	push	{r4, lr}
     ece:	4604      	mov	r4, r0
     ed0:	4b05      	ldr	r3, [pc, #20]	; (ee8 <sym_100232+0x1c>)
     ed2:	6900      	ldr	r0, [r0, #16]
     ed4:	6023      	str	r3, [r4, #0]
     ed6:	b108      	cbz	r0, edc <sym_100232+0x10>
     ed8:	7923      	ldrb	r3, [r4, #4]
     eda:	b90b      	cbnz	r3, ee0 <sym_100232+0x14>
     edc:	4620      	mov	r0, r4
     ede:	bd10      	pop	{r4, pc}
     ee0:	f002 fafc 	bl	34dc <sym_100265>
     ee4:	4620      	mov	r0, r4
     ee6:	bd10      	pop	{r4, pc}
     ee8:	0001fb7c 	.word	0x0001fb7c

00000eec <sym_100234>:
     eec:	b510      	push	{r4, lr}
     eee:	4604      	mov	r4, r0
     ef0:	4b08      	ldr	r3, [pc, #32]	; (f14 <sym_100234+0x28>)
     ef2:	6900      	ldr	r0, [r0, #16]
     ef4:	6023      	str	r3, [r4, #0]
     ef6:	b108      	cbz	r0, efc <sym_100234+0x10>
     ef8:	7923      	ldrb	r3, [r4, #4]
     efa:	b923      	cbnz	r3, f06 <sym_100234+0x1a>
     efc:	4620      	mov	r0, r4
     efe:	f000 f939 	bl	1174 <sym_100204>
     f02:	4620      	mov	r0, r4
     f04:	bd10      	pop	{r4, pc}
     f06:	f002 fae9 	bl	34dc <sym_100265>
     f0a:	4620      	mov	r0, r4
     f0c:	f000 f932 	bl	1174 <sym_100204>
     f10:	4620      	mov	r0, r4
     f12:	bd10      	pop	{r4, pc}
     f14:	0001fb7c 	.word	0x0001fb7c

00000f18 <sym_100224>:
     f18:	b510      	push	{r4, lr}
     f1a:	4604      	mov	r4, r0
     f1c:	4b05      	ldr	r3, [pc, #20]	; (f34 <sym_100224+0x1c>)
     f1e:	6900      	ldr	r0, [r0, #16]
     f20:	6023      	str	r3, [r4, #0]
     f22:	b108      	cbz	r0, f28 <sym_100224+0x10>
     f24:	7923      	ldrb	r3, [r4, #4]
     f26:	b90b      	cbnz	r3, f2c <sym_100224+0x14>
     f28:	4620      	mov	r0, r4
     f2a:	bd10      	pop	{r4, pc}
     f2c:	f002 fad6 	bl	34dc <sym_100265>
     f30:	4620      	mov	r0, r4
     f32:	bd10      	pop	{r4, pc}
     f34:	0001fb8c 	.word	0x0001fb8c

00000f38 <sym_100226>:
     f38:	b510      	push	{r4, lr}
     f3a:	4604      	mov	r4, r0
     f3c:	4b08      	ldr	r3, [pc, #32]	; (f60 <sym_100226+0x28>)
     f3e:	6900      	ldr	r0, [r0, #16]
     f40:	6023      	str	r3, [r4, #0]
     f42:	b108      	cbz	r0, f48 <sym_100226+0x10>
     f44:	7923      	ldrb	r3, [r4, #4]
     f46:	b923      	cbnz	r3, f52 <sym_100226+0x1a>
     f48:	4620      	mov	r0, r4
     f4a:	f000 f913 	bl	1174 <sym_100204>
     f4e:	4620      	mov	r0, r4
     f50:	bd10      	pop	{r4, pc}
     f52:	f002 fac3 	bl	34dc <sym_100265>
     f56:	4620      	mov	r0, r4
     f58:	f000 f90c 	bl	1174 <sym_100204>
     f5c:	4620      	mov	r0, r4
     f5e:	bd10      	pop	{r4, pc}
     f60:	0001fb8c 	.word	0x0001fb8c

00000f64 <sym_100188>:
     f64:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
     f68:	ed2d 8b02 	vpush	{d8}
     f6c:	2400      	movs	r4, #0
     f6e:	f04f 0a01 	mov.w	sl, #1
     f72:	f04f 0b50 	mov.w	fp, #80	; 0x50
     f76:	b0a8      	sub	sp, #160	; 0xa0
     f78:	9403      	str	r4, [sp, #12]
     f7a:	4e79      	ldr	r6, [pc, #484]	; (1160 <CONFIG_HEAP_MEM_POOL_SIZE+0x160>)
     f7c:	4604      	mov	r4, r0
     f7e:	a820      	add	r0, sp, #128	; 0x80
     f80:	461d      	mov	r5, r3
     f82:	eeb0 8a40 	vmov.f32	s16, s0
     f86:	460f      	mov	r7, r1
     f88:	4690      	mov	r8, r2
     f8a:	f002 faa9 	bl	34e0 <sym_100253>
     f8e:	f44f 7020 	mov.w	r0, #640	; 0x280
     f92:	e9cd ab06 	strd	sl, fp, [sp, #24]
     f96:	9604      	str	r6, [sp, #16]
     f98:	f002 fa9e 	bl	34d8 <sym_100264>
     f9c:	2800      	cmp	r0, #0
     f9e:	bf14      	ite	ne
     fa0:	2301      	movne	r3, #1
     fa2:	2300      	moveq	r3, #0
     fa4:	9008      	str	r0, [sp, #32]
     fa6:	f88d 3014 	strb.w	r3, [sp, #20]
     faa:	d106      	bne.n	fba <sym_100188+0x56>
     fac:	4c6d      	ldr	r4, [pc, #436]	; (1164 <CONFIG_HEAP_MEM_POOL_SIZE+0x164>)
     fae:	602c      	str	r4, [r5, #0]
     fb0:	b028      	add	sp, #160	; 0xa0
     fb2:	ecbd 8b02 	vpop	{d8}
     fb6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
     fba:	f44f 7020 	mov.w	r0, #640	; 0x280
     fbe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
     fc2:	960a      	str	r6, [sp, #40]	; 0x28
     fc4:	f002 fa88 	bl	34d8 <sym_100264>
     fc8:	2800      	cmp	r0, #0
     fca:	bf14      	ite	ne
     fcc:	2301      	movne	r3, #1
     fce:	2300      	moveq	r3, #0
     fd0:	900e      	str	r0, [sp, #56]	; 0x38
     fd2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
     fd6:	d060      	beq.n	109a <CONFIG_HEAP_MEM_POOL_SIZE+0x9a>
     fd8:	f44f 7020 	mov.w	r0, #640	; 0x280
     fdc:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
     fe0:	9610      	str	r6, [sp, #64]	; 0x40
     fe2:	f002 fa79 	bl	34d8 <sym_100264>
     fe6:	2800      	cmp	r0, #0
     fe8:	bf14      	ite	ne
     fea:	2301      	movne	r3, #1
     fec:	2300      	moveq	r3, #0
     fee:	9014      	str	r0, [sp, #80]	; 0x50
     ff0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
     ff4:	d04b      	beq.n	108e <CONFIG_HEAP_MEM_POOL_SIZE+0x8e>
     ff6:	4620      	mov	r0, r4
     ff8:	2400      	movs	r4, #0
     ffa:	f850 1b04 	ldr.w	r1, [r0], #4
     ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1000:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
    1004:	4423      	add	r3, r4
    1006:	6019      	str	r1, [r3, #0]
    1008:	605a      	str	r2, [r3, #4]
    100a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    100c:	f8d0 227c 	ldr.w	r2, [r0, #636]	; 0x27c
    1010:	eb03 0c04 	add.w	ip, r3, r4
    1014:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    1018:	3408      	adds	r4, #8
    101a:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
    101e:	f8cc 2000 	str.w	r2, [ip]
    1022:	f8cc 3004 	str.w	r3, [ip, #4]
    1026:	d1e8      	bne.n	ffa <sym_100188+0x96>
    1028:	f04f 0a01 	mov.w	sl, #1
    102c:	9806      	ldr	r0, [sp, #24]
    102e:	4c4e      	ldr	r4, [pc, #312]	; (1168 <CONFIG_HEAP_MEM_POOL_SIZE+0x168>)
    1030:	9019      	str	r0, [sp, #100]	; 0x64
    1032:	0080      	lsls	r0, r0, #2
    1034:	9416      	str	r4, [sp, #88]	; 0x58
    1036:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    103a:	f002 fa4d 	bl	34d8 <sym_100264>
    103e:	2800      	cmp	r0, #0
    1040:	bf14      	ite	ne
    1042:	4653      	movne	r3, sl
    1044:	2300      	moveq	r3, #0
    1046:	901a      	str	r0, [sp, #104]	; 0x68
    1048:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    104c:	d019      	beq.n	1082 <CONFIG_HEAP_MEM_POOL_SIZE+0x82>
    104e:	9806      	ldr	r0, [sp, #24]
    1050:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
    1054:	f8df a114 	ldr.w	sl, [pc, #276]	; 116c <CONFIG_HEAP_MEM_POOL_SIZE+0x16c>
    1058:	901e      	str	r0, [sp, #120]	; 0x78
    105a:	0080      	lsls	r0, r0, #2
    105c:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    1060:	f002 fa3a 	bl	34d8 <sym_100264>
    1064:	2800      	cmp	r0, #0
    1066:	bf14      	ite	ne
    1068:	2301      	movne	r3, #1
    106a:	2300      	moveq	r3, #0
    106c:	901f      	str	r0, [sp, #124]	; 0x7c
    106e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    1072:	d129      	bne.n	10c8 <CONFIG_HEAP_MEM_POOL_SIZE+0xc8>
    1074:	981a      	ldr	r0, [sp, #104]	; 0x68
    1076:	9416      	str	r4, [sp, #88]	; 0x58
    1078:	b118      	cbz	r0, 1082 <CONFIG_HEAP_MEM_POOL_SIZE+0x82>
    107a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    107e:	2b00      	cmp	r3, #0
    1080:	d15e      	bne.n	1140 <CONFIG_HEAP_MEM_POOL_SIZE+0x140>
    1082:	9814      	ldr	r0, [sp, #80]	; 0x50
    1084:	9610      	str	r6, [sp, #64]	; 0x40
    1086:	b110      	cbz	r0, 108e <CONFIG_HEAP_MEM_POOL_SIZE+0x8e>
    1088:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    108c:	b9cb      	cbnz	r3, 10c2 <CONFIG_HEAP_MEM_POOL_SIZE+0xc2>
    108e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1090:	960a      	str	r6, [sp, #40]	; 0x28
    1092:	b110      	cbz	r0, 109a <CONFIG_HEAP_MEM_POOL_SIZE+0x9a>
    1094:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    1098:	b983      	cbnz	r3, 10bc <CONFIG_HEAP_MEM_POOL_SIZE+0xbc>
    109a:	4c32      	ldr	r4, [pc, #200]	; (1164 <CONFIG_HEAP_MEM_POOL_SIZE+0x164>)
    109c:	9808      	ldr	r0, [sp, #32]
    109e:	9604      	str	r6, [sp, #16]
    10a0:	2800      	cmp	r0, #0
    10a2:	d084      	beq.n	fae <sym_100188+0x4a>
    10a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d080      	beq.n	fae <sym_100188+0x4a>
    10ac:	f002 fa16 	bl	34dc <sym_100265>
    10b0:	602c      	str	r4, [r5, #0]
    10b2:	b028      	add	sp, #160	; 0xa0
    10b4:	ecbd 8b02 	vpop	{d8}
    10b8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    10bc:	f002 fa0e 	bl	34dc <sym_100265>
    10c0:	e7eb      	b.n	109a <CONFIG_HEAP_MEM_POOL_SIZE+0x9a>
    10c2:	f002 fa0b 	bl	34dc <sym_100265>
    10c6:	e7e2      	b.n	108e <CONFIG_HEAP_MEM_POOL_SIZE+0x8e>
    10c8:	ab1b      	add	r3, sp, #108	; 0x6c
    10ca:	9300      	str	r3, [sp, #0]
    10cc:	aa04      	add	r2, sp, #16
    10ce:	ab16      	add	r3, sp, #88	; 0x58
    10d0:	a910      	add	r1, sp, #64	; 0x40
    10d2:	a80a      	add	r0, sp, #40	; 0x28
    10d4:	f002 fdf8 	bl	3cc8 <sym_100240>
    10d8:	b330      	cbz	r0, 1128 <CONFIG_HEAP_MEM_POOL_SIZE+0x128>
    10da:	981f      	ldr	r0, [sp, #124]	; 0x7c
    10dc:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    10e0:	b118      	cbz	r0, 10ea <CONFIG_HEAP_MEM_POOL_SIZE+0xea>
    10e2:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    10e6:	2b00      	cmp	r3, #0
    10e8:	d130      	bne.n	114c <CONFIG_HEAP_MEM_POOL_SIZE+0x14c>
    10ea:	981a      	ldr	r0, [sp, #104]	; 0x68
    10ec:	9416      	str	r4, [sp, #88]	; 0x58
    10ee:	b110      	cbz	r0, 10f6 <CONFIG_HEAP_MEM_POOL_SIZE+0xf6>
    10f0:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    10f4:	bb3b      	cbnz	r3, 1146 <CONFIG_HEAP_MEM_POOL_SIZE+0x146>
    10f6:	9814      	ldr	r0, [sp, #80]	; 0x50
    10f8:	9610      	str	r6, [sp, #64]	; 0x40
    10fa:	b110      	cbz	r0, 1102 <CONFIG_HEAP_MEM_POOL_SIZE+0x102>
    10fc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    1100:	bb3b      	cbnz	r3, 1152 <CONFIG_HEAP_MEM_POOL_SIZE+0x152>
    1102:	980e      	ldr	r0, [sp, #56]	; 0x38
    1104:	960a      	str	r6, [sp, #40]	; 0x28
    1106:	b110      	cbz	r0, 110e <CONFIG_HEAP_MEM_POOL_SIZE+0x10e>
    1108:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    110c:	bb23      	cbnz	r3, 1158 <CONFIG_HEAP_MEM_POOL_SIZE+0x158>
    110e:	a820      	add	r0, sp, #128	; 0x80
    1110:	4639      	mov	r1, r7
    1112:	eeb0 0a48 	vmov.f32	s0, s16
    1116:	f8cd 8000 	str.w	r8, [sp]
    111a:	aa04      	add	r2, sp, #16
    111c:	ab03      	add	r3, sp, #12
    111e:	f002 fc65 	bl	39ec <sym_100257>
    1122:	9c03      	ldr	r4, [sp, #12]
    1124:	9808      	ldr	r0, [sp, #32]
    1126:	e7ba      	b.n	109e <CONFIG_HEAP_MEM_POOL_SIZE+0x9e>
    1128:	981f      	ldr	r0, [sp, #124]	; 0x7c
    112a:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    112e:	2800      	cmp	r0, #0
    1130:	d0a0      	beq.n	1074 <CONFIG_HEAP_MEM_POOL_SIZE+0x74>
    1132:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    1136:	2b00      	cmp	r3, #0
    1138:	d09c      	beq.n	1074 <CONFIG_HEAP_MEM_POOL_SIZE+0x74>
    113a:	f002 f9cf 	bl	34dc <sym_100265>
    113e:	e799      	b.n	1074 <CONFIG_HEAP_MEM_POOL_SIZE+0x74>
    1140:	f002 f9cc 	bl	34dc <sym_100265>
    1144:	e79d      	b.n	1082 <CONFIG_HEAP_MEM_POOL_SIZE+0x82>
    1146:	f002 f9c9 	bl	34dc <sym_100265>
    114a:	e7d4      	b.n	10f6 <CONFIG_HEAP_MEM_POOL_SIZE+0xf6>
    114c:	f002 f9c6 	bl	34dc <sym_100265>
    1150:	e7cb      	b.n	10ea <CONFIG_HEAP_MEM_POOL_SIZE+0xea>
    1152:	f002 f9c3 	bl	34dc <sym_100265>
    1156:	e7d4      	b.n	1102 <CONFIG_HEAP_MEM_POOL_SIZE+0x102>
    1158:	f002 f9c0 	bl	34dc <sym_100265>
    115c:	e7d7      	b.n	110e <CONFIG_HEAP_MEM_POOL_SIZE+0x10e>
    115e:	bf00      	nop
    1160:	0001fb7c 	.word	0x0001fb7c
    1164:	7fc00000 	.word	0x7fc00000
    1168:	0001fb6c 	.word	0x0001fb6c
    116c:	0001fb8c 	.word	0x0001fb8c

00001170 <sym_100199>:
    1170:	f019 bb32 	b.w	1a7d8 <malloc>

00001174 <sym_100204>:
    1174:	f019 bb38 	b.w	1a7e8 <free>

00001178 <sym_100245>:
    1178:	4770      	bx	lr
    117a:	bf00      	nop

0000117c <sym_100247>:
    117c:	b510      	push	{r4, lr}
    117e:	4604      	mov	r4, r0
    1180:	f7ff fff8 	bl	1174 <sym_100204>
    1184:	4620      	mov	r0, r4
    1186:	bd10      	pop	{r4, pc}

00001188 <sym_100248>:
    1188:	4b01      	ldr	r3, [pc, #4]	; (1190 <sym_100248+0x8>)
    118a:	6003      	str	r3, [r0, #0]
    118c:	4770      	bx	lr
    118e:	bf00      	nop
    1190:	0001fb9c 	.word	0x0001fb9c

00001194 <sym_100277>:
    1194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1198:	f04f 0a00 	mov.w	sl, #0
    119c:	b085      	sub	sp, #20
    119e:	f1b3 0b00 	subs.w	fp, r3, #0
    11a2:	4688      	mov	r8, r1
    11a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    11a6:	4611      	mov	r1, r2
    11a8:	9202      	str	r2, [sp, #8]
    11aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    11ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    11b2:	bf18      	it	ne
    11b4:	461f      	movne	r7, r3
    11b6:	f8cd b004 	str.w	fp, [sp, #4]
    11ba:	ed9f 2ad6 	vldr	s4, [pc, #856]	; 1514 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x18c>
    11be:	eddf 2ad7 	vldr	s5, [pc, #860]	; 151c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x194>
    11c2:	ed9f 1ad5 	vldr	s2, [pc, #852]	; 1518 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x190>
    11c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    11ca:	f04f 0627 	mov.w	r6, #39	; 0x27
    11ce:	4681      	mov	r9, r0
    11d0:	bf08      	it	eq
    11d2:	4657      	moveq	r7, sl
    11d4:	4653      	mov	r3, sl
    11d6:	4693      	mov	fp, r2
    11d8:	0089      	lsls	r1, r1, #2
    11da:	9103      	str	r1, [sp, #12]
    11dc:	429e      	cmp	r6, r3
    11de:	f340 8209 	ble.w	15f4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x26c>
    11e2:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    11e6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    11ea:	3304      	adds	r3, #4
    11ec:	00b0      	lsls	r0, r6, #2
    11ee:	eb08 0486 	add.w	r4, r8, r6, lsl #2
    11f2:	461a      	mov	r2, r3
    11f4:	ed53 7a01 	vldr	s15, [r3, #-4]
    11f8:	edd2 6a00 	vldr	s13, [r2]
    11fc:	eef0 7ae7 	vabs.f32	s15, s15
    1200:	eef0 6ae6 	vabs.f32	s13, s13
    1204:	ecb1 7a01 	vldmia	r1!, {s14}
    1208:	ee77 7aa6 	vadd.f32	s15, s15, s13
    120c:	eeb0 7ac7 	vabs.f32	s14, s14
    1210:	ee67 7a82 	vmul.f32	s15, s15, s4
    1214:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    121c:	f103 0304 	add.w	r3, r3, #4
    1220:	d904      	bls.n	122c <sym_100277+0x98>
    1222:	eeb4 7ac1 	vcmpe.f32	s14, s2
    1226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    122a:	d801      	bhi.n	1230 <sym_100277+0x9c>
    122c:	ed41 2a01 	vstr	s5, [r1, #-4]
    1230:	428c      	cmp	r4, r1
    1232:	d1de      	bne.n	11f2 <sym_100277+0x5e>
    1234:	4634      	mov	r4, r6
    1236:	eb08 0300 	add.w	r3, r8, r0
    123a:	ed33 7a01 	vldmdb	r3!, {s14}
    123e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    1242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1246:	4626      	mov	r6, r4
    1248:	f104 34ff 	add.w	r4, r4, #4294967295
    124c:	d144      	bne.n	12d8 <sym_100277+0x144>
    124e:	2c00      	cmp	r4, #0
    1250:	d1f3      	bne.n	123a <sym_100277+0xa6>
    1252:	9b03      	ldr	r3, [sp, #12]
    1254:	9a02      	ldr	r2, [sp, #8]
    1256:	f8dd b004 	ldr.w	fp, [sp, #4]
    125a:	4413      	add	r3, r2
    125c:	ebba 0fc3 	cmp.w	sl, r3, lsl #3
    1260:	f300 81e6 	bgt.w	1630 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2a8>
    1264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1266:	464d      	mov	r5, r9
    1268:	2428      	movs	r4, #40	; 0x28
    126a:	2600      	movs	r6, #0
    126c:	469e      	mov	lr, r3
    126e:	f109 079c 	add.w	r7, r9, #156	; 0x9c
    1272:	f503 7ca0 	add.w	ip, r3, #320	; 0x140
    1276:	ecf5 6a01 	vldmia	r5!, {s13}
    127a:	2100      	movs	r1, #0
    127c:	2301      	movs	r3, #1
    127e:	462a      	mov	r2, r5
    1280:	eeb0 7a66 	vmov.f32	s14, s13
    1284:	f1c4 0a28 	rsb	sl, r4, #40	; 0x28
    1288:	ecf2 7a01 	vldmia	r2!, {s15}
    128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1294:	bfc8      	it	gt
    1296:	4619      	movgt	r1, r3
    1298:	f103 0301 	add.w	r3, r3, #1
    129c:	bfc8      	it	gt
    129e:	eeb0 7a67 	vmovgt.f32	s14, s15
    12a2:	429c      	cmp	r4, r3
    12a4:	d1f0      	bne.n	1288 <sym_100277+0xf4>
    12a6:	b169      	cbz	r1, 12c4 <sym_100277+0x130>
    12a8:	4451      	add	r1, sl
    12aa:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    12ae:	681a      	ldr	r2, [r3, #0]
    12b0:	ea4f 0a81 	mov.w	sl, r1, lsl #2
    12b4:	f845 2c04 	str.w	r2, [r5, #-4]
    12b8:	edc3 6a00 	vstr	s13, [r3]
    12bc:	f1bb 0f00 	cmp.w	fp, #0
    12c0:	f040 819a 	bne.w	15f8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x270>
    12c4:	42af      	cmp	r7, r5
    12c6:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    12ca:	f104 34ff 	add.w	r4, r4, #4294967295
    12ce:	d1d2      	bne.n	1276 <sym_100277+0xe2>
    12d0:	2000      	movs	r0, #0
    12d2:	b005      	add	sp, #20
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d8:	f10a 0a01 	add.w	sl, sl, #1
    12dc:	45d3      	cmp	fp, sl
    12de:	f2c0 81a7 	blt.w	1630 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2a8>
    12e2:	4623      	mov	r3, r4
    12e4:	eb08 0284 	add.w	r2, r8, r4, lsl #2
    12e8:	e009      	b.n	12fe <sym_100277+0x16a>
    12ea:	ed72 7a01 	vldmdb	r2!, {s15}
    12ee:	eef5 7a40 	vcmp.f32	s15, #0.0
    12f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12f6:	d005      	beq.n	1304 <sym_100277+0x170>
    12f8:	eeb0 7a67 	vmov.f32	s14, s15
    12fc:	460b      	mov	r3, r1
    12fe:	1e59      	subs	r1, r3, #1
    1300:	2b00      	cmp	r3, #0
    1302:	d1f2      	bne.n	12ea <sym_100277+0x156>
    1304:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
    1308:	3a01      	subs	r2, #1
    130a:	eb09 0182 	add.w	r1, r9, r2, lsl #2
    130e:	edd1 4a01 	vldr	s9, [r1, #4]
    1312:	edd1 7a00 	vldr	s15, [r1]
    1316:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    131a:	ee77 7ae4 	vsub.f32	s15, s15, s9
    131e:	ee67 7a86 	vmul.f32	s15, s15, s12
    1322:	eef5 7a40 	vcmp.f32	s15, #0.0
    1326:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    132a:	edd2 6a00 	vldr	s13, [r2]
    132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1332:	eef0 5ae6 	vabs.f32	s11, s13
    1336:	f040 811c 	bne.w	1572 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1ea>
    133a:	ee74 4ae5 	vsub.f32	s9, s9, s11
    133e:	eb09 0583 	add.w	r5, r9, r3, lsl #2
    1342:	ed95 4a00 	vldr	s8, [r5]
    1346:	42b3      	cmp	r3, r6
    1348:	ee74 4a64 	vsub.f32	s9, s8, s9
    134c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    1350:	f280 8102 	bge.w	1558 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1d0>
    1354:	eef0 0a47 	vmov.f32	s1, s14
    1358:	eef5 0a40 	vcmp.f32	s1, #0.0
    135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1360:	eb0c 0003 	add.w	r0, ip, r3
    1364:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    1368:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    136c:	469e      	mov	lr, r3
    136e:	44c4      	add	ip, r8
    1370:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    1374:	f040 808a 	bne.w	148c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x104>
    1378:	eef5 4ac0 	vcmpe.f32	s9, #0.0
    137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1380:	f100 80c0 	bmi.w	1504 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x17c>
    1384:	eeb0 5a44 	vmov.f32	s10, s8
    1388:	eef0 7a47 	vmov.f32	s15, s14
    138c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1390:	ee64 5a22 	vmul.f32	s11, s8, s5
    1394:	ee67 4a22 	vmul.f32	s9, s14, s5
    1398:	eeb0 6a62 	vmov.f32	s12, s5
    139c:	ed95 4a01 	vldr	s8, [r5, #4]
    13a0:	ee35 7aa7 	vadd.f32	s14, s11, s15
    13a4:	ee35 5a64 	vsub.f32	s10, s10, s9
    13a8:	eee4 7a46 	vfms.f32	s15, s8, s12
    13ac:	eee4 4a26 	vfma.f32	s9, s8, s13
    13b0:	ee66 7a67 	vnmul.f32	s15, s12, s15
    13b4:	ee64 5aa6 	vmul.f32	s11, s9, s13
    13b8:	ee66 4a64 	vnmul.f32	s9, s12, s9
    13bc:	eee7 5a06 	vfma.f32	s11, s14, s12
    13c0:	eee5 7a26 	vfma.f32	s15, s10, s13
    13c4:	eee7 4a26 	vfma.f32	s9, s14, s13
    13c8:	459e      	cmp	lr, r3
    13ca:	edc5 5a01 	vstr	s11, [r5, #4]
    13ce:	edc5 7a00 	vstr	s15, [r5]
    13d2:	edcc 4a00 	vstr	s9, [ip]
    13d6:	dd07      	ble.n	13e8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x60>
    13d8:	ed1c 7a01 	vldr	s14, [ip, #-4]
    13dc:	ee60 7ac6 	vnmul.f32	s15, s1, s12
    13e0:	eee7 7a26 	vfma.f32	s15, s14, s13
    13e4:	ed4c 7a01 	vstr	s15, [ip, #-4]
    13e8:	4574      	cmp	r4, lr
    13ea:	dd07      	ble.n	13fc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x74>
    13ec:	eddc 0a01 	vldr	s1, [ip, #4]
    13f0:	ee60 7aa6 	vmul.f32	s15, s1, s13
    13f4:	ee66 0a60 	vnmul.f32	s1, s12, s1
    13f8:	edcc 7a01 	vstr	s15, [ip, #4]
    13fc:	f10e 0e01 	add.w	lr, lr, #1
    1400:	b397      	cbz	r7, 1468 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xe0>
    1402:	eef4 6a61 	vcmp.f32	s13, s3
    1406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    140a:	eeb1 3a46 	vneg.f32	s6, s12
    140e:	d104      	bne.n	141a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x92>
    1410:	eeb5 6a40 	vcmp.f32	s12, #0.0
    1414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1418:	d026      	beq.n	1468 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xe0>
    141a:	4601      	mov	r1, r0
    141c:	f5a0 72a0 	sub.w	r2, r0, #320	; 0x140
    1420:	ed11 7a01 	vldr	s14, [r1, #-4]
    1424:	ed51 7a02 	vldr	s15, [r1, #-8]
    1428:	ed52 3a01 	vldr	s7, [r2, #-4]
    142c:	ed12 4a02 	vldr	s8, [r2, #-8]
    1430:	ee23 5a07 	vmul.f32	s10, s6, s14
    1434:	ee63 5a27 	vmul.f32	s11, s6, s15
    1438:	ee27 7a26 	vmul.f32	s14, s14, s13
    143c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1440:	eea3 5aa6 	vfma.f32	s10, s7, s13
    1444:	eee4 5a26 	vfma.f32	s11, s8, s13
    1448:	eea3 7a86 	vfma.f32	s14, s7, s12
    144c:	eee4 7a06 	vfma.f32	s15, s8, s12
    1450:	3208      	adds	r2, #8
    1452:	3108      	adds	r1, #8
    1454:	4290      	cmp	r0, r2
    1456:	ed02 5a03 	vstr	s10, [r2, #-12]
    145a:	ed42 5a04 	vstr	s11, [r2, #-16]
    145e:	ed01 7a03 	vstr	s14, [r1, #-12]
    1462:	ed41 7a04 	vstr	s15, [r1, #-16]
    1466:	d1db      	bne.n	1420 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x98>
    1468:	4576      	cmp	r6, lr
    146a:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    146e:	d073      	beq.n	1558 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1d0>
    1470:	eef5 0a40 	vcmp.f32	s1, #0.0
    1474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1478:	f105 0504 	add.w	r5, r5, #4
    147c:	f10c 0c04 	add.w	ip, ip, #4
    1480:	ed95 4a00 	vldr	s8, [r5]
    1484:	ed9c 7a00 	vldr	s14, [ip]
    1488:	f43f af76 	beq.w	1378 <sym_100277+0x1e4>
    148c:	eef5 4a40 	vcmp.f32	s9, #0.0
    1490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1494:	d111      	bne.n	14ba <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x132>
    1496:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    149e:	d461      	bmi.n	1564 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1dc>
    14a0:	eef1 5a44 	vneg.f32	s11, s8
    14a4:	eef1 4a47 	vneg.f32	s9, s14
    14a8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    14ac:	ee67 7a22 	vmul.f32	s15, s14, s5
    14b0:	ee24 5a22 	vmul.f32	s10, s8, s5
    14b4:	eef0 6a62 	vmov.f32	s13, s5
    14b8:	e770      	b.n	139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>
    14ba:	eef0 7ae4 	vabs.f32	s15, s9
    14be:	eef0 6ae0 	vabs.f32	s13, s1
    14c2:	eef4 7ae6 	vcmpe.f32	s15, s13
    14c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14ca:	dd29      	ble.n	1520 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x198>
    14cc:	ee80 6aa4 	vdiv.f32	s12, s1, s9
    14d0:	eef0 6a61 	vmov.f32	s13, s3
    14d4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
    14d8:	eee6 6a06 	vfma.f32	s13, s12, s12
    14dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e0:	eef1 7ae6 	vsqrt.f32	s15, s13
    14e4:	bf48      	it	mi
    14e6:	eef1 7a67 	vnegmi.f32	s15, s15
    14ea:	eec1 6aa7 	vdiv.f32	s13, s3, s15
    14ee:	ee26 6a66 	vnmul.f32	s12, s12, s13
    14f2:	ee66 7a87 	vmul.f32	s15, s13, s14
    14f6:	ee26 5a84 	vmul.f32	s10, s13, s8
    14fa:	ee66 5a04 	vmul.f32	s11, s12, s8
    14fe:	ee66 4a07 	vmul.f32	s9, s12, s14
    1502:	e74b      	b.n	139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>
    1504:	eef1 7a47 	vneg.f32	s15, s14
    1508:	eeb1 5a44 	vneg.f32	s10, s8
    150c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    1510:	e73e      	b.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    1512:	bf00      	nop
    1514:	34800000 	.word	0x34800000
    1518:	00800000 	.word	0x00800000
    151c:	00000000 	.word	0x00000000
    1520:	eec4 6aa0 	vdiv.f32	s13, s9, s1
    1524:	eeb0 6a61 	vmov.f32	s12, s3
    1528:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    152c:	eea6 6aa6 	vfma.f32	s12, s13, s13
    1530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1534:	eef1 7ac6 	vsqrt.f32	s15, s12
    1538:	bf48      	it	mi
    153a:	eef1 7a67 	vnegmi.f32	s15, s15
    153e:	ee80 6a27 	vdiv.f32	s12, s0, s15
    1542:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    1546:	ee66 5a04 	vmul.f32	s11, s12, s8
    154a:	ee66 4a07 	vmul.f32	s9, s12, s14
    154e:	ee66 7a87 	vmul.f32	s15, s13, s14
    1552:	ee26 5a84 	vmul.f32	s10, s13, s8
    1556:	e721      	b.n	139c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x14>
    1558:	2e00      	cmp	r6, #0
    155a:	f73f ae3f 	bgt.w	11dc <sym_100277+0x48>
    155e:	f8dd b004 	ldr.w	fp, [sp, #4]
    1562:	e67f      	b.n	1264 <sym_100277+0xd0>
    1564:	eef0 4a47 	vmov.f32	s9, s14
    1568:	eef0 5a44 	vmov.f32	s11, s8
    156c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1570:	e79c      	b.n	14ac <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x124>
    1572:	eeb0 6ae7 	vabs.f32	s12, s15
    1576:	eeb4 6ae5 	vcmpe.f32	s12, s11
    157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    157e:	ee26 5aa6 	vmul.f32	s10, s13, s13
    1582:	d42b      	bmi.n	15dc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x254>
    1584:	ee85 4a86 	vdiv.f32	s8, s11, s12
    1588:	eef0 3a61 	vmov.f32	s7, s3
    158c:	eee4 3a04 	vfma.f32	s7, s8, s8
    1590:	eef1 5ae3 	vsqrt.f32	s11, s7
    1594:	ee26 6a25 	vmul.f32	s12, s12, s11
    1598:	eeb5 5a40 	vcmp.f32	s10, #0.0
    159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    15a4:	d10e      	bne.n	15c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x23c>
    15a6:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
    15aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15ae:	ee86 5a86 	vdiv.f32	s10, s13, s12
    15b2:	fe31 6aa5 	vselgt.f32	s12, s3, s11
    15b6:	ee77 7a86 	vadd.f32	s15, s15, s12
    15ba:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    15be:	eee6 4a45 	vfms.f32	s9, s12, s10
    15c2:	e6bc      	b.n	133e <sym_100277+0x1aa>
    15c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15c8:	bfd8      	it	le
    15ca:	eeb1 6a46 	vnegle.f32	s12, s12
    15ce:	ee77 7a86 	vadd.f32	s15, s15, s12
    15d2:	eec5 6a27 	vdiv.f32	s13, s10, s15
    15d6:	ee74 4ae6 	vsub.f32	s9, s9, s13
    15da:	e6b0      	b.n	133e <sym_100277+0x1aa>
    15dc:	eef5 6a40 	vcmp.f32	s13, #0.0
    15e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15e4:	d021      	beq.n	162a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x2a2>
    15e6:	eeb0 4a65 	vmov.f32	s8, s11
    15ea:	eef0 5a46 	vmov.f32	s11, s12
    15ee:	eeb0 6a44 	vmov.f32	s12, s8
    15f2:	e7c7      	b.n	1584 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1fc>
    15f4:	00b0      	lsls	r0, r6, #2
    15f6:	e61d      	b.n	1234 <sym_100277+0xa0>
    15f8:	448a      	add	sl, r1
    15fa:	eb0e 138a 	add.w	r3, lr, sl, lsl #6
    15fe:	eb0e 0206 	add.w	r2, lr, r6
    1602:	eb0c 1a8a 	add.w	sl, ip, sl, lsl #6
    1606:	f8d3 8000 	ldr.w	r8, [r3]
    160a:	6810      	ldr	r0, [r2, #0]
    160c:	f8c2 8000 	str.w	r8, [r2]
    1610:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1614:	6851      	ldr	r1, [r2, #4]
    1616:	3208      	adds	r2, #8
    1618:	f842 8c04 	str.w	r8, [r2, #-4]
    161c:	f843 0b08 	str.w	r0, [r3], #8
    1620:	4553      	cmp	r3, sl
    1622:	f843 1c04 	str.w	r1, [r3, #-4]
    1626:	d1ee      	bne.n	1606 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x27e>
    1628:	e64c      	b.n	12c4 <sym_100277+0x130>
    162a:	ed1f 6a44 	vldr	s12, [pc, #-272]	; 151c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x194>
    162e:	e7b3      	b.n	1598 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x210>
    1630:	2002      	movs	r0, #2
    1632:	b005      	add	sp, #20
    1634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001638 <sym_100220>:
    1638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    163c:	ed2d 8b04 	vpush	{d8-d9}
    1640:	4617      	mov	r7, r2
    1642:	6842      	ldr	r2, [r0, #4]
    1644:	6804      	ldr	r4, [r0, #0]
    1646:	2a01      	cmp	r2, #1
    1648:	4698      	mov	r8, r3
    164a:	ed94 9a00 	vldr	s18, [r4]
    164e:	ed94 8a01 	vldr	s16, [r4, #4]
    1652:	d121      	bne.n	1698 <sym_100220+0x60>
    1654:	ed9f 7a42 	vldr	s14, [pc, #264]	; 1760 <sym_100220+0x128>
    1658:	ee68 7a08 	vmul.f32	s15, s16, s16
    165c:	eddf 6a41 	vldr	s13, [pc, #260]	; 1764 <sym_100220+0x12c>
    1660:	eef4 7ae6 	vcmpe.f32	s15, s13
    1664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1668:	d83b      	bhi.n	16e2 <sym_100220+0xaa>
    166a:	2300      	movs	r3, #0
    166c:	603b      	str	r3, [r7, #0]
    166e:	607b      	str	r3, [r7, #4]
    1670:	ed88 9a00 	vstr	s18, [r8]
    1674:	684a      	ldr	r2, [r1, #4]
    1676:	680b      	ldr	r3, [r1, #0]
    1678:	2a00      	cmp	r2, #0
    167a:	dd6c      	ble.n	1756 <sym_100220+0x11e>
    167c:	493a      	ldr	r1, [pc, #232]	; (1768 <sym_100220+0x130>)
    167e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1682:	6808      	ldr	r0, [r1, #0]
    1684:	6849      	ldr	r1, [r1, #4]
    1686:	6018      	str	r0, [r3, #0]
    1688:	6059      	str	r1, [r3, #4]
    168a:	3308      	adds	r3, #8
    168c:	4293      	cmp	r3, r2
    168e:	d1fa      	bne.n	1686 <sym_100220+0x4e>
    1690:	ecbd 8b04 	vpop	{d8-d9}
    1694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1698:	ed94 7a03 	vldr	s14, [r4, #12]
    169c:	edd4 7a02 	vldr	s15, [r4, #8]
    16a0:	ee27 7a07 	vmul.f32	s14, s14, s14
    16a4:	2a02      	cmp	r2, #2
    16a6:	eea7 7aa7 	vfma.f32	s14, s15, s15
    16aa:	dd11      	ble.n	16d0 <sym_100220+0x98>
    16ac:	4620      	mov	r0, r4
    16ae:	f1a4 0310 	sub.w	r3, r4, #16
    16b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    16b6:	edd0 7a05 	vldr	s15, [r0, #20]
    16ba:	edd0 6a04 	vldr	s13, [r0, #16]
    16be:	ee67 7aa7 	vmul.f32	s15, s15, s15
    16c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
    16c6:	3008      	adds	r0, #8
    16c8:	4283      	cmp	r3, r0
    16ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    16ce:	d1f2      	bne.n	16b6 <sym_100220+0x7e>
    16d0:	eddf 6a24 	vldr	s13, [pc, #144]	; 1764 <sym_100220+0x12c>
    16d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
    16d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16dc:	ee68 7a08 	vmul.f32	s15, s16, s16
    16e0:	d9bc      	bls.n	165c <sym_100220+0x24>
    16e2:	eee9 7a09 	vfma.f32	s15, s18, s18
    16e6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    16ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    16ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16f2:	eef1 7ac7 	vsqrt.f32	s15, s14
    16f6:	db01      	blt.n	16fc <sym_100220+0xc4>
    16f8:	eef1 7a67 	vneg.f32	s15, s15
    16fc:	edc8 7a00 	vstr	s15, [r8]
    1700:	e9d1 5600 	ldrd	r5, r6, [r1]
    1704:	2e00      	cmp	r6, #0
    1706:	ee79 8a67 	vsub.f32	s17, s18, s15
    170a:	dd16      	ble.n	173a <sym_100220+0x102>
    170c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    1710:	edd4 0a03 	vldr	s1, [r4, #12]
    1714:	eef0 1a48 	vmov.f32	s3, s16
    1718:	ed94 0a02 	vldr	s0, [r4, #8]
    171c:	eeb0 1a68 	vmov.f32	s2, s17
    1720:	f003 fdd2 	bl	52c8 <__divsc3>
    1724:	3408      	adds	r4, #8
    1726:	42a6      	cmp	r6, r4
    1728:	f105 0508 	add.w	r5, r5, #8
    172c:	ed05 0a02 	vstr	s0, [r5, #-8]
    1730:	ed45 0a01 	vstr	s1, [r5, #-4]
    1734:	d1ec      	bne.n	1710 <sym_100220+0xd8>
    1736:	edd8 7a00 	vldr	s15, [r8]
    173a:	eeb1 8a48 	vneg.f32	s16, s16
    173e:	ee37 9ac9 	vsub.f32	s18, s15, s18
    1742:	ee88 7a27 	vdiv.f32	s14, s16, s15
    1746:	eec9 6a27 	vdiv.f32	s13, s18, s15
    174a:	eef1 7a47 	vneg.f32	s15, s14
    174e:	edc7 6a00 	vstr	s13, [r7]
    1752:	edc7 7a01 	vstr	s15, [r7, #4]
    1756:	ecbd 8b04 	vpop	{d8-d9}
    175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    175e:	bf00      	nop
    1760:	00000000 	.word	0x00000000
    1764:	00800000 	.word	0x00800000
    1768:	0001fb24 	.word	0x0001fb24

0000176c <sym_100274>:
    176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1770:	ed2d 8b0e 	vpush	{d8-d14}
    1774:	f1a0 0808 	sub.w	r8, r0, #8
    1778:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    177c:	b085      	sub	sp, #20
    177e:	f038 0801 	bics.w	r8, r8, #1
    1782:	eeb0 8a40 	vmov.f32	s16, s0
    1786:	4605      	mov	r5, r0
    1788:	eef0 8a60 	vmov.f32	s17, s1
    178c:	9101      	str	r1, [sp, #4]
    178e:	9302      	str	r3, [sp, #8]
    1790:	f000 8131 	beq.w	19f6 <sym_100274+0x28a>
    1794:	ed9f aaed 	vldr	s20, [pc, #948]	; 1b4c <sym_100274+0x3e0>
    1798:	f04f 0900 	mov.w	r9, #0
    179c:	9b02      	ldr	r3, [sp, #8]
    179e:	f102 0b01 	add.w	fp, r2, #1
    17a2:	f103 0610 	add.w	r6, r3, #16
    17a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    17a8:	f102 0a02 	add.w	sl, r2, #2
    17ac:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
    17b0:	eb01 0aca 	add.w	sl, r1, sl, lsl #3
    17b4:	f101 0710 	add.w	r7, r1, #16
    17b8:	f103 0410 	add.w	r4, r3, #16
    17bc:	ed56 0a03 	vldr	s1, [r6, #-12]
    17c0:	ed16 0a04 	vldr	s0, [r6, #-16]
    17c4:	ee20 9a88 	vmul.f32	s18, s1, s16
    17c8:	ee60 9ae8 	vnmul.f32	s19, s1, s17
    17cc:	eea8 9a80 	vfma.f32	s18, s17, s0
    17d0:	eee8 9a00 	vfma.f32	s19, s16, s0
    17d4:	eeb4 9a69 	vcmp.f32	s18, s19
    17d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    17dc:	f180 81b8 	bvs.w	1b50 <sym_100274+0x3e4>
    17e0:	ed56 0a01 	vldr	s1, [r6, #-4]
    17e4:	ed16 0a02 	vldr	s0, [r6, #-8]
    17e8:	ee60 1a88 	vmul.f32	s3, s1, s16
    17ec:	ee20 1ae8 	vnmul.f32	s2, s1, s17
    17f0:	eee8 1a80 	vfma.f32	s3, s17, s0
    17f4:	eea0 1a08 	vfma.f32	s2, s0, s16
    17f8:	eef4 1a41 	vcmp.f32	s3, s2
    17fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1800:	f180 81f4 	bvs.w	1bec <sym_100274+0x480>
    1804:	ed14 da03 	vldr	s26, [r4, #-12]
    1808:	ed17 7a04 	vldr	s14, [r7, #-16]
    180c:	ed14 ca04 	vldr	s24, [r4, #-16]
    1810:	eef0 7a4d 	vmov.f32	s15, s26
    1814:	eea9 ca87 	vfma.f32	s24, s19, s14
    1818:	eee9 7a07 	vfma.f32	s15, s18, s14
    181c:	ed04 ca04 	vstr	s24, [r4, #-16]
    1820:	ed44 7a03 	vstr	s15, [r4, #-12]
    1824:	ed54 ca01 	vldr	s25, [r4, #-4]
    1828:	ed54 ba02 	vldr	s23, [r4, #-8]
    182c:	eef0 0a6c 	vmov.f32	s1, s25
    1830:	eeb0 da67 	vmov.f32	s26, s15
    1834:	ed5a 7a02 	vldr	s15, [sl, #-8]
    1838:	eee7 ba81 	vfma.f32	s23, s15, s2
    183c:	eee7 0aa1 	vfma.f32	s1, s15, s3
    1840:	ed44 ba02 	vstr	s23, [r4, #-8]
    1844:	ed44 0a01 	vstr	s1, [r4, #-4]
    1848:	ed57 6a02 	vldr	s13, [r7, #-8]
    184c:	ed17 6a01 	vldr	s12, [r7, #-4]
    1850:	ee29 7a26 	vmul.f32	s14, s18, s13
    1854:	ee66 7a49 	vnmul.f32	s15, s12, s18
    1858:	eea9 7a86 	vfma.f32	s14, s19, s12
    185c:	eee9 7aa6 	vfma.f32	s15, s19, s13
    1860:	ee77 ca20 	vadd.f32	s25, s14, s1
    1864:	ee77 baab 	vadd.f32	s23, s15, s23
    1868:	ed44 ca01 	vstr	s25, [r4, #-4]
    186c:	ed44 ba02 	vstr	s23, [r4, #-8]
    1870:	ed57 aa01 	vldr	s21, [r7, #-4]
    1874:	ed56 7a02 	vldr	s15, [r6, #-8]
    1878:	ed56 6a01 	vldr	s13, [r6, #-4]
    187c:	ed17 7a02 	vldr	s14, [r7, #-8]
    1880:	ee2a bae7 	vnmul.f32	s22, s21, s15
    1884:	ee6a aaa6 	vmul.f32	s21, s21, s13
    1888:	eea7 ba26 	vfma.f32	s22, s14, s13
    188c:	eee7 aa27 	vfma.f32	s21, s14, s15
    1890:	f109 0902 	add.w	r9, r9, #2
    1894:	454d      	cmp	r5, r9
    1896:	ee3b ba0a 	vadd.f32	s22, s22, s20
    189a:	ee7a aa8a 	vadd.f32	s21, s21, s20
    189e:	f340 814f 	ble.w	1b40 <sym_100274+0x3d4>
    18a2:	eddf baaa 	vldr	s23, [pc, #680]	; 1b4c <sym_100274+0x3e0>
    18a6:	46ce      	mov	lr, r9
    18a8:	eeb0 ca6b 	vmov.f32	s24, s23
    18ac:	eeb0 0a6b 	vmov.f32	s0, s23
    18b0:	eef0 0a6b 	vmov.f32	s1, s23
    18b4:	f107 0c08 	add.w	ip, r7, #8
    18b8:	f10a 0008 	add.w	r0, sl, #8
    18bc:	f106 0108 	add.w	r1, r6, #8
    18c0:	f104 0308 	add.w	r3, r4, #8
    18c4:	ed10 6a01 	vldr	s12, [r0, #-4]
    18c8:	ed1c 7a02 	vldr	s14, [ip, #-8]
    18cc:	ed10 4a02 	vldr	s8, [r0, #-8]
    18d0:	ed5c 6a01 	vldr	s13, [ip, #-4]
    18d4:	ed51 7a02 	vldr	s15, [r1, #-8]
    18d8:	ed51 3a01 	vldr	s7, [r1, #-4]
    18dc:	ee61 4ac6 	vnmul.f32	s9, s3, s12
    18e0:	ee29 ea07 	vmul.f32	s28, s18, s14
    18e4:	ee24 5a21 	vmul.f32	s10, s8, s3
    18e8:	ed53 da02 	vldr	s27, [r3, #-8]
    18ec:	ed13 da01 	vldr	s26, [r3, #-4]
    18f0:	ee26 2ae7 	vnmul.f32	s4, s13, s15
    18f4:	ee26 3a67 	vnmul.f32	s6, s12, s15
    18f8:	ee66 5ac9 	vnmul.f32	s11, s13, s18
    18fc:	ee63 caa6 	vmul.f32	s25, s7, s13
    1900:	ee63 2a86 	vmul.f32	s5, s7, s12
    1904:	eea6 5a01 	vfma.f32	s10, s12, s2
    1908:	eee4 4a01 	vfma.f32	s9, s8, s2
    190c:	eeb0 6a4e 	vmov.f32	s12, s28
    1910:	eee7 ca87 	vfma.f32	s25, s15, s14
    1914:	eee9 5a87 	vfma.f32	s11, s19, s14
    1918:	eea9 6aa6 	vfma.f32	s12, s19, s13
    191c:	eea3 2a87 	vfma.f32	s4, s7, s14
    1920:	eee7 2a84 	vfma.f32	s5, s15, s8
    1924:	eef0 6a43 	vmov.f32	s13, s6
    1928:	ee34 7aad 	vadd.f32	s14, s9, s27
    192c:	ee75 7a0d 	vadd.f32	s15, s10, s26
    1930:	eee3 6a84 	vfma.f32	s13, s7, s8
    1934:	ee35 7a87 	vadd.f32	s14, s11, s14
    1938:	ee76 7a27 	vadd.f32	s15, s12, s15
    193c:	f10e 0e01 	add.w	lr, lr, #1
    1940:	4575      	cmp	r5, lr
    1942:	f103 0308 	add.w	r3, r3, #8
    1946:	ee3c ca2c 	vadd.f32	s24, s24, s25
    194a:	ee7b ba82 	vadd.f32	s23, s23, s4
    194e:	ee70 0aa2 	vadd.f32	s1, s1, s5
    1952:	ee30 0a26 	vadd.f32	s0, s0, s13
    1956:	f10c 0c08 	add.w	ip, ip, #8
    195a:	f100 0008 	add.w	r0, r0, #8
    195e:	f101 0108 	add.w	r1, r1, #8
    1962:	ed03 7a04 	vstr	s14, [r3, #-16]
    1966:	ed43 7a03 	vstr	s15, [r3, #-12]
    196a:	d1ab      	bne.n	18c4 <sym_100274+0x158>
    196c:	ee7a aa8c 	vadd.f32	s21, s21, s24
    1970:	ee3b ba2b 	vadd.f32	s22, s22, s23
    1974:	ee30 9a8a 	vadd.f32	s18, s1, s20
    1978:	ee70 9a0a 	vadd.f32	s19, s0, s20
    197c:	ed14 ca04 	vldr	s24, [r4, #-16]
    1980:	ed14 da03 	vldr	s26, [r4, #-12]
    1984:	ed54 ba02 	vldr	s23, [r4, #-8]
    1988:	ed54 ca01 	vldr	s25, [r4, #-4]
    198c:	ee68 7a0b 	vmul.f32	s15, s16, s22
    1990:	ee2b 7a68 	vnmul.f32	s14, s22, s17
    1994:	eee8 7aaa 	vfma.f32	s15, s17, s21
    1998:	eea8 7a2a 	vfma.f32	s14, s16, s21
    199c:	eeb4 7a67 	vcmp.f32	s14, s15
    19a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19a4:	f180 8111 	bvs.w	1bca <sym_100274+0x45e>
    19a8:	ee68 0a29 	vmul.f32	s1, s16, s19
    19ac:	ee29 0ae8 	vnmul.f32	s0, s19, s17
    19b0:	eee8 0a89 	vfma.f32	s1, s17, s18
    19b4:	eea8 0a09 	vfma.f32	s0, s16, s18
    19b8:	eeb4 0a60 	vcmp.f32	s0, s1
    19bc:	ee77 7a8d 	vadd.f32	s15, s15, s26
    19c0:	ee3c 7a07 	vadd.f32	s14, s24, s14
    19c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19c8:	ed44 7a03 	vstr	s15, [r4, #-12]
    19cc:	ed04 7a04 	vstr	s14, [r4, #-16]
    19d0:	f180 80ee 	bvs.w	1bb0 <sym_100274+0x444>
    19d4:	ee70 0aac 	vadd.f32	s1, s1, s25
    19d8:	ee7b ba80 	vadd.f32	s23, s23, s0
    19dc:	45c8      	cmp	r8, r9
    19de:	f104 0410 	add.w	r4, r4, #16
    19e2:	445f      	add	r7, fp
    19e4:	44da      	add	sl, fp
    19e6:	f106 0610 	add.w	r6, r6, #16
    19ea:	ed44 0a05 	vstr	s1, [r4, #-20]	; 0xffffffec
    19ee:	ed44 ba06 	vstr	s23, [r4, #-24]	; 0xffffffe8
    19f2:	f73f aee3 	bgt.w	17bc <sym_100274+0x50>
    19f6:	4545      	cmp	r5, r8
    19f8:	f340 809a 	ble.w	1b30 <sym_100274+0x3c4>
    19fc:	9b02      	ldr	r3, [sp, #8]
    19fe:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
    1a02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1a04:	eb03 04c8 	add.w	r4, r3, r8, lsl #3
    1a08:	fb02 f308 	mul.w	r3, r2, r8
    1a0c:	3201      	adds	r2, #1
    1a0e:	ea4f 09c2 	mov.w	r9, r2, lsl #3
    1a12:	9a01      	ldr	r2, [sp, #4]
    1a14:	f1a9 0a08 	sub.w	sl, r9, #8
    1a18:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
    1a1c:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    1a20:	4443      	add	r3, r8
    1a22:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
    1a26:	3e08      	subs	r6, #8
    1a28:	edd7 0a01 	vldr	s1, [r7, #4]
    1a2c:	ed97 0a00 	vldr	s0, [r7]
    1a30:	ee68 4a20 	vmul.f32	s9, s16, s1
    1a34:	ee20 5ae8 	vnmul.f32	s10, s1, s17
    1a38:	eee8 4a80 	vfma.f32	s9, s17, s0
    1a3c:	eea8 5a00 	vfma.f32	s10, s16, s0
    1a40:	eeb4 5a64 	vcmp.f32	s10, s9
    1a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a48:	f180 80a7 	bvs.w	1b9a <sym_100274+0x42e>
    1a4c:	eddb 6a00 	vldr	s13, [fp]
    1a50:	ed94 7a00 	vldr	s14, [r4]
    1a54:	edd4 7a01 	vldr	s15, [r4, #4]
    1a58:	eea6 7a85 	vfma.f32	s14, s13, s10
    1a5c:	eee6 7aa4 	vfma.f32	s15, s13, s9
    1a60:	f108 0801 	add.w	r8, r8, #1
    1a64:	4545      	cmp	r5, r8
    1a66:	eef0 9a47 	vmov.f32	s19, s14
    1a6a:	eeb0 9a67 	vmov.f32	s18, s15
    1a6e:	ed84 7a00 	vstr	s14, [r4]
    1a72:	edc4 7a01 	vstr	s15, [r4, #4]
    1a76:	eddf 1a35 	vldr	s3, [pc, #212]	; 1b4c <sym_100274+0x3e0>
    1a7a:	dd5e      	ble.n	1b3a <sym_100274+0x3ce>
    1a7c:	4639      	mov	r1, r7
    1a7e:	4622      	mov	r2, r4
    1a80:	465b      	mov	r3, fp
    1a82:	eeb0 1a61 	vmov.f32	s2, s3
    1a86:	edd3 5a03 	vldr	s11, [r3, #12]
    1a8a:	ed93 6a02 	vldr	s12, [r3, #8]
    1a8e:	ee24 7ae5 	vnmul.f32	s14, s9, s11
    1a92:	ee66 7a24 	vmul.f32	s15, s12, s9
    1a96:	edd2 6a02 	vldr	s13, [r2, #8]
    1a9a:	ed92 4a03 	vldr	s8, [r2, #12]
    1a9e:	eee5 7a85 	vfma.f32	s15, s11, s10
    1aa2:	eea6 7a05 	vfma.f32	s14, s12, s10
    1aa6:	ee77 7a84 	vadd.f32	s15, s15, s8
    1aaa:	ee36 7a87 	vadd.f32	s14, s13, s14
    1aae:	edc2 7a03 	vstr	s15, [r2, #12]
    1ab2:	ed82 7a02 	vstr	s14, [r2, #8]
    1ab6:	edd1 6a02 	vldr	s13, [r1, #8]
    1aba:	edd3 7a03 	vldr	s15, [r3, #12]
    1abe:	edd1 5a03 	vldr	s11, [r1, #12]
    1ac2:	ee27 7ae6 	vnmul.f32	s14, s15, s13
    1ac6:	ed93 6a02 	vldr	s12, [r3, #8]
    1aca:	ee67 7aa5 	vmul.f32	s15, s15, s11
    1ace:	eea6 7a25 	vfma.f32	s14, s12, s11
    1ad2:	eee6 7a26 	vfma.f32	s15, s12, s13
    1ad6:	3308      	adds	r3, #8
    1ad8:	429e      	cmp	r6, r3
    1ada:	f102 0208 	add.w	r2, r2, #8
    1ade:	f101 0108 	add.w	r1, r1, #8
    1ae2:	ee71 1a87 	vadd.f32	s3, s3, s14
    1ae6:	ee31 1a27 	vadd.f32	s2, s2, s15
    1aea:	d1cc      	bne.n	1a86 <sym_100274+0x31a>
    1aec:	edd4 9a00 	vldr	s19, [r4]
    1af0:	ed94 9a01 	vldr	s18, [r4, #4]
    1af4:	ee68 7a81 	vmul.f32	s15, s17, s2
    1af8:	ee21 7ae8 	vnmul.f32	s14, s3, s17
    1afc:	eee8 7a21 	vfma.f32	s15, s16, s3
    1b00:	eea8 7a01 	vfma.f32	s14, s16, s2
    1b04:	eeb4 7a67 	vcmp.f32	s14, s15
    1b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b0c:	d62d      	bvs.n	1b6a <sym_100274+0x3fe>
    1b0e:	ee37 7a29 	vadd.f32	s14, s14, s19
    1b12:	ee77 7a89 	vadd.f32	s15, s15, s18
    1b16:	4545      	cmp	r5, r8
    1b18:	f104 0408 	add.w	r4, r4, #8
    1b1c:	f107 0708 	add.w	r7, r7, #8
    1b20:	44cb      	add	fp, r9
    1b22:	4456      	add	r6, sl
    1b24:	ed04 7a02 	vstr	s14, [r4, #-8]
    1b28:	ed44 7a01 	vstr	s15, [r4, #-4]
    1b2c:	f47f af7c 	bne.w	1a28 <sym_100274+0x2bc>
    1b30:	b005      	add	sp, #20
    1b32:	ecbd 8b0e 	vpop	{d8-d14}
    1b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b3a:	eeb0 1a61 	vmov.f32	s2, s3
    1b3e:	e7d9      	b.n	1af4 <sym_100274+0x388>
    1b40:	eef0 9a4a 	vmov.f32	s19, s20
    1b44:	eeb0 9a4a 	vmov.f32	s18, s20
    1b48:	e720      	b.n	198c <sym_100274+0x220>
    1b4a:	bf00      	nop
    1b4c:	00000000 	.word	0x00000000
    1b50:	eef0 1a68 	vmov.f32	s3, s17
    1b54:	eeb0 1a48 	vmov.f32	s2, s16
    1b58:	9203      	str	r2, [sp, #12]
    1b5a:	f003 fa7d 	bl	5058 <__mulsc3>
    1b5e:	9a03      	ldr	r2, [sp, #12]
    1b60:	eef0 9a40 	vmov.f32	s19, s0
    1b64:	eeb0 9a60 	vmov.f32	s18, s1
    1b68:	e63a      	b.n	17e0 <sym_100274+0x74>
    1b6a:	eef0 0a68 	vmov.f32	s1, s17
    1b6e:	eeb0 0a48 	vmov.f32	s0, s16
    1b72:	f003 fa71 	bl	5058 <__mulsc3>
    1b76:	ee30 7a29 	vadd.f32	s14, s0, s19
    1b7a:	ee70 7a89 	vadd.f32	s15, s1, s18
    1b7e:	4545      	cmp	r5, r8
    1b80:	f104 0408 	add.w	r4, r4, #8
    1b84:	f107 0708 	add.w	r7, r7, #8
    1b88:	44cb      	add	fp, r9
    1b8a:	4456      	add	r6, sl
    1b8c:	ed04 7a02 	vstr	s14, [r4, #-8]
    1b90:	ed44 7a01 	vstr	s15, [r4, #-4]
    1b94:	f47f af48 	bne.w	1a28 <sym_100274+0x2bc>
    1b98:	e7ca      	b.n	1b30 <sym_100274+0x3c4>
    1b9a:	eef0 1a68 	vmov.f32	s3, s17
    1b9e:	eeb0 1a48 	vmov.f32	s2, s16
    1ba2:	f003 fa59 	bl	5058 <__mulsc3>
    1ba6:	eeb0 5a40 	vmov.f32	s10, s0
    1baa:	eef0 4a60 	vmov.f32	s9, s1
    1bae:	e74d      	b.n	1a4c <sym_100274+0x2e0>
    1bb0:	eef0 1a68 	vmov.f32	s3, s17
    1bb4:	eeb0 1a48 	vmov.f32	s2, s16
    1bb8:	eef0 0a69 	vmov.f32	s1, s19
    1bbc:	eeb0 0a49 	vmov.f32	s0, s18
    1bc0:	9203      	str	r2, [sp, #12]
    1bc2:	f003 fa49 	bl	5058 <__mulsc3>
    1bc6:	9a03      	ldr	r2, [sp, #12]
    1bc8:	e704      	b.n	19d4 <sym_100274+0x268>
    1bca:	eef0 1a68 	vmov.f32	s3, s17
    1bce:	eeb0 1a48 	vmov.f32	s2, s16
    1bd2:	eef0 0a4b 	vmov.f32	s1, s22
    1bd6:	eeb0 0a6a 	vmov.f32	s0, s21
    1bda:	9203      	str	r2, [sp, #12]
    1bdc:	f003 fa3c 	bl	5058 <__mulsc3>
    1be0:	9a03      	ldr	r2, [sp, #12]
    1be2:	eeb0 7a40 	vmov.f32	s14, s0
    1be6:	eef0 7a60 	vmov.f32	s15, s1
    1bea:	e6dd      	b.n	19a8 <sym_100274+0x23c>
    1bec:	eef0 1a68 	vmov.f32	s3, s17
    1bf0:	eeb0 1a48 	vmov.f32	s2, s16
    1bf4:	9203      	str	r2, [sp, #12]
    1bf6:	f003 fa2f 	bl	5058 <__mulsc3>
    1bfa:	9a03      	ldr	r2, [sp, #12]
    1bfc:	eeb0 1a40 	vmov.f32	s2, s0
    1c00:	eef0 1a60 	vmov.f32	s3, s1
    1c04:	e5fe      	b.n	1804 <sym_100274+0x98>
    1c06:	bf00      	nop

00001c08 <sym_100279>:
    1c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c0c:	eddf 1a6f 	vldr	s3, [pc, #444]	; 1dcc <sym_100279+0x1c4>
    1c10:	ed2d 8b02 	vpush	{d8}
    1c14:	eeb0 8a60 	vmov.f32	s16, s1
    1c18:	eef0 8a40 	vmov.f32	s17, s0
    1c1c:	eea0 8a21 	vfma.f32	s16, s0, s3
    1c20:	eee0 8ae1 	vfms.f32	s17, s1, s3
    1c24:	eeb4 8a68 	vcmp.f32	s16, s17
    1c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c2c:	b087      	sub	sp, #28
    1c2e:	4604      	mov	r4, r0
    1c30:	460d      	mov	r5, r1
    1c32:	4691      	mov	r9, r2
    1c34:	af02      	add	r7, sp, #8
    1c36:	f180 80b9 	bvs.w	1dac <sym_100279+0x1a4>
    1c3a:	ed99 0a03 	vldr	s0, [r9, #12]
    1c3e:	edd9 0a04 	vldr	s1, [r9, #16]
    1c42:	eddf 1a62 	vldr	s3, [pc, #392]	; 1dcc <sym_100279+0x1c4>
    1c46:	eeb0 1a40 	vmov.f32	s2, s0
    1c4a:	eef0 7a60 	vmov.f32	s15, s1
    1c4e:	eea0 1ae1 	vfms.f32	s2, s1, s3
    1c52:	eee0 7a21 	vfma.f32	s15, s0, s3
    1c56:	eef4 7a41 	vcmp.f32	s15, s2
    1c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c5e:	f180 809c 	bvs.w	1d9a <sym_100279+0x192>
    1c62:	ee68 0a01 	vmul.f32	s1, s16, s2
    1c66:	ee27 0ac8 	vnmul.f32	s0, s15, s16
    1c6a:	eee8 0aa7 	vfma.f32	s1, s17, s15
    1c6e:	eea8 0a81 	vfma.f32	s0, s17, s2
    1c72:	eeb4 0a60 	vcmp.f32	s0, s1
    1c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c7a:	f180 8085 	bvs.w	1d88 <sym_100279+0x180>
    1c7e:	e9d4 1300 	ldrd	r1, r3, [r4]
    1c82:	00de      	lsls	r6, r3, #3
    1c84:	b379      	cbz	r1, 1ce6 <sym_100279+0xde>
    1c86:	f04f 0800 	mov.w	r8, #0
    1c8a:	f8d9 4014 	ldr.w	r4, [r9, #20]
    1c8e:	b1b4      	cbz	r4, 1cbe <sym_100279+0xb6>
    1c90:	69aa      	ldr	r2, [r5, #24]
    1c92:	9100      	str	r1, [sp, #0]
    1c94:	4623      	mov	r3, r4
    1c96:	6829      	ldr	r1, [r5, #0]
    1c98:	6868      	ldr	r0, [r5, #4]
    1c9a:	f7ff fd67 	bl	176c <sym_100274>
    1c9e:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
    1ca2:	d906      	bls.n	1cb2 <sym_100279+0xaa>
    1ca4:	f1b8 0f00 	cmp.w	r8, #0
    1ca8:	d003      	beq.n	1cb2 <sym_100279+0xaa>
    1caa:	f858 0c04 	ldr.w	r0, [r8, #-4]
    1cae:	f018 fd9b 	bl	1a7e8 <free>
    1cb2:	3714      	adds	r7, #20
    1cb4:	46bd      	mov	sp, r7
    1cb6:	ecbd 8b02 	vpop	{d8}
    1cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cbe:	f8d9 0018 	ldr.w	r0, [r9, #24]
    1cc2:	00c0      	lsls	r0, r0, #3
    1cc4:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    1cc8:	d81a      	bhi.n	1d00 <sym_100279+0xf8>
    1cca:	3010      	adds	r0, #16
    1ccc:	ebad 0d00 	sub.w	sp, sp, r0
    1cd0:	69aa      	ldr	r2, [r5, #24]
    1cd2:	f10d 0317 	add.w	r3, sp, #23
    1cd6:	9100      	str	r1, [sp, #0]
    1cd8:	6829      	ldr	r1, [r5, #0]
    1cda:	6868      	ldr	r0, [r5, #4]
    1cdc:	f023 030f 	bic.w	r3, r3, #15
    1ce0:	f7ff fd44 	bl	176c <sym_100274>
    1ce4:	e7db      	b.n	1c9e <sym_100279+0x96>
    1ce6:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
    1cea:	d834      	bhi.n	1d56 <sym_100279+0x14e>
    1cec:	f106 0310 	add.w	r3, r6, #16
    1cf0:	ebad 0d03 	sub.w	sp, sp, r3
    1cf4:	f10d 0817 	add.w	r8, sp, #23
    1cf8:	f028 080f 	bic.w	r8, r8, #15
    1cfc:	4641      	mov	r1, r8
    1cfe:	e7c4      	b.n	1c8a <sym_100279+0x82>
    1d00:	3010      	adds	r0, #16
    1d02:	edc7 0a01 	vstr	s1, [r7, #4]
    1d06:	ed87 0a02 	vstr	s0, [r7, #8]
    1d0a:	60f9      	str	r1, [r7, #12]
    1d0c:	f018 fd64 	bl	1a7d8 <malloc>
    1d10:	ed97 0a02 	vldr	s0, [r7, #8]
    1d14:	edd7 0a01 	vldr	s1, [r7, #4]
    1d18:	68f9      	ldr	r1, [r7, #12]
    1d1a:	b118      	cbz	r0, 1d24 <sym_100279+0x11c>
    1d1c:	f020 040f 	bic.w	r4, r0, #15
    1d20:	60e0      	str	r0, [r4, #12]
    1d22:	3410      	adds	r4, #16
    1d24:	f8d9 3014 	ldr.w	r3, [r9, #20]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d1b1      	bne.n	1c90 <sym_100279+0x88>
    1d2c:	f8d9 3018 	ldr.w	r3, [r9, #24]
    1d30:	9100      	str	r1, [sp, #0]
    1d32:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    1d36:	69aa      	ldr	r2, [r5, #24]
    1d38:	4623      	mov	r3, r4
    1d3a:	6829      	ldr	r1, [r5, #0]
    1d3c:	6868      	ldr	r0, [r5, #4]
    1d3e:	f7ff fd15 	bl	176c <sym_100274>
    1d42:	f5b9 3f00 	cmp.w	r9, #131072	; 0x20000
    1d46:	d9aa      	bls.n	1c9e <sym_100279+0x96>
    1d48:	2c00      	cmp	r4, #0
    1d4a:	d0a8      	beq.n	1c9e <sym_100279+0x96>
    1d4c:	f854 0c04 	ldr.w	r0, [r4, #-4]
    1d50:	f018 fd4a 	bl	1a7e8 <free>
    1d54:	e7a3      	b.n	1c9e <sym_100279+0x96>
    1d56:	f106 0010 	add.w	r0, r6, #16
    1d5a:	edc7 0a02 	vstr	s1, [r7, #8]
    1d5e:	ed87 0a03 	vstr	s0, [r7, #12]
    1d62:	f018 fd39 	bl	1a7d8 <malloc>
    1d66:	ed97 0a03 	vldr	s0, [r7, #12]
    1d6a:	edd7 0a02 	vldr	s1, [r7, #8]
    1d6e:	b350      	cbz	r0, 1dc6 <sym_100279+0x1be>
    1d70:	f020 080f 	bic.w	r8, r0, #15
    1d74:	f108 0810 	add.w	r8, r8, #16
    1d78:	f848 0c04 	str.w	r0, [r8, #-4]
    1d7c:	e9d4 1600 	ldrd	r1, r6, [r4]
    1d80:	00f6      	lsls	r6, r6, #3
    1d82:	b9e1      	cbnz	r1, 1dbe <sym_100279+0x1b6>
    1d84:	4641      	mov	r1, r8
    1d86:	e780      	b.n	1c8a <sym_100279+0x82>
    1d88:	eef0 1a67 	vmov.f32	s3, s15
    1d8c:	eef0 0a48 	vmov.f32	s1, s16
    1d90:	eeb0 0a68 	vmov.f32	s0, s17
    1d94:	f003 f960 	bl	5058 <__mulsc3>
    1d98:	e771      	b.n	1c7e <sym_100279+0x76>
    1d9a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1d9e:	f003 f95b 	bl	5058 <__mulsc3>
    1da2:	eeb0 1a40 	vmov.f32	s2, s0
    1da6:	eef0 7a60 	vmov.f32	s15, s1
    1daa:	e75a      	b.n	1c62 <sym_100279+0x5a>
    1dac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1db0:	f003 f952 	bl	5058 <__mulsc3>
    1db4:	eef0 8a40 	vmov.f32	s17, s0
    1db8:	eeb0 8a60 	vmov.f32	s16, s1
    1dbc:	e73d      	b.n	1c3a <sym_100279+0x32>
    1dbe:	4641      	mov	r1, r8
    1dc0:	f04f 0800 	mov.w	r8, #0
    1dc4:	e761      	b.n	1c8a <sym_100279+0x82>
    1dc6:	4680      	mov	r8, r0
    1dc8:	e7d8      	b.n	1d7c <sym_100279+0x174>
    1dca:	bf00      	nop
    1dcc:	00000000 	.word	0x00000000

00001dd0 <sym_100273>:
    1dd0:	6803      	ldr	r3, [r0, #0]
    1dd2:	6842      	ldr	r2, [r0, #4]
    1dd4:	681b      	ldr	r3, [r3, #0]
    1dd6:	ed92 7a00 	vldr	s14, [r2]
    1dda:	edd3 7a05 	vldr	s15, [r3, #20]
    1dde:	ee67 7a87 	vmul.f32	s15, s15, s14
    1de2:	edc3 7a05 	vstr	s15, [r3, #20]
    1de6:	6803      	ldr	r3, [r0, #0]
    1de8:	6842      	ldr	r2, [r0, #4]
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	ed92 7a00 	vldr	s14, [r2]
    1df0:	edd3 7a06 	vldr	s15, [r3, #24]
    1df4:	ee67 7a87 	vmul.f32	s15, s15, s14
    1df8:	edc3 7a06 	vstr	s15, [r3, #24]
    1dfc:	6803      	ldr	r3, [r0, #0]
    1dfe:	6842      	ldr	r2, [r0, #4]
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	ed92 7a00 	vldr	s14, [r2]
    1e06:	edd3 7a07 	vldr	s15, [r3, #28]
    1e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e0e:	edc3 7a07 	vstr	s15, [r3, #28]
    1e12:	6803      	ldr	r3, [r0, #0]
    1e14:	6842      	ldr	r2, [r0, #4]
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	ed92 7a00 	vldr	s14, [r2]
    1e1c:	edd3 7a08 	vldr	s15, [r3, #32]
    1e20:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e24:	edc3 7a08 	vstr	s15, [r3, #32]
    1e28:	6803      	ldr	r3, [r0, #0]
    1e2a:	6842      	ldr	r2, [r0, #4]
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	ed92 7a00 	vldr	s14, [r2]
    1e32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    1e36:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    1e3e:	6803      	ldr	r3, [r0, #0]
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	6842      	ldr	r2, [r0, #4]
    1e44:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    1e48:	ed92 7a00 	vldr	s14, [r2]
    1e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e50:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    1e54:	6803      	ldr	r3, [r0, #0]
    1e56:	6842      	ldr	r2, [r0, #4]
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	ed92 7a00 	vldr	s14, [r2]
    1e5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    1e62:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e66:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    1e6a:	6803      	ldr	r3, [r0, #0]
    1e6c:	6842      	ldr	r2, [r0, #4]
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	ed92 7a00 	vldr	s14, [r2]
    1e74:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    1e78:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    1e80:	6803      	ldr	r3, [r0, #0]
    1e82:	6842      	ldr	r2, [r0, #4]
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	ed92 7a00 	vldr	s14, [r2]
    1e8a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    1e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    1e96:	6803      	ldr	r3, [r0, #0]
    1e98:	6842      	ldr	r2, [r0, #4]
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	ed92 7a00 	vldr	s14, [r2]
    1ea0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
    1ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ea8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    1eac:	6803      	ldr	r3, [r0, #0]
    1eae:	6842      	ldr	r2, [r0, #4]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    1eb6:	ed92 7a00 	vldr	s14, [r2]
    1eba:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ebe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    1ec2:	6803      	ldr	r3, [r0, #0]
    1ec4:	6842      	ldr	r2, [r0, #4]
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	ed92 7a00 	vldr	s14, [r2]
    1ecc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    1ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ed4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    1ed8:	6803      	ldr	r3, [r0, #0]
    1eda:	6842      	ldr	r2, [r0, #4]
    1edc:	681b      	ldr	r3, [r3, #0]
    1ede:	ed92 7a00 	vldr	s14, [r2]
    1ee2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    1ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
    1eea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    1eee:	6803      	ldr	r3, [r0, #0]
    1ef0:	6842      	ldr	r2, [r0, #4]
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	ed92 7a00 	vldr	s14, [r2]
    1ef8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    1efc:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f00:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    1f04:	6803      	ldr	r3, [r0, #0]
    1f06:	6842      	ldr	r2, [r0, #4]
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	ed92 7a00 	vldr	s14, [r2]
    1f0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
    1f12:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f16:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    1f1a:	6803      	ldr	r3, [r0, #0]
    1f1c:	6842      	ldr	r2, [r0, #4]
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	ed92 7a00 	vldr	s14, [r2]
    1f24:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
    1f28:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f2c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    1f30:	6803      	ldr	r3, [r0, #0]
    1f32:	6842      	ldr	r2, [r0, #4]
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	ed92 7a00 	vldr	s14, [r2]
    1f3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
    1f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f42:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    1f46:	6803      	ldr	r3, [r0, #0]
    1f48:	6842      	ldr	r2, [r0, #4]
    1f4a:	681b      	ldr	r3, [r3, #0]
    1f4c:	ed92 7a00 	vldr	s14, [r2]
    1f50:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
    1f54:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f58:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    1f5c:	6803      	ldr	r3, [r0, #0]
    1f5e:	6842      	ldr	r2, [r0, #4]
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	ed92 7a00 	vldr	s14, [r2]
    1f66:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
    1f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f6e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    1f72:	6803      	ldr	r3, [r0, #0]
    1f74:	6842      	ldr	r2, [r0, #4]
    1f76:	681b      	ldr	r3, [r3, #0]
    1f78:	ed92 7a00 	vldr	s14, [r2]
    1f7c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    1f80:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f84:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    1f88:	6803      	ldr	r3, [r0, #0]
    1f8a:	6842      	ldr	r2, [r0, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	ed92 7a00 	vldr	s14, [r2]
    1f92:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
    1f96:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f9a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    1f9e:	6803      	ldr	r3, [r0, #0]
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	6842      	ldr	r2, [r0, #4]
    1fa4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    1fa8:	ed92 7a00 	vldr	s14, [r2]
    1fac:	ee67 7a87 	vmul.f32	s15, s15, s14
    1fb0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    1fb4:	6803      	ldr	r3, [r0, #0]
    1fb6:	6842      	ldr	r2, [r0, #4]
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	ed92 7a00 	vldr	s14, [r2]
    1fbe:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
    1fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
    1fc6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    1fca:	6803      	ldr	r3, [r0, #0]
    1fcc:	6842      	ldr	r2, [r0, #4]
    1fce:	681b      	ldr	r3, [r3, #0]
    1fd0:	ed92 7a00 	vldr	s14, [r2]
    1fd4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    1fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
    1fdc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    1fe0:	6803      	ldr	r3, [r0, #0]
    1fe2:	6842      	ldr	r2, [r0, #4]
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	ed92 7a00 	vldr	s14, [r2]
    1fea:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
    1fee:	ee67 7a87 	vmul.f32	s15, s15, s14
    1ff2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    1ff6:	6803      	ldr	r3, [r0, #0]
    1ff8:	6842      	ldr	r2, [r0, #4]
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	ed92 7a00 	vldr	s14, [r2]
    2000:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
    2004:	ee67 7a87 	vmul.f32	s15, s15, s14
    2008:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    200c:	6803      	ldr	r3, [r0, #0]
    200e:	6842      	ldr	r2, [r0, #4]
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
    2016:	ed92 7a00 	vldr	s14, [r2]
    201a:	ee67 7a87 	vmul.f32	s15, s15, s14
    201e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    2022:	6803      	ldr	r3, [r0, #0]
    2024:	6842      	ldr	r2, [r0, #4]
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	ed92 7a00 	vldr	s14, [r2]
    202c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
    2030:	ee67 7a87 	vmul.f32	s15, s15, s14
    2034:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    2038:	6803      	ldr	r3, [r0, #0]
    203a:	6842      	ldr	r2, [r0, #4]
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	ed92 7a00 	vldr	s14, [r2]
    2042:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    2046:	ee67 7a87 	vmul.f32	s15, s15, s14
    204a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    204e:	6803      	ldr	r3, [r0, #0]
    2050:	6842      	ldr	r2, [r0, #4]
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	ed92 7a00 	vldr	s14, [r2]
    2058:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
    205c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2060:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    2064:	6803      	ldr	r3, [r0, #0]
    2066:	6842      	ldr	r2, [r0, #4]
    2068:	681b      	ldr	r3, [r3, #0]
    206a:	ed92 7a00 	vldr	s14, [r2]
    206e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
    2072:	ee67 7a87 	vmul.f32	s15, s15, s14
    2076:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    207a:	6803      	ldr	r3, [r0, #0]
    207c:	6842      	ldr	r2, [r0, #4]
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	ed92 7a00 	vldr	s14, [r2]
    2084:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
    2088:	ee67 7a87 	vmul.f32	s15, s15, s14
    208c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    2090:	6803      	ldr	r3, [r0, #0]
    2092:	6842      	ldr	r2, [r0, #4]
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	ed92 7a00 	vldr	s14, [r2]
    209a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    209e:	ee67 7a87 	vmul.f32	s15, s15, s14
    20a2:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
    20a6:	6803      	ldr	r3, [r0, #0]
    20a8:	6842      	ldr	r2, [r0, #4]
    20aa:	681b      	ldr	r3, [r3, #0]
    20ac:	ed92 7a00 	vldr	s14, [r2]
    20b0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
    20b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    20b8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
    20bc:	6803      	ldr	r3, [r0, #0]
    20be:	6842      	ldr	r2, [r0, #4]
    20c0:	681b      	ldr	r3, [r3, #0]
    20c2:	ed92 7a00 	vldr	s14, [r2]
    20c6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    20ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    20ce:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
    20d2:	4770      	bx	lr

000020d4 <sym_100275>:
    20d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20d8:	4681      	mov	r9, r0
    20da:	ed2d 8b0c 	vpush	{d8-d13}
    20de:	2800      	cmp	r0, #0
    20e0:	bfb8      	it	lt
    20e2:	f100 0903 	addlt.w	r9, r0, #3
    20e6:	f029 0903 	bic.w	r9, r9, #3
    20ea:	b087      	sub	sp, #28
    20ec:	f1b9 0f00 	cmp.w	r9, #0
    20f0:	eef0 8a40 	vmov.f32	s17, s0
    20f4:	4692      	mov	sl, r2
    20f6:	eeb0 9a60 	vmov.f32	s18, s1
    20fa:	9004      	str	r0, [sp, #16]
    20fc:	9100      	str	r1, [sp, #0]
    20fe:	9301      	str	r3, [sp, #4]
    2100:	f340 8112 	ble.w	2328 <sym_100275+0x254>
    2104:	2400      	movs	r4, #0
    2106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2108:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
    210c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2110:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2112:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2114:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    2118:	9b00      	ldr	r3, [sp, #0]
    211a:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
    211e:	00db      	lsls	r3, r3, #3
    2120:	3504      	adds	r5, #4
    2122:	eb08 1702 	add.w	r7, r8, r2, lsl #4
    2126:	eb08 06c2 	add.w	r6, r8, r2, lsl #3
    212a:	9305      	str	r3, [sp, #20]
    212c:	f8da 2004 	ldr.w	r2, [sl, #4]
    2130:	1ca0      	adds	r0, r4, #2
    2132:	1ce1      	adds	r1, r4, #3
    2134:	fb02 fe04 	mul.w	lr, r2, r4
    2138:	fb02 f000 	mul.w	r0, r2, r0
    213c:	fb02 f101 	mul.w	r1, r2, r1
    2140:	fb04 2202 	mla	r2, r4, r2, r2
    2144:	ea4f 0cce 	mov.w	ip, lr, lsl #3
    2148:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
    214c:	9a00      	ldr	r2, [sp, #0]
    214e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 24a0 <sym_100275+0x3cc>
    2152:	2a00      	cmp	r2, #0
    2154:	f8da 3000 	ldr.w	r3, [sl]
    2158:	ea4f 00c0 	mov.w	r0, r0, lsl #3
    215c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    2160:	f340 8144 	ble.w	23ec <sym_100275+0x318>
    2164:	eef0 9a48 	vmov.f32	s19, s16
    2168:	eef0 aa48 	vmov.f32	s21, s16
    216c:	eeb0 aa48 	vmov.f32	s20, s16
    2170:	eef0 ba48 	vmov.f32	s23, s16
    2174:	eeb0 ba48 	vmov.f32	s22, s16
    2178:	eef0 0a48 	vmov.f32	s1, s16
    217c:	eeb0 0a48 	vmov.f32	s0, s16
    2180:	eb0e 0203 	add.w	r2, lr, r3
    2184:	9202      	str	r2, [sp, #8]
    2186:	9a05      	ldr	r2, [sp, #20]
    2188:	4418      	add	r0, r3
    218a:	eb03 0e02 	add.w	lr, r3, r2
    218e:	9a01      	ldr	r2, [sp, #4]
    2190:	4419      	add	r1, r3
    2192:	44e6      	add	lr, ip
    2194:	4463      	add	r3, ip
    2196:	f8d2 c000 	ldr.w	ip, [r2]
    219a:	9a02      	ldr	r2, [sp, #8]
    219c:	9403      	str	r4, [sp, #12]
    219e:	461c      	mov	r4, r3
    21a0:	edd4 ca00 	vldr	s25, [r4]
    21a4:	4614      	mov	r4, r2
    21a6:	ed94 ca00 	vldr	s24, [r4]
    21aa:	4604      	mov	r4, r0
    21ac:	edd4 1a00 	vldr	s3, [r4]
    21b0:	460c      	mov	r4, r1
    21b2:	eddc 7a01 	vldr	s15, [ip, #4]
    21b6:	ed93 da01 	vldr	s26, [r3, #4]
    21ba:	ed92 1a01 	vldr	s2, [r2, #4]
    21be:	ed90 2a01 	vldr	s4, [r0, #4]
    21c2:	ed91 3a01 	vldr	s6, [r1, #4]
    21c6:	edd4 2a00 	vldr	s5, [r4]
    21ca:	4664      	mov	r4, ip
    21cc:	ee67 3aec 	vnmul.f32	s7, s15, s25
    21d0:	ed94 7a00 	vldr	s14, [r4]
    21d4:	ee2d 4a27 	vmul.f32	s8, s26, s15
    21d8:	ee67 4a81 	vmul.f32	s9, s15, s2
    21dc:	ee2c 5a67 	vnmul.f32	s10, s24, s15
    21e0:	ee67 5a82 	vmul.f32	s11, s15, s4
    21e4:	ee21 6ae7 	vnmul.f32	s12, s3, s15
    21e8:	ee67 6a83 	vmul.f32	s13, s15, s6
    21ec:	ee62 7ae7 	vnmul.f32	s15, s5, s15
    21f0:	eee7 3a0d 	vfma.f32	s7, s14, s26
    21f4:	eeac 4a87 	vfma.f32	s8, s25, s14
    21f8:	eee7 4a0c 	vfma.f32	s9, s14, s24
    21fc:	eea7 5a01 	vfma.f32	s10, s14, s2
    2200:	eee7 5a21 	vfma.f32	s11, s14, s3
    2204:	eea7 6a02 	vfma.f32	s12, s14, s4
    2208:	eee7 6a22 	vfma.f32	s13, s14, s5
    220c:	eee7 7a03 	vfma.f32	s15, s14, s6
    2210:	3308      	adds	r3, #8
    2212:	459e      	cmp	lr, r3
    2214:	ee70 0aa3 	vadd.f32	s1, s1, s7
    2218:	ee30 0a04 	vadd.f32	s0, s0, s8
    221c:	ee3b ba24 	vadd.f32	s22, s22, s9
    2220:	ee7b ba85 	vadd.f32	s23, s23, s10
    2224:	ee3a aa25 	vadd.f32	s20, s20, s11
    2228:	ee7a aa86 	vadd.f32	s21, s21, s12
    222c:	ee79 9aa6 	vadd.f32	s19, s19, s13
    2230:	ee38 8a27 	vadd.f32	s16, s16, s15
    2234:	f102 0208 	add.w	r2, r2, #8
    2238:	f100 0008 	add.w	r0, r0, #8
    223c:	f101 0108 	add.w	r1, r1, #8
    2240:	f10c 0c08 	add.w	ip, ip, #8
    2244:	d1ab      	bne.n	219e <sym_100275+0xca>
    2246:	9c03      	ldr	r4, [sp, #12]
    2248:	ee60 7aa8 	vmul.f32	s15, s1, s17
    224c:	ee29 7a60 	vnmul.f32	s14, s18, s1
    2250:	eee0 7a09 	vfma.f32	s15, s0, s18
    2254:	eea0 7a28 	vfma.f32	s14, s0, s17
    2258:	eeb4 7a67 	vcmp.f32	s14, s15
    225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2260:	f180 80d3 	bvs.w	240a <sym_100275+0x336>
    2264:	ee6b 0aa8 	vmul.f32	s1, s23, s17
    2268:	ee29 0a6b 	vnmul.f32	s0, s18, s23
    226c:	eeeb 0a09 	vfma.f32	s1, s22, s18
    2270:	eeab 0a28 	vfma.f32	s0, s22, s17
    2274:	ed98 6a01 	vldr	s12, [r8, #4]
    2278:	edd8 6a00 	vldr	s13, [r8]
    227c:	eeb4 0a60 	vcmp.f32	s0, s1
    2280:	ee77 7a86 	vadd.f32	s15, s15, s12
    2284:	ee36 7a87 	vadd.f32	s14, s13, s14
    2288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    228c:	edc8 7a01 	vstr	s15, [r8, #4]
    2290:	ed88 7a00 	vstr	s14, [r8]
    2294:	f180 80f8 	bvs.w	2488 <sym_100275+0x3b4>
    2298:	ee6a 7aa8 	vmul.f32	s15, s21, s17
    229c:	ee29 7a6a 	vnmul.f32	s14, s18, s21
    22a0:	eeea 7a09 	vfma.f32	s15, s20, s18
    22a4:	eeaa 7a28 	vfma.f32	s14, s20, s17
    22a8:	ed96 6a01 	vldr	s12, [r6, #4]
    22ac:	edd6 6a00 	vldr	s13, [r6]
    22b0:	eeb4 7a67 	vcmp.f32	s14, s15
    22b4:	ee70 0a86 	vadd.f32	s1, s1, s12
    22b8:	ee36 0a80 	vadd.f32	s0, s13, s0
    22bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22c0:	edc6 0a01 	vstr	s1, [r6, #4]
    22c4:	ed86 0a00 	vstr	s0, [r6]
    22c8:	f180 80cf 	bvs.w	246a <sym_100275+0x396>
    22cc:	ee68 0a28 	vmul.f32	s1, s16, s17
    22d0:	ee29 0a48 	vnmul.f32	s0, s18, s16
    22d4:	eee9 0a89 	vfma.f32	s1, s19, s18
    22d8:	eea9 0aa8 	vfma.f32	s0, s19, s17
    22dc:	ed97 6a01 	vldr	s12, [r7, #4]
    22e0:	edd7 6a00 	vldr	s13, [r7]
    22e4:	eeb4 0a60 	vcmp.f32	s0, s1
    22e8:	ee77 7a86 	vadd.f32	s15, s15, s12
    22ec:	ee36 7a87 	vadd.f32	s14, s13, s14
    22f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22f4:	edc7 7a01 	vstr	s15, [r7, #4]
    22f8:	ed87 7a00 	vstr	s14, [r7]
    22fc:	f180 80aa 	bvs.w	2454 <sym_100275+0x380>
    2300:	ed95 7a00 	vldr	s14, [r5]
    2304:	ed55 7a01 	vldr	s15, [r5, #-4]
    2308:	ee70 0a87 	vadd.f32	s1, s1, s14
    230c:	ee37 0a80 	vadd.f32	s0, s15, s0
    2310:	3404      	adds	r4, #4
    2312:	45a1      	cmp	r9, r4
    2314:	edc5 0a00 	vstr	s1, [r5]
    2318:	ed05 0a01 	vstr	s0, [r5, #-4]
    231c:	445f      	add	r7, fp
    231e:	445e      	add	r6, fp
    2320:	44d8      	add	r8, fp
    2322:	445d      	add	r5, fp
    2324:	f73f af02 	bgt.w	212c <sym_100275+0x58>
    2328:	9b04      	ldr	r3, [sp, #16]
    232a:	4599      	cmp	r9, r3
    232c:	da56      	bge.n	23dc <sym_100275+0x308>
    232e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2330:	fb03 f409 	mul.w	r4, r3, r9
    2334:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2336:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    233a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    233c:	00dd      	lsls	r5, r3, #3
    233e:	9b00      	ldr	r3, [sp, #0]
    2340:	00de      	lsls	r6, r3, #3
    2342:	f8da 1004 	ldr.w	r1, [sl, #4]
    2346:	9a00      	ldr	r2, [sp, #0]
    2348:	fb01 f109 	mul.w	r1, r1, r9
    234c:	2a00      	cmp	r2, #0
    234e:	eddf 0a54 	vldr	s1, [pc, #336]	; 24a0 <sym_100275+0x3cc>
    2352:	f8da 3000 	ldr.w	r3, [sl]
    2356:	ea4f 00c1 	mov.w	r0, r1, lsl #3
    235a:	dd44      	ble.n	23e6 <sym_100275+0x312>
    235c:	eeb0 0a60 	vmov.f32	s0, s1
    2360:	9a01      	ldr	r2, [sp, #4]
    2362:	1999      	adds	r1, r3, r6
    2364:	6812      	ldr	r2, [r2, #0]
    2366:	4403      	add	r3, r0
    2368:	4401      	add	r1, r0
    236a:	4618      	mov	r0, r3
    236c:	edd3 6a01 	vldr	s13, [r3, #4]
    2370:	edd2 7a01 	vldr	s15, [r2, #4]
    2374:	edd0 5a00 	vldr	s11, [r0]
    2378:	ed92 6a00 	vldr	s12, [r2]
    237c:	ee26 7aa7 	vmul.f32	s14, s13, s15
    2380:	ee67 7ae5 	vnmul.f32	s15, s15, s11
    2384:	eea5 7a86 	vfma.f32	s14, s11, s12
    2388:	eee6 7a26 	vfma.f32	s15, s12, s13
    238c:	3308      	adds	r3, #8
    238e:	4299      	cmp	r1, r3
    2390:	ee30 0a07 	vadd.f32	s0, s0, s14
    2394:	ee70 0aa7 	vadd.f32	s1, s1, s15
    2398:	f102 0208 	add.w	r2, r2, #8
    239c:	d1e5      	bne.n	236a <sym_100275+0x296>
    239e:	ee68 7aa0 	vmul.f32	s15, s17, s1
    23a2:	ee20 7ac9 	vnmul.f32	s14, s1, s18
    23a6:	eee9 7a00 	vfma.f32	s15, s18, s0
    23aa:	eea8 7a80 	vfma.f32	s14, s17, s0
    23ae:	eeb4 7a67 	vcmp.f32	s14, s15
    23b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    23b6:	d633      	bvs.n	2420 <sym_100275+0x34c>
    23b8:	ed94 6a01 	vldr	s12, [r4, #4]
    23bc:	edd4 6a00 	vldr	s13, [r4]
    23c0:	ee77 7a86 	vadd.f32	s15, s15, s12
    23c4:	ee36 7a87 	vadd.f32	s14, s13, s14
    23c8:	9b04      	ldr	r3, [sp, #16]
    23ca:	f109 0901 	add.w	r9, r9, #1
    23ce:	454b      	cmp	r3, r9
    23d0:	edc4 7a01 	vstr	s15, [r4, #4]
    23d4:	ed84 7a00 	vstr	s14, [r4]
    23d8:	442c      	add	r4, r5
    23da:	d1b2      	bne.n	2342 <sym_100275+0x26e>
    23dc:	b007      	add	sp, #28
    23de:	ecbd 8b0c 	vpop	{d8-d13}
    23e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e6:	eeb0 0a60 	vmov.f32	s0, s1
    23ea:	e7d8      	b.n	239e <sym_100275+0x2ca>
    23ec:	eef0 9a48 	vmov.f32	s19, s16
    23f0:	eef0 aa48 	vmov.f32	s21, s16
    23f4:	eeb0 aa48 	vmov.f32	s20, s16
    23f8:	eef0 ba48 	vmov.f32	s23, s16
    23fc:	eeb0 ba48 	vmov.f32	s22, s16
    2400:	eef0 0a48 	vmov.f32	s1, s16
    2404:	eeb0 0a48 	vmov.f32	s0, s16
    2408:	e71e      	b.n	2248 <sym_100275+0x174>
    240a:	eef0 1a49 	vmov.f32	s3, s18
    240e:	eeb0 1a68 	vmov.f32	s2, s17
    2412:	f002 fe21 	bl	5058 <__mulsc3>
    2416:	eeb0 7a40 	vmov.f32	s14, s0
    241a:	eef0 7a60 	vmov.f32	s15, s1
    241e:	e721      	b.n	2264 <sym_100275+0x190>
    2420:	eef0 1a49 	vmov.f32	s3, s18
    2424:	eeb0 1a68 	vmov.f32	s2, s17
    2428:	f002 fe16 	bl	5058 <__mulsc3>
    242c:	ed94 7a01 	vldr	s14, [r4, #4]
    2430:	edd4 7a00 	vldr	s15, [r4]
    2434:	ee70 0a87 	vadd.f32	s1, s1, s14
    2438:	ee37 0a80 	vadd.f32	s0, s15, s0
    243c:	9b04      	ldr	r3, [sp, #16]
    243e:	f109 0901 	add.w	r9, r9, #1
    2442:	4599      	cmp	r9, r3
    2444:	edc4 0a01 	vstr	s1, [r4, #4]
    2448:	ed84 0a00 	vstr	s0, [r4]
    244c:	442c      	add	r4, r5
    244e:	f47f af78 	bne.w	2342 <sym_100275+0x26e>
    2452:	e7c3      	b.n	23dc <sym_100275+0x308>
    2454:	eef0 1a49 	vmov.f32	s3, s18
    2458:	eeb0 1a68 	vmov.f32	s2, s17
    245c:	eef0 0a48 	vmov.f32	s1, s16
    2460:	eeb0 0a69 	vmov.f32	s0, s19
    2464:	f002 fdf8 	bl	5058 <__mulsc3>
    2468:	e74a      	b.n	2300 <sym_100275+0x22c>
    246a:	eef0 1a49 	vmov.f32	s3, s18
    246e:	eeb0 1a68 	vmov.f32	s2, s17
    2472:	eef0 0a6a 	vmov.f32	s1, s21
    2476:	eeb0 0a4a 	vmov.f32	s0, s20
    247a:	f002 fded 	bl	5058 <__mulsc3>
    247e:	eeb0 7a40 	vmov.f32	s14, s0
    2482:	eef0 7a60 	vmov.f32	s15, s1
    2486:	e721      	b.n	22cc <sym_100275+0x1f8>
    2488:	eef0 1a49 	vmov.f32	s3, s18
    248c:	eeb0 1a68 	vmov.f32	s2, s17
    2490:	eef0 0a6b 	vmov.f32	s1, s23
    2494:	eeb0 0a4b 	vmov.f32	s0, s22
    2498:	f002 fdde 	bl	5058 <__mulsc3>
    249c:	e6fc      	b.n	2298 <sym_100275+0x1c4>
    249e:	bf00      	nop
    24a0:	00000000 	.word	0x00000000

000024a4 <sym_100280>:
    24a4:	eddf 1a52 	vldr	s3, [pc, #328]	; 25f0 <sym_100280+0x14c>
    24a8:	eef0 7a60 	vmov.f32	s15, s1
    24ac:	eef0 6a40 	vmov.f32	s13, s0
    24b0:	eee0 7a21 	vfma.f32	s15, s0, s3
    24b4:	eee0 6ae1 	vfms.f32	s13, s1, s3
    24b8:	eef4 7a66 	vcmp.f32	s15, s13
    24bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24c0:	b08b      	sub	sp, #44	; 0x2c
    24c2:	460b      	mov	r3, r1
    24c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24c8:	6806      	ldr	r6, [r0, #0]
    24ca:	6841      	ldr	r1, [r0, #4]
    24cc:	f8d0 8008 	ldr.w	r8, [r0, #8]
    24d0:	6b05      	ldr	r5, [r0, #48]	; 0x30
    24d2:	4691      	mov	r9, r2
    24d4:	681c      	ldr	r4, [r3, #0]
    24d6:	6858      	ldr	r0, [r3, #4]
    24d8:	af02      	add	r7, sp, #8
    24da:	d67b      	bvs.n	25d4 <sym_100280+0x130>
    24dc:	eddf 1a45 	vldr	s3, [pc, #276]	; 25f4 <sym_100280+0x150>
    24e0:	eeb0 0a66 	vmov.f32	s0, s13
    24e4:	eef0 0a67 	vmov.f32	s1, s15
    24e8:	eea7 0ae1 	vfms.f32	s0, s15, s3
    24ec:	eee6 0aa1 	vfma.f32	s1, s13, s3
    24f0:	eeb4 0a60 	vcmp.f32	s0, s1
    24f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24f8:	d65f      	bvs.n	25ba <sym_100280+0x116>
    24fa:	b19c      	cbz	r4, 2524 <sym_100280+0x80>
    24fc:	61be      	str	r6, [r7, #24]
    24fe:	2601      	movs	r6, #1
    2500:	f8d9 3000 	ldr.w	r3, [r9]
    2504:	f107 0218 	add.w	r2, r7, #24
    2508:	9300      	str	r3, [sp, #0]
    250a:	4640      	mov	r0, r8
    250c:	f107 0310 	add.w	r3, r7, #16
    2510:	9601      	str	r6, [sp, #4]
    2512:	61fd      	str	r5, [r7, #28]
    2514:	613c      	str	r4, [r7, #16]
    2516:	617e      	str	r6, [r7, #20]
    2518:	f7ff fddc 	bl	20d4 <sym_100275>
    251c:	3724      	adds	r7, #36	; 0x24
    251e:	46bd      	mov	sp, r7
    2520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2524:	00c0      	lsls	r0, r0, #3
    2526:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    252a:	d81a      	bhi.n	2562 <sym_100280+0xbe>
    252c:	2401      	movs	r4, #1
    252e:	3010      	adds	r0, #16
    2530:	ebad 0d00 	sub.w	sp, sp, r0
    2534:	f8d9 2000 	ldr.w	r2, [r9]
    2538:	f10d 0317 	add.w	r3, sp, #23
    253c:	f023 030f 	bic.w	r3, r3, #15
    2540:	9200      	str	r2, [sp, #0]
    2542:	613b      	str	r3, [r7, #16]
    2544:	f107 0218 	add.w	r2, r7, #24
    2548:	f107 0310 	add.w	r3, r7, #16
    254c:	4640      	mov	r0, r8
    254e:	9401      	str	r4, [sp, #4]
    2550:	61be      	str	r6, [r7, #24]
    2552:	61fd      	str	r5, [r7, #28]
    2554:	617c      	str	r4, [r7, #20]
    2556:	f7ff fdbd 	bl	20d4 <sym_100275>
    255a:	3724      	adds	r7, #36	; 0x24
    255c:	46bd      	mov	sp, r7
    255e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2562:	3010      	adds	r0, #16
    2564:	edc7 0a01 	vstr	s1, [r7, #4]
    2568:	ed87 0a02 	vstr	s0, [r7, #8]
    256c:	60f9      	str	r1, [r7, #12]
    256e:	f018 f933 	bl	1a7d8 <malloc>
    2572:	ed97 0a02 	vldr	s0, [r7, #8]
    2576:	4603      	mov	r3, r0
    2578:	edd7 0a01 	vldr	s1, [r7, #4]
    257c:	68f9      	ldr	r1, [r7, #12]
    257e:	2800      	cmp	r0, #0
    2580:	d0bc      	beq.n	24fc <sym_100280+0x58>
    2582:	61be      	str	r6, [r7, #24]
    2584:	2601      	movs	r6, #1
    2586:	f023 040f 	bic.w	r4, r3, #15
    258a:	60e3      	str	r3, [r4, #12]
    258c:	f8d9 3000 	ldr.w	r3, [r9]
    2590:	f107 0218 	add.w	r2, r7, #24
    2594:	4640      	mov	r0, r8
    2596:	3410      	adds	r4, #16
    2598:	9300      	str	r3, [sp, #0]
    259a:	9601      	str	r6, [sp, #4]
    259c:	f107 0310 	add.w	r3, r7, #16
    25a0:	61fd      	str	r5, [r7, #28]
    25a2:	613c      	str	r4, [r7, #16]
    25a4:	617e      	str	r6, [r7, #20]
    25a6:	f7ff fd95 	bl	20d4 <sym_100275>
    25aa:	f854 0c04 	ldr.w	r0, [r4, #-4]
    25ae:	f018 f91b 	bl	1a7e8 <free>
    25b2:	3724      	adds	r7, #36	; 0x24
    25b4:	46bd      	mov	sp, r7
    25b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    25be:	eef0 0a67 	vmov.f32	s1, s15
    25c2:	eeb0 0a66 	vmov.f32	s0, s13
    25c6:	60b8      	str	r0, [r7, #8]
    25c8:	60f9      	str	r1, [r7, #12]
    25ca:	f002 fd45 	bl	5058 <__mulsc3>
    25ce:	68b8      	ldr	r0, [r7, #8]
    25d0:	68f9      	ldr	r1, [r7, #12]
    25d2:	e792      	b.n	24fa <sym_100280+0x56>
    25d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    25d8:	60b8      	str	r0, [r7, #8]
    25da:	60f9      	str	r1, [r7, #12]
    25dc:	f002 fd3c 	bl	5058 <__mulsc3>
    25e0:	68b8      	ldr	r0, [r7, #8]
    25e2:	eef0 6a40 	vmov.f32	s13, s0
    25e6:	eef0 7a60 	vmov.f32	s15, s1
    25ea:	68f9      	ldr	r1, [r7, #12]
    25ec:	e776      	b.n	24dc <sym_100280+0x38>
    25ee:	bf00      	nop
    25f0:	00000000 	.word	0x00000000
    25f4:	80000000 	.word	0x80000000

000025f8 <sym_100283>:
    25f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25fc:	ed2d 8b02 	vpush	{d8}
    2600:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    2604:	9302      	str	r3, [sp, #8]
    2606:	6843      	ldr	r3, [r0, #4]
    2608:	f20d 169f 	addw	r6, sp, #415	; 0x19f
    260c:	2b01      	cmp	r3, #1
    260e:	4604      	mov	r4, r0
    2610:	460f      	mov	r7, r1
    2612:	edd2 7a00 	vldr	s15, [r2]
    2616:	f026 060f 	bic.w	r6, r6, #15
    261a:	9203      	str	r2, [sp, #12]
    261c:	9304      	str	r3, [sp, #16]
    261e:	f000 81a0 	beq.w	2962 <sym_100283+0x36a>
    2622:	eef5 7a40 	vcmp.f32	s15, #0.0
    2626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    262a:	f000 818c 	beq.w	2946 <sym_100283+0x34e>
    262e:	46a2      	mov	sl, r4
    2630:	687a      	ldr	r2, [r7, #4]
    2632:	68a0      	ldr	r0, [r4, #8]
    2634:	9250      	str	r2, [sp, #320]	; 0x140
    2636:	9211      	str	r2, [sp, #68]	; 0x44
    2638:	9a04      	ldr	r2, [sp, #16]
    263a:	693b      	ldr	r3, [r7, #16]
    263c:	f102 38ff 	add.w	r8, r2, #4294967295
    2640:	683a      	ldr	r2, [r7, #0]
    2642:	6979      	ldr	r1, [r7, #20]
    2644:	9206      	str	r2, [sp, #24]
    2646:	68fa      	ldr	r2, [r7, #12]
    2648:	f8d4 9000 	ldr.w	r9, [r4]
    264c:	9001      	str	r0, [sp, #4]
    264e:	902a      	str	r0, [sp, #168]	; 0xa8
    2650:	9207      	str	r2, [sp, #28]
    2652:	69a0      	ldr	r0, [r4, #24]
    2654:	69ba      	ldr	r2, [r7, #24]
    2656:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    265a:	9353      	str	r3, [sp, #332]	; 0x14c
    265c:	f10d 0eac 	add.w	lr, sp, #172	; 0xac
    2660:	f109 0308 	add.w	r3, r9, #8
    2664:	9005      	str	r0, [sp, #20]
    2666:	9154      	str	r1, [sp, #336]	; 0x150
    2668:	9328      	str	r3, [sp, #160]	; 0xa0
    266a:	9208      	str	r2, [sp, #32]
    266c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    2670:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2674:	f04f 0b01 	mov.w	fp, #1
    2678:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
    267c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    2680:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    2684:	2200      	movs	r2, #0
    2686:	9b05      	ldr	r3, [sp, #20]
    2688:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
    268c:	9331      	str	r3, [sp, #196]	; 0xc4
    268e:	9233      	str	r2, [sp, #204]	; 0xcc
    2690:	9334      	str	r3, [sp, #208]	; 0xd0
    2692:	ad57      	add	r5, sp, #348	; 0x15c
    2694:	f10d 0ca0 	add.w	ip, sp, #160	; 0xa0
    2698:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    269e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    26a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    26aa:	9801      	ldr	r0, [sp, #4]
    26ac:	6029      	str	r1, [r5, #0]
    26ae:	2800      	cmp	r0, #0
    26b0:	f340 8198 	ble.w	29e4 <sym_100283+0x3ec>
    26b4:	4605      	mov	r5, r0
    26b6:	f8df b3ec 	ldr.w	fp, [pc, #1004]	; 2aa4 <sym_100283+0x4ac>
    26ba:	9a02      	ldr	r2, [sp, #8]
    26bc:	f8db 0000 	ldr.w	r0, [fp]
    26c0:	f8db 1004 	ldr.w	r1, [fp, #4]
    26c4:	4613      	mov	r3, r2
    26c6:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    26ca:	6018      	str	r0, [r3, #0]
    26cc:	6059      	str	r1, [r3, #4]
    26ce:	3308      	adds	r3, #8
    26d0:	4293      	cmp	r3, r2
    26d2:	d1fa      	bne.n	26ca <sym_100283+0xd2>
    26d4:	ad35      	add	r5, sp, #212	; 0xd4
    26d6:	46aa      	mov	sl, r5
    26d8:	9b50      	ldr	r3, [sp, #320]	; 0x140
    26da:	9a53      	ldr	r2, [sp, #332]	; 0x14c
    26dc:	9954      	ldr	r1, [sp, #336]	; 0x150
    26de:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    26e2:	9309      	str	r3, [sp, #36]	; 0x24
    26e4:	9319      	str	r3, [sp, #100]	; 0x64
    26e6:	920a      	str	r2, [sp, #40]	; 0x28
    26e8:	921c      	str	r2, [sp, #112]	; 0x70
    26ea:	910b      	str	r1, [sp, #44]	; 0x2c
    26ec:	911d      	str	r1, [sp, #116]	; 0x74
    26ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    26f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    26fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2702:	9802      	ldr	r0, [sp, #8]
    2704:	9321      	str	r3, [sp, #132]	; 0x84
    2706:	9b07      	ldr	r3, [sp, #28]
    2708:	f8dc c000 	ldr.w	ip, [ip]
    270c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    270e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2710:	900c      	str	r0, [sp, #48]	; 0x30
    2712:	9323      	str	r3, [sp, #140]	; 0x8c
    2714:	9806      	ldr	r0, [sp, #24]
    2716:	9b08      	ldr	r3, [sp, #32]
    2718:	f8c5 c000 	str.w	ip, [r5]
    271c:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
    2720:	9020      	str	r0, [sp, #128]	; 0x80
    2722:	9224      	str	r2, [sp, #144]	; 0x90
    2724:	9125      	str	r1, [sp, #148]	; 0x94
    2726:	9326      	str	r3, [sp, #152]	; 0x98
    2728:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    272c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2730:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    2734:	9d01      	ldr	r5, [sp, #4]
    2736:	950e      	str	r5, [sp, #56]	; 0x38
    2738:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    273c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    2740:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2744:	ed9b 0a02 	vldr	s0, [fp, #8]
    2748:	aa0c      	add	r2, sp, #48	; 0x30
    274a:	eddb 0a03 	vldr	s1, [fp, #12]
    274e:	f8ce c000 	str.w	ip, [lr]
    2752:	a920      	add	r1, sp, #128	; 0x80
    2754:	a842      	add	r0, sp, #264	; 0x108
    2756:	f7ff fea5 	bl	24a4 <sym_100280>
    275a:	2d00      	cmp	r5, #0
    275c:	6822      	ldr	r2, [r4, #0]
    275e:	dd1d      	ble.n	279c <sym_100283+0x1a4>
    2760:	9802      	ldr	r0, [sp, #8]
    2762:	9d01      	ldr	r5, [sp, #4]
    2764:	4603      	mov	r3, r0
    2766:	1d01      	adds	r1, r0, #4
    2768:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    276c:	ed93 6a01 	vldr	s12, [r3, #4]
    2770:	edd2 7a01 	vldr	s15, [r2, #4]
    2774:	ed11 7a01 	vldr	s14, [r1, #-4]
    2778:	edd2 6a00 	vldr	s13, [r2]
    277c:	ee77 7a86 	vadd.f32	s15, s15, s12
    2780:	ee37 7a26 	vadd.f32	s14, s14, s13
    2784:	3308      	adds	r3, #8
    2786:	4298      	cmp	r0, r3
    2788:	f101 0108 	add.w	r1, r1, #8
    278c:	ed01 7a03 	vstr	s14, [r1, #-12]
    2790:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    2794:	ed43 7a01 	vstr	s15, [r3, #-4]
    2798:	d1e8      	bne.n	276c <sym_100283+0x174>
    279a:	6822      	ldr	r2, [r4, #0]
    279c:	9b03      	ldr	r3, [sp, #12]
    279e:	ed93 8a00 	vldr	s16, [r3]
    27a2:	edd3 8a01 	vldr	s17, [r3, #4]
    27a6:	68a3      	ldr	r3, [r4, #8]
    27a8:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
    27ac:	2b00      	cmp	r3, #0
    27ae:	edcd 8a36 	vstr	s17, [sp, #216]	; 0xd8
    27b2:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
    27b6:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
    27ba:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
    27be:	edcd 8a53 	vstr	s17, [sp, #332]	; 0x14c
    27c2:	dd2b      	ble.n	281c <sym_100283+0x224>
    27c4:	4614      	mov	r4, r2
    27c6:	9902      	ldr	r1, [sp, #8]
    27c8:	f102 0a04 	add.w	sl, r2, #4
    27cc:	1d0d      	adds	r5, r1, #4
    27ce:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    27d2:	ed15 1a01 	vldr	s2, [r5, #-4]
    27d6:	edd5 1a00 	vldr	s3, [r5]
    27da:	ee21 7a28 	vmul.f32	s14, s2, s17
    27de:	ee68 7ae1 	vnmul.f32	s15, s17, s3
    27e2:	eea8 7a21 	vfma.f32	s14, s16, s3
    27e6:	eee8 7a01 	vfma.f32	s15, s16, s2
    27ea:	eeb4 7a67 	vcmp.f32	s14, s15
    27ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27f2:	f180 8129 	bvs.w	2a48 <sym_100283+0x450>
    27f6:	edd4 6a01 	vldr	s13, [r4, #4]
    27fa:	ed1a 6a01 	vldr	s12, [sl, #-4]
    27fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
    2802:	ee76 7a67 	vsub.f32	s15, s12, s15
    2806:	3508      	adds	r5, #8
    2808:	45ab      	cmp	fp, r5
    280a:	ed4a 7a01 	vstr	s15, [sl, #-4]
    280e:	ed84 7a01 	vstr	s14, [r4, #4]
    2812:	f50a 7aa0 	add.w	sl, sl, #320	; 0x140
    2816:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    281a:	d1da      	bne.n	27d2 <sym_100283+0x1da>
    281c:	e9d7 4500 	ldrd	r4, r5, [r7]
    2820:	9a03      	ldr	r2, [sp, #12]
    2822:	2100      	movs	r1, #0
    2824:	6813      	ldr	r3, [r2, #0]
    2826:	f8d2 c004 	ldr.w	ip, [r2, #4]
    282a:	4630      	mov	r0, r6
    282c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2830:	9335      	str	r3, [sp, #212]	; 0xd4
    2832:	9351      	str	r3, [sp, #324]	; 0x144
    2834:	9345      	str	r3, [sp, #276]	; 0x114
    2836:	9352      	str	r3, [sp, #328]	; 0x148
    2838:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    283c:	f8cd c118 	str.w	ip, [sp, #280]	; 0x118
    2840:	f8cd c14c 	str.w	ip, [sp, #332]	; 0x14c
    2844:	f01c fde5 	bl	1f412 <memset>
    2848:	2300      	movs	r3, #0
    284a:	429d      	cmp	r5, r3
    284c:	ed9d 8a53 	vldr	s16, [sp, #332]	; 0x14c
    2850:	eddd 8a52 	vldr	s17, [sp, #328]	; 0x148
    2854:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
    2858:	d020      	beq.n	289c <sym_100283+0x2a4>
    285a:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    285e:	dd1d      	ble.n	289c <sym_100283+0x2a4>
    2860:	4637      	mov	r7, r6
    2862:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    2866:	ed94 1a00 	vldr	s2, [r4]
    286a:	edd4 1a01 	vldr	s3, [r4, #4]
    286e:	ee68 7a01 	vmul.f32	s15, s16, s2
    2872:	ee21 7ac8 	vnmul.f32	s14, s3, s16
    2876:	eee8 7aa1 	vfma.f32	s15, s17, s3
    287a:	eea8 7a81 	vfma.f32	s14, s17, s2
    287e:	eef4 7a47 	vcmp.f32	s15, s14
    2882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2886:	f180 80fa 	bvs.w	2a7e <sym_100283+0x486>
    288a:	3408      	adds	r4, #8
    288c:	42a5      	cmp	r5, r4
    288e:	ed87 7a00 	vstr	s14, [r7]
    2892:	edc7 7a01 	vstr	s15, [r7, #4]
    2896:	f107 0708 	add.w	r7, r7, #8
    289a:	d1e4      	bne.n	2866 <sym_100283+0x26e>
    289c:	9b01      	ldr	r3, [sp, #4]
    289e:	2b00      	cmp	r3, #0
    28a0:	dd4b      	ble.n	293a <sym_100283+0x342>
    28a2:	f04f 0b00 	mov.w	fp, #0
    28a6:	9a04      	ldr	r2, [sp, #16]
    28a8:	f1a9 0708 	sub.w	r7, r9, #8
    28ac:	f8dd a008 	ldr.w	sl, [sp, #8]
    28b0:	9b05      	ldr	r3, [sp, #20]
    28b2:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
    28b6:	9a01      	ldr	r2, [sp, #4]
    28b8:	00db      	lsls	r3, r3, #3
    28ba:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
    28be:	ed9a 8a00 	vldr	s16, [sl]
    28c2:	edda 8a01 	vldr	s17, [sl, #4]
    28c6:	f1b8 0f00 	cmp.w	r8, #0
    28ca:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
    28ce:	edcd 8a19 	vstr	s17, [sp, #100]	; 0x64
    28d2:	ed8d 8a22 	vstr	s16, [sp, #136]	; 0x88
    28d6:	edcd 8a23 	vstr	s17, [sp, #140]	; 0x8c
    28da:	ed8d 8a38 	vstr	s16, [sp, #224]	; 0xe0
    28de:	edcd 8a39 	vstr	s17, [sp, #228]	; 0xe4
    28e2:	f10a 0a08 	add.w	sl, sl, #8
    28e6:	dd24      	ble.n	2932 <sym_100283+0x33a>
    28e8:	4635      	mov	r5, r6
    28ea:	eb09 040b 	add.w	r4, r9, fp
    28ee:	ed95 1a00 	vldr	s2, [r5]
    28f2:	edd5 1a01 	vldr	s3, [r5, #4]
    28f6:	ee28 7a81 	vmul.f32	s14, s17, s2
    28fa:	ee61 7ae8 	vnmul.f32	s15, s3, s17
    28fe:	eea8 7a21 	vfma.f32	s14, s16, s3
    2902:	eee8 7a01 	vfma.f32	s15, s16, s2
    2906:	eeb4 7a67 	vcmp.f32	s14, s15
    290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    290e:	d66c      	bvs.n	29ea <sym_100283+0x3f2>
    2910:	ed94 6a03 	vldr	s12, [r4, #12]
    2914:	edd4 6a02 	vldr	s13, [r4, #8]
    2918:	ee36 7a47 	vsub.f32	s14, s12, s14
    291c:	ee76 7ae7 	vsub.f32	s15, s13, s15
    2920:	3408      	adds	r4, #8
    2922:	42a7      	cmp	r7, r4
    2924:	f105 0508 	add.w	r5, r5, #8
    2928:	ed84 7a01 	vstr	s14, [r4, #4]
    292c:	edc4 7a00 	vstr	s15, [r4]
    2930:	d1dd      	bne.n	28ee <sym_100283+0x2f6>
    2932:	4552      	cmp	r2, sl
    2934:	441f      	add	r7, r3
    2936:	449b      	add	fp, r3
    2938:	d1c1      	bne.n	28be <sym_100283+0x2c6>
    293a:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    293e:	ecbd 8b02 	vpop	{d8}
    2942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2946:	edd2 7a01 	vldr	s15, [r2, #4]
    294a:	eef5 7a40 	vcmp.f32	s15, #0.0
    294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2952:	f47f ae6c 	bne.w	262e <sym_100283+0x36>
    2956:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    295a:	ecbd 8b02 	vpop	{d8}
    295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2962:	ed92 7a01 	vldr	s14, [r2, #4]
    2966:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    296a:	eddf 8a4d 	vldr	s17, [pc, #308]	; 2aa0 <sym_100283+0x4a8>
    296e:	6882      	ldr	r2, [r0, #8]
    2970:	ee38 8a67 	vsub.f32	s16, s16, s15
    2974:	2a00      	cmp	r2, #0
    2976:	ee78 8ac7 	vsub.f32	s17, s17, s14
    297a:	6803      	ldr	r3, [r0, #0]
    297c:	dddd      	ble.n	293a <sym_100283+0x342>
    297e:	4698      	mov	r8, r3
    2980:	f04f 0900 	mov.w	r9, #0
    2984:	4646      	mov	r6, r8
    2986:	2700      	movs	r7, #0
    2988:	f108 0504 	add.w	r5, r8, #4
    298c:	ed15 1a01 	vldr	s2, [r5, #-4]
    2990:	edd6 1a01 	vldr	s3, [r6, #4]
    2994:	ee68 7a81 	vmul.f32	s15, s17, s2
    2998:	ee21 7ae8 	vnmul.f32	s14, s3, s17
    299c:	eee8 7a21 	vfma.f32	s15, s16, s3
    29a0:	eea8 7a01 	vfma.f32	s14, s16, s2
    29a4:	eeb4 7a67 	vcmp.f32	s14, s15
    29a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29ac:	d63a      	bvs.n	2a24 <sym_100283+0x42c>
    29ae:	ed05 7a01 	vstr	s14, [r5, #-4]
    29b2:	edc6 7a01 	vstr	s15, [r6, #4]
    29b6:	6863      	ldr	r3, [r4, #4]
    29b8:	3701      	adds	r7, #1
    29ba:	42bb      	cmp	r3, r7
    29bc:	f106 0608 	add.w	r6, r6, #8
    29c0:	f105 0508 	add.w	r5, r5, #8
    29c4:	dce2      	bgt.n	298c <sym_100283+0x394>
    29c6:	68a2      	ldr	r2, [r4, #8]
    29c8:	f109 0901 	add.w	r9, r9, #1
    29cc:	4591      	cmp	r9, r2
    29ce:	dab4      	bge.n	293a <sym_100283+0x342>
    29d0:	2b00      	cmp	r3, #0
    29d2:	f508 78a0 	add.w	r8, r8, #320	; 0x140
    29d6:	dcd5      	bgt.n	2984 <sym_100283+0x38c>
    29d8:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    29dc:	ecbd 8b02 	vpop	{d8}
    29e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29e4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 2aa4 <sym_100283+0x4ac>
    29e8:	e674      	b.n	26d4 <sym_100283+0xdc>
    29ea:	eef0 0a68 	vmov.f32	s1, s17
    29ee:	eeb0 0a48 	vmov.f32	s0, s16
    29f2:	9202      	str	r2, [sp, #8]
    29f4:	9301      	str	r3, [sp, #4]
    29f6:	f002 fb2f 	bl	5058 <__mulsc3>
    29fa:	ed94 7a03 	vldr	s14, [r4, #12]
    29fe:	edd4 7a02 	vldr	s15, [r4, #8]
    2a02:	ee77 0a60 	vsub.f32	s1, s14, s1
    2a06:	ee37 0ac0 	vsub.f32	s0, s15, s0
    2a0a:	3408      	adds	r4, #8
    2a0c:	42bc      	cmp	r4, r7
    2a0e:	9b01      	ldr	r3, [sp, #4]
    2a10:	9a02      	ldr	r2, [sp, #8]
    2a12:	f105 0508 	add.w	r5, r5, #8
    2a16:	edc4 0a01 	vstr	s1, [r4, #4]
    2a1a:	ed84 0a00 	vstr	s0, [r4]
    2a1e:	f47f af66 	bne.w	28ee <sym_100283+0x2f6>
    2a22:	e786      	b.n	2932 <sym_100283+0x33a>
    2a24:	eef0 0a68 	vmov.f32	s1, s17
    2a28:	eeb0 0a48 	vmov.f32	s0, s16
    2a2c:	f002 fb14 	bl	5058 <__mulsc3>
    2a30:	3608      	adds	r6, #8
    2a32:	ed05 0a01 	vstr	s0, [r5, #-4]
    2a36:	ed46 0a01 	vstr	s1, [r6, #-4]
    2a3a:	6863      	ldr	r3, [r4, #4]
    2a3c:	3701      	adds	r7, #1
    2a3e:	429f      	cmp	r7, r3
    2a40:	f105 0508 	add.w	r5, r5, #8
    2a44:	dba2      	blt.n	298c <sym_100283+0x394>
    2a46:	e7be      	b.n	29c6 <sym_100283+0x3ce>
    2a48:	eef0 0a68 	vmov.f32	s1, s17
    2a4c:	eeb0 0a48 	vmov.f32	s0, s16
    2a50:	f002 fb02 	bl	5058 <__mulsc3>
    2a54:	edd4 7a01 	vldr	s15, [r4, #4]
    2a58:	ed1a 7a01 	vldr	s14, [sl, #-4]
    2a5c:	ee77 0ae0 	vsub.f32	s1, s15, s1
    2a60:	ee37 0a40 	vsub.f32	s0, s14, s0
    2a64:	3508      	adds	r5, #8
    2a66:	45ab      	cmp	fp, r5
    2a68:	ed0a 0a01 	vstr	s0, [sl, #-4]
    2a6c:	edc4 0a01 	vstr	s1, [r4, #4]
    2a70:	f50a 7aa0 	add.w	sl, sl, #320	; 0x140
    2a74:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    2a78:	f47f aeab 	bne.w	27d2 <sym_100283+0x1da>
    2a7c:	e6ce      	b.n	281c <sym_100283+0x224>
    2a7e:	eef0 0a48 	vmov.f32	s1, s16
    2a82:	eeb0 0a68 	vmov.f32	s0, s17
    2a86:	f002 fae7 	bl	5058 <__mulsc3>
    2a8a:	3408      	adds	r4, #8
    2a8c:	42ac      	cmp	r4, r5
    2a8e:	f107 0708 	add.w	r7, r7, #8
    2a92:	ed07 0a02 	vstr	s0, [r7, #-8]
    2a96:	ed47 0a01 	vstr	s1, [r7, #-4]
    2a9a:	f47f aee4 	bne.w	2866 <sym_100283+0x26e>
    2a9e:	e6fd      	b.n	289c <sym_100283+0x2a4>
    2aa0:	00000000 	.word	0x00000000
    2aa4:	0001fb24 	.word	0x0001fb24

00002aa8 <sym_100281>:
    2aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2aac:	ed2d 8b04 	vpush	{d8-d9}
    2ab0:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    2ab4:	f20d 13af 	addw	r3, sp, #431	; 0x1af
    2ab8:	f023 030f 	bic.w	r3, r3, #15
    2abc:	ee09 3a10 	vmov	s18, r3
    2ac0:	f002 0b80 	and.w	fp, r2, #128	; 0x80
    2ac4:	f3c2 13c0 	ubfx	r3, r2, #7, #1
    2ac8:	688a      	ldr	r2, [r1, #8]
    2aca:	9303      	str	r3, [sp, #12]
    2acc:	2a01      	cmp	r2, #1
    2ace:	4604      	mov	r4, r0
    2ad0:	680b      	ldr	r3, [r1, #0]
    2ad2:	f000 8316 	beq.w	3102 <sym_100281+0x65a>
    2ad6:	f04f 0e00 	mov.w	lr, #0
    2ada:	2601      	movs	r6, #1
    2adc:	469c      	mov	ip, r3
    2ade:	4605      	mov	r5, r0
    2ae0:	4677      	mov	r7, lr
    2ae2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    2ae6:	f500 5248 	add.w	r2, r0, #12800	; 0x3200
    2aea:	eb0a 0906 	add.w	r9, sl, r6
    2aee:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2db8 <sym_100281+0x310>
    2af2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    2af6:	9204      	str	r2, [sp, #16]
    2af8:	2e01      	cmp	r6, #1
    2afa:	f000 8155 	beq.w	2da8 <sym_100281+0x300>
    2afe:	f8d8 0000 	ldr.w	r0, [r8]
    2b02:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2b06:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
    2b0a:	6010      	str	r0, [r2, #0]
    2b0c:	6051      	str	r1, [r2, #4]
    2b0e:	3208      	adds	r2, #8
    2b10:	42aa      	cmp	r2, r5
    2b12:	d1fa      	bne.n	2b0a <sym_100281+0x62>
    2b14:	f8dc 2000 	ldr.w	r2, [ip]
    2b18:	2e28      	cmp	r6, #40	; 0x28
    2b1a:	602a      	str	r2, [r5, #0]
    2b1c:	f8dc 2004 	ldr.w	r2, [ip, #4]
    2b20:	4630      	mov	r0, r6
    2b22:	606a      	str	r2, [r5, #4]
    2b24:	d015      	beq.n	2b52 <sym_100281+0xaa>
    2b26:	eb0e 0106 	add.w	r1, lr, r6
    2b2a:	19ba      	adds	r2, r7, r6
    2b2c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2b30:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    2b34:	edd1 7a00 	vldr	s15, [r1]
    2b38:	edc2 7a00 	vstr	s15, [r2]
    2b3c:	edd1 7a01 	vldr	s15, [r1, #4]
    2b40:	3001      	adds	r0, #1
    2b42:	2828      	cmp	r0, #40	; 0x28
    2b44:	f101 0108 	add.w	r1, r1, #8
    2b48:	f102 0208 	add.w	r2, r2, #8
    2b4c:	ed42 7a01 	vstr	s15, [r2, #-4]
    2b50:	d1f0      	bne.n	2b34 <sym_100281+0x8c>
    2b52:	3601      	adds	r6, #1
    2b54:	2e29      	cmp	r6, #41	; 0x29
    2b56:	44cc      	add	ip, r9
    2b58:	f505 75a4 	add.w	r5, r5, #328	; 0x148
    2b5c:	f107 0728 	add.w	r7, r7, #40	; 0x28
    2b60:	44d6      	add	lr, sl
    2b62:	d1c9      	bne.n	2af8 <sym_100281+0x50>
    2b64:	ed94 7a01 	vldr	s14, [r4, #4]
    2b68:	edd4 6a00 	vldr	s13, [r4]
    2b6c:	eeb0 8ac7 	vabs.f32	s16, s14
    2b70:	eef0 7ae6 	vabs.f32	s15, s13
    2b74:	eef4 7ac8 	vcmpe.f32	s15, s16
    2b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b7c:	bf58      	it	pl
    2b7e:	eeb0 8a67 	vmovpl.f32	s16, s15
    2b82:	eeb5 8a40 	vcmp.f32	s16, #0.0
    2b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b8a:	d00b      	beq.n	2ba4 <sym_100281+0xfc>
    2b8c:	eec7 7a08 	vdiv.f32	s15, s14, s16
    2b90:	ee86 7a88 	vdiv.f32	s14, s13, s16
    2b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
    2b98:	eee7 7a07 	vfma.f32	s15, s14, s14
    2b9c:	eeb1 7ae7 	vsqrt.f32	s14, s15
    2ba0:	ee28 8a07 	vmul.f32	s16, s16, s14
    2ba4:	4623      	mov	r3, r4
    2ba6:	f504 759c 	add.w	r5, r4, #312	; 0x138
    2baa:	ed93 6a03 	vldr	s12, [r3, #12]
    2bae:	edd3 6a02 	vldr	s13, [r3, #8]
    2bb2:	eef0 7ac6 	vabs.f32	s15, s12
    2bb6:	eeb0 7ae6 	vabs.f32	s14, s13
    2bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bc2:	bf58      	it	pl
    2bc4:	eef0 7a47 	vmovpl.f32	s15, s14
    2bc8:	eef5 7a40 	vcmp.f32	s15, #0.0
    2bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bd0:	f103 0308 	add.w	r3, r3, #8
    2bd4:	d00b      	beq.n	2bee <sym_100281+0x146>
    2bd6:	ee86 7a27 	vdiv.f32	s14, s12, s15
    2bda:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    2bde:	ee27 7a07 	vmul.f32	s14, s14, s14
    2be2:	eea6 7a06 	vfma.f32	s14, s12, s12
    2be6:	eef1 6ac7 	vsqrt.f32	s13, s14
    2bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2bee:	eef4 7a48 	vcmp.f32	s15, s16
    2bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bf6:	fe37 8a88 	vselgt.f32	s16, s15, s16
    2bfa:	429d      	cmp	r5, r3
    2bfc:	d1d5      	bne.n	2baa <sym_100281+0x102>
    2bfe:	f504 7220 	add.w	r2, r4, #640	; 0x280
    2c02:	f504 514d 	add.w	r1, r4, #13120	; 0x3340
    2c06:	f5a2 73a0 	sub.w	r3, r2, #320	; 0x140
    2c0a:	ed93 6a01 	vldr	s12, [r3, #4]
    2c0e:	edd3 6a00 	vldr	s13, [r3]
    2c12:	eef0 7ac6 	vabs.f32	s15, s12
    2c16:	eeb0 7ae6 	vabs.f32	s14, s13
    2c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c22:	bf58      	it	pl
    2c24:	eef0 7a47 	vmovpl.f32	s15, s14
    2c28:	eef5 7a40 	vcmp.f32	s15, #0.0
    2c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c30:	f103 0308 	add.w	r3, r3, #8
    2c34:	d00b      	beq.n	2c4e <sym_100281+0x1a6>
    2c36:	ee86 7a27 	vdiv.f32	s14, s12, s15
    2c3a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    2c3e:	ee27 7a07 	vmul.f32	s14, s14, s14
    2c42:	eea6 7a06 	vfma.f32	s14, s12, s12
    2c46:	eef1 6ac7 	vsqrt.f32	s13, s14
    2c4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2c4e:	eef4 7a48 	vcmp.f32	s15, s16
    2c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c56:	fe37 8a88 	vselgt.f32	s16, s15, s16
    2c5a:	429a      	cmp	r2, r3
    2c5c:	d1d5      	bne.n	2c0a <sym_100281+0x162>
    2c5e:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    2c62:	4291      	cmp	r1, r2
    2c64:	d1cf      	bne.n	2c06 <sym_100281+0x15e>
    2c66:	eeb5 8a40 	vcmp.f32	s16, #0.0
    2c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c6e:	4626      	mov	r6, r4
    2c70:	bf08      	it	eq
    2c72:	eeb7 8a00 	vmoveq.f32	s16, #112	; 0x3f800000  1.0
    2c76:	2700      	movs	r7, #0
    2c78:	eddf 8a4e 	vldr	s17, [pc, #312]	; 2db4 <sym_100281+0x30c>
    2c7c:	edd6 0a01 	vldr	s1, [r6, #4]
    2c80:	ed96 0a00 	vldr	s0, [r6]
    2c84:	eef0 1a68 	vmov.f32	s3, s17
    2c88:	eeb0 1a48 	vmov.f32	s2, s16
    2c8c:	f002 fb1c 	bl	52c8 <__divsc3>
    2c90:	3701      	adds	r7, #1
    2c92:	2f28      	cmp	r7, #40	; 0x28
    2c94:	ed86 0a00 	vstr	s0, [r6]
    2c98:	edc6 0a01 	vstr	s1, [r6, #4]
    2c9c:	d017      	beq.n	2cce <sym_100281+0x226>
    2c9e:	46b0      	mov	r8, r6
    2ca0:	edd8 0a03 	vldr	s1, [r8, #12]
    2ca4:	ed98 0a02 	vldr	s0, [r8, #8]
    2ca8:	eef0 1a68 	vmov.f32	s3, s17
    2cac:	eeb0 1a48 	vmov.f32	s2, s16
    2cb0:	f002 fb0a 	bl	52c8 <__divsc3>
    2cb4:	f108 0808 	add.w	r8, r8, #8
    2cb8:	4545      	cmp	r5, r8
    2cba:	ed88 0a00 	vstr	s0, [r8]
    2cbe:	edc8 0a01 	vstr	s1, [r8, #4]
    2cc2:	d1ed      	bne.n	2ca0 <sym_100281+0x1f8>
    2cc4:	f506 76a4 	add.w	r6, r6, #328	; 0x148
    2cc8:	f505 75a0 	add.w	r5, r5, #320	; 0x140
    2ccc:	e7d6      	b.n	2c7c <sym_100281+0x1d4>
    2cce:	f44f 729c 	mov.w	r2, #312	; 0x138
    2cd2:	2100      	movs	r1, #0
    2cd4:	a81a      	add	r0, sp, #104	; 0x68
    2cd6:	f01c fb9c 	bl	1f412 <memset>
    2cda:	4620      	mov	r0, r4
    2cdc:	a91a      	add	r1, sp, #104	; 0x68
    2cde:	f7fd fde7 	bl	8b0 <sym_100278>
    2ce2:	4623      	mov	r3, r4
    2ce4:	f504 554a 	add.w	r5, r4, #12928	; 0x3280
    2ce8:	9a04      	ldr	r2, [sp, #16]
    2cea:	3520      	adds	r5, #32
    2cec:	6819      	ldr	r1, [r3, #0]
    2cee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2cf2:	f842 1b04 	str.w	r1, [r2], #4
    2cf6:	4295      	cmp	r5, r2
    2cf8:	d1f8      	bne.n	2cec <sym_100281+0x244>
    2cfa:	462a      	mov	r2, r5
    2cfc:	4623      	mov	r3, r4
    2cfe:	f504 504c 	add.w	r0, r4, #13056	; 0x3300
    2d02:	303c      	adds	r0, #60	; 0x3c
    2d04:	6899      	ldr	r1, [r3, #8]
    2d06:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2d0a:	f842 1b04 	str.w	r1, [r2], #4
    2d0e:	4290      	cmp	r0, r2
    2d10:	d1f8      	bne.n	2d04 <sym_100281+0x25c>
    2d12:	f1bb 0f00 	cmp.w	fp, #0
    2d16:	d151      	bne.n	2dbc <sym_100281+0x314>
    2d18:	ab0a      	add	r3, sp, #40	; 0x28
    2d1a:	f504 5640 	add.w	r6, r4, #12288	; 0x3000
    2d1e:	af13      	add	r7, sp, #76	; 0x4c
    2d20:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    2d24:	9302      	str	r3, [sp, #8]
    2d26:	4629      	mov	r1, r5
    2d28:	9400      	str	r4, [sp, #0]
    2d2a:	9d03      	ldr	r5, [sp, #12]
    2d2c:	9c04      	ldr	r4, [sp, #16]
    2d2e:	462b      	mov	r3, r5
    2d30:	221e      	movs	r2, #30
    2d32:	4620      	mov	r0, r4
    2d34:	f7fe fa2e 	bl	1194 <sym_100277>
    2d38:	edd6 5a80 	vldr	s11, [r6, #512]	; 0x200
    2d3c:	ed96 6a81 	vldr	s12, [r6, #516]	; 0x204
    2d40:	edd6 6a82 	vldr	s13, [r6, #520]	; 0x208
    2d44:	ed96 7a83 	vldr	s14, [r6, #524]	; 0x20c
    2d48:	edd6 7a84 	vldr	s15, [r6, #528]	; 0x210
    2d4c:	4603      	mov	r3, r0
    2d4e:	ee65 5a88 	vmul.f32	s11, s11, s16
    2d52:	ee26 6a08 	vmul.f32	s12, s12, s16
    2d56:	ee66 6a88 	vmul.f32	s13, s13, s16
    2d5a:	ee27 7a08 	vmul.f32	s14, s14, s16
    2d5e:	ee67 7a88 	vmul.f32	s15, s15, s16
    2d62:	9902      	ldr	r1, [sp, #8]
    2d64:	f886 333c 	strb.w	r3, [r6, #828]	; 0x33c
    2d68:	ed89 8a00 	vstr	s16, [r9]
    2d6c:	edc6 5a80 	vstr	s11, [r6, #512]	; 0x200
    2d70:	ed86 6a81 	vstr	s12, [r6, #516]	; 0x204
    2d74:	edc6 6a82 	vstr	s13, [r6, #520]	; 0x208
    2d78:	ed86 7a83 	vstr	s14, [r6, #524]	; 0x20c
    2d7c:	edc6 7a84 	vstr	s15, [r6, #528]	; 0x210
    2d80:	603c      	str	r4, [r7, #0]
    2d82:	a81a      	add	r0, sp, #104	; 0x68
    2d84:	911c      	str	r1, [sp, #112]	; 0x70
    2d86:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
    2d8a:	971a      	str	r7, [sp, #104]	; 0x68
    2d8c:	941d      	str	r4, [sp, #116]	; 0x74
    2d8e:	f7ff f81f 	bl	1dd0 <sym_100273>
    2d92:	2301      	movs	r3, #1
    2d94:	f886 533e 	strb.w	r5, [r6, #830]	; 0x33e
    2d98:	f886 333d 	strb.w	r3, [r6, #829]	; 0x33d
    2d9c:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    2da0:	ecbd 8b04 	vpop	{d8-d9}
    2da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2da8:	681a      	ldr	r2, [r3, #0]
    2daa:	4630      	mov	r0, r6
    2dac:	6022      	str	r2, [r4, #0]
    2dae:	685a      	ldr	r2, [r3, #4]
    2db0:	6062      	str	r2, [r4, #4]
    2db2:	e6b8      	b.n	2b26 <sym_100281+0x7e>
    2db4:	00000000 	.word	0x00000000
    2db8:	0001fb24 	.word	0x0001fb24
    2dbc:	f8df 83a4 	ldr.w	r8, [pc, #932]	; 3164 <sym_100281+0x6bc>
    2dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2dc4:	2100      	movs	r1, #0
    2dc6:	ee19 0a10 	vmov	r0, s18
    2dca:	f01c fb22 	bl	1f412 <memset>
    2dce:	edd8 7a03 	vldr	s15, [r8, #12]
    2dd2:	ed98 7a02 	vldr	s14, [r8, #8]
    2dd6:	f204 5c24 	addw	ip, r4, #1316	; 0x524
    2dda:	f504 67cd 	add.w	r7, r4, #1640	; 0x668
    2dde:	f204 606c 	addw	r0, r4, #1644	; 0x66c
    2de2:	f504 61f6 	add.w	r1, r4, #1968	; 0x7b0
    2de6:	f204 72b4 	addw	r2, r4, #1972	; 0x7b4
    2dea:	f604 03f8 	addw	r3, r4, #2296	; 0x8f8
    2dee:	f504 6ea4 	add.w	lr, r4, #1312	; 0x520
    2df2:	edc4 7a01 	vstr	s15, [r4, #4]
    2df6:	ed84 7a00 	vstr	s14, [r4]
    2dfa:	ed84 7a52 	vstr	s14, [r4, #328]	; 0x148
    2dfe:	edc4 7a53 	vstr	s15, [r4, #332]	; 0x14c
    2e02:	ed84 7aa4 	vstr	s14, [r4, #656]	; 0x290
    2e06:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
    2e0a:	ed84 7af6 	vstr	s14, [r4, #984]	; 0x3d8
    2e0e:	edc4 7af7 	vstr	s15, [r4, #988]	; 0x3dc
    2e12:	f604 09fc 	addw	r9, r4, #2300	; 0x8fc
    2e16:	ed8e 7a00 	vstr	s14, [lr]
    2e1a:	edcc 7a00 	vstr	s15, [ip]
    2e1e:	ed87 7a00 	vstr	s14, [r7]
    2e22:	edc0 7a00 	vstr	s15, [r0]
    2e26:	ed81 7a00 	vstr	s14, [r1]
    2e2a:	edc2 7a00 	vstr	s15, [r2]
    2e2e:	ed83 7a00 	vstr	s14, [r3]
    2e32:	f504 6324 	add.w	r3, r4, #2624	; 0xa40
    2e36:	edc9 7a00 	vstr	s15, [r9]
    2e3a:	ed83 7a00 	vstr	s14, [r3]
    2e3e:	f604 2344 	addw	r3, r4, #2628	; 0xa44
    2e42:	edc3 7a00 	vstr	s15, [r3]
    2e46:	f604 3388 	addw	r3, r4, #2952	; 0xb88
    2e4a:	ed83 7a00 	vstr	s14, [r3]
    2e4e:	f604 338c 	addw	r3, r4, #2956	; 0xb8c
    2e52:	edc3 7a00 	vstr	s15, [r3]
    2e56:	f504 634d 	add.w	r3, r4, #3280	; 0xcd0
    2e5a:	ed83 7a00 	vstr	s14, [r3]
    2e5e:	f604 43d4 	addw	r3, r4, #3284	; 0xcd4
    2e62:	edc3 7a00 	vstr	s15, [r3]
    2e66:	f604 6318 	addw	r3, r4, #3608	; 0xe18
    2e6a:	ed83 7a00 	vstr	s14, [r3]
    2e6e:	f604 631c 	addw	r3, r4, #3612	; 0xe1c
    2e72:	edc3 7a00 	vstr	s15, [r3]
    2e76:	f504 6376 	add.w	r3, r4, #3936	; 0xf60
    2e7a:	ed83 7a00 	vstr	s14, [r3]
    2e7e:	f604 7364 	addw	r3, r4, #3940	; 0xf64
    2e82:	f504 5a80 	add.w	sl, r4, #4096	; 0x1000
    2e86:	edc3 7a00 	vstr	s15, [r3]
    2e8a:	f504 53a4 	add.w	r3, r4, #5248	; 0x1480
    2e8e:	ed8a 7a2a 	vstr	s14, [sl, #168]	; 0xa8
    2e92:	edca 7a2b 	vstr	s15, [sl, #172]	; 0xac
    2e96:	ed8a 7a7c 	vstr	s14, [sl, #496]	; 0x1f0
    2e9a:	edca 7a7d 	vstr	s15, [sl, #500]	; 0x1f4
    2e9e:	ed8a 7ace 	vstr	s14, [sl, #824]	; 0x338
    2ea2:	edca 7acf 	vstr	s15, [sl, #828]	; 0x33c
    2ea6:	ed83 7a00 	vstr	s14, [r3]
    2eaa:	f20a 4384 	addw	r3, sl, #1156	; 0x484
    2eae:	edc3 7a00 	vstr	s15, [r3]
    2eb2:	f50a 63b9 	add.w	r3, sl, #1480	; 0x5c8
    2eb6:	ed83 7a00 	vstr	s14, [r3]
    2eba:	f20a 53cc 	addw	r3, sl, #1484	; 0x5cc
    2ebe:	edc3 7a00 	vstr	s15, [r3]
    2ec2:	f50a 63e2 	add.w	r3, sl, #1808	; 0x710
    2ec6:	ed83 7a00 	vstr	s14, [r3]
    2eca:	f20a 7314 	addw	r3, sl, #1812	; 0x714
    2ece:	edc3 7a00 	vstr	s15, [r3]
    2ed2:	f60a 0358 	addw	r3, sl, #2136	; 0x858
    2ed6:	ed83 7a00 	vstr	s14, [r3]
    2eda:	f60a 035c 	addw	r3, sl, #2140	; 0x85c
    2ede:	edc3 7a00 	vstr	s15, [r3]
    2ee2:	f504 53cd 	add.w	r3, r4, #6560	; 0x19a0
    2ee6:	ed83 7a00 	vstr	s14, [r3]
    2eea:	f60a 13a4 	addw	r3, sl, #2468	; 0x9a4
    2eee:	edc3 7a00 	vstr	s15, [r3]
    2ef2:	f60a 23e8 	addw	r3, sl, #2792	; 0xae8
    2ef6:	ed83 7a00 	vstr	s14, [r3]
    2efa:	f60a 23ec 	addw	r3, sl, #2796	; 0xaec
    2efe:	edc3 7a00 	vstr	s15, [r3]
    2f02:	f50a 6343 	add.w	r3, sl, #3120	; 0xc30
    2f06:	ed83 7a00 	vstr	s14, [r3]
    2f0a:	f60a 4334 	addw	r3, sl, #3124	; 0xc34
    2f0e:	edc3 7a00 	vstr	s15, [r3]
    2f12:	f60a 5378 	addw	r3, sl, #3448	; 0xd78
    2f16:	ed83 7a00 	vstr	s14, [r3]
    2f1a:	f60a 537c 	addw	r3, sl, #3452	; 0xd7c
    2f1e:	f504 5b00 	add.w	fp, r4, #8192	; 0x2000
    2f22:	edc3 7a00 	vstr	s15, [r3]
    2f26:	f504 53f6 	add.w	r3, r4, #7872	; 0x1ec0
    2f2a:	ed83 7a00 	vstr	s14, [r3]
    2f2e:	f60a 6ac4 	addw	sl, sl, #3780	; 0xec4
    2f32:	f50b 63a5 	add.w	r3, fp, #1320	; 0x528
    2f36:	edca 7a00 	vstr	s15, [sl]
    2f3a:	ed8b 7a02 	vstr	s14, [fp, #8]
    2f3e:	edcb 7a03 	vstr	s15, [fp, #12]
    2f42:	ed8b 7a54 	vstr	s14, [fp, #336]	; 0x150
    2f46:	edcb 7a55 	vstr	s15, [fp, #340]	; 0x154
    2f4a:	ed8b 7aa6 	vstr	s14, [fp, #664]	; 0x298
    2f4e:	edcb 7aa7 	vstr	s15, [fp, #668]	; 0x29c
    2f52:	ed8b 7af8 	vstr	s14, [fp, #992]	; 0x3e0
    2f56:	edcb 7af9 	vstr	s15, [fp, #996]	; 0x3e4
    2f5a:	ed83 7a00 	vstr	s14, [r3]
    2f5e:	f20b 532c 	addw	r3, fp, #1324	; 0x52c
    2f62:	edc3 7a00 	vstr	s15, [r3]
    2f66:	f50b 63ce 	add.w	r3, fp, #1648	; 0x670
    2f6a:	ed83 7a00 	vstr	s14, [r3]
    2f6e:	f20b 6374 	addw	r3, fp, #1652	; 0x674
    2f72:	edc3 7a00 	vstr	s15, [r3]
    2f76:	f50b 63f7 	add.w	r3, fp, #1976	; 0x7b8
    2f7a:	ed83 7a00 	vstr	s14, [r3]
    2f7e:	f20b 73bc 	addw	r3, fp, #1980	; 0x7bc
    2f82:	edc3 7a00 	vstr	s15, [r3]
    2f86:	f504 5324 	add.w	r3, r4, #10496	; 0x2900
    2f8a:	ed83 7a00 	vstr	s14, [r3]
    2f8e:	f60b 1304 	addw	r3, fp, #2308	; 0x904
    2f92:	edc3 7a00 	vstr	s15, [r3]
    2f96:	f60b 2348 	addw	r3, fp, #2632	; 0xa48
    2f9a:	ed83 7a00 	vstr	s14, [r3]
    2f9e:	f60b 234c 	addw	r3, fp, #2636	; 0xa4c
    2fa2:	edc3 7a00 	vstr	s15, [r3]
    2fa6:	f50b 6339 	add.w	r3, fp, #2960	; 0xb90
    2faa:	ed83 7a00 	vstr	s14, [r3]
    2fae:	f60b 3394 	addw	r3, fp, #2964	; 0xb94
    2fb2:	edc3 7a00 	vstr	s15, [r3]
    2fb6:	f60b 43d8 	addw	r3, fp, #3288	; 0xcd8
    2fba:	ed83 7a00 	vstr	s14, [r3]
    2fbe:	f60b 43dc 	addw	r3, fp, #3292	; 0xcdc
    2fc2:	edc3 7a00 	vstr	s15, [r3]
    2fc6:	f50b 6362 	add.w	r3, fp, #3616	; 0xe20
    2fca:	ed83 7a00 	vstr	s14, [r3]
    2fce:	f60b 6324 	addw	r3, fp, #3620	; 0xe24
    2fd2:	edc3 7a00 	vstr	s15, [r3]
    2fd6:	f60b 7368 	addw	r3, fp, #3944	; 0xf68
    2fda:	ed83 7a00 	vstr	s14, [r3]
    2fde:	f504 5640 	add.w	r6, r4, #12288	; 0x3000
    2fe2:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    2fe6:	f60b 7b6c 	addw	fp, fp, #3948	; 0xf6c
    2fea:	edcb 7a00 	vstr	s15, [fp]
    2fee:	469c      	mov	ip, r3
    2ff0:	ed86 7a2c 	vstr	s14, [r6, #176]	; 0xb0
    2ff4:	ed86 7a7e 	vstr	s14, [r6, #504]	; 0x1f8
    2ff8:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
    2ffc:	edc6 7a7f 	vstr	s15, [r6, #508]	; 0x1fc
    3000:	2101      	movs	r1, #1
    3002:	f8d8 7000 	ldr.w	r7, [r8]
    3006:	f8d8 0004 	ldr.w	r0, [r8, #4]
    300a:	9307      	str	r3, [sp, #28]
    300c:	f504 72a4 	add.w	r2, r4, #328	; 0x148
    3010:	4663      	mov	r3, ip
    3012:	601f      	str	r7, [r3, #0]
    3014:	6058      	str	r0, [r3, #4]
    3016:	3308      	adds	r3, #8
    3018:	429a      	cmp	r2, r3
    301a:	d1fa      	bne.n	3012 <sym_100281+0x56a>
    301c:	3101      	adds	r1, #1
    301e:	2928      	cmp	r1, #40	; 0x28
    3020:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
    3024:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    3028:	d1f2      	bne.n	3010 <sym_100281+0x568>
    302a:	2327      	movs	r3, #39	; 0x27
    302c:	af13      	add	r7, sp, #76	; 0x4c
    302e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    3032:	9106      	str	r1, [sp, #24]
    3034:	a90a      	add	r1, sp, #40	; 0x28
    3036:	4638      	mov	r0, r7
    3038:	9102      	str	r1, [sp, #8]
    303a:	462f      	mov	r7, r5
    303c:	4649      	mov	r1, r9
    303e:	461d      	mov	r5, r3
    3040:	46b1      	mov	r9, r6
    3042:	4626      	mov	r6, r4
    3044:	f504 5a47 	add.w	sl, r4, #12736	; 0x31c0
    3048:	f504 5243 	add.w	r2, r4, #12480	; 0x30c0
    304c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
    3050:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    3054:	9205      	str	r2, [sp, #20]
    3056:	eddb 7a4d 	vldr	s15, [fp, #308]	; 0x134
    305a:	9b06      	ldr	r3, [sp, #24]
    305c:	eef1 7a67 	vneg.f32	s15, s15
    3060:	6183      	str	r3, [r0, #24]
    3062:	618b      	str	r3, [r1, #24]
    3064:	462b      	mov	r3, r5
    3066:	9c02      	ldr	r4, [sp, #8]
    3068:	f8db c130 	ldr.w	ip, [fp, #304]	; 0x130
    306c:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
    3070:	f8c4 c000 	str.w	ip, [r4]
    3074:	6103      	str	r3, [r0, #16]
    3076:	6143      	str	r3, [r0, #20]
    3078:	6042      	str	r2, [r0, #4]
    307a:	6082      	str	r2, [r0, #8]
    307c:	f5aa 7c9c 	sub.w	ip, sl, #312	; 0x138
    3080:	f1c3 0227 	rsb	r2, r3, #39	; 0x27
    3084:	3d01      	subs	r5, #1
    3086:	3301      	adds	r3, #1
    3088:	604a      	str	r2, [r1, #4]
    308a:	610b      	str	r3, [r1, #16]
    308c:	f8c1 c000 	str.w	ip, [r1]
    3090:	ee19 3a10 	vmov	r3, s18
    3094:	4622      	mov	r2, r4
    3096:	edc4 7a01 	vstr	s15, [r4, #4]
    309a:	f8c0 a000 	str.w	sl, [r0]
    309e:	60c6      	str	r6, [r0, #12]
    30a0:	60ce      	str	r6, [r1, #12]
    30a2:	614d      	str	r5, [r1, #20]
    30a4:	9009      	str	r0, [sp, #36]	; 0x24
    30a6:	9108      	str	r1, [sp, #32]
    30a8:	f7ff faa6 	bl	25f8 <sym_100283>
    30ac:	f8d8 e000 	ldr.w	lr, [r8]
    30b0:	f8d8 c004 	ldr.w	ip, [r8, #4]
    30b4:	9c05      	ldr	r4, [sp, #20]
    30b6:	9908      	ldr	r1, [sp, #32]
    30b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    30ba:	f5aa 73a0 	sub.w	r3, sl, #320	; 0x140
    30be:	f8c3 e000 	str.w	lr, [r3]
    30c2:	f8c3 c004 	str.w	ip, [r3, #4]
    30c6:	3308      	adds	r3, #8
    30c8:	429c      	cmp	r4, r3
    30ca:	d1f8      	bne.n	30be <sym_100281+0x616>
    30cc:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
    30d0:	f5aa 7aa4 	sub.w	sl, sl, #328	; 0x148
    30d4:	f1ab 0b08 	sub.w	fp, fp, #8
    30d8:	9305      	str	r3, [sp, #20]
    30da:	2d00      	cmp	r5, #0
    30dc:	d1bb      	bne.n	3056 <sym_100281+0x5ae>
    30de:	4634      	mov	r4, r6
    30e0:	463d      	mov	r5, r7
    30e2:	464e      	mov	r6, r9
    30e4:	4607      	mov	r7, r0
    30e6:	4689      	mov	r9, r1
    30e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    30ec:	f8d8 1000 	ldr.w	r1, [r8]
    30f0:	9807      	ldr	r0, [sp, #28]
    30f2:	f104 0308 	add.w	r3, r4, #8
    30f6:	6019      	str	r1, [r3, #0]
    30f8:	605a      	str	r2, [r3, #4]
    30fa:	3308      	adds	r3, #8
    30fc:	4298      	cmp	r0, r3
    30fe:	d1fa      	bne.n	30f6 <sym_100281+0x64e>
    3100:	e611      	b.n	2d26 <sym_100281+0x27e>
    3102:	4601      	mov	r1, r0
    3104:	4602      	mov	r2, r0
    3106:	f503 5548 	add.w	r5, r3, #12800	; 0x3200
    310a:	6818      	ldr	r0, [r3, #0]
    310c:	3308      	adds	r3, #8
    310e:	6010      	str	r0, [r2, #0]
    3110:	f853 0c04 	ldr.w	r0, [r3, #-4]
    3114:	429d      	cmp	r5, r3
    3116:	f102 0208 	add.w	r2, r2, #8
    311a:	f842 0c04 	str.w	r0, [r2, #-4]
    311e:	d1f4      	bne.n	310a <sym_100281+0x662>
    3120:	6823      	ldr	r3, [r4, #0]
    3122:	f504 5640 	add.w	r6, r4, #12288	; 0x3000
    3126:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    312a:	f1bb 0f00 	cmp.w	fp, #0
    312e:	d00c      	beq.n	314a <sym_100281+0x6a2>
    3130:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3164 <sym_100281+0x6bc>
    3134:	f504 5448 	add.w	r4, r4, #12800	; 0x3200
    3138:	f8d8 2008 	ldr.w	r2, [r8, #8]
    313c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    3140:	600a      	str	r2, [r1, #0]
    3142:	604b      	str	r3, [r1, #4]
    3144:	3108      	adds	r1, #8
    3146:	42a1      	cmp	r1, r4
    3148:	d1fa      	bne.n	3140 <sym_100281+0x698>
    314a:	f44f 7380 	mov.w	r3, #256	; 0x100
    314e:	9a03      	ldr	r2, [sp, #12]
    3150:	f8a6 333c 	strh.w	r3, [r6, #828]	; 0x33c
    3154:	f886 233e 	strb.w	r2, [r6, #830]	; 0x33e
    3158:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    315c:	ecbd 8b04 	vpop	{d8-d9}
    3160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3164:	0001fb24 	.word	0x0001fb24

00003168 <sym_100250>:
    3168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    316c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 32a0 <sym_100250+0x138>
    3170:	b084      	sub	sp, #16
    3172:	f8d9 0000 	ldr.w	r0, [r9]
    3176:	460e      	mov	r6, r1
    3178:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    317c:	f010 0a01 	ands.w	sl, r0, #1
    3180:	4690      	mov	r8, r2
    3182:	461f      	mov	r7, r3
    3184:	d10b      	bne.n	319e <sym_100250+0x36>
    3186:	f44f 5248 	mov.w	r2, #12800	; 0x3200
    318a:	4651      	mov	r1, sl
    318c:	483e      	ldr	r0, [pc, #248]	; (3288 <sym_100250+0x120>)
    318e:	f01c f940 	bl	1f412 <memset>
    3192:	2301      	movs	r3, #1
    3194:	f8c9 3000 	str.w	r3, [r9]
    3198:	4b3c      	ldr	r3, [pc, #240]	; (328c <sym_100250+0x124>)
    319a:	f883 a33d 	strb.w	sl, [r3, #829]	; 0x33d
    319e:	f04f 0900 	mov.w	r9, #0
    31a2:	68b3      	ldr	r3, [r6, #8]
    31a4:	2280      	movs	r2, #128	; 0x80
    31a6:	9301      	str	r3, [sp, #4]
    31a8:	68f3      	ldr	r3, [r6, #12]
    31aa:	4669      	mov	r1, sp
    31ac:	9302      	str	r3, [sp, #8]
    31ae:	6933      	ldr	r3, [r6, #16]
    31b0:	4835      	ldr	r0, [pc, #212]	; (3288 <sym_100250+0x120>)
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	4b36      	ldr	r3, [pc, #216]	; (3290 <sym_100250+0x128>)
    31b6:	f883 9000 	strb.w	r9, [r3]
    31ba:	f7ff fc75 	bl	2aa8 <sym_100281>
    31be:	4630      	mov	r0, r6
    31c0:	f000 f870 	bl	32a4 <sym_100235>
    31c4:	edd8 7a01 	vldr	s15, [r8, #4]
    31c8:	454f      	cmp	r7, r9
    31ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    31ce:	dd58      	ble.n	3282 <sym_100250+0x11a>
    31d0:	eddf 7a30 	vldr	s15, [pc, #192]	; 3294 <sym_100250+0x12c>
    31d4:	464e      	mov	r6, r9
    31d6:	4a30      	ldr	r2, [pc, #192]	; (3298 <sym_100250+0x130>)
    31d8:	e006      	b.n	31e8 <sym_100250+0x80>
    31da:	ed32 7a01 	vldmdb	r2!, {s14}
    31de:	3601      	adds	r6, #1
    31e0:	42b7      	cmp	r7, r6
    31e2:	ee77 7a87 	vadd.f32	s15, s15, s14
    31e6:	d004      	beq.n	31f2 <sym_100250+0x8a>
    31e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
    31ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    31f0:	dcf3      	bgt.n	31da <sym_100250+0x72>
    31f2:	68eb      	ldr	r3, [r5, #12]
    31f4:	2b00      	cmp	r3, #0
    31f6:	dd0e      	ble.n	3216 <sym_100250+0xae>
    31f8:	2300      	movs	r3, #0
    31fa:	4927      	ldr	r1, [pc, #156]	; (3298 <sym_100250+0x130>)
    31fc:	692a      	ldr	r2, [r5, #16]
    31fe:	f851 0d04 	ldr.w	r0, [r1, #-4]!
    3202:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3206:	6010      	str	r0, [r2, #0]
    3208:	68ea      	ldr	r2, [r5, #12]
    320a:	3301      	adds	r3, #1
    320c:	2a28      	cmp	r2, #40	; 0x28
    320e:	bfa8      	it	ge
    3210:	2228      	movge	r2, #40	; 0x28
    3212:	429a      	cmp	r2, r3
    3214:	dcf2      	bgt.n	31fc <sym_100250+0x94>
    3216:	60ee      	str	r6, [r5, #12]
    3218:	68e3      	ldr	r3, [r4, #12]
    321a:	f04f 0c00 	mov.w	ip, #0
    321e:	429e      	cmp	r6, r3
    3220:	bfa8      	it	ge
    3222:	461e      	movge	r6, r3
    3224:	2e00      	cmp	r6, #0
    3226:	4f1d      	ldr	r7, [pc, #116]	; (329c <sym_100250+0x134>)
    3228:	dd28      	ble.n	327c <sym_100250+0x114>
    322a:	4638      	mov	r0, r7
    322c:	2100      	movs	r1, #0
    322e:	edd0 7a01 	vldr	s15, [r0, #4]
    3232:	eef1 7a67 	vneg.f32	s15, s15
    3236:	fb03 130c 	mla	r3, r3, ip, r1
    323a:	6922      	ldr	r2, [r4, #16]
    323c:	6806      	ldr	r6, [r0, #0]
    323e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3242:	edc3 7a01 	vstr	s15, [r3, #4]
    3246:	601e      	str	r6, [r3, #0]
    3248:	68e3      	ldr	r3, [r4, #12]
    324a:	68ee      	ldr	r6, [r5, #12]
    324c:	2b28      	cmp	r3, #40	; 0x28
    324e:	461a      	mov	r2, r3
    3250:	bfa8      	it	ge
    3252:	2228      	movge	r2, #40	; 0x28
    3254:	42b2      	cmp	r2, r6
    3256:	bfa8      	it	ge
    3258:	4632      	movge	r2, r6
    325a:	3101      	adds	r1, #1
    325c:	4291      	cmp	r1, r2
    325e:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
    3262:	dbe4      	blt.n	322e <sym_100250+0xc6>
    3264:	f10c 0c01 	add.w	ip, ip, #1
    3268:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
    326c:	d006      	beq.n	327c <sym_100250+0x114>
    326e:	429e      	cmp	r6, r3
    3270:	bfa8      	it	ge
    3272:	461e      	movge	r6, r3
    3274:	2e00      	cmp	r6, #0
    3276:	f107 0708 	add.w	r7, r7, #8
    327a:	dcd6      	bgt.n	322a <sym_100250+0xc2>
    327c:	b004      	add	sp, #16
    327e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3282:	464e      	mov	r6, r9
    3284:	e7b5      	b.n	31f2 <sym_100250+0x8a>
    3286:	bf00      	nop
    3288:	20000a80 	.word	0x20000a80
    328c:	20003a80 	.word	0x20003a80
    3290:	20000000 	.word	0x20000000
    3294:	00000000 	.word	0x00000000
    3298:	20003d20 	.word	0x20003d20
    329c:	20003b40 	.word	0x20003b40
    32a0:	2000503c 	.word	0x2000503c

000032a4 <sym_100235>:
    32a4:	6883      	ldr	r3, [r0, #8]
    32a6:	68c1      	ldr	r1, [r0, #12]
    32a8:	428b      	cmp	r3, r1
    32aa:	bfa8      	it	ge
    32ac:	460b      	movge	r3, r1
    32ae:	2b00      	cmp	r3, #0
    32b0:	469c      	mov	ip, r3
    32b2:	dd0e      	ble.n	32d2 <sym_100235+0x2e>
    32b4:	2200      	movs	r2, #0
    32b6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 32d8 <sym_100235+0x34>
    32ba:	3101      	adds	r1, #1
    32bc:	6903      	ldr	r3, [r0, #16]
    32be:	00c9      	lsls	r1, r1, #3
    32c0:	edd3 7a00 	vldr	s15, [r3]
    32c4:	3201      	adds	r2, #1
    32c6:	4562      	cmp	r2, ip
    32c8:	ee30 0a27 	vadd.f32	s0, s0, s15
    32cc:	440b      	add	r3, r1
    32ce:	d1f7      	bne.n	32c0 <sym_100235+0x1c>
    32d0:	4770      	bx	lr
    32d2:	ed9f 0a01 	vldr	s0, [pc, #4]	; 32d8 <sym_100235+0x34>
    32d6:	4770      	bx	lr
    32d8:	00000000 	.word	0x00000000

000032dc <sym_100251>:
    32dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32e0:	ed2d 8b02 	vpush	{d8}
    32e4:	688b      	ldr	r3, [r1, #8]
    32e6:	b087      	sub	sp, #28
    32e8:	2b00      	cmp	r3, #0
    32ea:	68c7      	ldr	r7, [r0, #12]
    32ec:	9300      	str	r3, [sp, #0]
    32ee:	f340 808d 	ble.w	340c <sym_100251+0x130>
    32f2:	2600      	movs	r6, #0
    32f4:	4682      	mov	sl, r0
    32f6:	4689      	mov	r9, r1
    32f8:	1aff      	subs	r7, r7, r3
    32fa:	4698      	mov	r8, r3
    32fc:	1c7b      	adds	r3, r7, #1
    32fe:	9301      	str	r3, [sp, #4]
    3300:	00ff      	lsls	r7, r7, #3
    3302:	ed9f 8a74 	vldr	s16, [pc, #464]	; 34d4 <sym_100251+0x1f8>
    3306:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
    330a:	465d      	mov	r5, fp
    330c:	2400      	movs	r4, #0
    330e:	eef0 8a48 	vmov.f32	s17, s16
    3312:	4622      	mov	r2, r4
    3314:	3401      	adds	r4, #1
    3316:	2c01      	cmp	r4, #1
    3318:	d07d      	beq.n	3416 <sym_100251+0x13a>
    331a:	f8da 3010 	ldr.w	r3, [sl, #16]
    331e:	00d1      	lsls	r1, r2, #3
    3320:	f1a1 0008 	sub.w	r0, r1, #8
    3324:	4418      	add	r0, r3
    3326:	edd0 6a01 	vldr	s13, [r0, #4]
    332a:	ed90 1a00 	vldr	s2, [r0]
    332e:	f1a5 0008 	sub.w	r0, r5, #8
    3332:	4418      	add	r0, r3
    3334:	edd0 0a01 	vldr	s1, [r0, #4]
    3338:	ed90 0a00 	vldr	s0, [r0]
    333c:	ee60 7a81 	vmul.f32	s15, s1, s2
    3340:	ee26 7aa0 	vmul.f32	s14, s13, s1
    3344:	eee6 7ac0 	vfms.f32	s15, s13, s0
    3348:	eea0 7a01 	vfma.f32	s14, s0, s2
    334c:	eef4 7a47 	vcmp.f32	s15, s14
    3350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3354:	eef1 1a66 	vneg.f32	s3, s13
    3358:	f180 80ae 	bvs.w	34b8 <sym_100251+0x1dc>
    335c:	4439      	add	r1, r7
    335e:	4419      	add	r1, r3
    3360:	edd1 6a01 	vldr	s13, [r1, #4]
    3364:	ed91 1a00 	vldr	s2, [r1]
    3368:	19e9      	adds	r1, r5, r7
    336a:	440b      	add	r3, r1
    336c:	edd3 0a01 	vldr	s1, [r3, #4]
    3370:	ed93 0a00 	vldr	s0, [r3]
    3374:	ee38 7ac7 	vsub.f32	s14, s17, s14
    3378:	ee78 7a67 	vsub.f32	s15, s16, s15
    337c:	ee66 8aa0 	vmul.f32	s17, s13, s1
    3380:	ee21 8a20 	vmul.f32	s16, s2, s1
    3384:	eee1 8a00 	vfma.f32	s17, s2, s0
    3388:	eea6 8ac0 	vfms.f32	s16, s13, s0
    338c:	eef4 8a48 	vcmp.f32	s17, s16
    3390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3394:	eef1 1a66 	vneg.f32	s3, s13
    3398:	d67d      	bvs.n	3496 <sym_100251+0x1ba>
    339a:	ee78 8a87 	vadd.f32	s17, s17, s14
    339e:	ee37 8a88 	vadd.f32	s16, s15, s16
    33a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
    33a6:	1991      	adds	r1, r2, r6
    33a8:	fb03 1002 	mla	r0, r3, r2, r1
    33ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
    33b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    33b4:	ed93 7a01 	vldr	s14, [r3, #4]
    33b8:	edd3 7a00 	vldr	s15, [r3]
    33bc:	ee38 7a07 	vadd.f32	s14, s16, s14
    33c0:	ee77 7aa8 	vadd.f32	s15, s15, s17
    33c4:	ed83 7a01 	vstr	s14, [r3, #4]
    33c8:	edc3 7a00 	vstr	s15, [r3]
    33cc:	b19e      	cbz	r6, 33f6 <sym_100251+0x11a>
    33ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
    33d2:	fb03 2201 	mla	r2, r3, r1, r2
    33d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    33da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    33de:	ed93 7a01 	vldr	s14, [r3, #4]
    33e2:	edd3 7a00 	vldr	s15, [r3]
    33e6:	ee37 7a48 	vsub.f32	s14, s14, s16
    33ea:	ee77 7aa8 	vadd.f32	s15, s15, s17
    33ee:	ed83 7a01 	vstr	s14, [r3, #4]
    33f2:	edc3 7a00 	vstr	s15, [r3]
    33f6:	4544      	cmp	r4, r8
    33f8:	f105 0508 	add.w	r5, r5, #8
    33fc:	d189      	bne.n	3312 <sym_100251+0x36>
    33fe:	9b00      	ldr	r3, [sp, #0]
    3400:	3601      	adds	r6, #1
    3402:	42b3      	cmp	r3, r6
    3404:	f108 38ff 	add.w	r8, r8, #4294967295
    3408:	f47f af7b 	bne.w	3302 <sym_100251+0x26>
    340c:	b007      	add	sp, #28
    340e:	ecbd 8b02 	vpop	{d8}
    3412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3416:	9b01      	ldr	r3, [sp, #4]
    3418:	2b00      	cmp	r3, #0
    341a:	ddc2      	ble.n	33a2 <sym_100251+0xc6>
    341c:	f8da c010 	ldr.w	ip, [sl, #16]
    3420:	f10c 0108 	add.w	r1, ip, #8
    3424:	eb0c 030b 	add.w	r3, ip, fp
    3428:	19c8      	adds	r0, r1, r7
    342a:	e009      	b.n	3440 <sym_100251+0x164>
    342c:	4288      	cmp	r0, r1
    342e:	468c      	mov	ip, r1
    3430:	ee78 8a87 	vadd.f32	s17, s17, s14
    3434:	ee38 8a27 	vadd.f32	s16, s16, s15
    3438:	f103 0308 	add.w	r3, r3, #8
    343c:	d0b1      	beq.n	33a2 <sym_100251+0xc6>
    343e:	3108      	adds	r1, #8
    3440:	eddc 6a01 	vldr	s13, [ip, #4]
    3444:	ed9c 1a00 	vldr	s2, [ip]
    3448:	edd3 0a01 	vldr	s1, [r3, #4]
    344c:	ed93 0a00 	vldr	s0, [r3]
    3450:	ee60 7a81 	vmul.f32	s15, s1, s2
    3454:	ee26 7aa0 	vmul.f32	s14, s13, s1
    3458:	eee6 7ac0 	vfms.f32	s15, s13, s0
    345c:	eea0 7a01 	vfma.f32	s14, s0, s2
    3460:	eef4 7a47 	vcmp.f32	s15, s14
    3464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3468:	eef1 1a66 	vneg.f32	s3, s13
    346c:	d7de      	bvc.n	342c <sym_100251+0x150>
    346e:	9105      	str	r1, [sp, #20]
    3470:	9204      	str	r2, [sp, #16]
    3472:	9003      	str	r0, [sp, #12]
    3474:	9302      	str	r3, [sp, #8]
    3476:	f001 fdef 	bl	5058 <__mulsc3>
    347a:	9905      	ldr	r1, [sp, #20]
    347c:	9803      	ldr	r0, [sp, #12]
    347e:	9b02      	ldr	r3, [sp, #8]
    3480:	4288      	cmp	r0, r1
    3482:	468c      	mov	ip, r1
    3484:	ee78 8a80 	vadd.f32	s17, s17, s0
    3488:	ee38 8a20 	vadd.f32	s16, s16, s1
    348c:	9a04      	ldr	r2, [sp, #16]
    348e:	f103 0308 	add.w	r3, r3, #8
    3492:	d1d4      	bne.n	343e <sym_100251+0x162>
    3494:	e785      	b.n	33a2 <sym_100251+0xc6>
    3496:	edcd 7a04 	vstr	s15, [sp, #16]
    349a:	ed8d 7a03 	vstr	s14, [sp, #12]
    349e:	9202      	str	r2, [sp, #8]
    34a0:	f001 fdda 	bl	5058 <__mulsc3>
    34a4:	eddd 7a04 	vldr	s15, [sp, #16]
    34a8:	eef0 8a40 	vmov.f32	s17, s0
    34ac:	eeb0 8a60 	vmov.f32	s16, s1
    34b0:	ed9d 7a03 	vldr	s14, [sp, #12]
    34b4:	9a02      	ldr	r2, [sp, #8]
    34b6:	e770      	b.n	339a <sym_100251+0xbe>
    34b8:	9104      	str	r1, [sp, #16]
    34ba:	9203      	str	r2, [sp, #12]
    34bc:	9302      	str	r3, [sp, #8]
    34be:	f001 fdcb 	bl	5058 <__mulsc3>
    34c2:	9904      	ldr	r1, [sp, #16]
    34c4:	eeb0 7a40 	vmov.f32	s14, s0
    34c8:	eef0 7a60 	vmov.f32	s15, s1
    34cc:	9a03      	ldr	r2, [sp, #12]
    34ce:	9b02      	ldr	r3, [sp, #8]
    34d0:	e744      	b.n	335c <sym_100251+0x80>
    34d2:	bf00      	nop
    34d4:	00000000 	.word	0x00000000

000034d8 <sym_100264>:
    34d8:	f017 b97e 	b.w	1a7d8 <malloc>

000034dc <sym_100265>:
    34dc:	f017 b984 	b.w	1a7e8 <free>

000034e0 <sym_100253>:
    34e0:	b510      	push	{r4, lr}
    34e2:	4604      	mov	r4, r0
    34e4:	f000 fb0e 	bl	3b04 <sym_100242>
    34e8:	4620      	mov	r0, r4
    34ea:	bd10      	pop	{r4, pc}

000034ec <sym_100259>:
    34ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f0:	4607      	mov	r7, r0
    34f2:	ed2d 8b02 	vpush	{d8}
    34f6:	00d0      	lsls	r0, r2, #3
    34f8:	4616      	mov	r6, r2
    34fa:	eef0 8a40 	vmov.f32	s17, s0
    34fe:	f7ff ffeb 	bl	34d8 <sym_100264>
    3502:	4680      	mov	r8, r0
    3504:	b358      	cbz	r0, 355e <sym_100259+0x72>
    3506:	2e00      	cmp	r6, #0
    3508:	dd1c      	ble.n	3544 <sym_100259+0x58>
    350a:	4605      	mov	r5, r0
    350c:	2400      	movs	r4, #0
    350e:	ee07 4a90 	vmov	s15, r4
    3512:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    3516:	ee28 8a68 	vnmul.f32	s16, s16, s17
    351a:	eeb0 0a48 	vmov.f32	s0, s16
    351e:	f015 ff0b 	bl	19338 <cosf>
    3522:	eef0 7a40 	vmov.f32	s15, s0
    3526:	eeb0 0a48 	vmov.f32	s0, s16
    352a:	eeb0 8a67 	vmov.f32	s16, s15
    352e:	f015 ff47 	bl	193c0 <sinf>
    3532:	3401      	adds	r4, #1
    3534:	42a6      	cmp	r6, r4
    3536:	f105 0508 	add.w	r5, r5, #8
    353a:	ed05 8a02 	vstr	s16, [r5, #-8]
    353e:	ed05 0a01 	vstr	s0, [r5, #-4]
    3542:	d1e4      	bne.n	350e <sym_100259+0x22>
    3544:	2301      	movs	r3, #1
    3546:	4a0b      	ldr	r2, [pc, #44]	; (3574 <sym_100259+0x88>)
    3548:	60be      	str	r6, [r7, #8]
    354a:	603a      	str	r2, [r7, #0]
    354c:	f8c7 8010 	str.w	r8, [r7, #16]
    3550:	713b      	strb	r3, [r7, #4]
    3552:	60fb      	str	r3, [r7, #12]
    3554:	4638      	mov	r0, r7
    3556:	ecbd 8b02 	vpop	{d8}
    355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    355e:	4b05      	ldr	r3, [pc, #20]	; (3574 <sym_100259+0x88>)
    3560:	7138      	strb	r0, [r7, #4]
    3562:	60b8      	str	r0, [r7, #8]
    3564:	60f8      	str	r0, [r7, #12]
    3566:	6138      	str	r0, [r7, #16]
    3568:	603b      	str	r3, [r7, #0]
    356a:	4638      	mov	r0, r7
    356c:	ecbd 8b02 	vpop	{d8}
    3570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3574:	0001fb7c 	.word	0x0001fb7c

00003578 <sym_100260>:
    3578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    357c:	ed2d 8b02 	vpush	{d8}
    3580:	4603      	mov	r3, r0
    3582:	b08c      	sub	sp, #48	; 0x30
    3584:	460c      	mov	r4, r1
    3586:	a807      	add	r0, sp, #28
    3588:	4619      	mov	r1, r3
    358a:	4615      	mov	r5, r2
    358c:	f7ff ffae 	bl	34ec <sym_100259>
    3590:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3594:	b9c3      	cbnz	r3, 35c8 <sym_100260+0x50>
    3596:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 3684 <sym_100260+0x10c>
    359a:	4b3b      	ldr	r3, [pc, #236]	; (3688 <sym_100260+0x110>)
    359c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    359e:	9307      	str	r3, [sp, #28]
    35a0:	b110      	cbz	r0, 35a8 <sym_100260+0x30>
    35a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    35a6:	b933      	cbnz	r3, 35b6 <sym_100260+0x3e>
    35a8:	eeb0 0a48 	vmov.f32	s0, s16
    35ac:	b00c      	add	sp, #48	; 0x30
    35ae:	ecbd 8b02 	vpop	{d8}
    35b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35b6:	f7ff ff91 	bl	34dc <sym_100265>
    35ba:	eeb0 0a48 	vmov.f32	s0, s16
    35be:	b00c      	add	sp, #48	; 0x30
    35c0:	ecbd 8b02 	vpop	{d8}
    35c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35c8:	68a6      	ldr	r6, [r4, #8]
    35ca:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    35ce:	fb0a f906 	mul.w	r9, sl, r6
    35d2:	ea4f 08c9 	mov.w	r8, r9, lsl #3
    35d6:	4640      	mov	r0, r8
    35d8:	f7ff ff7e 	bl	34d8 <sym_100264>
    35dc:	4607      	mov	r7, r0
    35de:	2800      	cmp	r0, #0
    35e0:	d0d9      	beq.n	3596 <sym_100260+0x1e>
    35e2:	68e3      	ldr	r3, [r4, #12]
    35e4:	9006      	str	r0, [sp, #24]
    35e6:	f8ad 3006 	strh.w	r3, [sp, #6]
    35ea:	68a3      	ldr	r3, [r4, #8]
    35ec:	aa05      	add	r2, sp, #20
    35ee:	f8ad 3004 	strh.w	r3, [sp, #4]
    35f2:	6923      	ldr	r3, [r4, #16]
    35f4:	a903      	add	r1, sp, #12
    35f6:	9302      	str	r3, [sp, #8]
    35f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    35fa:	a801      	add	r0, sp, #4
    35fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    3600:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3602:	f8ad a016 	strh.w	sl, [sp, #22]
    3606:	f8ad 300c 	strh.w	r3, [sp, #12]
    360a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    360c:	f8ad 6014 	strh.w	r6, [sp, #20]
    3610:	9304      	str	r3, [sp, #16]
    3612:	f00f fafd 	bl	12c10 <arm_mat_cmplx_mult_f32>
    3616:	4640      	mov	r0, r8
    3618:	f7ff ff5e 	bl	34d8 <sym_100264>
    361c:	4604      	mov	r4, r0
    361e:	b350      	cbz	r0, 3676 <sym_100260+0xfe>
    3620:	f1b9 0f00 	cmp.w	r9, #0
    3624:	dd06      	ble.n	3634 <sym_100260+0xbc>
    3626:	f1b8 0f00 	cmp.w	r8, #0
    362a:	d003      	beq.n	3634 <sym_100260+0xbc>
    362c:	4642      	mov	r2, r8
    362e:	4639      	mov	r1, r7
    3630:	f01b fed5 	bl	1f3de <memmove>
    3634:	2e00      	cmp	r6, #0
    3636:	dd21      	ble.n	367c <sym_100260+0x104>
    3638:	4623      	mov	r3, r4
    363a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 368c <sym_100260+0x114>
    363e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    3642:	edd3 7a01 	vldr	s15, [r3, #4]
    3646:	ed93 7a00 	vldr	s14, [r3]
    364a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    364e:	eee7 7a07 	vfma.f32	s15, s14, s14
    3652:	3308      	adds	r3, #8
    3654:	429e      	cmp	r6, r3
    3656:	ee30 0a27 	vadd.f32	s0, s0, s15
    365a:	d1f2      	bne.n	3642 <sym_100260+0xca>
    365c:	ee07 5a90 	vmov	s15, r5
    3660:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    3664:	4620      	mov	r0, r4
    3666:	ee38 8a40 	vsub.f32	s16, s16, s0
    366a:	f7ff ff37 	bl	34dc <sym_100265>
    366e:	4638      	mov	r0, r7
    3670:	f7ff ff34 	bl	34dc <sym_100265>
    3674:	e791      	b.n	359a <sym_100260+0x22>
    3676:	ed9f 8a03 	vldr	s16, [pc, #12]	; 3684 <sym_100260+0x10c>
    367a:	e7f8      	b.n	366e <sym_100260+0xf6>
    367c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 368c <sym_100260+0x114>
    3680:	e7ec      	b.n	365c <sym_100260+0xe4>
    3682:	bf00      	nop
    3684:	7fc00000 	.word	0x7fc00000
    3688:	0001fb7c 	.word	0x0001fb7c
    368c:	00000000 	.word	0x00000000

00003690 <sym_100258>:
    3690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3694:	ed2d 8b02 	vpush	{d8}
    3698:	f04f 0c00 	mov.w	ip, #0
    369c:	fb01 f801 	mul.w	r8, r1, r1
    36a0:	b093      	sub	sp, #76	; 0x4c
    36a2:	4d93      	ldr	r5, [pc, #588]	; (38f0 <sym_100258+0x260>)
    36a4:	ea4f 09c8 	mov.w	r9, r8, lsl #3
    36a8:	9003      	str	r0, [sp, #12]
    36aa:	f8c3 c000 	str.w	ip, [r3]
    36ae:	4648      	mov	r0, r9
    36b0:	e9dd 4a1e 	ldrd	r4, sl, [sp, #120]	; 0x78
    36b4:	461e      	mov	r6, r3
    36b6:	eeb0 8a40 	vmov.f32	s16, s0
    36ba:	4693      	mov	fp, r2
    36bc:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
    36c0:	9508      	str	r5, [sp, #32]
    36c2:	9104      	str	r1, [sp, #16]
    36c4:	f7ff ff08 	bl	34d8 <sym_100264>
    36c8:	900c      	str	r0, [sp, #48]	; 0x30
    36ca:	2800      	cmp	r0, #0
    36cc:	f000 8106 	beq.w	38dc <sym_100258+0x24c>
    36d0:	2201      	movs	r2, #1
    36d2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    36d6:	f1b8 0f00 	cmp.w	r8, #0
    36da:	d00e      	beq.n	36fa <sym_100258+0x6a>
    36dc:	eb00 0309 	add.w	r3, r0, r9
    36e0:	4298      	cmp	r0, r3
    36e2:	d00a      	beq.n	36fa <sym_100258+0x6a>
    36e4:	4a83      	ldr	r2, [pc, #524]	; (38f4 <sym_100258+0x264>)
    36e6:	6811      	ldr	r1, [r2, #0]
    36e8:	6852      	ldr	r2, [r2, #4]
    36ea:	6001      	str	r1, [r0, #0]
    36ec:	6042      	str	r2, [r0, #4]
    36ee:	3008      	adds	r0, #8
    36f0:	4283      	cmp	r3, r0
    36f2:	d1fa      	bne.n	36ea <sym_100258+0x5a>
    36f4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    36f8:	b1c3      	cbz	r3, 372c <sym_100258+0x9c>
    36fa:	f8db 3008 	ldr.w	r3, [fp, #8]
    36fe:	2b00      	cmp	r3, #0
    3700:	dd5e      	ble.n	37c0 <sym_100258+0x130>
    3702:	f04f 0800 	mov.w	r8, #0
    3706:	f04f 0901 	mov.w	r9, #1
    370a:	f8db 700c 	ldr.w	r7, [fp, #12]
    370e:	950d      	str	r5, [sp, #52]	; 0x34
    3710:	00f8      	lsls	r0, r7, #3
    3712:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    3716:	9710      	str	r7, [sp, #64]	; 0x40
    3718:	f7ff fede 	bl	34d8 <sym_100264>
    371c:	2800      	cmp	r0, #0
    371e:	bf14      	ite	ne
    3720:	2301      	movne	r3, #1
    3722:	2300      	moveq	r3, #0
    3724:	9011      	str	r0, [sp, #68]	; 0x44
    3726:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    372a:	d10e      	bne.n	374a <sym_100258+0xba>
    372c:	4b72      	ldr	r3, [pc, #456]	; (38f8 <sym_100258+0x268>)
    372e:	980c      	ldr	r0, [sp, #48]	; 0x30
    3730:	6033      	str	r3, [r6, #0]
    3732:	9508      	str	r5, [sp, #32]
    3734:	b120      	cbz	r0, 3740 <sym_100258+0xb0>
    3736:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    373a:	2b00      	cmp	r3, #0
    373c:	f040 80c4 	bne.w	38c8 <sym_100258+0x238>
    3740:	b013      	add	sp, #76	; 0x4c
    3742:	ecbd 8b02 	vpop	{d8}
    3746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    374a:	2f00      	cmp	r7, #0
    374c:	dd26      	ble.n	379c <sym_100258+0x10c>
    374e:	f8db 300c 	ldr.w	r3, [fp, #12]
    3752:	2f01      	cmp	r7, #1
    3754:	fb03 f208 	mul.w	r2, r3, r8
    3758:	f8db 3010 	ldr.w	r3, [fp, #16]
    375c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3760:	681a      	ldr	r2, [r3, #0]
    3762:	6002      	str	r2, [r0, #0]
    3764:	685b      	ldr	r3, [r3, #4]
    3766:	6043      	str	r3, [r0, #4]
    3768:	d014      	beq.n	3794 <sym_100258+0x104>
    376a:	2201      	movs	r2, #1
    376c:	f8db 300c 	ldr.w	r3, [fp, #12]
    3770:	fb03 2008 	mla	r0, r3, r8, r2
    3774:	f8db 3010 	ldr.w	r3, [fp, #16]
    3778:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    377c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    377e:	f8d0 c000 	ldr.w	ip, [r0]
    3782:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    3786:	f8c1 c000 	str.w	ip, [r1]
    378a:	6843      	ldr	r3, [r0, #4]
    378c:	3201      	adds	r2, #1
    378e:	4297      	cmp	r7, r2
    3790:	604b      	str	r3, [r1, #4]
    3792:	d1eb      	bne.n	376c <sym_100258+0xdc>
    3794:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3798:	2b00      	cmp	r3, #0
    379a:	d0c7      	beq.n	372c <sym_100258+0x9c>
    379c:	a80d      	add	r0, sp, #52	; 0x34
    379e:	a908      	add	r1, sp, #32
    37a0:	f7ff fd9c 	bl	32dc <sym_100251>
    37a4:	9811      	ldr	r0, [sp, #68]	; 0x44
    37a6:	950d      	str	r5, [sp, #52]	; 0x34
    37a8:	b120      	cbz	r0, 37b4 <sym_100258+0x124>
    37aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    37ae:	2b00      	cmp	r3, #0
    37b0:	f040 8091 	bne.w	38d6 <sym_100258+0x246>
    37b4:	f8db 3008 	ldr.w	r3, [fp, #8]
    37b8:	f108 0801 	add.w	r8, r8, #1
    37bc:	4543      	cmp	r3, r8
    37be:	dca4      	bgt.n	370a <sym_100258+0x7a>
    37c0:	9a03      	ldr	r2, [sp, #12]
    37c2:	68d3      	ldr	r3, [r2, #12]
    37c4:	930d      	str	r3, [sp, #52]	; 0x34
    37c6:	6913      	ldr	r3, [r2, #16]
    37c8:	930e      	str	r3, [sp, #56]	; 0x38
    37ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    37cc:	2b01      	cmp	r3, #1
    37ce:	f000 80f4 	beq.w	39ba <sym_100258+0x32a>
    37d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    37d4:	9508      	str	r5, [sp, #32]
    37d6:	b120      	cbz	r0, 37e2 <sym_100258+0x152>
    37d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    37dc:	2b00      	cmp	r3, #0
    37de:	f040 8084 	bne.w	38ea <sym_100258+0x25a>
    37e2:	9a03      	ldr	r2, [sp, #12]
    37e4:	f8da 300c 	ldr.w	r3, [sl, #12]
    37e8:	69d2      	ldr	r2, [r2, #28]
    37ea:	429a      	cmp	r2, r3
    37ec:	bfa8      	it	ge
    37ee:	461a      	movge	r2, r3
    37f0:	4691      	mov	r9, r2
    37f2:	f1b9 0f01 	cmp.w	r9, #1
    37f6:	bfb8      	it	lt
    37f8:	f04f 0901 	movlt.w	r9, #1
    37fc:	2200      	movs	r2, #0
    37fe:	454b      	cmp	r3, r9
    3800:	9207      	str	r2, [sp, #28]
    3802:	9208      	str	r2, [sp, #32]
    3804:	dc7e      	bgt.n	3904 <sym_100258+0x274>
    3806:	68e3      	ldr	r3, [r4, #12]
    3808:	f8d4 a008 	ldr.w	sl, [r4, #8]
    380c:	454b      	cmp	r3, r9
    380e:	f300 80a2 	bgt.w	3956 <sym_100258+0x2c6>
    3812:	fb0a fb03 	mul.w	fp, sl, r3
    3816:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    381a:	4658      	mov	r0, fp
    381c:	930f      	str	r3, [sp, #60]	; 0x3c
    381e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    3822:	950d      	str	r5, [sp, #52]	; 0x34
    3824:	f7ff fe58 	bl	34d8 <sym_100264>
    3828:	2800      	cmp	r0, #0
    382a:	bf14      	ite	ne
    382c:	2301      	movne	r3, #1
    382e:	2300      	moveq	r3, #0
    3830:	9011      	str	r0, [sp, #68]	; 0x44
    3832:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3836:	d051      	beq.n	38dc <sym_100258+0x24c>
    3838:	68a3      	ldr	r3, [r4, #8]
    383a:	2b00      	cmp	r3, #0
    383c:	dd22      	ble.n	3884 <sym_100258+0x1f4>
    383e:	f04f 0e00 	mov.w	lr, #0
    3842:	68e3      	ldr	r3, [r4, #12]
    3844:	2b00      	cmp	r3, #0
    3846:	dd1a      	ble.n	387e <sym_100258+0x1ee>
    3848:	2200      	movs	r2, #0
    384a:	fb0e 2303 	mla	r3, lr, r3, r2
    384e:	6920      	ldr	r0, [r4, #16]
    3850:	9f10      	ldr	r7, [sp, #64]	; 0x40
    3852:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    3856:	f8d3 c000 	ldr.w	ip, [r3]
    385a:	6858      	ldr	r0, [r3, #4]
    385c:	fb07 e302 	mla	r3, r7, r2, lr
    3860:	9911      	ldr	r1, [sp, #68]	; 0x44
    3862:	3201      	adds	r2, #1
    3864:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3868:	f8c3 c000 	str.w	ip, [r3]
    386c:	6058      	str	r0, [r3, #4]
    386e:	68e3      	ldr	r3, [r4, #12]
    3870:	4293      	cmp	r3, r2
    3872:	dcea      	bgt.n	384a <sym_100258+0x1ba>
    3874:	68a2      	ldr	r2, [r4, #8]
    3876:	f10e 0e01 	add.w	lr, lr, #1
    387a:	4596      	cmp	lr, r2
    387c:	dbe2      	blt.n	3844 <sym_100258+0x1b4>
    387e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3882:	b35b      	cbz	r3, 38dc <sym_100258+0x24c>
    3884:	9b04      	ldr	r3, [sp, #16]
    3886:	eeb0 0a48 	vmov.f32	s0, s16
    388a:	9803      	ldr	r0, [sp, #12]
    388c:	9300      	str	r3, [sp, #0]
    388e:	aa07      	add	r2, sp, #28
    3890:	ab08      	add	r3, sp, #32
    3892:	a90d      	add	r1, sp, #52	; 0x34
    3894:	f7fd fa28 	bl	ce8 <sym_100261>
    3898:	ed9f 0a18 	vldr	s0, [pc, #96]	; 38fc <sym_100258+0x26c>
    389c:	eddd 6a07 	vldr	s13, [sp, #28]
    38a0:	ee28 0a00 	vmul.f32	s0, s16, s0
    38a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 3900 <sym_100258+0x270>
    38a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
    38ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    38b0:	9811      	ldr	r0, [sp, #68]	; 0x44
    38b2:	edc6 7a00 	vstr	s15, [r6]
    38b6:	950d      	str	r5, [sp, #52]	; 0x34
    38b8:	2800      	cmp	r0, #0
    38ba:	f43f af41 	beq.w	3740 <sym_100258+0xb0>
    38be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    38c2:	2b00      	cmp	r3, #0
    38c4:	f43f af3c 	beq.w	3740 <sym_100258+0xb0>
    38c8:	f7ff fe08 	bl	34dc <sym_100265>
    38cc:	b013      	add	sp, #76	; 0x4c
    38ce:	ecbd 8b02 	vpop	{d8}
    38d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38d6:	f7ff fe01 	bl	34dc <sym_100265>
    38da:	e76b      	b.n	37b4 <sym_100258+0x124>
    38dc:	4b06      	ldr	r3, [pc, #24]	; (38f8 <sym_100258+0x268>)
    38de:	6033      	str	r3, [r6, #0]
    38e0:	b013      	add	sp, #76	; 0x4c
    38e2:	ecbd 8b02 	vpop	{d8}
    38e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38ea:	f7ff fdf7 	bl	34dc <sym_100265>
    38ee:	e778      	b.n	37e2 <sym_100258+0x152>
    38f0:	0001fb7c 	.word	0x0001fb7c
    38f4:	0001fb54 	.word	0x0001fb54
    38f8:	7fc00000 	.word	0x7fc00000
    38fc:	40c90fdb 	.word	0x40c90fdb
    3900:	4d8ef3c2 	.word	0x4d8ef3c2
    3904:	ea4f 0389 	mov.w	r3, r9, lsl #2
    3908:	4618      	mov	r0, r3
    390a:	9305      	str	r3, [sp, #20]
    390c:	f7ff fde4 	bl	34d8 <sym_100264>
    3910:	9b05      	ldr	r3, [sp, #20]
    3912:	4683      	mov	fp, r0
    3914:	b158      	cbz	r0, 392e <sym_100258+0x29e>
    3916:	4659      	mov	r1, fp
    3918:	2200      	movs	r2, #0
    391a:	1818      	adds	r0, r3, r0
    391c:	f8da 3010 	ldr.w	r3, [sl, #16]
    3920:	4413      	add	r3, r2
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	3204      	adds	r2, #4
    3926:	f841 3b04 	str.w	r3, [r1], #4
    392a:	4288      	cmp	r0, r1
    392c:	d1f6      	bne.n	391c <sym_100258+0x28c>
    392e:	f8da 0010 	ldr.w	r0, [sl, #16]
    3932:	b118      	cbz	r0, 393c <sym_100258+0x2ac>
    3934:	f89a 3004 	ldrb.w	r3, [sl, #4]
    3938:	2b00      	cmp	r3, #0
    393a:	d14e      	bne.n	39da <sym_100258+0x34a>
    393c:	2301      	movs	r3, #1
    393e:	f8ca b010 	str.w	fp, [sl, #16]
    3942:	f8ca 900c 	str.w	r9, [sl, #12]
    3946:	f8ca 3008 	str.w	r3, [sl, #8]
    394a:	68e3      	ldr	r3, [r4, #12]
    394c:	f8d4 a008 	ldr.w	sl, [r4, #8]
    3950:	454b      	cmp	r3, r9
    3952:	f77f af5e 	ble.w	3812 <sym_100258+0x182>
    3956:	fb0a fb09 	mul.w	fp, sl, r9
    395a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    395e:	4658      	mov	r0, fp
    3960:	f7ff fdba 	bl	34d8 <sym_100264>
    3964:	4603      	mov	r3, r0
    3966:	b1e8      	cbz	r0, 39a4 <sym_100258+0x314>
    3968:	f1ba 0f00 	cmp.w	sl, #0
    396c:	dd1a      	ble.n	39a4 <sym_100258+0x314>
    396e:	f04f 0e00 	mov.w	lr, #0
    3972:	4670      	mov	r0, lr
    3974:	2700      	movs	r7, #0
    3976:	eb03 01ce 	add.w	r1, r3, lr, lsl #3
    397a:	68e2      	ldr	r2, [r4, #12]
    397c:	3108      	adds	r1, #8
    397e:	fb02 7c00 	mla	ip, r2, r0, r7
    3982:	6922      	ldr	r2, [r4, #16]
    3984:	3701      	adds	r7, #1
    3986:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
    398a:	f8d2 c000 	ldr.w	ip, [r2]
    398e:	45b9      	cmp	r9, r7
    3990:	f841 cc08 	str.w	ip, [r1, #-8]
    3994:	6852      	ldr	r2, [r2, #4]
    3996:	f841 2c04 	str.w	r2, [r1, #-4]
    399a:	d1ee      	bne.n	397a <sym_100258+0x2ea>
    399c:	3001      	adds	r0, #1
    399e:	4550      	cmp	r0, sl
    39a0:	44ce      	add	lr, r9
    39a2:	d1e7      	bne.n	3974 <sym_100258+0x2e4>
    39a4:	6920      	ldr	r0, [r4, #16]
    39a6:	b108      	cbz	r0, 39ac <sym_100258+0x31c>
    39a8:	7922      	ldrb	r2, [r4, #4]
    39aa:	b9ca      	cbnz	r2, 39e0 <sym_100258+0x350>
    39ac:	6123      	str	r3, [r4, #16]
    39ae:	f8c4 a008 	str.w	sl, [r4, #8]
    39b2:	464b      	mov	r3, r9
    39b4:	f8c4 900c 	str.w	r9, [r4, #12]
    39b8:	e72f      	b.n	381a <sym_100258+0x18a>
    39ba:	a807      	add	r0, sp, #28
    39bc:	f7fd fbe4 	bl	1188 <sym_100248>
    39c0:	e9cd 4a00 	strd	r4, sl, [sp]
    39c4:	9b03      	ldr	r3, [sp, #12]
    39c6:	a807      	add	r0, sp, #28
    39c8:	69db      	ldr	r3, [r3, #28]
    39ca:	aa0d      	add	r2, sp, #52	; 0x34
    39cc:	a908      	add	r1, sp, #32
    39ce:	f7ff fbcb 	bl	3168 <sym_100250>
    39d2:	a807      	add	r0, sp, #28
    39d4:	f7fd fbd0 	bl	1178 <sym_100245>
    39d8:	e6fb      	b.n	37d2 <sym_100258+0x142>
    39da:	f7ff fd7f 	bl	34dc <sym_100265>
    39de:	e7ad      	b.n	393c <sym_100258+0x2ac>
    39e0:	9305      	str	r3, [sp, #20]
    39e2:	f7ff fd7b 	bl	34dc <sym_100265>
    39e6:	9b05      	ldr	r3, [sp, #20]
    39e8:	e7e0      	b.n	39ac <sym_100258+0x31c>
    39ea:	bf00      	nop

000039ec <sym_100257>:
    39ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39f0:	ed2d 8b02 	vpush	{d8}
    39f4:	461e      	mov	r6, r3
    39f6:	69c3      	ldr	r3, [r0, #28]
    39f8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    39fc:	428b      	cmp	r3, r1
    39fe:	bfa8      	it	ge
    3a00:	460b      	movge	r3, r1
    3a02:	fb01 fa03 	mul.w	sl, r1, r3
    3a06:	ea4f 04ca 	mov.w	r4, sl, lsl #3
    3a0a:	b08e      	sub	sp, #56	; 0x38
    3a0c:	4605      	mov	r5, r0
    3a0e:	4620      	mov	r0, r4
    3a10:	4689      	mov	r9, r1
    3a12:	eeb0 8a40 	vmov.f32	s16, s0
    3a16:	4617      	mov	r7, r2
    3a18:	f8cd 8010 	str.w	r8, [sp, #16]
    3a1c:	9106      	str	r1, [sp, #24]
    3a1e:	9307      	str	r3, [sp, #28]
    3a20:	f7ff fd5a 	bl	34d8 <sym_100264>
    3a24:	9008      	str	r0, [sp, #32]
    3a26:	2800      	cmp	r0, #0
    3a28:	d05d      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3a2a:	2301      	movs	r3, #1
    3a2c:	f1ba 0f00 	cmp.w	sl, #0
    3a30:	f88d 3014 	strb.w	r3, [sp, #20]
    3a34:	dd0e      	ble.n	3a54 <sym_100257+0x68>
    3a36:	eb00 0c04 	add.w	ip, r0, r4
    3a3a:	4560      	cmp	r0, ip
    3a3c:	d00a      	beq.n	3a54 <sym_100257+0x68>
    3a3e:	4b2d      	ldr	r3, [pc, #180]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a40:	681a      	ldr	r2, [r3, #0]
    3a42:	685b      	ldr	r3, [r3, #4]
    3a44:	6002      	str	r2, [r0, #0]
    3a46:	6043      	str	r3, [r0, #4]
    3a48:	3008      	adds	r0, #8
    3a4a:	4584      	cmp	ip, r0
    3a4c:	d1fa      	bne.n	3a44 <sym_100257+0x58>
    3a4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3a52:	b19b      	cbz	r3, 3a7c <sym_100257+0x90>
    3a54:	69e8      	ldr	r0, [r5, #28]
    3a56:	2301      	movs	r3, #1
    3a58:	4548      	cmp	r0, r9
    3a5a:	bfa8      	it	ge
    3a5c:	4648      	movge	r0, r9
    3a5e:	4c26      	ldr	r4, [pc, #152]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a60:	900c      	str	r0, [sp, #48]	; 0x30
    3a62:	0080      	lsls	r0, r0, #2
    3a64:	930b      	str	r3, [sp, #44]	; 0x2c
    3a66:	9409      	str	r4, [sp, #36]	; 0x24
    3a68:	f7ff fd36 	bl	34d8 <sym_100264>
    3a6c:	2800      	cmp	r0, #0
    3a6e:	bf14      	ite	ne
    3a70:	2301      	movne	r3, #1
    3a72:	2300      	moveq	r3, #0
    3a74:	900d      	str	r0, [sp, #52]	; 0x34
    3a76:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    3a7a:	d10d      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a7c:	4b1f      	ldr	r3, [pc, #124]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3a7e:	9808      	ldr	r0, [sp, #32]
    3a80:	6033      	str	r3, [r6, #0]
    3a82:	f8cd 8010 	str.w	r8, [sp, #16]
    3a86:	b110      	cbz	r0, 3a8e <sym_100257+0xa2>
    3a88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3a8c:	bb0b      	cbnz	r3, 3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
    3a8e:	b00e      	add	sp, #56	; 0x38
    3a90:	ecbd 8b02 	vpop	{d8}
    3a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a98:	4628      	mov	r0, r5
    3a9a:	9d18      	ldr	r5, [sp, #96]	; 0x60
    3a9c:	4633      	mov	r3, r6
    3a9e:	9502      	str	r5, [sp, #8]
    3aa0:	ad09      	add	r5, sp, #36	; 0x24
    3aa2:	9501      	str	r5, [sp, #4]
    3aa4:	ad04      	add	r5, sp, #16
    3aa6:	463a      	mov	r2, r7
    3aa8:	4649      	mov	r1, r9
    3aaa:	eeb0 0a48 	vmov.f32	s0, s16
    3aae:	9500      	str	r5, [sp, #0]
    3ab0:	f7ff fdee 	bl	3690 <sym_100258>
    3ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
    3ab6:	9409      	str	r4, [sp, #36]	; 0x24
    3ab8:	b110      	cbz	r0, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3aba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3abe:	b97b      	cbnz	r3, 3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3ac0:	9808      	ldr	r0, [sp, #32]
    3ac2:	f8cd 8010 	str.w	r8, [sp, #16]
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d0e1      	beq.n	3a8e <sym_100257+0xa2>
    3aca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d0dd      	beq.n	3a8e <sym_100257+0xa2>
    3ad2:	f7ff fd03 	bl	34dc <sym_100265>
    3ad6:	b00e      	add	sp, #56	; 0x38
    3ad8:	ecbd 8b02 	vpop	{d8}
    3adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ae0:	f7ff fcfc 	bl	34dc <sym_100265>
    3ae4:	e7ec      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3ae6:	4b05      	ldr	r3, [pc, #20]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3ae8:	6033      	str	r3, [r6, #0]
    3aea:	b00e      	add	sp, #56	; 0x38
    3aec:	ecbd 8b02 	vpop	{d8}
    3af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3af4:	0001fb54 	.word	0x0001fb54
    3af8:	0001fb6c 	.word	0x0001fb6c
    3afc:	7fc00000 	.word	0x7fc00000
    3b00:	0001fb7c 	.word	0x0001fb7c

00003b04 <sym_100242>:
    3b04:	b530      	push	{r4, r5, lr}
    3b06:	2100      	movs	r1, #0
    3b08:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3b38 <sym_100242+0x34>
    3b0c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 3b3c <sym_100242+0x38>
    3b10:	f04f 4e88 	mov.w	lr, #1140850688	; 0x44000000
    3b14:	2564      	movs	r5, #100	; 0x64
    3b16:	2408      	movs	r4, #8
    3b18:	f8df c028 	ldr.w	ip, [pc, #40]	; 3b44 <sym_100242+0x40>
    3b1c:	4a08      	ldr	r2, [pc, #32]	; (3b40 <sym_100242+0x3c>)
    3b1e:	ed80 7a03 	vstr	s14, [r0, #12]
    3b22:	edc0 7a04 	vstr	s15, [r0, #16]
    3b26:	f8c0 e014 	str.w	lr, [r0, #20]
    3b2a:	6185      	str	r5, [r0, #24]
    3b2c:	61c4      	str	r4, [r0, #28]
    3b2e:	f8c0 c000 	str.w	ip, [r0]
    3b32:	6041      	str	r1, [r0, #4]
    3b34:	6082      	str	r2, [r0, #8]
    3b36:	bd30      	pop	{r4, r5, pc}
    3b38:	33d6bf95 	.word	0x33d6bf95
    3b3c:	3f7d70a4 	.word	0x3f7d70a4
    3b40:	3dcccccd 	.word	0x3dcccccd
    3b44:	3ba3d70a 	.word	0x3ba3d70a

00003b48 <sym_100252>:
    3b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b4c:	68c2      	ldr	r2, [r0, #12]
    3b4e:	4604      	mov	r4, r0
    3b50:	1e57      	subs	r7, r2, #1
    3b52:	460e      	mov	r6, r1
    3b54:	b083      	sub	sp, #12
    3b56:	d102      	bne.n	3b5e <sym_100252+0x16>
    3b58:	b003      	add	sp, #12
    3b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b5e:	321e      	adds	r2, #30
    3b60:	0952      	lsrs	r2, r2, #5
    3b62:	0092      	lsls	r2, r2, #2
    3b64:	4610      	mov	r0, r2
    3b66:	9201      	str	r2, [sp, #4]
    3b68:	f7fd fb02 	bl	1170 <sym_100199>
    3b6c:	2100      	movs	r1, #0
    3b6e:	9a01      	ldr	r2, [sp, #4]
    3b70:	4605      	mov	r5, r0
    3b72:	f01b fc4e 	bl	1f412 <memset>
    3b76:	2f00      	cmp	r7, #0
    3b78:	f340 8097 	ble.w	3caa <sym_100252+0x162>
    3b7c:	2100      	movs	r1, #0
    3b7e:	f04f 0801 	mov.w	r8, #1
    3b82:	68e3      	ldr	r3, [r4, #12]
    3b84:	6922      	ldr	r2, [r4, #16]
    3b86:	fb03 f006 	mul.w	r0, r3, r6
    3b8a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    3b8e:	ed92 7a03 	vldr	s14, [r2, #12]
    3b92:	edd2 7a00 	vldr	s15, [r2]
    3b96:	edd2 6a02 	vldr	s13, [r2, #8]
    3b9a:	ed92 6a01 	vldr	s12, [r2, #4]
    3b9e:	ee76 4ae7 	vsub.f32	s9, s13, s15
    3ba2:	ee37 4a46 	vsub.f32	s8, s14, s12
    3ba6:	ee77 6aa6 	vadd.f32	s13, s15, s13
    3baa:	eef0 5ae4 	vabs.f32	s11, s9
    3bae:	eef0 7ac4 	vabs.f32	s15, s8
    3bb2:	eef4 5ae7 	vcmpe.f32	s11, s15
    3bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3bba:	bf58      	it	pl
    3bbc:	eef0 7a65 	vmovpl.f32	s15, s11
    3bc0:	ee37 6a06 	vadd.f32	s12, s14, s12
    3bc4:	eef5 7a40 	vcmp.f32	s15, #0.0
    3bc8:	eeb0 5ae6 	vabs.f32	s10, s13
    3bcc:	eeb0 7ac6 	vabs.f32	s14, s12
    3bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3bd4:	f001 001f 	and.w	r0, r1, #31
    3bd8:	ea4f 1e51 	mov.w	lr, r1, lsr #5
    3bdc:	eeb4 5ac7 	vcmpe.f32	s10, s14
    3be0:	fa08 f000 	lsl.w	r0, r8, r0
    3be4:	f101 0101 	add.w	r1, r1, #1
    3be8:	d00b      	beq.n	3c02 <sym_100252+0xba>
    3bea:	eec4 5a27 	vdiv.f32	s11, s8, s15
    3bee:	ee84 4aa7 	vdiv.f32	s8, s9, s15
    3bf2:	ee65 5aa5 	vmul.f32	s11, s11, s11
    3bf6:	eee4 5a04 	vfma.f32	s11, s8, s8
    3bfa:	eef1 4ae5 	vsqrt.f32	s9, s11
    3bfe:	ee67 7aa4 	vmul.f32	s15, s15, s9
    3c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c06:	bf58      	it	pl
    3c08:	eeb0 7a45 	vmovpl.f32	s14, s10
    3c0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c14:	d00b      	beq.n	3c2e <sym_100252+0xe6>
    3c16:	eec6 5a07 	vdiv.f32	s11, s12, s14
    3c1a:	ee86 6a87 	vdiv.f32	s12, s13, s14
    3c1e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    3c22:	eee6 5a06 	vfma.f32	s11, s12, s12
    3c26:	eef1 6ae5 	vsqrt.f32	s13, s11
    3c2a:	ee27 7a26 	vmul.f32	s14, s14, s13
    3c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c36:	f855 c02e 	ldr.w	ip, [r5, lr, lsl #2]
    3c3a:	ea40 090c 	orr.w	r9, r0, ip
    3c3e:	ea2c 0000 	bic.w	r0, ip, r0
    3c42:	d538      	bpl.n	3cb6 <sym_100252+0x16e>
    3c44:	42b9      	cmp	r1, r7
    3c46:	f845 902e 	str.w	r9, [r5, lr, lsl #2]
    3c4a:	f102 0208 	add.w	r2, r2, #8
    3c4e:	d19e      	bne.n	3b8e <sym_100252+0x46>
    3c50:	2100      	movs	r1, #0
    3c52:	2001      	movs	r0, #1
    3c54:	e001      	b.n	3c5a <sym_100252+0x112>
    3c56:	428f      	cmp	r7, r1
    3c58:	d027      	beq.n	3caa <sym_100252+0x162>
    3c5a:	460a      	mov	r2, r1
    3c5c:	ea4f 1c51 	mov.w	ip, r1, lsr #5
    3c60:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
    3c64:	f002 021f 	and.w	r2, r2, #31
    3c68:	fa00 f202 	lsl.w	r2, r0, r2
    3c6c:	ea12 0f0c 	tst.w	r2, ip
    3c70:	f101 0101 	add.w	r1, r1, #1
    3c74:	d0ef      	beq.n	3c56 <sym_100252+0x10e>
    3c76:	428b      	cmp	r3, r1
    3c78:	dded      	ble.n	3c56 <sym_100252+0x10e>
    3c7a:	460a      	mov	r2, r1
    3c7c:	fb03 2c06 	mla	ip, r3, r6, r2
    3c80:	6923      	ldr	r3, [r4, #16]
    3c82:	3201      	adds	r2, #1
    3c84:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
    3c88:	ed93 7a01 	vldr	s14, [r3, #4]
    3c8c:	edd3 7a00 	vldr	s15, [r3]
    3c90:	eeb1 7a47 	vneg.f32	s14, s14
    3c94:	eef1 7a67 	vneg.f32	s15, s15
    3c98:	ed83 7a01 	vstr	s14, [r3, #4]
    3c9c:	edc3 7a00 	vstr	s15, [r3]
    3ca0:	68e3      	ldr	r3, [r4, #12]
    3ca2:	429a      	cmp	r2, r3
    3ca4:	dbea      	blt.n	3c7c <sym_100252+0x134>
    3ca6:	428f      	cmp	r7, r1
    3ca8:	d1d7      	bne.n	3c5a <sym_100252+0x112>
    3caa:	4628      	mov	r0, r5
    3cac:	b003      	add	sp, #12
    3cae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cb2:	f7fd ba5f 	b.w	1174 <sym_100204>
    3cb6:	42b9      	cmp	r1, r7
    3cb8:	f845 002e 	str.w	r0, [r5, lr, lsl #2]
    3cbc:	f102 0208 	add.w	r2, r2, #8
    3cc0:	f47f af65 	bne.w	3b8e <sym_100252+0x46>
    3cc4:	e7c4      	b.n	3c50 <sym_100252+0x108>
    3cc6:	bf00      	nop

00003cc8 <sym_100240>:
    3cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ccc:	ed2d 8b08 	vpush	{d8-d11}
    3cd0:	b097      	sub	sp, #92	; 0x5c
    3cd2:	9313      	str	r3, [sp, #76]	; 0x4c
    3cd4:	6893      	ldr	r3, [r2, #8]
    3cd6:	4693      	mov	fp, r2
    3cd8:	2b00      	cmp	r3, #0
    3cda:	9014      	str	r0, [sp, #80]	; 0x50
    3cdc:	9115      	str	r1, [sp, #84]	; 0x54
    3cde:	f340 842f 	ble.w	4540 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x540>
    3ce2:	2300      	movs	r3, #0
    3ce4:	eddf 9a55 	vldr	s19, [pc, #340]	; 3e3c <sym_100240+0x174>
    3ce8:	ed9f 8a55 	vldr	s16, [pc, #340]	; 3e40 <sym_100240+0x178>
    3cec:	eddf 8a55 	vldr	s17, [pc, #340]	; 3e44 <sym_100240+0x17c>
    3cf0:	ed9f 9a56 	vldr	s18, [pc, #344]	; 3e4c <sym_100240+0x184>
    3cf4:	469a      	mov	sl, r3
    3cf6:	f8db 700c 	ldr.w	r7, [fp, #12]
    3cfa:	00fd      	lsls	r5, r7, #3
    3cfc:	4628      	mov	r0, r5
    3cfe:	f7ff fbeb 	bl	34d8 <sym_100264>
    3d02:	4606      	mov	r6, r0
    3d04:	2800      	cmp	r0, #0
    3d06:	f000 844e 	beq.w	45a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a6>
    3d0a:	f8db 300c 	ldr.w	r3, [fp, #12]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	f340 80a0 	ble.w	3e54 <sym_100240+0x18c>
    3d14:	4680      	mov	r8, r0
    3d16:	46b1      	mov	r9, r6
    3d18:	4638      	mov	r0, r7
    3d1a:	2400      	movs	r4, #0
    3d1c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    3d20:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3d22:	9f15      	ldr	r7, [sp, #84]	; 0x54
    3d24:	e015      	b.n	3d52 <sym_100240+0x8a>
    3d26:	ee26 6a0a 	vmul.f32	s12, s12, s20
    3d2a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    3d2e:	eef1 6ac6 	vsqrt.f32	s13, s12
    3d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d36:	bf4c      	ite	mi
    3d38:	eef1 7a66 	vnegmi.f32	s15, s13
    3d3c:	eef0 7a66 	vmovpl.f32	s15, s13
    3d40:	edc3 6a00 	vstr	s13, [r3]
    3d44:	edc3 7a01 	vstr	s15, [r3, #4]
    3d48:	f8db 300c 	ldr.w	r3, [fp, #12]
    3d4c:	3401      	adds	r4, #1
    3d4e:	42a3      	cmp	r3, r4
    3d50:	dd7e      	ble.n	3e50 <sym_100240+0x188>
    3d52:	68f2      	ldr	r2, [r6, #12]
    3d54:	68f9      	ldr	r1, [r7, #12]
    3d56:	fb02 420a 	mla	r2, r2, sl, r4
    3d5a:	6933      	ldr	r3, [r6, #16]
    3d5c:	fb01 410a 	mla	r1, r1, sl, r4
    3d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3d64:	ed93 1a00 	vldr	s2, [r3]
    3d68:	edd3 1a01 	vldr	s3, [r3, #4]
    3d6c:	693b      	ldr	r3, [r7, #16]
    3d6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3d72:	edd3 0a01 	vldr	s1, [r3, #4]
    3d76:	ed93 0a00 	vldr	s0, [r3]
    3d7a:	ee20 7a81 	vmul.f32	s14, s1, s2
    3d7e:	ee60 7ae1 	vnmul.f32	s15, s1, s3
    3d82:	eea0 7a21 	vfma.f32	s14, s0, s3
    3d86:	eee0 7a01 	vfma.f32	s15, s0, s2
    3d8a:	eeb4 7a67 	vcmp.f32	s14, s15
    3d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d92:	f180 8421 	bvs.w	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    3d96:	eeb0 0a67 	vmov.f32	s0, s15
    3d9a:	eef0 0a47 	vmov.f32	s1, s14
    3d9e:	eef5 7a40 	vcmp.f32	s15, #0.0
    3da2:	ed88 0a00 	vstr	s0, [r8]
    3da6:	edc8 0a01 	vstr	s1, [r8, #4]
    3daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dae:	f8db 200c 	ldr.w	r2, [fp, #12]
    3db2:	f8db 3010 	ldr.w	r3, [fp, #16]
    3db6:	fb02 420a 	mla	r2, r2, sl, r4
    3dba:	eeb0 6ac7 	vabs.f32	s12, s14
    3dbe:	f108 0808 	add.w	r8, r8, #8
    3dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3dc6:	d0ae      	beq.n	3d26 <sym_100240+0x5e>
    3dc8:	eef0 6ae7 	vabs.f32	s13, s15
    3dcc:	eef4 6ac6 	vcmpe.f32	s13, s12
    3dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dd4:	bf54      	ite	pl
    3dd6:	eef0 5a66 	vmovpl.f32	s11, s13
    3dda:	eef0 5a46 	vmovmi.f32	s11, s12
    3dde:	eef5 5a40 	vcmp.f32	s11, #0.0
    3de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3de6:	d00b      	beq.n	3e00 <sym_100240+0x138>
    3de8:	ee87 5a25 	vdiv.f32	s10, s14, s11
    3dec:	eec7 4aa5 	vdiv.f32	s9, s15, s11
    3df0:	ee25 5a05 	vmul.f32	s10, s10, s10
    3df4:	eea4 5aa4 	vfma.f32	s10, s9, s9
    3df8:	eef1 4ac5 	vsqrt.f32	s9, s10
    3dfc:	ee65 5aa4 	vmul.f32	s11, s11, s9
    3e00:	ee76 6aa5 	vadd.f32	s13, s13, s11
    3e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3e08:	ee76 6aa6 	vadd.f32	s13, s13, s13
    3e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e10:	eef1 5ae6 	vsqrt.f32	s11, s13
    3e14:	ee65 6a8a 	vmul.f32	s13, s11, s20
    3e18:	dd02      	ble.n	3e20 <sym_100240+0x158>
    3e1a:	eec7 7a25 	vdiv.f32	s15, s14, s11
    3e1e:	e78f      	b.n	3d40 <sym_100240+0x78>
    3e20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    3e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e28:	ee86 5a25 	vdiv.f32	s10, s12, s11
    3e2c:	bf48      	it	mi
    3e2e:	eef1 6a66 	vnegmi.f32	s13, s13
    3e32:	eef0 7a66 	vmov.f32	s15, s13
    3e36:	eef0 6a45 	vmov.f32	s13, s10
    3e3a:	e781      	b.n	3d40 <sym_100240+0x78>
    3e3c:	7fc00000 	.word	0x7fc00000
    3e40:	40490fdb 	.word	0x40490fdb
    3e44:	40c90fdb 	.word	0x40c90fdb
    3e48:	c0490fdb 	.word	0xc0490fdb
    3e4c:	00000000 	.word	0x00000000
    3e50:	4607      	mov	r7, r0
    3e52:	464e      	mov	r6, r9
    3e54:	00bb      	lsls	r3, r7, #2
    3e56:	461c      	mov	r4, r3
    3e58:	4651      	mov	r1, sl
    3e5a:	4658      	mov	r0, fp
    3e5c:	9301      	str	r3, [sp, #4]
    3e5e:	f7ff fe73 	bl	3b48 <sym_100252>
    3e62:	4620      	mov	r0, r4
    3e64:	f7ff fb38 	bl	34d8 <sym_100264>
    3e68:	4680      	mov	r8, r0
    3e6a:	2800      	cmp	r0, #0
    3e6c:	f000 83a1 	beq.w	45b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b2>
    3e70:	2f00      	cmp	r7, #0
    3e72:	dd0e      	ble.n	3e92 <sym_100240+0x1ca>
    3e74:	46b1      	mov	r9, r6
    3e76:	4604      	mov	r4, r0
    3e78:	4435      	add	r5, r6
    3e7a:	edd9 0a00 	vldr	s1, [r9]
    3e7e:	ed99 0a01 	vldr	s0, [r9, #4]
    3e82:	f01b fa7a 	bl	1f37a <atan2f>
    3e86:	f109 0908 	add.w	r9, r9, #8
    3e8a:	454d      	cmp	r5, r9
    3e8c:	eca4 0a01 	vstmia	r4!, {s0}
    3e90:	d1f3      	bne.n	3e7a <sym_100240+0x1b2>
    3e92:	9b01      	ldr	r3, [sp, #4]
    3e94:	3f01      	subs	r7, #1
    3e96:	1f1c      	subs	r4, r3, #4
    3e98:	4620      	mov	r0, r4
    3e9a:	f7ff fb1d 	bl	34d8 <sym_100264>
    3e9e:	2800      	cmp	r0, #0
    3ea0:	f000 838a 	beq.w	45b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b8>
    3ea4:	2f00      	cmp	r7, #0
    3ea6:	f340 8394 	ble.w	45d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d2>
    3eaa:	4642      	mov	r2, r8
    3eac:	4603      	mov	r3, r0
    3eae:	4605      	mov	r5, r0
    3eb0:	eb08 0c04 	add.w	ip, r8, r4
    3eb4:	4611      	mov	r1, r2
    3eb6:	edd1 7a01 	vldr	s15, [r1, #4]
    3eba:	ed91 7a00 	vldr	s14, [r1]
    3ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3ec2:	3204      	adds	r2, #4
    3ec4:	4594      	cmp	ip, r2
    3ec6:	ece5 7a01 	vstmia	r5!, {s15}
    3eca:	d1f3      	bne.n	3eb4 <sym_100240+0x1ec>
    3ecc:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 3e4c <sym_100240+0x184>
    3ed0:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 3e48 <sym_100240+0x180>
    3ed4:	4404      	add	r4, r0
    3ed6:	ecf3 7a01 	vldmia	r3!, {s15}
    3eda:	eef4 7ac8 	vcmpe.f32	s15, s16
    3ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ee2:	bfc8      	it	gt
    3ee4:	ee77 7ae8 	vsubgt.f32	s15, s15, s17
    3ee8:	eef4 7ae6 	vcmpe.f32	s15, s13
    3eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ef0:	bf48      	it	mi
    3ef2:	ee77 7aa8 	vaddmi.f32	s15, s15, s17
    3ef6:	429c      	cmp	r4, r3
    3ef8:	ed43 7a01 	vstr	s15, [r3, #-4]
    3efc:	ee37 7a27 	vadd.f32	s14, s14, s15
    3f00:	d1e9      	bne.n	3ed6 <sym_100240+0x20e>
    3f02:	ee07 7a90 	vmov	s15, r7
    3f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f0a:	ee87 ba27 	vdiv.f32	s22, s14, s15
    3f0e:	f7ff fae5 	bl	34dc <sym_100265>
    3f12:	4640      	mov	r0, r8
    3f14:	f7ff fae2 	bl	34dc <sym_100265>
    3f18:	4630      	mov	r0, r6
    3f1a:	f7ff fadf 	bl	34dc <sym_100265>
    3f1e:	f8db 400c 	ldr.w	r4, [fp, #12]
    3f22:	00e6      	lsls	r6, r4, #3
    3f24:	4630      	mov	r0, r6
    3f26:	f7ff fad7 	bl	34d8 <sym_100264>
    3f2a:	9008      	str	r0, [sp, #32]
    3f2c:	2800      	cmp	r0, #0
    3f2e:	f000 833a 	beq.w	45a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a6>
    3f32:	2c00      	cmp	r4, #0
    3f34:	f340 8343 	ble.w	45be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5be>
    3f38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3f3c:	4607      	mov	r7, r0
    3f3e:	4680      	mov	r8, r0
    3f40:	2500      	movs	r5, #0
    3f42:	ee27 bacb 	vnmul.f32	s22, s15, s22
    3f46:	ee07 5a90 	vmov	s15, r5
    3f4a:	eef8 aae7 	vcvt.f32.s32	s21, s15
    3f4e:	ee6a aa8b 	vmul.f32	s21, s21, s22
    3f52:	eeb0 0a6a 	vmov.f32	s0, s21
    3f56:	f015 f9ef 	bl	19338 <cosf>
    3f5a:	eeb0 aa40 	vmov.f32	s20, s0
    3f5e:	eeb0 0a6a 	vmov.f32	s0, s21
    3f62:	f015 fa2d 	bl	193c0 <sinf>
    3f66:	f8db 300c 	ldr.w	r3, [fp, #12]
    3f6a:	fb03 520a 	mla	r2, r3, sl, r5
    3f6e:	f8db 3010 	ldr.w	r3, [fp, #16]
    3f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3f76:	edd3 0a01 	vldr	s1, [r3, #4]
    3f7a:	edd3 6a00 	vldr	s13, [r3]
    3f7e:	ee6a 7a20 	vmul.f32	s15, s20, s1
    3f82:	ee20 7ac0 	vnmul.f32	s14, s1, s0
    3f86:	eee0 7a26 	vfma.f32	s15, s0, s13
    3f8a:	eeaa 7a26 	vfma.f32	s14, s20, s13
    3f8e:	eef4 7a47 	vcmp.f32	s15, s14
    3f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f96:	f180 8329 	bvs.w	45ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ec>
    3f9a:	3501      	adds	r5, #1
    3f9c:	42ac      	cmp	r4, r5
    3f9e:	ed88 7a00 	vstr	s14, [r8]
    3fa2:	edc8 7a01 	vstr	s15, [r8, #4]
    3fa6:	f108 0808 	add.w	r8, r8, #8
    3faa:	d1cc      	bne.n	3f46 <sym_100240+0x27e>
    3fac:	eef0 3a49 	vmov.f32	s7, s18
    3fb0:	eeb0 4a49 	vmov.f32	s8, s18
    3fb4:	ed5f 5a5b 	vldr	s11, [pc, #-364]	; 3e4c <sym_100240+0x184>
    3fb8:	9b08      	ldr	r3, [sp, #32]
    3fba:	4433      	add	r3, r6
    3fbc:	edd7 6a00 	vldr	s13, [r7]
    3fc0:	ed97 6a01 	vldr	s12, [r7, #4]
    3fc4:	eeb0 7ae6 	vabs.f32	s14, s13
    3fc8:	eef0 7ac6 	vabs.f32	s15, s12
    3fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fd4:	bf58      	it	pl
    3fd6:	eef0 7a47 	vmovpl.f32	s15, s14
    3fda:	eef5 7a40 	vcmp.f32	s15, #0.0
    3fde:	ee73 4aa6 	vadd.f32	s9, s7, s13
    3fe2:	ee34 5a06 	vadd.f32	s10, s8, s12
    3fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fea:	eef0 3a64 	vmov.f32	s7, s9
    3fee:	eeb0 4a45 	vmov.f32	s8, s10
    3ff2:	f000 80cb 	beq.w	418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>
    3ff6:	ee86 7a27 	vdiv.f32	s14, s12, s15
    3ffa:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    3ffe:	ee27 7a07 	vmul.f32	s14, s14, s14
    4002:	eea6 7a06 	vfma.f32	s14, s12, s12
    4006:	eef1 6ac7 	vsqrt.f32	s13, s14
    400a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    400e:	3708      	adds	r7, #8
    4010:	429f      	cmp	r7, r3
    4012:	eee7 5aa7 	vfma.f32	s11, s15, s15
    4016:	d1d1      	bne.n	3fbc <sym_100240+0x2f4>
    4018:	ee07 4a90 	vmov	s15, r4
    401c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    4020:	eec4 6a86 	vdiv.f32	s13, s9, s12
    4024:	eec5 4a06 	vdiv.f32	s9, s10, s12
    4028:	eeb0 7ae6 	vabs.f32	s14, s13
    402c:	eef0 7ae4 	vabs.f32	s15, s9
    4030:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4038:	bf58      	it	pl
    403a:	eef0 7a47 	vmovpl.f32	s15, s14
    403e:	eef5 7a40 	vcmp.f32	s15, #0.0
    4042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4046:	d00b      	beq.n	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    4048:	ee84 7aa7 	vdiv.f32	s14, s9, s15
    404c:	ee86 5aa7 	vdiv.f32	s10, s13, s15
    4050:	ee27 7a07 	vmul.f32	s14, s14, s14
    4054:	eea5 7a05 	vfma.f32	s14, s10, s10
    4058:	eef1 6ac7 	vsqrt.f32	s13, s14
    405c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    4060:	ee67 7aa7 	vmul.f32	s15, s15, s15
    4064:	eec5 6a86 	vdiv.f32	s13, s11, s12
    4068:	ee76 6ae7 	vsub.f32	s13, s13, s15
    406c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    4070:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    4074:	ee67 7a06 	vmul.f32	s15, s14, s12
    4078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    407a:	3e10      	subs	r6, #16
    407c:	691b      	ldr	r3, [r3, #16]
    407e:	ea4f 028a 	mov.w	r2, sl, lsl #2
    4082:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    4086:	edc3 7a00 	vstr	s15, [r3]
    408a:	4630      	mov	r0, r6
    408c:	1ea5      	subs	r5, r4, #2
    408e:	9211      	str	r2, [sp, #68]	; 0x44
    4090:	9506      	str	r5, [sp, #24]
    4092:	f7ff fa21 	bl	34d8 <sym_100264>
    4096:	4603      	mov	r3, r0
    4098:	900f      	str	r0, [sp, #60]	; 0x3c
    409a:	2800      	cmp	r0, #0
    409c:	f000 8280 	beq.w	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    40a0:	2d00      	cmp	r5, #0
    40a2:	f340 8253 	ble.w	454c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54c>
    40a6:	1981      	adds	r1, r0, r6
    40a8:	4288      	cmp	r0, r1
    40aa:	d007      	beq.n	40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>
    40ac:	4a56      	ldr	r2, [pc, #344]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    40ae:	6810      	ldr	r0, [r2, #0]
    40b0:	6852      	ldr	r2, [r2, #4]
    40b2:	6018      	str	r0, [r3, #0]
    40b4:	605a      	str	r2, [r3, #4]
    40b6:	3308      	adds	r3, #8
    40b8:	4299      	cmp	r1, r3
    40ba:	d1fa      	bne.n	40b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb2>
    40bc:	4630      	mov	r0, r6
    40be:	f7ff fa0b 	bl	34d8 <sym_100264>
    40c2:	4603      	mov	r3, r0
    40c4:	900a      	str	r0, [sp, #40]	; 0x28
    40c6:	2800      	cmp	r0, #0
    40c8:	f000 8267 	beq.w	459a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59a>
    40cc:	1999      	adds	r1, r3, r6
    40ce:	4299      	cmp	r1, r3
    40d0:	d007      	beq.n	40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40d2:	4a4d      	ldr	r2, [pc, #308]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    40d4:	6810      	ldr	r0, [r2, #0]
    40d6:	6852      	ldr	r2, [r2, #4]
    40d8:	6018      	str	r0, [r3, #0]
    40da:	605a      	str	r2, [r3, #4]
    40dc:	3308      	adds	r3, #8
    40de:	4299      	cmp	r1, r3
    40e0:	d1fa      	bne.n	40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>
    40e2:	4630      	mov	r0, r6
    40e4:	f7ff f9f8 	bl	34d8 <sym_100264>
    40e8:	4603      	mov	r3, r0
    40ea:	900c      	str	r0, [sp, #48]	; 0x30
    40ec:	2800      	cmp	r0, #0
    40ee:	f000 8251 	beq.w	4594 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x594>
    40f2:	1999      	adds	r1, r3, r6
    40f4:	428b      	cmp	r3, r1
    40f6:	d007      	beq.n	4108 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x108>
    40f8:	4a43      	ldr	r2, [pc, #268]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    40fa:	6810      	ldr	r0, [r2, #0]
    40fc:	6852      	ldr	r2, [r2, #4]
    40fe:	6018      	str	r0, [r3, #0]
    4100:	605a      	str	r2, [r3, #4]
    4102:	3308      	adds	r3, #8
    4104:	4299      	cmp	r1, r3
    4106:	d1fa      	bne.n	40fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfe>
    4108:	4630      	mov	r0, r6
    410a:	f7ff f9e5 	bl	34d8 <sym_100264>
    410e:	4603      	mov	r3, r0
    4110:	900d      	str	r0, [sp, #52]	; 0x34
    4112:	2800      	cmp	r0, #0
    4114:	f000 823b 	beq.w	458e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58e>
    4118:	1999      	adds	r1, r3, r6
    411a:	4299      	cmp	r1, r3
    411c:	d007      	beq.n	412e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12e>
    411e:	4a3a      	ldr	r2, [pc, #232]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4120:	6810      	ldr	r0, [r2, #0]
    4122:	6852      	ldr	r2, [r2, #4]
    4124:	6018      	str	r0, [r3, #0]
    4126:	605a      	str	r2, [r3, #4]
    4128:	3308      	adds	r3, #8
    412a:	4299      	cmp	r1, r3
    412c:	d1fa      	bne.n	4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>
    412e:	4630      	mov	r0, r6
    4130:	f7ff f9d2 	bl	34d8 <sym_100264>
    4134:	4603      	mov	r3, r0
    4136:	900b      	str	r0, [sp, #44]	; 0x2c
    4138:	2800      	cmp	r0, #0
    413a:	f000 8225 	beq.w	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    413e:	1999      	adds	r1, r3, r6
    4140:	4299      	cmp	r1, r3
    4142:	d007      	beq.n	4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>
    4144:	4a30      	ldr	r2, [pc, #192]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4146:	6810      	ldr	r0, [r2, #0]
    4148:	6852      	ldr	r2, [r2, #4]
    414a:	6018      	str	r0, [r3, #0]
    414c:	605a      	str	r2, [r3, #4]
    414e:	3308      	adds	r3, #8
    4150:	4299      	cmp	r1, r3
    4152:	d1fa      	bne.n	414a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14a>
    4154:	4630      	mov	r0, r6
    4156:	f7ff f9bf 	bl	34d8 <sym_100264>
    415a:	4603      	mov	r3, r0
    415c:	900e      	str	r0, [sp, #56]	; 0x38
    415e:	2800      	cmp	r0, #0
    4160:	f000 820f 	beq.w	4582 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x582>
    4164:	441e      	add	r6, r3
    4166:	429e      	cmp	r6, r3
    4168:	d007      	beq.n	417a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17a>
    416a:	4a27      	ldr	r2, [pc, #156]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    416c:	6811      	ldr	r1, [r2, #0]
    416e:	6852      	ldr	r2, [r2, #4]
    4170:	6019      	str	r1, [r3, #0]
    4172:	605a      	str	r2, [r3, #4]
    4174:	3308      	adds	r3, #8
    4176:	429e      	cmp	r6, r3
    4178:	d1fa      	bne.n	4170 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x170>
    417a:	9b06      	ldr	r3, [sp, #24]
    417c:	b96b      	cbnz	r3, 419a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19a>
    417e:	9a06      	ldr	r2, [sp, #24]
    4180:	6813      	ldr	r3, [r2, #0]
    4182:	f023 0303 	bic.w	r3, r3, #3
    4186:	6013      	str	r3, [r2, #0]
    4188:	6813      	ldr	r3, [r2, #0]
    418a:	deff      	udf	#255	; 0xff
    418c:	3708      	adds	r7, #8
    418e:	42bb      	cmp	r3, r7
    4190:	eee7 5aa7 	vfma.f32	s11, s15, s15
    4194:	f47f af12 	bne.w	3fbc <sym_100240+0x2f4>
    4198:	e73e      	b.n	4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    419a:	341d      	adds	r4, #29
    419c:	0964      	lsrs	r4, r4, #5
    419e:	00a4      	lsls	r4, r4, #2
    41a0:	4620      	mov	r0, r4
    41a2:	f7fc ffe5 	bl	1170 <sym_100199>
    41a6:	4622      	mov	r2, r4
    41a8:	2100      	movs	r1, #0
    41aa:	4606      	mov	r6, r0
    41ac:	9012      	str	r0, [sp, #72]	; 0x48
    41ae:	f01b f930 	bl	1f412 <memset>
    41b2:	4620      	mov	r0, r4
    41b4:	f7fc ffdc 	bl	1170 <sym_100199>
    41b8:	4605      	mov	r5, r0
    41ba:	4622      	mov	r2, r4
    41bc:	2100      	movs	r1, #0
    41be:	9003      	str	r0, [sp, #12]
    41c0:	f01b f927 	bl	1f412 <memset>
    41c4:	6833      	ldr	r3, [r6, #0]
    41c6:	4634      	mov	r4, r6
    41c8:	f023 0303 	bic.w	r3, r3, #3
    41cc:	6033      	str	r3, [r6, #0]
    41ce:	682b      	ldr	r3, [r5, #0]
    41d0:	f023 0303 	bic.w	r3, r3, #3
    41d4:	602b      	str	r3, [r5, #0]
    41d6:	9b06      	ldr	r3, [sp, #24]
    41d8:	2b02      	cmp	r3, #2
    41da:	f340 81f7 	ble.w	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    41de:	2700      	movs	r7, #0
    41e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    41e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    41e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    41e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    41ec:	2202      	movs	r2, #2
    41ee:	46a2      	mov	sl, r4
    41f0:	9b08      	ldr	r3, [sp, #32]
    41f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    41f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    41f6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    41fa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    41fe:	9709      	str	r7, [sp, #36]	; 0x24
    4200:	9601      	str	r6, [sp, #4]
    4202:	9502      	str	r5, [sp, #8]
    4204:	e08a      	b.n	431c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31c>
    4206:	bf00      	nop
    4208:	0001fb5c 	.word	0x0001fb5c
    420c:	ea44 0808 	orr.w	r8, r4, r8
    4210:	9404      	str	r4, [sp, #16]
    4212:	9d01      	ldr	r5, [sp, #4]
    4214:	f84a 8027 	str.w	r8, [sl, r7, lsl #2]
    4218:	edd5 5a05 	vldr	s11, [r5, #20]
    421c:	edd5 6a04 	vldr	s13, [r5, #16]
    4220:	eef0 7ae5 	vabs.f32	s15, s11
    4224:	eeb0 7ae6 	vabs.f32	s14, s13
    4228:	eeb4 7ae7 	vcmpe.f32	s14, s15
    422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4230:	bf58      	it	pl
    4232:	eef0 7a47 	vmovpl.f32	s15, s14
    4236:	eef5 7a40 	vcmp.f32	s15, #0.0
    423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    423e:	d00b      	beq.n	4258 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x258>
    4240:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    4244:	eec6 5aa7 	vdiv.f32	s11, s13, s15
    4248:	ee27 7a07 	vmul.f32	s14, s14, s14
    424c:	eea5 7aa5 	vfma.f32	s14, s11, s11
    4250:	eef1 6ac7 	vsqrt.f32	s13, s14
    4254:	ee67 7aa6 	vmul.f32	s15, s15, s13
    4258:	9d02      	ldr	r5, [sp, #8]
    425a:	ed95 5a05 	vldr	s10, [r5, #20]
    425e:	edd5 5a04 	vldr	s11, [r5, #16]
    4262:	eeb0 7ac5 	vabs.f32	s14, s10
    4266:	eef0 6ae5 	vabs.f32	s13, s11
    426a:	eef4 6ac7 	vcmpe.f32	s13, s14
    426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4272:	bf58      	it	pl
    4274:	eeb0 7a66 	vmovpl.f32	s14, s13
    4278:	eeb5 7a40 	vcmp.f32	s14, #0.0
    427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4280:	d00b      	beq.n	429a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29a>
    4282:	eec5 6a07 	vdiv.f32	s13, s10, s14
    4286:	ee85 5a87 	vdiv.f32	s10, s11, s14
    428a:	ee66 6aa6 	vmul.f32	s13, s13, s13
    428e:	eee5 6a05 	vfma.f32	s13, s10, s10
    4292:	eef1 5ae6 	vsqrt.f32	s11, s13
    4296:	ee27 7a25 	vmul.f32	s14, s14, s11
    429a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42a2:	9d03      	ldr	r5, [sp, #12]
    42a4:	f855 8027 	ldr.w	r8, [r5, r7, lsl #2]
    42a8:	bf4c      	ite	mi
    42aa:	ea44 0408 	orrmi.w	r4, r4, r8
    42ae:	ea28 0404 	bicpl.w	r4, r8, r4
    42b2:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    42b6:	9f04      	ldr	r7, [sp, #16]
    42b8:	b1ef      	cbz	r7, 42f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f6>
    42ba:	9c05      	ldr	r4, [sp, #20]
    42bc:	0967      	lsrs	r7, r4, #5
    42be:	f004 081f 	and.w	r8, r4, #31
    42c2:	2401      	movs	r4, #1
    42c4:	fa04 f808 	lsl.w	r8, r4, r8
    42c8:	f85a 4027 	ldr.w	r4, [sl, r7, lsl #2]
    42cc:	ea18 0f04 	tst.w	r8, r4
    42d0:	d111      	bne.n	42f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f6>
    42d2:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
    42d6:	ea18 0f04 	tst.w	r8, r4
    42da:	f040 80e1 	bne.w	44a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a0>
    42de:	9f07      	ldr	r7, [sp, #28]
    42e0:	097c      	lsrs	r4, r7, #5
    42e2:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    42e6:	2501      	movs	r5, #1
    42e8:	f007 071f 	and.w	r7, r7, #31
    42ec:	fa05 f707 	lsl.w	r7, r5, r7
    42f0:	4227      	tst	r7, r4
    42f2:	f040 80d5 	bne.w	44a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a0>
    42f6:	9c01      	ldr	r4, [sp, #4]
    42f8:	3201      	adds	r2, #1
    42fa:	3408      	adds	r4, #8
    42fc:	9401      	str	r4, [sp, #4]
    42fe:	9c02      	ldr	r4, [sp, #8]
    4300:	3308      	adds	r3, #8
    4302:	3408      	adds	r4, #8
    4304:	9402      	str	r4, [sp, #8]
    4306:	9c06      	ldr	r4, [sp, #24]
    4308:	3008      	adds	r0, #8
    430a:	4294      	cmp	r4, r2
    430c:	f101 0108 	add.w	r1, r1, #8
    4310:	f10e 0e08 	add.w	lr, lr, #8
    4314:	f109 0908 	add.w	r9, r9, #8
    4318:	f000 80e8 	beq.w	44ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ec>
    431c:	edd3 5a02 	vldr	s11, [r3, #8]
    4320:	edd3 6a03 	vldr	s13, [r3, #12]
    4324:	ed93 7a00 	vldr	s14, [r3]
    4328:	edd3 7a01 	vldr	s15, [r3, #4]
    432c:	ee95 7a86 	vfnms.f32	s14, s11, s12
    4330:	eed6 7a86 	vfnms.f32	s15, s13, s12
    4334:	ed80 7a04 	vstr	s14, [r0, #16]
    4338:	edc0 7a05 	vstr	s15, [r0, #20]
    433c:	edd3 5a06 	vldr	s11, [r3, #24]
    4340:	edd3 6a07 	vldr	s13, [r3, #28]
    4344:	ed93 7a08 	vldr	s14, [r3, #32]
    4348:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    434c:	ee95 7a86 	vfnms.f32	s14, s11, s12
    4350:	eed6 7a86 	vfnms.f32	s15, s13, s12
    4354:	ed81 7a04 	vstr	s14, [r1, #16]
    4358:	edc1 7a05 	vstr	s15, [r1, #20]
    435c:	edd0 5a05 	vldr	s11, [r0, #20]
    4360:	edd0 6a04 	vldr	s13, [r0, #16]
    4364:	ed93 7a05 	vldr	s14, [r3, #20]
    4368:	edd3 7a04 	vldr	s15, [r3, #16]
    436c:	ee37 7a65 	vsub.f32	s14, s14, s11
    4370:	ee77 7ae6 	vsub.f32	s15, s15, s13
    4374:	ed8e 7a05 	vstr	s14, [lr, #20]
    4378:	edce 7a04 	vstr	s15, [lr, #16]
    437c:	ed93 7a05 	vldr	s14, [r3, #20]
    4380:	edd3 7a04 	vldr	s15, [r3, #16]
    4384:	edd0 5a05 	vldr	s11, [r0, #20]
    4388:	edd0 6a04 	vldr	s13, [r0, #16]
    438c:	eeb1 7a47 	vneg.f32	s14, s14
    4390:	eef1 7a67 	vneg.f32	s15, s15
    4394:	ee37 7a65 	vsub.f32	s14, s14, s11
    4398:	ee77 7ae6 	vsub.f32	s15, s15, s13
    439c:	ed89 7a05 	vstr	s14, [r9, #20]
    43a0:	edc9 7a04 	vstr	s15, [r9, #16]
    43a4:	edd1 5a05 	vldr	s11, [r1, #20]
    43a8:	edd1 6a04 	vldr	s13, [r1, #16]
    43ac:	ed93 7a05 	vldr	s14, [r3, #20]
    43b0:	edd3 7a04 	vldr	s15, [r3, #16]
    43b4:	2501      	movs	r5, #1
    43b6:	ee37 7a65 	vsub.f32	s14, s14, s11
    43ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
    43be:	f002 041f 	and.w	r4, r2, #31
    43c2:	fa05 f404 	lsl.w	r4, r5, r4
    43c6:	1e55      	subs	r5, r2, #1
    43c8:	9505      	str	r5, [sp, #20]
    43ca:	1e95      	subs	r5, r2, #2
    43cc:	9507      	str	r5, [sp, #28]
    43ce:	9d01      	ldr	r5, [sp, #4]
    43d0:	4694      	mov	ip, r2
    43d2:	ed85 7a05 	vstr	s14, [r5, #20]
    43d6:	edc5 7a04 	vstr	s15, [r5, #16]
    43da:	ed93 7a05 	vldr	s14, [r3, #20]
    43de:	edd3 7a04 	vldr	s15, [r3, #16]
    43e2:	edd1 5a05 	vldr	s11, [r1, #20]
    43e6:	edd1 6a04 	vldr	s13, [r1, #16]
    43ea:	eeb1 7a47 	vneg.f32	s14, s14
    43ee:	eef1 7a67 	vneg.f32	s15, s15
    43f2:	ee37 7a65 	vsub.f32	s14, s14, s11
    43f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    43fa:	9d02      	ldr	r5, [sp, #8]
    43fc:	0957      	lsrs	r7, r2, #5
    43fe:	ed85 7a05 	vstr	s14, [r5, #20]
    4402:	edc5 7a04 	vstr	s15, [r5, #16]
    4406:	edde 5a05 	vldr	s11, [lr, #20]
    440a:	edde 6a04 	vldr	s13, [lr, #16]
    440e:	eef0 7ae5 	vabs.f32	s15, s11
    4412:	eeb0 7ae6 	vabs.f32	s14, s13
    4416:	eeb4 7ae7 	vcmpe.f32	s14, s15
    441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    441e:	bf58      	it	pl
    4420:	eef0 7a47 	vmovpl.f32	s15, s14
    4424:	eef5 7a40 	vcmp.f32	s15, #0.0
    4428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    442c:	d00b      	beq.n	4446 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x446>
    442e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    4432:	eec6 5aa7 	vdiv.f32	s11, s13, s15
    4436:	ee27 7a07 	vmul.f32	s14, s14, s14
    443a:	eea5 7aa5 	vfma.f32	s14, s11, s11
    443e:	eef1 6ac7 	vsqrt.f32	s13, s14
    4442:	ee67 7aa6 	vmul.f32	s15, s15, s13
    4446:	ed99 5a05 	vldr	s10, [r9, #20]
    444a:	edd9 5a04 	vldr	s11, [r9, #16]
    444e:	eeb0 7ac5 	vabs.f32	s14, s10
    4452:	eef0 6ae5 	vabs.f32	s13, s11
    4456:	eef4 6ac7 	vcmpe.f32	s13, s14
    445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    445e:	bf58      	it	pl
    4460:	eeb0 7a66 	vmovpl.f32	s14, s13
    4464:	eeb5 7a40 	vcmp.f32	s14, #0.0
    4468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    446c:	d00b      	beq.n	4486 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x486>
    446e:	eec5 6a07 	vdiv.f32	s13, s10, s14
    4472:	ee85 5a87 	vdiv.f32	s10, s11, s14
    4476:	ee66 6aa6 	vmul.f32	s13, s13, s13
    447a:	eee5 6a05 	vfma.f32	s13, s10, s10
    447e:	eef1 5ae6 	vsqrt.f32	s11, s13
    4482:	ee27 7a25 	vmul.f32	s14, s14, s11
    4486:	eeb4 7ae7 	vcmpe.f32	s14, s15
    448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    448e:	f85a 8027 	ldr.w	r8, [sl, r7, lsl #2]
    4492:	f53f aebb 	bmi.w	420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>
    4496:	2500      	movs	r5, #0
    4498:	ea28 0804 	bic.w	r8, r8, r4
    449c:	9504      	str	r5, [sp, #16]
    449e:	e6b8      	b.n	4212 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x212>
    44a0:	f8db 700c 	ldr.w	r7, [fp, #12]
    44a4:	4297      	cmp	r7, r2
    44a6:	dd1d      	ble.n	44e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e4>
    44a8:	9e01      	ldr	r6, [sp, #4]
    44aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    44ae:	9d02      	ldr	r5, [sp, #8]
    44b0:	fb08 c707 	mla	r7, r8, r7, ip
    44b4:	f8db 4010 	ldr.w	r4, [fp, #16]
    44b8:	f10c 0c01 	add.w	ip, ip, #1
    44bc:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
    44c0:	ed94 7a01 	vldr	s14, [r4, #4]
    44c4:	edd4 7a00 	vldr	s15, [r4]
    44c8:	eeb1 7a47 	vneg.f32	s14, s14
    44cc:	eef1 7a67 	vneg.f32	s15, s15
    44d0:	ed84 7a01 	vstr	s14, [r4, #4]
    44d4:	edc4 7a00 	vstr	s15, [r4]
    44d8:	f8db 700c 	ldr.w	r7, [fp, #12]
    44dc:	45bc      	cmp	ip, r7
    44de:	dbe7      	blt.n	44b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4b0>
    44e0:	9601      	str	r6, [sp, #4]
    44e2:	9502      	str	r5, [sp, #8]
    44e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    44e6:	3401      	adds	r4, #1
    44e8:	9409      	str	r4, [sp, #36]	; 0x24
    44ea:	e704      	b.n	42f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f6>
    44ec:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    44f0:	9803      	ldr	r0, [sp, #12]
    44f2:	f7fc fe3f 	bl	1174 <sym_100204>
    44f6:	9812      	ldr	r0, [sp, #72]	; 0x48
    44f8:	f7fc fe3c 	bl	1174 <sym_100204>
    44fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    44fe:	f7fe ffed 	bl	34dc <sym_100265>
    4502:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4504:	f7fe ffea 	bl	34dc <sym_100265>
    4508:	980d      	ldr	r0, [sp, #52]	; 0x34
    450a:	f7fe ffe7 	bl	34dc <sym_100265>
    450e:	980c      	ldr	r0, [sp, #48]	; 0x30
    4510:	f7fe ffe4 	bl	34dc <sym_100265>
    4514:	980a      	ldr	r0, [sp, #40]	; 0x28
    4516:	f7fe ffe1 	bl	34dc <sym_100265>
    451a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    451c:	f7fe ffde 	bl	34dc <sym_100265>
    4520:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4522:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4524:	4611      	mov	r1, r2
    4526:	691b      	ldr	r3, [r3, #16]
    4528:	9a09      	ldr	r2, [sp, #36]	; 0x24
    452a:	9808      	ldr	r0, [sp, #32]
    452c:	505a      	str	r2, [r3, r1]
    452e:	f7fe ffd5 	bl	34dc <sym_100265>
    4532:	f8db 3008 	ldr.w	r3, [fp, #8]
    4536:	f10a 0a01 	add.w	sl, sl, #1
    453a:	459a      	cmp	sl, r3
    453c:	f6ff abdb 	blt.w	3cf6 <sym_100240+0x2e>
    4540:	2001      	movs	r0, #1
    4542:	b017      	add	sp, #92	; 0x5c
    4544:	ecbd 8b08 	vpop	{d8-d11}
    4548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    454c:	4630      	mov	r0, r6
    454e:	f7fe ffc3 	bl	34d8 <sym_100264>
    4552:	900a      	str	r0, [sp, #40]	; 0x28
    4554:	b308      	cbz	r0, 459a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59a>
    4556:	4630      	mov	r0, r6
    4558:	f7fe ffbe 	bl	34d8 <sym_100264>
    455c:	900c      	str	r0, [sp, #48]	; 0x30
    455e:	b1c8      	cbz	r0, 4594 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x594>
    4560:	4630      	mov	r0, r6
    4562:	f7fe ffb9 	bl	34d8 <sym_100264>
    4566:	900d      	str	r0, [sp, #52]	; 0x34
    4568:	b188      	cbz	r0, 458e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58e>
    456a:	4630      	mov	r0, r6
    456c:	f7fe ffb4 	bl	34d8 <sym_100264>
    4570:	900b      	str	r0, [sp, #44]	; 0x2c
    4572:	b148      	cbz	r0, 4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    4574:	4630      	mov	r0, r6
    4576:	f7fe ffaf 	bl	34d8 <sym_100264>
    457a:	900e      	str	r0, [sp, #56]	; 0x38
    457c:	2800      	cmp	r0, #0
    457e:	f47f adfc 	bne.w	417a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17a>
    4582:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4584:	f7fe ffaa 	bl	34dc <sym_100265>
    4588:	980d      	ldr	r0, [sp, #52]	; 0x34
    458a:	f7fe ffa7 	bl	34dc <sym_100265>
    458e:	980c      	ldr	r0, [sp, #48]	; 0x30
    4590:	f7fe ffa4 	bl	34dc <sym_100265>
    4594:	980a      	ldr	r0, [sp, #40]	; 0x28
    4596:	f7fe ffa1 	bl	34dc <sym_100265>
    459a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    459c:	f7fe ff9e 	bl	34dc <sym_100265>
    45a0:	9808      	ldr	r0, [sp, #32]
    45a2:	f7fe ff9b 	bl	34dc <sym_100265>
    45a6:	2000      	movs	r0, #0
    45a8:	b017      	add	sp, #92	; 0x5c
    45aa:	ecbd 8b08 	vpop	{d8-d11}
    45ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45b2:	eeb0 ba69 	vmov.f32	s22, s19
    45b6:	e4af      	b.n	3f18 <sym_100240+0x250>
    45b8:	eeb0 ba69 	vmov.f32	s22, s19
    45bc:	e4a9      	b.n	3f12 <sym_100240+0x24a>
    45be:	eef0 4a49 	vmov.f32	s9, s18
    45c2:	eeb0 5a49 	vmov.f32	s10, s18
    45c6:	eddf 5a13 	vldr	s11, [pc, #76]	; 4614 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x614>
    45ca:	e525      	b.n	4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    45cc:	2300      	movs	r3, #0
    45ce:	9309      	str	r3, [sp, #36]	; 0x24
    45d0:	e78e      	b.n	44f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f0>
    45d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 4614 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x614>
    45d6:	e494      	b.n	3f02 <sym_100240+0x23a>
    45d8:	9001      	str	r0, [sp, #4]
    45da:	f000 fd3d 	bl	5058 <__mulsc3>
    45de:	9801      	ldr	r0, [sp, #4]
    45e0:	eef0 7a40 	vmov.f32	s15, s0
    45e4:	eeb0 7a60 	vmov.f32	s14, s1
    45e8:	f7ff bbd9 	b.w	3d9e <sym_100240+0xd6>
    45ec:	eef0 1a40 	vmov.f32	s3, s0
    45f0:	eeb0 1a4a 	vmov.f32	s2, s20
    45f4:	eeb0 0a66 	vmov.f32	s0, s13
    45f8:	f000 fd2e 	bl	5058 <__mulsc3>
    45fc:	3501      	adds	r5, #1
    45fe:	42a5      	cmp	r5, r4
    4600:	ed88 0a00 	vstr	s0, [r8]
    4604:	edc8 0a01 	vstr	s1, [r8, #4]
    4608:	f108 0808 	add.w	r8, r8, #8
    460c:	f47f ac9b 	bne.w	3f46 <sym_100240+0x27e>
    4610:	e4cc      	b.n	3fac <sym_100240+0x2e4>
    4612:	bf00      	nop
    4614:	00000000 	.word	0x00000000

00004618 <nrf_dm_calc>:
    4618:	b530      	push	{r4, r5, lr}
    461a:	2400      	movs	r4, #0
    461c:	4605      	mov	r5, r0
    461e:	b087      	sub	sp, #28
    4620:	e9cd 4404 	strd	r4, r4, [sp, #16]
    4624:	9403      	str	r4, [sp, #12]
    4626:	f890 15b5 	ldrb.w	r1, [r0, #1461]	; 0x5b5
    462a:	f890 35c0 	ldrb.w	r3, [r0, #1472]	; 0x5c0
    462e:	4622      	mov	r2, r4
    4630:	e9cd 3101 	strd	r3, r1, [sp, #4]
    4634:	f8d0 15bc 	ldr.w	r1, [r0, #1468]	; 0x5bc
    4638:	4603      	mov	r3, r0
    463a:	9100      	str	r1, [sp, #0]
    463c:	f890 05a0 	ldrb.w	r0, [r0, #1440]	; 0x5a0
    4640:	f205 51a4 	addw	r1, r5, #1444	; 0x5a4
    4644:	f7fb fd88 	bl	158 <sym_100189>
    4648:	4622      	mov	r2, r4
    464a:	f205 41ff 	addw	r1, r5, #1279	; 0x4ff
    464e:	f205 5c4f 	addw	ip, r5, #1359	; 0x54f
    4652:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4656:	1c54      	adds	r4, r2, #1
    4658:	b913      	cbnz	r3, 4660 <nrf_dm_calc+0x48>
    465a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    465e:	b103      	cbz	r3, 4662 <nrf_dm_calc+0x4a>
    4660:	b2e2      	uxtb	r2, r4
    4662:	458c      	cmp	ip, r1
    4664:	d1f5      	bne.n	4652 <nrf_dm_calc+0x3a>
    4666:	2a05      	cmp	r2, #5
    4668:	bf28      	it	cs
    466a:	2002      	movcs	r0, #2
    466c:	b007      	add	sp, #28
    466e:	bd30      	pop	{r4, r5, pc}

00004670 <nrf_dm_high_precision_calc>:
    4670:	ed9f 0a18 	vldr	s0, [pc, #96]	; 46d4 <nrf_dm_high_precision_calc+0x64>
    4674:	b500      	push	{lr}
    4676:	f890 35a0 	ldrb.w	r3, [r0, #1440]	; 0x5a0
    467a:	b083      	sub	sp, #12
    467c:	2b01      	cmp	r3, #1
    467e:	ed8d 0a01 	vstr	s0, [sp, #4]
    4682:	d002      	beq.n	468a <nrf_dm_high_precision_calc+0x1a>
    4684:	b003      	add	sp, #12
    4686:	f85d fb04 	ldr.w	pc, [sp], #4
    468a:	2100      	movs	r1, #0
    468c:	f200 43ff 	addw	r3, r0, #1279	; 0x4ff
    4690:	f200 5e4f 	addw	lr, r0, #1359	; 0x54f
    4694:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4698:	f101 0c01 	add.w	ip, r1, #1
    469c:	b912      	cbnz	r2, 46a4 <nrf_dm_high_precision_calc+0x34>
    469e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    46a2:	b10a      	cbz	r2, 46a8 <nrf_dm_high_precision_calc+0x38>
    46a4:	fa5f f18c 	uxtb.w	r1, ip
    46a8:	459e      	cmp	lr, r3
    46aa:	d1f3      	bne.n	4694 <nrf_dm_high_precision_calc+0x24>
    46ac:	2904      	cmp	r1, #4
    46ae:	d904      	bls.n	46ba <nrf_dm_high_precision_calc+0x4a>
    46b0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 46d4 <nrf_dm_high_precision_calc+0x64>
    46b4:	b003      	add	sp, #12
    46b6:	f85d fb04 	ldr.w	pc, [sp], #4
    46ba:	2201      	movs	r2, #1
    46bc:	2128      	movs	r1, #40	; 0x28
    46be:	ed9f 0a06 	vldr	s0, [pc, #24]	; 46d8 <nrf_dm_high_precision_calc+0x68>
    46c2:	ab01      	add	r3, sp, #4
    46c4:	f7fc fc4e 	bl	f64 <sym_100188>
    46c8:	ed9d 0a01 	vldr	s0, [sp, #4]
    46cc:	b003      	add	sp, #12
    46ce:	f85d fb04 	ldr.w	pc, [sp], #4
    46d2:	bf00      	nop
    46d4:	7fc00000 	.word	0x7fc00000
    46d8:	49742400 	.word	0x49742400

000046dc <__aeabi_drsub>:
    46dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    46e0:	e002      	b.n	46e8 <__adddf3>
    46e2:	bf00      	nop

000046e4 <__aeabi_dsub>:
    46e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000046e8 <__adddf3>:
    46e8:	b530      	push	{r4, r5, lr}
    46ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
    46ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
    46f2:	ea94 0f05 	teq	r4, r5
    46f6:	bf08      	it	eq
    46f8:	ea90 0f02 	teqeq	r0, r2
    46fc:	bf1f      	itttt	ne
    46fe:	ea54 0c00 	orrsne.w	ip, r4, r0
    4702:	ea55 0c02 	orrsne.w	ip, r5, r2
    4706:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    470a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    470e:	f000 80e2 	beq.w	48d6 <__adddf3+0x1ee>
    4712:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4716:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    471a:	bfb8      	it	lt
    471c:	426d      	neglt	r5, r5
    471e:	dd0c      	ble.n	473a <__adddf3+0x52>
    4720:	442c      	add	r4, r5
    4722:	ea80 0202 	eor.w	r2, r0, r2
    4726:	ea81 0303 	eor.w	r3, r1, r3
    472a:	ea82 0000 	eor.w	r0, r2, r0
    472e:	ea83 0101 	eor.w	r1, r3, r1
    4732:	ea80 0202 	eor.w	r2, r0, r2
    4736:	ea81 0303 	eor.w	r3, r1, r3
    473a:	2d36      	cmp	r5, #54	; 0x36
    473c:	bf88      	it	hi
    473e:	bd30      	pophi	{r4, r5, pc}
    4740:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4744:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4748:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    474c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4750:	d002      	beq.n	4758 <__adddf3+0x70>
    4752:	4240      	negs	r0, r0
    4754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4758:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    475c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4760:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4764:	d002      	beq.n	476c <__adddf3+0x84>
    4766:	4252      	negs	r2, r2
    4768:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    476c:	ea94 0f05 	teq	r4, r5
    4770:	f000 80a7 	beq.w	48c2 <__adddf3+0x1da>
    4774:	f1a4 0401 	sub.w	r4, r4, #1
    4778:	f1d5 0e20 	rsbs	lr, r5, #32
    477c:	db0d      	blt.n	479a <__adddf3+0xb2>
    477e:	fa02 fc0e 	lsl.w	ip, r2, lr
    4782:	fa22 f205 	lsr.w	r2, r2, r5
    4786:	1880      	adds	r0, r0, r2
    4788:	f141 0100 	adc.w	r1, r1, #0
    478c:	fa03 f20e 	lsl.w	r2, r3, lr
    4790:	1880      	adds	r0, r0, r2
    4792:	fa43 f305 	asr.w	r3, r3, r5
    4796:	4159      	adcs	r1, r3
    4798:	e00e      	b.n	47b8 <__adddf3+0xd0>
    479a:	f1a5 0520 	sub.w	r5, r5, #32
    479e:	f10e 0e20 	add.w	lr, lr, #32
    47a2:	2a01      	cmp	r2, #1
    47a4:	fa03 fc0e 	lsl.w	ip, r3, lr
    47a8:	bf28      	it	cs
    47aa:	f04c 0c02 	orrcs.w	ip, ip, #2
    47ae:	fa43 f305 	asr.w	r3, r3, r5
    47b2:	18c0      	adds	r0, r0, r3
    47b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    47b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    47bc:	d507      	bpl.n	47ce <__adddf3+0xe6>
    47be:	f04f 0e00 	mov.w	lr, #0
    47c2:	f1dc 0c00 	rsbs	ip, ip, #0
    47c6:	eb7e 0000 	sbcs.w	r0, lr, r0
    47ca:	eb6e 0101 	sbc.w	r1, lr, r1
    47ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    47d2:	d31b      	bcc.n	480c <__adddf3+0x124>
    47d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    47d8:	d30c      	bcc.n	47f4 <__adddf3+0x10c>
    47da:	0849      	lsrs	r1, r1, #1
    47dc:	ea5f 0030 	movs.w	r0, r0, rrx
    47e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    47e4:	f104 0401 	add.w	r4, r4, #1
    47e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    47ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    47f0:	f080 809a 	bcs.w	4928 <__adddf3+0x240>
    47f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    47f8:	bf08      	it	eq
    47fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    47fe:	f150 0000 	adcs.w	r0, r0, #0
    4802:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4806:	ea41 0105 	orr.w	r1, r1, r5
    480a:	bd30      	pop	{r4, r5, pc}
    480c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4810:	4140      	adcs	r0, r0
    4812:	eb41 0101 	adc.w	r1, r1, r1
    4816:	3c01      	subs	r4, #1
    4818:	bf28      	it	cs
    481a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    481e:	d2e9      	bcs.n	47f4 <__adddf3+0x10c>
    4820:	f091 0f00 	teq	r1, #0
    4824:	bf04      	itt	eq
    4826:	4601      	moveq	r1, r0
    4828:	2000      	moveq	r0, #0
    482a:	fab1 f381 	clz	r3, r1
    482e:	bf08      	it	eq
    4830:	3320      	addeq	r3, #32
    4832:	f1a3 030b 	sub.w	r3, r3, #11
    4836:	f1b3 0220 	subs.w	r2, r3, #32
    483a:	da0c      	bge.n	4856 <__adddf3+0x16e>
    483c:	320c      	adds	r2, #12
    483e:	dd08      	ble.n	4852 <__adddf3+0x16a>
    4840:	f102 0c14 	add.w	ip, r2, #20
    4844:	f1c2 020c 	rsb	r2, r2, #12
    4848:	fa01 f00c 	lsl.w	r0, r1, ip
    484c:	fa21 f102 	lsr.w	r1, r1, r2
    4850:	e00c      	b.n	486c <__adddf3+0x184>
    4852:	f102 0214 	add.w	r2, r2, #20
    4856:	bfd8      	it	le
    4858:	f1c2 0c20 	rsble	ip, r2, #32
    485c:	fa01 f102 	lsl.w	r1, r1, r2
    4860:	fa20 fc0c 	lsr.w	ip, r0, ip
    4864:	bfdc      	itt	le
    4866:	ea41 010c 	orrle.w	r1, r1, ip
    486a:	4090      	lslle	r0, r2
    486c:	1ae4      	subs	r4, r4, r3
    486e:	bfa2      	ittt	ge
    4870:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4874:	4329      	orrge	r1, r5
    4876:	bd30      	popge	{r4, r5, pc}
    4878:	ea6f 0404 	mvn.w	r4, r4
    487c:	3c1f      	subs	r4, #31
    487e:	da1c      	bge.n	48ba <__adddf3+0x1d2>
    4880:	340c      	adds	r4, #12
    4882:	dc0e      	bgt.n	48a2 <__adddf3+0x1ba>
    4884:	f104 0414 	add.w	r4, r4, #20
    4888:	f1c4 0220 	rsb	r2, r4, #32
    488c:	fa20 f004 	lsr.w	r0, r0, r4
    4890:	fa01 f302 	lsl.w	r3, r1, r2
    4894:	ea40 0003 	orr.w	r0, r0, r3
    4898:	fa21 f304 	lsr.w	r3, r1, r4
    489c:	ea45 0103 	orr.w	r1, r5, r3
    48a0:	bd30      	pop	{r4, r5, pc}
    48a2:	f1c4 040c 	rsb	r4, r4, #12
    48a6:	f1c4 0220 	rsb	r2, r4, #32
    48aa:	fa20 f002 	lsr.w	r0, r0, r2
    48ae:	fa01 f304 	lsl.w	r3, r1, r4
    48b2:	ea40 0003 	orr.w	r0, r0, r3
    48b6:	4629      	mov	r1, r5
    48b8:	bd30      	pop	{r4, r5, pc}
    48ba:	fa21 f004 	lsr.w	r0, r1, r4
    48be:	4629      	mov	r1, r5
    48c0:	bd30      	pop	{r4, r5, pc}
    48c2:	f094 0f00 	teq	r4, #0
    48c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    48ca:	bf06      	itte	eq
    48cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    48d0:	3401      	addeq	r4, #1
    48d2:	3d01      	subne	r5, #1
    48d4:	e74e      	b.n	4774 <__adddf3+0x8c>
    48d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    48da:	bf18      	it	ne
    48dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    48e0:	d029      	beq.n	4936 <__adddf3+0x24e>
    48e2:	ea94 0f05 	teq	r4, r5
    48e6:	bf08      	it	eq
    48e8:	ea90 0f02 	teqeq	r0, r2
    48ec:	d005      	beq.n	48fa <__adddf3+0x212>
    48ee:	ea54 0c00 	orrs.w	ip, r4, r0
    48f2:	bf04      	itt	eq
    48f4:	4619      	moveq	r1, r3
    48f6:	4610      	moveq	r0, r2
    48f8:	bd30      	pop	{r4, r5, pc}
    48fa:	ea91 0f03 	teq	r1, r3
    48fe:	bf1e      	ittt	ne
    4900:	2100      	movne	r1, #0
    4902:	2000      	movne	r0, #0
    4904:	bd30      	popne	{r4, r5, pc}
    4906:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    490a:	d105      	bne.n	4918 <__adddf3+0x230>
    490c:	0040      	lsls	r0, r0, #1
    490e:	4149      	adcs	r1, r1
    4910:	bf28      	it	cs
    4912:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4916:	bd30      	pop	{r4, r5, pc}
    4918:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    491c:	bf3c      	itt	cc
    491e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4922:	bd30      	popcc	{r4, r5, pc}
    4924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4928:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    492c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4930:	f04f 0000 	mov.w	r0, #0
    4934:	bd30      	pop	{r4, r5, pc}
    4936:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    493a:	bf1a      	itte	ne
    493c:	4619      	movne	r1, r3
    493e:	4610      	movne	r0, r2
    4940:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4944:	bf1c      	itt	ne
    4946:	460b      	movne	r3, r1
    4948:	4602      	movne	r2, r0
    494a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    494e:	bf06      	itte	eq
    4950:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4954:	ea91 0f03 	teqeq	r1, r3
    4958:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    495c:	bd30      	pop	{r4, r5, pc}
    495e:	bf00      	nop

00004960 <__aeabi_ui2d>:
    4960:	f090 0f00 	teq	r0, #0
    4964:	bf04      	itt	eq
    4966:	2100      	moveq	r1, #0
    4968:	4770      	bxeq	lr
    496a:	b530      	push	{r4, r5, lr}
    496c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4970:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4974:	f04f 0500 	mov.w	r5, #0
    4978:	f04f 0100 	mov.w	r1, #0
    497c:	e750      	b.n	4820 <__adddf3+0x138>
    497e:	bf00      	nop

00004980 <__aeabi_i2d>:
    4980:	f090 0f00 	teq	r0, #0
    4984:	bf04      	itt	eq
    4986:	2100      	moveq	r1, #0
    4988:	4770      	bxeq	lr
    498a:	b530      	push	{r4, r5, lr}
    498c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4990:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4994:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4998:	bf48      	it	mi
    499a:	4240      	negmi	r0, r0
    499c:	f04f 0100 	mov.w	r1, #0
    49a0:	e73e      	b.n	4820 <__adddf3+0x138>
    49a2:	bf00      	nop

000049a4 <__aeabi_f2d>:
    49a4:	0042      	lsls	r2, r0, #1
    49a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    49aa:	ea4f 0131 	mov.w	r1, r1, rrx
    49ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
    49b2:	bf1f      	itttt	ne
    49b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    49b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    49bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    49c0:	4770      	bxne	lr
    49c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    49c6:	bf08      	it	eq
    49c8:	4770      	bxeq	lr
    49ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    49ce:	bf04      	itt	eq
    49d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    49d4:	4770      	bxeq	lr
    49d6:	b530      	push	{r4, r5, lr}
    49d8:	f44f 7460 	mov.w	r4, #896	; 0x380
    49dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    49e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    49e4:	e71c      	b.n	4820 <__adddf3+0x138>
    49e6:	bf00      	nop

000049e8 <__aeabi_ul2d>:
    49e8:	ea50 0201 	orrs.w	r2, r0, r1
    49ec:	bf08      	it	eq
    49ee:	4770      	bxeq	lr
    49f0:	b530      	push	{r4, r5, lr}
    49f2:	f04f 0500 	mov.w	r5, #0
    49f6:	e00a      	b.n	4a0e <__aeabi_l2d+0x16>

000049f8 <__aeabi_l2d>:
    49f8:	ea50 0201 	orrs.w	r2, r0, r1
    49fc:	bf08      	it	eq
    49fe:	4770      	bxeq	lr
    4a00:	b530      	push	{r4, r5, lr}
    4a02:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4a06:	d502      	bpl.n	4a0e <__aeabi_l2d+0x16>
    4a08:	4240      	negs	r0, r0
    4a0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4a0e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4a12:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4a16:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4a1a:	f43f aed8 	beq.w	47ce <__adddf3+0xe6>
    4a1e:	f04f 0203 	mov.w	r2, #3
    4a22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a26:	bf18      	it	ne
    4a28:	3203      	addne	r2, #3
    4a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a2e:	bf18      	it	ne
    4a30:	3203      	addne	r2, #3
    4a32:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4a36:	f1c2 0320 	rsb	r3, r2, #32
    4a3a:	fa00 fc03 	lsl.w	ip, r0, r3
    4a3e:	fa20 f002 	lsr.w	r0, r0, r2
    4a42:	fa01 fe03 	lsl.w	lr, r1, r3
    4a46:	ea40 000e 	orr.w	r0, r0, lr
    4a4a:	fa21 f102 	lsr.w	r1, r1, r2
    4a4e:	4414      	add	r4, r2
    4a50:	e6bd      	b.n	47ce <__adddf3+0xe6>
    4a52:	bf00      	nop

00004a54 <__aeabi_dmul>:
    4a54:	b570      	push	{r4, r5, r6, lr}
    4a56:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4a5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4a5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4a62:	bf1d      	ittte	ne
    4a64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4a68:	ea94 0f0c 	teqne	r4, ip
    4a6c:	ea95 0f0c 	teqne	r5, ip
    4a70:	f000 f8de 	bleq	4c30 <__aeabi_dmul+0x1dc>
    4a74:	442c      	add	r4, r5
    4a76:	ea81 0603 	eor.w	r6, r1, r3
    4a7a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4a7e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4a82:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4a86:	bf18      	it	ne
    4a88:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4a94:	d038      	beq.n	4b08 <__aeabi_dmul+0xb4>
    4a96:	fba0 ce02 	umull	ip, lr, r0, r2
    4a9a:	f04f 0500 	mov.w	r5, #0
    4a9e:	fbe1 e502 	umlal	lr, r5, r1, r2
    4aa2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4aa6:	fbe0 e503 	umlal	lr, r5, r0, r3
    4aaa:	f04f 0600 	mov.w	r6, #0
    4aae:	fbe1 5603 	umlal	r5, r6, r1, r3
    4ab2:	f09c 0f00 	teq	ip, #0
    4ab6:	bf18      	it	ne
    4ab8:	f04e 0e01 	orrne.w	lr, lr, #1
    4abc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4ac0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4ac4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4ac8:	d204      	bcs.n	4ad4 <__aeabi_dmul+0x80>
    4aca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4ace:	416d      	adcs	r5, r5
    4ad0:	eb46 0606 	adc.w	r6, r6, r6
    4ad4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4ad8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4adc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4ae0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4ae4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4ae8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4aec:	bf88      	it	hi
    4aee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4af2:	d81e      	bhi.n	4b32 <__aeabi_dmul+0xde>
    4af4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4af8:	bf08      	it	eq
    4afa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4afe:	f150 0000 	adcs.w	r0, r0, #0
    4b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4b06:	bd70      	pop	{r4, r5, r6, pc}
    4b08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4b0c:	ea46 0101 	orr.w	r1, r6, r1
    4b10:	ea40 0002 	orr.w	r0, r0, r2
    4b14:	ea81 0103 	eor.w	r1, r1, r3
    4b18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4b1c:	bfc2      	ittt	gt
    4b1e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4b22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4b26:	bd70      	popgt	{r4, r5, r6, pc}
    4b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4b2c:	f04f 0e00 	mov.w	lr, #0
    4b30:	3c01      	subs	r4, #1
    4b32:	f300 80ab 	bgt.w	4c8c <__aeabi_dmul+0x238>
    4b36:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4b3a:	bfde      	ittt	le
    4b3c:	2000      	movle	r0, #0
    4b3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4b42:	bd70      	pople	{r4, r5, r6, pc}
    4b44:	f1c4 0400 	rsb	r4, r4, #0
    4b48:	3c20      	subs	r4, #32
    4b4a:	da35      	bge.n	4bb8 <__aeabi_dmul+0x164>
    4b4c:	340c      	adds	r4, #12
    4b4e:	dc1b      	bgt.n	4b88 <__aeabi_dmul+0x134>
    4b50:	f104 0414 	add.w	r4, r4, #20
    4b54:	f1c4 0520 	rsb	r5, r4, #32
    4b58:	fa00 f305 	lsl.w	r3, r0, r5
    4b5c:	fa20 f004 	lsr.w	r0, r0, r4
    4b60:	fa01 f205 	lsl.w	r2, r1, r5
    4b64:	ea40 0002 	orr.w	r0, r0, r2
    4b68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4b6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4b74:	fa21 f604 	lsr.w	r6, r1, r4
    4b78:	eb42 0106 	adc.w	r1, r2, r6
    4b7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4b80:	bf08      	it	eq
    4b82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4b86:	bd70      	pop	{r4, r5, r6, pc}
    4b88:	f1c4 040c 	rsb	r4, r4, #12
    4b8c:	f1c4 0520 	rsb	r5, r4, #32
    4b90:	fa00 f304 	lsl.w	r3, r0, r4
    4b94:	fa20 f005 	lsr.w	r0, r0, r5
    4b98:	fa01 f204 	lsl.w	r2, r1, r4
    4b9c:	ea40 0002 	orr.w	r0, r0, r2
    4ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4ba4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ba8:	f141 0100 	adc.w	r1, r1, #0
    4bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4bb0:	bf08      	it	eq
    4bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4bb6:	bd70      	pop	{r4, r5, r6, pc}
    4bb8:	f1c4 0520 	rsb	r5, r4, #32
    4bbc:	fa00 f205 	lsl.w	r2, r0, r5
    4bc0:	ea4e 0e02 	orr.w	lr, lr, r2
    4bc4:	fa20 f304 	lsr.w	r3, r0, r4
    4bc8:	fa01 f205 	lsl.w	r2, r1, r5
    4bcc:	ea43 0302 	orr.w	r3, r3, r2
    4bd0:	fa21 f004 	lsr.w	r0, r1, r4
    4bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4bd8:	fa21 f204 	lsr.w	r2, r1, r4
    4bdc:	ea20 0002 	bic.w	r0, r0, r2
    4be0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4be8:	bf08      	it	eq
    4bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4bee:	bd70      	pop	{r4, r5, r6, pc}
    4bf0:	f094 0f00 	teq	r4, #0
    4bf4:	d10f      	bne.n	4c16 <__aeabi_dmul+0x1c2>
    4bf6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4bfa:	0040      	lsls	r0, r0, #1
    4bfc:	eb41 0101 	adc.w	r1, r1, r1
    4c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4c04:	bf08      	it	eq
    4c06:	3c01      	subeq	r4, #1
    4c08:	d0f7      	beq.n	4bfa <__aeabi_dmul+0x1a6>
    4c0a:	ea41 0106 	orr.w	r1, r1, r6
    4c0e:	f095 0f00 	teq	r5, #0
    4c12:	bf18      	it	ne
    4c14:	4770      	bxne	lr
    4c16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4c1a:	0052      	lsls	r2, r2, #1
    4c1c:	eb43 0303 	adc.w	r3, r3, r3
    4c20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4c24:	bf08      	it	eq
    4c26:	3d01      	subeq	r5, #1
    4c28:	d0f7      	beq.n	4c1a <__aeabi_dmul+0x1c6>
    4c2a:	ea43 0306 	orr.w	r3, r3, r6
    4c2e:	4770      	bx	lr
    4c30:	ea94 0f0c 	teq	r4, ip
    4c34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4c38:	bf18      	it	ne
    4c3a:	ea95 0f0c 	teqne	r5, ip
    4c3e:	d00c      	beq.n	4c5a <__aeabi_dmul+0x206>
    4c40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4c44:	bf18      	it	ne
    4c46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4c4a:	d1d1      	bne.n	4bf0 <__aeabi_dmul+0x19c>
    4c4c:	ea81 0103 	eor.w	r1, r1, r3
    4c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4c54:	f04f 0000 	mov.w	r0, #0
    4c58:	bd70      	pop	{r4, r5, r6, pc}
    4c5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4c5e:	bf06      	itte	eq
    4c60:	4610      	moveq	r0, r2
    4c62:	4619      	moveq	r1, r3
    4c64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4c68:	d019      	beq.n	4c9e <__aeabi_dmul+0x24a>
    4c6a:	ea94 0f0c 	teq	r4, ip
    4c6e:	d102      	bne.n	4c76 <__aeabi_dmul+0x222>
    4c70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4c74:	d113      	bne.n	4c9e <__aeabi_dmul+0x24a>
    4c76:	ea95 0f0c 	teq	r5, ip
    4c7a:	d105      	bne.n	4c88 <__aeabi_dmul+0x234>
    4c7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4c80:	bf1c      	itt	ne
    4c82:	4610      	movne	r0, r2
    4c84:	4619      	movne	r1, r3
    4c86:	d10a      	bne.n	4c9e <__aeabi_dmul+0x24a>
    4c88:	ea81 0103 	eor.w	r1, r1, r3
    4c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4c90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4c94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c98:	f04f 0000 	mov.w	r0, #0
    4c9c:	bd70      	pop	{r4, r5, r6, pc}
    4c9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4ca2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4ca6:	bd70      	pop	{r4, r5, r6, pc}

00004ca8 <__aeabi_ddiv>:
    4ca8:	b570      	push	{r4, r5, r6, lr}
    4caa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4cae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4cb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4cb6:	bf1d      	ittte	ne
    4cb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4cbc:	ea94 0f0c 	teqne	r4, ip
    4cc0:	ea95 0f0c 	teqne	r5, ip
    4cc4:	f000 f8a7 	bleq	4e16 <__aeabi_ddiv+0x16e>
    4cc8:	eba4 0405 	sub.w	r4, r4, r5
    4ccc:	ea81 0e03 	eor.w	lr, r1, r3
    4cd0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4cd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4cd8:	f000 8088 	beq.w	4dec <__aeabi_ddiv+0x144>
    4cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4ce0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4ce4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4ce8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4cec:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4cf0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4cf4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    4cf8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4cfc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4d00:	429d      	cmp	r5, r3
    4d02:	bf08      	it	eq
    4d04:	4296      	cmpeq	r6, r2
    4d06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    4d0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4d0e:	d202      	bcs.n	4d16 <__aeabi_ddiv+0x6e>
    4d10:	085b      	lsrs	r3, r3, #1
    4d12:	ea4f 0232 	mov.w	r2, r2, rrx
    4d16:	1ab6      	subs	r6, r6, r2
    4d18:	eb65 0503 	sbc.w	r5, r5, r3
    4d1c:	085b      	lsrs	r3, r3, #1
    4d1e:	ea4f 0232 	mov.w	r2, r2, rrx
    4d22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4d26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4d2a:	ebb6 0e02 	subs.w	lr, r6, r2
    4d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d32:	bf22      	ittt	cs
    4d34:	1ab6      	subcs	r6, r6, r2
    4d36:	4675      	movcs	r5, lr
    4d38:	ea40 000c 	orrcs.w	r0, r0, ip
    4d3c:	085b      	lsrs	r3, r3, #1
    4d3e:	ea4f 0232 	mov.w	r2, r2, rrx
    4d42:	ebb6 0e02 	subs.w	lr, r6, r2
    4d46:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d4a:	bf22      	ittt	cs
    4d4c:	1ab6      	subcs	r6, r6, r2
    4d4e:	4675      	movcs	r5, lr
    4d50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4d54:	085b      	lsrs	r3, r3, #1
    4d56:	ea4f 0232 	mov.w	r2, r2, rrx
    4d5a:	ebb6 0e02 	subs.w	lr, r6, r2
    4d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d62:	bf22      	ittt	cs
    4d64:	1ab6      	subcs	r6, r6, r2
    4d66:	4675      	movcs	r5, lr
    4d68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4d6c:	085b      	lsrs	r3, r3, #1
    4d6e:	ea4f 0232 	mov.w	r2, r2, rrx
    4d72:	ebb6 0e02 	subs.w	lr, r6, r2
    4d76:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d7a:	bf22      	ittt	cs
    4d7c:	1ab6      	subcs	r6, r6, r2
    4d7e:	4675      	movcs	r5, lr
    4d80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4d84:	ea55 0e06 	orrs.w	lr, r5, r6
    4d88:	d018      	beq.n	4dbc <__aeabi_ddiv+0x114>
    4d8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    4d8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    4d92:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4d96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4d9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    4d9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4da2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4da6:	d1c0      	bne.n	4d2a <__aeabi_ddiv+0x82>
    4da8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4dac:	d10b      	bne.n	4dc6 <__aeabi_ddiv+0x11e>
    4dae:	ea41 0100 	orr.w	r1, r1, r0
    4db2:	f04f 0000 	mov.w	r0, #0
    4db6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4dba:	e7b6      	b.n	4d2a <__aeabi_ddiv+0x82>
    4dbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4dc0:	bf04      	itt	eq
    4dc2:	4301      	orreq	r1, r0
    4dc4:	2000      	moveq	r0, #0
    4dc6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4dca:	bf88      	it	hi
    4dcc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4dd0:	f63f aeaf 	bhi.w	4b32 <__aeabi_dmul+0xde>
    4dd4:	ebb5 0c03 	subs.w	ip, r5, r3
    4dd8:	bf04      	itt	eq
    4dda:	ebb6 0c02 	subseq.w	ip, r6, r2
    4dde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4de2:	f150 0000 	adcs.w	r0, r0, #0
    4de6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4df0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4df4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4df8:	bfc2      	ittt	gt
    4dfa:	ebd4 050c 	rsbsgt	r5, r4, ip
    4dfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4e02:	bd70      	popgt	{r4, r5, r6, pc}
    4e04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e08:	f04f 0e00 	mov.w	lr, #0
    4e0c:	3c01      	subs	r4, #1
    4e0e:	e690      	b.n	4b32 <__aeabi_dmul+0xde>
    4e10:	ea45 0e06 	orr.w	lr, r5, r6
    4e14:	e68d      	b.n	4b32 <__aeabi_dmul+0xde>
    4e16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4e1a:	ea94 0f0c 	teq	r4, ip
    4e1e:	bf08      	it	eq
    4e20:	ea95 0f0c 	teqeq	r5, ip
    4e24:	f43f af3b 	beq.w	4c9e <__aeabi_dmul+0x24a>
    4e28:	ea94 0f0c 	teq	r4, ip
    4e2c:	d10a      	bne.n	4e44 <__aeabi_ddiv+0x19c>
    4e2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4e32:	f47f af34 	bne.w	4c9e <__aeabi_dmul+0x24a>
    4e36:	ea95 0f0c 	teq	r5, ip
    4e3a:	f47f af25 	bne.w	4c88 <__aeabi_dmul+0x234>
    4e3e:	4610      	mov	r0, r2
    4e40:	4619      	mov	r1, r3
    4e42:	e72c      	b.n	4c9e <__aeabi_dmul+0x24a>
    4e44:	ea95 0f0c 	teq	r5, ip
    4e48:	d106      	bne.n	4e58 <__aeabi_ddiv+0x1b0>
    4e4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4e4e:	f43f aefd 	beq.w	4c4c <__aeabi_dmul+0x1f8>
    4e52:	4610      	mov	r0, r2
    4e54:	4619      	mov	r1, r3
    4e56:	e722      	b.n	4c9e <__aeabi_dmul+0x24a>
    4e58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4e5c:	bf18      	it	ne
    4e5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4e62:	f47f aec5 	bne.w	4bf0 <__aeabi_dmul+0x19c>
    4e66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4e6a:	f47f af0d 	bne.w	4c88 <__aeabi_dmul+0x234>
    4e6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    4e72:	f47f aeeb 	bne.w	4c4c <__aeabi_dmul+0x1f8>
    4e76:	e712      	b.n	4c9e <__aeabi_dmul+0x24a>

00004e78 <__gedf2>:
    4e78:	f04f 3cff 	mov.w	ip, #4294967295
    4e7c:	e006      	b.n	4e8c <__cmpdf2+0x4>
    4e7e:	bf00      	nop

00004e80 <__ledf2>:
    4e80:	f04f 0c01 	mov.w	ip, #1
    4e84:	e002      	b.n	4e8c <__cmpdf2+0x4>
    4e86:	bf00      	nop

00004e88 <__cmpdf2>:
    4e88:	f04f 0c01 	mov.w	ip, #1
    4e8c:	f84d cd04 	str.w	ip, [sp, #-4]!
    4e90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4e9c:	bf18      	it	ne
    4e9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    4ea2:	d01b      	beq.n	4edc <__cmpdf2+0x54>
    4ea4:	b001      	add	sp, #4
    4ea6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    4eaa:	bf0c      	ite	eq
    4eac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    4eb0:	ea91 0f03 	teqne	r1, r3
    4eb4:	bf02      	ittt	eq
    4eb6:	ea90 0f02 	teqeq	r0, r2
    4eba:	2000      	moveq	r0, #0
    4ebc:	4770      	bxeq	lr
    4ebe:	f110 0f00 	cmn.w	r0, #0
    4ec2:	ea91 0f03 	teq	r1, r3
    4ec6:	bf58      	it	pl
    4ec8:	4299      	cmppl	r1, r3
    4eca:	bf08      	it	eq
    4ecc:	4290      	cmpeq	r0, r2
    4ece:	bf2c      	ite	cs
    4ed0:	17d8      	asrcs	r0, r3, #31
    4ed2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    4ed6:	f040 0001 	orr.w	r0, r0, #1
    4eda:	4770      	bx	lr
    4edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4ee4:	d102      	bne.n	4eec <__cmpdf2+0x64>
    4ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4eea:	d107      	bne.n	4efc <__cmpdf2+0x74>
    4eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4ef4:	d1d6      	bne.n	4ea4 <__cmpdf2+0x1c>
    4ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4efa:	d0d3      	beq.n	4ea4 <__cmpdf2+0x1c>
    4efc:	f85d 0b04 	ldr.w	r0, [sp], #4
    4f00:	4770      	bx	lr
    4f02:	bf00      	nop

00004f04 <__aeabi_cdrcmple>:
    4f04:	4684      	mov	ip, r0
    4f06:	4610      	mov	r0, r2
    4f08:	4662      	mov	r2, ip
    4f0a:	468c      	mov	ip, r1
    4f0c:	4619      	mov	r1, r3
    4f0e:	4663      	mov	r3, ip
    4f10:	e000      	b.n	4f14 <__aeabi_cdcmpeq>
    4f12:	bf00      	nop

00004f14 <__aeabi_cdcmpeq>:
    4f14:	b501      	push	{r0, lr}
    4f16:	f7ff ffb7 	bl	4e88 <__cmpdf2>
    4f1a:	2800      	cmp	r0, #0
    4f1c:	bf48      	it	mi
    4f1e:	f110 0f00 	cmnmi.w	r0, #0
    4f22:	bd01      	pop	{r0, pc}

00004f24 <__aeabi_dcmpeq>:
    4f24:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f28:	f7ff fff4 	bl	4f14 <__aeabi_cdcmpeq>
    4f2c:	bf0c      	ite	eq
    4f2e:	2001      	moveq	r0, #1
    4f30:	2000      	movne	r0, #0
    4f32:	f85d fb08 	ldr.w	pc, [sp], #8
    4f36:	bf00      	nop

00004f38 <__aeabi_dcmplt>:
    4f38:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f3c:	f7ff ffea 	bl	4f14 <__aeabi_cdcmpeq>
    4f40:	bf34      	ite	cc
    4f42:	2001      	movcc	r0, #1
    4f44:	2000      	movcs	r0, #0
    4f46:	f85d fb08 	ldr.w	pc, [sp], #8
    4f4a:	bf00      	nop

00004f4c <__aeabi_dcmple>:
    4f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f50:	f7ff ffe0 	bl	4f14 <__aeabi_cdcmpeq>
    4f54:	bf94      	ite	ls
    4f56:	2001      	movls	r0, #1
    4f58:	2000      	movhi	r0, #0
    4f5a:	f85d fb08 	ldr.w	pc, [sp], #8
    4f5e:	bf00      	nop

00004f60 <__aeabi_dcmpge>:
    4f60:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f64:	f7ff ffce 	bl	4f04 <__aeabi_cdrcmple>
    4f68:	bf94      	ite	ls
    4f6a:	2001      	movls	r0, #1
    4f6c:	2000      	movhi	r0, #0
    4f6e:	f85d fb08 	ldr.w	pc, [sp], #8
    4f72:	bf00      	nop

00004f74 <__aeabi_dcmpgt>:
    4f74:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f78:	f7ff ffc4 	bl	4f04 <__aeabi_cdrcmple>
    4f7c:	bf34      	ite	cc
    4f7e:	2001      	movcc	r0, #1
    4f80:	2000      	movcs	r0, #0
    4f82:	f85d fb08 	ldr.w	pc, [sp], #8
    4f86:	bf00      	nop

00004f88 <__aeabi_d2f>:
    4f88:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4f8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4f90:	bf24      	itt	cs
    4f92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4f96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4f9a:	d90d      	bls.n	4fb8 <__aeabi_d2f+0x30>
    4f9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4fa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4fa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4fa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4fac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4fb0:	bf08      	it	eq
    4fb2:	f020 0001 	biceq.w	r0, r0, #1
    4fb6:	4770      	bx	lr
    4fb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4fbc:	d121      	bne.n	5002 <__aeabi_d2f+0x7a>
    4fbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4fc2:	bfbc      	itt	lt
    4fc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4fc8:	4770      	bxlt	lr
    4fca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4fce:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4fd2:	f1c2 0218 	rsb	r2, r2, #24
    4fd6:	f1c2 0c20 	rsb	ip, r2, #32
    4fda:	fa10 f30c 	lsls.w	r3, r0, ip
    4fde:	fa20 f002 	lsr.w	r0, r0, r2
    4fe2:	bf18      	it	ne
    4fe4:	f040 0001 	orrne.w	r0, r0, #1
    4fe8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4fec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4ff0:	fa03 fc0c 	lsl.w	ip, r3, ip
    4ff4:	ea40 000c 	orr.w	r0, r0, ip
    4ff8:	fa23 f302 	lsr.w	r3, r3, r2
    4ffc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5000:	e7cc      	b.n	4f9c <__aeabi_d2f+0x14>
    5002:	ea7f 5362 	mvns.w	r3, r2, asr #21
    5006:	d107      	bne.n	5018 <__aeabi_d2f+0x90>
    5008:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    500c:	bf1e      	ittt	ne
    500e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    5012:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    5016:	4770      	bxne	lr
    5018:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    501c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5020:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5024:	4770      	bx	lr
    5026:	bf00      	nop

00005028 <__aeabi_uldivmod>:
    5028:	b953      	cbnz	r3, 5040 <__aeabi_uldivmod+0x18>
    502a:	b94a      	cbnz	r2, 5040 <__aeabi_uldivmod+0x18>
    502c:	2900      	cmp	r1, #0
    502e:	bf08      	it	eq
    5030:	2800      	cmpeq	r0, #0
    5032:	bf1c      	itt	ne
    5034:	f04f 31ff 	movne.w	r1, #4294967295
    5038:	f04f 30ff 	movne.w	r0, #4294967295
    503c:	f000 ba96 	b.w	556c <__aeabi_idiv0>
    5040:	f1ad 0c08 	sub.w	ip, sp, #8
    5044:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5048:	f000 fa92 	bl	5570 <__udivmoddi4>
    504c:	f8dd e004 	ldr.w	lr, [sp, #4]
    5050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5054:	b004      	add	sp, #16
    5056:	4770      	bx	lr

00005058 <__mulsc3>:
    5058:	ee20 4a01 	vmul.f32	s8, s0, s2
    505c:	ee60 4aa1 	vmul.f32	s9, s1, s3
    5060:	ee20 5a21 	vmul.f32	s10, s0, s3
    5064:	ee61 5a20 	vmul.f32	s11, s2, s1
    5068:	ee34 7a64 	vsub.f32	s14, s8, s9
    506c:	ee75 6a25 	vadd.f32	s13, s10, s11
    5070:	eeb4 7a47 	vcmp.f32	s14, s14
    5074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5078:	f1c0 80c1 	bvc.w	51fe <__mulsc3+0x1a6>
    507c:	eef4 6a66 	vcmp.f32	s13, s13
    5080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5084:	f1c0 80bb 	bvc.w	51fe <__mulsc3+0x1a6>
    5088:	eeb0 6ac0 	vabs.f32	s12, s0
    508c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 52b8 <__mulsc3+0x260>
    5090:	eef0 3ae0 	vabs.f32	s7, s1
    5094:	eeb4 6a67 	vcmp.f32	s12, s15
    5098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    509c:	dc04      	bgt.n	50a8 <__mulsc3+0x50>
    509e:	eef4 3a67 	vcmp.f32	s7, s15
    50a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50a6:	dd47      	ble.n	5138 <__mulsc3+0xe0>
    50a8:	eeb4 6a67 	vcmp.f32	s12, s15
    50ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50b0:	eef4 3a67 	vcmp.f32	s7, s15
    50b4:	bfcc      	ite	gt
    50b6:	2301      	movgt	r3, #1
    50b8:	2300      	movle	r3, #0
    50ba:	ee06 3a10 	vmov	s12, r3
    50be:	ee10 3a10 	vmov	r3, s0
    50c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    50c6:	2b00      	cmp	r3, #0
    50c8:	eeb0 6ac6 	vabs.f32	s12, s12
    50cc:	bfb8      	it	lt
    50ce:	eeb1 6a46 	vneglt.f32	s12, s12
    50d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50d6:	eeb4 1a41 	vcmp.f32	s2, s2
    50da:	eeb0 0a46 	vmov.f32	s0, s12
    50de:	bfcc      	ite	gt
    50e0:	2301      	movgt	r3, #1
    50e2:	2300      	movle	r3, #0
    50e4:	ee06 3a10 	vmov	s12, r3
    50e8:	ee10 3a90 	vmov	r3, s1
    50ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    50f0:	2b00      	cmp	r3, #0
    50f2:	eeb0 6ac6 	vabs.f32	s12, s12
    50f6:	bfb8      	it	lt
    50f8:	eeb1 6a46 	vneglt.f32	s12, s12
    50fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5100:	eef0 0a46 	vmov.f32	s1, s12
    5104:	d708      	bvc.n	5118 <__mulsc3+0xc0>
    5106:	ee11 3a10 	vmov	r3, s2
    510a:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 52bc <__mulsc3+0x264>
    510e:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 52c0 <__mulsc3+0x268>
    5112:	2b00      	cmp	r3, #0
    5114:	fe21 1a06 	vselge.f32	s2, s2, s12
    5118:	eef4 1a61 	vcmp.f32	s3, s3
    511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5120:	d708      	bvc.n	5134 <__mulsc3+0xdc>
    5122:	ee11 3a90 	vmov	r3, s3
    5126:	ed9f 6a65 	vldr	s12, [pc, #404]	; 52bc <__mulsc3+0x264>
    512a:	eddf 1a65 	vldr	s3, [pc, #404]	; 52c0 <__mulsc3+0x268>
    512e:	2b00      	cmp	r3, #0
    5130:	fe61 1a86 	vselge.f32	s3, s3, s12
    5134:	2301      	movs	r3, #1
    5136:	e000      	b.n	513a <__mulsc3+0xe2>
    5138:	2300      	movs	r3, #0
    513a:	eef0 3ac1 	vabs.f32	s7, s2
    513e:	eeb0 6ae1 	vabs.f32	s12, s3
    5142:	eef4 3a67 	vcmp.f32	s7, s15
    5146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    514a:	dc04      	bgt.n	5156 <__mulsc3+0xfe>
    514c:	eeb4 6a67 	vcmp.f32	s12, s15
    5150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5154:	dd58      	ble.n	5208 <__mulsc3+0x1b0>
    5156:	eef4 3a67 	vcmp.f32	s7, s15
    515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    515e:	eeb4 6a67 	vcmp.f32	s12, s15
    5162:	bfcc      	ite	gt
    5164:	2301      	movgt	r3, #1
    5166:	2300      	movle	r3, #0
    5168:	ee07 3a10 	vmov	s14, r3
    516c:	ee11 3a10 	vmov	r3, s2
    5170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5174:	2b00      	cmp	r3, #0
    5176:	eeb0 7ac7 	vabs.f32	s14, s14
    517a:	bfb8      	it	lt
    517c:	eeb1 7a47 	vneglt.f32	s14, s14
    5180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5184:	eeb4 0a40 	vcmp.f32	s0, s0
    5188:	eeb0 1a47 	vmov.f32	s2, s14
    518c:	bfcc      	ite	gt
    518e:	2301      	movgt	r3, #1
    5190:	2300      	movle	r3, #0
    5192:	ee07 3a90 	vmov	s15, r3
    5196:	ee11 3a90 	vmov	r3, s3
    519a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    519e:	2b00      	cmp	r3, #0
    51a0:	eef0 7ae7 	vabs.f32	s15, s15
    51a4:	bfb8      	it	lt
    51a6:	eef1 7a67 	vneglt.f32	s15, s15
    51aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51ae:	eef0 1a67 	vmov.f32	s3, s15
    51b2:	d708      	bvc.n	51c6 <__mulsc3+0x16e>
    51b4:	ee10 3a10 	vmov	r3, s0
    51b8:	eddf 7a40 	vldr	s15, [pc, #256]	; 52bc <__mulsc3+0x264>
    51bc:	ed9f 0a40 	vldr	s0, [pc, #256]	; 52c0 <__mulsc3+0x268>
    51c0:	2b00      	cmp	r3, #0
    51c2:	fe20 0a27 	vselge.f32	s0, s0, s15
    51c6:	eef4 0a60 	vcmp.f32	s1, s1
    51ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51ce:	d708      	bvc.n	51e2 <__mulsc3+0x18a>
    51d0:	ee10 3a90 	vmov	r3, s1
    51d4:	eddf 7a39 	vldr	s15, [pc, #228]	; 52bc <__mulsc3+0x264>
    51d8:	eddf 0a39 	vldr	s1, [pc, #228]	; 52c0 <__mulsc3+0x268>
    51dc:	2b00      	cmp	r3, #0
    51de:	fe60 0aa7 	vselge.f32	s1, s1, s15
    51e2:	ee21 7ae0 	vnmul.f32	s14, s3, s1
    51e6:	eddf 6a37 	vldr	s13, [pc, #220]	; 52c4 <__mulsc3+0x26c>
    51ea:	ee60 0a81 	vmul.f32	s1, s1, s2
    51ee:	eea0 7a01 	vfma.f32	s14, s0, s2
    51f2:	eee0 0a21 	vfma.f32	s1, s0, s3
    51f6:	ee27 7a26 	vmul.f32	s14, s14, s13
    51fa:	ee60 6aa6 	vmul.f32	s13, s1, s13
    51fe:	eeb0 0a47 	vmov.f32	s0, s14
    5202:	eef0 0a66 	vmov.f32	s1, s13
    5206:	4770      	bx	lr
    5208:	2b00      	cmp	r3, #0
    520a:	d1ea      	bne.n	51e2 <__mulsc3+0x18a>
    520c:	eeb0 4ac4 	vabs.f32	s8, s8
    5210:	eeb4 4a67 	vcmp.f32	s8, s15
    5214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5218:	dc14      	bgt.n	5244 <__mulsc3+0x1ec>
    521a:	eef0 4ae4 	vabs.f32	s9, s9
    521e:	eef4 4a67 	vcmp.f32	s9, s15
    5222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5226:	dc0d      	bgt.n	5244 <__mulsc3+0x1ec>
    5228:	eeb0 5ac5 	vabs.f32	s10, s10
    522c:	eeb4 5a67 	vcmp.f32	s10, s15
    5230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5234:	dc06      	bgt.n	5244 <__mulsc3+0x1ec>
    5236:	eef0 5ae5 	vabs.f32	s11, s11
    523a:	eef4 5a67 	vcmp.f32	s11, s15
    523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5242:	dddc      	ble.n	51fe <__mulsc3+0x1a6>
    5244:	eeb4 0a40 	vcmp.f32	s0, s0
    5248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    524c:	d708      	bvc.n	5260 <__mulsc3+0x208>
    524e:	ee10 3a10 	vmov	r3, s0
    5252:	eddf 7a1a 	vldr	s15, [pc, #104]	; 52bc <__mulsc3+0x264>
    5256:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 52c0 <__mulsc3+0x268>
    525a:	2b00      	cmp	r3, #0
    525c:	fe20 0a27 	vselge.f32	s0, s0, s15
    5260:	eef4 0a60 	vcmp.f32	s1, s1
    5264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5268:	d708      	bvc.n	527c <__mulsc3+0x224>
    526a:	ee10 3a90 	vmov	r3, s1
    526e:	eddf 7a13 	vldr	s15, [pc, #76]	; 52bc <__mulsc3+0x264>
    5272:	eddf 0a13 	vldr	s1, [pc, #76]	; 52c0 <__mulsc3+0x268>
    5276:	2b00      	cmp	r3, #0
    5278:	fe60 0aa7 	vselge.f32	s1, s1, s15
    527c:	eeb4 1a41 	vcmp.f32	s2, s2
    5280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5284:	d708      	bvc.n	5298 <__mulsc3+0x240>
    5286:	ee11 3a10 	vmov	r3, s2
    528a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 52bc <__mulsc3+0x264>
    528e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 52c0 <__mulsc3+0x268>
    5292:	2b00      	cmp	r3, #0
    5294:	fe21 1a27 	vselge.f32	s2, s2, s15
    5298:	eef4 1a61 	vcmp.f32	s3, s3
    529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52a0:	d79f      	bvc.n	51e2 <__mulsc3+0x18a>
    52a2:	ee11 3a90 	vmov	r3, s3
    52a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 52bc <__mulsc3+0x264>
    52aa:	eddf 1a05 	vldr	s3, [pc, #20]	; 52c0 <__mulsc3+0x268>
    52ae:	2b00      	cmp	r3, #0
    52b0:	fe61 1aa7 	vselge.f32	s3, s3, s15
    52b4:	e795      	b.n	51e2 <__mulsc3+0x18a>
    52b6:	bf00      	nop
    52b8:	7f7fffff 	.word	0x7f7fffff
    52bc:	80000000 	.word	0x80000000
    52c0:	00000000 	.word	0x00000000
    52c4:	7f800000 	.word	0x7f800000

000052c8 <__divsc3>:
    52c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52cc:	ed2d 8b06 	vpush	{d8-d10}
    52d0:	eef0 8a60 	vmov.f32	s17, s1
    52d4:	b085      	sub	sp, #20
    52d6:	eeb0 aa41 	vmov.f32	s20, s2
    52da:	ee10 0a10 	vmov	r0, s0
    52de:	eef0 9a61 	vmov.f32	s19, s3
    52e2:	eeb0 9a40 	vmov.f32	s18, s0
    52e6:	f7ff fb5d 	bl	49a4 <__aeabi_f2d>
    52ea:	e9cd 0100 	strd	r0, r1, [sp]
    52ee:	ee18 0a90 	vmov	r0, s17
    52f2:	f7ff fb57 	bl	49a4 <__aeabi_f2d>
    52f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    52fa:	ee1a 0a10 	vmov	r0, s20
    52fe:	f7ff fb51 	bl	49a4 <__aeabi_f2d>
    5302:	4606      	mov	r6, r0
    5304:	460f      	mov	r7, r1
    5306:	ee19 0a90 	vmov	r0, s19
    530a:	f7ff fb4b 	bl	49a4 <__aeabi_f2d>
    530e:	4632      	mov	r2, r6
    5310:	4604      	mov	r4, r0
    5312:	460d      	mov	r5, r1
    5314:	463b      	mov	r3, r7
    5316:	4630      	mov	r0, r6
    5318:	4639      	mov	r1, r7
    531a:	f7ff fb9b 	bl	4a54 <__aeabi_dmul>
    531e:	4680      	mov	r8, r0
    5320:	4689      	mov	r9, r1
    5322:	4622      	mov	r2, r4
    5324:	462b      	mov	r3, r5
    5326:	4620      	mov	r0, r4
    5328:	4629      	mov	r1, r5
    532a:	f7ff fb93 	bl	4a54 <__aeabi_dmul>
    532e:	4602      	mov	r2, r0
    5330:	460b      	mov	r3, r1
    5332:	4640      	mov	r0, r8
    5334:	4649      	mov	r1, r9
    5336:	f7ff f9d7 	bl	46e8 <__adddf3>
    533a:	4632      	mov	r2, r6
    533c:	4682      	mov	sl, r0
    533e:	468b      	mov	fp, r1
    5340:	463b      	mov	r3, r7
    5342:	e9dd 0100 	ldrd	r0, r1, [sp]
    5346:	f7ff fb85 	bl	4a54 <__aeabi_dmul>
    534a:	4680      	mov	r8, r0
    534c:	4689      	mov	r9, r1
    534e:	4622      	mov	r2, r4
    5350:	462b      	mov	r3, r5
    5352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    5356:	f7ff fb7d 	bl	4a54 <__aeabi_dmul>
    535a:	4602      	mov	r2, r0
    535c:	460b      	mov	r3, r1
    535e:	4640      	mov	r0, r8
    5360:	4649      	mov	r1, r9
    5362:	f7ff f9c1 	bl	46e8 <__adddf3>
    5366:	4652      	mov	r2, sl
    5368:	465b      	mov	r3, fp
    536a:	f7ff fc9d 	bl	4ca8 <__aeabi_ddiv>
    536e:	f7ff fe0b 	bl	4f88 <__aeabi_d2f>
    5372:	4632      	mov	r2, r6
    5374:	463b      	mov	r3, r7
    5376:	ee08 0a10 	vmov	s16, r0
    537a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    537e:	f7ff fb69 	bl	4a54 <__aeabi_dmul>
    5382:	4606      	mov	r6, r0
    5384:	460f      	mov	r7, r1
    5386:	4622      	mov	r2, r4
    5388:	462b      	mov	r3, r5
    538a:	e9dd 0100 	ldrd	r0, r1, [sp]
    538e:	f7ff fb61 	bl	4a54 <__aeabi_dmul>
    5392:	4602      	mov	r2, r0
    5394:	460b      	mov	r3, r1
    5396:	4630      	mov	r0, r6
    5398:	4639      	mov	r1, r7
    539a:	f7ff f9a3 	bl	46e4 <__aeabi_dsub>
    539e:	4652      	mov	r2, sl
    53a0:	465b      	mov	r3, fp
    53a2:	f7ff fc81 	bl	4ca8 <__aeabi_ddiv>
    53a6:	f7ff fdef 	bl	4f88 <__aeabi_d2f>
    53aa:	eeb4 8a48 	vcmp.f32	s16, s16
    53ae:	ee07 0a90 	vmov	s15, r0
    53b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53b6:	d725      	bvc.n	5404 <__divsc3+0x13c>
    53b8:	eef4 7a67 	vcmp.f32	s15, s15
    53bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53c0:	d720      	bvc.n	5404 <__divsc3+0x13c>
    53c2:	eeb5 aa40 	vcmp.f32	s20, #0.0
    53c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53ca:	d124      	bne.n	5416 <__divsc3+0x14e>
    53cc:	eef5 9a40 	vcmp.f32	s19, #0.0
    53d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53d4:	d11f      	bne.n	5416 <__divsc3+0x14e>
    53d6:	eeb4 9a49 	vcmp.f32	s18, s18
    53da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53de:	d704      	bvc.n	53ea <__divsc3+0x122>
    53e0:	eef4 8a68 	vcmp.f32	s17, s17
    53e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    53e8:	d615      	bvs.n	5416 <__divsc3+0x14e>
    53ea:	ee1a 3a10 	vmov	r3, s20
    53ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 555c <__divsc3+0x294>
    53f2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 5560 <__divsc3+0x298>
    53f6:	2b00      	cmp	r3, #0
    53f8:	fe67 7a87 	vselge.f32	s15, s15, s14
    53fc:	ee27 8a89 	vmul.f32	s16, s15, s18
    5400:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5404:	eeb0 0a48 	vmov.f32	s0, s16
    5408:	eef0 0a67 	vmov.f32	s1, s15
    540c:	b005      	add	sp, #20
    540e:	ecbd 8b06 	vpop	{d8-d10}
    5412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5416:	eeb0 6ac9 	vabs.f32	s12, s18
    541a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 5564 <__divsc3+0x29c>
    541e:	eef0 6aca 	vabs.f32	s13, s20
    5422:	eeb4 6a47 	vcmp.f32	s12, s14
    5426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    542a:	dc06      	bgt.n	543a <__divsc3+0x172>
    542c:	eef0 5ae8 	vabs.f32	s11, s17
    5430:	eef4 5a47 	vcmp.f32	s11, s14
    5434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5438:	dd42      	ble.n	54c0 <__divsc3+0x1f8>
    543a:	eef4 6a47 	vcmp.f32	s13, s14
    543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5442:	d83d      	bhi.n	54c0 <__divsc3+0x1f8>
    5444:	eef0 5ae9 	vabs.f32	s11, s19
    5448:	eef4 5a47 	vcmp.f32	s11, s14
    544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5450:	d836      	bhi.n	54c0 <__divsc3+0x1f8>
    5452:	eeb4 6a47 	vcmp.f32	s12, s14
    5456:	eef0 7ae8 	vabs.f32	s15, s17
    545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    545e:	eef4 7a47 	vcmp.f32	s15, s14
    5462:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 555c <__divsc3+0x294>
    5466:	bfcc      	ite	gt
    5468:	2301      	movgt	r3, #1
    546a:	2300      	movle	r3, #0
    546c:	ee06 3a90 	vmov	s13, r3
    5470:	ee19 3a10 	vmov	r3, s18
    5474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    5478:	2b00      	cmp	r3, #0
    547a:	eef0 6ae6 	vabs.f32	s13, s13
    547e:	bfb8      	it	lt
    5480:	eef1 6a66 	vneglt.f32	s13, s13
    5484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5488:	bfcc      	ite	gt
    548a:	2301      	movgt	r3, #1
    548c:	2300      	movle	r3, #0
    548e:	ee07 3a90 	vmov	s15, r3
    5492:	ee18 3a90 	vmov	r3, s17
    5496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    549a:	2b00      	cmp	r3, #0
    549c:	eef0 7ae7 	vabs.f32	s15, s15
    54a0:	bfb8      	it	lt
    54a2:	eef1 7a67 	vneglt.f32	s15, s15
    54a6:	ee29 8aa7 	vmul.f32	s16, s19, s15
    54aa:	eeaa 8a26 	vfma.f32	s16, s20, s13
    54ae:	ee66 6ae9 	vnmul.f32	s13, s13, s19
    54b2:	eeea 6a27 	vfma.f32	s13, s20, s15
    54b6:	ee28 8a07 	vmul.f32	s16, s16, s14
    54ba:	ee67 7a26 	vmul.f32	s15, s14, s13
    54be:	e7a1      	b.n	5404 <__divsc3+0x13c>
    54c0:	eef4 6a47 	vcmp.f32	s13, s14
    54c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54c8:	dc06      	bgt.n	54d8 <__divsc3+0x210>
    54ca:	eef0 5ae9 	vabs.f32	s11, s19
    54ce:	eef4 5a47 	vcmp.f32	s11, s14
    54d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54d6:	dd95      	ble.n	5404 <__divsc3+0x13c>
    54d8:	eeb4 6a47 	vcmp.f32	s12, s14
    54dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54e0:	d890      	bhi.n	5404 <__divsc3+0x13c>
    54e2:	eeb0 6ae8 	vabs.f32	s12, s17
    54e6:	eeb4 6a47 	vcmp.f32	s12, s14
    54ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54ee:	d889      	bhi.n	5404 <__divsc3+0x13c>
    54f0:	eef4 6a47 	vcmp.f32	s13, s14
    54f4:	eef0 6ae9 	vabs.f32	s13, s19
    54f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54fc:	eef4 6a47 	vcmp.f32	s13, s14
    5500:	eddf 6a19 	vldr	s13, [pc, #100]	; 5568 <__divsc3+0x2a0>
    5504:	bfcc      	ite	gt
    5506:	2301      	movgt	r3, #1
    5508:	2300      	movle	r3, #0
    550a:	ee07 3a90 	vmov	s15, r3
    550e:	ee1a 3a10 	vmov	r3, s20
    5512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5516:	2b00      	cmp	r3, #0
    5518:	eef0 7ae7 	vabs.f32	s15, s15
    551c:	bfb8      	it	lt
    551e:	eef1 7a67 	vneglt.f32	s15, s15
    5522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5526:	bfcc      	ite	gt
    5528:	2301      	movgt	r3, #1
    552a:	2300      	movle	r3, #0
    552c:	ee07 3a10 	vmov	s14, r3
    5530:	ee19 3a90 	vmov	r3, s19
    5534:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5538:	2b00      	cmp	r3, #0
    553a:	eeb0 7ac7 	vabs.f32	s14, s14
    553e:	bfb8      	it	lt
    5540:	eeb1 7a47 	vneglt.f32	s14, s14
    5544:	ee28 8a87 	vmul.f32	s16, s17, s14
    5548:	ee27 7a49 	vnmul.f32	s14, s14, s18
    554c:	eea9 8a27 	vfma.f32	s16, s18, s15
    5550:	eea8 7aa7 	vfma.f32	s14, s17, s15
    5554:	ee28 8a26 	vmul.f32	s16, s16, s13
    5558:	e7af      	b.n	54ba <__divsc3+0x1f2>
    555a:	bf00      	nop
    555c:	7f800000 	.word	0x7f800000
    5560:	ff800000 	.word	0xff800000
    5564:	7f7fffff 	.word	0x7f7fffff
    5568:	00000000 	.word	0x00000000

0000556c <__aeabi_idiv0>:
    556c:	4770      	bx	lr
    556e:	bf00      	nop

00005570 <__udivmoddi4>:
    5570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5574:	4686      	mov	lr, r0
    5576:	468c      	mov	ip, r1
    5578:	4608      	mov	r0, r1
    557a:	9e08      	ldr	r6, [sp, #32]
    557c:	4615      	mov	r5, r2
    557e:	4674      	mov	r4, lr
    5580:	4619      	mov	r1, r3
    5582:	2b00      	cmp	r3, #0
    5584:	f040 80c1 	bne.w	570a <__udivmoddi4+0x19a>
    5588:	4285      	cmp	r5, r0
    558a:	fab2 f282 	clz	r2, r2
    558e:	d945      	bls.n	561c <__udivmoddi4+0xac>
    5590:	b14a      	cbz	r2, 55a6 <__udivmoddi4+0x36>
    5592:	f1c2 0320 	rsb	r3, r2, #32
    5596:	fa00 fc02 	lsl.w	ip, r0, r2
    559a:	4095      	lsls	r5, r2
    559c:	4094      	lsls	r4, r2
    559e:	fa2e f303 	lsr.w	r3, lr, r3
    55a2:	ea43 0c0c 	orr.w	ip, r3, ip
    55a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    55aa:	b2a8      	uxth	r0, r5
    55ac:	0c23      	lsrs	r3, r4, #16
    55ae:	fbbc f8fe 	udiv	r8, ip, lr
    55b2:	fb0e cc18 	mls	ip, lr, r8, ip
    55b6:	fb08 f900 	mul.w	r9, r8, r0
    55ba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    55be:	4599      	cmp	r9, r3
    55c0:	d928      	bls.n	5614 <__udivmoddi4+0xa4>
    55c2:	18eb      	adds	r3, r5, r3
    55c4:	f108 37ff 	add.w	r7, r8, #4294967295
    55c8:	d204      	bcs.n	55d4 <__udivmoddi4+0x64>
    55ca:	4599      	cmp	r9, r3
    55cc:	d902      	bls.n	55d4 <__udivmoddi4+0x64>
    55ce:	f1a8 0702 	sub.w	r7, r8, #2
    55d2:	442b      	add	r3, r5
    55d4:	eba3 0309 	sub.w	r3, r3, r9
    55d8:	b2a4      	uxth	r4, r4
    55da:	fbb3 fcfe 	udiv	ip, r3, lr
    55de:	fb0e 331c 	mls	r3, lr, ip, r3
    55e2:	fb0c f000 	mul.w	r0, ip, r0
    55e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    55ea:	42a0      	cmp	r0, r4
    55ec:	d914      	bls.n	5618 <__udivmoddi4+0xa8>
    55ee:	192c      	adds	r4, r5, r4
    55f0:	f10c 33ff 	add.w	r3, ip, #4294967295
    55f4:	d204      	bcs.n	5600 <__udivmoddi4+0x90>
    55f6:	42a0      	cmp	r0, r4
    55f8:	d902      	bls.n	5600 <__udivmoddi4+0x90>
    55fa:	f1ac 0302 	sub.w	r3, ip, #2
    55fe:	442c      	add	r4, r5
    5600:	1a24      	subs	r4, r4, r0
    5602:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    5606:	b11e      	cbz	r6, 5610 <__udivmoddi4+0xa0>
    5608:	40d4      	lsrs	r4, r2
    560a:	2300      	movs	r3, #0
    560c:	6034      	str	r4, [r6, #0]
    560e:	6073      	str	r3, [r6, #4]
    5610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5614:	4647      	mov	r7, r8
    5616:	e7dd      	b.n	55d4 <__udivmoddi4+0x64>
    5618:	4663      	mov	r3, ip
    561a:	e7f1      	b.n	5600 <__udivmoddi4+0x90>
    561c:	bb92      	cbnz	r2, 5684 <__udivmoddi4+0x114>
    561e:	1b43      	subs	r3, r0, r5
    5620:	2101      	movs	r1, #1
    5622:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5626:	b2af      	uxth	r7, r5
    5628:	0c20      	lsrs	r0, r4, #16
    562a:	fbb3 fcfe 	udiv	ip, r3, lr
    562e:	fb0e 331c 	mls	r3, lr, ip, r3
    5632:	fb0c f807 	mul.w	r8, ip, r7
    5636:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    563a:	4598      	cmp	r8, r3
    563c:	d961      	bls.n	5702 <__udivmoddi4+0x192>
    563e:	18eb      	adds	r3, r5, r3
    5640:	f10c 30ff 	add.w	r0, ip, #4294967295
    5644:	d204      	bcs.n	5650 <__udivmoddi4+0xe0>
    5646:	4598      	cmp	r8, r3
    5648:	d902      	bls.n	5650 <__udivmoddi4+0xe0>
    564a:	f1ac 0002 	sub.w	r0, ip, #2
    564e:	442b      	add	r3, r5
    5650:	eba3 0308 	sub.w	r3, r3, r8
    5654:	b2a4      	uxth	r4, r4
    5656:	fbb3 fcfe 	udiv	ip, r3, lr
    565a:	fb0e 331c 	mls	r3, lr, ip, r3
    565e:	fb0c f707 	mul.w	r7, ip, r7
    5662:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    5666:	42a7      	cmp	r7, r4
    5668:	d94d      	bls.n	5706 <__udivmoddi4+0x196>
    566a:	192c      	adds	r4, r5, r4
    566c:	f10c 33ff 	add.w	r3, ip, #4294967295
    5670:	d204      	bcs.n	567c <__udivmoddi4+0x10c>
    5672:	42a7      	cmp	r7, r4
    5674:	d902      	bls.n	567c <__udivmoddi4+0x10c>
    5676:	f1ac 0302 	sub.w	r3, ip, #2
    567a:	442c      	add	r4, r5
    567c:	1be4      	subs	r4, r4, r7
    567e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5682:	e7c0      	b.n	5606 <__udivmoddi4+0x96>
    5684:	f1c2 0320 	rsb	r3, r2, #32
    5688:	4095      	lsls	r5, r2
    568a:	4094      	lsls	r4, r2
    568c:	fa20 f103 	lsr.w	r1, r0, r3
    5690:	fa2e f303 	lsr.w	r3, lr, r3
    5694:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5698:	4090      	lsls	r0, r2
    569a:	b2af      	uxth	r7, r5
    569c:	4303      	orrs	r3, r0
    569e:	fbb1 fcfe 	udiv	ip, r1, lr
    56a2:	fb0e 101c 	mls	r0, lr, ip, r1
    56a6:	0c19      	lsrs	r1, r3, #16
    56a8:	fb0c f807 	mul.w	r8, ip, r7
    56ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    56b0:	4588      	cmp	r8, r1
    56b2:	d922      	bls.n	56fa <__udivmoddi4+0x18a>
    56b4:	1869      	adds	r1, r5, r1
    56b6:	f10c 30ff 	add.w	r0, ip, #4294967295
    56ba:	d204      	bcs.n	56c6 <__udivmoddi4+0x156>
    56bc:	4588      	cmp	r8, r1
    56be:	d902      	bls.n	56c6 <__udivmoddi4+0x156>
    56c0:	f1ac 0002 	sub.w	r0, ip, #2
    56c4:	4429      	add	r1, r5
    56c6:	eba1 0108 	sub.w	r1, r1, r8
    56ca:	b29b      	uxth	r3, r3
    56cc:	fbb1 fcfe 	udiv	ip, r1, lr
    56d0:	fb0e 111c 	mls	r1, lr, ip, r1
    56d4:	fb0c f707 	mul.w	r7, ip, r7
    56d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    56dc:	429f      	cmp	r7, r3
    56de:	d90e      	bls.n	56fe <__udivmoddi4+0x18e>
    56e0:	18eb      	adds	r3, r5, r3
    56e2:	f10c 31ff 	add.w	r1, ip, #4294967295
    56e6:	d204      	bcs.n	56f2 <__udivmoddi4+0x182>
    56e8:	429f      	cmp	r7, r3
    56ea:	d902      	bls.n	56f2 <__udivmoddi4+0x182>
    56ec:	f1ac 0102 	sub.w	r1, ip, #2
    56f0:	442b      	add	r3, r5
    56f2:	1bdb      	subs	r3, r3, r7
    56f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    56f8:	e793      	b.n	5622 <__udivmoddi4+0xb2>
    56fa:	4660      	mov	r0, ip
    56fc:	e7e3      	b.n	56c6 <__udivmoddi4+0x156>
    56fe:	4661      	mov	r1, ip
    5700:	e7f7      	b.n	56f2 <__udivmoddi4+0x182>
    5702:	4660      	mov	r0, ip
    5704:	e7a4      	b.n	5650 <__udivmoddi4+0xe0>
    5706:	4663      	mov	r3, ip
    5708:	e7b8      	b.n	567c <__udivmoddi4+0x10c>
    570a:	4283      	cmp	r3, r0
    570c:	d906      	bls.n	571c <__udivmoddi4+0x1ac>
    570e:	b916      	cbnz	r6, 5716 <__udivmoddi4+0x1a6>
    5710:	2100      	movs	r1, #0
    5712:	4608      	mov	r0, r1
    5714:	e77c      	b.n	5610 <__udivmoddi4+0xa0>
    5716:	e9c6 e000 	strd	lr, r0, [r6]
    571a:	e7f9      	b.n	5710 <__udivmoddi4+0x1a0>
    571c:	fab3 f783 	clz	r7, r3
    5720:	b98f      	cbnz	r7, 5746 <__udivmoddi4+0x1d6>
    5722:	4283      	cmp	r3, r0
    5724:	d301      	bcc.n	572a <__udivmoddi4+0x1ba>
    5726:	4572      	cmp	r2, lr
    5728:	d808      	bhi.n	573c <__udivmoddi4+0x1cc>
    572a:	ebbe 0402 	subs.w	r4, lr, r2
    572e:	eb60 0303 	sbc.w	r3, r0, r3
    5732:	2001      	movs	r0, #1
    5734:	469c      	mov	ip, r3
    5736:	b91e      	cbnz	r6, 5740 <__udivmoddi4+0x1d0>
    5738:	2100      	movs	r1, #0
    573a:	e769      	b.n	5610 <__udivmoddi4+0xa0>
    573c:	4638      	mov	r0, r7
    573e:	e7fa      	b.n	5736 <__udivmoddi4+0x1c6>
    5740:	e9c6 4c00 	strd	r4, ip, [r6]
    5744:	e7f8      	b.n	5738 <__udivmoddi4+0x1c8>
    5746:	f1c7 0c20 	rsb	ip, r7, #32
    574a:	40bb      	lsls	r3, r7
    574c:	fa0e f507 	lsl.w	r5, lr, r7
    5750:	fa22 f40c 	lsr.w	r4, r2, ip
    5754:	fa2e f10c 	lsr.w	r1, lr, ip
    5758:	40ba      	lsls	r2, r7
    575a:	431c      	orrs	r4, r3
    575c:	fa20 f30c 	lsr.w	r3, r0, ip
    5760:	40b8      	lsls	r0, r7
    5762:	ea4f 4914 	mov.w	r9, r4, lsr #16
    5766:	4301      	orrs	r1, r0
    5768:	fa1f fe84 	uxth.w	lr, r4
    576c:	fbb3 f8f9 	udiv	r8, r3, r9
    5770:	fb09 3018 	mls	r0, r9, r8, r3
    5774:	0c0b      	lsrs	r3, r1, #16
    5776:	fb08 fa0e 	mul.w	sl, r8, lr
    577a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    577e:	459a      	cmp	sl, r3
    5780:	d940      	bls.n	5804 <__udivmoddi4+0x294>
    5782:	18e3      	adds	r3, r4, r3
    5784:	f108 30ff 	add.w	r0, r8, #4294967295
    5788:	d204      	bcs.n	5794 <__udivmoddi4+0x224>
    578a:	459a      	cmp	sl, r3
    578c:	d902      	bls.n	5794 <__udivmoddi4+0x224>
    578e:	f1a8 0002 	sub.w	r0, r8, #2
    5792:	4423      	add	r3, r4
    5794:	eba3 030a 	sub.w	r3, r3, sl
    5798:	b289      	uxth	r1, r1
    579a:	fbb3 f8f9 	udiv	r8, r3, r9
    579e:	fb09 3318 	mls	r3, r9, r8, r3
    57a2:	fb08 fe0e 	mul.w	lr, r8, lr
    57a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    57aa:	458e      	cmp	lr, r1
    57ac:	d92c      	bls.n	5808 <__udivmoddi4+0x298>
    57ae:	1861      	adds	r1, r4, r1
    57b0:	f108 33ff 	add.w	r3, r8, #4294967295
    57b4:	d204      	bcs.n	57c0 <__udivmoddi4+0x250>
    57b6:	458e      	cmp	lr, r1
    57b8:	d902      	bls.n	57c0 <__udivmoddi4+0x250>
    57ba:	f1a8 0302 	sub.w	r3, r8, #2
    57be:	4421      	add	r1, r4
    57c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    57c4:	eba1 010e 	sub.w	r1, r1, lr
    57c8:	fba0 9802 	umull	r9, r8, r0, r2
    57cc:	4541      	cmp	r1, r8
    57ce:	46ce      	mov	lr, r9
    57d0:	4643      	mov	r3, r8
    57d2:	d302      	bcc.n	57da <__udivmoddi4+0x26a>
    57d4:	d106      	bne.n	57e4 <__udivmoddi4+0x274>
    57d6:	454d      	cmp	r5, r9
    57d8:	d204      	bcs.n	57e4 <__udivmoddi4+0x274>
    57da:	3801      	subs	r0, #1
    57dc:	ebb9 0e02 	subs.w	lr, r9, r2
    57e0:	eb68 0304 	sbc.w	r3, r8, r4
    57e4:	2e00      	cmp	r6, #0
    57e6:	d0a7      	beq.n	5738 <__udivmoddi4+0x1c8>
    57e8:	ebb5 020e 	subs.w	r2, r5, lr
    57ec:	eb61 0103 	sbc.w	r1, r1, r3
    57f0:	fa01 fc0c 	lsl.w	ip, r1, ip
    57f4:	fa22 f307 	lsr.w	r3, r2, r7
    57f8:	40f9      	lsrs	r1, r7
    57fa:	ea4c 0303 	orr.w	r3, ip, r3
    57fe:	e9c6 3100 	strd	r3, r1, [r6]
    5802:	e799      	b.n	5738 <__udivmoddi4+0x1c8>
    5804:	4640      	mov	r0, r8
    5806:	e7c5      	b.n	5794 <__udivmoddi4+0x224>
    5808:	4643      	mov	r3, r8
    580a:	e7d9      	b.n	57c0 <__udivmoddi4+0x250>

0000580c <strcmp>:
    580c:	f810 2b01 	ldrb.w	r2, [r0], #1
    5810:	f811 3b01 	ldrb.w	r3, [r1], #1
    5814:	2a01      	cmp	r2, #1
    5816:	bf28      	it	cs
    5818:	429a      	cmpcs	r2, r3
    581a:	d0f7      	beq.n	580c <strcmp>
    581c:	1ad0      	subs	r0, r2, r3
    581e:	4770      	bx	lr

00005820 <strlen>:
    5820:	4603      	mov	r3, r0
    5822:	f813 2b01 	ldrb.w	r2, [r3], #1
    5826:	2a00      	cmp	r2, #0
    5828:	d1fb      	bne.n	5822 <strlen+0x2>
    582a:	1a18      	subs	r0, r3, r0
    582c:	3801      	subs	r0, #1
    582e:	4770      	bx	lr

00005830 <pwm_led_set>:

	return 0;
}

void pwm_led_set(uint16_t desired_lvl)
{
    5830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5834:	b087      	sub	sp, #28
    5836:	9003      	str	r0, [sp, #12]
						uint64_t *cycles)
{
	const struct pwm_driver_api *api =
		(const struct pwm_driver_api *)dev->api;

	return api->get_cycles_per_sec(dev, channel, cycles);
    5838:	4f25      	ldr	r7, [pc, #148]	; (58d0 <pwm_led_set+0xa0>)
    583a:	2100      	movs	r1, #0
    583c:	68bb      	ldr	r3, [r7, #8]
    583e:	4638      	mov	r0, r7
    5840:	9302      	str	r3, [sp, #8]
    5842:	aa04      	add	r2, sp, #16
    5844:	685b      	ldr	r3, [r3, #4]
    5846:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
    5848:	2800      	cmp	r0, #0
    584a:	db3a      	blt.n	58c2 <pwm_led_set+0x92>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    584c:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
    5850:	f44f 237a 	mov.w	r3, #1024000	; 0xfa000
    5854:	fba4 b503 	umull	fp, r5, r4, r3
    5858:	fb03 550a 	mla	r5, r3, sl, r5
    585c:	a31a      	add	r3, pc, #104	; (adr r3, 58c8 <pwm_led_set+0x98>)
    585e:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (period_cycles > UINT32_MAX) {
    5862:	f04f 39ff 	mov.w	r9, #4294967295
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    5866:	4629      	mov	r1, r5
    5868:	4658      	mov	r0, fp
    586a:	f7ff fbdd 	bl	5028 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
    586e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 58d4 <pwm_led_set+0xa4>
    5872:	45d9      	cmp	r9, fp
    5874:	eb78 0505 	sbcs.w	r5, r8, r5
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
    5878:	4606      	mov	r6, r0
	if (period_cycles > UINT32_MAX) {
    587a:	d322      	bcc.n	58c2 <pwm_led_set+0x92>
	uint32_t scaled_lvl = (PWM_PERIOD * desired_lvl) / LIGHTNESS_MAX;
    587c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5880:	9b03      	ldr	r3, [sp, #12]
    5882:	029b      	lsls	r3, r3, #10
    5884:	fbb3 f3f2 	udiv	r3, r3, r2

	pwm_set_dt(&led0, PWM_USEC(PWM_PERIOD), PWM_USEC(scaled_lvl));
    5888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    588c:	4353      	muls	r3, r2
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    588e:	fba3 5404 	umull	r5, r4, r3, r4
    5892:	fb03 440a 	mla	r4, r3, sl, r4
    5896:	a30c      	add	r3, pc, #48	; (adr r3, 58c8 <pwm_led_set+0x98>)
    5898:	e9d3 2300 	ldrd	r2, r3, [r3]
    589c:	4621      	mov	r1, r4
    589e:	4628      	mov	r0, r5
    58a0:	f7ff fbc2 	bl	5028 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
    58a4:	45a9      	cmp	r9, r5
    58a6:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
    58aa:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
    58ac:	d309      	bcc.n	58c2 <pwm_led_set+0x92>
	if (pulse > period) {
    58ae:	4286      	cmp	r6, r0
    58b0:	d307      	bcc.n	58c2 <pwm_led_set+0x92>
	return api->set_cycles(dev, channel, period, pulse, flags);
    58b2:	2201      	movs	r2, #1
    58b4:	9200      	str	r2, [sp, #0]
    58b6:	9a02      	ldr	r2, [sp, #8]
    58b8:	2100      	movs	r1, #0
    58ba:	6814      	ldr	r4, [r2, #0]
    58bc:	4638      	mov	r0, r7
    58be:	4632      	mov	r2, r6
    58c0:	47a0      	blx	r4
}
    58c2:	b007      	add	sp, #28
    58c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58c8:	3b9aca00 	.word	0x3b9aca00
    58cc:	00000000 	.word	0x00000000
    58d0:	0001f5e4 	.word	0x0001f5e4
    58d4:	3b9ac9ff 	.word	0x3b9ac9ff

000058d8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    58d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58dc:	4682      	mov	sl, r0
    58de:	4616      	mov	r6, r2
    58e0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    58e2:	2500      	movs	r5, #0
{
    58e4:	b09f      	sub	sp, #124	; 0x7c
    58e6:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    58e8:	7830      	ldrb	r0, [r6, #0]
    58ea:	b910      	cbnz	r0, 58f2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    58ec:	4628      	mov	r0, r5
    58ee:	f000 bd85 	b.w	63fc <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
    58f2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    58f4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    58f6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    58f8:	d006      	beq.n	5908 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    58fa:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    58fc:	47d0      	blx	sl
    58fe:	2800      	cmp	r0, #0
    5900:	f2c0 857c 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    5904:	3501      	adds	r5, #1
		if (bps == NULL) {
    5906:	e21b      	b.n	5d40 <z_cbvprintf_impl+0x468>
		} state = {
    5908:	2218      	movs	r2, #24
    590a:	2100      	movs	r1, #0
    590c:	a810      	add	r0, sp, #64	; 0x40
    590e:	f019 fd80 	bl	1f412 <memset>
	if (*sp == '%') {
    5912:	7873      	ldrb	r3, [r6, #1]
    5914:	2b25      	cmp	r3, #37	; 0x25
    5916:	f000 80ba 	beq.w	5a8e <z_cbvprintf_impl+0x1b6>
    591a:	2300      	movs	r3, #0
    591c:	4698      	mov	r8, r3
    591e:	469e      	mov	lr, r3
    5920:	469c      	mov	ip, r3
    5922:	4618      	mov	r0, r3
    5924:	1c71      	adds	r1, r6, #1
    5926:	460f      	mov	r7, r1
		switch (*sp) {
    5928:	f811 2b01 	ldrb.w	r2, [r1], #1
    592c:	2a2b      	cmp	r2, #43	; 0x2b
    592e:	f000 80dd 	beq.w	5aec <z_cbvprintf_impl+0x214>
    5932:	f200 80d4 	bhi.w	5ade <z_cbvprintf_impl+0x206>
    5936:	2a20      	cmp	r2, #32
    5938:	f000 80db 	beq.w	5af2 <z_cbvprintf_impl+0x21a>
    593c:	2a23      	cmp	r2, #35	; 0x23
    593e:	f000 80db 	beq.w	5af8 <z_cbvprintf_impl+0x220>
    5942:	b12b      	cbz	r3, 5950 <z_cbvprintf_impl+0x78>
    5944:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    5948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    594c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    5950:	f1b8 0f00 	cmp.w	r8, #0
    5954:	d005      	beq.n	5962 <z_cbvprintf_impl+0x8a>
    5956:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    595a:	f043 0320 	orr.w	r3, r3, #32
    595e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    5962:	f1be 0f00 	cmp.w	lr, #0
    5966:	d005      	beq.n	5974 <z_cbvprintf_impl+0x9c>
    5968:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    596c:	f043 0310 	orr.w	r3, r3, #16
    5970:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    5974:	f1bc 0f00 	cmp.w	ip, #0
    5978:	d005      	beq.n	5986 <z_cbvprintf_impl+0xae>
    597a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    597e:	f043 0308 	orr.w	r3, r3, #8
    5982:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    5986:	b128      	cbz	r0, 5994 <z_cbvprintf_impl+0xbc>
    5988:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    598c:	f043 0304 	orr.w	r3, r3, #4
    5990:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    5994:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    5998:	f003 0144 	and.w	r1, r3, #68	; 0x44
    599c:	2944      	cmp	r1, #68	; 0x44
    599e:	d103      	bne.n	59a8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    59a0:	f36f 1386 	bfc	r3, #6, #1
    59a4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    59a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    59ac:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    59ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    59b2:	970e      	str	r7, [sp, #56]	; 0x38
    59b4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    59b8:	f040 80a3 	bne.w	5b02 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
    59bc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    59c0:	f043 0301 	orr.w	r3, r3, #1
    59c4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    59c8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    59ca:	781a      	ldrb	r2, [r3, #0]
    59cc:	2a2e      	cmp	r2, #46	; 0x2e
    59ce:	bf0c      	ite	eq
    59d0:	2101      	moveq	r1, #1
    59d2:	2100      	movne	r1, #0
    59d4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    59d8:	f361 0241 	bfi	r2, r1, #1, #1
    59dc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    59e0:	d10c      	bne.n	59fc <z_cbvprintf_impl+0x124>
	++sp;
    59e2:	1c5a      	adds	r2, r3, #1
    59e4:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    59e6:	785a      	ldrb	r2, [r3, #1]
    59e8:	2a2a      	cmp	r2, #42	; 0x2a
    59ea:	f040 809a 	bne.w	5b22 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
    59ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    59f2:	3302      	adds	r3, #2
		conv->prec_star = true;
    59f4:	f042 0204 	orr.w	r2, r2, #4
    59f8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    59fc:	781a      	ldrb	r2, [r3, #0]
    59fe:	2a6c      	cmp	r2, #108	; 0x6c
    5a00:	f000 80bb 	beq.w	5b7a <z_cbvprintf_impl+0x2a2>
    5a04:	f200 809d 	bhi.w	5b42 <z_cbvprintf_impl+0x26a>
    5a08:	2a68      	cmp	r2, #104	; 0x68
    5a0a:	f000 80a3 	beq.w	5b54 <z_cbvprintf_impl+0x27c>
    5a0e:	2a6a      	cmp	r2, #106	; 0x6a
    5a10:	f000 80bc 	beq.w	5b8c <z_cbvprintf_impl+0x2b4>
    5a14:	2a4c      	cmp	r2, #76	; 0x4c
    5a16:	f000 80c1 	beq.w	5b9c <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
    5a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    5a1e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    5a20:	9306      	str	r3, [sp, #24]
    5a22:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    5a26:	f200 8101 	bhi.w	5c2c <z_cbvprintf_impl+0x354>
    5a2a:	2a6d      	cmp	r2, #109	; 0x6d
    5a2c:	f200 80c3 	bhi.w	5bb6 <z_cbvprintf_impl+0x2de>
    5a30:	2a69      	cmp	r2, #105	; 0x69
    5a32:	f200 80fb 	bhi.w	5c2c <z_cbvprintf_impl+0x354>
    5a36:	2a57      	cmp	r2, #87	; 0x57
    5a38:	f200 80da 	bhi.w	5bf0 <z_cbvprintf_impl+0x318>
    5a3c:	2a41      	cmp	r2, #65	; 0x41
    5a3e:	d004      	beq.n	5a4a <z_cbvprintf_impl+0x172>
    5a40:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5a44:	2b02      	cmp	r3, #2
    5a46:	f200 80f1 	bhi.w	5c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
    5a4a:	2104      	movs	r1, #4
    5a4c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    5a50:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5a54:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    5a58:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    5a5c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    5a5e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
    5a62:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    5a64:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    5a68:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
    5a6a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
    5a6e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    5a72:	b2cb      	uxtb	r3, r1
    5a74:	f100 8119 	bmi.w	5caa <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
    5a78:	f003 0278 	and.w	r2, r3, #120	; 0x78
    5a7c:	2a18      	cmp	r2, #24
    5a7e:	f040 8103 	bne.w	5c88 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
    5a82:	f36f 03c6 	bfc	r3, #3, #4
    5a86:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    5a8a:	2300      	movs	r3, #0
    5a8c:	e0f2      	b.n	5c74 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
    5a8e:	1cb2      	adds	r2, r6, #2
    5a90:	9206      	str	r2, [sp, #24]
    5a92:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    5a96:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    5a9a:	07d9      	lsls	r1, r3, #31
    5a9c:	f140 8107 	bpl.w	5cae <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
    5aa0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
    5aa4:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
    5aa6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    5aa8:	da08      	bge.n	5abc <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
    5aaa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    5aae:	f042 0204 	orr.w	r2, r2, #4
    5ab2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    5ab6:	9a04      	ldr	r2, [sp, #16]
    5ab8:	4252      	negs	r2, r2
		int width = -1;
    5aba:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    5abc:	075a      	lsls	r2, r3, #29
    5abe:	f140 80fe 	bpl.w	5cbe <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
    5ac2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    5ac6:	2f00      	cmp	r7, #0
    5ac8:	f280 80fd 	bge.w	5cc6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
    5acc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    5ad0:	f36f 0341 	bfc	r3, #1, #1
    5ad4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    5ad8:	f04f 37ff 	mov.w	r7, #4294967295
    5adc:	e0f3      	b.n	5cc6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
    5ade:	2a2d      	cmp	r2, #45	; 0x2d
    5ae0:	d00d      	beq.n	5afe <z_cbvprintf_impl+0x226>
    5ae2:	2a30      	cmp	r2, #48	; 0x30
    5ae4:	f47f af2d 	bne.w	5942 <z_cbvprintf_impl+0x6a>
    5ae8:	2301      	movs	r3, #1
	} while (loop);
    5aea:	e71c      	b.n	5926 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    5aec:	f04f 0c01 	mov.w	ip, #1
    5af0:	e719      	b.n	5926 <z_cbvprintf_impl+0x4e>
    5af2:	f04f 0e01 	mov.w	lr, #1
    5af6:	e716      	b.n	5926 <z_cbvprintf_impl+0x4e>
    5af8:	f04f 0801 	mov.w	r8, #1
    5afc:	e713      	b.n	5926 <z_cbvprintf_impl+0x4e>
    5afe:	2001      	movs	r0, #1
    5b00:	e711      	b.n	5926 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    5b02:	a80e      	add	r0, sp, #56	; 0x38
    5b04:	f001 ffce 	bl	7aa4 <extract_decimal>
	if (sp != wp) {
    5b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5b0a:	42bb      	cmp	r3, r7
    5b0c:	f43f af5d 	beq.w	59ca <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    5b10:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    5b14:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    5b16:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    5b18:	f360 0241 	bfi	r2, r0, #1, #1
    5b1c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    5b20:	e753      	b.n	59ca <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    5b22:	a80e      	add	r0, sp, #56	; 0x38
    5b24:	f001 ffbe 	bl	7aa4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5b28:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    5b2c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    5b2e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    5b32:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    5b36:	f362 0341 	bfi	r3, r2, #1, #1
    5b3a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    5b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5b40:	e75c      	b.n	59fc <z_cbvprintf_impl+0x124>
	switch (*sp) {
    5b42:	2a74      	cmp	r2, #116	; 0x74
    5b44:	d026      	beq.n	5b94 <z_cbvprintf_impl+0x2bc>
    5b46:	2a7a      	cmp	r2, #122	; 0x7a
    5b48:	f47f af67 	bne.w	5a1a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    5b4c:	2106      	movs	r1, #6
    5b4e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5b52:	e00c      	b.n	5b6e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
    5b54:	785a      	ldrb	r2, [r3, #1]
    5b56:	2a68      	cmp	r2, #104	; 0x68
    5b58:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5b5c:	d106      	bne.n	5b6c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
    5b5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    5b60:	f361 02c6 	bfi	r2, r1, #3, #4
    5b64:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    5b68:	3302      	adds	r3, #2
    5b6a:	e756      	b.n	5a1a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    5b6c:	2102      	movs	r1, #2
    5b6e:	f361 02c6 	bfi	r2, r1, #3, #4
    5b72:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    5b76:	3301      	adds	r3, #1
    5b78:	e74f      	b.n	5a1a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    5b7a:	785a      	ldrb	r2, [r3, #1]
    5b7c:	2a6c      	cmp	r2, #108	; 0x6c
    5b7e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5b82:	d101      	bne.n	5b88 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
    5b84:	2104      	movs	r1, #4
    5b86:	e7eb      	b.n	5b60 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
    5b88:	2103      	movs	r1, #3
    5b8a:	e7f0      	b.n	5b6e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
    5b8c:	2105      	movs	r1, #5
    5b8e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5b92:	e7ec      	b.n	5b6e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
    5b94:	2107      	movs	r1, #7
    5b96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5b9a:	e7e8      	b.n	5b6e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
    5b9c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    5ba0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    5ba4:	f022 0202 	bic.w	r2, r2, #2
    5ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    5bac:	f042 0202 	orr.w	r2, r2, #2
    5bb0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    5bb4:	e7df      	b.n	5b76 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
    5bb6:	3a6e      	subs	r2, #110	; 0x6e
    5bb8:	b2d3      	uxtb	r3, r2
    5bba:	2201      	movs	r2, #1
    5bbc:	409a      	lsls	r2, r3
    5bbe:	f240 4382 	movw	r3, #1154	; 0x482
    5bc2:	421a      	tst	r2, r3
    5bc4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    5bc8:	d137      	bne.n	5c3a <z_cbvprintf_impl+0x362>
    5bca:	f012 0f24 	tst.w	r2, #36	; 0x24
    5bce:	d15f      	bne.n	5c90 <z_cbvprintf_impl+0x3b8>
    5bd0:	07d1      	lsls	r1, r2, #31
    5bd2:	d52b      	bpl.n	5c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    5bd4:	2103      	movs	r1, #3
    5bd6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5bda:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5bde:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    5be2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5be6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    5be8:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5bec:	4143      	adcs	r3, r0
    5bee:	e041      	b.n	5c74 <z_cbvprintf_impl+0x39c>
    5bf0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    5bf2:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    5bf6:	b2c9      	uxtb	r1, r1
    5bf8:	fa00 f101 	lsl.w	r1, r0, r1
    5bfc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5c00:	f47f af23 	bne.w	5a4a <z_cbvprintf_impl+0x172>
    5c04:	f640 0301 	movw	r3, #2049	; 0x801
    5c08:	4219      	tst	r1, r3
    5c0a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    5c0e:	d11a      	bne.n	5c46 <z_cbvprintf_impl+0x36e>
    5c10:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5c14:	d00a      	beq.n	5c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
    5c16:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    5c1a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c1e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5c22:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    5c24:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c28:	f47f af2f 	bne.w	5a8a <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
    5c2c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    5c30:	f043 0301 	orr.w	r3, r3, #1
    5c34:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    5c38:	e727      	b.n	5a8a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
    5c3a:	2102      	movs	r1, #2
    5c3c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    5c40:	f361 0202 	bfi	r2, r1, #0, #3
    5c44:	e7eb      	b.n	5c1e <z_cbvprintf_impl+0x346>
    5c46:	2002      	movs	r0, #2
    5c48:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c4c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    5c50:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5c54:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    5c56:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    5c5a:	bf02      	ittt	eq
    5c5c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    5c60:	f041 0101 	orreq.w	r1, r1, #1
    5c64:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    5c68:	2a63      	cmp	r2, #99	; 0x63
    5c6a:	f47f af0e 	bne.w	5a8a <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5c6e:	3b00      	subs	r3, #0
    5c70:	bf18      	it	ne
    5c72:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5c74:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    5c78:	f3c2 0140 	ubfx	r1, r2, #1, #1
    5c7c:	430b      	orrs	r3, r1
    5c7e:	f363 0241 	bfi	r2, r3, #1, #1
    5c82:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    5c86:	e706      	b.n	5a96 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
    5c88:	f013 0f38 	tst.w	r3, #56	; 0x38
    5c8c:	d1ce      	bne.n	5c2c <z_cbvprintf_impl+0x354>
    5c8e:	e6fc      	b.n	5a8a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
    5c90:	2103      	movs	r1, #3
    5c92:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    5c96:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    5c9a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    5c9e:	bf14      	ite	ne
    5ca0:	2301      	movne	r3, #1
    5ca2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    5ca4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    5ca8:	e7e4      	b.n	5c74 <z_cbvprintf_impl+0x39c>
			unsupported = true;
    5caa:	2301      	movs	r3, #1
    5cac:	e7e2      	b.n	5c74 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
    5cae:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    5cb2:	2a00      	cmp	r2, #0
		int width = -1;
    5cb4:	bfac      	ite	ge
    5cb6:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
    5cba:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
    5cbc:	e6fd      	b.n	5aba <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
    5cbe:	079f      	lsls	r7, r3, #30
    5cc0:	f57f af0a 	bpl.w	5ad8 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
    5cc4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    5cc6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5cc8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    5ccc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    5cd0:	f003 0207 	and.w	r2, r3, #7
    5cd4:	2a04      	cmp	r2, #4
    5cd6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    5cda:	d107      	bne.n	5cec <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
    5cdc:	0790      	lsls	r0, r2, #30
    5cde:	d405      	bmi.n	5cec <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
    5ce0:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    5ce4:	2900      	cmp	r1, #0
    5ce6:	bfac      	ite	ge
    5ce8:	2706      	movge	r7, #6
    5cea:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    5cec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    5cf0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5cf2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5cf6:	d133      	bne.n	5d60 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
    5cf8:	1ed3      	subs	r3, r2, #3
    5cfa:	2b04      	cmp	r3, #4
    5cfc:	d804      	bhi.n	5d08 <z_cbvprintf_impl+0x430>
    5cfe:	e8df f003 	tbb	[pc, r3]
    5d02:	4621      	.short	0x4621
    5d04:	2146      	.short	0x2146
    5d06:	21          	.byte	0x21
    5d07:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    5d08:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    5d0a:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
    5d0c:	ea4f 71e3 	mov.w	r1, r3, asr #31
    5d10:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    5d14:	d11c      	bne.n	5d50 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
    5d16:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    5d1a:	17d9      	asrs	r1, r3, #31
    5d1c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    5d20:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    5d22:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    5d26:	0799      	lsls	r1, r3, #30
    5d28:	9307      	str	r3, [sp, #28]
    5d2a:	d050      	beq.n	5dce <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
    5d2c:	4632      	mov	r2, r6
    5d2e:	4650      	mov	r0, sl
    5d30:	9b06      	ldr	r3, [sp, #24]
    5d32:	9903      	ldr	r1, [sp, #12]
    5d34:	f015 face 	bl	1b2d4 <outs>
    5d38:	2800      	cmp	r0, #0
    5d3a:	f2c0 835f 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    5d3e:	4405      	add	r5, r0
			continue;
    5d40:	9e06      	ldr	r6, [sp, #24]
    5d42:	e5d1      	b.n	58e8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5d44:	f854 3b04 	ldr.w	r3, [r4], #4
    5d48:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
    5d4a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    5d4e:	e7e8      	b.n	5d22 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
    5d50:	2a02      	cmp	r2, #2
    5d52:	d1e5      	bne.n	5d20 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
    5d54:	b219      	sxth	r1, r3
    5d56:	f343 33c0 	sbfx	r3, r3, #15, #1
    5d5a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    5d5e:	e7df      	b.n	5d20 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5d60:	2b02      	cmp	r3, #2
    5d62:	d124      	bne.n	5dae <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
    5d64:	1ed3      	subs	r3, r2, #3
    5d66:	2b04      	cmp	r3, #4
    5d68:	d804      	bhi.n	5d74 <z_cbvprintf_impl+0x49c>
    5d6a:	e8df f003 	tbb	[pc, r3]
    5d6e:	1018      	.short	0x1018
    5d70:	1810      	.short	0x1810
    5d72:	18          	.byte	0x18
    5d73:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    5d74:	2a01      	cmp	r2, #1
    5d76:	f04f 0100 	mov.w	r1, #0
				value->uint = va_arg(ap, unsigned int);
    5d7a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    5d7e:	d014      	beq.n	5daa <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
    5d80:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
    5d82:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    5d86:	d1cc      	bne.n	5d22 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
    5d88:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    5d8a:	9310      	str	r3, [sp, #64]	; 0x40
    5d8c:	e7c9      	b.n	5d22 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
    5d8e:	3407      	adds	r4, #7
    5d90:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    5d94:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    5d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    5d9c:	e7c1      	b.n	5d22 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
    5d9e:	f854 3b04 	ldr.w	r3, [r4], #4
    5da2:	9310      	str	r3, [sp, #64]	; 0x40
    5da4:	2300      	movs	r3, #0
    5da6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    5da8:	e7bb      	b.n	5d22 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
    5daa:	b2db      	uxtb	r3, r3
    5dac:	e7cd      	b.n	5d4a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
    5dae:	2b04      	cmp	r3, #4
    5db0:	d108      	bne.n	5dc4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    5db2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    5db4:	f024 0407 	bic.w	r4, r4, #7
    5db8:	e9d4 0100 	ldrd	r0, r1, [r4]
    5dbc:	3408      	adds	r4, #8
    5dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    5dc2:	e7ae      	b.n	5d22 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5dc4:	2b03      	cmp	r3, #3
    5dc6:	d1ac      	bne.n	5d22 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
    5dc8:	f854 3b04 	ldr.w	r3, [r4], #4
    5dcc:	e7dd      	b.n	5d8a <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
    5dce:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    5dd2:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    5dd6:	d8b3      	bhi.n	5d40 <z_cbvprintf_impl+0x468>
    5dd8:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    5ddc:	d849      	bhi.n	5e72 <z_cbvprintf_impl+0x59a>
    5dde:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    5de2:	f000 8091 	beq.w	5f08 <z_cbvprintf_impl+0x630>
    5de6:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    5dea:	d9a9      	bls.n	5d40 <z_cbvprintf_impl+0x468>
    5dec:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    5df0:	d003      	beq.n	5dfa <z_cbvprintf_impl+0x522>
    5df2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    5df6:	2a02      	cmp	r2, #2
    5df8:	d8a2      	bhi.n	5d40 <z_cbvprintf_impl+0x468>
	} u = {
    5dfa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    5dfe:	2a00      	cmp	r2, #0
    5e00:	f2c0 8136 	blt.w	6070 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
    5e04:	9b07      	ldr	r3, [sp, #28]
    5e06:	071e      	lsls	r6, r3, #28
    5e08:	f100 8135 	bmi.w	6076 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
    5e0c:	f3c3 1900 	ubfx	r9, r3, #4, #1
    5e10:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    5e14:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    5e18:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    5e1c:	2800      	cmp	r0, #0
    5e1e:	f040 812d 	bne.w	607c <z_cbvprintf_impl+0x7a4>
    5e22:	ea51 0602 	orrs.w	r6, r1, r2
    5e26:	bf14      	ite	ne
    5e28:	2601      	movne	r6, #1
    5e2a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    5e2c:	02d2      	lsls	r2, r2, #11
    5e2e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    5e32:	02c9      	lsls	r1, r1, #11
		c = 'f';
    5e34:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    5e38:	ea40 0e01 	orr.w	lr, r0, r1
    5e3c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    5e40:	bf08      	it	eq
    5e42:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    5e46:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    5e4a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    5e4e:	f000 819b 	beq.w	6188 <z_cbvprintf_impl+0x8b0>
		if (is_subnormal) {
    5e52:	2e00      	cmp	r6, #0
    5e54:	f040 8149 	bne.w	60ea <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
    5e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    5e5a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    5e5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5e62:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    5e64:	2000      	movs	r0, #0
    5e66:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    5e6a:	4606      	mov	r6, r0
		fract *= 5U;
    5e6c:	f04f 0c05 	mov.w	ip, #5
    5e70:	e155      	b.n	611e <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
    5e72:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
    5e76:	2920      	cmp	r1, #32
    5e78:	f63f af62 	bhi.w	5d40 <z_cbvprintf_impl+0x468>
    5e7c:	a001      	add	r0, pc, #4	; (adr r0, 5e84 <z_cbvprintf_impl+0x5ac>)
    5e7e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    5e82:	bf00      	nop
    5e84:	0000600f 	.word	0x0000600f
    5e88:	00005d41 	.word	0x00005d41
    5e8c:	00005d41 	.word	0x00005d41
    5e90:	00005d41 	.word	0x00005d41
    5e94:	00005d41 	.word	0x00005d41
    5e98:	00005d41 	.word	0x00005d41
    5e9c:	00005d41 	.word	0x00005d41
    5ea0:	00005d41 	.word	0x00005d41
    5ea4:	00005d41 	.word	0x00005d41
    5ea8:	00005dfb 	.word	0x00005dfb
    5eac:	00005d41 	.word	0x00005d41
    5eb0:	00005f93 	.word	0x00005f93
    5eb4:	00005fa7 	.word	0x00005fa7
    5eb8:	00005dfb 	.word	0x00005dfb
    5ebc:	00005dfb 	.word	0x00005dfb
    5ec0:	00005dfb 	.word	0x00005dfb
    5ec4:	00005d41 	.word	0x00005d41
    5ec8:	00005fa7 	.word	0x00005fa7
    5ecc:	00005d41 	.word	0x00005d41
    5ed0:	00005d41 	.word	0x00005d41
    5ed4:	00005d41 	.word	0x00005d41
    5ed8:	00005d41 	.word	0x00005d41
    5edc:	00006049 	.word	0x00006049
    5ee0:	0000600f 	.word	0x0000600f
    5ee4:	00006015 	.word	0x00006015
    5ee8:	00005d41 	.word	0x00005d41
    5eec:	00005d41 	.word	0x00005d41
    5ef0:	00005f0f 	.word	0x00005f0f
    5ef4:	00005d41 	.word	0x00005d41
    5ef8:	0000600f 	.word	0x0000600f
    5efc:	00005d41 	.word	0x00005d41
    5f00:	00005d41 	.word	0x00005d41
    5f04:	0000600f 	.word	0x0000600f
			OUTC('%');
    5f08:	4658      	mov	r0, fp
    5f0a:	9903      	ldr	r1, [sp, #12]
    5f0c:	e4f6      	b.n	58fc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    5f0e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    5f10:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    5f12:	db3a      	blt.n	5f8a <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
    5f14:	4639      	mov	r1, r7
    5f16:	4630      	mov	r0, r6
    5f18:	f019 fab0 	bl	1f47c <strnlen>
			bpe = bps + len;
    5f1c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    5f1e:	2e00      	cmp	r6, #0
    5f20:	f43f af0e 	beq.w	5d40 <z_cbvprintf_impl+0x468>
		char sign = 0;
    5f24:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    5f28:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    5f2c:	f013 0210 	ands.w	r2, r3, #16
    5f30:	9205      	str	r2, [sp, #20]
    5f32:	f000 8258 	beq.w	63e6 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
    5f36:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    5f38:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    5f3c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    5f40:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    5f42:	bf18      	it	ne
    5f44:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    5f46:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    5f48:	bf18      	it	ne
    5f4a:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    5f4c:	9b04      	ldr	r3, [sp, #16]
		nj_len += conv->pad0_value;
    5f4e:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
    5f52:	2b00      	cmp	r3, #0
    5f54:	f340 8262 	ble.w	641c <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
    5f58:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    5f5c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
    5f5e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
    5f60:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    5f62:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    5f66:	f100 8259 	bmi.w	641c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
    5f6a:	0651      	lsls	r1, r2, #25
    5f6c:	f140 8249 	bpl.w	6402 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
    5f70:	f1b9 0f00 	cmp.w	r9, #0
    5f74:	d007      	beq.n	5f86 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
    5f76:	4648      	mov	r0, r9
    5f78:	9903      	ldr	r1, [sp, #12]
    5f7a:	47d0      	blx	sl
    5f7c:	2800      	cmp	r0, #0
    5f7e:	f2c0 823d 	blt.w	63fc <z_cbvprintf_impl+0xb24>
						sign = 0;
    5f82:	46d9      	mov	r9, fp
						OUTC(sign);
    5f84:	3501      	adds	r5, #1
					pad = '0';
    5f86:	2230      	movs	r2, #48	; 0x30
    5f88:	e23c      	b.n	6404 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
    5f8a:	4630      	mov	r0, r6
    5f8c:	f7ff fc48 	bl	5820 <strlen>
    5f90:	e7c4      	b.n	5f1c <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    5f94:	f04f 0900 	mov.w	r9, #0
		size_t nj_len = (bpe - bps);
    5f98:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5f9a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
    5f9e:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    5fa2:	ae17      	add	r6, sp, #92	; 0x5c
    5fa4:	e7c0      	b.n	5f28 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
    5fa6:	9b07      	ldr	r3, [sp, #28]
    5fa8:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
    5faa:	bf54      	ite	pl
    5fac:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
    5fb0:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
    5fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    5fb8:	bf58      	it	pl
    5fba:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	da06      	bge.n	5fd0 <z_cbvprintf_impl+0x6f8>
				sign = '-';
    5fc2:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    5fc6:	4252      	negs	r2, r2
    5fc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5fcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
    5fd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    5fd4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    5fd8:	9300      	str	r3, [sp, #0]
    5fda:	aa12      	add	r2, sp, #72	; 0x48
    5fdc:	ab17      	add	r3, sp, #92	; 0x5c
    5fde:	f001 fd77 	bl	7ad0 <encode_uint>
    5fe2:	4606      	mov	r6, r0
			if (precision >= 0) {
    5fe4:	2f00      	cmp	r7, #0
    5fe6:	db0c      	blt.n	6002 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
    5fe8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    5fec:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    5ff0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    5ff2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    5ff6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    5ff8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    5ffc:	d901      	bls.n	6002 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
    5ffe:	1afb      	subs	r3, r7, r3
    6000:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    6002:	2e00      	cmp	r6, #0
    6004:	f43f ae9c 	beq.w	5d40 <z_cbvprintf_impl+0x468>
    6008:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    600c:	e05b      	b.n	60c6 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
    600e:	f04f 0900 	mov.w	r9, #0
    6012:	e7dd      	b.n	5fd0 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
    6014:	9810      	ldr	r0, [sp, #64]	; 0x40
    6016:	2800      	cmp	r0, #0
    6018:	f000 81e0 	beq.w	63dc <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    601c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    6020:	9300      	str	r3, [sp, #0]
    6022:	2100      	movs	r1, #0
    6024:	ab17      	add	r3, sp, #92	; 0x5c
    6026:	aa12      	add	r2, sp, #72	; 0x48
    6028:	f001 fd52 	bl	7ad0 <encode_uint>
				conv->altform_0c = true;
    602c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    6030:	4606      	mov	r6, r0
				conv->altform_0c = true;
    6032:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    6036:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    603a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    603e:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
    6042:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
    6046:	e7cd      	b.n	5fe4 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
    6048:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    604a:	2a07      	cmp	r2, #7
    604c:	f63f ae78 	bhi.w	5d40 <z_cbvprintf_impl+0x468>
    6050:	e8df f002 	tbb	[pc, r2]
    6054:	0c06040c 	.word	0x0c06040c
    6058:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    605c:	701d      	strb	r5, [r3, #0]
		break;
    605e:	e66f      	b.n	5d40 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
    6060:	801d      	strh	r5, [r3, #0]
		break;
    6062:	e66d      	b.n	5d40 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
    6064:	17ea      	asrs	r2, r5, #31
    6066:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    606a:	e669      	b.n	5d40 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    606c:	601d      	str	r5, [r3, #0]
		break;
    606e:	e667      	b.n	5d40 <z_cbvprintf_impl+0x468>
		*sign = '-';
    6070:	f04f 092d 	mov.w	r9, #45	; 0x2d
    6074:	e6ce      	b.n	5e14 <z_cbvprintf_impl+0x53c>
		*sign = '+';
    6076:	f04f 092b 	mov.w	r9, #43	; 0x2b
    607a:	e6cb      	b.n	5e14 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    607c:	f240 76ff 	movw	r6, #2047	; 0x7ff
    6080:	42b0      	cmp	r0, r6
    6082:	d12f      	bne.n	60e4 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
    6084:	48a0      	ldr	r0, [pc, #640]	; (6308 <z_cbvprintf_impl+0xa30>)
    6086:	f10b 0301 	add.w	r3, fp, #1
    608a:	b2db      	uxtb	r3, r3
    608c:	5cc3      	ldrb	r3, [r0, r3]
		if (fract == 0) {
    608e:	430a      	orrs	r2, r1
    6090:	f003 0303 	and.w	r3, r3, #3
    6094:	d11e      	bne.n	60d4 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
    6096:	2b01      	cmp	r3, #1
    6098:	bf0b      	itete	eq
    609a:	2349      	moveq	r3, #73	; 0x49
    609c:	2369      	movne	r3, #105	; 0x69
    609e:	214e      	moveq	r1, #78	; 0x4e
    60a0:	216e      	movne	r1, #110	; 0x6e
    60a2:	bf0c      	ite	eq
    60a4:	2246      	moveq	r2, #70	; 0x46
    60a6:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    60a8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    60ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    60b0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    60b4:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    60b8:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    60bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    60c0:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    60c4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    60c6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    60c8:	f1b9 0f00 	cmp.w	r9, #0
    60cc:	f43f af2c 	beq.w	5f28 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
    60d0:	3001      	adds	r0, #1
    60d2:	e729      	b.n	5f28 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
    60d4:	2b01      	cmp	r3, #1
    60d6:	bf15      	itete	ne
    60d8:	236e      	movne	r3, #110	; 0x6e
    60da:	234e      	moveq	r3, #78	; 0x4e
    60dc:	2161      	movne	r1, #97	; 0x61
    60de:	2141      	moveq	r1, #65	; 0x41
    60e0:	461a      	mov	r2, r3
    60e2:	e7e1      	b.n	60a8 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
    60e4:	2600      	movs	r6, #0
    60e6:	e6a1      	b.n	5e2c <z_cbvprintf_impl+0x554>
				expo--;
    60e8:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    60ea:	1849      	adds	r1, r1, r1
    60ec:	4152      	adcs	r2, r2
    60ee:	2a00      	cmp	r2, #0
    60f0:	dafa      	bge.n	60e8 <z_cbvprintf_impl+0x810>
    60f2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    60f6:	e6af      	b.n	5e58 <z_cbvprintf_impl+0x580>
			fract >>= 1;
    60f8:	0849      	lsrs	r1, r1, #1
    60fa:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    60fe:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6100:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    6104:	4640      	mov	r0, r8
			expo++;
    6106:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    610a:	d2f5      	bcs.n	60f8 <z_cbvprintf_impl+0x820>
		expo++;
    610c:	f100 0802 	add.w	r8, r0, #2
		decexp--;
    6110:	2001      	movs	r0, #1
		fract *= 5U;
    6112:	fb0c fe02 	mul.w	lr, ip, r2
    6116:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
    611a:	3e01      	subs	r6, #1
		fract *= 5U;
    611c:	4472      	add	r2, lr
	while (expo < -2) {
    611e:	f118 0f02 	cmn.w	r8, #2
    6122:	dbe9      	blt.n	60f8 <z_cbvprintf_impl+0x820>
    6124:	b108      	cbz	r0, 612a <z_cbvprintf_impl+0x852>
    6126:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
		fract += 2;
    612a:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    612e:	f1b8 0f00 	cmp.w	r8, #0
    6132:	dc2c      	bgt.n	618e <z_cbvprintf_impl+0x8b6>
	fract >>= (4 - expo);
    6134:	f1c8 0004 	rsb	r0, r8, #4
    6138:	f1a0 0c20 	sub.w	ip, r0, #32
    613c:	f108 081c 	add.w	r8, r8, #28
    6140:	40c2      	lsrs	r2, r0
    6142:	fa01 f808 	lsl.w	r8, r1, r8
    6146:	fa21 fc0c 	lsr.w	ip, r1, ip
    614a:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
    614c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    6150:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
    6154:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    6156:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
    615a:	d138      	bne.n	61ce <z_cbvprintf_impl+0x8f6>
		if (decexp < (-4 + 1) || decexp > precision) {
    615c:	1cf0      	adds	r0, r6, #3
    615e:	db01      	blt.n	6164 <z_cbvprintf_impl+0x88c>
    6160:	42b7      	cmp	r7, r6
    6162:	da2a      	bge.n	61ba <z_cbvprintf_impl+0x8e2>
			c += 'e' - 'g';  /* e or E */
    6164:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    6168:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    616a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    616e:	dd7b      	ble.n	6268 <z_cbvprintf_impl+0x990>
		if (!conv->flag_hash && (precision > 0)) {
    6170:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
    6174:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    6176:	0683      	lsls	r3, r0, #26
    6178:	d476      	bmi.n	6268 <z_cbvprintf_impl+0x990>
    617a:	1e3b      	subs	r3, r7, #0
    617c:	bf18      	it	ne
    617e:	2301      	movne	r3, #1
	bool prune_zero = false;
    6180:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    6182:	f107 0801 	add.w	r8, r7, #1
    6186:	e02c      	b.n	61e2 <z_cbvprintf_impl+0x90a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    6188:	f04f 0800 	mov.w	r8, #0
    618c:	e66a      	b.n	5e64 <z_cbvprintf_impl+0x58c>
		fract += 2;
    618e:	3202      	adds	r2, #2
    6190:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    6194:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
    6196:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    619a:	3601      	adds	r6, #1
		fract += 2;
    619c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    61a0:	f015 f869 	bl	1b276 <_ldiv5>
		decexp++;
    61a4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
    61a8:	1892      	adds	r2, r2, r2
    61aa:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    61ac:	2900      	cmp	r1, #0
			expo--;
    61ae:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    61b2:	daf9      	bge.n	61a8 <z_cbvprintf_impl+0x8d0>
    61b4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    61b8:	e7b7      	b.n	612a <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
    61ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
    61be:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    61c0:	0698      	lsls	r0, r3, #26
    61c2:	d44f      	bmi.n	6264 <z_cbvprintf_impl+0x98c>
    61c4:	1e3b      	subs	r3, r7, #0
    61c6:	bf18      	it	ne
    61c8:	2301      	movne	r3, #1
	bool prune_zero = false;
    61ca:	9305      	str	r3, [sp, #20]
    61cc:	e004      	b.n	61d8 <z_cbvprintf_impl+0x900>
    61ce:	2300      	movs	r3, #0
	if (c == 'f') {
    61d0:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    61d4:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    61d6:	d1d4      	bne.n	6182 <z_cbvprintf_impl+0x8aa>
		if (decimals < 0) {
    61d8:	eb17 0806 	adds.w	r8, r7, r6
    61dc:	f04f 0b66 	mov.w	fp, #102	; 0x66
    61e0:	d444      	bmi.n	626c <z_cbvprintf_impl+0x994>
	if (decimals > 16) {
    61e2:	f1b8 0f10 	cmp.w	r8, #16
    61e6:	bfa8      	it	ge
    61e8:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
    61ec:	ed9f 7b44 	vldr	d7, [pc, #272]	; 6300 <z_cbvprintf_impl+0xa28>
    61f0:	2010      	movs	r0, #16
    61f2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    61f6:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
    61f8:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    61fc:	f1b8 0f00 	cmp.w	r8, #0
    6200:	d137      	bne.n	6272 <z_cbvprintf_impl+0x99a>
	fract += round;
    6202:	1812      	adds	r2, r2, r0
    6204:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    6208:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    620c:	d241      	bcs.n	6292 <z_cbvprintf_impl+0x9ba>
	fract += round;
    620e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    6212:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    6214:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    6218:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    621c:	f040 80bd 	bne.w	639a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
    6220:	2e00      	cmp	r6, #0
    6222:	dc41      	bgt.n	62a8 <z_cbvprintf_impl+0x9d0>
			*buf++ = '0';
    6224:	2130      	movs	r1, #48	; 0x30
    6226:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    622a:	2a00      	cmp	r2, #0
    622c:	d16e      	bne.n	630c <z_cbvprintf_impl+0xa34>
    622e:	2f00      	cmp	r7, #0
    6230:	f340 81b5 	ble.w	659e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    6234:	222e      	movs	r2, #46	; 0x2e
    6236:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    623a:	b186      	cbz	r6, 625e <z_cbvprintf_impl+0x986>
			conv->pad0_value = -decexp;
    623c:	4272      	negs	r2, r6
    623e:	42ba      	cmp	r2, r7
    6240:	bfa8      	it	ge
    6242:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    6244:	2a00      	cmp	r2, #0
    6246:	9213      	str	r2, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
    6248:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    624c:	bfd4      	ite	le
    624e:	2200      	movle	r2, #0
    6250:	2201      	movgt	r2, #1
    6252:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    6256:	f362 1145 	bfi	r1, r2, #5, #1
    625a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    625e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    6262:	e039      	b.n	62d8 <z_cbvprintf_impl+0xa00>
	bool prune_zero = false;
    6264:	2300      	movs	r3, #0
    6266:	e7b0      	b.n	61ca <z_cbvprintf_impl+0x8f2>
    6268:	2300      	movs	r3, #0
    626a:	e789      	b.n	6180 <z_cbvprintf_impl+0x8a8>
			decimals = 0;
    626c:	f04f 0800 	mov.w	r8, #0
    6270:	e7bc      	b.n	61ec <z_cbvprintf_impl+0x914>
	*v >>= 1;
    6272:	0840      	lsrs	r0, r0, #1
    6274:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    6278:	085b      	lsrs	r3, r3, #1
    627a:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    627e:	a80e      	add	r0, sp, #56	; 0x38
    6280:	e9cd 2108 	strd	r2, r1, [sp, #32]
    6284:	f108 38ff 	add.w	r8, r8, #4294967295
    6288:	f014 fff5 	bl	1b276 <_ldiv5>
    628c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
    6290:	e7b2      	b.n	61f8 <z_cbvprintf_impl+0x920>
	*v >>= 1;
    6292:	0852      	lsrs	r2, r2, #1
    6294:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    6298:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    629a:	0849      	lsrs	r1, r1, #1
    629c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    62a0:	3601      	adds	r6, #1
	_ldiv5(v);
    62a2:	f014 ffe8 	bl	1b276 <_ldiv5>
		decexp++;
    62a6:	e7b4      	b.n	6212 <z_cbvprintf_impl+0x93a>
	char *buf = bps;
    62a8:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    62ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    62ae:	2900      	cmp	r1, #0
    62b0:	dd09      	ble.n	62c6 <z_cbvprintf_impl+0x9ee>
				*buf++ = _get_digit(&fract, &digit_count);
    62b2:	a90b      	add	r1, sp, #44	; 0x2c
    62b4:	a80c      	add	r0, sp, #48	; 0x30
    62b6:	9207      	str	r2, [sp, #28]
    62b8:	f014 fff5 	bl	1b2a6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    62bc:	3e01      	subs	r6, #1
    62be:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
    62c0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    62c4:	d1f2      	bne.n	62ac <z_cbvprintf_impl+0x9d4>
			conv->pad0_value = decexp;
    62c6:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    62c8:	b99a      	cbnz	r2, 62f2 <z_cbvprintf_impl+0xa1a>
    62ca:	2f00      	cmp	r7, #0
    62cc:	f340 8165 	ble.w	659a <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
    62d0:	212e      	movs	r1, #46	; 0x2e
    62d2:	f808 1b01 	strb.w	r1, [r8], #1
    62d6:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    62d8:	2f00      	cmp	r7, #0
    62da:	dd20      	ble.n	631e <z_cbvprintf_impl+0xa46>
    62dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    62de:	2a00      	cmp	r2, #0
    62e0:	dd1d      	ble.n	631e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
    62e2:	a90b      	add	r1, sp, #44	; 0x2c
    62e4:	a80c      	add	r0, sp, #48	; 0x30
    62e6:	f014 ffde 	bl	1b2a6 <_get_digit>
		precision--;
    62ea:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    62ec:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    62f0:	e7f2      	b.n	62d8 <z_cbvprintf_impl+0xa00>
			*buf++ = '.';
    62f2:	222e      	movs	r2, #46	; 0x2e
    62f4:	f808 2b01 	strb.w	r2, [r8], #1
    62f8:	e7ed      	b.n	62d6 <z_cbvprintf_impl+0x9fe>
    62fa:	bf00      	nop
    62fc:	f3af 8000 	nop.w
    6300:	00000000 	.word	0x00000000
    6304:	08000000 	.word	0x08000000
    6308:	00025476 	.word	0x00025476
    630c:	222e      	movs	r2, #46	; 0x2e
    630e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    6312:	2e00      	cmp	r6, #0
    6314:	d0a3      	beq.n	625e <z_cbvprintf_impl+0x986>
    6316:	2f00      	cmp	r7, #0
    6318:	dc90      	bgt.n	623c <z_cbvprintf_impl+0x964>
			*buf++ = '.';
    631a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    631e:	9b05      	ldr	r3, [sp, #20]
    6320:	2b00      	cmp	r3, #0
    6322:	d14e      	bne.n	63c2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
    6324:	9714      	str	r7, [sp, #80]	; 0x50
    6326:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    6328:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    632c:	2a45      	cmp	r2, #69	; 0x45
    632e:	d123      	bne.n	6378 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
    6330:	2e00      	cmp	r6, #0
			decexp = -decexp;
    6332:	bfba      	itte	lt
    6334:	4276      	neglt	r6, r6
			*buf++ = '-';
    6336:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    6338:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    633a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    633c:	bfc8      	it	gt
    633e:	2164      	movgt	r1, #100	; 0x64
    6340:	707b      	strb	r3, [r7, #1]
    6342:	bfc4      	itt	gt
    6344:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
    6348:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    634c:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    6350:	bfc8      	it	gt
    6352:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    6356:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
    635a:	bfd2      	itee	le
    635c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    635e:	1cfa      	addgt	r2, r7, #3
    6360:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    6362:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    6366:	4617      	mov	r7, r2
    6368:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    636c:	fb01 6313 	mls	r3, r1, r3, r6
    6370:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    6372:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    6376:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    6378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    637a:	2b00      	cmp	r3, #0
    637c:	dc2c      	bgt.n	63d8 <z_cbvprintf_impl+0xb00>
    637e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6380:	2b00      	cmp	r3, #0
    6382:	bfd4      	ite	le
    6384:	2300      	movle	r3, #0
    6386:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    6388:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    638c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    6390:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    6392:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    6396:	703b      	strb	r3, [r7, #0]
	return bps;
    6398:	e694      	b.n	60c4 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
    639a:	a90b      	add	r1, sp, #44	; 0x2c
    639c:	a80c      	add	r0, sp, #48	; 0x30
    639e:	9207      	str	r2, [sp, #28]
    63a0:	f014 ff81 	bl	1b2a6 <_get_digit>
		if (*buf++ != '0') {
    63a4:	9a07      	ldr	r2, [sp, #28]
    63a6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    63a8:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
    63ac:	bf18      	it	ne
    63ae:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    63b2:	b912      	cbnz	r2, 63ba <z_cbvprintf_impl+0xae2>
    63b4:	2f00      	cmp	r7, #0
    63b6:	f340 80f2 	ble.w	659e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    63ba:	222e      	movs	r2, #46	; 0x2e
    63bc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    63c0:	e74d      	b.n	625e <z_cbvprintf_impl+0x986>
		while (*--buf == '0') {
    63c2:	4647      	mov	r7, r8
    63c4:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    63c8:	f108 38ff 	add.w	r8, r8, #4294967295
    63cc:	2a30      	cmp	r2, #48	; 0x30
    63ce:	d0f8      	beq.n	63c2 <z_cbvprintf_impl+0xaea>
    63d0:	2a2e      	cmp	r2, #46	; 0x2e
    63d2:	bf08      	it	eq
    63d4:	4647      	moveq	r7, r8
    63d6:	e7a7      	b.n	6328 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
    63d8:	2301      	movs	r3, #1
    63da:	e7d5      	b.n	6388 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
    63dc:	4f71      	ldr	r7, [pc, #452]	; (65a4 <z_cbvprintf_impl+0xccc>)
		char sign = 0;
    63de:	4681      	mov	r9, r0
			bps = "(nil)";
    63e0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    63e2:	2005      	movs	r0, #5
    63e4:	e5a0      	b.n	5f28 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
    63e6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    63e8:	bf48      	it	mi
    63ea:	3001      	addmi	r0, #1
    63ec:	e5a4      	b.n	5f38 <z_cbvprintf_impl+0x660>
					OUTC(pad);
    63ee:	4610      	mov	r0, r2
    63f0:	9209      	str	r2, [sp, #36]	; 0x24
    63f2:	9903      	ldr	r1, [sp, #12]
    63f4:	47d0      	blx	sl
    63f6:	2800      	cmp	r0, #0
    63f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    63fa:	da05      	bge.n	6408 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
    63fc:	b01f      	add	sp, #124	; 0x7c
    63fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    6402:	2220      	movs	r2, #32
					pad = '0';
    6404:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    6408:	4659      	mov	r1, fp
    640a:	2900      	cmp	r1, #0
    640c:	f10b 3bff 	add.w	fp, fp, #4294967295
    6410:	dced      	bgt.n	63ee <z_cbvprintf_impl+0xb16>
    6412:	9b04      	ldr	r3, [sp, #16]
    6414:	f8cd b010 	str.w	fp, [sp, #16]
    6418:	442b      	add	r3, r5
    641a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    641c:	f1b9 0f00 	cmp.w	r9, #0
    6420:	d005      	beq.n	642e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
    6422:	4648      	mov	r0, r9
    6424:	9903      	ldr	r1, [sp, #12]
    6426:	47d0      	blx	sl
    6428:	2800      	cmp	r0, #0
    642a:	dbe7      	blt.n	63fc <z_cbvprintf_impl+0xb24>
    642c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    642e:	9b08      	ldr	r3, [sp, #32]
    6430:	2b00      	cmp	r3, #0
    6432:	d077      	beq.n	6524 <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
    6434:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    6438:	2b00      	cmp	r3, #0
    643a:	db28      	blt.n	648e <z_cbvprintf_impl+0xbb6>
    643c:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
    643e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 65a8 <z_cbvprintf_impl+0xcd0>
    6442:	7818      	ldrb	r0, [r3, #0]
    6444:	469b      	mov	fp, r3
    6446:	f819 2000 	ldrb.w	r2, [r9, r0]
    644a:	3301      	adds	r3, #1
    644c:	0752      	lsls	r2, r2, #29
    644e:	d43f      	bmi.n	64d0 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
    6450:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    6454:	1bae      	subs	r6, r5, r6
    6456:	0698      	lsls	r0, r3, #26
    6458:	445e      	add	r6, fp
    645a:	d407      	bmi.n	646c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
    645c:	4642      	mov	r2, r8
    645e:	2a00      	cmp	r2, #0
    6460:	f108 38ff 	add.w	r8, r8, #4294967295
    6464:	dc3b      	bgt.n	64de <z_cbvprintf_impl+0xc06>
    6466:	9b07      	ldr	r3, [sp, #28]
    6468:	4433      	add	r3, r6
    646a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    646c:	f89b 0000 	ldrb.w	r0, [fp]
    6470:	282e      	cmp	r0, #46	; 0x2e
    6472:	d10a      	bne.n	648a <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
    6474:	9903      	ldr	r1, [sp, #12]
    6476:	47d0      	blx	sl
						OUTC('0');
    6478:	2800      	cmp	r0, #0
    647a:	dbbf      	blt.n	63fc <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
    647c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    6480:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    6484:	dc31      	bgt.n	64ea <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
    6486:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    648a:	465d      	mov	r5, fp
    648c:	e038      	b.n	6500 <z_cbvprintf_impl+0xc28>
    648e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    6490:	f899 0000 	ldrb.w	r0, [r9]
    6494:	46c8      	mov	r8, r9
    6496:	2870      	cmp	r0, #112	; 0x70
    6498:	f109 0901 	add.w	r9, r9, #1
    649c:	d113      	bne.n	64c6 <z_cbvprintf_impl+0xbee>
    649e:	1bae      	subs	r6, r5, r6
    64a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    64a2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    64a4:	4435      	add	r5, r6
    64a6:	1bab      	subs	r3, r5, r6
    64a8:	2b00      	cmp	r3, #0
    64aa:	dc33      	bgt.n	6514 <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
    64ac:	463b      	mov	r3, r7
    64ae:	4642      	mov	r2, r8
    64b0:	4650      	mov	r0, sl
    64b2:	9903      	ldr	r1, [sp, #12]
    64b4:	f014 ff0e 	bl	1b2d4 <outs>
    64b8:	2800      	cmp	r0, #0
    64ba:	db9f      	blt.n	63fc <z_cbvprintf_impl+0xb24>
    64bc:	4430      	add	r0, r6
    64be:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    64c0:	4605      	mov	r5, r0
    64c2:	4406      	add	r6, r0
    64c4:	e064      	b.n	6590 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
    64c6:	9903      	ldr	r1, [sp, #12]
    64c8:	47d0      	blx	sl
    64ca:	2800      	cmp	r0, #0
    64cc:	dae0      	bge.n	6490 <z_cbvprintf_impl+0xbb8>
    64ce:	e795      	b.n	63fc <z_cbvprintf_impl+0xb24>
    64d0:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    64d2:	9903      	ldr	r1, [sp, #12]
    64d4:	47d0      	blx	sl
    64d6:	2800      	cmp	r0, #0
    64d8:	9b05      	ldr	r3, [sp, #20]
    64da:	dab2      	bge.n	6442 <z_cbvprintf_impl+0xb6a>
    64dc:	e78e      	b.n	63fc <z_cbvprintf_impl+0xb24>
						OUTC('0');
    64de:	2030      	movs	r0, #48	; 0x30
    64e0:	9903      	ldr	r1, [sp, #12]
    64e2:	47d0      	blx	sl
    64e4:	2800      	cmp	r0, #0
    64e6:	dab9      	bge.n	645c <z_cbvprintf_impl+0xb84>
    64e8:	e788      	b.n	63fc <z_cbvprintf_impl+0xb24>
						OUTC('0');
    64ea:	2030      	movs	r0, #48	; 0x30
    64ec:	9903      	ldr	r1, [sp, #12]
    64ee:	47d0      	blx	sl
    64f0:	f108 38ff 	add.w	r8, r8, #4294967295
    64f4:	e7c0      	b.n	6478 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
    64f6:	9903      	ldr	r1, [sp, #12]
    64f8:	47d0      	blx	sl
    64fa:	2800      	cmp	r0, #0
    64fc:	f6ff af7e 	blt.w	63fc <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
    6500:	7828      	ldrb	r0, [r5, #0]
    6502:	46a8      	mov	r8, r5
    6504:	f819 3000 	ldrb.w	r3, [r9, r0]
    6508:	3501      	adds	r5, #1
    650a:	0759      	lsls	r1, r3, #29
    650c:	d4f3      	bmi.n	64f6 <z_cbvprintf_impl+0xc1e>
    650e:	eba6 060b 	sub.w	r6, r6, fp
    6512:	e7c5      	b.n	64a0 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
    6514:	2030      	movs	r0, #48	; 0x30
    6516:	9903      	ldr	r1, [sp, #12]
    6518:	47d0      	blx	sl
    651a:	2800      	cmp	r0, #0
    651c:	f6ff af6e 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    6520:	3601      	adds	r6, #1
    6522:	e7c0      	b.n	64a6 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
    6524:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    6528:	06da      	lsls	r2, r3, #27
    652a:	d401      	bmi.n	6530 <z_cbvprintf_impl+0xc58>
    652c:	071b      	lsls	r3, r3, #28
    652e:	d506      	bpl.n	653e <z_cbvprintf_impl+0xc66>
				OUTC('0');
    6530:	2030      	movs	r0, #48	; 0x30
    6532:	9903      	ldr	r1, [sp, #12]
    6534:	47d0      	blx	sl
    6536:	2800      	cmp	r0, #0
    6538:	f6ff af60 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    653c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    653e:	9b05      	ldr	r3, [sp, #20]
    6540:	b13b      	cbz	r3, 6552 <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
    6542:	9903      	ldr	r1, [sp, #12]
    6544:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    6548:	47d0      	blx	sl
    654a:	2800      	cmp	r0, #0
    654c:	f6ff af56 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    6550:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    6552:	44a8      	add	r8, r5
    6554:	e006      	b.n	6564 <z_cbvprintf_impl+0xc8c>
				OUTC('0');
    6556:	2030      	movs	r0, #48	; 0x30
    6558:	9903      	ldr	r1, [sp, #12]
    655a:	47d0      	blx	sl
    655c:	2800      	cmp	r0, #0
    655e:	f6ff af4d 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    6562:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    6564:	eba8 0305 	sub.w	r3, r8, r5
    6568:	2b00      	cmp	r3, #0
    656a:	dcf4      	bgt.n	6556 <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
    656c:	463b      	mov	r3, r7
    656e:	4632      	mov	r2, r6
    6570:	4650      	mov	r0, sl
    6572:	9903      	ldr	r1, [sp, #12]
    6574:	f014 feae 	bl	1b2d4 <outs>
    6578:	2800      	cmp	r0, #0
    657a:	f6ff af3f 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    657e:	4428      	add	r0, r5
    6580:	e79d      	b.n	64be <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
    6582:	2020      	movs	r0, #32
    6584:	9903      	ldr	r1, [sp, #12]
    6586:	47d0      	blx	sl
    6588:	2800      	cmp	r0, #0
    658a:	f6ff af37 	blt.w	63fc <z_cbvprintf_impl+0xb24>
    658e:	3501      	adds	r5, #1
		while (width > 0) {
    6590:	1b73      	subs	r3, r6, r5
    6592:	2b00      	cmp	r3, #0
    6594:	dcf5      	bgt.n	6582 <z_cbvprintf_impl+0xcaa>
    6596:	f7ff bbd3 	b.w	5d40 <z_cbvprintf_impl+0x468>
			decexp = 0;
    659a:	4616      	mov	r6, r2
    659c:	e6bf      	b.n	631e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
    659e:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    65a2:	e6bc      	b.n	631e <z_cbvprintf_impl+0xa46>
    65a4:	00022287 	.word	0x00022287
    65a8:	00025477 	.word	0x00025477
    65ac:	00000000 	.word	0x00000000

000065b0 <__ieee754_atan2>:
    65b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65b4:	ec57 6b11 	vmov	r6, r7, d1
    65b8:	4273      	negs	r3, r6
    65ba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
    65be:	f8df 8178 	ldr.w	r8, [pc, #376]	; 6738 <__ieee754_atan2+0x188>
    65c2:	4635      	mov	r5, r6
    65c4:	4333      	orrs	r3, r6
    65c6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
    65ca:	4543      	cmp	r3, r8
    65cc:	ec51 0b10 	vmov	r0, r1, d0
    65d0:	d809      	bhi.n	65e6 <__ieee754_atan2+0x36>
    65d2:	4244      	negs	r4, r0
    65d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    65d8:	468e      	mov	lr, r1
    65da:	4681      	mov	r9, r0
    65dc:	4304      	orrs	r4, r0
    65de:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
    65e2:	4544      	cmp	r4, r8
    65e4:	d907      	bls.n	65f6 <__ieee754_atan2+0x46>
    65e6:	4632      	mov	r2, r6
    65e8:	463b      	mov	r3, r7
    65ea:	f7fe f87d 	bl	46e8 <__adddf3>
    65ee:	ec41 0b10 	vmov	d0, r0, r1
    65f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    65f6:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
    65fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    65fe:	4334      	orrs	r4, r6
    6600:	d103      	bne.n	660a <__ieee754_atan2+0x5a>
    6602:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6606:	f000 b89b 	b.w	6740 <atan>
    660a:	17bc      	asrs	r4, r7, #30
    660c:	ea53 0909 	orrs.w	r9, r3, r9
    6610:	f004 0402 	and.w	r4, r4, #2
    6614:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
    6618:	d107      	bne.n	662a <__ieee754_atan2+0x7a>
    661a:	2c02      	cmp	r4, #2
    661c:	d05f      	beq.n	66de <__ieee754_atan2+0x12e>
    661e:	2c03      	cmp	r4, #3
    6620:	d1e5      	bne.n	65ee <__ieee754_atan2+0x3e>
    6622:	a141      	add	r1, pc, #260	; (adr r1, 6728 <__ieee754_atan2+0x178>)
    6624:	e9d1 0100 	ldrd	r0, r1, [r1]
    6628:	e7e1      	b.n	65ee <__ieee754_atan2+0x3e>
    662a:	4315      	orrs	r5, r2
    662c:	d106      	bne.n	663c <__ieee754_atan2+0x8c>
    662e:	f1be 0f00 	cmp.w	lr, #0
    6632:	da5f      	bge.n	66f4 <__ieee754_atan2+0x144>
    6634:	a13e      	add	r1, pc, #248	; (adr r1, 6730 <__ieee754_atan2+0x180>)
    6636:	e9d1 0100 	ldrd	r0, r1, [r1]
    663a:	e7d8      	b.n	65ee <__ieee754_atan2+0x3e>
    663c:	4542      	cmp	r2, r8
    663e:	d10f      	bne.n	6660 <__ieee754_atan2+0xb0>
    6640:	4293      	cmp	r3, r2
    6642:	f104 34ff 	add.w	r4, r4, #4294967295
    6646:	d107      	bne.n	6658 <__ieee754_atan2+0xa8>
    6648:	2c02      	cmp	r4, #2
    664a:	d84c      	bhi.n	66e6 <__ieee754_atan2+0x136>
    664c:	4b34      	ldr	r3, [pc, #208]	; (6720 <__ieee754_atan2+0x170>)
    664e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    6652:	e9d3 0100 	ldrd	r0, r1, [r3]
    6656:	e7ca      	b.n	65ee <__ieee754_atan2+0x3e>
    6658:	2c02      	cmp	r4, #2
    665a:	d848      	bhi.n	66ee <__ieee754_atan2+0x13e>
    665c:	4b31      	ldr	r3, [pc, #196]	; (6724 <__ieee754_atan2+0x174>)
    665e:	e7f6      	b.n	664e <__ieee754_atan2+0x9e>
    6660:	4543      	cmp	r3, r8
    6662:	d0e4      	beq.n	662e <__ieee754_atan2+0x7e>
    6664:	1a9b      	subs	r3, r3, r2
    6666:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
    666a:	ea4f 5223 	mov.w	r2, r3, asr #20
    666e:	da1e      	bge.n	66ae <__ieee754_atan2+0xfe>
    6670:	2f00      	cmp	r7, #0
    6672:	da01      	bge.n	6678 <__ieee754_atan2+0xc8>
    6674:	323c      	adds	r2, #60	; 0x3c
    6676:	db1e      	blt.n	66b6 <__ieee754_atan2+0x106>
    6678:	4632      	mov	r2, r6
    667a:	463b      	mov	r3, r7
    667c:	f7fe fb14 	bl	4ca8 <__aeabi_ddiv>
    6680:	ec41 0b10 	vmov	d0, r0, r1
    6684:	f018 fe68 	bl	1f358 <fabs>
    6688:	f000 f85a 	bl	6740 <atan>
    668c:	ec51 0b10 	vmov	r0, r1, d0
    6690:	2c01      	cmp	r4, #1
    6692:	d013      	beq.n	66bc <__ieee754_atan2+0x10c>
    6694:	2c02      	cmp	r4, #2
    6696:	d015      	beq.n	66c4 <__ieee754_atan2+0x114>
    6698:	2c00      	cmp	r4, #0
    669a:	d0a8      	beq.n	65ee <__ieee754_atan2+0x3e>
    669c:	a318      	add	r3, pc, #96	; (adr r3, 6700 <__ieee754_atan2+0x150>)
    669e:	e9d3 2300 	ldrd	r2, r3, [r3]
    66a2:	f7fe f81f 	bl	46e4 <__aeabi_dsub>
    66a6:	a318      	add	r3, pc, #96	; (adr r3, 6708 <__ieee754_atan2+0x158>)
    66a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    66ac:	e014      	b.n	66d8 <__ieee754_atan2+0x128>
    66ae:	a118      	add	r1, pc, #96	; (adr r1, 6710 <__ieee754_atan2+0x160>)
    66b0:	e9d1 0100 	ldrd	r0, r1, [r1]
    66b4:	e7ec      	b.n	6690 <__ieee754_atan2+0xe0>
    66b6:	2000      	movs	r0, #0
    66b8:	2100      	movs	r1, #0
    66ba:	e7e9      	b.n	6690 <__ieee754_atan2+0xe0>
    66bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    66c0:	4619      	mov	r1, r3
    66c2:	e794      	b.n	65ee <__ieee754_atan2+0x3e>
    66c4:	a30e      	add	r3, pc, #56	; (adr r3, 6700 <__ieee754_atan2+0x150>)
    66c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    66ca:	f7fe f80b 	bl	46e4 <__aeabi_dsub>
    66ce:	4602      	mov	r2, r0
    66d0:	460b      	mov	r3, r1
    66d2:	a10d      	add	r1, pc, #52	; (adr r1, 6708 <__ieee754_atan2+0x158>)
    66d4:	e9d1 0100 	ldrd	r0, r1, [r1]
    66d8:	f7fe f804 	bl	46e4 <__aeabi_dsub>
    66dc:	e787      	b.n	65ee <__ieee754_atan2+0x3e>
    66de:	a10a      	add	r1, pc, #40	; (adr r1, 6708 <__ieee754_atan2+0x158>)
    66e0:	e9d1 0100 	ldrd	r0, r1, [r1]
    66e4:	e783      	b.n	65ee <__ieee754_atan2+0x3e>
    66e6:	a10c      	add	r1, pc, #48	; (adr r1, 6718 <__ieee754_atan2+0x168>)
    66e8:	e9d1 0100 	ldrd	r0, r1, [r1]
    66ec:	e77f      	b.n	65ee <__ieee754_atan2+0x3e>
    66ee:	2000      	movs	r0, #0
    66f0:	2100      	movs	r1, #0
    66f2:	e77c      	b.n	65ee <__ieee754_atan2+0x3e>
    66f4:	a106      	add	r1, pc, #24	; (adr r1, 6710 <__ieee754_atan2+0x160>)
    66f6:	e9d1 0100 	ldrd	r0, r1, [r1]
    66fa:	e778      	b.n	65ee <__ieee754_atan2+0x3e>
    66fc:	f3af 8000 	nop.w
    6700:	33145c07 	.word	0x33145c07
    6704:	3ca1a626 	.word	0x3ca1a626
    6708:	54442d18 	.word	0x54442d18
    670c:	400921fb 	.word	0x400921fb
    6710:	54442d18 	.word	0x54442d18
    6714:	3ff921fb 	.word	0x3ff921fb
    6718:	54442d18 	.word	0x54442d18
    671c:	3fe921fb 	.word	0x3fe921fb
    6720:	0001fbf0 	.word	0x0001fbf0
    6724:	0001fbd8 	.word	0x0001fbd8
    6728:	54442d18 	.word	0x54442d18
    672c:	c00921fb 	.word	0xc00921fb
    6730:	54442d18 	.word	0x54442d18
    6734:	bff921fb 	.word	0xbff921fb
    6738:	7ff00000 	.word	0x7ff00000
    673c:	00000000 	.word	0x00000000

00006740 <atan>:
    6740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6744:	ec55 4b10 	vmov	r4, r5, d0
    6748:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
    674c:	4bbe      	ldr	r3, [pc, #760]	; (6a48 <atan+0x308>)
    674e:	46ab      	mov	fp, r5
    6750:	429e      	cmp	r6, r3
    6752:	d918      	bls.n	6786 <atan+0x46>
    6754:	4bbd      	ldr	r3, [pc, #756]	; (6a4c <atan+0x30c>)
    6756:	429e      	cmp	r6, r3
    6758:	d801      	bhi.n	675e <atan+0x1e>
    675a:	d109      	bne.n	6770 <atan+0x30>
    675c:	b144      	cbz	r4, 6770 <atan+0x30>
    675e:	4622      	mov	r2, r4
    6760:	462b      	mov	r3, r5
    6762:	4620      	mov	r0, r4
    6764:	4629      	mov	r1, r5
    6766:	f7fd ffbf 	bl	46e8 <__adddf3>
    676a:	4604      	mov	r4, r0
    676c:	460d      	mov	r5, r1
    676e:	e006      	b.n	677e <atan+0x3e>
    6770:	f1bb 0f00 	cmp.w	fp, #0
    6774:	f340 812b 	ble.w	69ce <atan+0x28e>
    6778:	a597      	add	r5, pc, #604	; (adr r5, 69d8 <atan+0x298>)
    677a:	e9d5 4500 	ldrd	r4, r5, [r5]
    677e:	ec45 4b10 	vmov	d0, r4, r5
    6782:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6786:	4bb2      	ldr	r3, [pc, #712]	; (6a50 <atan+0x310>)
    6788:	429e      	cmp	r6, r3
    678a:	d813      	bhi.n	67b4 <atan+0x74>
    678c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    6790:	429e      	cmp	r6, r3
    6792:	d80c      	bhi.n	67ae <atan+0x6e>
    6794:	4620      	mov	r0, r4
    6796:	4629      	mov	r1, r5
    6798:	a391      	add	r3, pc, #580	; (adr r3, 69e0 <atan+0x2a0>)
    679a:	e9d3 2300 	ldrd	r2, r3, [r3]
    679e:	f7fd ffa3 	bl	46e8 <__adddf3>
    67a2:	2200      	movs	r2, #0
    67a4:	4bab      	ldr	r3, [pc, #684]	; (6a54 <atan+0x314>)
    67a6:	f7fe fbe5 	bl	4f74 <__aeabi_dcmpgt>
    67aa:	2800      	cmp	r0, #0
    67ac:	d1e7      	bne.n	677e <atan+0x3e>
    67ae:	f04f 3aff 	mov.w	sl, #4294967295
    67b2:	e029      	b.n	6808 <atan+0xc8>
    67b4:	f018 fdd0 	bl	1f358 <fabs>
    67b8:	4ba7      	ldr	r3, [pc, #668]	; (6a58 <atan+0x318>)
    67ba:	429e      	cmp	r6, r3
    67bc:	ec55 4b10 	vmov	r4, r5, d0
    67c0:	f200 80bc 	bhi.w	693c <atan+0x1fc>
    67c4:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    67c8:	429e      	cmp	r6, r3
    67ca:	f200 809e 	bhi.w	690a <atan+0x1ca>
    67ce:	4622      	mov	r2, r4
    67d0:	462b      	mov	r3, r5
    67d2:	4620      	mov	r0, r4
    67d4:	4629      	mov	r1, r5
    67d6:	f7fd ff87 	bl	46e8 <__adddf3>
    67da:	2200      	movs	r2, #0
    67dc:	4b9d      	ldr	r3, [pc, #628]	; (6a54 <atan+0x314>)
    67de:	f04f 0a00 	mov.w	sl, #0
    67e2:	f7fd ff7f 	bl	46e4 <__aeabi_dsub>
    67e6:	4606      	mov	r6, r0
    67e8:	460f      	mov	r7, r1
    67ea:	2200      	movs	r2, #0
    67ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67f0:	4620      	mov	r0, r4
    67f2:	4629      	mov	r1, r5
    67f4:	f7fd ff78 	bl	46e8 <__adddf3>
    67f8:	4602      	mov	r2, r0
    67fa:	460b      	mov	r3, r1
    67fc:	4630      	mov	r0, r6
    67fe:	4639      	mov	r1, r7
    6800:	f7fe fa52 	bl	4ca8 <__aeabi_ddiv>
    6804:	4604      	mov	r4, r0
    6806:	460d      	mov	r5, r1
    6808:	4622      	mov	r2, r4
    680a:	462b      	mov	r3, r5
    680c:	4620      	mov	r0, r4
    680e:	4629      	mov	r1, r5
    6810:	f7fe f920 	bl	4a54 <__aeabi_dmul>
    6814:	4602      	mov	r2, r0
    6816:	460b      	mov	r3, r1
    6818:	4680      	mov	r8, r0
    681a:	4689      	mov	r9, r1
    681c:	f7fe f91a 	bl	4a54 <__aeabi_dmul>
    6820:	4606      	mov	r6, r0
    6822:	460f      	mov	r7, r1
    6824:	a370      	add	r3, pc, #448	; (adr r3, 69e8 <atan+0x2a8>)
    6826:	e9d3 2300 	ldrd	r2, r3, [r3]
    682a:	f7fe f913 	bl	4a54 <__aeabi_dmul>
    682e:	a370      	add	r3, pc, #448	; (adr r3, 69f0 <atan+0x2b0>)
    6830:	e9d3 2300 	ldrd	r2, r3, [r3]
    6834:	f7fd ff58 	bl	46e8 <__adddf3>
    6838:	4632      	mov	r2, r6
    683a:	463b      	mov	r3, r7
    683c:	f7fe f90a 	bl	4a54 <__aeabi_dmul>
    6840:	a36d      	add	r3, pc, #436	; (adr r3, 69f8 <atan+0x2b8>)
    6842:	e9d3 2300 	ldrd	r2, r3, [r3]
    6846:	f7fd ff4f 	bl	46e8 <__adddf3>
    684a:	4632      	mov	r2, r6
    684c:	463b      	mov	r3, r7
    684e:	f7fe f901 	bl	4a54 <__aeabi_dmul>
    6852:	a36b      	add	r3, pc, #428	; (adr r3, 6a00 <atan+0x2c0>)
    6854:	e9d3 2300 	ldrd	r2, r3, [r3]
    6858:	f7fd ff46 	bl	46e8 <__adddf3>
    685c:	4632      	mov	r2, r6
    685e:	463b      	mov	r3, r7
    6860:	f7fe f8f8 	bl	4a54 <__aeabi_dmul>
    6864:	a368      	add	r3, pc, #416	; (adr r3, 6a08 <atan+0x2c8>)
    6866:	e9d3 2300 	ldrd	r2, r3, [r3]
    686a:	f7fd ff3d 	bl	46e8 <__adddf3>
    686e:	4632      	mov	r2, r6
    6870:	463b      	mov	r3, r7
    6872:	f7fe f8ef 	bl	4a54 <__aeabi_dmul>
    6876:	a366      	add	r3, pc, #408	; (adr r3, 6a10 <atan+0x2d0>)
    6878:	e9d3 2300 	ldrd	r2, r3, [r3]
    687c:	f7fd ff34 	bl	46e8 <__adddf3>
    6880:	4642      	mov	r2, r8
    6882:	464b      	mov	r3, r9
    6884:	f7fe f8e6 	bl	4a54 <__aeabi_dmul>
    6888:	4680      	mov	r8, r0
    688a:	4689      	mov	r9, r1
    688c:	4630      	mov	r0, r6
    688e:	4639      	mov	r1, r7
    6890:	a361      	add	r3, pc, #388	; (adr r3, 6a18 <atan+0x2d8>)
    6892:	e9d3 2300 	ldrd	r2, r3, [r3]
    6896:	f7fe f8dd 	bl	4a54 <__aeabi_dmul>
    689a:	a361      	add	r3, pc, #388	; (adr r3, 6a20 <atan+0x2e0>)
    689c:	e9d3 2300 	ldrd	r2, r3, [r3]
    68a0:	f7fd ff20 	bl	46e4 <__aeabi_dsub>
    68a4:	4632      	mov	r2, r6
    68a6:	463b      	mov	r3, r7
    68a8:	f7fe f8d4 	bl	4a54 <__aeabi_dmul>
    68ac:	a35e      	add	r3, pc, #376	; (adr r3, 6a28 <atan+0x2e8>)
    68ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    68b2:	f7fd ff17 	bl	46e4 <__aeabi_dsub>
    68b6:	4632      	mov	r2, r6
    68b8:	463b      	mov	r3, r7
    68ba:	f7fe f8cb 	bl	4a54 <__aeabi_dmul>
    68be:	a35c      	add	r3, pc, #368	; (adr r3, 6a30 <atan+0x2f0>)
    68c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    68c4:	f7fd ff0e 	bl	46e4 <__aeabi_dsub>
    68c8:	4632      	mov	r2, r6
    68ca:	463b      	mov	r3, r7
    68cc:	f7fe f8c2 	bl	4a54 <__aeabi_dmul>
    68d0:	a359      	add	r3, pc, #356	; (adr r3, 6a38 <atan+0x2f8>)
    68d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    68d6:	f7fd ff05 	bl	46e4 <__aeabi_dsub>
    68da:	4632      	mov	r2, r6
    68dc:	463b      	mov	r3, r7
    68de:	f7fe f8b9 	bl	4a54 <__aeabi_dmul>
    68e2:	4602      	mov	r2, r0
    68e4:	460b      	mov	r3, r1
    68e6:	4640      	mov	r0, r8
    68e8:	4649      	mov	r1, r9
    68ea:	f7fd fefd 	bl	46e8 <__adddf3>
    68ee:	4622      	mov	r2, r4
    68f0:	462b      	mov	r3, r5
    68f2:	f7fe f8af 	bl	4a54 <__aeabi_dmul>
    68f6:	f1ba 3fff 	cmp.w	sl, #4294967295
    68fa:	4602      	mov	r2, r0
    68fc:	460b      	mov	r3, r1
    68fe:	d148      	bne.n	6992 <atan+0x252>
    6900:	4620      	mov	r0, r4
    6902:	4629      	mov	r1, r5
    6904:	f7fd feee 	bl	46e4 <__aeabi_dsub>
    6908:	e72f      	b.n	676a <atan+0x2a>
    690a:	2200      	movs	r2, #0
    690c:	4b51      	ldr	r3, [pc, #324]	; (6a54 <atan+0x314>)
    690e:	4620      	mov	r0, r4
    6910:	4629      	mov	r1, r5
    6912:	f7fd fee7 	bl	46e4 <__aeabi_dsub>
    6916:	4606      	mov	r6, r0
    6918:	460f      	mov	r7, r1
    691a:	2200      	movs	r2, #0
    691c:	4b4d      	ldr	r3, [pc, #308]	; (6a54 <atan+0x314>)
    691e:	4620      	mov	r0, r4
    6920:	4629      	mov	r1, r5
    6922:	f04f 0a01 	mov.w	sl, #1
    6926:	f7fd fedf 	bl	46e8 <__adddf3>
    692a:	4602      	mov	r2, r0
    692c:	460b      	mov	r3, r1
    692e:	4630      	mov	r0, r6
    6930:	4639      	mov	r1, r7
    6932:	f7fe f9b9 	bl	4ca8 <__aeabi_ddiv>
    6936:	4604      	mov	r4, r0
    6938:	460d      	mov	r5, r1
    693a:	e765      	b.n	6808 <atan+0xc8>
    693c:	4b47      	ldr	r3, [pc, #284]	; (6a5c <atan+0x31c>)
    693e:	429e      	cmp	r6, r3
    6940:	d21c      	bcs.n	697c <atan+0x23c>
    6942:	2200      	movs	r2, #0
    6944:	4b46      	ldr	r3, [pc, #280]	; (6a60 <atan+0x320>)
    6946:	4620      	mov	r0, r4
    6948:	4629      	mov	r1, r5
    694a:	f7fd fecb 	bl	46e4 <__aeabi_dsub>
    694e:	2200      	movs	r2, #0
    6950:	4606      	mov	r6, r0
    6952:	460f      	mov	r7, r1
    6954:	4b42      	ldr	r3, [pc, #264]	; (6a60 <atan+0x320>)
    6956:	4620      	mov	r0, r4
    6958:	4629      	mov	r1, r5
    695a:	f04f 0a02 	mov.w	sl, #2
    695e:	f7fe f879 	bl	4a54 <__aeabi_dmul>
    6962:	2200      	movs	r2, #0
    6964:	4b3b      	ldr	r3, [pc, #236]	; (6a54 <atan+0x314>)
    6966:	f7fd febf 	bl	46e8 <__adddf3>
    696a:	4602      	mov	r2, r0
    696c:	460b      	mov	r3, r1
    696e:	4630      	mov	r0, r6
    6970:	4639      	mov	r1, r7
    6972:	f7fe f999 	bl	4ca8 <__aeabi_ddiv>
    6976:	4604      	mov	r4, r0
    6978:	460d      	mov	r5, r1
    697a:	e745      	b.n	6808 <atan+0xc8>
    697c:	4622      	mov	r2, r4
    697e:	462b      	mov	r3, r5
    6980:	2000      	movs	r0, #0
    6982:	4938      	ldr	r1, [pc, #224]	; (6a64 <atan+0x324>)
    6984:	f7fe f990 	bl	4ca8 <__aeabi_ddiv>
    6988:	f04f 0a03 	mov.w	sl, #3
    698c:	4604      	mov	r4, r0
    698e:	460d      	mov	r5, r1
    6990:	e73a      	b.n	6808 <atan+0xc8>
    6992:	4b35      	ldr	r3, [pc, #212]	; (6a68 <atan+0x328>)
    6994:	4e35      	ldr	r6, [pc, #212]	; (6a6c <atan+0x32c>)
    6996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    699a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    699e:	e9d3 2300 	ldrd	r2, r3, [r3]
    69a2:	f7fd fe9f 	bl	46e4 <__aeabi_dsub>
    69a6:	4622      	mov	r2, r4
    69a8:	462b      	mov	r3, r5
    69aa:	f7fd fe9b 	bl	46e4 <__aeabi_dsub>
    69ae:	4602      	mov	r2, r0
    69b0:	460b      	mov	r3, r1
    69b2:	e9d6 0100 	ldrd	r0, r1, [r6]
    69b6:	f7fd fe95 	bl	46e4 <__aeabi_dsub>
    69ba:	f1bb 0f00 	cmp.w	fp, #0
    69be:	4604      	mov	r4, r0
    69c0:	460d      	mov	r5, r1
    69c2:	f6bf aedc 	bge.w	677e <atan+0x3e>
    69c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    69ca:	461d      	mov	r5, r3
    69cc:	e6d7      	b.n	677e <atan+0x3e>
    69ce:	a51c      	add	r5, pc, #112	; (adr r5, 6a40 <atan+0x300>)
    69d0:	e9d5 4500 	ldrd	r4, r5, [r5]
    69d4:	e6d3      	b.n	677e <atan+0x3e>
    69d6:	bf00      	nop
    69d8:	54442d18 	.word	0x54442d18
    69dc:	3ff921fb 	.word	0x3ff921fb
    69e0:	8800759c 	.word	0x8800759c
    69e4:	7e37e43c 	.word	0x7e37e43c
    69e8:	e322da11 	.word	0xe322da11
    69ec:	3f90ad3a 	.word	0x3f90ad3a
    69f0:	24760deb 	.word	0x24760deb
    69f4:	3fa97b4b 	.word	0x3fa97b4b
    69f8:	a0d03d51 	.word	0xa0d03d51
    69fc:	3fb10d66 	.word	0x3fb10d66
    6a00:	c54c206e 	.word	0xc54c206e
    6a04:	3fb745cd 	.word	0x3fb745cd
    6a08:	920083ff 	.word	0x920083ff
    6a0c:	3fc24924 	.word	0x3fc24924
    6a10:	5555550d 	.word	0x5555550d
    6a14:	3fd55555 	.word	0x3fd55555
    6a18:	2c6a6c2f 	.word	0x2c6a6c2f
    6a1c:	bfa2b444 	.word	0xbfa2b444
    6a20:	52defd9a 	.word	0x52defd9a
    6a24:	3fadde2d 	.word	0x3fadde2d
    6a28:	af749a6d 	.word	0xaf749a6d
    6a2c:	3fb3b0f2 	.word	0x3fb3b0f2
    6a30:	fe231671 	.word	0xfe231671
    6a34:	3fbc71c6 	.word	0x3fbc71c6
    6a38:	9998ebc4 	.word	0x9998ebc4
    6a3c:	3fc99999 	.word	0x3fc99999
    6a40:	54442d18 	.word	0x54442d18
    6a44:	bff921fb 	.word	0xbff921fb
    6a48:	440fffff 	.word	0x440fffff
    6a4c:	7ff00000 	.word	0x7ff00000
    6a50:	3fdbffff 	.word	0x3fdbffff
    6a54:	3ff00000 	.word	0x3ff00000
    6a58:	3ff2ffff 	.word	0x3ff2ffff
    6a5c:	40038000 	.word	0x40038000
    6a60:	3ff80000 	.word	0x3ff80000
    6a64:	bff00000 	.word	0xbff00000
    6a68:	0001fc08 	.word	0x0001fc08
    6a6c:	0001fc28 	.word	0x0001fc28

00006a70 <disconnected>:

	dk_set_led_on(CON_STATUS_LED);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    6a70:	b508      	push	{r3, lr}
	adv_param = &adv_param_conn;
    6a72:	4a05      	ldr	r2, [pc, #20]	; (6a88 <disconnected+0x18>)
    6a74:	4b05      	ldr	r3, [pc, #20]	; (6a8c <disconnected+0x1c>)
	k_work_submit(&adv_work);
    6a76:	4806      	ldr	r0, [pc, #24]	; (6a90 <disconnected+0x20>)
	adv_param = &adv_param_conn;
    6a78:	601a      	str	r2, [r3, #0]
	k_work_submit(&adv_work);
    6a7a:	f010 faab 	bl	16fd4 <k_work_submit>

	dk_set_led_off(CON_STATUS_LED);
}
    6a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
    6a82:	2002      	movs	r0, #2
    6a84:	f016 bf74 	b.w	1d970 <dk_set_led_off>
    6a88:	20000184 	.word	0x20000184
    6a8c:	2000016c 	.word	0x2000016c
    6a90:	2000013c 	.word	0x2000013c

00006a94 <adv_start>:
	struct bt_le_ext_adv_start_param ext_adv_start_param = {0};
    6a94:	2300      	movs	r3, #0
{
    6a96:	b530      	push	{r4, r5, lr}
	if (adv) {
    6a98:	4d1c      	ldr	r5, [pc, #112]	; (6b0c <adv_start+0x78>)
{
    6a9a:	b085      	sub	sp, #20
	if (adv) {
    6a9c:	6828      	ldr	r0, [r5, #0]
	struct bt_le_ext_adv_start_param ext_adv_start_param = {0};
    6a9e:	9303      	str	r3, [sp, #12]
	if (adv) {
    6aa0:	b190      	cbz	r0, 6ac8 <adv_start+0x34>
		err = bt_le_ext_adv_stop(adv);
    6aa2:	f015 fd82 	bl	1c5aa <bt_le_ext_adv_stop>
		if (err) {
    6aa6:	4604      	mov	r4, r0
    6aa8:	b130      	cbz	r0, 6ab8 <adv_start+0x24>
			printk("Failed to stop extended advertising  (err %d)\n", err);
    6aaa:	4601      	mov	r1, r0
    6aac:	4818      	ldr	r0, [pc, #96]	; (6b10 <adv_start+0x7c>)
		printk("Failed to start extended advertising  (err %d)\n", err);
    6aae:	f014 f984 	bl	1adba <printk>
}
    6ab2:	4620      	mov	r0, r4
    6ab4:	b005      	add	sp, #20
    6ab6:	bd30      	pop	{r4, r5, pc}
			err = bt_le_ext_adv_delete(adv);
    6ab8:	6828      	ldr	r0, [r5, #0]
    6aba:	f006 f9df 	bl	ce7c <bt_le_ext_adv_delete>
		if (err) {
    6abe:	4604      	mov	r4, r0
    6ac0:	b110      	cbz	r0, 6ac8 <adv_start+0x34>
			printk("Failed to delete advertising set  (err %d)\n", err);
    6ac2:	4601      	mov	r1, r0
    6ac4:	4813      	ldr	r0, [pc, #76]	; (6b14 <adv_start+0x80>)
    6ac6:	e7f2      	b.n	6aae <adv_start+0x1a>
	err = bt_le_ext_adv_create(adv_param, &adv_cb, &adv);
    6ac8:	4b13      	ldr	r3, [pc, #76]	; (6b18 <adv_start+0x84>)
    6aca:	4a10      	ldr	r2, [pc, #64]	; (6b0c <adv_start+0x78>)
    6acc:	4913      	ldr	r1, [pc, #76]	; (6b1c <adv_start+0x88>)
    6ace:	6818      	ldr	r0, [r3, #0]
    6ad0:	f006 f93c 	bl	cd4c <bt_le_ext_adv_create>
	if (err) {
    6ad4:	4604      	mov	r4, r0
    6ad6:	b110      	cbz	r0, 6ade <adv_start+0x4a>
		printk("Failed to create advertising set (err %d)\n", err);
    6ad8:	4601      	mov	r1, r0
    6ada:	4811      	ldr	r0, [pc, #68]	; (6b20 <adv_start+0x8c>)
    6adc:	e7e7      	b.n	6aae <adv_start+0x1a>
	err = bt_le_ext_adv_set_data(adv, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    6ade:	2202      	movs	r2, #2
    6ae0:	9200      	str	r2, [sp, #0]
    6ae2:	4b10      	ldr	r3, [pc, #64]	; (6b24 <adv_start+0x90>)
    6ae4:	4910      	ldr	r1, [pc, #64]	; (6b28 <adv_start+0x94>)
    6ae6:	6828      	ldr	r0, [r5, #0]
    6ae8:	f015 fd8a 	bl	1c600 <bt_le_ext_adv_set_data>
	if (err) {
    6aec:	4604      	mov	r4, r0
    6aee:	b110      	cbz	r0, 6af6 <adv_start+0x62>
		printk("Failed setting adv data (err %d)\n", err);
    6af0:	4601      	mov	r1, r0
    6af2:	480e      	ldr	r0, [pc, #56]	; (6b2c <adv_start+0x98>)
    6af4:	e7db      	b.n	6aae <adv_start+0x1a>
	err = bt_le_ext_adv_start(adv, &ext_adv_start_param);
    6af6:	6828      	ldr	r0, [r5, #0]
    6af8:	a903      	add	r1, sp, #12
    6afa:	f006 f957 	bl	cdac <bt_le_ext_adv_start>
	if (err) {
    6afe:	4604      	mov	r4, r0
    6b00:	2800      	cmp	r0, #0
    6b02:	d0d6      	beq.n	6ab2 <adv_start+0x1e>
		printk("Failed to start extended advertising  (err %d)\n", err);
    6b04:	4601      	mov	r1, r0
    6b06:	480a      	ldr	r0, [pc, #40]	; (6b30 <adv_start+0x9c>)
    6b08:	e7d1      	b.n	6aae <adv_start+0x1a>
    6b0a:	bf00      	nop
    6b0c:	20006300 	.word	0x20006300
    6b10:	00021d14 	.word	0x00021d14
    6b14:	00021d43 	.word	0x00021d43
    6b18:	2000016c 	.word	0x2000016c
    6b1c:	0001fc48 	.word	0x0001fc48
    6b20:	00021d6f 	.word	0x00021d6f
    6b24:	0001fc64 	.word	0x0001fc64
    6b28:	0001fc74 	.word	0x0001fc74
    6b2c:	00021d9a 	.word	0x00021d9a
    6b30:	00021dbc 	.word	0x00021dbc

00006b34 <connected>:
{
    6b34:	b508      	push	{r3, lr}
	adv_param = &adv_param_noconn;
    6b36:	4a05      	ldr	r2, [pc, #20]	; (6b4c <connected+0x18>)
    6b38:	4b05      	ldr	r3, [pc, #20]	; (6b50 <connected+0x1c>)
	k_work_submit(&adv_work);
    6b3a:	4806      	ldr	r0, [pc, #24]	; (6b54 <connected+0x20>)
	adv_param = &adv_param_noconn;
    6b3c:	601a      	str	r2, [r3, #0]
	k_work_submit(&adv_work);
    6b3e:	f010 fa49 	bl	16fd4 <k_work_submit>
}
    6b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
    6b46:	2002      	movs	r0, #2
    6b48:	f016 bf0f 	b.w	1d96a <dk_set_led_on>
    6b4c:	20000170 	.word	0x20000170
    6b50:	2000016c 	.word	0x2000016c
    6b54:	2000013c 	.word	0x2000013c

00006b58 <scan_filter_match>:
{
    6b58:	b513      	push	{r0, r1, r4, lr}
    6b5a:	4604      	mov	r4, r0
	bt_addr_le_copy(&addr, device_info->recv_info->addr);
    6b5c:	6802      	ldr	r2, [r0, #0]
    6b5e:	4668      	mov	r0, sp
    6b60:	6811      	ldr	r1, [r2, #0]
    6b62:	f014 f8a0 	bl	1aca6 <bt_addr_le_copy>
	peer_supported_add(device_info->recv_info->addr);
    6b66:	6810      	ldr	r0, [r2, #0]
    6b68:	f000 fa76 	bl	7058 <peer_supported_add>
	bt_data_parse(device_info->adv_data, data_cb, &addr);
    6b6c:	466a      	mov	r2, sp
    6b6e:	4903      	ldr	r1, [pc, #12]	; (6b7c <scan_filter_match+0x24>)
    6b70:	68a0      	ldr	r0, [r4, #8]
    6b72:	f005 faf7 	bl	c164 <bt_data_parse>
}
    6b76:	b002      	add	sp, #8
    6b78:	bd10      	pop	{r4, pc}
    6b7a:	bf00      	nop
    6b7c:	0001acb5 	.word	0x0001acb5

00006b80 <adv_scanned_cb>:
{
    6b80:	b530      	push	{r4, r5, lr}
    6b82:	b089      	sub	sp, #36	; 0x24
	if (peer_supported_test(info->addr)) {
    6b84:	6808      	ldr	r0, [r1, #0]
{
    6b86:	460c      	mov	r4, r1
	if (peer_supported_test(info->addr)) {
    6b88:	f000 fa4c 	bl	7024 <peer_supported_test>
    6b8c:	b340      	cbz	r0, 6be0 <adv_scanned_cb+0x60>
		bt_addr_le_copy(&req.bt_addr, info->addr);
    6b8e:	6821      	ldr	r1, [r4, #0]
		req.role = DM_ROLE_REFLECTOR;
    6b90:	2402      	movs	r4, #2
		bt_addr_le_copy(&req.bt_addr, info->addr);
    6b92:	f10d 0009 	add.w	r0, sp, #9
    6b96:	f014 f886 	bl	1aca6 <bt_addr_le_copy>
		req.role = DM_ROLE_REFLECTOR;
    6b9a:	f88d 4008 	strb.w	r4, [sp, #8]
		req.ranging_mode = peer_ranging_mode_get();
    6b9e:	f000 fa2d 	bl	6ffc <peer_ranging_mode_get>
    6ba2:	f88d 0014 	strb.w	r0, [sp, #20]
		req.rng_seed = peer_rng_seed_get();
    6ba6:	f000 fa37 	bl	7018 <peer_rng_seed_get>
		req.start_delay_us = 0;
    6baa:	2300      	movs	r3, #0
	if (!adv) {
    6bac:	4d0d      	ldr	r5, [pc, #52]	; (6be4 <adv_scanned_cb+0x64>)
		req.rng_seed = peer_rng_seed_get();
    6bae:	9004      	str	r0, [sp, #16]
		dm_request_add(&req);
    6bb0:	a802      	add	r0, sp, #8
		req.extra_window_time_us = 0;
    6bb2:	e9cd 3306 	strd	r3, r3, [sp, #24]
		dm_request_add(&req);
    6bb6:	f002 fb8b 	bl	92d0 <dm_request_add>
	if (!adv) {
    6bba:	682b      	ldr	r3, [r5, #0]
    6bbc:	b183      	cbz	r3, 6be0 <adv_scanned_cb+0x60>
	mfg_data.rng_seed = peer_rng_seed_prepare();
    6bbe:	f000 fa23 	bl	7008 <peer_rng_seed_prepare>
    6bc2:	4b09      	ldr	r3, [pc, #36]	; (6be8 <adv_scanned_cb+0x68>)
	err = bt_le_ext_adv_set_data(adv, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    6bc4:	4909      	ldr	r1, [pc, #36]	; (6bec <adv_scanned_cb+0x6c>)
	mfg_data.rng_seed = peer_rng_seed_prepare();
    6bc6:	f8c3 0006 	str.w	r0, [r3, #6]
	err = bt_le_ext_adv_set_data(adv, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    6bca:	9400      	str	r4, [sp, #0]
    6bcc:	4622      	mov	r2, r4
    6bce:	4b08      	ldr	r3, [pc, #32]	; (6bf0 <adv_scanned_cb+0x70>)
    6bd0:	6828      	ldr	r0, [r5, #0]
    6bd2:	f015 fd15 	bl	1c600 <bt_le_ext_adv_set_data>
	if (err) {
    6bd6:	4601      	mov	r1, r0
    6bd8:	b110      	cbz	r0, 6be0 <adv_scanned_cb+0x60>
		printk("Failed setting adv data (err %d)\n", err);
    6bda:	4806      	ldr	r0, [pc, #24]	; (6bf4 <adv_scanned_cb+0x74>)
    6bdc:	f014 f8ed 	bl	1adba <printk>
}
    6be0:	b009      	add	sp, #36	; 0x24
    6be2:	bd30      	pop	{r4, r5, pc}
    6be4:	20006300 	.word	0x20006300
    6be8:	200071d0 	.word	0x200071d0
    6bec:	0001fc74 	.word	0x0001fc74
    6bf0:	0001fc64 	.word	0x0001fc64
    6bf4:	00021d9a 	.word	0x00021d9a

00006bf8 <main>:
static struct dm_cb dm_cb = {
	.data_ready = data_ready,
};

void main(void)
{
    6bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint32_t blink_status = 0;
	struct dm_init_param init_param;

	printk("Starting Distance Measurement example\n");
    6bfa:	483e      	ldr	r0, [pc, #248]	; (6cf4 <main+0xfc>)
    6bfc:	f014 f8dd 	bl	1adba <printk>

	err = dk_leds_init();
    6c00:	f00b fdf8 	bl	127f4 <dk_leds_init>
	if (err) {
    6c04:	4601      	mov	r1, r0
    6c06:	b128      	cbz	r0, 6c14 <main+0x1c>
		printk("LEDs init failed (err %d)\n", err);
    6c08:	483b      	ldr	r0, [pc, #236]	; (6cf8 <main+0x100>)
	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
		service_azimuth_elevation_simulation();
	}
}
    6c0a:	b003      	add	sp, #12
    6c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Peer init failed (err %d)\n", err);
    6c10:	f014 b8d3 	b.w	1adba <printk>
	err = peer_init();
    6c14:	f000 fa5e 	bl	70d4 <peer_init>
	if (err) {
    6c18:	4601      	mov	r1, r0
    6c1a:	b108      	cbz	r0, 6c20 <main+0x28>
		printk("Peer init failed (err %d)\n", err);
    6c1c:	4837      	ldr	r0, [pc, #220]	; (6cfc <main+0x104>)
    6c1e:	e7f4      	b.n	6c0a <main+0x12>
	init_param.cb = &dm_cb;
    6c20:	4b37      	ldr	r3, [pc, #220]	; (6d00 <main+0x108>)
	err = dm_init(&init_param);
    6c22:	a801      	add	r0, sp, #4
	init_param.cb = &dm_cb;
    6c24:	9301      	str	r3, [sp, #4]
	err = dm_init(&init_param);
    6c26:	f002 fb8b 	bl	9340 <dm_init>
	if (err) {
    6c2a:	4601      	mov	r1, r0
    6c2c:	b120      	cbz	r0, 6c38 <main+0x40>
		printk("Distance measurement init failed (err %d)\n", err);
    6c2e:	4835      	ldr	r0, [pc, #212]	; (6d04 <main+0x10c>)
		printk("Synchronisation init failed (err %d)\n", err);
    6c30:	f014 f8c3 	bl	1adba <printk>
}
    6c34:	b003      	add	sp, #12
    6c36:	bd30      	pop	{r4, r5, pc}
	err = service_ddfs_init();
    6c38:	f000 fb46 	bl	72c8 <service_ddfs_init>
    6c3c:	4601      	mov	r1, r0
	if (err) {
    6c3e:	b108      	cbz	r0, 6c44 <main+0x4c>
		printk("DDF Service init failed (err %d)\n", err);
    6c40:	4831      	ldr	r0, [pc, #196]	; (6d08 <main+0x110>)
    6c42:	e7f5      	b.n	6c30 <main+0x38>
	err = bt_enable(NULL);
    6c44:	f005 fa0c 	bl	c060 <bt_enable>
	if (err) {
    6c48:	4605      	mov	r5, r0
    6c4a:	b110      	cbz	r0, 6c52 <main+0x5a>
		printk("Bluetooth init failed (err %d)\n", err);
    6c4c:	4601      	mov	r1, r0
    6c4e:	482f      	ldr	r0, [pc, #188]	; (6d0c <main+0x114>)
    6c50:	e7ee      	b.n	6c30 <main+0x38>
	printk("DM Bluetooth LE Synchronization initialization\n");
    6c52:	482f      	ldr	r0, [pc, #188]	; (6d10 <main+0x118>)
    6c54:	f014 f8b1 	bl	1adba <printk>
	mfg_data.company_code = sys_cpu_to_le16(COMPANY_CODE);
    6c58:	2359      	movs	r3, #89	; 0x59
    6c5a:	4c2e      	ldr	r4, [pc, #184]	; (6d14 <main+0x11c>)
    6c5c:	7023      	strb	r3, [r4, #0]
	mfg_data.support_dm_code = sys_cpu_to_le32(SUPPORT_DM_CODE);
    6c5e:	235a      	movs	r3, #90	; 0x5a
    6c60:	70a3      	strb	r3, [r4, #2]
    6c62:	f06f 0355 	mvn.w	r3, #85	; 0x55
    6c66:	70e3      	strb	r3, [r4, #3]
    6c68:	2355      	movs	r3, #85	; 0x55
    6c6a:	7123      	strb	r3, [r4, #4]
    6c6c:	f04f 33ff 	mov.w	r3, #4294967295
	mfg_data.company_code = sys_cpu_to_le16(COMPANY_CODE);
    6c70:	7065      	strb	r5, [r4, #1]
	mfg_data.support_dm_code = sys_cpu_to_le32(SUPPORT_DM_CODE);
    6c72:	7163      	strb	r3, [r4, #5]
	mfg_data.rng_seed = sys_cpu_to_le32(peer_rng_seed_prepare());
    6c74:	f000 f9c8 	bl	7008 <peer_rng_seed_prepare>
    6c78:	f8c4 0006 	str.w	r0, [r4, #6]
	err = adv_start();
    6c7c:	f7ff ff0a 	bl	6a94 <adv_start>
	if (err) {
    6c80:	4604      	mov	r4, r0
    6c82:	b130      	cbz	r0, 6c92 <main+0x9a>
		printk("Failed to start advertising (err %d)\n", err);
    6c84:	4601      	mov	r1, r0
    6c86:	4824      	ldr	r0, [pc, #144]	; (6d18 <main+0x120>)
		printk("Failed to start scanning (err %d)\n", err);
    6c88:	f014 f897 	bl	1adba <printk>
		printk("Synchronisation init failed (err %d)\n", err);
    6c8c:	4621      	mov	r1, r4
    6c8e:	4823      	ldr	r0, [pc, #140]	; (6d1c <main+0x124>)
    6c90:	e7ce      	b.n	6c30 <main+0x38>
	bt_scan_init(&scan_init);
    6c92:	4823      	ldr	r0, [pc, #140]	; (6d20 <main+0x128>)
    6c94:	f001 ffc0 	bl	8c18 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    6c98:	4822      	ldr	r0, [pc, #136]	; (6d24 <main+0x12c>)
    6c9a:	f001 fe75 	bl	8988 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_MANUFACTURER_DATA, &scan_mfg_data);
    6c9e:	4922      	ldr	r1, [pc, #136]	; (6d28 <main+0x130>)
    6ca0:	2005      	movs	r0, #5
    6ca2:	f001 fe81 	bl	89a8 <bt_scan_filter_add>
	if (err) {
    6ca6:	4604      	mov	r4, r0
		printk("Scanning filters cannot be set (err %d)\n", err);
    6ca8:	4601      	mov	r1, r0
	if (err) {
    6caa:	b128      	cbz	r0, 6cb8 <main+0xc0>
		printk("Scanning filters cannot be set (err %d)\n", err);
    6cac:	481f      	ldr	r0, [pc, #124]	; (6d2c <main+0x134>)
		printk("Scanning failed to start (err %d)\n", err);
    6cae:	f014 f884 	bl	1adba <printk>
		printk("Failed to start scanning (err %d)\n", err);
    6cb2:	4621      	mov	r1, r4
    6cb4:	481e      	ldr	r0, [pc, #120]	; (6d30 <main+0x138>)
    6cb6:	e7e7      	b.n	6c88 <main+0x90>
	err = bt_scan_filter_enable(BT_SCAN_MANUFACTURER_DATA_FILTER, false);
    6cb8:	2020      	movs	r0, #32
    6cba:	f001 fed7 	bl	8a6c <bt_scan_filter_enable>
	if (err) {
    6cbe:	4604      	mov	r4, r0
    6cc0:	b110      	cbz	r0, 6cc8 <main+0xd0>
		printk("Filters cannot be turned on (err %d)\n", err);
    6cc2:	4601      	mov	r1, r0
    6cc4:	481b      	ldr	r0, [pc, #108]	; (6d34 <main+0x13c>)
    6cc6:	e7f2      	b.n	6cae <main+0xb6>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    6cc8:	2001      	movs	r0, #1
    6cca:	f001 ffd7 	bl	8c7c <bt_scan_start>
	if (err) {
    6cce:	4604      	mov	r4, r0
    6cd0:	b110      	cbz	r0, 6cd8 <main+0xe0>
		printk("Scanning failed to start (err %d)\n", err);
    6cd2:	4601      	mov	r1, r0
    6cd4:	4818      	ldr	r0, [pc, #96]	; (6d38 <main+0x140>)
    6cd6:	e7ea      	b.n	6cae <main+0xb6>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
    6cd8:	3401      	adds	r4, #1
    6cda:	f004 0101 	and.w	r1, r4, #1
    6cde:	2001      	movs	r0, #1
    6ce0:	f00b fda8 	bl	12834 <dk_set_led>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    6ce4:	2100      	movs	r1, #0
    6ce6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6cea:	f011 fab5 	bl	18258 <z_impl_k_sleep>
		service_azimuth_elevation_simulation();
    6cee:	f000 fa93 	bl	7218 <service_azimuth_elevation_simulation>
	for (;;) {
    6cf2:	e7f1      	b.n	6cd8 <main+0xe0>
    6cf4:	00021dec 	.word	0x00021dec
    6cf8:	00021e13 	.word	0x00021e13
    6cfc:	00021e2e 	.word	0x00021e2e
    6d00:	20000128 	.word	0x20000128
    6d04:	00021e49 	.word	0x00021e49
    6d08:	00021e74 	.word	0x00021e74
    6d0c:	00021e96 	.word	0x00021e96
    6d10:	00021eb6 	.word	0x00021eb6
    6d14:	200071d0 	.word	0x200071d0
    6d18:	00021ee6 	.word	0x00021ee6
    6d1c:	00021fa1 	.word	0x00021fa1
    6d20:	2000014c 	.word	0x2000014c
    6d24:	2000012c 	.word	0x2000012c
    6d28:	20000134 	.word	0x20000134
    6d2c:	00021f0c 	.word	0x00021f0c
    6d30:	00021f7e 	.word	0x00021f7e
    6d34:	00021f35 	.word	0x00021f35
    6d38:	00021f5b 	.word	0x00021f5b

00006d3c <pwm_led_init>:
{
    6d3c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    6d3e:	4802      	ldr	r0, [pc, #8]	; (6d48 <pwm_led_init+0xc>)
    6d40:	f018 f8d6 	bl	1eef0 <z_device_is_ready>
}
    6d44:	3801      	subs	r0, #1
    6d46:	bd08      	pop	{r3, pc}
    6d48:	0001f5e4 	.word	0x0001f5e4

00006d4c <led_notification>:
	service_distance_measurement_update(&peer->bt_addr, &peer->result);
}

static void led_notification(const struct peer_entry *peer)
{
	if (!peer) {
    6d4c:	b910      	cbnz	r0, 6d54 <led_notification+0x8>
		pwm_led_set(0);
    6d4e:	2000      	movs	r0, #0

	res = (res < 0 ? 0 : res) * 10;
	if (res > DISTANCE_MAX_LED) {
		pwm_led_set(0);
	} else {
		pwm_led_set((UINT16_MAX/DISTANCE_MAX_LED * res * (-1)) + UINT16_MAX);
    6d50:	f7fe bd6e 	b.w	5830 <pwm_led_set>
	if (peer->result.ranging_mode == DM_RANGING_MODE_RTT) {
    6d54:	7d43      	ldrb	r3, [r0, #21]
    6d56:	b9fb      	cbnz	r3, 6d98 <led_notification+0x4c>
		res = peer->result.dist_estimates.rtt.rtt;
    6d58:	edd0 7a06 	vldr	s15, [r0, #24]
	res = (res < 0 ? 0 : res) * 10;
    6d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    6d68:	bf48      	it	mi
    6d6a:	eddf 7a10 	vldrmi	s15, [pc, #64]	; 6dac <led_notification+0x60>
    6d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (res > DISTANCE_MAX_LED) {
    6d72:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 6db0 <led_notification+0x64>
    6d76:	eef4 7ac7 	vcmpe.f32	s15, s14
    6d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d7e:	dce6      	bgt.n	6d4e <led_notification+0x2>
		pwm_led_set((UINT16_MAX/DISTANCE_MAX_LED * res * (-1)) + UINT16_MAX);
    6d80:	eddf 6a0c 	vldr	s13, [pc, #48]	; 6db4 <led_notification+0x68>
    6d84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 6db8 <led_notification+0x6c>
    6d88:	ee07 7ae6 	vmls.f32	s14, s15, s13
    6d8c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    6d90:	ee17 3a90 	vmov	r3, s15
    6d94:	b298      	uxth	r0, r3
    6d96:	e7db      	b.n	6d50 <led_notification+0x4>
		res = peer->result.dist_estimates.mcpd.high_precision;
    6d98:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
		res = isnan(res) ? peer->result.dist_estimates.mcpd.best : res;
    6d9c:	eef4 7a67 	vcmp.f32	s15, s15
    6da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6da4:	bf68      	it	vs
    6da6:	edd0 7a09 	vldrvs	s15, [r0, #36]	; 0x24
    6daa:	e7d7      	b.n	6d5c <led_notification+0x10>
    6dac:	00000000 	.word	0x00000000
    6db0:	42480000 	.word	0x42480000
    6db4:	44a3c000 	.word	0x44a3c000
    6db8:	477fff00 	.word	0x477fff00

00006dbc <timeout_handler>:
#endif
	}
}

static void timeout_handler(struct k_timer *timer_id)
{
    6dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    6dc0:	4d18      	ldr	r5, [pc, #96]	; (6e24 <timeout_handler+0x68>)
    6dc2:	6829      	ldr	r1, [r5, #0]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    6dc4:	b129      	cbz	r1, 6dd2 <timeout_handler+0x16>
	parent->next = child;
    6dc6:	2600      	movs	r6, #0
	return node->next;
    6dc8:	680c      	ldr	r4, [r1, #0]
		item = CONTAINER_OF(node, struct peer_entry, node);
		if (item->timeout_ms > PEER_TIMEOUT_STEP_MS) {
			item->timeout_ms -= PEER_TIMEOUT_STEP_MS;
		} else {
			sys_slist_remove(&peer_list, NULL, node);
			k_heap_free(&peer_heap, item);
    6dca:	4f17      	ldr	r7, [pc, #92]	; (6e28 <timeout_handler+0x6c>)
			closest_peer = peer_find_closest();
    6dcc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e2c <timeout_handler+0x70>
	SYS_SLIST_FOR_EACH_NODE_SAFE(&peer_list, node, tmp) {
    6dd0:	b909      	cbnz	r1, 6dd6 <timeout_handler+0x1a>

			led_notification(closest_peer);
		}
	}
}
    6dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (item->timeout_ms > PEER_TIMEOUT_STEP_MS) {
    6dd6:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    6dd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6ddc:	d907      	bls.n	6dee <timeout_handler+0x32>
			item->timeout_ms -= PEER_TIMEOUT_STEP_MS;
    6dde:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
    6de2:	858b      	strh	r3, [r1, #44]	; 0x2c
Z_GENLIST_PEEK_NEXT(slist, snode)
    6de4:	b1e4      	cbz	r4, 6e20 <timeout_handler+0x64>
	return node->next;
    6de6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6de8:	4621      	mov	r1, r4
    6dea:	461c      	mov	r4, r3
    6dec:	e7f0      	b.n	6dd0 <timeout_handler+0x14>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6dee:	686a      	ldr	r2, [r5, #4]
	return node->next;
    6df0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    6df2:	4291      	cmp	r1, r2
			k_heap_free(&peer_heap, item);
    6df4:	4638      	mov	r0, r7
	list->head = node;
    6df6:	602b      	str	r3, [r5, #0]
	list->tail = node;
    6df8:	bf08      	it	eq
    6dfa:	606b      	streq	r3, [r5, #4]
	parent->next = child;
    6dfc:	600e      	str	r6, [r1, #0]
    6dfe:	f00f f863 	bl	15ec8 <k_heap_free>
	return list->head;
    6e02:	6828      	ldr	r0, [r5, #0]
	closest_peer = SYS_SLIST_PEEK_HEAD_CONTAINER(&peer_list, closest_peer, node);
    6e04:	b138      	cbz	r0, 6e16 <timeout_handler+0x5a>
	return node->next;
    6e06:	4601      	mov	r1, r0
    6e08:	6802      	ldr	r2, [r0, #0]
		closest_peer = mcpd_min_peer_result(closest_peer, item);
    6e0a:	f013 ff75 	bl	1acf8 <mcpd_min_peer_result>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e0e:	b112      	cbz	r2, 6e16 <timeout_handler+0x5a>
	return node->next;
    6e10:	4611      	mov	r1, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e12:	6812      	ldr	r2, [r2, #0]
    6e14:	e7f9      	b.n	6e0a <timeout_handler+0x4e>
			closest_peer = peer_find_closest();
    6e16:	f8c8 0000 	str.w	r0, [r8]
			led_notification(closest_peer);
    6e1a:	f7ff ff97 	bl	6d4c <led_notification>
    6e1e:	e7e1      	b.n	6de4 <timeout_handler+0x28>
    6e20:	4623      	mov	r3, r4
    6e22:	e7e1      	b.n	6de8 <timeout_handler+0x2c>
    6e24:	20006304 	.word	0x20006304
    6e28:	200007d0 	.word	0x200007d0
    6e2c:	20006310 	.word	0x20006310

00006e30 <peer_find>:
{
    6e30:	b570      	push	{r4, r5, r6, lr}
	if (!peer) {
    6e32:	4606      	mov	r6, r0
    6e34:	b910      	cbnz	r0, 6e3c <peer_find+0xc>
		return NULL;
    6e36:	2400      	movs	r4, #0
}
    6e38:	4620      	mov	r0, r4
    6e3a:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    6e3c:	4b0a      	ldr	r3, [pc, #40]	; (6e68 <peer_find+0x38>)
    6e3e:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e40:	2c00      	cmp	r4, #0
    6e42:	d0f8      	beq.n	6e36 <peer_find+0x6>
	return node->next;
    6e44:	6825      	ldr	r5, [r4, #0]
	SYS_SLIST_FOR_EACH_NODE_SAFE(&peer_list, node, tmp) {
    6e46:	2c00      	cmp	r4, #0
    6e48:	d0f5      	beq.n	6e36 <peer_find+0x6>
 *
 *  @sa bt_addr_le_eq
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    6e4a:	2207      	movs	r2, #7
    6e4c:	4631      	mov	r1, r6
    6e4e:	1d20      	adds	r0, r4, #4
    6e50:	f018 faa8 	bl	1f3a4 <memcmp>
		if (bt_addr_le_cmp(&item->bt_addr, peer) == 0) {
    6e54:	2800      	cmp	r0, #0
    6e56:	d0ef      	beq.n	6e38 <peer_find+0x8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e58:	b11d      	cbz	r5, 6e62 <peer_find+0x32>
	return node->next;
    6e5a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6e5c:	462c      	mov	r4, r5
    6e5e:	461d      	mov	r5, r3
    6e60:	e7f1      	b.n	6e46 <peer_find+0x16>
    6e62:	462b      	mov	r3, r5
    6e64:	e7fa      	b.n	6e5c <peer_find+0x2c>
    6e66:	bf00      	nop
    6e68:	20006304 	.word	0x20006304

00006e6c <peer_thread>:

static void peer_thread(void)
{
    6e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    6e70:	f8df 9170 	ldr.w	r9, [pc, #368]	; 6fe4 <peer_thread+0x178>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6e74:	f8df a170 	ldr.w	sl, [pc, #368]	; 6fe8 <peer_thread+0x17c>
	printk("\nMeasurement result:\n");
    6e78:	f8df b170 	ldr.w	fp, [pc, #368]	; 6fec <peer_thread+0x180>
{
    6e7c:	b0a1      	sub	sp, #132	; 0x84
    6e7e:	f04f 32ff 	mov.w	r2, #4294967295
    6e82:	f04f 33ff 	mov.w	r3, #4294967295
    6e86:	4648      	mov	r0, r9
    6e88:	a918      	add	r1, sp, #96	; 0x60
    6e8a:	f00f fb11 	bl	164b0 <z_impl_k_msgq_get>
	struct dm_result result;

	while (1) {
		if (k_msgq_get(&result_msgq, &result, K_FOREVER) == 0) {
    6e8e:	2800      	cmp	r0, #0
    6e90:	d1f5      	bne.n	6e7e <peer_thread+0x12>
			struct peer_entry *peer;

			peer = peer_find(&result.bt_addr);
    6e92:	f10d 0062 	add.w	r0, sp, #98	; 0x62
    6e96:	f7ff ffcb 	bl	6e30 <peer_find>
			if (!peer) {
    6e9a:	4604      	mov	r4, r0
    6e9c:	2800      	cmp	r0, #0
    6e9e:	d0ee      	beq.n	6e7e <peer_thread+0x12>
				continue;
			}

			memcpy(&peer->result, &result, sizeof(peer->result));
    6ea0:	f100 080c 	add.w	r8, r0, #12
    6ea4:	4645      	mov	r5, r8
    6ea6:	ab18      	add	r3, sp, #96	; 0x60
    6ea8:	ae20      	add	r6, sp, #128	; 0x80
    6eaa:	461a      	mov	r2, r3
    6eac:	ca03      	ldmia	r2!, {r0, r1}
    6eae:	42b2      	cmp	r2, r6
    6eb0:	6028      	str	r0, [r5, #0]
    6eb2:	6069      	str	r1, [r5, #4]
    6eb4:	4613      	mov	r3, r2
    6eb6:	f105 0508 	add.w	r5, r5, #8
    6eba:	d1f6      	bne.n	6eaa <peer_thread+0x3e>
			peer->timeout_ms = PEER_TIMEOUT_INIT_MS;
    6ebc:	f242 7310 	movw	r3, #10000	; 0x2710
	const char *quality[DM_QUALITY_NONE + 1] = {"ok", "poor", "do not use", "crc fail", "none"};
    6ec0:	4e3c      	ldr	r6, [pc, #240]	; (6fb4 <peer_thread+0x148>)
    6ec2:	ad0b      	add	r5, sp, #44	; 0x2c
			peer->timeout_ms = PEER_TIMEOUT_INIT_MS;
    6ec4:	85a3      	strh	r3, [r4, #44]	; 0x2c
	const char *quality[DM_QUALITY_NONE + 1] = {"ok", "poor", "do not use", "crc fail", "none"};
    6ec6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6eca:	6833      	ldr	r3, [r6, #0]
    6ecc:	602b      	str	r3, [r5, #0]
	switch (addr->type) {
    6ece:	7ba3      	ldrb	r3, [r4, #14]
    6ed0:	ad08      	add	r5, sp, #32
    6ed2:	2b03      	cmp	r3, #3
    6ed4:	d848      	bhi.n	6f68 <peer_thread+0xfc>
    6ed6:	e8df f003 	tbb	[pc, r3]
    6eda:	4102      	.short	0x4102
    6edc:	4543      	.short	0x4543
		strcpy(type, "public");
    6ede:	4936      	ldr	r1, [pc, #216]	; (6fb8 <peer_thread+0x14c>)
		strcpy(type, "random");
    6ee0:	4628      	mov	r0, r5
    6ee2:	f018 fa9e 	bl	1f422 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6ee6:	7d23      	ldrb	r3, [r4, #20]
    6ee8:	9505      	str	r5, [sp, #20]
    6eea:	7be2      	ldrb	r2, [r4, #15]
    6eec:	211e      	movs	r1, #30
    6eee:	9204      	str	r2, [sp, #16]
    6ef0:	7c22      	ldrb	r2, [r4, #16]
    6ef2:	a810      	add	r0, sp, #64	; 0x40
    6ef4:	9203      	str	r2, [sp, #12]
    6ef6:	7c62      	ldrb	r2, [r4, #17]
    6ef8:	9202      	str	r2, [sp, #8]
    6efa:	7ca2      	ldrb	r2, [r4, #18]
    6efc:	9201      	str	r2, [sp, #4]
    6efe:	7ce2      	ldrb	r2, [r4, #19]
    6f00:	9200      	str	r2, [sp, #0]
    6f02:	4652      	mov	r2, sl
    6f04:	f013 ff66 	bl	1add4 <snprintk>
	printk("\nMeasurement result:\n");
    6f08:	4658      	mov	r0, fp
    6f0a:	f013 ff56 	bl	1adba <printk>
	printk("\tAddr: %s\n", addr);
    6f0e:	482b      	ldr	r0, [pc, #172]	; (6fbc <peer_thread+0x150>)
    6f10:	a910      	add	r1, sp, #64	; 0x40
    6f12:	f013 ff52 	bl	1adba <printk>
	printk("\tQuality: %s\n", quality[result->quality]);
    6f16:	7b63      	ldrb	r3, [r4, #13]
    6f18:	aa20      	add	r2, sp, #128	; 0x80
    6f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6f1e:	f853 1c54 	ldr.w	r1, [r3, #-84]
    6f22:	4827      	ldr	r0, [pc, #156]	; (6fc0 <peer_thread+0x154>)
    6f24:	f013 ff49 	bl	1adba <printk>
	printk("\tDistance estimates: ");
    6f28:	4826      	ldr	r0, [pc, #152]	; (6fc4 <peer_thread+0x158>)
    6f2a:	f013 ff46 	bl	1adba <printk>
	if (result->ranging_mode == DM_RANGING_MODE_RTT) {
    6f2e:	7d63      	ldrb	r3, [r4, #21]
    6f30:	bb03      	cbnz	r3, 6f74 <peer_thread+0x108>
		printk("rtt: rtt=%.2f\n", result->dist_estimates.rtt.rtt);
    6f32:	69a0      	ldr	r0, [r4, #24]
    6f34:	f7fd fd36 	bl	49a4 <__aeabi_f2d>
    6f38:	4602      	mov	r2, r0
    6f3a:	460b      	mov	r3, r1
    6f3c:	4822      	ldr	r0, [pc, #136]	; (6fc8 <peer_thread+0x15c>)
    6f3e:	f013 ff3c 	bl	1adba <printk>
			print_result(&peer->result);

			closest_peer = mcpd_min_peer_result(closest_peer, peer);
    6f42:	4a22      	ldr	r2, [pc, #136]	; (6fcc <peer_thread+0x160>)
    6f44:	4621      	mov	r1, r4
    6f46:	6810      	ldr	r0, [r2, #0]
    6f48:	f013 fed6 	bl	1acf8 <mcpd_min_peer_result>
    6f4c:	6010      	str	r0, [r2, #0]

			led_notification(closest_peer);
    6f4e:	f7ff fefd 	bl	6d4c <led_notification>
	service_distance_measurement_update(&peer->bt_addr, &peer->result);
    6f52:	4641      	mov	r1, r8
    6f54:	1d20      	adds	r0, r4, #4
    6f56:	f000 f90f 	bl	7178 <service_distance_measurement_update>
}
    6f5a:	e790      	b.n	6e7e <peer_thread+0x12>
		strcpy(type, "random");
    6f5c:	491c      	ldr	r1, [pc, #112]	; (6fd0 <peer_thread+0x164>)
    6f5e:	e7bf      	b.n	6ee0 <peer_thread+0x74>
		strcpy(type, "public-id");
    6f60:	491c      	ldr	r1, [pc, #112]	; (6fd4 <peer_thread+0x168>)
    6f62:	e7bd      	b.n	6ee0 <peer_thread+0x74>
		strcpy(type, "random-id");
    6f64:	491c      	ldr	r1, [pc, #112]	; (6fd8 <peer_thread+0x16c>)
    6f66:	e7bb      	b.n	6ee0 <peer_thread+0x74>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    6f68:	210a      	movs	r1, #10
    6f6a:	4628      	mov	r0, r5
    6f6c:	4a1b      	ldr	r2, [pc, #108]	; (6fdc <peer_thread+0x170>)
    6f6e:	f013 ff31 	bl	1add4 <snprintk>
		break;
    6f72:	e7b8      	b.n	6ee6 <peer_thread+0x7a>
		printk("mcpd: high_precision=%.2f ifft=%.2f phase_slope=%.2f "
    6f74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6f76:	f7fd fd15 	bl	49a4 <__aeabi_f2d>
    6f7a:	4606      	mov	r6, r0
    6f7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6f7e:	460f      	mov	r7, r1
    6f80:	f7fd fd10 	bl	49a4 <__aeabi_f2d>
    6f84:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6f88:	6a20      	ldr	r0, [r4, #32]
    6f8a:	f7fd fd0b 	bl	49a4 <__aeabi_f2d>
    6f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    6f92:	69e0      	ldr	r0, [r4, #28]
    6f94:	f7fd fd06 	bl	49a4 <__aeabi_f2d>
    6f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6f9c:	69a0      	ldr	r0, [r4, #24]
    6f9e:	f7fd fd01 	bl	49a4 <__aeabi_f2d>
    6fa2:	4632      	mov	r2, r6
    6fa4:	e9cd 0100 	strd	r0, r1, [sp]
    6fa8:	463b      	mov	r3, r7
    6faa:	480d      	ldr	r0, [pc, #52]	; (6fe0 <peer_thread+0x174>)
    6fac:	f013 ff05 	bl	1adba <printk>
    6fb0:	e7c7      	b.n	6f42 <peer_thread+0xd6>
    6fb2:	bf00      	nop
    6fb4:	0001fa20 	.word	0x0001fa20
    6fb8:	00021fce 	.word	0x00021fce
    6fbc:	00022030 	.word	0x00022030
    6fc0:	0002203b 	.word	0x0002203b
    6fc4:	00022049 	.word	0x00022049
    6fc8:	0002205f 	.word	0x0002205f
    6fcc:	20006310 	.word	0x20006310
    6fd0:	00021fd5 	.word	0x00021fd5
    6fd4:	00021fdc 	.word	0x00021fdc
    6fd8:	00021fe6 	.word	0x00021fe6
    6fdc:	00021ff0 	.word	0x00021ff0
    6fe0:	0002206e 	.word	0x0002206e
    6fe4:	20000874 	.word	0x20000874
    6fe8:	00021ff7 	.word	0x00021ff7
    6fec:	0002201a 	.word	0x0002201a

00006ff0 <peer_ranging_mode_set>:
	}
}

void peer_ranging_mode_set(enum dm_ranging_mode mode)
{
	ranging_mode = mode;
    6ff0:	4b01      	ldr	r3, [pc, #4]	; (6ff8 <peer_ranging_mode_set+0x8>)
    6ff2:	7018      	strb	r0, [r3, #0]
}
    6ff4:	4770      	bx	lr
    6ff6:	bf00      	nop
    6ff8:	2000064d 	.word	0x2000064d

00006ffc <peer_ranging_mode_get>:

enum dm_ranging_mode peer_ranging_mode_get(void)
{
	return ranging_mode;
}
    6ffc:	4b01      	ldr	r3, [pc, #4]	; (7004 <peer_ranging_mode_get+0x8>)
    6ffe:	7818      	ldrb	r0, [r3, #0]
    7000:	4770      	bx	lr
    7002:	bf00      	nop
    7004:	2000064d 	.word	0x2000064d

00007008 <peer_rng_seed_prepare>:

uint32_t peer_rng_seed_prepare(void)
{
    7008:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    700a:	f00a f81d 	bl	11048 <z_impl_sys_rand32_get>
	rng_seed = sys_rand32_get();
    700e:	4b01      	ldr	r3, [pc, #4]	; (7014 <peer_rng_seed_prepare+0xc>)
    7010:	6018      	str	r0, [r3, #0]
	return rng_seed;
}
    7012:	bd08      	pop	{r3, pc}
    7014:	2000630c 	.word	0x2000630c

00007018 <peer_rng_seed_get>:

uint32_t peer_rng_seed_get(void)
{
	return rng_seed;
}
    7018:	4b01      	ldr	r3, [pc, #4]	; (7020 <peer_rng_seed_get+0x8>)
    701a:	6818      	ldr	r0, [r3, #0]
    701c:	4770      	bx	lr
    701e:	bf00      	nop
    7020:	2000630c 	.word	0x2000630c

00007024 <peer_supported_test>:

bool peer_supported_test(const bt_addr_le_t *peer)
{
    7024:	b538      	push	{r3, r4, r5, lr}
	return list->head;
    7026:	4b0b      	ldr	r3, [pc, #44]	; (7054 <peer_supported_test+0x30>)
    7028:	4605      	mov	r5, r0
    702a:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    702c:	b108      	cbz	r0, 7032 <peer_supported_test+0xe>
	return node->next;
    702e:	6804      	ldr	r4, [r0, #0]
	sys_snode_t *node, *tmp;
	struct peer_entry *item;

	SYS_SLIST_FOR_EACH_NODE_SAFE(&peer_list, node, tmp) {
    7030:	b908      	cbnz	r0, 7036 <peer_supported_test+0x12>
		if (bt_addr_le_cmp(&item->bt_addr, peer) == 0) {
			return true;
		}
	}

	return false;
    7032:	2000      	movs	r0, #0
}
    7034:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
    7036:	2207      	movs	r2, #7
    7038:	4629      	mov	r1, r5
    703a:	3004      	adds	r0, #4
    703c:	f018 f9b2 	bl	1f3a4 <memcmp>
		if (bt_addr_le_cmp(&item->bt_addr, peer) == 0) {
    7040:	b130      	cbz	r0, 7050 <peer_supported_test+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7042:	b11c      	cbz	r4, 704c <peer_supported_test+0x28>
	return node->next;
    7044:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
    7046:	4620      	mov	r0, r4
    7048:	4614      	mov	r4, r2
    704a:	e7f1      	b.n	7030 <peer_supported_test+0xc>
    704c:	4622      	mov	r2, r4
    704e:	e7fa      	b.n	7046 <peer_supported_test+0x22>
			return true;
    7050:	2001      	movs	r0, #1
    7052:	e7ef      	b.n	7034 <peer_supported_test+0x10>
    7054:	20006304 	.word	0x20006304

00007058 <peer_supported_add>:

int peer_supported_add(const bt_addr_le_t *peer)
{
    7058:	b570      	push	{r4, r5, r6, lr}
    705a:	4605      	mov	r5, r0
	struct peer_entry *item;

	if (peer_supported_test(peer)) {
    705c:	f7ff ffe2 	bl	7024 <peer_supported_test>
    7060:	4606      	mov	r6, r0
    7062:	bb00      	cbnz	r0, 70a6 <peer_supported_add+0x4e>
		return 0;
	}

	item = k_heap_alloc(&peer_heap, sizeof(struct peer_entry), K_NO_WAIT);
    7064:	2200      	movs	r2, #0
    7066:	2300      	movs	r3, #0
    7068:	2130      	movs	r1, #48	; 0x30
    706a:	4813      	ldr	r0, [pc, #76]	; (70b8 <peer_supported_add+0x60>)
    706c:	f017 ff58 	bl	1ef20 <k_heap_alloc>
	if (!item) {
    7070:	4604      	mov	r4, r0
    7072:	b1e8      	cbz	r0, 70b0 <peer_supported_add+0x58>
		return -ENOMEM;
	}

	item->timeout_ms = PEER_TIMEOUT_INIT_MS;
    7074:	f242 7310 	movw	r3, #10000	; 0x2710
    7078:	8583      	strh	r3, [r0, #44]	; 0x2c
    707a:	682b      	ldr	r3, [r5, #0]
    707c:	6043      	str	r3, [r0, #4]
    707e:	88ab      	ldrh	r3, [r5, #4]
    7080:	8103      	strh	r3, [r0, #8]
    7082:	79ab      	ldrb	r3, [r5, #6]
    7084:	7283      	strb	r3, [r0, #10]
	return z_impl_k_mutex_lock(mutex, timeout);
    7086:	f04f 32ff 	mov.w	r2, #4294967295
    708a:	f04f 33ff 	mov.w	r3, #4294967295
    708e:	480b      	ldr	r0, [pc, #44]	; (70bc <peer_supported_add+0x64>)
    7090:	f00f faa0 	bl	165d4 <z_impl_k_mutex_lock>
	return list->tail;
    7094:	4b0a      	ldr	r3, [pc, #40]	; (70c0 <peer_supported_add+0x68>)
	parent->next = child;
    7096:	6026      	str	r6, [r4, #0]
	return list->tail;
    7098:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    709a:	b932      	cbnz	r2, 70aa <peer_supported_add+0x52>
	list->head = node;
    709c:	e9c3 4400 	strd	r4, r4, [r3]
	return z_impl_k_mutex_unlock(mutex);
    70a0:	4806      	ldr	r0, [pc, #24]	; (70bc <peer_supported_add+0x64>)
    70a2:	f00f fb4d 	bl	16740 <z_impl_k_mutex_unlock>
		return 0;
    70a6:	2000      	movs	r0, #0
	list_lock();
	sys_slist_append(&peer_list, &item->node);
	list_unlock();

	return 0;
}
    70a8:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    70aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    70ac:	605c      	str	r4, [r3, #4]
}
    70ae:	e7f7      	b.n	70a0 <peer_supported_add+0x48>
		return -ENOMEM;
    70b0:	f06f 000b 	mvn.w	r0, #11
    70b4:	e7f8      	b.n	70a8 <peer_supported_add+0x50>
    70b6:	bf00      	nop
    70b8:	200007d0 	.word	0x200007d0
    70bc:	20000810 	.word	0x20000810
    70c0:	20006304 	.word	0x20006304

000070c4 <peer_update>:

void peer_update(struct dm_result *result)
{
    70c4:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
    70c6:	2200      	movs	r2, #0
    70c8:	2300      	movs	r3, #0
    70ca:	4801      	ldr	r0, [pc, #4]	; (70d0 <peer_update+0xc>)
    70cc:	f00f b964 	b.w	16398 <z_impl_k_msgq_put>
    70d0:	20000874 	.word	0x20000874

000070d4 <peer_init>:
	k_msgq_put(&result_msgq, result, K_NO_WAIT);
}

int peer_init(void)
{
    70d4:	b513      	push	{r0, r1, r4, lr}
	z_impl_k_timer_start(timer, duration, period);
    70d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    70da:	2300      	movs	r3, #0
    70dc:	4808      	ldr	r0, [pc, #32]	; (7100 <peer_init+0x2c>)
    70de:	e9cd 2300 	strd	r2, r3, [sp]
    70e2:	2200      	movs	r2, #0
    70e4:	2300      	movs	r3, #0
    70e6:	f011 fd11 	bl	18b0c <z_impl_k_timer_start>
	int err;

	k_timer_start(&timer, K_NO_WAIT, K_MSEC(PEER_TIMEOUT_STEP_MS));

	err = pwm_led_init();
    70ea:	f7ff fe27 	bl	6d3c <pwm_led_init>
	if (err) {
    70ee:	4604      	mov	r4, r0
    70f0:	b118      	cbz	r0, 70fa <peer_init+0x26>
		printk("PWM LED init failed (err %d)\n", err);
    70f2:	4601      	mov	r1, r0
    70f4:	4803      	ldr	r0, [pc, #12]	; (7104 <peer_init+0x30>)
    70f6:	f013 fe60 	bl	1adba <printk>
		return err;
	}

	return 0;
}
    70fa:	4620      	mov	r0, r4
    70fc:	b002      	add	sp, #8
    70fe:	bd10      	pop	{r4, pc}
    7100:	20000720 	.word	0x20000720
    7104:	000220c2 	.word	0x000220c2

00007108 <meter_to_decimeter>:

static uint16_t meter_to_decimeter(float value)
{
	float val;

	val = (value < 0 ? 0 : value) * 10;
    7108:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7110:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    7114:	bf48      	it	mi
    7116:	ed9f 0a09 	vldrmi	s0, [pc, #36]	; 713c <meter_to_decimeter+0x34>
    711a:	ee20 0a27 	vmul.f32	s0, s0, s15
	return val < UINT16_MAX ? (uint16_t)val : UINT16_MAX;
    711e:	eddf 7a08 	vldr	s15, [pc, #32]	; 7140 <meter_to_decimeter+0x38>
    7122:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    712a:	bf43      	ittte	mi
    712c:	eebc 0ac0 	vcvtmi.u32.f32	s0, s0
    7130:	ee10 3a10 	vmovmi	r3, s0
    7134:	b298      	uxthmi	r0, r3
    7136:	f64f 70ff 	movwpl	r0, #65535	; 0xffff
}
    713a:	4770      	bx	lr
    713c:	00000000 	.word	0x00000000
    7140:	477fff00 	.word	0x477fff00

00007144 <dm_ranging_mode_set>:
{
    7144:	b508      	push	{r3, lr}
	if (mode == BT_DDFS_DM_RANGING_MODE_RTT) {
    7146:	b938      	cbnz	r0, 7158 <dm_ranging_mode_set+0x14>
		peer_ranging_mode_set(DM_RANGING_MODE_RTT);
    7148:	f7ff ff52 	bl	6ff0 <peer_ranging_mode_set>
	printk("DM set ranging mode to %s\n", mode == BT_DDFS_DM_RANGING_MODE_RTT ? "RTT" : "MCPD");
    714c:	4907      	ldr	r1, [pc, #28]	; (716c <dm_ranging_mode_set+0x28>)
    714e:	4808      	ldr	r0, [pc, #32]	; (7170 <dm_ranging_mode_set+0x2c>)
    7150:	f013 fe33 	bl	1adba <printk>
	return 0;
    7154:	2000      	movs	r0, #0
}
    7156:	bd08      	pop	{r3, pc}
	} else if (mode == BT_DDFS_DM_RANGING_MODE_MCPD) {
    7158:	2801      	cmp	r0, #1
    715a:	d103      	bne.n	7164 <dm_ranging_mode_set+0x20>
		peer_ranging_mode_set(DM_RANGING_MODE_MCPD);
    715c:	f7ff ff48 	bl	6ff0 <peer_ranging_mode_set>
	printk("DM set ranging mode to %s\n", mode == BT_DDFS_DM_RANGING_MODE_RTT ? "RTT" : "MCPD");
    7160:	4904      	ldr	r1, [pc, #16]	; (7174 <dm_ranging_mode_set+0x30>)
    7162:	e7f4      	b.n	714e <dm_ranging_mode_set+0xa>
		return -1;
    7164:	f04f 30ff 	mov.w	r0, #4294967295
    7168:	e7f5      	b.n	7156 <dm_ranging_mode_set+0x12>
    716a:	bf00      	nop
    716c:	00022118 	.word	0x00022118
    7170:	00022121 	.word	0x00022121
    7174:	0002211c 	.word	0x0002211c

00007178 <service_distance_measurement_update>:

void service_distance_measurement_update(const bt_addr_le_t *addr, const struct dm_result *result)
{
    7178:	b510      	push	{r4, lr}
    717a:	460a      	mov	r2, r1
    717c:	b086      	sub	sp, #24
	struct bt_ddfs_distance_measurement measurement;
	int err;

	if (!addr || !result) {
    717e:	4601      	mov	r1, r0
    7180:	b340      	cbz	r0, 71d4 <service_distance_measurement_update+0x5c>
    7182:	b33a      	cbz	r2, 71d4 <service_distance_measurement_update+0x5c>
		return;
	}

	if (result->quality == DM_QUALITY_OK) {
    7184:	7853      	ldrb	r3, [r2, #1]
    7186:	b133      	cbz	r3, 7196 <service_distance_measurement_update+0x1e>
		measurement.quality = BT_DDFS_QUALITY_OK;
	} else if (result->quality == DM_QUALITY_POOR) {
    7188:	2b01      	cmp	r3, #1
    718a:	d004      	beq.n	7196 <service_distance_measurement_update+0x1e>
		measurement.quality = BT_DDFS_QUALITY_POOR;
	} else if (result->quality == DM_QUALITY_DO_NOT_USE) {
    718c:	3b02      	subs	r3, #2
    718e:	2b01      	cmp	r3, #1
    7190:	bf94      	ite	ls
    7192:	2302      	movls	r3, #2
    7194:	2303      	movhi	r3, #3
		measurement.quality = BT_DDFS_QUALITY_DO_NOT_USE;
	} else {
		measurement.quality = BT_DDFS_QUALITY_NONE;
	}

	if (result->ranging_mode == DM_RANGING_MODE_RTT) {
    7196:	7a54      	ldrb	r4, [r2, #9]
		measurement.ranging_mode = BT_DDFS_DM_RANGING_MODE_RTT;
		measurement.dist_estimates.rtt.rtt =
				meter_to_decimeter(result->dist_estimates.rtt.rtt);
    7198:	ed92 0a03 	vldr	s0, [r2, #12]
		measurement.quality = BT_DDFS_QUALITY_OK;
    719c:	f88d 3004 	strb.w	r3, [sp, #4]
				meter_to_decimeter(result->dist_estimates.rtt.rtt);
    71a0:	f7ff ffb2 	bl	7108 <meter_to_decimeter>
	if (result->ranging_mode == DM_RANGING_MODE_RTT) {
    71a4:	b9c4      	cbnz	r4, 71d8 <service_distance_measurement_update+0x60>
		measurement.ranging_mode = BT_DDFS_DM_RANGING_MODE_RTT;
    71a6:	f88d 400c 	strb.w	r4, [sp, #12]
		measurement.dist_estimates.rtt.rtt =
    71aa:	f8ad 000e 	strh.w	r0, [sp, #14]
		measurement.dist_estimates.mcpd.high_precision =
				meter_to_decimeter(result->dist_estimates.mcpd.high_precision);
#endif
	}

	bt_addr_le_copy(&measurement.bt_addr, addr);
    71ae:	f10d 0005 	add.w	r0, sp, #5
    71b2:	f013 fde6 	bl	1ad82 <bt_addr_le_copy>

	err = bt_ddfs_distance_measurement_notify(NULL, &measurement);
    71b6:	a901      	add	r1, sp, #4
    71b8:	2000      	movs	r0, #0
    71ba:	f001 fead 	bl	8f18 <bt_ddfs_distance_measurement_notify>
	if (err && (err != -EACCES) && (err != -ENOTCONN)) {
    71be:	4601      	mov	r1, r0
    71c0:	b140      	cbz	r0, 71d4 <service_distance_measurement_update+0x5c>
    71c2:	f110 0f0d 	cmn.w	r0, #13
    71c6:	d005      	beq.n	71d4 <service_distance_measurement_update+0x5c>
    71c8:	f110 0f80 	cmn.w	r0, #128	; 0x80
    71cc:	d002      	beq.n	71d4 <service_distance_measurement_update+0x5c>
		printk("Failed to send distance measurement (err %d)\n", err);
    71ce:	4811      	ldr	r0, [pc, #68]	; (7214 <service_distance_measurement_update+0x9c>)
    71d0:	f013 fdf3 	bl	1adba <printk>
	}
}
    71d4:	b006      	add	sp, #24
    71d6:	bd10      	pop	{r4, pc}
		measurement.ranging_mode = BT_DDFS_DM_RANGING_MODE_MCPD;
    71d8:	2301      	movs	r3, #1
				meter_to_decimeter(result->dist_estimates.mcpd.phase_slope);
    71da:	ed92 0a04 	vldr	s0, [r2, #16]
		measurement.ranging_mode = BT_DDFS_DM_RANGING_MODE_MCPD;
    71de:	f88d 300c 	strb.w	r3, [sp, #12]
		measurement.dist_estimates.mcpd.ifft =
    71e2:	f8ad 000e 	strh.w	r0, [sp, #14]
				meter_to_decimeter(result->dist_estimates.mcpd.phase_slope);
    71e6:	f7ff ff8f 	bl	7108 <meter_to_decimeter>
				meter_to_decimeter(result->dist_estimates.mcpd.rssi_openspace);
    71ea:	ed92 0a05 	vldr	s0, [r2, #20]
		measurement.dist_estimates.mcpd.phase_slope =
    71ee:	f8ad 0010 	strh.w	r0, [sp, #16]
				meter_to_decimeter(result->dist_estimates.mcpd.rssi_openspace);
    71f2:	f7ff ff89 	bl	7108 <meter_to_decimeter>
				meter_to_decimeter(result->dist_estimates.mcpd.best);
    71f6:	ed92 0a06 	vldr	s0, [r2, #24]
		measurement.dist_estimates.mcpd.rssi_openspace =
    71fa:	f8ad 0012 	strh.w	r0, [sp, #18]
				meter_to_decimeter(result->dist_estimates.mcpd.best);
    71fe:	f7ff ff83 	bl	7108 <meter_to_decimeter>
				meter_to_decimeter(result->dist_estimates.mcpd.high_precision);
    7202:	ed92 0a07 	vldr	s0, [r2, #28]
		measurement.dist_estimates.mcpd.best =
    7206:	f8ad 0014 	strh.w	r0, [sp, #20]
				meter_to_decimeter(result->dist_estimates.mcpd.high_precision);
    720a:	f7ff ff7d 	bl	7108 <meter_to_decimeter>
		measurement.dist_estimates.mcpd.high_precision =
    720e:	f8ad 0016 	strh.w	r0, [sp, #22]
    7212:	e7cc      	b.n	71ae <service_distance_measurement_update+0x36>
    7214:	0002213c 	.word	0x0002213c

00007218 <service_azimuth_elevation_simulation>:

void service_azimuth_elevation_simulation(void)
{
    7218:	b510      	push	{r4, lr}
    721a:	b088      	sub	sp, #32
    721c:	f009 ff14 	bl	11048 <z_impl_sys_rand32_get>
	int err;

	uint32_t rand = sys_rand32_get();
	struct bt_ddfs_elevation_measurement elevation;
	struct bt_ddfs_azimuth_measurement azimuth;
	const bt_addr_le_t bt_addr = {
    7220:	4b26      	ldr	r3, [pc, #152]	; (72bc <service_azimuth_elevation_simulation+0xa4>)
    7222:	4604      	mov	r4, r0
    7224:	889a      	ldrh	r2, [r3, #4]
		.type = BT_ADDR_LE_RANDOM,
		.a.val = {0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA},
	};

	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
	elevation.value	= -90 + rand % 91;
    7226:	215b      	movs	r1, #91	; 0x5b
	const bt_addr_le_t bt_addr = {
    7228:	f8ad 2004 	strh.w	r2, [sp, #4]
	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    722c:	2203      	movs	r2, #3
	const bt_addr_le_t bt_addr = {
    722e:	6818      	ldr	r0, [r3, #0]
    7230:	799b      	ldrb	r3, [r3, #6]
	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    7232:	fbb4 f2f2 	udiv	r2, r4, r2
	const bt_addr_le_t bt_addr = {
    7236:	f88d 3006 	strb.w	r3, [sp, #6]
	elevation.value	= -90 + rand % 91;
    723a:	fbb4 f3f1 	udiv	r3, r4, r1
    723e:	fb01 4313 	mls	r3, r1, r3, r4
	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    7242:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7246:	1aa2      	subs	r2, r4, r2
	bt_addr_le_copy(&elevation.bt_addr, &bt_addr);
    7248:	4669      	mov	r1, sp
	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    724a:	b2d2      	uxtb	r2, r2
	elevation.value	= -90 + rand % 91;
    724c:	3b5a      	subs	r3, #90	; 0x5a
	const bt_addr_le_t bt_addr = {
    724e:	9000      	str	r0, [sp, #0]
	bt_addr_le_copy(&elevation.bt_addr, &bt_addr);
    7250:	f10d 0009 	add.w	r0, sp, #9
	elevation.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    7254:	f88d 2008 	strb.w	r2, [sp, #8]
	elevation.value	= -90 + rand % 91;
    7258:	f88d 3010 	strb.w	r3, [sp, #16]
	bt_addr_le_copy(&elevation.bt_addr, &bt_addr);
    725c:	f013 fd91 	bl	1ad82 <bt_addr_le_copy>

	azimuth.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
	azimuth.value = rand % 360;
    7260:	f44f 73b4 	mov.w	r3, #360	; 0x168
	azimuth.quality = rand % (BT_DDFS_QUALITY_DO_NOT_USE + 1);
    7264:	f88d 2014 	strb.w	r2, [sp, #20]
	azimuth.value = rand % 360;
    7268:	fbb4 f2f3 	udiv	r2, r4, r3
    726c:	fb03 4412 	mls	r4, r3, r2, r4
	bt_addr_le_copy(&azimuth.bt_addr, &bt_addr);
    7270:	f10d 0015 	add.w	r0, sp, #21
	azimuth.value = rand % 360;
    7274:	f8ad 401c 	strh.w	r4, [sp, #28]
	bt_addr_le_copy(&azimuth.bt_addr, &bt_addr);
    7278:	f013 fd83 	bl	1ad82 <bt_addr_le_copy>

	err = bt_ddfs_elevation_measurement_notify(NULL, &elevation);
    727c:	a902      	add	r1, sp, #8
    727e:	2000      	movs	r0, #0
    7280:	f001 fee6 	bl	9050 <bt_ddfs_elevation_measurement_notify>
	if (err && (err != -EACCES) && (err != -ENOTCONN)) {
    7284:	4601      	mov	r1, r0
    7286:	b140      	cbz	r0, 729a <service_azimuth_elevation_simulation+0x82>
    7288:	f110 0f0d 	cmn.w	r0, #13
    728c:	d005      	beq.n	729a <service_azimuth_elevation_simulation+0x82>
    728e:	f110 0f80 	cmn.w	r0, #128	; 0x80
    7292:	d002      	beq.n	729a <service_azimuth_elevation_simulation+0x82>
		printk("Failed to send elevation measurement (err %d)\n", err);
    7294:	480a      	ldr	r0, [pc, #40]	; (72c0 <service_azimuth_elevation_simulation+0xa8>)
    7296:	f013 fd90 	bl	1adba <printk>
	}

	err = bt_ddfs_azimuth_measurement_notify(NULL, &azimuth);
    729a:	a905      	add	r1, sp, #20
    729c:	2000      	movs	r0, #0
    729e:	f001 fea1 	bl	8fe4 <bt_ddfs_azimuth_measurement_notify>
	if (err && (err != -EACCES) && (err != -ENOTCONN)) {
    72a2:	4601      	mov	r1, r0
    72a4:	b140      	cbz	r0, 72b8 <service_azimuth_elevation_simulation+0xa0>
    72a6:	f110 0f0d 	cmn.w	r0, #13
    72aa:	d005      	beq.n	72b8 <service_azimuth_elevation_simulation+0xa0>
    72ac:	f110 0f80 	cmn.w	r0, #128	; 0x80
    72b0:	d002      	beq.n	72b8 <service_azimuth_elevation_simulation+0xa0>
		printk("Failed to send azimuth measurement (err %d)\n", err);
    72b2:	4804      	ldr	r0, [pc, #16]	; (72c4 <service_azimuth_elevation_simulation+0xac>)
    72b4:	f013 fd81 	bl	1adba <printk>
	}
}
    72b8:	b008      	add	sp, #32
    72ba:	bd10      	pop	{r4, pc}
    72bc:	0001fbac 	.word	0x0001fbac
    72c0:	0002216a 	.word	0x0002216a
    72c4:	00022199 	.word	0x00022199

000072c8 <service_ddfs_init>:
	.em_notification_config_changed = NULL
};

int service_ddfs_init(void)
{
	struct bt_ddfs_init_params ddfs_init = {0};
    72c8:	2303      	movs	r3, #3
{
    72ca:	b507      	push	{r0, r1, r2, lr}
	struct bt_ddfs_init_params ddfs_init = {0};
    72cc:	9300      	str	r3, [sp, #0]

	ddfs_init.dm_features.ranging_mode_rtt = 1;
	ddfs_init.dm_features.ranging_mode_mcpd = 1;
	ddfs_init.cb = &cb;
    72ce:	4b04      	ldr	r3, [pc, #16]	; (72e0 <service_ddfs_init+0x18>)

	return bt_ddfs_init(&ddfs_init);
    72d0:	4668      	mov	r0, sp
	ddfs_init.cb = &cb;
    72d2:	9301      	str	r3, [sp, #4]
	return bt_ddfs_init(&ddfs_init);
    72d4:	f001 fef2 	bl	90bc <bt_ddfs_init>
}
    72d8:	b003      	add	sp, #12
    72da:	f85d fb04 	ldr.w	pc, [sp], #4
    72de:	bf00      	nop
    72e0:	0001fc84 	.word	0x0001fc84

000072e4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    72e4:	4b01      	ldr	r3, [pc, #4]	; (72ec <char_out+0x8>)
    72e6:	681b      	ldr	r3, [r3, #0]
    72e8:	4718      	bx	r3
    72ea:	bf00      	nop
    72ec:	20000198 	.word	0x20000198

000072f0 <__printk_hook_install>:
	_char_out = fn;
    72f0:	4b01      	ldr	r3, [pc, #4]	; (72f8 <__printk_hook_install+0x8>)
    72f2:	6018      	str	r0, [r3, #0]
}
    72f4:	4770      	bx	lr
    72f6:	bf00      	nop
    72f8:	20000198 	.word	0x20000198

000072fc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    72fc:	b507      	push	{r0, r1, r2, lr}
    72fe:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    7300:	2100      	movs	r1, #0
    7302:	4602      	mov	r2, r0
    7304:	9100      	str	r1, [sp, #0]
    7306:	4803      	ldr	r0, [pc, #12]	; (7314 <vprintk+0x18>)
    7308:	f7fe fae6 	bl	58d8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    730c:	b003      	add	sp, #12
    730e:	f85d fb04 	ldr.w	pc, [sp], #4
    7312:	bf00      	nop
    7314:	000072e5 	.word	0x000072e5

00007318 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    7318:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    731a:	2500      	movs	r5, #0
{
    731c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    731e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    7322:	4604      	mov	r4, r0
    7324:	9500      	str	r5, [sp, #0]
    7326:	a903      	add	r1, sp, #12
    7328:	4805      	ldr	r0, [pc, #20]	; (7340 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    732a:	9505      	str	r5, [sp, #20]
    732c:	f7fe fad4 	bl	58d8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    7330:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    7334:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    7336:	bfb8      	it	lt
    7338:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    733a:	b007      	add	sp, #28
    733c:	bd30      	pop	{r4, r5, pc}
    733e:	bf00      	nop
    7340:	0001ad95 	.word	0x0001ad95

00007344 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    7344:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    7346:	b389      	cbz	r1, 73ac <sys_heap_free+0x68>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    7348:	6806      	ldr	r6, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    734a:	2201      	movs	r2, #1
	chunkid_t c = mem_to_chunkid(h, mem);
    734c:	4630      	mov	r0, r6
    734e:	f013 fd90 	bl	1ae72 <mem_to_chunkid>
    7352:	4601      	mov	r1, r0
    7354:	4604      	mov	r4, r0
    7356:	4630      	mov	r0, r6
    7358:	f013 fd53 	bl	1ae02 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    735c:	07c3      	lsls	r3, r0, #31
    735e:	d408      	bmi.n	7372 <sys_heap_free+0x2e>
    7360:	4913      	ldr	r1, [pc, #76]	; (73b0 <sys_heap_free+0x6c>)
    7362:	22af      	movs	r2, #175	; 0xaf
    7364:	4813      	ldr	r0, [pc, #76]	; (73b4 <sys_heap_free+0x70>)
    7366:	f013 ffd3 	bl	1b310 <assert_print>
    736a:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    736c:	4810      	ldr	r0, [pc, #64]	; (73b0 <sys_heap_free+0x6c>)
    736e:	f013 ffc8 	bl	1b302 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    7372:	4621      	mov	r1, r4
    7374:	4630      	mov	r0, r6
    7376:	f013 fd5a 	bl	1ae2e <chunk_size>
    737a:	1825      	adds	r5, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    737c:	4629      	mov	r1, r5
    737e:	2200      	movs	r2, #0
    7380:	4630      	mov	r0, r6
    7382:	f013 fd3e 	bl	1ae02 <chunk_field>
    7386:	1a2d      	subs	r5, r5, r0
    7388:	42ac      	cmp	r4, r5
    738a:	d006      	beq.n	739a <sys_heap_free+0x56>
    738c:	4908      	ldr	r1, [pc, #32]	; (73b0 <sys_heap_free+0x6c>)
    738e:	22b7      	movs	r2, #183	; 0xb7
    7390:	4808      	ldr	r0, [pc, #32]	; (73b4 <sys_heap_free+0x70>)
    7392:	f013 ffbd 	bl	1b310 <assert_print>
    7396:	21b7      	movs	r1, #183	; 0xb7
    7398:	e7e8      	b.n	736c <sys_heap_free+0x28>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    739a:	4621      	mov	r1, r4
    739c:	4630      	mov	r0, r6
    739e:	f013 fd4c 	bl	1ae3a <set_chunk_used>
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    73a2:	4621      	mov	r1, r4
}
    73a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    73a8:	f013 be88 	b.w	1b0bc <free_chunk>
}
    73ac:	bd70      	pop	{r4, r5, r6, pc}
    73ae:	bf00      	nop
    73b0:	000221d7 	.word	0x000221d7
    73b4:	000221f8 	.word	0x000221f8

000073b8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    73b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73bc:	460f      	mov	r7, r1
	struct z_heap *h = heap->heap;
    73be:	6806      	ldr	r6, [r0, #0]
{
    73c0:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
    73c2:	68b2      	ldr	r2, [r6, #8]
    73c4:	1e4b      	subs	r3, r1, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    73c6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    73ca:	bf34      	ite	cc
    73cc:	2104      	movcc	r1, #4
    73ce:	2108      	movcs	r1, #8
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    73d0:	403b      	ands	r3, r7
    73d2:	d010      	beq.n	73f6 <sys_heap_aligned_alloc+0x3e>
	rew = align & -align;
    73d4:	f1c7 0900 	rsb	r9, r7, #0
    73d8:	ea09 0907 	and.w	r9, r9, r7
    73dc:	4549      	cmp	r1, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    73de:	f103 30ff 	add.w	r0, r3, #4294967295
    73e2:	bf28      	it	cs
    73e4:	4649      	movcs	r1, r9
    73e6:	4218      	tst	r0, r3
    73e8:	d10c      	bne.n	7404 <sys_heap_aligned_alloc+0x4c>
    73ea:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    73ec:	b9bc      	cbnz	r4, 741e <sys_heap_aligned_alloc+0x66>
		return NULL;
    73ee:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    73f0:	4628      	mov	r0, r5
    73f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    73f6:	428f      	cmp	r7, r1
    73f8:	d80f      	bhi.n	741a <sys_heap_aligned_alloc+0x62>
			return sys_heap_alloc(heap, bytes);
    73fa:	4621      	mov	r1, r4
}
    73fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    7400:	f013 be9e 	b.w	1b140 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    7404:	492c      	ldr	r1, [pc, #176]	; (74b8 <sys_heap_aligned_alloc+0x100>)
    7406:	482d      	ldr	r0, [pc, #180]	; (74bc <sys_heap_aligned_alloc+0x104>)
    7408:	f44f 72a2 	mov.w	r2, #324	; 0x144
    740c:	f013 ff80 	bl	1b310 <assert_print>
    7410:	f44f 71a2 	mov.w	r1, #324	; 0x144
    7414:	4828      	ldr	r0, [pc, #160]	; (74b8 <sys_heap_aligned_alloc+0x100>)
    7416:	f013 ff74 	bl	1b302 <assert_post_action>
		rew = 0;
    741a:	4699      	mov	r9, r3
    741c:	e7e6      	b.n	73ec <sys_heap_aligned_alloc+0x34>
	if (bytes == 0 || size_too_big(h, bytes)) {
    741e:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    7422:	d9e4      	bls.n	73ee <sys_heap_aligned_alloc+0x36>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    7424:	19e3      	adds	r3, r4, r7
    7426:	1a59      	subs	r1, r3, r1
    7428:	4610      	mov	r0, r2
    742a:	f013 fd2c 	bl	1ae86 <bytes_to_chunksz.isra.0>
    742e:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    7430:	4630      	mov	r0, r6
    7432:	f013 fd82 	bl	1af3a <alloc_chunk>
	if (c0 == 0) {
    7436:	4680      	mov	r8, r0
    7438:	2800      	cmp	r0, #0
    743a:	d0d8      	beq.n	73ee <sys_heap_aligned_alloc+0x36>
    743c:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    743e:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    7442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    7446:	bf34      	ite	cc
    7448:	2304      	movcc	r3, #4
    744a:	2308      	movcs	r3, #8
    744c:	441d      	add	r5, r3
    744e:	4435      	add	r5, r6
    7450:	1e7b      	subs	r3, r7, #1
    7452:	441d      	add	r5, r3
    7454:	427f      	negs	r7, r7
    7456:	403d      	ands	r5, r7
    7458:	eba5 0509 	sub.w	r5, r5, r9
	chunkid_t c = mem_to_chunkid(h, mem);
    745c:	4629      	mov	r1, r5
    745e:	4630      	mov	r0, r6
    7460:	f013 fd07 	bl	1ae72 <mem_to_chunkid>
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    7464:	442c      	add	r4, r5
    7466:	3407      	adds	r4, #7
    7468:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    746c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    746e:	4580      	cmp	r8, r0
	chunkid_t c = mem_to_chunkid(h, mem);
    7470:	4607      	mov	r7, r0
	chunkid_t c_end = end - chunk_buf(h);
    7472:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    7476:	d208      	bcs.n	748a <sys_heap_aligned_alloc+0xd2>
		split_chunks(h, c0, c);
    7478:	4602      	mov	r2, r0
    747a:	4641      	mov	r1, r8
    747c:	4630      	mov	r0, r6
    747e:	f013 fd96 	bl	1afae <split_chunks>
		free_list_add(h, c0);
    7482:	4641      	mov	r1, r8
    7484:	4630      	mov	r0, r6
    7486:	f013 fdd7 	bl	1b038 <free_list_add>
	return c + chunk_size(h, c);
    748a:	4639      	mov	r1, r7
    748c:	4630      	mov	r0, r6
    748e:	f013 fcce 	bl	1ae2e <chunk_size>
    7492:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    7494:	4284      	cmp	r4, r0
    7496:	d208      	bcs.n	74aa <sys_heap_aligned_alloc+0xf2>
		split_chunks(h, c, c_end);
    7498:	4639      	mov	r1, r7
    749a:	4630      	mov	r0, r6
    749c:	4622      	mov	r2, r4
    749e:	f013 fd86 	bl	1afae <split_chunks>
		free_list_add(h, c_end);
    74a2:	4621      	mov	r1, r4
    74a4:	4630      	mov	r0, r6
    74a6:	f013 fdc7 	bl	1b038 <free_list_add>
	set_chunk_used(h, c, true);
    74aa:	2201      	movs	r2, #1
    74ac:	4639      	mov	r1, r7
    74ae:	4630      	mov	r0, r6
    74b0:	f013 fcc3 	bl	1ae3a <set_chunk_used>
	return mem;
    74b4:	e79c      	b.n	73f0 <sys_heap_aligned_alloc+0x38>
    74b6:	bf00      	nop
    74b8:	000221d7 	.word	0x000221d7
    74bc:	000221f8 	.word	0x000221f8

000074c0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    74c0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    74c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74c6:	d20c      	bcs.n	74e2 <sys_heap_init+0x22>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    74c8:	2a04      	cmp	r2, #4
    74ca:	d820      	bhi.n	750e <sys_heap_init+0x4e>
    74cc:	493b      	ldr	r1, [pc, #236]	; (75bc <sys_heap_init+0xfc>)
    74ce:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    74d2:	483b      	ldr	r0, [pc, #236]	; (75c0 <sys_heap_init+0x100>)
    74d4:	f013 ff1c 	bl	1b310 <assert_print>
    74d8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    74dc:	4837      	ldr	r0, [pc, #220]	; (75bc <sys_heap_init+0xfc>)
    74de:	f013 ff10 	bl	1b302 <assert_post_action>
    74e2:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    74e4:	1ad2      	subs	r2, r2, r3
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    74e6:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    74e8:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    74ea:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    74ee:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    74f2:	1b09      	subs	r1, r1, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    74f4:	2917      	cmp	r1, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    74f6:	ea4f 06d1 	mov.w	r6, r1, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    74fa:	d80a      	bhi.n	7512 <sys_heap_init+0x52>
    74fc:	492f      	ldr	r1, [pc, #188]	; (75bc <sys_heap_init+0xfc>)
    74fe:	f240 12fb 	movw	r2, #507	; 0x1fb
    7502:	482f      	ldr	r0, [pc, #188]	; (75c0 <sys_heap_init+0x100>)
    7504:	f013 ff04 	bl	1b310 <assert_print>
    7508:	f240 11fb 	movw	r1, #507	; 0x1fb
    750c:	e7e6      	b.n	74dc <sys_heap_init+0x1c>
    750e:	2304      	movs	r3, #4
    7510:	e7e8      	b.n	74e4 <sys_heap_init+0x24>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    7512:	2700      	movs	r7, #0
	heap->heap = h;
    7514:	6004      	str	r4, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    7516:	4631      	mov	r1, r6
    7518:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
    751a:	60a6      	str	r6, [r4, #8]
	h->avail_buckets = 0;
    751c:	60e7      	str	r7, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    751e:	f013 fcbb 	bl	1ae98 <bucket_idx.isra.0>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    7522:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    7524:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    7526:	4602      	mov	r2, r0
    7528:	4630      	mov	r0, r6
    752a:	f013 fcac 	bl	1ae86 <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    752e:	351b      	adds	r5, #27
    7530:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    7532:	4428      	add	r0, r5
    7534:	42b0      	cmp	r0, r6
    7536:	d834      	bhi.n	75a2 <sys_heap_init+0xe2>

	for (int i = 0; i < nb_buckets; i++) {
    7538:	463b      	mov	r3, r7
		h->buckets[i].next = 0;
    753a:	4638      	mov	r0, r7
    753c:	f104 010c 	add.w	r1, r4, #12
	for (int i = 0; i < nb_buckets; i++) {
    7540:	429a      	cmp	r2, r3
    7542:	da37      	bge.n	75b4 <sys_heap_init+0xf4>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    7544:	462a      	mov	r2, r5
    7546:	4620      	mov	r0, r4
    7548:	2100      	movs	r1, #0
    754a:	f013 fc8e 	bl	1ae6a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    754e:	2300      	movs	r3, #0
    7550:	4620      	mov	r0, r4
    7552:	461a      	mov	r2, r3
    7554:	4619      	mov	r1, r3
    7556:	f013 fc5f 	bl	1ae18 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    755a:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    755c:	4619      	mov	r1, r3
    755e:	4620      	mov	r0, r4
    7560:	2201      	movs	r2, #1
    7562:	f013 fc6a 	bl	1ae3a <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    7566:	463a      	mov	r2, r7
    7568:	4629      	mov	r1, r5
    756a:	f013 fc7e 	bl	1ae6a <set_chunk_size>
    756e:	462b      	mov	r3, r5
    7570:	2200      	movs	r2, #0
    7572:	4629      	mov	r1, r5
    7574:	4620      	mov	r0, r4
    7576:	f013 fc4f 	bl	1ae18 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    757a:	4631      	mov	r1, r6
    757c:	4620      	mov	r0, r4
    757e:	f013 fc74 	bl	1ae6a <set_chunk_size>
    7582:	463b      	mov	r3, r7
    7584:	4631      	mov	r1, r6
    7586:	4620      	mov	r0, r4
    7588:	2200      	movs	r2, #0
    758a:	f013 fc45 	bl	1ae18 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    758e:	4631      	mov	r1, r6
    7590:	4620      	mov	r0, r4
    7592:	2201      	movs	r2, #1
    7594:	f013 fc51 	bl	1ae3a <set_chunk_used>

	free_list_add(h, chunk0_size);
    7598:	4629      	mov	r1, r5
}
    759a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    759e:	f013 bd4b 	b.w	1b038 <free_list_add>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    75a2:	4906      	ldr	r1, [pc, #24]	; (75bc <sys_heap_init+0xfc>)
    75a4:	f44f 7203 	mov.w	r2, #524	; 0x20c
    75a8:	4805      	ldr	r0, [pc, #20]	; (75c0 <sys_heap_init+0x100>)
    75aa:	f013 feb1 	bl	1b310 <assert_print>
    75ae:	f44f 7103 	mov.w	r1, #524	; 0x20c
    75b2:	e793      	b.n	74dc <sys_heap_init+0x1c>
		h->buckets[i].next = 0;
    75b4:	f841 0f04 	str.w	r0, [r1, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    75b8:	3301      	adds	r3, #1
    75ba:	e7c1      	b.n	7540 <sys_heap_init+0x80>
    75bc:	000221d7 	.word	0x000221d7
    75c0:	000221f8 	.word	0x000221f8

000075c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    75c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75c8:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    75ca:	8ba3      	ldrh	r3, [r4, #28]
{
    75cc:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    75ce:	0719      	lsls	r1, r3, #28
{
    75d0:	4616      	mov	r6, r2
	if (processing) {
    75d2:	d412      	bmi.n	75fa <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    75d4:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    75d6:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    75da:	d162      	bne.n	76a2 <process_event+0xde>
			evt = process_recheck(mgr);
    75dc:	4620      	mov	r0, r4
    75de:	f013 fde1 	bl	1b1a4 <process_recheck>
		}

		if (evt == EVT_NOP) {
    75e2:	b188      	cbz	r0, 7608 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    75e4:	3801      	subs	r0, #1
    75e6:	2804      	cmp	r0, #4
    75e8:	f200 8121 	bhi.w	782e <process_event+0x26a>
    75ec:	e8df f010 	tbh	[pc, r0, lsl #1]
    75f0:	011f0059 	.word	0x011f0059
    75f4:	00c4007e 	.word	0x00c4007e
    75f8:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
    75fa:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    75fc:	bf0c      	ite	eq
    75fe:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7602:	f043 0120 	orrne.w	r1, r3, #32
    7606:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7608:	f104 0014 	add.w	r0, r4, #20
    760c:	f00e fe80 	bl	16310 <z_spin_unlock_valid>
    7610:	2800      	cmp	r0, #0
    7612:	f000 80a9 	beq.w	7768 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    7616:	f386 8811 	msr	BASEPRI, r6
    761a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    761e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7622:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    7626:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    7628:	2801      	cmp	r0, #1
    762a:	d81e      	bhi.n	766a <process_event+0xa6>
	list->head = NULL;
    762c:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    762e:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    7630:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    7632:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    7636:	d114      	bne.n	7662 <process_event+0x9e>
		*clients = mgr->clients;
    7638:	463a      	mov	r2, r7
    763a:	e003      	b.n	7644 <process_event+0x80>
				mgr->refs += 1U;
    763c:	8be0      	ldrh	r0, [r4, #30]
    763e:	3001      	adds	r0, #1
    7640:	83e0      	strh	r0, [r4, #30]
	return node->next;
    7642:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7644:	2a00      	cmp	r2, #0
    7646:	d1f9      	bne.n	763c <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7648:	f023 0307 	bic.w	r3, r3, #7
    764c:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    7650:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    7652:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    7654:	f013 fda6 	bl	1b1a4 <process_recheck>
    7658:	b390      	cbz	r0, 76c0 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    765a:	f042 0220 	orr.w	r2, r2, #32
    765e:	83a2      	strh	r2, [r4, #28]
    7660:	e02e      	b.n	76c0 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7662:	f023 0307 	bic.w	r3, r3, #7
    7666:	b29a      	uxth	r2, r3
}
    7668:	e7f2      	b.n	7650 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
    766a:	2a04      	cmp	r2, #4
    766c:	d133      	bne.n	76d6 <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    766e:	f023 0307 	bic.w	r3, r3, #7
    7672:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    7674:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    7676:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    7678:	f013 fd94 	bl	1b1a4 <process_recheck>
    767c:	b110      	cbz	r0, 7684 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    767e:	f042 0220 	orr.w	r2, r2, #32
    7682:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    7684:	8ba3      	ldrh	r3, [r4, #28]
    7686:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    768a:	4589      	cmp	r9, r1
    768c:	f040 80d8 	bne.w	7840 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    7690:	8ba1      	ldrh	r1, [r4, #28]
    7692:	06ca      	lsls	r2, r1, #27
    7694:	f140 811e 	bpl.w	78d4 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    7698:	f021 0310 	bic.w	r3, r1, #16
    769c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    769e:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    76a2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    76a6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    76a8:	f1b8 0f00 	cmp.w	r8, #0
    76ac:	dab9      	bge.n	7622 <process_event+0x5e>
	list->head = NULL;
    76ae:	2200      	movs	r2, #0
		*clients = mgr->clients;
    76b0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    76b2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    76b6:	e9c4 2200 	strd	r2, r2, [r4]
    76ba:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    76be:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    76c0:	8ba3      	ldrh	r3, [r4, #28]
    76c2:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    76c6:	4589      	cmp	r9, r1
    76c8:	f040 80bb 	bne.w	7842 <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
    76cc:	2f00      	cmp	r7, #0
    76ce:	d0df      	beq.n	7690 <process_event+0xcc>
    76d0:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    76d2:	46aa      	mov	sl, r5
    76d4:	e03e      	b.n	7754 <process_event+0x190>
		__ASSERT_NO_MSG(false);
    76d6:	4984      	ldr	r1, [pc, #528]	; (78e8 <process_event+0x324>)
    76d8:	f240 121b 	movw	r2, #283	; 0x11b
    76dc:	4883      	ldr	r0, [pc, #524]	; (78ec <process_event+0x328>)
    76de:	f013 fe17 	bl	1b310 <assert_print>
    76e2:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    76e6:	4880      	ldr	r0, [pc, #512]	; (78e8 <process_event+0x324>)
    76e8:	f013 fe0b 	bl	1b302 <assert_post_action>
    76ec:	b141      	cbz	r1, 7700 <process_event+0x13c>
    76ee:	497e      	ldr	r1, [pc, #504]	; (78e8 <process_event+0x324>)
    76f0:	f44f 72ab 	mov.w	r2, #342	; 0x156
    76f4:	487d      	ldr	r0, [pc, #500]	; (78ec <process_event+0x328>)
    76f6:	f013 fe0b 	bl	1b310 <assert_print>
    76fa:	f44f 71ab 	mov.w	r1, #342	; 0x156
    76fe:	e7f2      	b.n	76e6 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    7700:	6823      	ldr	r3, [r4, #0]
    7702:	b943      	cbnz	r3, 7716 <process_event+0x152>
    7704:	4978      	ldr	r1, [pc, #480]	; (78e8 <process_event+0x324>)
    7706:	f240 1257 	movw	r2, #343	; 0x157
    770a:	4878      	ldr	r0, [pc, #480]	; (78ec <process_event+0x328>)
    770c:	f013 fe00 	bl	1b310 <assert_print>
    7710:	f240 1157 	movw	r1, #343	; 0x157
    7714:	e7e7      	b.n	76e6 <process_event+0x122>
			transit = mgr->transitions->start;
    7716:	6923      	ldr	r3, [r4, #16]
    7718:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    771a:	b945      	cbnz	r5, 772e <process_event+0x16a>
    771c:	4972      	ldr	r1, [pc, #456]	; (78e8 <process_event+0x324>)
    771e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    7722:	4872      	ldr	r0, [pc, #456]	; (78ec <process_event+0x328>)
    7724:	f013 fdf4 	bl	1b310 <assert_print>
    7728:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    772c:	e7db      	b.n	76e6 <process_event+0x122>
	mgr->flags = (state & ONOFF_STATE_MASK)
    772e:	460f      	mov	r7, r1
		res = 0;
    7730:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    7732:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7736:	8ba3      	ldrh	r3, [r4, #28]
    7738:	f023 0307 	bic.w	r3, r3, #7
    773c:	f043 0306 	orr.w	r3, r3, #6
    7740:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    7742:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    7744:	68a2      	ldr	r2, [r4, #8]
    7746:	2a00      	cmp	r2, #0
    7748:	d17d      	bne.n	7846 <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
    774a:	2f00      	cmp	r7, #0
    774c:	d17e      	bne.n	784c <process_event+0x288>
		    || (transit != NULL)) {
    774e:	2d00      	cmp	r5, #0
    7750:	d09e      	beq.n	7690 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    7752:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    7754:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    7758:	f104 0b14 	add.w	fp, r4, #20
    775c:	4658      	mov	r0, fp
			mgr->flags = flags;
    775e:	83a3      	strh	r3, [r4, #28]
    7760:	f00e fdd6 	bl	16310 <z_spin_unlock_valid>
    7764:	2800      	cmp	r0, #0
    7766:	d173      	bne.n	7850 <process_event+0x28c>
    7768:	4961      	ldr	r1, [pc, #388]	; (78f0 <process_event+0x32c>)
    776a:	22c2      	movs	r2, #194	; 0xc2
    776c:	485f      	ldr	r0, [pc, #380]	; (78ec <process_event+0x328>)
    776e:	f013 fdcf 	bl	1b310 <assert_print>
    7772:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7774:	485e      	ldr	r0, [pc, #376]	; (78f0 <process_event+0x32c>)
    7776:	e7b7      	b.n	76e8 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    7778:	2902      	cmp	r1, #2
    777a:	d008      	beq.n	778e <process_event+0x1ca>
    777c:	495a      	ldr	r1, [pc, #360]	; (78e8 <process_event+0x324>)
    777e:	f240 125d 	movw	r2, #349	; 0x15d
    7782:	485a      	ldr	r0, [pc, #360]	; (78ec <process_event+0x328>)
    7784:	f013 fdc4 	bl	1b310 <assert_print>
    7788:	f240 115d 	movw	r1, #349	; 0x15d
    778c:	e7ab      	b.n	76e6 <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
    778e:	8be7      	ldrh	r7, [r4, #30]
    7790:	b147      	cbz	r7, 77a4 <process_event+0x1e0>
    7792:	4955      	ldr	r1, [pc, #340]	; (78e8 <process_event+0x324>)
    7794:	f44f 72af 	mov.w	r2, #350	; 0x15e
    7798:	4854      	ldr	r0, [pc, #336]	; (78ec <process_event+0x328>)
    779a:	f013 fdb9 	bl	1b310 <assert_print>
    779e:	f44f 71af 	mov.w	r1, #350	; 0x15e
    77a2:	e7a0      	b.n	76e6 <process_event+0x122>
			transit = mgr->transitions->stop;
    77a4:	6923      	ldr	r3, [r4, #16]
    77a6:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    77a8:	b945      	cbnz	r5, 77bc <process_event+0x1f8>
    77aa:	494f      	ldr	r1, [pc, #316]	; (78e8 <process_event+0x324>)
    77ac:	f240 1261 	movw	r2, #353	; 0x161
    77b0:	484e      	ldr	r0, [pc, #312]	; (78ec <process_event+0x328>)
    77b2:	f013 fdad 	bl	1b310 <assert_print>
    77b6:	f240 1161 	movw	r1, #353	; 0x161
    77ba:	e794      	b.n	76e6 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    77bc:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    77be:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    77c0:	f023 0307 	bic.w	r3, r3, #7
    77c4:	f043 0304 	orr.w	r3, r3, #4
    77c8:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    77ca:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    77ce:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    77d0:	e7b8      	b.n	7744 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    77d2:	2901      	cmp	r1, #1
    77d4:	d008      	beq.n	77e8 <process_event+0x224>
    77d6:	4944      	ldr	r1, [pc, #272]	; (78e8 <process_event+0x324>)
    77d8:	f44f 72b2 	mov.w	r2, #356	; 0x164
    77dc:	4843      	ldr	r0, [pc, #268]	; (78ec <process_event+0x328>)
    77de:	f013 fd97 	bl	1b310 <assert_print>
    77e2:	f44f 71b2 	mov.w	r1, #356	; 0x164
    77e6:	e77e      	b.n	76e6 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    77e8:	6823      	ldr	r3, [r4, #0]
    77ea:	b943      	cbnz	r3, 77fe <process_event+0x23a>
    77ec:	493e      	ldr	r1, [pc, #248]	; (78e8 <process_event+0x324>)
    77ee:	f240 1265 	movw	r2, #357	; 0x165
    77f2:	483e      	ldr	r0, [pc, #248]	; (78ec <process_event+0x328>)
    77f4:	f013 fd8c 	bl	1b310 <assert_print>
    77f8:	f240 1165 	movw	r1, #357	; 0x165
    77fc:	e773      	b.n	76e6 <process_event+0x122>
			transit = mgr->transitions->reset;
    77fe:	6923      	ldr	r3, [r4, #16]
    7800:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    7802:	b945      	cbnz	r5, 7816 <process_event+0x252>
    7804:	4938      	ldr	r1, [pc, #224]	; (78e8 <process_event+0x324>)
    7806:	f44f 72b4 	mov.w	r2, #360	; 0x168
    780a:	4838      	ldr	r0, [pc, #224]	; (78ec <process_event+0x328>)
    780c:	f013 fd80 	bl	1b310 <assert_print>
    7810:	f44f 71b4 	mov.w	r1, #360	; 0x168
    7814:	e767      	b.n	76e6 <process_event+0x122>
	mgr->flags = (state & ONOFF_STATE_MASK)
    7816:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7818:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    781a:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    781c:	f023 0307 	bic.w	r3, r3, #7
    7820:	f043 0305 	orr.w	r3, r3, #5
    7824:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    7826:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    782a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    782c:	e78a      	b.n	7744 <process_event+0x180>
			__ASSERT_NO_MSG(false);
    782e:	492e      	ldr	r1, [pc, #184]	; (78e8 <process_event+0x324>)
    7830:	f240 126b 	movw	r2, #363	; 0x16b
    7834:	482d      	ldr	r0, [pc, #180]	; (78ec <process_event+0x328>)
    7836:	f013 fd6b 	bl	1b310 <assert_print>
    783a:	f240 116b 	movw	r1, #363	; 0x16b
    783e:	e752      	b.n	76e6 <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
    7840:	2700      	movs	r7, #0
    7842:	2500      	movs	r5, #0
    7844:	e77e      	b.n	7744 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    7846:	f04f 0a01 	mov.w	sl, #1
    784a:	e783      	b.n	7754 <process_event+0x190>
    784c:	4692      	mov	sl, r2
    784e:	e781      	b.n	7754 <process_event+0x190>
    7850:	f386 8811 	msr	BASEPRI, r6
    7854:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    7858:	f1ba 0f00 	cmp.w	sl, #0
    785c:	d117      	bne.n	788e <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
    785e:	bb4f      	cbnz	r7, 78b4 <process_event+0x2f0>
			if (transit != NULL) {
    7860:	b115      	cbz	r5, 7868 <process_event+0x2a4>
				transit(mgr, transition_complete);
    7862:	4620      	mov	r0, r4
    7864:	4923      	ldr	r1, [pc, #140]	; (78f4 <process_event+0x330>)
    7866:	47a8      	blx	r5
	__asm__ volatile(
    7868:	f04f 0320 	mov.w	r3, #32
    786c:	f3ef 8611 	mrs	r6, BASEPRI
    7870:	f383 8812 	msr	BASEPRI_MAX, r3
    7874:	f3bf 8f6f 	isb	sy
    7878:	4658      	mov	r0, fp
    787a:	f00e fd3b 	bl	162f4 <z_spin_lock_valid>
    787e:	bb08      	cbnz	r0, 78c4 <process_event+0x300>
    7880:	491b      	ldr	r1, [pc, #108]	; (78f0 <process_event+0x32c>)
    7882:	2294      	movs	r2, #148	; 0x94
    7884:	4819      	ldr	r0, [pc, #100]	; (78ec <process_event+0x328>)
    7886:	f013 fd43 	bl	1b310 <assert_print>
    788a:	2194      	movs	r1, #148	; 0x94
    788c:	e772      	b.n	7774 <process_event+0x1b0>
	return list->head;
    788e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7890:	2900      	cmp	r1, #0
    7892:	d0e4      	beq.n	785e <process_event+0x29a>
	return node->next;
    7894:	680e      	ldr	r6, [r1, #0]
    7896:	2900      	cmp	r1, #0
    7898:	d0e1      	beq.n	785e <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
    789a:	4643      	mov	r3, r8
    789c:	464a      	mov	r2, r9
    789e:	4620      	mov	r0, r4
    78a0:	f8d1 a004 	ldr.w	sl, [r1, #4]
    78a4:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    78a6:	b11e      	cbz	r6, 78b0 <process_event+0x2ec>
    78a8:	6833      	ldr	r3, [r6, #0]
    78aa:	4631      	mov	r1, r6
    78ac:	461e      	mov	r6, r3
    78ae:	e7f2      	b.n	7896 <process_event+0x2d2>
    78b0:	4633      	mov	r3, r6
    78b2:	e7fa      	b.n	78aa <process_event+0x2e6>
    78b4:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    78b6:	4643      	mov	r3, r8
    78b8:	464a      	mov	r2, r9
    78ba:	4620      	mov	r0, r4
    78bc:	683f      	ldr	r7, [r7, #0]
    78be:	f013 fc9d 	bl	1b1fc <notify_one>
    78c2:	e7cc      	b.n	785e <process_event+0x29a>
	z_spin_lock_set_owner(l);
    78c4:	4658      	mov	r0, fp
    78c6:	f00e fd31 	bl	1632c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    78ca:	8ba3      	ldrh	r3, [r4, #28]
    78cc:	f023 0308 	bic.w	r3, r3, #8
    78d0:	83a3      	strh	r3, [r4, #28]
    78d2:	e6dd      	b.n	7690 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    78d4:	068b      	lsls	r3, r1, #26
    78d6:	f57f ae97 	bpl.w	7608 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    78da:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    78de:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    78e0:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    78e4:	e67a      	b.n	75dc <process_event+0x18>
    78e6:	bf00      	nop
    78e8:	00022210 	.word	0x00022210
    78ec:	000221f8 	.word	0x000221f8
    78f0:	00022232 	.word	0x00022232
    78f4:	000078f9 	.word	0x000078f9

000078f8 <transition_complete>:
{
    78f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78fa:	4604      	mov	r4, r0
    78fc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    78fe:	f100 0614 	add.w	r6, r0, #20
    7902:	f04f 0320 	mov.w	r3, #32
    7906:	f3ef 8711 	mrs	r7, BASEPRI
    790a:	f383 8812 	msr	BASEPRI_MAX, r3
    790e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7912:	4630      	mov	r0, r6
    7914:	f00e fcee 	bl	162f4 <z_spin_lock_valid>
    7918:	b940      	cbnz	r0, 792c <transition_complete+0x34>
    791a:	490a      	ldr	r1, [pc, #40]	; (7944 <transition_complete+0x4c>)
    791c:	480a      	ldr	r0, [pc, #40]	; (7948 <transition_complete+0x50>)
    791e:	2294      	movs	r2, #148	; 0x94
    7920:	f013 fcf6 	bl	1b310 <assert_print>
    7924:	2194      	movs	r1, #148	; 0x94
    7926:	4807      	ldr	r0, [pc, #28]	; (7944 <transition_complete+0x4c>)
    7928:	f013 fceb 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
    792c:	4630      	mov	r0, r6
    792e:	f00e fcfd 	bl	1632c <z_spin_lock_set_owner>
	mgr->last_res = res;
    7932:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    7934:	463a      	mov	r2, r7
    7936:	4620      	mov	r0, r4
}
    7938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    793c:	2101      	movs	r1, #1
    793e:	f7ff be41 	b.w	75c4 <process_event>
    7942:	bf00      	nop
    7944:	00022232 	.word	0x00022232
    7948:	000221f8 	.word	0x000221f8

0000794c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7950:	4604      	mov	r4, r0
    7952:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7954:	f013 fc42 	bl	1b1dc <validate_args>

	if (rv < 0) {
    7958:	1e05      	subs	r5, r0, #0
    795a:	db5c      	blt.n	7a16 <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    795c:	f104 0914 	add.w	r9, r4, #20
    7960:	f04f 0320 	mov.w	r3, #32
    7964:	f3ef 8a11 	mrs	sl, BASEPRI
    7968:	f383 8812 	msr	BASEPRI_MAX, r3
    796c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7970:	4648      	mov	r0, r9
    7972:	f00e fcbf 	bl	162f4 <z_spin_lock_valid>
    7976:	4680      	mov	r8, r0
    7978:	b938      	cbnz	r0, 798a <onoff_request+0x3e>
    797a:	4932      	ldr	r1, [pc, #200]	; (7a44 <onoff_request+0xf8>)
    797c:	2294      	movs	r2, #148	; 0x94
    797e:	4832      	ldr	r0, [pc, #200]	; (7a48 <onoff_request+0xfc>)
    7980:	f013 fcc6 	bl	1b310 <assert_print>
    7984:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7986:	482f      	ldr	r0, [pc, #188]	; (7a44 <onoff_request+0xf8>)
    7988:	e03a      	b.n	7a00 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
    798a:	4648      	mov	r0, r9
    798c:	f00e fcce 	bl	1632c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7990:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7994:	8be3      	ldrh	r3, [r4, #30]
    7996:	8ba6      	ldrh	r6, [r4, #28]
    7998:	4293      	cmp	r3, r2
    799a:	f006 0607 	and.w	r6, r6, #7
    799e:	d03d      	beq.n	7a1c <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    79a0:	2e02      	cmp	r6, #2
    79a2:	d10e      	bne.n	79c2 <onoff_request+0x76>
	rv = state;
    79a4:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    79a6:	3301      	adds	r3, #1
    79a8:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79aa:	4648      	mov	r0, r9
    79ac:	f00e fcb0 	bl	16310 <z_spin_unlock_valid>
    79b0:	2800      	cmp	r0, #0
    79b2:	d139      	bne.n	7a28 <onoff_request+0xdc>
    79b4:	4923      	ldr	r1, [pc, #140]	; (7a44 <onoff_request+0xf8>)
    79b6:	22c2      	movs	r2, #194	; 0xc2
    79b8:	4823      	ldr	r0, [pc, #140]	; (7a48 <onoff_request+0xfc>)
    79ba:	f013 fca9 	bl	1b310 <assert_print>
    79be:	21c2      	movs	r1, #194	; 0xc2
    79c0:	e7e1      	b.n	7986 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    79c2:	2e06      	cmp	r6, #6
    79c4:	d813      	bhi.n	79ee <onoff_request+0xa2>
    79c6:	e8df f006 	tbb	[pc, r6]
    79ca:	2c09      	.short	0x2c09
    79cc:	04091212 	.word	0x04091212
    79d0:	09          	.byte	0x09
    79d1:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    79d2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    79d6:	f04f 0800 	mov.w	r8, #0
    79da:	e7e6      	b.n	79aa <onoff_request+0x5e>
	parent->next = child;
    79dc:	2300      	movs	r3, #0
    79de:	603b      	str	r3, [r7, #0]
	return list->tail;
    79e0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    79e2:	b97b      	cbnz	r3, 7a04 <onoff_request+0xb8>
	list->head = node;
    79e4:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    79e8:	b17e      	cbz	r6, 7a0a <onoff_request+0xbe>
	rv = state;
    79ea:	4635      	mov	r5, r6
    79ec:	e7f3      	b.n	79d6 <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    79ee:	4917      	ldr	r1, [pc, #92]	; (7a4c <onoff_request+0x100>)
    79f0:	4815      	ldr	r0, [pc, #84]	; (7a48 <onoff_request+0xfc>)
    79f2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    79f6:	f013 fc8b 	bl	1b310 <assert_print>
    79fa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    79fe:	4813      	ldr	r0, [pc, #76]	; (7a4c <onoff_request+0x100>)
    7a00:	f013 fc7f 	bl	1b302 <assert_post_action>
	parent->next = child;
    7a04:	601f      	str	r7, [r3, #0]
	list->tail = node;
    7a06:	6067      	str	r7, [r4, #4]
}
    7a08:	e7ee      	b.n	79e8 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
    7a0a:	4652      	mov	r2, sl
    7a0c:	2102      	movs	r1, #2
    7a0e:	4620      	mov	r0, r4
    7a10:	f7ff fdd8 	bl	75c4 <process_event>
    7a14:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7a16:	4628      	mov	r0, r5
    7a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    7a1c:	f06f 050a 	mvn.w	r5, #10
    7a20:	e7d9      	b.n	79d6 <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
    7a22:	f06f 0504 	mvn.w	r5, #4
    7a26:	e7d6      	b.n	79d6 <onoff_request+0x8a>
	__asm__ volatile(
    7a28:	f38a 8811 	msr	BASEPRI, sl
    7a2c:	f3bf 8f6f 	isb	sy
		if (notify) {
    7a30:	f1b8 0f00 	cmp.w	r8, #0
    7a34:	d0ef      	beq.n	7a16 <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
    7a36:	2300      	movs	r3, #0
    7a38:	4632      	mov	r2, r6
    7a3a:	4639      	mov	r1, r7
    7a3c:	4620      	mov	r0, r4
    7a3e:	f013 fbdd 	bl	1b1fc <notify_one>
    7a42:	e7e8      	b.n	7a16 <onoff_request+0xca>
    7a44:	00022232 	.word	0x00022232
    7a48:	000221f8 	.word	0x000221f8
    7a4c:	00022210 	.word	0x00022210

00007a50 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7a50:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7a52:	6842      	ldr	r2, [r0, #4]
    7a54:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    7a56:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    7a5a:	2a02      	cmp	r2, #2
	notify->result = res;
    7a5c:	6081      	str	r1, [r0, #8]
	switch (method) {
    7a5e:	d00a      	beq.n	7a76 <sys_notify_finalize+0x26>
    7a60:	2a03      	cmp	r2, #3
    7a62:	f04f 0100 	mov.w	r1, #0
    7a66:	d003      	beq.n	7a70 <sys_notify_finalize+0x20>
    7a68:	2a01      	cmp	r2, #1
    7a6a:	d10a      	bne.n	7a82 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7a6c:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    7a6e:	e006      	b.n	7a7e <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    7a70:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7a72:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7a74:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    7a76:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7a78:	2200      	movs	r2, #0
    7a7a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    7a7c:	b950      	cbnz	r0, 7a94 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
    7a7e:	2000      	movs	r0, #0
    7a80:	e7f8      	b.n	7a74 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    7a82:	4906      	ldr	r1, [pc, #24]	; (7a9c <sys_notify_finalize+0x4c>)
    7a84:	4806      	ldr	r0, [pc, #24]	; (7aa0 <sys_notify_finalize+0x50>)
    7a86:	2245      	movs	r2, #69	; 0x45
    7a88:	f013 fc42 	bl	1b310 <assert_print>
    7a8c:	2145      	movs	r1, #69	; 0x45
    7a8e:	4803      	ldr	r0, [pc, #12]	; (7a9c <sys_notify_finalize+0x4c>)
    7a90:	f013 fc37 	bl	1b302 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    7a94:	f011 fac0 	bl	19018 <z_impl_k_poll_signal_raise>
    7a98:	e7f1      	b.n	7a7e <sys_notify_finalize+0x2e>
    7a9a:	bf00      	nop
    7a9c:	0002225f 	.word	0x0002225f
    7aa0:	000221f8 	.word	0x000221f8

00007aa4 <extract_decimal>:
{
    7aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aa6:	4602      	mov	r2, r0
    7aa8:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
    7aaa:	270a      	movs	r7, #10
	size_t val = 0;
    7aac:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    7aae:	4e07      	ldr	r6, [pc, #28]	; (7acc <extract_decimal+0x28>)
    7ab0:	460b      	mov	r3, r1
    7ab2:	781c      	ldrb	r4, [r3, #0]
    7ab4:	3101      	adds	r1, #1
    7ab6:	5d35      	ldrb	r5, [r6, r4]
    7ab8:	076d      	lsls	r5, r5, #29
    7aba:	d401      	bmi.n	7ac0 <extract_decimal+0x1c>
	*str = sp;
    7abc:	6013      	str	r3, [r2, #0]
}
    7abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    7ac0:	fb07 4300 	mla	r3, r7, r0, r4
    7ac4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    7ac8:	e7f2      	b.n	7ab0 <extract_decimal+0xc>
    7aca:	bf00      	nop
    7acc:	00025477 	.word	0x00025477

00007ad0 <encode_uint>:
{
    7ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ad4:	4615      	mov	r5, r2
    7ad6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7ad8:	78d3      	ldrb	r3, [r2, #3]
    7ada:	4a22      	ldr	r2, [pc, #136]	; (7b64 <encode_uint+0x94>)
	switch (specifier) {
    7adc:	2b6f      	cmp	r3, #111	; 0x6f
    7ade:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    7ae2:	4680      	mov	r8, r0
    7ae4:	460f      	mov	r7, r1
    7ae6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    7aea:	d029      	beq.n	7b40 <encode_uint+0x70>
    7aec:	d824      	bhi.n	7b38 <encode_uint+0x68>
		return 10;
    7aee:	2b58      	cmp	r3, #88	; 0x58
    7af0:	bf0c      	ite	eq
    7af2:	2610      	moveq	r6, #16
    7af4:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    7af6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7afa:	4632      	mov	r2, r6
    7afc:	2300      	movs	r3, #0
    7afe:	4640      	mov	r0, r8
    7b00:	4639      	mov	r1, r7
    7b02:	f7fd fa91 	bl	5028 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b06:	2a09      	cmp	r2, #9
    7b08:	b2d4      	uxtb	r4, r2
    7b0a:	d81e      	bhi.n	7b4a <encode_uint+0x7a>
    7b0c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7b0e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b10:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7b12:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b16:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7b1a:	d301      	bcc.n	7b20 <encode_uint+0x50>
    7b1c:	45d1      	cmp	r9, sl
    7b1e:	d811      	bhi.n	7b44 <encode_uint+0x74>
	if (conv->flag_hash) {
    7b20:	782b      	ldrb	r3, [r5, #0]
    7b22:	069b      	lsls	r3, r3, #26
    7b24:	d505      	bpl.n	7b32 <encode_uint+0x62>
		if (radix == 8) {
    7b26:	2e08      	cmp	r6, #8
    7b28:	d115      	bne.n	7b56 <encode_uint+0x86>
			conv->altform_0 = true;
    7b2a:	78ab      	ldrb	r3, [r5, #2]
    7b2c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7b30:	70ab      	strb	r3, [r5, #2]
}
    7b32:	4648      	mov	r0, r9
    7b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7b38:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    7b3c:	2b70      	cmp	r3, #112	; 0x70
    7b3e:	e7d7      	b.n	7af0 <encode_uint+0x20>
	switch (specifier) {
    7b40:	2608      	movs	r6, #8
    7b42:	e7d8      	b.n	7af6 <encode_uint+0x26>
		value /= radix;
    7b44:	4680      	mov	r8, r0
    7b46:	460f      	mov	r7, r1
    7b48:	e7d7      	b.n	7afa <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b4a:	f1bb 0f01 	cmp.w	fp, #1
    7b4e:	bf0c      	ite	eq
    7b50:	3437      	addeq	r4, #55	; 0x37
    7b52:	3457      	addne	r4, #87	; 0x57
    7b54:	e7db      	b.n	7b0e <encode_uint+0x3e>
		} else if (radix == 16) {
    7b56:	2e10      	cmp	r6, #16
    7b58:	d1eb      	bne.n	7b32 <encode_uint+0x62>
			conv->altform_0c = true;
    7b5a:	78ab      	ldrb	r3, [r5, #2]
    7b5c:	f043 0310 	orr.w	r3, r3, #16
    7b60:	e7e6      	b.n	7b30 <encode_uint+0x60>
    7b62:	bf00      	nop
    7b64:	00025477 	.word	0x00025477

00007b68 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    7b68:	b508      	push	{r3, lr}
	__asm__ volatile(
    7b6a:	f04f 0220 	mov.w	r2, #32
    7b6e:	f3ef 8311 	mrs	r3, BASEPRI
    7b72:	f382 8812 	msr	BASEPRI_MAX, r2
    7b76:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    7b7a:	f002 fad5 	bl	a128 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    7b7e:	4803      	ldr	r0, [pc, #12]	; (7b8c <sys_reboot+0x24>)
    7b80:	f013 f91b 	bl	1adba <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    7b84:	f001 fe72 	bl	986c <arch_cpu_idle>
    7b88:	e7fc      	b.n	7b84 <sys_reboot+0x1c>
    7b8a:	bf00      	nop
    7b8c:	00022288 	.word	0x00022288

00007b90 <nrf_gpio_pin_control_select>:
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    7b90:	b508      	push	{r3, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    7b92:	0943      	lsrs	r3, r0, #5
    7b94:	d00c      	beq.n	7bb0 <nrf_gpio_pin_control_select+0x20>
    7b96:	2b01      	cmp	r3, #1
    7b98:	d01b      	beq.n	7bd2 <nrf_gpio_pin_control_select+0x42>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b9a:	4912      	ldr	r1, [pc, #72]	; (7be4 <nrf_gpio_pin_control_select+0x54>)
    7b9c:	4812      	ldr	r0, [pc, #72]	; (7be8 <nrf_gpio_pin_control_select+0x58>)
    7b9e:	f240 2247 	movw	r2, #583	; 0x247
    7ba2:	f013 fbb5 	bl	1b310 <assert_print>
    7ba6:	f240 2147 	movw	r1, #583	; 0x247
    7baa:	480e      	ldr	r0, [pc, #56]	; (7be4 <nrf_gpio_pin_control_select+0x54>)
    7bac:	f013 fba9 	bl	1b302 <assert_post_action>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
    7bb0:	f04f 33ff 	mov.w	r3, #4294967295
    7bb4:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7bb6:	07da      	lsls	r2, r3, #31
    7bb8:	d5ef      	bpl.n	7b9a <nrf_gpio_pin_control_select+0xa>
        case 0: return NRF_P0;
    7bba:	4b0c      	ldr	r3, [pc, #48]	; (7bec <nrf_gpio_pin_control_select+0x5c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    7bbc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7bc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7bc4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    7bc8:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
    7bcc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
}
    7bd0:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
    7bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7bd6:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7bda:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7bdc:	07db      	lsls	r3, r3, #31
    7bde:	d5dc      	bpl.n	7b9a <nrf_gpio_pin_control_select+0xa>
        case 1: return NRF_P1;
    7be0:	4b03      	ldr	r3, [pc, #12]	; (7bf0 <nrf_gpio_pin_control_select+0x60>)
    7be2:	e7eb      	b.n	7bbc <nrf_gpio_pin_control_select+0x2c>
    7be4:	000222b1 	.word	0x000222b1
    7be8:	000221f8 	.word	0x000221f8
    7bec:	50842500 	.word	0x50842500
    7bf0:	50842800 	.word	0x50842800

00007bf4 <nordicsemi_nrf53_init>:
	return true;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    7bf4:	b570      	push	{r4, r5, r6, lr}
    7bf6:	f04f 0320 	mov.w	r3, #32
    7bfa:	f3ef 8611 	mrs	r6, BASEPRI
    7bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    7c02:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    7c06:	2501      	movs	r5, #1
    7c08:	4b20      	ldr	r3, [pc, #128]	; (7c8c <nordicsemi_nrf53_init+0x98>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    7c0a:	4c21      	ldr	r4, [pc, #132]	; (7c90 <nordicsemi_nrf53_init+0x9c>)
    7c0c:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    7c10:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    7c12:	2103      	movs	r1, #3
    7c14:	f8c4 36d0 	str.w	r3, [r4, #1744]	; 0x6d0
    7c18:	2000      	movs	r0, #0
    7c1a:	f7ff ffb9 	bl	7b90 <nrf_gpio_pin_control_select>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    7c1e:	2103      	movs	r1, #3
    7c20:	4628      	mov	r0, r5
    7c22:	f7ff ffb5 	bl	7b90 <nrf_gpio_pin_control_select>
	*((volatile uint32_t *)0x5000470C) = 0x7Eul;
    7c26:	237e      	movs	r3, #126	; 0x7e
    7c28:	f8c4 370c 	str.w	r3, [r4, #1804]	; 0x70c
	*((volatile uint32_t *)0x5000493C) = 0x7Eul;
    7c2c:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
    7c30:	237f      	movs	r3, #127	; 0x7f
    7c32:	4a18      	ldr	r2, [pc, #96]	; (7c94 <nordicsemi_nrf53_init+0xa0>)
	*((volatile uint32_t *)0x50039E04) = 0x0ul;
    7c34:	4918      	ldr	r1, [pc, #96]	; (7c98 <nordicsemi_nrf53_init+0xa4>)
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
    7c36:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	*((volatile uint32_t *)0x50039E04) = 0x0ul;
    7c3a:	2300      	movs	r3, #0
    7c3c:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
	*((volatile uint32_t *)0x50039E08) = 0x0ul;
    7c40:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
	*((volatile uint32_t *)0x50101110) = 0x0ul;
    7c44:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    7c48:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
	*((volatile uint32_t *)0x50002124) = 0x0ul;
    7c4c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	*((volatile uint32_t *)0x5000212C) = 0x0ul;
    7c50:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	*((volatile uint32_t *)0x502012A0) = 0x0ul;
    7c54:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    7c58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7c5c:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    7c60:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    7c64:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    7c68:	f8c4 5b00 	str.w	r5, [r4, #2816]	; 0xb00
#if defined(CONFIG_SOC_NRF_GPIO_FORWARDER_FOR_NRF5340)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
    7c6c:	461c      	mov	r4, r3
    7c6e:	4d0b      	ldr	r5, [pc, #44]	; (7c9c <nordicsemi_nrf53_init+0xa8>)

#if NRF_GPIO_HAS_SEL
static inline void soc_secure_gpio_pin_mcu_select(uint32_t pin_number,
						  nrf_gpio_pin_sel_t mcu)
{
	nrf_gpio_pin_control_select(pin_number, mcu);
    7c70:	2101      	movs	r1, #1
    7c72:	f815 0b01 	ldrb.w	r0, [r5], #1
    7c76:	3401      	adds	r4, #1
    7c78:	f7ff ff8a 	bl	7b90 <nrf_gpio_pin_control_select>
    7c7c:	2c06      	cmp	r4, #6
    7c7e:	d1f7      	bne.n	7c70 <nordicsemi_nrf53_init+0x7c>
	__asm__ volatile(
    7c80:	f386 8811 	msr	BASEPRI, r6
    7c84:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7c88:	2000      	movs	r0, #0
    7c8a:	bd70      	pop	{r4, r5, r6, pc}
    7c8c:	50001000 	.word	0x50001000
    7c90:	50004000 	.word	0x50004000
    7c94:	50002000 	.word	0x50002000
    7c98:	50039000 	.word	0x50039000
    7c9c:	00022312 	.word	0x00022312

00007ca0 <z_arm_on_enter_cpu_idle>:
{
    7ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    7ca2:	2305      	movs	r3, #5
    7ca4:	4d19      	ldr	r5, [pc, #100]	; (7d0c <z_arm_on_enter_cpu_idle+0x6c>)
    7ca6:	4f1a      	ldr	r7, [pc, #104]	; (7d10 <z_arm_on_enter_cpu_idle+0x70>)
    7ca8:	782c      	ldrb	r4, [r5, #0]
    7caa:	4e1a      	ldr	r6, [pc, #104]	; (7d14 <z_arm_on_enter_cpu_idle+0x74>)
    7cac:	3401      	adds	r4, #1
    7cae:	fbb4 f3f3 	udiv	r3, r4, r3
    7cb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7cb6:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7cb8:	f015 fd7c 	bl	1d7b4 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    7cbc:	4a16      	ldr	r2, [pc, #88]	; (7d18 <z_arm_on_enter_cpu_idle+0x78>)
    7cbe:	7813      	ldrb	r3, [r2, #0]
    7cc0:	b173      	cbz	r3, 7ce0 <z_arm_on_enter_cpu_idle+0x40>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    7cc2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7cc6:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    7cc8:	2807      	cmp	r0, #7
    7cca:	d809      	bhi.n	7ce0 <z_arm_on_enter_cpu_idle+0x40>
		if (!suppress_warning) {
    7ccc:	7833      	ldrb	r3, [r6, #0]
    7cce:	b92b      	cbnz	r3, 7cdc <z_arm_on_enter_cpu_idle+0x3c>
			LOG_WRN("Anomaly 160 trigger conditions detected.");
    7cd0:	2157      	movs	r1, #87	; 0x57
    7cd2:	4812      	ldr	r0, [pc, #72]	; (7d1c <z_arm_on_enter_cpu_idle+0x7c>)
    7cd4:	f013 fb30 	bl	1b338 <z_log_minimal_printk>
			suppress_warning = true;
    7cd8:	2301      	movs	r3, #1
    7cda:	7033      	strb	r3, [r6, #0]
		return false;
    7cdc:	2000      	movs	r0, #0
}
    7cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	suppress_warning = false;
    7ce0:	2100      	movs	r1, #0
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ce2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7ce6:	7031      	strb	r1, [r6, #0]
    7ce8:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    7cec:	b138      	cbz	r0, 7cfe <z_arm_on_enter_cpu_idle+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cee:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7cf2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    7cf6:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    7cf8:	b90c      	cbnz	r4, 7cfe <z_arm_on_enter_cpu_idle+0x5e>
			timestamps_filled = true;
    7cfa:	2301      	movs	r3, #1
    7cfc:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    7cfe:	782c      	ldrb	r4, [r5, #0]
    7d00:	f015 fd58 	bl	1d7b4 <sys_clock_cycle_get_32>
    7d04:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	return true;
    7d08:	2001      	movs	r0, #1
    7d0a:	e7e8      	b.n	7cde <z_arm_on_enter_cpu_idle+0x3e>
    7d0c:	200071dc 	.word	0x200071dc
    7d10:	20006314 	.word	0x20006314
    7d14:	200071da 	.word	0x200071da
    7d18:	200071db 	.word	0x200071db
    7d1c:	000222e4 	.word	0x000222e4

00007d20 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7d20:	b148      	cbz	r0, 7d36 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    7d22:	4b05      	ldr	r3, [pc, #20]	; (7d38 <arch_busy_wait+0x18>)
    7d24:	4a05      	ldr	r2, [pc, #20]	; (7d3c <arch_busy_wait+0x1c>)
    7d26:	681b      	ldr	r3, [r3, #0]
    7d28:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    7d2c:	4358      	muls	r0, r3
    7d2e:	4b04      	ldr	r3, [pc, #16]	; (7d40 <arch_busy_wait+0x20>)
    7d30:	f043 0301 	orr.w	r3, r3, #1
    7d34:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7d36:	4770      	bx	lr
    7d38:	20000434 	.word	0x20000434
    7d3c:	000f4240 	.word	0x000f4240
    7d40:	0001fbd0 	.word	0x0001fbd0

00007d44 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7d44:	2806      	cmp	r0, #6
    7d46:	d107      	bne.n	7d58 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    7d48:	2201      	movs	r2, #1
    7d4a:	4b04      	ldr	r3, [pc, #16]	; (7d5c <pm_state_set+0x18>)
    7d4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7d50:	f3bf 8f4f 	dsb	sy
        __WFE();
    7d54:	bf20      	wfe
    while (true)
    7d56:	e7fd      	b.n	7d54 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7d58:	4770      	bx	lr
    7d5a:	bf00      	nop
    7d5c:	50004000 	.word	0x50004000

00007d60 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7d60:	f00b ba3c 	b.w	131dc <SystemInit>

00007d64 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    7d64:	b510      	push	{r4, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    7d66:	b930      	cbnz	r0, 7d76 <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid instance");
    7d68:	480b      	ldr	r0, [pc, #44]	; (7d98 <ipc_service_open_instance+0x34>)
    7d6a:	2145      	movs	r1, #69	; 0x45
    7d6c:	f013 fae4 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
    7d70:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    7d74:	bd10      	pop	{r4, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    7d76:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    7d78:	b933      	cbnz	r3, 7d88 <ipc_service_open_instance+0x24>
		LOG_ERR("Invalid backend configuration");
    7d7a:	4808      	ldr	r0, [pc, #32]	; (7d9c <ipc_service_open_instance+0x38>)
    7d7c:	2145      	movs	r1, #69	; 0x45
    7d7e:	f013 fadb 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    7d82:	f06f 0004 	mvn.w	r0, #4
    7d86:	e7f5      	b.n	7d74 <ipc_service_open_instance+0x10>
	if (!backend->open_instance) {
    7d88:	681b      	ldr	r3, [r3, #0]
    7d8a:	b113      	cbz	r3, 7d92 <ipc_service_open_instance+0x2e>
}
    7d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return backend->open_instance(instance);
    7d90:	4718      	bx	r3
		return 0;
    7d92:	4618      	mov	r0, r3
    7d94:	e7ee      	b.n	7d74 <ipc_service_open_instance+0x10>
    7d96:	bf00      	nop
    7d98:	0002231c 	.word	0x0002231c
    7d9c:	00022332 	.word	0x00022332

00007da0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    7da0:	b570      	push	{r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    7da2:	b108      	cbz	r0, 7da8 <ipc_service_register_endpoint+0x8>
    7da4:	b101      	cbz	r1, 7da8 <ipc_service_register_endpoint+0x8>
    7da6:	b932      	cbnz	r2, 7db6 <ipc_service_register_endpoint+0x16>
		LOG_ERR("Invalid instance, endpoint or configuration");
    7da8:	480b      	ldr	r0, [pc, #44]	; (7dd8 <ipc_service_register_endpoint+0x38>)
    7daa:	2145      	movs	r1, #69	; 0x45
    7dac:	f013 fac4 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
    7db0:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    7db4:	bd70      	pop	{r4, r5, r6, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    7db6:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    7db8:	b10c      	cbz	r4, 7dbe <ipc_service_register_endpoint+0x1e>
    7dba:	68e5      	ldr	r5, [r4, #12]
    7dbc:	b935      	cbnz	r5, 7dcc <ipc_service_register_endpoint+0x2c>
		LOG_ERR("Invalid backend configuration");
    7dbe:	4807      	ldr	r0, [pc, #28]	; (7ddc <ipc_service_register_endpoint+0x3c>)
    7dc0:	2145      	movs	r1, #69	; 0x45
    7dc2:	f013 fab9 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    7dc6:	f06f 0004 	mvn.w	r0, #4
    7dca:	e7f3      	b.n	7db4 <ipc_service_register_endpoint+0x14>
	ept->instance = instance;
    7dcc:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    7dd0:	68e3      	ldr	r3, [r4, #12]
}
    7dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    7dd6:	4718      	bx	r3
    7dd8:	00022355 	.word	0x00022355
    7ddc:	00022332 	.word	0x00022332

00007de0 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    7de0:	b570      	push	{r4, r5, r6, lr}
    7de2:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    7de4:	4604      	mov	r4, r0
    7de6:	b930      	cbnz	r0, 7df6 <ipc_service_send+0x16>
		LOG_ERR("Invalid endpoint");
    7de8:	4810      	ldr	r0, [pc, #64]	; (7e2c <ipc_service_send+0x4c>)
    7dea:	2145      	movs	r1, #69	; 0x45
    7dec:	f013 faa4 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
    7df0:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    7df4:	bd70      	pop	{r4, r5, r6, pc}
	if (!ept->instance) {
    7df6:	6800      	ldr	r0, [r0, #0]
    7df8:	b930      	cbnz	r0, 7e08 <ipc_service_send+0x28>
		LOG_ERR("Endpoint not registered\n");
    7dfa:	480d      	ldr	r0, [pc, #52]	; (7e30 <ipc_service_send+0x50>)
    7dfc:	2145      	movs	r1, #69	; 0x45
    7dfe:	f013 fa9b 	bl	1b338 <z_log_minimal_printk>
		return -ENOENT;
    7e02:	f06f 0001 	mvn.w	r0, #1
    7e06:	e7f5      	b.n	7df4 <ipc_service_send+0x14>
	backend = ept->instance->api;
    7e08:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    7e0a:	b10a      	cbz	r2, 7e10 <ipc_service_send+0x30>
    7e0c:	6895      	ldr	r5, [r2, #8]
    7e0e:	b935      	cbnz	r5, 7e1e <ipc_service_send+0x3e>
		LOG_ERR("Invalid backend configuration");
    7e10:	4808      	ldr	r0, [pc, #32]	; (7e34 <ipc_service_send+0x54>)
    7e12:	2145      	movs	r1, #69	; 0x45
    7e14:	f013 fa90 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    7e18:	f06f 0004 	mvn.w	r0, #4
    7e1c:	e7ea      	b.n	7df4 <ipc_service_send+0x14>
	return backend->send(ept->instance, ept->token, data, len);
    7e1e:	460a      	mov	r2, r1
    7e20:	46ac      	mov	ip, r5
    7e22:	6861      	ldr	r1, [r4, #4]
}
    7e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return backend->send(ept->instance, ept->token, data, len);
    7e28:	4760      	bx	ip
    7e2a:	bf00      	nop
    7e2c:	00022386 	.word	0x00022386
    7e30:	0002239c 	.word	0x0002239c
    7e34:	00022332 	.word	0x00022332

00007e38 <ipc_service_hold_rx_buffer>:

	return backend->send_nocopy(ept->instance, ept->token, data, len);
}

int ipc_service_hold_rx_buffer(struct ipc_ept *ept, void *data)
{
    7e38:	460a      	mov	r2, r1
	const struct ipc_service_backend *backend;

	if (!ept) {
    7e3a:	4603      	mov	r3, r0
{
    7e3c:	b510      	push	{r4, lr}
	if (!ept) {
    7e3e:	b930      	cbnz	r0, 7e4e <ipc_service_hold_rx_buffer+0x16>
		LOG_ERR("Invalid endpoint");
    7e40:	4812      	ldr	r0, [pc, #72]	; (7e8c <ipc_service_hold_rx_buffer+0x54>)
    7e42:	2145      	movs	r1, #69	; 0x45
    7e44:	f013 fa78 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
    7e48:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("No-copy feature not available");
		return -EIO;
	}

	return backend->hold_rx_buffer(ept->instance, ept->token, data);
}
    7e4c:	bd10      	pop	{r4, pc}
	if (!ept->instance) {
    7e4e:	6800      	ldr	r0, [r0, #0]
    7e50:	b930      	cbnz	r0, 7e60 <ipc_service_hold_rx_buffer+0x28>
		LOG_ERR("Endpoint not registered\n");
    7e52:	480f      	ldr	r0, [pc, #60]	; (7e90 <ipc_service_hold_rx_buffer+0x58>)
    7e54:	2145      	movs	r1, #69	; 0x45
    7e56:	f013 fa6f 	bl	1b338 <z_log_minimal_printk>
		return -ENOENT;
    7e5a:	f06f 0001 	mvn.w	r0, #1
    7e5e:	e7f5      	b.n	7e4c <ipc_service_hold_rx_buffer+0x14>
	backend = ept->instance->api;
    7e60:	6881      	ldr	r1, [r0, #8]
	if (!backend) {
    7e62:	b931      	cbnz	r1, 7e72 <ipc_service_hold_rx_buffer+0x3a>
		LOG_ERR("Invalid backend configuration");
    7e64:	2145      	movs	r1, #69	; 0x45
    7e66:	480b      	ldr	r0, [pc, #44]	; (7e94 <ipc_service_hold_rx_buffer+0x5c>)
		LOG_ERR("No-copy feature not available");
    7e68:	f013 fa66 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    7e6c:	f06f 0004 	mvn.w	r0, #4
    7e70:	e7ec      	b.n	7e4c <ipc_service_hold_rx_buffer+0x14>
	if (!backend->release_rx_buffer || !backend->hold_rx_buffer) {
    7e72:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    7e74:	b10c      	cbz	r4, 7e7a <ipc_service_hold_rx_buffer+0x42>
    7e76:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    7e78:	b914      	cbnz	r4, 7e80 <ipc_service_hold_rx_buffer+0x48>
		LOG_ERR("No-copy feature not available");
    7e7a:	2145      	movs	r1, #69	; 0x45
    7e7c:	4806      	ldr	r0, [pc, #24]	; (7e98 <ipc_service_hold_rx_buffer+0x60>)
    7e7e:	e7f3      	b.n	7e68 <ipc_service_hold_rx_buffer+0x30>
	return backend->hold_rx_buffer(ept->instance, ept->token, data);
    7e80:	6859      	ldr	r1, [r3, #4]
    7e82:	4623      	mov	r3, r4
}
    7e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return backend->hold_rx_buffer(ept->instance, ept->token, data);
    7e88:	4718      	bx	r3
    7e8a:	bf00      	nop
    7e8c:	00022386 	.word	0x00022386
    7e90:	0002239c 	.word	0x0002239c
    7e94:	00022332 	.word	0x00022332
    7e98:	000223ba 	.word	0x000223ba

00007e9c <ipc_service_release_rx_buffer>:
int ipc_service_release_rx_buffer(struct ipc_ept *ept, void *data)
{
    7e9c:	460a      	mov	r2, r1
	const struct ipc_service_backend *backend;

	if (!ept) {
    7e9e:	4603      	mov	r3, r0
{
    7ea0:	b510      	push	{r4, lr}
	if (!ept) {
    7ea2:	b930      	cbnz	r0, 7eb2 <ipc_service_release_rx_buffer+0x16>
		LOG_ERR("Invalid endpoint");
    7ea4:	4812      	ldr	r0, [pc, #72]	; (7ef0 <ipc_service_release_rx_buffer+0x54>)
    7ea6:	2145      	movs	r1, #69	; 0x45
    7ea8:	f013 fa46 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
    7eac:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("No-copy feature not available");
		return -EIO;
	}

	return backend->release_rx_buffer(ept->instance, ept->token, data);
}
    7eb0:	bd10      	pop	{r4, pc}
	if (!ept->instance) {
    7eb2:	6800      	ldr	r0, [r0, #0]
    7eb4:	b930      	cbnz	r0, 7ec4 <ipc_service_release_rx_buffer+0x28>
		LOG_ERR("Endpoint not registered\n");
    7eb6:	480f      	ldr	r0, [pc, #60]	; (7ef4 <ipc_service_release_rx_buffer+0x58>)
    7eb8:	2145      	movs	r1, #69	; 0x45
    7eba:	f013 fa3d 	bl	1b338 <z_log_minimal_printk>
		return -ENOENT;
    7ebe:	f06f 0001 	mvn.w	r0, #1
    7ec2:	e7f5      	b.n	7eb0 <ipc_service_release_rx_buffer+0x14>
	backend = ept->instance->api;
    7ec4:	6881      	ldr	r1, [r0, #8]
	if (!backend) {
    7ec6:	b931      	cbnz	r1, 7ed6 <ipc_service_release_rx_buffer+0x3a>
		LOG_ERR("Invalid backend configuration");
    7ec8:	2145      	movs	r1, #69	; 0x45
    7eca:	480b      	ldr	r0, [pc, #44]	; (7ef8 <ipc_service_release_rx_buffer+0x5c>)
		LOG_ERR("No-copy feature not available");
    7ecc:	f013 fa34 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    7ed0:	f06f 0004 	mvn.w	r0, #4
    7ed4:	e7ec      	b.n	7eb0 <ipc_service_release_rx_buffer+0x14>
	if (!backend->hold_rx_buffer || !backend->release_rx_buffer) {
    7ed6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    7ed8:	b10c      	cbz	r4, 7ede <ipc_service_release_rx_buffer+0x42>
    7eda:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    7edc:	b914      	cbnz	r4, 7ee4 <ipc_service_release_rx_buffer+0x48>
		LOG_ERR("No-copy feature not available");
    7ede:	2145      	movs	r1, #69	; 0x45
    7ee0:	4806      	ldr	r0, [pc, #24]	; (7efc <ipc_service_release_rx_buffer+0x60>)
    7ee2:	e7f3      	b.n	7ecc <ipc_service_release_rx_buffer+0x30>
	return backend->release_rx_buffer(ept->instance, ept->token, data);
    7ee4:	6859      	ldr	r1, [r3, #4]
    7ee6:	4623      	mov	r3, r4
}
    7ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return backend->release_rx_buffer(ept->instance, ept->token, data);
    7eec:	4718      	bx	r3
    7eee:	bf00      	nop
    7ef0:	00022386 	.word	0x00022386
    7ef4:	0002239c 	.word	0x0002239c
    7ef8:	00022332 	.word	0x00022332
    7efc:	000223ba 	.word	0x000223ba

00007f00 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    7f00:	b500      	push	{lr}
    7f02:	b097      	sub	sp, #92	; 0x5c
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
    7f04:	2258      	movs	r2, #88	; 0x58
    7f06:	4668      	mov	r0, sp
    7f08:	4906      	ldr	r1, [pc, #24]	; (7f24 <shared_memory_prepare+0x24>)
    7f0a:	f017 fa5b 	bl	1f3c4 <memcpy>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    7f0e:	2200      	movs	r2, #0
    7f10:	4b05      	ldr	r3, [pc, #20]	; (7f28 <shared_memory_prepare+0x28>)
    7f12:	601a      	str	r2, [r3, #0]
	};

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
    7f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f16:	b90b      	cbnz	r3, 7f1c <shared_memory_prepare+0x1c>
    7f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7f1a:	6013      	str	r3, [r2, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    7f1c:	2000      	movs	r0, #0
    7f1e:	b017      	add	sp, #92	; 0x5c
    7f20:	f85d fb04 	ldr.w	pc, [sp], #4
    7f24:	0001fa34 	.word	0x0001fa34
    7f28:	20070000 	.word	0x20070000

00007f2c <advertise_ept>:
{
    7f2c:	b530      	push	{r4, r5, lr}
    7f2e:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    7f30:	490e      	ldr	r1, [pc, #56]	; (7f6c <advertise_ept+0x40>)
{
    7f32:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    7f34:	9102      	str	r1, [sp, #8]
    7f36:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    7f3a:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    7f3c:	e9cd 3100 	strd	r3, r1, [sp]
    7f40:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    7f44:	f04f 33ff 	mov.w	r3, #4294967295
    7f48:	4620      	mov	r0, r4
    7f4a:	f00c fce9 	bl	14920 <rpmsg_create_ept>
	if (err != 0) {
    7f4e:	b950      	cbnz	r0, 7f66 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    7f50:	2301      	movs	r3, #1
    7f52:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    7f56:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    7f5a:	b123      	cbz	r3, 7f66 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    7f5c:	4620      	mov	r0, r4
}
    7f5e:	b005      	add	sp, #20
    7f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    7f64:	4718      	bx	r3
}
    7f66:	b005      	add	sp, #20
    7f68:	bd30      	pop	{r4, r5, pc}
    7f6a:	bf00      	nop
    7f6c:	0001b443 	.word	0x0001b443

00007f70 <get_ept>:
{
    7f70:	b538      	push	{r3, r4, r5, lr}
    7f72:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    7f74:	4611      	mov	r1, r2
{
    7f76:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    7f78:	f013 fa65 	bl	1b446 <get_ept_slot_with_name>
	if (ept != NULL) {
    7f7c:	4603      	mov	r3, r0
    7f7e:	b938      	cbnz	r0, 7f90 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    7f80:	4628      	mov	r0, r5
    7f82:	4904      	ldr	r1, [pc, #16]	; (7f94 <get_ept+0x24>)
    7f84:	f013 fa5f 	bl	1b446 <get_ept_slot_with_name>
    7f88:	4603      	mov	r3, r0
	if (ept != NULL) {
    7f8a:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    7f8c:	6023      	str	r3, [r4, #0]
}
    7f8e:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    7f90:	2001      	movs	r0, #1
    7f92:	e7fb      	b.n	7f8c <get_ept+0x1c>
    7f94:	00024616 	.word	0x00024616

00007f98 <open>:
{
    7f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7f9c:	2301      	movs	r3, #1
    7f9e:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    7fa0:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    7fa2:	6846      	ldr	r6, [r0, #4]
{
    7fa4:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    7fa6:	f505 776f 	add.w	r7, r5, #956	; 0x3bc
    7faa:	e8d7 2fef 	ldaex	r2, [r7]
    7fae:	2a00      	cmp	r2, #0
    7fb0:	d103      	bne.n	7fba <open+0x22>
    7fb2:	e8c7 3fe1 	stlex	r1, r3, [r7]
    7fb6:	2900      	cmp	r1, #0
    7fb8:	d1f7      	bne.n	7faa <open+0x12>
    7fba:	f040 80b8 	bne.w	812e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12e>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    7fbe:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    7fc0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    7fc2:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    7fc4:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    7fc6:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    7fca:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    7fce:	bf26      	itte	cs
    7fd0:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    7fd4:	fab3 f383 	clzcs	r3, r3
		return 0;
    7fd8:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    7fda:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    7fde:	bf28      	it	cs
    7fe0:	f1c3 0320 	rsbcs	r3, r3, #32
    7fe4:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    7fe6:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    7fe8:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    7fec:	f000 8099 	beq.w	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    7ff0:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    7ff2:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    7ff4:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    7ff6:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    7ff8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    7ffc:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    7ffe:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    8000:	3209      	adds	r2, #9
    8002:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    8006:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    8008:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    800c:	440a      	add	r2, r1
	return (buf_size * num);
    800e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    8010:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    8014:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    8016:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    801a:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    801e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    8020:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    8022:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    8026:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    802a:	3303      	adds	r3, #3
    802c:	4413      	add	r3, r2
    802e:	f023 0303 	bic.w	r3, r3, #3
    8032:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    8036:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    8038:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    803c:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    8040:	4b3c      	ldr	r3, [pc, #240]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    8042:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    8044:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    8048:	6831      	ldr	r1, [r6, #0]
    804a:	f000 fa1d 	bl	8488 <ipc_static_vrings_init>
	if (err != 0) {
    804e:	4604      	mov	r4, r0
    8050:	bb30      	cbnz	r0, 80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
	const struct backend_config_t *conf = instance->config;
    8052:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    8056:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    805a:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    805e:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    8062:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    8064:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    8066:	bf08      	it	eq
    8068:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    806a:	f00e ffb9 	bl	16fe0 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    806e:	2300      	movs	r3, #0
    8070:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    8074:	4930      	ldr	r1, [pc, #192]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    8076:	f44f 6280 	mov.w	r2, #1024	; 0x400
    807a:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    807e:	9300      	str	r3, [sp, #0]
    8080:	4658      	mov	r0, fp
    8082:	4623      	mov	r3, r4
    8084:	f00e ffc2 	bl	1700c <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    8088:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    808c:	492b      	ldr	r1, [pc, #172]	; (813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>)
    808e:	f00e ff07 	bl	16ea0 <k_work_init>
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    8092:	f8da 0014 	ldr.w	r0, [sl, #20]

	if (api->register_callback == NULL) {
    8096:	6883      	ldr	r3, [r0, #8]
    8098:	685c      	ldr	r4, [r3, #4]
    809a:	b91c      	cbnz	r4, 80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
		return -ENOSYS;
    809c:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    80a0:	2100      	movs	r1, #0
    80a2:	e037      	b.n	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    80a4:	464b      	mov	r3, r9
    80a6:	4a26      	ldr	r2, [pc, #152]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    80a8:	f8da 1018 	ldr.w	r1, [sl, #24]
    80ac:	47a0      	blx	r4
	if (err != 0) {
    80ae:	4604      	mov	r4, r0
    80b0:	2800      	cmp	r0, #0
    80b2:	d1f5      	bne.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    80b4:	f8da 0014 	ldr.w	r0, [sl, #20]

	if (api->set_enabled == NULL) {
    80b8:	6883      	ldr	r3, [r0, #8]
    80ba:	691b      	ldr	r3, [r3, #16]
    80bc:	2b00      	cmp	r3, #0
    80be:	d0ed      	beq.n	809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    80c0:	2201      	movs	r2, #1
    80c2:	f8da 1018 	ldr.w	r1, [sl, #24]
    80c6:	4798      	blx	r3
	if (err != 0) {
    80c8:	4604      	mov	r4, r0
    80ca:	2800      	cmp	r0, #0
    80cc:	d1e8      	bne.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
	rpmsg_inst->bound_cb = bound_cb;
    80ce:	4b1d      	ldr	r3, [pc, #116]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    80d0:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    80d2:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    80d6:	4b1c      	ldr	r3, [pc, #112]	; (8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>)
    80d8:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    80dc:	4b1b      	ldr	r3, [pc, #108]	; (814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>)
    80de:	9303      	str	r3, [sp, #12]
    80e0:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    80e4:	9302      	str	r3, [sp, #8]
    80e6:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    80ea:	e9cd 8300 	strd	r8, r3, [sp]
    80ee:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    80f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    80f4:	f8d5 13b8 	ldr.w	r1, [r5, #952]	; 0x3b8
    80f8:	f000 f98e 	bl	8418 <ipc_rpmsg_init>
	if (err != 0) {
    80fc:	4604      	mov	r4, r0
    80fe:	2800      	cmp	r0, #0
    8100:	d1ce      	bne.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    8102:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    8106:	f00c fda3 	bl	14c50 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    810a:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    810c:	f8c5 03c0 	str.w	r0, [r5, #960]	; 0x3c0
	if (data->tx_buffer_size < 0) {
    8110:	db0a      	blt.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
	atomic_set(&data->state, STATE_INITED);
    8112:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    8114:	4638      	mov	r0, r7
    8116:	f013 f9cb 	bl	1b4b0 <atomic_set.isra.0>
}
    811a:	4620      	mov	r0, r4
    811c:	b005      	add	sp, #20
    811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    8122:	f06f 040b 	mvn.w	r4, #11
    8126:	e7bb      	b.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		err = -EINVAL;
    8128:	f06f 0415 	mvn.w	r4, #21
    812c:	e7b8      	b.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
		return -EALREADY;
    812e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    8132:	e7f2      	b.n	811a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11a>
    8134:	0001b499 	.word	0x0001b499
    8138:	200078f8 	.word	0x200078f8
    813c:	0001b47f 	.word	0x0001b47f
    8140:	0001b473 	.word	0x0001b473
    8144:	00008215 	.word	0x00008215
    8148:	0001b551 	.word	0x0001b551
    814c:	0001b4e1 	.word	0x0001b4e1

00008150 <close>:
{
    8150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8154:	4606      	mov	r6, r0
    8156:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    815a:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    815c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    8160:	f505 776f 	add.w	r7, r5, #956	; 0x3bc
    8164:	e8d7 3fef 	ldaex	r3, [r7]
    8168:	2b02      	cmp	r3, #2
    816a:	d103      	bne.n	8174 <close+0x24>
    816c:	e8c7 9fe2 	stlex	r2, r9, [r7]
    8170:	2a00      	cmp	r2, #0
    8172:	d1f7      	bne.n	8164 <close+0x14>
    8174:	d149      	bne.n	820a <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    8176:	4826      	ldr	r0, [pc, #152]	; (8210 <close+0xc0>)
    8178:	f105 0140 	add.w	r1, r5, #64	; 0x40
    817c:	f7fd fb46 	bl	580c <strcmp>
    8180:	b120      	cbz	r0, 818c <close+0x3c>
		return -EBUSY;
    8182:	f06f 040f 	mvn.w	r4, #15
}
    8186:	4620      	mov	r0, r4
    8188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    818c:	4820      	ldr	r0, [pc, #128]	; (8210 <close+0xc0>)
    818e:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    8192:	f7fd fb3b 	bl	580c <strcmp>
    8196:	2800      	cmp	r0, #0
    8198:	d1f3      	bne.n	8182 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    819a:	4628      	mov	r0, r5
    819c:	f8d5 13b8 	ldr.w	r1, [r5, #952]	; 0x3b8
    81a0:	f013 fa09 	bl	1b5b6 <ipc_rpmsg_deinit>
	if (err != 0) {
    81a4:	4604      	mov	r4, r0
    81a6:	bb70      	cbnz	r0, 8206 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    81a8:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    81aa:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    81ac:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    81ae:	6883      	ldr	r3, [r0, #8]
    81b0:	691b      	ldr	r3, [r3, #16]
    81b2:	b333      	cbz	r3, 8202 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    81b4:	4622      	mov	r2, r4
    81b6:	6989      	ldr	r1, [r1, #24]
    81b8:	4798      	blx	r3
	if (err != 0) {
    81ba:	4604      	mov	r4, r0
    81bc:	bb18      	cbnz	r0, 8206 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    81be:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    81c2:	4649      	mov	r1, r9
    81c4:	4630      	mov	r0, r6
    81c6:	f00e ff81 	bl	170cc <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    81ca:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    81cc:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    81d0:	f001 fff4 	bl	a1bc <z_impl_k_thread_abort>
    81d4:	4630      	mov	r0, r6
    81d6:	f8d8 1000 	ldr.w	r1, [r8]
    81da:	f013 fa29 	bl	1b630 <ipc_static_vrings_deinit>
	if (err != 0) {
    81de:	4604      	mov	r4, r0
    81e0:	b988      	cbnz	r0, 8206 <close+0xb6>
    81e2:	4601      	mov	r1, r0
    81e4:	22e8      	movs	r2, #232	; 0xe8
    81e6:	4630      	mov	r0, r6
    81e8:	f017 f913 	bl	1f412 <memset>
    81ec:	4621      	mov	r1, r4
    81ee:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    81f2:	4628      	mov	r0, r5
    81f4:	f017 f90d 	bl	1f412 <memset>
	atomic_set(&data->state, STATE_READY);
    81f8:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    81fa:	4638      	mov	r0, r7
    81fc:	f013 f958 	bl	1b4b0 <atomic_set.isra.0>
	return err;
    8200:	e7c1      	b.n	8186 <close+0x36>
		return -ENOSYS;
    8202:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    8206:	2102      	movs	r1, #2
    8208:	e7f7      	b.n	81fa <close+0xaa>
		return -EALREADY;
    820a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    820e:	e7ba      	b.n	8186 <close+0x36>
    8210:	00024616 	.word	0x00024616

00008214 <bound_cb>:
{
    8214:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    8216:	4604      	mov	r4, r0
    8218:	b140      	cbz	r0, 822c <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    821a:	2300      	movs	r3, #0
    821c:	2201      	movs	r2, #1
    821e:	e9cd 3200 	strd	r3, r2, [sp]
    8222:	4b07      	ldr	r3, [pc, #28]	; (8240 <bound_cb+0x2c>)
    8224:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    8228:	f00c fb2e 	bl	14888 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    822c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	b123      	cbz	r3, 823c <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    8232:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    8234:	b002      	add	sp, #8
    8236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    823a:	4718      	bx	r3
}
    823c:	b002      	add	sp, #8
    823e:	bd10      	pop	{r4, pc}
    8240:	00024616 	.word	0x00024616

00008244 <send>:
{
    8244:	b513      	push	{r0, r1, r4, lr}
    8246:	4604      	mov	r4, r0
    8248:	4608      	mov	r0, r1
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    824a:	6921      	ldr	r1, [r4, #16]
    824c:	f501 716f 	add.w	r1, r1, #956	; 0x3bc
    8250:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    8254:	2902      	cmp	r1, #2
    8256:	d110      	bne.n	827a <send+0x36>
	if (len == 0) {
    8258:	b193      	cbz	r3, 8280 <send+0x3c>
	if (!rpmsg_ept) {
    825a:	b1a0      	cbz	r0, 8286 <send+0x42>
    825c:	2101      	movs	r1, #1
    825e:	e9cd 3100 	strd	r3, r1, [sp]
    8262:	4613      	mov	r3, r2
    8264:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    8268:	f00c fb0e 	bl	14888 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    826c:	4b07      	ldr	r3, [pc, #28]	; (828c <send+0x48>)
		return -ENOMEM;
    826e:	4298      	cmp	r0, r3
    8270:	bf08      	it	eq
    8272:	f06f 000b 	mvneq.w	r0, #11
}
    8276:	b002      	add	sp, #8
    8278:	bd10      	pop	{r4, pc}
		return -EBUSY;
    827a:	f06f 000f 	mvn.w	r0, #15
    827e:	e7fa      	b.n	8276 <send+0x32>
		return -EBADMSG;
    8280:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    8284:	e7f7      	b.n	8276 <send+0x32>
		return -ENOENT;
    8286:	f06f 0001 	mvn.w	r0, #1
    828a:	e7f4      	b.n	8276 <send+0x32>
    828c:	fffff82e 	.word	0xfffff82e

00008290 <register_ept>:
{
    8290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8294:	4688      	mov	r8, r1
    8296:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    8298:	6906      	ldr	r6, [r0, #16]
    829a:	f506 736f 	add.w	r3, r6, #956	; 0x3bc
    829e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    82a2:	2b02      	cmp	r3, #2
    82a4:	d15f      	bne.n	8366 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    82a6:	6813      	ldr	r3, [r2, #0]
    82a8:	b923      	cbnz	r3, 82b4 <register_ept+0x24>
		return -EINVAL;
    82aa:	f06f 0015 	mvn.w	r0, #21
}
    82ae:	b003      	add	sp, #12
    82b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	2b00      	cmp	r3, #0
    82b8:	d0f7      	beq.n	82aa <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    82ba:	f8d6 93b8 	ldr.w	r9, [r6, #952]	; 0x3b8
    82be:	f1b9 0f00 	cmp.w	r9, #0
    82c2:	d133      	bne.n	832c <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    82c4:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    82c8:	f04f 32ff 	mov.w	r2, #4294967295
    82cc:	f04f 33ff 	mov.w	r3, #4294967295
    82d0:	4638      	mov	r0, r7
    82d2:	f00e f97f 	bl	165d4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    82d6:	4630      	mov	r0, r6
    82d8:	682a      	ldr	r2, [r5, #0]
    82da:	a901      	add	r1, sp, #4
    82dc:	f7ff fe48 	bl	7f70 <get_ept>
	if (rpmsg_ept == NULL) {
    82e0:	9c01      	ldr	r4, [sp, #4]
    82e2:	b91c      	cbnz	r4, 82ec <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    82e4:	4638      	mov	r0, r7
    82e6:	f013 f8e1 	bl	1b4ac <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    82ea:	e7de      	b.n	82aa <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    82ec:	f105 0308 	add.w	r3, r5, #8
    82f0:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    82f2:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    82f4:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    82f8:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    82fa:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    82fc:	b160      	cbz	r0, 8318 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    82fe:	4638      	mov	r0, r7
    8300:	f013 f8d4 	bl	1b4ac <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    8304:	4621      	mov	r1, r4
    8306:	4630      	mov	r0, r6
    8308:	6e23      	ldr	r3, [r4, #96]	; 0x60
    830a:	682a      	ldr	r2, [r5, #0]
    830c:	f7ff fe0e 	bl	7f2c <advertise_ept>
	return 0;
    8310:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    8312:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    8316:	e7ca      	b.n	82ae <register_ept+0x1e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    8318:	2220      	movs	r2, #32
    831a:	6829      	ldr	r1, [r5, #0]
    831c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    8320:	f017 f899 	bl	1f456 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    8324:	4638      	mov	r0, r7
    8326:	f013 f8c1 	bl	1b4ac <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    832a:	e7f1      	b.n	8310 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    832c:	4630      	mov	r0, r6
    832e:	490f      	ldr	r1, [pc, #60]	; (836c <register_ept+0xdc>)
    8330:	f013 f889 	bl	1b446 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    8334:	4604      	mov	r4, r0
    8336:	2800      	cmp	r0, #0
    8338:	d0b7      	beq.n	82aa <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    833a:	f105 0308 	add.w	r3, r5, #8
    833e:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    8340:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    8342:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    8344:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    8346:	2300      	movs	r3, #0
    8348:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    834c:	2220      	movs	r2, #32
    834e:	6829      	ldr	r1, [r5, #0]
    8350:	3040      	adds	r0, #64	; 0x40
    8352:	f017 f880 	bl	1f456 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    8356:	4622      	mov	r2, r4
    8358:	2101      	movs	r1, #1
    835a:	4630      	mov	r0, r6
    835c:	f000 f83e 	bl	83dc <ipc_rpmsg_register_ept>
	if (err != 0) {
    8360:	2800      	cmp	r0, #0
    8362:	d0d5      	beq.n	8310 <register_ept+0x80>
    8364:	e7a1      	b.n	82aa <register_ept+0x1a>
		return -EBUSY;
    8366:	f06f 000f 	mvn.w	r0, #15
    836a:	e7a0      	b.n	82ae <register_ept+0x1e>
    836c:	00024616 	.word	0x00024616

00008370 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    8370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8374:	4605      	mov	r5, r0
    8376:	460e      	mov	r6, r1
    8378:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    837a:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    837c:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    8380:	b085      	sub	sp, #20
    8382:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    8386:	4621      	mov	r1, r4
    8388:	4630      	mov	r0, r6
    838a:	f7fd fa3f 	bl	580c <strcmp>
    838e:	b9e0      	cbnz	r0, 83ca <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    8390:	4b11      	ldr	r3, [pc, #68]	; (83d8 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    8392:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    8396:	9302      	str	r3, [sp, #8]
    8398:	f8da 3010 	ldr.w	r3, [sl, #16]
    839c:	4632      	mov	r2, r6
    839e:	e9cd 8300 	strd	r8, r3, [sp]
    83a2:	4629      	mov	r1, r5
    83a4:	f04f 33ff 	mov.w	r3, #4294967295
    83a8:	4658      	mov	r0, fp
    83aa:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    83ae:	f00c fab7 	bl	14920 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    83b2:	b960      	cbnz	r0, 83ce <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    83b4:	2370      	movs	r3, #112	; 0x70
    83b6:	2201      	movs	r2, #1
    83b8:	fb03 9307 	mla	r3, r3, r7, r9
    83bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    83c0:	f8da 300c 	ldr.w	r3, [sl, #12]
    83c4:	b10b      	cbz	r3, 83ca <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    83c6:	4658      	mov	r0, fp
    83c8:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    83ca:	3470      	adds	r4, #112	; 0x70
    83cc:	b117      	cbz	r7, 83d4 <ns_bind_cb+0x64>
			}
		}
	}
}
    83ce:	b005      	add	sp, #20
    83d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    83d4:	2701      	movs	r7, #1
    83d6:	e7d6      	b.n	8386 <ns_bind_cb+0x16>
    83d8:	0001b5b3 	.word	0x0001b5b3

000083dc <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    83dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    83de:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    83e0:	b190      	cbz	r0, 8408 <ipc_rpmsg_register_ept+0x2c>
    83e2:	b18a      	cbz	r2, 8408 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    83e4:	2901      	cmp	r1, #1
    83e6:	d112      	bne.n	840e <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    83e8:	4b0a      	ldr	r3, [pc, #40]	; (8414 <ipc_rpmsg_register_ept+0x38>)
    83ea:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    83ee:	9302      	str	r3, [sp, #8]
    83f0:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    83f4:	3240      	adds	r2, #64	; 0x40
    83f6:	9301      	str	r3, [sp, #4]
    83f8:	f04f 33ff 	mov.w	r3, #4294967295
    83fc:	4620      	mov	r0, r4
    83fe:	9300      	str	r3, [sp, #0]
    8400:	f00c fa8e 	bl	14920 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    8404:	b004      	add	sp, #16
    8406:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8408:	f06f 0015 	mvn.w	r0, #21
    840c:	e7fa      	b.n	8404 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    840e:	2000      	movs	r0, #0
    8410:	e7f8      	b.n	8404 <ipc_rpmsg_register_ept+0x28>
    8412:	bf00      	nop
    8414:	0001b5b3 	.word	0x0001b5b3

00008418 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    8418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    841c:	b087      	sub	sp, #28
    841e:	460e      	mov	r6, r1
    8420:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    8424:	4614      	mov	r4, r2
    8426:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    842a:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    842c:	b330      	cbz	r0, 847c <ipc_rpmsg_init+0x64>
    842e:	b329      	cbz	r1, 847c <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    8430:	f8df c050 	ldr.w	ip, [pc, #80]	; 8484 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    8434:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    8438:	2d00      	cmp	r5, #0
    843a:	bf08      	it	eq
    843c:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    843e:	b99e      	cbnz	r6, 8468 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    8440:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    8444:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    8448:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    844a:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    844c:	f016 fbb5 	bl	1ebba <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    8450:	ab03      	add	r3, sp, #12
    8452:	e9cd 4300 	strd	r4, r3, [sp]
    8456:	462a      	mov	r2, r5
    8458:	463b      	mov	r3, r7
    845a:	4641      	mov	r1, r8
    845c:	4648      	mov	r0, r9
    845e:	f00c fc1d 	bl	14c9c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    8462:	b007      	add	sp, #28
    8464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    8468:	2200      	movs	r2, #0
    846a:	4641      	mov	r1, r8
    846c:	920e      	str	r2, [sp, #56]	; 0x38
    846e:	4648      	mov	r0, r9
    8470:	462a      	mov	r2, r5
}
    8472:	b007      	add	sp, #28
    8474:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    8478:	f00c bd3a 	b.w	14ef0 <rpmsg_init_vdev>
		return -EINVAL;
    847c:	f06f 0015 	mvn.w	r0, #21
    8480:	e7ef      	b.n	8462 <ipc_rpmsg_init+0x4a>
    8482:	bf00      	nop
    8484:	00008371 	.word	0x00008371

00008488 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    8488:	b5f0      	push	{r4, r5, r6, r7, lr}
    848a:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    848c:	4604      	mov	r4, r0
{
    848e:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    8490:	2800      	cmp	r0, #0
    8492:	d06f      	beq.n	8574 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    8494:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    8496:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    8498:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    849a:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    849c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    84a0:	4f36      	ldr	r7, [pc, #216]	; (857c <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    84a2:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    84a4:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    84a8:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    84ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
    84b0:	f04f 33ff 	mov.w	r3, #4294967295
    84b4:	9300      	str	r3, [sp, #0]
    84b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    84b8:	f015 fee6 	bl	1e288 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    84bc:	4a30      	ldr	r2, [pc, #192]	; (8580 <ipc_static_vrings_init+0xf8>)
    84be:	ab06      	add	r3, sp, #24
    84c0:	e892 0003 	ldmia.w	r2, {r0, r1}
    84c4:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    84c8:	4618      	mov	r0, r3
    84ca:	f00c f8fd 	bl	146c8 <metal_init>
	if (err != 0) {
    84ce:	4605      	mov	r5, r0
    84d0:	b9d8      	cbnz	r0, 850a <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    84d2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    84d6:	f00c f8d7 	bl	14688 <metal_register_generic_device>
	if (err != 0) {
    84da:	4605      	mov	r5, r0
    84dc:	b9a8      	cbnz	r0, 850a <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    84de:	4639      	mov	r1, r7
    84e0:	4828      	ldr	r0, [pc, #160]	; (8584 <ipc_static_vrings_init+0xfc>)
    84e2:	aa05      	add	r2, sp, #20
    84e4:	f015 fea8 	bl	1e238 <metal_device_open>
	if (err != 0) {
    84e8:	4605      	mov	r5, r0
    84ea:	b970      	cbnz	r0, 850a <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    84ec:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    84ee:	689a      	ldr	r2, [r3, #8]
    84f0:	b172      	cbz	r2, 8510 <ipc_static_vrings_init+0x88>
    84f2:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    84f4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    84f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    84fc:	f013 f88a 	bl	1b614 <virtqueue_allocate>
    8500:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    8504:	b930      	cbnz	r0, 8514 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    8506:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    850a:	4628      	mov	r0, r5
    850c:	b009      	add	sp, #36	; 0x24
    850e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8510:	4603      	mov	r3, r0
    8512:	e7ef      	b.n	84f4 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    8514:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8518:	f013 f87c 	bl	1b614 <virtqueue_allocate>
    851c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    8520:	2800      	cmp	r0, #0
    8522:	d0f0      	beq.n	8506 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    8524:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    8528:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    852c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    8530:	2304      	movs	r3, #4
    8532:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    8536:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    853a:	2302      	movs	r3, #2
    853c:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    853e:	4b12      	ldr	r3, [pc, #72]	; (8588 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    8540:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    8544:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    8548:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    854c:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    8550:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    8554:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    8556:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    855a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    855e:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    8562:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    8566:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    856a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    856e:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    8570:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    8572:	e7ca      	b.n	850a <ipc_static_vrings_init+0x82>
		return -EINVAL;
    8574:	f06f 0515 	mvn.w	r5, #21
    8578:	e7c7      	b.n	850a <ipc_static_vrings_init+0x82>
    857a:	bf00      	nop
    857c:	000223f3 	.word	0x000223f3
    8580:	0001fa8c 	.word	0x0001fa8c
    8584:	000223fd 	.word	0x000223fd
    8588:	0001fcc4 	.word	0x0001fcc4

0000858c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    858c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8590:	4605      	mov	r5, r0
	__asm__ volatile(
    8592:	f04f 0320 	mov.w	r3, #32
    8596:	f3ef 8611 	mrs	r6, BASEPRI
    859a:	f383 8812 	msr	BASEPRI_MAX, r3
    859e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85a2:	481b      	ldr	r0, [pc, #108]	; (8610 <pm_state_notify+0x84>)
    85a4:	f00d fea6 	bl	162f4 <z_spin_lock_valid>
    85a8:	b940      	cbnz	r0, 85bc <pm_state_notify+0x30>
    85aa:	491a      	ldr	r1, [pc, #104]	; (8614 <pm_state_notify+0x88>)
    85ac:	2294      	movs	r2, #148	; 0x94
    85ae:	481a      	ldr	r0, [pc, #104]	; (8618 <pm_state_notify+0x8c>)
    85b0:	f012 feae 	bl	1b310 <assert_print>
    85b4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85b6:	4817      	ldr	r0, [pc, #92]	; (8614 <pm_state_notify+0x88>)
    85b8:	f012 fea3 	bl	1b302 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    85bc:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    85c0:	4813      	ldr	r0, [pc, #76]	; (8610 <pm_state_notify+0x84>)
    85c2:	f00d feb3 	bl	1632c <z_spin_lock_set_owner>
	return list->head;
    85c6:	4b15      	ldr	r3, [pc, #84]	; (861c <pm_state_notify+0x90>)
    85c8:	4f15      	ldr	r7, [pc, #84]	; (8620 <pm_state_notify+0x94>)
    85ca:	681c      	ldr	r4, [r3, #0]
    85cc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8624 <pm_state_notify+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    85d0:	b954      	cbnz	r4, 85e8 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85d2:	480f      	ldr	r0, [pc, #60]	; (8610 <pm_state_notify+0x84>)
    85d4:	f00d fe9c 	bl	16310 <z_spin_unlock_valid>
    85d8:	b9a0      	cbnz	r0, 8604 <pm_state_notify+0x78>
    85da:	490e      	ldr	r1, [pc, #56]	; (8614 <pm_state_notify+0x88>)
    85dc:	22c2      	movs	r2, #194	; 0xc2
    85de:	480e      	ldr	r0, [pc, #56]	; (8618 <pm_state_notify+0x8c>)
    85e0:	f012 fe96 	bl	1b310 <assert_print>
    85e4:	21c2      	movs	r1, #194	; 0xc2
    85e6:	e7e6      	b.n	85b6 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
    85e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    85ec:	2d00      	cmp	r5, #0
    85ee:	bf18      	it	ne
    85f0:	4613      	movne	r3, r2
		if (callback) {
    85f2:	b12b      	cbz	r3, 8600 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    85f4:	f898 2014 	ldrb.w	r2, [r8, #20]
    85f8:	fb09 f202 	mul.w	r2, r9, r2
    85fc:	5cb8      	ldrb	r0, [r7, r2]
    85fe:	4798      	blx	r3
	return node->next;
    8600:	6824      	ldr	r4, [r4, #0]
    8602:	e7e5      	b.n	85d0 <pm_state_notify+0x44>
	__asm__ volatile(
    8604:	f386 8811 	msr	BASEPRI, r6
    8608:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    860c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8610:	20006328 	.word	0x20006328
    8614:	00022232 	.word	0x00022232
    8618:	000221f8 	.word	0x000221f8
    861c:	20006348 	.word	0x20006348
    8620:	2000633c 	.word	0x2000633c
    8624:	20006f78 	.word	0x20006f78

00008628 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    8628:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    862a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    862c:	4b16      	ldr	r3, [pc, #88]	; (8688 <pm_system_resume+0x60>)
    862e:	7d1c      	ldrb	r4, [r3, #20]
    8630:	f004 031f 	and.w	r3, r4, #31
    8634:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8636:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8638:	4b14      	ldr	r3, [pc, #80]	; (868c <pm_system_resume+0x64>)
    863a:	0961      	lsrs	r1, r4, #5
    863c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8640:	e8d3 1fef 	ldaex	r1, [r3]
    8644:	ea01 0500 	and.w	r5, r1, r0
    8648:	e8c3 5fe6 	stlex	r6, r5, [r3]
    864c:	2e00      	cmp	r6, #0
    864e:	d1f7      	bne.n	8640 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    8650:	420a      	tst	r2, r1
    8652:	d013      	beq.n	867c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    8654:	4b0e      	ldr	r3, [pc, #56]	; (8690 <pm_system_resume+0x68>)
    8656:	4d0f      	ldr	r5, [pc, #60]	; (8694 <pm_system_resume+0x6c>)
    8658:	b18b      	cbz	r3, 867e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    865a:	230c      	movs	r3, #12
    865c:	4363      	muls	r3, r4
    865e:	18ea      	adds	r2, r5, r3
    8660:	7851      	ldrb	r1, [r2, #1]
    8662:	5ce8      	ldrb	r0, [r5, r3]
    8664:	f012 fe62 	bl	1b32c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    8668:	2000      	movs	r0, #0
    866a:	f7ff ff8f 	bl	858c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    866e:	230c      	movs	r3, #12
    8670:	435c      	muls	r4, r3
    8672:	2300      	movs	r3, #0
    8674:	192a      	adds	r2, r5, r4
    8676:	512b      	str	r3, [r5, r4]
    8678:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    867c:	bd70      	pop	{r4, r5, r6, pc}
    867e:	f383 8811 	msr	BASEPRI, r3
    8682:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8686:	e7ef      	b.n	8668 <pm_system_resume+0x40>
    8688:	20006f78 	.word	0x20006f78
    868c:	20006350 	.word	0x20006350
    8690:	0001b32d 	.word	0x0001b32d
    8694:	2000633c 	.word	0x2000633c

00008698 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    8698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    869c:	4b40      	ldr	r3, [pc, #256]	; (87a0 <pm_system_suspend+0x108>)
{
    869e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    86a0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    86a2:	f04f 0320 	mov.w	r3, #32
    86a6:	f3ef 8811 	mrs	r8, BASEPRI
    86aa:	f383 8812 	msr	BASEPRI_MAX, r3
    86ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86b2:	483c      	ldr	r0, [pc, #240]	; (87a4 <pm_system_suspend+0x10c>)
    86b4:	f00d fe1e 	bl	162f4 <z_spin_lock_valid>
    86b8:	b940      	cbnz	r0, 86cc <pm_system_suspend+0x34>
    86ba:	493b      	ldr	r1, [pc, #236]	; (87a8 <pm_system_suspend+0x110>)
    86bc:	2294      	movs	r2, #148	; 0x94
    86be:	483b      	ldr	r0, [pc, #236]	; (87ac <pm_system_suspend+0x114>)
    86c0:	f012 fe26 	bl	1b310 <assert_print>
    86c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86c6:	4838      	ldr	r0, [pc, #224]	; (87a8 <pm_system_suspend+0x110>)
    86c8:	f012 fe1b 	bl	1b302 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    86cc:	240c      	movs	r4, #12
    86ce:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    86d0:	4834      	ldr	r0, [pc, #208]	; (87a4 <pm_system_suspend+0x10c>)
    86d2:	f00d fe2b 	bl	1632c <z_spin_lock_set_owner>
    86d6:	4b36      	ldr	r3, [pc, #216]	; (87b0 <pm_system_suspend+0x118>)
    86d8:	4e36      	ldr	r6, [pc, #216]	; (87b4 <pm_system_suspend+0x11c>)
    86da:	5d19      	ldrb	r1, [r3, r4]
    86dc:	191a      	adds	r2, r3, r4
    86de:	b191      	cbz	r1, 8706 <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    86e0:	ca07      	ldmia	r2, {r0, r1, r2}
    86e2:	eb06 0c04 	add.w	ip, r6, r4
    86e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    86ea:	2200      	movs	r2, #0
    86ec:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86ee:	482d      	ldr	r0, [pc, #180]	; (87a4 <pm_system_suspend+0x10c>)
    86f0:	f00d fe0e 	bl	16310 <z_spin_unlock_valid>
    86f4:	4604      	mov	r4, r0
    86f6:	b988      	cbnz	r0, 871c <pm_system_suspend+0x84>
    86f8:	492b      	ldr	r1, [pc, #172]	; (87a8 <pm_system_suspend+0x110>)
    86fa:	22c2      	movs	r2, #194	; 0xc2
    86fc:	482b      	ldr	r0, [pc, #172]	; (87ac <pm_system_suspend+0x114>)
    86fe:	f012 fe07 	bl	1b310 <assert_print>
    8702:	21c2      	movs	r1, #194	; 0xc2
    8704:	e7df      	b.n	86c6 <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    8706:	4639      	mov	r1, r7
    8708:	4628      	mov	r0, r5
    870a:	f000 f85d 	bl	87c8 <pm_policy_next_state>
		if (info != NULL) {
    870e:	2800      	cmp	r0, #0
    8710:	d0ed      	beq.n	86ee <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
    8712:	c807      	ldmia	r0, {r0, r1, r2}
    8714:	4434      	add	r4, r6
    8716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    871a:	e7e8      	b.n	86ee <pm_system_suspend+0x56>
	__asm__ volatile(
    871c:	f388 8811 	msr	BASEPRI, r8
    8720:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    8724:	230c      	movs	r3, #12
    8726:	436b      	muls	r3, r5
    8728:	18f2      	adds	r2, r6, r3
    872a:	5cf3      	ldrb	r3, [r6, r3]
    872c:	b3ab      	cbz	r3, 879a <pm_system_suspend+0x102>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    872e:	1c7b      	adds	r3, r7, #1
    8730:	d00f      	beq.n	8752 <pm_system_suspend+0xba>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    8732:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    8736:	2100      	movs	r1, #0
    8738:	f8d2 e008 	ldr.w	lr, [r2, #8]
    873c:	481e      	ldr	r0, [pc, #120]	; (87b8 <pm_system_suspend+0x120>)
    873e:	2300      	movs	r3, #0
    8740:	fbee 010c 	umlal	r0, r1, lr, ip
    8744:	4a1d      	ldr	r2, [pc, #116]	; (87bc <pm_system_suspend+0x124>)
    8746:	f7fc fc6f 	bl	5028 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    874a:	2101      	movs	r1, #1
    874c:	1a38      	subs	r0, r7, r0
    874e:	f010 f837 	bl	187c0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    8752:	f00f f891 	bl	17878 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    8756:	2001      	movs	r0, #1
    8758:	f7ff ff18 	bl	858c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    875c:	4b18      	ldr	r3, [pc, #96]	; (87c0 <pm_system_suspend+0x128>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    875e:	096a      	lsrs	r2, r5, #5
    8760:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    8764:	2201      	movs	r2, #1
    8766:	f005 011f 	and.w	r1, r5, #31
    876a:	408a      	lsls	r2, r1
    876c:	e8d3 0fef 	ldaex	r0, [r3]
    8770:	4310      	orrs	r0, r2
    8772:	e8c3 0fe1 	stlex	r1, r0, [r3]
    8776:	2900      	cmp	r1, #0
    8778:	d1f8      	bne.n	876c <pm_system_suspend+0xd4>
	if (pm_state_set != NULL) {
    877a:	4b12      	ldr	r3, [pc, #72]	; (87c4 <pm_system_suspend+0x12c>)
    877c:	b133      	cbz	r3, 878c <pm_system_suspend+0xf4>
		pm_state_set(info->state, info->substate_id);
    877e:	230c      	movs	r3, #12
    8780:	436b      	muls	r3, r5
    8782:	18f2      	adds	r2, r6, r3
    8784:	7851      	ldrb	r1, [r2, #1]
    8786:	5cf0      	ldrb	r0, [r6, r3]
    8788:	f7ff fadc 	bl	7d44 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    878c:	f7ff ff4c 	bl	8628 <pm_system_resume>
	k_sched_unlock();
    8790:	f00f f8be 	bl	17910 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    8794:	4620      	mov	r0, r4
    8796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    879a:	461c      	mov	r4, r3
    879c:	e7fa      	b.n	8794 <pm_system_suspend+0xfc>
    879e:	bf00      	nop
    87a0:	20006f78 	.word	0x20006f78
    87a4:	2000632c 	.word	0x2000632c
    87a8:	00022232 	.word	0x00022232
    87ac:	000221f8 	.word	0x000221f8
    87b0:	20006330 	.word	0x20006330
    87b4:	2000633c 	.word	0x2000633c
    87b8:	000f423f 	.word	0x000f423f
    87bc:	000f4240 	.word	0x000f4240
    87c0:	20006350 	.word	0x20006350
    87c4:	00007d45 	.word	0x00007d45

000087c8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    87c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87cc:	b085      	sub	sp, #20
    87ce:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    87d0:	a903      	add	r1, sp, #12
    87d2:	f000 f843 	bl	885c <pm_state_cpu_get_all>
    87d6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    87da:	4604      	mov	r4, r0
    87dc:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    87e0:	4b1b      	ldr	r3, [pc, #108]	; (8850 <pm_policy_next_state+0x88>)
    87e2:	9d03      	ldr	r5, [sp, #12]
    87e4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    87e8:	1e43      	subs	r3, r0, #1
    87ea:	b21b      	sxth	r3, r3
    87ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    87f0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8858 <pm_policy_next_state+0x90>
    87f4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    87f8:	b924      	cbnz	r4, 8804 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    87fa:	46a1      	mov	r9, r4
}
    87fc:	4648      	mov	r0, r9
    87fe:	b005      	add	sp, #20
    8800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8804:	46c4      	mov	ip, r8
    8806:	4659      	mov	r1, fp
    8808:	6868      	ldr	r0, [r5, #4]
    880a:	2300      	movs	r3, #0
    880c:	fbe0 c107 	umlal	ip, r1, r0, r7
    8810:	4a10      	ldr	r2, [pc, #64]	; (8854 <pm_policy_next_state+0x8c>)
    8812:	4660      	mov	r0, ip
    8814:	f7fc fc08 	bl	5028 <__aeabi_uldivmod>
    8818:	46c4      	mov	ip, r8
    881a:	4659      	mov	r1, fp
    881c:	9001      	str	r0, [sp, #4]
    881e:	68a8      	ldr	r0, [r5, #8]
    8820:	2300      	movs	r3, #0
    8822:	fbe0 c107 	umlal	ip, r1, r0, r7
    8826:	4a0b      	ldr	r2, [pc, #44]	; (8854 <pm_policy_next_state+0x8c>)
    8828:	4660      	mov	r0, ip
    882a:	f7fc fbfd 	bl	5028 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    882e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    8832:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    8834:	d001      	beq.n	883a <pm_policy_next_state+0x72>
    8836:	4582      	cmp	sl, r0
    8838:	d905      	bls.n	8846 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    883a:	1c73      	adds	r3, r6, #1
    883c:	d0de      	beq.n	87fc <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    883e:	9b01      	ldr	r3, [sp, #4]
    8840:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    8842:	42b0      	cmp	r0, r6
    8844:	d9da      	bls.n	87fc <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    8846:	3c01      	subs	r4, #1
    8848:	b2a4      	uxth	r4, r4
    884a:	3d0c      	subs	r5, #12
    884c:	e7d4      	b.n	87f8 <pm_policy_next_state+0x30>
    884e:	bf00      	nop
    8850:	200001f4 	.word	0x200001f4
    8854:	000f4240 	.word	0x000f4240
    8858:	000f423f 	.word	0x000f423f

0000885c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    885c:	b908      	cbnz	r0, 8862 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    885e:	4b02      	ldr	r3, [pc, #8]	; (8868 <pm_state_cpu_get_all+0xc>)
    8860:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    8862:	2000      	movs	r0, #0
    8864:	4770      	bx	lr
    8866:	bf00      	nop
    8868:	0001fce8 	.word	0x0001fce8

0000886c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    886c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    886e:	4c06      	ldr	r4, [pc, #24]	; (8888 <scan_default_param_set+0x1c>)
{
    8870:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    8872:	ad01      	add	r5, sp, #4
    8874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8878:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    887a:	4c04      	ldr	r4, [pc, #16]	; (888c <scan_default_param_set+0x20>)
    887c:	ad01      	add	r5, sp, #4
    887e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8882:	6026      	str	r6, [r4, #0]
}
    8884:	b006      	add	sp, #24
    8886:	bd70      	pop	{r4, r5, r6, pc}
    8888:	0001fa94 	.word	0x0001fa94
    888c:	200063b4 	.word	0x200063b4

00008890 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    8890:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    8894:	4b02      	ldr	r3, [pc, #8]	; (88a0 <scan_default_conn_param_set+0x10>)
    8896:	4903      	ldr	r1, [pc, #12]	; (88a4 <scan_default_conn_param_set+0x14>)
    8898:	e9c3 121b 	strd	r1, r2, [r3, #108]	; 0x6c
}
    889c:	4770      	bx	lr
    889e:	bf00      	nop
    88a0:	2000635c 	.word	0x2000635c
    88a4:	00280018 	.word	0x00280018

000088a8 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    88a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    88ac:	7803      	ldrb	r3, [r0, #0]
{
    88ae:	4606      	mov	r6, r0
	switch (data->type) {
    88b0:	2b09      	cmp	r3, #9
{
    88b2:	460c      	mov	r4, r1
	switch (data->type) {
    88b4:	d004      	beq.n	88c0 <adv_data_found+0x18>
    88b6:	2bff      	cmp	r3, #255	; 0xff
    88b8:	d023      	beq.n	8902 <adv_data_found+0x5a>
	default:
		break;
	}

	return true;
}
    88ba:	2001      	movs	r0, #1
    88bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
    88c0:	4f25      	ldr	r7, [pc, #148]	; (8958 <adv_data_found+0xb0>)
	if (is_name_filter_enabled()) {
    88c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    88c6:	2b00      	cmp	r3, #0
    88c8:	d0f7      	beq.n	88ba <adv_data_found+0x12>
	for (size_t i = 0; i < counter; i++) {
    88ca:	2500      	movs	r5, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    88cc:	f897 a020 	ldrb.w	sl, [r7, #32]
	uint8_t data_len = data->data_len;
    88d0:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    88d4:	4555      	cmp	r5, sl
    88d6:	d2f0      	bcs.n	88ba <adv_data_found+0x12>
				 name_filter->target_name[i])) {
    88d8:	eb07 1945 	add.w	r9, r7, r5, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    88dc:	4642      	mov	r2, r8
    88de:	4648      	mov	r0, r9
    88e0:	6871      	ldr	r1, [r6, #4]
    88e2:	f016 fda6 	bl	1f432 <strncmp>
		if (adv_name_cmp(data->data,
    88e6:	b950      	cbnz	r0, 88fe <adv_data_found+0x56>
			control->filter_match_cnt++;
    88e8:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    88ea:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    88ee:	3301      	adds	r3, #1
    88f0:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    88f2:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    88f4:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    88f8:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    88fa:	70a3      	strb	r3, [r4, #2]
    88fc:	e7dd      	b.n	88ba <adv_data_found+0x12>
	for (size_t i = 0; i < counter; i++) {
    88fe:	3501      	adds	r5, #1
    8900:	e7e8      	b.n	88d4 <adv_data_found+0x2c>
		bt_scan.scan_filters.manufacturer_data.enabled;
    8902:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8958 <adv_data_found+0xb0>
	if (is_manufacturer_data_filter_enabled()) {
    8906:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
    890a:	2b00      	cmp	r3, #0
    890c:	d0d5      	beq.n	88ba <adv_data_found+0x12>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    890e:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    8910:	2500      	movs	r5, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    8912:	f898 a04f 	ldrb.w	sl, [r8, #79]	; 0x4f
	for (size_t i = 0; i < counter; i++) {
    8916:	4555      	cmp	r5, sl
    8918:	d2cf      	bcs.n	88ba <adv_data_found+0x12>
				md_filter->manufacturer_data[i].data_len)) {
    891a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
	if (target_data_len > data_len) {
    891e:	7873      	ldrb	r3, [r6, #1]
		if (adv_manufacturer_data_cmp(data->data,
    8920:	6871      	ldr	r1, [r6, #4]
	if (target_data_len > data_len) {
    8922:	4293      	cmp	r3, r2
    8924:	d315      	bcc.n	8952 <adv_data_found+0xaa>
				md_filter->manufacturer_data[i].data,
    8926:	f107 092e 	add.w	r9, r7, #46	; 0x2e
	if (memcmp(target_data, data, target_data_len) != 0) {
    892a:	4648      	mov	r0, r9
    892c:	f016 fd3a 	bl	1f3a4 <memcmp>
    8930:	b978      	cbnz	r0, 8952 <adv_data_found+0xaa>
				md_filter->manufacturer_data[i].data_len;
    8932:	eb05 1545 	add.w	r5, r5, r5, lsl #5
			control->filter_status.manufacturer_data.data =
    8936:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
				md_filter->manufacturer_data[i].data_len;
    893a:	4445      	add	r5, r8
    893c:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
			control->filter_status.manufacturer_data.len =
    8940:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    8944:	7863      	ldrb	r3, [r4, #1]
    8946:	3301      	adds	r3, #1
    8948:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    894a:	2301      	movs	r3, #1
    894c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    8950:	e7d3      	b.n	88fa <adv_data_found+0x52>
	for (size_t i = 0; i < counter; i++) {
    8952:	3501      	adds	r5, #1
    8954:	3721      	adds	r7, #33	; 0x21
    8956:	e7de      	b.n	8916 <adv_data_found+0x6e>
    8958:	2000635c 	.word	0x2000635c

0000895c <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    895e:	4605      	mov	r5, r0
    8960:	460e      	mov	r6, r1
    8962:	4617      	mov	r7, r2
	return list->head;
    8964:	4b07      	ldr	r3, [pc, #28]	; (8984 <notify_filter_matched.constprop.0+0x28>)
    8966:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8968:	b154      	cbz	r4, 8980 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
    896a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    896e:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
    8970:	681b      	ldr	r3, [r3, #0]
    8972:	b11b      	cbz	r3, 897c <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
    8974:	463a      	mov	r2, r7
    8976:	4631      	mov	r1, r6
    8978:	4628      	mov	r0, r5
    897a:	4798      	blx	r3
	return node->next;
    897c:	6864      	ldr	r4, [r4, #4]
    897e:	e7f3      	b.n	8968 <notify_filter_matched.constprop.0+0xc>
}
    8980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8982:	bf00      	nop
    8984:	20006354 	.word	0x20006354

00008988 <bt_scan_cb_register>:
	if (!cb) {
    8988:	b150      	cbz	r0, 89a0 <bt_scan_cb_register+0x18>
	parent->next = child;
    898a:	2300      	movs	r3, #0
    898c:	6043      	str	r3, [r0, #4]
	return list->tail;
    898e:	4b05      	ldr	r3, [pc, #20]	; (89a4 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    8990:	1d02      	adds	r2, r0, #4
    8992:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    8994:	b911      	cbnz	r1, 899c <bt_scan_cb_register+0x14>
	list->head = node;
    8996:	e9c3 2200 	strd	r2, r2, [r3]
}
    899a:	4770      	bx	lr
	parent->next = child;
    899c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    899e:	605a      	str	r2, [r3, #4]
}
    89a0:	4770      	bx	lr
    89a2:	bf00      	nop
    89a4:	20006354 	.word	0x20006354

000089a8 <bt_scan_filter_add>:
{
    89a8:	b538      	push	{r3, r4, r5, lr}
    89aa:	4605      	mov	r5, r0
	if (!data) {
    89ac:	460c      	mov	r4, r1
    89ae:	2900      	cmp	r1, #0
    89b0:	d043      	beq.n	8a3a <bt_scan_filter_add+0x92>
    89b2:	f04f 32ff 	mov.w	r2, #4294967295
    89b6:	f04f 33ff 	mov.w	r3, #4294967295
    89ba:	4821      	ldr	r0, [pc, #132]	; (8a40 <bt_scan_filter_add+0x98>)
    89bc:	f00d fe0a 	bl	165d4 <z_impl_k_mutex_lock>
	switch (type) {
    89c0:	2d04      	cmp	r5, #4
    89c2:	d803      	bhi.n	89cc <bt_scan_filter_add+0x24>
    89c4:	b15d      	cbz	r5, 89de <bt_scan_filter_add+0x36>
    89c6:	f06f 040b 	mvn.w	r4, #11
    89ca:	e003      	b.n	89d4 <bt_scan_filter_add+0x2c>
    89cc:	2d05      	cmp	r5, #5
    89ce:	d01d      	beq.n	8a0c <bt_scan_filter_add+0x64>
		return -EINVAL;
    89d0:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    89d4:	481a      	ldr	r0, [pc, #104]	; (8a40 <bt_scan_filter_add+0x98>)
    89d6:	f00d feb3 	bl	16740 <z_impl_k_mutex_unlock>
}
    89da:	4620      	mov	r0, r4
    89dc:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    89de:	4d19      	ldr	r5, [pc, #100]	; (8a44 <bt_scan_filter_add+0x9c>)
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
    89e0:	f895 3020 	ldrb.w	r3, [r5, #32]
    89e4:	2b00      	cmp	r3, #0
    89e6:	d1ee      	bne.n	89c6 <bt_scan_filter_add+0x1e>
	name_len = strlen(name);
    89e8:	4620      	mov	r0, r4
    89ea:	f7fc ff19 	bl	5820 <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
    89ee:	1e43      	subs	r3, r0, #1
    89f0:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
    89f2:	4602      	mov	r2, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
    89f4:	d8ec      	bhi.n	89d0 <bt_scan_filter_add+0x28>
	memcpy(bt_scan.scan_filters.name.target_name[counter],
    89f6:	4621      	mov	r1, r4
    89f8:	4628      	mov	r0, r5
    89fa:	f016 fce3 	bl	1f3c4 <memcpy>
	bt_scan.scan_filters.name.cnt++;
    89fe:	f895 3020 	ldrb.w	r3, [r5, #32]
    8a02:	3301      	adds	r3, #1
    8a04:	f885 3020 	strb.w	r3, [r5, #32]
	return 0;
    8a08:	2400      	movs	r4, #0
    8a0a:	e7e3      	b.n	89d4 <bt_scan_filter_add+0x2c>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    8a0c:	4d0d      	ldr	r5, [pc, #52]	; (8a44 <bt_scan_filter_add+0x9c>)
	if (counter >= CONFIG_BT_SCAN_MANUFACTURER_DATA_CNT) {
    8a0e:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    8a12:	2b00      	cmp	r3, #0
    8a14:	d1d7      	bne.n	89c6 <bt_scan_filter_add+0x1e>
	if ((manufacturer_data->data_len == 0) ||
    8a16:	7922      	ldrb	r2, [r4, #4]
    8a18:	1e53      	subs	r3, r2, #1
    8a1a:	2b1f      	cmp	r3, #31
    8a1c:	d8d8      	bhi.n	89d0 <bt_scan_filter_add+0x28>
	memcpy(md_filter->manufacturer_data[counter].data,
    8a1e:	6821      	ldr	r1, [r4, #0]
    8a20:	f105 002e 	add.w	r0, r5, #46	; 0x2e
    8a24:	f016 fcce 	bl	1f3c4 <memcpy>
		manufacturer_data->data_len;
    8a28:	7923      	ldrb	r3, [r4, #4]
	md_filter->manufacturer_data[counter].data_len =
    8a2a:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
	bt_scan.scan_filters.manufacturer_data.cnt++;
    8a2e:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    8a32:	3301      	adds	r3, #1
    8a34:	f885 304f 	strb.w	r3, [r5, #79]	; 0x4f
	return 0;
    8a38:	e7e6      	b.n	8a08 <bt_scan_filter_add+0x60>
		return -EINVAL;
    8a3a:	f06f 0415 	mvn.w	r4, #21
    8a3e:	e7cc      	b.n	89da <bt_scan_filter_add+0x32>
    8a40:	2000084c 	.word	0x2000084c
    8a44:	2000635c 	.word	0x2000635c

00008a48 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    8a48:	2200      	movs	r2, #0
    8a4a:	4b07      	ldr	r3, [pc, #28]	; (8a68 <bt_scan_filter_disable+0x20>)
    8a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.short_name.enabled = false;
    8a50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bt_scan.scan_filters.addr.enabled = false;
    8a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.uuid.enabled = false;
    8a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	bt_scan.scan_filters.appearance.enabled = false;
    8a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    8a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop
    8a68:	2000635c 	.word	0x2000635c

00008a6c <bt_scan_filter_enable>:
{
    8a6c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    8a6e:	0683      	lsls	r3, r0, #26
    8a70:	d028      	beq.n	8ac4 <bt_scan_filter_enable+0x58>
	bt_scan_filter_disable();
    8a72:	f7ff ffe9 	bl	8a48 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    8a76:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    8a7a:	bf18      	it	ne
    8a7c:	2201      	movne	r2, #1
    8a7e:	4b13      	ldr	r3, [pc, #76]	; (8acc <bt_scan_filter_enable+0x60>)
    8a80:	bf18      	it	ne
    8a82:	f883 2025 	strbne.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_NAME_FILTER) {
    8a86:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    8a88:	bf44      	itt	mi
    8a8a:	2201      	movmi	r2, #1
    8a8c:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    8a90:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    8a92:	bf44      	itt	mi
    8a94:	2201      	movmi	r2, #1
    8a96:	f883 2023 	strbmi.w	r2, [r3, #35]	; 0x23
	if (mode & BT_SCAN_UUID_FILTER) {
    8a9a:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    8a9c:	bf44      	itt	mi
    8a9e:	2201      	movmi	r2, #1
    8aa0:	f883 2029 	strbmi.w	r2, [r3, #41]	; 0x29
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    8aa4:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    8aa6:	bf44      	itt	mi
    8aa8:	2201      	movmi	r2, #1
    8aaa:	f883 202d 	strbmi.w	r2, [r3, #45]	; 0x2d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    8aae:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    8ab0:	bf48      	it	mi
    8ab2:	2201      	movmi	r2, #1
	return 0;
    8ab4:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    8ab8:	bf48      	it	mi
    8aba:	f883 2050 	strbmi.w	r2, [r3, #80]	; 0x50
	filters->all_mode = match_all;
    8abe:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
}
    8ac2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8ac4:	f06f 0015 	mvn.w	r0, #21
    8ac8:	e7fb      	b.n	8ac2 <bt_scan_filter_enable+0x56>
    8aca:	bf00      	nop
    8acc:	2000635c 	.word	0x2000635c

00008ad0 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    8ad0:	b570      	push	{r4, r5, r6, lr}
    8ad2:	460e      	mov	r6, r1
    8ad4:	b086      	sub	sp, #24
    8ad6:	4605      	mov	r5, r0
	bt_scan_stop();
    8ad8:	f012 fdda 	bl	1b690 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    8adc:	4b15      	ldr	r3, [pc, #84]	; (8b34 <scan_connect_with_target.part.0+0x64>)
    8ade:	ac02      	add	r4, sp, #8
    8ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    8ae6:	ab01      	add	r3, sp, #4
    8ae8:	4621      	mov	r1, r4
    8aea:	4630      	mov	r0, r6
    8aec:	4a12      	ldr	r2, [pc, #72]	; (8b38 <scan_connect_with_target.part.0+0x68>)
    8aee:	f005 fc31 	bl	e354 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
    8af2:	3508      	adds	r5, #8
    8af4:	4b11      	ldr	r3, [pc, #68]	; (8b3c <scan_connect_with_target.part.0+0x6c>)
	if (err) {
    8af6:	b150      	cbz	r0, 8b0e <scan_connect_with_target.part.0+0x3e>
	return list->head;
    8af8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8afa:	b1c4      	cbz	r4, 8b2e <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
    8afc:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8b00:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
    8b02:	689b      	ldr	r3, [r3, #8]
    8b04:	b10b      	cbz	r3, 8b0a <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
    8b06:	4628      	mov	r0, r5
    8b08:	4798      	blx	r3
	return node->next;
    8b0a:	6864      	ldr	r4, [r4, #4]
    8b0c:	e7f5      	b.n	8afa <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
    8b0e:	9e01      	ldr	r6, [sp, #4]
	return list->head;
    8b10:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8b12:	b14c      	cbz	r4, 8b28 <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
    8b14:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8b18:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
    8b1a:	68db      	ldr	r3, [r3, #12]
    8b1c:	b113      	cbz	r3, 8b24 <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
    8b1e:	4631      	mov	r1, r6
    8b20:	4628      	mov	r0, r5
    8b22:	4798      	blx	r3
	return node->next;
    8b24:	6864      	ldr	r4, [r4, #4]
    8b26:	e7f4      	b.n	8b12 <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
    8b28:	9801      	ldr	r0, [sp, #4]
    8b2a:	f005 f97d 	bl	de28 <bt_conn_unref>
}
    8b2e:	b006      	add	sp, #24
    8b30:	bd70      	pop	{r4, r5, r6, pc}
    8b32:	bf00      	nop
    8b34:	0001faa8 	.word	0x0001faa8
    8b38:	200063c8 	.word	0x200063c8
    8b3c:	20006354 	.word	0x20006354

00008b40 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    8b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    8b44:	4d30      	ldr	r5, [pc, #192]	; (8c08 <scan_recv+0xc8>)
{
    8b46:	b094      	sub	sp, #80	; 0x50
    8b48:	4606      	mov	r6, r0
    8b4a:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
    8b4c:	2250      	movs	r2, #80	; 0x50
    8b4e:	2100      	movs	r1, #0
    8b50:	4668      	mov	r0, sp
    8b52:	f016 fc5e 	bl	1f412 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    8b56:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
    8b5a:	f88d 3003 	strb.w	r3, [sp, #3]
	if (is_name_filter_enabled()) {
    8b5e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    8b62:	b113      	cbz	r3, 8b6a <scan_recv+0x2a>
		control->filter_cnt++;
    8b64:	2301      	movs	r3, #1
    8b66:	f88d 3000 	strb.w	r3, [sp]
	if (is_manufacturer_data_filter_enabled()) {
    8b6a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
    8b6e:	b123      	cbz	r3, 8b7a <scan_recv+0x3a>
		control->filter_cnt++;
    8b70:	f89d 3000 	ldrb.w	r3, [sp]
    8b74:	3301      	adds	r3, #1
    8b76:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    8b7a:	7a33      	ldrb	r3, [r6, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8b7c:	4620      	mov	r0, r4
    8b7e:	f003 0301 	and.w	r3, r3, #1
    8b82:	f88d 3004 	strb.w	r3, [sp, #4]
    8b86:	f014 fcf4 	bl	1d572 <net_buf_simple_headroom>
    8b8a:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    8b8c:	466a      	mov	r2, sp
    8b8e:	4620      	mov	r0, r4
    8b90:	491e      	ldr	r1, [pc, #120]	; (8c0c <scan_recv+0xcc>)
	state->len = buf->len;
    8b92:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    8b96:	f003 fae5 	bl	c164 <bt_data_parse>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8b9a:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    8b9c:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    8ba0:	fa13 f787 	uxtah	r7, r3, r7
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    8ba4:	4b1a      	ldr	r3, [pc, #104]	; (8c10 <scan_recv+0xd0>)
    8ba6:	6027      	str	r7, [r4, #0]
	scan_control.device_info.adv_data = ad;
    8ba8:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
    8bac:	f89d 3003 	ldrb.w	r3, [sp, #3]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    8bb0:	6834      	ldr	r4, [r6, #0]
	scan_control.device_info.recv_info = info;
    8bb2:	9602      	str	r6, [sp, #8]
	if (control->all_mode &&
    8bb4:	f89d 6004 	ldrb.w	r6, [sp, #4]
    8bb8:	b1a3      	cbz	r3, 8be4 <scan_recv+0xa4>
    8bba:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8bbe:	f89d 3000 	ldrb.w	r3, [sp]
    8bc2:	429a      	cmp	r2, r3
    8bc4:	d112      	bne.n	8bec <scan_recv+0xac>
		notify_filter_matched(&control->device_info,
    8bc6:	4632      	mov	r2, r6
    8bc8:	a905      	add	r1, sp, #20
    8bca:	a802      	add	r0, sp, #8
    8bcc:	f7ff fec6 	bl	895c <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    8bd0:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
    8bd4:	b11b      	cbz	r3, 8bde <scan_recv+0x9e>
    8bd6:	4621      	mov	r1, r4
    8bd8:	4668      	mov	r0, sp
    8bda:	f7ff ff79 	bl	8ad0 <scan_connect_with_target.part.0>
}
    8bde:	b014      	add	sp, #80	; 0x50
    8be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
    8be4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d1ec      	bne.n	8bc6 <scan_recv+0x86>
	return list->head;
    8bec:	4b09      	ldr	r3, [pc, #36]	; (8c14 <scan_recv+0xd4>)
    8bee:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8bf0:	2c00      	cmp	r4, #0
    8bf2:	d0f4      	beq.n	8bde <scan_recv+0x9e>
		if (cb->cb_addr->filter_no_match) {
    8bf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    8bf8:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
    8bfa:	685b      	ldr	r3, [r3, #4]
    8bfc:	b113      	cbz	r3, 8c04 <scan_recv+0xc4>
			cb->cb_addr->filter_no_match(device_info, connectable);
    8bfe:	4631      	mov	r1, r6
    8c00:	a802      	add	r0, sp, #8
    8c02:	4798      	blx	r3
	return node->next;
    8c04:	6864      	ldr	r4, [r4, #4]
    8c06:	e7f3      	b.n	8bf0 <scan_recv+0xb0>
    8c08:	2000635c 	.word	0x2000635c
    8c0c:	000088a9 	.word	0x000088a9
    8c10:	200063c8 	.word	0x200063c8
    8c14:	20006354 	.word	0x20006354

00008c18 <bt_scan_init>:
{
    8c18:	b570      	push	{r4, r5, r6, lr}
    8c1a:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    8c1c:	4c14      	ldr	r4, [pc, #80]	; (8c70 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    8c1e:	4815      	ldr	r0, [pc, #84]	; (8c74 <bt_scan_init+0x5c>)
    8c20:	f004 fdc2 	bl	d7a8 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    8c24:	2254      	movs	r2, #84	; 0x54
    8c26:	2100      	movs	r1, #0
    8c28:	4620      	mov	r0, r4
    8c2a:	f016 fbf2 	bl	1f412 <memset>
	if (init) {
    8c2e:	b1be      	cbz	r6, 8c60 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    8c30:	7933      	ldrb	r3, [r6, #4]
    8c32:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		if (init->scan_param) {
    8c36:	6835      	ldr	r5, [r6, #0]
    8c38:	b15d      	cbz	r5, 8c52 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    8c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8c3c:	3458      	adds	r4, #88	; 0x58
    8c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8c40:	682b      	ldr	r3, [r5, #0]
    8c42:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    8c44:	68b2      	ldr	r2, [r6, #8]
    8c46:	b13a      	cbz	r2, 8c58 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    8c48:	4b0b      	ldr	r3, [pc, #44]	; (8c78 <bt_scan_init+0x60>)
    8c4a:	6810      	ldr	r0, [r2, #0]
    8c4c:	6851      	ldr	r1, [r2, #4]
    8c4e:	c303      	stmia	r3!, {r0, r1}
}
    8c50:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    8c52:	f7ff fe0b 	bl	886c <scan_default_param_set>
    8c56:	e7f5      	b.n	8c44 <bt_scan_init+0x2c>
}
    8c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    8c5c:	f7ff be18 	b.w	8890 <scan_default_conn_param_set>
		scan_default_param_set();
    8c60:	f7ff fe04 	bl	886c <scan_default_param_set>
		scan_default_conn_param_set();
    8c64:	f7ff fe14 	bl	8890 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    8c68:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
}
    8c6c:	e7f0      	b.n	8c50 <bt_scan_init+0x38>
    8c6e:	bf00      	nop
    8c70:	2000635c 	.word	0x2000635c
    8c74:	200001f8 	.word	0x200001f8
    8c78:	200063c8 	.word	0x200063c8

00008c7c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    8c7c:	4603      	mov	r3, r0
    8c7e:	b108      	cbz	r0, 8c84 <bt_scan_start+0x8>
    8c80:	2801      	cmp	r0, #1
    8c82:	d105      	bne.n	8c90 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
    8c84:	4804      	ldr	r0, [pc, #16]	; (8c98 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    8c86:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
    8c88:	f800 3f58 	strb.w	r3, [r0, #88]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    8c8c:	f004 bcee 	b.w	d66c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    8c90:	f06f 0015 	mvn.w	r0, #21
    8c94:	4770      	bx	lr
    8c96:	bf00      	nop
    8c98:	2000635c 	.word	0x2000635c

00008c9c <ddf_distance_meas_ccc_cfg_changed>:

static void ddf_distance_meas_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	bool notification_enabled = (value == BT_GATT_CCC_NOTIFY);

	if (ddfs_inst.cb && ddfs_inst.cb->dm_notification_config_changed) {
    8c9c:	4b04      	ldr	r3, [pc, #16]	; (8cb0 <ddf_distance_meas_ccc_cfg_changed+0x14>)
    8c9e:	69db      	ldr	r3, [r3, #28]
    8ca0:	b12b      	cbz	r3, 8cae <ddf_distance_meas_ccc_cfg_changed+0x12>
    8ca2:	68db      	ldr	r3, [r3, #12]
    8ca4:	b11b      	cbz	r3, 8cae <ddf_distance_meas_ccc_cfg_changed+0x12>
		ddfs_inst.cb->dm_notification_config_changed(notification_enabled);
    8ca6:	1e4a      	subs	r2, r1, #1
    8ca8:	4250      	negs	r0, r2
    8caa:	4150      	adcs	r0, r2
    8cac:	4718      	bx	r3
	}
}
    8cae:	4770      	bx	lr
    8cb0:	200063ec 	.word	0x200063ec

00008cb4 <ddf_azimuth_meas_ccc_cfg_changed>:

static void ddf_azimuth_meas_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	bool notification_enabled = (value == BT_GATT_CCC_NOTIFY);

	if (ddfs_inst.cb && ddfs_inst.cb->am_notification_config_changed) {
    8cb4:	4b04      	ldr	r3, [pc, #16]	; (8cc8 <ddf_azimuth_meas_ccc_cfg_changed+0x14>)
    8cb6:	69db      	ldr	r3, [r3, #28]
    8cb8:	b12b      	cbz	r3, 8cc6 <ddf_azimuth_meas_ccc_cfg_changed+0x12>
    8cba:	689b      	ldr	r3, [r3, #8]
    8cbc:	b11b      	cbz	r3, 8cc6 <ddf_azimuth_meas_ccc_cfg_changed+0x12>
		ddfs_inst.cb->am_notification_config_changed(notification_enabled);
    8cbe:	1e4a      	subs	r2, r1, #1
    8cc0:	4250      	negs	r0, r2
    8cc2:	4150      	adcs	r0, r2
    8cc4:	4718      	bx	r3
	}
}
    8cc6:	4770      	bx	lr
    8cc8:	200063ec 	.word	0x200063ec

00008ccc <ddf_elevation_meas_ccc_cfg_changed>:

static void ddf_elevation_meas_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	bool notification_enabled = (value == BT_GATT_CCC_NOTIFY);

	if (ddfs_inst.cb && ddfs_inst.cb->em_notification_config_changed) {
    8ccc:	4b04      	ldr	r3, [pc, #16]	; (8ce0 <ddf_elevation_meas_ccc_cfg_changed+0x14>)
    8cce:	69db      	ldr	r3, [r3, #28]
    8cd0:	b12b      	cbz	r3, 8cde <ddf_elevation_meas_ccc_cfg_changed+0x12>
    8cd2:	691b      	ldr	r3, [r3, #16]
    8cd4:	b11b      	cbz	r3, 8cde <ddf_elevation_meas_ccc_cfg_changed+0x12>
		ddfs_inst.cb->em_notification_config_changed(notification_enabled);
    8cd6:	1e4a      	subs	r2, r1, #1
    8cd8:	4250      	negs	r0, r2
    8cda:	4150      	adcs	r0, r2
    8cdc:	4718      	bx	r3
	}
}
    8cde:	4770      	bx	lr
    8ce0:	200063ec 	.word	0x200063ec

00008ce4 <indicate_destroy>:
}

static void indicate_destroy(struct bt_gatt_indicate_params *params)
{
	LOG_DBG("Indication complete");
	ddfs_inst.indicating = false;
    8ce4:	2200      	movs	r2, #0
    8ce6:	4b02      	ldr	r3, [pc, #8]	; (8cf0 <indicate_destroy+0xc>)
    8ce8:	f883 2020 	strb.w	r2, [r3, #32]
}
    8cec:	4770      	bx	lr
    8cee:	bf00      	nop
    8cf0:	200063ec 	.word	0x200063ec

00008cf4 <ctrl_point_ind>:
	BT_GATT_CCC(NULL, BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
);

static void ctrl_point_ind(struct bt_conn *conn, uint8_t req_op, uint8_t status,
			   const void *data, uint16_t len)
{
    8cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cf8:	b08b      	sub	sp, #44	; 0x2c
    8cfa:	461e      	mov	r6, r3
	int err;
	static const struct bt_gatt_attr *attr;
	struct dm_ctrl_point_ind *ind;

	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*ind) + len);
    8cfc:	466b      	mov	r3, sp
{
    8cfe:	af00      	add	r7, sp, #0
    8d00:	f8b7 8050 	ldrh.w	r8, [r7, #80]	; 0x50
    8d04:	4692      	mov	sl, r2
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*ind) + len);
    8d06:	f108 020a 	add.w	r2, r8, #10
    8d0a:	08d2      	lsrs	r2, r2, #3
    8d0c:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    8d10:	2200      	movs	r2, #0
    8d12:	469d      	mov	sp, r3

	if (!attr) {
    8d14:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8e00 <ctrl_point_ind+0x10c>
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*ind) + len);
    8d18:	81ba      	strh	r2, [r7, #12]
	if (!attr) {
    8d1a:	f8d9 2000 	ldr.w	r2, [r9]
{
    8d1e:	468b      	mov	fp, r1
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*ind) + len);
    8d20:	f108 0103 	add.w	r1, r8, #3
{
    8d24:	6078      	str	r0, [r7, #4]
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*ind) + len);
    8d26:	f8c7 d008 	str.w	sp, [r7, #8]
    8d2a:	81f9      	strh	r1, [r7, #14]
    8d2c:	f8c7 d010 	str.w	sp, [r7, #16]
	if (!attr) {
    8d30:	bb1a      	cbnz	r2, 8d7a <ctrl_point_ind+0x86>
		attr = bt_gatt_find_by_uuid(ddf_svc.attrs, ddf_svc.attr_count,
					    BT_UUID_DFFS_CTRL_POINT);
    8d32:	f107 0514 	add.w	r5, r7, #20
    8d36:	462a      	mov	r2, r5
    8d38:	4c29      	ldr	r4, [pc, #164]	; (8de0 <ctrl_point_ind+0xec>)
    8d3a:	f104 0e10 	add.w	lr, r4, #16
    8d3e:	46ac      	mov	ip, r5
    8d40:	6820      	ldr	r0, [r4, #0]
    8d42:	6861      	ldr	r1, [r4, #4]
    8d44:	3408      	adds	r4, #8
    8d46:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8d4a:	4574      	cmp	r4, lr
    8d4c:	4665      	mov	r5, ip
    8d4e:	d1f6      	bne.n	8d3e <ctrl_point_ind+0x4a>
    8d50:	7821      	ldrb	r1, [r4, #0]
		attr = bt_gatt_find_by_uuid(ddf_svc.attrs, ddf_svc.attr_count,
    8d52:	4824      	ldr	r0, [pc, #144]	; (8de4 <ctrl_point_ind+0xf0>)
					    BT_UUID_DFFS_CTRL_POINT);
    8d54:	f88c 1000 	strb.w	r1, [ip]
		attr = bt_gatt_find_by_uuid(ddf_svc.attrs, ddf_svc.attr_count,
    8d58:	210f      	movs	r1, #15
    8d5a:	f007 fa35 	bl	101c8 <bt_gatt_find_by_uuid>
    8d5e:	f8c9 0000 	str.w	r0, [r9]
	}

	__ASSERT_NO_MSG(attr);
    8d62:	b950      	cbnz	r0, 8d7a <ctrl_point_ind+0x86>
    8d64:	4920      	ldr	r1, [pc, #128]	; (8de8 <ctrl_point_ind+0xf4>)
    8d66:	4821      	ldr	r0, [pc, #132]	; (8dec <ctrl_point_ind+0xf8>)
    8d68:	f44f 728d 	mov.w	r2, #282	; 0x11a
    8d6c:	f012 fad0 	bl	1b310 <assert_print>
    8d70:	f44f 718d 	mov.w	r1, #282	; 0x11a
    8d74:	481c      	ldr	r0, [pc, #112]	; (8de8 <ctrl_point_ind+0xf4>)
    8d76:	f012 fac4 	bl	1b302 <assert_post_action>

	ind = net_buf_simple_add(&buf, sizeof(*ind));
    8d7a:	2103      	movs	r1, #3
    8d7c:	f107 0008 	add.w	r0, r7, #8
    8d80:	f008 f944 	bl	1100c <net_buf_simple_add>
	ind->op = DDF_OP_RESPONSE;
    8d84:	2210      	movs	r2, #16
	ind = net_buf_simple_add(&buf, sizeof(*ind));
    8d86:	4605      	mov	r5, r0
	ind->op = DDF_OP_RESPONSE;
    8d88:	7002      	strb	r2, [r0, #0]
	ind->req_op = req_op;
    8d8a:	f880 b001 	strb.w	fp, [r0, #1]
	ind->status = status;
    8d8e:	f880 a002 	strb.w	sl, [r0, #2]

	if (data && len) {
    8d92:	b146      	cbz	r6, 8da6 <ctrl_point_ind+0xb2>
    8d94:	f1b8 0f00 	cmp.w	r8, #0
    8d98:	d005      	beq.n	8da6 <ctrl_point_ind+0xb2>
		net_buf_simple_add_mem(&buf, data, len);
    8d9a:	4642      	mov	r2, r8
    8d9c:	4631      	mov	r1, r6
    8d9e:	f107 0008 	add.w	r0, r7, #8
    8da2:	f014 fbf2 	bl	1d58a <net_buf_simple_add_mem>
	}

	ddfs_inst.ind_params.attr = attr;
    8da6:	4c12      	ldr	r4, [pc, #72]	; (8df0 <ctrl_point_ind+0xfc>)
    8da8:	f8d9 3000 	ldr.w	r3, [r9]
	ddfs_inst.ind_params.func = indicate_cb;
	ddfs_inst.ind_params.destroy = indicate_destroy;
	ddfs_inst.ind_params.data = ind;
	ddfs_inst.ind_params.len = buf.len;

	err = bt_gatt_indicate(conn, &ddfs_inst.ind_params);
    8dac:	4621      	mov	r1, r4
	ddfs_inst.ind_params.attr = attr;
    8dae:	6063      	str	r3, [r4, #4]
	ddfs_inst.ind_params.func = indicate_cb;
    8db0:	4b10      	ldr	r3, [pc, #64]	; (8df4 <ctrl_point_ind+0x100>)
	err = bt_gatt_indicate(conn, &ddfs_inst.ind_params);
    8db2:	6878      	ldr	r0, [r7, #4]
	ddfs_inst.ind_params.func = indicate_cb;
    8db4:	60a3      	str	r3, [r4, #8]
	ddfs_inst.ind_params.destroy = indicate_destroy;
    8db6:	4b10      	ldr	r3, [pc, #64]	; (8df8 <ctrl_point_ind+0x104>)
	ddfs_inst.ind_params.data = ind;
    8db8:	e9c4 3503 	strd	r3, r5, [r4, #12]
	ddfs_inst.ind_params.len = buf.len;
    8dbc:	89bb      	ldrh	r3, [r7, #12]
    8dbe:	82a3      	strh	r3, [r4, #20]
	err = bt_gatt_indicate(conn, &ddfs_inst.ind_params);
    8dc0:	f007 fb3c 	bl	1043c <bt_gatt_indicate>
	if (err) {
    8dc4:	4602      	mov	r2, r0
    8dc6:	b138      	cbz	r0, 8dd8 <ctrl_point_ind+0xe4>
		LOG_ERR("Failed to send Control Point indication, err: %d", err);
    8dc8:	2145      	movs	r1, #69	; 0x45
    8dca:	480c      	ldr	r0, [pc, #48]	; (8dfc <ctrl_point_ind+0x108>)
    8dcc:	f012 fab4 	bl	1b338 <z_log_minimal_printk>
	} else {
		ddfs_inst.indicating = true;
	}
}
    8dd0:	372c      	adds	r7, #44	; 0x2c
    8dd2:	46bd      	mov	sp, r7
    8dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ddfs_inst.indicating = true;
    8dd8:	2301      	movs	r3, #1
    8dda:	f884 3020 	strb.w	r3, [r4, #32]
}
    8dde:	e7f7      	b.n	8dd0 <ctrl_point_ind+0xdc>
    8de0:	0001fbb3 	.word	0x0001fbb3
    8de4:	0001fce8 	.word	0x0001fce8
    8de8:	00022414 	.word	0x00022414
    8dec:	000221f8 	.word	0x000221f8
    8df0:	200063ec 	.word	0x200063ec
    8df4:	0001b695 	.word	0x0001b695
    8df8:	00008ce5 	.word	0x00008ce5
    8dfc:	00022445 	.word	0x00022445
    8e00:	200063d0 	.word	0x200063d0

00008e04 <read_ddf_dm_featute>:
{
    8e04:	b530      	push	{r4, r5, lr}
	if (ddfs_inst.dm_features.ranging_mode_rtt) {
    8e06:	4c0b      	ldr	r4, [pc, #44]	; (8e34 <read_ddf_dm_featute+0x30>)
{
    8e08:	b087      	sub	sp, #28
	if (ddfs_inst.dm_features.ranging_mode_rtt) {
    8e0a:	7e25      	ldrb	r5, [r4, #24]
    8e0c:	f005 0401 	and.w	r4, r5, #1
	if (ddfs_inst.dm_features.ranging_mode_mcpd) {
    8e10:	07ad      	lsls	r5, r5, #30
		feature |= DDF_FEAT_DM_RANGING_MOCE_MCPD;
    8e12:	bf48      	it	mi
    8e14:	f044 0402 	orrmi.w	r4, r4, #2
	uint8_t feature = sys_cpu_to_le16(dm_feature_encode());
    8e18:	f88d 4017 	strb.w	r4, [sp, #23]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &feature, sizeof(feature));
    8e1c:	2401      	movs	r4, #1
    8e1e:	9402      	str	r4, [sp, #8]
    8e20:	f10d 0417 	add.w	r4, sp, #23
    8e24:	9401      	str	r4, [sp, #4]
    8e26:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    8e2a:	9400      	str	r4, [sp, #0]
    8e2c:	f014 fa87 	bl	1d33e <bt_gatt_attr_read>
}
    8e30:	b007      	add	sp, #28
    8e32:	bd30      	pop	{r4, r5, pc}
    8e34:	200063ec 	.word	0x200063ec

00008e38 <dm_write_ctrl_point>:
{
    8e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e3a:	4615      	mov	r5, r2
	NET_BUF_SIMPLE_DEFINE(conf_buf, DDF_CP_READ_CONF_BUF_SIZE);
    8e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
{
    8e40:	b089      	sub	sp, #36	; 0x24
    8e42:	461c      	mov	r4, r3
	NET_BUF_SIMPLE_DEFINE(conf_buf, DDF_CP_READ_CONF_BUF_SIZE);
    8e44:	ab03      	add	r3, sp, #12
    8e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if (!bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_INDICATE)) {
    8e4a:	2202      	movs	r2, #2
{
    8e4c:	4606      	mov	r6, r0
	NET_BUF_SIMPLE_DEFINE(conf_buf, DDF_CP_READ_CONF_BUF_SIZE);
    8e4e:	9305      	str	r3, [sp, #20]
	if (!bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_INDICATE)) {
    8e50:	f007 f9d8 	bl	10204 <bt_gatt_is_subscribed>
    8e54:	2800      	cmp	r0, #0
    8e56:	d04f      	beq.n	8ef8 <dm_write_ctrl_point+0xc0>
	if (ddfs_inst.indicating) {
    8e58:	4b2c      	ldr	r3, [pc, #176]	; (8f0c <dm_write_ctrl_point+0xd4>)
    8e5a:	f893 2020 	ldrb.w	r2, [r3, #32]
    8e5e:	2a00      	cmp	r2, #0
    8e60:	d14d      	bne.n	8efe <dm_write_ctrl_point+0xc6>
	if (!len) {
    8e62:	2c00      	cmp	r4, #0
    8e64:	d04e      	beq.n	8f04 <dm_write_ctrl_point+0xcc>
	if (!dm_ctrl_point_op_code_validate(req->op)) {
    8e66:	782f      	ldrb	r7, [r5, #0]
	switch (op_code) {
    8e68:	2f01      	cmp	r7, #1
    8e6a:	d010      	beq.n	8e8e <dm_write_ctrl_point+0x56>
    8e6c:	2f0a      	cmp	r7, #10
    8e6e:	d01c      	beq.n	8eaa <dm_write_ctrl_point+0x72>
		LOG_WRN("Operation code not supported %#x", req->op);
    8e70:	463a      	mov	r2, r7
    8e72:	2157      	movs	r1, #87	; 0x57
    8e74:	4826      	ldr	r0, [pc, #152]	; (8f10 <dm_write_ctrl_point+0xd8>)
    8e76:	f012 fa5f 	bl	1b338 <z_log_minimal_printk>
		ctrl_point_ind(conn, req->op, DDF_CP_RSP_OP_NOT_SUPP, NULL, 0);
    8e7a:	2300      	movs	r3, #0
    8e7c:	2202      	movs	r2, #2
    8e7e:	9300      	str	r3, [sp, #0]
		ctrl_point_ind(conn, req->op, DDF_CP_RSP_INVAL_PARAM, NULL, 0);
    8e80:	4630      	mov	r0, r6
    8e82:	7829      	ldrb	r1, [r5, #0]
    8e84:	f7ff ff36 	bl	8cf4 <ctrl_point_ind>
}
    8e88:	4620      	mov	r0, r4
    8e8a:	b009      	add	sp, #36	; 0x24
    8e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (ddfs_inst.dm_features.ranging_mode_rtt ||
    8e8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!dm_ctrl_point_op_code_validate(req->op)) {
    8e90:	0792      	lsls	r2, r2, #30
    8e92:	d0ed      	beq.n	8e70 <dm_write_ctrl_point+0x38>
	if (!dm_ctrl_point_param_validate(req, len)) {
    8e94:	2c02      	cmp	r4, #2
    8e96:	d023      	beq.n	8ee0 <dm_write_ctrl_point+0xa8>
		LOG_WRN("Invalid parameter for op code %#x", req->op);
    8e98:	463a      	mov	r2, r7
    8e9a:	2157      	movs	r1, #87	; 0x57
    8e9c:	481d      	ldr	r0, [pc, #116]	; (8f14 <dm_write_ctrl_point+0xdc>)
    8e9e:	f012 fa4b 	bl	1b338 <z_log_minimal_printk>
		ctrl_point_ind(conn, req->op, DDF_CP_RSP_INVAL_PARAM, NULL, 0);
    8ea2:	2300      	movs	r3, #0
    8ea4:	2203      	movs	r2, #3
    8ea6:	9300      	str	r3, [sp, #0]
    8ea8:	e7ea      	b.n	8e80 <dm_write_ctrl_point+0x48>
		return (ddfs_inst.cb && ddfs_inst.cb->dm_config_read);
    8eaa:	69db      	ldr	r3, [r3, #28]
    8eac:	2b00      	cmp	r3, #0
    8eae:	d0df      	beq.n	8e70 <dm_write_ctrl_point+0x38>
    8eb0:	685b      	ldr	r3, [r3, #4]
	if (!dm_ctrl_point_op_code_validate(req->op)) {
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d0dc      	beq.n	8e70 <dm_write_ctrl_point+0x38>
	if (!dm_ctrl_point_param_validate(req, len)) {
    8eb6:	2c01      	cmp	r4, #1
    8eb8:	d1ee      	bne.n	8e98 <dm_write_ctrl_point+0x60>
			if (!ddfs_inst.cb->dm_config_read(&dm_config)) {
    8eba:	a804      	add	r0, sp, #16
    8ebc:	4798      	blx	r3
    8ebe:	b9b0      	cbnz	r0, 8eee <dm_write_ctrl_point+0xb6>
				net_buf_simple_add_u8(&conf_buf, dm_config.mode);
    8ec0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    8ec4:	a805      	add	r0, sp, #20
    8ec6:	f014 fb6c 	bl	1d5a2 <net_buf_simple_add_u8>
				net_buf_simple_add_u8(&conf_buf, dm_config.high_precision ?
    8eca:	f89d 1011 	ldrb.w	r1, [sp, #17]
    8ece:	a805      	add	r0, sp, #20
    8ed0:	f014 fb67 	bl	1d5a2 <net_buf_simple_add_u8>
				ctrl_point_ind(conn, req->op, status, conf_buf.data, conf_buf.len);
    8ed4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8ed8:	4622      	mov	r2, r4
    8eda:	9300      	str	r3, [sp, #0]
    8edc:	9b05      	ldr	r3, [sp, #20]
    8ede:	e7cf      	b.n	8e80 <dm_write_ctrl_point+0x48>
		if (ddfs_inst.cb && ddfs_inst.cb->dm_ranging_mode_set) {
    8ee0:	69db      	ldr	r3, [r3, #28]
    8ee2:	b123      	cbz	r3, 8eee <dm_write_ctrl_point+0xb6>
    8ee4:	681b      	ldr	r3, [r3, #0]
    8ee6:	b113      	cbz	r3, 8eee <dm_write_ctrl_point+0xb6>
			if (!ddfs_inst.cb->dm_ranging_mode_set(req->ranging_mode)) {
    8ee8:	7868      	ldrb	r0, [r5, #1]
    8eea:	4798      	blx	r3
    8eec:	b100      	cbz	r0, 8ef0 <dm_write_ctrl_point+0xb8>
		status = DDF_CP_RSP_FAILED;
    8eee:	2704      	movs	r7, #4
	ctrl_point_ind(conn, req->op, status, NULL, 0);
    8ef0:	2300      	movs	r3, #0
    8ef2:	463a      	mov	r2, r7
    8ef4:	9300      	str	r3, [sp, #0]
    8ef6:	e7c3      	b.n	8e80 <dm_write_ctrl_point+0x48>
		return BT_GATT_ERR(DDF_ERR_CCC_CONFIG);
    8ef8:	f06f 0480 	mvn.w	r4, #128	; 0x80
    8efc:	e7c4      	b.n	8e88 <dm_write_ctrl_point+0x50>
		return BT_GATT_ERR(DDF_ERR_IN_PROGRESS);
    8efe:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    8f02:	e7c1      	b.n	8e88 <dm_write_ctrl_point+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8f04:	f06f 040c 	mvn.w	r4, #12
    8f08:	e7be      	b.n	8e88 <dm_write_ctrl_point+0x50>
    8f0a:	bf00      	nop
    8f0c:	200063ec 	.word	0x200063ec
    8f10:	0002247b 	.word	0x0002247b
    8f14:	000224a1 	.word	0x000224a1

00008f18 <bt_ddfs_distance_measurement_notify>:

int bt_ddfs_distance_measurement_notify(struct bt_conn *conn,
					const struct bt_ddfs_distance_measurement *measurement)
{
    8f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f1c:	4606      	mov	r6, r0
	static const struct bt_gatt_attr *attr = &ddf_svc.attrs[DDF_SVC_DISTANCE_MEAS_ATTR_IDX];

	if (!measurement) {
    8f1e:	460c      	mov	r4, r1
{
    8f20:	b08e      	sub	sp, #56	; 0x38
	if (!measurement) {
    8f22:	b921      	cbnz	r1, 8f2e <bt_ddfs_distance_measurement_notify+0x16>
		return -EINVAL;
    8f24:	f06f 0015 	mvn.w	r0, #21
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify(conn, attr, dist_meas_notify, buf.len);
	} else {
		return -EINVAL;
	}
}
    8f28:	b00e      	add	sp, #56	; 0x38
    8f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool is_rtt = measurement->ranging_mode == BT_DDFS_DM_RANGING_MODE_RTT;
    8f2e:	7a0f      	ldrb	r7, [r1, #8]
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*dist_meas_notify) +
    8f30:	b367      	cbz	r7, 8f8c <bt_ddfs_distance_measurement_notify+0x74>
    8f32:	2f01      	cmp	r7, #1
    8f34:	d12e      	bne.n	8f94 <bt_ddfs_distance_measurement_notify+0x7c>
    8f36:	2109      	movs	r1, #9
    8f38:	230a      	movs	r3, #10
    8f3a:	aa09      	add	r2, sp, #36	; 0x24
    8f3c:	f04f 0800 	mov.w	r8, #0
    8f40:	440b      	add	r3, r1
	dist_meas_notify = net_buf_simple_add(&buf, sizeof(*dist_meas_notify));
    8f42:	a806      	add	r0, sp, #24
    8f44:	2109      	movs	r1, #9
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*dist_meas_notify) +
    8f46:	f8ad 301e 	strh.w	r3, [sp, #30]
    8f4a:	9206      	str	r2, [sp, #24]
    8f4c:	f8ad 801c 	strh.w	r8, [sp, #28]
    8f50:	9208      	str	r2, [sp, #32]
	dist_meas_notify = net_buf_simple_add(&buf, sizeof(*dist_meas_notify));
    8f52:	f008 f85b 	bl	1100c <net_buf_simple_add>
	dist_meas_notify->flags = 0;
    8f56:	f880 8000 	strb.w	r8, [r0]
	dist_meas_notify->quality = measurement->quality;
    8f5a:	7823      	ldrb	r3, [r4, #0]
	dist_meas_notify = net_buf_simple_add(&buf, sizeof(*dist_meas_notify));
    8f5c:	4605      	mov	r5, r0
	dist_meas_notify->quality = measurement->quality;
    8f5e:	7043      	strb	r3, [r0, #1]
	dist_meas_notify->bt_addr.type = measurement->bt_addr.type;
    8f60:	7863      	ldrb	r3, [r4, #1]
	bt_addr_copy(&dist_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    8f62:	1ca1      	adds	r1, r4, #2
	dist_meas_notify->bt_addr.type = measurement->bt_addr.type;
    8f64:	7203      	strb	r3, [r0, #8]
	bt_addr_copy(&dist_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    8f66:	3002      	adds	r0, #2
    8f68:	f012 fbaa 	bl	1b6c0 <bt_addr_copy>
	if (is_rtt) {
    8f6c:	b9af      	cbnz	r7, 8f9a <bt_ddfs_distance_measurement_notify+0x82>
		dist_meas_notify->flags |= DDF_DM_RTT_PRESENT;
    8f6e:	2301      	movs	r3, #1
    8f70:	702b      	strb	r3, [r5, #0]
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.rtt.rtt);
    8f72:	8961      	ldrh	r1, [r4, #10]
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.high_precision);
    8f74:	a806      	add	r0, sp, #24
    8f76:	f014 fb1b 	bl	1d5b0 <net_buf_simple_add_le16>
	if (!conn) {
    8f7a:	bb46      	cbnz	r6, 8fce <bt_ddfs_distance_measurement_notify+0xb6>
		return bt_gatt_notify(conn, attr, dist_meas_notify, buf.len);
    8f7c:	462a      	mov	r2, r5
    8f7e:	4630      	mov	r0, r6
    8f80:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    8f84:	4916      	ldr	r1, [pc, #88]	; (8fe0 <bt_ddfs_distance_measurement_notify+0xc8>)
    8f86:	f012 fb86 	bl	1b696 <bt_gatt_notify>
    8f8a:	e7cd      	b.n	8f28 <bt_ddfs_distance_measurement_notify+0x10>
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*dist_meas_notify) +
    8f8c:	210b      	movs	r1, #11
    8f8e:	aa03      	add	r2, sp, #12
    8f90:	2300      	movs	r3, #0
    8f92:	e7d3      	b.n	8f3c <bt_ddfs_distance_measurement_notify+0x24>
    8f94:	466a      	mov	r2, sp
    8f96:	2109      	movs	r1, #9
    8f98:	e7fa      	b.n	8f90 <bt_ddfs_distance_measurement_notify+0x78>
	} else if (is_mcpd) {
    8f9a:	2f01      	cmp	r7, #1
    8f9c:	d1ed      	bne.n	8f7a <bt_ddfs_distance_measurement_notify+0x62>
		dist_meas_notify->flags |= DDF_DM_MCPD_PRESENT;
    8f9e:	2302      	movs	r3, #2
    8fa0:	702b      	strb	r3, [r5, #0]
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.ifft);
    8fa2:	8961      	ldrh	r1, [r4, #10]
    8fa4:	a806      	add	r0, sp, #24
    8fa6:	f014 fb03 	bl	1d5b0 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.phase_slope);
    8faa:	89a1      	ldrh	r1, [r4, #12]
    8fac:	a806      	add	r0, sp, #24
    8fae:	f014 faff 	bl	1d5b0 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.rssi_openspace);
    8fb2:	89e1      	ldrh	r1, [r4, #14]
    8fb4:	a806      	add	r0, sp, #24
    8fb6:	f014 fafb 	bl	1d5b0 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.best);
    8fba:	8a21      	ldrh	r1, [r4, #16]
    8fbc:	a806      	add	r0, sp, #24
    8fbe:	f014 faf7 	bl	1d5b0 <net_buf_simple_add_le16>
		dist_meas_notify->flags |= DDF_DM_HIGH_PRECISION_PRESENT;
    8fc2:	782b      	ldrb	r3, [r5, #0]
    8fc4:	f043 0304 	orr.w	r3, r3, #4
    8fc8:	702b      	strb	r3, [r5, #0]
		net_buf_simple_add_le16(&buf, measurement->dist_estimates.mcpd.high_precision);
    8fca:	8a61      	ldrh	r1, [r4, #18]
    8fcc:	e7d2      	b.n	8f74 <bt_ddfs_distance_measurement_notify+0x5c>
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    8fce:	2201      	movs	r2, #1
    8fd0:	4630      	mov	r0, r6
    8fd2:	4903      	ldr	r1, [pc, #12]	; (8fe0 <bt_ddfs_distance_measurement_notify+0xc8>)
    8fd4:	f007 f916 	bl	10204 <bt_gatt_is_subscribed>
    8fd8:	2800      	cmp	r0, #0
    8fda:	d1cf      	bne.n	8f7c <bt_ddfs_distance_measurement_notify+0x64>
    8fdc:	e7a2      	b.n	8f24 <bt_ddfs_distance_measurement_notify+0xc>
    8fde:	bf00      	nop
    8fe0:	0001fcfc 	.word	0x0001fcfc

00008fe4 <bt_ddfs_azimuth_measurement_notify>:

int bt_ddfs_azimuth_measurement_notify(struct bt_conn *conn,
				       const struct bt_ddfs_azimuth_measurement *measurement)
{
    8fe4:	b570      	push	{r4, r5, r6, lr}
    8fe6:	4606      	mov	r6, r0
	static const struct bt_gatt_attr *attr = &ddf_svc.attrs[DDF_SVC_AZIMUTH_MEAS_ATTR_IDX];

	if (!measurement) {
    8fe8:	460d      	mov	r5, r1
{
    8fea:	b086      	sub	sp, #24
	if (!measurement) {
    8fec:	b919      	cbnz	r1, 8ff6 <bt_ddfs_azimuth_measurement_notify+0x12>
		return -EINVAL;
    8fee:	f06f 0015 	mvn.w	r0, #21
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify(conn, attr, azimuth_meas_notify, buf.len);
	} else {
		return -EINVAL;
	}
}
    8ff2:	b006      	add	sp, #24
    8ff4:	bd70      	pop	{r4, r5, r6, pc}
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*azimuth_meas_notify) + sizeof(measurement->value));
    8ff6:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
	azimuth_meas_notify = net_buf_simple_add(&buf, sizeof(*azimuth_meas_notify));
    8ffa:	2109      	movs	r1, #9
    8ffc:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*azimuth_meas_notify) + sizeof(measurement->value));
    8ffe:	9304      	str	r3, [sp, #16]
    9000:	f8cd d00c 	str.w	sp, [sp, #12]
    9004:	f8cd d014 	str.w	sp, [sp, #20]
	azimuth_meas_notify = net_buf_simple_add(&buf, sizeof(*azimuth_meas_notify));
    9008:	f008 f800 	bl	1100c <net_buf_simple_add>
	azimuth_meas_notify->flags = 0;
    900c:	2300      	movs	r3, #0
    900e:	7003      	strb	r3, [r0, #0]
	azimuth_meas_notify->quality = measurement->quality;
    9010:	782b      	ldrb	r3, [r5, #0]
	bt_addr_copy(&azimuth_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    9012:	1ca9      	adds	r1, r5, #2
	azimuth_meas_notify->quality = measurement->quality;
    9014:	7043      	strb	r3, [r0, #1]
	azimuth_meas_notify->bt_addr.type = measurement->bt_addr.type;
    9016:	786b      	ldrb	r3, [r5, #1]
	azimuth_meas_notify = net_buf_simple_add(&buf, sizeof(*azimuth_meas_notify));
    9018:	4604      	mov	r4, r0
	azimuth_meas_notify->bt_addr.type = measurement->bt_addr.type;
    901a:	7203      	strb	r3, [r0, #8]
	bt_addr_copy(&azimuth_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    901c:	3002      	adds	r0, #2
    901e:	f012 fb4f 	bl	1b6c0 <bt_addr_copy>
	net_buf_simple_add_le16(&buf, measurement->value);
    9022:	8929      	ldrh	r1, [r5, #8]
    9024:	a803      	add	r0, sp, #12
    9026:	f014 fac3 	bl	1d5b0 <net_buf_simple_add_le16>
	if (!conn) {
    902a:	b93e      	cbnz	r6, 903c <bt_ddfs_azimuth_measurement_notify+0x58>
		return bt_gatt_notify(conn, attr, azimuth_meas_notify, buf.len);
    902c:	4622      	mov	r2, r4
    902e:	4630      	mov	r0, r6
    9030:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9034:	4905      	ldr	r1, [pc, #20]	; (904c <bt_ddfs_azimuth_measurement_notify+0x68>)
    9036:	f012 fb2e 	bl	1b696 <bt_gatt_notify>
    903a:	e7da      	b.n	8ff2 <bt_ddfs_azimuth_measurement_notify+0xe>
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    903c:	2201      	movs	r2, #1
    903e:	4630      	mov	r0, r6
    9040:	4902      	ldr	r1, [pc, #8]	; (904c <bt_ddfs_azimuth_measurement_notify+0x68>)
    9042:	f007 f8df 	bl	10204 <bt_gatt_is_subscribed>
    9046:	2800      	cmp	r0, #0
    9048:	d1f0      	bne.n	902c <bt_ddfs_azimuth_measurement_notify+0x48>
    904a:	e7d0      	b.n	8fee <bt_ddfs_azimuth_measurement_notify+0xa>
    904c:	0001fd38 	.word	0x0001fd38

00009050 <bt_ddfs_elevation_measurement_notify>:

int bt_ddfs_elevation_measurement_notify(struct bt_conn *conn,
					const struct bt_ddfs_elevation_measurement *measurement)
{
    9050:	b570      	push	{r4, r5, r6, lr}
    9052:	4606      	mov	r6, r0
	static const struct bt_gatt_attr *attr = &ddf_svc.attrs[DDF_SVC_ELEVATION_MEAS_ATTR_IDX];

	if (!measurement) {
    9054:	460d      	mov	r5, r1
{
    9056:	b086      	sub	sp, #24
	if (!measurement) {
    9058:	b919      	cbnz	r1, 9062 <bt_ddfs_elevation_measurement_notify+0x12>
		return -EINVAL;
    905a:	f06f 0015 	mvn.w	r0, #21
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify(conn, attr, elevation_meas_notify, buf.len);
	} else {
		return -EINVAL;
	}
}
    905e:	b006      	add	sp, #24
    9060:	bd70      	pop	{r4, r5, r6, pc}
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*elevation_meas_notify) + sizeof(measurement->value));
    9062:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
	elevation_meas_notify = net_buf_simple_add(&buf, sizeof(*elevation_meas_notify));
    9066:	2109      	movs	r1, #9
    9068:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(buf, sizeof(*elevation_meas_notify) + sizeof(measurement->value));
    906a:	9304      	str	r3, [sp, #16]
    906c:	f8cd d00c 	str.w	sp, [sp, #12]
    9070:	f8cd d014 	str.w	sp, [sp, #20]
	elevation_meas_notify = net_buf_simple_add(&buf, sizeof(*elevation_meas_notify));
    9074:	f007 ffca 	bl	1100c <net_buf_simple_add>
	elevation_meas_notify->flags = 0;
    9078:	2300      	movs	r3, #0
    907a:	7003      	strb	r3, [r0, #0]
	elevation_meas_notify->quality = measurement->quality;
    907c:	782b      	ldrb	r3, [r5, #0]
	bt_addr_copy(&elevation_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    907e:	1ca9      	adds	r1, r5, #2
	elevation_meas_notify->quality = measurement->quality;
    9080:	7043      	strb	r3, [r0, #1]
	elevation_meas_notify->bt_addr.type = measurement->bt_addr.type;
    9082:	786b      	ldrb	r3, [r5, #1]
	elevation_meas_notify = net_buf_simple_add(&buf, sizeof(*elevation_meas_notify));
    9084:	4604      	mov	r4, r0
	elevation_meas_notify->bt_addr.type = measurement->bt_addr.type;
    9086:	7203      	strb	r3, [r0, #8]
	bt_addr_copy(&elevation_meas_notify->bt_addr.a, &measurement->bt_addr.a);
    9088:	3002      	adds	r0, #2
    908a:	f012 fb19 	bl	1b6c0 <bt_addr_copy>
	net_buf_simple_add_u8(&buf, measurement->value);
    908e:	7a29      	ldrb	r1, [r5, #8]
    9090:	a803      	add	r0, sp, #12
    9092:	f014 fa86 	bl	1d5a2 <net_buf_simple_add_u8>
	if (!conn) {
    9096:	b93e      	cbnz	r6, 90a8 <bt_ddfs_elevation_measurement_notify+0x58>
		return bt_gatt_notify(conn, attr, elevation_meas_notify, buf.len);
    9098:	4622      	mov	r2, r4
    909a:	4630      	mov	r0, r6
    909c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90a0:	4905      	ldr	r1, [pc, #20]	; (90b8 <bt_ddfs_elevation_measurement_notify+0x68>)
    90a2:	f012 faf8 	bl	1b696 <bt_gatt_notify>
    90a6:	e7da      	b.n	905e <bt_ddfs_elevation_measurement_notify+0xe>
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    90a8:	2201      	movs	r2, #1
    90aa:	4630      	mov	r0, r6
    90ac:	4902      	ldr	r1, [pc, #8]	; (90b8 <bt_ddfs_elevation_measurement_notify+0x68>)
    90ae:	f007 f8a9 	bl	10204 <bt_gatt_is_subscribed>
    90b2:	2800      	cmp	r0, #0
    90b4:	d1f0      	bne.n	9098 <bt_ddfs_elevation_measurement_notify+0x48>
    90b6:	e7d0      	b.n	905a <bt_ddfs_elevation_measurement_notify+0xa>
    90b8:	0001fd74 	.word	0x0001fd74

000090bc <bt_ddfs_init>:

int bt_ddfs_init(const struct bt_ddfs_init_params *init)
{
	if (!init) {
    90bc:	b130      	cbz	r0, 90cc <bt_ddfs_init+0x10>
		return -EINVAL;
	}

	ddfs_inst.dm_features = init->dm_features;
    90be:	7802      	ldrb	r2, [r0, #0]
    90c0:	4b04      	ldr	r3, [pc, #16]	; (90d4 <bt_ddfs_init+0x18>)
    90c2:	761a      	strb	r2, [r3, #24]
	ddfs_inst.cb = init->cb;
    90c4:	6842      	ldr	r2, [r0, #4]

	LOG_DBG("DDFS initialization successful");
	return 0;
    90c6:	2000      	movs	r0, #0
	ddfs_inst.cb = init->cb;
    90c8:	61da      	str	r2, [r3, #28]
	return 0;
    90ca:	4770      	bx	lr
		return -EINVAL;
    90cc:	f06f 0015 	mvn.w	r0, #21
}
    90d0:	4770      	bx	lr
    90d2:	bf00      	nop
    90d4:	200063ec 	.word	0x200063ec

000090d8 <serialization_init>:
		report->code);
	k_oops();
}

static int serialization_init(const struct device *dev)
{
    90d8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	int err;

	LOG_DBG("Init begin");
	err = nrf_rpc_init(err_handler);
    90da:	4804      	ldr	r0, [pc, #16]	; (90ec <serialization_init+0x14>)
    90dc:	f00c fa34 	bl	15548 <nrf_rpc_init>
	if (err) {
		return -EINVAL;
    90e0:	2800      	cmp	r0, #0
	}

	LOG_DBG("Init done\n");

	return 0;
}
    90e2:	bf18      	it	ne
    90e4:	f06f 0015 	mvnne.w	r0, #21
    90e8:	bd08      	pop	{r3, pc}
    90ea:	bf00      	nop
    90ec:	000090f1 	.word	0x000090f1

000090f0 <err_handler>:
{
    90f0:	b508      	push	{r3, lr}
	LOG_ERR("nRF RPC error %d ocurred. See nRF RPC logs for more details.",
    90f2:	2145      	movs	r1, #69	; 0x45
    90f4:	6802      	ldr	r2, [r0, #0]
    90f6:	4805      	ldr	r0, [pc, #20]	; (910c <err_handler+0x1c>)
    90f8:	f012 f91e 	bl	1b338 <z_log_minimal_printk>
	k_oops();
    90fc:	4040      	eors	r0, r0
    90fe:	f380 8811 	msr	BASEPRI, r0
    9102:	f04f 0003 	mov.w	r0, #3
    9106:	df02      	svc	2
}
    9108:	bd08      	pop	{r3, pc}
    910a:	bf00      	nop
    910c:	000224da 	.word	0x000224da

00009110 <ep_recv>:

static void ep_recv(const void *data, size_t len, void *priv)
{
	int ret;

	ret = ipc_service_hold_rx_buffer(&ep, (void *)data);
    9110:	4601      	mov	r1, r0
{
    9112:	b510      	push	{r4, lr}
    9114:	4604      	mov	r4, r0
	ret = ipc_service_hold_rx_buffer(&ep, (void *)data);
    9116:	480c      	ldr	r0, [pc, #48]	; (9148 <ep_recv+0x38>)
    9118:	f7fe fe8e 	bl	7e38 <ipc_service_hold_rx_buffer>
	if (ret < 0) {
    911c:	1e02      	subs	r2, r0, #0
    911e:	da0c      	bge.n	913a <ep_recv+0x2a>
		LOG_ERR("ipc_service_hold_rx_buffer failed with err: %d", ret);
    9120:	2145      	movs	r1, #69	; 0x45
    9122:	480a      	ldr	r0, [pc, #40]	; (914c <ep_recv+0x3c>)
    9124:	f012 f908 	bl	1b338 <z_log_minimal_printk>
		__ASSERT_NO_MSG(false);
    9128:	4909      	ldr	r1, [pc, #36]	; (9150 <ep_recv+0x40>)
    912a:	480a      	ldr	r0, [pc, #40]	; (9154 <ep_recv+0x44>)
    912c:	2279      	movs	r2, #121	; 0x79
    912e:	f012 f8ef 	bl	1b310 <assert_print>
    9132:	2179      	movs	r1, #121	; 0x79
    9134:	4806      	ldr	r0, [pc, #24]	; (9150 <ep_recv+0x40>)
    9136:	f012 f8e4 	bl	1b302 <assert_post_action>
		return;
	}

	recv_data = (void *)data;
    913a:	4b07      	ldr	r3, [pc, #28]	; (9158 <ep_recv+0x48>)
	k_work_submit(&dm_data_work);
    913c:	4807      	ldr	r0, [pc, #28]	; (915c <ep_recv+0x4c>)
	recv_data = (void *)data;
    913e:	601c      	str	r4, [r3, #0]
}
    9140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&dm_data_work);
    9144:	f00d bf46 	b.w	16fd4 <k_work_submit>
    9148:	20006414 	.word	0x20006414
    914c:	00022532 	.word	0x00022532
    9150:	00022566 	.word	0x00022566
    9154:	000221f8 	.word	0x000221f8
    9158:	20006410 	.word	0x20006410
    915c:	200002ec 	.word	0x200002ec

00009160 <data_handler>:
		.received = ep_recv,
	},
};

static void data_handler(struct k_work *work)
{
    9160:	b530      	push	{r4, r5, lr}
	int ret;
	enum dm_rpc_cmd cmd;
	struct dm_result result = {0};
	float high_precision_estimate = 0;

	struct dm_rpc_process_data *dm_data = (struct dm_rpc_process_data *)recv_data;
    9162:	4d39      	ldr	r5, [pc, #228]	; (9248 <data_handler+0xe8>)
{
    9164:	b08b      	sub	sp, #44	; 0x2c
	struct dm_result result = {0};
    9166:	2220      	movs	r2, #32
    9168:	2100      	movs	r1, #0
    916a:	a802      	add	r0, sp, #8
    916c:	f016 f951 	bl	1f412 <memset>
	struct dm_rpc_process_data *dm_data = (struct dm_rpc_process_data *)recv_data;
    9170:	682c      	ldr	r4, [r5, #0]

	nrf_dm_calc(&dm_data->report);
    9172:	4620      	mov	r0, r4
    9174:	f7fb fa50 	bl	4618 <nrf_dm_calc>
#ifdef CONFIG_DM_HIGH_PRECISION_CALC
	if (dm_data->report.ranging_mode == NRF_DM_RANGING_MODE_MCPD) {
    9178:	f894 35a0 	ldrb.w	r3, [r4, #1440]	; 0x5a0
    917c:	2b01      	cmp	r3, #1
    917e:	d11e      	bne.n	91be <data_handler+0x5e>
		high_precision_estimate = nrf_dm_high_precision_calc(&dm_data->report);
    9180:	4620      	mov	r0, r4
    9182:	f7fb fa75 	bl	4670 <nrf_dm_high_precision_calc>
	result->status = data->report.status == NRF_DM_STATUS_SUCCESS;
    9186:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
    918a:	fab3 f383 	clz	r3, r3
    918e:	095b      	lsrs	r3, r3, #5
    9190:	f88d 3008 	strb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    9194:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
    9198:	f8cd 300a 	str.w	r3, [sp, #10]
    919c:	f8b4 35c8 	ldrh.w	r3, [r4, #1480]	; 0x5c8
    91a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    91a4:	f894 35ca 	ldrb.w	r3, [r4, #1482]	; 0x5ca
    91a8:	f88d 3010 	strb.w	r3, [sp, #16]
	result->quality = DM_QUALITY_NONE;
    91ac:	2304      	movs	r3, #4
    91ae:	f88d 3009 	strb.w	r3, [sp, #9]
	if (data->report.quality == NRF_DM_QUALITY_OK) {
    91b2:	f894 35ba 	ldrb.w	r3, [r4, #1466]	; 0x5ba
    91b6:	b92b      	cbnz	r3, 91c4 <data_handler+0x64>
		result->quality = DM_QUALITY_CRC_FAIL;
    91b8:	f88d 3009 	strb.w	r3, [sp, #9]
    91bc:	e008      	b.n	91d0 <data_handler+0x70>
	float high_precision_estimate = 0;
    91be:	ed9f 0a23 	vldr	s0, [pc, #140]	; 924c <data_handler+0xec>
    91c2:	e7e0      	b.n	9186 <data_handler+0x26>
	} else if (data->report.quality == NRF_DM_QUALITY_POOR) {
    91c4:	2b01      	cmp	r3, #1
    91c6:	d0f7      	beq.n	91b8 <data_handler+0x58>
	} else if (data->report.quality == NRF_DM_QUALITY_DO_NOT_USE) {
    91c8:	2b02      	cmp	r3, #2
    91ca:	d0f5      	beq.n	91b8 <data_handler+0x58>
	} else if (data->report.quality == NRF_DM_QUALITY_CRC_FAIL) {
    91cc:	2b03      	cmp	r3, #3
    91ce:	d0f3      	beq.n	91b8 <data_handler+0x58>
		result->dist_estimates.rtt.rtt = data->report.distance_estimates.rtt.rtt;
    91d0:	f204 53a4 	addw	r3, r4, #1444	; 0x5a4
	result->ranging_mode = data->report.ranging_mode;
    91d4:	f894 25a0 	ldrb.w	r2, [r4, #1440]	; 0x5a0
		result->dist_estimates.rtt.rtt = data->report.distance_estimates.rtt.rtt;
    91d8:	681b      	ldr	r3, [r3, #0]
	result->ranging_mode = data->report.ranging_mode;
    91da:	f88d 2011 	strb.w	r2, [sp, #17]
		result->dist_estimates.rtt.rtt = data->report.distance_estimates.rtt.rtt;
    91de:	9305      	str	r3, [sp, #20]
	if (result->ranging_mode == DM_RANGING_MODE_RTT) {
    91e0:	b9c2      	cbnz	r2, 9214 <data_handler+0xb4>
	}
#endif
	process_data(dm_data, &result, high_precision_estimate);
	if (init_param_cb->data_ready) {
    91e2:	4b1b      	ldr	r3, [pc, #108]	; (9250 <data_handler+0xf0>)
    91e4:	681b      	ldr	r3, [r3, #0]
    91e6:	681b      	ldr	r3, [r3, #0]
    91e8:	b10b      	cbz	r3, 91ee <data_handler+0x8e>
		init_param_cb->data_ready(&result);
    91ea:	a802      	add	r0, sp, #8
    91ec:	4798      	blx	r3
	}

	ret = ipc_service_release_rx_buffer(&ep, recv_data);
    91ee:	6829      	ldr	r1, [r5, #0]
    91f0:	4818      	ldr	r0, [pc, #96]	; (9254 <data_handler+0xf4>)
    91f2:	f7fe fe53 	bl	7e9c <ipc_service_release_rx_buffer>
	if (ret < 0) {
    91f6:	1e02      	subs	r2, r0, #0
    91f8:	da1b      	bge.n	9232 <data_handler+0xd2>
		LOG_ERR("ipc_service_release_rx_buffer failed with err: %d", ret);
    91fa:	2145      	movs	r1, #69	; 0x45
    91fc:	4816      	ldr	r0, [pc, #88]	; (9258 <data_handler+0xf8>)
    91fe:	f012 f89b 	bl	1b338 <z_log_minimal_printk>
		__ASSERT_NO_MSG(false);
    9202:	4916      	ldr	r1, [pc, #88]	; (925c <data_handler+0xfc>)
    9204:	4816      	ldr	r0, [pc, #88]	; (9260 <data_handler+0x100>)
    9206:	229f      	movs	r2, #159	; 0x9f
    9208:	f012 f882 	bl	1b310 <assert_print>
    920c:	219f      	movs	r1, #159	; 0x9f
    920e:	4813      	ldr	r0, [pc, #76]	; (925c <data_handler+0xfc>)
    9210:	f012 f877 	bl	1b302 <assert_post_action>
						data->report.distance_estimates.mcpd.phase_slope;
    9214:	f504 63b5 	add.w	r3, r4, #1448	; 0x5a8
		result->dist_estimates.mcpd.phase_slope =
    9218:	681b      	ldr	r3, [r3, #0]
		result->dist_estimates.mcpd.high_precision = high_precision_estimate;
    921a:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
		result->dist_estimates.mcpd.phase_slope =
    921e:	9306      	str	r3, [sp, #24]
		result->dist_estimates.mcpd.best = data->report.distance_estimates.mcpd.best;
    9220:	f504 63b6 	add.w	r3, r4, #1456	; 0x5b0
    9224:	681b      	ldr	r3, [r3, #0]
						data->report.distance_estimates.mcpd.rssi_openspace;
    9226:	f204 54ac 	addw	r4, r4, #1452	; 0x5ac
		result->dist_estimates.mcpd.best = data->report.distance_estimates.mcpd.best;
    922a:	9308      	str	r3, [sp, #32]
		result->dist_estimates.mcpd.rssi_openspace =
    922c:	6823      	ldr	r3, [r4, #0]
    922e:	9307      	str	r3, [sp, #28]
		result->dist_estimates.mcpd.high_precision = high_precision_estimate;
    9230:	e7d7      	b.n	91e2 <data_handler+0x82>
		return;
	}

	cmd = DM_END_PROCESS_RPC_CMD;
    9232:	2302      	movs	r3, #2
	ipc_service_send(&ep, &cmd, sizeof(cmd));
    9234:	2201      	movs	r2, #1
    9236:	f10d 0107 	add.w	r1, sp, #7
    923a:	4806      	ldr	r0, [pc, #24]	; (9254 <data_handler+0xf4>)
	cmd = DM_END_PROCESS_RPC_CMD;
    923c:	f88d 3007 	strb.w	r3, [sp, #7]
	ipc_service_send(&ep, &cmd, sizeof(cmd));
    9240:	f7fe fdce 	bl	7de0 <ipc_service_send>
}
    9244:	b00b      	add	sp, #44	; 0x2c
    9246:	bd30      	pop	{r4, r5, pc}
    9248:	20006410 	.word	0x20006410
    924c:	00000000 	.word	0x00000000
    9250:	2000641c 	.word	0x2000641c
    9254:	20006414 	.word	0x20006414
    9258:	0002259b 	.word	0x0002259b
    925c:	00022566 	.word	0x00022566
    9260:	000221f8 	.word	0x000221f8

00009264 <ep_bound>:
	z_impl_k_sem_give(sem);
    9264:	4801      	ldr	r0, [pc, #4]	; (926c <ep_bound+0x8>)
    9266:	f00d bbbf 	b.w	169e8 <z_impl_k_sem_give>
    926a:	bf00      	nop
    926c:	200008a8 	.word	0x200008a8

00009270 <ipc_init>:

static int ipc_init(const struct device *dev)
{
    9270:	b510      	push	{r4, lr}
	int err;
	const struct device *ipc_instance;

	ipc_instance = DEVICE_DT_GET(DT_NODELABEL(ipc1));

	err = ipc_service_open_instance(ipc_instance);
    9272:	4811      	ldr	r0, [pc, #68]	; (92b8 <ipc_init+0x48>)
    9274:	f7fe fd76 	bl	7d64 <ipc_service_open_instance>
	if ((err < 0) && (err != -EALREADY)) {
    9278:	1e04      	subs	r4, r0, #0
    927a:	da09      	bge.n	9290 <ipc_init+0x20>
    927c:	f114 0f78 	cmn.w	r4, #120	; 0x78
    9280:	d006      	beq.n	9290 <ipc_init+0x20>
		LOG_ERR("IPC service instance initialization failed with err: %d", err);
    9282:	4622      	mov	r2, r4
    9284:	2145      	movs	r1, #69	; 0x45
    9286:	480d      	ldr	r0, [pc, #52]	; (92bc <ipc_init+0x4c>)
		return err;
	}

	err = ipc_service_register_endpoint(ipc_instance, &ep, &ep_cfg);
	if (err < 0) {
		LOG_ERR("Registering endpoint failed with err: %d", err);
    9288:	f012 f856 	bl	1b338 <z_log_minimal_printk>
	}

	k_sem_take(&bound_sem, K_FOREVER);

	return 0;
}
    928c:	4620      	mov	r0, r4
    928e:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(ipc_instance, &ep, &ep_cfg);
    9290:	4a0b      	ldr	r2, [pc, #44]	; (92c0 <ipc_init+0x50>)
    9292:	490c      	ldr	r1, [pc, #48]	; (92c4 <ipc_init+0x54>)
    9294:	4808      	ldr	r0, [pc, #32]	; (92b8 <ipc_init+0x48>)
    9296:	f7fe fd83 	bl	7da0 <ipc_service_register_endpoint>
	if (err < 0) {
    929a:	1e04      	subs	r4, r0, #0
    929c:	da03      	bge.n	92a6 <ipc_init+0x36>
		LOG_ERR("Registering endpoint failed with err: %d", err);
    929e:	4622      	mov	r2, r4
    92a0:	2145      	movs	r1, #69	; 0x45
    92a2:	4809      	ldr	r0, [pc, #36]	; (92c8 <ipc_init+0x58>)
    92a4:	e7f0      	b.n	9288 <ipc_init+0x18>
	return z_impl_k_sem_take(sem, timeout);
    92a6:	f04f 32ff 	mov.w	r2, #4294967295
    92aa:	f04f 33ff 	mov.w	r3, #4294967295
    92ae:	4807      	ldr	r0, [pc, #28]	; (92cc <ipc_init+0x5c>)
    92b0:	f00d fbd6 	bl	16a60 <z_impl_k_sem_take>
	return 0;
    92b4:	2400      	movs	r4, #0
    92b6:	e7e9      	b.n	928c <ipc_init+0x1c>
    92b8:	0001f5b4 	.word	0x0001f5b4
    92bc:	000225d2 	.word	0x000225d2
    92c0:	200002d4 	.word	0x200002d4
    92c4:	20006414 	.word	0x20006414
    92c8:	0002260f 	.word	0x0002260f
    92cc:	200008a8 	.word	0x200008a8

000092d0 <dm_request_add>:
{
    92d0:	b570      	push	{r4, r5, r6, lr}
    92d2:	4604      	mov	r4, r0
	ser_encode_uint(&ctx, req->role);
    92d4:	4625      	mov	r5, r4
	NRF_RPC_CBOR_ALLOC(&dm_rpc_grp, ctx, buffer_size_max);
    92d6:	4e18      	ldr	r6, [pc, #96]	; (9338 <dm_request_add+0x68>)
{
    92d8:	b090      	sub	sp, #64	; 0x40
	NRF_RPC_CBOR_ALLOC(&dm_rpc_grp, ctx, buffer_size_max);
    92da:	2223      	movs	r2, #35	; 0x23
    92dc:	4630      	mov	r0, r6
    92de:	a90f      	add	r1, sp, #60	; 0x3c
    92e0:	f00b fecc 	bl	1507c <nrf_rpc_alloc_tx_buf>
    92e4:	a803      	add	r0, sp, #12
    92e6:	2123      	movs	r1, #35	; 0x23
    92e8:	f015 fdf3 	bl	1eed2 <_nrf_rpc_cbor_prepare>
	ser_encode_uint(&ctx, req->role);
    92ec:	f815 1b01 	ldrb.w	r1, [r5], #1
    92f0:	a803      	add	r0, sp, #12
    92f2:	f012 f9f7 	bl	1b6e4 <ser_encode_uint>
	ser_encode_buffer(&ctx, &req->bt_addr, sizeof(bt_addr_le_t));
    92f6:	2207      	movs	r2, #7
    92f8:	4629      	mov	r1, r5
    92fa:	a803      	add	r0, sp, #12
    92fc:	f012 f9f4 	bl	1b6e8 <ser_encode_buffer>
	ser_encode_uint(&ctx, req->rng_seed);
    9300:	68a1      	ldr	r1, [r4, #8]
    9302:	a803      	add	r0, sp, #12
    9304:	f012 f9ee 	bl	1b6e4 <ser_encode_uint>
	ser_encode_uint(&ctx, req->ranging_mode);
    9308:	7b21      	ldrb	r1, [r4, #12]
    930a:	a803      	add	r0, sp, #12
    930c:	f012 f9ea 	bl	1b6e4 <ser_encode_uint>
	ser_encode_uint(&ctx, req->start_delay_us);
    9310:	6921      	ldr	r1, [r4, #16]
    9312:	a803      	add	r0, sp, #12
    9314:	f012 f9e6 	bl	1b6e4 <ser_encode_uint>
	ser_encode_uint(&ctx, req->extra_window_time_us);
    9318:	6961      	ldr	r1, [r4, #20]
    931a:	a803      	add	r0, sp, #12
    931c:	f012 f9e2 	bl	1b6e4 <ser_encode_uint>
	nrf_rpc_cbor_cmd_no_err(&dm_rpc_grp, DM_REQUEST_ADD_RPC_CMD, &ctx,
    9320:	ab02      	add	r3, sp, #8
    9322:	4630      	mov	r0, r6
    9324:	9300      	str	r3, [sp, #0]
    9326:	2101      	movs	r1, #1
    9328:	4b04      	ldr	r3, [pc, #16]	; (933c <dm_request_add+0x6c>)
    932a:	aa03      	add	r2, sp, #12
    932c:	f00c fbba 	bl	15aa4 <nrf_rpc_cbor_cmd_no_err>
}
    9330:	9802      	ldr	r0, [sp, #8]
    9332:	b010      	add	sp, #64	; 0x40
    9334:	bd70      	pop	{r4, r5, r6, pc}
    9336:	bf00      	nop
    9338:	00026008 	.word	0x00026008
    933c:	0001b719 	.word	0x0001b719

00009340 <dm_init>:
{
    9340:	b500      	push	{lr}
    9342:	b091      	sub	sp, #68	; 0x44
	if (!init_param) {
    9344:	b1b8      	cbz	r0, 9376 <dm_init+0x36>
	init_param_cb = init_param->cb;
    9346:	6802      	ldr	r2, [r0, #0]
    9348:	4b0c      	ldr	r3, [pc, #48]	; (937c <dm_init+0x3c>)
	NRF_RPC_CBOR_ALLOC(&dm_rpc_grp, ctx, buffer_size_max);
    934a:	480d      	ldr	r0, [pc, #52]	; (9380 <dm_init+0x40>)
	init_param_cb = init_param->cb;
    934c:	601a      	str	r2, [r3, #0]
	NRF_RPC_CBOR_ALLOC(&dm_rpc_grp, ctx, buffer_size_max);
    934e:	a90f      	add	r1, sp, #60	; 0x3c
    9350:	2201      	movs	r2, #1
    9352:	f00b fe93 	bl	1507c <nrf_rpc_alloc_tx_buf>
    9356:	2101      	movs	r1, #1
    9358:	a803      	add	r0, sp, #12
    935a:	f015 fdba 	bl	1eed2 <_nrf_rpc_cbor_prepare>
	nrf_rpc_cbor_cmd_no_err(&dm_rpc_grp, DM_INIT_RPC_CMD,
    935e:	ab02      	add	r3, sp, #8
    9360:	4807      	ldr	r0, [pc, #28]	; (9380 <dm_init+0x40>)
    9362:	9300      	str	r3, [sp, #0]
    9364:	2100      	movs	r1, #0
    9366:	4b07      	ldr	r3, [pc, #28]	; (9384 <dm_init+0x44>)
    9368:	aa03      	add	r2, sp, #12
    936a:	f00c fb9b 	bl	15aa4 <nrf_rpc_cbor_cmd_no_err>
	return result;
    936e:	9802      	ldr	r0, [sp, #8]
}
    9370:	b011      	add	sp, #68	; 0x44
    9372:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    9376:	f06f 0015 	mvn.w	r0, #21
    937a:	e7f9      	b.n	9370 <dm_init+0x30>
    937c:	2000641c 	.word	0x2000641c
    9380:	00026008 	.word	0x00026008
    9384:	0001b719 	.word	0x0001b719

00009388 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    9388:	4904      	ldr	r1, [pc, #16]	; (939c <sub_bytes+0x14>)
    938a:	1e43      	subs	r3, r0, #1
    938c:	300f      	adds	r0, #15
    938e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9392:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    9394:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    9396:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    9398:	d1f9      	bne.n	938e <sub_bytes+0x6>
	}
}
    939a:	4770      	bx	lr
    939c:	0002264b 	.word	0x0002264b

000093a0 <tc_aes128_set_encrypt_key>:
{
    93a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93a2:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    93a4:	4e26      	ldr	r6, [pc, #152]	; (9440 <tc_aes128_set_encrypt_key+0xa0>)
{
    93a6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    93a8:	ad01      	add	r5, sp, #4
{
    93aa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    93ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    93ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    93b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    93b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    93b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    93b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    93bc:	4638      	mov	r0, r7
    93be:	2f00      	cmp	r7, #0
    93c0:	d039      	beq.n	9436 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    93c2:	2c00      	cmp	r4, #0
    93c4:	d039      	beq.n	943a <tc_aes128_set_encrypt_key+0x9a>
    93c6:	1f38      	subs	r0, r7, #4
    93c8:	4602      	mov	r2, r0
    93ca:	4621      	mov	r1, r4
    93cc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    93ce:	784b      	ldrb	r3, [r1, #1]
    93d0:	780d      	ldrb	r5, [r1, #0]
    93d2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    93d4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    93d8:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    93da:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    93dc:	432b      	orrs	r3, r5
    93de:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    93e2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    93e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    93e8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    93ec:	d1ef      	bne.n	93ce <tc_aes128_set_encrypt_key+0x2e>
    93ee:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    93f0:	4c14      	ldr	r4, [pc, #80]	; (9444 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    93f2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    93f4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    93f6:	d116      	bne.n	9426 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    93f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    93fc:	5ca5      	ldrb	r5, [r4, r2]
    93fe:	0e1a      	lsrs	r2, r3, #24
    9400:	5ca2      	ldrb	r2, [r4, r2]
    9402:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    9406:	f3c3 2507 	ubfx	r5, r3, #8, #8
    940a:	5d65      	ldrb	r5, [r4, r5]
    940c:	b2db      	uxtb	r3, r3
    940e:	5ce3      	ldrb	r3, [r4, r3]
    9410:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    9414:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    9418:	f021 0303 	bic.w	r3, r1, #3
    941c:	3330      	adds	r3, #48	; 0x30
    941e:	446b      	add	r3, sp
    9420:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    9424:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    9426:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    942a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    942c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    942e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    9430:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    9432:	d1de      	bne.n	93f2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    9434:	2001      	movs	r0, #1
}
    9436:	b00d      	add	sp, #52	; 0x34
    9438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    943a:	4620      	mov	r0, r4
    943c:	e7fb      	b.n	9436 <tc_aes128_set_encrypt_key+0x96>
    943e:	bf00      	nop
    9440:	0001fab8 	.word	0x0001fab8
    9444:	0002264b 	.word	0x0002264b

00009448 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    9448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    944c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    944e:	6803      	ldr	r3, [r0, #0]
{
    9450:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    9452:	9303      	str	r3, [sp, #12]
    9454:	6843      	ldr	r3, [r0, #4]
    9456:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 9608 <compress+0x1c0>
    945a:	9304      	str	r3, [sp, #16]
    945c:	6883      	ldr	r3, [r0, #8]
    945e:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
    9462:	9305      	str	r3, [sp, #20]
    9464:	68c3      	ldr	r3, [r0, #12]
    9466:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    9468:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    946a:	e9dd be05 	ldrd	fp, lr, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    946e:	9307      	str	r3, [sp, #28]
    9470:	6943      	ldr	r3, [r0, #20]
    9472:	9308      	str	r3, [sp, #32]
    9474:	6983      	ldr	r3, [r0, #24]
    9476:	e9dd 2c07 	ldrd	r2, ip, [sp, #28]
    947a:	9309      	str	r3, [sp, #36]	; 0x24
    947c:	69c3      	ldr	r3, [r0, #28]
    947e:	4698      	mov	r8, r3
    9480:	930a      	str	r3, [sp, #40]	; 0x28
    9482:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9484:	9301      	str	r3, [sp, #4]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    9486:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    9488:	ab0c      	add	r3, sp, #48	; 0x30
    948a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    948c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    9490:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    9492:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    9496:	44a9      	add	r9, r5
    9498:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    949c:	9d01      	ldr	r5, [sp, #4]
    949e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    94a2:	444b      	add	r3, r9
    94a4:	ea25 0502 	bic.w	r5, r5, r2
    94a8:	ea02 090c 	and.w	r9, r2, ip
    94ac:	ea85 0509 	eor.w	r5, r5, r9
    94b0:	442b      	add	r3, r5
    94b2:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    94b4:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    94b8:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    94bc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    94c0:	4025      	ands	r5, r4
    94c2:	ea06 090b 	and.w	r9, r6, fp
    94c6:	ea85 0509 	eor.w	r5, r5, r9
    94ca:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    94ce:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    94d0:	3704      	adds	r7, #4
		h = g; g = f; f = e; e = d + t1;
    94d2:	eb03 050e 	add.w	r5, r3, lr
	for (i = 0; i < 16; ++i) {
    94d6:	2f40      	cmp	r7, #64	; 0x40
		d = c; c = b; b = a; a = t1 + t2;
    94d8:	4443      	add	r3, r8
    94da:	46de      	mov	lr, fp
    94dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
    94e0:	9300      	str	r3, [sp, #0]
	for (i = 0; i < 16; ++i) {
    94e2:	d17f      	bne.n	95e4 <compress+0x19c>
    94e4:	f04f 0a10 	mov.w	sl, #16
    94e8:	4b46      	ldr	r3, [pc, #280]	; (9604 <compress+0x1bc>)
    94ea:	930b      	str	r3, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    94ec:	4651      	mov	r1, sl
    94ee:	f10a 0a01 	add.w	sl, sl, #1
    94f2:	ab1c      	add	r3, sp, #112	; 0x70
    94f4:	f00a 070f 	and.w	r7, sl, #15
    94f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    94fc:	f857 3c40 	ldr.w	r3, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    9500:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    9504:	ea4f 48b3 	mov.w	r8, r3, ror #18
		s1 = work_space[(i+14)&0x0f];
    9508:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    950c:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
    950e:	9302      	str	r3, [sp, #8]
		s0 = sigma0(s0);
    9510:	ea88 18f3 	eor.w	r8, r8, r3, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    9514:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
    9518:	ab1c      	add	r3, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    951a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    951e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
		s1 = work_space[(i+14)&0x0f];
    9522:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    9526:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
    952a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    952e:	f859 3c40 	ldr.w	r3, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
    9532:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    9536:	4419      	add	r1, r3
		s0 = sigma0(s0);
    9538:	9b02      	ldr	r3, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
    953a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
    953e:	ea88 08d3 	eor.w	r8, r8, r3, lsr #3
		s1 = sigma1(s1);
    9542:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    9546:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    954a:	4441      	add	r1, r8
    954c:	4471      	add	r1, lr
	return (((a) >> n) | ((a) << (32 - n)));
    954e:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    9552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9554:	ea05 0802 	and.w	r8, r5, r2
    9558:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    955c:	ea2c 0705 	bic.w	r7, ip, r5
    9560:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    9564:	ea87 0708 	eor.w	r7, r7, r8
    9568:	4477      	add	r7, lr
    956a:	f853 ef04 	ldr.w	lr, [r3, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    956e:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    9572:	4477      	add	r7, lr
    9574:	440f      	add	r7, r1
    9576:	930b      	str	r3, [sp, #44]	; 0x2c
    9578:	9901      	ldr	r1, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    957a:	9b00      	ldr	r3, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    957c:	4439      	add	r1, r7
	return (((a) >> n) | ((a) << (32 - n)));
    957e:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    9582:	ea84 0706 	eor.w	r7, r4, r6
    9586:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    958a:	401f      	ands	r7, r3
    958c:	ea04 0806 	and.w	r8, r4, r6
    9590:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    9594:	ea87 0708 	eor.w	r7, r7, r8
    9598:	4477      	add	r7, lr
	for ( ; i < 64; ++i) {
    959a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    959e:	eb01 0e0b 	add.w	lr, r1, fp
		d = c; c = b; b = a; a = t1 + t2;
    95a2:	440f      	add	r7, r1
	for ( ; i < 64; ++i) {
    95a4:	46b3      	mov	fp, r6
    95a6:	f8cd c004 	str.w	ip, [sp, #4]
    95aa:	d123      	bne.n	95f4 <compress+0x1ac>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    95ac:	9b03      	ldr	r3, [sp, #12]
    95ae:	9900      	ldr	r1, [sp, #0]
    95b0:	443b      	add	r3, r7
    95b2:	6003      	str	r3, [r0, #0]
    95b4:	9b04      	ldr	r3, [sp, #16]
    95b6:	440b      	add	r3, r1
    95b8:	6043      	str	r3, [r0, #4]
    95ba:	9b05      	ldr	r3, [sp, #20]
    95bc:	4423      	add	r3, r4
    95be:	6083      	str	r3, [r0, #8]
    95c0:	9b06      	ldr	r3, [sp, #24]
    95c2:	4433      	add	r3, r6
    95c4:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    95c6:	9b07      	ldr	r3, [sp, #28]
    95c8:	4473      	add	r3, lr
    95ca:	6103      	str	r3, [r0, #16]
    95cc:	9b08      	ldr	r3, [sp, #32]
    95ce:	442b      	add	r3, r5
    95d0:	6143      	str	r3, [r0, #20]
    95d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95d4:	4413      	add	r3, r2
    95d6:	6183      	str	r3, [r0, #24]
    95d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95da:	4463      	add	r3, ip
    95dc:	61c3      	str	r3, [r0, #28]
}
    95de:	b01d      	add	sp, #116	; 0x74
    95e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95e4:	46b3      	mov	fp, r6
    95e6:	f8cd c004 	str.w	ip, [sp, #4]
    95ea:	4626      	mov	r6, r4
    95ec:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    95ee:	9c00      	ldr	r4, [sp, #0]
		h = g; g = f; f = e; e = d + t1;
    95f0:	462a      	mov	r2, r5
    95f2:	e748      	b.n	9486 <compress+0x3e>
    95f4:	4694      	mov	ip, r2
    95f6:	4626      	mov	r6, r4
    95f8:	462a      	mov	r2, r5
    95fa:	9c00      	ldr	r4, [sp, #0]
		h = g; g = f; f = e; e = d + t1;
    95fc:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    95fe:	9700      	str	r7, [sp, #0]
    9600:	e774      	b.n	94ec <compress+0xa4>
    9602:	bf00      	nop
    9604:	0001fe58 	.word	0x0001fe58
    9608:	0001fe1c 	.word	0x0001fe1c

0000960c <tc_sha256_init>:
{
    960c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    960e:	4604      	mov	r4, r0
    9610:	b1c8      	cbz	r0, 9646 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    9612:	2270      	movs	r2, #112	; 0x70
    9614:	2100      	movs	r1, #0
    9616:	f012 f8a3 	bl	1b760 <_set>
	s->iv[1] = 0xbb67ae85;
    961a:	4b0b      	ldr	r3, [pc, #44]	; (9648 <tc_sha256_init+0x3c>)
    961c:	4a0b      	ldr	r2, [pc, #44]	; (964c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    961e:	490c      	ldr	r1, [pc, #48]	; (9650 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    9620:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    9624:	4b0b      	ldr	r3, [pc, #44]	; (9654 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    9626:	480c      	ldr	r0, [pc, #48]	; (9658 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    9628:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    962c:	4b0b      	ldr	r3, [pc, #44]	; (965c <tc_sha256_init+0x50>)
    962e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    9632:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    9634:	4b0a      	ldr	r3, [pc, #40]	; (9660 <tc_sha256_init+0x54>)
    9636:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    9638:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    963c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    9640:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    9644:	61e3      	str	r3, [r4, #28]
}
    9646:	bd10      	pop	{r4, pc}
    9648:	bb67ae85 	.word	0xbb67ae85
    964c:	6a09e667 	.word	0x6a09e667
    9650:	3c6ef372 	.word	0x3c6ef372
    9654:	a54ff53a 	.word	0xa54ff53a
    9658:	510e527f 	.word	0x510e527f
    965c:	9b05688c 	.word	0x9b05688c
    9660:	1f83d9ab 	.word	0x1f83d9ab

00009664 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    9664:	4801      	ldr	r0, [pc, #4]	; (966c <nrf_cc3xx_platform_abort_init+0x8>)
    9666:	f011 b9d7 	b.w	1aa18 <nrf_cc3xx_platform_set_abort>
    966a:	bf00      	nop
    966c:	0001ff1c 	.word	0x0001ff1c

00009670 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    9670:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    9672:	4604      	mov	r4, r0
    9674:	b918      	cbnz	r0, 967e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    9676:	4b0f      	ldr	r3, [pc, #60]	; (96b4 <mutex_free_platform+0x44>)
    9678:	480f      	ldr	r0, [pc, #60]	; (96b8 <mutex_free_platform+0x48>)
    967a:	685b      	ldr	r3, [r3, #4]
    967c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    967e:	6861      	ldr	r1, [r4, #4]
    9680:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    9684:	d00f      	beq.n	96a6 <mutex_free_platform+0x36>
    9686:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    968a:	d00c      	beq.n	96a6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    968c:	4d0b      	ldr	r5, [pc, #44]	; (96bc <mutex_free_platform+0x4c>)
    968e:	42a9      	cmp	r1, r5
    9690:	d009      	beq.n	96a6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    9692:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    9696:	d007      	beq.n	96a8 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    9698:	4621      	mov	r1, r4
    969a:	4809      	ldr	r0, [pc, #36]	; (96c0 <mutex_free_platform+0x50>)
    969c:	f00c fccc 	bl	16038 <k_mem_slab_free>
        mutex->mutex = NULL;
    96a0:	2300      	movs	r3, #0
    96a2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    96a4:	6065      	str	r5, [r4, #4]
}
    96a6:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
    96a8:	2214      	movs	r2, #20
    96aa:	6820      	ldr	r0, [r4, #0]
    96ac:	f015 feb1 	bl	1f412 <memset>
    96b0:	e7f8      	b.n	96a4 <mutex_free_platform+0x34>
    96b2:	bf00      	nop
    96b4:	20000558 	.word	0x20000558
    96b8:	0002274b 	.word	0x0002274b
    96bc:	a95c5f2c 	.word	0xa95c5f2c
    96c0:	20006920 	.word	0x20006920

000096c4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    96c4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    96c6:	b360      	cbz	r0, 9722 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    96c8:	6843      	ldr	r3, [r0, #4]
    96ca:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    96ce:	d00e      	beq.n	96ee <mutex_lock_platform+0x2a>
    96d0:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    96d4:	d018      	beq.n	9708 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    96d6:	4a14      	ldr	r2, [pc, #80]	; (9728 <mutex_lock_platform+0x64>)
    96d8:	4293      	cmp	r3, r2
    96da:	d020      	beq.n	971e <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    96dc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    96de:	f04f 32ff 	mov.w	r2, #4294967295
    96e2:	f04f 33ff 	mov.w	r3, #4294967295
    96e6:	f00c ff75 	bl	165d4 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    96ea:	b158      	cbz	r0, 9704 <mutex_lock_platform+0x40>
    96ec:	e015      	b.n	971a <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    96ee:	2201      	movs	r2, #1
    96f0:	6803      	ldr	r3, [r0, #0]
    96f2:	e8d3 1fef 	ldaex	r1, [r3]
    96f6:	2900      	cmp	r1, #0
    96f8:	d103      	bne.n	9702 <mutex_lock_platform+0x3e>
    96fa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    96fe:	2800      	cmp	r0, #0
    9700:	d1f7      	bne.n	96f2 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    9702:	d10a      	bne.n	971a <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    9704:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    9706:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    9708:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    970a:	4a08      	ldr	r2, [pc, #32]	; (972c <mutex_lock_platform+0x68>)
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    9712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    9716:	2b00      	cmp	r3, #0
    9718:	d0f4      	beq.n	9704 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    971a:	4805      	ldr	r0, [pc, #20]	; (9730 <mutex_lock_platform+0x6c>)
    971c:	e7f3      	b.n	9706 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    971e:	4805      	ldr	r0, [pc, #20]	; (9734 <mutex_lock_platform+0x70>)
    9720:	e7f1      	b.n	9706 <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    9722:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9726:	e7ee      	b.n	9706 <mutex_lock_platform+0x42>
    9728:	a95c5f2c 	.word	0xa95c5f2c
    972c:	50030000 	.word	0x50030000
    9730:	ffff8fe9 	.word	0xffff8fe9
    9734:	ffff8fea 	.word	0xffff8fea

00009738 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    9738:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    973a:	b320      	cbz	r0, 9786 <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    973c:	6843      	ldr	r3, [r0, #4]
    973e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    9742:	d009      	beq.n	9758 <mutex_unlock_platform+0x20>
    9744:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    9748:	d013      	beq.n	9772 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    974a:	4a11      	ldr	r2, [pc, #68]	; (9790 <mutex_unlock_platform+0x58>)
    974c:	4293      	cmp	r3, r2
    974e:	d01d      	beq.n	978c <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    9750:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    9752:	f00c fff5 	bl	16740 <z_impl_k_mutex_unlock>
    9756:	e014      	b.n	9782 <mutex_unlock_platform+0x4a>
    9758:	2200      	movs	r2, #0
    975a:	6803      	ldr	r3, [r0, #0]
    975c:	e8d3 1fef 	ldaex	r1, [r3]
    9760:	2901      	cmp	r1, #1
    9762:	d103      	bne.n	976c <mutex_unlock_platform+0x34>
    9764:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9768:	2800      	cmp	r0, #0
    976a:	d1f7      	bne.n	975c <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    976c:	d009      	beq.n	9782 <mutex_unlock_platform+0x4a>
    976e:	4809      	ldr	r0, [pc, #36]	; (9794 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    9770:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    9772:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    9774:	6803      	ldr	r3, [r0, #0]
    9776:	4a08      	ldr	r2, [pc, #32]	; (9798 <mutex_unlock_platform+0x60>)
    9778:	781b      	ldrb	r3, [r3, #0]
    977a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    977e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    9782:	2000      	movs	r0, #0
    9784:	e7f4      	b.n	9770 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    9786:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    978a:	e7f1      	b.n	9770 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    978c:	4803      	ldr	r0, [pc, #12]	; (979c <mutex_unlock_platform+0x64>)
    978e:	e7ef      	b.n	9770 <mutex_unlock_platform+0x38>
    9790:	a95c5f2c 	.word	0xa95c5f2c
    9794:	ffff8fe9 	.word	0xffff8fe9
    9798:	50030000 	.word	0x50030000
    979c:	ffff8fea 	.word	0xffff8fea

000097a0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    97a0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    97a2:	4604      	mov	r4, r0
    97a4:	b918      	cbnz	r0, 97ae <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    97a6:	4b1d      	ldr	r3, [pc, #116]	; (981c <mutex_init_platform+0x7c>)
    97a8:	481d      	ldr	r0, [pc, #116]	; (9820 <mutex_init_platform+0x80>)
    97aa:	685b      	ldr	r3, [r3, #4]
    97ac:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    97ae:	6863      	ldr	r3, [r4, #4]
    97b0:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    97b4:	d02f      	beq.n	9816 <mutex_init_platform+0x76>
    97b6:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    97ba:	d02c      	beq.n	9816 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    97bc:	4a19      	ldr	r2, [pc, #100]	; (9824 <mutex_init_platform+0x84>)
    97be:	4293      	cmp	r3, r2
    97c0:	d119      	bne.n	97f6 <mutex_init_platform+0x56>
    97c2:	6823      	ldr	r3, [r4, #0]
    97c4:	bb03      	cbnz	r3, 9808 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    97c6:	f04f 32ff 	mov.w	r2, #4294967295
    97ca:	f04f 33ff 	mov.w	r3, #4294967295
    97ce:	4621      	mov	r1, r4
    97d0:	4815      	ldr	r0, [pc, #84]	; (9828 <mutex_init_platform+0x88>)
    97d2:	f00c fbd9 	bl	15f88 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    97d6:	b908      	cbnz	r0, 97dc <mutex_init_platform+0x3c>
    97d8:	6823      	ldr	r3, [r4, #0]
    97da:	b91b      	cbnz	r3, 97e4 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    97dc:	4b0f      	ldr	r3, [pc, #60]	; (981c <mutex_init_platform+0x7c>)
    97de:	4813      	ldr	r0, [pc, #76]	; (982c <mutex_init_platform+0x8c>)
    97e0:	685b      	ldr	r3, [r3, #4]
    97e2:	4798      	blx	r3
    97e4:	2214      	movs	r2, #20
    97e6:	2100      	movs	r1, #0
    97e8:	6820      	ldr	r0, [r4, #0]
    97ea:	f015 fe12 	bl	1f412 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    97ee:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    97f2:	6063      	str	r3, [r4, #4]
    97f4:	e008      	b.n	9808 <mutex_init_platform+0x68>
    switch(flags){
    97f6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    97fa:	d80d      	bhi.n	9818 <mutex_init_platform+0x78>
    97fc:	2b3a      	cmp	r3, #58	; 0x3a
    97fe:	d003      	beq.n	9808 <mutex_init_platform+0x68>
    9800:	f640 62ba 	movw	r2, #3770	; 0xeba
    9804:	4293      	cmp	r3, r2
    9806:	d1de      	bne.n	97c6 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    9808:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    980a:	f015 fbe8 	bl	1efde <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    980e:	6863      	ldr	r3, [r4, #4]
    9810:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    9814:	6063      	str	r3, [r4, #4]
}
    9816:	bd10      	pop	{r4, pc}
    switch(flags){
    9818:	4a05      	ldr	r2, [pc, #20]	; (9830 <mutex_init_platform+0x90>)
    981a:	e7f3      	b.n	9804 <mutex_init_platform+0x64>
    981c:	20000558 	.word	0x20000558
    9820:	0002274b 	.word	0x0002274b
    9824:	a95c5f2c 	.word	0xa95c5f2c
    9828:	20006920 	.word	0x20006920
    982c:	00022771 	.word	0x00022771
    9830:	3a00003a 	.word	0x3a00003a

00009834 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    9834:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    9836:	4906      	ldr	r1, [pc, #24]	; (9850 <nrf_cc3xx_platform_mutex_init+0x1c>)
    9838:	2340      	movs	r3, #64	; 0x40
    983a:	2214      	movs	r2, #20
    983c:	4805      	ldr	r0, [pc, #20]	; (9854 <nrf_cc3xx_platform_mutex_init+0x20>)
    983e:	f015 fb8f 	bl	1ef60 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    9842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    9846:	4904      	ldr	r1, [pc, #16]	; (9858 <nrf_cc3xx_platform_mutex_init+0x24>)
    9848:	4804      	ldr	r0, [pc, #16]	; (985c <nrf_cc3xx_platform_mutex_init+0x28>)
    984a:	f011 b957 	b.w	1aafc <nrf_cc3xx_platform_set_mutexes>
    984e:	bf00      	nop
    9850:	20006420 	.word	0x20006420
    9854:	20006920 	.word	0x20006920
    9858:	0001ff24 	.word	0x0001ff24
    985c:	0001ff38 	.word	0x0001ff38

00009860 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    9860:	4901      	ldr	r1, [pc, #4]	; (9868 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    9862:	2210      	movs	r2, #16
	str	r2, [r1]
    9864:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    9866:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    9868:	e000ed10 	.word	0xe000ed10

0000986c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    986c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    986e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    9870:	f380 8811 	msr	BASEPRI, r0
	isb
    9874:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    9878:	b501      	push	{r0, lr}
    987a:	f7fe fa11 	bl	7ca0 <z_arm_on_enter_cpu_idle>
    987e:	2800      	cmp	r0, #0
    9880:	d002      	beq.n	9888 <_skip_0>
    9882:	f3bf 8f4f 	dsb	sy
    9886:	bf30      	wfi

00009888 <_skip_0>:
    9888:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    988c:	b662      	cpsie	i
	isb
    988e:	f3bf 8f6f 	isb	sy

	bx	lr
    9892:	4770      	bx	lr

00009894 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    9894:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    9896:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    9898:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    989c:	b501      	push	{r0, lr}
    989e:	f7fe f9ff 	bl	7ca0 <z_arm_on_enter_cpu_idle>
    98a2:	2800      	cmp	r0, #0
    98a4:	d002      	beq.n	98ac <_skip_1>
    98a6:	f3bf 8f4f 	dsb	sy
    98aa:	bf20      	wfe

000098ac <_skip_1>:
    98ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    98b0:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    98b4:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    98b6:	4770      	bx	lr

000098b8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    98b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98bc:	4607      	mov	r7, r0

	if (esf != NULL) {
    98be:	460c      	mov	r4, r1
{
    98c0:	b086      	sub	sp, #24
	if (esf != NULL) {
    98c2:	2900      	cmp	r1, #0
    98c4:	d04a      	beq.n	995c <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    98c6:	688b      	ldr	r3, [r1, #8]
    98c8:	4828      	ldr	r0, [pc, #160]	; (996c <z_arm_fatal_error+0xb4>)
    98ca:	9300      	str	r3, [sp, #0]
    98cc:	e9d1 2300 	ldrd	r2, r3, [r1]
    98d0:	2145      	movs	r1, #69	; 0x45
    98d2:	f011 fd31 	bl	1b338 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    98d6:	6963      	ldr	r3, [r4, #20]
    98d8:	2145      	movs	r1, #69	; 0x45
    98da:	9300      	str	r3, [sp, #0]
    98dc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    98e0:	4823      	ldr	r0, [pc, #140]	; (9970 <z_arm_fatal_error+0xb8>)
    98e2:	f011 fd29 	bl	1b338 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    98e6:	2145      	movs	r1, #69	; 0x45
    98e8:	69e2      	ldr	r2, [r4, #28]
    98ea:	4822      	ldr	r0, [pc, #136]	; (9974 <z_arm_fatal_error+0xbc>)
    98ec:	f011 fd24 	bl	1b338 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    98f0:	4626      	mov	r6, r4
    98f2:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    98f4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9980 <z_arm_fatal_error+0xc8>
    98f8:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    98fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    9900:	ed96 7a08 	vldr	s14, [r6, #32]
    9904:	edcd 7a05 	vstr	s15, [sp, #20]
    9908:	1ceb      	adds	r3, r5, #3
    990a:	9304      	str	r3, [sp, #16]
    990c:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    9910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    9914:	edcd 7a03 	vstr	s15, [sp, #12]
    9918:	1cab      	adds	r3, r5, #2
    991a:	9302      	str	r3, [sp, #8]
    991c:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    9920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    9924:	edcd 7a01 	vstr	s15, [sp, #4]
    9928:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    992c:	1c6b      	adds	r3, r5, #1
    992e:	462a      	mov	r2, r5
    9930:	9300      	str	r3, [sp, #0]
    9932:	2145      	movs	r1, #69	; 0x45
    9934:	ee17 3a90 	vmov	r3, s15
    9938:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    993a:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    993c:	f011 fcfc 	bl	1b338 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    9940:	2d10      	cmp	r5, #16
    9942:	f106 0610 	add.w	r6, r6, #16
    9946:	d1d7      	bne.n	98f8 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    9948:	2145      	movs	r1, #69	; 0x45
    994a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    994c:	480a      	ldr	r0, [pc, #40]	; (9978 <z_arm_fatal_error+0xc0>)
    994e:	f011 fcf3 	bl	1b338 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    9952:	2145      	movs	r1, #69	; 0x45
    9954:	69a2      	ldr	r2, [r4, #24]
    9956:	4809      	ldr	r0, [pc, #36]	; (997c <z_arm_fatal_error+0xc4>)
    9958:	f011 fcee 	bl	1b338 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    995c:	4621      	mov	r1, r4
    995e:	4638      	mov	r0, r7
}
    9960:	b006      	add	sp, #24
    9962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
    9966:	f00c b8c1 	b.w	15aec <z_fatal_error>
    996a:	bf00      	nop
    996c:	0002279e 	.word	0x0002279e
    9970:	000227d2 	.word	0x000227d2
    9974:	00022806 	.word	0x00022806
    9978:	00022862 	.word	0x00022862
    997c:	00022876 	.word	0x00022876
    9980:	0002281a 	.word	0x0002281a

00009984 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    9984:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    9986:	2800      	cmp	r0, #0
    9988:	db07      	blt.n	999a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    998a:	2301      	movs	r3, #1
    998c:	0941      	lsrs	r1, r0, #5
    998e:	4a03      	ldr	r2, [pc, #12]	; (999c <arch_irq_enable+0x18>)
    9990:	f000 001f 	and.w	r0, r0, #31
    9994:	4083      	lsls	r3, r0
    9996:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    999a:	4770      	bx	lr
    999c:	e000e100 	.word	0xe000e100

000099a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    99a0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    99a2:	2800      	cmp	r0, #0
    99a4:	db0c      	blt.n	99c0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    99a6:	2201      	movs	r2, #1
    99a8:	4906      	ldr	r1, [pc, #24]	; (99c4 <arch_irq_disable+0x24>)
    99aa:	0943      	lsrs	r3, r0, #5
    99ac:	f000 001f 	and.w	r0, r0, #31
    99b0:	4082      	lsls	r2, r0
    99b2:	3320      	adds	r3, #32
    99b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    99bc:	f3bf 8f6f 	isb	sy
}
    99c0:	4770      	bx	lr
    99c2:	bf00      	nop
    99c4:	e000e100 	.word	0xe000e100

000099c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    99c8:	4b05      	ldr	r3, [pc, #20]	; (99e0 <arch_irq_is_enabled+0x18>)
    99ca:	0942      	lsrs	r2, r0, #5
    99cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    99d0:	2301      	movs	r3, #1
    99d2:	f000 001f 	and.w	r0, r0, #31
    99d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    99da:	4010      	ands	r0, r2
    99dc:	4770      	bx	lr
    99de:	bf00      	nop
    99e0:	e000e100 	.word	0xe000e100

000099e4 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    99e4:	3101      	adds	r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    99e6:	2907      	cmp	r1, #7
{
    99e8:	b508      	push	{r3, lr}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    99ea:	d908      	bls.n	99fe <z_arm_irq_priority_set+0x1a>
    99ec:	490d      	ldr	r1, [pc, #52]	; (9a24 <z_arm_irq_priority_set+0x40>)
    99ee:	480e      	ldr	r0, [pc, #56]	; (9a28 <z_arm_irq_priority_set+0x44>)
    99f0:	225b      	movs	r2, #91	; 0x5b
    99f2:	f011 fc8d 	bl	1b310 <assert_print>
    99f6:	215b      	movs	r1, #91	; 0x5b
    99f8:	480a      	ldr	r0, [pc, #40]	; (9a24 <z_arm_irq_priority_set+0x40>)
    99fa:	f011 fc82 	bl	1b302 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    99fe:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    9a00:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a02:	bfac      	ite	ge
    9a04:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a08:	4b08      	ldrlt	r3, [pc, #32]	; (9a2c <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a0a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9a0e:	b2c9      	uxtb	r1, r1
    9a10:	bfab      	itete	ge
    9a12:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a16:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a1a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9a1e:	5419      	strblt	r1, [r3, r0]
}
    9a20:	bd08      	pop	{r3, pc}
    9a22:	bf00      	nop
    9a24:	000228a9 	.word	0x000228a9
    9a28:	000221f8 	.word	0x000221f8
    9a2c:	e000ed14 	.word	0xe000ed14

00009a30 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9a30:	bf30      	wfi
    b z_SysNmiOnReset
    9a32:	f7ff bffd 	b.w	9a30 <z_SysNmiOnReset>
    9a36:	bf00      	nop

00009a38 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9a38:	4a14      	ldr	r2, [pc, #80]	; (9a8c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    9a3a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9a3c:	4b14      	ldr	r3, [pc, #80]	; (9a90 <z_arm_prep_c+0x58>)
    9a3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9a42:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    9a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a48:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9a4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9a50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    9a58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9a5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    9a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    9a64:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    9a68:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    9a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a70:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    9a74:	2300      	movs	r3, #0
    9a76:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9a7a:	f00c f8cf 	bl	15c1c <z_bss_zero>
	z_data_copy();
    9a7e:	f00e fd1d 	bl	184bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9a82:	f000 fb15 	bl	a0b0 <z_arm_interrupt_init>
	z_cstart();
    9a86:	f00c f909 	bl	15c9c <z_cstart>
    9a8a:	bf00      	nop
    9a8c:	00000000 	.word	0x00000000
    9a90:	e000ed00 	.word	0xe000ed00

00009a94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    9a94:	4a0a      	ldr	r2, [pc, #40]	; (9ac0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    9a96:	490b      	ldr	r1, [pc, #44]	; (9ac4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    9a98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9a9a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9a9c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	_current->arch.swap_return_value = _k_neg_eagain;
    9aa0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9aa4:	4908      	ldr	r1, [pc, #32]	; (9ac8 <arch_swap+0x34>)
    9aa6:	684b      	ldr	r3, [r1, #4]
    9aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9aac:	604b      	str	r3, [r1, #4]
    9aae:	2300      	movs	r3, #0
    9ab0:	f383 8811 	msr	BASEPRI, r3
    9ab4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    9ab8:	6893      	ldr	r3, [r2, #8]
}
    9aba:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
    9abe:	4770      	bx	lr
    9ac0:	20006f78 	.word	0x20006f78
    9ac4:	000214b8 	.word	0x000214b8
    9ac8:	e000ed00 	.word	0xe000ed00

00009acc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    9acc:	4923      	ldr	r1, [pc, #140]	; (9b5c <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    9ace:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    9ad0:	f882 e0d1 	strb.w	lr, [r2, #209]	; 0xd1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    9ad4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    9ad8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    9ada:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    9ade:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    9ae2:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    9ae6:	d103      	bne.n	9af0 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    9ae8:	f102 0090 	add.w	r0, r2, #144	; 0x90
    vstmia r0, {s16-s31}
    9aec:	ec80 8a10 	vstmia	r0, {s16-s31}

00009af0 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9af0:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    9af2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    9af6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    9afa:	4f19      	ldr	r7, [pc, #100]	; (9b60 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    9afc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    9b00:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    9b02:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    9b04:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    9b06:	f992 e0d1 	ldrsb.w	lr, [r2, #209]	; 0xd1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    9b0a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    movs r3, #0
    9b0e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    9b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    9b14:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    9b18:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    9b1c:	d003      	beq.n	9b26 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    9b1e:	2300      	movs	r3, #0
    vmsr fpscr, r3
    9b20:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    9b24:	e003      	b.n	9b2e <in_fp_endif>

00009b26 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    9b26:	f102 0090 	add.w	r0, r2, #144	; 0x90
    vldmia r0, {s16-s31}
    9b2a:	ec90 8a10 	vldmia	r0, {s16-s31}

00009b2e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    9b2e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    9b32:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    9b36:	f383 8814 	msr	CONTROL, r3
    isb
    9b3a:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9b3e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    9b42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    9b46:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    9b4a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    9b4e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9b50:	f012 fa57 	bl	1c002 <configure_builtin_stack_guard>
    pop {r2, lr}
    9b54:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    9b58:	4770      	bx	lr
    9b5a:	0000      	.short	0x0000
    ldr r1, =_kernel
    9b5c:	20006f78 	.word	0x20006f78
    ldr v4, =_SCS_ICSR
    9b60:	e000ed04 	.word	0xe000ed04

00009b64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    9b64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9b68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    9b6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    9b6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9b72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9b74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9b78:	2902      	cmp	r1, #2
    beq _oops
    9b7a:	d0ff      	beq.n	9b7c <_oops>

00009b7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    9b7c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    9b7e:	f012 fa31 	bl	1bfe4 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9b82:	bd01      	pop	{r0, pc}

00009b84 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9b84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9b88:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    9b8a:	490d      	ldr	r1, [pc, #52]	; (9bc0 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    9b8c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9b90:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9b92:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    9b96:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    9b9a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    9b9c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9ba0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9ba8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9bac:	2300      	movs	r3, #0
    9bae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9bb2:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9bb6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9bb8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9bba:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9bbe:	4770      	bx	lr
    9bc0:	0001adef 	.word	0x0001adef

00009bc4 <arch_switch_to_main_thread>:
    9bc4:	2300      	movs	r3, #0
    9bc6:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    9bca:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    9bce:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    9bd2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    9bd6:	f3bf 8f6f 	isb	sy
    9bda:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9bde:	4b09      	ldr	r3, [pc, #36]	; (9c04 <arch_switch_to_main_thread+0x40>)
    9be0:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9be2:	6f83      	ldr	r3, [r0, #120]	; 0x78
    9be4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    9be8:	4610      	mov	r0, r2
    9bea:	f381 8809 	msr	PSP, r1
    9bee:	2100      	movs	r1, #0
    9bf0:	b663      	cpsie	if
    9bf2:	f381 8811 	msr	BASEPRI, r1
    9bf6:	f3bf 8f6f 	isb	sy
    9bfa:	2200      	movs	r2, #0
    9bfc:	2300      	movs	r3, #0
    9bfe:	f011 f8f6 	bl	1adee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    9c02:	bf00      	nop
    9c04:	20006f78 	.word	0x20006f78

00009c08 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    9c08:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    9c0a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    9c0c:	4a0b      	ldr	r2, [pc, #44]	; (9c3c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    9c0e:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    9c10:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    9c12:	bf1e      	ittt	ne
	movne	r1, #0
    9c14:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    9c16:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
    9c18:	f015 f9be 	blne	1ef98 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    9c1c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    9c1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    9c22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    9c26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    9c2a:	4905      	ldr	r1, [pc, #20]	; (9c40 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    9c2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    9c2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    9c30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    9c32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    9c36:	4903      	ldr	r1, [pc, #12]	; (9c44 <_isr_wrapper+0x3c>)
	bx r1
    9c38:	4708      	bx	r1
    9c3a:	0000      	.short	0x0000
	ldr r2, =_kernel
    9c3c:	20006f78 	.word	0x20006f78
	ldr r1, =_sw_isr_table
    9c40:	0001f614 	.word	0x0001f614
	ldr r1, =z_arm_int_exit
    9c44:	00009c49 	.word	0x00009c49

00009c48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    9c48:	4b04      	ldr	r3, [pc, #16]	; (9c5c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    9c4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    9c4c:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    9c4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    9c50:	d003      	beq.n	9c5a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    9c52:	4903      	ldr	r1, [pc, #12]	; (9c60 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    9c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    9c58:	600a      	str	r2, [r1, #0]

00009c5a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    9c5a:	4770      	bx	lr
	ldr r3, =_kernel
    9c5c:	20006f78 	.word	0x20006f78
	ldr r1, =_SCS_ICSR
    9c60:	e000ed04 	.word	0xe000ed04

00009c64 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    9c64:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    9c66:	4c21      	ldr	r4, [pc, #132]	; (9cec <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    9c68:	2145      	movs	r1, #69	; 0x45
    9c6a:	4821      	ldr	r0, [pc, #132]	; (9cf0 <usage_fault.constprop.0+0x8c>)
    9c6c:	f011 fb64 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    9c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c72:	019d      	lsls	r5, r3, #6
    9c74:	d503      	bpl.n	9c7e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    9c76:	2145      	movs	r1, #69	; 0x45
    9c78:	481e      	ldr	r0, [pc, #120]	; (9cf4 <usage_fault.constprop.0+0x90>)
    9c7a:	f011 fb5d 	bl	1b338 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    9c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c80:	01dc      	lsls	r4, r3, #7
    9c82:	d503      	bpl.n	9c8c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    9c84:	2145      	movs	r1, #69	; 0x45
    9c86:	481c      	ldr	r0, [pc, #112]	; (9cf8 <usage_fault.constprop.0+0x94>)
    9c88:	f011 fb56 	bl	1b338 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    9c8c:	4d17      	ldr	r5, [pc, #92]	; (9cec <usage_fault.constprop.0+0x88>)
    9c8e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    9c90:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    9c94:	d004      	beq.n	9ca0 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    9c96:	2145      	movs	r1, #69	; 0x45
    9c98:	4818      	ldr	r0, [pc, #96]	; (9cfc <usage_fault.constprop.0+0x98>)
    9c9a:	f011 fb4d 	bl	1b338 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    9c9e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    9ca0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9ca2:	0318      	lsls	r0, r3, #12
    9ca4:	d503      	bpl.n	9cae <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    9ca6:	2145      	movs	r1, #69	; 0x45
    9ca8:	4815      	ldr	r0, [pc, #84]	; (9d00 <usage_fault.constprop.0+0x9c>)
    9caa:	f011 fb45 	bl	1b338 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    9cae:	4d0f      	ldr	r5, [pc, #60]	; (9cec <usage_fault.constprop.0+0x88>)
    9cb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9cb2:	0359      	lsls	r1, r3, #13
    9cb4:	d503      	bpl.n	9cbe <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    9cb6:	2145      	movs	r1, #69	; 0x45
    9cb8:	4812      	ldr	r0, [pc, #72]	; (9d04 <usage_fault.constprop.0+0xa0>)
    9cba:	f011 fb3d 	bl	1b338 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9cbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9cc0:	039a      	lsls	r2, r3, #14
    9cc2:	d503      	bpl.n	9ccc <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    9cc4:	2145      	movs	r1, #69	; 0x45
    9cc6:	4810      	ldr	r0, [pc, #64]	; (9d08 <usage_fault.constprop.0+0xa4>)
    9cc8:	f011 fb36 	bl	1b338 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9ccc:	4d07      	ldr	r5, [pc, #28]	; (9cec <usage_fault.constprop.0+0x88>)
    9cce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9cd0:	03db      	lsls	r3, r3, #15
    9cd2:	d503      	bpl.n	9cdc <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    9cd4:	2145      	movs	r1, #69	; 0x45
    9cd6:	480d      	ldr	r0, [pc, #52]	; (9d0c <usage_fault.constprop.0+0xa8>)
    9cd8:	f011 fb2e 	bl	1b338 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9cdc:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    9cde:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9ce0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    9ce4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    9ce8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    9cea:	bd38      	pop	{r3, r4, r5, pc}
    9cec:	e000ed00 	.word	0xe000ed00
    9cf0:	000228df 	.word	0x000228df
    9cf4:	000228fc 	.word	0x000228fc
    9cf8:	00022914 	.word	0x00022914
    9cfc:	00022933 	.word	0x00022933
    9d00:	00022962 	.word	0x00022962
    9d04:	00022985 	.word	0x00022985
    9d08:	000229af 	.word	0x000229af
    9d0c:	000229ce 	.word	0x000229ce

00009d10 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9d10:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9d12:	4c23      	ldr	r4, [pc, #140]	; (9da0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9d14:	4606      	mov	r6, r0
    9d16:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    9d18:	4822      	ldr	r0, [pc, #136]	; (9da4 <bus_fault.constprop.0+0x94>)
    9d1a:	2145      	movs	r1, #69	; 0x45
    9d1c:	f011 fb0c 	bl	1b338 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9d20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d22:	04d9      	lsls	r1, r3, #19
    9d24:	d503      	bpl.n	9d2e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    9d26:	2145      	movs	r1, #69	; 0x45
    9d28:	481f      	ldr	r0, [pc, #124]	; (9da8 <bus_fault.constprop.0+0x98>)
    9d2a:	f011 fb05 	bl	1b338 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d30:	051a      	lsls	r2, r3, #20
    9d32:	d503      	bpl.n	9d3c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    9d34:	2145      	movs	r1, #69	; 0x45
    9d36:	481d      	ldr	r0, [pc, #116]	; (9dac <bus_fault.constprop.0+0x9c>)
    9d38:	f011 fafe 	bl	1b338 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9d3c:	4c18      	ldr	r4, [pc, #96]	; (9da0 <bus_fault.constprop.0+0x90>)
    9d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d40:	059b      	lsls	r3, r3, #22
    9d42:	d510      	bpl.n	9d66 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    9d44:	481a      	ldr	r0, [pc, #104]	; (9db0 <bus_fault.constprop.0+0xa0>)
    9d46:	2145      	movs	r1, #69	; 0x45
    9d48:	f011 faf6 	bl	1b338 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    9d4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9d4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d50:	0418      	lsls	r0, r3, #16
    9d52:	d508      	bpl.n	9d66 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    9d54:	2145      	movs	r1, #69	; 0x45
    9d56:	4817      	ldr	r0, [pc, #92]	; (9db4 <bus_fault.constprop.0+0xa4>)
    9d58:	f011 faee 	bl	1b338 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    9d5c:	b11e      	cbz	r6, 9d66 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    9d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    9d64:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9d66:	4c0e      	ldr	r4, [pc, #56]	; (9da0 <bus_fault.constprop.0+0x90>)
    9d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d6a:	0559      	lsls	r1, r3, #21
    9d6c:	d503      	bpl.n	9d76 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    9d6e:	2145      	movs	r1, #69	; 0x45
    9d70:	4811      	ldr	r0, [pc, #68]	; (9db8 <bus_fault.constprop.0+0xa8>)
    9d72:	f011 fae1 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d78:	05da      	lsls	r2, r3, #23
    9d7a:	d50b      	bpl.n	9d94 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    9d7c:	2145      	movs	r1, #69	; 0x45
    9d7e:	480f      	ldr	r0, [pc, #60]	; (9dbc <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    9d80:	f011 fada 	bl	1b338 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    9d84:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    9d86:	4a06      	ldr	r2, [pc, #24]	; (9da0 <bus_fault.constprop.0+0x90>)
    9d88:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9d8a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    9d8e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9d90:	7028      	strb	r0, [r5, #0]
}
    9d92:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9d96:	049b      	lsls	r3, r3, #18
    9d98:	d5f4      	bpl.n	9d84 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    9d9a:	2145      	movs	r1, #69	; 0x45
    9d9c:	4808      	ldr	r0, [pc, #32]	; (9dc0 <bus_fault.constprop.0+0xb0>)
    9d9e:	e7ef      	b.n	9d80 <bus_fault.constprop.0+0x70>
    9da0:	e000ed00 	.word	0xe000ed00
    9da4:	000229fe 	.word	0x000229fe
    9da8:	00022a19 	.word	0x00022a19
    9dac:	00022a2f 	.word	0x00022a2f
    9db0:	00022a47 	.word	0x00022a47
    9db4:	00022a65 	.word	0x00022a65
    9db8:	00022a7f 	.word	0x00022a7f
    9dbc:	00022a9f 	.word	0x00022a9f
    9dc0:	00022abc 	.word	0x00022abc

00009dc4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    9dc4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9dc6:	4c2e      	ldr	r4, [pc, #184]	; (9e80 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    9dc8:	4606      	mov	r6, r0
    9dca:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    9dcc:	482d      	ldr	r0, [pc, #180]	; (9e84 <mem_manage_fault.constprop.0+0xc0>)
    9dce:	2145      	movs	r1, #69	; 0x45
    9dd0:	f011 fab2 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9dd6:	06db      	lsls	r3, r3, #27
    9dd8:	d503      	bpl.n	9de2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    9dda:	2145      	movs	r1, #69	; 0x45
    9ddc:	482a      	ldr	r0, [pc, #168]	; (9e88 <mem_manage_fault.constprop.0+0xc4>)
    9dde:	f011 faab 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    9de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9de4:	071c      	lsls	r4, r3, #28
    9de6:	d503      	bpl.n	9df0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    9de8:	2145      	movs	r1, #69	; 0x45
    9dea:	4828      	ldr	r0, [pc, #160]	; (9e8c <mem_manage_fault.constprop.0+0xc8>)
    9dec:	f011 faa4 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9df0:	4c23      	ldr	r4, [pc, #140]	; (9e80 <mem_manage_fault.constprop.0+0xbc>)
    9df2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9df4:	0798      	lsls	r0, r3, #30
    9df6:	d510      	bpl.n	9e1a <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    9df8:	2145      	movs	r1, #69	; 0x45
    9dfa:	4825      	ldr	r0, [pc, #148]	; (9e90 <mem_manage_fault.constprop.0+0xcc>)
    9dfc:	f011 fa9c 	bl	1b338 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    9e00:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    9e02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e04:	0619      	lsls	r1, r3, #24
    9e06:	d508      	bpl.n	9e1a <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    9e08:	2145      	movs	r1, #69	; 0x45
    9e0a:	4822      	ldr	r0, [pc, #136]	; (9e94 <mem_manage_fault.constprop.0+0xd0>)
    9e0c:	f011 fa94 	bl	1b338 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    9e10:	b11e      	cbz	r6, 9e1a <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    9e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9e18:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    9e1a:	4c19      	ldr	r4, [pc, #100]	; (9e80 <mem_manage_fault.constprop.0+0xbc>)
    9e1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e1e:	07db      	lsls	r3, r3, #31
    9e20:	d503      	bpl.n	9e2a <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    9e22:	2145      	movs	r1, #69	; 0x45
    9e24:	481c      	ldr	r0, [pc, #112]	; (9e98 <mem_manage_fault.constprop.0+0xd4>)
    9e26:	f011 fa87 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9e2c:	069e      	lsls	r6, r3, #26
    9e2e:	d503      	bpl.n	9e38 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    9e30:	2145      	movs	r1, #69	; 0x45
    9e32:	481a      	ldr	r0, [pc, #104]	; (9e9c <mem_manage_fault.constprop.0+0xd8>)
    9e34:	f011 fa80 	bl	1b338 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9e38:	4b11      	ldr	r3, [pc, #68]	; (9e80 <mem_manage_fault.constprop.0+0xbc>)
    9e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9e3c:	06d4      	lsls	r4, r2, #27
    9e3e:	d402      	bmi.n	9e46 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    9e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    9e42:	0790      	lsls	r0, r2, #30
    9e44:	d50d      	bpl.n	9e62 <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    9e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e48:	06d9      	lsls	r1, r3, #27
    9e4a:	d50a      	bpl.n	9e62 <mem_manage_fault.constprop.0+0x9e>
    9e4c:	4914      	ldr	r1, [pc, #80]	; (9ea0 <mem_manage_fault.constprop.0+0xdc>)
    9e4e:	4815      	ldr	r0, [pc, #84]	; (9ea4 <mem_manage_fault.constprop.0+0xe0>)
    9e50:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    9e54:	f011 fa5c 	bl	1b310 <assert_print>
    9e58:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    9e5c:	4810      	ldr	r0, [pc, #64]	; (9ea0 <mem_manage_fault.constprop.0+0xdc>)
    9e5e:	f011 fa50 	bl	1b302 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    9e62:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9e64:	4b06      	ldr	r3, [pc, #24]	; (9e80 <mem_manage_fault.constprop.0+0xbc>)
    9e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9e68:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    9e6a:	bf42      	ittt	mi
    9e6c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    9e6e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    9e72:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    9e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9e76:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    9e7a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9e7c:	7028      	strb	r0, [r5, #0]
}
    9e7e:	bd70      	pop	{r4, r5, r6, pc}
    9e80:	e000ed00 	.word	0xe000ed00
    9e84:	00022af0 	.word	0x00022af0
    9e88:	00022b0b 	.word	0x00022b0b
    9e8c:	00022a2f 	.word	0x00022a2f
    9e90:	00022b43 	.word	0x00022b43
    9e94:	00022b60 	.word	0x00022b60
    9e98:	00022b7b 	.word	0x00022b7b
    9e9c:	00022abc 	.word	0x00022abc
    9ea0:	00022b9f 	.word	0x00022b9f
    9ea4:	000221f8 	.word	0x000221f8

00009ea8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    9ea8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9eaa:	4b69      	ldr	r3, [pc, #420]	; (a050 <z_arm_fault+0x1a8>)
{
    9eac:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9eae:	6858      	ldr	r0, [r3, #4]
    9eb0:	2600      	movs	r6, #0
{
    9eb2:	b09c      	sub	sp, #112	; 0x70
    9eb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
    9eb8:	f386 8811 	msr	BASEPRI, r6
    9ebc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    9ec0:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    9ec4:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    9ec8:	d107      	bne.n	9eda <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    9eca:	f002 040c 	and.w	r4, r2, #12
    9ece:	2c08      	cmp	r4, #8
    9ed0:	d10e      	bne.n	9ef0 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    9ed2:	2145      	movs	r1, #69	; 0x45
    9ed4:	485f      	ldr	r0, [pc, #380]	; (a054 <z_arm_fault+0x1ac>)
    9ed6:	f011 fa2f 	bl	1b338 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    9eda:	495f      	ldr	r1, [pc, #380]	; (a058 <z_arm_fault+0x1b0>)
    9edc:	f44f 6284 	mov.w	r2, #1056	; 0x420
    9ee0:	485e      	ldr	r0, [pc, #376]	; (a05c <z_arm_fault+0x1b4>)
    9ee2:	f011 fa15 	bl	1b310 <assert_print>
    9ee6:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    9eea:	485b      	ldr	r0, [pc, #364]	; (a058 <z_arm_fault+0x1b0>)
    9eec:	f011 fa09 	bl	1b302 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    9ef0:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    9ef2:	bf4c      	ite	mi
    9ef4:	460d      	movmi	r5, r1
			*nested_exc = true;
    9ef6:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    9ef8:	2d00      	cmp	r5, #0
    9efa:	d0ee      	beq.n	9eda <z_arm_fault+0x32>
	*recoverable = false;
    9efc:	2400      	movs	r4, #0
	switch (fault) {
    9efe:	1eda      	subs	r2, r3, #3
	*recoverable = false;
    9f00:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    9f04:	2a09      	cmp	r2, #9
    9f06:	f200 8092 	bhi.w	a02e <z_arm_fault+0x186>
    9f0a:	e8df f002 	tbb	[pc, r2]
    9f0e:	8505      	.short	0x8505
    9f10:	90907089 	.word	0x90907089
    9f14:	8d909090 	.word	0x8d909090
	PR_FAULT_INFO("***** HARD FAULT *****");
    9f18:	2145      	movs	r1, #69	; 0x45
    9f1a:	4851      	ldr	r0, [pc, #324]	; (a060 <z_arm_fault+0x1b8>)
    9f1c:	f011 fa0c 	bl	1b338 <z_log_minimal_printk>
	*recoverable = false;
    9f20:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    9f24:	4c4a      	ldr	r4, [pc, #296]	; (a050 <z_arm_fault+0x1a8>)
    9f26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9f28:	079a      	lsls	r2, r3, #30
    9f2a:	d505      	bpl.n	9f38 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
    9f2c:	2145      	movs	r1, #69	; 0x45
    9f2e:	484d      	ldr	r0, [pc, #308]	; (a064 <z_arm_fault+0x1bc>)
	PR_FAULT_INFO(
    9f30:	f011 fa02 	bl	1b338 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    9f34:	2400      	movs	r4, #0
    9f36:	e029      	b.n	9f8c <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    9f38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	da02      	bge.n	9f44 <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
    9f3e:	2145      	movs	r1, #69	; 0x45
    9f40:	4849      	ldr	r0, [pc, #292]	; (a068 <z_arm_fault+0x1c0>)
    9f42:	e7f5      	b.n	9f30 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    9f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9f46:	005b      	lsls	r3, r3, #1
    9f48:	d55d      	bpl.n	a006 <z_arm_fault+0x15e>
		PR_EXC("  Fault escalation (see below)");
    9f4a:	2145      	movs	r1, #69	; 0x45
    9f4c:	4847      	ldr	r0, [pc, #284]	; (a06c <z_arm_fault+0x1c4>)
    9f4e:	f011 f9f3 	bl	1b338 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9f52:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    9f54:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f5a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9f5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9f60:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    9f64:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    9f66:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    9f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9f6e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9f74:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9f78:	f64d 7302 	movw	r3, #57090	; 0xdf02
    9f7c:	429a      	cmp	r2, r3
    9f7e:	d11e      	bne.n	9fbe <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    9f80:	2145      	movs	r1, #69	; 0x45
    9f82:	682a      	ldr	r2, [r5, #0]
    9f84:	483a      	ldr	r0, [pc, #232]	; (a070 <z_arm_fault+0x1c8>)
    9f86:	f011 f9d7 	bl	1b338 <z_log_minimal_printk>
			reason = esf->basic.r0;
    9f8a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    9f8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f90:	b99b      	cbnz	r3, 9fba <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    9f92:	2268      	movs	r2, #104	; 0x68
    9f94:	4629      	mov	r1, r5
    9f96:	a802      	add	r0, sp, #8
    9f98:	f015 fa14 	bl	1f3c4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    9f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f9e:	2e00      	cmp	r6, #0
    9fa0:	d051      	beq.n	a046 <z_arm_fault+0x19e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    9fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    9fa6:	b922      	cbnz	r2, 9fb2 <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    9fa8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    9fac:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9fb0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    9fb2:	4620      	mov	r0, r4
    9fb4:	a902      	add	r1, sp, #8
    9fb6:	f7ff fc7f 	bl	98b8 <z_arm_fatal_error>
}
    9fba:	b01c      	add	sp, #112	; 0x70
    9fbc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    9fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9fc0:	b2db      	uxtb	r3, r3
    9fc2:	b133      	cbz	r3, 9fd2 <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
    9fc4:	2001      	movs	r0, #1
    9fc6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    9fca:	f7ff fefb 	bl	9dc4 <mem_manage_fault.constprop.0>
    9fce:	4604      	mov	r4, r0
		break;
    9fd0:	e7dc      	b.n	9f8c <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    9fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9fd4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    9fd8:	d005      	beq.n	9fe6 <z_arm_fault+0x13e>
			reason = bus_fault(esf, 1, recoverable);
    9fda:	2001      	movs	r0, #1
    9fdc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    9fe0:	f7ff fe96 	bl	9d10 <bus_fault.constprop.0>
    9fe4:	e7f3      	b.n	9fce <z_arm_fault+0x126>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    9fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9fec:	d302      	bcc.n	9ff4 <z_arm_fault+0x14c>
		reason = usage_fault(esf);
    9fee:	f7ff fe39 	bl	9c64 <usage_fault.constprop.0>
    9ff2:	e7ec      	b.n	9fce <z_arm_fault+0x126>
			__ASSERT(0,
    9ff4:	4918      	ldr	r1, [pc, #96]	; (a058 <z_arm_fault+0x1b0>)
    9ff6:	f240 22f2 	movw	r2, #754	; 0x2f2
    9ffa:	4818      	ldr	r0, [pc, #96]	; (a05c <z_arm_fault+0x1b4>)
    9ffc:	f011 f988 	bl	1b310 <assert_print>
    a000:	f240 21f2 	movw	r1, #754	; 0x2f2
    a004:	e771      	b.n	9eea <z_arm_fault+0x42>
		__ASSERT(0,
    a006:	4914      	ldr	r1, [pc, #80]	; (a058 <z_arm_fault+0x1b0>)
    a008:	f240 22f6 	movw	r2, #758	; 0x2f6
    a00c:	4813      	ldr	r0, [pc, #76]	; (a05c <z_arm_fault+0x1b4>)
    a00e:	f011 f97f 	bl	1b310 <assert_print>
    a012:	f240 21f6 	movw	r1, #758	; 0x2f6
    a016:	e768      	b.n	9eea <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
    a018:	2000      	movs	r0, #0
    a01a:	f10d 0107 	add.w	r1, sp, #7
    a01e:	e7d4      	b.n	9fca <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
    a020:	2000      	movs	r0, #0
    a022:	f10d 0107 	add.w	r1, sp, #7
    a026:	e7db      	b.n	9fe0 <z_arm_fault+0x138>
	PR_FAULT_INFO(
    a028:	2145      	movs	r1, #69	; 0x45
    a02a:	4812      	ldr	r0, [pc, #72]	; (a074 <z_arm_fault+0x1cc>)
    a02c:	e780      	b.n	9f30 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
    a02e:	4912      	ldr	r1, [pc, #72]	; (a078 <z_arm_fault+0x1d0>)
    a030:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
    a034:	4a11      	ldr	r2, [pc, #68]	; (a07c <z_arm_fault+0x1d4>)
    a036:	4812      	ldr	r0, [pc, #72]	; (a080 <z_arm_fault+0x1d8>)
    a038:	bf08      	it	eq
    a03a:	460a      	moveq	r2, r1
    a03c:	3b10      	subs	r3, #16
    a03e:	2145      	movs	r1, #69	; 0x45
    a040:	f011 f97a 	bl	1b338 <z_log_minimal_printk>
}
    a044:	e776      	b.n	9f34 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    a046:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    a04a:	f023 0301 	bic.w	r3, r3, #1
    a04e:	e7af      	b.n	9fb0 <z_arm_fault+0x108>
    a050:	e000ed00 	.word	0xe000ed00
    a054:	00022c07 	.word	0x00022c07
    a058:	00022b9f 	.word	0x00022b9f
    a05c:	000221f8 	.word	0x000221f8
    a060:	00022c37 	.word	0x00022c37
    a064:	00022c53 	.word	0x00022c53
    a068:	00022c79 	.word	0x00022c79
    a06c:	00022c8c 	.word	0x00022c8c
    a070:	00022cb0 	.word	0x00022cb0
    a074:	00022cd1 	.word	0x00022cd1
    a078:	00022bd9 	.word	0x00022bd9
    a07c:	00022bee 	.word	0x00022bee
    a080:	00022cfa 	.word	0x00022cfa

0000a084 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a084:	4b04      	ldr	r3, [pc, #16]	; (a098 <z_arm_fault_init+0x14>)
    a086:	695a      	ldr	r2, [r3, #20]
    a088:	f042 0210 	orr.w	r2, r2, #16
    a08c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    a08e:	695a      	ldr	r2, [r3, #20]
    a090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    a094:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    a096:	4770      	bx	lr
    a098:	e000ed00 	.word	0xe000ed00

0000a09c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    a09c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    a0a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    a0a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    a0a6:	4672      	mov	r2, lr
	bl z_arm_fault
    a0a8:	f7ff fefe 	bl	9ea8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    a0ac:	bd01      	pop	{r0, pc}
    a0ae:	bf00      	nop

0000a0b0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    a0b0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a0b2:	2120      	movs	r1, #32
    a0b4:	4803      	ldr	r0, [pc, #12]	; (a0c4 <z_arm_interrupt_init+0x14>)
    a0b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    a0b8:	3301      	adds	r3, #1
    a0ba:	2b45      	cmp	r3, #69	; 0x45
    a0bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    a0c0:	d1f9      	bne.n	a0b6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    a0c2:	4770      	bx	lr
    a0c4:	e000e100 	.word	0xe000e100

0000a0c8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    a0c8:	2000      	movs	r0, #0
    msr CONTROL, r0
    a0ca:	f380 8814 	msr	CONTROL, r0
    isb
    a0ce:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    a0d2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    a0d4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    a0d8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    a0dc:	f7fd fe40 	bl	7d60 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    a0e0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    a0e2:	490e      	ldr	r1, [pc, #56]	; (a11c <__start+0x54>)
    str r0, [r1]
    a0e4:	6008      	str	r0, [r1, #0]
    dsb
    a0e6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a0ea:	480d      	ldr	r0, [pc, #52]	; (a120 <__start+0x58>)
    msr msp, r0
    a0ec:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    a0f0:	f000 f83e 	bl	a170 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    a0f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    a0f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    a0fa:	480a      	ldr	r0, [pc, #40]	; (a124 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    a0fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    a100:	1840      	adds	r0, r0, r1
    msr PSP, r0
    a102:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    a106:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    a10a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    a10c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    a10e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    a112:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    a116:	f7ff fc8f 	bl	9a38 <z_arm_prep_c>
    a11a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    a11c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    a120:	2000a4f8 	.word	0x2000a4f8
    ldr r0, =z_interrupt_stacks
    a124:	200097b8 	.word	0x200097b8

0000a128 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    a128:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a12c:	4905      	ldr	r1, [pc, #20]	; (a144 <sys_arch_reboot+0x1c>)
    a12e:	4b06      	ldr	r3, [pc, #24]	; (a148 <sys_arch_reboot+0x20>)
    a130:	68ca      	ldr	r2, [r1, #12]
    a132:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a136:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a138:	60cb      	str	r3, [r1, #12]
    a13a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    a13e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    a140:	e7fd      	b.n	a13e <sys_arch_reboot+0x16>
    a142:	bf00      	nop
    a144:	e000ed00 	.word	0xe000ed00
    a148:	05fa0004 	.word	0x05fa0004

0000a14c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    a14c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    a14e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    a150:	4906      	ldr	r1, [pc, #24]	; (a16c <z_arm_clear_arm_mpu_config+0x20>)
    a152:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    a156:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    a15a:	4293      	cmp	r3, r2
    a15c:	db00      	blt.n	a160 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    a15e:	4770      	bx	lr
  mpu->RNR = rnr;
    a160:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    a164:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    a168:	3301      	adds	r3, #1
    a16a:	e7f6      	b.n	a15a <z_arm_clear_arm_mpu_config+0xe>
    a16c:	e000ed00 	.word	0xe000ed00

0000a170 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    a170:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    a172:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    a174:	2400      	movs	r4, #0
    a176:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    a17a:	f7ff ffe7 	bl	a14c <z_arm_clear_arm_mpu_config>
    a17e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    a180:	f04f 30ff 	mov.w	r0, #4294967295
    a184:	4a0c      	ldr	r2, [pc, #48]	; (a1b8 <z_arm_init_arch_hw_at_boot+0x48>)
    a186:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a18a:	3301      	adds	r3, #1
    a18c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    a18e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    a192:	d1f8      	bne.n	a186 <z_arm_init_arch_hw_at_boot+0x16>
    a194:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a196:	f04f 30ff 	mov.w	r0, #4294967295
    a19a:	4a07      	ldr	r2, [pc, #28]	; (a1b8 <z_arm_init_arch_hw_at_boot+0x48>)
    a19c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a1a0:	3301      	adds	r3, #1
    a1a2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    a1a4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    a1a8:	d1f8      	bne.n	a19c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    a1aa:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    a1ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a1b0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    a1b4:	bd10      	pop	{r4, pc}
    a1b6:	bf00      	nop
    a1b8:	e000e100 	.word	0xe000e100

0000a1bc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    a1bc:	4b08      	ldr	r3, [pc, #32]	; (a1e0 <z_impl_k_thread_abort+0x24>)
    a1be:	689b      	ldr	r3, [r3, #8]
    a1c0:	4283      	cmp	r3, r0
    a1c2:	d10b      	bne.n	a1dc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a1c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    a1c8:	b143      	cbz	r3, a1dc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    a1ca:	4b06      	ldr	r3, [pc, #24]	; (a1e4 <z_impl_k_thread_abort+0x28>)
    a1cc:	685a      	ldr	r2, [r3, #4]
    a1ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    a1d2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    a1d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a1d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    a1da:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    a1dc:	f00e b86e 	b.w	182bc <z_thread_abort>
    a1e0:	20006f78 	.word	0x20006f78
    a1e4:	e000ed00 	.word	0xe000ed00

0000a1e8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    a1ea:	4c09      	ldr	r4, [pc, #36]	; (a210 <z_arm_configure_static_mpu_regions+0x28>)
    a1ec:	4a09      	ldr	r2, [pc, #36]	; (a214 <z_arm_configure_static_mpu_regions+0x2c>)
    a1ee:	4623      	mov	r3, r4
    a1f0:	2101      	movs	r1, #1
    a1f2:	4809      	ldr	r0, [pc, #36]	; (a218 <z_arm_configure_static_mpu_regions+0x30>)
    a1f4:	f000 f924 	bl	a440 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a1f8:	2300      	movs	r3, #0
    a1fa:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    a1fc:	4b07      	ldr	r3, [pc, #28]	; (a21c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a1fe:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    a200:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a202:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    a204:	9301      	str	r3, [sp, #4]
    a206:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    a208:	f000 f934 	bl	a474 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    a20c:	b004      	add	sp, #16
    a20e:	bd10      	pop	{r4, pc}
    a210:	20080000 	.word	0x20080000
    a214:	20000000 	.word	0x20000000
    a218:	0001ff48 	.word	0x0001ff48
    a21c:	20000a80 	.word	0x20000a80

0000a220 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    a220:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    a222:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a224:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    a226:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    a22a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    a22e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a230:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a232:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    a234:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    a238:	4905      	ldr	r1, [pc, #20]	; (a250 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    a23a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    a23e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    a242:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    a246:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    a24a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    a24e:	bd10      	pop	{r4, pc}
    a250:	e000ed00 	.word	0xe000ed00

0000a254 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    a254:	b530      	push	{r4, r5, lr}
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    a256:	680c      	ldr	r4, [r1, #0]
#if defined(CONFIG_ARMV7_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
    a258:	684b      	ldr	r3, [r1, #4]
{
    a25a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    a25c:	890a      	ldrh	r2, [r1, #8]
    a25e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    a260:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    a262:	3b01      	subs	r3, #1
    a264:	f024 041f 	bic.w	r4, r4, #31
    a268:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    a26a:	f002 021f 	and.w	r2, r2, #31
    a26e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    a272:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    a276:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    a278:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    a27a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    a27e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    a280:	d909      	bls.n	a296 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    a282:	4602      	mov	r2, r0
    a284:	2145      	movs	r1, #69	; 0x45
    a286:	4806      	ldr	r0, [pc, #24]	; (a2a0 <mpu_configure_region+0x4c>)
    a288:	f011 f856 	bl	1b338 <z_log_minimal_printk>
    a28c:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    a290:	4620      	mov	r0, r4
    a292:	b005      	add	sp, #20
    a294:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    a296:	4669      	mov	r1, sp
    a298:	f7ff ffc2 	bl	a220 <region_init>
	return region_allocate_and_init(index,
    a29c:	e7f8      	b.n	a290 <mpu_configure_region+0x3c>
    a29e:	bf00      	nop
    a2a0:	00022d16 	.word	0x00022d16

0000a2a4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2a8:	4689      	mov	r9, r1
    a2aa:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    a2ac:	4606      	mov	r6, r0
    a2ae:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    a2b2:	4d54      	ldr	r5, [pc, #336]	; (a404 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    a2b4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    a2b6:	45c8      	cmp	r8, r9
    a2b8:	da27      	bge.n	a30a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    a2ba:	f8d6 a004 	ldr.w	sl, [r6, #4]
    a2be:	f1ba 0f00 	cmp.w	sl, #0
    a2c2:	d044      	beq.n	a34e <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
    a2c4:	f1ba 0f1f 	cmp.w	sl, #31
    a2c8:	d918      	bls.n	a2fc <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    a2ca:	f01a 0f1f 	tst.w	sl, #31
    a2ce:	d115      	bne.n	a2fc <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    a2d0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    a2d4:	f01b 0f1f 	tst.w	fp, #31
    a2d8:	d110      	bne.n	a2fc <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a2da:	4658      	mov	r0, fp
    a2dc:	f011 fe95 	bl	1c00a <arm_cmse_mpu_region_get>
    a2e0:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a2e2:	eb0a 000b 	add.w	r0, sl, fp
    a2e6:	3801      	subs	r0, #1
    a2e8:	f011 fe8f 	bl	1c00a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a2ec:	4287      	cmp	r7, r0
    a2ee:	d010      	beq.n	a312 <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    a2f0:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    a2f4:	463a      	mov	r2, r7
    a2f6:	2145      	movs	r1, #69	; 0x45
    a2f8:	4843      	ldr	r0, [pc, #268]	; (a408 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    a2fa:	e002      	b.n	a302 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    a2fc:	4642      	mov	r2, r8
    a2fe:	2145      	movs	r1, #69	; 0x45
    a300:	4842      	ldr	r0, [pc, #264]	; (a40c <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
    a302:	f011 f819 	bl	1b338 <z_log_minimal_printk>
			return -EINVAL;
    a306:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    a30a:	4620      	mov	r0, r4
    a30c:	b005      	add	sp, #20
    a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    a312:	f117 0f16 	cmn.w	r7, #22
    a316:	d0ed      	beq.n	a2f4 <mpu_configure_regions_and_partition.constprop.0+0x50>
    a318:	42bc      	cmp	r4, r7
    a31a:	ddeb      	ble.n	a2f4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    a31c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    a320:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    a324:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    a328:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a32c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    a330:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a334:	e9d6 3200 	ldrd	r3, r2, [r6]
    a338:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    a33a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    a33c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    a340:	d11d      	bne.n	a37e <mpu_configure_regions_and_partition.constprop.0+0xda>
    a342:	45d3      	cmp	fp, sl
    a344:	d107      	bne.n	a356 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
    a346:	4631      	mov	r1, r6
    a348:	b2f8      	uxtb	r0, r7
    a34a:	f7ff ff83 	bl	a254 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    a34e:	f108 0801 	add.w	r8, r8, #1
    a352:	360c      	adds	r6, #12
    a354:	e7af      	b.n	a2b6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    a356:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    a358:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    a35c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    a360:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    a364:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    a368:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    a36a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    a36e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    a370:	f7ff ff70 	bl	a254 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    a374:	f110 0f16 	cmn.w	r0, #22
    a378:	d0c5      	beq.n	a306 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    a37a:	1c44      	adds	r4, r0, #1
    a37c:	e7e7      	b.n	a34e <mpu_configure_regions_and_partition.constprop.0+0xaa>
	MPU->RNR = rnr;
    a37e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    a382:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    a386:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a388:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    a38c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    a390:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    a392:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    a394:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    a396:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    a398:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    a39c:	d0e8      	beq.n	a370 <mpu_configure_regions_and_partition.constprop.0+0xcc>
				mpu_configure_region(reg_index, &regions[i]);
    a39e:	f7ff ff59 	bl	a254 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    a3a2:	f110 0f16 	cmn.w	r0, #22
    a3a6:	d0ae      	beq.n	a306 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = rnr;
    a3a8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    a3ac:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a3b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    a3b4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    a3b8:	f362 0304 	bfi	r3, r2, #0, #5
    a3bc:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    a3c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a3c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a3c8:	085b      	lsrs	r3, r3, #1
    a3ca:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    a3ce:	e9d6 3100 	ldrd	r3, r1, [r6]
    a3d2:	440b      	add	r3, r1
    a3d4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    a3d6:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    a3da:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    a3dc:	445b      	add	r3, fp
    a3de:	eba3 030a 	sub.w	r3, r3, sl
    a3e2:	b2c0      	uxtb	r0, r0
    a3e4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    a3e8:	2807      	cmp	r0, #7
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a3ea:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    a3ee:	9303      	str	r3, [sp, #12]
    a3f0:	d903      	bls.n	a3fa <mpu_configure_regions_and_partition.constprop.0+0x156>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    a3f2:	4602      	mov	r2, r0
    a3f4:	2145      	movs	r1, #69	; 0x45
    a3f6:	4806      	ldr	r0, [pc, #24]	; (a410 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    a3f8:	e783      	b.n	a302 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    a3fa:	4669      	mov	r1, sp
    a3fc:	f7ff ff10 	bl	a220 <region_init>
    a400:	e7bb      	b.n	a37a <mpu_configure_regions_and_partition.constprop.0+0xd6>
    a402:	bf00      	nop
    a404:	e000ed00 	.word	0xe000ed00
    a408:	00022d69 	.word	0x00022d69
    a40c:	00022d41 	.word	0x00022d41
    a410:	00022d16 	.word	0x00022d16

0000a414 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    a414:	2205      	movs	r2, #5
    a416:	4b04      	ldr	r3, [pc, #16]	; (a428 <arm_core_mpu_enable+0x14>)
    a418:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    a41c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a420:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    a424:	4770      	bx	lr
    a426:	bf00      	nop
    a428:	e000ed00 	.word	0xe000ed00

0000a42c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    a42c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    a430:	2200      	movs	r2, #0
    a432:	4b02      	ldr	r3, [pc, #8]	; (a43c <arm_core_mpu_disable+0x10>)
    a434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a438:	4770      	bx	lr
    a43a:	bf00      	nop
    a43c:	e000ed00 	.word	0xe000ed00

0000a440 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    a440:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    a442:	4c09      	ldr	r4, [pc, #36]	; (a468 <arm_core_mpu_configure_static_mpu_regions+0x28>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    a444:	7822      	ldrb	r2, [r4, #0]
    a446:	f7ff ff2d 	bl	a2a4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    a44a:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    a44c:	3016      	adds	r0, #22
    a44e:	d10a      	bne.n	a466 <arm_core_mpu_configure_static_mpu_regions+0x26>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    a450:	4906      	ldr	r1, [pc, #24]	; (a46c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
    a452:	4807      	ldr	r0, [pc, #28]	; (a470 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    a454:	f44f 728d 	mov.w	r2, #282	; 0x11a
    a458:	f010 ff5a 	bl	1b310 <assert_print>
    a45c:	f44f 718d 	mov.w	r1, #282	; 0x11a
    a460:	4802      	ldr	r0, [pc, #8]	; (a46c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
    a462:	f010 ff4e 	bl	1b302 <assert_post_action>
			regions_num);
	}
}
    a466:	bd10      	pop	{r4, pc}
    a468:	200071dd 	.word	0x200071dd
    a46c:	00022d91 	.word	0x00022d91
    a470:	000221f8 	.word	0x000221f8

0000a474 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    a474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a478:	4d2e      	ldr	r5, [pc, #184]	; (a534 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
    a47a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a47c:	4606      	mov	r6, r0
    a47e:	f04f 0800 	mov.w	r8, #0
    a482:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    a484:	4f2c      	ldr	r7, [pc, #176]	; (a538 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a486:	45d0      	cmp	r8, sl
    a488:	db02      	blt.n	a490 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    a48a:	b003      	add	sp, #12
    a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    a490:	f8d6 9004 	ldr.w	r9, [r6, #4]
    a494:	f1b9 0f00 	cmp.w	r9, #0
    a498:	d047      	beq.n	a52a <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    a49a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a49c:	4608      	mov	r0, r1
    a49e:	9101      	str	r1, [sp, #4]
    a4a0:	f011 fdb3 	bl	1c00a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a4a4:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    a4a6:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    a4a8:	eb09 0001 	add.w	r0, r9, r1
    a4ac:	3801      	subs	r0, #1
    a4ae:	f011 fdac 	bl	1c00a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    a4b2:	4284      	cmp	r4, r0
    a4b4:	f04f 0214 	mov.w	r2, #20
    a4b8:	4b20      	ldr	r3, [pc, #128]	; (a53c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    a4ba:	d010      	beq.n	a4de <arm_core_mpu_mark_areas_for_dynamic_regions+0x6a>
		dyn_reg_info[i].index =
    a4bc:	fb02 f308 	mul.w	r3, r2, r8
    a4c0:	f06f 0215 	mvn.w	r2, #21
    a4c4:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    a4c8:	491d      	ldr	r1, [pc, #116]	; (a540 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    a4ca:	481e      	ldr	r0, [pc, #120]	; (a544 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    a4cc:	f44f 7295 	mov.w	r2, #298	; 0x12a
    a4d0:	f010 ff1e 	bl	1b310 <assert_print>
    a4d4:	f44f 7195 	mov.w	r1, #298	; 0x12a
    a4d8:	4819      	ldr	r0, [pc, #100]	; (a540 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    a4da:	f010 ff12 	bl	1b302 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    a4de:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    a4e2:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    a4e4:	d0f0      	beq.n	a4c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    a4e6:	7819      	ldrb	r1, [r3, #0]
    a4e8:	42a1      	cmp	r1, r4
    a4ea:	dded      	ble.n	a4c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
    a4ec:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    a4f0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    a4f4:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    a4f8:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    a4fc:	f100 0108 	add.w	r1, r0, #8
    a500:	7b00      	ldrb	r0, [r0, #12]
    a502:	f364 0004 	bfi	r0, r4, #0, #5
    a506:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    a508:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    a50c:	790c      	ldrb	r4, [r1, #4]
    a50e:	0840      	lsrs	r0, r0, #1
    a510:	f360 1447 	bfi	r4, r0, #5, #3
    a514:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    a516:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    a51a:	f021 011f 	bic.w	r1, r1, #31
    a51e:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    a520:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    a524:	f021 011f 	bic.w	r1, r1, #31
    a528:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    a52a:	f108 0801 	add.w	r8, r8, #1
    a52e:	3514      	adds	r5, #20
    a530:	360c      	adds	r6, #12
    a532:	e7a8      	b.n	a486 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    a534:	20006940 	.word	0x20006940
    a538:	e000ed00 	.word	0xe000ed00
    a53c:	200071dd 	.word	0x200071dd
    a540:	00022d91 	.word	0x00022d91
    a544:	000221f8 	.word	0x000221f8

0000a548 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    a548:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    a54a:	4d1a      	ldr	r5, [pc, #104]	; (a5b4 <z_arm_mpu_init+0x6c>)
    a54c:	682c      	ldr	r4, [r5, #0]
    a54e:	2c08      	cmp	r4, #8
    a550:	d90a      	bls.n	a568 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    a552:	4919      	ldr	r1, [pc, #100]	; (a5b8 <z_arm_mpu_init+0x70>)
    a554:	f240 1251 	movw	r2, #337	; 0x151
    a558:	4818      	ldr	r0, [pc, #96]	; (a5bc <z_arm_mpu_init+0x74>)
    a55a:	f010 fed9 	bl	1b310 <assert_print>
    a55e:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    a562:	4815      	ldr	r0, [pc, #84]	; (a5b8 <z_arm_mpu_init+0x70>)
    a564:	f010 fecd 	bl	1b302 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a568:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    a56a:	f7ff ff5f 	bl	a42c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    a56e:	4b14      	ldr	r3, [pc, #80]	; (a5c0 <z_arm_mpu_init+0x78>)
    a570:	4a14      	ldr	r2, [pc, #80]	; (a5c4 <z_arm_mpu_init+0x7c>)
    a572:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a576:	4284      	cmp	r4, r0
    a578:	d113      	bne.n	a5a2 <z_arm_mpu_init+0x5a>
	static_regions_num = mpu_config.num_regions;
    a57a:	4b13      	ldr	r3, [pc, #76]	; (a5c8 <z_arm_mpu_init+0x80>)
    a57c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    a57e:	f7ff ff49 	bl	a414 <arm_core_mpu_enable>
	__ASSERT(
    a582:	4b0f      	ldr	r3, [pc, #60]	; (a5c0 <z_arm_mpu_init+0x78>)
    a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a588:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a58c:	2b08      	cmp	r3, #8
    a58e:	d00f      	beq.n	a5b0 <z_arm_mpu_init+0x68>
    a590:	4909      	ldr	r1, [pc, #36]	; (a5b8 <z_arm_mpu_init+0x70>)
    a592:	f240 12bb 	movw	r2, #443	; 0x1bb
    a596:	4809      	ldr	r0, [pc, #36]	; (a5bc <z_arm_mpu_init+0x74>)
    a598:	f010 feba 	bl	1b310 <assert_print>
    a59c:	f240 11bb 	movw	r1, #443	; 0x1bb
    a5a0:	e7df      	b.n	a562 <z_arm_mpu_init+0x1a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    a5a2:	6869      	ldr	r1, [r5, #4]
    a5a4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    a5a8:	f7ff fe3a 	bl	a220 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    a5ac:	3001      	adds	r0, #1
    a5ae:	e7e2      	b.n	a576 <z_arm_mpu_init+0x2e>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    a5b0:	2000      	movs	r0, #0
    a5b2:	bd38      	pop	{r3, r4, r5, pc}
    a5b4:	0001ff54 	.word	0x0001ff54
    a5b8:	00022d91 	.word	0x00022d91
    a5bc:	000221f8 	.word	0x000221f8
    a5c0:	e000ed00 	.word	0xe000ed00
    a5c4:	0044ffaa 	.word	0x0044ffaa
    a5c8:	200071dd 	.word	0x200071dd

0000a5cc <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    a5cc:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    a5ce:	4b09      	ldr	r3, [pc, #36]	; (a5f4 <malloc_prepare+0x28>)
    a5d0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    a5d4:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
    a5d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a5dc:	d208      	bcs.n	a5f0 <malloc_prepare+0x24>
    a5de:	4906      	ldr	r1, [pc, #24]	; (a5f8 <malloc_prepare+0x2c>)
    a5e0:	4806      	ldr	r0, [pc, #24]	; (a5fc <malloc_prepare+0x30>)
    a5e2:	2281      	movs	r2, #129	; 0x81
    a5e4:	f010 fe94 	bl	1b310 <assert_print>
    a5e8:	2181      	movs	r1, #129	; 0x81
    a5ea:	4803      	ldr	r0, [pc, #12]	; (a5f8 <malloc_prepare+0x2c>)
    a5ec:	f010 fe89 	bl	1b302 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    a5f0:	2000      	movs	r0, #0
    a5f2:	bd08      	pop	{r3, pc}
    a5f4:	2000dde8 	.word	0x2000dde8
    a5f8:	00022dc8 	.word	0x00022dc8
    a5fc:	000221f8 	.word	0x000221f8

0000a600 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    a600:	4b01      	ldr	r3, [pc, #4]	; (a608 <__stdout_hook_install+0x8>)
    a602:	6018      	str	r0, [r3, #0]
}
    a604:	4770      	bx	lr
    a606:	bf00      	nop
    a608:	2000031c 	.word	0x2000031c

0000a60c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    a60c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    a60e:	4c07      	ldr	r4, [pc, #28]	; (a62c <_sbrk+0x20>)
    a610:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    a612:	18c2      	adds	r2, r0, r3
    a614:	4806      	ldr	r0, [pc, #24]	; (a630 <_sbrk+0x24>)
    a616:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    a61a:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
    a61e:	428a      	cmp	r2, r1
		heap_sz += count;
    a620:	bf36      	itet	cc
    a622:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    a624:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    a628:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    a62a:	bd10      	pop	{r4, pc}
    a62c:	20006954 	.word	0x20006954
    a630:	2000dde8 	.word	0x2000dde8

0000a634 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    a634:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    a636:	b950      	cbnz	r0, a64e <__retarget_lock_acquire_recursive+0x1a>
    a638:	4909      	ldr	r1, [pc, #36]	; (a660 <__retarget_lock_acquire_recursive+0x2c>)
    a63a:	480a      	ldr	r0, [pc, #40]	; (a664 <__retarget_lock_acquire_recursive+0x30>)
    a63c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
    a640:	f010 fe66 	bl	1b310 <assert_print>
    a644:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    a648:	4805      	ldr	r0, [pc, #20]	; (a660 <__retarget_lock_acquire_recursive+0x2c>)
    a64a:	f010 fe5a 	bl	1b302 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    a64e:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    a652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a656:	f04f 33ff 	mov.w	r3, #4294967295
    a65a:	f00b bfbb 	b.w	165d4 <z_impl_k_mutex_lock>
    a65e:	bf00      	nop
    a660:	00022dc8 	.word	0x00022dc8
    a664:	000221f8 	.word	0x000221f8

0000a668 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    a668:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
    a66a:	b950      	cbnz	r0, a682 <__retarget_lock_release_recursive+0x1a>
    a66c:	4907      	ldr	r1, [pc, #28]	; (a68c <__retarget_lock_release_recursive+0x24>)
    a66e:	4808      	ldr	r0, [pc, #32]	; (a690 <__retarget_lock_release_recursive+0x28>)
    a670:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    a674:	f010 fe4c 	bl	1b310 <assert_print>
    a678:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    a67c:	4803      	ldr	r0, [pc, #12]	; (a68c <__retarget_lock_release_recursive+0x24>)
    a67e:	f010 fe40 	bl	1b302 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
    a682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    a686:	f00c b85b 	b.w	16740 <z_impl_k_mutex_unlock>
    a68a:	bf00      	nop
    a68c:	00022dc8 	.word	0x00022dc8
    a690:	000221f8 	.word	0x000221f8

0000a694 <remoteproc_mgr_boot>:

#if !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	/* Retain nRF5340 Network MCU in Secure domain (bus
	 * accesses by Network MCU will have Secure attribute set).
	 */
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    a694:	2210      	movs	r2, #16
    a696:	4b04      	ldr	r3, [pc, #16]	; (a6a8 <remoteproc_mgr_boot+0x14>)
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    a698:	2000      	movs	r0, #0
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    a69a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    a69e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    a6a2:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    a6a6:	4770      	bx	lr
    a6a8:	50003000 	.word	0x50003000

0000a6ac <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    a6ac:	4b0e      	ldr	r3, [pc, #56]	; (a6e8 <bt_hex+0x3c>)
    a6ae:	2940      	cmp	r1, #64	; 0x40
    a6b0:	bf28      	it	cs
    a6b2:	2140      	movcs	r1, #64	; 0x40
{
    a6b4:	b570      	push	{r4, r5, r6, lr}
    a6b6:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    a6b8:	4c0c      	ldr	r4, [pc, #48]	; (a6ec <bt_hex+0x40>)
    a6ba:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    a6bc:	42b0      	cmp	r0, r6
    a6be:	f103 0302 	add.w	r3, r3, #2
    a6c2:	d104      	bne.n	a6ce <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    a6c4:	2300      	movs	r3, #0
    a6c6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    a6ca:	4807      	ldr	r0, [pc, #28]	; (a6e8 <bt_hex+0x3c>)
    a6cc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    a6ce:	7802      	ldrb	r2, [r0, #0]
    a6d0:	0912      	lsrs	r2, r2, #4
    a6d2:	5ca2      	ldrb	r2, [r4, r2]
    a6d4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    a6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    a6dc:	f002 020f 	and.w	r2, r2, #15
    a6e0:	5ca2      	ldrb	r2, [r4, r2]
    a6e2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    a6e6:	e7e9      	b.n	a6bc <bt_hex+0x10>
    a6e8:	200071fc 	.word	0x200071fc
    a6ec:	00022e3a 	.word	0x00022e3a

0000a6f0 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    a6f0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    a6f2:	7803      	ldrb	r3, [r0, #0]
    a6f4:	b08b      	sub	sp, #44	; 0x2c
    a6f6:	4604      	mov	r4, r0
    a6f8:	ad07      	add	r5, sp, #28
    a6fa:	2b03      	cmp	r3, #3
    a6fc:	d821      	bhi.n	a742 <bt_addr_le_str+0x52>
    a6fe:	e8df f003 	tbb	[pc, r3]
    a702:	1a02      	.short	0x1a02
    a704:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    a706:	4912      	ldr	r1, [pc, #72]	; (a750 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
    a708:	4628      	mov	r0, r5
    a70a:	f014 fe8a 	bl	1f422 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a70e:	9505      	str	r5, [sp, #20]
    a710:	7863      	ldrb	r3, [r4, #1]
    a712:	211e      	movs	r1, #30
    a714:	9304      	str	r3, [sp, #16]
    a716:	78a3      	ldrb	r3, [r4, #2]
    a718:	4a0e      	ldr	r2, [pc, #56]	; (a754 <bt_addr_le_str+0x64>)
    a71a:	9303      	str	r3, [sp, #12]
    a71c:	78e3      	ldrb	r3, [r4, #3]
    a71e:	480e      	ldr	r0, [pc, #56]	; (a758 <bt_addr_le_str+0x68>)
    a720:	9302      	str	r3, [sp, #8]
    a722:	7923      	ldrb	r3, [r4, #4]
    a724:	9301      	str	r3, [sp, #4]
    a726:	7963      	ldrb	r3, [r4, #5]
    a728:	9300      	str	r3, [sp, #0]
    a72a:	79a3      	ldrb	r3, [r4, #6]
    a72c:	f010 fb52 	bl	1add4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    a730:	4809      	ldr	r0, [pc, #36]	; (a758 <bt_addr_le_str+0x68>)
    a732:	b00b      	add	sp, #44	; 0x2c
    a734:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    a736:	4909      	ldr	r1, [pc, #36]	; (a75c <bt_addr_le_str+0x6c>)
    a738:	e7e6      	b.n	a708 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    a73a:	4909      	ldr	r1, [pc, #36]	; (a760 <bt_addr_le_str+0x70>)
    a73c:	e7e4      	b.n	a708 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    a73e:	4909      	ldr	r1, [pc, #36]	; (a764 <bt_addr_le_str+0x74>)
    a740:	e7e2      	b.n	a708 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a742:	210a      	movs	r1, #10
    a744:	4628      	mov	r0, r5
    a746:	4a08      	ldr	r2, [pc, #32]	; (a768 <bt_addr_le_str+0x78>)
    a748:	f010 fb44 	bl	1add4 <snprintk>
		break;
    a74c:	e7df      	b.n	a70e <bt_addr_le_str+0x1e>
    a74e:	bf00      	nop
    a750:	00021fce 	.word	0x00021fce
    a754:	00021ff7 	.word	0x00021ff7
    a758:	200071de 	.word	0x200071de
    a75c:	00021fd5 	.word	0x00021fd5
    a760:	00021fdc 	.word	0x00021fdc
    a764:	00021fe6 	.word	0x00021fe6
    a768:	00021ff0 	.word	0x00021ff0

0000a76c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    a76c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    a76e:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    a770:	4d09      	ldr	r5, [pc, #36]	; (a798 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    a772:	4b0a      	ldr	r3, [pc, #40]	; (a79c <long_wq_init+0x30>)
{
    a774:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    a776:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    a778:	9302      	str	r3, [sp, #8]
    a77a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    a77c:	f00c fc30 	bl	16fe0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    a780:	ab02      	add	r3, sp, #8
    a782:	4628      	mov	r0, r5
    a784:	9300      	str	r3, [sp, #0]
    a786:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    a78a:	230a      	movs	r3, #10
    a78c:	4904      	ldr	r1, [pc, #16]	; (a7a0 <long_wq_init+0x34>)
    a78e:	f00c fc3d 	bl	1700c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    a792:	4620      	mov	r0, r4
    a794:	b005      	add	sp, #20
    a796:	bd30      	pop	{r4, r5, pc}
    a798:	200058a8 	.word	0x200058a8
    a79c:	00022e4b 	.word	0x00022e4b
    a7a0:	200080f8 	.word	0x200080f8

0000a7a4 <bt_long_wq_schedule>:
{
    a7a4:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    a7a6:	4801      	ldr	r0, [pc, #4]	; (a7ac <bt_long_wq_schedule+0x8>)
    a7a8:	f00c bd2c 	b.w	17204 <k_work_schedule_for_queue>
    a7ac:	200058a8 	.word	0x200058a8

0000a7b0 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
    a7b0:	7803      	ldrb	r3, [r0, #0]
{
    a7b2:	b530      	push	{r4, r5, lr}
	switch (src->type) {
    a7b4:	2b01      	cmp	r3, #1
    a7b6:	d013      	beq.n	a7e0 <uuid_to_uuid128+0x30>
    a7b8:	2b02      	cmp	r3, #2
    a7ba:	d027      	beq.n	a80c <uuid_to_uuid128+0x5c>
    a7bc:	b97b      	cbnz	r3, a7de <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    a7be:	460a      	mov	r2, r1
    a7c0:	4b18      	ldr	r3, [pc, #96]	; (a824 <uuid_to_uuid128+0x74>)
    a7c2:	f103 0410 	add.w	r4, r3, #16
    a7c6:	f853 5b04 	ldr.w	r5, [r3], #4
    a7ca:	42a3      	cmp	r3, r4
    a7cc:	f842 5b04 	str.w	r5, [r2], #4
    a7d0:	d1f9      	bne.n	a7c6 <uuid_to_uuid128+0x16>
    a7d2:	781b      	ldrb	r3, [r3, #0]
    a7d4:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    a7d6:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    a7d8:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    a7da:	0a1b      	lsrs	r3, r3, #8
    a7dc:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    a7de:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
    a7e0:	460a      	mov	r2, r1
    a7e2:	4b10      	ldr	r3, [pc, #64]	; (a824 <uuid_to_uuid128+0x74>)
    a7e4:	f103 0410 	add.w	r4, r3, #16
    a7e8:	f853 5b04 	ldr.w	r5, [r3], #4
    a7ec:	42a3      	cmp	r3, r4
    a7ee:	f842 5b04 	str.w	r5, [r2], #4
    a7f2:	d1f9      	bne.n	a7e8 <uuid_to_uuid128+0x38>
    a7f4:	781b      	ldrb	r3, [r3, #0]
    a7f6:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    a7f8:	6843      	ldr	r3, [r0, #4]
    a7fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    a7fe:	734b      	strb	r3, [r1, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    a800:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    a802:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
    a804:	0a1b      	lsrs	r3, r3, #8
    a806:	738a      	strb	r2, [r1, #14]
    a808:	740b      	strb	r3, [r1, #16]
}
    a80a:	e7e8      	b.n	a7de <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a80c:	f100 0310 	add.w	r3, r0, #16
    a810:	f850 2b04 	ldr.w	r2, [r0], #4
    a814:	4298      	cmp	r0, r3
    a816:	f841 2b04 	str.w	r2, [r1], #4
    a81a:	d1f9      	bne.n	a810 <uuid_to_uuid128+0x60>
    a81c:	7803      	ldrb	r3, [r0, #0]
    a81e:	700b      	strb	r3, [r1, #0]
    a820:	e7dd      	b.n	a7de <uuid_to_uuid128+0x2e>
    a822:	bf00      	nop
    a824:	00022e54 	.word	0x00022e54

0000a828 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    a828:	b538      	push	{r3, r4, r5, lr}
    a82a:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    a82c:	2d01      	cmp	r5, #1
{
    a82e:	4610      	mov	r0, r2
    a830:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    a832:	d00c      	beq.n	a84e <bt_buf_get_rx+0x26>
    a834:	2d03      	cmp	r5, #3
    a836:	d016      	beq.n	a866 <bt_buf_get_rx+0x3e>
    a838:	2d05      	cmp	r5, #5
    a83a:	d014      	beq.n	a866 <bt_buf_get_rx+0x3e>
    a83c:	490c      	ldr	r1, [pc, #48]	; (a870 <bt_buf_get_rx+0x48>)
    a83e:	480d      	ldr	r0, [pc, #52]	; (a874 <bt_buf_get_rx+0x4c>)
    a840:	223d      	movs	r2, #61	; 0x3d
    a842:	f010 fd65 	bl	1b310 <assert_print>
    a846:	213d      	movs	r1, #61	; 0x3d
    a848:	4809      	ldr	r0, [pc, #36]	; (a870 <bt_buf_get_rx+0x48>)
    a84a:	f010 fd5a 	bl	1b302 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    a84e:	480a      	ldr	r0, [pc, #40]	; (a878 <bt_buf_get_rx+0x50>)
    a850:	f012 fe71 	bl	1d536 <net_buf_alloc_fixed>
    a854:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    a856:	b120      	cbz	r0, a862 <bt_buf_get_rx+0x3a>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    a858:	2101      	movs	r1, #1
    a85a:	300c      	adds	r0, #12
    a85c:	f006 f9f8 	bl	10c50 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a860:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    a862:	4620      	mov	r0, r4
    a864:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    a866:	4602      	mov	r2, r0
    a868:	460b      	mov	r3, r1
    a86a:	4804      	ldr	r0, [pc, #16]	; (a87c <bt_buf_get_rx+0x54>)
    a86c:	e7f0      	b.n	a850 <bt_buf_get_rx+0x28>
    a86e:	bf00      	nop
    a870:	00022e65 	.word	0x00022e65
    a874:	000221f8 	.word	0x000221f8
    a878:	200009ac 	.word	0x200009ac
    a87c:	20000910 	.word	0x20000910

0000a880 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    a880:	b510      	push	{r4, lr}
    a882:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    a884:	490a      	ldr	r1, [pc, #40]	; (a8b0 <bt_buf_get_cmd_complete+0x30>)
{
    a886:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    a888:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
    a88c:	b920      	cbnz	r0, a898 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    a88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a892:	2001      	movs	r0, #1
    a894:	f7ff bfc8 	b.w	a828 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    a898:	f006 faf4 	bl	10e84 <net_buf_ref>
    a89c:	2101      	movs	r1, #1
		buf->len = 0U;
    a89e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
    a8a0:	4604      	mov	r4, r0
    a8a2:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
    a8a4:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
    a8a6:	300c      	adds	r0, #12
    a8a8:	f006 f9d2 	bl	10c50 <net_buf_simple_reserve>
}
    a8ac:	4620      	mov	r0, r4
    a8ae:	bd10      	pop	{r4, pc}
    a8b0:	20000008 	.word	0x20000008

0000a8b4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    a8b4:	b570      	push	{r4, r5, r6, lr}
    a8b6:	4604      	mov	r4, r0
	switch (evt) {
    a8b8:	2c0f      	cmp	r4, #15
{
    a8ba:	460d      	mov	r5, r1
    a8bc:	4610      	mov	r0, r2
    a8be:	4619      	mov	r1, r3
	switch (evt) {
    a8c0:	d805      	bhi.n	a8ce <bt_buf_get_evt+0x1a>
    a8c2:	2c0d      	cmp	r4, #13
    a8c4:	d90d      	bls.n	a8e2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    a8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    a8ca:	f7ff bfd9 	b.w	a880 <bt_buf_get_cmd_complete>
	switch (evt) {
    a8ce:	2c13      	cmp	r4, #19
    a8d0:	d107      	bne.n	a8e2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    a8d2:	480c      	ldr	r0, [pc, #48]	; (a904 <bt_buf_get_evt+0x50>)
    a8d4:	f012 fe2f 	bl	1d536 <net_buf_alloc_fixed>
			if (buf) {
    a8d8:	4604      	mov	r4, r0
    a8da:	b938      	cbnz	r0, a8ec <bt_buf_get_evt+0x38>
{
    a8dc:	2400      	movs	r4, #0
}
    a8de:	4620      	mov	r0, r4
    a8e0:	bd70      	pop	{r4, r5, r6, pc}
    a8e2:	4602      	mov	r2, r0
    a8e4:	460b      	mov	r3, r1
		if (discardable) {
    a8e6:	b145      	cbz	r5, a8fa <bt_buf_get_evt+0x46>
    a8e8:	4807      	ldr	r0, [pc, #28]	; (a908 <bt_buf_get_evt+0x54>)
    a8ea:	e7f3      	b.n	a8d4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    a8ec:	2101      	movs	r1, #1
    a8ee:	300c      	adds	r0, #12
    a8f0:	f006 f9ae 	bl	10c50 <net_buf_simple_reserve>
    a8f4:	2301      	movs	r3, #1
    a8f6:	7623      	strb	r3, [r4, #24]
}
    a8f8:	e7f1      	b.n	a8de <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a8fa:	2001      	movs	r0, #1
}
    a8fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    a900:	f7ff bf92 	b.w	a828 <bt_buf_get_rx>
    a904:	20000a48 	.word	0x20000a48
    a908:	20000978 	.word	0x20000978

0000a90c <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    a90c:	b570      	push	{r4, r5, r6, lr}
    a90e:	4606      	mov	r6, r0
    a910:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    a912:	4d0a      	ldr	r5, [pc, #40]	; (a93c <ver_str+0x30>)
    a914:	ac01      	add	r4, sp, #4
    a916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a91a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a91c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a922:	682b      	ldr	r3, [r5, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    a924:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    a926:	6023      	str	r3, [r4, #0]
		return str[ver];
    a928:	bf9d      	ittte	ls
    a92a:	ab0e      	addls	r3, sp, #56	; 0x38
    a92c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    a930:	f856 0c34 	ldrls.w	r0, [r6, #-52]
	}

	return "unknown";
    a934:	4802      	ldrhi	r0, [pc, #8]	; (a940 <ver_str+0x34>)
}
    a936:	b00e      	add	sp, #56	; 0x38
    a938:	bd70      	pop	{r4, r5, r6, pc}
    a93a:	bf00      	nop
    a93c:	0001fae4 	.word	0x0001fae4
    a940:	00022e94 	.word	0x00022e94

0000a944 <hci_data_buf_overflow>:
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    a944:	68c3      	ldr	r3, [r0, #12]
    a946:	2157      	movs	r1, #87	; 0x57
    a948:	781a      	ldrb	r2, [r3, #0]
    a94a:	4801      	ldr	r0, [pc, #4]	; (a950 <hci_data_buf_overflow+0xc>)
    a94c:	f010 bcf4 	b.w	1b338 <z_log_minimal_printk>
    a950:	00022e9c 	.word	0x00022e9c

0000a954 <hci_disconn_complete_prio>:
{
    a954:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    a956:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a958:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    a95c:	781b      	ldrb	r3, [r3, #0]
    a95e:	b963      	cbnz	r3, a97a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    a960:	4620      	mov	r0, r4
    a962:	f003 fa89 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    a966:	4605      	mov	r5, r0
    a968:	b940      	cbnz	r0, a97c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    a96a:	4b08      	ldr	r3, [pc, #32]	; (a98c <hci_disconn_complete_prio+0x38>)
    a96c:	881a      	ldrh	r2, [r3, #0]
    a96e:	b922      	cbnz	r2, a97a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    a970:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    a974:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    a978:	8018      	strh	r0, [r3, #0]
}
    a97a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    a97c:	2101      	movs	r1, #1
    a97e:	f003 fa83 	bl	de88 <bt_conn_set_state>
	bt_conn_unref(conn);
    a982:	4628      	mov	r0, r5
}
    a984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    a988:	f003 ba4e 	b.w	de28 <bt_conn_unref>
    a98c:	200071c0 	.word	0x200071c0

0000a990 <le_phy_update_complete>:
{
    a990:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a992:	68c3      	ldr	r3, [r0, #12]
    a994:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    a998:	4620      	mov	r0, r4
    a99a:	f003 fa6d 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    a99e:	b930      	cbnz	r0, a9ae <le_phy_update_complete+0x1e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    a9a0:	4622      	mov	r2, r4
}
    a9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    a9a6:	2145      	movs	r1, #69	; 0x45
    a9a8:	4803      	ldr	r0, [pc, #12]	; (a9b8 <le_phy_update_complete+0x28>)
    a9aa:	f010 bcc5 	b.w	1b338 <z_log_minimal_printk>
}
    a9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    a9b2:	f003 ba39 	b.w	de28 <bt_conn_unref>
    a9b6:	bf00      	nop
    a9b8:	00022ec9 	.word	0x00022ec9

0000a9bc <le_data_len_change>:
{
    a9bc:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a9be:	68c3      	ldr	r3, [r0, #12]
    a9c0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    a9c2:	4620      	mov	r0, r4
    a9c4:	f003 fa58 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    a9c8:	b930      	cbnz	r0, a9d8 <le_data_len_change+0x1c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    a9ca:	4622      	mov	r2, r4
}
    a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    a9d0:	2145      	movs	r1, #69	; 0x45
    a9d2:	4803      	ldr	r0, [pc, #12]	; (a9e0 <le_data_len_change+0x24>)
    a9d4:	f010 bcb0 	b.w	1b338 <z_log_minimal_printk>
}
    a9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    a9dc:	f003 ba24 	b.w	de28 <bt_conn_unref>
    a9e0:	00022ec9 	.word	0x00022ec9

0000a9e4 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    a9e4:	2101      	movs	r1, #1
{
    a9e6:	b508      	push	{r3, lr}
    a9e8:	300c      	adds	r0, #12
    a9ea:	f006 faf5 	bl	10fd8 <net_buf_simple_pull_mem>
}
    a9ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    a9f2:	7802      	ldrb	r2, [r0, #0]
    a9f4:	2145      	movs	r1, #69	; 0x45
    a9f6:	4801      	ldr	r0, [pc, #4]	; (a9fc <hci_hardware_error+0x18>)
    a9f8:	f010 bc9e 	b.w	1b338 <z_log_minimal_printk>
    a9fc:	00022ef2 	.word	0x00022ef2

0000aa00 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    aa00:	4601      	mov	r1, r0
    aa02:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    aa04:	4807      	ldr	r0, [pc, #28]	; (aa24 <rx_queue_put+0x24>)
    aa06:	f006 f943 	bl	10c90 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    aa0a:	4907      	ldr	r1, [pc, #28]	; (aa28 <rx_queue_put+0x28>)
    aa0c:	4807      	ldr	r0, [pc, #28]	; (aa2c <rx_queue_put+0x2c>)
    aa0e:	f014 fb7e 	bl	1f10e <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    aa12:	1e02      	subs	r2, r0, #0
    aa14:	da05      	bge.n	aa22 <rx_queue_put+0x22>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
    aa16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Could not submit rx_work: %d", err);
    aa1a:	2145      	movs	r1, #69	; 0x45
    aa1c:	4804      	ldr	r0, [pc, #16]	; (aa30 <rx_queue_put+0x30>)
    aa1e:	f010 bc8b 	b.w	1b338 <z_log_minimal_printk>
}
    aa22:	bd08      	pop	{r3, pc}
    aa24:	200000fc 	.word	0x200000fc
    aa28:	2000035c 	.word	0x2000035c
    aa2c:	20005a78 	.word	0x20005a78
    aa30:	00022f19 	.word	0x00022f19

0000aa34 <handle_event>:
{
    aa34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aa36:	4605      	mov	r5, r0
    aa38:	4614      	mov	r4, r2
    aa3a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    aa3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    aa40:	429c      	cmp	r4, r3
    aa42:	d10d      	bne.n	aa60 <handle_event+0x2c>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    aa44:	8a04      	ldrh	r4, [r0, #16]
    aa46:	68c0      	ldr	r0, [r0, #12]
    aa48:	4621      	mov	r1, r4
    aa4a:	f7ff fe2f 	bl	a6ac <bt_hex>
    aa4e:	4623      	mov	r3, r4
    aa50:	9000      	str	r0, [sp, #0]
    aa52:	462a      	mov	r2, r5
    aa54:	2157      	movs	r1, #87	; 0x57
    aa56:	480e      	ldr	r0, [pc, #56]	; (aa90 <handle_event+0x5c>)
    aa58:	f010 fc6e 	bl	1b338 <z_log_minimal_printk>
}
    aa5c:	b003      	add	sp, #12
    aa5e:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
    aa60:	4622      	mov	r2, r4
    aa62:	f812 1b08 	ldrb.w	r1, [r2], #8
    aa66:	42a9      	cmp	r1, r5
    aa68:	d110      	bne.n	aa8c <handle_event+0x58>
		if (buf->len < handler->min_len) {
    aa6a:	8a02      	ldrh	r2, [r0, #16]
    aa6c:	7863      	ldrb	r3, [r4, #1]
    aa6e:	4293      	cmp	r3, r2
    aa70:	d907      	bls.n	aa82 <handle_event+0x4e>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    aa72:	462b      	mov	r3, r5
    aa74:	2145      	movs	r1, #69	; 0x45
    aa76:	4807      	ldr	r0, [pc, #28]	; (aa94 <handle_event+0x60>)
}
    aa78:	b003      	add	sp, #12
    aa7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    aa7e:	f010 bc5b 	b.w	1b338 <z_log_minimal_printk>
		handler->handler(buf);
    aa82:	6863      	ldr	r3, [r4, #4]
}
    aa84:	b003      	add	sp, #12
    aa86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    aa8a:	4718      	bx	r3
    aa8c:	4614      	mov	r4, r2
    aa8e:	e7d7      	b.n	aa40 <handle_event+0xc>
    aa90:	00022f62 	.word	0x00022f62
    aa94:	00022f3b 	.word	0x00022f3b

0000aa98 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    aa98:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    aa9a:	4844      	ldr	r0, [pc, #272]	; (abac <rx_work_handler+0x114>)
    aa9c:	f006 f94a 	bl	10d34 <net_buf_slist_get>
	if (!buf) {
    aaa0:	4604      	mov	r4, r0
    aaa2:	2800      	cmp	r0, #0
    aaa4:	f000 8081 	beq.w	abaa <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    aaa8:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    aaaa:	2a01      	cmp	r2, #1
    aaac:	d04d      	beq.n	ab4a <rx_work_handler+0xb2>
    aaae:	2a03      	cmp	r2, #3
    aab0:	d178      	bne.n	aba4 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    aab2:	8a03      	ldrh	r3, [r0, #16]
    aab4:	2b03      	cmp	r3, #3
    aab6:	d80b      	bhi.n	aad0 <rx_work_handler+0x38>
    aab8:	f240 12ed 	movw	r2, #493	; 0x1ed
    aabc:	493c      	ldr	r1, [pc, #240]	; (abb0 <rx_work_handler+0x118>)
    aabe:	483d      	ldr	r0, [pc, #244]	; (abb4 <rx_work_handler+0x11c>)
    aac0:	f010 fc26 	bl	1b310 <assert_print>
    aac4:	4040      	eors	r0, r0
    aac6:	f380 8811 	msr	BASEPRI, r0
    aaca:	f04f 0003 	mov.w	r0, #3
    aace:	df02      	svc	2
    aad0:	2104      	movs	r1, #4
    aad2:	f104 000c 	add.w	r0, r4, #12
    aad6:	f006 fa7f 	bl	10fd8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    aada:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    aadc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    aade:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    aae0:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    aae2:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    aae4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    aae8:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    aaea:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
    aaec:	d007      	beq.n	aafe <rx_work_handler+0x66>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    aaee:	2145      	movs	r1, #69	; 0x45
    aaf0:	4831      	ldr	r0, [pc, #196]	; (abb8 <rx_work_handler+0x120>)
    aaf2:	f010 fc21 	bl	1b338 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    aaf6:	4620      	mov	r0, r4
    aaf8:	f006 f982 	bl	10e00 <net_buf_unref>
		break;
    aafc:	e014      	b.n	ab28 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    aafe:	f003 f9bb 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    ab02:	4605      	mov	r5, r0
    ab04:	b928      	cbnz	r0, ab12 <rx_work_handler+0x7a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ab06:	2145      	movs	r1, #69	; 0x45
    ab08:	8b62      	ldrh	r2, [r4, #26]
    ab0a:	482c      	ldr	r0, [pc, #176]	; (abbc <rx_work_handler+0x124>)
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ab0c:	f010 fc14 	bl	1b338 <z_log_minimal_printk>
    ab10:	e7f1      	b.n	aaf6 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
    ab12:	f003 fabf 	bl	e094 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ab16:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ab18:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    ab1a:	0b32      	lsrs	r2, r6, #12
    ab1c:	4628      	mov	r0, r5
    ab1e:	f003 f85f 	bl	dbe0 <bt_conn_recv>
	bt_conn_unref(conn);
    ab22:	4628      	mov	r0, r5
    ab24:	f003 f980 	bl	de28 <bt_conn_unref>
	return list->head;
    ab28:	4b25      	ldr	r3, [pc, #148]	; (abc0 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    ab2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d03b      	beq.n	abaa <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    ab32:	4924      	ldr	r1, [pc, #144]	; (abc4 <rx_work_handler+0x12c>)
    ab34:	4824      	ldr	r0, [pc, #144]	; (abc8 <rx_work_handler+0x130>)
    ab36:	f014 faea 	bl	1f10e <k_work_submit_to_queue>
#endif
		if (err < 0) {
    ab3a:	1e02      	subs	r2, r0, #0
    ab3c:	da35      	bge.n	abaa <rx_work_handler+0x112>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    ab3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Could not submit rx_work: %d", err);
    ab42:	2145      	movs	r1, #69	; 0x45
    ab44:	4821      	ldr	r0, [pc, #132]	; (abcc <rx_work_handler+0x134>)
    ab46:	f010 bbf7 	b.w	1b338 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ab4a:	8a03      	ldrh	r3, [r0, #16]
    ab4c:	2b01      	cmp	r3, #1
    ab4e:	d80b      	bhi.n	ab68 <rx_work_handler+0xd0>
    ab50:	f640 126d 	movw	r2, #2413	; 0x96d
    ab54:	4916      	ldr	r1, [pc, #88]	; (abb0 <rx_work_handler+0x118>)
    ab56:	4817      	ldr	r0, [pc, #92]	; (abb4 <rx_work_handler+0x11c>)
    ab58:	f010 fbda 	bl	1b310 <assert_print>
    ab5c:	4040      	eors	r0, r0
    ab5e:	f380 8811 	msr	BASEPRI, r0
    ab62:	f04f 0003 	mov.w	r0, #3
    ab66:	df02      	svc	2
    ab68:	2102      	movs	r1, #2
    ab6a:	f104 000c 	add.w	r0, r4, #12
    ab6e:	f006 fa33 	bl	10fd8 <net_buf_simple_pull_mem>
    ab72:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ab74:	7800      	ldrb	r0, [r0, #0]
    ab76:	f011 fab2 	bl	1c0de <bt_hci_evt_get_flags>
    ab7a:	0783      	lsls	r3, r0, #30
    ab7c:	d40b      	bmi.n	ab96 <rx_work_handler+0xfe>
    ab7e:	f640 1271 	movw	r2, #2417	; 0x971
    ab82:	490b      	ldr	r1, [pc, #44]	; (abb0 <rx_work_handler+0x118>)
    ab84:	480b      	ldr	r0, [pc, #44]	; (abb4 <rx_work_handler+0x11c>)
    ab86:	f010 fbc3 	bl	1b310 <assert_print>
    ab8a:	4040      	eors	r0, r0
    ab8c:	f380 8811 	msr	BASEPRI, r0
    ab90:	f04f 0003 	mov.w	r0, #3
    ab94:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ab96:	2304      	movs	r3, #4
    ab98:	4621      	mov	r1, r4
    ab9a:	4a0d      	ldr	r2, [pc, #52]	; (abd0 <rx_work_handler+0x138>)
    ab9c:	7828      	ldrb	r0, [r5, #0]
    ab9e:	f7ff ff49 	bl	aa34 <handle_event>
	net_buf_unref(buf);
    aba2:	e7a8      	b.n	aaf6 <rx_work_handler+0x5e>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    aba4:	2145      	movs	r1, #69	; 0x45
    aba6:	480b      	ldr	r0, [pc, #44]	; (abd4 <rx_work_handler+0x13c>)
    aba8:	e7b0      	b.n	ab0c <rx_work_handler+0x74>
}
    abaa:	bd70      	pop	{r4, r5, r6, pc}
    abac:	200000fc 	.word	0x200000fc
    abb0:	00022f89 	.word	0x00022f89
    abb4:	000221f8 	.word	0x000221f8
    abb8:	00022fbd 	.word	0x00022fbd
    abbc:	00022fe6 	.word	0x00022fe6
    abc0:	20000008 	.word	0x20000008
    abc4:	2000035c 	.word	0x2000035c
    abc8:	20005a78 	.word	0x20005a78
    abcc:	00022f19 	.word	0x00022f19
    abd0:	00020014 	.word	0x00020014
    abd4:	0002300d 	.word	0x0002300d

0000abd8 <hci_le_meta_event>:
{
    abd8:	b510      	push	{r4, lr}
    abda:	2101      	movs	r1, #1
    abdc:	4604      	mov	r4, r0
    abde:	300c      	adds	r0, #12
    abe0:	f006 f9fa 	bl	10fd8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    abe4:	4621      	mov	r1, r4
}
    abe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    abea:	230c      	movs	r3, #12
    abec:	4a01      	ldr	r2, [pc, #4]	; (abf4 <hci_le_meta_event+0x1c>)
    abee:	7800      	ldrb	r0, [r0, #0]
    abf0:	f7ff bf20 	b.w	aa34 <handle_event>
    abf4:	00020034 	.word	0x00020034

0000abf8 <le_remote_feat_complete>:
{
    abf8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    abfa:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    abfc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ac00:	4630      	mov	r0, r6
    ac02:	f003 f939 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    ac06:	4604      	mov	r4, r0
    ac08:	b930      	cbnz	r0, ac18 <le_remote_feat_complete+0x20>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    ac0a:	4632      	mov	r2, r6
}
    ac0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    ac10:	2145      	movs	r1, #69	; 0x45
    ac12:	480b      	ldr	r0, [pc, #44]	; (ac40 <le_remote_feat_complete+0x48>)
    ac14:	f010 bb90 	b.w	1b338 <z_log_minimal_printk>
	if (!evt->status) {
    ac18:	782b      	ldrb	r3, [r5, #0]
    ac1a:	b93b      	cbnz	r3, ac2c <le_remote_feat_complete+0x34>
    ac1c:	f8d5 3003 	ldr.w	r3, [r5, #3]
    ac20:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
    ac24:	f8d5 3007 	ldr.w	r3, [r5, #7]
    ac28:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ac2c:	1d20      	adds	r0, r4, #4
    ac2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ac32:	f011 fa67 	bl	1c104 <atomic_or>
	bt_conn_unref(conn);
    ac36:	4620      	mov	r0, r4
}
    ac38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ac3c:	f003 b8f4 	b.w	de28 <bt_conn_unref>
    ac40:	00022ec9 	.word	0x00022ec9

0000ac44 <hci_cmd_done>:
{
    ac44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ac48:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ac4a:	7a90      	ldrb	r0, [r2, #10]
{
    ac4c:	460f      	mov	r7, r1
    ac4e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ac50:	f005 fef4 	bl	10a3c <net_buf_pool_get>
    ac54:	4d37      	ldr	r5, [pc, #220]	; (ad34 <hci_cmd_done+0xf0>)
    ac56:	4285      	cmp	r5, r0
    ac58:	d00e      	beq.n	ac78 <hci_cmd_done+0x34>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    ac5a:	7aa4      	ldrb	r4, [r4, #10]
    ac5c:	4620      	mov	r0, r4
    ac5e:	f005 feed 	bl	10a3c <net_buf_pool_get>
    ac62:	4623      	mov	r3, r4
    ac64:	e9cd 0500 	strd	r0, r5, [sp]
    ac68:	4632      	mov	r2, r6
    ac6a:	2157      	movs	r1, #87	; 0x57
    ac6c:	4832      	ldr	r0, [pc, #200]	; (ad38 <hci_cmd_done+0xf4>)
    ac6e:	f010 fb63 	bl	1b338 <z_log_minimal_printk>
}
    ac72:	b002      	add	sp, #8
    ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ac78:	4620      	mov	r0, r4
    ac7a:	f005 fee7 	bl	10a4c <net_buf_id>
    ac7e:	f04f 080c 	mov.w	r8, #12
    ac82:	4d2e      	ldr	r5, [pc, #184]	; (ad3c <hci_cmd_done+0xf8>)
    ac84:	fb08 5000 	mla	r0, r8, r0, r5
    ac88:	8843      	ldrh	r3, [r0, #2]
    ac8a:	42b3      	cmp	r3, r6
    ac8c:	d00d      	beq.n	acaa <hci_cmd_done+0x66>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    ac8e:	4620      	mov	r0, r4
    ac90:	f005 fedc 	bl	10a4c <net_buf_id>
    ac94:	4632      	mov	r2, r6
    ac96:	2157      	movs	r1, #87	; 0x57
    ac98:	fb08 5000 	mla	r0, r8, r0, r5
    ac9c:	8843      	ldrh	r3, [r0, #2]
    ac9e:	4828      	ldr	r0, [pc, #160]	; (ad40 <hci_cmd_done+0xfc>)
}
    aca0:	b002      	add	sp, #8
    aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    aca6:	f010 bb47 	b.w	1b338 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
    acaa:	4e26      	ldr	r6, [pc, #152]	; (ad44 <hci_cmd_done+0x100>)
    acac:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
    acb0:	b120      	cbz	r0, acbc <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
    acb2:	f006 f8a5 	bl	10e00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    acb6:	2300      	movs	r3, #0
    acb8:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
	if (cmd(buf)->state && !status) {
    acbc:	4620      	mov	r0, r4
    acbe:	f005 fec5 	bl	10a4c <net_buf_id>
    acc2:	260c      	movs	r6, #12
    acc4:	fb06 5000 	mla	r0, r6, r0, r5
    acc8:	6843      	ldr	r3, [r0, #4]
    acca:	b19b      	cbz	r3, acf4 <hci_cmd_done+0xb0>
    accc:	b997      	cbnz	r7, acf4 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    acce:	4620      	mov	r0, r4
    acd0:	f005 febc 	bl	10a4c <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    acd4:	2101      	movs	r1, #1
    acd6:	fb06 5000 	mla	r0, r6, r0, r5
    acda:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    acdc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    ace0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    ace2:	f003 061f 	and.w	r6, r3, #31
    ace6:	40b1      	lsls	r1, r6
	if (val) {
    ace8:	095b      	lsrs	r3, r3, #5
    acea:	b1e2      	cbz	r2, ad26 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    acec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    acf0:	f011 fa08 	bl	1c104 <atomic_or>
	if (cmd(buf)->sync) {
    acf4:	4620      	mov	r0, r4
    acf6:	f005 fea9 	bl	10a4c <net_buf_id>
    acfa:	260c      	movs	r6, #12
    acfc:	fb06 5000 	mla	r0, r6, r0, r5
    ad00:	6883      	ldr	r3, [r0, #8]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d0b5      	beq.n	ac72 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    ad06:	4620      	mov	r0, r4
    ad08:	f005 fea0 	bl	10a4c <net_buf_id>
    ad0c:	4370      	muls	r0, r6
    ad0e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ad10:	4620      	mov	r0, r4
    ad12:	f005 fe9b 	bl	10a4c <net_buf_id>
    ad16:	fb06 5500 	mla	r5, r6, r0, r5
    ad1a:	68a8      	ldr	r0, [r5, #8]
}
    ad1c:	b002      	add	sp, #8
    ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    ad22:	f00b be61 	b.w	169e8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad26:	43c9      	mvns	r1, r1
    ad28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    ad2c:	f011 fa01 	bl	1c132 <atomic_and.isra.0>
    ad30:	e7e0      	b.n	acf4 <hci_cmd_done+0xb0>
    ad32:	bf00      	nop
    ad34:	20000a14 	.word	0x20000a14
    ad38:	00023026 	.word	0x00023026
    ad3c:	20006958 	.word	0x20006958
    ad40:	00023060 	.word	0x00023060
    ad44:	20000008 	.word	0x20000008

0000ad48 <hci_cmd_status>:
{
    ad48:	b538      	push	{r3, r4, r5, lr}
    ad4a:	2104      	movs	r1, #4
    ad4c:	4604      	mov	r4, r0
    ad4e:	300c      	adds	r0, #12
    ad50:	f006 f942 	bl	10fd8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ad54:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ad56:	7801      	ldrb	r1, [r0, #0]
    ad58:	4622      	mov	r2, r4
    ad5a:	8840      	ldrh	r0, [r0, #2]
    ad5c:	f7ff ff72 	bl	ac44 <hci_cmd_done>
	if (ncmd) {
    ad60:	b125      	cbz	r5, ad6c <hci_cmd_status+0x24>
}
    ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ad66:	4802      	ldr	r0, [pc, #8]	; (ad70 <hci_cmd_status+0x28>)
    ad68:	f00b be3e 	b.w	169e8 <z_impl_k_sem_give>
    ad6c:	bd38      	pop	{r3, r4, r5, pc}
    ad6e:	bf00      	nop
    ad70:	200000e0 	.word	0x200000e0

0000ad74 <hci_cmd_complete>:
{
    ad74:	b538      	push	{r3, r4, r5, lr}
    ad76:	2103      	movs	r1, #3
    ad78:	4604      	mov	r4, r0
    ad7a:	300c      	adds	r0, #12
    ad7c:	f006 f92c 	bl	10fd8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ad80:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    ad82:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ad84:	4622      	mov	r2, r4
    ad86:	7819      	ldrb	r1, [r3, #0]
    ad88:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ad8c:	f7ff ff5a 	bl	ac44 <hci_cmd_done>
	if (ncmd) {
    ad90:	b125      	cbz	r5, ad9c <hci_cmd_complete+0x28>
}
    ad92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ad96:	4802      	ldr	r0, [pc, #8]	; (ada0 <hci_cmd_complete+0x2c>)
    ad98:	f00b be26 	b.w	169e8 <z_impl_k_sem_give>
    ad9c:	bd38      	pop	{r3, r4, r5, pc}
    ad9e:	bf00      	nop
    ada0:	200000e0 	.word	0x200000e0

0000ada4 <hci_num_completed_packets>:
{
    ada4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ada8:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    adaa:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    adac:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
    adae:	f8df 90d4 	ldr.w	r9, [pc, #212]	; ae84 <hci_num_completed_packets+0xe0>
	for (i = 0; i < evt->num_handles; i++) {
    adb2:	783b      	ldrb	r3, [r7, #0]
    adb4:	429d      	cmp	r5, r3
    adb6:	db01      	blt.n	adbc <hci_num_completed_packets+0x18>
}
    adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    adbc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    adc0:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    adc4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    adc8:	4650      	mov	r0, sl
    adca:	f003 f855 	bl	de78 <bt_conn_lookup_handle>
		if (!conn) {
    adce:	4604      	mov	r4, r0
    add0:	b1d0      	cbz	r0, ae08 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
    add2:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    add6:	b346      	cbz	r6, ae2a <hci_num_completed_packets+0x86>
	__asm__ volatile(
    add8:	f04f 0320 	mov.w	r3, #32
    addc:	f3ef 8211 	mrs	r2, BASEPRI
    ade0:	f383 8812 	msr	BASEPRI_MAX, r3
    ade4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ade8:	69e3      	ldr	r3, [r4, #28]
    adea:	b1a3      	cbz	r3, ae16 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    adec:	3b01      	subs	r3, #1
    adee:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    adf0:	f382 8811 	msr	BASEPRI, r2
    adf4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    adf8:	4620      	mov	r0, r4
    adfa:	f002 fe7f 	bl	dafc <bt_conn_get_pkts>
    adfe:	3e01      	subs	r6, #1
    ae00:	f00b fdf2 	bl	169e8 <z_impl_k_sem_give>
    ae04:	b2b6      	uxth	r6, r6
    ae06:	e7e6      	b.n	add6 <hci_num_completed_packets+0x32>
			LOG_ERR("No connection for handle %u", handle);
    ae08:	4652      	mov	r2, sl
    ae0a:	2145      	movs	r1, #69	; 0x45
    ae0c:	481c      	ldr	r0, [pc, #112]	; (ae80 <hci_num_completed_packets+0xdc>)
    ae0e:	f010 fa93 	bl	1b338 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
    ae12:	3501      	adds	r5, #1
    ae14:	e7cd      	b.n	adb2 <hci_num_completed_packets+0xe>
    ae16:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    ae18:	b95b      	cbnz	r3, ae32 <hci_num_completed_packets+0x8e>
    ae1a:	f382 8811 	msr	BASEPRI, r2
    ae1e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    ae22:	2145      	movs	r1, #69	; 0x45
    ae24:	4648      	mov	r0, r9
    ae26:	f010 fa87 	bl	1b338 <z_log_minimal_printk>
		bt_conn_unref(conn);
    ae2a:	4620      	mov	r0, r4
    ae2c:	f002 fffc 	bl	de28 <bt_conn_unref>
    ae30:	e7ef      	b.n	ae12 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ae32:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ae34:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ae36:	428b      	cmp	r3, r1
	list->head = node;
    ae38:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ae3a:	bf08      	it	eq
    ae3c:	61a0      	streq	r0, [r4, #24]
    ae3e:	f382 8811 	msr	BASEPRI, r2
    ae42:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    ae46:	f04f 0220 	mov.w	r2, #32
    ae4a:	f3ef 8111 	mrs	r1, BASEPRI
    ae4e:	f382 8812 	msr	BASEPRI_MAX, r2
    ae52:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    ae56:	68da      	ldr	r2, [r3, #12]
    ae58:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    ae5a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    ae5e:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
    ae62:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    ae64:	b94a      	cbnz	r2, ae7a <hci_num_completed_packets+0xd6>
	list->head = node;
    ae66:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ae6a:	f381 8811 	msr	BASEPRI, r1
    ae6e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    ae72:	4650      	mov	r0, sl
    ae74:	f00c f8ae 	bl	16fd4 <k_work_submit>
    ae78:	e7be      	b.n	adf8 <hci_num_completed_packets+0x54>
	parent->next = child;
    ae7a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ae7c:	6263      	str	r3, [r4, #36]	; 0x24
}
    ae7e:	e7f4      	b.n	ae6a <hci_num_completed_packets+0xc6>
    ae80:	00023098 	.word	0x00023098
    ae84:	000230b9 	.word	0x000230b9

0000ae88 <hci_disconn_complete>:
{
    ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ae8a:	68c6      	ldr	r6, [r0, #12]
	if (evt->status) {
    ae8c:	7835      	ldrb	r5, [r6, #0]
    ae8e:	bb3d      	cbnz	r5, aee0 <hci_disconn_complete+0x58>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ae90:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    ae94:	4638      	mov	r0, r7
    ae96:	f002 ffef 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    ae9a:	4604      	mov	r4, r0
    ae9c:	b930      	cbnz	r0, aeac <hci_disconn_complete+0x24>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    ae9e:	463a      	mov	r2, r7
}
    aea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
    aea4:	2145      	movs	r1, #69	; 0x45
    aea6:	480f      	ldr	r0, [pc, #60]	; (aee4 <hci_disconn_complete+0x5c>)
    aea8:	f010 ba46 	b.w	1b338 <z_log_minimal_printk>
	conn->err = evt->reason;
    aeac:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aeae:	4629      	mov	r1, r5
	conn->err = evt->reason;
    aeb0:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aeb2:	f002 ffe9 	bl	de88 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    aeb6:	78a3      	ldrb	r3, [r4, #2]
    aeb8:	2b01      	cmp	r3, #1
    aeba:	d004      	beq.n	aec6 <hci_disconn_complete+0x3e>
	bt_conn_unref(conn);
    aebc:	4620      	mov	r0, r4
}
    aebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    aec2:	f002 bfb1 	b.w	de28 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aec6:	1d23      	adds	r3, r4, #4
    aec8:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    aecc:	07db      	lsls	r3, r3, #31
    aece:	d5f5      	bpl.n	aebc <hci_disconn_complete+0x34>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
    aed0:	4620      	mov	r0, r4
    aed2:	2102      	movs	r1, #2
    aed4:	f002 ffd8 	bl	de88 <bt_conn_set_state>
		bt_le_scan_update(false);
    aed8:	4628      	mov	r0, r5
    aeda:	f002 f9a5 	bl	d228 <bt_le_scan_update>
    aede:	e7ed      	b.n	aebc <hci_disconn_complete+0x34>
}
    aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aee2:	bf00      	nop
    aee4:	000230d5 	.word	0x000230d5

0000aee8 <le_conn_update_complete>:
{
    aee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    aeea:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
    aeec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    aef0:	4630      	mov	r0, r6
    aef2:	f002 ffc1 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    aef6:	4604      	mov	r4, r0
    aef8:	b938      	cbnz	r0, af0a <le_conn_update_complete+0x22>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    aefa:	4632      	mov	r2, r6
    aefc:	2145      	movs	r1, #69	; 0x45
    aefe:	4828      	ldr	r0, [pc, #160]	; (afa0 <le_conn_update_complete+0xb8>)
}
    af00:	b002      	add	sp, #8
    af02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    af06:	f010 ba17 	b.w	1b338 <z_log_minimal_printk>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    af0a:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
    af0c:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    af0e:	2b1a      	cmp	r3, #26
    af10:	d119      	bne.n	af46 <le_conn_update_complete+0x5e>
    af12:	78c3      	ldrb	r3, [r0, #3]
    af14:	2b01      	cmp	r3, #1
    af16:	d12a      	bne.n	af6e <le_conn_update_complete+0x86>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    af18:	f44f 6180 	mov.w	r1, #1024	; 0x400
    af1c:	4630      	mov	r0, r6
    af1e:	f011 f8f1 	bl	1c104 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    af22:	0542      	lsls	r2, r0, #21
    af24:	d40f      	bmi.n	af46 <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
    af26:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    af2a:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    af2c:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
    af2e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
    af32:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    af34:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    af36:	f003 fd81 	bl	ea3c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    af3a:	4620      	mov	r0, r4
}
    af3c:	b002      	add	sp, #8
    af3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    af42:	f002 bf71 	b.w	de28 <bt_conn_unref>
		if (!evt->status) {
    af46:	782b      	ldrb	r3, [r5, #0]
    af48:	b98b      	cbnz	r3, af6e <le_conn_update_complete+0x86>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    af4a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    af4e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    af52:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    af56:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    af5a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    af5e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    af62:	f46f 7180 	mvn.w	r1, #256	; 0x100
    af66:	4630      	mov	r0, r6
    af68:	f011 f8e3 	bl	1c132 <atomic_and.isra.0>
}
    af6c:	e014      	b.n	af98 <le_conn_update_complete+0xb0>
    af6e:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
    af72:	05db      	lsls	r3, r3, #23
    af74:	d5f5      	bpl.n	af62 <le_conn_update_complete+0x7a>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    af76:	782b      	ldrb	r3, [r5, #0]
    af78:	2b20      	cmp	r3, #32
    af7a:	d1f2      	bne.n	af62 <le_conn_update_complete+0x7a>
			   conn->le.conn_param_retry_countdown) {
    af7c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    af80:	2b00      	cmp	r3, #0
    af82:	d0ee      	beq.n	af62 <le_conn_update_complete+0x7a>
			conn->le.conn_param_retry_countdown--;
    af84:	3b01      	subs	r3, #1
    af86:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
    af8a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    af8e:	2300      	movs	r3, #0
    af90:	f104 0060 	add.w	r0, r4, #96	; 0x60
    af94:	f00c f996 	bl	172c4 <k_work_schedule>
		notify_le_param_updated(conn);
    af98:	4620      	mov	r0, r4
    af9a:	f003 f8cb 	bl	e134 <notify_le_param_updated>
    af9e:	e7cc      	b.n	af3a <le_conn_update_complete+0x52>
    afa0:	00022ec9 	.word	0x00022ec9

0000afa4 <bt_hci_cmd_state_set_init>:
{
    afa4:	b510      	push	{r4, lr}
	state->bit = bit;
    afa6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    afaa:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    afae:	460c      	mov	r4, r1
	state->val = val;
    afb0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    afb2:	f005 fd4b 	bl	10a4c <net_buf_id>
    afb6:	220c      	movs	r2, #12
    afb8:	4b02      	ldr	r3, [pc, #8]	; (afc4 <bt_hci_cmd_state_set_init+0x20>)
    afba:	fb02 3300 	mla	r3, r2, r0, r3
    afbe:	605c      	str	r4, [r3, #4]
}
    afc0:	bd10      	pop	{r4, pc}
    afc2:	bf00      	nop
    afc4:	20006958 	.word	0x20006958

0000afc8 <bt_hci_cmd_create>:
{
    afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    afcc:	f04f 32ff 	mov.w	r2, #4294967295
    afd0:	4606      	mov	r6, r0
    afd2:	f04f 33ff 	mov.w	r3, #4294967295
    afd6:	481d      	ldr	r0, [pc, #116]	; (b04c <bt_hci_cmd_create+0x84>)
    afd8:	460f      	mov	r7, r1
    afda:	f012 faac 	bl	1d536 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    afde:	4604      	mov	r4, r0
    afe0:	b950      	cbnz	r0, aff8 <bt_hci_cmd_create+0x30>
    afe2:	491b      	ldr	r1, [pc, #108]	; (b050 <bt_hci_cmd_create+0x88>)
    afe4:	481b      	ldr	r0, [pc, #108]	; (b054 <bt_hci_cmd_create+0x8c>)
    afe6:	f240 1201 	movw	r2, #257	; 0x101
    afea:	f010 f991 	bl	1b310 <assert_print>
    afee:	f240 1101 	movw	r1, #257	; 0x101
    aff2:	4817      	ldr	r0, [pc, #92]	; (b050 <bt_hci_cmd_create+0x88>)
    aff4:	f010 f985 	bl	1b302 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    aff8:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    affc:	f100 0a0c 	add.w	sl, r0, #12
    b000:	2101      	movs	r1, #1
    b002:	4650      	mov	r0, sl
    b004:	f005 fe24 	bl	10c50 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    b008:	4620      	mov	r0, r4
    b00a:	f884 8018 	strb.w	r8, [r4, #24]
    b00e:	f005 fd1d 	bl	10a4c <net_buf_id>
    b012:	f04f 090c 	mov.w	r9, #12
    b016:	4d10      	ldr	r5, [pc, #64]	; (b058 <bt_hci_cmd_create+0x90>)
    b018:	fb09 5000 	mla	r0, r9, r0, r5
    b01c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    b01e:	4620      	mov	r0, r4
    b020:	f005 fd14 	bl	10a4c <net_buf_id>
    b024:	fb09 5000 	mla	r0, r9, r0, r5
    b028:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    b02c:	4620      	mov	r0, r4
    b02e:	f005 fd0d 	bl	10a4c <net_buf_id>
    b032:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    b036:	2103      	movs	r1, #3
    b038:	4650      	mov	r0, sl
    b03a:	f8c5 8004 	str.w	r8, [r5, #4]
    b03e:	f005 ffe5 	bl	1100c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    b042:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    b044:	7087      	strb	r7, [r0, #2]
}
    b046:	4620      	mov	r0, r4
    b048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b04c:	20000a14 	.word	0x20000a14
    b050:	00022f89 	.word	0x00022f89
    b054:	000221f8 	.word	0x000221f8
    b058:	20006958 	.word	0x20006958

0000b05c <bt_hci_cmd_send_sync>:
{
    b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b05e:	4607      	mov	r7, r0
    b060:	4615      	mov	r5, r2
	if (!buf) {
    b062:	460c      	mov	r4, r1
{
    b064:	b087      	sub	sp, #28
	if (!buf) {
    b066:	b921      	cbnz	r1, b072 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    b068:	f7ff ffae 	bl	afc8 <bt_hci_cmd_create>
		if (!buf) {
    b06c:	4604      	mov	r4, r0
    b06e:	2800      	cmp	r0, #0
    b070:	d047      	beq.n	b102 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    b072:	2201      	movs	r2, #1
    b074:	2100      	movs	r1, #0
    b076:	4668      	mov	r0, sp
    b078:	f013 ffe6 	bl	1f048 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    b07c:	4620      	mov	r0, r4
    b07e:	f005 fce5 	bl	10a4c <net_buf_id>
    b082:	230c      	movs	r3, #12
    b084:	4e20      	ldr	r6, [pc, #128]	; (b108 <bt_hci_cmd_send_sync+0xac>)
    b086:	fb03 6000 	mla	r0, r3, r0, r6
    b08a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    b08e:	4620      	mov	r0, r4
    b090:	f005 fef8 	bl	10e84 <net_buf_ref>
    b094:	4601      	mov	r1, r0
    b096:	481d      	ldr	r0, [pc, #116]	; (b10c <bt_hci_cmd_send_sync+0xb0>)
    b098:	f005 fe92 	bl	10dc0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    b09c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    b0a0:	2300      	movs	r3, #0
    b0a2:	4668      	mov	r0, sp
    b0a4:	f00b fcdc 	bl	16a60 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    b0a8:	b158      	cbz	r0, b0c2 <bt_hci_cmd_send_sync+0x66>
    b0aa:	f240 1249 	movw	r2, #329	; 0x149
    b0ae:	4918      	ldr	r1, [pc, #96]	; (b110 <bt_hci_cmd_send_sync+0xb4>)
    b0b0:	4818      	ldr	r0, [pc, #96]	; (b114 <bt_hci_cmd_send_sync+0xb8>)
    b0b2:	f010 f92d 	bl	1b310 <assert_print>
    b0b6:	4040      	eors	r0, r0
    b0b8:	f380 8811 	msr	BASEPRI, r0
    b0bc:	f04f 0003 	mov.w	r0, #3
    b0c0:	df02      	svc	2
	status = cmd(buf)->status;
    b0c2:	4620      	mov	r0, r4
    b0c4:	f005 fcc2 	bl	10a4c <net_buf_id>
    b0c8:	230c      	movs	r3, #12
    b0ca:	4358      	muls	r0, r3
    b0cc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    b0ce:	b186      	cbz	r6, b0f2 <bt_hci_cmd_send_sync+0x96>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    b0d0:	4633      	mov	r3, r6
    b0d2:	463a      	mov	r2, r7
    b0d4:	2157      	movs	r1, #87	; 0x57
    b0d6:	4810      	ldr	r0, [pc, #64]	; (b118 <bt_hci_cmd_send_sync+0xbc>)
    b0d8:	f010 f92e 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
    b0dc:	4620      	mov	r0, r4
    b0de:	f005 fe8f 	bl	10e00 <net_buf_unref>
			return -ECONNREFUSED;
    b0e2:	2e09      	cmp	r6, #9
    b0e4:	bf14      	ite	ne
    b0e6:	f06f 0004 	mvnne.w	r0, #4
    b0ea:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    b0ee:	b007      	add	sp, #28
    b0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    b0f2:	b115      	cbz	r5, b0fa <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
    b0f4:	602c      	str	r4, [r5, #0]
	return 0;
    b0f6:	2000      	movs	r0, #0
    b0f8:	e7f9      	b.n	b0ee <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    b0fa:	4620      	mov	r0, r4
    b0fc:	f005 fe80 	bl	10e00 <net_buf_unref>
    b100:	e7f9      	b.n	b0f6 <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
    b102:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b106:	e7f2      	b.n	b0ee <bt_hci_cmd_send_sync+0x92>
    b108:	20006958 	.word	0x20006958
    b10c:	20000104 	.word	0x20000104
    b110:	00022f89 	.word	0x00022f89
    b114:	000221f8 	.word	0x000221f8
    b118:	00023100 	.word	0x00023100

0000b11c <hci_le_read_max_data_len>:
{
    b11c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b11e:	4606      	mov	r6, r0
    b120:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    b122:	f242 002f 	movw	r0, #8239	; 0x202f
    b126:	2100      	movs	r1, #0
    b128:	aa01      	add	r2, sp, #4
    b12a:	f7ff ff97 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    b12e:	4604      	mov	r4, r0
    b130:	b130      	cbz	r0, b140 <hci_le_read_max_data_len+0x24>
		LOG_ERR("Failed to read DLE max data len");
    b132:	2145      	movs	r1, #69	; 0x45
    b134:	4808      	ldr	r0, [pc, #32]	; (b158 <hci_le_read_max_data_len+0x3c>)
    b136:	f010 f8ff 	bl	1b338 <z_log_minimal_printk>
}
    b13a:	4620      	mov	r0, r4
    b13c:	b002      	add	sp, #8
    b13e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    b140:	9801      	ldr	r0, [sp, #4]
    b142:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    b144:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    b148:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    b14a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    b14e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    b150:	f005 fe56 	bl	10e00 <net_buf_unref>
	return 0;
    b154:	e7f1      	b.n	b13a <hci_le_read_max_data_len+0x1e>
    b156:	bf00      	nop
    b158:	00023121 	.word	0x00023121

0000b15c <bt_hci_le_rand>:
{
    b15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    b15e:	4b14      	ldr	r3, [pc, #80]	; (b1b0 <bt_hci_le_rand+0x54>)
{
    b160:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    b162:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
{
    b166:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    b168:	2b00      	cmp	r3, #0
    b16a:	da1d      	bge.n	b1a8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    b16c:	b914      	cbnz	r4, b174 <bt_hci_le_rand+0x18>
	return 0;
    b16e:	4620      	mov	r0, r4
}
    b170:	b003      	add	sp, #12
    b172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    b174:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    b176:	f04f 0100 	mov.w	r1, #0
    b17a:	f242 0018 	movw	r0, #8216	; 0x2018
    b17e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    b180:	4626      	mov	r6, r4
    b182:	bf28      	it	cs
    b184:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    b186:	f7ff ff69 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    b18a:	2800      	cmp	r0, #0
    b18c:	d1f0      	bne.n	b170 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    b18e:	9f01      	ldr	r7, [sp, #4]
    b190:	4632      	mov	r2, r6
    b192:	68f9      	ldr	r1, [r7, #12]
    b194:	4628      	mov	r0, r5
    b196:	3101      	adds	r1, #1
    b198:	f014 f914 	bl	1f3c4 <memcpy>
		net_buf_unref(rsp);
    b19c:	4638      	mov	r0, r7
    b19e:	f005 fe2f 	bl	10e00 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    b1a2:	4435      	add	r5, r6
		len -= count;
    b1a4:	1ba4      	subs	r4, r4, r6
    b1a6:	e7e1      	b.n	b16c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    b1a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b1ac:	e7e0      	b.n	b170 <bt_hci_le_rand+0x14>
    b1ae:	bf00      	nop
    b1b0:	20000008 	.word	0x20000008

0000b1b4 <bt_get_phy>:
	switch (hci_phy) {
    b1b4:	3801      	subs	r0, #1
    b1b6:	b2c0      	uxtb	r0, r0
    b1b8:	2802      	cmp	r0, #2
    b1ba:	bf9a      	itte	ls
    b1bc:	4b01      	ldrls	r3, [pc, #4]	; (b1c4 <bt_get_phy+0x10>)
    b1be:	5c18      	ldrbls	r0, [r3, r0]
{
    b1c0:	2000      	movhi	r0, #0
}
    b1c2:	4770      	bx	lr
    b1c4:	000235b5 	.word	0x000235b5

0000b1c8 <bt_le_create_conn_ext>:
{
    b1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b1cc:	b087      	sub	sp, #28
    b1ce:	4604      	mov	r4, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    b1d0:	f10d 010b 	add.w	r1, sp, #11
    b1d4:	2000      	movs	r0, #0
    b1d6:	f001 f96d 	bl	c4b4 <bt_id_set_create_conn_own_addr>
	if (err) {
    b1da:	4606      	mov	r6, r0
    b1dc:	2800      	cmp	r0, #0
    b1de:	f040 8088 	bne.w	b2f2 <bt_le_create_conn_ext+0x12a>
	num_phys = (!(bt_dev.create_param.options &
    b1e2:	f8df 8124 	ldr.w	r8, [pc, #292]	; b308 <bt_le_create_conn_ext+0x140>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_EXT_CREATE_CONN, sizeof(*cp) +
    b1e6:	f242 0043 	movw	r0, #8259	; 0x2043
	num_phys = (!(bt_dev.create_param.options &
    b1ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
		      BT_CONN_LE_OPT_NO_1M) ? 1 : 0) +
    b1ee:	f083 0102 	eor.w	r1, r3, #2
    b1f2:	f3c1 0140 	ubfx	r1, r1, #1, #1
		      BT_CONN_LE_OPT_CODED) ? 1 : 0);
    b1f6:	f003 0301 	and.w	r3, r3, #1
	num_phys = (!(bt_dev.create_param.options &
    b1fa:	4419      	add	r1, r3
				num_phys * sizeof(*phy));
    b1fc:	0109      	lsls	r1, r1, #4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_EXT_CREATE_CONN, sizeof(*cp) +
    b1fe:	310a      	adds	r1, #10
    b200:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    b204:	f7ff fee0 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    b208:	4607      	mov	r7, r0
    b20a:	2800      	cmp	r0, #0
    b20c:	d075      	beq.n	b2fa <bt_le_create_conn_ext+0x132>
    b20e:	f100 090c 	add.w	r9, r0, #12
    b212:	210a      	movs	r1, #10
    b214:	4648      	mov	r0, r9
    b216:	f005 fef9 	bl	1100c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    b21a:	6006      	str	r6, [r0, #0]
    b21c:	6046      	str	r6, [r0, #4]
    b21e:	8106      	strh	r6, [r0, #8]
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
    b220:	f104 069e 	add.w	r6, r4, #158	; 0x9e
    b224:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    b226:	2207      	movs	r2, #7
    b228:	4630      	mov	r0, r6
    b22a:	4935      	ldr	r1, [pc, #212]	; (b300 <bt_le_create_conn_ext+0x138>)
    b22c:	f014 f8ba 	bl	1f3a4 <memcmp>
    b230:	b908      	cbnz	r0, b236 <bt_le_create_conn_ext+0x6e>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    b232:	f104 0690 	add.w	r6, r4, #144	; 0x90
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    b236:	4631      	mov	r1, r6
    b238:	1ca8      	adds	r0, r5, #2
    b23a:	f010 ff6e 	bl	1c11a <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    b23e:	2300      	movs	r3, #0
    b240:	702b      	strb	r3, [r5, #0]
	cp->own_addr_type = own_addr_type;
    b242:	f89d 200b 	ldrb.w	r2, [sp, #11]
	cp->phys = 0;
    b246:	726b      	strb	r3, [r5, #9]
	cp->own_addr_type = own_addr_type;
    b248:	706a      	strb	r2, [r5, #1]
	if (!(bt_dev.create_param.options & BT_CONN_LE_OPT_NO_1M)) {
    b24a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    b24e:	f016 0602 	ands.w	r6, r6, #2
    b252:	d11b      	bne.n	b28c <bt_le_create_conn_ext+0xc4>
		cp->phys |= BT_HCI_LE_EXT_SCAN_PHY_1M;
    b254:	2301      	movs	r3, #1
    b256:	2110      	movs	r1, #16
    b258:	726b      	strb	r3, [r5, #9]
    b25a:	4648      	mov	r0, r9
    b25c:	f005 fed6 	bl	1100c <net_buf_simple_add>
		phy->scan_interval = sys_cpu_to_le16(
    b260:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    b264:	8003      	strh	r3, [r0, #0]
		phy->scan_window = sys_cpu_to_le16(
    b266:	f8b8 300e 	ldrh.w	r3, [r8, #14]
    b26a:	8043      	strh	r3, [r0, #2]
	phy->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    b26c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    b270:	8083      	strh	r3, [r0, #4]
	phy->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    b272:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    b276:	80c3      	strh	r3, [r0, #6]
	phy->conn_latency = sys_cpu_to_le16(conn->le.latency);
    b278:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    b27c:	8103      	strh	r3, [r0, #8]
	phy->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    b27e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
	phy->min_ce_len = 0;
    b282:	7306      	strb	r6, [r0, #12]
	phy->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    b284:	8143      	strh	r3, [r0, #10]
	phy->min_ce_len = 0;
    b286:	7346      	strb	r6, [r0, #13]
	phy->max_ce_len = 0;
    b288:	7386      	strb	r6, [r0, #14]
    b28a:	73c6      	strb	r6, [r0, #15]
	if (bt_dev.create_param.options & BT_CONN_LE_OPT_CODED) {
    b28c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b290:	07db      	lsls	r3, r3, #31
    b292:	d51e      	bpl.n	b2d2 <bt_le_create_conn_ext+0x10a>
		cp->phys |= BT_HCI_LE_EXT_SCAN_PHY_CODED;
    b294:	7a6b      	ldrb	r3, [r5, #9]
    b296:	2110      	movs	r1, #16
    b298:	f043 0304 	orr.w	r3, r3, #4
    b29c:	4648      	mov	r0, r9
    b29e:	726b      	strb	r3, [r5, #9]
    b2a0:	f005 feb4 	bl	1100c <net_buf_simple_add>
		phy->scan_interval = sys_cpu_to_le16(
    b2a4:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    b2a8:	8002      	strh	r2, [r0, #0]
		phy->scan_window = sys_cpu_to_le16(
    b2aa:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    b2ae:	8042      	strh	r2, [r0, #2]
	phy->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    b2b0:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    b2b4:	8082      	strh	r2, [r0, #4]
	phy->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    b2b6:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
    b2ba:	80c2      	strh	r2, [r0, #6]
	phy->conn_latency = sys_cpu_to_le16(conn->le.latency);
    b2bc:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
    b2c0:	8102      	strh	r2, [r0, #8]
	phy->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    b2c2:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
    b2c6:	8142      	strh	r2, [r0, #10]
	phy->min_ce_len = 0;
    b2c8:	2200      	movs	r2, #0
    b2ca:	7302      	strb	r2, [r0, #12]
    b2cc:	7342      	strb	r2, [r0, #13]
	phy->max_ce_len = 0;
    b2ce:	7382      	strb	r2, [r0, #14]
    b2d0:	73c2      	strb	r2, [r0, #15]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    b2d2:	2301      	movs	r3, #1
    b2d4:	9300      	str	r3, [sp, #0]
    b2d6:	230c      	movs	r3, #12
    b2d8:	4638      	mov	r0, r7
    b2da:	eb0d 0103 	add.w	r1, sp, r3
    b2de:	4a09      	ldr	r2, [pc, #36]	; (b304 <bt_le_create_conn_ext+0x13c>)
    b2e0:	f7ff fe60 	bl	afa4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_EXT_CREATE_CONN, buf, NULL);
    b2e4:	2200      	movs	r2, #0
    b2e6:	4639      	mov	r1, r7
    b2e8:	f242 0043 	movw	r0, #8259	; 0x2043
    b2ec:	f7ff feb6 	bl	b05c <bt_hci_cmd_send_sync>
    b2f0:	4606      	mov	r6, r0
}
    b2f2:	4630      	mov	r0, r6
    b2f4:	b007      	add	sp, #28
    b2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    b2fa:	f06f 0668 	mvn.w	r6, #104	; 0x68
    b2fe:	e7f8      	b.n	b2f2 <bt_le_create_conn_ext+0x12a>
    b300:	00022e27 	.word	0x00022e27
    b304:	20000090 	.word	0x20000090
    b308:	20000008 	.word	0x20000008

0000b30c <bt_le_create_conn_cancel>:
{
    b30c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    b30e:	2100      	movs	r1, #0
{
    b310:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    b312:	f242 000e 	movw	r0, #8206	; 0x200e
    b316:	f7ff fe57 	bl	afc8 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    b31a:	2500      	movs	r5, #0
    b31c:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    b31e:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    b320:	eb0d 0103 	add.w	r1, sp, r3
    b324:	4a05      	ldr	r2, [pc, #20]	; (b33c <bt_le_create_conn_cancel+0x30>)
    b326:	9500      	str	r5, [sp, #0]
    b328:	f7ff fe3c 	bl	afa4 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    b32c:	462a      	mov	r2, r5
    b32e:	4621      	mov	r1, r4
    b330:	f242 000e 	movw	r0, #8206	; 0x200e
    b334:	f7ff fe92 	bl	b05c <bt_hci_cmd_send_sync>
}
    b338:	b007      	add	sp, #28
    b33a:	bd30      	pop	{r4, r5, pc}
    b33c:	20000090 	.word	0x20000090

0000b340 <bt_hci_le_enh_conn_complete>:
{
    b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    b344:	f8b0 7001 	ldrh.w	r7, [r0, #1]
    b348:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
    b34a:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    b34e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    b352:	4aa3      	ldr	r2, [pc, #652]	; (b5e0 <bt_hci_le_enh_conn_complete+0x2a0>)
    b354:	b29b      	uxth	r3, r3
    b356:	8811      	ldrh	r1, [r2, #0]
	if (evt->status) {
    b358:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    b35a:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
    b35c:	bf08      	it	eq
    b35e:	8016      	strheq	r6, [r2, #0]
{
    b360:	4605      	mov	r5, r0
			return true;
    b362:	bf08      	it	eq
    b364:	2601      	moveq	r6, #1
{
    b366:	b088      	sub	sp, #32
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    b368:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    b36c:	b36c      	cbz	r4, b3ca <bt_hci_le_enh_conn_complete+0x8a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b36e:	2c3c      	cmp	r4, #60	; 0x3c
    b370:	d00f      	beq.n	b392 <bt_hci_le_enh_conn_complete+0x52>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b372:	2c02      	cmp	r4, #2
    b374:	d121      	bne.n	b3ba <bt_hci_le_enh_conn_complete+0x7a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    b376:	2100      	movs	r1, #0
    b378:	2206      	movs	r2, #6
    b37a:	4608      	mov	r0, r1
    b37c:	f002 ffc8 	bl	e310 <bt_conn_lookup_state_le>
	if (!conn) {
    b380:	4605      	mov	r5, r0
    b382:	b948      	cbnz	r0, b398 <bt_hci_le_enh_conn_complete+0x58>
		LOG_ERR("No pending central connection");
    b384:	2145      	movs	r1, #69	; 0x45
    b386:	4897      	ldr	r0, [pc, #604]	; (b5e4 <bt_hci_le_enh_conn_complete+0x2a4>)
    b388:	f00f ffd6 	bl	1b338 <z_log_minimal_printk>
			bt_le_scan_update(false);
    b38c:	2000      	movs	r0, #0
    b38e:	f001 ff4b 	bl	d228 <bt_le_scan_update>
}
    b392:	b008      	add	sp, #32
    b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b398:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    b39a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b39c:	f002 fd74 	bl	de88 <bt_conn_set_state>
    b3a0:	1d2b      	adds	r3, r5, #4
    b3a2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    b3a6:	07de      	lsls	r6, r3, #31
    b3a8:	d503      	bpl.n	b3b2 <bt_hci_le_enh_conn_complete+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
    b3aa:	4621      	mov	r1, r4
    b3ac:	4628      	mov	r0, r5
    b3ae:	f002 fd6b 	bl	de88 <bt_conn_set_state>
	bt_conn_unref(conn);
    b3b2:	4628      	mov	r0, r5
    b3b4:	f002 fd38 	bl	de28 <bt_conn_unref>
    b3b8:	e7e8      	b.n	b38c <bt_hci_le_enh_conn_complete+0x4c>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    b3ba:	4622      	mov	r2, r4
    b3bc:	2157      	movs	r1, #87	; 0x57
    b3be:	488a      	ldr	r0, [pc, #552]	; (b5e8 <bt_hci_le_enh_conn_complete+0x2a8>)
}
    b3c0:	b008      	add	sp, #32
    b3c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    b3c6:	f00f bfb7 	b.w	1b338 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    b3ca:	7903      	ldrb	r3, [r0, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    b3cc:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    b3d0:	3b02      	subs	r3, #2
    b3d2:	2b01      	cmp	r3, #1
    b3d4:	d821      	bhi.n	b41a <bt_hci_le_enh_conn_complete+0xda>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    b3d6:	4649      	mov	r1, r9
    b3d8:	a806      	add	r0, sp, #24
    b3da:	f010 fe9e 	bl	1c11a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    b3de:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    b3e2:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    b3e6:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    b3e8:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    b3ec:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    b3f0:	f010 fe9a 	bl	1c128 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    b3f4:	2301      	movs	r3, #1
    b3f6:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = find_pending_connect(evt->role, &id_addr);
    b3fa:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    b3fc:	bb00      	cbnz	r0, b440 <bt_hci_le_enh_conn_complete+0x100>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    b3fe:	2206      	movs	r2, #6
    b400:	a906      	add	r1, sp, #24
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    b402:	f002 ff85 	bl	e310 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b406:	78eb      	ldrb	r3, [r5, #3]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    b408:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b40a:	b923      	cbnz	r3, b416 <bt_hci_le_enh_conn_complete+0xd6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b40c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    b410:	4876      	ldr	r0, [pc, #472]	; (b5ec <bt_hci_le_enh_conn_complete+0x2ac>)
    b412:	f010 fe8e 	bl	1c132 <atomic_and.isra.0>
	if (!conn) {
    b416:	bbb4      	cbnz	r4, b486 <bt_hci_le_enh_conn_complete+0x146>
    b418:	e014      	b.n	b444 <bt_hci_le_enh_conn_complete+0x104>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    b41a:	78c3      	ldrb	r3, [r0, #3]
		bt_addr_le_copy(&id_addr,
    b41c:	4649      	mov	r1, r9
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    b41e:	2b01      	cmp	r3, #1
    b420:	bf04      	itt	eq
    b422:	4b73      	ldreq	r3, [pc, #460]	; (b5f0 <bt_hci_le_enh_conn_complete+0x2b0>)
    b424:	f893 4023 	ldrbeq.w	r4, [r3, #35]	; 0x23
		bt_addr_le_copy(&id_addr,
    b428:	4620      	mov	r0, r4
    b42a:	f010 ff29 	bl	1c280 <bt_lookup_id_addr>
    b42e:	4601      	mov	r1, r0
    b430:	a806      	add	r0, sp, #24
    b432:	f010 fe72 	bl	1c11a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    b436:	4649      	mov	r1, r9
    b438:	a804      	add	r0, sp, #16
    b43a:	f010 fe6e 	bl	1c11a <bt_addr_le_copy>
    b43e:	e7dc      	b.n	b3fa <bt_hci_le_enh_conn_complete+0xba>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    b440:	2801      	cmp	r0, #1
    b442:	d00c      	beq.n	b45e <bt_hci_le_enh_conn_complete+0x11e>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    b444:	4648      	mov	r0, r9
    b446:	f7ff f953 	bl	a6f0 <bt_addr_le_str>
    b44a:	2145      	movs	r1, #69	; 0x45
    b44c:	4602      	mov	r2, r0
    b44e:	4869      	ldr	r0, [pc, #420]	; (b5f4 <bt_hci_le_enh_conn_complete+0x2b4>)
    b450:	f00f ff72 	bl	1b338 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    b454:	211f      	movs	r1, #31
    b456:	4640      	mov	r0, r8
    b458:	f010 fe75 	bl	1c146 <bt_hci_disconnect>
		return;
    b45c:	e799      	b.n	b392 <bt_hci_le_enh_conn_complete+0x52>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    b45e:	f8df a190 	ldr.w	sl, [pc, #400]	; b5f0 <bt_hci_le_enh_conn_complete+0x2b0>
    b462:	2205      	movs	r2, #5
    b464:	f89a 0023 	ldrb.w	r0, [sl, #35]	; 0x23
    b468:	a906      	add	r1, sp, #24
    b46a:	f002 ff51 	bl	e310 <bt_conn_lookup_state_le>
		if (!conn) {
    b46e:	4604      	mov	r4, r0
    b470:	2800      	cmp	r0, #0
    b472:	f000 80ad 	beq.w	b5d0 <bt_hci_le_enh_conn_complete+0x290>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b476:	78eb      	ldrb	r3, [r5, #3]
    b478:	b92b      	cbnz	r3, b486 <bt_hci_le_enh_conn_complete+0x146>
    b47a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    b47e:	f10a 0088 	add.w	r0, sl, #136	; 0x88
    b482:	f010 fe56 	bl	1c132 <atomic_and.isra.0>
	conn->handle = handle;
    b486:	4620      	mov	r0, r4
	conn->err = 0U;
    b488:	2200      	movs	r2, #0
	conn->handle = handle;
    b48a:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    b48e:	a906      	add	r1, sp, #24
    b490:	f010 fe43 	bl	1c11a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    b494:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    b498:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    b49c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    b4a0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    b4a4:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    b4a8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
    b4ac:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    b4ae:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b4b0:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    b4b2:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b4b4:	d111      	bne.n	b4da <bt_hci_le_enh_conn_complete+0x19a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    b4b6:	a904      	add	r1, sp, #16
    b4b8:	f104 0097 	add.w	r0, r4, #151	; 0x97
    b4bc:	f010 fe2d 	bl	1c11a <bt_addr_le_copy>
			bt_addr_copy(&conn->le.resp_addr.a, &evt->local_rpa);
    b4c0:	f105 010b 	add.w	r1, r5, #11
    b4c4:	f104 009f 	add.w	r0, r4, #159	; 0x9f
    b4c8:	f010 fe2e 	bl	1c128 <bt_addr_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    b4cc:	4b48      	ldr	r3, [pc, #288]	; (b5f0 <bt_hci_le_enh_conn_complete+0x2b0>)
    b4ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    b4d2:	065d      	lsls	r5, r3, #25
    b4d4:	d511      	bpl.n	b4fa <bt_hci_le_enh_conn_complete+0x1ba>
			bt_le_adv_resume();
    b4d6:	f001 fbf7 	bl	ccc8 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b4da:	78e3      	ldrb	r3, [r4, #3]
    b4dc:	b96b      	cbnz	r3, b4fa <bt_hci_le_enh_conn_complete+0x1ba>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    b4de:	a904      	add	r1, sp, #16
    b4e0:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    b4e4:	f010 fe19 	bl	1c11a <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    b4e8:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    b4ea:	4b41      	ldr	r3, [pc, #260]	; (b5f0 <bt_hci_le_enh_conn_complete+0x2b0>)
					&bt_dev.id_addr[conn->id]);
    b4ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    b4f0:	4419      	add	r1, r3
    b4f2:	f104 0097 	add.w	r0, r4, #151	; 0x97
    b4f6:	f010 fe10 	bl	1c11a <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    b4fa:	2107      	movs	r1, #7
    b4fc:	4620      	mov	r0, r4
    b4fe:	f002 fcc3 	bl	de88 <bt_conn_set_state>
	if (is_disconnected) {
    b502:	b11e      	cbz	r6, b50c <bt_hci_le_enh_conn_complete+0x1cc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    b504:	2101      	movs	r1, #1
    b506:	4620      	mov	r0, r4
    b508:	f002 fcbe 	bl	de88 <bt_conn_set_state>
	bt_conn_connected(conn);
    b50c:	4620      	mov	r0, r4
    b50e:	f011 f8fd 	bl	1c70c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    b512:	7aa3      	ldrb	r3, [r4, #10]
    b514:	2b07      	cmp	r3, #7
    b516:	d153      	bne.n	b5c0 <bt_hci_le_enh_conn_complete+0x280>
    b518:	1d23      	adds	r3, r4, #4
    b51a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    b51e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    b522:	4e33      	ldr	r6, [pc, #204]	; (b5f0 <bt_hci_le_enh_conn_complete+0x2b0>)
    b524:	d11f      	bne.n	b566 <bt_hci_le_enh_conn_complete+0x226>
    b526:	78e3      	ldrb	r3, [r4, #3]
    b528:	b11b      	cbz	r3, b532 <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    b52a:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
    b52e:	0718      	lsls	r0, r3, #28
    b530:	d519      	bpl.n	b566 <bt_hci_le_enh_conn_complete+0x226>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    b532:	2102      	movs	r1, #2
    b534:	f242 0016 	movw	r0, #8214	; 0x2016
    b538:	f7ff fd46 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    b53c:	4605      	mov	r5, r0
    b53e:	2800      	cmp	r0, #0
    b540:	d04b      	beq.n	b5da <bt_hci_le_enh_conn_complete+0x29a>
    b542:	2102      	movs	r1, #2
    b544:	300c      	adds	r0, #12
    b546:	f005 fd61 	bl	1100c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    b54a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    b54c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    b54e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    b550:	4629      	mov	r1, r5
    b552:	f242 0016 	movw	r0, #8214	; 0x2016
    b556:	f7ff fd81 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    b55a:	4602      	mov	r2, r0
    b55c:	b118      	cbz	r0, b566 <bt_hci_le_enh_conn_complete+0x226>
			LOG_ERR("Failed read remote features (%d)", err);
    b55e:	2145      	movs	r1, #69	; 0x45
    b560:	4825      	ldr	r0, [pc, #148]	; (b5f8 <bt_hci_le_enh_conn_complete+0x2b8>)
    b562:	f00f fee9 	bl	1b338 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    b566:	f896 3091 	ldrb.w	r3, [r6, #145]	; 0x91
    b56a:	07d9      	lsls	r1, r3, #31
    b56c:	d50c      	bpl.n	b588 <bt_hci_le_enh_conn_complete+0x248>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    b56e:	2100      	movs	r1, #0
    b570:	2302      	movs	r3, #2
    b572:	4620      	mov	r0, r4
    b574:	461a      	mov	r2, r3
    b576:	9100      	str	r1, [sp, #0]
    b578:	f010 fe1e 	bl	1c1b8 <bt_le_set_phy>
		if (err) {
    b57c:	4602      	mov	r2, r0
    b57e:	b118      	cbz	r0, b588 <bt_hci_le_enh_conn_complete+0x248>
			LOG_ERR("Failed LE Set PHY (%d)", err);
    b580:	2145      	movs	r1, #69	; 0x45
    b582:	481e      	ldr	r0, [pc, #120]	; (b5fc <bt_hci_le_enh_conn_complete+0x2bc>)
    b584:	f00f fed8 	bl	1b338 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    b588:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
    b58c:	069a      	lsls	r2, r3, #26
    b58e:	d517      	bpl.n	b5c0 <bt_hci_le_enh_conn_complete+0x280>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    b590:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
    b594:	689b      	ldr	r3, [r3, #8]
    b596:	079b      	lsls	r3, r3, #30
    b598:	d512      	bpl.n	b5c0 <bt_hci_le_enh_conn_complete+0x280>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    b59a:	f10d 010e 	add.w	r1, sp, #14
    b59e:	a803      	add	r0, sp, #12
    b5a0:	f7ff fdbc 	bl	b11c <hci_le_read_max_data_len>
			if (!err) {
    b5a4:	b960      	cbnz	r0, b5c0 <bt_hci_le_enh_conn_complete+0x280>
				err = bt_le_set_data_len(conn,
    b5a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b5aa:	4620      	mov	r0, r4
    b5ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b5b0:	f010 fde4 	bl	1c17c <bt_le_set_data_len>
				if (err) {
    b5b4:	4602      	mov	r2, r0
    b5b6:	b118      	cbz	r0, b5c0 <bt_hci_le_enh_conn_complete+0x280>
					LOG_ERR("Failed to set data len (%d)", err);
    b5b8:	2145      	movs	r1, #69	; 0x45
    b5ba:	4811      	ldr	r0, [pc, #68]	; (b600 <bt_hci_le_enh_conn_complete+0x2c0>)
    b5bc:	f00f febc 	bl	1b338 <z_log_minimal_printk>
	bt_conn_unref(conn);
    b5c0:	4620      	mov	r0, r4
    b5c2:	f002 fc31 	bl	de28 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b5c6:	78e3      	ldrb	r3, [r4, #3]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	f47f aee2 	bne.w	b392 <bt_hci_le_enh_conn_complete+0x52>
    b5ce:	e6dd      	b.n	b38c <bt_hci_le_enh_conn_complete+0x4c>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    b5d0:	2204      	movs	r2, #4
    b5d2:	490c      	ldr	r1, [pc, #48]	; (b604 <bt_hci_le_enh_conn_complete+0x2c4>)
    b5d4:	f89a 0023 	ldrb.w	r0, [sl, #35]	; 0x23
    b5d8:	e713      	b.n	b402 <bt_hci_le_enh_conn_complete+0xc2>
		return -ENOBUFS;
    b5da:	f06f 0268 	mvn.w	r2, #104	; 0x68
    b5de:	e7be      	b.n	b55e <bt_hci_le_enh_conn_complete+0x21e>
    b5e0:	200071c0 	.word	0x200071c0
    b5e4:	00023146 	.word	0x00023146
    b5e8:	00023169 	.word	0x00023169
    b5ec:	20000090 	.word	0x20000090
    b5f0:	20000008 	.word	0x20000008
    b5f4:	00023187 	.word	0x00023187
    b5f8:	000231a8 	.word	0x000231a8
    b5fc:	000231ce 	.word	0x000231ce
    b600:	000231ea 	.word	0x000231ea
    b604:	00022e20 	.word	0x00022e20

0000b608 <le_legacy_conn_complete>:
{
    b608:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    b60a:	68c1      	ldr	r1, [r0, #12]
{
    b60c:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
    b60e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    b610:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
    b612:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    b616:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    b61a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
    b61c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    b620:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    b624:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    b628:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    b62c:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    b630:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    b634:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    b638:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    b63c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    b640:	7b4b      	ldrb	r3, [r1, #13]
    b642:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    b646:	f010 fd68 	bl	1c11a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    b64a:	4907      	ldr	r1, [pc, #28]	; (b668 <le_legacy_conn_complete+0x60>)
    b64c:	f10d 000b 	add.w	r0, sp, #11
    b650:	f010 fd6a 	bl	1c128 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    b654:	f10d 0011 	add.w	r0, sp, #17
    b658:	f010 fd66 	bl	1c128 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
    b65c:	4668      	mov	r0, sp
    b65e:	f7ff fe6f 	bl	b340 <bt_hci_le_enh_conn_complete>
}
    b662:	b009      	add	sp, #36	; 0x24
    b664:	f85d fb04 	ldr.w	pc, [sp], #4
    b668:	00022e34 	.word	0x00022e34

0000b66c <bt_send>:
	return bt_dev.drv->send(buf);
    b66c:	4b02      	ldr	r3, [pc, #8]	; (b678 <bt_send+0xc>)
    b66e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    b672:	695b      	ldr	r3, [r3, #20]
    b674:	4718      	bx	r3
    b676:	bf00      	nop
    b678:	20000008 	.word	0x20000008

0000b67c <bt_hci_cmd_send>:
{
    b67c:	b538      	push	{r3, r4, r5, lr}
    b67e:	4605      	mov	r5, r0
	if (!buf) {
    b680:	460c      	mov	r4, r1
    b682:	b919      	cbnz	r1, b68c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    b684:	f7ff fca0 	bl	afc8 <bt_hci_cmd_create>
		if (!buf) {
    b688:	4604      	mov	r4, r0
    b68a:	b1c0      	cbz	r0, b6be <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    b68c:	f640 4335 	movw	r3, #3125	; 0xc35
    b690:	429d      	cmp	r5, r3
    b692:	d10e      	bne.n	b6b2 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    b694:	4620      	mov	r0, r4
    b696:	f7ff ffe9 	bl	b66c <bt_send>
		if (err) {
    b69a:	4605      	mov	r5, r0
    b69c:	b168      	cbz	r0, b6ba <bt_hci_cmd_send+0x3e>
			LOG_ERR("Unable to send to driver (err %d)", err);
    b69e:	4602      	mov	r2, r0
    b6a0:	2145      	movs	r1, #69	; 0x45
    b6a2:	4808      	ldr	r0, [pc, #32]	; (b6c4 <bt_hci_cmd_send+0x48>)
    b6a4:	f00f fe48 	bl	1b338 <z_log_minimal_printk>
			net_buf_unref(buf);
    b6a8:	4620      	mov	r0, r4
    b6aa:	f005 fba9 	bl	10e00 <net_buf_unref>
}
    b6ae:	4628      	mov	r0, r5
    b6b0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    b6b2:	4621      	mov	r1, r4
    b6b4:	4804      	ldr	r0, [pc, #16]	; (b6c8 <bt_hci_cmd_send+0x4c>)
    b6b6:	f005 fb83 	bl	10dc0 <net_buf_put>
	return 0;
    b6ba:	2500      	movs	r5, #0
    b6bc:	e7f7      	b.n	b6ae <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    b6be:	f06f 0568 	mvn.w	r5, #104	; 0x68
    b6c2:	e7f4      	b.n	b6ae <bt_hci_cmd_send+0x32>
    b6c4:	0002320b 	.word	0x0002320b
    b6c8:	20000104 	.word	0x20000104

0000b6cc <bt_hci_host_num_completed_packets>:
{
    b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6ce:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    b6d0:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
    b6d2:	7e46      	ldrb	r6, [r0, #25]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b6d4:	7a80      	ldrb	r0, [r0, #10]
    b6d6:	f005 f9b1 	bl	10a3c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    b6da:	4621      	mov	r1, r4
    b6dc:	f013 fcaa 	bl	1f034 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    b6e0:	4b22      	ldr	r3, [pc, #136]	; (b76c <bt_hci_host_num_completed_packets+0xa0>)
    b6e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    b6e6:	069b      	lsls	r3, r3, #26
    b6e8:	d53e      	bpl.n	b768 <bt_hci_host_num_completed_packets+0x9c>
	conn = bt_conn_lookup_index(index);
    b6ea:	4630      	mov	r0, r6
    b6ec:	f003 f82a 	bl	e744 <bt_conn_lookup_index>
	if (!conn) {
    b6f0:	4604      	mov	r4, r0
    b6f2:	b930      	cbnz	r0, b702 <bt_hci_host_num_completed_packets+0x36>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
    b6f4:	4632      	mov	r2, r6
}
    b6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
    b6fa:	2157      	movs	r1, #87	; 0x57
    b6fc:	481c      	ldr	r0, [pc, #112]	; (b770 <bt_hci_host_num_completed_packets+0xa4>)
    b6fe:	f00f be1b 	b.w	1b338 <z_log_minimal_printk>
	if (conn->state != BT_CONN_CONNECTED &&
    b702:	7a83      	ldrb	r3, [r0, #10]
    b704:	3b07      	subs	r3, #7
    b706:	2b01      	cmp	r3, #1
    b708:	d908      	bls.n	b71c <bt_hci_host_num_completed_packets+0x50>
		LOG_WRN("Not reporting packet for non-connected conn");
    b70a:	481a      	ldr	r0, [pc, #104]	; (b774 <bt_hci_host_num_completed_packets+0xa8>)
    b70c:	2157      	movs	r1, #87	; 0x57
    b70e:	f00f fe13 	bl	1b338 <z_log_minimal_printk>
		bt_conn_unref(conn);
    b712:	4620      	mov	r0, r4
}
    b714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    b718:	f002 bb86 	b.w	de28 <bt_conn_unref>
	bt_conn_unref(conn);
    b71c:	f002 fb84 	bl	de28 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    b720:	2105      	movs	r1, #5
    b722:	f640 4035 	movw	r0, #3125	; 0xc35
    b726:	f7ff fc4f 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    b72a:	4604      	mov	r4, r0
    b72c:	b928      	cbnz	r0, b73a <bt_hci_host_num_completed_packets+0x6e>
}
    b72e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to allocate new HCI command");
    b732:	2145      	movs	r1, #69	; 0x45
    b734:	4810      	ldr	r0, [pc, #64]	; (b778 <bt_hci_host_num_completed_packets+0xac>)
    b736:	f00f bdff 	b.w	1b338 <z_log_minimal_printk>
	return net_buf_simple_add(&buf->b, len);
    b73a:	f100 070c 	add.w	r7, r0, #12
    b73e:	2101      	movs	r1, #1
    b740:	4638      	mov	r0, r7
    b742:	f005 fc63 	bl	1100c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    b746:	2601      	movs	r6, #1
    b748:	2104      	movs	r1, #4
    b74a:	7006      	strb	r6, [r0, #0]
    b74c:	4638      	mov	r0, r7
    b74e:	f005 fc5d 	bl	1100c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    b752:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    b754:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    b756:	7086      	strb	r6, [r0, #2]
    b758:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    b75a:	4621      	mov	r1, r4
}
    b75c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    b760:	f640 4035 	movw	r0, #3125	; 0xc35
    b764:	f7ff bf8a 	b.w	b67c <bt_hci_cmd_send>
}
    b768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b76a:	bf00      	nop
    b76c:	20000008 	.word	0x20000008
    b770:	00023232 	.word	0x00023232
    b774:	00023260 	.word	0x00023260
    b778:	00023291 	.word	0x00023291

0000b77c <le_conn_param_neg_reply>:
{
    b77c:	b570      	push	{r4, r5, r6, lr}
    b77e:	4606      	mov	r6, r0
    b780:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    b782:	f242 0021 	movw	r0, #8225	; 0x2021
    b786:	2103      	movs	r1, #3
    b788:	f7ff fc1e 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    b78c:	4604      	mov	r4, r0
    b78e:	b928      	cbnz	r0, b79c <le_conn_param_neg_reply+0x20>
}
    b790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
    b794:	2145      	movs	r1, #69	; 0x45
    b796:	4808      	ldr	r0, [pc, #32]	; (b7b8 <le_conn_param_neg_reply+0x3c>)
    b798:	f00f bdce 	b.w	1b338 <z_log_minimal_printk>
    b79c:	2103      	movs	r1, #3
    b79e:	300c      	adds	r0, #12
    b7a0:	f005 fc34 	bl	1100c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    b7a4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    b7a6:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    b7a8:	4621      	mov	r1, r4
}
    b7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    b7ae:	f242 0021 	movw	r0, #8225	; 0x2021
    b7b2:	f7ff bf63 	b.w	b67c <bt_hci_cmd_send>
    b7b6:	bf00      	nop
    b7b8:	000232b9 	.word	0x000232b9

0000b7bc <le_conn_param_req>:
{
    b7bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    b7be:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    b7c0:	78d9      	ldrb	r1, [r3, #3]
    b7c2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    b7c4:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    b7c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b7ca:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    b7ce:	7959      	ldrb	r1, [r3, #5]
    b7d0:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    b7d2:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    b7d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b7d8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    b7dc:	799a      	ldrb	r2, [r3, #6]
    b7de:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    b7e0:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    b7e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b7e6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    b7ea:	7a1a      	ldrb	r2, [r3, #8]
    b7ec:	7a5b      	ldrb	r3, [r3, #9]
    b7ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    b7f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    b7f6:	f002 fb3f 	bl	de78 <bt_conn_lookup_handle>
	if (!conn) {
    b7fa:	4605      	mov	r5, r0
    b7fc:	b950      	cbnz	r0, b814 <le_conn_param_req+0x58>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    b7fe:	2145      	movs	r1, #69	; 0x45
    b800:	481b      	ldr	r0, [pc, #108]	; (b870 <le_conn_param_req+0xb4>)
    b802:	4622      	mov	r2, r4
    b804:	f00f fd98 	bl	1b338 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    b808:	2102      	movs	r1, #2
    b80a:	4620      	mov	r0, r4
    b80c:	f7ff ffb6 	bl	b77c <le_conn_param_neg_reply>
}
    b810:	b002      	add	sp, #8
    b812:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
    b814:	4669      	mov	r1, sp
    b816:	f002 fce1 	bl	e1dc <le_param_req>
    b81a:	b938      	cbnz	r0, b82c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    b81c:	211e      	movs	r1, #30
    b81e:	4620      	mov	r0, r4
    b820:	f7ff ffac 	bl	b77c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    b824:	4628      	mov	r0, r5
    b826:	f002 faff 	bl	de28 <bt_conn_unref>
    b82a:	e7f1      	b.n	b810 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    b82c:	210e      	movs	r1, #14
    b82e:	f242 0020 	movw	r0, #8224	; 0x2020
    b832:	f7ff fbc9 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    b836:	4604      	mov	r4, r0
    b838:	2800      	cmp	r0, #0
    b83a:	d0f3      	beq.n	b824 <le_conn_param_req+0x68>
    b83c:	210e      	movs	r1, #14
    b83e:	300c      	adds	r0, #12
    b840:	f005 fbe4 	bl	1100c <net_buf_simple_add>
    b844:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
    b846:	8006      	strh	r6, [r0, #0]
    b848:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    b84c:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    b850:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    b852:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    b854:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b858:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    b85a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b85e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    b860:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b864:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    b866:	f242 0020 	movw	r0, #8224	; 0x2020
    b86a:	f7ff ff07 	bl	b67c <bt_hci_cmd_send>
    b86e:	e7d9      	b.n	b824 <le_conn_param_req+0x68>
    b870:	00022ec9 	.word	0x00022ec9

0000b874 <hci_tx_thread>:
{
    b874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    b878:	4f45      	ldr	r7, [pc, #276]	; (b990 <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
    b87a:	f8df 8130 	ldr.w	r8, [pc, #304]	; b9ac <hci_tx_thread+0x138>
			ev_count += bt_conn_prepare_events(&events[1]);
    b87e:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    b882:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    b884:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
    b886:	f36f 3394 	bfc	r3, #14, #7
    b88a:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    b88c:	f002 fa6a 	bl	dd64 <bt_conn_prepare_events>
    b890:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    b892:	f04f 32ff 	mov.w	r2, #4294967295
    b896:	f04f 33ff 	mov.w	r3, #4294967295
    b89a:	4629      	mov	r1, r5
    b89c:	483c      	ldr	r0, [pc, #240]	; (b990 <hci_tx_thread+0x11c>)
    b89e:	f00d fb09 	bl	18eb4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    b8a2:	b158      	cbz	r0, b8bc <hci_tx_thread+0x48>
    b8a4:	f640 12e6 	movw	r2, #2534	; 0x9e6
    b8a8:	4641      	mov	r1, r8
    b8aa:	483a      	ldr	r0, [pc, #232]	; (b994 <hci_tx_thread+0x120>)
    b8ac:	f00f fd30 	bl	1b310 <assert_print>
    b8b0:	4040      	eors	r0, r0
    b8b2:	f380 8811 	msr	BASEPRI, r0
    b8b6:	f04f 0003 	mov.w	r0, #3
    b8ba:	df02      	svc	2
{
    b8bc:	4e34      	ldr	r6, [pc, #208]	; (b990 <hci_tx_thread+0x11c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    b8be:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b9b0 <hci_tx_thread+0x13c>
	for (; count; ev++, count--) {
    b8c2:	b915      	cbnz	r5, b8ca <hci_tx_thread+0x56>
	z_impl_k_yield();
    b8c4:	f00c fbca 	bl	1805c <z_impl_k_yield>
	while (1) {
    b8c8:	e7db      	b.n	b882 <hci_tx_thread+0xe>
		switch (ev->state) {
    b8ca:	68f2      	ldr	r2, [r6, #12]
    b8cc:	f3c2 3286 	ubfx	r2, r2, #14, #7
    b8d0:	2a01      	cmp	r2, #1
    b8d2:	d94e      	bls.n	b972 <hci_tx_thread+0xfe>
    b8d4:	2a04      	cmp	r2, #4
    b8d6:	d156      	bne.n	b986 <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
    b8d8:	7b33      	ldrb	r3, [r6, #12]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d14c      	bne.n	b978 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    b8de:	2200      	movs	r2, #0
    b8e0:	2300      	movs	r3, #0
    b8e2:	482d      	ldr	r0, [pc, #180]	; (b998 <hci_tx_thread+0x124>)
    b8e4:	f011 fe2c 	bl	1d540 <net_buf_get>
	BT_ASSERT(buf);
    b8e8:	4604      	mov	r4, r0
    b8ea:	b958      	cbnz	r0, b904 <hci_tx_thread+0x90>
    b8ec:	f44f 6218 	mov.w	r2, #2432	; 0x980
    b8f0:	4641      	mov	r1, r8
    b8f2:	4828      	ldr	r0, [pc, #160]	; (b994 <hci_tx_thread+0x120>)
    b8f4:	f00f fd0c 	bl	1b310 <assert_print>
    b8f8:	4040      	eors	r0, r0
    b8fa:	f380 8811 	msr	BASEPRI, r0
    b8fe:	f04f 0003 	mov.w	r0, #3
    b902:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    b904:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b9b4 <hci_tx_thread+0x140>
	return z_impl_k_sem_take(sem, timeout);
    b908:	f04f 33ff 	mov.w	r3, #4294967295
    b90c:	f04f 32ff 	mov.w	r2, #4294967295
    b910:	4822      	ldr	r0, [pc, #136]	; (b99c <hci_tx_thread+0x128>)
    b912:	f00b f8a5 	bl	16a60 <z_impl_k_sem_take>
    b916:	f8db 30f0 	ldr.w	r3, [fp, #240]	; 0xf0
    b91a:	b153      	cbz	r3, b932 <hci_tx_thread+0xbe>
		LOG_ERR("Uncleared pending sent_cmd");
    b91c:	2145      	movs	r1, #69	; 0x45
    b91e:	4820      	ldr	r0, [pc, #128]	; (b9a0 <hci_tx_thread+0x12c>)
    b920:	f00f fd0a 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
    b924:	f8db 00f0 	ldr.w	r0, [fp, #240]	; 0xf0
    b928:	f005 fa6a 	bl	10e00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    b92c:	2300      	movs	r3, #0
    b92e:	f8cb 30f0 	str.w	r3, [fp, #240]	; 0xf0
	bt_dev.sent_cmd = net_buf_ref(buf);
    b932:	4620      	mov	r0, r4
    b934:	f005 faa6 	bl	10e84 <net_buf_ref>
    b938:	f8cb 00f0 	str.w	r0, [fp, #240]	; 0xf0
	err = bt_send(buf);
    b93c:	4620      	mov	r0, r4
    b93e:	f7ff fe95 	bl	b66c <bt_send>
	if (err) {
    b942:	4602      	mov	r2, r0
    b944:	b1a8      	cbz	r0, b972 <hci_tx_thread+0xfe>
		LOG_ERR("Unable to send to driver (err %d)", err);
    b946:	2145      	movs	r1, #69	; 0x45
    b948:	4816      	ldr	r0, [pc, #88]	; (b9a4 <hci_tx_thread+0x130>)
    b94a:	f00f fcf5 	bl	1b338 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
    b94e:	4813      	ldr	r0, [pc, #76]	; (b99c <hci_tx_thread+0x128>)
    b950:	f00b f84a 	bl	169e8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    b954:	4620      	mov	r0, r4
    b956:	f005 f879 	bl	10a4c <net_buf_id>
    b95a:	220c      	movs	r2, #12
    b95c:	4b12      	ldr	r3, [pc, #72]	; (b9a8 <hci_tx_thread+0x134>)
    b95e:	211f      	movs	r1, #31
    b960:	fb02 3000 	mla	r0, r2, r0, r3
    b964:	4622      	mov	r2, r4
    b966:	8840      	ldrh	r0, [r0, #2]
    b968:	f7ff f96c 	bl	ac44 <hci_cmd_done>
		net_buf_unref(buf);
    b96c:	4620      	mov	r0, r4
    b96e:	f005 fa47 	bl	10e00 <net_buf_unref>
	for (; count; ev++, count--) {
    b972:	3614      	adds	r6, #20
    b974:	3d01      	subs	r5, #1
    b976:	e7a4      	b.n	b8c2 <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    b978:	2b01      	cmp	r3, #1
    b97a:	d1fa      	bne.n	b972 <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
    b97c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    b97e:	3838      	subs	r0, #56	; 0x38
    b980:	f002 fe78 	bl	e674 <bt_conn_process_tx>
    b984:	e7f5      	b.n	b972 <hci_tx_thread+0xfe>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    b986:	2157      	movs	r1, #87	; 0x57
    b988:	4650      	mov	r0, sl
    b98a:	f00f fcd5 	bl	1b338 <z_log_minimal_printk>
    b98e:	e7f0      	b.n	b972 <hci_tx_thread+0xfe>
    b990:	20000320 	.word	0x20000320
    b994:	000221f8 	.word	0x000221f8
    b998:	20000104 	.word	0x20000104
    b99c:	200000e0 	.word	0x200000e0
    b9a0:	000232d8 	.word	0x000232d8
    b9a4:	0002320b 	.word	0x0002320b
    b9a8:	20006958 	.word	0x20006958
    b9ac:	00022f89 	.word	0x00022f89
    b9b0:	000232f8 	.word	0x000232f8
    b9b4:	20000008 	.word	0x20000008

0000b9b8 <hci_event_prio>:
{
    b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9bc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    b9be:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    b9c2:	4630      	mov	r0, r6
    b9c4:	f011 fdd5 	bl	1d572 <net_buf_simple_headroom>
	state->len = buf->len;
    b9c8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    b9cc:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    b9ce:	f1b8 0f01 	cmp.w	r8, #1
    b9d2:	d80b      	bhi.n	b9ec <hci_event_prio+0x34>
    b9d4:	f640 527b 	movw	r2, #3451	; 0xd7b
    b9d8:	491a      	ldr	r1, [pc, #104]	; (ba44 <hci_event_prio+0x8c>)
    b9da:	481b      	ldr	r0, [pc, #108]	; (ba48 <hci_event_prio+0x90>)
    b9dc:	f00f fc98 	bl	1b310 <assert_print>
    b9e0:	4040      	eors	r0, r0
    b9e2:	f380 8811 	msr	BASEPRI, r0
    b9e6:	f04f 0003 	mov.w	r0, #3
    b9ea:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    b9ec:	4630      	mov	r0, r6
    b9ee:	2102      	movs	r1, #2
    b9f0:	f005 faf2 	bl	10fd8 <net_buf_simple_pull_mem>
    b9f4:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    b9f6:	7800      	ldrb	r0, [r0, #0]
    b9f8:	f010 fb71 	bl	1c0de <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    b9fc:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    b9fe:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ba00:	d40b      	bmi.n	ba1a <hci_event_prio+0x62>
    ba02:	f640 527f 	movw	r2, #3455	; 0xd7f
    ba06:	490f      	ldr	r1, [pc, #60]	; (ba44 <hci_event_prio+0x8c>)
    ba08:	480f      	ldr	r0, [pc, #60]	; (ba48 <hci_event_prio+0x90>)
    ba0a:	f00f fc81 	bl	1b310 <assert_print>
    ba0e:	4040      	eors	r0, r0
    ba10:	f380 8811 	msr	BASEPRI, r0
    ba14:	f04f 0003 	mov.w	r0, #3
    ba18:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    ba1a:	2305      	movs	r3, #5
    ba1c:	4621      	mov	r1, r4
    ba1e:	4a0b      	ldr	r2, [pc, #44]	; (ba4c <hci_event_prio+0x94>)
    ba20:	7838      	ldrb	r0, [r7, #0]
    ba22:	f7ff f807 	bl	aa34 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ba26:	07b3      	lsls	r3, r6, #30
    ba28:	d507      	bpl.n	ba3a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    ba2a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    ba2c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ba30:	fa13 f585 	uxtah	r5, r3, r5
    ba34:	60e5      	str	r5, [r4, #12]
}
    ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    ba3a:	4620      	mov	r0, r4
}
    ba3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    ba40:	f005 b9de 	b.w	10e00 <net_buf_unref>
    ba44:	00022f89 	.word	0x00022f89
    ba48:	000221f8 	.word	0x000221f8
    ba4c:	0001ffec 	.word	0x0001ffec

0000ba50 <bt_recv>:
{
    ba50:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ba52:	7e02      	ldrb	r2, [r0, #24]
    ba54:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    ba56:	2a01      	cmp	r2, #1
    ba58:	d005      	beq.n	ba66 <bt_recv+0x16>
    ba5a:	2a03      	cmp	r2, #3
    ba5c:	d111      	bne.n	ba82 <bt_recv+0x32>
			rx_queue_put(buf);
    ba5e:	f7fe ffcf 	bl	aa00 <rx_queue_put>
		return 0;
    ba62:	2000      	movs	r0, #0
}
    ba64:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ba66:	68c3      	ldr	r3, [r0, #12]
    ba68:	7818      	ldrb	r0, [r3, #0]
    ba6a:	f010 fb38 	bl	1c0de <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ba6e:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ba70:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ba72:	d502      	bpl.n	ba7a <bt_recv+0x2a>
			hci_event_prio(buf);
    ba74:	4620      	mov	r0, r4
    ba76:	f7ff ff9f 	bl	b9b8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ba7a:	07ab      	lsls	r3, r5, #30
    ba7c:	d5f1      	bpl.n	ba62 <bt_recv+0x12>
			rx_queue_put(buf);
    ba7e:	4620      	mov	r0, r4
    ba80:	e7ed      	b.n	ba5e <bt_recv+0xe>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    ba82:	2145      	movs	r1, #69	; 0x45
    ba84:	4804      	ldr	r0, [pc, #16]	; (ba98 <bt_recv+0x48>)
    ba86:	f00f fc57 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
    ba8a:	4620      	mov	r0, r4
    ba8c:	f005 f9b8 	bl	10e00 <net_buf_unref>
		return -EINVAL;
    ba90:	f06f 0015 	mvn.w	r0, #21
    ba94:	e7e6      	b.n	ba64 <bt_recv+0x14>
    ba96:	bf00      	nop
    ba98:	0002331e 	.word	0x0002331e

0000ba9c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    ba9c:	4a08      	ldr	r2, [pc, #32]	; (bac0 <bt_hci_driver_register+0x24>)
{
    ba9e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    baa0:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
    baa4:	b930      	cbnz	r0, bab4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    baa6:	68d9      	ldr	r1, [r3, #12]
    baa8:	b139      	cbz	r1, baba <bt_hci_driver_register+0x1e>
    baaa:	6959      	ldr	r1, [r3, #20]
    baac:	b129      	cbz	r1, baba <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    baae:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	return 0;
    bab2:	4770      	bx	lr
		return -EALREADY;
    bab4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bab8:	4770      	bx	lr
		return -EINVAL;
    baba:	f06f 0015 	mvn.w	r0, #21
}
    babe:	4770      	bx	lr
    bac0:	20000008 	.word	0x20000008

0000bac4 <bt_finalize_init>:
{
    bac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    bac6:	2104      	movs	r1, #4
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    bac8:	4c22      	ldr	r4, [pc, #136]	; (bb54 <bt_finalize_init+0x90>)
    baca:	4823      	ldr	r0, [pc, #140]	; (bb58 <bt_finalize_init+0x94>)
    bacc:	f010 fb1a 	bl	1c104 <atomic_or>
		bt_le_scan_update(false);
    bad0:	2000      	movs	r0, #0
    bad2:	f001 fba9 	bl	d228 <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    bad6:	4d21      	ldr	r5, [pc, #132]	; (bb5c <bt_finalize_init+0x98>)
    bad8:	79e2      	ldrb	r2, [r4, #7]
    bada:	4b21      	ldr	r3, [pc, #132]	; (bb60 <bt_finalize_init+0x9c>)
    badc:	4620      	mov	r0, r4
    bade:	2a01      	cmp	r2, #1
    bae0:	bf88      	it	hi
    bae2:	461d      	movhi	r5, r3
    bae4:	f7fe fe04 	bl	a6f0 <bt_addr_le_str>
    bae8:	462a      	mov	r2, r5
    baea:	4603      	mov	r3, r0
    baec:	2149      	movs	r1, #73	; 0x49
    baee:	481d      	ldr	r0, [pc, #116]	; (bb64 <bt_finalize_init+0xa0>)
    baf0:	f00f fc22 	bl	1b338 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
    baf4:	4626      	mov	r6, r4
    baf6:	2501      	movs	r5, #1
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    baf8:	4f1b      	ldr	r7, [pc, #108]	; (bb68 <bt_finalize_init+0xa4>)
	for (i = 1; i < bt_dev.id_count; i++) {
    bafa:	79e3      	ldrb	r3, [r4, #7]
    bafc:	3607      	adds	r6, #7
    bafe:	429d      	cmp	r5, r3
    bb00:	db1d      	blt.n	bb3e <bt_finalize_init+0x7a>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    bb02:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
    bb06:	4628      	mov	r0, r5
    bb08:	f7fe ff00 	bl	a90c <ver_str>
    bb0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    bb0e:	4602      	mov	r2, r0
    bb10:	9301      	str	r3, [sp, #4]
    bb12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bb14:	2149      	movs	r1, #73	; 0x49
    bb16:	9300      	str	r3, [sp, #0]
    bb18:	4814      	ldr	r0, [pc, #80]	; (bb6c <bt_finalize_init+0xa8>)
    bb1a:	462b      	mov	r3, r5
    bb1c:	f00f fc0c 	bl	1b338 <z_log_minimal_printk>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    bb20:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
    bb24:	4628      	mov	r0, r5
    bb26:	f7fe fef1 	bl	a90c <ver_str>
    bb2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    bb2c:	4602      	mov	r2, r0
    bb2e:	9300      	str	r3, [sp, #0]
    bb30:	2149      	movs	r1, #73	; 0x49
    bb32:	462b      	mov	r3, r5
    bb34:	480e      	ldr	r0, [pc, #56]	; (bb70 <bt_finalize_init+0xac>)
    bb36:	f00f fbff 	bl	1b338 <z_log_minimal_printk>
}
    bb3a:	b003      	add	sp, #12
    bb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    bb3e:	4630      	mov	r0, r6
    bb40:	f7fe fdd6 	bl	a6f0 <bt_addr_le_str>
    bb44:	462a      	mov	r2, r5
    bb46:	4603      	mov	r3, r0
    bb48:	2149      	movs	r1, #73	; 0x49
    bb4a:	4638      	mov	r0, r7
    bb4c:	f00f fbf4 	bl	1b338 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
    bb50:	3501      	adds	r5, #1
    bb52:	e7d2      	b.n	bafa <bt_finalize_init+0x36>
    bb54:	20000008 	.word	0x20000008
    bb58:	20000090 	.word	0x20000090
    bb5c:	00024616 	.word	0x00024616
    bb60:	00023337 	.word	0x00023337
    bb64:	0002333b 	.word	0x0002333b
    bb68:	0002334f 	.word	0x0002334f
    bb6c:	00023365 	.word	0x00023365
    bb70:	000233a8 	.word	0x000233a8

0000bb74 <bt_init>:
{
    bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    bb76:	4d5e      	ldr	r5, [pc, #376]	; (bcf0 <bt_init+0x17c>)
{
    bb78:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    bb7a:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    bb7e:	6899      	ldr	r1, [r3, #8]
    bb80:	f011 0101 	ands.w	r1, r1, #1
    bb84:	d11d      	bne.n	bbc2 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    bb86:	f640 4003 	movw	r0, #3075	; 0xc03
    bb8a:	aa05      	add	r2, sp, #20
    bb8c:	f7ff fa66 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    bb90:	4604      	mov	r4, r0
    bb92:	2800      	cmp	r0, #0
    bb94:	f040 80a9 	bne.w	bcea <bt_init+0x176>
		hci_reset_complete(rsp);
    bb98:	9c05      	ldr	r4, [sp, #20]
	uint8_t status = buf->data[0];
    bb9a:	68e3      	ldr	r3, [r4, #12]
	if (status) {
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	b96b      	cbnz	r3, bbbc <bt_init+0x48>
		bt_scan_reset();
    bba0:	f001 fb3a 	bl	d218 <bt_scan_reset>
    bba4:	f105 0388 	add.w	r3, r5, #136	; 0x88
    bba8:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bbac:	f002 0209 	and.w	r2, r2, #9
    bbb0:	e8d3 1fef 	ldaex	r1, [r3]
    bbb4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    bbb8:	2800      	cmp	r0, #0
    bbba:	d1f9      	bne.n	bbb0 <bt_init+0x3c>
		net_buf_unref(rsp);
    bbbc:	4620      	mov	r0, r4
    bbbe:	f005 f91f 	bl	10e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    bbc2:	2100      	movs	r1, #0
    bbc4:	f241 0003 	movw	r0, #4099	; 0x1003
    bbc8:	aa05      	add	r2, sp, #20
    bbca:	f7ff fa47 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bbce:	4604      	mov	r4, r0
    bbd0:	2800      	cmp	r0, #0
    bbd2:	f040 808a 	bne.w	bcea <bt_init+0x176>
	read_local_features_complete(rsp);
    bbd6:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    bbd8:	4e46      	ldr	r6, [pc, #280]	; (bcf4 <bt_init+0x180>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    bbda:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    bbdc:	f8d2 0001 	ldr.w	r0, [r2, #1]
    bbe0:	f8d2 1005 	ldr.w	r1, [r2, #5]
    bbe4:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    bbe6:	4618      	mov	r0, r3
    bbe8:	f005 f90a 	bl	10e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    bbec:	4621      	mov	r1, r4
    bbee:	f241 0001 	movw	r0, #4097	; 0x1001
    bbf2:	aa05      	add	r2, sp, #20
    bbf4:	f7ff fa32 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bbf8:	4604      	mov	r4, r0
    bbfa:	2800      	cmp	r0, #0
    bbfc:	d175      	bne.n	bcea <bt_init+0x176>
	read_local_ver_complete(rsp);
    bbfe:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    bc00:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    bc02:	785a      	ldrb	r2, [r3, #1]
    bc04:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    bc08:	885a      	ldrh	r2, [r3, #2]
    bc0a:	84ea      	strh	r2, [r5, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
    bc0c:	791a      	ldrb	r2, [r3, #4]
    bc0e:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    bc12:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    bc16:	852a      	strh	r2, [r5, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    bc18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    bc1c:	856b      	strh	r3, [r5, #42]	; 0x2a
	net_buf_unref(rsp);
    bc1e:	f005 f8ef 	bl	10e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    bc22:	4621      	mov	r1, r4
    bc24:	f241 0002 	movw	r0, #4098	; 0x1002
    bc28:	aa05      	add	r2, sp, #20
    bc2a:	f7ff fa17 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bc2e:	4604      	mov	r4, r0
    bc30:	2800      	cmp	r0, #0
    bc32:	d15a      	bne.n	bcea <bt_init+0x176>
	read_supported_commands_complete(rsp);
    bc34:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    bc36:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    bc38:	1c53      	adds	r3, r2, #1
    bc3a:	3241      	adds	r2, #65	; 0x41
    bc3c:	4634      	mov	r4, r6
    bc3e:	6818      	ldr	r0, [r3, #0]
    bc40:	6859      	ldr	r1, [r3, #4]
    bc42:	3308      	adds	r3, #8
    bc44:	c403      	stmia	r4!, {r0, r1}
    bc46:	4293      	cmp	r3, r2
    bc48:	4626      	mov	r6, r4
    bc4a:	d1f7      	bne.n	bc3c <bt_init+0xc8>
	net_buf_unref(rsp);
    bc4c:	4638      	mov	r0, r7
    bc4e:	f005 f8d7 	bl	10e00 <net_buf_unref>
		err = prng_init();
    bc52:	f001 fde5 	bl	d820 <prng_init>
		if (err) {
    bc56:	4604      	mov	r4, r0
    bc58:	2800      	cmp	r0, #0
    bc5a:	d146      	bne.n	bcea <bt_init+0x176>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    bc5c:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    bc60:	069f      	lsls	r7, r3, #26
    bc62:	d40e      	bmi.n	bc82 <bt_init+0x10e>
		LOG_WRN("Controller to host flow control not supported");
    bc64:	2157      	movs	r1, #87	; 0x57
    bc66:	4824      	ldr	r0, [pc, #144]	; (bcf8 <bt_init+0x184>)
    bc68:	f00f fb66 	bl	1b338 <z_log_minimal_printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    bc6c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    bc70:	065e      	lsls	r6, r3, #25
    bc72:	d445      	bmi.n	bd00 <bt_init+0x18c>
		LOG_ERR("Non-LE capable controller detected!");
    bc74:	2145      	movs	r1, #69	; 0x45
    bc76:	4821      	ldr	r0, [pc, #132]	; (bcfc <bt_init+0x188>)
    bc78:	f00f fb5e 	bl	1b338 <z_log_minimal_printk>
		return -ENODEV;
    bc7c:	f06f 0412 	mvn.w	r4, #18
    bc80:	e033      	b.n	bcea <bt_init+0x176>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    bc82:	2107      	movs	r1, #7
    bc84:	f640 4033 	movw	r0, #3123	; 0xc33
    bc88:	f7ff f99e 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    bc8c:	4606      	mov	r6, r0
    bc8e:	2800      	cmp	r0, #0
    bc90:	f000 811d 	beq.w	bece <bt_init+0x35a>
	return net_buf_simple_add(&buf->b, len);
    bc94:	2107      	movs	r1, #7
    bc96:	300c      	adds	r0, #12
    bc98:	f005 f9b8 	bl	1100c <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    bc9c:	231b      	movs	r3, #27
    bc9e:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    bca0:	2306      	movs	r3, #6
    bca2:	f8c0 4002 	str.w	r4, [r0, #2]
    bca6:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    bca8:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    bcaa:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    bcac:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    bcae:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    bcb0:	4631      	mov	r1, r6
    bcb2:	f640 4033 	movw	r0, #3123	; 0xc33
    bcb6:	f7ff f9d1 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bcba:	4604      	mov	r4, r0
    bcbc:	b9a8      	cbnz	r0, bcea <bt_init+0x176>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    bcbe:	2101      	movs	r1, #1
    bcc0:	f640 4031 	movw	r0, #3121	; 0xc31
    bcc4:	f7ff f980 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    bcc8:	4606      	mov	r6, r0
    bcca:	2800      	cmp	r0, #0
    bccc:	f000 80ff 	beq.w	bece <bt_init+0x35a>
	return net_buf_simple_add_u8(&buf->b, val);
    bcd0:	2101      	movs	r1, #1
    bcd2:	300c      	adds	r0, #12
    bcd4:	f011 fc65 	bl	1d5a2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    bcd8:	4622      	mov	r2, r4
    bcda:	4631      	mov	r1, r6
    bcdc:	f640 4031 	movw	r0, #3121	; 0xc31
    bce0:	f7ff f9bc 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bce4:	4604      	mov	r4, r0
    bce6:	2800      	cmp	r0, #0
    bce8:	d0c0      	beq.n	bc6c <bt_init+0xf8>
}
    bcea:	4620      	mov	r0, r4
    bcec:	b007      	add	sp, #28
    bcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcf0:	20000008 	.word	0x20000008
    bcf4:	20000034 	.word	0x20000034
    bcf8:	000233d4 	.word	0x000233d4
    bcfc:	00023407 	.word	0x00023407
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    bd00:	2100      	movs	r1, #0
    bd02:	f242 0003 	movw	r0, #8195	; 0x2003
    bd06:	aa05      	add	r2, sp, #20
    bd08:	f7ff f9a8 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bd0c:	4604      	mov	r4, r0
    bd0e:	2800      	cmp	r0, #0
    bd10:	d1eb      	bne.n	bcea <bt_init+0x176>
	read_le_features_complete(rsp);
    bd12:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    bd14:	4ebd      	ldr	r6, [pc, #756]	; (c00c <bt_init+0x498>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    bd16:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    bd18:	f8d2 0001 	ldr.w	r0, [r2, #1]
    bd1c:	f8d2 1005 	ldr.w	r1, [r2, #5]
    bd20:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    bd22:	4618      	mov	r0, r3
    bd24:	f005 f86c 	bl	10e00 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    bd28:	4621      	mov	r1, r4
    bd2a:	f242 0002 	movw	r0, #8194	; 0x2002
    bd2e:	aa05      	add	r2, sp, #20
    bd30:	f7ff f994 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    bd34:	4604      	mov	r4, r0
    bd36:	2800      	cmp	r0, #0
    bd38:	d1d7      	bne.n	bcea <bt_init+0x176>
		le_read_buffer_size_complete(rsp);
    bd3a:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    bd3c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    bd3e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    bd42:	b291      	uxth	r1, r2
    bd44:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	if (!bt_dev.le.acl_mtu) {
    bd48:	b129      	cbz	r1, bd56 <bt_init+0x1e2>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    bd4a:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    bd4c:	4611      	mov	r1, r2
    bd4e:	f106 0028 	add.w	r0, r6, #40	; 0x28
    bd52:	f013 f979 	bl	1f048 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    bd56:	4620      	mov	r0, r4
    bd58:	f005 f852 	bl	10e00 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    bd5c:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
    bd60:	f016 0620 	ands.w	r6, r6, #32
    bd64:	d118      	bne.n	bd98 <bt_init+0x224>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    bd66:	2102      	movs	r1, #2
    bd68:	f640 406d 	movw	r0, #3181	; 0xc6d
    bd6c:	f7ff f92c 	bl	afc8 <bt_hci_cmd_create>
		if (!buf) {
    bd70:	4604      	mov	r4, r0
    bd72:	2800      	cmp	r0, #0
    bd74:	f000 80ab 	beq.w	bece <bt_init+0x35a>
	return net_buf_simple_add(&buf->b, len);
    bd78:	2102      	movs	r1, #2
    bd7a:	300c      	adds	r0, #12
    bd7c:	f005 f946 	bl	1100c <net_buf_simple_add>
		cp_le->le = 0x01;
    bd80:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    bd82:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    bd84:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    bd86:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    bd88:	4632      	mov	r2, r6
    bd8a:	f640 406d 	movw	r0, #3181	; 0xc6d
    bd8e:	f7ff f965 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    bd92:	4604      	mov	r4, r0
    bd94:	2800      	cmp	r0, #0
    bd96:	d1a8      	bne.n	bcea <bt_init+0x176>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    bd98:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
    bd9c:	071c      	lsls	r4, r3, #28
    bd9e:	d512      	bpl.n	bdc6 <bt_init+0x252>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    bda0:	2100      	movs	r1, #0
    bda2:	f242 001c 	movw	r0, #8220	; 0x201c
    bda6:	aa05      	add	r2, sp, #20
    bda8:	f7ff f958 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    bdac:	4604      	mov	r4, r0
    bdae:	2800      	cmp	r0, #0
    bdb0:	d19b      	bne.n	bcea <bt_init+0x176>
		le_read_supp_states_complete(rsp);
    bdb2:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    bdb4:	68c3      	ldr	r3, [r0, #12]
    bdb6:	f8d3 2001 	ldr.w	r2, [r3, #1]
    bdba:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    bdbe:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
		net_buf_unref(rsp);
    bdc2:	f005 f81d 	bl	10e00 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    bdc6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    bdca:	0698      	lsls	r0, r3, #26
    bdcc:	d523      	bpl.n	be16 <bt_init+0x2a2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    bdce:	f10d 0112 	add.w	r1, sp, #18
    bdd2:	a804      	add	r0, sp, #16
    bdd4:	f7ff f9a2 	bl	b11c <hci_le_read_max_data_len>
		if (err) {
    bdd8:	4604      	mov	r4, r0
    bdda:	2800      	cmp	r0, #0
    bddc:	d185      	bne.n	bcea <bt_init+0x176>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    bdde:	2104      	movs	r1, #4
    bde0:	f242 0024 	movw	r0, #8228	; 0x2024
    bde4:	f7ff f8f0 	bl	afc8 <bt_hci_cmd_create>
		if (!buf) {
    bde8:	4606      	mov	r6, r0
    bdea:	2800      	cmp	r0, #0
    bdec:	d06f      	beq.n	bece <bt_init+0x35a>
    bdee:	2104      	movs	r1, #4
    bdf0:	300c      	adds	r0, #12
    bdf2:	f005 f90b 	bl	1100c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    bdf6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    bdfa:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    bdfc:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    bdfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    be02:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    be04:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    be06:	f242 0024 	movw	r0, #8228	; 0x2024
    be0a:	f7ff f927 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    be0e:	4604      	mov	r4, r0
    be10:	2800      	cmp	r0, #0
    be12:	f47f af6a 	bne.w	bcea <bt_init+0x176>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    be16:	2108      	movs	r1, #8
    be18:	f242 0001 	movw	r0, #8193	; 0x2001
    be1c:	f7ff f8d4 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    be20:	4604      	mov	r4, r0
    be22:	2800      	cmp	r0, #0
    be24:	d053      	beq.n	bece <bt_init+0x35a>
    be26:	2108      	movs	r1, #8
    be28:	300c      	adds	r0, #12
    be2a:	f005 f8ef 	bl	1100c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    be2e:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    be32:	4977      	ldr	r1, [pc, #476]	; (c010 <bt_init+0x49c>)
    be34:	f012 0f02 	tst.w	r2, #2
    be38:	4b76      	ldr	r3, [pc, #472]	; (c014 <bt_init+0x4a0>)
    be3a:	bf18      	it	ne
    be3c:	460b      	movne	r3, r1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    be3e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    be40:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    be44:	bf48      	it	mi
    be46:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    be4a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    be4e:	bf18      	it	ne
    be50:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    be54:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    be56:	f3c3 2307 	ubfx	r3, r3, #8, #8
    be5a:	2200      	movs	r2, #0
    be5c:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    be5e:	2307      	movs	r3, #7
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    be60:	4621      	mov	r1, r4
    be62:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    be64:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    be66:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    be68:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    be6a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    be6c:	71c2      	strb	r2, [r0, #7]
    be6e:	f242 0001 	movw	r0, #8193	; 0x2001
    be72:	f7ff f8f3 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    be76:	4604      	mov	r4, r0
    be78:	2800      	cmp	r0, #0
    be7a:	f47f af36 	bne.w	bcea <bt_init+0x176>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    be7e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	if (bt_dev.le.acl_mtu) {
    be82:	f8b5 10bc 	ldrh.w	r1, [r5, #188]	; 0xbc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    be86:	069a      	lsls	r2, r3, #26
    be88:	d424      	bmi.n	bed4 <bt_init+0x360>
	if (bt_dev.le.acl_mtu) {
    be8a:	b9c9      	cbnz	r1, bec0 <bt_init+0x34c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    be8c:	f241 0005 	movw	r0, #4101	; 0x1005
    be90:	aa05      	add	r2, sp, #20
    be92:	f7ff f8e3 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    be96:	4604      	mov	r4, r0
    be98:	2800      	cmp	r0, #0
    be9a:	f47f af26 	bne.w	bcea <bt_init+0x176>
	if (bt_dev.le.acl_mtu) {
    be9e:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
	read_buffer_size_complete(rsp);
    bea2:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    bea4:	b94b      	cbnz	r3, beba <bt_init+0x346>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    bea6:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    bea8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    beac:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    beb0:	889a      	ldrh	r2, [r3, #4]
    beb2:	4859      	ldr	r0, [pc, #356]	; (c018 <bt_init+0x4a4>)
    beb4:	4611      	mov	r1, r2
    beb6:	f013 f8c7 	bl	1f048 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    beba:	4620      	mov	r0, r4
    bebc:	f004 ffa0 	bl	10e00 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    bec0:	2108      	movs	r1, #8
    bec2:	f640 4001 	movw	r0, #3073	; 0xc01
    bec6:	f7ff f87f 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    beca:	4604      	mov	r4, r0
    becc:	b958      	cbnz	r0, bee6 <bt_init+0x372>
		return -ENOBUFS;
    bece:	f06f 0468 	mvn.w	r4, #104	; 0x68
    bed2:	e70a      	b.n	bcea <bt_init+0x176>
	else if (!bt_dev.le.acl_mtu) {
    bed4:	2900      	cmp	r1, #0
    bed6:	d1f3      	bne.n	bec0 <bt_init+0x34c>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    bed8:	2145      	movs	r1, #69	; 0x45
    beda:	4850      	ldr	r0, [pc, #320]	; (c01c <bt_init+0x4a8>)
    bedc:	f00f fa2c 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    bee0:	f06f 0404 	mvn.w	r4, #4
    bee4:	e701      	b.n	bcea <bt_init+0x176>
    bee6:	2108      	movs	r1, #8
    bee8:	300c      	adds	r0, #12
    beea:	f005 f88f 	bl	1100c <net_buf_simple_add>
	dst[0] = val;
    beee:	2310      	movs	r3, #16
    bef0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    bef2:	2388      	movs	r3, #136	; 0x88
    bef4:	7043      	strb	r3, [r0, #1]
    bef6:	2302      	movs	r3, #2
	dst[0] = val;
    bef8:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    befa:	70c3      	strb	r3, [r0, #3]
    befc:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    befe:	4621      	mov	r1, r4
	dst[0] = val;
    bf00:	7082      	strb	r2, [r0, #2]
    bf02:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    bf04:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    bf06:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    bf08:	71c3      	strb	r3, [r0, #7]
    bf0a:	f640 4001 	movw	r0, #3073	; 0xc01
    bf0e:	f7ff f8a5 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bf12:	4604      	mov	r4, r0
    bf14:	2800      	cmp	r0, #0
    bf16:	f47f aee8 	bne.w	bcea <bt_init+0x176>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    bf1a:	4601      	mov	r1, r0
    bf1c:	aa05      	add	r2, sp, #20
    bf1e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    bf22:	f7ff f89b 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bf26:	b190      	cbz	r0, bf4e <bt_init+0x3da>
		LOG_WRN("Vendor HCI extensions not available");
    bf28:	2157      	movs	r1, #87	; 0x57
    bf2a:	483d      	ldr	r0, [pc, #244]	; (c020 <bt_init+0x4ac>)
			LOG_WRN("Failed to read supported vendor features");
    bf2c:	f00f fa04 	bl	1b338 <z_log_minimal_printk>
	err = bt_id_init();
    bf30:	f000 fb40 	bl	c5b4 <bt_id_init>
	if (err) {
    bf34:	4604      	mov	r4, r0
    bf36:	2800      	cmp	r0, #0
    bf38:	f47f aed7 	bne.w	bcea <bt_init+0x176>
		err = bt_conn_init();
    bf3c:	f002 fc0a 	bl	e754 <bt_conn_init>
		if (err) {
    bf40:	4604      	mov	r4, r0
    bf42:	2800      	cmp	r0, #0
    bf44:	f47f aed1 	bne.w	bcea <bt_init+0x176>
	bt_finalize_init();
    bf48:	f7ff fdbc 	bl	bac4 <bt_finalize_init>
	return 0;
    bf4c:	e6cd      	b.n	bcea <bt_init+0x176>
	rp.info = (void *)rsp->data;
    bf4e:	9e05      	ldr	r6, [sp, #20]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    bf50:	2149      	movs	r1, #73	; 0x49
	rp.info = (void *)rsp->data;
    bf52:	68f4      	ldr	r4, [r6, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    bf54:	4833      	ldr	r0, [pc, #204]	; (c024 <bt_init+0x4b0>)
    bf56:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    bf5a:	2b03      	cmp	r3, #3
		return plat_str[platform];
    bf5c:	bf96      	itet	ls
    bf5e:	4a32      	ldrls	r2, [pc, #200]	; (c028 <bt_init+0x4b4>)
	return "unknown";
    bf60:	4a32      	ldrhi	r2, [pc, #200]	; (c02c <bt_init+0x4b8>)
		return plat_str[platform];
    bf62:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    bf66:	f00f f9e7 	bl	1b338 <z_log_minimal_printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    bf6a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
    bf6e:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    bf72:	2a02      	cmp	r2, #2
    bf74:	d12a      	bne.n	bfcc <bt_init+0x458>
	if (variant < ARRAY_SIZE(nordic_str)) {
    bf76:	2b03      	cmp	r3, #3
    bf78:	d828      	bhi.n	bfcc <bt_init+0x458>
		return nordic_str[variant];
    bf7a:	4a2d      	ldr	r2, [pc, #180]	; (c030 <bt_init+0x4bc>)
    bf7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    bf80:	2149      	movs	r1, #73	; 0x49
    bf82:	482c      	ldr	r0, [pc, #176]	; (c034 <bt_init+0x4c0>)
    bf84:	f00f f9d8 	bl	1b338 <z_log_minimal_printk>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    bf88:	f8d4 1009 	ldr.w	r1, [r4, #9]
    bf8c:	7963      	ldrb	r3, [r4, #5]
    bf8e:	9102      	str	r1, [sp, #8]
    bf90:	f8b4 1007 	ldrh.w	r1, [r4, #7]
	if (variant < ARRAY_SIZE(var_str)) {
    bf94:	2b03      	cmp	r3, #3
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    bf96:	9101      	str	r1, [sp, #4]
		return var_str[variant];
    bf98:	bf98      	it	ls
    bf9a:	4a27      	ldrls	r2, [pc, #156]	; (c038 <bt_init+0x4c4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    bf9c:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    bf9e:	bf94      	ite	ls
    bfa0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    bfa4:	4a21      	ldrhi	r2, [pc, #132]	; (c02c <bt_init+0x4b8>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    bfa6:	4825      	ldr	r0, [pc, #148]	; (c03c <bt_init+0x4c8>)
    bfa8:	9100      	str	r1, [sp, #0]
    bfaa:	2149      	movs	r1, #73	; 0x49
    bfac:	f00f f9c4 	bl	1b338 <z_log_minimal_printk>
	net_buf_unref(rsp);
    bfb0:	4630      	mov	r0, r6
    bfb2:	f004 ff25 	bl	10e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    bfb6:	2100      	movs	r1, #0
    bfb8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    bfbc:	aa05      	add	r2, sp, #20
    bfbe:	f7ff f84d 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    bfc2:	4604      	mov	r4, r0
    bfc4:	b120      	cbz	r0, bfd0 <bt_init+0x45c>
		LOG_WRN("Failed to read supported vendor commands");
    bfc6:	2157      	movs	r1, #87	; 0x57
    bfc8:	481d      	ldr	r0, [pc, #116]	; (c040 <bt_init+0x4cc>)
    bfca:	e7af      	b.n	bf2c <bt_init+0x3b8>
		return "unknown";
    bfcc:	4a17      	ldr	r2, [pc, #92]	; (c02c <bt_init+0x4b8>)
    bfce:	e7d7      	b.n	bf80 <bt_init+0x40c>
	rp.cmds = (void *)rsp->data;
    bfd0:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    bfd2:	68c3      	ldr	r3, [r0, #12]
    bfd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    bfd8:	f8a5 3075 	strh.w	r3, [r5, #117]	; 0x75
	net_buf_unref(rsp);
    bfdc:	f004 ff10 	bl	10e00 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    bfe0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    bfe4:	075b      	lsls	r3, r3, #29
    bfe6:	d5a3      	bpl.n	bf30 <bt_init+0x3bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    bfe8:	4621      	mov	r1, r4
    bfea:	f64f 4003 	movw	r0, #64515	; 0xfc03
    bfee:	aa05      	add	r2, sp, #20
    bff0:	f7ff f834 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    bff4:	b110      	cbz	r0, bffc <bt_init+0x488>
			LOG_WRN("Failed to read supported vendor features");
    bff6:	2157      	movs	r1, #87	; 0x57
    bff8:	4812      	ldr	r0, [pc, #72]	; (c044 <bt_init+0x4d0>)
    bffa:	e797      	b.n	bf2c <bt_init+0x3b8>
		rp.feat = (void *)rsp->data;
    bffc:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    bffe:	68c3      	ldr	r3, [r0, #12]
    c000:	785b      	ldrb	r3, [r3, #1]
    c002:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
		net_buf_unref(rsp);
    c006:	f004 fefb 	bl	10e00 <net_buf_unref>
    c00a:	e791      	b.n	bf30 <bt_init+0x3bc>
    c00c:	20000098 	.word	0x20000098
    c010:	0007122e 	.word	0x0007122e
    c014:	0007120e 	.word	0x0007120e
    c018:	200000c8 	.word	0x200000c8
    c01c:	00023430 	.word	0x00023430
    c020:	00023458 	.word	0x00023458
    c024:	00023481 	.word	0x00023481
    c028:	0001ffdc 	.word	0x0001ffdc
    c02c:	00022e94 	.word	0x00022e94
    c030:	0001ffcc 	.word	0x0001ffcc
    c034:	0002349f 	.word	0x0002349f
    c038:	0001ffbc 	.word	0x0001ffbc
    c03c:	000234bc 	.word	0x000234bc
    c040:	000234ee 	.word	0x000234ee
    c044:	0002351c 	.word	0x0002351c

0000c048 <init_work>:
{
    c048:	b510      	push	{r4, lr}
	err = bt_init();
    c04a:	f7ff fd93 	bl	bb74 <bt_init>
	if (ready_cb) {
    c04e:	4b03      	ldr	r3, [pc, #12]	; (c05c <init_work+0x14>)
    c050:	681b      	ldr	r3, [r3, #0]
    c052:	b113      	cbz	r3, c05a <init_work+0x12>
}
    c054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    c058:	4718      	bx	r3
}
    c05a:	bd10      	pop	{r4, pc}
    c05c:	200069d0 	.word	0x200069d0

0000c060 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    c060:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    c062:	4d33      	ldr	r5, [pc, #204]	; (c130 <bt_enable+0xd0>)
{
    c064:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    c066:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    c06a:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    c06c:	b943      	cbnz	r3, c080 <bt_enable+0x20>
		LOG_ERR("No HCI driver registered");
    c06e:	2145      	movs	r1, #69	; 0x45
    c070:	4830      	ldr	r0, [pc, #192]	; (c134 <bt_enable+0xd4>)
    c072:	f00f f961 	bl	1b338 <z_log_minimal_printk>
		return -ENODEV;
    c076:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    c07a:	4620      	mov	r0, r4
    c07c:	b008      	add	sp, #32
    c07e:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c080:	f06f 0102 	mvn.w	r1, #2
    c084:	f105 0088 	add.w	r0, r5, #136	; 0x88
    c088:	f010 f853 	bl	1c132 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    c08c:	2101      	movs	r1, #1
    c08e:	f010 f839 	bl	1c104 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c092:	ea10 0401 	ands.w	r4, r0, r1
    c096:	d147      	bne.n	c128 <bt_enable+0xc8>
	ready_cb = cb;
    c098:	4b27      	ldr	r3, [pc, #156]	; (c138 <bt_enable+0xd8>)
    c09a:	601e      	str	r6, [r3, #0]
    c09c:	460a      	mov	r2, r1
    c09e:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    c0a2:	f012 ffd1 	bl	1f048 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    c0a6:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
    c0aa:	f012 ffab 	bl	1f004 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c0ae:	2200      	movs	r2, #0
    c0b0:	2300      	movs	r3, #0
    c0b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c0b6:	f06f 0308 	mvn.w	r3, #8
    c0ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c0be:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c0c2:	e9cd 4400 	strd	r4, r4, [sp]
    c0c6:	4b1d      	ldr	r3, [pc, #116]	; (c13c <bt_enable+0xdc>)
    c0c8:	491d      	ldr	r1, [pc, #116]	; (c140 <bt_enable+0xe0>)
    c0ca:	9404      	str	r4, [sp, #16]
    c0cc:	481d      	ldr	r0, [pc, #116]	; (c144 <bt_enable+0xe4>)
    c0ce:	f00a f85b 	bl	16188 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c0d2:	491d      	ldr	r1, [pc, #116]	; (c148 <bt_enable+0xe8>)
    c0d4:	481b      	ldr	r0, [pc, #108]	; (c144 <bt_enable+0xe4>)
    c0d6:	f012 ff58 	bl	1ef8a <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    c0da:	481c      	ldr	r0, [pc, #112]	; (c14c <bt_enable+0xec>)
    c0dc:	f00a ff80 	bl	16fe0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    c0e0:	f06f 0307 	mvn.w	r3, #7
    c0e4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    c0e8:	4919      	ldr	r1, [pc, #100]	; (c150 <bt_enable+0xf0>)
    c0ea:	4818      	ldr	r0, [pc, #96]	; (c14c <bt_enable+0xec>)
    c0ec:	9400      	str	r4, [sp, #0]
    c0ee:	f00a ff8d 	bl	1700c <k_work_queue_start>
    c0f2:	4918      	ldr	r1, [pc, #96]	; (c154 <bt_enable+0xf4>)
    c0f4:	4815      	ldr	r0, [pc, #84]	; (c14c <bt_enable+0xec>)
    c0f6:	f012 ff48 	bl	1ef8a <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    c0fa:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    c0fe:	68db      	ldr	r3, [r3, #12]
    c100:	4798      	blx	r3
	if (err) {
    c102:	4604      	mov	r4, r0
    c104:	b128      	cbz	r0, c112 <bt_enable+0xb2>
		LOG_ERR("HCI driver open failed (%d)", err);
    c106:	4602      	mov	r2, r0
    c108:	2145      	movs	r1, #69	; 0x45
    c10a:	4813      	ldr	r0, [pc, #76]	; (c158 <bt_enable+0xf8>)
    c10c:	f00f f914 	bl	1b338 <z_log_minimal_printk>
		return err;
    c110:	e7b3      	b.n	c07a <bt_enable+0x1a>
	if (!cb) {
    c112:	b926      	cbnz	r6, c11e <bt_enable+0xbe>
}
    c114:	b008      	add	sp, #32
    c116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    c11a:	f7ff bd2b 	b.w	bb74 <bt_init>
	k_work_submit(&bt_dev.init);
    c11e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    c122:	f00a ff57 	bl	16fd4 <k_work_submit>
	return 0;
    c126:	e7a8      	b.n	c07a <bt_enable+0x1a>
		return -EALREADY;
    c128:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c12c:	e7a5      	b.n	c07a <bt_enable+0x1a>
    c12e:	bf00      	nop
    c130:	20000008 	.word	0x20000008
    c134:	0002354a 	.word	0x0002354a
    c138:	200069d0 	.word	0x200069d0
    c13c:	0000b875 	.word	0x0000b875
    c140:	20008610 	.word	0x20008610
    c144:	200059a0 	.word	0x200059a0
    c148:	00023568 	.word	0x00023568
    c14c:	20005a78 	.word	0x20005a78
    c150:	20008a10 	.word	0x20008a10
    c154:	0002356e 	.word	0x0002356e
    c158:	00023574 	.word	0x00023574

0000c15c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    c15c:	4800      	ldr	r0, [pc, #0]	; (c160 <bt_get_name+0x4>)
    c15e:	4770      	bx	lr
    c160:	00021fc7 	.word	0x00021fc7

0000c164 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
    c164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c166:	4604      	mov	r4, r0
    c168:	460e      	mov	r6, r1
    c16a:	4617      	mov	r7, r2
	while (ad->len > 1) {
    c16c:	88a3      	ldrh	r3, [r4, #4]
    c16e:	2b01      	cmp	r3, #1
    c170:	d801      	bhi.n	c176 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
    c172:	b003      	add	sp, #12
    c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    c176:	4620      	mov	r0, r4
    c178:	f011 f9eb 	bl	1d552 <net_buf_simple_pull_u8>
		if (len == 0U) {
    c17c:	4605      	mov	r5, r0
    c17e:	2800      	cmp	r0, #0
    c180:	d0f7      	beq.n	c172 <bt_data_parse+0xe>
		if (len > ad->len) {
    c182:	88a3      	ldrh	r3, [r4, #4]
    c184:	4283      	cmp	r3, r0
    c186:	d206      	bcs.n	c196 <bt_data_parse+0x32>
			LOG_WRN("malformed advertising data");
    c188:	2157      	movs	r1, #87	; 0x57
    c18a:	480d      	ldr	r0, [pc, #52]	; (c1c0 <bt_data_parse+0x5c>)
}
    c18c:	b003      	add	sp, #12
    c18e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			LOG_WRN("malformed advertising data");
    c192:	f00f b8d1 	b.w	1b338 <z_log_minimal_printk>
		data.type = net_buf_simple_pull_u8(ad);
    c196:	4620      	mov	r0, r4
    c198:	f011 f9db 	bl	1d552 <net_buf_simple_pull_u8>
		data.data = ad->data;
    c19c:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    c19e:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    c1a2:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    c1a4:	4639      	mov	r1, r7
    c1a6:	4668      	mov	r0, sp
		data.data_len = len - 1;
    c1a8:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    c1ac:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    c1ae:	47b0      	blx	r6
    c1b0:	2800      	cmp	r0, #0
    c1b2:	d0de      	beq.n	c172 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    c1b4:	4629      	mov	r1, r5
    c1b6:	4620      	mov	r0, r4
    c1b8:	f004 fef4 	bl	10fa4 <net_buf_simple_pull>
    c1bc:	e7d6      	b.n	c16c <bt_data_parse+0x8>
    c1be:	bf00      	nop
    c1c0:	00023595 	.word	0x00023595

0000c1c4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1c6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    c1c8:	2500      	movs	r5, #0
    c1ca:	4f09      	ldr	r7, [pc, #36]	; (c1f0 <id_find+0x2c>)
    c1cc:	79fb      	ldrb	r3, [r7, #7]
    c1ce:	b2ec      	uxtb	r4, r5
    c1d0:	42a3      	cmp	r3, r4
    c1d2:	d802      	bhi.n	c1da <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    c1d4:	f06f 0001 	mvn.w	r0, #1
    c1d8:	e009      	b.n	c1ee <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    c1da:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    c1de:	4630      	mov	r0, r6
    c1e0:	4439      	add	r1, r7
    c1e2:	f010 f839 	bl	1c258 <bt_addr_le_eq>
    c1e6:	3501      	adds	r5, #1
    c1e8:	2800      	cmp	r0, #0
    c1ea:	d0ef      	beq.n	c1cc <id_find+0x8>
    c1ec:	4620      	mov	r0, r4
}
    c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1f0:	20000008 	.word	0x20000008

0000c1f4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    c1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c1f6:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c1f8:	460d      	mov	r5, r1
    c1fa:	b171      	cbz	r1, c21a <id_create.constprop.0+0x26>
    c1fc:	4628      	mov	r0, r5
    c1fe:	4912      	ldr	r1, [pc, #72]	; (c248 <id_create.constprop.0+0x54>)
    c200:	f010 f82a 	bl	1c258 <bt_addr_le_eq>
    c204:	b948      	cbnz	r0, c21a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    c206:	4629      	mov	r1, r5
    c208:	4810      	ldr	r0, [pc, #64]	; (c24c <id_create.constprop.0+0x58>)
    c20a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c20e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    c210:	f010 f82f 	bl	1c272 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    c214:	2000      	movs	r0, #0
}
    c216:	b003      	add	sp, #12
    c218:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    c21a:	4668      	mov	r0, sp
    c21c:	f00f ff51 	bl	1c0c2 <bt_addr_le_create_static>
			if (err) {
    c220:	2800      	cmp	r0, #0
    c222:	d1f8      	bne.n	c216 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
    c224:	4668      	mov	r0, sp
    c226:	f7ff ffcd 	bl	c1c4 <id_find>
    c22a:	2800      	cmp	r0, #0
    c22c:	daf5      	bge.n	c21a <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    c22e:	4b07      	ldr	r3, [pc, #28]	; (c24c <id_create.constprop.0+0x58>)
    c230:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    c234:	4669      	mov	r1, sp
    c236:	4418      	add	r0, r3
    c238:	f010 f81b 	bl	1c272 <bt_addr_le_copy>
		if (addr) {
    c23c:	2d00      	cmp	r5, #0
    c23e:	d0e9      	beq.n	c214 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    c240:	4601      	mov	r1, r0
    c242:	4628      	mov	r0, r5
    c244:	e7e4      	b.n	c210 <id_create.constprop.0+0x1c>
    c246:	bf00      	nop
    c248:	00022e27 	.word	0x00022e27
    c24c:	20000008 	.word	0x20000008

0000c250 <set_random_address>:
{
    c250:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    c252:	2206      	movs	r2, #6
    c254:	4911      	ldr	r1, [pc, #68]	; (c29c <set_random_address+0x4c>)
    c256:	4605      	mov	r5, r0
    c258:	f013 f8a4 	bl	1f3a4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    c25c:	b1c8      	cbz	r0, c292 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    c25e:	2106      	movs	r1, #6
    c260:	f242 0005 	movw	r0, #8197	; 0x2005
    c264:	f7fe feb0 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    c268:	4604      	mov	r4, r0
    c26a:	b1a0      	cbz	r0, c296 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c26c:	2206      	movs	r2, #6
    c26e:	4629      	mov	r1, r5
    c270:	300c      	adds	r0, #12
    c272:	f011 f98a 	bl	1d58a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    c276:	2200      	movs	r2, #0
    c278:	4621      	mov	r1, r4
    c27a:	f242 0005 	movw	r0, #8197	; 0x2005
    c27e:	f7fe feed 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    c282:	b938      	cbnz	r0, c294 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    c284:	4805      	ldr	r0, [pc, #20]	; (c29c <set_random_address+0x4c>)
    c286:	4629      	mov	r1, r5
    c288:	f00f ffee 	bl	1c268 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    c28c:	2301      	movs	r3, #1
    c28e:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
    c292:	2000      	movs	r0, #0
}
    c294:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    c296:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c29a:	e7fb      	b.n	c294 <set_random_address+0x44>
    c29c:	20000025 	.word	0x20000025

0000c2a0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    c2a0:	b570      	push	{r4, r5, r6, lr}
    c2a2:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c2a4:	4604      	mov	r4, r0
    c2a6:	b918      	cbnz	r0, c2b0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    c2a8:	b1e5      	cbz	r5, c2e4 <bt_id_create+0x44>
			return -EINVAL;
    c2aa:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    c2ae:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c2b0:	491d      	ldr	r1, [pc, #116]	; (c328 <bt_id_create+0x88>)
    c2b2:	f00f ffd1 	bl	1c258 <bt_addr_le_eq>
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d1f6      	bne.n	c2a8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    c2ba:	7823      	ldrb	r3, [r4, #0]
    c2bc:	2b01      	cmp	r3, #1
    c2be:	d104      	bne.n	c2ca <bt_id_create+0x2a>
    c2c0:	79a3      	ldrb	r3, [r4, #6]
    c2c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c2c6:	2bc0      	cmp	r3, #192	; 0xc0
    c2c8:	d004      	beq.n	c2d4 <bt_id_create+0x34>
			LOG_ERR("Only static random identity address supported");
    c2ca:	2145      	movs	r1, #69	; 0x45
    c2cc:	4817      	ldr	r0, [pc, #92]	; (c32c <bt_id_create+0x8c>)
    c2ce:	f00f f833 	bl	1b338 <z_log_minimal_printk>
			return -EINVAL;
    c2d2:	e7ea      	b.n	c2aa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    c2d4:	4620      	mov	r0, r4
    c2d6:	f7ff ff75 	bl	c1c4 <id_find>
    c2da:	2800      	cmp	r0, #0
    c2dc:	dbe4      	blt.n	c2a8 <bt_id_create+0x8>
			return -EALREADY;
    c2de:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c2e2:	e7e4      	b.n	c2ae <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    c2e4:	4d12      	ldr	r5, [pc, #72]	; (c330 <bt_id_create+0x90>)
    c2e6:	79eb      	ldrb	r3, [r5, #7]
    c2e8:	2b01      	cmp	r3, #1
    c2ea:	d01a      	beq.n	c322 <bt_id_create+0x82>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2ec:	f105 0388 	add.w	r3, r5, #136	; 0x88
    c2f0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c2f4:	07db      	lsls	r3, r3, #31
    c2f6:	d50b      	bpl.n	c310 <bt_id_create+0x70>
	new_id = bt_dev.id_count;
    c2f8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    c2fa:	4621      	mov	r1, r4
    c2fc:	4630      	mov	r0, r6
    c2fe:	f7ff ff79 	bl	c1f4 <id_create.constprop.0>
	if (err) {
    c302:	2800      	cmp	r0, #0
    c304:	d1d3      	bne.n	c2ae <bt_id_create+0xe>
		bt_dev.id_count++;
    c306:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    c308:	4630      	mov	r0, r6
		bt_dev.id_count++;
    c30a:	3301      	adds	r3, #1
    c30c:	71eb      	strb	r3, [r5, #7]
	return new_id;
    c30e:	e7ce      	b.n	c2ae <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    c310:	2c00      	cmp	r4, #0
    c312:	d0ca      	beq.n	c2aa <bt_id_create+0xa>
    c314:	4620      	mov	r0, r4
    c316:	4904      	ldr	r1, [pc, #16]	; (c328 <bt_id_create+0x88>)
    c318:	f00f ff9e 	bl	1c258 <bt_addr_le_eq>
    c31c:	2800      	cmp	r0, #0
    c31e:	d0eb      	beq.n	c2f8 <bt_id_create+0x58>
    c320:	e7c3      	b.n	c2aa <bt_id_create+0xa>
		return -ENOMEM;
    c322:	f06f 000b 	mvn.w	r0, #11
    c326:	e7c2      	b.n	c2ae <bt_id_create+0xe>
    c328:	00022e27 	.word	0x00022e27
    c32c:	000236a7 	.word	0x000236a7
    c330:	20000008 	.word	0x20000008

0000c334 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    c334:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    c336:	4604      	mov	r4, r0
    c338:	b930      	cbnz	r0, c348 <bt_id_read_public_addr+0x14>
		LOG_WRN("Invalid input parameters");
    c33a:	2157      	movs	r1, #87	; 0x57
    c33c:	4817      	ldr	r0, [pc, #92]	; (c39c <bt_id_read_public_addr+0x68>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
    c33e:	f00e fffb 	bl	1b338 <z_log_minimal_printk>
		return 0U;
    c342:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    c344:	b002      	add	sp, #8
    c346:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    c348:	2100      	movs	r1, #0
    c34a:	f241 0009 	movw	r0, #4105	; 0x1009
    c34e:	aa01      	add	r2, sp, #4
    c350:	f7fe fe84 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    c354:	4606      	mov	r6, r0
    c356:	b110      	cbz	r0, c35e <bt_id_read_public_addr+0x2a>
		LOG_WRN("Failed to read public address");
    c358:	2157      	movs	r1, #87	; 0x57
    c35a:	4811      	ldr	r0, [pc, #68]	; (c3a0 <bt_id_read_public_addr+0x6c>)
    c35c:	e7ef      	b.n	c33e <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    c35e:	9b01      	ldr	r3, [sp, #4]
    c360:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c362:	68dd      	ldr	r5, [r3, #12]
    c364:	490f      	ldr	r1, [pc, #60]	; (c3a4 <bt_id_read_public_addr+0x70>)
    c366:	3501      	adds	r5, #1
    c368:	4628      	mov	r0, r5
    c36a:	f013 f81b 	bl	1f3a4 <memcmp>
    c36e:	b918      	cbnz	r0, c378 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
    c370:	9801      	ldr	r0, [sp, #4]
    c372:	f004 fd45 	bl	10e00 <net_buf_unref>
		return 0U;
    c376:	e7e4      	b.n	c342 <bt_id_read_public_addr+0xe>
    c378:	2206      	movs	r2, #6
    c37a:	4628      	mov	r0, r5
    c37c:	490a      	ldr	r1, [pc, #40]	; (c3a8 <bt_id_read_public_addr+0x74>)
    c37e:	f013 f811 	bl	1f3a4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c382:	2800      	cmp	r0, #0
    c384:	d0f4      	beq.n	c370 <bt_id_read_public_addr+0x3c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    c386:	4629      	mov	r1, r5
    c388:	1c60      	adds	r0, r4, #1
    c38a:	f00f ff6d 	bl	1c268 <bt_addr_copy>
	net_buf_unref(rsp);
    c38e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    c390:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    c392:	f004 fd35 	bl	10e00 <net_buf_unref>
	return 1U;
    c396:	2001      	movs	r0, #1
    c398:	e7d4      	b.n	c344 <bt_id_read_public_addr+0x10>
    c39a:	bf00      	nop
    c39c:	000236da 	.word	0x000236da
    c3a0:	000236f8 	.word	0x000236f8
    c3a4:	00022e34 	.word	0x00022e34
    c3a8:	00022e2e 	.word	0x00022e2e

0000c3ac <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    c3ac:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    c3ae:	4668      	mov	r0, sp
    c3b0:	f7ff ffc0 	bl	c334 <bt_id_read_public_addr>
    c3b4:	4b04      	ldr	r3, [pc, #16]	; (c3c8 <bt_setup_public_id_addr+0x1c>)
    c3b6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    c3b8:	b118      	cbz	r0, c3c2 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    c3ba:	4669      	mov	r1, sp
    c3bc:	2000      	movs	r0, #0
    c3be:	f7ff ff19 	bl	c1f4 <id_create.constprop.0>
}
    c3c2:	b003      	add	sp, #12
    c3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3c8:	20000008 	.word	0x20000008

0000c3cc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    c3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c3ce:	4b1e      	ldr	r3, [pc, #120]	; (c448 <bt_read_static_addr+0x7c>)
{
    c3d0:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c3d2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
{
    c3d6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c3d8:	07db      	lsls	r3, r3, #31
    c3da:	d407      	bmi.n	c3ec <bt_read_static_addr+0x20>
		LOG_WRN("Read Static Addresses command not available");
    c3dc:	2157      	movs	r1, #87	; 0x57
    c3de:	481b      	ldr	r0, [pc, #108]	; (c44c <bt_read_static_addr+0x80>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
    c3e0:	f00e ffaa 	bl	1b338 <z_log_minimal_printk>
		return 0;
    c3e4:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    c3e6:	4620      	mov	r0, r4
    c3e8:	b003      	add	sp, #12
    c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    c3ec:	2100      	movs	r1, #0
    c3ee:	f64f 4009 	movw	r0, #64521	; 0xfc09
    c3f2:	aa01      	add	r2, sp, #4
    c3f4:	f7fe fe32 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    c3f8:	4603      	mov	r3, r0
    c3fa:	b110      	cbz	r0, c402 <bt_read_static_addr+0x36>
		LOG_WRN("Failed to read static addresses");
    c3fc:	2157      	movs	r1, #87	; 0x57
    c3fe:	4814      	ldr	r0, [pc, #80]	; (c450 <bt_read_static_addr+0x84>)
    c400:	e7ee      	b.n	c3e0 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
    c402:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    c404:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
    c406:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
    c408:	7854      	ldrb	r4, [r2, #1]
    c40a:	3202      	adds	r2, #2
    c40c:	42b4      	cmp	r4, r6
    c40e:	bf28      	it	cs
    c410:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
    c412:	429c      	cmp	r4, r3
    c414:	dc08      	bgt.n	c428 <bt_read_static_addr+0x5c>
	net_buf_unref(rsp);
    c416:	f004 fcf3 	bl	10e00 <net_buf_unref>
	if (!cnt) {
    c41a:	2c00      	cmp	r4, #0
    c41c:	d1e3      	bne.n	c3e6 <bt_read_static_addr+0x1a>
		LOG_WRN("No static addresses stored in controller");
    c41e:	2157      	movs	r1, #87	; 0x57
    c420:	480c      	ldr	r0, [pc, #48]	; (c454 <bt_read_static_addr+0x88>)
    c422:	f00e ff89 	bl	1b338 <z_log_minimal_printk>
    c426:	e7de      	b.n	c3e6 <bt_read_static_addr+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c428:	4611      	mov	r1, r2
    c42a:	fb07 5603 	mla	r6, r7, r3, r5
    c42e:	f102 0c14 	add.w	ip, r2, #20
    c432:	f851 eb04 	ldr.w	lr, [r1], #4
    c436:	4561      	cmp	r1, ip
    c438:	f846 eb04 	str.w	lr, [r6], #4
    c43c:	d1f9      	bne.n	c432 <bt_read_static_addr+0x66>
    c43e:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
    c440:	3301      	adds	r3, #1
    c442:	8031      	strh	r1, [r6, #0]
    c444:	3216      	adds	r2, #22
    c446:	e7e4      	b.n	c412 <bt_read_static_addr+0x46>
    c448:	20000008 	.word	0x20000008
    c44c:	0002371b 	.word	0x0002371b
    c450:	0002374c 	.word	0x0002374c
    c454:	00023771 	.word	0x00023771

0000c458 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    c458:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    c45a:	4d15      	ldr	r5, [pc, #84]	; (c4b0 <bt_setup_random_id_addr+0x58>)
{
    c45c:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    c45e:	79ec      	ldrb	r4, [r5, #7]
    c460:	b92c      	cbnz	r4, c46e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    c462:	2101      	movs	r1, #1
    c464:	a802      	add	r0, sp, #8
    c466:	f7ff ffb1 	bl	c3cc <bt_read_static_addr>
    c46a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    c46c:	b9c0      	cbnz	r0, c4a0 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    c46e:	2100      	movs	r1, #0
    c470:	4608      	mov	r0, r1
}
    c472:	b008      	add	sp, #32
    c474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    c478:	f7ff bf12 	b.w	c2a0 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    c47c:	ab02      	add	r3, sp, #8
    c47e:	fb06 3102 	mla	r1, r6, r2, r3
    c482:	f10d 0001 	add.w	r0, sp, #1
    c486:	f00f feef 	bl	1c268 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    c48a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    c48c:	4669      	mov	r1, sp
    c48e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    c490:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    c494:	f7ff feae 	bl	c1f4 <id_create.constprop.0>
				if (err) {
    c498:	3401      	adds	r4, #1
    c49a:	b110      	cbz	r0, c4a2 <bt_setup_random_id_addr+0x4a>
}
    c49c:	b008      	add	sp, #32
    c49e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    c4a0:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    c4a2:	79eb      	ldrb	r3, [r5, #7]
    c4a4:	b2e2      	uxtb	r2, r4
    c4a6:	4293      	cmp	r3, r2
    c4a8:	d8e8      	bhi.n	c47c <bt_setup_random_id_addr+0x24>
			return 0;
    c4aa:	2000      	movs	r0, #0
    c4ac:	e7f6      	b.n	c49c <bt_setup_random_id_addr+0x44>
    c4ae:	bf00      	nop
    c4b0:	20000008 	.word	0x20000008

0000c4b4 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    c4b4:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
    c4b6:	460c      	mov	r4, r1
    c4b8:	b169      	cbz	r1, c4d6 <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    c4ba:	4d08      	ldr	r5, [pc, #32]	; (c4dc <bt_id_set_create_conn_own_addr+0x28>)
    c4bc:	782b      	ldrb	r3, [r5, #0]
    c4be:	2b01      	cmp	r3, #1
    c4c0:	d003      	beq.n	c4ca <bt_id_set_create_conn_own_addr+0x16>
		}

		*own_addr_type = addr->type;
	}

	return 0;
    c4c2:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
    c4c4:	782b      	ldrb	r3, [r5, #0]
    c4c6:	7023      	strb	r3, [r4, #0]
}
    c4c8:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    c4ca:	1c68      	adds	r0, r5, #1
    c4cc:	f7ff fec0 	bl	c250 <set_random_address>
			if (err) {
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d0f6      	beq.n	c4c2 <bt_id_set_create_conn_own_addr+0xe>
    c4d4:	e7f8      	b.n	c4c8 <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
    c4d6:	f06f 0015 	mvn.w	r0, #21
    c4da:	e7f5      	b.n	c4c8 <bt_id_set_create_conn_own_addr+0x14>
    c4dc:	20000008 	.word	0x20000008

0000c4e0 <bt_id_set_scan_own_addr>:

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
	int err;

	CHECKIF(own_addr_type == NULL) {
    c4e0:	b139      	cbz	r1, c4f2 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    c4e2:	4806      	ldr	r0, [pc, #24]	; (c4fc <bt_id_set_scan_own_addr+0x1c>)
    c4e4:	7803      	ldrb	r3, [r0, #0]
				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
		} else if (IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    c4e6:	2b01      	cmp	r3, #1
		*own_addr_type = bt_dev.id_addr[0].type;
    c4e8:	700b      	strb	r3, [r1, #0]
		} else if (IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    c4ea:	d105      	bne.n	c4f8 <bt_id_set_scan_own_addr+0x18>
			/* If scanning with Identity Address we must set the
			 * random identity address for both active and passive
			 * scanner in order to receive adv reports that are
			 * directed towards this identity.
			 */
			err = set_random_address(&bt_dev.id_addr[0].a);
    c4ec:	3001      	adds	r0, #1
    c4ee:	f7ff beaf 	b.w	c250 <set_random_address>
		return -EINVAL;
    c4f2:	f06f 0015 	mvn.w	r0, #21
    c4f6:	4770      	bx	lr
				return err;
			}
		}
	}

	return 0;
    c4f8:	2000      	movs	r0, #0
}
    c4fa:	4770      	bx	lr
    c4fc:	20000008 	.word	0x20000008

0000c500 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c504:	4690      	mov	r8, r2
    c506:	460e      	mov	r6, r1
    c508:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    c50a:	4602      	mov	r2, r0
    c50c:	2800      	cmp	r0, #0
    c50e:	d04b      	beq.n	c5a8 <bt_id_set_adv_own_addr+0xa8>
    c510:	2b00      	cmp	r3, #0
    c512:	d049      	beq.n	c5a8 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    c514:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    c516:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    c518:	d531      	bpl.n	c57e <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    c51a:	4f25      	ldr	r7, [pc, #148]	; (c5b0 <bt_id_set_adv_own_addr+0xb0>)
    c51c:	f1b8 0f00 	cmp.w	r8, #0
    c520:	d013      	beq.n	c54a <bt_id_set_adv_own_addr+0x4a>
    c522:	0688      	lsls	r0, r1, #26
    c524:	d40a      	bmi.n	c53c <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c526:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    c52a:	5cfb      	ldrb	r3, [r7, r3]
    c52c:	2b01      	cmp	r3, #1
    c52e:	d015      	beq.n	c55c <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    c530:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    c532:	06b2      	lsls	r2, r6, #26
    c534:	d50f      	bpl.n	c556 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    c536:	f043 0302 	orr.w	r3, r3, #2
    c53a:	e00b      	b.n	c554 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    c53c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
    c540:	0659      	lsls	r1, r3, #25
    c542:	d4f0      	bmi.n	c526 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    c544:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c548:	e006      	b.n	c558 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c54a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    c54e:	5cfb      	ldrb	r3, [r7, r3]
    c550:	2b01      	cmp	r3, #1
    c552:	d003      	beq.n	c55c <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    c554:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    c556:	2000      	movs	r0, #0
}
    c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    c55c:	2107      	movs	r1, #7
    c55e:	fb01 7104 	mla	r1, r1, r4, r7
    c562:	4610      	mov	r0, r2
    c564:	3101      	adds	r1, #1
    c566:	f00f fe90 	bl	1c28a <bt_id_set_adv_random_addr>
				if (err) {
    c56a:	2800      	cmp	r0, #0
    c56c:	d1f4      	bne.n	c558 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    c56e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c572:	5d3b      	ldrb	r3, [r7, r4]
    c574:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    c576:	f1b8 0f00 	cmp.w	r8, #0
    c57a:	d0ec      	beq.n	c556 <bt_id_set_adv_own_addr+0x56>
    c57c:	e7d9      	b.n	c532 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    c57e:	074b      	lsls	r3, r1, #29
    c580:	d50e      	bpl.n	c5a0 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c582:	4e0b      	ldr	r6, [pc, #44]	; (c5b0 <bt_id_set_adv_own_addr+0xb0>)
    c584:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    c588:	5df3      	ldrb	r3, [r6, r7]
    c58a:	2b01      	cmp	r3, #1
    c58c:	d1e2      	bne.n	c554 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    c58e:	2107      	movs	r1, #7
    c590:	fb11 3104 	smlabb	r1, r1, r4, r3
    c594:	4431      	add	r1, r6
    c596:	f00f fe78 	bl	1c28a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    c59a:	5df3      	ldrb	r3, [r6, r7]
    c59c:	702b      	strb	r3, [r5, #0]
		if (err) {
    c59e:	e7db      	b.n	c558 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    c5a0:	f00f feb5 	bl	1c30e <bt_id_set_adv_private_addr>
    c5a4:	2301      	movs	r3, #1
    c5a6:	e7f9      	b.n	c59c <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    c5a8:	f06f 0015 	mvn.w	r0, #21
    c5ac:	e7d4      	b.n	c558 <bt_id_set_adv_own_addr+0x58>
    c5ae:	bf00      	nop
    c5b0:	20000008 	.word	0x20000008

0000c5b4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    c5b4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c5b6:	4d10      	ldr	r5, [pc, #64]	; (c5f8 <bt_id_init+0x44>)
    c5b8:	79eb      	ldrb	r3, [r5, #7]
    c5ba:	b113      	cbz	r3, c5c2 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    c5bc:	2400      	movs	r4, #0
}
    c5be:	4620      	mov	r0, r4
    c5c0:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
    c5c2:	f7ff fef3 	bl	c3ac <bt_setup_public_id_addr>
		if (err) {
    c5c6:	4604      	mov	r4, r0
    c5c8:	b120      	cbz	r0, c5d4 <bt_id_init+0x20>
			LOG_ERR("Unable to set identity address");
    c5ca:	2145      	movs	r1, #69	; 0x45
    c5cc:	480b      	ldr	r0, [pc, #44]	; (c5fc <bt_id_init+0x48>)
			LOG_ERR("Unable to set random address");
    c5ce:	f00e feb3 	bl	1b338 <z_log_minimal_printk>
			return err;
    c5d2:	e7f4      	b.n	c5be <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c5d4:	79eb      	ldrb	r3, [r5, #7]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d1f0      	bne.n	c5bc <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    c5da:	f7ff ff3d 	bl	c458 <bt_setup_random_id_addr>
		if (err) {
    c5de:	4604      	mov	r4, r0
    c5e0:	2800      	cmp	r0, #0
    c5e2:	d1f2      	bne.n	c5ca <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
    c5e4:	1c68      	adds	r0, r5, #1
    c5e6:	f7ff fe33 	bl	c250 <set_random_address>
		if (err) {
    c5ea:	4604      	mov	r4, r0
    c5ec:	2800      	cmp	r0, #0
    c5ee:	d0e5      	beq.n	c5bc <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
    c5f0:	2145      	movs	r1, #69	; 0x45
    c5f2:	4803      	ldr	r0, [pc, #12]	; (c600 <bt_id_init+0x4c>)
    c5f4:	e7eb      	b.n	c5ce <bt_id_init+0x1a>
    c5f6:	bf00      	nop
    c5f8:	20000008 	.word	0x20000008
    c5fc:	0002379f 	.word	0x0002379f
    c600:	000237c3 	.word	0x000237c3

0000c604 <hci_set_ad_ext>:
	return 0;
}

static int hci_set_ad_ext(struct bt_le_ext_adv *adv, uint16_t hci_op,
			  const struct bt_ad *ad, size_t ad_len)
{
    c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c608:	4698      	mov	r8, r3
	size_t total_len_bytes = 0;

	for (size_t i = 0; i < ad_len; i++) {
    c60a:	2300      	movs	r3, #0
{
    c60c:	4614      	mov	r4, r2
	size_t total_len_bytes = 0;
    c60e:	461d      	mov	r5, r3
{
    c610:	b08f      	sub	sp, #60	; 0x3c
    c612:	9003      	str	r0, [sp, #12]
    c614:	9101      	str	r1, [sp, #4]
		for (size_t j = 0; j < ad[i].len; j++) {
    c616:	1d16      	adds	r6, r2, #4
    c618:	2200      	movs	r2, #0
    c61a:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    c61e:	e007      	b.n	c630 <hci_set_ad_ext+0x2c>
			total_len_bytes += ad[i].data[j].data_len + 2;
    c620:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    c624:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    c628:	7849      	ldrb	r1, [r1, #1]
		for (size_t j = 0; j < ad[i].len; j++) {
    c62a:	3201      	adds	r2, #1
			total_len_bytes += ad[i].data[j].data_len + 2;
    c62c:	3102      	adds	r1, #2
    c62e:	440d      	add	r5, r1
		for (size_t j = 0; j < ad[i].len; j++) {
    c630:	4290      	cmp	r0, r2
    c632:	d1f5      	bne.n	c620 <hci_set_ad_ext+0x1c>
	for (size_t i = 0; i < ad_len; i++) {
    c634:	3301      	adds	r3, #1
    c636:	4598      	cmp	r8, r3
    c638:	d1ee      	bne.n	c618 <hci_set_ad_ext+0x14>
		}
	}

	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    c63a:	9b03      	ldr	r3, [sp, #12]
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    c63c:	2dfb      	cmp	r5, #251	; 0xfb
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    c63e:	f103 0010 	add.w	r0, r3, #16
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    c642:	d908      	bls.n	c656 <hci_set_ad_ext+0x52>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    c644:	2107      	movs	r1, #7
    c646:	f00f fe97 	bl	1c378 <atomic_test_bit>
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
    c64a:	4605      	mov	r5, r0
    c64c:	2800      	cmp	r0, #0
    c64e:	d077      	beq.n	c740 <hci_set_ad_ext+0x13c>
		/* It is not allowed to set advertising data in multiple
		 * operations while the advertiser is running.
		 */
		return -EAGAIN;
    c650:	f06f 000a 	mvn.w	r0, #10
    c654:	e09e      	b.n	c794 <hci_set_ad_ext+0x190>
	if (!atomic_test_bit(adv->flags, BT_ADV_EXT_ADV) &&
    c656:	210c      	movs	r1, #12
    c658:	f00f fe8e 	bl	1c378 <atomic_test_bit>
    c65c:	b910      	cbnz	r0, c664 <hci_set_ad_ext+0x60>
    c65e:	2d1f      	cmp	r5, #31
    c660:	bf28      	it	cs
    c662:	251f      	movcs	r5, #31
	cmd_size = sizeof(*set_data) + total_data_len;
    c664:	f105 0904 	add.w	r9, r5, #4
	buf = bt_hci_cmd_create(hci_op, cmd_size);
    c668:	9801      	ldr	r0, [sp, #4]
    c66a:	fa5f f189 	uxtb.w	r1, r9
    c66e:	f7fe fcab 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    c672:	4607      	mov	r7, r0
    c674:	2800      	cmp	r0, #0
    c676:	f000 8128 	beq.w	c8ca <hci_set_ad_ext+0x2c6>
	return net_buf_simple_add(&buf->b, len);
    c67a:	4649      	mov	r1, r9
    c67c:	300c      	adds	r0, #12
    c67e:	f004 fcc5 	bl	1100c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    c682:	464a      	mov	r2, r9
    c684:	4606      	mov	r6, r0
    c686:	2100      	movs	r1, #0
    c688:	f012 fec3 	bl	1f412 <memset>
	err = set_data_add_complete(set_data->data, total_data_len,
    c68c:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
	uint8_t set_data_len = 0;
    c690:	f04f 0800 	mov.w	r8, #0
	err = set_data_add_complete(set_data->data, total_data_len,
    c694:	f106 0b04 	add.w	fp, r6, #4
	for (size_t i = 0; i < ad_len; i++) {
    c698:	9302      	str	r3, [sp, #8]
		for (size_t j = 0; j < ad[i].len; j++) {
    c69a:	2300      	movs	r3, #0
    c69c:	f8d4 a000 	ldr.w	sl, [r4]
    c6a0:	6862      	ldr	r2, [r4, #4]
    c6a2:	4293      	cmp	r3, r2
    c6a4:	d314      	bcc.n	c6d0 <hci_set_ad_ext+0xcc>
	for (size_t i = 0; i < ad_len; i++) {
    c6a6:	9b02      	ldr	r3, [sp, #8]
    c6a8:	3408      	adds	r4, #8
    c6aa:	42a3      	cmp	r3, r4
    c6ac:	d1f5      	bne.n	c69a <hci_set_ad_ext+0x96>
	set_data->handle = adv->handle;
    c6ae:	9b03      	ldr	r3, [sp, #12]
	*data_len = set_data_len;
    c6b0:	f886 8003 	strb.w	r8, [r6, #3]
	set_data->handle = adv->handle;
    c6b4:	785b      	ldrb	r3, [r3, #1]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c6b6:	2200      	movs	r2, #0
	set_data->handle = adv->handle;
    c6b8:	7033      	strb	r3, [r6, #0]
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    c6ba:	2303      	movs	r3, #3
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c6bc:	4639      	mov	r1, r7
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    c6be:	7073      	strb	r3, [r6, #1]
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
    c6c0:	2301      	movs	r3, #1
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c6c2:	9801      	ldr	r0, [sp, #4]
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
    c6c4:	70b3      	strb	r3, [r6, #2]
	} else {
		return hci_set_adv_ext_fragmented(adv, hci_op, ad, ad_len);
	}

	return 0;
}
    c6c6:	b00f      	add	sp, #60	; 0x3c
    c6c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c6cc:	f7fe bcc6 	b.w	b05c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    c6d0:	f89a 2001 	ldrb.w	r2, [sl, #1]
			uint8_t type = data[j].type;
    c6d4:	f108 0002 	add.w	r0, r8, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    c6d8:	1811      	adds	r1, r2, r0
    c6da:	428d      	cmp	r5, r1
			uint8_t type = data[j].type;
    c6dc:	f89a c000 	ldrb.w	ip, [sl]
			if ((set_data_len + len + 2) > set_data_len_max) {
    c6e0:	d212      	bcs.n	c708 <hci_set_ad_ext+0x104>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    c6e2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    c6e6:	eba5 0200 	sub.w	r2, r5, r0
				if (!(type == BT_DATA_NAME_COMPLETE &&
    c6ea:	d101      	bne.n	c6f0 <hci_set_ad_ext+0xec>
    c6ec:	2a00      	cmp	r2, #0
    c6ee:	dc09      	bgt.n	c704 <hci_set_ad_ext+0x100>
					LOG_ERR("Too big advertising data");
    c6f0:	4877      	ldr	r0, [pc, #476]	; (c8d0 <hci_set_ad_ext+0x2cc>)
    c6f2:	2145      	movs	r1, #69	; 0x45
    c6f4:	f00e fe20 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
    c6f8:	4638      	mov	r0, r7
    c6fa:	f004 fb81 	bl	10e00 <net_buf_unref>
				return -EINVAL;
    c6fe:	f06f 0015 	mvn.w	r0, #21
    c702:	e047      	b.n	c794 <hci_set_ad_ext+0x190>
				type = BT_DATA_NAME_SHORTENED;
    c704:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    c708:	fa5f f982 	uxtb.w	r9, r2
    c70c:	f109 0101 	add.w	r1, r9, #1
    c710:	f80b 1008 	strb.w	r1, [fp, r8]
    c714:	f108 0101 	add.w	r1, r8, #1
			set_data[set_data_len++] = type;
    c718:	b2c9      	uxtb	r1, r1
    c71a:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c71e:	f8da 1004 	ldr.w	r1, [sl, #4]
    c722:	fa5b f080 	uxtab	r0, fp, r0
    c726:	9304      	str	r3, [sp, #16]
			set_data_len += len;
    c728:	f109 0902 	add.w	r9, r9, #2
    c72c:	f012 fe4a 	bl	1f3c4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    c730:	9b04      	ldr	r3, [sp, #16]
			set_data_len += len;
    c732:	44c1      	add	r9, r8
    c734:	fa5f f889 	uxtb.w	r8, r9
		for (size_t j = 0; j < ad[i].len; j++) {
    c738:	3301      	adds	r3, #1
    c73a:	f10a 0a08 	add.w	sl, sl, #8
    c73e:	e7af      	b.n	c6a0 <hci_set_ad_ext+0x9c>
	(void)memset(stream, 0, sizeof(*stream));
    c740:	4601      	mov	r1, r0
    c742:	2210      	movs	r2, #16
    c744:	a80a      	add	r0, sp, #40	; 0x28
    c746:	f012 fe64 	bl	1f412 <memset>
	for (size_t i = 0; i < ad_len; i++) {
    c74a:	46a9      	mov	r9, r5
	stream->ad_len = ad_len;
    c74c:	4629      	mov	r1, r5
    c74e:	462b      	mov	r3, r5
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
    c750:	f240 6572 	movw	r5, #1650	; 0x672
	stream->ad_len = ad_len;
    c754:	e9cd 4808 	strd	r4, r8, [sp, #32]
		for (size_t j = 0; j < ad[i].len; j++) {
    c758:	2200      	movs	r2, #0
    c75a:	f856 0039 	ldr.w	r0, [r6, r9, lsl #3]
    c75e:	e00a      	b.n	c776 <hci_set_ad_ext+0x172>
			stream->remaining_size += ad[i].data[j].data_len + 2;
    c760:	f854 1039 	ldr.w	r1, [r4, r9, lsl #3]
    c764:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    c768:	7849      	ldrb	r1, [r1, #1]
    c76a:	3102      	adds	r1, #2
    c76c:	440b      	add	r3, r1
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
    c76e:	42ab      	cmp	r3, r5
    c770:	d8c5      	bhi.n	c6fe <hci_set_ad_ext+0xfa>
		for (size_t j = 0; j < ad[i].len; j++) {
    c772:	2101      	movs	r1, #1
    c774:	3201      	adds	r2, #1
    c776:	4282      	cmp	r2, r0
    c778:	d1f2      	bne.n	c760 <hci_set_ad_ext+0x15c>
	for (size_t i = 0; i < ad_len; i++) {
    c77a:	f109 0901 	add.w	r9, r9, #1
    c77e:	45c8      	cmp	r8, r9
    c780:	d1ea      	bne.n	c758 <hci_set_ad_ext+0x154>
    c782:	b101      	cbz	r1, c786 <hci_set_ad_ext+0x182>
    c784:	930d      	str	r3, [sp, #52]	; 0x34
	bool is_first_iteration = true;
    c786:	2301      	movs	r3, #1
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
    c788:	f04f 0800 	mov.w	r8, #0
	bool is_first_iteration = true;
    c78c:	9304      	str	r3, [sp, #16]
	return stream->remaining_size == 0;
    c78e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	while (!ad_stream_is_empty(&stream)) {
    c790:	b91d      	cbnz	r5, c79a <hci_set_ad_ext+0x196>
	return 0;
    c792:	4628      	mov	r0, r5
}
    c794:	b00f      	add	sp, #60	; 0x3c
    c796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
    c79a:	2dfb      	cmp	r5, #251	; 0xfb
    c79c:	46aa      	mov	sl, r5
    c79e:	bf28      	it	cs
    c7a0:	f04f 0afb 	movcs.w	sl, #251	; 0xfb
		const size_t cmd_size = sizeof(*set_data) + data_len;
    c7a4:	f10a 0604 	add.w	r6, sl, #4
		buf = bt_hci_cmd_create(hci_op, cmd_size);
    c7a8:	9801      	ldr	r0, [sp, #4]
    c7aa:	b2f1      	uxtb	r1, r6
    c7ac:	f7fe fc0c 	bl	afc8 <bt_hci_cmd_create>
		if (!buf) {
    c7b0:	9002      	str	r0, [sp, #8]
    c7b2:	2800      	cmp	r0, #0
    c7b4:	f000 8089 	beq.w	c8ca <hci_set_ad_ext+0x2c6>
    c7b8:	4631      	mov	r1, r6
    c7ba:	300c      	adds	r0, #12
    c7bc:	f004 fc26 	bl	1100c <net_buf_simple_add>
	uint8_t read_len = 0;
    c7c0:	2600      	movs	r6, #0
    c7c2:	4683      	mov	fp, r0
		set_data->handle = adv->handle;
    c7c4:	9b03      	ldr	r3, [sp, #12]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    c7c6:	fa5f f28a 	uxtb.w	r2, sl
		set_data->handle = adv->handle;
    c7ca:	785b      	ldrb	r3, [r3, #1]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    c7cc:	9205      	str	r2, [sp, #20]
		set_data->handle = adv->handle;
    c7ce:	7003      	strb	r3, [r0, #0]
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
    c7d0:	f880 8002 	strb.w	r8, [r0, #2]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    c7d4:	1d03      	adds	r3, r0, #4
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
    c7d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    c7d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
    c7da:	f854 0031 	ldr.w	r0, [r4, r1, lsl #3]
    c7de:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
    c7e2:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    c7e6:	7840      	ldrb	r0, [r0, #1]
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
    c7e8:	eb04 07c1 	add.w	r7, r4, r1, lsl #3
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
    c7ec:	3002      	adds	r0, #2
	if (done_reading_ltv) {
    c7ee:	4584      	cmp	ip, r0
    c7f0:	d10b      	bne.n	c80a <hci_set_ad_ext+0x206>
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
    c7f2:	6878      	ldr	r0, [r7, #4]
    c7f4:	3201      	adds	r2, #1
    c7f6:	4282      	cmp	r2, r0
			stream->ad_index++;
    c7f8:	bf08      	it	eq
    c7fa:	3101      	addeq	r1, #1
		stream->current_ltv_offset = 0;
    c7fc:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
			stream->data_index = 0;
    c800:	bf06      	itte	eq
    c802:	f8cd 802c 	streq.w	r8, [sp, #44]	; 0x2c
			stream->ad_index++;
    c806:	910a      	streq	r1, [sp, #40]	; 0x28
			stream->data_index++;
    c808:	920b      	strne	r2, [sp, #44]	; 0x2c
	if (stream->ad_index == stream->ad_len) {
    c80a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c80c:	4591      	cmp	r9, r2
    c80e:	d015      	beq.n	c83c <hci_set_ad_ext+0x238>
		return &stream->ad[stream->ad_index].data[stream->data_index];
    c810:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c812:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
		if (!current_ltv) {
    c816:	eb12 0cc1 	adds.w	ip, r2, r1, lsl #3
    c81a:	d00f      	beq.n	c83c <hci_set_ad_ext+0x238>
		if (stream->current_ltv_offset == 0) {
    c81c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
			buf[read_len] = current_ltv->data_len + 1;
    c820:	1998      	adds	r0, r3, r6
		if (stream->current_ltv_offset == 0) {
    c822:	b9b7      	cbnz	r7, c852 <hci_set_ad_ext+0x24e>
			buf[read_len] = current_ltv->data_len + 1;
    c824:	2701      	movs	r7, #1
    c826:	f89c 2001 	ldrb.w	r2, [ip, #1]
    c82a:	3201      	adds	r2, #1
    c82c:	559a      	strb	r2, [r3, r6]
			read_len++;
    c82e:	3601      	adds	r6, #1
    c830:	b2f6      	uxtb	r6, r6
	while (read_len < buf_len) {
    c832:	9a05      	ldr	r2, [sp, #20]
			stream->current_ltv_offset++;
    c834:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
	while (read_len < buf_len) {
    c838:	4296      	cmp	r6, r2
    c83a:	d3cc      	bcc.n	c7d6 <hci_set_ad_ext+0x1d2>
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
    c83c:	42b5      	cmp	r5, r6
    c83e:	d229      	bcs.n	c894 <hci_set_ad_ext+0x290>
    c840:	4924      	ldr	r1, [pc, #144]	; (c8d4 <hci_set_ad_ext+0x2d0>)
    c842:	4825      	ldr	r0, [pc, #148]	; (c8d8 <hci_set_ad_ext+0x2d4>)
    c844:	22a7      	movs	r2, #167	; 0xa7
    c846:	f00e fd63 	bl	1b310 <assert_print>
    c84a:	21a7      	movs	r1, #167	; 0xa7
    c84c:	4821      	ldr	r0, [pc, #132]	; (c8d4 <hci_set_ad_ext+0x2d0>)
    c84e:	f00e fd58 	bl	1b302 <assert_post_action>
		} else if (stream->current_ltv_offset == 1) {
    c852:	2f01      	cmp	r7, #1
    c854:	d106      	bne.n	c864 <hci_set_ad_ext+0x260>
			buf[read_len] = current_ltv->type;
    c856:	f812 2031 	ldrb.w	r2, [r2, r1, lsl #3]
			read_len++;
    c85a:	3601      	adds	r6, #1
    c85c:	2702      	movs	r7, #2
			buf[read_len] = current_ltv->type;
    c85e:	7002      	strb	r2, [r0, #0]
			read_len++;
    c860:	b2f6      	uxtb	r6, r6
    c862:	e7e6      	b.n	c832 <hci_set_ad_ext+0x22e>
					current_ltv->data_len - stream->current_ltv_offset + 2;
    c864:	f89c 2001 	ldrb.w	r2, [ip, #1]
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
    c868:	ebaa 0106 	sub.w	r1, sl, r6
					current_ltv->data_len - stream->current_ltv_offset + 2;
    c86c:	1bd2      	subs	r2, r2, r7
    c86e:	3202      	adds	r2, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
    c870:	428a      	cmp	r2, r1
    c872:	bf28      	it	cs
    c874:	460a      	movcs	r2, r1
			(void)memcpy(&buf[read_len],
    c876:	f8dc c004 	ldr.w	ip, [ip, #4]
    c87a:	1eb9      	subs	r1, r7, #2
    c87c:	4461      	add	r1, ip
    c87e:	9307      	str	r3, [sp, #28]
    c880:	9206      	str	r2, [sp, #24]
    c882:	f012 fd9f 	bl	1f3c4 <memcpy>
			stream->current_ltv_offset += size_to_copy;
    c886:	9a06      	ldr	r2, [sp, #24]
			read_len += size_to_copy;
    c888:	9b07      	ldr	r3, [sp, #28]
			stream->current_ltv_offset += size_to_copy;
    c88a:	4417      	add	r7, r2
			read_len += size_to_copy;
    c88c:	4432      	add	r2, r6
			stream->current_ltv_offset += size_to_copy;
    c88e:	b2bf      	uxth	r7, r7
			read_len += size_to_copy;
    c890:	b2d6      	uxtb	r6, r2
    c892:	e7ce      	b.n	c832 <hci_set_ad_ext+0x22e>
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
    c894:	9b04      	ldr	r3, [sp, #16]
	stream->remaining_size -= read_len;
    c896:	1bad      	subs	r5, r5, r6
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
    c898:	b193      	cbz	r3, c8c0 <hci_set_ad_ext+0x2bc>
    c89a:	2d00      	cmp	r5, #0
    c89c:	bf0c      	ite	eq
    c89e:	2303      	moveq	r3, #3
    c8a0:	2301      	movne	r3, #1
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c8a2:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    c8a6:	2200      	movs	r2, #0
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
    c8a8:	f88b 6003 	strb.w	r6, [fp, #3]
			set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
    c8ac:	f88b 3001 	strb.w	r3, [fp, #1]
	stream->remaining_size -= read_len;
    c8b0:	950d      	str	r5, [sp, #52]	; 0x34
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
    c8b2:	f7fe fbd3 	bl	b05c <bt_hci_cmd_send_sync>
		if (err) {
    c8b6:	2800      	cmp	r0, #0
    c8b8:	f47f af6c 	bne.w	c794 <hci_set_ad_ext+0x190>
		is_first_iteration = false;
    c8bc:	9004      	str	r0, [sp, #16]
    c8be:	e766      	b.n	c78e <hci_set_ad_ext+0x18a>
		} else if (ad_stream_is_empty(&stream)) {
    c8c0:	fab5 f385 	clz	r3, r5
    c8c4:	095b      	lsrs	r3, r3, #5
    c8c6:	005b      	lsls	r3, r3, #1
    c8c8:	e7eb      	b.n	c8a2 <hci_set_ad_ext+0x29e>
		return -ENOBUFS;
    c8ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c8ce:	e761      	b.n	c794 <hci_set_ad_ext+0x190>
    c8d0:	000237eb 	.word	0x000237eb
    c8d4:	00023809 	.word	0x00023809
    c8d8:	000221f8 	.word	0x000221f8

0000c8dc <le_adv_stop_free_conn>:
	*out_conn = conn;
	return 0;
}

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
    c8dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    c8de:	f100 0609 	add.w	r6, r0, #9
{
    c8e2:	4604      	mov	r4, r0
    c8e4:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    c8e6:	2207      	movs	r2, #7
    c8e8:	4630      	mov	r0, r6
    c8ea:	490c      	ldr	r1, [pc, #48]	; (c91c <le_adv_stop_free_conn+0x40>)
    c8ec:	f012 fd5a 	bl	1f3a4 <memcmp>
    c8f0:	4603      	mov	r3, r0
    c8f2:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    c8f4:	b973      	cbnz	r3, c914 <le_adv_stop_free_conn+0x38>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    c8f6:	2204      	movs	r2, #4
    c8f8:	4909      	ldr	r1, [pc, #36]	; (c920 <le_adv_stop_free_conn+0x44>)
					       BT_CONN_CONNECTING_ADV);
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    c8fa:	f001 fd09 	bl	e310 <bt_conn_lookup_state_le>
    c8fe:	4604      	mov	r4, r0
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
    c900:	b158      	cbz	r0, c91a <le_adv_stop_free_conn+0x3e>
		conn->err = status;
    c902:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c904:	2100      	movs	r1, #0
    c906:	f001 fabf 	bl	de88 <bt_conn_set_state>
		bt_conn_unref(conn);
    c90a:	4620      	mov	r0, r4
	}
}
    c90c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    c910:	f001 ba8a 	b.w	de28 <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    c914:	2205      	movs	r2, #5
    c916:	4631      	mov	r1, r6
    c918:	e7ef      	b.n	c8fa <le_adv_stop_free_conn+0x1e>
}
    c91a:	bd70      	pop	{r4, r5, r6, pc}
    c91c:	00022e27 	.word	0x00022e27
    c920:	00022e20 	.word	0x00022e20

0000c924 <adv_new>:
{
    c924:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c926:	4d0e      	ldr	r5, [pc, #56]	; (c960 <adv_new+0x3c>)
    c928:	4628      	mov	r0, r5
    c92a:	f00f fd22 	bl	1c372 <atomic_get>
		if (!atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
    c92e:	f010 0401 	ands.w	r4, r0, #1
    c932:	d112      	bne.n	c95a <adv_new+0x36>
	(void)memset(adv, 0, sizeof(*adv));
    c934:	f1a5 0310 	sub.w	r3, r5, #16
    c938:	4618      	mov	r0, r3
    c93a:	2250      	movs	r2, #80	; 0x50
    c93c:	4621      	mov	r1, r4
    c93e:	f012 fd68 	bl	1f412 <memset>
    c942:	4603      	mov	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c944:	e8d5 2fef 	ldaex	r2, [r5]
    c948:	f042 0201 	orr.w	r2, r2, #1
    c94c:	e8c5 2fe1 	stlex	r1, r2, [r5]
    c950:	2900      	cmp	r1, #0
    c952:	d1f7      	bne.n	c944 <adv_new+0x20>
	adv->handle = i;
    c954:	4618      	mov	r0, r3
    c956:	705c      	strb	r4, [r3, #1]
}
    c958:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    c95a:	2000      	movs	r0, #0
    c95c:	e7fc      	b.n	c958 <adv_new+0x34>
    c95e:	bf00      	nop
    c960:	20005b80 	.word	0x20005b80

0000c964 <valid_adv_ext_param>:
{
    c964:	b538      	push	{r3, r4, r5, lr}
		if (param->peer &&
    c966:	6902      	ldr	r2, [r0, #16]
{
    c968:	4604      	mov	r4, r0
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    c96a:	6843      	ldr	r3, [r0, #4]
		if (param->peer &&
    c96c:	b152      	cbz	r2, c984 <valid_adv_ext_param+0x20>
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    c96e:	f240 4201 	movw	r2, #1025	; 0x401
    c972:	4213      	tst	r3, r2
    c974:	d101      	bne.n	c97a <valid_adv_ext_param+0x16>
			return false;
    c976:	2000      	movs	r0, #0
}
    c978:	bd38      	pop	{r3, r4, r5, pc}
		    (param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    c97a:	f403 6282 	and.w	r2, r3, #1040	; 0x410
    c97e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    c982:	d0f8      	beq.n	c976 <valid_adv_ext_param+0x12>
		if (!(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    c984:	0559      	lsls	r1, r3, #21
    c986:	d402      	bmi.n	c98e <valid_adv_ext_param+0x2a>
    c988:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
    c98c:	d1f3      	bne.n	c976 <valid_adv_ext_param+0x12>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
    c98e:	4a1a      	ldr	r2, [pc, #104]	; (c9f8 <valid_adv_ext_param+0x94>)
    c990:	439a      	bics	r2, r3
    c992:	d0f0      	beq.n	c976 <valid_adv_ext_param+0x12>
	if (param->id >= bt_dev.id_count ||
    c994:	4d19      	ldr	r5, [pc, #100]	; (c9fc <valid_adv_ext_param+0x98>)
    c996:	7820      	ldrb	r0, [r4, #0]
    c998:	79eb      	ldrb	r3, [r5, #7]
    c99a:	4283      	cmp	r3, r0
    c99c:	d9eb      	bls.n	c976 <valid_adv_ext_param+0x12>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    c99e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    c9a2:	2207      	movs	r2, #7
    c9a4:	4916      	ldr	r1, [pc, #88]	; (ca00 <valid_adv_ext_param+0x9c>)
    c9a6:	4428      	add	r0, r5
    c9a8:	f012 fcfc 	bl	1f3a4 <memcmp>
	if (param->id >= bt_dev.id_count ||
    c9ac:	2800      	cmp	r0, #0
    c9ae:	d0e2      	beq.n	c976 <valid_adv_ext_param+0x12>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    c9b0:	6860      	ldr	r0, [r4, #4]
    c9b2:	07c2      	lsls	r2, r0, #31
    c9b4:	d406      	bmi.n	c9c4 <valid_adv_ext_param+0x60>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    c9b6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    c9ba:	2b08      	cmp	r3, #8
    c9bc:	d802      	bhi.n	c9c4 <valid_adv_ext_param+0x60>
    c9be:	68a3      	ldr	r3, [r4, #8]
    c9c0:	2b9f      	cmp	r3, #159	; 0x9f
    c9c2:	d9d8      	bls.n	c976 <valid_adv_ext_param+0x12>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    c9c4:	f010 0f30 	tst.w	r0, #48	; 0x30
    c9c8:	d002      	beq.n	c9d0 <valid_adv_ext_param+0x6c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    c9ca:	6923      	ldr	r3, [r4, #16]
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	d0d2      	beq.n	c976 <valid_adv_ext_param+0x12>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    c9d0:	06c3      	lsls	r3, r0, #27
    c9d2:	d401      	bmi.n	c9d8 <valid_adv_ext_param+0x74>
    c9d4:	6923      	ldr	r3, [r4, #16]
    c9d6:	b943      	cbnz	r3, c9ea <valid_adv_ext_param+0x86>
		if (param->interval_min > param->interval_max ||
    c9d8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    c9dc:	429a      	cmp	r2, r3
    c9de:	d8ca      	bhi.n	c976 <valid_adv_ext_param+0x12>
    c9e0:	2a1f      	cmp	r2, #31
    c9e2:	d9c8      	bls.n	c976 <valid_adv_ext_param+0x12>
		    param->interval_min < 0x0020 ||
    c9e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c9e8:	d8c5      	bhi.n	c976 <valid_adv_ext_param+0x12>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    c9ea:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    c9ee:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    c9f2:	bf18      	it	ne
    c9f4:	2001      	movne	r0, #1
    c9f6:	e7bf      	b.n	c978 <valid_adv_ext_param+0x14>
    c9f8:	00040600 	.word	0x00040600
    c9fc:	20000008 	.word	0x20000008
    ca00:	00022e27 	.word	0x00022e27

0000ca04 <le_adv_start_add_conn>:
{
    ca04:	b570      	push	{r4, r5, r6, lr}
	bt_dev.adv_conn_id = adv->id;
    ca06:	4605      	mov	r5, r0
    ca08:	4b16      	ldr	r3, [pc, #88]	; (ca64 <le_adv_start_add_conn+0x60>)
    ca0a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
    ca0e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    ca10:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
{
    ca14:	460e      	mov	r6, r1
    ca16:	2207      	movs	r2, #7
    ca18:	4628      	mov	r0, r5
    ca1a:	4913      	ldr	r1, [pc, #76]	; (ca68 <le_adv_start_add_conn+0x64>)
    ca1c:	f012 fcc2 	bl	1f3a4 <memcmp>
    ca20:	4603      	mov	r3, r0
    ca22:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ca24:	b96b      	cbnz	r3, ca42 <le_adv_start_add_conn+0x3e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    ca26:	4911      	ldr	r1, [pc, #68]	; (ca6c <le_adv_start_add_conn+0x68>)
    ca28:	f001 fc22 	bl	e270 <bt_conn_add_le>
		if (!conn) {
    ca2c:	4604      	mov	r4, r0
    ca2e:	b910      	cbnz	r0, ca36 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
    ca30:	f06f 000b 	mvn.w	r0, #11
}
    ca34:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    ca36:	2104      	movs	r1, #4
    ca38:	f001 fa26 	bl	de88 <bt_conn_set_state>
		return 0;
    ca3c:	2000      	movs	r0, #0
		*out_conn = conn;
    ca3e:	6034      	str	r4, [r6, #0]
    ca40:	e7f8      	b.n	ca34 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    ca42:	4629      	mov	r1, r5
    ca44:	f001 fc48 	bl	e2d8 <bt_conn_exists_le>
    ca48:	b940      	cbnz	r0, ca5c <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    ca4a:	7820      	ldrb	r0, [r4, #0]
    ca4c:	4629      	mov	r1, r5
    ca4e:	f001 fc0f 	bl	e270 <bt_conn_add_le>
	if (!conn) {
    ca52:	4604      	mov	r4, r0
    ca54:	2800      	cmp	r0, #0
    ca56:	d0eb      	beq.n	ca30 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    ca58:	2105      	movs	r1, #5
    ca5a:	e7ed      	b.n	ca38 <le_adv_start_add_conn+0x34>
		return -EINVAL;
    ca5c:	f06f 0015 	mvn.w	r0, #21
    ca60:	e7e8      	b.n	ca34 <le_adv_start_add_conn+0x30>
    ca62:	bf00      	nop
    ca64:	20000008 	.word	0x20000008
    ca68:	00022e27 	.word	0x00022e27
    ca6c:	00022e20 	.word	0x00022e20

0000ca70 <le_ext_adv_param_set>:
}

static int le_ext_adv_param_set(struct bt_le_ext_adv *adv,
				const struct bt_le_adv_param *param,
				bool  has_scan_data)
{
    ca70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_ext_adv_param *cp;
	bool dir_adv = param->peer != NULL, scannable;
    ca74:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    ca78:	4607      	mov	r7, r0
	bool dir_adv = param->peer != NULL, scannable;
    ca7a:	f1ba 0400 	subs.w	r4, sl, #0
{
    ca7e:	460e      	mov	r6, r1
	struct net_buf *buf, *rsp;
	int err;
	enum adv_name_type name_type;
	uint16_t props = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
    ca80:	f242 0036 	movw	r0, #8246	; 0x2036
    ca84:	f04f 0119 	mov.w	r1, #25
{
    ca88:	4693      	mov	fp, r2
	bool dir_adv = param->peer != NULL, scannable;
    ca8a:	bf18      	it	ne
    ca8c:	2401      	movne	r4, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
    ca8e:	f7fe fa9b 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    ca92:	4681      	mov	r9, r0
    ca94:	2800      	cmp	r0, #0
    ca96:	f000 8104 	beq.w	cca2 <le_ext_adv_param_set+0x232>
    ca9a:	2119      	movs	r1, #25
    ca9c:	300c      	adds	r0, #12
    ca9e:	f004 fab5 	bl	1100c <net_buf_simple_add>
    caa2:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
    caa4:	2219      	movs	r2, #25
    caa6:	2100      	movs	r1, #0
    caa8:	f012 fcb3 	bl	1f412 <memset>
	}

	cp = net_buf_add(buf, sizeof(*cp));
	(void)memset(cp, 0, sizeof(*cp));

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    caac:	4622      	mov	r2, r4
    caae:	4638      	mov	r0, r7
    cab0:	6871      	ldr	r1, [r6, #4]
    cab2:	f105 030a 	add.w	r3, r5, #10
    cab6:	f7ff fd23 	bl	c500 <bt_id_set_adv_own_addr>
				     &cp->own_addr_type);
	if (err) {
    caba:	4604      	mov	r4, r0
    cabc:	2800      	cmp	r0, #0
    cabe:	f040 80bf 	bne.w	cc40 <le_ext_adv_param_set+0x1d0>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    cac2:	f107 0009 	add.w	r0, r7, #9
	if (dir_adv) {
    cac6:	f1ba 0f00 	cmp.w	sl, #0
    caca:	f000 80bd 	beq.w	cc48 <le_ext_adv_param_set+0x1d8>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    cace:	6931      	ldr	r1, [r6, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    cad0:	f00f fc64 	bl	1c39c <bt_addr_le_copy>
	}

	name_type = get_adv_name_type_param(param);
    cad4:	4630      	mov	r0, r6
    cad6:	f00f fd10 	bl	1c4fa <get_adv_name_type_param>

	cp->handle = adv->handle;
    cada:	787b      	ldrb	r3, [r7, #1]
	name_type = get_adv_name_type_param(param);
    cadc:	4680      	mov	r8, r0
	cp->handle = adv->handle;
    cade:	702b      	strb	r3, [r5, #0]
	sys_put_le24(param->interval_min, cp->prim_min_interval);
    cae0:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val;
    cae2:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    cae4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    cae8:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    caea:	712a      	strb	r2, [r5, #4]
	dst[2] = val >> 16;
    caec:	716b      	strb	r3, [r5, #5]
	sys_put_le24(param->interval_max, cp->prim_max_interval);
    caee:	68f3      	ldr	r3, [r6, #12]
	dst[1] = val >> 8;
    caf0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    caf4:	71ab      	strb	r3, [r5, #6]
	dst[2] = val >> 16;
    caf6:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    caf8:	71ea      	strb	r2, [r5, #7]
	dst[2] = val >> 16;
    cafa:	722b      	strb	r3, [r5, #8]
	cp->prim_channel_map = get_adv_channel_map(param->options);
    cafc:	6870      	ldr	r0, [r6, #4]
    cafe:	f00f fc29 	bl	1c354 <get_adv_channel_map>
	cp->filter_policy = get_filter_policy(param->options);
    cb02:	2300      	movs	r3, #0
    cb04:	74ab      	strb	r3, [r5, #18]
	cp->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    cb06:	237f      	movs	r3, #127	; 0x7f
    cb08:	74eb      	strb	r3, [r5, #19]

	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
    cb0a:	2301      	movs	r3, #1
	cp->prim_channel_map = get_adv_channel_map(param->options);
    cb0c:	7268      	strb	r0, [r5, #9]
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
    cb0e:	752b      	strb	r3, [r5, #20]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    cb10:	6872      	ldr	r2, [r6, #4]
    cb12:	0551      	lsls	r1, r2, #21
    cb14:	d503      	bpl.n	cb1e <le_ext_adv_param_set+0xae>
		if (param->options & BT_LE_ADV_OPT_NO_2M) {
    cb16:	0514      	lsls	r4, r2, #20
			cp->sec_adv_phy = BT_HCI_LE_PHY_1M;
		} else {
			cp->sec_adv_phy = BT_HCI_LE_PHY_2M;
    cb18:	bf58      	it	pl
    cb1a:	2302      	movpl	r3, #2
    cb1c:	75ab      	strb	r3, [r5, #22]
		}
	}

	if (param->options & BT_LE_ADV_OPT_CODED) {
    cb1e:	6873      	ldr	r3, [r6, #4]
    cb20:	04d8      	lsls	r0, r3, #19
		cp->prim_adv_phy = BT_HCI_LE_PHY_CODED;
    cb22:	bf42      	ittt	mi
    cb24:	2303      	movmi	r3, #3
    cb26:	752b      	strbmi	r3, [r5, #20]
		cp->sec_adv_phy = BT_HCI_LE_PHY_CODED;
    cb28:	75ab      	strbmi	r3, [r5, #22]
	}

	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    cb2a:	6873      	ldr	r3, [r6, #4]
    cb2c:	f483 6480 	eor.w	r4, r3, #1024	; 0x400
    cb30:	f3c4 2480 	ubfx	r4, r4, #10, #1
		props |= BT_HCI_LE_ADV_PROP_LEGACY;
	}

	if (param->options & BT_LE_ADV_OPT_USE_TX_POWER) {
    cb34:	0459      	lsls	r1, r3, #17
	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    cb36:	ea4f 1404 	mov.w	r4, r4, lsl #4
		props |= BT_HCI_LE_ADV_PROP_TX_POWER;
    cb3a:	bf48      	it	mi
    cb3c:	f044 0440 	orrmi.w	r4, r4, #64	; 0x40
	}

	if (param->options & BT_LE_ADV_OPT_ANONYMOUS) {
    cb40:	049a      	lsls	r2, r3, #18
		props |= BT_HCI_LE_ADV_PROP_ANON;
    cb42:	bf44      	itt	mi
    cb44:	f044 0420 	orrmi.w	r4, r4, #32
    cb48:	b2a4      	uxthmi	r4, r4
	}

	if (param->options & BT_LE_ADV_OPT_NOTIFY_SCAN_REQ) {
    cb4a:	05db      	lsls	r3, r3, #23
		cp->scan_req_notify_enable = BT_HCI_LE_ADV_SCAN_REQ_ENABLE;
    cb4c:	bf44      	itt	mi
    cb4e:	2301      	movmi	r3, #1
    cb50:	762b      	strbmi	r3, [r5, #24]
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    cb52:	6873      	ldr	r3, [r6, #4]
    cb54:	f013 0f01 	tst.w	r3, #1
    cb58:	f403 7100 	and.w	r1, r3, #512	; 0x200
    cb5c:	f000 8091 	beq.w	cc82 <le_ext_adv_param_set+0x212>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    cb60:	f044 0201 	orr.w	r2, r4, #1
    cb64:	b292      	uxth	r2, r2
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    cb66:	f1ba 0f00 	cmp.w	sl, #0
    cb6a:	d074      	beq.n	cc56 <le_ext_adv_param_set+0x1e6>
			 */
			props |= BT_HCI_LE_ADV_PROP_SCAN;
		}
	}

	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cb6c:	b911      	cbnz	r1, cb74 <le_ext_adv_param_set+0x104>
    cb6e:	f1bb 0f00 	cmp.w	fp, #0
    cb72:	d06b      	beq.n	cc4c <le_ext_adv_param_set+0x1dc>
	    (name_type == ADV_NAME_TYPE_SD)) {
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    cb74:	f044 0403 	orr.w	r4, r4, #3
    cb78:	b2a4      	uxth	r4, r4

	scannable = !!(props & BT_HCI_LE_ADV_PROP_SCAN);

	if (dir_adv) {
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
		if (!(param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY)) {
    cb7a:	06db      	lsls	r3, r3, #27
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
    cb7c:	bf4c      	ite	mi
    cb7e:	f044 0204 	orrmi.w	r2, r4, #4
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
    cb82:	f044 020c 	orrpl.w	r2, r4, #12
		}

		bt_addr_le_copy(&cp->peer_addr, param->peer);
    cb86:	6931      	ldr	r1, [r6, #16]
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
    cb88:	b292      	uxth	r2, r2
		bt_addr_le_copy(&cp->peer_addr, param->peer);
    cb8a:	f105 000b 	add.w	r0, r5, #11
    cb8e:	46a2      	mov	sl, r4
    cb90:	f00f fc04 	bl	1c39c <bt_addr_le_copy>
    cb94:	4614      	mov	r4, r2
	}

	cp->sid = param->sid;
    cb96:	7873      	ldrb	r3, [r6, #1]

	cp->props = sys_cpu_to_le16(props);
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    cb98:	4649      	mov	r1, r9
	cp->props = sys_cpu_to_le16(props);
    cb9a:	f8a5 4001 	strh.w	r4, [r5, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    cb9e:	f242 0036 	movw	r0, #8246	; 0x2036
	cp->sid = param->sid;
    cba2:	75eb      	strb	r3, [r5, #23]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
    cba4:	aa01      	add	r2, sp, #4
    cba6:	f7fe fa59 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    cbaa:	4604      	mov	r4, r0
    cbac:	2800      	cmp	r0, #0
    cbae:	d147      	bne.n	cc40 <le_ext_adv_param_set+0x1d0>
		return err;
	}

#if defined(CONFIG_BT_EXT_ADV)
	struct bt_hci_rp_le_set_ext_adv_param *rp = (void *)rsp->data;
    cbb0:	9801      	ldr	r0, [sp, #4]
	adv->tx_power = rp->tx_power;
#endif /* defined(CONFIG_BT_EXT_ADV) */

	net_buf_unref(rsp);

	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
    cbb2:	f107 0510 	add.w	r5, r7, #16
	adv->tx_power = rp->tx_power;
    cbb6:	68c3      	ldr	r3, [r0, #12]
    cbb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
    cbbc:	763b      	strb	r3, [r7, #24]
	net_buf_unref(rsp);
    cbbe:	f004 f91f 	bl	10e00 <net_buf_unref>
    cbc2:	e8d5 3fef 	ldaex	r3, [r5]
    cbc6:	f043 0302 	orr.w	r3, r3, #2
    cbca:	e8c5 3fe2 	stlex	r2, r3, [r5]
    cbce:	2a00      	cmp	r2, #0
    cbd0:	d1f7      	bne.n	cbc2 <le_ext_adv_param_set+0x152>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbd2:	f06f 0108 	mvn.w	r1, #8
    cbd6:	4628      	mov	r0, r5
    cbd8:	f00f fbd5 	bl	1c386 <atomic_and>

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_RANDOM_ADDR_PENDING)) {
    cbdc:	0700      	lsls	r0, r0, #28
    cbde:	d458      	bmi.n	cc92 <le_ext_adv_param_set+0x222>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbe0:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    cbe4:	4628      	mov	r0, r5
    cbe6:	f00f fbce 	bl	1c386 <atomic_and>
	}

	/* Flag only used by bt_le_adv_start API. */
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, false);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    cbea:	f108 33ff 	add.w	r3, r8, #4294967295
    cbee:	425a      	negs	r2, r3
    cbf0:	415a      	adcs	r2, r3
    cbf2:	2108      	movs	r1, #8
    cbf4:	4628      	mov	r0, r5
    cbf6:	f00f fbd8 	bl	1c3aa <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    cbfa:	f1a8 0102 	sub.w	r1, r8, #2
    cbfe:	424a      	negs	r2, r1
    cc00:	414a      	adcs	r2, r1
    cc02:	4628      	mov	r0, r5
    cc04:	2109      	movs	r1, #9
    cc06:	f00f fbd0 	bl	1c3aa <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    cc0a:	6872      	ldr	r2, [r6, #4]
    cc0c:	210a      	movs	r1, #10
    cc0e:	4628      	mov	r0, r5
    cc10:	f002 0201 	and.w	r2, r2, #1
    cc14:	f00f fbc9 	bl	1c3aa <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    cc18:	210b      	movs	r1, #11
    cc1a:	4628      	mov	r0, r5
    cc1c:	f3ca 0240 	ubfx	r2, sl, #1, #1
    cc20:	f00f fbc3 	bl	1c3aa <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    cc24:	6872      	ldr	r2, [r6, #4]
    cc26:	210d      	movs	r1, #13
    cc28:	4628      	mov	r0, r5
    cc2a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    cc2e:	f00f fbbc 	bl	1c3aa <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	atomic_set_bit_to(adv->flags, BT_ADV_EXT_ADV,
    cc32:	6872      	ldr	r2, [r6, #4]
    cc34:	210c      	movs	r1, #12
    cc36:	4628      	mov	r0, r5
    cc38:	f3c2 2280 	ubfx	r2, r2, #10, #1
    cc3c:	f00f fbb5 	bl	1c3aa <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_EXT_ADV);

	return 0;
}
    cc40:	4620      	mov	r0, r4
    cc42:	b003      	add	sp, #12
    cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    cc48:	4917      	ldr	r1, [pc, #92]	; (cca8 <le_ext_adv_param_set+0x238>)
    cc4a:	e741      	b.n	cad0 <le_ext_adv_param_set+0x60>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cc4c:	f1b8 0f02 	cmp.w	r8, #2
    cc50:	d090      	beq.n	cb74 <le_ext_adv_param_set+0x104>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    cc52:	4614      	mov	r4, r2
    cc54:	e791      	b.n	cb7a <le_ext_adv_param_set+0x10a>
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
    cc56:	0558      	lsls	r0, r3, #21
    cc58:	d40d      	bmi.n	cc76 <le_ext_adv_param_set+0x206>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cc5a:	f044 0403 	orr.w	r4, r4, #3
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    cc5e:	b2a4      	uxth	r4, r4
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cc60:	b969      	cbnz	r1, cc7e <le_ext_adv_param_set+0x20e>
    cc62:	f1bb 0f00 	cmp.w	fp, #0
    cc66:	d10e      	bne.n	cc86 <le_ext_adv_param_set+0x216>
    cc68:	f1b8 0f02 	cmp.w	r8, #2
    cc6c:	d00b      	beq.n	cc86 <le_ext_adv_param_set+0x216>
	if (dir_adv) {
    cc6e:	f1ba 0f00 	cmp.w	sl, #0
    cc72:	d182      	bne.n	cb7a <le_ext_adv_param_set+0x10a>
    cc74:	e003      	b.n	cc7e <le_ext_adv_param_set+0x20e>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cc76:	b151      	cbz	r1, cc8e <le_ext_adv_param_set+0x21e>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    cc78:	f044 0403 	orr.w	r4, r4, #3
    cc7c:	b2a4      	uxth	r4, r4
	if (dir_adv) {
    cc7e:	46a2      	mov	sl, r4
    cc80:	e789      	b.n	cb96 <le_ext_adv_param_set+0x126>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
    cc82:	2900      	cmp	r1, #0
    cc84:	d0ed      	beq.n	cc62 <le_ext_adv_param_set+0x1f2>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
    cc86:	f044 0402 	orr.w	r4, r4, #2
    cc8a:	b2a4      	uxth	r4, r4
    cc8c:	e7ef      	b.n	cc6e <le_ext_adv_param_set+0x1fe>
		props |= BT_HCI_LE_ADV_PROP_CONN;
    cc8e:	4614      	mov	r4, r2
    cc90:	e7e7      	b.n	cc62 <le_ext_adv_param_set+0x1f2>
		err = bt_id_set_adv_random_addr(adv, &adv->random_addr.a);
    cc92:	4638      	mov	r0, r7
    cc94:	1cf9      	adds	r1, r7, #3
    cc96:	f00f faf8 	bl	1c28a <bt_id_set_adv_random_addr>
		if (err) {
    cc9a:	2800      	cmp	r0, #0
    cc9c:	d0a0      	beq.n	cbe0 <le_ext_adv_param_set+0x170>
    cc9e:	4604      	mov	r4, r0
    cca0:	e7ce      	b.n	cc40 <le_ext_adv_param_set+0x1d0>
		return -ENOBUFS;
    cca2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    cca6:	e7cb      	b.n	cc40 <le_ext_adv_param_set+0x1d0>
    cca8:	00022e27 	.word	0x00022e27

0000ccac <bt_le_adv_delete_legacy>:
{
    ccac:	b510      	push	{r4, lr}
	if (bt_dev.adv) {
    ccae:	4c05      	ldr	r4, [pc, #20]	; (ccc4 <bt_le_adv_delete_legacy+0x18>)
    ccb0:	69a0      	ldr	r0, [r4, #24]
    ccb2:	b130      	cbz	r0, ccc2 <bt_le_adv_delete_legacy+0x16>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ccb4:	f06f 0101 	mvn.w	r1, #1
    ccb8:	3010      	adds	r0, #16
    ccba:	f00f fb64 	bl	1c386 <atomic_and>
		bt_dev.adv = NULL;
    ccbe:	2300      	movs	r3, #0
    ccc0:	61a3      	str	r3, [r4, #24]
}
    ccc2:	bd10      	pop	{r4, pc}
    ccc4:	20000008 	.word	0x20000008

0000ccc8 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    ccc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return bt_dev.adv;
    ccca:	4b1f      	ldr	r3, [pc, #124]	; (cd48 <bt_le_adv_resume+0x80>)
    cccc:	699e      	ldr	r6, [r3, #24]
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
    ccce:	b3ce      	cbz	r6, cd44 <bt_le_adv_resume+0x7c>
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    ccd0:	f106 0410 	add.w	r4, r6, #16
    ccd4:	210e      	movs	r1, #14
    ccd6:	4620      	mov	r0, r4
    ccd8:	f00f fb4e 	bl	1c378 <atomic_test_bit>
    ccdc:	b390      	cbz	r0, cd44 <bt_le_adv_resume+0x7c>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    ccde:	2107      	movs	r1, #7
    cce0:	4620      	mov	r0, r4
    cce2:	f00f fb49 	bl	1c378 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    cce6:	bb68      	cbnz	r0, cd44 <bt_le_adv_resume+0x7c>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    cce8:	210a      	movs	r1, #10
    ccea:	4620      	mov	r0, r4
    ccec:	f00f fb44 	bl	1c378 <atomic_test_bit>
    ccf0:	b340      	cbz	r0, cd44 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    ccf2:	4630      	mov	r0, r6
    ccf4:	a901      	add	r1, sp, #4
    ccf6:	f7ff fe85 	bl	ca04 <le_adv_start_add_conn>
	if (err) {
    ccfa:	4605      	mov	r5, r0
    ccfc:	bb10      	cbnz	r0, cd44 <bt_le_adv_resume+0x7c>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
    ccfe:	4630      	mov	r0, r6
    cd00:	2101      	movs	r1, #1
    cd02:	f00f fc4c 	bl	1c59e <bt_le_adv_set_enable>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    cd06:	9e01      	ldr	r6, [sp, #4]
	if (err) {
    cd08:	b928      	cbnz	r0, cd16 <bt_le_adv_resume+0x4e>
	bt_conn_unref(conn);
    cd0a:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    cd0c:	b002      	add	sp, #8
    cd0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    cd12:	f001 b889 	b.w	de28 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    cd16:	4629      	mov	r1, r5
    cd18:	4630      	mov	r0, r6
    cd1a:	f001 f8b5 	bl	de88 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cd1e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    cd22:	4620      	mov	r0, r4
    cd24:	f00f fb2f 	bl	1c386 <atomic_and>
    cd28:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    cd2a:	4630      	mov	r0, r6
    cd2c:	f001 f87c 	bl	de28 <bt_conn_unref>
	if (persist_paused) {
    cd30:	046b      	lsls	r3, r5, #17
    cd32:	d507      	bpl.n	cd44 <bt_le_adv_resume+0x7c>
    cd34:	e8d4 3fef 	ldaex	r3, [r4]
    cd38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    cd3c:	e8c4 3fe2 	stlex	r2, r3, [r4]
    cd40:	2a00      	cmp	r2, #0
    cd42:	d1f7      	bne.n	cd34 <bt_le_adv_resume+0x6c>
}
    cd44:	b002      	add	sp, #8
    cd46:	bd70      	pop	{r4, r5, r6, pc}
    cd48:	20000008 	.word	0x20000008

0000cd4c <bt_le_ext_adv_create>:
}

int bt_le_ext_adv_create(const struct bt_le_adv_param *param,
			 const struct bt_le_ext_adv_cb *cb,
			 struct bt_le_ext_adv **out_adv)
{
    cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd4e:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    cd50:	4815      	ldr	r0, [pc, #84]	; (cda8 <bt_le_ext_adv_create+0x5c>)
    cd52:	f00f fb0e 	bl	1c372 <atomic_get>
	struct bt_le_ext_adv *adv;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cd56:	0743      	lsls	r3, r0, #29
{
    cd58:	460f      	mov	r7, r1
    cd5a:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cd5c:	d51a      	bpl.n	cd94 <bt_le_ext_adv_create+0x48>
		return -EAGAIN;
	}

	if (!valid_adv_ext_param(param)) {
    cd5e:	4620      	mov	r0, r4
    cd60:	f7ff fe00 	bl	c964 <valid_adv_ext_param>
    cd64:	b1c8      	cbz	r0, cd9a <bt_le_ext_adv_create+0x4e>
		return -EINVAL;
	}

	adv = adv_new();
    cd66:	f7ff fddd 	bl	c924 <adv_new>
    cd6a:	4605      	mov	r5, r0
	if (!adv) {
    cd6c:	b1c0      	cbz	r0, cda0 <bt_le_ext_adv_create+0x54>
		return -ENOMEM;
	}

	adv->id = param->id;
    cd6e:	7823      	ldrb	r3, [r4, #0]
	adv->cb = cb;

	err = le_ext_adv_param_set(adv, param, false);
    cd70:	4621      	mov	r1, r4
    cd72:	2200      	movs	r2, #0
	adv->id = param->id;
    cd74:	7003      	strb	r3, [r0, #0]
	adv->cb = cb;
    cd76:	6147      	str	r7, [r0, #20]
	err = le_ext_adv_param_set(adv, param, false);
    cd78:	f7ff fe7a 	bl	ca70 <le_ext_adv_param_set>
	if (err) {
    cd7c:	4604      	mov	r4, r0
    cd7e:	b138      	cbz	r0, cd90 <bt_le_ext_adv_create+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cd80:	f06f 0101 	mvn.w	r1, #1
    cd84:	f105 0010 	add.w	r0, r5, #16
    cd88:	f00f fafd 	bl	1c386 <atomic_and>
		return err;
	}

	*out_adv = adv;
	return 0;
}
    cd8c:	4620      	mov	r0, r4
    cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*out_adv = adv;
    cd90:	6035      	str	r5, [r6, #0]
	return 0;
    cd92:	e7fb      	b.n	cd8c <bt_le_ext_adv_create+0x40>
		return -EAGAIN;
    cd94:	f06f 040a 	mvn.w	r4, #10
    cd98:	e7f8      	b.n	cd8c <bt_le_ext_adv_create+0x40>
		return -EINVAL;
    cd9a:	f06f 0415 	mvn.w	r4, #21
    cd9e:	e7f5      	b.n	cd8c <bt_le_ext_adv_create+0x40>
		return -ENOMEM;
    cda0:	f06f 040b 	mvn.w	r4, #11
    cda4:	e7f2      	b.n	cd8c <bt_le_ext_adv_create+0x40>
    cda6:	bf00      	nop
    cda8:	20000090 	.word	0x20000090

0000cdac <bt_le_ext_adv_start>:
}

int bt_le_ext_adv_start(struct bt_le_ext_adv *adv,
			struct bt_le_ext_adv_start_param *param)
{
	struct bt_conn *conn = NULL;
    cdac:	2300      	movs	r3, #0
{
    cdae:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    cdb0:	f100 0710 	add.w	r7, r0, #16
{
    cdb4:	b085      	sub	sp, #20
    cdb6:	4605      	mov	r5, r0
    cdb8:	460e      	mov	r6, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    cdba:	4638      	mov	r0, r7
    cdbc:	2107      	movs	r1, #7
	struct bt_conn *conn = NULL;
    cdbe:	9303      	str	r3, [sp, #12]
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    cdc0:	f00f fada 	bl	1c378 <atomic_test_bit>
    cdc4:	2800      	cmp	r0, #0
    cdc6:	d153      	bne.n	ce70 <bt_le_ext_adv_start+0xc4>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    cdc8:	210a      	movs	r1, #10
    cdca:	4638      	mov	r0, r7
    cdcc:	f00f fad4 	bl	1c378 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cdd0:	bbc0      	cbnz	r0, ce44 <bt_le_ext_adv_start+0x98>
		if (err) {
			return err;
		}
	}

	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    cdd2:	2e00      	cmp	r6, #0
    cdd4:	d140      	bne.n	ce58 <bt_le_ext_adv_start+0xac>
    cdd6:	4632      	mov	r2, r6
    cdd8:	2106      	movs	r1, #6
    cdda:	4638      	mov	r0, r7
    cddc:	f00f fae5 	bl	1c3aa <atomic_set_bit_to>
			  (param->timeout > 0 || param->num_events > 0));

	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    cde0:	210a      	movs	r1, #10
    cde2:	4638      	mov	r0, r7
    cde4:	f00f fac8 	bl	1c378 <atomic_test_bit>
    cde8:	b938      	cbnz	r0, cdfa <bt_le_ext_adv_start+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
			bt_id_set_adv_private_addr(adv);
		}
	} else {
		if (!atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    cdea:	210d      	movs	r1, #13
    cdec:	4638      	mov	r0, r7
    cdee:	f00f fac3 	bl	1c378 <atomic_test_bit>
    cdf2:	b910      	cbnz	r0, cdfa <bt_le_ext_adv_start+0x4e>
			bt_id_set_adv_private_addr(adv);
    cdf4:	4628      	mov	r0, r5
    cdf6:	f00f fa8a 	bl	1c30e <bt_id_set_adv_private_addr>
		}
	}

	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
    cdfa:	4628      	mov	r0, r5
    cdfc:	f00f fb6d 	bl	1c4da <get_adv_name_type>
    ce00:	b158      	cbz	r0, ce1a <bt_le_ext_adv_start+0x6e>
	    !atomic_test_bit(adv->flags, BT_ADV_DATA_SET)) {
    ce02:	2102      	movs	r1, #2
    ce04:	4638      	mov	r0, r7
    ce06:	f00f fab7 	bl	1c378 <atomic_test_bit>
	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
    ce0a:	4603      	mov	r3, r0
    ce0c:	b928      	cbnz	r0, ce1a <bt_le_ext_adv_start+0x6e>
		/* Set the advertiser name */
		bt_le_ext_adv_set_data(adv, NULL, 0, NULL, 0);
    ce0e:	4602      	mov	r2, r0
    ce10:	4601      	mov	r1, r0
    ce12:	9000      	str	r0, [sp, #0]
    ce14:	4628      	mov	r0, r5
    ce16:	f00f fbf3 	bl	1c600 <bt_le_ext_adv_set_data>
	}

	err = bt_le_adv_set_enable_ext(adv, true, param);
    ce1a:	4628      	mov	r0, r5
    ce1c:	4632      	mov	r2, r6
    ce1e:	2101      	movs	r1, #1
    ce20:	f00f fb7b 	bl	1c51a <bt_le_adv_set_enable_ext>
	if (err) {
		LOG_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ce24:	9d03      	ldr	r5, [sp, #12]
	if (err) {
    ce26:	4604      	mov	r4, r0
    ce28:	b1f8      	cbz	r0, ce6a <bt_le_ext_adv_start+0xbe>
		LOG_ERR("Failed to start advertiser");
    ce2a:	2145      	movs	r1, #69	; 0x45
    ce2c:	4812      	ldr	r0, [pc, #72]	; (ce78 <bt_le_ext_adv_start+0xcc>)
    ce2e:	f00e fa83 	bl	1b338 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ce32:	b175      	cbz	r5, ce52 <bt_le_ext_adv_start+0xa6>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ce34:	2100      	movs	r1, #0
    ce36:	4628      	mov	r0, r5
    ce38:	f001 f826 	bl	de88 <bt_conn_set_state>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
    ce3c:	4628      	mov	r0, r5
    ce3e:	f000 fff3 	bl	de28 <bt_conn_unref>
    ce42:	e006      	b.n	ce52 <bt_le_ext_adv_start+0xa6>
		err = le_adv_start_add_conn(adv, &conn);
    ce44:	4628      	mov	r0, r5
    ce46:	a903      	add	r1, sp, #12
    ce48:	f7ff fddc 	bl	ca04 <le_adv_start_add_conn>
		if (err) {
    ce4c:	4604      	mov	r4, r0
    ce4e:	2800      	cmp	r0, #0
    ce50:	d0bf      	beq.n	cdd2 <bt_le_ext_adv_start+0x26>
	}

	return 0;
}
    ce52:	4620      	mov	r0, r4
    ce54:	b005      	add	sp, #20
    ce56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    ce58:	8833      	ldrh	r3, [r6, #0]
    ce5a:	b923      	cbnz	r3, ce66 <bt_le_ext_adv_start+0xba>
			  (param->timeout > 0 || param->num_events > 0));
    ce5c:	78b2      	ldrb	r2, [r6, #2]
    ce5e:	3a00      	subs	r2, #0
    ce60:	bf18      	it	ne
    ce62:	2201      	movne	r2, #1
    ce64:	e7b8      	b.n	cdd8 <bt_le_ext_adv_start+0x2c>
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
    ce66:	2201      	movs	r2, #1
    ce68:	e7b6      	b.n	cdd8 <bt_le_ext_adv_start+0x2c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ce6a:	2d00      	cmp	r5, #0
    ce6c:	d1e6      	bne.n	ce3c <bt_le_ext_adv_start+0x90>
    ce6e:	e7f0      	b.n	ce52 <bt_le_ext_adv_start+0xa6>
		return -EALREADY;
    ce70:	f06f 0477 	mvn.w	r4, #119	; 0x77
    ce74:	e7ed      	b.n	ce52 <bt_le_ext_adv_start+0xa6>
    ce76:	bf00      	nop
    ce78:	00023838 	.word	0x00023838

0000ce7c <bt_le_ext_adv_delete>:
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
			     get_adv_name_type(adv));
}

int bt_le_ext_adv_delete(struct bt_le_ext_adv *adv)
{
    ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		return -ENOTSUP;
	}

	/* Advertising set should be stopped first */
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ce7e:	f100 0710 	add.w	r7, r0, #16
{
    ce82:	4606      	mov	r6, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ce84:	2107      	movs	r1, #7
    ce86:	4638      	mov	r0, r7
    ce88:	f00f fa76 	bl	1c378 <atomic_test_bit>
    ce8c:	4605      	mov	r5, r0
    ce8e:	bb18      	cbnz	r0, ced8 <bt_le_ext_adv_delete+0x5c>
		return -EINVAL;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REMOVE_ADV_SET, sizeof(*cp));
    ce90:	2101      	movs	r1, #1
    ce92:	f242 003c 	movw	r0, #8252	; 0x203c
    ce96:	f7fe f897 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    ce9a:	4604      	mov	r4, r0
    ce9c:	b938      	cbnz	r0, ceae <bt_le_ext_adv_delete+0x32>
		LOG_WRN("No HCI buffers");
    ce9e:	2157      	movs	r1, #87	; 0x57
    cea0:	480f      	ldr	r0, [pc, #60]	; (cee0 <bt_le_ext_adv_delete+0x64>)
    cea2:	f00e fa49 	bl	1b338 <z_log_minimal_printk>
		return -ENOBUFS;
    cea6:	f06f 0468 	mvn.w	r4, #104	; 0x68
	}

	adv_delete(adv);

	return 0;
}
    ceaa:	4620      	mov	r0, r4
    ceac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ceae:	2101      	movs	r1, #1
    ceb0:	300c      	adds	r0, #12
    ceb2:	f004 f8ab 	bl	1100c <net_buf_simple_add>
	cp->handle = adv->handle;
    ceb6:	7873      	ldrb	r3, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REMOVE_ADV_SET, buf, NULL);
    ceb8:	4621      	mov	r1, r4
	cp->handle = adv->handle;
    ceba:	7003      	strb	r3, [r0, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REMOVE_ADV_SET, buf, NULL);
    cebc:	462a      	mov	r2, r5
    cebe:	f242 003c 	movw	r0, #8252	; 0x203c
    cec2:	f7fe f8cb 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    cec6:	4604      	mov	r4, r0
    cec8:	2800      	cmp	r0, #0
    ceca:	d1ee      	bne.n	ceaa <bt_le_ext_adv_delete+0x2e>
    cecc:	f06f 0101 	mvn.w	r1, #1
    ced0:	4638      	mov	r0, r7
    ced2:	f00f fa58 	bl	1c386 <atomic_and>
}
    ced6:	e7e8      	b.n	ceaa <bt_le_ext_adv_delete+0x2e>
		return -EINVAL;
    ced8:	f06f 0415 	mvn.w	r4, #21
    cedc:	e7e5      	b.n	ceaa <bt_le_ext_adv_delete+0x2e>
    cede:	bf00      	nop
    cee0:	00023858 	.word	0x00023858

0000cee4 <bt_hci_le_adv_set_terminated>:
#endif /* CONFIG_BT_PER_ADV */

#if defined(CONFIG_BT_EXT_ADV)
#if defined(CONFIG_BT_BROADCASTER)
void bt_hci_le_adv_set_terminated(struct net_buf *buf)
{
    cee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t conn_handle;
#if defined(CONFIG_BT_CONN) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bool was_adv_enabled;
#endif

	evt = (void *)buf->data;
    cee6:	68c6      	ldr	r6, [r0, #12]
	adv = bt_adv_lookup_handle(evt->adv_handle);
    cee8:	7875      	ldrb	r5, [r6, #1]
	if (handle < ARRAY_SIZE(adv_pool) &&
    ceea:	2d00      	cmp	r5, #0
    ceec:	d13b      	bne.n	cf66 <bt_hci_le_adv_set_terminated+0x82>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ceee:	4836      	ldr	r0, [pc, #216]	; (cfc8 <bt_hci_le_adv_set_terminated+0xe4>)
    cef0:	f00f fa3f 	bl	1c372 <atomic_get>
    cef4:	07c2      	lsls	r2, r0, #31
    cef6:	d536      	bpl.n	cf66 <bt_hci_le_adv_set_terminated+0x82>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    cef8:	4c34      	ldr	r4, [pc, #208]	; (cfcc <bt_hci_le_adv_set_terminated+0xe8>)
	conn_handle = sys_le16_to_cpu(evt->conn_handle);
    cefa:	8877      	ldrh	r7, [r6, #2]
	(void)bt_le_lim_adv_cancel_timeout(adv);
    cefc:	4620      	mov	r0, r4
    cefe:	f00f fb51 	bl	1c5a4 <bt_le_lim_adv_cancel_timeout>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cf02:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cf06:	f104 0010 	add.w	r0, r4, #16
    cf0a:	f00f fa3c 	bl	1c386 <atomic_and>
			bt_dev.cached_conn_complete[i].valid = false;
		}
	}
#endif

	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cf0e:	7833      	ldrb	r3, [r6, #0]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d12f      	bne.n	cf74 <bt_hci_le_adv_set_terminated+0x90>
		 */
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
	}

	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
		struct bt_conn *conn = bt_conn_lookup_handle(conn_handle);
    cf14:	4638      	mov	r0, r7
    cf16:	f000 ffaf 	bl	de78 <bt_conn_lookup_handle>

		if (conn) {
    cf1a:	4605      	mov	r5, r0
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d13c      	bne.n	cf9a <bt_hci_le_adv_set_terminated+0xb6>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cf20:	f06f 0140 	mvn.w	r1, #64	; 0x40
    cf24:	4828      	ldr	r0, [pc, #160]	; (cfc8 <bt_hci_le_adv_set_terminated+0xe4>)
    cf26:	f00f fa2e 	bl	1c386 <atomic_and>

			bt_conn_unref(conn);
		}
	}

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
    cf2a:	0643      	lsls	r3, r0, #25
    cf2c:	d50c      	bpl.n	cf48 <bt_hci_le_adv_set_terminated+0x64>
		bt_id_adv_limited_stopped(adv);
    cf2e:	4827      	ldr	r0, [pc, #156]	; (cfcc <bt_hci_le_adv_set_terminated+0xe8>)
    cf30:	f00f fa06 	bl	1c340 <bt_id_adv_limited_stopped>

#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif

		if (adv->cb && adv->cb->sent) {
    cf34:	6963      	ldr	r3, [r4, #20]
    cf36:	b13b      	cbz	r3, cf48 <bt_hci_le_adv_set_terminated+0x64>
    cf38:	681b      	ldr	r3, [r3, #0]
    cf3a:	b12b      	cbz	r3, cf48 <bt_hci_le_adv_set_terminated+0x64>
			struct bt_le_ext_adv_sent_info info = {
    cf3c:	7932      	ldrb	r2, [r6, #4]
				.num_sent = evt->num_completed_ext_adv_evts,
			};

			adv->cb->sent(adv, &info);
    cf3e:	4823      	ldr	r0, [pc, #140]	; (cfcc <bt_hci_le_adv_set_terminated+0xe8>)
			struct bt_le_ext_adv_sent_info info = {
    cf40:	f88d 2004 	strb.w	r2, [sp, #4]
			adv->cb->sent(adv, &info);
    cf44:	a901      	add	r1, sp, #4
    cf46:	4798      	blx	r3
		}
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST) && adv == bt_dev.adv) {
    cf48:	210e      	movs	r1, #14
    cf4a:	481f      	ldr	r0, [pc, #124]	; (cfc8 <bt_hci_le_adv_set_terminated+0xe4>)
    cf4c:	f00f fa14 	bl	1c378 <atomic_test_bit>
    cf50:	2800      	cmp	r0, #0
    cf52:	d136      	bne.n	cfc2 <bt_hci_le_adv_set_terminated+0xde>
    cf54:	4b1e      	ldr	r3, [pc, #120]	; (cfd0 <bt_hci_le_adv_set_terminated+0xec>)
    cf56:	699b      	ldr	r3, [r3, #24]
    cf58:	42a3      	cmp	r3, r4
    cf5a:	d132      	bne.n	cfc2 <bt_hci_le_adv_set_terminated+0xde>
		bt_le_adv_delete_legacy();
	}
}
    cf5c:	b003      	add	sp, #12
    cf5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_adv_delete_legacy();
    cf62:	f7ff bea3 	b.w	ccac <bt_le_adv_delete_legacy>
		LOG_ERR("No valid adv");
    cf66:	2145      	movs	r1, #69	; 0x45
    cf68:	481a      	ldr	r0, [pc, #104]	; (cfd4 <bt_hci_le_adv_set_terminated+0xf0>)
}
    cf6a:	b003      	add	sp, #12
    cf6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_ERR("No valid adv");
    cf70:	f00e b9e2 	b.w	1b338 <z_log_minimal_printk>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    cf74:	210a      	movs	r1, #10
    cf76:	f104 0010 	add.w	r0, r4, #16
    cf7a:	f00f f9fd 	bl	1c378 <atomic_test_bit>
	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cf7e:	b140      	cbz	r0, cf92 <bt_hci_le_adv_set_terminated+0xae>
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
    cf80:	4b13      	ldr	r3, [pc, #76]	; (cfd0 <bt_hci_le_adv_set_terminated+0xec>)
    cf82:	4812      	ldr	r0, [pc, #72]	; (cfcc <bt_hci_le_adv_set_terminated+0xe8>)
    cf84:	699b      	ldr	r3, [r3, #24]
    cf86:	42a3      	cmp	r3, r4
    cf88:	bf08      	it	eq
    cf8a:	7835      	ldrbeq	r5, [r6, #0]
    cf8c:	4629      	mov	r1, r5
    cf8e:	f7ff fca5 	bl	c8dc <le_adv_stop_free_conn>
	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
    cf92:	7833      	ldrb	r3, [r6, #0]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d1c3      	bne.n	cf20 <bt_hci_le_adv_set_terminated+0x3c>
    cf98:	e7bc      	b.n	cf14 <bt_hci_le_adv_set_terminated+0x30>
					&bt_dev.id_addr[conn->id]);
    cf9a:	7a01      	ldrb	r1, [r0, #8]
				bt_addr_le_copy(&conn->le.resp_addr,
    cf9c:	4b0c      	ldr	r3, [pc, #48]	; (cfd0 <bt_hci_le_adv_set_terminated+0xec>)
					&bt_dev.id_addr[conn->id]);
    cf9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    cfa2:	4419      	add	r1, r3
    cfa4:	309e      	adds	r0, #158	; 0x9e
    cfa6:	f00f f9f9 	bl	1c39c <bt_addr_le_copy>
			if (adv->cb && adv->cb->connected) {
    cfaa:	6963      	ldr	r3, [r4, #20]
    cfac:	b12b      	cbz	r3, cfba <bt_hci_le_adv_set_terminated+0xd6>
    cfae:	685b      	ldr	r3, [r3, #4]
    cfb0:	b11b      	cbz	r3, cfba <bt_hci_le_adv_set_terminated+0xd6>
				adv->cb->connected(adv, &info);
    cfb2:	4806      	ldr	r0, [pc, #24]	; (cfcc <bt_hci_le_adv_set_terminated+0xe8>)
				struct bt_le_ext_adv_connected_info info = {
    cfb4:	9501      	str	r5, [sp, #4]
				adv->cb->connected(adv, &info);
    cfb6:	a901      	add	r1, sp, #4
    cfb8:	4798      	blx	r3
			bt_conn_unref(conn);
    cfba:	4628      	mov	r0, r5
    cfbc:	f000 ff34 	bl	de28 <bt_conn_unref>
    cfc0:	e7ae      	b.n	cf20 <bt_hci_le_adv_set_terminated+0x3c>
}
    cfc2:	b003      	add	sp, #12
    cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfc6:	bf00      	nop
    cfc8:	20005b80 	.word	0x20005b80
    cfcc:	20005b70 	.word	0x20005b70
    cfd0:	20000008 	.word	0x20000008
    cfd4:	0002386c 	.word	0x0002386c

0000cfd8 <bt_hci_le_scan_req_received>:

void bt_hci_le_scan_req_received(struct net_buf *buf)
{
    cfd8:	b530      	push	{r4, r5, lr}
	struct bt_hci_evt_le_scan_req_received *evt;
	struct bt_le_ext_adv *adv;

	evt = (void *)buf->data;
    cfda:	68c2      	ldr	r2, [r0, #12]
{
    cfdc:	b085      	sub	sp, #20
	if (handle < ARRAY_SIZE(adv_pool) &&
    cfde:	7813      	ldrb	r3, [r2, #0]
    cfe0:	b95b      	cbnz	r3, cffa <bt_hci_le_scan_req_received+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    cfe2:	4b1a      	ldr	r3, [pc, #104]	; (d04c <bt_hci_le_scan_req_received+0x74>)
    cfe4:	4618      	mov	r0, r3
    cfe6:	f00f f9c4 	bl	1c372 <atomic_get>
    cfea:	07c1      	lsls	r1, r0, #31
    cfec:	d505      	bpl.n	cffa <bt_hci_le_scan_req_received+0x22>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	if (adv->cb && adv->cb->scanned) {
    cfee:	6859      	ldr	r1, [r3, #4]
    cff0:	f1a3 0510 	sub.w	r5, r3, #16
    cff4:	b941      	cbnz	r1, d008 <bt_hci_le_scan_req_received+0x30>
		}

		info.addr = &id_addr;
		adv->cb->scanned(adv, &info);
	}
}
    cff6:	b005      	add	sp, #20
    cff8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid adv");
    cffa:	2145      	movs	r1, #69	; 0x45
    cffc:	4814      	ldr	r0, [pc, #80]	; (d050 <bt_hci_le_scan_req_received+0x78>)
}
    cffe:	b005      	add	sp, #20
    d000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("No valid adv");
    d004:	f00e b998 	b.w	1b338 <z_log_minimal_printk>
	if (adv->cb && adv->cb->scanned) {
    d008:	6889      	ldr	r1, [r1, #8]
    d00a:	2900      	cmp	r1, #0
    d00c:	d0f3      	beq.n	cff6 <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr, &evt->addr);
    d00e:	1c51      	adds	r1, r2, #1
		if (evt->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    d010:	7852      	ldrb	r2, [r2, #1]
    d012:	ac02      	add	r4, sp, #8
    d014:	3a02      	subs	r2, #2
    d016:	2a01      	cmp	r2, #1
    d018:	d80e      	bhi.n	d038 <bt_hci_le_scan_req_received+0x60>
			bt_addr_le_copy(&id_addr, &evt->addr);
    d01a:	4620      	mov	r0, r4
    d01c:	f00f f9be 	bl	1c39c <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    d020:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d024:	3b02      	subs	r3, #2
    d026:	f88d 3008 	strb.w	r3, [sp, #8]
		adv->cb->scanned(adv, &info);
    d02a:	696b      	ldr	r3, [r5, #20]
    d02c:	4809      	ldr	r0, [pc, #36]	; (d054 <bt_hci_le_scan_req_received+0x7c>)
    d02e:	689b      	ldr	r3, [r3, #8]
		info.addr = &id_addr;
    d030:	9401      	str	r4, [sp, #4]
		adv->cb->scanned(adv, &info);
    d032:	a901      	add	r1, sp, #4
    d034:	4798      	blx	r3
    d036:	e7de      	b.n	cff6 <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr,
    d038:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    d03c:	f00f f920 	bl	1c280 <bt_lookup_id_addr>
    d040:	4601      	mov	r1, r0
    d042:	4620      	mov	r0, r4
    d044:	f00f f9aa 	bl	1c39c <bt_addr_le_copy>
    d048:	e7ef      	b.n	d02a <bt_hci_le_scan_req_received+0x52>
    d04a:	bf00      	nop
    d04c:	20005b80 	.word	0x20005b80
    d050:	0002386c 	.word	0x0002386c
    d054:	20005b70 	.word	0x20005b70

0000d058 <reset_reassembling_advertiser>:
	buf->len  = 0U;
    d058:	2200      	movs	r2, #0
    d05a:	4b03      	ldr	r3, [pc, #12]	; (d068 <reset_reassembling_advertiser+0x10>)
	buf->data = buf->__buf;
    d05c:	6899      	ldr	r1, [r3, #8]
	buf->len  = 0U;
    d05e:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
    d060:	6019      	str	r1, [r3, #0]
}

static void reset_reassembling_advertiser(void)
{
	net_buf_simple_reset(&ext_scan_buf);
	reassembling_advertiser.state = FRAG_ADV_INACTIVE;
    d062:	4b02      	ldr	r3, [pc, #8]	; (d06c <reset_reassembling_advertiser+0x14>)
    d064:	721a      	strb	r2, [r3, #8]
}
    d066:	4770      	bx	lr
    d068:	2000036c 	.word	0x2000036c
    d06c:	2000727d 	.word	0x2000727d

0000d070 <create_ext_adv_info>:
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
}

static void create_ext_adv_info(struct bt_hci_evt_le_ext_advertising_info const *const evt,
				struct bt_le_scan_recv_info *const scan_info)
{
    d070:	b538      	push	{r3, r4, r5, lr}
    d072:	4605      	mov	r5, r0
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
    d074:	7a40      	ldrb	r0, [r0, #9]
{
    d076:	460c      	mov	r4, r1
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
    d078:	f7fe f89c 	bl	b1b4 <bt_get_phy>
    d07c:	7320      	strb	r0, [r4, #12]
	scan_info->secondary_phy = bt_get_phy(evt->sec_phy);
    d07e:	7aa8      	ldrb	r0, [r5, #10]
    d080:	f7fe f898 	bl	b1b4 <bt_get_phy>
    d084:	7360      	strb	r0, [r4, #13]
	scan_info->tx_power = evt->tx_power;
    d086:	f995 300c 	ldrsb.w	r3, [r5, #12]
    d08a:	71a3      	strb	r3, [r4, #6]
	scan_info->rssi = evt->rssi;
    d08c:	f995 300d 	ldrsb.w	r3, [r5, #13]
    d090:	7163      	strb	r3, [r4, #5]
	scan_info->sid = evt->sid;
    d092:	7aeb      	ldrb	r3, [r5, #11]
    d094:	7123      	strb	r3, [r4, #4]
	scan_info->interval = sys_le16_to_cpu(evt->interval);
    d096:	89eb      	ldrh	r3, [r5, #14]
    d098:	8163      	strh	r3, [r4, #10]
	scan_info->adv_type = get_adv_type(evt->evt_type);
    d09a:	882b      	ldrh	r3, [r5, #0]
    d09c:	3b10      	subs	r3, #16
    d09e:	b2db      	uxtb	r3, r3
    d0a0:	2b0b      	cmp	r3, #11
    d0a2:	bf8e      	itee	hi
    d0a4:	2305      	movhi	r3, #5
    d0a6:	4a05      	ldrls	r2, [pc, #20]	; (d0bc <create_ext_adv_info+0x4c>)
    d0a8:	5cd3      	ldrbls	r3, [r2, r3]
    d0aa:	71e3      	strb	r3, [r4, #7]
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
    d0ac:	882b      	ldrh	r3, [r5, #0]
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
    d0ae:	f083 0310 	eor.w	r3, r3, #16
    d0b2:	f003 031f 	and.w	r3, r3, #31
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
    d0b6:	8123      	strh	r3, [r4, #8]
}
    d0b8:	bd38      	pop	{r3, r4, r5, pc}
    d0ba:	bf00      	nop
    d0bc:	000239f5 	.word	0x000239f5

0000d0c0 <set_le_ext_scan_enable>:
{
    d0c0:	b570      	push	{r4, r5, r6, lr}
    d0c2:	4604      	mov	r4, r0
    d0c4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
    d0c6:	f242 0042 	movw	r0, #8258	; 0x2042
    d0ca:	2106      	movs	r1, #6
{
    d0cc:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
    d0ce:	f7fd ff7b 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    d0d2:	4605      	mov	r5, r0
    d0d4:	b320      	cbz	r0, d120 <set_le_ext_scan_enable+0x60>
	return net_buf_simple_add(&buf->b, len);
    d0d6:	2106      	movs	r1, #6
    d0d8:	300c      	adds	r0, #12
    d0da:	f003 ff97 	bl	1100c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    d0de:	2c01      	cmp	r4, #1
    d0e0:	d11c      	bne.n	d11c <set_le_ext_scan_enable+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0e2:	4b11      	ldr	r3, [pc, #68]	; (d128 <set_le_ext_scan_enable+0x68>)
    d0e4:	e8d3 3faf 	lda	r3, [r3]
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    d0e8:	f3c3 2340 	ubfx	r3, r3, #9, #1
	cp->duration = sys_cpu_to_le16(duration);
    d0ec:	8046      	strh	r6, [r0, #2]
	cp->period = 0;
    d0ee:	2600      	movs	r6, #0
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    d0f0:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    d0f2:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    d0f4:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    d0f6:	425c      	negs	r4, r3
    d0f8:	415c      	adcs	r4, r3
	cp->period = 0;
    d0fa:	7106      	strb	r6, [r0, #4]
    d0fc:	7146      	strb	r6, [r0, #5]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    d0fe:	4a0a      	ldr	r2, [pc, #40]	; (d128 <set_le_ext_scan_enable+0x68>)
    d100:	4628      	mov	r0, r5
    d102:	a903      	add	r1, sp, #12
    d104:	2306      	movs	r3, #6
    d106:	9400      	str	r4, [sp, #0]
    d108:	f7fd ff4c 	bl	afa4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, buf, NULL);
    d10c:	4632      	mov	r2, r6
    d10e:	4629      	mov	r1, r5
    d110:	f242 0042 	movw	r0, #8258	; 0x2042
    d114:	f7fd ffa2 	bl	b05c <bt_hci_cmd_send_sync>
}
    d118:	b006      	add	sp, #24
    d11a:	bd70      	pop	{r4, r5, r6, pc}
    d11c:	2300      	movs	r3, #0
    d11e:	e7e5      	b.n	d0ec <set_le_ext_scan_enable+0x2c>
		return -ENOBUFS;
    d120:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d124:	e7f8      	b.n	d118 <set_le_ext_scan_enable+0x58>
    d126:	bf00      	nop
    d128:	20000090 	.word	0x20000090

0000d12c <start_le_scan_ext>:
{
    d12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d130:	460e      	mov	r6, r1
    d132:	4692      	mov	sl, r2
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    d134:	4680      	mov	r8, r0
    d136:	b110      	cbz	r0, d13e <start_le_scan_ext+0x12>
    d138:	7805      	ldrb	r5, [r0, #0]
    d13a:	2d01      	cmp	r5, #1
    d13c:	d005      	beq.n	d14a <start_le_scan_ext+0x1e>
    d13e:	2e00      	cmp	r6, #0
    d140:	d05d      	beq.n	d1fe <start_le_scan_ext+0xd2>
		      (phy_coded && phy_coded->type == BT_HCI_LE_SCAN_ACTIVE);
    d142:	7835      	ldrb	r5, [r6, #0]
    d144:	1e6b      	subs	r3, r5, #1
    d146:	425d      	negs	r5, r3
    d148:	415d      	adcs	r5, r3
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    d14a:	462c      	mov	r4, r5
	if (duration > 0) {
    d14c:	f1ba 0f00 	cmp.w	sl, #0
    d150:	d004      	beq.n	d15c <start_le_scan_ext+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d152:	f44f 6100 	mov.w	r1, #2048	; 0x800
    d156:	482f      	ldr	r0, [pc, #188]	; (d214 <start_le_scan_ext+0xe8>)
    d158:	f00f fa80 	bl	1c65c <atomic_or>
	err = bt_id_set_scan_own_addr(active_scan, &own_addr_type);
    d15c:	4620      	mov	r0, r4
    d15e:	f10d 0107 	add.w	r1, sp, #7
    d162:	f7ff f9bd 	bl	c4e0 <bt_id_set_scan_own_addr>
	if (err) {
    d166:	4604      	mov	r4, r0
    d168:	2800      	cmp	r0, #0
    d16a:	d144      	bne.n	d1f6 <start_le_scan_ext+0xca>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
    d16c:	f1b8 0f00 	cmp.w	r8, #0
    d170:	bf14      	ite	ne
    d172:	2108      	movne	r1, #8
    d174:	2103      	moveq	r1, #3
    d176:	2e00      	cmp	r6, #0
    d178:	bf14      	ite	ne
    d17a:	2305      	movne	r3, #5
    d17c:	2300      	moveq	r3, #0
    d17e:	f242 0041 	movw	r0, #8257	; 0x2041
    d182:	4419      	add	r1, r3
    d184:	f7fd ff20 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
    d188:	4681      	mov	r9, r0
    d18a:	2800      	cmp	r0, #0
    d18c:	d03f      	beq.n	d20e <start_le_scan_ext+0xe2>
    d18e:	f100 0b0c 	add.w	fp, r0, #12
    d192:	2103      	movs	r1, #3
    d194:	4658      	mov	r0, fp
    d196:	f003 ff39 	bl	1100c <net_buf_simple_add>
	set_param->own_addr_type = own_addr_type;
    d19a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d19e:	4607      	mov	r7, r0
    d1a0:	7003      	strb	r3, [r0, #0]
	set_param->phys = 0;
    d1a2:	7084      	strb	r4, [r0, #2]
		set_param->filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    d1a4:	7044      	strb	r4, [r0, #1]
	if (phy_1m) {
    d1a6:	f1b8 0f00 	cmp.w	r8, #0
    d1aa:	d006      	beq.n	d1ba <start_le_scan_ext+0x8e>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_1M;
    d1ac:	2301      	movs	r3, #1
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d1ae:	2205      	movs	r2, #5
    d1b0:	7083      	strb	r3, [r0, #2]
    d1b2:	4641      	mov	r1, r8
    d1b4:	4658      	mov	r0, fp
    d1b6:	f010 f9e8 	bl	1d58a <net_buf_simple_add_mem>
	if (phy_coded) {
    d1ba:	b146      	cbz	r6, d1ce <start_le_scan_ext+0xa2>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_CODED;
    d1bc:	78bb      	ldrb	r3, [r7, #2]
    d1be:	2205      	movs	r2, #5
    d1c0:	f043 0304 	orr.w	r3, r3, #4
    d1c4:	4631      	mov	r1, r6
    d1c6:	4658      	mov	r0, fp
    d1c8:	70bb      	strb	r3, [r7, #2]
    d1ca:	f010 f9de 	bl	1d58a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM, buf, NULL);
    d1ce:	2200      	movs	r2, #0
    d1d0:	4649      	mov	r1, r9
    d1d2:	f242 0041 	movw	r0, #8257	; 0x2041
    d1d6:	f7fd ff41 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
    d1da:	4604      	mov	r4, r0
    d1dc:	b958      	cbnz	r0, d1f6 <start_le_scan_ext+0xca>
	err = set_le_ext_scan_enable(BT_HCI_LE_SCAN_ENABLE, duration);
    d1de:	4651      	mov	r1, sl
    d1e0:	2001      	movs	r0, #1
    d1e2:	f7ff ff6d 	bl	d0c0 <set_le_ext_scan_enable>
	if (err) {
    d1e6:	4604      	mov	r4, r0
    d1e8:	b928      	cbnz	r0, d1f6 <start_le_scan_ext+0xca>
	if (val) {
    d1ea:	b155      	cbz	r5, d202 <start_le_scan_ext+0xd6>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d1ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    d1f0:	4808      	ldr	r0, [pc, #32]	; (d214 <start_le_scan_ext+0xe8>)
    d1f2:	f00f fa33 	bl	1c65c <atomic_or>
}
    d1f6:	4620      	mov	r0, r4
    d1f8:	b003      	add	sp, #12
    d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    d1fe:	4635      	mov	r5, r6
    d200:	e7a3      	b.n	d14a <start_le_scan_ext+0x1e>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d202:	f46f 7180 	mvn.w	r1, #256	; 0x100
    d206:	4803      	ldr	r0, [pc, #12]	; (d214 <start_le_scan_ext+0xe8>)
    d208:	f00f fa33 	bl	1c672 <atomic_and>
    d20c:	e7f3      	b.n	d1f6 <start_le_scan_ext+0xca>
		return -ENOBUFS;
    d20e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d212:	e7f0      	b.n	d1f6 <start_le_scan_ext+0xca>
    d214:	20000090 	.word	0x20000090

0000d218 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    d218:	2200      	movs	r2, #0
    d21a:	4b02      	ldr	r3, [pc, #8]	; (d224 <bt_scan_reset+0xc>)
    d21c:	601a      	str	r2, [r3, #0]
	reset_reassembling_advertiser();
    d21e:	f7ff bf1b 	b.w	d058 <reset_reassembling_advertiser>
    d222:	bf00      	nop
    d224:	200069dc 	.word	0x200069dc

0000d228 <bt_le_scan_update>:
{
    d228:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d22a:	4b1f      	ldr	r3, [pc, #124]	; (d2a8 <bt_le_scan_update+0x80>)
    d22c:	4606      	mov	r6, r0
    d22e:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d232:	f3c2 10c0 	ubfx	r0, r2, #7, #1
    d236:	0612      	lsls	r2, r2, #24
    d238:	d433      	bmi.n	d2a2 <bt_le_scan_update+0x7a>
    d23a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    d23e:	065b      	lsls	r3, r3, #25
    d240:	d427      	bmi.n	d292 <bt_le_scan_update+0x6a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    d242:	2100      	movs	r1, #0
    d244:	2206      	movs	r2, #6
    d246:	4608      	mov	r0, r1
    d248:	f001 f862 	bl	e310 <bt_conn_lookup_state_le>
		if (conn) {
    d24c:	4604      	mov	r4, r0
    d24e:	bb30      	cbnz	r0, d29e <bt_le_scan_update+0x76>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    d250:	2202      	movs	r2, #2
    d252:	4601      	mov	r1, r0
    d254:	f001 f85c 	bl	e310 <bt_conn_lookup_state_le>
		if (conn) {
    d258:	4605      	mov	r5, r0
    d25a:	b310      	cbz	r0, d2a2 <bt_le_scan_update+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d25c:	f44f 7100 	mov.w	r1, #512	; 0x200
    d260:	4811      	ldr	r0, [pc, #68]	; (d2a8 <bt_le_scan_update+0x80>)
    d262:	f00f f9fb 	bl	1c65c <atomic_or>
			bt_conn_unref(conn);
    d266:	4628      	mov	r0, r5
    d268:	f000 fdde 	bl	de28 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
    d26c:	2e00      	cmp	r6, #0
    d26e:	bf0b      	itete	eq
    d270:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    d274:	2260      	movne	r2, #96	; 0x60
    d276:	2312      	moveq	r3, #18
    d278:	2330      	movne	r3, #48	; 0x30
		scan.interval = sys_cpu_to_le16(interval);
    d27a:	f8ad 2001 	strh.w	r2, [sp, #1]
		return start_le_scan_ext(&scan, NULL, 0);
    d27e:	4621      	mov	r1, r4
    d280:	4622      	mov	r2, r4
    d282:	4668      	mov	r0, sp
		scan.type = BT_HCI_LE_SCAN_PASSIVE;
    d284:	f88d 4000 	strb.w	r4, [sp]
		scan.window = sys_cpu_to_le16(window);
    d288:	f8ad 3003 	strh.w	r3, [sp, #3]
		return start_le_scan_ext(&scan, NULL, 0);
    d28c:	f7ff ff4e 	bl	d12c <start_le_scan_ext>
			return start_passive_scan(fast_scan);
    d290:	e003      	b.n	d29a <bt_le_scan_update+0x72>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d292:	f00f fa00 	bl	1c696 <bt_le_scan_set_enable>
		if (err) {
    d296:	2800      	cmp	r0, #0
    d298:	d0d3      	beq.n	d242 <bt_le_scan_update+0x1a>
}
    d29a:	b002      	add	sp, #8
    d29c:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    d29e:	f000 fdc3 	bl	de28 <bt_conn_unref>
		return 0;
    d2a2:	2000      	movs	r0, #0
    d2a4:	e7f9      	b.n	d29a <bt_le_scan_update+0x72>
    d2a6:	bf00      	nop
    d2a8:	20000090 	.word	0x20000090

0000d2ac <le_adv_recv>:
{
    d2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2b0:	469a      	mov	sl, r3
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    d2b2:	7803      	ldrb	r3, [r0, #0]
{
    d2b4:	4614      	mov	r4, r2
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    d2b6:	1e9a      	subs	r2, r3, #2
    d2b8:	2a01      	cmp	r2, #1
{
    d2ba:	4680      	mov	r8, r0
    d2bc:	460e      	mov	r6, r1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    d2be:	d84a      	bhi.n	d356 <le_adv_recv+0xaa>
		bt_addr_le_copy(&id_addr, addr);
    d2c0:	4601      	mov	r1, r0
    d2c2:	4668      	mov	r0, sp
    d2c4:	f00f f9e0 	bl	1c688 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    d2c8:	f89d 3000 	ldrb.w	r3, [sp]
    d2cc:	3b02      	subs	r3, #2
    d2ce:	f88d 3000 	strb.w	r3, [sp]
	if (scan_dev_found_cb) {
    d2d2:	4f46      	ldr	r7, [pc, #280]	; (d3ec <le_adv_recv+0x140>)
    d2d4:	683b      	ldr	r3, [r7, #0]
    d2d6:	b1a3      	cbz	r3, d302 <le_adv_recv+0x56>
	state->offset = net_buf_simple_headroom(buf);
    d2d8:	4620      	mov	r0, r4
    d2da:	f010 f94a 	bl	1d572 <net_buf_simple_headroom>
    d2de:	4605      	mov	r5, r0
	state->len = buf->len;
    d2e0:	f8b4 9004 	ldrh.w	r9, [r4, #4]
		buf->len = len;
    d2e4:	f8a4 a004 	strh.w	sl, [r4, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    d2e8:	4623      	mov	r3, r4
    d2ea:	4668      	mov	r0, sp
    d2ec:	683f      	ldr	r7, [r7, #0]
    d2ee:	79f2      	ldrb	r2, [r6, #7]
    d2f0:	f996 1005 	ldrsb.w	r1, [r6, #5]
    d2f4:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    d2f6:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    d2f8:	f8a4 9004 	strh.w	r9, [r4, #4]
	buf->data = buf->__buf + state->offset;
    d2fc:	fa13 f585 	uxtah	r5, r3, r5
    d300:	6025      	str	r5, [r4, #0]
	return list->head;
    d302:	4b3b      	ldr	r3, [pc, #236]	; (d3f0 <le_adv_recv+0x144>)
	info->addr = &id_addr;
    d304:	f8c6 d000 	str.w	sp, [r6]
    d308:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d30a:	b39b      	cbz	r3, d374 <le_adv_recv+0xc8>
	return node->next;
    d30c:	681d      	ldr	r5, [r3, #0]
    d30e:	b105      	cbz	r5, d312 <le_adv_recv+0x66>
    d310:	3d08      	subs	r5, #8
		if (listener->recv) {
    d312:	f853 2c08 	ldr.w	r2, [r3, #-8]
    d316:	b1aa      	cbz	r2, d344 <le_adv_recv+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d318:	462f      	mov	r7, r5
    d31a:	f1a3 0508 	sub.w	r5, r3, #8
	state->offset = net_buf_simple_headroom(buf);
    d31e:	4620      	mov	r0, r4
    d320:	f010 f927 	bl	1d572 <net_buf_simple_headroom>
    d324:	4681      	mov	r9, r0
	state->len = buf->len;
    d326:	f8b4 b004 	ldrh.w	fp, [r4, #4]
			buf->len = len;
    d32a:	f8a4 a004 	strh.w	sl, [r4, #4]
			listener->recv(info, buf);
    d32e:	682b      	ldr	r3, [r5, #0]
}
    d330:	463d      	mov	r5, r7
    d332:	4621      	mov	r1, r4
    d334:	4630      	mov	r0, r6
    d336:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    d338:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    d33a:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
    d33e:	fa13 f389 	uxtah	r3, r3, r9
    d342:	6023      	str	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d344:	b1b5      	cbz	r5, d374 <le_adv_recv+0xc8>
    d346:	68af      	ldr	r7, [r5, #8]
    d348:	682b      	ldr	r3, [r5, #0]
    d34a:	b18f      	cbz	r7, d370 <le_adv_recv+0xc4>
    d34c:	3f08      	subs	r7, #8
		if (listener->recv) {
    d34e:	2b00      	cmp	r3, #0
    d350:	d1e5      	bne.n	d31e <le_adv_recv+0x72>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d352:	463d      	mov	r5, r7
    d354:	e7f7      	b.n	d346 <le_adv_recv+0x9a>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    d356:	2bff      	cmp	r3, #255	; 0xff
    d358:	d104      	bne.n	d364 <le_adv_recv+0xb8>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    d35a:	4926      	ldr	r1, [pc, #152]	; (d3f4 <le_adv_recv+0x148>)
		bt_addr_le_copy(&id_addr,
    d35c:	4668      	mov	r0, sp
    d35e:	f00f f993 	bl	1c688 <bt_addr_le_copy>
    d362:	e7b6      	b.n	d2d2 <le_adv_recv+0x26>
    d364:	4601      	mov	r1, r0
    d366:	2000      	movs	r0, #0
    d368:	f00e ff8a 	bl	1c280 <bt_lookup_id_addr>
    d36c:	4601      	mov	r1, r0
    d36e:	e7f5      	b.n	d35c <le_adv_recv+0xb0>
		if (listener->recv) {
    d370:	2b00      	cmp	r3, #0
    d372:	d1d4      	bne.n	d31e <le_adv_recv+0x72>
	info->addr = NULL;
    d374:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
    d376:	8932      	ldrh	r2, [r6, #8]
	info->addr = NULL;
    d378:	6033      	str	r3, [r6, #0]
    d37a:	4e1f      	ldr	r6, [pc, #124]	; (d3f8 <le_adv_recv+0x14c>)
    d37c:	e8d6 3faf 	lda	r3, [r6]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d380:	0619      	lsls	r1, r3, #24
    d382:	f3c3 15c0 	ubfx	r5, r3, #7, #1
    d386:	d41c      	bmi.n	d3c2 <le_adv_recv+0x116>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    d388:	07d2      	lsls	r2, r2, #31
    d38a:	d51a      	bpl.n	d3c2 <le_adv_recv+0x116>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    d38c:	2202      	movs	r2, #2
    d38e:	4669      	mov	r1, sp
    d390:	4628      	mov	r0, r5
    d392:	f000 ffbd 	bl	e310 <bt_conn_lookup_state_le>
	if (!conn) {
    d396:	4604      	mov	r4, r0
    d398:	b198      	cbz	r0, d3c2 <le_adv_recv+0x116>
    d39a:	e8d6 3faf 	lda	r3, [r6]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    d39e:	065b      	lsls	r3, r3, #25
    d3a0:	d412      	bmi.n	d3c8 <le_adv_recv+0x11c>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    d3a2:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    d3a6:	4641      	mov	r1, r8
    d3a8:	f00f f96e 	bl	1c688 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
    d3ac:	4620      	mov	r0, r4
    d3ae:	f00e fec8 	bl	1c142 <bt_le_create_conn>
    d3b2:	b970      	cbnz	r0, d3d2 <le_adv_recv+0x126>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
    d3b4:	4620      	mov	r0, r4
    d3b6:	2106      	movs	r1, #6
    d3b8:	f000 fd66 	bl	de88 <bt_conn_set_state>
	bt_conn_unref(conn);
    d3bc:	4620      	mov	r0, r4
    d3be:	f000 fd33 	bl	de28 <bt_conn_unref>
}
    d3c2:	b003      	add	sp, #12
    d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
    d3c8:	4628      	mov	r0, r5
    d3ca:	f00f f964 	bl	1c696 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    d3ce:	2800      	cmp	r0, #0
    d3d0:	d0e7      	beq.n	d3a2 <le_adv_recv+0xf6>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    d3d2:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d3d4:	2100      	movs	r1, #0
    d3d6:	4620      	mov	r0, r4
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    d3d8:	7263      	strb	r3, [r4, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d3da:	f000 fd55 	bl	de88 <bt_conn_set_state>
	bt_conn_unref(conn);
    d3de:	4620      	mov	r0, r4
    d3e0:	f000 fd22 	bl	de28 <bt_conn_unref>
	bt_le_scan_update(false);
    d3e4:	2000      	movs	r0, #0
    d3e6:	f7ff ff1f 	bl	d228 <bt_le_scan_update>
    d3ea:	e7ea      	b.n	d3c2 <le_adv_recv+0x116>
    d3ec:	200069dc 	.word	0x200069dc
    d3f0:	200069d4 	.word	0x200069d4
    d3f4:	00022e27 	.word	0x00022e27
    d3f8:	20000090 	.word	0x20000090

0000d3fc <bt_hci_le_scan_timeout>:
{
    d3fc:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d3fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    d402:	4816      	ldr	r0, [pc, #88]	; (d45c <bt_hci_le_scan_timeout+0x60>)
    d404:	f00f f935 	bl	1c672 <atomic_and>
    d408:	f06f 0180 	mvn.w	r1, #128	; 0x80
    d40c:	4813      	ldr	r0, [pc, #76]	; (d45c <bt_hci_le_scan_timeout+0x60>)
    d40e:	f00f f930 	bl	1c672 <atomic_and>
    d412:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    d416:	4811      	ldr	r0, [pc, #68]	; (d45c <bt_hci_le_scan_timeout+0x60>)
    d418:	f00f f92b 	bl	1c672 <atomic_and>
    d41c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    d420:	480e      	ldr	r0, [pc, #56]	; (d45c <bt_hci_le_scan_timeout+0x60>)
    d422:	f00f f926 	bl	1c672 <atomic_and>
	return list->head;
    d426:	4b0e      	ldr	r3, [pc, #56]	; (d460 <bt_hci_le_scan_timeout+0x64>)
    d428:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d42a:	b1b3      	cbz	r3, d45a <bt_hci_le_scan_timeout+0x5e>
	return node->next;
    d42c:	681c      	ldr	r4, [r3, #0]
    d42e:	b104      	cbz	r4, d432 <bt_hci_le_scan_timeout+0x36>
    d430:	3c08      	subs	r4, #8
		if (listener->timeout) {
    d432:	f853 3c04 	ldr.w	r3, [r3, #-4]
    d436:	b103      	cbz	r3, d43a <bt_hci_le_scan_timeout+0x3e>
			listener->timeout();
    d438:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d43a:	b174      	cbz	r4, d45a <bt_hci_le_scan_timeout+0x5e>
    d43c:	68a2      	ldr	r2, [r4, #8]
    d43e:	4623      	mov	r3, r4
    d440:	b142      	cbz	r2, d454 <bt_hci_le_scan_timeout+0x58>
		if (listener->timeout) {
    d442:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    d444:	f1a2 0408 	sub.w	r4, r2, #8
		if (listener->timeout) {
    d448:	2b00      	cmp	r3, #0
    d44a:	d1f5      	bne.n	d438 <bt_hci_le_scan_timeout+0x3c>
    d44c:	e7f6      	b.n	d43c <bt_hci_le_scan_timeout+0x40>
}
    d44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			listener->timeout();
    d452:	4718      	bx	r3
		if (listener->timeout) {
    d454:	6863      	ldr	r3, [r4, #4]
    d456:	2b00      	cmp	r3, #0
    d458:	d1f9      	bne.n	d44e <bt_hci_le_scan_timeout+0x52>
}
    d45a:	bd10      	pop	{r4, pc}
    d45c:	20000090 	.word	0x20000090
    d460:	200069d4 	.word	0x200069d4

0000d464 <bt_hci_le_adv_ext_report>:

void bt_hci_le_adv_ext_report(struct net_buf *buf)
{
    d464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    d468:	f100 050c 	add.w	r5, r0, #12
    d46c:	4681      	mov	r9, r0
    d46e:	4628      	mov	r0, r5
    d470:	f010 f86f 	bl	1d552 <net_buf_simple_pull_u8>
    d474:	4607      	mov	r7, r0
			create_ext_adv_info(evt, &scan_info);
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
			continue;
		}

		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
    d476:	4e51      	ldr	r6, [pc, #324]	; (d5bc <bt_hci_le_adv_ext_report+0x158>)
			 */
			__ASSERT_NO_MSG(reassembling_advertiser.state == FRAG_ADV_INACTIVE);
			init_reassembling_advertiser(&evt->addr, evt->sid);
		}

		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
    d478:	f8df a154 	ldr.w	sl, [pc, #340]	; d5d0 <bt_hci_le_adv_ext_report+0x16c>
	while (num_reports--) {
    d47c:	b917      	cbnz	r7, d484 <bt_hci_le_adv_ext_report+0x20>
		/* We do no longer need to keep track of this advertiser. */
		reset_reassembling_advertiser();

		net_buf_pull(buf, evt->length);
	}
}
    d47e:	b004      	add	sp, #16
    d480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (buf->len < sizeof(*evt)) {
    d484:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    d488:	2b17      	cmp	r3, #23
    d48a:	d806      	bhi.n	d49a <bt_hci_le_adv_ext_report+0x36>
			LOG_ERR("Unexpected end of buffer");
    d48c:	2145      	movs	r1, #69	; 0x45
    d48e:	484c      	ldr	r0, [pc, #304]	; (d5c0 <bt_hci_le_adv_ext_report+0x15c>)
}
    d490:	b004      	add	sp, #16
    d492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			LOG_ERR("Unexpected end of buffer");
    d496:	f00d bf4f 	b.w	1b338 <z_log_minimal_printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    d49a:	2118      	movs	r1, #24
    d49c:	4628      	mov	r0, r5
    d49e:	f003 fd9b 	bl	10fd8 <net_buf_simple_pull_mem>
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS(evt->evt_type);
    d4a2:	8803      	ldrh	r3, [r0, #0]
    d4a4:	4604      	mov	r4, r0
    d4a6:	f3c3 1841 	ubfx	r8, r3, #5, #2
		if (evt->evt_type & BT_HCI_LE_ADV_EVT_TYPE_LEGACY) {
    d4aa:	06db      	lsls	r3, r3, #27
    d4ac:	d50b      	bpl.n	d4c6 <bt_hci_le_adv_ext_report+0x62>
			create_ext_adv_info(evt, &scan_info);
    d4ae:	4669      	mov	r1, sp
			create_ext_adv_info(evt, &scan_info);
    d4b0:	f7ff fdde 	bl	d070 <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
    d4b4:	462a      	mov	r2, r5
    d4b6:	4669      	mov	r1, sp
    d4b8:	7de3      	ldrb	r3, [r4, #23]
    d4ba:	1ca0      	adds	r0, r4, #2
    d4bc:	f7ff fef6 	bl	d2ac <le_adv_recv>
			continue;
    d4c0:	3f01      	subs	r7, #1
    d4c2:	b2ff      	uxtb	r7, r7
    d4c4:	e7da      	b.n	d47c <bt_hci_le_adv_ext_report+0x18>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
    d4c6:	7a33      	ldrb	r3, [r6, #8]
    d4c8:	b19b      	cbz	r3, d4f2 <bt_hci_le_adv_ext_report+0x8e>
	return a->sid == sid && bt_addr_le_eq(&a->addr, addr);
    d4ca:	7ac2      	ldrb	r2, [r0, #11]
    d4cc:	79f3      	ldrb	r3, [r6, #7]
    d4ce:	429a      	cmp	r2, r3
    d4d0:	d10f      	bne.n	d4f2 <bt_hci_le_adv_ext_report+0x8e>
    d4d2:	1c81      	adds	r1, r0, #2
    d4d4:	2207      	movs	r2, #7
    d4d6:	4839      	ldr	r0, [pc, #228]	; (d5bc <bt_hci_le_adv_ext_report+0x158>)
    d4d8:	f011 ff64 	bl	1f3a4 <memcmp>
    d4dc:	b948      	cbnz	r0, d4f2 <bt_hci_le_adv_ext_report+0x8e>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
    d4de:	f1b8 0f02 	cmp.w	r8, #2
    d4e2:	d12f      	bne.n	d544 <bt_hci_le_adv_ext_report+0xe0>
    d4e4:	4628      	mov	r0, r5
    d4e6:	7de1      	ldrb	r1, [r4, #23]
    d4e8:	f003 fd76 	bl	10fd8 <net_buf_simple_pull_mem>
				reset_reassembling_advertiser();
    d4ec:	f7ff fdb4 	bl	d058 <reset_reassembling_advertiser>
    d4f0:	e7e6      	b.n	d4c0 <bt_hci_le_adv_ext_report+0x5c>
		if (is_new_advertiser && is_report_complete) {
    d4f2:	f1b8 0f00 	cmp.w	r8, #0
    d4f6:	d102      	bne.n	d4fe <bt_hci_le_adv_ext_report+0x9a>
			create_ext_adv_info(evt, &scan_info);
    d4f8:	4669      	mov	r1, sp
    d4fa:	4620      	mov	r0, r4
    d4fc:	e7d8      	b.n	d4b0 <bt_hci_le_adv_ext_report+0x4c>
		if (is_new_advertiser && reassembling_advertiser.state == FRAG_ADV_REASSEMBLING) {
    d4fe:	7a33      	ldrb	r3, [r6, #8]
    d500:	2b01      	cmp	r3, #1
    d502:	d108      	bne.n	d516 <bt_hci_le_adv_ext_report+0xb2>
			LOG_WRN("Received an incomplete advertising report while reassembling "
    d504:	2157      	movs	r1, #87	; 0x57
    d506:	482f      	ldr	r0, [pc, #188]	; (d5c4 <bt_hci_le_adv_ext_report+0x160>)
    d508:	f00d ff16 	bl	1b338 <z_log_minimal_printk>
    d50c:	4628      	mov	r0, r5
    d50e:	7de1      	ldrb	r1, [r4, #23]
    d510:	f003 fd62 	bl	10fd8 <net_buf_simple_pull_mem>
			continue;
    d514:	e7d4      	b.n	d4c0 <bt_hci_le_adv_ext_report+0x5c>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
    d516:	f1b8 0f02 	cmp.w	r8, #2
    d51a:	d0e3      	beq.n	d4e4 <bt_hci_le_adv_ext_report+0x80>
			__ASSERT_NO_MSG(reassembling_advertiser.state == FRAG_ADV_INACTIVE);
    d51c:	b153      	cbz	r3, d534 <bt_hci_le_adv_ext_report+0xd0>
    d51e:	492a      	ldr	r1, [pc, #168]	; (d5c8 <bt_hci_le_adv_ext_report+0x164>)
    d520:	f240 228b 	movw	r2, #651	; 0x28b
    d524:	4829      	ldr	r0, [pc, #164]	; (d5cc <bt_hci_le_adv_ext_report+0x168>)
    d526:	f00d fef3 	bl	1b310 <assert_print>
    d52a:	f240 218b 	movw	r1, #651	; 0x28b
		__ASSERT_NO_MSG(is_report_complete);
    d52e:	4826      	ldr	r0, [pc, #152]	; (d5c8 <bt_hci_le_adv_ext_report+0x164>)
    d530:	f00d fee7 	bl	1b302 <assert_post_action>
	bt_addr_le_copy(&reassembling_advertiser.addr, addr);
    d534:	4630      	mov	r0, r6
    d536:	1ca1      	adds	r1, r4, #2
			init_reassembling_advertiser(&evt->addr, evt->sid);
    d538:	7ae2      	ldrb	r2, [r4, #11]
	bt_addr_le_copy(&reassembling_advertiser.addr, addr);
    d53a:	f00f f8a5 	bl	1c688 <bt_addr_le_copy>
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
    d53e:	2301      	movs	r3, #1
	reassembling_advertiser.sid = sid;
    d540:	71f2      	strb	r2, [r6, #7]
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
    d542:	7233      	strb	r3, [r6, #8]
		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
    d544:	7de2      	ldrb	r2, [r4, #23]
    d546:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d54a:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    d54e:	4413      	add	r3, r2
    d550:	428b      	cmp	r3, r1
    d552:	dd09      	ble.n	d568 <bt_hci_le_adv_ext_report+0x104>
			reassembling_advertiser.state = FRAG_ADV_DISCARDING;
    d554:	2302      	movs	r3, #2
    d556:	7233      	strb	r3, [r6, #8]
    d558:	4611      	mov	r1, r2
    d55a:	4628      	mov	r0, r5
    d55c:	f003 fd3c 	bl	10fd8 <net_buf_simple_pull_mem>
			if (!more_to_come) {
    d560:	f1b8 0f01 	cmp.w	r8, #1
    d564:	d0ac      	beq.n	d4c0 <bt_hci_le_adv_ext_report+0x5c>
    d566:	e7c1      	b.n	d4ec <bt_hci_le_adv_ext_report+0x88>
		if (reassembling_advertiser.state == FRAG_ADV_DISCARDING) {
    d568:	7a33      	ldrb	r3, [r6, #8]
    d56a:	2b02      	cmp	r3, #2
    d56c:	d0f4      	beq.n	d558 <bt_hci_le_adv_ext_report+0xf4>
		net_buf_simple_add_mem(&ext_scan_buf, buf->data, evt->length);
    d56e:	4650      	mov	r0, sl
    d570:	f8d9 100c 	ldr.w	r1, [r9, #12]
    d574:	f010 f809 	bl	1d58a <net_buf_simple_add_mem>
		if (more_to_come) {
    d578:	f1b8 0f01 	cmp.w	r8, #1
    d57c:	d0a0      	beq.n	d4c0 <bt_hci_le_adv_ext_report+0x5c>
		__ASSERT_NO_MSG(is_report_complete);
    d57e:	f1b8 0f00 	cmp.w	r8, #0
    d582:	d008      	beq.n	d596 <bt_hci_le_adv_ext_report+0x132>
    d584:	4910      	ldr	r1, [pc, #64]	; (d5c8 <bt_hci_le_adv_ext_report+0x164>)
    d586:	f240 22aa 	movw	r2, #682	; 0x2aa
    d58a:	4810      	ldr	r0, [pc, #64]	; (d5cc <bt_hci_le_adv_ext_report+0x168>)
    d58c:	f00d fec0 	bl	1b310 <assert_print>
    d590:	f240 21aa 	movw	r1, #682	; 0x2aa
    d594:	e7cb      	b.n	d52e <bt_hci_le_adv_ext_report+0xca>
		create_ext_adv_info(evt, &scan_info);
    d596:	4669      	mov	r1, sp
    d598:	4620      	mov	r0, r4
    d59a:	f7ff fd69 	bl	d070 <create_ext_adv_info>
		le_adv_recv(&evt->addr, &scan_info, &ext_scan_buf, ext_scan_buf.len);
    d59e:	4669      	mov	r1, sp
    d5a0:	4652      	mov	r2, sl
    d5a2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d5a6:	1ca0      	adds	r0, r4, #2
    d5a8:	f7ff fe80 	bl	d2ac <le_adv_recv>
		reset_reassembling_advertiser();
    d5ac:	f7ff fd54 	bl	d058 <reset_reassembling_advertiser>
	return net_buf_simple_pull(&buf->b, len);
    d5b0:	4628      	mov	r0, r5
    d5b2:	7de1      	ldrb	r1, [r4, #23]
    d5b4:	f003 fcf6 	bl	10fa4 <net_buf_simple_pull>
    d5b8:	e782      	b.n	d4c0 <bt_hci_le_adv_ext_report+0x5c>
    d5ba:	bf00      	nop
    d5bc:	2000727d 	.word	0x2000727d
    d5c0:	00023885 	.word	0x00023885
    d5c4:	000238a3 	.word	0x000238a3
    d5c8:	000239c5 	.word	0x000239c5
    d5cc:	000221f8 	.word	0x000221f8
    d5d0:	2000036c 	.word	0x2000036c

0000d5d4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    d5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return net_buf_simple_pull_u8(&buf->b);
    d5d8:	f100 060c 	add.w	r6, r0, #12
    d5dc:	4607      	mov	r7, r0
    d5de:	b085      	sub	sp, #20
    d5e0:	4630      	mov	r0, r6
    d5e2:	f00f ffb6 	bl	1d552 <net_buf_simple_pull_u8>
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    d5e6:	f04f 0801 	mov.w	r8, #1
    d5ea:	4605      	mov	r5, r0
	LOG_DBG("Adv number of reports %u",  num_reports);
    d5ec:	f8df 9078 	ldr.w	r9, [pc, #120]	; d668 <bt_hci_le_adv_report+0x94>
	while (num_reports--) {
    d5f0:	b915      	cbnz	r5, d5f8 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    d5f2:	b005      	add	sp, #20
    d5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (buf->len < sizeof(*evt)) {
    d5f8:	8a3b      	ldrh	r3, [r7, #16]
    d5fa:	2b08      	cmp	r3, #8
    d5fc:	d806      	bhi.n	d60c <bt_hci_le_adv_report+0x38>
			LOG_ERR("Unexpected end of buffer");
    d5fe:	2145      	movs	r1, #69	; 0x45
    d600:	4818      	ldr	r0, [pc, #96]	; (d664 <bt_hci_le_adv_report+0x90>)
}
    d602:	b005      	add	sp, #20
    d604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			LOG_ERR("Unexpected end of buffer");
    d608:	f00d be96 	b.w	1b338 <z_log_minimal_printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    d60c:	2109      	movs	r1, #9
    d60e:	4630      	mov	r0, r6
    d610:	f003 fce2 	bl	10fd8 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    d614:	237f      	movs	r3, #127	; 0x7f
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    d616:	f8ad 800c 	strh.w	r8, [sp, #12]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    d61a:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
    d61e:	7a03      	ldrb	r3, [r0, #8]
    d620:	4604      	mov	r4, r0
    d622:	4403      	add	r3, r0
    d624:	7a5b      	ldrb	r3, [r3, #9]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    d626:	4669      	mov	r1, sp
		adv_info.rssi = evt->data[evt->length];
    d628:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
    d62c:	23ff      	movs	r3, #255	; 0xff
    d62e:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
    d632:	2300      	movs	r3, #0
    d634:	f8ad 300a 	strh.w	r3, [sp, #10]
		adv_info.adv_type = evt->evt_type;
    d638:	7802      	ldrb	r2, [r0, #0]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    d63a:	3001      	adds	r0, #1
    d63c:	2a04      	cmp	r2, #4
    d63e:	bf98      	it	ls
    d640:	f819 3002 	ldrbls.w	r3, [r9, r2]
		adv_info.adv_type = evt->evt_type;
    d644:	f88d 2007 	strb.w	r2, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    d648:	f8ad 3008 	strh.w	r3, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    d64c:	79c3      	ldrb	r3, [r0, #7]
    d64e:	4632      	mov	r2, r6
    d650:	f7ff fe2c 	bl	d2ac <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    d654:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
    d656:	4630      	mov	r0, r6
    d658:	3101      	adds	r1, #1
    d65a:	3d01      	subs	r5, #1
    d65c:	f003 fca2 	bl	10fa4 <net_buf_simple_pull>
    d660:	b2ed      	uxtb	r5, r5
    d662:	e7c5      	b.n	d5f0 <bt_hci_le_adv_report+0x1c>
    d664:	00023885 	.word	0x00023885
    d668:	00023a01 	.word	0x00023a01

0000d66c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d66e:	4604      	mov	r4, r0
    d670:	460e      	mov	r6, r1
    d672:	4d3b      	ldr	r5, [pc, #236]	; (d760 <bt_le_scan_start+0xf4>)
    d674:	b085      	sub	sp, #20
    d676:	e8d5 3faf 	lda	r3, [r5]
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d67a:	0758      	lsls	r0, r3, #29
    d67c:	d56c      	bpl.n	d758 <bt_le_scan_start+0xec>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    d67e:	7822      	ldrb	r2, [r4, #0]
    d680:	2a01      	cmp	r2, #1
    d682:	d904      	bls.n	d68e <bt_le_scan_start+0x22>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    d684:	f06f 0515 	mvn.w	r5, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    d688:	4628      	mov	r0, r5
    d68a:	b005      	add	sp, #20
    d68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    d68e:	6863      	ldr	r3, [r4, #4]
    d690:	2b0f      	cmp	r3, #15
    d692:	d8f7      	bhi.n	d684 <bt_le_scan_start+0x18>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    d694:	f643 77fc 	movw	r7, #16380	; 0x3ffc
    d698:	8920      	ldrh	r0, [r4, #8]
    d69a:	1f03      	subs	r3, r0, #4
    d69c:	b29b      	uxth	r3, r3
    d69e:	42bb      	cmp	r3, r7
    d6a0:	d8f0      	bhi.n	d684 <bt_le_scan_start+0x18>
	if (param->window < 0x0004 || param->window > 0x4000) {
    d6a2:	8961      	ldrh	r1, [r4, #10]
    d6a4:	1f0b      	subs	r3, r1, #4
    d6a6:	b29b      	uxth	r3, r3
    d6a8:	42bb      	cmp	r3, r7
    d6aa:	d8eb      	bhi.n	d684 <bt_le_scan_start+0x18>
	if (param->window > param->interval) {
    d6ac:	4288      	cmp	r0, r1
    d6ae:	d3e9      	bcc.n	d684 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
    d6b0:	b942      	cbnz	r2, d6c4 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d6b2:	2180      	movs	r1, #128	; 0x80
    d6b4:	482a      	ldr	r0, [pc, #168]	; (d760 <bt_le_scan_start+0xf4>)
    d6b6:	f00e ffd1 	bl	1c65c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d6ba:	4008      	ands	r0, r1
    d6bc:	d007      	beq.n	d6ce <bt_le_scan_start+0x62>
		return -EALREADY;
    d6be:	f06f 0577 	mvn.w	r5, #119	; 0x77
    d6c2:	e7e1      	b.n	d688 <bt_le_scan_start+0x1c>
	if (param->type && !bt_id_scan_random_addr_check()) {
    d6c4:	f00e fe3a 	bl	1c33c <bt_id_scan_random_addr_check>
    d6c8:	2800      	cmp	r0, #0
    d6ca:	d1f2      	bne.n	d6b2 <bt_le_scan_start+0x46>
    d6cc:	e7da      	b.n	d684 <bt_le_scan_start+0x18>
    d6ce:	e8d5 3faf 	lda	r3, [r5]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    d6d2:	0659      	lsls	r1, r3, #25
    d6d4:	d509      	bpl.n	d6ea <bt_le_scan_start+0x7e>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    d6d6:	f00e ffde 	bl	1c696 <bt_le_scan_set_enable>
		if (err) {
    d6da:	4605      	mov	r5, r0
    d6dc:	b128      	cbz	r0, d6ea <bt_le_scan_start+0x7e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d6de:	f06f 0180 	mvn.w	r1, #128	; 0x80
    d6e2:	481f      	ldr	r0, [pc, #124]	; (d760 <bt_le_scan_start+0xf4>)
    d6e4:	f00e ffc5 	bl	1c672 <atomic_and>
		return err;
    d6e8:	e7ce      	b.n	d688 <bt_le_scan_start+0x1c>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    d6ea:	6863      	ldr	r3, [r4, #4]
	if (val) {
    d6ec:	07da      	lsls	r2, r3, #31
    d6ee:	d52d      	bpl.n	d74c <bt_le_scan_start+0xe0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d6f0:	f44f 7100 	mov.w	r1, #512	; 0x200
    d6f4:	481a      	ldr	r0, [pc, #104]	; (d760 <bt_le_scan_start+0xf4>)
    d6f6:	f00e ffb1 	bl	1c65c <atomic_or>
		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
    d6fa:	6861      	ldr	r1, [r4, #4]
    d6fc:	070b      	lsls	r3, r1, #28
			param_1m.type = param->type;
    d6fe:	bf5f      	itttt	pl
    d700:	7822      	ldrbpl	r2, [r4, #0]
			phy_1m = &param_1m;
    d702:	4668      	movpl	r0, sp
			param_1m.type = param->type;
    d704:	f88d 2000 	strbpl.w	r2, [sp]
			param_1m.interval = sys_cpu_to_le16(param->interval);
    d708:	8922      	ldrhpl	r2, [r4, #8]
		struct bt_hci_ext_scan_phy *phy_1m = NULL;
    d70a:	bf4f      	iteee	mi
    d70c:	2000      	movmi	r0, #0
			param_1m.interval = sys_cpu_to_le16(param->interval);
    d70e:	f8ad 2001 	strhpl.w	r2, [sp, #1]
			param_1m.window = sys_cpu_to_le16(param->window);
    d712:	8962      	ldrhpl	r2, [r4, #10]
    d714:	f8ad 2003 	strhpl.w	r2, [sp, #3]
		if (param->options & BT_LE_SCAN_OPT_CODED) {
    d718:	f011 0104 	ands.w	r1, r1, #4
    d71c:	d00d      	beq.n	d73a <bt_le_scan_start+0xce>
			uint16_t interval = param->interval_coded ?
    d71e:	89e2      	ldrh	r2, [r4, #14]
    d720:	b902      	cbnz	r2, d724 <bt_le_scan_start+0xb8>
    d722:	8922      	ldrh	r2, [r4, #8]
			uint16_t window = param->window_coded ?
    d724:	8a23      	ldrh	r3, [r4, #16]
    d726:	b903      	cbnz	r3, d72a <bt_le_scan_start+0xbe>
    d728:	8963      	ldrh	r3, [r4, #10]
			param_coded.type = param->type;
    d72a:	7821      	ldrb	r1, [r4, #0]
			param_coded.interval = sys_cpu_to_le16(interval);
    d72c:	f8ad 2009 	strh.w	r2, [sp, #9]
			param_coded.type = param->type;
    d730:	f88d 1008 	strb.w	r1, [sp, #8]
			param_coded.window = sys_cpu_to_le16(window);
    d734:	f8ad 300b 	strh.w	r3, [sp, #11]
			phy_coded = &param_coded;
    d738:	a902      	add	r1, sp, #8
		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
    d73a:	89a2      	ldrh	r2, [r4, #12]
    d73c:	f7ff fcf6 	bl	d12c <start_le_scan_ext>
	if (err) {
    d740:	4605      	mov	r5, r0
    d742:	2800      	cmp	r0, #0
    d744:	d1cb      	bne.n	d6de <bt_le_scan_start+0x72>
	scan_dev_found_cb = cb;
    d746:	4b07      	ldr	r3, [pc, #28]	; (d764 <bt_le_scan_start+0xf8>)
    d748:	601e      	str	r6, [r3, #0]
	return 0;
    d74a:	e79d      	b.n	d688 <bt_le_scan_start+0x1c>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d74c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    d750:	4803      	ldr	r0, [pc, #12]	; (d760 <bt_le_scan_start+0xf4>)
    d752:	f00e ff8e 	bl	1c672 <atomic_and>
    d756:	e7d0      	b.n	d6fa <bt_le_scan_start+0x8e>
		return -EAGAIN;
    d758:	f06f 050a 	mvn.w	r5, #10
    d75c:	e794      	b.n	d688 <bt_le_scan_start+0x1c>
    d75e:	bf00      	nop
    d760:	20000090 	.word	0x20000090
    d764:	200069dc 	.word	0x200069dc

0000d768 <bt_le_scan_stop>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d768:	f06f 0180 	mvn.w	r1, #128	; 0x80

int bt_le_scan_stop(void)
{
    d76c:	b508      	push	{r3, lr}
    d76e:	480d      	ldr	r0, [pc, #52]	; (d7a4 <bt_le_scan_stop+0x3c>)
    d770:	f00e ff7f 	bl	1c672 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    d774:	0602      	lsls	r2, r0, #24
    d776:	d512      	bpl.n	d79e <bt_le_scan_stop+0x36>
		return -EALREADY;
	}

	bt_scan_reset();
    d778:	f7ff fd4e 	bl	d218 <bt_scan_reset>
    d77c:	4809      	ldr	r0, [pc, #36]	; (d7a4 <bt_le_scan_stop+0x3c>)
    d77e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    d782:	f00e ff76 	bl	1c672 <atomic_and>

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
    d786:	0503      	lsls	r3, r0, #20
    d788:	d504      	bpl.n	d794 <bt_le_scan_stop+0x2c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d78a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    d78e:	4805      	ldr	r0, [pc, #20]	; (d7a4 <bt_le_scan_stop+0x3c>)
    d790:	f00e ff6f 	bl	1c672 <atomic_and>
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    d794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    d798:	2000      	movs	r0, #0
    d79a:	f7ff bd45 	b.w	d228 <bt_le_scan_update>
}
    d79e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d7a2:	bd08      	pop	{r3, pc}
    d7a4:	20000090 	.word	0x20000090

0000d7a8 <bt_le_scan_cb_register>:
	parent->next = child;
    d7a8:	2300      	movs	r3, #0
    d7aa:	6083      	str	r3, [r0, #8]
	return list->tail;
    d7ac:	4b05      	ldr	r3, [pc, #20]	; (d7c4 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
    d7ae:	f100 0208 	add.w	r2, r0, #8
    d7b2:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    d7b4:	b911      	cbnz	r1, d7bc <bt_le_scan_cb_register+0x14>
	list->head = node;
    d7b6:	e9c3 2200 	strd	r2, r2, [r3]
}
    d7ba:	4770      	bx	lr
	parent->next = child;
    d7bc:	600a      	str	r2, [r1, #0]
	list->tail = node;
    d7be:	605a      	str	r2, [r3, #4]
}
    d7c0:	4770      	bx	lr
    d7c2:	bf00      	nop
    d7c4:	200069d4 	.word	0x200069d4

0000d7c8 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    d7c8:	b530      	push	{r4, r5, lr}
    d7ca:	b08d      	sub	sp, #52	; 0x34
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    d7cc:	2120      	movs	r1, #32
    d7ce:	a804      	add	r0, sp, #16
    d7d0:	f7fd fcc4 	bl	b15c <bt_hci_le_rand>
	if (ret) {
    d7d4:	4604      	mov	r4, r0
    d7d6:	b9e0      	cbnz	r0, d812 <prng_reseed.constprop.0+0x4a>
	return z_impl_k_uptime_ticks();
    d7d8:	f011 fcdf 	bl	1f19a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    d7dc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    d7e0:	fba0 3205 	umull	r3, r2, r0, r5
    d7e4:	fb05 2101 	mla	r1, r5, r1, r2
    d7e8:	0bdb      	lsrs	r3, r3, #15
    d7ea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    d7ee:	0bc9      	lsrs	r1, r1, #15
		return ret;
	}

	extra = k_uptime_get();
    d7f0:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    d7f4:	2308      	movs	r3, #8
    d7f6:	2220      	movs	r2, #32
    d7f8:	9300      	str	r3, [sp, #0]
    d7fa:	4807      	ldr	r0, [pc, #28]	; (d818 <prng_reseed.constprop.0+0x50>)
    d7fc:	446b      	add	r3, sp
    d7fe:	a904      	add	r1, sp, #16
    d800:	f00e fb8c 	bl	1bf1c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    d804:	b928      	cbnz	r0, d812 <prng_reseed.constprop.0+0x4a>
		LOG_ERR("Failed to re-seed PRNG");
    d806:	2145      	movs	r1, #69	; 0x45
    d808:	4804      	ldr	r0, [pc, #16]	; (d81c <prng_reseed.constprop.0+0x54>)
    d80a:	f00d fd95 	bl	1b338 <z_log_minimal_printk>
    d80e:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
    d812:	4620      	mov	r0, r4
    d814:	b00d      	add	sp, #52	; 0x34
    d816:	bd30      	pop	{r4, r5, pc}
    d818:	20005bc0 	.word	0x20005bc0
    d81c:	00023a06 	.word	0x00023a06

0000d820 <prng_init>:

int prng_init(void)
{
    d820:	b507      	push	{r0, r1, r2, lr}
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    d822:	2108      	movs	r1, #8
    d824:	4668      	mov	r0, sp
    d826:	f7fd fc99 	bl	b15c <bt_hci_le_rand>
	if (ret) {
    d82a:	b958      	cbnz	r0, d844 <prng_init+0x24>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    d82c:	2208      	movs	r2, #8
    d82e:	4669      	mov	r1, sp
    d830:	4807      	ldr	r0, [pc, #28]	; (d850 <prng_init+0x30>)
    d832:	f00e fb53 	bl	1bedc <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    d836:	b940      	cbnz	r0, d84a <prng_init+0x2a>
		LOG_ERR("Failed to initialize PRNG");
    d838:	4806      	ldr	r0, [pc, #24]	; (d854 <prng_init+0x34>)
    d83a:	2145      	movs	r1, #69	; 0x45
    d83c:	f00d fd7c 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
    d840:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    d844:	b003      	add	sp, #12
    d846:	f85d fb04 	ldr.w	pc, [sp], #4
	return prng_reseed(&prng);
    d84a:	f7ff ffbd 	bl	d7c8 <prng_reseed.constprop.0>
    d84e:	e7f9      	b.n	d844 <prng_init+0x24>
    d850:	20005bc0 	.word	0x20005bc0
    d854:	00023a22 	.word	0x00023a22

0000d858 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    d858:	b538      	push	{r3, r4, r5, lr}
    d85a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
    d85c:	4604      	mov	r4, r0
    d85e:	b198      	cbz	r0, d888 <bt_rand+0x30>
    d860:	b191      	cbz	r1, d888 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
    d862:	4a0b      	ldr	r2, [pc, #44]	; (d890 <bt_rand+0x38>)
    d864:	f00e fb73 	bl	1bf4e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    d868:	1c43      	adds	r3, r0, #1
    d86a:	d107      	bne.n	d87c <bt_rand+0x24>
		ret = prng_reseed(&prng);
    d86c:	f7ff ffac 	bl	d7c8 <prng_reseed.constprop.0>
		if (ret) {
    d870:	b948      	cbnz	r0, d886 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    d872:	4629      	mov	r1, r5
    d874:	4620      	mov	r0, r4
    d876:	4a06      	ldr	r2, [pc, #24]	; (d890 <bt_rand+0x38>)
    d878:	f00e fb69 	bl	1bf4e <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    d87c:	2801      	cmp	r0, #1
    d87e:	bf0c      	ite	eq
    d880:	2000      	moveq	r0, #0
    d882:	f06f 0004 	mvnne.w	r0, #4
}
    d886:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d888:	f06f 0015 	mvn.w	r0, #21
    d88c:	e7fb      	b.n	d886 <bt_rand+0x2e>
    d88e:	bf00      	nop
    d890:	20005bc0 	.word	0x20005bc0

0000d894 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    d894:	b570      	push	{r4, r5, r6, lr}
    d896:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    d898:	4b10      	ldr	r3, [pc, #64]	; (d8dc <notify_connected+0x48>)
    d89a:	681d      	ldr	r5, [r3, #0]
    d89c:	b975      	cbnz	r5, d8bc <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    d89e:	4d10      	ldr	r5, [pc, #64]	; (d8e0 <notify_connected+0x4c>)
    d8a0:	4e10      	ldr	r6, [pc, #64]	; (d8e4 <notify_connected+0x50>)
    d8a2:	42b5      	cmp	r5, r6
    d8a4:	d918      	bls.n	d8d8 <notify_connected+0x44>
    d8a6:	4910      	ldr	r1, [pc, #64]	; (d8e8 <notify_connected+0x54>)
    d8a8:	4810      	ldr	r0, [pc, #64]	; (d8ec <notify_connected+0x58>)
    d8aa:	f240 525b 	movw	r2, #1371	; 0x55b
    d8ae:	f00d fd2f 	bl	1b310 <assert_print>
    d8b2:	f240 515b 	movw	r1, #1371	; 0x55b
    d8b6:	480c      	ldr	r0, [pc, #48]	; (d8e8 <notify_connected+0x54>)
    d8b8:	f00d fd23 	bl	1b302 <assert_post_action>
		if (cb->connected) {
    d8bc:	682b      	ldr	r3, [r5, #0]
    d8be:	b113      	cbz	r3, d8c6 <notify_connected+0x32>
			cb->connected(conn, conn->err);
    d8c0:	4620      	mov	r0, r4
    d8c2:	7a61      	ldrb	r1, [r4, #9]
    d8c4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    d8c6:	692d      	ldr	r5, [r5, #16]
    d8c8:	e7e8      	b.n	d89c <notify_connected+0x8>
		if (cb->connected) {
    d8ca:	682b      	ldr	r3, [r5, #0]
    d8cc:	b113      	cbz	r3, d8d4 <notify_connected+0x40>
			cb->connected(conn, conn->err);
    d8ce:	4620      	mov	r0, r4
    d8d0:	7a61      	ldrb	r1, [r4, #9]
    d8d2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    d8d4:	3514      	adds	r5, #20
    d8d6:	e7e4      	b.n	d8a2 <notify_connected+0xe>
    d8d8:	d3f7      	bcc.n	d8ca <notify_connected+0x36>
		}
	}
}
    d8da:	bd70      	pop	{r4, r5, r6, pc}
    d8dc:	20006a10 	.word	0x20006a10
    d8e0:	0001f8c8 	.word	0x0001f8c8
    d8e4:	0001f8dc 	.word	0x0001f8dc
    d8e8:	00023a50 	.word	0x00023a50
    d8ec:	000221f8 	.word	0x000221f8

0000d8f0 <tx_notify>:
{
    d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8f4:	4604      	mov	r4, r0
	tx->cb = NULL;
    d8f6:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
    d8fa:	4f14      	ldr	r7, [pc, #80]	; (d94c <tx_notify+0x5c>)
	__asm__ volatile(
    d8fc:	f04f 0220 	mov.w	r2, #32
    d900:	f3ef 8311 	mrs	r3, BASEPRI
    d904:	f382 8812 	msr	BASEPRI_MAX, r2
    d908:	f3bf 8f6f 	isb	sy
	return list->head;
    d90c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    d90e:	b929      	cbnz	r1, d91c <tx_notify+0x2c>
	__asm__ volatile(
    d910:	f383 8811 	msr	BASEPRI, r3
    d914:	f3bf 8f6f 	isb	sy
}
    d918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d91c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    d91e:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d920:	4281      	cmp	r1, r0
	list->tail = node;
    d922:	bf08      	it	eq
    d924:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    d926:	6222      	str	r2, [r4, #32]
    d928:	f383 8811 	msr	BASEPRI, r3
    d92c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    d930:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
    d934:	4638      	mov	r0, r7
	tx->user_data = NULL;
    d936:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
    d93a:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
    d93e:	f011 fb6e 	bl	1f01e <k_queue_append>
		cb(conn, user_data, 0);
    d942:	2200      	movs	r2, #0
    d944:	4631      	mov	r1, r6
    d946:	4620      	mov	r0, r4
    d948:	47a8      	blx	r5
	while (1) {
    d94a:	e7d7      	b.n	d8fc <tx_notify+0xc>
    d94c:	200008f4 	.word	0x200008f4

0000d950 <conn_tx_destroy>:
{
    d950:	b570      	push	{r4, r5, r6, lr}
    d952:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
    d954:	b941      	cbnz	r1, d968 <conn_tx_destroy+0x18>
    d956:	490d      	ldr	r1, [pc, #52]	; (d98c <conn_tx_destroy+0x3c>)
    d958:	480d      	ldr	r0, [pc, #52]	; (d990 <conn_tx_destroy+0x40>)
    d95a:	2239      	movs	r2, #57	; 0x39
    d95c:	f00d fcd8 	bl	1b310 <assert_print>
    d960:	2139      	movs	r1, #57	; 0x39
    d962:	480a      	ldr	r0, [pc, #40]	; (d98c <conn_tx_destroy+0x3c>)
    d964:	f00d fccd 	bl	1b302 <assert_post_action>
	tx->cb = NULL;
    d968:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
    d96a:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    d96e:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
    d970:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
    d974:	4807      	ldr	r0, [pc, #28]	; (d994 <conn_tx_destroy+0x44>)
    d976:	f011 fb52 	bl	1f01e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    d97a:	4631      	mov	r1, r6
    d97c:	4620      	mov	r0, r4
    d97e:	462b      	mov	r3, r5
}
    d980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    d984:	f06f 026d 	mvn.w	r2, #109	; 0x6d
    d988:	4718      	bx	r3
    d98a:	bf00      	nop
    d98c:	00023a50 	.word	0x00023a50
    d990:	000221f8 	.word	0x000221f8
    d994:	200008f4 	.word	0x200008f4

0000d998 <send_frag>:
{
    d998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d99c:	4604      	mov	r4, r0
    d99e:	460e      	mov	r6, r1
    d9a0:	4617      	mov	r7, r2
    d9a2:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    d9a4:	698d      	ldr	r5, [r1, #24]
	return z_impl_k_sem_take(sem, timeout);
    d9a6:	f04f 33ff 	mov.w	r3, #4294967295
    d9aa:	f04f 32ff 	mov.w	r2, #4294967295
    d9ae:	484f      	ldr	r0, [pc, #316]	; (daec <send_frag+0x154>)
    d9b0:	f009 f856 	bl	16a60 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    d9b4:	7aa3      	ldrb	r3, [r4, #10]
    d9b6:	2b07      	cmp	r3, #7
    d9b8:	f040 808c 	bne.w	dad4 <send_frag+0x13c>
	__asm__ volatile(
    d9bc:	f04f 0320 	mov.w	r3, #32
    d9c0:	f3ef 8211 	mrs	r2, BASEPRI
    d9c4:	f383 8812 	msr	BASEPRI_MAX, r3
    d9c8:	f3bf 8f6f 	isb	sy
	if (tx) {
    d9cc:	2d00      	cmp	r5, #0
    d9ce:	d04d      	beq.n	da6c <send_frag+0xd4>
	parent->next = child;
    d9d0:	2300      	movs	r3, #0
    d9d2:	602b      	str	r3, [r5, #0]
	return list->tail;
    d9d4:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	d145      	bne.n	da66 <send_frag+0xce>
	list->head = node;
    d9da:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    d9de:	f382 8811 	msr	BASEPRI, r2
    d9e2:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    d9e6:	2104      	movs	r1, #4
    d9e8:	f106 000c 	add.w	r0, r6, #12
    d9ec:	f003 fabe 	bl	10f6c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    d9f0:	8823      	ldrh	r3, [r4, #0]
    d9f2:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
    d9f6:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
    d9fa:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    d9fc:	8a33      	ldrh	r3, [r6, #16]
    d9fe:	3b04      	subs	r3, #4
    da00:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    da02:	2302      	movs	r3, #2
	return bt_send(buf);
    da04:	4630      	mov	r0, r6
    da06:	7633      	strb	r3, [r6, #24]
    da08:	f7fd fe30 	bl	b66c <bt_send>
	if (err) {
    da0c:	4602      	mov	r2, r0
    da0e:	2800      	cmp	r0, #0
    da10:	d06a      	beq.n	dae8 <send_frag+0x150>
		LOG_ERR("Unable to send to driver (err %d)", err);
    da12:	2145      	movs	r1, #69	; 0x45
    da14:	4836      	ldr	r0, [pc, #216]	; (daf0 <send_frag+0x158>)
    da16:	f00d fc8f 	bl	1b338 <z_log_minimal_printk>
	__asm__ volatile(
    da1a:	f04f 0320 	mov.w	r3, #32
    da1e:	f3ef 8111 	mrs	r1, BASEPRI
    da22:	f383 8812 	msr	BASEPRI_MAX, r3
    da26:	f3bf 8f6f 	isb	sy
		if (tx) {
    da2a:	2d00      	cmp	r5, #0
    da2c:	d034      	beq.n	da98 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    da2e:	2300      	movs	r3, #0
	return list->head;
    da30:	6962      	ldr	r2, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    da32:	b152      	cbz	r2, da4a <send_frag+0xb2>
    da34:	4295      	cmp	r5, r2
    da36:	d12c      	bne.n	da92 <send_frag+0xfa>
	return node->next;
    da38:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    da3a:	bb23      	cbnz	r3, da86 <send_frag+0xee>
    da3c:	69a3      	ldr	r3, [r4, #24]
	list->head = node;
    da3e:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    da40:	429d      	cmp	r5, r3
    da42:	d100      	bne.n	da46 <send_frag+0xae>
	list->tail = node;
    da44:	61a2      	str	r2, [r4, #24]
	parent->next = child;
    da46:	2300      	movs	r3, #0
    da48:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    da4a:	f381 8811 	msr	BASEPRI, r1
    da4e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    da52:	4826      	ldr	r0, [pc, #152]	; (daec <send_frag+0x154>)
    da54:	f008 ffc8 	bl	169e8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
    da58:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
    da5a:	4629      	mov	r1, r5
    da5c:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    da5e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    da60:	f7ff ff76 	bl	d950 <conn_tx_destroy>
    da64:	e030      	b.n	dac8 <send_frag+0x130>
    da66:	601d      	str	r5, [r3, #0]
	list->tail = node;
    da68:	61a5      	str	r5, [r4, #24]
}
    da6a:	e7b8      	b.n	d9de <send_frag+0x46>
	return list->tail;
    da6c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    da6e:	b133      	cbz	r3, da7e <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    da70:	f103 080c 	add.w	r8, r3, #12
    da74:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    da76:	3301      	adds	r3, #1
    da78:	f8c8 3000 	str.w	r3, [r8]
    da7c:	e7af      	b.n	d9de <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    da7e:	69e3      	ldr	r3, [r4, #28]
    da80:	f104 081c 	add.w	r8, r4, #28
    da84:	e7f7      	b.n	da76 <send_frag+0xde>
	parent->next = child;
    da86:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    da88:	69a2      	ldr	r2, [r4, #24]
    da8a:	4295      	cmp	r5, r2
	list->tail = node;
    da8c:	bf08      	it	eq
    da8e:	61a3      	streq	r3, [r4, #24]
}
    da90:	e7d9      	b.n	da46 <send_frag+0xae>
	return node->next;
    da92:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    da94:	6812      	ldr	r2, [r2, #0]
    da96:	e7cc      	b.n	da32 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    da98:	f8d8 2000 	ldr.w	r2, [r8]
    da9c:	b952      	cbnz	r2, dab4 <send_frag+0x11c>
    da9e:	4915      	ldr	r1, [pc, #84]	; (daf4 <send_frag+0x15c>)
    daa0:	4815      	ldr	r0, [pc, #84]	; (daf8 <send_frag+0x160>)
    daa2:	f240 2227 	movw	r2, #551	; 0x227
    daa6:	f00d fc33 	bl	1b310 <assert_print>
    daaa:	f240 2127 	movw	r1, #551	; 0x227
    daae:	4811      	ldr	r0, [pc, #68]	; (daf4 <send_frag+0x15c>)
    dab0:	f00d fc27 	bl	1b302 <assert_post_action>
			(*pending_no_cb)--;
    dab4:	3a01      	subs	r2, #1
    dab6:	f8c8 2000 	str.w	r2, [r8]
    daba:	f381 8811 	msr	BASEPRI, r1
    dabe:	f3bf 8f6f 	isb	sy
    dac2:	480a      	ldr	r0, [pc, #40]	; (daec <send_frag+0x154>)
    dac4:	f008 ff90 	bl	169e8 <z_impl_k_sem_give>
	if (always_consume) {
    dac8:	f1b9 0f00 	cmp.w	r9, #0
    dacc:	d108      	bne.n	dae0 <send_frag+0x148>
	return false;
    dace:	2000      	movs	r0, #0
}
    dad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dad4:	4805      	ldr	r0, [pc, #20]	; (daec <send_frag+0x154>)
    dad6:	f008 ff87 	bl	169e8 <z_impl_k_sem_give>
	if (tx) {
    dada:	2d00      	cmp	r5, #0
    dadc:	d1bc      	bne.n	da58 <send_frag+0xc0>
    dade:	e7f3      	b.n	dac8 <send_frag+0x130>
		net_buf_unref(buf);
    dae0:	4630      	mov	r0, r6
    dae2:	f003 f98d 	bl	10e00 <net_buf_unref>
    dae6:	e7f2      	b.n	dace <send_frag+0x136>
	return true;
    dae8:	2001      	movs	r0, #1
    daea:	e7f1      	b.n	dad0 <send_frag+0x138>
    daec:	200000c8 	.word	0x200000c8
    daf0:	0002320b 	.word	0x0002320b
    daf4:	00023a50 	.word	0x00023a50
    daf8:	000221f8 	.word	0x000221f8

0000dafc <bt_conn_get_pkts>:
}
    dafc:	4800      	ldr	r0, [pc, #0]	; (db00 <bt_conn_get_pkts+0x4>)
    dafe:	4770      	bx	lr
    db00:	200000c8 	.word	0x200000c8

0000db04 <bt_conn_new>:
{
    db04:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    db06:	2200      	movs	r2, #0
    db08:	4604      	mov	r4, r0
    db0a:	428a      	cmp	r2, r1
    db0c:	d102      	bne.n	db14 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    db0e:	2400      	movs	r4, #0
}
    db10:	4620      	mov	r0, r4
    db12:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    db14:	2001      	movs	r0, #1
    db16:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
    db1a:	e8d3 5fef 	ldaex	r5, [r3]
    db1e:	2d00      	cmp	r5, #0
    db20:	d104      	bne.n	db2c <bt_conn_new+0x28>
    db22:	e8c3 0fec 	stlex	ip, r0, [r3]
    db26:	f1bc 0f00 	cmp.w	ip, #0
    db2a:	d1f6      	bne.n	db1a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    db2c:	d002      	beq.n	db34 <bt_conn_new+0x30>
    db2e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
    db30:	4402      	add	r2, r0
    db32:	e7ea      	b.n	db0a <bt_conn_new+0x6>
	if (!conn) {
    db34:	2c00      	cmp	r4, #0
    db36:	d0ea      	beq.n	db0e <bt_conn_new+0xa>
    db38:	22c4      	movs	r2, #196	; 0xc4
    db3a:	2100      	movs	r1, #0
    db3c:	4620      	mov	r0, r4
    db3e:	f011 fc68 	bl	1f412 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    db42:	f104 0060 	add.w	r0, r4, #96	; 0x60
    db46:	4904      	ldr	r1, [pc, #16]	; (db58 <bt_conn_new+0x54>)
    db48:	f009 fb36 	bl	171b8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    db4c:	4903      	ldr	r1, [pc, #12]	; (db5c <bt_conn_new+0x58>)
    db4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    db52:	f009 f9a5 	bl	16ea0 <k_work_init>
	return conn;
    db56:	e7db      	b.n	db10 <bt_conn_new+0xc>
    db58:	0000e4d5 	.word	0x0000e4d5
    db5c:	0001c6b1 	.word	0x0001c6b1

0000db60 <conn_cleanup>:
{
    db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db64:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
    db66:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    db68:	f104 0638 	add.w	r6, r4, #56	; 0x38
    db6c:	2300      	movs	r3, #0
    db6e:	2200      	movs	r2, #0
    db70:	4630      	mov	r0, r6
    db72:	f00f fce5 	bl	1d540 <net_buf_get>
    db76:	4603      	mov	r3, r0
    db78:	b960      	cbnz	r0, db94 <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    db7a:	6963      	ldr	r3, [r4, #20]
    db7c:	b1ab      	cbz	r3, dbaa <conn_cleanup+0x4a>
    db7e:	4916      	ldr	r1, [pc, #88]	; (dbd8 <conn_cleanup+0x78>)
    db80:	f44f 722d 	mov.w	r2, #692	; 0x2b4
    db84:	4815      	ldr	r0, [pc, #84]	; (dbdc <conn_cleanup+0x7c>)
    db86:	f00d fbc3 	bl	1b310 <assert_print>
    db8a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    db8e:	4812      	ldr	r0, [pc, #72]	; (dbd8 <conn_cleanup+0x78>)
    db90:	f00d fbb7 	bl	1b302 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    db94:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
    db96:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
    db98:	f003 f932 	bl	10e00 <net_buf_unref>
		if (tx) {
    db9c:	2d00      	cmp	r5, #0
    db9e:	d0e5      	beq.n	db6c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
    dba0:	4629      	mov	r1, r5
    dba2:	4620      	mov	r0, r4
    dba4:	f7ff fed4 	bl	d950 <conn_tx_destroy>
    dba8:	e7de      	b.n	db68 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    dbaa:	69e3      	ldr	r3, [r4, #28]
    dbac:	b143      	cbz	r3, dbc0 <conn_cleanup+0x60>
    dbae:	490a      	ldr	r1, [pc, #40]	; (dbd8 <conn_cleanup+0x78>)
    dbb0:	f240 22b5 	movw	r2, #693	; 0x2b5
    dbb4:	4809      	ldr	r0, [pc, #36]	; (dbdc <conn_cleanup+0x7c>)
    dbb6:	f00d fbab 	bl	1b310 <assert_print>
    dbba:	f240 21b5 	movw	r1, #693	; 0x2b5
    dbbe:	e7e6      	b.n	db8e <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
    dbc0:	4620      	mov	r0, r4
    dbc2:	f00e fd78 	bl	1c6b6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
    dbc6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    dbca:	2200      	movs	r2, #0
}
    dbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
    dbd0:	2300      	movs	r3, #0
    dbd2:	f009 bbdb 	b.w	1738c <k_work_reschedule>
    dbd6:	bf00      	nop
    dbd8:	00023a50 	.word	0x00023a50
    dbdc:	000221f8 	.word	0x000221f8

0000dbe0 <bt_conn_recv>:
{
    dbe0:	b570      	push	{r4, r5, r6, lr}
    dbe2:	4616      	mov	r6, r2
    dbe4:	4604      	mov	r4, r0
    dbe6:	460d      	mov	r5, r1
	tx_notify(conn);
    dbe8:	f7ff fe82 	bl	d8f0 <tx_notify>
	switch (flags) {
    dbec:	2e01      	cmp	r6, #1
    dbee:	d01f      	beq.n	dc30 <bt_conn_recv+0x50>
    dbf0:	2e02      	cmp	r6, #2
    dbf2:	d149      	bne.n	dc88 <bt_conn_recv+0xa8>
		if (conn->rx) {
    dbf4:	6923      	ldr	r3, [r4, #16]
    dbf6:	b133      	cbz	r3, dc06 <bt_conn_recv+0x26>
			LOG_ERR("Unexpected first L2CAP frame");
    dbf8:	482b      	ldr	r0, [pc, #172]	; (dca8 <bt_conn_recv+0xc8>)
    dbfa:	2145      	movs	r1, #69	; 0x45
    dbfc:	f00d fb9c 	bl	1b338 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
    dc00:	4620      	mov	r0, r4
    dc02:	f00e fd58 	bl	1c6b6 <bt_conn_reset_rx_state>
		conn->rx = buf;
    dc06:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    dc08:	6921      	ldr	r1, [r4, #16]
    dc0a:	8a0a      	ldrh	r2, [r1, #16]
    dc0c:	2a01      	cmp	r2, #1
    dc0e:	d949      	bls.n	dca4 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    dc10:	68cb      	ldr	r3, [r1, #12]
    dc12:	881b      	ldrh	r3, [r3, #0]
    dc14:	3304      	adds	r3, #4
    dc16:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    dc18:	429a      	cmp	r2, r3
    dc1a:	d343      	bcc.n	dca4 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
    dc1c:	d93a      	bls.n	dc94 <bt_conn_recv+0xb4>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
    dc1e:	4823      	ldr	r0, [pc, #140]	; (dcac <bt_conn_recv+0xcc>)
    dc20:	2145      	movs	r1, #69	; 0x45
    dc22:	f00d fb89 	bl	1b338 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
    dc26:	4620      	mov	r0, r4
}
    dc28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    dc2c:	f00e bd43 	b.w	1c6b6 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    dc30:	6920      	ldr	r0, [r4, #16]
    dc32:	b938      	cbnz	r0, dc44 <bt_conn_recv+0x64>
			LOG_ERR("Unexpected L2CAP continuation");
    dc34:	2145      	movs	r1, #69	; 0x45
    dc36:	481e      	ldr	r0, [pc, #120]	; (dcb0 <bt_conn_recv+0xd0>)
    dc38:	f00d fb7e 	bl	1b338 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
    dc3c:	4620      	mov	r0, r4
    dc3e:	f00e fd3a 	bl	1c6b6 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    dc42:	e001      	b.n	dc48 <bt_conn_recv+0x68>
		if (!buf->len) {
    dc44:	8a2e      	ldrh	r6, [r5, #16]
    dc46:	b926      	cbnz	r6, dc52 <bt_conn_recv+0x72>
			net_buf_unref(buf);
    dc48:	4628      	mov	r0, r5
}
    dc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    dc4e:	f003 b8d7 	b.w	10e00 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    dc52:	300c      	adds	r0, #12
    dc54:	f00f fc91 	bl	1d57a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    dc58:	4286      	cmp	r6, r0
    dc5a:	d90b      	bls.n	dc74 <bt_conn_recv+0x94>
			LOG_ERR("Not enough buffer space for L2CAP data");
    dc5c:	2145      	movs	r1, #69	; 0x45
    dc5e:	4815      	ldr	r0, [pc, #84]	; (dcb4 <bt_conn_recv+0xd4>)
    dc60:	f00d fb6a 	bl	1b338 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
    dc64:	2200      	movs	r2, #0
    dc66:	4620      	mov	r0, r4
    dc68:	6921      	ldr	r1, [r4, #16]
    dc6a:	f000 febf 	bl	e9ec <bt_l2cap_recv>
			conn->rx = NULL;
    dc6e:	2300      	movs	r3, #0
    dc70:	6123      	str	r3, [r4, #16]
    dc72:	e7e9      	b.n	dc48 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    dc74:	6920      	ldr	r0, [r4, #16]
    dc76:	8a2a      	ldrh	r2, [r5, #16]
    dc78:	68e9      	ldr	r1, [r5, #12]
    dc7a:	300c      	adds	r0, #12
    dc7c:	f00f fc85 	bl	1d58a <net_buf_simple_add_mem>
		net_buf_unref(buf);
    dc80:	4628      	mov	r0, r5
    dc82:	f003 f8bd 	bl	10e00 <net_buf_unref>
		break;
    dc86:	e7bf      	b.n	dc08 <bt_conn_recv+0x28>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    dc88:	4632      	mov	r2, r6
    dc8a:	2145      	movs	r1, #69	; 0x45
    dc8c:	480a      	ldr	r0, [pc, #40]	; (dcb8 <bt_conn_recv+0xd8>)
    dc8e:	f00d fb53 	bl	1b338 <z_log_minimal_printk>
    dc92:	e7d3      	b.n	dc3c <bt_conn_recv+0x5c>
	conn->rx = NULL;
    dc94:	2300      	movs	r3, #0
    dc96:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    dc98:	4620      	mov	r0, r4
}
    dc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
    dc9e:	2201      	movs	r2, #1
    dca0:	f000 bea4 	b.w	e9ec <bt_l2cap_recv>
}
    dca4:	bd70      	pop	{r4, r5, r6, pc}
    dca6:	bf00      	nop
    dca8:	00023a80 	.word	0x00023a80
    dcac:	00023b14 	.word	0x00023b14
    dcb0:	00023aa2 	.word	0x00023aa2
    dcb4:	00023ac5 	.word	0x00023ac5
    dcb8:	00023af1 	.word	0x00023af1

0000dcbc <bt_conn_send_cb>:
{
    dcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcc0:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
    dcc2:	7a83      	ldrb	r3, [r0, #10]
{
    dcc4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    dcc6:	2b07      	cmp	r3, #7
{
    dcc8:	460f      	mov	r7, r1
    dcca:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    dccc:	d006      	beq.n	dcdc <bt_conn_send_cb+0x20>
		LOG_ERR("not connected!");
    dcce:	2145      	movs	r1, #69	; 0x45
    dcd0:	481f      	ldr	r0, [pc, #124]	; (dd50 <bt_conn_send_cb+0x94>)
    dcd2:	f00d fb31 	bl	1b338 <z_log_minimal_printk>
		return -ENOTCONN;
    dcd6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dcda:	e017      	b.n	dd0c <bt_conn_send_cb+0x50>
	if (cb) {
    dcdc:	2a00      	cmp	r2, #0
    dcde:	d035      	beq.n	dd4c <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
    dce0:	f00a fae6 	bl	182b0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    dce4:	4b1b      	ldr	r3, [pc, #108]	; (dd54 <bt_conn_send_cb+0x98>)
    dce6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    dce8:	481b      	ldr	r0, [pc, #108]	; (dd58 <bt_conn_send_cb+0x9c>)
    dcea:	bf07      	ittee	eq
    dcec:	2200      	moveq	r2, #0
    dcee:	2300      	moveq	r3, #0
    dcf0:	f04f 32ff 	movne.w	r2, #4294967295
    dcf4:	f04f 33ff 	movne.w	r3, #4294967295
    dcf8:	f008 fe1e 	bl	16938 <z_impl_k_queue_get>
    dcfc:	4604      	mov	r4, r0
		if (!tx) {
    dcfe:	b938      	cbnz	r0, dd10 <bt_conn_send_cb+0x54>
			LOG_ERR("Unable to allocate TX context");
    dd00:	4816      	ldr	r0, [pc, #88]	; (dd5c <bt_conn_send_cb+0xa0>)
    dd02:	2145      	movs	r1, #69	; 0x45
    dd04:	f00d fb18 	bl	1b338 <z_log_minimal_printk>
			return -ENOBUFS;
    dd08:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    dd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    dd10:	7aab      	ldrb	r3, [r5, #10]
    dd12:	f04f 0800 	mov.w	r8, #0
    dd16:	2b07      	cmp	r3, #7
    dd18:	d00c      	beq.n	dd34 <bt_conn_send_cb+0x78>
			LOG_WRN("Disconnected while allocating context");
    dd1a:	2157      	movs	r1, #87	; 0x57
    dd1c:	4810      	ldr	r0, [pc, #64]	; (dd60 <bt_conn_send_cb+0xa4>)
    dd1e:	f00d fb0b 	bl	1b338 <z_log_minimal_printk>
	k_fifo_put(&free_tx, tx);
    dd22:	4621      	mov	r1, r4
	tx->user_data = NULL;
    dd24:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
    dd28:	480b      	ldr	r0, [pc, #44]	; (dd58 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
    dd2a:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
    dd2e:	f011 f976 	bl	1f01e <k_queue_append>
}
    dd32:	e7d0      	b.n	dcd6 <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
    dd34:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
    dd38:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
    dd3c:	f105 0038 	add.w	r0, r5, #56	; 0x38
    dd40:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
    dd42:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
    dd44:	f003 f83c 	bl	10dc0 <net_buf_put>
	return 0;
    dd48:	2000      	movs	r0, #0
    dd4a:	e7df      	b.n	dd0c <bt_conn_send_cb+0x50>
    dd4c:	4614      	mov	r4, r2
    dd4e:	e7f5      	b.n	dd3c <bt_conn_send_cb+0x80>
    dd50:	00023b34 	.word	0x00023b34
    dd54:	20006200 	.word	0x20006200
    dd58:	200008f4 	.word	0x200008f4
    dd5c:	00023b48 	.word	0x00023b48
    dd60:	00023b6b 	.word	0x00023b6b

0000dd64 <bt_conn_prepare_events>:
{
    dd64:	b570      	push	{r4, r5, r6, lr}
    dd66:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
    dd68:	4817      	ldr	r0, [pc, #92]	; (ddc8 <bt_conn_prepare_events+0x64>)
    dd6a:	f011 fad7 	bl	1f31c <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    dd6e:	4620      	mov	r0, r4
    dd70:	2200      	movs	r2, #0
    dd72:	2101      	movs	r1, #1
    dd74:	4b14      	ldr	r3, [pc, #80]	; (ddc8 <bt_conn_prepare_events+0x64>)
    dd76:	f00b f873 	bl	18e60 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    dd7a:	4814      	ldr	r0, [pc, #80]	; (ddcc <bt_conn_prepare_events+0x68>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
    dd7c:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    dd80:	f00e fc8c 	bl	1c69c <atomic_get>
    dd84:	b908      	cbnz	r0, dd8a <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    dd86:	2001      	movs	r0, #1
}
    dd88:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    dd8a:	4811      	ldr	r0, [pc, #68]	; (ddd0 <bt_conn_prepare_events+0x6c>)
    dd8c:	7a83      	ldrb	r3, [r0, #10]
    dd8e:	b96b      	cbnz	r3, ddac <bt_conn_prepare_events+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dd90:	1d03      	adds	r3, r0, #4
    dd92:	e8d3 2fef 	ldaex	r2, [r3]
    dd96:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    dd9a:	e8c3 1fe6 	stlex	r6, r1, [r3]
    dd9e:	2e00      	cmp	r6, #0
    dda0:	d1f7      	bne.n	dd92 <bt_conn_prepare_events+0x2e>
    dda2:	0653      	lsls	r3, r2, #25
    dda4:	d502      	bpl.n	ddac <bt_conn_prepare_events+0x48>
		conn_cleanup(conn);
    dda6:	f7ff fedb 	bl	db60 <conn_cleanup>
		return -ENOTCONN;
    ddaa:	e7ec      	b.n	dd86 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    ddac:	7a83      	ldrb	r3, [r0, #10]
    ddae:	2b07      	cmp	r3, #7
    ddb0:	d1e9      	bne.n	dd86 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    ddb2:	4628      	mov	r0, r5
    ddb4:	4b07      	ldr	r3, [pc, #28]	; (ddd4 <bt_conn_prepare_events+0x70>)
    ddb6:	2200      	movs	r2, #0
    ddb8:	2104      	movs	r1, #4
    ddba:	f00b f851 	bl	18e60 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    ddbe:	2301      	movs	r3, #1
			ev_count++;
    ddc0:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    ddc2:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    ddc6:	e7df      	b.n	dd88 <bt_conn_prepare_events+0x24>
    ddc8:	20000378 	.word	0x20000378
    ddcc:	20005dbc 	.word	0x20005dbc
    ddd0:	20005cf8 	.word	0x20005cf8
    ddd4:	20005d30 	.word	0x20005d30

0000ddd8 <bt_conn_ref>:
	__ASSERT_NO_MSG(conn);
    ddd8:	4603      	mov	r3, r0
{
    ddda:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
    dddc:	b190      	cbz	r0, de04 <bt_conn_ref+0x2c>
		old = atomic_get(&conn->ref);
    ddde:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
    dde2:	4610      	mov	r0, r2
    dde4:	f00e fc5a 	bl	1c69c <atomic_get>
		if (!old) {
    dde8:	b1b8      	cbz	r0, de1a <bt_conn_ref+0x42>
	} while (!atomic_cas(&conn->ref, old, old + 1));
    ddea:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ddec:	e8d2 4fef 	ldaex	r4, [r2]
    ddf0:	4284      	cmp	r4, r0
    ddf2:	d104      	bne.n	ddfe <bt_conn_ref+0x26>
    ddf4:	e8c2 1fec 	stlex	ip, r1, [r2]
    ddf8:	f1bc 0f00 	cmp.w	ip, #0
    ddfc:	d1f6      	bne.n	ddec <bt_conn_ref+0x14>
    ddfe:	d1f0      	bne.n	dde2 <bt_conn_ref+0xa>
}
    de00:	4618      	mov	r0, r3
    de02:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
    de04:	4906      	ldr	r1, [pc, #24]	; (de20 <bt_conn_ref+0x48>)
    de06:	4807      	ldr	r0, [pc, #28]	; (de24 <bt_conn_ref+0x4c>)
    de08:	f240 427c 	movw	r2, #1148	; 0x47c
    de0c:	f00d fa80 	bl	1b310 <assert_print>
    de10:	f240 417c 	movw	r1, #1148	; 0x47c
    de14:	4802      	ldr	r0, [pc, #8]	; (de20 <bt_conn_ref+0x48>)
    de16:	f00d fa74 	bl	1b302 <assert_post_action>
			return NULL;
    de1a:	4603      	mov	r3, r0
    de1c:	e7f0      	b.n	de00 <bt_conn_ref+0x28>
    de1e:	bf00      	nop
    de20:	00023a50 	.word	0x00023a50
    de24:	000221f8 	.word	0x000221f8

0000de28 <bt_conn_unref>:
{
    de28:	b510      	push	{r4, lr}
    de2a:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
    de2c:	30c4      	adds	r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    de2e:	e8d0 2fef 	ldaex	r2, [r0]
    de32:	1e51      	subs	r1, r2, #1
    de34:	e8c0 1fe4 	stlex	r4, r1, [r0]
    de38:	2c00      	cmp	r4, #0
    de3a:	d1f8      	bne.n	de2e <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
    de3c:	2a00      	cmp	r2, #0
    de3e:	dc0a      	bgt.n	de56 <bt_conn_unref+0x2e>
    de40:	490b      	ldr	r1, [pc, #44]	; (de70 <bt_conn_unref+0x48>)
    de42:	480c      	ldr	r0, [pc, #48]	; (de74 <bt_conn_unref+0x4c>)
    de44:	f44f 6293 	mov.w	r2, #1176	; 0x498
    de48:	f00d fa62 	bl	1b310 <assert_print>
    de4c:	f44f 6193 	mov.w	r1, #1176	; 0x498
    de50:	4807      	ldr	r0, [pc, #28]	; (de70 <bt_conn_unref+0x48>)
    de52:	f00d fa56 	bl	1b302 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
    de56:	885a      	ldrh	r2, [r3, #2]
    de58:	f240 1301 	movw	r3, #257	; 0x101
    de5c:	429a      	cmp	r2, r3
    de5e:	d106      	bne.n	de6e <bt_conn_unref+0x46>
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
    de60:	f00e fc1c 	bl	1c69c <atomic_get>
    de64:	b918      	cbnz	r0, de6e <bt_conn_unref+0x46>
}
    de66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    de6a:	f7fe bf2d 	b.w	ccc8 <bt_le_adv_resume>
}
    de6e:	bd10      	pop	{r4, pc}
    de70:	00023a50 	.word	0x00023a50
    de74:	000221f8 	.word	0x000221f8

0000de78 <bt_conn_lookup_handle>:
{
    de78:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    de7a:	2101      	movs	r1, #1
    de7c:	4801      	ldr	r0, [pc, #4]	; (de84 <bt_conn_lookup_handle+0xc>)
    de7e:	f00e bc23 	b.w	1c6c8 <conn_lookup_handle>
    de82:	bf00      	nop
    de84:	20005cf8 	.word	0x20005cf8

0000de88 <bt_conn_set_state>:
{
    de88:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    de8a:	7a85      	ldrb	r5, [r0, #10]
{
    de8c:	4604      	mov	r4, r0
	if (conn->state == state) {
    de8e:	428d      	cmp	r5, r1
{
    de90:	460e      	mov	r6, r1
	if (conn->state == state) {
    de92:	d10b      	bne.n	deac <bt_conn_set_state+0x24>
		LOG_WRN("no transition %s", state2str(state));
    de94:	2157      	movs	r1, #87	; 0x57
    de96:	2d08      	cmp	r5, #8
    de98:	bf96      	itet	ls
    de9a:	4b76      	ldrls	r3, [pc, #472]	; (e074 <bt_conn_set_state+0x1ec>)
	if (conn->state == state) {
    de9c:	4a76      	ldrhi	r2, [pc, #472]	; (e078 <bt_conn_set_state+0x1f0>)
    de9e:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
    dea2:	4876      	ldr	r0, [pc, #472]	; (e07c <bt_conn_set_state+0x1f4>)
}
    dea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("no valid (%u) state was set", state);
    dea8:	f00d ba46 	b.w	1b338 <z_log_minimal_printk>
	conn->state = state;
    deac:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    deae:	b165      	cbz	r5, deca <bt_conn_set_state+0x42>
    deb0:	2d06      	cmp	r5, #6
    deb2:	d010      	beq.n	ded6 <bt_conn_set_state+0x4e>
	switch (conn->state) {
    deb4:	7aa3      	ldrb	r3, [r4, #10]
    deb6:	2b08      	cmp	r3, #8
    deb8:	f200 80d8 	bhi.w	e06c <bt_conn_set_state+0x1e4>
    debc:	e8df f003 	tbb	[pc, r3]
    dec0:	b8b81248 	.word	0xb8b81248
    dec4:	2a93b8b8 	.word	0x2a93b8b8
    dec8:	b8          	.byte	0xb8
    dec9:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
    deca:	7883      	ldrb	r3, [r0, #2]
    decc:	2b08      	cmp	r3, #8
    dece:	d0f1      	beq.n	deb4 <bt_conn_set_state+0x2c>
			bt_conn_ref(conn);
    ded0:	f7ff ff82 	bl	ddd8 <bt_conn_ref>
    ded4:	e7ee      	b.n	deb4 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ded6:	7883      	ldrb	r3, [r0, #2]
    ded8:	2b01      	cmp	r3, #1
    deda:	d1eb      	bne.n	deb4 <bt_conn_set_state+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
    dedc:	3060      	adds	r0, #96	; 0x60
    dede:	f009 fa5b 	bl	17398 <k_work_cancel_delayable>
    dee2:	e7e7      	b.n	deb4 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
    dee4:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
    dee6:	4d66      	ldr	r5, [pc, #408]	; (e080 <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    dee8:	f04f 0220 	mov.w	r2, #32
    deec:	f3ef 8311 	mrs	r3, BASEPRI
    def0:	f382 8812 	msr	BASEPRI_MAX, r2
    def4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    def8:	69e2      	ldr	r2, [r4, #28]
    defa:	2a00      	cmp	r2, #0
    defc:	f000 8092 	beq.w	e024 <bt_conn_set_state+0x19c>
			conn->pending_no_cb--;
    df00:	3a01      	subs	r2, #1
    df02:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    df04:	f383 8811 	msr	BASEPRI, r3
    df08:	f3bf 8f6f 	isb	sy
    df0c:	4628      	mov	r0, r5
    df0e:	f008 fd6b 	bl	169e8 <z_impl_k_sem_give>
}
    df12:	e7e9      	b.n	dee8 <bt_conn_set_state+0x60>
		if (conn->type == BT_CONN_TYPE_SCO) {
    df14:	78a3      	ldrb	r3, [r4, #2]
    df16:	2b04      	cmp	r3, #4
    df18:	f000 808a 	beq.w	e030 <bt_conn_set_state+0x1a8>
	z_impl_k_queue_init(queue);
    df1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    df20:	f011 f870 	bl	1f004 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
    df24:	2100      	movs	r1, #0
    df26:	4857      	ldr	r0, [pc, #348]	; (e084 <bt_conn_set_state+0x1fc>)
    df28:	f00b f876 	bl	19018 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    df2c:	2300      	movs	r3, #0
	list->tail = NULL;
    df2e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    df32:	78e3      	ldrb	r3, [r4, #3]
    df34:	2b01      	cmp	r3, #1
    df36:	d17b      	bne.n	e030 <bt_conn_set_state+0x1a8>
			conn->le.conn_param_retry_countdown =
    df38:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
    df3a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
    df3e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
    df42:	2300      	movs	r3, #0
    df44:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    df48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    df4c:	f009 b9ba 	b.w	172c4 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    df50:	78a3      	ldrb	r3, [r4, #2]
    df52:	2b04      	cmp	r3, #4
    df54:	d104      	bne.n	df60 <bt_conn_set_state+0xd8>
			bt_conn_unref(conn);
    df56:	4620      	mov	r0, r4
}
    df58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    df5c:	f7ff bf64 	b.w	de28 <bt_conn_unref>
		switch (old_state) {
    df60:	2d08      	cmp	r5, #8
    df62:	d865      	bhi.n	e030 <bt_conn_set_state+0x1a8>
    df64:	a301      	add	r3, pc, #4	; (adr r3, df6c <bt_conn_set_state+0xe4>)
    df66:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    df6a:	bf00      	nop
    df6c:	0000dfdf 	.word	0x0000dfdf
    df70:	0000df91 	.word	0x0000df91
    df74:	0000dfd1 	.word	0x0000dfd1
    df78:	0000df57 	.word	0x0000df57
    df7c:	0000df57 	.word	0x0000df57
    df80:	0000dfd1 	.word	0x0000dfd1
    df84:	0000dfd1 	.word	0x0000dfd1
    df88:	0000e031 	.word	0x0000e031
    df8c:	0000dfdf 	.word	0x0000dfdf
			tx_notify(conn);
    df90:	4620      	mov	r0, r4
    df92:	f7ff fcad 	bl	d8f0 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    df96:	78a3      	ldrb	r3, [r4, #2]
    df98:	2b01      	cmp	r3, #1
    df9a:	d10a      	bne.n	dfb2 <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    df9c:	f104 0560 	add.w	r5, r4, #96	; 0x60
    dfa0:	4628      	mov	r0, r5
    dfa2:	f011 f8c5 	bl	1f130 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    dfa6:	f010 0f0c 	tst.w	r0, #12
    dfaa:	d002      	beq.n	dfb2 <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
    dfac:	4628      	mov	r0, r5
    dfae:	f009 f9f3 	bl	17398 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dfb2:	3404      	adds	r4, #4
    dfb4:	e8d4 3fef 	ldaex	r3, [r4]
    dfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dfbc:	e8c4 3fe2 	stlex	r2, r3, [r4]
    dfc0:	2a00      	cmp	r2, #0
    dfc2:	d1f7      	bne.n	dfb4 <bt_conn_set_state+0x12c>
}
    dfc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dfc8:	2100      	movs	r1, #0
    dfca:	482e      	ldr	r0, [pc, #184]	; (e084 <bt_conn_set_state+0x1fc>)
    dfcc:	f00b b824 	b.w	19018 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    dfd0:	7a63      	ldrb	r3, [r4, #9]
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	d0bf      	beq.n	df56 <bt_conn_set_state+0xce>
				notify_connected(conn);
    dfd6:	4620      	mov	r0, r4
    dfd8:	f7ff fc5c 	bl	d894 <notify_connected>
    dfdc:	e7bb      	b.n	df56 <bt_conn_set_state+0xce>
			LOG_WRN("Invalid (%u) old state", state);
    dfde:	4632      	mov	r2, r6
    dfe0:	2157      	movs	r1, #87	; 0x57
    dfe2:	4829      	ldr	r0, [pc, #164]	; (e088 <bt_conn_set_state+0x200>)
    dfe4:	e75e      	b.n	dea4 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    dfe6:	78a3      	ldrb	r3, [r4, #2]
    dfe8:	2b01      	cmp	r3, #1
    dfea:	d121      	bne.n	e030 <bt_conn_set_state+0x1a8>
					K_MSEC(10 * bt_dev.create_param.timeout));
    dfec:	4b27      	ldr	r3, [pc, #156]	; (e08c <bt_conn_set_state+0x204>)
			k_work_schedule(&conn->deferred_work,
    dfee:	3460      	adds	r4, #96	; 0x60
					K_MSEC(10 * bt_dev.create_param.timeout));
    dff0:	8a98      	ldrh	r0, [r3, #20]
    dff2:	b1a8      	cbz	r0, e020 <bt_conn_set_state+0x198>
    dff4:	230a      	movs	r3, #10
    dff6:	2100      	movs	r1, #0
    dff8:	4358      	muls	r0, r3
    dffa:	f240 33e7 	movw	r3, #999	; 0x3e7
    dffe:	03c9      	lsls	r1, r1, #15
    e000:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    e004:	03c0      	lsls	r0, r0, #15
    e006:	18c0      	adds	r0, r0, r3
    e008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e00c:	f04f 0300 	mov.w	r3, #0
    e010:	f141 0100 	adc.w	r1, r1, #0
    e014:	f7f7 f808 	bl	5028 <__aeabi_uldivmod>
    e018:	4602      	mov	r2, r0
    e01a:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    e01c:	4620      	mov	r0, r4
    e01e:	e793      	b.n	df48 <bt_conn_set_state+0xc0>
					K_MSEC(10 * bt_dev.create_param.timeout));
    e020:	4601      	mov	r1, r0
    e022:	e7ea      	b.n	dffa <bt_conn_set_state+0x172>
	return list->head;
    e024:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    e026:	b921      	cbnz	r1, e032 <bt_conn_set_state+0x1aa>
    e028:	f383 8811 	msr	BASEPRI, r3
    e02c:	f3bf 8f6f 	isb	sy
}
    e030:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e032:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    e034:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e036:	4281      	cmp	r1, r0
	list->tail = node;
    e038:	bf08      	it	eq
    e03a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
    e03c:	6162      	str	r2, [r4, #20]
    e03e:	f383 8811 	msr	BASEPRI, r3
    e042:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    e046:	f04f 0220 	mov.w	r2, #32
    e04a:	f3ef 8311 	mrs	r3, BASEPRI
    e04e:	f382 8812 	msr	BASEPRI_MAX, r2
    e052:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    e056:	68ca      	ldr	r2, [r1, #12]
    e058:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    e05a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
    e05c:	f383 8811 	msr	BASEPRI, r3
    e060:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    e064:	4620      	mov	r0, r4
    e066:	f7ff fc73 	bl	d950 <conn_tx_destroy>
    e06a:	e74f      	b.n	df0c <bt_conn_set_state+0x84>
		LOG_WRN("no valid (%u) state was set", state);
    e06c:	4632      	mov	r2, r6
    e06e:	2157      	movs	r1, #87	; 0x57
    e070:	4807      	ldr	r0, [pc, #28]	; (e090 <bt_conn_set_state+0x208>)
    e072:	e717      	b.n	dea4 <bt_conn_set_state+0x1c>
    e074:	000200a4 	.word	0x000200a4
    e078:	00023b96 	.word	0x00023b96
    e07c:	00023ba0 	.word	0x00023ba0
    e080:	200000c8 	.word	0x200000c8
    e084:	20000378 	.word	0x20000378
    e088:	00023bb6 	.word	0x00023bb6
    e08c:	20000008 	.word	0x20000008
    e090:	00023bd2 	.word	0x00023bd2

0000e094 <bt_conn_index>:
		index = conn - acl_conns;
    e094:	4a0a      	ldr	r2, [pc, #40]	; (e0c0 <bt_conn_index+0x2c>)
{
    e096:	b508      	push	{r3, lr}
		index = conn - acl_conns;
    e098:	490a      	ldr	r1, [pc, #40]	; (e0c4 <bt_conn_index+0x30>)
    e09a:	1a83      	subs	r3, r0, r2
    e09c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
    e09e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
    e0a0:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
    e0a4:	d00a      	beq.n	e0bc <bt_conn_index+0x28>
    e0a6:	4908      	ldr	r1, [pc, #32]	; (e0c8 <bt_conn_index+0x34>)
    e0a8:	4808      	ldr	r0, [pc, #32]	; (e0cc <bt_conn_index+0x38>)
    e0aa:	f240 42b6 	movw	r2, #1206	; 0x4b6
    e0ae:	f00d f92f 	bl	1b310 <assert_print>
    e0b2:	f240 41b6 	movw	r1, #1206	; 0x4b6
    e0b6:	4804      	ldr	r0, [pc, #16]	; (e0c8 <bt_conn_index+0x34>)
    e0b8:	f00d f923 	bl	1b302 <assert_post_action>
}
    e0bc:	b2d8      	uxtb	r0, r3
    e0be:	bd08      	pop	{r3, pc}
    e0c0:	20005cf8 	.word	0x20005cf8
    e0c4:	c28f5c29 	.word	0xc28f5c29
    e0c8:	00023a50 	.word	0x00023a50
    e0cc:	000221f8 	.word	0x000221f8

0000e0d0 <bt_conn_create_pdu_timeout>:
{
    e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0d2:	4604      	mov	r4, r0
    e0d4:	460d      	mov	r5, r1
    e0d6:	4617      	mov	r7, r2
    e0d8:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
    e0da:	f010 ff50 	bl	1ef7e <k_is_in_isr>
    e0de:	b150      	cbz	r0, e0f6 <bt_conn_create_pdu_timeout+0x26>
    e0e0:	4910      	ldr	r1, [pc, #64]	; (e124 <bt_conn_create_pdu_timeout+0x54>)
    e0e2:	4811      	ldr	r0, [pc, #68]	; (e128 <bt_conn_create_pdu_timeout+0x58>)
    e0e4:	f240 42d2 	movw	r2, #1234	; 0x4d2
    e0e8:	f00d f912 	bl	1b310 <assert_print>
    e0ec:	f240 41d2 	movw	r1, #1234	; 0x4d2
    e0f0:	480c      	ldr	r0, [pc, #48]	; (e124 <bt_conn_create_pdu_timeout+0x54>)
    e0f2:	f00d f906 	bl	1b302 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e0f6:	490d      	ldr	r1, [pc, #52]	; (e12c <bt_conn_create_pdu_timeout+0x5c>)
    e0f8:	463a      	mov	r2, r7
    e0fa:	2c00      	cmp	r4, #0
    e0fc:	bf14      	ite	ne
    e0fe:	4620      	movne	r0, r4
    e100:	4608      	moveq	r0, r1
    e102:	4633      	mov	r3, r6
    e104:	f00f fa17 	bl	1d536 <net_buf_alloc_fixed>
	if (!buf) {
    e108:	4604      	mov	r4, r0
    e10a:	b928      	cbnz	r0, e118 <bt_conn_create_pdu_timeout+0x48>
		LOG_WRN("Unable to allocate buffer within timeout");
    e10c:	2157      	movs	r1, #87	; 0x57
    e10e:	4808      	ldr	r0, [pc, #32]	; (e130 <bt_conn_create_pdu_timeout+0x60>)
    e110:	f00d f912 	bl	1b338 <z_log_minimal_printk>
}
    e114:	4620      	mov	r0, r4
    e116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    e118:	1d69      	adds	r1, r5, #5
    e11a:	300c      	adds	r0, #12
    e11c:	f002 fd98 	bl	10c50 <net_buf_simple_reserve>
	return buf;
    e120:	e7f8      	b.n	e114 <bt_conn_create_pdu_timeout+0x44>
    e122:	bf00      	nop
    e124:	00023a50 	.word	0x00023a50
    e128:	000221f8 	.word	0x000221f8
    e12c:	20000944 	.word	0x20000944
    e130:	00023bf3 	.word	0x00023bf3

0000e134 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e136:	1d03      	adds	r3, r0, #4
{
    e138:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e13a:	4618      	mov	r0, r3
    e13c:	f00e faae 	bl	1c69c <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e140:	0582      	lsls	r2, r0, #22
    e142:	d515      	bpl.n	e170 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    e144:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    e148:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
    e14c:	4291      	cmp	r1, r2
    e14e:	d80f      	bhi.n	e170 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
    e150:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    e154:	4291      	cmp	r1, r2
    e156:	d30b      	bcc.n	e170 <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    e158:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
    e15c:	4291      	cmp	r1, r2
    e15e:	d107      	bne.n	e170 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e160:	e8d3 1fef 	ldaex	r1, [r3]
    e164:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    e168:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e16c:	2a00      	cmp	r2, #0
    e16e:	d1f7      	bne.n	e160 <notify_le_param_updated+0x2c>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    e170:	4b15      	ldr	r3, [pc, #84]	; (e1c8 <notify_le_param_updated+0x94>)
    e172:	681d      	ldr	r5, [r3, #0]
    e174:	b975      	cbnz	r5, e194 <notify_le_param_updated+0x60>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e176:	4d15      	ldr	r5, [pc, #84]	; (e1cc <notify_le_param_updated+0x98>)
    e178:	4f15      	ldr	r7, [pc, #84]	; (e1d0 <notify_le_param_updated+0x9c>)
    e17a:	42bd      	cmp	r5, r7
    e17c:	d922      	bls.n	e1c4 <notify_le_param_updated+0x90>
    e17e:	4915      	ldr	r1, [pc, #84]	; (e1d4 <notify_le_param_updated+0xa0>)
    e180:	4815      	ldr	r0, [pc, #84]	; (e1d8 <notify_le_param_updated+0xa4>)
    e182:	f240 52a5 	movw	r2, #1445	; 0x5a5
    e186:	f00d f8c3 	bl	1b310 <assert_print>
    e18a:	f240 51a5 	movw	r1, #1445	; 0x5a5
    e18e:	4811      	ldr	r0, [pc, #68]	; (e1d4 <notify_le_param_updated+0xa0>)
    e190:	f00d f8b7 	bl	1b302 <assert_post_action>
		if (cb->le_param_updated) {
    e194:	68ee      	ldr	r6, [r5, #12]
    e196:	b13e      	cbz	r6, e1a8 <notify_le_param_updated+0x74>
			cb->le_param_updated(conn, conn->le.interval,
    e198:	4620      	mov	r0, r4
    e19a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    e19e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
    e1a2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    e1a6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    e1a8:	692d      	ldr	r5, [r5, #16]
    e1aa:	e7e3      	b.n	e174 <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
    e1ac:	68ee      	ldr	r6, [r5, #12]
    e1ae:	b13e      	cbz	r6, e1c0 <notify_le_param_updated+0x8c>
			cb->le_param_updated(conn, conn->le.interval,
    e1b0:	4620      	mov	r0, r4
    e1b2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    e1b6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
    e1ba:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    e1be:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e1c0:	3514      	adds	r5, #20
    e1c2:	e7da      	b.n	e17a <notify_le_param_updated+0x46>
    e1c4:	d3f2      	bcc.n	e1ac <notify_le_param_updated+0x78>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    e1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1c8:	20006a10 	.word	0x20006a10
    e1cc:	0001f8c8 	.word	0x0001f8c8
    e1d0:	0001f8dc 	.word	0x0001f8dc
    e1d4:	00023a50 	.word	0x00023a50
    e1d8:	000221f8 	.word	0x000221f8

0000e1dc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1e0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    e1e2:	4608      	mov	r0, r1
{
    e1e4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    e1e6:	f00e f812 	bl	1c20e <bt_le_conn_params_valid>
    e1ea:	4605      	mov	r5, r0
    e1ec:	b918      	cbnz	r0, e1f6 <le_param_req+0x1a>
		return false;
    e1ee:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    e1f0:	4628      	mov	r0, r5
    e1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    e1f6:	4b19      	ldr	r3, [pc, #100]	; (e25c <le_param_req+0x80>)
    e1f8:	681e      	ldr	r6, [r3, #0]
    e1fa:	b97e      	cbnz	r6, e21c <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e1fc:	4e18      	ldr	r6, [pc, #96]	; (e260 <le_param_req+0x84>)
    e1fe:	f8df 806c 	ldr.w	r8, [pc, #108]	; e26c <le_param_req+0x90>
    e202:	4546      	cmp	r6, r8
    e204:	d923      	bls.n	e24e <le_param_req+0x72>
    e206:	4917      	ldr	r1, [pc, #92]	; (e264 <le_param_req+0x88>)
    e208:	4817      	ldr	r0, [pc, #92]	; (e268 <le_param_req+0x8c>)
    e20a:	f240 52ed 	movw	r2, #1517	; 0x5ed
    e20e:	f00d f87f 	bl	1b310 <assert_print>
    e212:	f240 51ed 	movw	r1, #1517	; 0x5ed
    e216:	4813      	ldr	r0, [pc, #76]	; (e264 <le_param_req+0x88>)
    e218:	f00d f873 	bl	1b302 <assert_post_action>
		if (!cb->le_param_req) {
    e21c:	68b3      	ldr	r3, [r6, #8]
    e21e:	b90b      	cbnz	r3, e224 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
    e220:	6936      	ldr	r6, [r6, #16]
    e222:	e7ea      	b.n	e1fa <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    e224:	4621      	mov	r1, r4
    e226:	4638      	mov	r0, r7
    e228:	4798      	blx	r3
    e22a:	2800      	cmp	r0, #0
    e22c:	d0df      	beq.n	e1ee <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    e22e:	4620      	mov	r0, r4
    e230:	f00d ffed 	bl	1c20e <bt_le_conn_params_valid>
    e234:	2800      	cmp	r0, #0
    e236:	d1f3      	bne.n	e220 <le_param_req+0x44>
    e238:	e7d9      	b.n	e1ee <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    e23a:	4621      	mov	r1, r4
    e23c:	4638      	mov	r0, r7
    e23e:	4798      	blx	r3
    e240:	2800      	cmp	r0, #0
    e242:	d0d4      	beq.n	e1ee <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    e244:	4620      	mov	r0, r4
    e246:	f00d ffe2 	bl	1c20e <bt_le_conn_params_valid>
    e24a:	b920      	cbnz	r0, e256 <le_param_req+0x7a>
    e24c:	e7cf      	b.n	e1ee <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e24e:	d2cf      	bcs.n	e1f0 <le_param_req+0x14>
		if (!cb->le_param_req) {
    e250:	68b3      	ldr	r3, [r6, #8]
    e252:	2b00      	cmp	r3, #0
    e254:	d1f1      	bne.n	e23a <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e256:	3614      	adds	r6, #20
    e258:	e7d3      	b.n	e202 <le_param_req+0x26>
    e25a:	bf00      	nop
    e25c:	20006a10 	.word	0x20006a10
    e260:	0001f8c8 	.word	0x0001f8c8
    e264:	00023a50 	.word	0x00023a50
    e268:	000221f8 	.word	0x000221f8
    e26c:	0001f8dc 	.word	0x0001f8dc

0000e270 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    e270:	b538      	push	{r3, r4, r5, lr}
    e272:	4605      	mov	r5, r0
    e274:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    e276:	4809      	ldr	r0, [pc, #36]	; (e29c <bt_conn_add_le+0x2c>)
    e278:	2101      	movs	r1, #1
    e27a:	f7ff fc43 	bl	db04 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    e27e:	4602      	mov	r2, r0
    e280:	b148      	cbz	r0, e296 <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
    e282:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
    e284:	4621      	mov	r1, r4
    e286:	3090      	adds	r0, #144	; 0x90
    e288:	f00e fa0b 	bl	1c6a2 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    e28c:	2301      	movs	r3, #1
    e28e:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    e290:	4b03      	ldr	r3, [pc, #12]	; (e2a0 <bt_conn_add_le+0x30>)
    e292:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    e296:	4610      	mov	r0, r2
    e298:	bd38      	pop	{r3, r4, r5, pc}
    e29a:	bf00      	nop
    e29c:	20005cf8 	.word	0x20005cf8
    e2a0:	00280018 	.word	0x00280018

0000e2a4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    e2a4:	b570      	push	{r4, r5, r6, lr}
    e2a6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    e2a8:	480a      	ldr	r0, [pc, #40]	; (e2d4 <bt_conn_lookup_addr_le+0x30>)
{
    e2aa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    e2ac:	f7ff fd94 	bl	ddd8 <bt_conn_ref>
    e2b0:	4604      	mov	r4, r0

		if (!conn) {
    e2b2:	b120      	cbz	r0, e2be <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    e2b4:	7883      	ldrb	r3, [r0, #2]
    e2b6:	2b01      	cmp	r3, #1
    e2b8:	d004      	beq.n	e2c4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    e2ba:	f7ff fdb5 	bl	de28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    e2be:	2400      	movs	r4, #0
}
    e2c0:	4620      	mov	r0, r4
    e2c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    e2c4:	4632      	mov	r2, r6
    e2c6:	4629      	mov	r1, r5
    e2c8:	f00e fa2b 	bl	1c722 <bt_conn_is_peer_addr_le>
    e2cc:	2800      	cmp	r0, #0
    e2ce:	d1f7      	bne.n	e2c0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    e2d0:	4620      	mov	r0, r4
    e2d2:	e7f2      	b.n	e2ba <bt_conn_lookup_addr_le+0x16>
    e2d4:	20005cf8 	.word	0x20005cf8

0000e2d8 <bt_conn_exists_le>:
{
    e2d8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    e2da:	f7ff ffe3 	bl	e2a4 <bt_conn_lookup_addr_le>
	if (conn) {
    e2de:	4604      	mov	r4, r0
    e2e0:	b170      	cbz	r0, e300 <bt_conn_exists_le+0x28>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    e2e2:	7a83      	ldrb	r3, [r0, #10]
    e2e4:	2157      	movs	r1, #87	; 0x57
    e2e6:	2b08      	cmp	r3, #8
    e2e8:	bf96      	itet	ls
    e2ea:	4a06      	ldrls	r2, [pc, #24]	; (e304 <bt_conn_exists_le+0x2c>)
    e2ec:	4a06      	ldrhi	r2, [pc, #24]	; (e308 <bt_conn_exists_le+0x30>)
    e2ee:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    e2f2:	4806      	ldr	r0, [pc, #24]	; (e30c <bt_conn_exists_le+0x34>)
    e2f4:	f00d f820 	bl	1b338 <z_log_minimal_printk>
		bt_conn_unref(conn);
    e2f8:	4620      	mov	r0, r4
    e2fa:	f7ff fd95 	bl	de28 <bt_conn_unref>
		return true;
    e2fe:	2001      	movs	r0, #1
}
    e300:	bd10      	pop	{r4, pc}
    e302:	bf00      	nop
    e304:	000200a4 	.word	0x000200a4
    e308:	00023b96 	.word	0x00023b96
    e30c:	00023c21 	.word	0x00023c21

0000e310 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e312:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    e314:	480e      	ldr	r0, [pc, #56]	; (e350 <bt_conn_lookup_state_le+0x40>)
{
    e316:	460e      	mov	r6, r1
    e318:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    e31a:	f7ff fd5d 	bl	ddd8 <bt_conn_ref>

		if (!conn) {
    e31e:	4604      	mov	r4, r0
    e320:	b120      	cbz	r0, e32c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    e322:	7883      	ldrb	r3, [r0, #2]
    e324:	2b01      	cmp	r3, #1
    e326:	d003      	beq.n	e330 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    e328:	f7ff fd7e 	bl	de28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    e32c:	2400      	movs	r4, #0
    e32e:	e00d      	b.n	e34c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    e330:	b136      	cbz	r6, e340 <bt_conn_lookup_state_le+0x30>
    e332:	4632      	mov	r2, r6
    e334:	4629      	mov	r1, r5
    e336:	f00e f9f4 	bl	1c722 <bt_conn_is_peer_addr_le>
    e33a:	b908      	cbnz	r0, e340 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    e33c:	4620      	mov	r0, r4
    e33e:	e7f3      	b.n	e328 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    e340:	7aa3      	ldrb	r3, [r4, #10]
    e342:	42bb      	cmp	r3, r7
    e344:	d1fa      	bne.n	e33c <bt_conn_lookup_state_le+0x2c>
    e346:	7a23      	ldrb	r3, [r4, #8]
    e348:	42ab      	cmp	r3, r5
    e34a:	d1f7      	bne.n	e33c <bt_conn_lookup_state_le+0x2c>
}
    e34c:	4620      	mov	r0, r4
    e34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e350:	20005cf8 	.word	0x20005cf8

0000e354 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    e354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e358:	4604      	mov	r4, r0
    e35a:	4842      	ldr	r0, [pc, #264]	; (e464 <bt_conn_le_create+0x110>)
    e35c:	f00e f99e 	bl	1c69c <atomic_get>
    e360:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e362:	0741      	lsls	r1, r0, #29
{
    e364:	4615      	mov	r5, r2
    e366:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e368:	d405      	bmi.n	e376 <bt_conn_le_create+0x22>
		return -EAGAIN;
    e36a:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    e36e:	4628      	mov	r0, r5
    e370:	b002      	add	sp, #8
    e372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
    e376:	4610      	mov	r0, r2
    e378:	f00d ff49 	bl	1c20e <bt_le_conn_params_valid>
    e37c:	b910      	cbnz	r0, e384 <bt_conn_le_create+0x30>
		return -EINVAL;
    e37e:	f06f 0515 	mvn.w	r5, #21
    e382:	e7f4      	b.n	e36e <bt_conn_le_create+0x1a>
    e384:	4837      	ldr	r0, [pc, #220]	; (e464 <bt_conn_le_create+0x110>)
    e386:	f00e f989 	bl	1c69c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    e38a:	0602      	lsls	r2, r0, #24
    e38c:	d4ed      	bmi.n	e36a <bt_conn_le_create+0x16>
    e38e:	4835      	ldr	r0, [pc, #212]	; (e464 <bt_conn_le_create+0x110>)
    e390:	f00e f984 	bl	1c69c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    e394:	04c3      	lsls	r3, r0, #19
    e396:	f3c0 3800 	ubfx	r8, r0, #12, #1
    e39a:	d45d      	bmi.n	e458 <bt_conn_le_create+0x104>
	if (!bt_id_scan_random_addr_check()) {
    e39c:	f00d ffce 	bl	1c33c <bt_id_scan_random_addr_check>
    e3a0:	2800      	cmp	r0, #0
    e3a2:	d0ec      	beq.n	e37e <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    e3a4:	4621      	mov	r1, r4
    e3a6:	4640      	mov	r0, r8
    e3a8:	f7ff ff96 	bl	e2d8 <bt_conn_exists_le>
    e3ac:	2800      	cmp	r0, #0
    e3ae:	d1e6      	bne.n	e37e <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    e3b0:	7823      	ldrb	r3, [r4, #0]
		bt_addr_le_copy(&dst, peer);
    e3b2:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    e3b4:	3b02      	subs	r3, #2
    e3b6:	2b01      	cmp	r3, #1
    e3b8:	d845      	bhi.n	e446 <bt_conn_le_create+0xf2>
		bt_addr_le_copy(&dst, peer);
    e3ba:	4668      	mov	r0, sp
    e3bc:	f00e f971 	bl	1c6a2 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    e3c0:	f89d 3000 	ldrb.w	r3, [sp]
    e3c4:	3b02      	subs	r3, #2
    e3c6:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    e3ca:	4669      	mov	r1, sp
    e3cc:	2000      	movs	r0, #0
    e3ce:	f7ff ff4f 	bl	e270 <bt_conn_add_le>
	if (!conn) {
    e3d2:	4604      	mov	r4, r0
    e3d4:	2800      	cmp	r0, #0
    e3d6:	d042      	beq.n	e45e <bt_conn_le_create+0x10a>
	conn->le.interval_min = param->interval_min;
    e3d8:	882b      	ldrh	r3, [r5, #0]
    e3da:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
    e3de:	886b      	ldrh	r3, [r5, #2]
    e3e0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
    e3e4:	88ab      	ldrh	r3, [r5, #4]
    e3e6:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
    e3ea:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
    e3ec:	4d1e      	ldr	r5, [pc, #120]	; (e468 <bt_conn_le_create+0x114>)
	conn->le.timeout = param->timeout;
    e3ee:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
    e3f2:	f105 0c08 	add.w	ip, r5, #8
    e3f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e3fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    e3fe:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    e400:	2b00      	cmp	r3, #0
    e402:	bf08      	it	eq
    e404:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    e408:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    e40a:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
    e40c:	b903      	cbnz	r3, e410 <bt_conn_le_create+0xbc>
    e40e:	89ab      	ldrh	r3, [r5, #12]
    e410:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
    e412:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
    e414:	b903      	cbnz	r3, e418 <bt_conn_le_create+0xc4>
    e416:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
    e418:	2106      	movs	r1, #6
    e41a:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
    e41c:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
    e41e:	f7ff fd33 	bl	de88 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    e422:	4620      	mov	r0, r4
    e424:	f00d fe8d 	bl	1c142 <bt_le_create_conn>
	if (err) {
    e428:	4605      	mov	r5, r0
    e42a:	b198      	cbz	r0, e454 <bt_conn_le_create+0x100>
		conn->err = 0;
    e42c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e42e:	4620      	mov	r0, r4
    e430:	4631      	mov	r1, r6
		conn->err = 0;
    e432:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e434:	f7ff fd28 	bl	de88 <bt_conn_set_state>
		bt_conn_unref(conn);
    e438:	4620      	mov	r0, r4
    e43a:	f7ff fcf5 	bl	de28 <bt_conn_unref>
		bt_le_scan_update(false);
    e43e:	4630      	mov	r0, r6
    e440:	f7fe fef2 	bl	d228 <bt_le_scan_update>
		return err;
    e444:	e793      	b.n	e36e <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    e446:	f00d ff1b 	bl	1c280 <bt_lookup_id_addr>
    e44a:	4601      	mov	r1, r0
    e44c:	4668      	mov	r0, sp
    e44e:	f00e f928 	bl	1c6a2 <bt_addr_le_copy>
    e452:	e7ba      	b.n	e3ca <bt_conn_le_create+0x76>
	*ret_conn = conn;
    e454:	603c      	str	r4, [r7, #0]
	return 0;
    e456:	e78a      	b.n	e36e <bt_conn_le_create+0x1a>
		return -EALREADY;
    e458:	f06f 0577 	mvn.w	r5, #119	; 0x77
    e45c:	e787      	b.n	e36e <bt_conn_le_create+0x1a>
		return -ENOMEM;
    e45e:	f06f 050b 	mvn.w	r5, #11
    e462:	e784      	b.n	e36e <bt_conn_le_create+0x1a>
    e464:	20000090 	.word	0x20000090
    e468:	20000008 	.word	0x20000008

0000e46c <send_conn_le_param_update>:
{
    e46c:	b538      	push	{r3, r4, r5, lr}
    e46e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    e470:	4608      	mov	r0, r1
{
    e472:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    e474:	f00d fecb 	bl	1c20e <bt_le_conn_params_valid>
    e478:	b338      	cbz	r0, e4ca <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    e47a:	4b15      	ldr	r3, [pc, #84]	; (e4d0 <send_conn_le_param_update+0x64>)
    e47c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    e480:	0799      	lsls	r1, r3, #30
    e482:	d407      	bmi.n	e494 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    e484:	78e3      	ldrb	r3, [r4, #3]
    e486:	b173      	cbz	r3, e4a6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    e488:	4629      	mov	r1, r5
    e48a:	4620      	mov	r0, r4
}
    e48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    e490:	f000 bad4 	b.w	ea3c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    e494:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    e498:	079a      	lsls	r2, r3, #30
    e49a:	d5f3      	bpl.n	e484 <send_conn_le_param_update+0x18>
    e49c:	1d20      	adds	r0, r4, #4
    e49e:	f00e f8fd 	bl	1c69c <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    e4a2:	0543      	lsls	r3, r0, #21
    e4a4:	d4ee      	bmi.n	e484 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    e4a6:	4629      	mov	r1, r5
    e4a8:	4620      	mov	r0, r4
    e4aa:	f00e f95a 	bl	1c762 <bt_conn_le_conn_update>
		if (rc == 0) {
    e4ae:	b958      	cbnz	r0, e4c8 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    e4b0:	882b      	ldrh	r3, [r5, #0]
    e4b2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
    e4b6:	886b      	ldrh	r3, [r5, #2]
    e4b8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
    e4bc:	88ab      	ldrh	r3, [r5, #4]
    e4be:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
    e4c2:	88eb      	ldrh	r3, [r5, #6]
    e4c4:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
    e4c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e4ca:	f06f 0015 	mvn.w	r0, #21
    e4ce:	e7fb      	b.n	e4c8 <send_conn_le_param_update+0x5c>
    e4d0:	20000008 	.word	0x20000008

0000e4d4 <deferred_work>:
{
    e4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    e4d6:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
    e4da:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    e4dc:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
    e4e0:	bb5b      	cbnz	r3, e53a <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
    e4e2:	4630      	mov	r0, r6
    e4e4:	f00e f97c 	bl	1c7e0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    e4e8:	4b3c      	ldr	r3, [pc, #240]	; (e5dc <deferred_work+0x108>)
    e4ea:	681d      	ldr	r5, [r3, #0]
    e4ec:	b975      	cbnz	r5, e50c <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e4ee:	4d3c      	ldr	r5, [pc, #240]	; (e5e0 <deferred_work+0x10c>)
    e4f0:	4f3c      	ldr	r7, [pc, #240]	; (e5e4 <deferred_work+0x110>)
    e4f2:	42bd      	cmp	r5, r7
    e4f4:	d91a      	bls.n	e52c <deferred_work+0x58>
    e4f6:	493c      	ldr	r1, [pc, #240]	; (e5e8 <deferred_work+0x114>)
    e4f8:	483c      	ldr	r0, [pc, #240]	; (e5ec <deferred_work+0x118>)
    e4fa:	f240 526c 	movw	r2, #1388	; 0x56c
    e4fe:	f00c ff07 	bl	1b310 <assert_print>
    e502:	f240 516c 	movw	r1, #1388	; 0x56c
    e506:	4838      	ldr	r0, [pc, #224]	; (e5e8 <deferred_work+0x114>)
    e508:	f00c fefb 	bl	1b302 <assert_post_action>
		if (cb->disconnected) {
    e50c:	686b      	ldr	r3, [r5, #4]
    e50e:	b11b      	cbz	r3, e518 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
    e510:	4630      	mov	r0, r6
    e512:	f814 1c57 	ldrb.w	r1, [r4, #-87]
    e516:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    e518:	692d      	ldr	r5, [r5, #16]
    e51a:	e7e7      	b.n	e4ec <deferred_work+0x18>
		if (cb->disconnected) {
    e51c:	686b      	ldr	r3, [r5, #4]
    e51e:	b11b      	cbz	r3, e528 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
    e520:	4630      	mov	r0, r6
    e522:	f814 1c57 	ldrb.w	r1, [r4, #-87]
    e526:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    e528:	3514      	adds	r5, #20
    e52a:	e7e2      	b.n	e4f2 <deferred_work+0x1e>
    e52c:	d3f6      	bcc.n	e51c <deferred_work+0x48>
		bt_conn_unref(conn);
    e52e:	4630      	mov	r0, r6
}
    e530:	b003      	add	sp, #12
    e532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    e536:	f7ff bc77 	b.w	de28 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
    e53a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
    e53e:	2b01      	cmp	r3, #1
    e540:	d12d      	bne.n	e59e <deferred_work+0xca>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e542:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
    e546:	b923      	cbnz	r3, e552 <deferred_work+0x7e>
}
    e548:	b003      	add	sp, #12
    e54a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    e54e:	f7fc bedd 	b.w	b30c <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    e552:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
    e556:	e8d5 3fef 	ldaex	r3, [r5]
    e55a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    e55e:	e8c5 2fe1 	stlex	r1, r2, [r5]
    e562:	2900      	cmp	r1, #0
    e564:	d1f7      	bne.n	e556 <deferred_work+0x82>
    e566:	059b      	lsls	r3, r3, #22
    e568:	d520      	bpl.n	e5ac <deferred_work+0xd8>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    e56a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
    e56c:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    e56e:	9300      	str	r3, [sp, #0]
    e570:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
    e572:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    e574:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
    e576:	f7ff ff79 	bl	e46c <send_conn_le_param_update>
		if (!err) {
    e57a:	4602      	mov	r2, r0
    e57c:	b988      	cbnz	r0, e5a2 <deferred_work+0xce>
    e57e:	e8d5 3fef 	ldaex	r3, [r5]
    e582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    e586:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e58a:	2a00      	cmp	r2, #0
    e58c:	d1f7      	bne.n	e57e <deferred_work+0xaa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e58e:	e8d5 3fef 	ldaex	r3, [r5]
    e592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e596:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e59a:	2a00      	cmp	r2, #0
    e59c:	d1f7      	bne.n	e58e <deferred_work+0xba>
}
    e59e:	b003      	add	sp, #12
    e5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
    e5a2:	2157      	movs	r1, #87	; 0x57
    e5a4:	4812      	ldr	r0, [pc, #72]	; (e5f0 <deferred_work+0x11c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
    e5a6:	f00c fec7 	bl	1b338 <z_log_minimal_printk>
    e5aa:	e7f0      	b.n	e58e <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(
    e5ac:	466b      	mov	r3, sp
    e5ae:	4a11      	ldr	r2, [pc, #68]	; (e5f4 <deferred_work+0x120>)
    e5b0:	6810      	ldr	r0, [r2, #0]
    e5b2:	6851      	ldr	r1, [r2, #4]
    e5b4:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
    e5b6:	4669      	mov	r1, sp
    e5b8:	4630      	mov	r0, r6
    e5ba:	f7ff ff57 	bl	e46c <send_conn_le_param_update>
		if (!err) {
    e5be:	4602      	mov	r2, r0
    e5c0:	b940      	cbnz	r0, e5d4 <deferred_work+0x100>
    e5c2:	e8d5 3fef 	ldaex	r3, [r5]
    e5c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e5ca:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e5ce:	2a00      	cmp	r2, #0
    e5d0:	d0dd      	beq.n	e58e <deferred_work+0xba>
    e5d2:	e7f6      	b.n	e5c2 <deferred_work+0xee>
			LOG_WRN("Send auto LE param update failed (err %d)",
    e5d4:	2157      	movs	r1, #87	; 0x57
    e5d6:	4808      	ldr	r0, [pc, #32]	; (e5f8 <deferred_work+0x124>)
    e5d8:	e7e5      	b.n	e5a6 <deferred_work+0xd2>
    e5da:	bf00      	nop
    e5dc:	20006a10 	.word	0x20006a10
    e5e0:	0001f8c8 	.word	0x0001f8c8
    e5e4:	0001f8dc 	.word	0x0001f8dc
    e5e8:	00023a50 	.word	0x00023a50
    e5ec:	000221f8 	.word	0x000221f8
    e5f0:	00023c49 	.word	0x00023c49
    e5f4:	0001fba4 	.word	0x0001fba4
    e5f8:	00023c73 	.word	0x00023c73

0000e5fc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    e5fc:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    e5fe:	4801      	ldr	r0, [pc, #4]	; (e604 <bt_conn_create_frag_timeout+0x8>)
    e600:	f7ff bd66 	b.w	e0d0 <bt_conn_create_pdu_timeout>
    e604:	200009e0 	.word	0x200009e0

0000e608 <create_frag>:
{
    e608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e60c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    e60e:	f04f 33ff 	mov.w	r3, #4294967295
    e612:	f04f 32ff 	mov.w	r2, #4294967295
    e616:	2000      	movs	r0, #0
{
    e618:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    e61a:	f7ff ffef 	bl	e5fc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    e61e:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
    e620:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    e622:	2b07      	cmp	r3, #7
    e624:	f04f 0600 	mov.w	r6, #0
    e628:	d005      	beq.n	e636 <create_frag+0x2e>
		net_buf_unref(frag);
    e62a:	f002 fbe9 	bl	10e00 <net_buf_unref>
		return NULL;
    e62e:	4635      	mov	r5, r6
}
    e630:	4628      	mov	r0, r5
    e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    e636:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
    e638:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
    e63c:	4e0c      	ldr	r6, [pc, #48]	; (e670 <create_frag+0x68>)
    e63e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    e640:	f8b6 80bc 	ldrh.w	r8, [r6, #188]	; 0xbc
    e644:	f00e ff99 	bl	1d57a <net_buf_simple_tailroom>
    e648:	4580      	cmp	r8, r0
    e64a:	d20c      	bcs.n	e666 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    e64c:	f8b6 60bc 	ldrh.w	r6, [r6, #188]	; 0xbc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e650:	f854 1f0c 	ldr.w	r1, [r4, #12]!
    e654:	4632      	mov	r2, r6
    e656:	4638      	mov	r0, r7
    e658:	f00e ff97 	bl	1d58a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    e65c:	4631      	mov	r1, r6
    e65e:	4620      	mov	r0, r4
    e660:	f002 fca0 	bl	10fa4 <net_buf_simple_pull>
    e664:	e7e4      	b.n	e630 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    e666:	4638      	mov	r0, r7
    e668:	f00e ff87 	bl	1d57a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    e66c:	b286      	uxth	r6, r0
    e66e:	e7ef      	b.n	e650 <create_frag+0x48>
    e670:	20000008 	.word	0x20000008

0000e674 <bt_conn_process_tx>:
{
    e674:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    e676:	7a83      	ldrb	r3, [r0, #10]
{
    e678:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    e67a:	b973      	cbnz	r3, e69a <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e67c:	1d03      	adds	r3, r0, #4
    e67e:	e8d3 2fef 	ldaex	r2, [r3]
    e682:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    e686:	e8c3 1fe5 	stlex	r5, r1, [r3]
    e68a:	2d00      	cmp	r5, #0
    e68c:	d1f7      	bne.n	e67e <bt_conn_process_tx+0xa>
    e68e:	0653      	lsls	r3, r2, #25
    e690:	d503      	bpl.n	e69a <bt_conn_process_tx+0x26>
}
    e692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    e696:	f7ff ba63 	b.w	db60 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    e69a:	2200      	movs	r2, #0
    e69c:	2300      	movs	r3, #0
    e69e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    e6a2:	f00e ff4d 	bl	1d540 <net_buf_get>
	BT_ASSERT(buf);
    e6a6:	4605      	mov	r5, r0
    e6a8:	b958      	cbnz	r0, e6c2 <bt_conn_process_tx+0x4e>
    e6aa:	f240 321a 	movw	r2, #794	; 0x31a
    e6ae:	4922      	ldr	r1, [pc, #136]	; (e738 <bt_conn_process_tx+0xc4>)
    e6b0:	4822      	ldr	r0, [pc, #136]	; (e73c <bt_conn_process_tx+0xc8>)
    e6b2:	f00c fe2d 	bl	1b310 <assert_print>
    e6b6:	4040      	eors	r0, r0
    e6b8:	f380 8811 	msr	BASEPRI, r0
    e6bc:	f04f 0003 	mov.w	r0, #3
    e6c0:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    e6c2:	4e1f      	ldr	r6, [pc, #124]	; (e740 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    e6c4:	8a2a      	ldrh	r2, [r5, #16]
    e6c6:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
    e6ca:	429a      	cmp	r2, r3
    e6cc:	d807      	bhi.n	e6de <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    e6ce:	2300      	movs	r3, #0
    e6d0:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    e6d2:	4629      	mov	r1, r5
    e6d4:	4620      	mov	r0, r4
    e6d6:	f7ff f95f 	bl	d998 <send_frag>
	if (!send_buf(conn, buf)) {
    e6da:	b968      	cbnz	r0, e6f8 <bt_conn_process_tx+0x84>
    e6dc:	e005      	b.n	e6ea <bt_conn_process_tx+0x76>
	frag = create_frag(conn, buf);
    e6de:	4629      	mov	r1, r5
    e6e0:	4620      	mov	r0, r4
    e6e2:	f7ff ff91 	bl	e608 <create_frag>
	if (!frag) {
    e6e6:	4601      	mov	r1, r0
    e6e8:	b938      	cbnz	r0, e6fa <bt_conn_process_tx+0x86>
		tx_data(buf)->tx = NULL;
    e6ea:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    e6ec:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
    e6ee:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
    e6f0:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
    e6f2:	f002 fb85 	bl	10e00 <net_buf_unref>
		if (tx) {
    e6f6:	b9ce      	cbnz	r6, e72c <bt_conn_process_tx+0xb8>
}
    e6f8:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
    e6fa:	2301      	movs	r3, #1
    e6fc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    e6fe:	4620      	mov	r0, r4
    e700:	f7ff f94a 	bl	d998 <send_frag>
    e704:	2800      	cmp	r0, #0
    e706:	d0f0      	beq.n	e6ea <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
    e708:	8a2a      	ldrh	r2, [r5, #16]
    e70a:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
    e70e:	429a      	cmp	r2, r3
    e710:	d802      	bhi.n	e718 <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
    e712:	2300      	movs	r3, #0
    e714:	2203      	movs	r2, #3
    e716:	e7dc      	b.n	e6d2 <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
    e718:	4629      	mov	r1, r5
    e71a:	4620      	mov	r0, r4
    e71c:	f7ff ff74 	bl	e608 <create_frag>
		if (!frag) {
    e720:	4601      	mov	r1, r0
    e722:	2800      	cmp	r0, #0
    e724:	d0e1      	beq.n	e6ea <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    e726:	2301      	movs	r3, #1
    e728:	461a      	mov	r2, r3
    e72a:	e7e8      	b.n	e6fe <bt_conn_process_tx+0x8a>
			conn_tx_destroy(conn, tx);
    e72c:	4631      	mov	r1, r6
    e72e:	4620      	mov	r0, r4
}
    e730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
    e734:	f7ff b90c 	b.w	d950 <conn_tx_destroy>
    e738:	00023a50 	.word	0x00023a50
    e73c:	000221f8 	.word	0x000221f8
    e740:	20000008 	.word	0x20000008

0000e744 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    e744:	b910      	cbnz	r0, e74c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    e746:	4802      	ldr	r0, [pc, #8]	; (e750 <bt_conn_lookup_index+0xc>)
    e748:	f7ff bb46 	b.w	ddd8 <bt_conn_ref>
}
    e74c:	2000      	movs	r0, #0
    e74e:	4770      	bx	lr
    e750:	20005cf8 	.word	0x20005cf8

0000e754 <bt_conn_init>:

int bt_conn_init(void)
{
    e754:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
    e756:	4815      	ldr	r0, [pc, #84]	; (e7ac <bt_conn_init+0x58>)
    e758:	f010 fc54 	bl	1f004 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    e75c:	4914      	ldr	r1, [pc, #80]	; (e7b0 <bt_conn_init+0x5c>)
    e75e:	4813      	ldr	r0, [pc, #76]	; (e7ac <bt_conn_init+0x58>)
    e760:	f010 fc5d 	bl	1f01e <k_queue_append>
    e764:	4913      	ldr	r1, [pc, #76]	; (e7b4 <bt_conn_init+0x60>)
    e766:	4811      	ldr	r0, [pc, #68]	; (e7ac <bt_conn_init+0x58>)
    e768:	f010 fc59 	bl	1f01e <k_queue_append>
    e76c:	4912      	ldr	r1, [pc, #72]	; (e7b8 <bt_conn_init+0x64>)
    e76e:	480f      	ldr	r0, [pc, #60]	; (e7ac <bt_conn_init+0x58>)
    e770:	f010 fc55 	bl	1f01e <k_queue_append>
	}

	bt_att_init();
    e774:	f001 f85e 	bl	f834 <bt_att_init>

	err = bt_smp_init();
    e778:	f00e feda 	bl	1d530 <bt_smp_init>
	if (err) {
    e77c:	4605      	mov	r5, r0
    e77e:	b998      	cbnz	r0, e7a8 <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
    e780:	f00e f889 	bl	1c896 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    e784:	480d      	ldr	r0, [pc, #52]	; (e7bc <bt_conn_init+0x68>)
    e786:	f7ff fb27 	bl	ddd8 <bt_conn_ref>

			if (!conn) {
    e78a:	4604      	mov	r4, r0
    e78c:	b160      	cbz	r0, e7a8 <bt_conn_init+0x54>
    e78e:	3004      	adds	r0, #4
    e790:	f00d ff84 	bl	1c69c <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    e794:	07c3      	lsls	r3, r0, #31
    e796:	d504      	bpl.n	e7a2 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn,
    e798:	2102      	movs	r1, #2
    e79a:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
    e79c:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
    e79e:	f7ff fb73 	bl	de88 <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
    e7a2:	4620      	mov	r0, r4
    e7a4:	f7ff fb40 	bl	de28 <bt_conn_unref>
		}
	}

	return 0;
}
    e7a8:	4628      	mov	r0, r5
    e7aa:	bd38      	pop	{r3, r4, r5, pc}
    e7ac:	200008f4 	.word	0x200008f4
    e7b0:	200069e0 	.word	0x200069e0
    e7b4:	200069f0 	.word	0x200069f0
    e7b8:	20006a00 	.word	0x20006a00
    e7bc:	20005cf8 	.word	0x20005cf8

0000e7c0 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    e7c0:	b508      	push	{r3, lr}
    e7c2:	4602      	mov	r2, r0
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    e7c4:	4807      	ldr	r0, [pc, #28]	; (e7e4 <l2cap_accept+0x24>)
    e7c6:	6803      	ldr	r3, [r0, #0]
    e7c8:	b923      	cbnz	r3, e7d4 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    e7ca:	4a07      	ldr	r2, [pc, #28]	; (e7e8 <l2cap_accept+0x28>)
    e7cc:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
    e7ce:	6008      	str	r0, [r1, #0]

		return 0;
    e7d0:	4618      	mov	r0, r3
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    e7d2:	bd08      	pop	{r3, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
    e7d4:	4805      	ldr	r0, [pc, #20]	; (e7ec <l2cap_accept+0x2c>)
    e7d6:	2145      	movs	r1, #69	; 0x45
    e7d8:	f00c fdae 	bl	1b338 <z_log_minimal_printk>
    e7dc:	f06f 000b 	mvn.w	r0, #11
    e7e0:	e7f7      	b.n	e7d2 <l2cap_accept+0x12>
    e7e2:	bf00      	nop
    e7e4:	20006a14 	.word	0x20006a14
    e7e8:	000200e8 	.word	0x000200e8
    e7ec:	00023d1b 	.word	0x00023d1b

0000e7f0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7f2:	4605      	mov	r5, r0
    e7f4:	460f      	mov	r7, r1
    e7f6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    e7f8:	2300      	movs	r3, #0
    e7fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e7fe:	2104      	movs	r1, #4
    e800:	2000      	movs	r0, #0
    e802:	f7ff fc65 	bl	e0d0 <bt_conn_create_pdu_timeout>
	if (!buf) {
    e806:	4604      	mov	r4, r0
    e808:	b930      	cbnz	r0, e818 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
    e80a:	462a      	mov	r2, r5
    e80c:	2145      	movs	r1, #69	; 0x45
    e80e:	4806      	ldr	r0, [pc, #24]	; (e828 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
    e810:	f00c fd92 	bl	1b338 <z_log_minimal_printk>
}
    e814:	4620      	mov	r0, r4
    e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    e818:	2104      	movs	r1, #4
    e81a:	300c      	adds	r0, #12
    e81c:	f002 fbf6 	bl	1100c <net_buf_simple_add>
	hdr->code = code;
    e820:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    e822:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    e824:	8046      	strh	r6, [r0, #2]
	return buf;
    e826:	e7f5      	b.n	e814 <l2cap_create_le_sig_pdu.constprop.0+0x24>
    e828:	00023d47 	.word	0x00023d47

0000e82c <bt_l2cap_connected>:
{
    e82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e82e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e830:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    e832:	4d25      	ldr	r5, [pc, #148]	; (e8c8 <bt_l2cap_connected+0x9c>)
    e834:	4f25      	ldr	r7, [pc, #148]	; (e8cc <bt_l2cap_connected+0xa0>)
    e836:	42bd      	cmp	r5, r7
    e838:	d942      	bls.n	e8c0 <bt_l2cap_connected+0x94>
    e83a:	4925      	ldr	r1, [pc, #148]	; (e8d0 <bt_l2cap_connected+0xa4>)
    e83c:	4825      	ldr	r0, [pc, #148]	; (e8d4 <bt_l2cap_connected+0xa8>)
    e83e:	f240 1281 	movw	r2, #385	; 0x181
    e842:	f00c fd65 	bl	1b310 <assert_print>
    e846:	f240 1181 	movw	r1, #385	; 0x181
    e84a:	4821      	ldr	r0, [pc, #132]	; (e8d0 <bt_l2cap_connected+0xa4>)
    e84c:	f00c fd59 	bl	1b302 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
    e850:	4620      	mov	r0, r4
    e852:	686b      	ldr	r3, [r5, #4]
    e854:	a901      	add	r1, sp, #4
    e856:	4798      	blx	r3
    e858:	2800      	cmp	r0, #0
    e85a:	db2c      	blt.n	e8b6 <bt_l2cap_connected+0x8a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    e85c:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    e85e:	882a      	ldrh	r2, [r5, #0]
    e860:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    e862:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    e864:	68a8      	ldr	r0, [r5, #8]
    e866:	f103 0210 	add.w	r2, r3, #16
    e86a:	e8d2 1fef 	ldaex	r1, [r2]
    e86e:	e8c2 6fec 	stlex	ip, r6, [r2]
    e872:	f1bc 0f00 	cmp.w	ip, #0
    e876:	d1f8      	bne.n	e86a <bt_l2cap_connected+0x3e>
	parent->next = child;
    e878:	609e      	str	r6, [r3, #8]
	return list->tail;
    e87a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
    e87c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    e880:	b9d9      	cbnz	r1, e8ba <bt_l2cap_connected+0x8e>
	list->head = node;
    e882:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
    e886:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    e888:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    e88a:	9801      	ldr	r0, [sp, #4]
    e88c:	6843      	ldr	r3, [r0, #4]
    e88e:	681b      	ldr	r3, [r3, #0]
    e890:	b103      	cbz	r3, e894 <bt_l2cap_connected+0x68>
			chan->ops->connected(chan);
    e892:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e894:	9b01      	ldr	r3, [sp, #4]
    e896:	3310      	adds	r3, #16
    e898:	e8d3 1fef 	ldaex	r1, [r3]
    e89c:	f041 0101 	orr.w	r1, r1, #1
    e8a0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e8a4:	2a00      	cmp	r2, #0
    e8a6:	d1f7      	bne.n	e898 <bt_l2cap_connected+0x6c>
		if (chan->ops->status) {
    e8a8:	9801      	ldr	r0, [sp, #4]
    e8aa:	6843      	ldr	r3, [r0, #4]
    e8ac:	69db      	ldr	r3, [r3, #28]
    e8ae:	b113      	cbz	r3, e8b6 <bt_l2cap_connected+0x8a>
			chan->ops->status(chan, chan->status);
    e8b0:	f100 0110 	add.w	r1, r0, #16
    e8b4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    e8b6:	350c      	adds	r5, #12
    e8b8:	e7bd      	b.n	e836 <bt_l2cap_connected+0xa>
	parent->next = child;
    e8ba:	600a      	str	r2, [r1, #0]
	list->tail = node;
    e8bc:	65a2      	str	r2, [r4, #88]	; 0x58
}
    e8be:	e7e2      	b.n	e886 <bt_l2cap_connected+0x5a>
    e8c0:	d3c6      	bcc.n	e850 <bt_l2cap_connected+0x24>
}
    e8c2:	b003      	add	sp, #12
    e8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8c6:	bf00      	nop
    e8c8:	0001f8a4 	.word	0x0001f8a4
    e8cc:	0001f8c8 	.word	0x0001f8c8
    e8d0:	00023d74 	.word	0x00023d74
    e8d4:	000221f8 	.word	0x000221f8

0000e8d8 <l2cap_recv>:
{
    e8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    e8da:	8a0b      	ldrh	r3, [r1, #16]
{
    e8dc:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
    e8de:	2b03      	cmp	r3, #3
{
    e8e0:	460d      	mov	r5, r1
    e8e2:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
    e8e4:	d804      	bhi.n	e8f0 <l2cap_recv+0x18>
		LOG_ERR("Too small L2CAP signaling PDU");
    e8e6:	2145      	movs	r1, #69	; 0x45
    e8e8:	4839      	ldr	r0, [pc, #228]	; (e9d0 <l2cap_recv+0xf8>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
    e8ea:	f00c fd25 	bl	1b338 <z_log_minimal_printk>
		return 0;
    e8ee:	e00d      	b.n	e90c <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
    e8f0:	2104      	movs	r1, #4
    e8f2:	f105 000c 	add.w	r0, r5, #12
    e8f6:	f002 fb6f 	bl	10fd8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    e8fa:	8a2a      	ldrh	r2, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    e8fc:	8843      	ldrh	r3, [r0, #2]
    e8fe:	4604      	mov	r4, r0
	if (buf->len != len) {
    e900:	4293      	cmp	r3, r2
    e902:	d006      	beq.n	e912 <l2cap_recv+0x3a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    e904:	2145      	movs	r1, #69	; 0x45
    e906:	4833      	ldr	r0, [pc, #204]	; (e9d4 <l2cap_recv+0xfc>)
    e908:	f00c fd16 	bl	1b338 <z_log_minimal_printk>
}
    e90c:	2000      	movs	r0, #0
    e90e:	b005      	add	sp, #20
    e910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    e912:	7841      	ldrb	r1, [r0, #1]
    e914:	b911      	cbnz	r1, e91c <l2cap_recv+0x44>
		LOG_ERR("Invalid ident value in L2CAP PDU");
    e916:	2145      	movs	r1, #69	; 0x45
    e918:	482f      	ldr	r0, [pc, #188]	; (e9d8 <l2cap_recv+0x100>)
    e91a:	e7e6      	b.n	e8ea <l2cap_recv+0x12>
	switch (hdr->code) {
    e91c:	7802      	ldrb	r2, [r0, #0]
    e91e:	2a12      	cmp	r2, #18
    e920:	d00f      	beq.n	e942 <l2cap_recv+0x6a>
    e922:	2a13      	cmp	r2, #19
    e924:	d008      	beq.n	e938 <l2cap_recv+0x60>
    e926:	2a01      	cmp	r2, #1
    e928:	d0f0      	beq.n	e90c <l2cap_recv+0x34>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    e92a:	2157      	movs	r1, #87	; 0x57
    e92c:	482b      	ldr	r0, [pc, #172]	; (e9dc <l2cap_recv+0x104>)
    e92e:	f00c fd03 	bl	1b338 <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
    e932:	7861      	ldrb	r1, [r4, #1]
    e934:	6830      	ldr	r0, [r6, #0]
    e936:	e014      	b.n	e962 <l2cap_recv+0x8a>
	if (buf->len < sizeof(*rsp)) {
    e938:	2b01      	cmp	r3, #1
    e93a:	d8e7      	bhi.n	e90c <l2cap_recv+0x34>
		LOG_ERR("Too small LE conn param rsp");
    e93c:	2145      	movs	r1, #69	; 0x45
    e93e:	4828      	ldr	r0, [pc, #160]	; (e9e0 <l2cap_recv+0x108>)
    e940:	e7d3      	b.n	e8ea <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
    e942:	2b07      	cmp	r3, #7
    e944:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    e946:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
    e948:	d802      	bhi.n	e950 <l2cap_recv+0x78>
		LOG_ERR("Too small LE conn update param req");
    e94a:	2145      	movs	r1, #69	; 0x45
    e94c:	4825      	ldr	r0, [pc, #148]	; (e9e4 <l2cap_recv+0x10c>)
    e94e:	e7cc      	b.n	e8ea <l2cap_recv+0x12>
	if (conn->state != BT_CONN_CONNECTED) {
    e950:	7aa3      	ldrb	r3, [r4, #10]
    e952:	2b07      	cmp	r3, #7
    e954:	d002      	beq.n	e95c <l2cap_recv+0x84>
		LOG_WRN("Not connected");
    e956:	2157      	movs	r1, #87	; 0x57
    e958:	4823      	ldr	r0, [pc, #140]	; (e9e8 <l2cap_recv+0x110>)
    e95a:	e7c6      	b.n	e8ea <l2cap_recv+0x12>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
    e95c:	78e7      	ldrb	r7, [r4, #3]
    e95e:	b11f      	cbz	r7, e968 <l2cap_recv+0x90>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    e960:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    e962:	f00d ff71 	bl	1c848 <l2cap_send_reject.constprop.0>
		break;
    e966:	e7d1      	b.n	e90c <l2cap_recv+0x34>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    e968:	8813      	ldrh	r3, [r2, #0]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    e96a:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    e96c:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    e970:	8853      	ldrh	r3, [r2, #2]
    e972:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    e976:	8893      	ldrh	r3, [r2, #4]
    e978:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    e97c:	88d3      	ldrh	r3, [r2, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    e97e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    e980:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    e984:	f7ff ff34 	bl	e7f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    e988:	4605      	mov	r5, r0
    e98a:	2800      	cmp	r0, #0
    e98c:	d0be      	beq.n	e90c <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
    e98e:	a902      	add	r1, sp, #8
    e990:	4620      	mov	r0, r4
    e992:	f7ff fc23 	bl	e1dc <le_param_req>
    e996:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
    e998:	2102      	movs	r1, #2
    e99a:	f105 000c 	add.w	r0, r5, #12
    e99e:	f002 fb35 	bl	1100c <net_buf_simple_add>
	if (accepted) {
    e9a2:	f086 0301 	eor.w	r3, r6, #1
    e9a6:	b2db      	uxtb	r3, r3
    e9a8:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    e9aa:	462a      	mov	r2, r5
    e9ac:	463b      	mov	r3, r7
    e9ae:	2105      	movs	r1, #5
    e9b0:	4620      	mov	r0, r4
    e9b2:	9700      	str	r7, [sp, #0]
    e9b4:	f00d ff2f 	bl	1c816 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    e9b8:	b110      	cbz	r0, e9c0 <l2cap_recv+0xe8>
		net_buf_unref(buf);
    e9ba:	4628      	mov	r0, r5
    e9bc:	f002 fa20 	bl	10e00 <net_buf_unref>
	if (accepted) {
    e9c0:	2e00      	cmp	r6, #0
    e9c2:	d0a3      	beq.n	e90c <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
    e9c4:	4620      	mov	r0, r4
    e9c6:	a902      	add	r1, sp, #8
    e9c8:	f00d fecb 	bl	1c762 <bt_conn_le_conn_update>
    e9cc:	e79e      	b.n	e90c <l2cap_recv+0x34>
    e9ce:	bf00      	nop
    e9d0:	00023da5 	.word	0x00023da5
    e9d4:	00023dc8 	.word	0x00023dc8
    e9d8:	00023dee 	.word	0x00023dee
    e9dc:	00023e70 	.word	0x00023e70
    e9e0:	00023e14 	.word	0x00023e14
    e9e4:	00023e35 	.word	0x00023e35
    e9e8:	00023e5d 	.word	0x00023e5d

0000e9ec <bt_l2cap_recv>:
{
    e9ec:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    e9ee:	8a0b      	ldrh	r3, [r1, #16]
{
    e9f0:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    e9f2:	2b03      	cmp	r3, #3
{
    e9f4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    e9f6:	d808      	bhi.n	ea0a <bt_l2cap_recv+0x1e>
		LOG_ERR("Too small L2CAP PDU received");
    e9f8:	2145      	movs	r1, #69	; 0x45
    e9fa:	480e      	ldr	r0, [pc, #56]	; (ea34 <bt_l2cap_recv+0x48>)
    e9fc:	f00c fc9c 	bl	1b338 <z_log_minimal_printk>
	net_buf_unref(buf);
    ea00:	4620      	mov	r0, r4
}
    ea02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    ea06:	f002 b9fb 	b.w	10e00 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    ea0a:	2104      	movs	r1, #4
    ea0c:	f104 000c 	add.w	r0, r4, #12
    ea10:	f002 fae2 	bl	10fd8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    ea14:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    ea16:	4628      	mov	r0, r5
    ea18:	4611      	mov	r1, r2
    ea1a:	f00d ff33 	bl	1c884 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ea1e:	b920      	cbnz	r0, ea2a <bt_l2cap_recv+0x3e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
    ea20:	2157      	movs	r1, #87	; 0x57
    ea22:	4805      	ldr	r0, [pc, #20]	; (ea38 <bt_l2cap_recv+0x4c>)
    ea24:	f00c fc88 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
    ea28:	e7ea      	b.n	ea00 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
    ea2a:	6843      	ldr	r3, [r0, #4]
    ea2c:	4621      	mov	r1, r4
    ea2e:	695b      	ldr	r3, [r3, #20]
    ea30:	4798      	blx	r3
    ea32:	e7e5      	b.n	ea00 <bt_l2cap_recv+0x14>
    ea34:	00023e9d 	.word	0x00023e9d
    ea38:	00023ebf 	.word	0x00023ebf

0000ea3c <bt_l2cap_update_conn_param>:
{
    ea3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    ea3e:	4b17      	ldr	r3, [pc, #92]	; (ea9c <bt_l2cap_update_conn_param+0x60>)
{
    ea40:	460e      	mov	r6, r1
	ident++;
    ea42:	7819      	ldrb	r1, [r3, #0]
{
    ea44:	4605      	mov	r5, r0
	ident++;
    ea46:	3101      	adds	r1, #1
    ea48:	b2c9      	uxtb	r1, r1
    ea4a:	2901      	cmp	r1, #1
    ea4c:	bf38      	it	cc
    ea4e:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ea50:	2208      	movs	r2, #8
    ea52:	2012      	movs	r0, #18
	ident++;
    ea54:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ea56:	f7ff fecb 	bl	e7f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    ea5a:	4604      	mov	r4, r0
    ea5c:	b1d0      	cbz	r0, ea94 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    ea5e:	2108      	movs	r1, #8
    ea60:	300c      	adds	r0, #12
    ea62:	f002 fad3 	bl	1100c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    ea66:	8833      	ldrh	r3, [r6, #0]
    ea68:	4622      	mov	r2, r4
    ea6a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    ea6c:	8873      	ldrh	r3, [r6, #2]
    ea6e:	2105      	movs	r1, #5
    ea70:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    ea72:	88b3      	ldrh	r3, [r6, #4]
    ea74:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ea76:	88f3      	ldrh	r3, [r6, #6]
    ea78:	80c3      	strh	r3, [r0, #6]
    ea7a:	2300      	movs	r3, #0
    ea7c:	4628      	mov	r0, r5
    ea7e:	9300      	str	r3, [sp, #0]
    ea80:	f00d fec9 	bl	1c816 <bt_l2cap_send_cb>
	if (err) {
    ea84:	4605      	mov	r5, r0
    ea86:	b110      	cbz	r0, ea8e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    ea88:	4620      	mov	r0, r4
    ea8a:	f002 f9b9 	bl	10e00 <net_buf_unref>
}
    ea8e:	4628      	mov	r0, r5
    ea90:	b002      	add	sp, #8
    ea92:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ea94:	f06f 050b 	mvn.w	r5, #11
    ea98:	e7f9      	b.n	ea8e <bt_l2cap_update_conn_param+0x52>
    ea9a:	bf00      	nop
    ea9c:	2000736b 	.word	0x2000736b

0000eaa0 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    eaa0:	2823      	cmp	r0, #35	; 0x23
    eaa2:	d81f      	bhi.n	eae4 <att_op_get_type+0x44>
    eaa4:	281a      	cmp	r0, #26
    eaa6:	d804      	bhi.n	eab2 <att_op_get_type+0x12>
    eaa8:	1e43      	subs	r3, r0, #1
    eaaa:	2b18      	cmp	r3, #24
    eaac:	d90e      	bls.n	eacc <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    eaae:	2006      	movs	r0, #6
    eab0:	4770      	bx	lr
	switch (op) {
    eab2:	f1a0 031b 	sub.w	r3, r0, #27
    eab6:	2b08      	cmp	r3, #8
    eab8:	d81e      	bhi.n	eaf8 <att_op_get_type+0x58>
    eaba:	e8df f003 	tbb	[pc, r3]
    eabe:	1d05      	.short	0x1d05
    eac0:	191d231b 	.word	0x191d231b
    eac4:	1d25      	.short	0x1d25
    eac6:	05          	.byte	0x05
    eac7:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    eac8:	2003      	movs	r0, #3
    eaca:	4770      	bx	lr
    eacc:	2301      	movs	r3, #1
	switch (op) {
    eace:	4a0f      	ldr	r2, [pc, #60]	; (eb0c <att_op_get_type+0x6c>)
    ead0:	4083      	lsls	r3, r0
    ead2:	401a      	ands	r2, r3
    ead4:	b9c2      	cbnz	r2, eb08 <att_op_get_type+0x68>
    ead6:	4a0e      	ldr	r2, [pc, #56]	; (eb10 <att_op_get_type+0x70>)
    ead8:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    eada:	2a00      	cmp	r2, #0
    eadc:	bf14      	ite	ne
    eade:	2001      	movne	r0, #1
    eae0:	2006      	moveq	r0, #6
    eae2:	4770      	bx	lr
	switch (op) {
    eae4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    eae8:	2b52      	cmp	r3, #82	; 0x52
    eaea:	d105      	bne.n	eaf8 <att_op_get_type+0x58>
		return ATT_COMMAND;
    eaec:	2000      	movs	r0, #0
}
    eaee:	4770      	bx	lr
		return ATT_REQUEST;
    eaf0:	2001      	movs	r0, #1
    eaf2:	4770      	bx	lr
		return ATT_INDICATION;
    eaf4:	2005      	movs	r0, #5
    eaf6:	4770      	bx	lr
		return ATT_COMMAND;
    eaf8:	f010 0f40 	tst.w	r0, #64	; 0x40
    eafc:	bf0c      	ite	eq
    eafe:	2006      	moveq	r0, #6
    eb00:	2000      	movne	r0, #0
    eb02:	4770      	bx	lr
	switch (op) {
    eb04:	2004      	movs	r0, #4
    eb06:	4770      	bx	lr
		return ATT_RESPONSE;
    eb08:	2002      	movs	r0, #2
    eb0a:	4770      	bx	lr
    eb0c:	028aaaaa 	.word	0x028aaaaa
    eb10:	01455554 	.word	0x01455554

0000eb14 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    eb14:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    eb16:	7a83      	ldrb	r3, [r0, #10]
    eb18:	2b07      	cmp	r3, #7
    eb1a:	d005      	beq.n	eb28 <att_get+0x14>
		LOG_WRN("Not connected");
    eb1c:	2157      	movs	r1, #87	; 0x57
    eb1e:	4810      	ldr	r0, [pc, #64]	; (eb60 <att_get+0x4c>)
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		LOG_ERR("Unable to find ATT channel");
    eb20:	f00c fc0a 	bl	1b338 <z_log_minimal_printk>
		return NULL;
    eb24:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
    eb26:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    eb28:	2104      	movs	r1, #4
    eb2a:	f00d feab 	bl	1c884 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    eb2e:	4603      	mov	r3, r0
    eb30:	b910      	cbnz	r0, eb38 <att_get+0x24>
		LOG_ERR("Unable to find ATT channel");
    eb32:	2145      	movs	r1, #69	; 0x45
    eb34:	480b      	ldr	r0, [pc, #44]	; (eb64 <att_get+0x50>)
    eb36:	e7f3      	b.n	eb20 <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
    eb38:	2102      	movs	r1, #2
    eb3a:	3094      	adds	r0, #148	; 0x94
    eb3c:	f00d fed0 	bl	1c8e0 <atomic_test_bit>
    eb40:	b950      	cbnz	r0, eb58 <att_get+0x44>
    eb42:	4909      	ldr	r1, [pc, #36]	; (eb68 <att_get+0x54>)
    eb44:	4809      	ldr	r0, [pc, #36]	; (eb6c <att_get+0x58>)
    eb46:	f640 322a 	movw	r2, #2858	; 0xb2a
    eb4a:	f00c fbe1 	bl	1b310 <assert_print>
    eb4e:	f640 312a 	movw	r1, #2858	; 0xb2a
    eb52:	4805      	ldr	r0, [pc, #20]	; (eb68 <att_get+0x54>)
    eb54:	f00c fbd5 	bl	1b302 <assert_post_action>
	return att_chan->att;
    eb58:	f853 0c04 	ldr.w	r0, [r3, #-4]
    eb5c:	e7e3      	b.n	eb26 <att_get+0x12>
    eb5e:	bf00      	nop
    eb60:	00023e5d 	.word	0x00023e5d
    eb64:	00023f00 	.word	0x00023f00
    eb68:	00023f20 	.word	0x00023f20
    eb6c:	000221f8 	.word	0x000221f8

0000eb70 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    eb70:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    eb72:	3804      	subs	r0, #4
    eb74:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    eb76:	a901      	add	r1, sp, #4
    eb78:	4802      	ldr	r0, [pc, #8]	; (eb84 <bt_att_released+0x14>)
    eb7a:	f007 fa5d 	bl	16038 <k_mem_slab_free>
}
    eb7e:	b003      	add	sp, #12
    eb80:	f85d fb04 	ldr.w	pc, [sp], #4
    eb84:	20000778 	.word	0x20000778

0000eb88 <find_type_cb>:
{
    eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    eb8c:	f642 0301 	movw	r3, #10241	; 0x2801
    eb90:	2500      	movs	r5, #0
{
    eb92:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
    eb94:	f8d2 9000 	ldr.w	r9, [r2]
{
    eb98:	4607      	mov	r7, r0
    eb9a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    eb9c:	6800      	ldr	r0, [r0, #0]
    eb9e:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
    eba0:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
    eba4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    eba6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    ebaa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    ebae:	f00d fa3a 	bl	1c026 <bt_uuid_cmp>
    ebb2:	2800      	cmp	r0, #0
    ebb4:	d060      	beq.n	ec78 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    ebb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ebba:	6838      	ldr	r0, [r7, #0]
    ebbc:	a90b      	add	r1, sp, #44	; 0x2c
    ebbe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    ebc2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    ebc6:	f00d fa2e 	bl	1c026 <bt_uuid_cmp>
    ebca:	b138      	cbz	r0, ebdc <find_type_cb+0x54>
		if (data->group &&
    ebcc:	68a3      	ldr	r3, [r4, #8]
    ebce:	b11b      	cbz	r3, ebd8 <find_type_cb+0x50>
    ebd0:	885a      	ldrh	r2, [r3, #2]
    ebd2:	42b2      	cmp	r2, r6
    ebd4:	d200      	bcs.n	ebd8 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
    ebd6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    ebd8:	2001      	movs	r0, #1
    ebda:	e009      	b.n	ebf0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    ebdc:	6861      	ldr	r1, [r4, #4]
    ebde:	4608      	mov	r0, r1
    ebe0:	f00d fe64 	bl	1c8ac <net_buf_frags_len>
    ebe4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
    ebe8:	1a1b      	subs	r3, r3, r0
    ebea:	2b03      	cmp	r3, #3
    ebec:	d803      	bhi.n	ebf6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    ebee:	2000      	movs	r0, #0
}
    ebf0:	b011      	add	sp, #68	; 0x44
    ebf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    ebf6:	4608      	mov	r0, r1
    ebf8:	f002 f95a 	bl	10eb0 <net_buf_frag_last>
    ebfc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    ebfe:	6860      	ldr	r0, [r4, #4]
    ec00:	f00d fe54 	bl	1c8ac <net_buf_frags_len>
    ec04:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
    ec08:	f105 0b0c 	add.w	fp, r5, #12
    ec0c:	ebaa 0a00 	sub.w	sl, sl, r0
    ec10:	4658      	mov	r0, fp
    ec12:	f00e fcb2 	bl	1d57a <net_buf_simple_tailroom>
    ec16:	4582      	cmp	sl, r0
    ec18:	d231      	bcs.n	ec7e <find_type_cb+0xf6>
    ec1a:	6860      	ldr	r0, [r4, #4]
    ec1c:	f00d fe46 	bl	1c8ac <net_buf_frags_len>
    ec20:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
    ec24:	1a18      	subs	r0, r3, r0
	if (!len) {
    ec26:	b970      	cbnz	r0, ec46 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    ec28:	6863      	ldr	r3, [r4, #4]
    ec2a:	7a98      	ldrb	r0, [r3, #10]
    ec2c:	f001 ff06 	bl	10a3c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    ec30:	2200      	movs	r2, #0
    ec32:	2300      	movs	r3, #0
    ec34:	f00e fc7f 	bl	1d536 <net_buf_alloc_fixed>
		if (!frag) {
    ec38:	4605      	mov	r5, r0
    ec3a:	2800      	cmp	r0, #0
    ec3c:	d0d7      	beq.n	ebee <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    ec3e:	4601      	mov	r1, r0
    ec40:	6860      	ldr	r0, [r4, #4]
    ec42:	f002 f973 	bl	10f2c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    ec46:	2300      	movs	r3, #0
    ec48:	9300      	str	r3, [sp, #0]
    ec4a:	4639      	mov	r1, r7
    ec4c:	f8d7 9004 	ldr.w	r9, [r7, #4]
    ec50:	2310      	movs	r3, #16
    ec52:	4640      	mov	r0, r8
    ec54:	aa02      	add	r2, sp, #8
    ec56:	47c8      	blx	r9
	if (read < 0) {
    ec58:	1e07      	subs	r7, r0, #0
    ec5a:	db0d      	blt.n	ec78 <find_type_cb+0xf0>
	if (read != data->value_len) {
    ec5c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    ec5e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    ec60:	42ba      	cmp	r2, r7
    ec62:	d02b      	beq.n	ecbc <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    ec64:	4601      	mov	r1, r0
    ec66:	a80b      	add	r0, sp, #44	; 0x2c
    ec68:	f00d fa0b 	bl	1c082 <bt_uuid_create>
    ec6c:	b958      	cbnz	r0, ec86 <find_type_cb+0xfe>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
    ec6e:	2157      	movs	r1, #87	; 0x57
    ec70:	7c22      	ldrb	r2, [r4, #16]
    ec72:	4814      	ldr	r0, [pc, #80]	; (ecc4 <find_type_cb+0x13c>)
			LOG_WRN("Unable to create UUID: size %d", read);
    ec74:	f00c fb60 	bl	1b338 <z_log_minimal_printk>
	data->group = NULL;
    ec78:	2300      	movs	r3, #0
    ec7a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    ec7c:	e7ac      	b.n	ebd8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    ec7e:	4658      	mov	r0, fp
    ec80:	f00e fc7b 	bl	1d57a <net_buf_simple_tailroom>
    ec84:	e7cf      	b.n	ec26 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    ec86:	b2fa      	uxtb	r2, r7
    ec88:	a902      	add	r1, sp, #8
    ec8a:	a806      	add	r0, sp, #24
    ec8c:	f00d f9f9 	bl	1c082 <bt_uuid_create>
    ec90:	b918      	cbnz	r0, ec9a <find_type_cb+0x112>
			LOG_WRN("Unable to create UUID: size %d", read);
    ec92:	463a      	mov	r2, r7
    ec94:	2157      	movs	r1, #87	; 0x57
    ec96:	480c      	ldr	r0, [pc, #48]	; (ecc8 <find_type_cb+0x140>)
    ec98:	e7ec      	b.n	ec74 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    ec9a:	a906      	add	r1, sp, #24
    ec9c:	a80b      	add	r0, sp, #44	; 0x2c
    ec9e:	f00d f9c2 	bl	1c026 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    eca2:	2800      	cmp	r0, #0
    eca4:	d1e8      	bne.n	ec78 <find_type_cb+0xf0>
	data->err = 0x00;
    eca6:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    eca8:	2104      	movs	r1, #4
    ecaa:	7463      	strb	r3, [r4, #17]
    ecac:	f105 000c 	add.w	r0, r5, #12
    ecb0:	f002 f9ac 	bl	1100c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    ecb4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    ecb6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    ecb8:	68a3      	ldr	r3, [r4, #8]
    ecba:	e78c      	b.n	ebd6 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
    ecbc:	a902      	add	r1, sp, #8
    ecbe:	f010 fb71 	bl	1f3a4 <memcmp>
    ecc2:	e7ee      	b.n	eca2 <find_type_cb+0x11a>
    ecc4:	00023f4f 	.word	0x00023f4f
    ecc8:	00023f73 	.word	0x00023f73

0000eccc <tx_meta_data_free>:
{
    eccc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
    ecce:	4604      	mov	r4, r0
    ecd0:	b940      	cbnz	r0, ece4 <tx_meta_data_free+0x18>
    ecd2:	4909      	ldr	r1, [pc, #36]	; (ecf8 <tx_meta_data_free+0x2c>)
    ecd4:	4809      	ldr	r0, [pc, #36]	; (ecfc <tx_meta_data_free+0x30>)
    ecd6:	22a6      	movs	r2, #166	; 0xa6
    ecd8:	f00c fb1a 	bl	1b310 <assert_print>
    ecdc:	21a6      	movs	r1, #166	; 0xa6
    ecde:	4806      	ldr	r0, [pc, #24]	; (ecf8 <tx_meta_data_free+0x2c>)
    ece0:	f00c fb0f 	bl	1b302 <assert_post_action>
    ece4:	2100      	movs	r1, #0
    ece6:	2214      	movs	r2, #20
    ece8:	f010 fb93 	bl	1f412 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    ecec:	4621      	mov	r1, r4
}
    ecee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    ecf2:	4803      	ldr	r0, [pc, #12]	; (ed00 <tx_meta_data_free+0x34>)
    ecf4:	f010 b993 	b.w	1f01e <k_queue_append>
    ecf8:	00023f20 	.word	0x00023f20
    ecfc:	000221f8 	.word	0x000221f8
    ed00:	200008d8 	.word	0x200008d8

0000ed04 <chan_send>:
{
    ed04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ed08:	4606      	mov	r6, r0
    ed0a:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    ed0c:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
    ed10:	68cb      	ldr	r3, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    ed12:	3098      	adds	r0, #152	; 0x98
    ed14:	2102      	movs	r1, #2
    ed16:	f00d fde3 	bl	1c8e0 <atomic_test_bit>
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d047      	beq.n	edae <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    ed1e:	781b      	ldrb	r3, [r3, #0]
    ed20:	2bd2      	cmp	r3, #210	; 0xd2
    ed22:	d114      	bne.n	ed4e <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
    ed24:	6833      	ldr	r3, [r6, #0]
    ed26:	4621      	mov	r1, r4
    ed28:	6818      	ldr	r0, [r3, #0]
    ed2a:	f00e fbfe 	bl	1d52a <bt_smp_sign>
		if (err) {
    ed2e:	4605      	mov	r5, r0
    ed30:	b168      	cbz	r0, ed4e <chan_send+0x4a>
			LOG_ERR("Error signing data");
    ed32:	2145      	movs	r1, #69	; 0x45
    ed34:	481f      	ldr	r0, [pc, #124]	; (edb4 <chan_send+0xb0>)
    ed36:	f00c faff 	bl	1b338 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    ed3a:	69a0      	ldr	r0, [r4, #24]
    ed3c:	f7ff ffc6 	bl	eccc <tx_meta_data_free>
			net_buf_unref(buf);
    ed40:	4620      	mov	r0, r4
    ed42:	f002 f85d 	bl	10e00 <net_buf_unref>
}
    ed46:	4628      	mov	r0, r5
    ed48:	b003      	add	sp, #12
    ed4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    ed4e:	f104 000c 	add.w	r0, r4, #12
    ed52:	f00e fc0e 	bl	1d572 <net_buf_simple_headroom>
	state->len = buf->len;
    ed56:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
    ed5a:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ed5e:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
    ed60:	4607      	mov	r7, r0
    ed62:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    ed64:	68e3      	ldr	r3, [r4, #12]
    ed66:	7818      	ldrb	r0, [r3, #0]
    ed68:	f7ff fe9a 	bl	eaa0 <att_op_get_type>
	switch (op_type) {
    ed6c:	2805      	cmp	r0, #5
    ed6e:	d813      	bhi.n	ed98 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ed70:	4b11      	ldr	r3, [pc, #68]	; (edb8 <chan_send+0xb4>)
    ed72:	4622      	mov	r2, r4
    ed74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ed78:	2104      	movs	r1, #4
    ed7a:	4628      	mov	r0, r5
    ed7c:	f8cd 8000 	str.w	r8, [sp]
    ed80:	f00d fd49 	bl	1c816 <bt_l2cap_send_cb>
	if (err) {
    ed84:	4605      	mov	r5, r0
    ed86:	2800      	cmp	r0, #0
    ed88:	d0dd      	beq.n	ed46 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
    ed8a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    ed8c:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ed90:	fa13 f787 	uxtah	r7, r3, r7
    ed94:	60e7      	str	r7, [r4, #12]
}
    ed96:	e7d6      	b.n	ed46 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
    ed98:	4908      	ldr	r1, [pc, #32]	; (edbc <chan_send+0xb8>)
    ed9a:	4809      	ldr	r0, [pc, #36]	; (edc0 <chan_send+0xbc>)
    ed9c:	f240 2257 	movw	r2, #599	; 0x257
    eda0:	f00c fab6 	bl	1b310 <assert_print>
    eda4:	f240 2157 	movw	r1, #599	; 0x257
    eda8:	4804      	ldr	r0, [pc, #16]	; (edbc <chan_send+0xb8>)
    edaa:	f00c faaa 	bl	1b302 <assert_post_action>
		return -EINVAL;
    edae:	f06f 0515 	mvn.w	r5, #21
    edb2:	e7c8      	b.n	ed46 <chan_send+0x42>
    edb4:	00023f97 	.word	0x00023f97
    edb8:	00020110 	.word	0x00020110
    edbc:	00023f20 	.word	0x00023f20
    edc0:	000221f8 	.word	0x000221f8

0000edc4 <bt_att_chan_req_send>:
{
    edc4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
    edc6:	b950      	cbnz	r0, edde <bt_att_chan_req_send+0x1a>
    edc8:	4917      	ldr	r1, [pc, #92]	; (ee28 <bt_att_chan_req_send+0x64>)
    edca:	f44f 7246 	mov.w	r2, #792	; 0x318
    edce:	4817      	ldr	r0, [pc, #92]	; (ee2c <bt_att_chan_req_send+0x68>)
    edd0:	f00c fa9e 	bl	1b310 <assert_print>
    edd4:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
    edd8:	4813      	ldr	r0, [pc, #76]	; (ee28 <bt_att_chan_req_send+0x64>)
    edda:	f00c fa92 	bl	1b302 <assert_post_action>
    edde:	b941      	cbnz	r1, edf2 <bt_att_chan_req_send+0x2e>
    ede0:	4911      	ldr	r1, [pc, #68]	; (ee28 <bt_att_chan_req_send+0x64>)
    ede2:	f240 3219 	movw	r2, #793	; 0x319
    ede6:	4811      	ldr	r0, [pc, #68]	; (ee2c <bt_att_chan_req_send+0x68>)
    ede8:	f00c fa92 	bl	1b310 <assert_print>
    edec:	f240 3119 	movw	r1, #793	; 0x319
    edf0:	e7f2      	b.n	edd8 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
    edf2:	684a      	ldr	r2, [r1, #4]
    edf4:	b942      	cbnz	r2, ee08 <bt_att_chan_req_send+0x44>
    edf6:	490c      	ldr	r1, [pc, #48]	; (ee28 <bt_att_chan_req_send+0x64>)
    edf8:	f240 321a 	movw	r2, #794	; 0x31a
    edfc:	480b      	ldr	r0, [pc, #44]	; (ee2c <bt_att_chan_req_send+0x68>)
    edfe:	f00c fa87 	bl	1b310 <assert_print>
    ee02:	f240 311a 	movw	r1, #794	; 0x31a
    ee06:	e7e7      	b.n	edd8 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
    ee08:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    ee0c:	b143      	cbz	r3, ee20 <bt_att_chan_req_send+0x5c>
    ee0e:	4906      	ldr	r1, [pc, #24]	; (ee28 <bt_att_chan_req_send+0x64>)
    ee10:	f240 321b 	movw	r2, #795	; 0x31b
    ee14:	4805      	ldr	r0, [pc, #20]	; (ee2c <bt_att_chan_req_send+0x68>)
    ee16:	f00c fa7b 	bl	1b310 <assert_print>
    ee1a:	f240 311b 	movw	r1, #795	; 0x31b
    ee1e:	e7db      	b.n	edd8 <bt_att_chan_req_send+0x14>
}
    ee20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
    ee24:	f00d bde1 	b.w	1c9ea <chan_req_send>
    ee28:	00023f20 	.word	0x00023f20
    ee2c:	000221f8 	.word	0x000221f8

0000ee30 <bt_att_connected>:
{
    ee30:	b510      	push	{r4, lr}
    ee32:	4604      	mov	r4, r0
    ee34:	f100 0394 	add.w	r3, r0, #148	; 0x94
    ee38:	e8d3 1fef 	ldaex	r1, [r3]
    ee3c:	f041 0104 	orr.w	r1, r1, #4
    ee40:	e8c3 1fe2 	stlex	r2, r1, [r3]
    ee44:	2a00      	cmp	r2, #0
    ee46:	d1f7      	bne.n	ee38 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ee48:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
    ee4a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ee4c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ee4e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    ee50:	f00d fd88 	bl	1c964 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    ee54:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ee58:	4903      	ldr	r1, [pc, #12]	; (ee68 <bt_att_connected+0x38>)
    ee5a:	f008 f9ad 	bl	171b8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    ee5e:	6820      	ldr	r0, [r4, #0]
}
    ee60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    ee64:	f001 bd8a 	b.w	1097c <bt_gatt_connected>
    ee68:	0000fa29 	.word	0x0000fa29

0000ee6c <read_group_cb>:
{
    ee6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ee70:	f04f 0800 	mov.w	r8, #0
    ee74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    ee78:	4605      	mov	r5, r0
    ee7a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ee7c:	6800      	ldr	r0, [r0, #0]
    ee7e:	a902      	add	r1, sp, #8
{
    ee80:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    ee82:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ee84:	f88d 8008 	strb.w	r8, [sp, #8]
    ee88:	f8ad 300a 	strh.w	r3, [sp, #10]
    ee8c:	f00d f8cb 	bl	1c026 <bt_uuid_cmp>
    ee90:	b1a0      	cbz	r0, eebc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ee92:	f642 0301 	movw	r3, #10241	; 0x2801
    ee96:	6828      	ldr	r0, [r5, #0]
    ee98:	a903      	add	r1, sp, #12
    ee9a:	f88d 800c 	strb.w	r8, [sp, #12]
    ee9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    eea2:	f00d f8c0 	bl	1c026 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    eea6:	b148      	cbz	r0, eebc <read_group_cb+0x50>
		if (data->group &&
    eea8:	6923      	ldr	r3, [r4, #16]
    eeaa:	b11b      	cbz	r3, eeb4 <read_group_cb+0x48>
    eeac:	885a      	ldrh	r2, [r3, #2]
    eeae:	42b2      	cmp	r2, r6
    eeb0:	d200      	bcs.n	eeb4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    eeb2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    eeb4:	2001      	movs	r0, #1
}
    eeb6:	b004      	add	sp, #16
    eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    eebc:	6861      	ldr	r1, [r4, #4]
    eebe:	6828      	ldr	r0, [r5, #0]
    eec0:	f00d f8b1 	bl	1c026 <bt_uuid_cmp>
    eec4:	b110      	cbz	r0, eecc <read_group_cb+0x60>
		data->group = NULL;
    eec6:	2300      	movs	r3, #0
    eec8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    eeca:	e7f3      	b.n	eeb4 <read_group_cb+0x48>
	if (data->rsp->len &&
    eecc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    eece:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    eed0:	781a      	ldrb	r2, [r3, #0]
    eed2:	b132      	cbz	r2, eee2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    eed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    eed6:	8a01      	ldrh	r1, [r0, #16]
    eed8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    eeda:	4293      	cmp	r3, r2
    eedc:	da01      	bge.n	eee2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    eede:	2000      	movs	r0, #0
    eee0:	e7e9      	b.n	eeb6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    eee2:	2104      	movs	r1, #4
    eee4:	300c      	adds	r0, #12
    eee6:	f002 f891 	bl	1100c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    eeea:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    eeec:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    eeee:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    eef0:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
    eef2:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    eef4:	4b07      	ldr	r3, [pc, #28]	; (ef14 <read_group_cb+0xa8>)
    eef6:	9401      	str	r4, [sp, #4]
    eef8:	9300      	str	r3, [sp, #0]
    eefa:	4638      	mov	r0, r7
    eefc:	2300      	movs	r3, #0
    eefe:	68a2      	ldr	r2, [r4, #8]
    ef00:	f00d fe04 	bl	1cb0c <att_chan_read>
	if (read < 0) {
    ef04:	2800      	cmp	r0, #0
    ef06:	dbea      	blt.n	eede <read_group_cb+0x72>
	if (!data->group) {
    ef08:	6920      	ldr	r0, [r4, #16]
    ef0a:	3800      	subs	r0, #0
    ef0c:	bf18      	it	ne
    ef0e:	2001      	movne	r0, #1
    ef10:	e7d1      	b.n	eeb6 <read_group_cb+0x4a>
    ef12:	bf00      	nop
    ef14:	0001c9cb 	.word	0x0001c9cb

0000ef18 <read_type_cb>:
{
    ef18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    ef1c:	6817      	ldr	r7, [r2, #0]
{
    ef1e:	4605      	mov	r5, r0
    ef20:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    ef22:	6800      	ldr	r0, [r0, #0]
    ef24:	6851      	ldr	r1, [r2, #4]
{
    ef26:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    ef28:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    ef2a:	f00d f87c 	bl	1c026 <bt_uuid_cmp>
    ef2e:	4681      	mov	r9, r0
    ef30:	2800      	cmp	r0, #0
    ef32:	d13c      	bne.n	efae <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    ef34:	4630      	mov	r0, r6
    ef36:	2295      	movs	r2, #149	; 0x95
    ef38:	4629      	mov	r1, r5
    ef3a:	f00e fa6b 	bl	1d414 <bt_gatt_check_perm>
    ef3e:	4606      	mov	r6, r0
    ef40:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    ef42:	b140      	cbz	r0, ef56 <read_type_cb+0x3e>
		if (data->rsp->len) {
    ef44:	68e3      	ldr	r3, [r4, #12]
    ef46:	781b      	ldrb	r3, [r3, #0]
    ef48:	b10b      	cbz	r3, ef4e <read_type_cb+0x36>
			data->err = 0x00;
    ef4a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
    ef4e:	2000      	movs	r0, #0
}
    ef50:	b003      	add	sp, #12
    ef52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    ef56:	68a0      	ldr	r0, [r4, #8]
    ef58:	f001 ffaa 	bl	10eb0 <net_buf_frag_last>
    ef5c:	2102      	movs	r1, #2
    ef5e:	300c      	adds	r0, #12
    ef60:	f002 f854 	bl	1100c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    ef64:	4b13      	ldr	r3, [pc, #76]	; (efb4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    ef66:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    ef68:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    ef6c:	9300      	str	r3, [sp, #0]
    ef6e:	9401      	str	r4, [sp, #4]
    ef70:	4633      	mov	r3, r6
    ef72:	4629      	mov	r1, r5
    ef74:	4638      	mov	r0, r7
    ef76:	68a2      	ldr	r2, [r4, #8]
    ef78:	f00d fdc8 	bl	1cb0c <att_chan_read>
	if (read < 0) {
    ef7c:	2800      	cmp	r0, #0
    ef7e:	da07      	bge.n	ef90 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
    ef80:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    ef84:	bf32      	itee	cc
    ef86:	200e      	movcc	r0, #14
		return -err;
    ef88:	4240      	negcs	r0, r0
    ef8a:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
    ef8c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    ef8e:	e7de      	b.n	ef4e <read_type_cb+0x36>
	if (!data->item) {
    ef90:	6923      	ldr	r3, [r4, #16]
    ef92:	2b00      	cmp	r3, #0
    ef94:	d0db      	beq.n	ef4e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    ef96:	68a0      	ldr	r0, [r4, #8]
    ef98:	f00d fc88 	bl	1c8ac <net_buf_frags_len>
    ef9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    ef9e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    efa0:	68e3      	ldr	r3, [r4, #12]
    efa2:	781b      	ldrb	r3, [r3, #0]
    efa4:	4298      	cmp	r0, r3
    efa6:	bf94      	ite	ls
    efa8:	2000      	movls	r0, #0
    efaa:	2001      	movhi	r0, #1
    efac:	e7d0      	b.n	ef50 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    efae:	2001      	movs	r0, #1
    efb0:	e7ce      	b.n	ef50 <read_type_cb+0x38>
    efb2:	bf00      	nop
    efb4:	0001c8bd 	.word	0x0001c8bd

0000efb8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    efb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    efba:	2300      	movs	r3, #0
{
    efbc:	4604      	mov	r4, r0
    efbe:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    efc0:	2200      	movs	r2, #0
    efc2:	4669      	mov	r1, sp
    efc4:	482b      	ldr	r0, [pc, #172]	; (f074 <bt_att_accept+0xbc>)
    efc6:	f006 ffdf 	bl	15f88 <k_mem_slab_alloc>
    efca:	4605      	mov	r5, r0
    efcc:	b148      	cbz	r0, efe2 <bt_att_accept+0x2a>
		LOG_ERR("No available ATT context for conn %p", conn);
    efce:	4622      	mov	r2, r4
    efd0:	2145      	movs	r1, #69	; 0x45
    efd2:	4829      	ldr	r0, [pc, #164]	; (f078 <bt_att_accept+0xc0>)
		LOG_WRN("No available ATT channel for conn %p", att->conn);
    efd4:	f00c f9b0 	bl	1b338 <z_log_minimal_printk>
		return -ENOMEM;
    efd8:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    efdc:	4628      	mov	r0, r5
    efde:	b003      	add	sp, #12
    efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
    efe2:	f009 f965 	bl	182b0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
    efe6:	4b25      	ldr	r3, [pc, #148]	; (f07c <bt_att_accept+0xc4>)
	(void)memset(att, 0, sizeof(*att));
    efe8:	9f00      	ldr	r7, [sp, #0]
    efea:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    efec:	6018      	str	r0, [r3, #0]
    efee:	222c      	movs	r2, #44	; 0x2c
    eff0:	1d38      	adds	r0, r7, #4
    eff2:	f010 fa0e 	bl	1f412 <memset>
	att->conn = conn;
    eff6:	603c      	str	r4, [r7, #0]
	sys_slist_init(&att->reqs);
    eff8:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    effa:	2200      	movs	r2, #0
	list->tail = NULL;
    effc:	e9c4 5501 	strd	r5, r5, [r4, #4]
    f000:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    f004:	2300      	movs	r3, #0
    f006:	481e      	ldr	r0, [pc, #120]	; (f080 <bt_att_accept+0xc8>)
    f008:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    f00a:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    f00c:	f006 ffbc 	bl	15f88 <k_mem_slab_alloc>
    f010:	4605      	mov	r5, r0
    f012:	b118      	cbz	r0, f01c <bt_att_accept+0x64>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
    f014:	2157      	movs	r1, #87	; 0x57
    f016:	6822      	ldr	r2, [r4, #0]
    f018:	481a      	ldr	r0, [pc, #104]	; (f084 <bt_att_accept+0xcc>)
    f01a:	e7db      	b.n	efd4 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
    f01c:	9b01      	ldr	r3, [sp, #4]
    f01e:	4601      	mov	r1, r0
    f020:	22f8      	movs	r2, #248	; 0xf8
    f022:	4618      	mov	r0, r3
    f024:	f010 f9f5 	bl	1f412 <memset>
	chan->chan.chan.ops = &ops;
    f028:	4a17      	ldr	r2, [pc, #92]	; (f088 <bt_att_accept+0xd0>)
    f02a:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
    f02c:	30a0      	adds	r0, #160	; 0xa0
    f02e:	f00f ffe9 	bl	1f004 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f032:	9b01      	ldr	r3, [sp, #4]
    f034:	3398      	adds	r3, #152	; 0x98
    f036:	e8d3 2fef 	ldaex	r2, [r3]
    f03a:	e8c3 5fe1 	stlex	r1, r5, [r3]
    f03e:	2900      	cmp	r1, #0
    f040:	d1f9      	bne.n	f036 <bt_att_accept+0x7e>
	chan->att = att;
    f042:	9b01      	ldr	r3, [sp, #4]
    f044:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
    f046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
    f048:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
    f04a:	b91b      	cbnz	r3, f054 <bt_att_accept+0x9c>
    f04c:	f104 000c 	add.w	r0, r4, #12
    f050:	f00f ffd8 	bl	1f004 <z_impl_k_queue_init>
	return list->head;
    f054:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    f056:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	parent->next = child;
    f05a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
    f05e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
    f060:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
    f062:	b902      	cbnz	r2, f066 <bt_att_accept+0xae>
	list->tail = node;
    f064:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
    f066:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
    f068:	2b00      	cmp	r3, #0
    f06a:	d0b5      	beq.n	efd8 <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
    f06c:	3304      	adds	r3, #4
    f06e:	6033      	str	r3, [r6, #0]
	return 0;
    f070:	e7b4      	b.n	efdc <bt_att_accept+0x24>
    f072:	bf00      	nop
    f074:	20000758 	.word	0x20000758
    f078:	00023faf 	.word	0x00023faf
    f07c:	20006ae4 	.word	0x20006ae4
    f080:	20000778 	.word	0x20000778
    f084:	00023fd9 	.word	0x00023fd9
    f088:	20000388 	.word	0x20000388

0000f08c <bt_att_chan_create_pdu>:
{
    f08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    f08e:	1c53      	adds	r3, r2, #1
    f090:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
{
    f092:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    f094:	4293      	cmp	r3, r2
    f096:	d906      	bls.n	f0a6 <bt_att_chan_create_pdu+0x1a>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
    f098:	2157      	movs	r1, #87	; 0x57
    f09a:	481c      	ldr	r0, [pc, #112]	; (f10c <bt_att_chan_create_pdu+0x80>)
    f09c:	f00c f94c 	bl	1b338 <z_log_minimal_printk>
		return NULL;
    f0a0:	2400      	movs	r4, #0
}
    f0a2:	4620      	mov	r0, r4
    f0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
    f0a6:	4608      	mov	r0, r1
    f0a8:	f7ff fcfa 	bl	eaa0 <att_op_get_type>
    f0ac:	2802      	cmp	r0, #2
    f0ae:	d013      	beq.n	f0d8 <bt_att_chan_create_pdu+0x4c>
    f0b0:	2804      	cmp	r0, #4
    f0b2:	d011      	beq.n	f0d8 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
    f0b4:	f04f 36ff 	mov.w	r6, #4294967295
    f0b8:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    f0bc:	2100      	movs	r1, #0
    f0be:	4632      	mov	r2, r6
    f0c0:	463b      	mov	r3, r7
    f0c2:	4608      	mov	r0, r1
    f0c4:	f00d fba4 	bl	1c810 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    f0c8:	4604      	mov	r4, r0
    f0ca:	b948      	cbnz	r0, f0e0 <bt_att_chan_create_pdu+0x54>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
    f0cc:	462a      	mov	r2, r5
    f0ce:	2145      	movs	r1, #69	; 0x45
    f0d0:	480f      	ldr	r0, [pc, #60]	; (f110 <bt_att_chan_create_pdu+0x84>)
    f0d2:	f00c f931 	bl	1b338 <z_log_minimal_printk>
		return NULL;
    f0d6:	e7e3      	b.n	f0a0 <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
    f0d8:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
    f0dc:	2700      	movs	r7, #0
    f0de:	e7ed      	b.n	f0bc <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
    f0e0:	480c      	ldr	r0, [pc, #48]	; (f114 <bt_att_chan_create_pdu+0x88>)
    f0e2:	4632      	mov	r2, r6
    f0e4:	463b      	mov	r3, r7
    f0e6:	f007 fc27 	bl	16938 <z_impl_k_queue_get>
	if (!data) {
    f0ea:	b938      	cbnz	r0, f0fc <bt_att_chan_create_pdu+0x70>
		LOG_WRN("Unable to allocate ATT TX meta");
    f0ec:	2157      	movs	r1, #87	; 0x57
    f0ee:	480a      	ldr	r0, [pc, #40]	; (f118 <bt_att_chan_create_pdu+0x8c>)
    f0f0:	f00c f922 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
    f0f4:	4620      	mov	r0, r4
    f0f6:	f001 fe83 	bl	10e00 <net_buf_unref>
		return NULL;
    f0fa:	e7d1      	b.n	f0a0 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
    f0fc:	61a0      	str	r0, [r4, #24]
    f0fe:	2101      	movs	r1, #1
    f100:	f104 000c 	add.w	r0, r4, #12
    f104:	f001 ff82 	bl	1100c <net_buf_simple_add>
	hdr->code = op;
    f108:	7005      	strb	r5, [r0, #0]
	return buf;
    f10a:	e7ca      	b.n	f0a2 <bt_att_chan_create_pdu+0x16>
    f10c:	00024003 	.word	0x00024003
    f110:	00023d47 	.word	0x00023d47
    f114:	200008d8 	.word	0x200008d8
    f118:	0002402d 	.word	0x0002402d

0000f11c <bt_att_recv>:
{
    f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
    f120:	8a0b      	ldrh	r3, [r1, #16]
{
    f122:	4607      	mov	r7, r0
    f124:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f126:	b933      	cbnz	r3, f136 <bt_att_recv+0x1a>
		LOG_ERR("Too small ATT PDU received");
    f128:	2145      	movs	r1, #69	; 0x45
    f12a:	4835      	ldr	r0, [pc, #212]	; (f200 <bt_att_recv+0xe4>)
			LOG_WRN("Ignoring unexpected request");
    f12c:	f00c f904 	bl	1b338 <z_log_minimal_printk>
}
    f130:	2000      	movs	r0, #0
    f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f136:	2101      	movs	r1, #1
    f138:	f105 000c 	add.w	r0, r5, #12
    f13c:	f001 ff4c 	bl	10fd8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    f140:	f857 3c04 	ldr.w	r3, [r7, #-4]
    f144:	4604      	mov	r4, r0
    f146:	2b00      	cmp	r3, #0
    f148:	d0f2      	beq.n	f130 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    f14a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    f14c:	7802      	ldrb	r2, [r0, #0]
    f14e:	4e2d      	ldr	r6, [pc, #180]	; (f204 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    f150:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
    f154:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
    f158:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    f15c:	4290      	cmp	r0, r2
    f15e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
    f162:	d10d      	bne.n	f180 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
    f164:	f891 9002 	ldrb.w	r9, [r1, #2]
    f168:	f1b9 0f01 	cmp.w	r9, #1
    f16c:	d11f      	bne.n	f1ae <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    f16e:	2100      	movs	r1, #0
    f170:	f107 0094 	add.w	r0, r7, #148	; 0x94
    f174:	f00d fd70 	bl	1cc58 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    f178:	b328      	cbz	r0, f1c6 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected request");
    f17a:	2157      	movs	r1, #87	; 0x57
    f17c:	4822      	ldr	r0, [pc, #136]	; (f208 <bt_att_recv+0xec>)
    f17e:	e7d5      	b.n	f12c <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    f180:	3301      	adds	r3, #1
    f182:	2b0e      	cmp	r3, #14
    f184:	d1e6      	bne.n	f154 <bt_att_recv+0x38>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
    f186:	2157      	movs	r1, #87	; 0x57
    f188:	4820      	ldr	r0, [pc, #128]	; (f20c <bt_att_recv+0xf0>)
    f18a:	f00c f8d5 	bl	1b338 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    f18e:	7821      	ldrb	r1, [r4, #0]
    f190:	4608      	mov	r0, r1
    f192:	f7ff fc85 	bl	eaa0 <att_op_get_type>
    f196:	2800      	cmp	r0, #0
    f198:	d0ca      	beq.n	f130 <bt_att_recv+0x14>
    f19a:	2805      	cmp	r0, #5
    f19c:	d0c8      	beq.n	f130 <bt_att_recv+0x14>
	if (!req) {
    f19e:	2900      	cmp	r1, #0
    f1a0:	d0c6      	beq.n	f130 <bt_att_recv+0x14>
    f1a2:	2306      	movs	r3, #6
    f1a4:	2200      	movs	r2, #0
    f1a6:	4640      	mov	r0, r8
    f1a8:	f00d feba 	bl	1cf20 <send_err_rsp.part.0>
    f1ac:	e7c0      	b.n	f130 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
    f1ae:	f1b9 0f05 	cmp.w	r9, #5
    f1b2:	d108      	bne.n	f1c6 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
    f1b4:	2101      	movs	r1, #1
    f1b6:	f107 0094 	add.w	r0, r7, #148	; 0x94
    f1ba:	f00d fd4d 	bl	1cc58 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
    f1be:	b110      	cbz	r0, f1c6 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected indication");
    f1c0:	2157      	movs	r1, #87	; 0x57
    f1c2:	4813      	ldr	r0, [pc, #76]	; (f210 <bt_att_recv+0xf4>)
    f1c4:	e7b2      	b.n	f12c <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
    f1c6:	4456      	add	r6, sl
    f1c8:	8a2a      	ldrh	r2, [r5, #16]
    f1ca:	7873      	ldrb	r3, [r6, #1]
    f1cc:	4293      	cmp	r3, r2
    f1ce:	d909      	bls.n	f1e4 <bt_att_recv+0xc8>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f1d0:	2145      	movs	r1, #69	; 0x45
    f1d2:	7823      	ldrb	r3, [r4, #0]
    f1d4:	480f      	ldr	r0, [pc, #60]	; (f214 <bt_att_recv+0xf8>)
    f1d6:	f00c f8af 	bl	1b338 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
    f1da:	f1b9 0f01 	cmp.w	r9, #1
    f1de:	d1a7      	bne.n	f130 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
    f1e0:	2304      	movs	r3, #4
    f1e2:	e009      	b.n	f1f8 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
    f1e4:	6873      	ldr	r3, [r6, #4]
    f1e6:	4629      	mov	r1, r5
    f1e8:	4640      	mov	r0, r8
    f1ea:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    f1ec:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
    f1f0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    f1f2:	d19d      	bne.n	f130 <bt_att_recv+0x14>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d09b      	beq.n	f130 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
    f1f8:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
    f1fa:	2900      	cmp	r1, #0
    f1fc:	d098      	beq.n	f130 <bt_att_recv+0x14>
    f1fe:	e7d1      	b.n	f1a4 <bt_att_recv+0x88>
    f200:	00024051 	.word	0x00024051
    f204:	00020128 	.word	0x00020128
    f208:	00024090 	.word	0x00024090
    f20c:	00024071 	.word	0x00024071
    f210:	000240b1 	.word	0x000240b1
    f214:	000240d5 	.word	0x000240d5

0000f218 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    f218:	b5f0      	push	{r4, r5, r6, r7, lr}
    f21a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    f21c:	6803      	ldr	r3, [r0, #0]
    f21e:	460d      	mov	r5, r1
    f220:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    f222:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    f224:	bf18      	it	ne
    f226:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    f228:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    f22a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    f22c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    f22e:	f00e f91a 	bl	1d466 <bt_gatt_change_aware>
    f232:	b948      	cbnz	r0, f248 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    f234:	2105      	movs	r1, #5
    f236:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f23a:	f00d fd0d 	bl	1cc58 <atomic_test_and_set_bit>
    f23e:	2800      	cmp	r0, #0
    f240:	d048      	beq.n	f2d4 <att_write_rsp.constprop.0+0xbc>
			return 0;
    f242:	2000      	movs	r0, #0
}
    f244:	b007      	add	sp, #28
    f246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
    f248:	2e00      	cmp	r6, #0
    f24a:	d045      	beq.n	f2d8 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
    f24c:	2218      	movs	r2, #24
    f24e:	2100      	movs	r1, #0
    f250:	4668      	mov	r0, sp
    f252:	f010 f8de 	bl	1f412 <memset>
	if (rsp) {
    f256:	bb67      	cbnz	r7, f2b2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
    f258:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    f25a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
    f25c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    f25e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
    f260:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    f262:	2300      	movs	r3, #0
    f264:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    f268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    f26a:	4a1c      	ldr	r2, [pc, #112]	; (f2dc <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
    f26c:	9303      	str	r3, [sp, #12]
	data.len = len;
    f26e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
    f272:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
    f276:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    f27a:	2301      	movs	r3, #1
    f27c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    f280:	466b      	mov	r3, sp
    f282:	f00d fb64 	bl	1c94e <bt_gatt_foreach_attr>
	if (data.err) {
    f286:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f28a:	b1e3      	cbz	r3, f2c6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
    f28c:	2f00      	cmp	r7, #0
    f28e:	d0d8      	beq.n	f242 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f290:	9b01      	ldr	r3, [sp, #4]
    f292:	6998      	ldr	r0, [r3, #24]
    f294:	f7ff fd1a 	bl	eccc <tx_meta_data_free>
			net_buf_unref(data.buf);
    f298:	9801      	ldr	r0, [sp, #4]
    f29a:	f001 fdb1 	bl	10e00 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
    f29e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
    f2a2:	2d00      	cmp	r5, #0
    f2a4:	d0cd      	beq.n	f242 <att_write_rsp.constprop.0+0x2a>
    f2a6:	4632      	mov	r2, r6
    f2a8:	4629      	mov	r1, r5
    f2aa:	4620      	mov	r0, r4
    f2ac:	f00d fe38 	bl	1cf20 <send_err_rsp.part.0>
    f2b0:	e7c7      	b.n	f242 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    f2b2:	2200      	movs	r2, #0
    f2b4:	4639      	mov	r1, r7
    f2b6:	4620      	mov	r0, r4
    f2b8:	f7ff fee8 	bl	f08c <bt_att_chan_create_pdu>
    f2bc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    f2be:	2800      	cmp	r0, #0
    f2c0:	d1ca      	bne.n	f258 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
    f2c2:	200e      	movs	r0, #14
    f2c4:	e7be      	b.n	f244 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
    f2c6:	9901      	ldr	r1, [sp, #4]
    f2c8:	2900      	cmp	r1, #0
    f2ca:	d0ba      	beq.n	f242 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
    f2cc:	4620      	mov	r0, r4
    f2ce:	f00d fba6 	bl	1ca1e <bt_att_chan_send_rsp>
    f2d2:	e7b6      	b.n	f242 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    f2d4:	2012      	movs	r0, #18
    f2d6:	e7b5      	b.n	f244 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    f2d8:	2001      	movs	r0, #1
    f2da:	e7b3      	b.n	f244 <att_write_rsp.constprop.0+0x2c>
    f2dc:	0001c8ed 	.word	0x0001c8ed

0000f2e0 <bt_att_create_pdu>:
{
    f2e0:	b570      	push	{r4, r5, r6, lr}
    f2e2:	460e      	mov	r6, r1
    f2e4:	4615      	mov	r5, r2
	att = att_get(conn);
    f2e6:	f7ff fc15 	bl	eb14 <att_get>
	if (!att) {
    f2ea:	b190      	cbz	r0, f312 <bt_att_create_pdu+0x32>
	return list->head;
    f2ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    f2ee:	4618      	mov	r0, r3
    f2f0:	b11b      	cbz	r3, f2fa <bt_att_create_pdu+0x1a>
	return node->next;
    f2f2:	f850 39f0 	ldr.w	r3, [r0], #-240
    f2f6:	b103      	cbz	r3, f2fa <bt_att_create_pdu+0x1a>
    f2f8:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    f2fa:	1c6c      	adds	r4, r5, #1
    f2fc:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    f2fe:	b118      	cbz	r0, f308 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    f300:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    f302:	42a1      	cmp	r1, r4
    f304:	d20f      	bcs.n	f326 <bt_att_create_pdu+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    f306:	b933      	cbnz	r3, f316 <bt_att_create_pdu+0x36>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
    f308:	4622      	mov	r2, r4
    f30a:	2157      	movs	r1, #87	; 0x57
    f30c:	480a      	ldr	r0, [pc, #40]	; (f338 <bt_att_create_pdu+0x58>)
    f30e:	f00c f813 	bl	1b338 <z_log_minimal_printk>
}
    f312:	2000      	movs	r0, #0
    f314:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    f316:	4618      	mov	r0, r3
    f318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    f31c:	b14b      	cbz	r3, f332 <bt_att_create_pdu+0x52>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    f31e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    f320:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    f322:	4291      	cmp	r1, r2
    f324:	d3f7      	bcc.n	f316 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
    f326:	462a      	mov	r2, r5
    f328:	4631      	mov	r1, r6
}
    f32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    f32e:	f7ff bead 	b.w	f08c <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    f332:	4614      	mov	r4, r2
    f334:	e7e4      	b.n	f300 <bt_att_create_pdu+0x20>
    f336:	bf00      	nop
    f338:	000240f9 	.word	0x000240f9

0000f33c <att_read_group_req>:
{
    f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    f340:	8a0e      	ldrh	r6, [r1, #16]
{
    f342:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    f344:	3e04      	subs	r6, #4
    f346:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
    f348:	2e02      	cmp	r6, #2
{
    f34a:	4608      	mov	r0, r1
    f34c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    f34e:	d001      	beq.n	f354 <att_read_group_req+0x18>
    f350:	2e10      	cmp	r6, #16
    f352:	d16a      	bne.n	f42a <att_read_group_req+0xee>
    f354:	2104      	movs	r1, #4
    f356:	300c      	adds	r0, #12
    f358:	f001 fe3e 	bl	10fd8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    f35c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    f360:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    f362:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    f364:	1d01      	adds	r1, r0, #4
    f366:	4632      	mov	r2, r6
    f368:	4640      	mov	r0, r8
    f36a:	f00c fe8a 	bl	1c082 <bt_uuid_create>
    f36e:	2800      	cmp	r0, #0
    f370:	d05d      	beq.n	f42e <att_read_group_req+0xf2>
	if (!start || !end) {
    f372:	2d00      	cmp	r5, #0
    f374:	d03a      	beq.n	f3ec <att_read_group_req+0xb0>
    f376:	2600      	movs	r6, #0
    f378:	2f00      	cmp	r7, #0
    f37a:	d036      	beq.n	f3ea <att_read_group_req+0xae>
	if (start > end) {
    f37c:	42bd      	cmp	r5, r7
    f37e:	d835      	bhi.n	f3ec <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    f380:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    f384:	4640      	mov	r0, r8
    f386:	a901      	add	r1, sp, #4
    f388:	f88d 6004 	strb.w	r6, [sp, #4]
    f38c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f390:	f00c fe49 	bl	1c026 <bt_uuid_cmp>
    f394:	bb70      	cbnz	r0, f3f4 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
    f396:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    f398:	2214      	movs	r2, #20
    f39a:	2100      	movs	r1, #0
    f39c:	a807      	add	r0, sp, #28
    f39e:	f010 f838 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    f3a2:	2201      	movs	r2, #1
    f3a4:	2111      	movs	r1, #17
    f3a6:	4630      	mov	r0, r6
    f3a8:	f7ff ff9a 	bl	f2e0 <bt_att_create_pdu>
    f3ac:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    f3ae:	2800      	cmp	r0, #0
    f3b0:	d03d      	beq.n	f42e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
    f3b2:	2101      	movs	r1, #1
    f3b4:	300c      	adds	r0, #12
	data.uuid = uuid;
    f3b6:	e9cd 4807 	strd	r4, r8, [sp, #28]
    f3ba:	f001 fe27 	bl	1100c <net_buf_simple_add>
	data.rsp->len = 0U;
    f3be:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    f3c0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    f3c2:	4639      	mov	r1, r7
	data.rsp->len = 0U;
    f3c4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    f3c6:	4a1b      	ldr	r2, [pc, #108]	; (f434 <att_read_group_req+0xf8>)
	data.group = NULL;
    f3c8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    f3ca:	4628      	mov	r0, r5
    f3cc:	ab07      	add	r3, sp, #28
    f3ce:	f00d fabe 	bl	1c94e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    f3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	bb1b      	cbnz	r3, f420 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3da:	6998      	ldr	r0, [r3, #24]
    f3dc:	f7ff fc76 	bl	eccc <tx_meta_data_free>
		net_buf_unref(data.buf);
    f3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f3e2:	f001 fd0d 	bl	10e00 <net_buf_unref>
	if (!req) {
    f3e6:	230a      	movs	r3, #10
    f3e8:	e001      	b.n	f3ee <att_read_group_req+0xb2>
			*err = 0U;
    f3ea:	463d      	mov	r5, r7
	if (!req) {
    f3ec:	2301      	movs	r3, #1
    f3ee:	462a      	mov	r2, r5
    f3f0:	2110      	movs	r1, #16
    f3f2:	e00e      	b.n	f412 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    f3f4:	f642 0301 	movw	r3, #10241	; 0x2801
    f3f8:	4640      	mov	r0, r8
    f3fa:	a907      	add	r1, sp, #28
    f3fc:	f88d 601c 	strb.w	r6, [sp, #28]
    f400:	f8ad 301e 	strh.w	r3, [sp, #30]
    f404:	f00c fe0f 	bl	1c026 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    f408:	2800      	cmp	r0, #0
    f40a:	d0c4      	beq.n	f396 <att_read_group_req+0x5a>
	if (!req) {
    f40c:	2310      	movs	r3, #16
    f40e:	462a      	mov	r2, r5
    f410:	4619      	mov	r1, r3
    f412:	4620      	mov	r0, r4
    f414:	f00d fd84 	bl	1cf20 <send_err_rsp.part.0>
		return 0;
    f418:	2000      	movs	r0, #0
}
    f41a:	b00c      	add	sp, #48	; 0x30
    f41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
    f420:	4620      	mov	r0, r4
    f422:	9909      	ldr	r1, [sp, #36]	; 0x24
    f424:	f00d fafb 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f428:	e7f6      	b.n	f418 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
    f42a:	2004      	movs	r0, #4
    f42c:	e7f5      	b.n	f41a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
    f42e:	200e      	movs	r0, #14
    f430:	e7f3      	b.n	f41a <att_read_group_req+0xde>
    f432:	bf00      	nop
    f434:	0000ee6d 	.word	0x0000ee6d

0000f438 <att_read_mult_vl_req>:
{
    f438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    f43c:	6846      	ldr	r6, [r0, #4]
{
    f43e:	4604      	mov	r4, r0
    f440:	460d      	mov	r5, r1
    f442:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
    f444:	2101      	movs	r1, #1
    f446:	4630      	mov	r0, r6
    f448:	f00e f80d 	bl	1d466 <bt_gatt_change_aware>
    f44c:	b950      	cbnz	r0, f464 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    f44e:	2105      	movs	r1, #5
    f450:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f454:	f00d fc00 	bl	1cc58 <atomic_test_and_set_bit>
    f458:	2800      	cmp	r0, #0
    f45a:	d13b      	bne.n	f4d4 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    f45c:	2012      	movs	r0, #18
}
    f45e:	b005      	add	sp, #20
    f460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    f464:	2210      	movs	r2, #16
    f466:	2100      	movs	r1, #0
    f468:	4668      	mov	r0, sp
    f46a:	f00f ffd2 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    f46e:	2200      	movs	r2, #0
    f470:	2121      	movs	r1, #33	; 0x21
    f472:	4630      	mov	r0, r6
    f474:	f7ff ff34 	bl	f2e0 <bt_att_create_pdu>
    f478:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    f47a:	b368      	cbz	r0, f4d8 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    f47c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    f480:	f8df 9058 	ldr.w	r9, [pc, #88]	; f4dc <att_read_mult_vl_req+0xa4>
	data.chan = chan;
    f484:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    f486:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
    f48a:	8a2b      	ldrh	r3, [r5, #16]
    f48c:	2b01      	cmp	r3, #1
    f48e:	d804      	bhi.n	f49a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    f490:	4620      	mov	r0, r4
    f492:	9902      	ldr	r1, [sp, #8]
    f494:	f00d fac3 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f498:	e01c      	b.n	f4d4 <att_read_mult_vl_req+0x9c>
    f49a:	4638      	mov	r0, r7
    f49c:	f00e f861 	bl	1d562 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    f4a0:	466b      	mov	r3, sp
    f4a2:	464a      	mov	r2, r9
    f4a4:	4601      	mov	r1, r0
    f4a6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    f4a8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    f4ac:	f00d fa4f 	bl	1c94e <bt_gatt_foreach_attr>
		if (data.err) {
    f4b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	d0e8      	beq.n	f48a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f4b8:	9b02      	ldr	r3, [sp, #8]
    f4ba:	6998      	ldr	r0, [r3, #24]
    f4bc:	f7ff fc06 	bl	eccc <tx_meta_data_free>
			net_buf_unref(data.buf);
    f4c0:	9802      	ldr	r0, [sp, #8]
    f4c2:	f001 fc9d 	bl	10e00 <net_buf_unref>
	if (!req) {
    f4c6:	4632      	mov	r2, r6
    f4c8:	2120      	movs	r1, #32
    f4ca:	4620      	mov	r0, r4
    f4cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f4d0:	f00d fd26 	bl	1cf20 <send_err_rsp.part.0>
			return 0;
    f4d4:	2000      	movs	r0, #0
    f4d6:	e7c2      	b.n	f45e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    f4d8:	200e      	movs	r0, #14
    f4da:	e7c0      	b.n	f45e <att_read_mult_vl_req+0x26>
    f4dc:	0001ccc1 	.word	0x0001ccc1

0000f4e0 <att_read_mult_req>:
{
    f4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    f4e4:	6846      	ldr	r6, [r0, #4]
{
    f4e6:	4604      	mov	r4, r0
    f4e8:	460d      	mov	r5, r1
    f4ea:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
    f4ec:	2101      	movs	r1, #1
    f4ee:	4630      	mov	r0, r6
    f4f0:	f00d ffb9 	bl	1d466 <bt_gatt_change_aware>
    f4f4:	b950      	cbnz	r0, f50c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    f4f6:	2105      	movs	r1, #5
    f4f8:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f4fc:	f00d fbac 	bl	1cc58 <atomic_test_and_set_bit>
    f500:	2800      	cmp	r0, #0
    f502:	d13b      	bne.n	f57c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    f504:	2012      	movs	r0, #18
}
    f506:	b005      	add	sp, #20
    f508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    f50c:	2210      	movs	r2, #16
    f50e:	2100      	movs	r1, #0
    f510:	4668      	mov	r0, sp
    f512:	f00f ff7e 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    f516:	2200      	movs	r2, #0
    f518:	210f      	movs	r1, #15
    f51a:	4630      	mov	r0, r6
    f51c:	f7ff fee0 	bl	f2e0 <bt_att_create_pdu>
    f520:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    f522:	b368      	cbz	r0, f580 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    f524:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f528:	f8df 9058 	ldr.w	r9, [pc, #88]	; f584 <att_read_mult_req+0xa4>
	data.chan = chan;
    f52c:	9400      	str	r4, [sp, #0]
    f52e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
    f532:	8a2b      	ldrh	r3, [r5, #16]
    f534:	2b01      	cmp	r3, #1
    f536:	d804      	bhi.n	f542 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    f538:	4620      	mov	r0, r4
    f53a:	9902      	ldr	r1, [sp, #8]
    f53c:	f00d fa6f 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f540:	e01c      	b.n	f57c <att_read_mult_req+0x9c>
    f542:	4638      	mov	r0, r7
    f544:	f00e f80d 	bl	1d562 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f548:	466b      	mov	r3, sp
    f54a:	464a      	mov	r2, r9
    f54c:	4601      	mov	r1, r0
    f54e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    f550:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f554:	f00d f9fb 	bl	1c94e <bt_gatt_foreach_attr>
		if (data.err) {
    f558:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f55c:	2b00      	cmp	r3, #0
    f55e:	d0e8      	beq.n	f532 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f560:	9b02      	ldr	r3, [sp, #8]
    f562:	6998      	ldr	r0, [r3, #24]
    f564:	f7ff fbb2 	bl	eccc <tx_meta_data_free>
			net_buf_unref(data.buf);
    f568:	9802      	ldr	r0, [sp, #8]
    f56a:	f001 fc49 	bl	10e00 <net_buf_unref>
	if (!req) {
    f56e:	4632      	mov	r2, r6
    f570:	210e      	movs	r1, #14
    f572:	4620      	mov	r0, r4
    f574:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f578:	f00d fcd2 	bl	1cf20 <send_err_rsp.part.0>
			return 0;
    f57c:	2000      	movs	r0, #0
    f57e:	e7c2      	b.n	f506 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    f580:	200e      	movs	r0, #14
    f582:	e7c0      	b.n	f506 <att_read_mult_req+0x26>
    f584:	0001cc7b 	.word	0x0001cc7b

0000f588 <att_read_rsp>:
{
    f588:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    f58c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    f590:	4604      	mov	r4, r0
    f592:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
    f594:	4640      	mov	r0, r8
    f596:	2101      	movs	r1, #1
{
    f598:	4617      	mov	r7, r2
    f59a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    f59c:	f00d ff63 	bl	1d466 <bt_gatt_change_aware>
    f5a0:	b948      	cbnz	r0, f5b6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    f5a2:	2105      	movs	r1, #5
    f5a4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    f5a8:	f00d fb56 	bl	1cc58 <atomic_test_and_set_bit>
    f5ac:	bb78      	cbnz	r0, f60e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    f5ae:	2012      	movs	r0, #18
}
    f5b0:	b004      	add	sp, #16
    f5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    f5b6:	b38d      	cbz	r5, f61c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
    f5b8:	2210      	movs	r2, #16
    f5ba:	2100      	movs	r1, #0
    f5bc:	4668      	mov	r0, sp
    f5be:	f00f ff28 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    f5c2:	2200      	movs	r2, #0
    f5c4:	4639      	mov	r1, r7
    f5c6:	4640      	mov	r0, r8
    f5c8:	f7ff fe8a 	bl	f2e0 <bt_att_create_pdu>
    f5cc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    f5ce:	b338      	cbz	r0, f620 <att_read_rsp+0x98>
	data.offset = offset;
    f5d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f5d4:	4629      	mov	r1, r5
	data.offset = offset;
    f5d6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    f5da:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f5dc:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    f5de:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f5e2:	4a10      	ldr	r2, [pc, #64]	; (f624 <att_read_rsp+0x9c>)
    f5e4:	466b      	mov	r3, sp
	data.chan = chan;
    f5e6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    f5e8:	f00d f9b1 	bl	1c94e <bt_gatt_foreach_attr>
	if (data.err) {
    f5ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f5f0:	b17b      	cbz	r3, f612 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f5f2:	9b02      	ldr	r3, [sp, #8]
    f5f4:	6998      	ldr	r0, [r3, #24]
    f5f6:	f7ff fb69 	bl	eccc <tx_meta_data_free>
		net_buf_unref(data.buf);
    f5fa:	9802      	ldr	r0, [sp, #8]
    f5fc:	f001 fc00 	bl	10e00 <net_buf_unref>
	if (!req) {
    f600:	462a      	mov	r2, r5
    f602:	4631      	mov	r1, r6
    f604:	4620      	mov	r0, r4
    f606:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f60a:	f00d fc89 	bl	1cf20 <send_err_rsp.part.0>
			return 0;
    f60e:	2000      	movs	r0, #0
    f610:	e7ce      	b.n	f5b0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
    f612:	4620      	mov	r0, r4
    f614:	9902      	ldr	r1, [sp, #8]
    f616:	f00d fa02 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f61a:	e7f8      	b.n	f60e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
    f61c:	2001      	movs	r0, #1
    f61e:	e7c7      	b.n	f5b0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
    f620:	200e      	movs	r0, #14
    f622:	e7c5      	b.n	f5b0 <att_read_rsp+0x28>
    f624:	0001cc7b 	.word	0x0001cc7b

0000f628 <att_read_type_req>:
{
    f628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    f62c:	8a0d      	ldrh	r5, [r1, #16]
{
    f62e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
    f630:	3d04      	subs	r5, #4
    f632:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
    f634:	2d02      	cmp	r5, #2
{
    f636:	4608      	mov	r0, r1
    f638:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
    f63a:	d001      	beq.n	f640 <att_read_type_req+0x18>
    f63c:	2d10      	cmp	r5, #16
    f63e:	d150      	bne.n	f6e2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    f640:	2104      	movs	r1, #4
    f642:	300c      	adds	r0, #12
    f644:	f001 fcc8 	bl	10fd8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    f648:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    f64c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    f64e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    f650:	1d01      	adds	r1, r0, #4
    f652:	462a      	mov	r2, r5
    f654:	4640      	mov	r0, r8
    f656:	f00c fd14 	bl	1c082 <bt_uuid_create>
    f65a:	b188      	cbz	r0, f680 <att_read_type_req+0x58>
	if (!start || !end) {
    f65c:	b19e      	cbz	r6, f686 <att_read_type_req+0x5e>
    f65e:	b18f      	cbz	r7, f684 <att_read_type_req+0x5c>
	if (start > end) {
    f660:	42b7      	cmp	r7, r6
    f662:	d310      	bcc.n	f686 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    f664:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    f666:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    f668:	2100      	movs	r1, #0
    f66a:	eb0d 0002 	add.w	r0, sp, r2
    f66e:	f00f fed0 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    f672:	2201      	movs	r2, #1
    f674:	2109      	movs	r1, #9
    f676:	4628      	mov	r0, r5
    f678:	f7ff fe32 	bl	f2e0 <bt_att_create_pdu>
    f67c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    f67e:	b960      	cbnz	r0, f69a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
    f680:	200e      	movs	r0, #14
    f682:	e007      	b.n	f694 <att_read_type_req+0x6c>
			*err = 0U;
    f684:	463e      	mov	r6, r7
	if (!req) {
    f686:	2301      	movs	r3, #1
    f688:	4632      	mov	r2, r6
    f68a:	2108      	movs	r1, #8
    f68c:	4620      	mov	r0, r4
    f68e:	f00d fc47 	bl	1cf20 <send_err_rsp.part.0>
		return 0;
    f692:	2000      	movs	r0, #0
}
    f694:	b00c      	add	sp, #48	; 0x30
    f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f69a:	2101      	movs	r1, #1
    f69c:	300c      	adds	r0, #12
	data.uuid = uuid;
    f69e:	e9cd 4806 	strd	r4, r8, [sp, #24]
    f6a2:	f001 fcb3 	bl	1100c <net_buf_simple_add>
	data.rsp->len = 0U;
    f6a6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    f6a8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
    f6aa:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    f6ac:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    f6ae:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    f6b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    f6b4:	4630      	mov	r0, r6
    f6b6:	ab06      	add	r3, sp, #24
    f6b8:	4a0b      	ldr	r2, [pc, #44]	; (f6e8 <att_read_type_req+0xc0>)
    f6ba:	f00d f948 	bl	1c94e <bt_gatt_foreach_attr>
	if (data.err) {
    f6be:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    f6c2:	b14b      	cbz	r3, f6d8 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f6c4:	9b08      	ldr	r3, [sp, #32]
    f6c6:	6998      	ldr	r0, [r3, #24]
    f6c8:	f7ff fb00 	bl	eccc <tx_meta_data_free>
		net_buf_unref(data.buf);
    f6cc:	9808      	ldr	r0, [sp, #32]
    f6ce:	f001 fb97 	bl	10e00 <net_buf_unref>
	if (!req) {
    f6d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    f6d6:	e7d7      	b.n	f688 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    f6d8:	4620      	mov	r0, r4
    f6da:	9908      	ldr	r1, [sp, #32]
    f6dc:	f00d f99f 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f6e0:	e7d7      	b.n	f692 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
    f6e2:	2004      	movs	r0, #4
    f6e4:	e7d6      	b.n	f694 <att_read_type_req+0x6c>
    f6e6:	bf00      	nop
    f6e8:	0000ef19 	.word	0x0000ef19

0000f6ec <att_find_type_req>:
{
    f6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f6f0:	460f      	mov	r7, r1
    f6f2:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    f6f4:	2106      	movs	r1, #6
    f6f6:	b086      	sub	sp, #24
    f6f8:	f107 000c 	add.w	r0, r7, #12
    f6fc:	f001 fc6c 	bl	10fd8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    f700:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    f702:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
    f706:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
    f708:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
    f70c:	b1c5      	cbz	r5, f740 <att_find_type_req+0x54>
    f70e:	2300      	movs	r3, #0
    f710:	f1b8 0f00 	cmp.w	r8, #0
    f714:	d013      	beq.n	f73e <att_find_type_req+0x52>
	if (start > end) {
    f716:	4545      	cmp	r5, r8
    f718:	d812      	bhi.n	f740 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    f71a:	f88d 3000 	strb.w	r3, [sp]
    f71e:	f88d 3004 	strb.w	r3, [sp, #4]
    f722:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    f726:	4668      	mov	r0, sp
    f728:	a901      	add	r1, sp, #4
    f72a:	f8ad 2002 	strh.w	r2, [sp, #2]
    f72e:	f8ad 3006 	strh.w	r3, [sp, #6]
    f732:	f00c fc78 	bl	1c026 <bt_uuid_cmp>
    f736:	4606      	mov	r6, r0
    f738:	b160      	cbz	r0, f754 <att_find_type_req+0x68>
	if (!req) {
    f73a:	230a      	movs	r3, #10
    f73c:	e001      	b.n	f742 <att_find_type_req+0x56>
			*err = 0U;
    f73e:	4645      	mov	r5, r8
	if (!req) {
    f740:	2301      	movs	r3, #1
    f742:	462a      	mov	r2, r5
    f744:	2106      	movs	r1, #6
    f746:	4620      	mov	r0, r4
    f748:	f00d fbea 	bl	1cf20 <send_err_rsp.part.0>
		return 0;
    f74c:	2000      	movs	r0, #0
}
    f74e:	b006      	add	sp, #24
    f750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
    f754:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    f758:	4601      	mov	r1, r0
    f75a:	2214      	movs	r2, #20
    f75c:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    f75e:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
    f760:	f00f fe57 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    f764:	4632      	mov	r2, r6
    f766:	2107      	movs	r1, #7
    f768:	4650      	mov	r0, sl
    f76a:	f7ff fdb9 	bl	f2e0 <bt_att_create_pdu>
    f76e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    f770:	b1f8      	cbz	r0, f7b2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    f772:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    f774:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    f776:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    f77a:	4628      	mov	r0, r5
    f77c:	ab01      	add	r3, sp, #4
    f77e:	4a0e      	ldr	r2, [pc, #56]	; (f7b8 <att_find_type_req+0xcc>)
	data.value = value;
    f780:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
    f784:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
    f786:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    f78a:	f00d f8e0 	bl	1c94e <bt_gatt_foreach_attr>
	if (data.err) {
    f78e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f792:	b14b      	cbz	r3, f7a8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f794:	9b02      	ldr	r3, [sp, #8]
    f796:	6998      	ldr	r0, [r3, #24]
    f798:	f7ff fa98 	bl	eccc <tx_meta_data_free>
		net_buf_unref(data.buf);
    f79c:	9802      	ldr	r0, [sp, #8]
    f79e:	f001 fb2f 	bl	10e00 <net_buf_unref>
	if (!req) {
    f7a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f7a6:	e7cc      	b.n	f742 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
    f7a8:	4620      	mov	r0, r4
    f7aa:	9902      	ldr	r1, [sp, #8]
    f7ac:	f00d f937 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f7b0:	e7cc      	b.n	f74c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
    f7b2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    f7b4:	e7cb      	b.n	f74e <att_find_type_req+0x62>
    f7b6:	bf00      	nop
    f7b8:	0000eb89 	.word	0x0000eb89

0000f7bc <att_find_info_req>:
{
    f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    f7be:	68cb      	ldr	r3, [r1, #12]
{
    f7c0:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
    f7c2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    f7c4:	885e      	ldrh	r6, [r3, #2]
{
    f7c6:	b085      	sub	sp, #20
	if (!start || !end) {
    f7c8:	b195      	cbz	r5, f7f0 <att_find_info_req+0x34>
    f7ca:	b186      	cbz	r6, f7ee <att_find_info_req+0x32>
	if (start > end) {
    f7cc:	42b5      	cmp	r5, r6
    f7ce:	d80f      	bhi.n	f7f0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    f7d0:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    f7d2:	2210      	movs	r2, #16
    f7d4:	2100      	movs	r1, #0
    f7d6:	4668      	mov	r0, sp
    f7d8:	f00f fe1b 	bl	1f412 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    f7dc:	2200      	movs	r2, #0
    f7de:	2105      	movs	r1, #5
    f7e0:	4638      	mov	r0, r7
    f7e2:	f7ff fd7d 	bl	f2e0 <bt_att_create_pdu>
    f7e6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    f7e8:	b958      	cbnz	r0, f802 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    f7ea:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    f7ec:	e007      	b.n	f7fe <att_find_info_req+0x42>
			*err = 0U;
    f7ee:	4635      	mov	r5, r6
	if (!req) {
    f7f0:	2301      	movs	r3, #1
    f7f2:	462a      	mov	r2, r5
    f7f4:	2104      	movs	r1, #4
    f7f6:	4620      	mov	r0, r4
    f7f8:	f00d fb92 	bl	1cf20 <send_err_rsp.part.0>
		return 0;
    f7fc:	2000      	movs	r0, #0
}
    f7fe:	b005      	add	sp, #20
    f800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    f802:	466b      	mov	r3, sp
    f804:	4631      	mov	r1, r6
    f806:	4628      	mov	r0, r5
    f808:	4a09      	ldr	r2, [pc, #36]	; (f830 <att_find_info_req+0x74>)
	data.chan = chan;
    f80a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    f80c:	f00d f89f 	bl	1c94e <bt_gatt_foreach_attr>
	if (!data.rsp) {
    f810:	9b02      	ldr	r3, [sp, #8]
    f812:	b943      	cbnz	r3, f826 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    f814:	9b01      	ldr	r3, [sp, #4]
    f816:	6998      	ldr	r0, [r3, #24]
    f818:	f7ff fa58 	bl	eccc <tx_meta_data_free>
		net_buf_unref(data.buf);
    f81c:	9801      	ldr	r0, [sp, #4]
    f81e:	f001 faef 	bl	10e00 <net_buf_unref>
	if (!req) {
    f822:	230a      	movs	r3, #10
    f824:	e7e5      	b.n	f7f2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    f826:	4620      	mov	r0, r4
    f828:	9901      	ldr	r1, [sp, #4]
    f82a:	f00d f8f8 	bl	1ca1e <bt_att_chan_send_rsp>
	return 0;
    f82e:	e7e5      	b.n	f7fc <att_find_info_req+0x40>
    f830:	0001ca3b 	.word	0x0001ca3b

0000f834 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    f834:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
    f836:	4c0b      	ldr	r4, [pc, #44]	; (f864 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    f838:	4d0b      	ldr	r5, [pc, #44]	; (f868 <bt_att_init+0x34>)
    f83a:	4620      	mov	r0, r4
    f83c:	f00f fbe2 	bl	1f004 <z_impl_k_queue_init>
    f840:	4629      	mov	r1, r5
    f842:	4620      	mov	r0, r4
    f844:	f00f fbeb 	bl	1f01e <k_queue_append>
    f848:	4620      	mov	r0, r4
    f84a:	f105 0114 	add.w	r1, r5, #20
    f84e:	f00f fbe6 	bl	1f01e <k_queue_append>
    f852:	4620      	mov	r0, r4
    f854:	f105 0128 	add.w	r1, r5, #40	; 0x28
    f858:	f00f fbe1 	bl	1f01e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    f85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    f860:	f000 bb24 	b.w	feac <bt_gatt_init>
    f864:	200008d8 	.word	0x200008d8
    f868:	20006aa8 	.word	0x20006aa8

0000f86c <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
    f86c:	2300      	movs	r3, #0
{
    f86e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f870:	4605      	mov	r5, r0
    f872:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    f874:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    f876:	f008 fd1b 	bl	182b0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    f87a:	4b0c      	ldr	r3, [pc, #48]	; (f8ac <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    f87c:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
    f87e:	681b      	ldr	r3, [r3, #0]
    f880:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
    f882:	bf04      	itt	eq
    f884:	2500      	moveq	r5, #0
    f886:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    f888:	462a      	mov	r2, r5
    f88a:	4623      	mov	r3, r4
    f88c:	4808      	ldr	r0, [pc, #32]	; (f8b0 <bt_att_req_alloc+0x44>)
    f88e:	f006 fb7b 	bl	15f88 <k_mem_slab_alloc>
    f892:	4601      	mov	r1, r0
    f894:	b940      	cbnz	r0, f8a8 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    f896:	9b01      	ldr	r3, [sp, #4]
    f898:	2210      	movs	r2, #16
    f89a:	4618      	mov	r0, r3
    f89c:	f00f fdb9 	bl	1f412 <memset>
    f8a0:	4603      	mov	r3, r0

	return req;
}
    f8a2:	4618      	mov	r0, r3
    f8a4:	b003      	add	sp, #12
    f8a6:	bd30      	pop	{r4, r5, pc}
		return NULL;
    f8a8:	2300      	movs	r3, #0
    f8aa:	e7fa      	b.n	f8a2 <bt_att_req_alloc+0x36>
    f8ac:	20006ae4 	.word	0x20006ae4
    f8b0:	20000798 	.word	0x20000798

0000f8b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    f8b4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
    f8b6:	6883      	ldr	r3, [r0, #8]
{
    f8b8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    f8ba:	b14b      	cbz	r3, f8d0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    f8bc:	6998      	ldr	r0, [r3, #24]
    f8be:	f7ff fa05 	bl	eccc <tx_meta_data_free>
		net_buf_unref(req->buf);
    f8c2:	9b01      	ldr	r3, [sp, #4]
    f8c4:	6898      	ldr	r0, [r3, #8]
    f8c6:	f001 fa9b 	bl	10e00 <net_buf_unref>
		req->buf = NULL;
    f8ca:	2200      	movs	r2, #0
    f8cc:	9b01      	ldr	r3, [sp, #4]
    f8ce:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    f8d0:	4803      	ldr	r0, [pc, #12]	; (f8e0 <bt_att_req_free+0x2c>)
    f8d2:	a901      	add	r1, sp, #4
    f8d4:	f006 fbb0 	bl	16038 <k_mem_slab_free>
}
    f8d8:	b003      	add	sp, #12
    f8da:	f85d fb04 	ldr.w	pc, [sp], #4
    f8de:	bf00      	nop
    f8e0:	20000798 	.word	0x20000798

0000f8e4 <att_handle_rsp>:
{
    f8e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f8e8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    f8ea:	30c0      	adds	r0, #192	; 0xc0
{
    f8ec:	460e      	mov	r6, r1
    f8ee:	4617      	mov	r7, r2
    f8f0:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
    f8f2:	f007 fd51 	bl	17398 <k_work_cancel_delayable>
	if (!chan->req) {
    f8f6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    f8fa:	b950      	cbnz	r0, f912 <att_handle_rsp+0x2e>
		LOG_WRN("No pending ATT request");
    f8fc:	2157      	movs	r1, #87	; 0x57
    f8fe:	4816      	ldr	r0, [pc, #88]	; (f958 <att_handle_rsp+0x74>)
    f900:	f00b fd1a 	bl	1b338 <z_log_minimal_printk>
	att_req_send_process(chan->att);
    f904:	6820      	ldr	r0, [r4, #0]
    f906:	f00d fa43 	bl	1cd90 <att_req_send_process>
}
    f90a:	2000      	movs	r0, #0
    f90c:	b002      	add	sp, #8
    f90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
    f912:	4b12      	ldr	r3, [pc, #72]	; (f95c <att_handle_rsp+0x78>)
    f914:	f04f 0800 	mov.w	r8, #0
    f918:	4298      	cmp	r0, r3
    f91a:	d102      	bne.n	f922 <att_handle_rsp+0x3e>
		chan->req = NULL;
    f91c:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
    f920:	e7f0      	b.n	f904 <att_handle_rsp+0x20>
	func = chan->req->func;
    f922:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
    f926:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
    f92a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    f92e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    f932:	f7ff ffbf 	bl	f8b4 <bt_att_req_free>
	att_req_send_process(chan->att);
    f936:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
    f938:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
    f93c:	f00d fa28 	bl	1cd90 <att_req_send_process>
	if (func) {
    f940:	f1b9 0f00 	cmp.w	r9, #0
    f944:	d0e1      	beq.n	f90a <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
    f946:	6820      	ldr	r0, [r4, #0]
    f948:	f8cd a000 	str.w	sl, [sp]
    f94c:	463b      	mov	r3, r7
    f94e:	4632      	mov	r2, r6
    f950:	4629      	mov	r1, r5
    f952:	6800      	ldr	r0, [r0, #0]
    f954:	47c8      	blx	r9
    f956:	e7d8      	b.n	f90a <att_handle_rsp+0x26>
    f958:	00024119 	.word	0x00024119
    f95c:	20006ae8 	.word	0x20006ae8

0000f960 <bt_att_disconnected>:
{
    f960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    f964:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
    f968:	4604      	mov	r4, r0
	if (!att_chan->att) {
    f96a:	2e00      	cmp	r6, #0
    f96c:	d056      	beq.n	fa1c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    f96e:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    f972:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f976:	f00d f954 	bl	1cc22 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    f97a:	1f27      	subs	r7, r4, #4
    f97c:	f104 089c 	add.w	r8, r4, #156	; 0x9c
    f980:	2200      	movs	r2, #0
    f982:	2300      	movs	r3, #0
    f984:	4640      	mov	r0, r8
    f986:	f00d fddb 	bl	1d540 <net_buf_get>
    f98a:	4605      	mov	r5, r0
    f98c:	bb28      	cbnz	r0, f9da <bt_att_disconnected+0x7a>
	if (chan->req) {
    f98e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    f992:	b12b      	cbz	r3, f9a0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    f994:	4602      	mov	r2, r0
    f996:	4601      	mov	r1, r0
    f998:	230e      	movs	r3, #14
    f99a:	4638      	mov	r0, r7
    f99c:	f7ff ffa2 	bl	f8e4 <att_handle_rsp>
	chan->att = NULL;
    f9a0:	2300      	movs	r3, #0
    f9a2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
    f9a6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d137      	bne.n	fa1c <bt_att_disconnected+0xbc>
	att_reset(att);
    f9ac:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    f9ae:	9803      	ldr	r0, [sp, #12]
    f9b0:	2200      	movs	r2, #0
    f9b2:	2300      	movs	r3, #0
    f9b4:	300c      	adds	r0, #12
    f9b6:	f00d fdc3 	bl	1d540 <net_buf_get>
    f9ba:	4605      	mov	r5, r0
    f9bc:	b9a0      	cbnz	r0, f9e8 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
    f9be:	9803      	ldr	r0, [sp, #12]
	return list->head;
    f9c0:	6845      	ldr	r5, [r0, #4]
    f9c2:	b9c5      	cbnz	r5, f9f6 <bt_att_disconnected+0x96>
	att->conn = NULL;
    f9c4:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    f9c6:	a903      	add	r1, sp, #12
    f9c8:	4816      	ldr	r0, [pc, #88]	; (fa24 <bt_att_disconnected+0xc4>)
    f9ca:	f006 fb35 	bl	16038 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    f9ce:	6820      	ldr	r0, [r4, #0]
}
    f9d0:	b004      	add	sp, #16
    f9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    f9d6:	f000 bff5 	b.w	109c4 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    f9da:	69a8      	ldr	r0, [r5, #24]
    f9dc:	f7ff f976 	bl	eccc <tx_meta_data_free>
		net_buf_unref(buf);
    f9e0:	4628      	mov	r0, r5
    f9e2:	f001 fa0d 	bl	10e00 <net_buf_unref>
    f9e6:	e7cb      	b.n	f980 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    f9e8:	69a8      	ldr	r0, [r5, #24]
    f9ea:	f7ff f96f 	bl	eccc <tx_meta_data_free>
		net_buf_unref(buf);
    f9ee:	4628      	mov	r0, r5
    f9f0:	f001 fa06 	bl	10e00 <net_buf_unref>
    f9f4:	e7db      	b.n	f9ae <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f9f6:	6882      	ldr	r2, [r0, #8]
	return node->next;
    f9f8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f9fa:	4295      	cmp	r5, r2
	list->head = node;
    f9fc:	6043      	str	r3, [r0, #4]
	list->tail = node;
    f9fe:	bf08      	it	eq
    fa00:	6083      	streq	r3, [r0, #8]
		if (req->func) {
    fa02:	686e      	ldr	r6, [r5, #4]
    fa04:	b136      	cbz	r6, fa14 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    fa06:	68eb      	ldr	r3, [r5, #12]
    fa08:	210e      	movs	r1, #14
    fa0a:	9300      	str	r3, [sp, #0]
    fa0c:	2300      	movs	r3, #0
    fa0e:	6800      	ldr	r0, [r0, #0]
    fa10:	461a      	mov	r2, r3
    fa12:	47b0      	blx	r6
		bt_att_req_free(req);
    fa14:	4628      	mov	r0, r5
    fa16:	f7ff ff4d 	bl	f8b4 <bt_att_req_free>
    fa1a:	e7d0      	b.n	f9be <bt_att_disconnected+0x5e>
}
    fa1c:	b004      	add	sp, #16
    fa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa22:	bf00      	nop
    fa24:	20000758 	.word	0x20000758

0000fa28 <att_timeout>:
{
    fa28:	b510      	push	{r4, lr}
    fa2a:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
    fa2c:	2145      	movs	r1, #69	; 0x45
    fa2e:	4804      	ldr	r0, [pc, #16]	; (fa40 <att_timeout+0x18>)
    fa30:	f00b fc82 	bl	1b338 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
    fa34:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
    fa38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    fa3c:	f7ff bf90 	b.w	f960 <bt_att_disconnected>
    fa40:	00024135 	.word	0x00024135

0000fa44 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa46:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
    fa48:	b950      	cbnz	r0, fa60 <bt_att_send+0x1c>
    fa4a:	4928      	ldr	r1, [pc, #160]	; (faec <bt_att_send+0xa8>)
    fa4c:	f640 62a4 	movw	r2, #3748	; 0xea4
    fa50:	4827      	ldr	r0, [pc, #156]	; (faf0 <bt_att_send+0xac>)
    fa52:	f00b fc5d 	bl	1b310 <assert_print>
    fa56:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
    fa5a:	4824      	ldr	r0, [pc, #144]	; (faec <bt_att_send+0xa8>)
    fa5c:	f00b fc51 	bl	1b302 <assert_post_action>
    fa60:	b941      	cbnz	r1, fa74 <bt_att_send+0x30>
    fa62:	4922      	ldr	r1, [pc, #136]	; (faec <bt_att_send+0xa8>)
    fa64:	f640 62a5 	movw	r2, #3749	; 0xea5
    fa68:	4821      	ldr	r0, [pc, #132]	; (faf0 <bt_att_send+0xac>)
    fa6a:	f00b fc51 	bl	1b310 <assert_print>
    fa6e:	f640 61a5 	movw	r1, #3749	; 0xea5
    fa72:	e7f2      	b.n	fa5a <bt_att_send+0x16>

	att = att_get(conn);
    fa74:	f7ff f84e 	bl	eb14 <att_get>
	if (!att) {
    fa78:	4605      	mov	r5, r0
    fa7a:	b940      	cbnz	r0, fa8e <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    fa7c:	69a0      	ldr	r0, [r4, #24]
    fa7e:	f7ff f925 	bl	eccc <tx_meta_data_free>
		net_buf_unref(buf);
    fa82:	4620      	mov	r0, r4
    fa84:	f001 f9bc 	bl	10e00 <net_buf_unref>
		return -ENOTCONN;
    fa88:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
    fa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
    fa8e:	f100 060c 	add.w	r6, r0, #12
    fa92:	4621      	mov	r1, r4
    fa94:	4630      	mov	r0, r6
    fa96:	f001 f993 	bl	10dc0 <net_buf_put>
	return list->head;
    fa9a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fa9c:	b14d      	cbz	r5, fab2 <bt_att_send+0x6e>
	return node->next;
    fa9e:	f855 49f0 	ldr.w	r4, [r5], #-240
    faa2:	b104      	cbz	r4, faa6 <bt_att_send+0x62>
    faa4:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
    faa6:	4631      	mov	r1, r6
    faa8:	4628      	mov	r0, r5
    faaa:	f00d f816 	bl	1cada <process_queue>
		if (!err) {
    faae:	4603      	mov	r3, r0
    fab0:	b980      	cbnz	r0, fad4 <bt_att_send+0x90>
	return 0;
    fab2:	2000      	movs	r0, #0
    fab4:	e7ea      	b.n	fa8c <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
    fab6:	2103      	movs	r1, #3
    fab8:	f104 0098 	add.w	r0, r4, #152	; 0x98
    fabc:	f00c ff10 	bl	1c8e0 <atomic_test_bit>
    fac0:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
    fac2:	f105 0098 	add.w	r0, r5, #152	; 0x98
    fac6:	f00c ff0b 	bl	1c8e0 <atomic_test_bit>
		if (err == -ENOENT && prev &&
    faca:	4287      	cmp	r7, r0
    facc:	f06f 0301 	mvn.w	r3, #1
    fad0:	d107      	bne.n	fae2 <bt_att_send+0x9e>
    fad2:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fad4:	2c00      	cmp	r4, #0
    fad6:	d0ec      	beq.n	fab2 <bt_att_send+0x6e>
    fad8:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
    fadc:	b922      	cbnz	r2, fae8 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
    fade:	3302      	adds	r3, #2
    fae0:	d0e9      	beq.n	fab6 <bt_att_send+0x72>
{
    fae2:	4625      	mov	r5, r4
    fae4:	4614      	mov	r4, r2
    fae6:	e7de      	b.n	faa6 <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    fae8:	3af0      	subs	r2, #240	; 0xf0
    faea:	e7f8      	b.n	fade <bt_att_send+0x9a>
    faec:	00023f20 	.word	0x00023f20
    faf0:	000221f8 	.word	0x000221f8

0000faf4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    faf4:	b510      	push	{r4, lr}
    faf6:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    faf8:	b950      	cbnz	r0, fb10 <bt_att_req_send+0x1c>
    fafa:	4914      	ldr	r1, [pc, #80]	; (fb4c <bt_att_req_send+0x58>)
    fafc:	f640 62ba 	movw	r2, #3770	; 0xeba
    fb00:	4813      	ldr	r0, [pc, #76]	; (fb50 <bt_att_req_send+0x5c>)
    fb02:	f00b fc05 	bl	1b310 <assert_print>
    fb06:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
    fb0a:	4810      	ldr	r0, [pc, #64]	; (fb4c <bt_att_req_send+0x58>)
    fb0c:	f00b fbf9 	bl	1b302 <assert_post_action>
    fb10:	b941      	cbnz	r1, fb24 <bt_att_req_send+0x30>
    fb12:	490e      	ldr	r1, [pc, #56]	; (fb4c <bt_att_req_send+0x58>)
    fb14:	f640 62bb 	movw	r2, #3771	; 0xebb
    fb18:	480d      	ldr	r0, [pc, #52]	; (fb50 <bt_att_req_send+0x5c>)
    fb1a:	f00b fbf9 	bl	1b310 <assert_print>
    fb1e:	f640 61bb 	movw	r1, #3771	; 0xebb
    fb22:	e7f2      	b.n	fb0a <bt_att_req_send+0x16>

	att = att_get(conn);
    fb24:	f7fe fff6 	bl	eb14 <att_get>
	if (!att) {
    fb28:	b160      	cbz	r0, fb44 <bt_att_req_send+0x50>
	parent->next = child;
    fb2a:	2300      	movs	r3, #0
    fb2c:	6023      	str	r3, [r4, #0]
	return list->tail;
    fb2e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    fb30:	b92b      	cbnz	r3, fb3e <bt_att_req_send+0x4a>
	list->head = node;
    fb32:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
    fb36:	f00d f92b 	bl	1cd90 <att_req_send_process>

	return 0;
    fb3a:	2000      	movs	r0, #0
}
    fb3c:	bd10      	pop	{r4, pc}
	parent->next = child;
    fb3e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fb40:	6084      	str	r4, [r0, #8]
}
    fb42:	e7f8      	b.n	fb36 <bt_att_req_send+0x42>
		return -ENOTCONN;
    fb44:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fb48:	e7f8      	b.n	fb3c <bt_att_req_send+0x48>
    fb4a:	bf00      	nop
    fb4c:	00023f20 	.word	0x00023f20
    fb50:	000221f8 	.word	0x000221f8

0000fb54 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    fb54:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    fb56:	b930      	cbnz	r0, fb66 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    fb58:	4907      	ldr	r1, [pc, #28]	; (fb78 <find_cf_cfg+0x24>)
    fb5a:	4808      	ldr	r0, [pc, #32]	; (fb7c <find_cf_cfg+0x28>)
    fb5c:	f00d fb0e 	bl	1d17c <bt_addr_le_eq>
    fb60:	b138      	cbz	r0, fb72 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    fb62:	4807      	ldr	r0, [pc, #28]	; (fb80 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
    fb64:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    fb66:	4a05      	ldr	r2, [pc, #20]	; (fb7c <find_cf_cfg+0x28>)
    fb68:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    fb6c:	f00c fdd9 	bl	1c722 <bt_conn_is_peer_addr_le>
    fb70:	e7f6      	b.n	fb60 <find_cf_cfg+0xc>
	return NULL;
    fb72:	2000      	movs	r0, #0
    fb74:	e7f6      	b.n	fb64 <find_cf_cfg+0x10>
    fb76:	bf00      	nop
    fb78:	00022e27 	.word	0x00022e27
    fb7c:	20006b11 	.word	0x20006b11
    fb80:	20006b10 	.word	0x20006b10

0000fb84 <find_sc_cfg>:
{
    fb84:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    fb86:	4c06      	ldr	r4, [pc, #24]	; (fba0 <find_sc_cfg+0x1c>)
    fb88:	7823      	ldrb	r3, [r4, #0]
    fb8a:	4283      	cmp	r3, r0
    fb8c:	d103      	bne.n	fb96 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
    fb8e:	1c60      	adds	r0, r4, #1
    fb90:	f00d faf4 	bl	1d17c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
    fb94:	b908      	cbnz	r0, fb9a <find_sc_cfg+0x16>
	return NULL;
    fb96:	2000      	movs	r0, #0
}
    fb98:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    fb9a:	4620      	mov	r0, r4
    fb9c:	e7fc      	b.n	fb98 <find_sc_cfg+0x14>
    fb9e:	bf00      	nop
    fba0:	200071c2 	.word	0x200071c2

0000fba4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
    fba4:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
    fba6:	1c4a      	adds	r2, r1, #1
{
    fba8:	460c      	mov	r4, r1
		if (conn) {
    fbaa:	b138      	cbz	r0, fbbc <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
    fbac:	7809      	ldrb	r1, [r1, #0]
    fbae:	f00c fdb8 	bl	1c722 <bt_conn_is_peer_addr_le>
    fbb2:	b108      	cbz	r0, fbb8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    fbb4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
    fbb6:	bd10      	pop	{r4, pc}
	return NULL;
    fbb8:	2000      	movs	r0, #0
    fbba:	e7fc      	b.n	fbb6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    fbbc:	4610      	mov	r0, r2
    fbbe:	4902      	ldr	r1, [pc, #8]	; (fbc8 <find_ccc_cfg+0x24>)
    fbc0:	f00d fadc 	bl	1d17c <bt_addr_le_eq>
    fbc4:	e7f5      	b.n	fbb2 <find_ccc_cfg+0xe>
    fbc6:	bf00      	nop
    fbc8:	00022e27 	.word	0x00022e27

0000fbcc <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
    fbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fbd0:	461e      	mov	r6, r3
    fbd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fbd6:	4681      	mov	r9, r0
    fbd8:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
    fbda:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d144      	bne.n	fc6c <bt_gatt_attr_write_ccc+0xa0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
    fbe2:	1e73      	subs	r3, r6, #1
    fbe4:	2b01      	cmp	r3, #1
    fbe6:	d844      	bhi.n	fc72 <bt_gatt_attr_write_ccc+0xa6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
    fbe8:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
    fbea:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
    fbec:	7815      	ldrb	r5, [r2, #0]
    fbee:	bf18      	it	ne
    fbf0:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    fbf2:	f7ff ffd7 	bl	fba4 <find_ccc_cfg>
	if (!cfg) {
    fbf6:	4604      	mov	r4, r0
    fbf8:	b9b8      	cbnz	r0, fc2a <bt_gatt_attr_write_ccc+0x5e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
    fbfa:	b915      	cbnz	r5, fc02 <bt_gatt_attr_write_ccc+0x36>
			return len;
    fbfc:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
    fbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    fc02:	4641      	mov	r1, r8
    fc04:	f7ff ffce 	bl	fba4 <find_ccc_cfg>
		if (!cfg) {
    fc08:	4604      	mov	r4, r0
    fc0a:	b930      	cbnz	r0, fc1a <bt_gatt_attr_write_ccc+0x4e>
			LOG_WRN("No space to store CCC cfg");
    fc0c:	481a      	ldr	r0, [pc, #104]	; (fc78 <bt_gatt_attr_write_ccc+0xac>)
    fc0e:	2157      	movs	r1, #87	; 0x57
    fc10:	f00b fb92 	bl	1b338 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    fc14:	f06f 0010 	mvn.w	r0, #16
    fc18:	e7f1      	b.n	fbfe <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    fc1a:	f109 0190 	add.w	r1, r9, #144	; 0x90
    fc1e:	3001      	adds	r0, #1
    fc20:	f00d fab4 	bl	1d18c <bt_addr_le_copy>
		cfg->id = conn->id;
    fc24:	f899 3008 	ldrb.w	r3, [r9, #8]
    fc28:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    fc2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    fc2e:	b98b      	cbnz	r3, fc54 <bt_gatt_attr_write_ccc+0x88>
	cfg->value = value;
    fc30:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    fc32:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    fc36:	42ab      	cmp	r3, r5
    fc38:	d003      	beq.n	fc42 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
    fc3a:	4641      	mov	r1, r8
    fc3c:	4638      	mov	r0, r7
    fc3e:	f00d fa29 	bl	1d094 <gatt_ccc_changed>
	if (!value) {
    fc42:	2d00      	cmp	r5, #0
    fc44:	d1da      	bne.n	fbfc <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    fc46:	490d      	ldr	r1, [pc, #52]	; (fc7c <bt_gatt_attr_write_ccc+0xb0>)
    fc48:	1c60      	adds	r0, r4, #1
    fc4a:	f00d fa9f 	bl	1d18c <bt_addr_le_copy>
	cfg->id = 0U;
    fc4e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    fc50:	8125      	strh	r5, [r4, #8]
}
    fc52:	e7d3      	b.n	fbfc <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    fc54:	462a      	mov	r2, r5
    fc56:	4639      	mov	r1, r7
    fc58:	4648      	mov	r0, r9
    fc5a:	4798      	blx	r3
		if (write < 0) {
    fc5c:	2800      	cmp	r0, #0
    fc5e:	dbce      	blt.n	fbfe <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
    fc60:	3801      	subs	r0, #1
    fc62:	2801      	cmp	r0, #1
    fc64:	d9e4      	bls.n	fc30 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    fc66:	f06f 000d 	mvn.w	r0, #13
    fc6a:	e7c8      	b.n	fbfe <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    fc6c:	f06f 0006 	mvn.w	r0, #6
    fc70:	e7c5      	b.n	fbfe <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    fc72:	f06f 000c 	mvn.w	r0, #12
    fc76:	e7c2      	b.n	fbfe <bt_gatt_attr_write_ccc+0x32>
    fc78:	0002414d 	.word	0x0002414d
    fc7c:	00022e27 	.word	0x00022e27

0000fc80 <read_ppcp>:
{
    fc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fc82:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    fc84:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
    fc88:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    fc8a:	4a06      	ldr	r2, [pc, #24]	; (fca4 <read_ppcp+0x24>)
    fc8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    fc90:	2308      	movs	r3, #8
    fc92:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    fc96:	9300      	str	r3, [sp, #0]
    fc98:	446b      	add	r3, sp
    fc9a:	f00d fa95 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
    fc9e:	b005      	add	sp, #20
    fca0:	f85d fb04 	ldr.w	pc, [sp], #4
    fca4:	00280018 	.word	0x00280018

0000fca8 <clear_cf_cfg>:
{
    fca8:	4602      	mov	r2, r0
    fcaa:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    fcac:	4907      	ldr	r1, [pc, #28]	; (fccc <clear_cf_cfg+0x24>)
    fcae:	3001      	adds	r0, #1
    fcb0:	f00d fa6c 	bl	1d18c <bt_addr_le_copy>
    fcb4:	2300      	movs	r3, #0
    fcb6:	320c      	adds	r2, #12
    fcb8:	f802 3c04 	strb.w	r3, [r2, #-4]
    fcbc:	e8d2 1fef 	ldaex	r1, [r2]
    fcc0:	e8c2 3fe0 	stlex	r0, r3, [r2]
    fcc4:	2800      	cmp	r0, #0
    fcc6:	d1f9      	bne.n	fcbc <clear_cf_cfg+0x14>
}
    fcc8:	bd08      	pop	{r3, pc}
    fcca:	bf00      	nop
    fccc:	00022e27 	.word	0x00022e27

0000fcd0 <sc_save>:
{
    fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcd4:	4680      	mov	r8, r0
    fcd6:	460f      	mov	r7, r1
    fcd8:	4616      	mov	r6, r2
    fcda:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    fcdc:	f7ff ff52 	bl	fb84 <find_sc_cfg>
	if (!cfg) {
    fce0:	4604      	mov	r4, r0
    fce2:	b978      	cbnz	r0, fd04 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    fce4:	490e      	ldr	r1, [pc, #56]	; (fd20 <sc_save+0x50>)
    fce6:	f7ff ff4d 	bl	fb84 <find_sc_cfg>
		if (!cfg) {
    fcea:	4604      	mov	r4, r0
    fcec:	b928      	cbnz	r0, fcfa <sc_save+0x2a>
}
    fcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("unable to save SC: no cfg left");
    fcf2:	2145      	movs	r1, #69	; 0x45
    fcf4:	480b      	ldr	r0, [pc, #44]	; (fd24 <sc_save+0x54>)
    fcf6:	f00b bb1f 	b.w	1b338 <z_log_minimal_printk>
		bt_addr_le_copy(&cfg->peer, peer);
    fcfa:	4639      	mov	r1, r7
		cfg->id = id;
    fcfc:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    fd00:	f00d fa44 	bl	1d18c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    fd04:	8922      	ldrh	r2, [r4, #8]
    fd06:	8963      	ldrh	r3, [r4, #10]
    fd08:	b91a      	cbnz	r2, fd12 <sc_save+0x42>
    fd0a:	b92b      	cbnz	r3, fd18 <sc_save+0x48>
		cfg->data.start = start;
    fd0c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    fd0e:	8165      	strh	r5, [r4, #10]
    fd10:	e004      	b.n	fd1c <sc_save+0x4c>
	if (new_start >= *start && new_end <= *end) {
    fd12:	4296      	cmp	r6, r2
		*start = new_start;
    fd14:	bf38      	it	cc
    fd16:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
    fd18:	429d      	cmp	r5, r3
    fd1a:	d8f8      	bhi.n	fd0e <sc_save+0x3e>
}
    fd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd20:	00022e27 	.word	0x00022e27
    fd24:	0002416c 	.word	0x0002416c

0000fd28 <cf_write>:
{
    fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd2c:	461f      	mov	r7, r3
    fd2e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    fd32:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
    fd34:	2b01      	cmp	r3, #1
{
    fd36:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    fd38:	d835      	bhi.n	fda6 <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
    fd3a:	443b      	add	r3, r7
    fd3c:	2b01      	cmp	r3, #1
    fd3e:	463d      	mov	r5, r7
    fd40:	dc34      	bgt.n	fdac <cf_write+0x84>
	cfg = find_cf_cfg(conn);
    fd42:	f7ff ff07 	bl	fb54 <find_cf_cfg>
	if (!cfg) {
    fd46:	4604      	mov	r4, r0
    fd48:	b960      	cbnz	r0, fd64 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    fd4a:	f7ff ff03 	bl	fb54 <find_cf_cfg>
	if (!cfg) {
    fd4e:	4604      	mov	r4, r0
    fd50:	b940      	cbnz	r0, fd64 <cf_write+0x3c>
		LOG_WRN("No space to store Client Supported Features");
    fd52:	2157      	movs	r1, #87	; 0x57
    fd54:	4818      	ldr	r0, [pc, #96]	; (fdb8 <cf_write+0x90>)
    fd56:	f00b faef 	bl	1b338 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    fd5a:	f06f 0510 	mvn.w	r5, #16
}
    fd5e:	4628      	mov	r0, r5
    fd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    fd64:	b197      	cbz	r7, fd8c <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
    fd66:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    fd68:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
    fd6a:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    fd6e:	fa21 f003 	lsr.w	r0, r1, r3
    fd72:	07c7      	lsls	r7, r0, #31
    fd74:	d503      	bpl.n	fd7e <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
    fd76:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    fd7a:	07c0      	lsls	r0, r0, #31
    fd7c:	d519      	bpl.n	fdb2 <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    fd7e:	3301      	adds	r3, #1
    fd80:	2b03      	cmp	r3, #3
    fd82:	d1f4      	bne.n	fd6e <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    fd84:	f002 0207 	and.w	r2, r2, #7
    fd88:	4311      	orrs	r1, r2
    fd8a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    fd8c:	f106 0190 	add.w	r1, r6, #144	; 0x90
    fd90:	1c60      	adds	r0, r4, #1
    fd92:	f00d f9fb 	bl	1d18c <bt_addr_le_copy>
	cfg->id = conn->id;
    fd96:	4620      	mov	r0, r4
    fd98:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    fd9a:	2100      	movs	r1, #0
	cfg->id = conn->id;
    fd9c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    fda0:	f00d faa9 	bl	1d2f6 <atomic_set_bit>
	return len;
    fda4:	e7db      	b.n	fd5e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    fda6:	f06f 0506 	mvn.w	r5, #6
    fdaa:	e7d8      	b.n	fd5e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    fdac:	f06f 050c 	mvn.w	r5, #12
    fdb0:	e7d5      	b.n	fd5e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    fdb2:	f06f 0512 	mvn.w	r5, #18
    fdb6:	e7d2      	b.n	fd5e <cf_write+0x36>
    fdb8:	00024190 	.word	0x00024190

0000fdbc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    fdc0:	4b23      	ldr	r3, [pc, #140]	; (fe50 <disconnected_cb+0x94>)
{
    fdc2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    fdc4:	6882      	ldr	r2, [r0, #8]
{
    fdc6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    fdc8:	429a      	cmp	r2, r3
    fdca:	d102      	bne.n	fdd2 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    fdcc:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    fdce:	8963      	ldrh	r3, [r4, #10]
    fdd0:	bb33      	cbnz	r3, fe20 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    fdd2:	2001      	movs	r0, #1
    fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
    fdd8:	f7fe f826 	bl	de28 <bt_conn_unref>
		ccc->value = 0U;
    fddc:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
    fdde:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    fde0:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    fde2:	2b00      	cmp	r3, #0
    fde4:	d0f5      	beq.n	fdd2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    fde6:	4638      	mov	r0, r7
    fde8:	4798      	blx	r3
    fdea:	e7f2      	b.n	fdd2 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    fdec:	f105 0890 	add.w	r8, r5, #144	; 0x90
    fdf0:	4641      	mov	r1, r8
    fdf2:	7a28      	ldrb	r0, [r5, #8]
    fdf4:	f00c fa2e 	bl	1c254 <bt_addr_le_is_bonded>
    fdf8:	b968      	cbnz	r0, fe16 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
    fdfa:	4b16      	ldr	r3, [pc, #88]	; (fe54 <disconnected_cb+0x98>)
    fdfc:	429c      	cmp	r4, r3
    fdfe:	d102      	bne.n	fe06 <disconnected_cb+0x4a>
					sc_clear(conn);
    fe00:	4628      	mov	r0, r5
    fe02:	f00d f9cf 	bl	1d1a4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    fe06:	4630      	mov	r0, r6
    fe08:	4913      	ldr	r1, [pc, #76]	; (fe58 <disconnected_cb+0x9c>)
    fe0a:	f00d f9bf 	bl	1d18c <bt_addr_le_copy>
	cfg->id = 0U;
    fe0e:	2300      	movs	r3, #0
    fe10:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
    fe12:	8123      	strh	r3, [r4, #8]
}
    fe14:	e7e2      	b.n	fddc <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    fe16:	4641      	mov	r1, r8
    fe18:	4630      	mov	r0, r6
    fe1a:	f00d f9b7 	bl	1d18c <bt_addr_le_copy>
    fe1e:	e7dd      	b.n	fddc <disconnected_cb+0x20>
		if (!cfg->value) {
    fe20:	8923      	ldrh	r3, [r4, #8]
    fe22:	2b00      	cmp	r3, #0
    fe24:	d0da      	beq.n	fddc <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    fe26:	4626      	mov	r6, r4
    fe28:	f816 1b01 	ldrb.w	r1, [r6], #1
    fe2c:	4628      	mov	r0, r5
    fe2e:	4632      	mov	r2, r6
    fe30:	f00c fc77 	bl	1c722 <bt_conn_is_peer_addr_le>
    fe34:	2800      	cmp	r0, #0
    fe36:	d1d9      	bne.n	fdec <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    fe38:	4631      	mov	r1, r6
    fe3a:	7820      	ldrb	r0, [r4, #0]
    fe3c:	f7fe fa32 	bl	e2a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    fe40:	2800      	cmp	r0, #0
    fe42:	d0cb      	beq.n	fddc <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
    fe44:	7a83      	ldrb	r3, [r0, #10]
    fe46:	2b07      	cmp	r3, #7
    fe48:	d1c6      	bne.n	fdd8 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
    fe4a:	f7fd ffed 	bl	de28 <bt_conn_unref>
	if (!value_used) {
    fe4e:	e7c0      	b.n	fdd2 <disconnected_cb+0x16>
    fe50:	0000fbcd 	.word	0x0000fbcd
    fe54:	200003c8 	.word	0x200003c8
    fe58:	00022e27 	.word	0x00022e27

0000fe5c <sc_indicate_rsp>:
{
    fe5c:	b510      	push	{r4, lr}
    fe5e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fe60:	4811      	ldr	r0, [pc, #68]	; (fea8 <sc_indicate_rsp+0x4c>)
    fe62:	e8d0 3fef 	ldaex	r3, [r0]
    fe66:	f023 0302 	bic.w	r3, r3, #2
    fe6a:	e8c0 3fe2 	stlex	r2, r3, [r0]
    fe6e:	2a00      	cmp	r2, #0
    fe70:	d1f7      	bne.n	fe62 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fe72:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    fe76:	07da      	lsls	r2, r3, #31
    fe78:	d504      	bpl.n	fe84 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
    fe7a:	2200      	movs	r2, #0
    fe7c:	2300      	movs	r3, #0
    fe7e:	3830      	subs	r0, #48	; 0x30
    fe80:	f007 fa84 	bl	1738c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    fe84:	4620      	mov	r0, r4
    fe86:	f00d f8d8 	bl	1d03a <bt_att_fixed_chan_only>
    fe8a:	b160      	cbz	r0, fea6 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
    fe8c:	4620      	mov	r0, r4
    fe8e:	f7ff fe61 	bl	fb54 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    fe92:	b140      	cbz	r0, fea6 <sc_indicate_rsp+0x4a>
    fe94:	7a03      	ldrb	r3, [r0, #8]
    fe96:	07db      	lsls	r3, r3, #31
    fe98:	d505      	bpl.n	fea6 <sc_indicate_rsp+0x4a>
}
    fe9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    fe9e:	2100      	movs	r1, #0
    fea0:	300c      	adds	r0, #12
    fea2:	f00d ba28 	b.w	1d2f6 <atomic_set_bit>
}
    fea6:	bd10      	pop	{r4, pc}
    fea8:	20005e78 	.word	0x20005e78

0000feac <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    feac:	2201      	movs	r2, #1
{
    feae:	b510      	push	{r4, lr}
    feb0:	4b22      	ldr	r3, [pc, #136]	; (ff3c <bt_gatt_init+0x90>)
    feb2:	e8d3 1fef 	ldaex	r1, [r3]
    feb6:	2900      	cmp	r1, #0
    feb8:	d103      	bne.n	fec2 <bt_gatt_init+0x16>
    feba:	e8c3 2fe0 	stlex	r0, r2, [r3]
    febe:	2800      	cmp	r0, #0
    fec0:	d1f7      	bne.n	feb2 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
    fec2:	d13a      	bne.n	ff3a <bt_gatt_init+0x8e>
    fec4:	4b1e      	ldr	r3, [pc, #120]	; (ff40 <bt_gatt_init+0x94>)
    fec6:	e8d3 1fef 	ldaex	r1, [r3]
    feca:	2900      	cmp	r1, #0
    fecc:	d103      	bne.n	fed6 <bt_gatt_init+0x2a>
    fece:	e8c3 2fe0 	stlex	r0, r2, [r3]
    fed2:	2800      	cmp	r0, #0
    fed4:	d1f7      	bne.n	fec6 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
    fed6:	d11c      	bne.n	ff12 <bt_gatt_init+0x66>
    fed8:	2000      	movs	r0, #0
    feda:	491a      	ldr	r1, [pc, #104]	; (ff44 <bt_gatt_init+0x98>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    fedc:	4a1a      	ldr	r2, [pc, #104]	; (ff48 <bt_gatt_init+0x9c>)
    fede:	880b      	ldrh	r3, [r1, #0]
    fee0:	4c1a      	ldr	r4, [pc, #104]	; (ff4c <bt_gatt_init+0xa0>)
    fee2:	42a2      	cmp	r2, r4
    fee4:	d912      	bls.n	ff0c <bt_gatt_init+0x60>
    fee6:	b100      	cbz	r0, feea <bt_gatt_init+0x3e>
    fee8:	800b      	strh	r3, [r1, #0]
    feea:	4919      	ldr	r1, [pc, #100]	; (ff50 <bt_gatt_init+0xa4>)
    feec:	4819      	ldr	r0, [pc, #100]	; (ff54 <bt_gatt_init+0xa8>)
    feee:	f44f 62a1 	mov.w	r2, #1288	; 0x508
    fef2:	f00b fa0d 	bl	1b310 <assert_print>
    fef6:	f44f 61a1 	mov.w	r1, #1288	; 0x508
    fefa:	4815      	ldr	r0, [pc, #84]	; (ff50 <bt_gatt_init+0xa4>)
    fefc:	f00b fa01 	bl	1b302 <assert_post_action>
		last_static_handle += svc->attr_count;
    ff00:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    ff02:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
    ff04:	4403      	add	r3, r0
    ff06:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    ff08:	2001      	movs	r0, #1
    ff0a:	e7ea      	b.n	fee2 <bt_gatt_init+0x36>
    ff0c:	d3f8      	bcc.n	ff00 <bt_gatt_init+0x54>
    ff0e:	b100      	cbz	r0, ff12 <bt_gatt_init+0x66>
    ff10:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    ff12:	2200      	movs	r2, #0
    ff14:	4b10      	ldr	r3, [pc, #64]	; (ff58 <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    ff16:	4911      	ldr	r1, [pc, #68]	; (ff5c <bt_gatt_init+0xb0>)
    ff18:	4811      	ldr	r0, [pc, #68]	; (ff60 <bt_gatt_init+0xb4>)
	list->tail = NULL;
    ff1a:	e9c3 2200 	strd	r2, r2, [r3]
    ff1e:	f007 f94b 	bl	171b8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    ff22:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ff26:	2300      	movs	r3, #0
    ff28:	480d      	ldr	r0, [pc, #52]	; (ff60 <bt_gatt_init+0xb4>)
    ff2a:	f7fa fc3b 	bl	a7a4 <bt_long_wq_schedule>
}
    ff2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    ff32:	490c      	ldr	r1, [pc, #48]	; (ff64 <bt_gatt_init+0xb8>)
    ff34:	480c      	ldr	r0, [pc, #48]	; (ff68 <bt_gatt_init+0xbc>)
    ff36:	f007 b93f 	b.w	171b8 <k_work_init_delayable>
}
    ff3a:	bd10      	pop	{r4, pc}
    ff3c:	20006b24 	.word	0x20006b24
    ff40:	20006b20 	.word	0x20006b20
    ff44:	200071ce 	.word	0x200071ce
    ff48:	0001f8dc 	.word	0x0001f8dc
    ff4c:	0001f8f4 	.word	0x0001f8f4
    ff50:	000241c1 	.word	0x000241c1
    ff54:	000221f8 	.word	0x000221f8
    ff58:	20006b28 	.word	0x20006b28
    ff5c:	0001d411 	.word	0x0001d411
    ff60:	20005dd0 	.word	0x20005dd0
    ff64:	00010565 	.word	0x00010565
    ff68:	20005e48 	.word	0x20005e48

0000ff6c <bt_gatt_attr_get_handle>:
	if (!attr) {
    ff6c:	4603      	mov	r3, r0
{
    ff6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    ff72:	b378      	cbz	r0, ffd4 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
    ff74:	8a00      	ldrh	r0, [r0, #16]
    ff76:	bb68      	cbnz	r0, ffd4 <bt_gatt_attr_get_handle+0x68>
	uint16_t handle = 1;
    ff78:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ff7a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ff7e:	4917      	ldr	r1, [pc, #92]	; (ffdc <bt_gatt_attr_get_handle+0x70>)
    ff80:	f8df e064 	ldr.w	lr, [pc, #100]	; ffe8 <bt_gatt_attr_get_handle+0x7c>
    ff84:	4571      	cmp	r1, lr
    ff86:	d924      	bls.n	ffd2 <bt_gatt_attr_get_handle+0x66>
    ff88:	4915      	ldr	r1, [pc, #84]	; (ffe0 <bt_gatt_attr_get_handle+0x74>)
    ff8a:	4816      	ldr	r0, [pc, #88]	; (ffe4 <bt_gatt_attr_get_handle+0x78>)
    ff8c:	f240 625d 	movw	r2, #1629	; 0x65d
    ff90:	f00b f9be 	bl	1b310 <assert_print>
    ff94:	f240 615d 	movw	r1, #1629	; 0x65d
    ff98:	4811      	ldr	r0, [pc, #68]	; (ffe0 <bt_gatt_attr_get_handle+0x74>)
    ff9a:	f00b f9b2 	bl	1b302 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ff9e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    ffa2:	42bb      	cmp	r3, r7
    ffa4:	d304      	bcc.n	ffb0 <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ffa6:	fb0c 7206 	mla	r2, ip, r6, r7
    ffaa:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ffac:	4293      	cmp	r3, r2
    ffae:	d90e      	bls.n	ffce <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
    ffb0:	4434      	add	r4, r6
    ffb2:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ffb4:	4614      	mov	r4, r2
    ffb6:	3108      	adds	r1, #8
    ffb8:	e7e4      	b.n	ff84 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ffba:	fb0c 7805 	mla	r8, ip, r5, r7
    ffbe:	4543      	cmp	r3, r8
    ffc0:	d00a      	beq.n	ffd8 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ffc2:	3501      	adds	r5, #1
    ffc4:	1962      	adds	r2, r4, r5
    ffc6:	42b5      	cmp	r5, r6
    ffc8:	b292      	uxth	r2, r2
    ffca:	d1f6      	bne.n	ffba <bt_gatt_attr_get_handle+0x4e>
    ffcc:	e7f2      	b.n	ffb4 <bt_gatt_attr_get_handle+0x48>
    ffce:	2500      	movs	r5, #0
    ffd0:	e7f8      	b.n	ffc4 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ffd2:	d3e4      	bcc.n	ff9e <bt_gatt_attr_get_handle+0x32>
}
    ffd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffd8:	4610      	mov	r0, r2
    ffda:	e7fb      	b.n	ffd4 <bt_gatt_attr_get_handle+0x68>
    ffdc:	0001f8dc 	.word	0x0001f8dc
    ffe0:	000241c1 	.word	0x000241c1
    ffe4:	000221f8 	.word	0x000221f8
    ffe8:	0001f8f4 	.word	0x0001f8f4

0000ffec <bt_gatt_foreach_attr_type>:
{
    ffec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fff0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    fff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
    fff6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    fffa:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
    fffc:	2d00      	cmp	r5, #0
    fffe:	bf08      	it	eq
   10000:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   10002:	4b29      	ldr	r3, [pc, #164]	; (100a8 <bt_gatt_foreach_attr_type+0xbc>)
{
   10004:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   10006:	881b      	ldrh	r3, [r3, #0]
{
   10008:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1000a:	4283      	cmp	r3, r0
   1000c:	d232      	bcs.n	10074 <bt_gatt_foreach_attr_type+0x88>
}
   1000e:	b003      	add	sp, #12
   10010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10014:	4640      	mov	r0, r8
   10016:	5889      	ldr	r1, [r1, r2]
   10018:	9301      	str	r3, [sp, #4]
   1001a:	f00c f804 	bl	1c026 <bt_uuid_cmp>
   1001e:	9b01      	ldr	r3, [sp, #4]
   10020:	b190      	cbz	r0, 10048 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   10022:	3401      	adds	r4, #1
   10024:	f10a 0a01 	add.w	sl, sl, #1
   10028:	b2a4      	uxth	r4, r4
   1002a:	6873      	ldr	r3, [r6, #4]
   1002c:	4553      	cmp	r3, sl
   1002e:	d92c      	bls.n	1008a <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   10030:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10032:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   10034:	429c      	cmp	r4, r3
   10036:	d8ea      	bhi.n	1000e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   10038:	42bc      	cmp	r4, r7
   1003a:	d3f2      	bcc.n	10022 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1003c:	fb0b f20a 	mul.w	r2, fp, sl
   10040:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10042:	f1b8 0f00 	cmp.w	r8, #0
   10046:	d1e5      	bne.n	10014 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   10048:	f1b9 0f00 	cmp.w	r9, #0
   1004c:	d10b      	bne.n	10066 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1004e:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   10050:	4618      	mov	r0, r3
	*num_matches -= 1;
   10052:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   10054:	4621      	mov	r1, r4
   10056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1005a:	4798      	blx	r3
	if (!*num_matches) {
   1005c:	2d00      	cmp	r5, #0
   1005e:	d0d6      	beq.n	1000e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10060:	2800      	cmp	r0, #0
   10062:	d1de      	bne.n	10022 <bt_gatt_foreach_attr_type+0x36>
   10064:	e7d3      	b.n	1000e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   10066:	68da      	ldr	r2, [r3, #12]
   10068:	4591      	cmp	r9, r2
   1006a:	d1da      	bne.n	10022 <bt_gatt_foreach_attr_type+0x36>
   1006c:	e7ef      	b.n	1004e <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1006e:	f04f 0a00 	mov.w	sl, #0
   10072:	e7da      	b.n	1002a <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   10074:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10076:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1007a:	4e0c      	ldr	r6, [pc, #48]	; (100ac <bt_gatt_foreach_attr_type+0xc0>)
   1007c:	e006      	b.n	1008c <bt_gatt_foreach_attr_type+0xa0>
   1007e:	d2c6      	bcs.n	1000e <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   10080:	6873      	ldr	r3, [r6, #4]
   10082:	4423      	add	r3, r4
   10084:	42bb      	cmp	r3, r7
   10086:	d2f2      	bcs.n	1006e <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   10088:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1008a:	3608      	adds	r6, #8
   1008c:	4b08      	ldr	r3, [pc, #32]	; (100b0 <bt_gatt_foreach_attr_type+0xc4>)
   1008e:	429e      	cmp	r6, r3
   10090:	d9f5      	bls.n	1007e <bt_gatt_foreach_attr_type+0x92>
   10092:	4908      	ldr	r1, [pc, #32]	; (100b4 <bt_gatt_foreach_attr_type+0xc8>)
   10094:	4808      	ldr	r0, [pc, #32]	; (100b8 <bt_gatt_foreach_attr_type+0xcc>)
   10096:	f240 7221 	movw	r2, #1825	; 0x721
   1009a:	f00b f939 	bl	1b310 <assert_print>
   1009e:	f240 7121 	movw	r1, #1825	; 0x721
   100a2:	4804      	ldr	r0, [pc, #16]	; (100b4 <bt_gatt_foreach_attr_type+0xc8>)
   100a4:	f00b f92d 	bl	1b302 <assert_post_action>
   100a8:	200071ce 	.word	0x200071ce
   100ac:	0001f8dc 	.word	0x0001f8dc
   100b0:	0001f8f4 	.word	0x0001f8f4
   100b4:	000241c1 	.word	0x000241c1
   100b8:	000221f8 	.word	0x000221f8

000100bc <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   100bc:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   100be:	b510      	push	{r4, lr}
   100c0:	b0c8      	sub	sp, #288	; 0x120
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   100c2:	4669      	mov	r1, sp
   100c4:	aa1c      	add	r2, sp, #112	; 0x70
   100c6:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   100c8:	e9cd 3300 	strd	r3, r3, [sp]
   100cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   100d0:	f00b fc99 	bl	1ba06 <tc_cmac_setup>
   100d4:	b928      	cbnz	r0, 100e2 <db_hash_gen.constprop.0+0x26>
		LOG_ERR("Unable to setup AES CMAC");
   100d6:	2145      	movs	r1, #69	; 0x45
   100d8:	4814      	ldr	r0, [pc, #80]	; (1012c <db_hash_gen.constprop.0+0x70>)
		LOG_ERR("Unable to calculate hash");
   100da:	f00b f92d 	bl	1b338 <z_log_minimal_printk>
}
   100de:	b048      	add	sp, #288	; 0x120
   100e0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   100e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   100e6:	2001      	movs	r0, #1
   100e8:	4a11      	ldr	r2, [pc, #68]	; (10130 <db_hash_gen.constprop.0+0x74>)
   100ea:	ab04      	add	r3, sp, #16
   100ec:	f00d f985 	bl	1d3fa <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   100f0:	4810      	ldr	r0, [pc, #64]	; (10134 <db_hash_gen.constprop.0+0x78>)
   100f2:	a904      	add	r1, sp, #16
   100f4:	f00b fd1c 	bl	1bb30 <tc_cmac_final>
   100f8:	b910      	cbnz	r0, 10100 <db_hash_gen.constprop.0+0x44>
		LOG_ERR("Unable to calculate hash");
   100fa:	2145      	movs	r1, #69	; 0x45
   100fc:	480e      	ldr	r0, [pc, #56]	; (10138 <db_hash_gen.constprop.0+0x7c>)
   100fe:	e7ec      	b.n	100da <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   10100:	2208      	movs	r2, #8
   10102:	4b0c      	ldr	r3, [pc, #48]	; (10134 <db_hash_gen.constprop.0+0x78>)
   10104:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   10108:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1010a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1010e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   10110:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   10114:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   10116:	d1f7      	bne.n	10108 <db_hash_gen.constprop.0+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10118:	4b08      	ldr	r3, [pc, #32]	; (1013c <db_hash_gen.constprop.0+0x80>)
   1011a:	e8d3 1fef 	ldaex	r1, [r3]
   1011e:	f041 0104 	orr.w	r1, r1, #4
   10122:	e8c3 1fe2 	stlex	r2, r1, [r3]
   10126:	2a00      	cmp	r2, #0
   10128:	d0d9      	beq.n	100de <db_hash_gen.constprop.0+0x22>
   1012a:	e7f6      	b.n	1011a <db_hash_gen.constprop.0+0x5e>
   1012c:	000241f1 	.word	0x000241f1
   10130:	0001d0d7 	.word	0x0001d0d7
   10134:	20005dc0 	.word	0x20005dc0
   10138:	0002420f 	.word	0x0002420f
   1013c:	20005e78 	.word	0x20005e78

00010140 <db_hash_read>:
{
   10140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   10144:	4914      	ldr	r1, [pc, #80]	; (10198 <db_hash_read+0x58>)
{
   10146:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   10148:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1014c:	4614      	mov	r4, r2
   1014e:	461d      	mov	r5, r3
   10150:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   10154:	f007 f966 	bl	17424 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10158:	4b10      	ldr	r3, [pc, #64]	; (1019c <db_hash_read+0x5c>)
   1015a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1015e:	0759      	lsls	r1, r3, #29
   10160:	d401      	bmi.n	10166 <db_hash_read+0x26>
		db_hash_gen(true);
   10162:	f7ff ffab 	bl	100bc <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   10166:	4630      	mov	r0, r6
   10168:	f7ff fcf4 	bl	fb54 <find_cf_cfg>
	if (cfg &&
   1016c:	b150      	cbz	r0, 10184 <db_hash_read+0x44>
   1016e:	7a03      	ldrb	r3, [r0, #8]
   10170:	07da      	lsls	r2, r3, #31
   10172:	d507      	bpl.n	10184 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   10174:	300c      	adds	r0, #12
   10176:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   1017a:	07db      	lsls	r3, r3, #31
   1017c:	d402      	bmi.n	10184 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1017e:	2101      	movs	r1, #1
   10180:	f00d f8b9 	bl	1d2f6 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   10184:	2310      	movs	r3, #16
   10186:	463a      	mov	r2, r7
   10188:	9306      	str	r3, [sp, #24]
   1018a:	4629      	mov	r1, r5
   1018c:	4620      	mov	r0, r4
}
   1018e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   10192:	4b03      	ldr	r3, [pc, #12]	; (101a0 <db_hash_read+0x60>)
   10194:	f00d b818 	b.w	1d1c8 <bt_gatt_attr_read.constprop.0>
   10198:	20005e00 	.word	0x20005e00
   1019c:	20005e78 	.word	0x20005e78
   101a0:	20005dc0 	.word	0x20005dc0

000101a4 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   101a4:	2300      	movs	r3, #0
{
   101a6:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   101a8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   101aa:	f7ff fedf 	bl	ff6c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   101ae:	1c41      	adds	r1, r0, #1
   101b0:	b289      	uxth	r1, r1
   101b2:	4608      	mov	r0, r1
   101b4:	4a03      	ldr	r2, [pc, #12]	; (101c4 <bt_gatt_attr_next+0x20>)
   101b6:	ab01      	add	r3, sp, #4
   101b8:	f00d f91f 	bl	1d3fa <bt_gatt_foreach_attr>
}
   101bc:	9801      	ldr	r0, [sp, #4]
   101be:	b003      	add	sp, #12
   101c0:	f85d fb04 	ldr.w	pc, [sp], #4
   101c4:	0001d08f 	.word	0x0001d08f

000101c8 <bt_gatt_find_by_uuid>:
	struct bt_gatt_attr *found = NULL;
   101c8:	2300      	movs	r3, #0
{
   101ca:	b530      	push	{r4, r5, lr}
   101cc:	b087      	sub	sp, #28
   101ce:	460c      	mov	r4, r1
   101d0:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
   101d2:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
   101d4:	f00d f8ca 	bl	1d36c <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
   101d8:	b178      	cbz	r0, 101fa <bt_gatt_find_by_uuid+0x32>
   101da:	b174      	cbz	r4, 101fa <bt_gatt_find_by_uuid+0x32>
   101dc:	1901      	adds	r1, r0, r4
   101de:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
   101e0:	ab05      	add	r3, sp, #20
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	4b06      	ldr	r3, [pc, #24]	; (10200 <bt_gatt_find_by_uuid+0x38>)
   101e6:	462a      	mov	r2, r5
   101e8:	9301      	str	r3, [sp, #4]
   101ea:	2301      	movs	r3, #1
   101ec:	9300      	str	r3, [sp, #0]
   101ee:	2300      	movs	r3, #0
   101f0:	f7ff fefc 	bl	ffec <bt_gatt_foreach_attr_type>
}
   101f4:	9805      	ldr	r0, [sp, #20]
   101f6:	b007      	add	sp, #28
   101f8:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
   101fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   101fe:	e7ef      	b.n	101e0 <bt_gatt_find_by_uuid+0x18>
   10200:	0001d08f 	.word	0x0001d08f

00010204 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   10204:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10208:	460c      	mov	r4, r1
   1020a:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1020c:	4605      	mov	r5, r0
   1020e:	b950      	cbnz	r0, 10226 <bt_gatt_is_subscribed+0x22>
   10210:	4953      	ldr	r1, [pc, #332]	; (10360 <bt_gatt_is_subscribed+0x15c>)
   10212:	f640 424d 	movw	r2, #3149	; 0xc4d
   10216:	4853      	ldr	r0, [pc, #332]	; (10364 <bt_gatt_is_subscribed+0x160>)
   10218:	f00b f87a 	bl	1b310 <assert_print>
   1021c:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   10220:	484f      	ldr	r0, [pc, #316]	; (10360 <bt_gatt_is_subscribed+0x15c>)
   10222:	f00b f86e 	bl	1b302 <assert_post_action>
   10226:	b941      	cbnz	r1, 1023a <bt_gatt_is_subscribed+0x36>
   10228:	494d      	ldr	r1, [pc, #308]	; (10360 <bt_gatt_is_subscribed+0x15c>)
   1022a:	f640 424e 	movw	r2, #3150	; 0xc4e
   1022e:	484d      	ldr	r0, [pc, #308]	; (10364 <bt_gatt_is_subscribed+0x160>)
   10230:	f00b f86e 	bl	1b310 <assert_print>
   10234:	f640 414e 	movw	r1, #3150	; 0xc4e
   10238:	e7f2      	b.n	10220 <bt_gatt_is_subscribed+0x1c>

	if (conn->state != BT_CONN_CONNECTED) {
   1023a:	7a83      	ldrb	r3, [r0, #10]
   1023c:	2b07      	cmp	r3, #7
   1023e:	d110      	bne.n	10262 <bt_gatt_is_subscribed+0x5e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   10240:	2300      	movs	r3, #0
   10242:	f88d 300c 	strb.w	r3, [sp, #12]
   10246:	f642 0303 	movw	r3, #10243	; 0x2803
   1024a:	6820      	ldr	r0, [r4, #0]
   1024c:	a903      	add	r1, sp, #12
   1024e:	f8ad 300e 	strh.w	r3, [sp, #14]
   10252:	f00b fee8 	bl	1c026 <bt_uuid_cmp>
   10256:	b9b0      	cbnz	r0, 10286 <bt_gatt_is_subscribed+0x82>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   10258:	68e3      	ldr	r3, [r4, #12]
   1025a:	799b      	ldrb	r3, [r3, #6]
   1025c:	f013 0f30 	tst.w	r3, #48	; 0x30
   10260:	d103      	bne.n	1026a <bt_gatt_is_subscribed+0x66>
		return false;
   10262:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   10264:	b004      	add	sp, #16
   10266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1026a:	4620      	mov	r0, r4
   1026c:	f7ff ff9a 	bl	101a4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   10270:	4604      	mov	r4, r0
   10272:	b940      	cbnz	r0, 10286 <bt_gatt_is_subscribed+0x82>
   10274:	493a      	ldr	r1, [pc, #232]	; (10360 <bt_gatt_is_subscribed+0x15c>)
   10276:	f640 425f 	movw	r2, #3167	; 0xc5f
   1027a:	483a      	ldr	r0, [pc, #232]	; (10364 <bt_gatt_is_subscribed+0x160>)
   1027c:	f00b f848 	bl	1b310 <assert_print>
   10280:	f640 415f 	movw	r1, #3167	; 0xc5f
   10284:	e7cc      	b.n	10220 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   10286:	2300      	movs	r3, #0
   10288:	6820      	ldr	r0, [r4, #0]
   1028a:	f88d 300c 	strb.w	r3, [sp, #12]
   1028e:	f642 1302 	movw	r3, #10498	; 0x2902
   10292:	a903      	add	r1, sp, #12
   10294:	f8ad 300e 	strh.w	r3, [sp, #14]
   10298:	f00b fec5 	bl	1c026 <bt_uuid_cmp>
   1029c:	b168      	cbz	r0, 102ba <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   1029e:	4620      	mov	r0, r4
   102a0:	f7ff ff80 	bl	101a4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   102a4:	4604      	mov	r4, r0
   102a6:	b940      	cbnz	r0, 102ba <bt_gatt_is_subscribed+0xb6>
   102a8:	492d      	ldr	r1, [pc, #180]	; (10360 <bt_gatt_is_subscribed+0x15c>)
   102aa:	f640 4265 	movw	r2, #3173	; 0xc65
   102ae:	482d      	ldr	r0, [pc, #180]	; (10364 <bt_gatt_is_subscribed+0x160>)
   102b0:	f00b f82e 	bl	1b310 <assert_print>
   102b4:	f640 4165 	movw	r1, #3173	; 0xc65
   102b8:	e7b2      	b.n	10220 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   102ba:	2600      	movs	r6, #0
   102bc:	f642 1802 	movw	r8, #10498	; 0x2902
   102c0:	6820      	ldr	r0, [r4, #0]
   102c2:	4669      	mov	r1, sp
   102c4:	f88d 6000 	strb.w	r6, [sp]
   102c8:	f8ad 8002 	strh.w	r8, [sp, #2]
   102cc:	f00b feab 	bl	1c026 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   102d0:	b9d8      	cbnz	r0, 1030a <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   102d2:	2300      	movs	r3, #0
   102d4:	6820      	ldr	r0, [r4, #0]
   102d6:	f88d 300c 	strb.w	r3, [sp, #12]
   102da:	f642 1302 	movw	r3, #10498	; 0x2902
   102de:	a903      	add	r1, sp, #12
   102e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   102e4:	f00b fe9f 	bl	1c026 <bt_uuid_cmp>
   102e8:	2800      	cmp	r0, #0
   102ea:	d1ba      	bne.n	10262 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   102ec:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   102ee:	4628      	mov	r0, r5
   102f0:	4622      	mov	r2, r4
   102f2:	f812 1b01 	ldrb.w	r1, [r2], #1
   102f6:	f00c fa14 	bl	1c722 <bt_conn_is_peer_addr_le>
   102fa:	2800      	cmp	r0, #0
   102fc:	d0b1      	beq.n	10262 <bt_gatt_is_subscribed+0x5e>
   102fe:	8923      	ldrh	r3, [r4, #8]
   10300:	421f      	tst	r7, r3
   10302:	bf14      	ite	ne
   10304:	2001      	movne	r0, #1
   10306:	2000      	moveq	r0, #0
   10308:	e7ac      	b.n	10264 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1030a:	f642 0303 	movw	r3, #10243	; 0x2803
   1030e:	6820      	ldr	r0, [r4, #0]
   10310:	a901      	add	r1, sp, #4
   10312:	f88d 6004 	strb.w	r6, [sp, #4]
   10316:	f8ad 3006 	strh.w	r3, [sp, #6]
   1031a:	f00b fe84 	bl	1c026 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1031e:	2800      	cmp	r0, #0
   10320:	d0d7      	beq.n	102d2 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   10322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10326:	6820      	ldr	r0, [r4, #0]
   10328:	a902      	add	r1, sp, #8
   1032a:	f88d 6008 	strb.w	r6, [sp, #8]
   1032e:	f8ad 300a 	strh.w	r3, [sp, #10]
   10332:	f00b fe78 	bl	1c026 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   10336:	2800      	cmp	r0, #0
   10338:	d0cb      	beq.n	102d2 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1033a:	f642 0301 	movw	r3, #10241	; 0x2801
   1033e:	6820      	ldr	r0, [r4, #0]
   10340:	a903      	add	r1, sp, #12
   10342:	f88d 600c 	strb.w	r6, [sp, #12]
   10346:	f8ad 300e 	strh.w	r3, [sp, #14]
   1034a:	f00b fe6c 	bl	1c026 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1034e:	2800      	cmp	r0, #0
   10350:	d0bf      	beq.n	102d2 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   10352:	4620      	mov	r0, r4
   10354:	f7ff ff26 	bl	101a4 <bt_gatt_attr_next>
		if (!attr) {
   10358:	4604      	mov	r4, r0
   1035a:	2800      	cmp	r0, #0
   1035c:	d1b0      	bne.n	102c0 <bt_gatt_is_subscribed+0xbc>
   1035e:	e780      	b.n	10262 <bt_gatt_is_subscribed+0x5e>
   10360:	000241c1 	.word	0x000241c1
   10364:	000221f8 	.word	0x000221f8

00010368 <gatt_indicate>:
{
   10368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1036c:	4615      	mov	r5, r2
   1036e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   10370:	2294      	movs	r2, #148	; 0x94
   10372:	6869      	ldr	r1, [r5, #4]
{
   10374:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   10376:	f00d f84d 	bl	1d414 <bt_gatt_check_perm>
   1037a:	4680      	mov	r8, r0
   1037c:	b140      	cbz	r0, 10390 <gatt_indicate+0x28>
		LOG_WRN("Link is not encrypted");
   1037e:	2157      	movs	r1, #87	; 0x57
   10380:	482a      	ldr	r0, [pc, #168]	; (1042c <gatt_indicate+0xc4>)
   10382:	f00a ffd9 	bl	1b338 <z_log_minimal_printk>
		return -EPERM;
   10386:	f04f 35ff 	mov.w	r5, #4294967295
}
   1038a:	4628      	mov	r0, r5
   1038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   10390:	2202      	movs	r2, #2
   10392:	4630      	mov	r0, r6
   10394:	6869      	ldr	r1, [r5, #4]
   10396:	f7ff ff35 	bl	10204 <bt_gatt_is_subscribed>
   1039a:	b930      	cbnz	r0, 103aa <gatt_indicate+0x42>
			LOG_WRN("Device is not subscribed to characteristic");
   1039c:	2157      	movs	r1, #87	; 0x57
   1039e:	4824      	ldr	r0, [pc, #144]	; (10430 <gatt_indicate+0xc8>)
   103a0:	f00a ffca 	bl	1b338 <z_log_minimal_printk>
			return -EINVAL;
   103a4:	f06f 0515 	mvn.w	r5, #21
   103a8:	e7ef      	b.n	1038a <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   103aa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   103ae:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   103b0:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   103b2:	f7ff fa5b 	bl	f86c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   103b6:	3702      	adds	r7, #2
	if (!req) {
   103b8:	4604      	mov	r4, r0
   103ba:	b180      	cbz	r0, 103de <gatt_indicate+0x76>
	req->func = func;
   103bc:	4b1d      	ldr	r3, [pc, #116]	; (10434 <gatt_indicate+0xcc>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   103be:	463a      	mov	r2, r7
	req->func = func;
   103c0:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   103c2:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   103c4:	211d      	movs	r1, #29
   103c6:	4630      	mov	r0, r6
   103c8:	f7fe ff8a 	bl	f2e0 <bt_att_create_pdu>
	if (!buf) {
   103cc:	4607      	mov	r7, r0
   103ce:	b948      	cbnz	r0, 103e4 <gatt_indicate+0x7c>
		LOG_WRN("No buffer available to send indication");
   103d0:	4819      	ldr	r0, [pc, #100]	; (10438 <gatt_indicate+0xd0>)
   103d2:	2157      	movs	r1, #87	; 0x57
   103d4:	f00a ffb0 	bl	1b338 <z_log_minimal_printk>
		bt_att_req_free(req);
   103d8:	4620      	mov	r0, r4
   103da:	f7ff fa6b 	bl	f8b4 <bt_att_req_free>
		return -ENOMEM;
   103de:	f06f 050b 	mvn.w	r5, #11
   103e2:	e7d2      	b.n	1038a <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   103e4:	2301      	movs	r3, #1
   103e6:	4642      	mov	r2, r8
   103e8:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   103ea:	f107 0a0c 	add.w	sl, r7, #12
   103ee:	f00c fe47 	bl	1d080 <bt_att_set_tx_meta_data>
   103f2:	2102      	movs	r1, #2
   103f4:	4650      	mov	r0, sl
   103f6:	f000 fe09 	bl	1100c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   103fa:	4680      	mov	r8, r0
   103fc:	f828 9b02 	strh.w	r9, [r8], #2
   10400:	8aa9      	ldrh	r1, [r5, #20]
   10402:	4650      	mov	r0, sl
   10404:	f000 fe02 	bl	1100c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10408:	8aaa      	ldrh	r2, [r5, #20]
   1040a:	6929      	ldr	r1, [r5, #16]
   1040c:	4640      	mov	r0, r8
   1040e:	f00e ffd9 	bl	1f3c4 <memcpy>
	err = bt_att_req_send(conn, req);
   10412:	4621      	mov	r1, r4
   10414:	4630      	mov	r0, r6
	req->buf = buf;
   10416:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   10418:	f7ff fb6c 	bl	faf4 <bt_att_req_send>
	if (err) {
   1041c:	4605      	mov	r5, r0
   1041e:	2800      	cmp	r0, #0
   10420:	d0b3      	beq.n	1038a <gatt_indicate+0x22>
		bt_att_req_free(req);
   10422:	4620      	mov	r0, r4
   10424:	f7ff fa46 	bl	f8b4 <bt_att_req_free>
   10428:	e7af      	b.n	1038a <gatt_indicate+0x22>
   1042a:	bf00      	nop
   1042c:	0002422d 	.word	0x0002422d
   10430:	00024248 	.word	0x00024248
   10434:	0001d0a9 	.word	0x0001d0a9
   10438:	00024278 	.word	0x00024278

0001043c <bt_gatt_indicate>:
{
   1043c:	b530      	push	{r4, r5, lr}
   1043e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   10440:	460c      	mov	r4, r1
{
   10442:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   10444:	b951      	cbnz	r1, 1045c <bt_gatt_indicate+0x20>
   10446:	4942      	ldr	r1, [pc, #264]	; (10550 <bt_gatt_indicate+0x114>)
   10448:	f640 320d 	movw	r2, #2829	; 0xb0d
   1044c:	4841      	ldr	r0, [pc, #260]	; (10554 <bt_gatt_indicate+0x118>)
   1044e:	f00a ff5f 	bl	1b310 <assert_print>
   10452:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   10456:	483e      	ldr	r0, [pc, #248]	; (10550 <bt_gatt_indicate+0x114>)
   10458:	f00a ff53 	bl	1b302 <assert_post_action>
   1045c:	684b      	ldr	r3, [r1, #4]
   1045e:	b953      	cbnz	r3, 10476 <bt_gatt_indicate+0x3a>
   10460:	680b      	ldr	r3, [r1, #0]
   10462:	b943      	cbnz	r3, 10476 <bt_gatt_indicate+0x3a>
   10464:	493a      	ldr	r1, [pc, #232]	; (10550 <bt_gatt_indicate+0x114>)
   10466:	f640 320e 	movw	r2, #2830	; 0xb0e
   1046a:	483a      	ldr	r0, [pc, #232]	; (10554 <bt_gatt_indicate+0x118>)
   1046c:	f00a ff50 	bl	1b310 <assert_print>
   10470:	f640 310e 	movw	r1, #2830	; 0xb0e
   10474:	e7ef      	b.n	10456 <bt_gatt_indicate+0x1a>
   10476:	4b38      	ldr	r3, [pc, #224]	; (10558 <bt_gatt_indicate+0x11c>)
   10478:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1047c:	075a      	lsls	r2, r3, #29
   1047e:	d561      	bpl.n	10544 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   10480:	b115      	cbz	r5, 10488 <bt_gatt_indicate+0x4c>
   10482:	7aab      	ldrb	r3, [r5, #10]
   10484:	2b07      	cmp	r3, #7
   10486:	d160      	bne.n	1054a <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   10488:	6860      	ldr	r0, [r4, #4]
   1048a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1048c:	f7ff fd6e 	bl	ff6c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   10490:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   10492:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   10496:	b33a      	cbz	r2, 104e8 <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   10498:	a905      	add	r1, sp, #20
   1049a:	9102      	str	r1, [sp, #8]
   1049c:	492f      	ldr	r1, [pc, #188]	; (1055c <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   1049e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   104a0:	9101      	str	r1, [sp, #4]
   104a2:	2101      	movs	r1, #1
   104a4:	9100      	str	r1, [sp, #0]
   104a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   104aa:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   104ac:	f7ff fd9e 	bl	ffec <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   104b0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   104b2:	b91b      	cbnz	r3, 104bc <bt_gatt_indicate+0x80>
			return -ENOENT;
   104b4:	f06f 0001 	mvn.w	r0, #1
}
   104b8:	b00b      	add	sp, #44	; 0x2c
   104ba:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   104bc:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   104be:	9b05      	ldr	r3, [sp, #20]
   104c0:	a904      	add	r1, sp, #16
   104c2:	6818      	ldr	r0, [r3, #0]
   104c4:	2300      	movs	r3, #0
   104c6:	f88d 3010 	strb.w	r3, [sp, #16]
   104ca:	f642 0303 	movw	r3, #10243	; 0x2803
   104ce:	f8ad 3012 	strh.w	r3, [sp, #18]
   104d2:	f00b fda8 	bl	1c026 <bt_uuid_cmp>
   104d6:	b970      	cbnz	r0, 104f6 <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   104d8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   104da:	68c3      	ldr	r3, [r0, #12]
   104dc:	799b      	ldrb	r3, [r3, #6]
   104de:	069b      	lsls	r3, r3, #26
   104e0:	d405      	bmi.n	104ee <bt_gatt_indicate+0xb2>
			return -EINVAL;
   104e2:	f06f 0015 	mvn.w	r0, #21
   104e6:	e7e7      	b.n	104b8 <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   104e8:	2800      	cmp	r0, #0
   104ea:	d1e8      	bne.n	104be <bt_gatt_indicate+0x82>
   104ec:	e7e2      	b.n	104b4 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   104ee:	f00c ff3d 	bl	1d36c <bt_gatt_attr_value_handle>
   104f2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   104f6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   104fa:	b13d      	cbz	r5, 1050c <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   104fc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   104fe:	4601      	mov	r1, r0
   10500:	4622      	mov	r2, r4
   10502:	4628      	mov	r0, r5
		params->_ref = 1;
   10504:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   10506:	f7ff ff2f 	bl	10368 <gatt_indicate>
   1050a:	e7d5      	b.n	104b8 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   1050c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   10510:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   10512:	2302      	movs	r3, #2
   10514:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10518:	f642 1302 	movw	r3, #10498	; 0x2902
   1051c:	f8ad 3012 	strh.w	r3, [sp, #18]
   10520:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   10522:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10524:	9302      	str	r3, [sp, #8]
   10526:	4b0e      	ldr	r3, [pc, #56]	; (10560 <bt_gatt_indicate+0x124>)
   10528:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1052c:	9301      	str	r3, [sp, #4]
   1052e:	2301      	movs	r3, #1
   10530:	aa04      	add	r2, sp, #16
   10532:	9300      	str	r3, [sp, #0]
   10534:	462b      	mov	r3, r5
	data.ind_params = params;
   10536:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10538:	f88d 5010 	strb.w	r5, [sp, #16]
   1053c:	f7ff fd56 	bl	ffec <bt_gatt_foreach_attr_type>
	return data.err;
   10540:	9807      	ldr	r0, [sp, #28]
   10542:	e7b9      	b.n	104b8 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   10544:	f06f 000a 	mvn.w	r0, #10
   10548:	e7b6      	b.n	104b8 <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   1054a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1054e:	e7b3      	b.n	104b8 <bt_gatt_indicate+0x7c>
   10550:	000241c1 	.word	0x000241c1
   10554:	000221f8 	.word	0x000221f8
   10558:	20000090 	.word	0x20000090
   1055c:	0001d0cf 	.word	0x0001d0cf
   10560:	00010879 	.word	0x00010879

00010564 <sc_process>:
{
   10564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10566:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   10568:	f1a0 0120 	sub.w	r1, r0, #32
   1056c:	f100 0430 	add.w	r4, r0, #48	; 0x30
   10570:	e8d4 2faf 	lda	r2, [r4]
   10574:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10578:	0792      	lsls	r2, r2, #30
   1057a:	d50a      	bpl.n	10592 <sc_process+0x2e>
   1057c:	4917      	ldr	r1, [pc, #92]	; (105dc <sc_process+0x78>)
   1057e:	4818      	ldr	r0, [pc, #96]	; (105e0 <sc_process+0x7c>)
   10580:	f240 429a 	movw	r2, #1178	; 0x49a
   10584:	f00a fec4 	bl	1b310 <assert_print>
   10588:	f240 419a 	movw	r1, #1178	; 0x49a
   1058c:	4813      	ldr	r0, [pc, #76]	; (105dc <sc_process+0x78>)
   1058e:	f00a feb8 	bl	1b302 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   10592:	f853 2c08 	ldr.w	r2, [r3, #-8]
   10596:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10598:	e8d4 2fef 	ldaex	r2, [r4]
   1059c:	f022 0201 	bic.w	r2, r2, #1
   105a0:	e8c4 2fe5 	stlex	r5, r2, [r4]
   105a4:	2d00      	cmp	r5, #0
   105a6:	d1f7      	bne.n	10598 <sc_process+0x34>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   105a8:	4a0e      	ldr	r2, [pc, #56]	; (105e4 <sc_process+0x80>)
	sc->start = 0U;
   105aa:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   105ae:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   105b2:	4a0d      	ldr	r2, [pc, #52]	; (105e8 <sc_process+0x84>)
	sc->end = 0U;
   105b4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   105b8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   105bc:	aa01      	add	r2, sp, #4
   105be:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   105c2:	2204      	movs	r2, #4
   105c4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   105c8:	f7ff ff38 	bl	1043c <bt_gatt_indicate>
   105cc:	b918      	cbnz	r0, 105d6 <sc_process+0x72>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   105ce:	2101      	movs	r1, #1
   105d0:	4620      	mov	r0, r4
   105d2:	f00c fe90 	bl	1d2f6 <atomic_set_bit>
}
   105d6:	b003      	add	sp, #12
   105d8:	bd30      	pop	{r4, r5, pc}
   105da:	bf00      	nop
   105dc:	000241c1 	.word	0x000241c1
   105e0:	000221f8 	.word	0x000221f8
   105e4:	000201c0 	.word	0x000201c0
   105e8:	0000fe5d 	.word	0x0000fe5d

000105ec <update_ccc>:
{
   105ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   105ee:	4b2a      	ldr	r3, [pc, #168]	; (10698 <update_ccc+0xac>)
	struct bt_conn *conn = data->conn;
   105f0:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   105f2:	6882      	ldr	r2, [r0, #8]
{
   105f4:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   105f6:	429a      	cmp	r2, r3
   105f8:	d115      	bne.n	10626 <update_ccc+0x3a>
	ccc = attr->user_data;
   105fa:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   105fc:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   105fe:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   10600:	b18b      	cbz	r3, 10626 <update_ccc+0x3a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10602:	4628      	mov	r0, r5
   10604:	7831      	ldrb	r1, [r6, #0]
   10606:	f00c f88c 	bl	1c722 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1060a:	b160      	cbz	r0, 10626 <update_ccc+0x3a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1060c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   10610:	4621      	mov	r1, r4
   10612:	4628      	mov	r0, r5
   10614:	f00c fefe 	bl	1d414 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   10618:	2803      	cmp	r0, #3
   1061a:	d107      	bne.n	1062c <update_ccc+0x40>
				LOG_WRN("CCC %p not writable", attr);
   1061c:	4622      	mov	r2, r4
   1061e:	2157      	movs	r1, #87	; 0x57
   10620:	481e      	ldr	r0, [pc, #120]	; (1069c <update_ccc+0xb0>)
   10622:	f00a fe89 	bl	1b338 <z_log_minimal_printk>
}
   10626:	2001      	movs	r0, #1
   10628:	b002      	add	sp, #8
   1062a:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   1062c:	4631      	mov	r1, r6
   1062e:	4620      	mov	r0, r4
   10630:	f00c fd30 	bl	1d094 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   10634:	4b1a      	ldr	r3, [pc, #104]	; (106a0 <update_ccc+0xb4>)
   10636:	429e      	cmp	r6, r3
   10638:	d1f5      	bne.n	10626 <update_ccc+0x3a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1063a:	7a28      	ldrb	r0, [r5, #8]
   1063c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   10640:	f7ff faa0 	bl	fb84 <find_sc_cfg>
	if (!cfg) {
   10644:	2800      	cmp	r0, #0
   10646:	d0ee      	beq.n	10626 <update_ccc+0x3a>
	if (!(cfg->data.start || cfg->data.end)) {
   10648:	8902      	ldrh	r2, [r0, #8]
   1064a:	8943      	ldrh	r3, [r0, #10]
   1064c:	ea52 0103 	orrs.w	r1, r2, r3
   10650:	d0e9      	beq.n	10626 <update_ccc+0x3a>
	index = bt_conn_index(conn);
   10652:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   10654:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   10658:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1065c:	f7fd fd1a 	bl	e094 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   10660:	2318      	movs	r3, #24
   10662:	4910      	ldr	r1, [pc, #64]	; (106a4 <update_ccc+0xb8>)
   10664:	4a10      	ldr	r2, [pc, #64]	; (106a8 <update_ccc+0xbc>)
   10666:	fb03 1300 	mla	r3, r3, r0, r1
   1066a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1066c:	4a0f      	ldr	r2, [pc, #60]	; (106ac <update_ccc+0xc0>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1066e:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   10670:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   10672:	aa01      	add	r2, sp, #4
   10674:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   10676:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   10678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1067c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   10680:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   10682:	4628      	mov	r0, r5
   10684:	f7ff feda 	bl	1043c <bt_gatt_indicate>
   10688:	2800      	cmp	r0, #0
   1068a:	d0cc      	beq.n	10626 <update_ccc+0x3a>
		LOG_ERR("SC restore indication failed");
   1068c:	2145      	movs	r1, #69	; 0x45
   1068e:	4808      	ldr	r0, [pc, #32]	; (106b0 <update_ccc+0xc4>)
   10690:	f00a fe52 	bl	1b338 <z_log_minimal_printk>
   10694:	e7c7      	b.n	10626 <update_ccc+0x3a>
   10696:	bf00      	nop
   10698:	0000fbcd 	.word	0x0000fbcd
   1069c:	000242a4 	.word	0x000242a4
   106a0:	200003c8 	.word	0x200003c8
   106a4:	20006af8 	.word	0x20006af8
   106a8:	000201c0 	.word	0x000201c0
   106ac:	0001d30b 	.word	0x0001d30b
   106b0:	000242bd 	.word	0x000242bd

000106b4 <gatt_notify>:
{
   106b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106b8:	4614      	mov	r4, r2
   106ba:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   106bc:	2294      	movs	r2, #148	; 0x94
   106be:	6861      	ldr	r1, [r4, #4]
{
   106c0:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   106c2:	f00c fea7 	bl	1d414 <bt_gatt_check_perm>
   106c6:	b138      	cbz	r0, 106d8 <gatt_notify+0x24>
		LOG_WRN("Link is not encrypted");
   106c8:	4820      	ldr	r0, [pc, #128]	; (1074c <gatt_notify+0x98>)
   106ca:	2157      	movs	r1, #87	; 0x57
   106cc:	f00a fe34 	bl	1b338 <z_log_minimal_printk>
		return -EPERM;
   106d0:	f04f 30ff 	mov.w	r0, #4294967295
}
   106d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   106d8:	2201      	movs	r2, #1
   106da:	4630      	mov	r0, r6
   106dc:	6861      	ldr	r1, [r4, #4]
   106de:	f7ff fd91 	bl	10204 <bt_gatt_is_subscribed>
   106e2:	b930      	cbnz	r0, 106f2 <gatt_notify+0x3e>
			LOG_WRN("Device is not subscribed to characteristic");
   106e4:	481a      	ldr	r0, [pc, #104]	; (10750 <gatt_notify+0x9c>)
   106e6:	2157      	movs	r1, #87	; 0x57
   106e8:	f00a fe26 	bl	1b338 <z_log_minimal_printk>
			return -EINVAL;
   106ec:	f06f 0015 	mvn.w	r0, #21
   106f0:	e7f0      	b.n	106d4 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   106f2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   106f4:	211b      	movs	r1, #27
   106f6:	4630      	mov	r0, r6
   106f8:	3202      	adds	r2, #2
   106fa:	f7fe fdf1 	bl	f2e0 <bt_att_create_pdu>
	if (!buf) {
   106fe:	4605      	mov	r5, r0
   10700:	b930      	cbnz	r0, 10710 <gatt_notify+0x5c>
		LOG_WRN("No buffer available to send notification");
   10702:	4814      	ldr	r0, [pc, #80]	; (10754 <gatt_notify+0xa0>)
   10704:	2157      	movs	r1, #87	; 0x57
   10706:	f00a fe17 	bl	1b338 <z_log_minimal_printk>
		return -ENOMEM;
   1070a:	f06f 000b 	mvn.w	r0, #11
   1070e:	e7e1      	b.n	106d4 <gatt_notify+0x20>
   10710:	f100 090c 	add.w	r9, r0, #12
   10714:	2102      	movs	r1, #2
   10716:	4648      	mov	r0, r9
   10718:	f000 fc78 	bl	1100c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1071c:	4607      	mov	r7, r0
   1071e:	f827 8b02 	strh.w	r8, [r7], #2
   10722:	89a1      	ldrh	r1, [r4, #12]
   10724:	4648      	mov	r0, r9
   10726:	f000 fc71 	bl	1100c <net_buf_simple_add>
   1072a:	89a2      	ldrh	r2, [r4, #12]
   1072c:	68a1      	ldr	r1, [r4, #8]
   1072e:	4638      	mov	r0, r7
   10730:	f00e fe48 	bl	1f3c4 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   10734:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   10738:	4628      	mov	r0, r5
   1073a:	2301      	movs	r3, #1
   1073c:	f00c fca0 	bl	1d080 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   10740:	4629      	mov	r1, r5
   10742:	4630      	mov	r0, r6
}
   10744:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   10748:	f7ff b97c 	b.w	fa44 <bt_att_send>
   1074c:	0002422d 	.word	0x0002422d
   10750:	00024248 	.word	0x00024248
   10754:	000242df 	.word	0x000242df

00010758 <bt_gatt_notify_cb>:
{
   10758:	b530      	push	{r4, r5, lr}
   1075a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1075c:	460c      	mov	r4, r1
{
   1075e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   10760:	b951      	cbnz	r1, 10778 <bt_gatt_notify_cb+0x20>
   10762:	4940      	ldr	r1, [pc, #256]	; (10864 <bt_gatt_notify_cb+0x10c>)
   10764:	f640 222d 	movw	r2, #2605	; 0xa2d
   10768:	483f      	ldr	r0, [pc, #252]	; (10868 <bt_gatt_notify_cb+0x110>)
   1076a:	f00a fdd1 	bl	1b310 <assert_print>
   1076e:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   10772:	483c      	ldr	r0, [pc, #240]	; (10864 <bt_gatt_notify_cb+0x10c>)
   10774:	f00a fdc5 	bl	1b302 <assert_post_action>
   10778:	684b      	ldr	r3, [r1, #4]
   1077a:	b953      	cbnz	r3, 10792 <bt_gatt_notify_cb+0x3a>
   1077c:	680b      	ldr	r3, [r1, #0]
   1077e:	b943      	cbnz	r3, 10792 <bt_gatt_notify_cb+0x3a>
   10780:	4938      	ldr	r1, [pc, #224]	; (10864 <bt_gatt_notify_cb+0x10c>)
   10782:	f640 222e 	movw	r2, #2606	; 0xa2e
   10786:	4838      	ldr	r0, [pc, #224]	; (10868 <bt_gatt_notify_cb+0x110>)
   10788:	f00a fdc2 	bl	1b310 <assert_print>
   1078c:	f640 212e 	movw	r1, #2606	; 0xa2e
   10790:	e7ef      	b.n	10772 <bt_gatt_notify_cb+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10792:	4b36      	ldr	r3, [pc, #216]	; (1086c <bt_gatt_notify_cb+0x114>)
   10794:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10798:	075a      	lsls	r2, r3, #29
   1079a:	d55d      	bpl.n	10858 <bt_gatt_notify_cb+0x100>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1079c:	b115      	cbz	r5, 107a4 <bt_gatt_notify_cb+0x4c>
   1079e:	7aab      	ldrb	r3, [r5, #10]
   107a0:	2b07      	cmp	r3, #7
   107a2:	d15c      	bne.n	1085e <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   107a4:	6860      	ldr	r0, [r4, #4]
   107a6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   107a8:	f7ff fbe0 	bl	ff6c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   107ac:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   107ae:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   107b2:	b33a      	cbz	r2, 10804 <bt_gatt_notify_cb+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   107b4:	a905      	add	r1, sp, #20
   107b6:	9102      	str	r1, [sp, #8]
   107b8:	492d      	ldr	r1, [pc, #180]	; (10870 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   107ba:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   107bc:	9101      	str	r1, [sp, #4]
   107be:	2101      	movs	r1, #1
   107c0:	9100      	str	r1, [sp, #0]
   107c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   107c6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   107c8:	f7ff fc10 	bl	ffec <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   107cc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   107ce:	b91b      	cbnz	r3, 107d8 <bt_gatt_notify_cb+0x80>
			return -ENOENT;
   107d0:	f06f 0001 	mvn.w	r0, #1
}
   107d4:	b00b      	add	sp, #44	; 0x2c
   107d6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   107d8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   107da:	9b05      	ldr	r3, [sp, #20]
   107dc:	a904      	add	r1, sp, #16
   107de:	6818      	ldr	r0, [r3, #0]
   107e0:	2300      	movs	r3, #0
   107e2:	f88d 3010 	strb.w	r3, [sp, #16]
   107e6:	f642 0303 	movw	r3, #10243	; 0x2803
   107ea:	f8ad 3012 	strh.w	r3, [sp, #18]
   107ee:	f00b fc1a 	bl	1c026 <bt_uuid_cmp>
   107f2:	b970      	cbnz	r0, 10812 <bt_gatt_notify_cb+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   107f4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   107f6:	68c3      	ldr	r3, [r0, #12]
   107f8:	799b      	ldrb	r3, [r3, #6]
   107fa:	06db      	lsls	r3, r3, #27
   107fc:	d405      	bmi.n	1080a <bt_gatt_notify_cb+0xb2>
			return -EINVAL;
   107fe:	f06f 0015 	mvn.w	r0, #21
   10802:	e7e7      	b.n	107d4 <bt_gatt_notify_cb+0x7c>
		if (!data.handle) {
   10804:	2800      	cmp	r0, #0
   10806:	d1e8      	bne.n	107da <bt_gatt_notify_cb+0x82>
   10808:	e7e2      	b.n	107d0 <bt_gatt_notify_cb+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1080a:	f00c fdaf 	bl	1d36c <bt_gatt_attr_value_handle>
   1080e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   10812:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   10816:	b12d      	cbz	r5, 10824 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   10818:	4601      	mov	r1, r0
   1081a:	4622      	mov	r2, r4
   1081c:	4628      	mov	r0, r5
   1081e:	f7ff ff49 	bl	106b4 <gatt_notify>
   10822:	e7d7      	b.n	107d4 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   10824:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10828:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1082c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1082e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   10830:	f8ad 2012 	strh.w	r2, [sp, #18]
   10834:	aa05      	add	r2, sp, #20
   10836:	9202      	str	r2, [sp, #8]
   10838:	4a0e      	ldr	r2, [pc, #56]	; (10874 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1083a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1083e:	e9cd 3200 	strd	r3, r2, [sp]
   10842:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10846:	462b      	mov	r3, r5
   10848:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1084a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1084c:	f88d 5010 	strb.w	r5, [sp, #16]
   10850:	f7ff fbcc 	bl	ffec <bt_gatt_foreach_attr_type>
	return data.err;
   10854:	9807      	ldr	r0, [sp, #28]
   10856:	e7bd      	b.n	107d4 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   10858:	f06f 000a 	mvn.w	r0, #10
   1085c:	e7ba      	b.n	107d4 <bt_gatt_notify_cb+0x7c>
		return -ENOTCONN;
   1085e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   10862:	e7b7      	b.n	107d4 <bt_gatt_notify_cb+0x7c>
   10864:	000241c1 	.word	0x000241c1
   10868:	000221f8 	.word	0x000221f8
   1086c:	20000090 	.word	0x20000090
   10870:	0001d0cf 	.word	0x0001d0cf
   10874:	00010879 	.word	0x00010879

00010878 <notify_cb>:
{
   10878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1087a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1087c:	4b3a      	ldr	r3, [pc, #232]	; (10968 <notify_cb+0xf0>)
   1087e:	6882      	ldr	r2, [r0, #8]
{
   10880:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   10882:	429a      	cmp	r2, r3
   10884:	d002      	beq.n	1088c <notify_cb+0x14>
		return BT_GATT_ITER_CONTINUE;
   10886:	2701      	movs	r7, #1
}
   10888:	4638      	mov	r0, r7
   1088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1088c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1088e:	4b37      	ldr	r3, [pc, #220]	; (1096c <notify_cb+0xf4>)
   10890:	429e      	cmp	r6, r3
   10892:	d04f      	beq.n	10934 <notify_cb+0xbc>
		if (cfg->value != data->type) {
   10894:	8932      	ldrh	r2, [r6, #8]
   10896:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   10898:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   1089a:	429a      	cmp	r2, r3
   1089c:	d1f3      	bne.n	10886 <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1089e:	7830      	ldrb	r0, [r6, #0]
   108a0:	f7fd fd00 	bl	e2a4 <bt_conn_lookup_addr_le>
		if (!conn) {
   108a4:	4604      	mov	r4, r0
   108a6:	2800      	cmp	r0, #0
   108a8:	d0ed      	beq.n	10886 <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
   108aa:	7a83      	ldrb	r3, [r0, #10]
   108ac:	2b07      	cmp	r3, #7
   108ae:	d005      	beq.n	108bc <notify_cb+0x44>
			bt_conn_unref(conn);
   108b0:	f7fd faba 	bl	de28 <bt_conn_unref>
			continue;
   108b4:	e7e7      	b.n	10886 <notify_cb+0xe>
			bt_conn_unref(conn);
   108b6:	f7fd fab7 	bl	de28 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   108ba:	e7eb      	b.n	10894 <notify_cb+0x1c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   108bc:	6973      	ldr	r3, [r6, #20]
   108be:	b123      	cbz	r3, 108ca <notify_cb+0x52>
   108c0:	4639      	mov	r1, r7
   108c2:	4798      	blx	r3
   108c4:	b908      	cbnz	r0, 108ca <notify_cb+0x52>
			bt_conn_unref(conn);
   108c6:	4620      	mov	r0, r4
   108c8:	e7f2      	b.n	108b0 <notify_cb+0x38>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   108ca:	4639      	mov	r1, r7
   108cc:	2294      	movs	r2, #148	; 0x94
   108ce:	4620      	mov	r0, r4
   108d0:	f00c fda0 	bl	1d414 <bt_gatt_check_perm>
   108d4:	4607      	mov	r7, r0
   108d6:	b120      	cbz	r0, 108e2 <notify_cb+0x6a>
			LOG_WRN("Link is not encrypted");
   108d8:	2157      	movs	r1, #87	; 0x57
   108da:	4825      	ldr	r0, [pc, #148]	; (10970 <notify_cb+0xf8>)
   108dc:	f00a fd2c 	bl	1b338 <z_log_minimal_printk>
   108e0:	e7f1      	b.n	108c6 <notify_cb+0x4e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   108e2:	89ab      	ldrh	r3, [r5, #12]
   108e4:	2b02      	cmp	r3, #2
   108e6:	d114      	bne.n	10912 <notify_cb+0x9a>
   108e8:	8933      	ldrh	r3, [r6, #8]
   108ea:	079a      	lsls	r2, r3, #30
   108ec:	d405      	bmi.n	108fa <notify_cb+0x82>
		bt_conn_unref(conn);
   108ee:	4620      	mov	r0, r4
   108f0:	f7fd fa9a 	bl	de28 <bt_conn_unref>
		data->err = 0;
   108f4:	2300      	movs	r3, #0
   108f6:	60ab      	str	r3, [r5, #8]
   108f8:	e7c5      	b.n	10886 <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   108fa:	4620      	mov	r0, r4
   108fc:	692a      	ldr	r2, [r5, #16]
   108fe:	88a9      	ldrh	r1, [r5, #4]
   10900:	f7ff fd32 	bl	10368 <gatt_indicate>
			if (err == 0) {
   10904:	4606      	mov	r6, r0
   10906:	b978      	cbnz	r0, 10928 <notify_cb+0xb0>
				data->ind_params->_ref++;
   10908:	692a      	ldr	r2, [r5, #16]
   1090a:	7d93      	ldrb	r3, [r2, #22]
   1090c:	3301      	adds	r3, #1
   1090e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   10910:	e7ed      	b.n	108ee <notify_cb+0x76>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   10912:	2b01      	cmp	r3, #1
   10914:	d1eb      	bne.n	108ee <notify_cb+0x76>
   10916:	8933      	ldrh	r3, [r6, #8]
   10918:	07db      	lsls	r3, r3, #31
   1091a:	d5e8      	bpl.n	108ee <notify_cb+0x76>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1091c:	4620      	mov	r0, r4
   1091e:	692a      	ldr	r2, [r5, #16]
   10920:	88a9      	ldrh	r1, [r5, #4]
   10922:	f7ff fec7 	bl	106b4 <gatt_notify>
   10926:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   10928:	4620      	mov	r0, r4
   1092a:	f7fd fa7d 	bl	de28 <bt_conn_unref>
		if (err < 0) {
   1092e:	2e00      	cmp	r6, #0
   10930:	dbaa      	blt.n	10888 <notify_cb+0x10>
   10932:	e7df      	b.n	108f4 <notify_cb+0x7c>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   10934:	4c0f      	ldr	r4, [pc, #60]	; (10974 <notify_cb+0xfc>)
   10936:	4910      	ldr	r1, [pc, #64]	; (10978 <notify_cb+0x100>)
   10938:	4620      	mov	r0, r4
   1093a:	f00c fc1f 	bl	1d17c <bt_addr_le_eq>
   1093e:	2800      	cmp	r0, #0
   10940:	d1a8      	bne.n	10894 <notify_cb+0x1c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   10942:	2207      	movs	r2, #7
   10944:	4621      	mov	r1, r4
   10946:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1094a:	f7fd fce1 	bl	e310 <bt_conn_lookup_state_le>
			if (!conn) {
   1094e:	2800      	cmp	r0, #0
   10950:	d1b1      	bne.n	108b6 <notify_cb+0x3e>
				sc = (struct sc_data *)data->ind_params->data;
   10952:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   10954:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   10956:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   10958:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1095c:	8853      	ldrh	r3, [r2, #2]
   1095e:	8812      	ldrh	r2, [r2, #0]
   10960:	f7ff f9b6 	bl	fcd0 <sc_save>
				continue;
   10964:	e796      	b.n	10894 <notify_cb+0x1c>
   10966:	bf00      	nop
   10968:	0000fbcd 	.word	0x0000fbcd
   1096c:	200003c8 	.word	0x200003c8
   10970:	0002422d 	.word	0x0002422d
   10974:	200071c3 	.word	0x200071c3
   10978:	00022e27 	.word	0x00022e27

0001097c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1097c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1097e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   10980:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   10982:	466b      	mov	r3, sp
   10984:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10988:	4a03      	ldr	r2, [pc, #12]	; (10998 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   1098a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1098e:	f00c fd34 	bl	1d3fa <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   10992:	b003      	add	sp, #12
   10994:	f85d fb04 	ldr.w	pc, [sp], #4
   10998:	000105ed 	.word	0x000105ed

0001099c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1099e:	4605      	mov	r5, r0
   109a0:	460e      	mov	r6, r1
   109a2:	4617      	mov	r7, r2
	return list->head;
   109a4:	4b06      	ldr	r3, [pc, #24]	; (109c0 <bt_gatt_att_max_mtu_changed+0x24>)
   109a6:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   109a8:	b14c      	cbz	r4, 109be <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   109aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   109ae:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   109b0:	b11b      	cbz	r3, 109ba <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   109b2:	463a      	mov	r2, r7
   109b4:	4631      	mov	r1, r6
   109b6:	4628      	mov	r0, r5
   109b8:	4798      	blx	r3
	return node->next;
   109ba:	6864      	ldr	r4, [r4, #4]
   109bc:	e7f4      	b.n	109a8 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   109be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109c0:	20006b28 	.word	0x20006b28

000109c4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   109c4:	b570      	push	{r4, r5, r6, lr}
   109c6:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   109c8:	4603      	mov	r3, r0
   109ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   109ce:	2001      	movs	r0, #1
   109d0:	4a0d      	ldr	r2, [pc, #52]	; (10a08 <bt_gatt_disconnected+0x44>)
   109d2:	f00c fd12 	bl	1d3fa <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   109d6:	4620      	mov	r0, r4
   109d8:	f7ff f8bc 	bl	fb54 <find_cf_cfg>
	if (!cfg) {
   109dc:	4605      	mov	r5, r0
   109de:	b188      	cbz	r0, 10a04 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   109e0:	f104 0690 	add.w	r6, r4, #144	; 0x90
   109e4:	4631      	mov	r1, r6
   109e6:	7a20      	ldrb	r0, [r4, #8]
   109e8:	f00b fc34 	bl	1c254 <bt_addr_le_is_bonded>
   109ec:	b920      	cbnz	r0, 109f8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   109ee:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   109f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   109f4:	f7ff b958 	b.w	fca8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   109f8:	4631      	mov	r1, r6
   109fa:	1c68      	adds	r0, r5, #1
}
   109fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10a00:	f00c bbc4 	b.w	1d18c <bt_addr_le_copy>
}
   10a04:	bd70      	pop	{r4, r5, r6, pc}
   10a06:	bf00      	nop
   10a08:	0000fdbd 	.word	0x0000fdbd

00010a0c <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   10a0c:	b508      	push	{r3, lr}
   10a0e:	4602      	mov	r2, r0
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   10a10:	4807      	ldr	r0, [pc, #28]	; (10a30 <bt_smp_accept+0x24>)
   10a12:	6803      	ldr	r3, [r0, #0]
   10a14:	b923      	cbnz	r3, 10a20 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
   10a16:	4a07      	ldr	r2, [pc, #28]	; (10a34 <bt_smp_accept+0x28>)
   10a18:	6042      	str	r2, [r0, #4]

		*chan = &smp->chan;
   10a1a:	6008      	str	r0, [r1, #0]

		return 0;
   10a1c:	4618      	mov	r0, r3
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   10a1e:	bd08      	pop	{r3, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   10a20:	4805      	ldr	r0, [pc, #20]	; (10a38 <bt_smp_accept+0x2c>)
   10a22:	2145      	movs	r1, #69	; 0x45
   10a24:	f00a fc88 	bl	1b338 <z_log_minimal_printk>
   10a28:	f06f 000b 	mvn.w	r0, #11
   10a2c:	e7f7      	b.n	10a1e <bt_smp_accept+0x12>
   10a2e:	bf00      	nop
   10a30:	20006b30 	.word	0x20006b30
   10a34:	000202c4 	.word	0x000202c4
   10a38:	0002431c 	.word	0x0002431c

00010a3c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   10a3c:	2234      	movs	r2, #52	; 0x34
   10a3e:	4b02      	ldr	r3, [pc, #8]	; (10a48 <net_buf_pool_get+0xc>)
   10a40:	fb02 3000 	mla	r0, r2, r0, r3
   10a44:	4770      	bx	lr
   10a46:	bf00      	nop
   10a48:	20000910 	.word	0x20000910

00010a4c <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   10a4c:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10a4e:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   10a50:	4b06      	ldr	r3, [pc, #24]	; (10a6c <net_buf_id+0x20>)
   10a52:	fb01 3302 	mla	r3, r1, r2, r3
   10a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   10a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   10a5c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   10a5e:	331b      	adds	r3, #27
   10a60:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   10a64:	fbb0 f0f3 	udiv	r0, r0, r3
   10a68:	4770      	bx	lr
   10a6a:	bf00      	nop
   10a6c:	20000910 	.word	0x20000910

00010a70 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   10a70:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10a72:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10a74:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10a76:	4b09      	ldr	r3, [pc, #36]	; (10a9c <fixed_data_alloc+0x2c>)
   10a78:	fb04 3302 	mla	r3, r4, r2, r3
   10a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   10a7e:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10a80:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   10a82:	681a      	ldr	r2, [r3, #0]
   10a84:	4294      	cmp	r4, r2
   10a86:	bf94      	ite	ls
   10a88:	600c      	strls	r4, [r1, #0]
   10a8a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   10a8c:	e9d3 5400 	ldrd	r5, r4, [r3]
   10a90:	f7ff ffdc 	bl	10a4c <net_buf_id>
}
   10a94:	fb05 4000 	mla	r0, r5, r0, r4
   10a98:	bd38      	pop	{r3, r4, r5, pc}
   10a9a:	bf00      	nop
   10a9c:	20000910 	.word	0x20000910

00010aa0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   10aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aa4:	b085      	sub	sp, #20
   10aa6:	9103      	str	r1, [sp, #12]
   10aa8:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   10aaa:	4619      	mov	r1, r3
   10aac:	4610      	mov	r0, r2
{
   10aae:	4691      	mov	r9, r2
   10ab0:	4698      	mov	r8, r3
   10ab2:	4617      	mov	r7, r2
   10ab4:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   10ab6:	f00e fb76 	bl	1f1a6 <sys_clock_timeout_end_calc>
   10aba:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   10abe:	b93d      	cbnz	r5, 10ad0 <net_buf_alloc_len+0x30>
   10ac0:	495e      	ldr	r1, [pc, #376]	; (10c3c <net_buf_alloc_len+0x19c>)
   10ac2:	22f4      	movs	r2, #244	; 0xf4
   10ac4:	485e      	ldr	r0, [pc, #376]	; (10c40 <net_buf_alloc_len+0x1a0>)
   10ac6:	f00a fc23 	bl	1b310 <assert_print>
   10aca:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   10acc:	485b      	ldr	r0, [pc, #364]	; (10c3c <net_buf_alloc_len+0x19c>)
   10ace:	e014      	b.n	10afa <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   10ad0:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   10ad4:	f04f 0320 	mov.w	r3, #32
   10ad8:	f3ef 8b11 	mrs	fp, BASEPRI
   10adc:	f383 8812 	msr	BASEPRI_MAX, r3
   10ae0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10ae4:	4650      	mov	r0, sl
   10ae6:	f005 fc05 	bl	162f4 <z_spin_lock_valid>
   10aea:	b940      	cbnz	r0, 10afe <net_buf_alloc_len+0x5e>
   10aec:	4955      	ldr	r1, [pc, #340]	; (10c44 <net_buf_alloc_len+0x1a4>)
   10aee:	2294      	movs	r2, #148	; 0x94
   10af0:	4853      	ldr	r0, [pc, #332]	; (10c40 <net_buf_alloc_len+0x1a0>)
   10af2:	f00a fc0d 	bl	1b310 <assert_print>
   10af6:	2194      	movs	r1, #148	; 0x94
   10af8:	4852      	ldr	r0, [pc, #328]	; (10c44 <net_buf_alloc_len+0x1a4>)
   10afa:	f00a fc02 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   10afe:	4650      	mov	r0, sl
   10b00:	f005 fc14 	bl	1632c <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   10b04:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   10b06:	2b00      	cmp	r3, #0
   10b08:	d06a      	beq.n	10be0 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   10b0a:	8c2a      	ldrh	r2, [r5, #32]
   10b0c:	429a      	cmp	r2, r3
   10b0e:	d947      	bls.n	10ba0 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   10b10:	2200      	movs	r2, #0
   10b12:	2300      	movs	r3, #0
   10b14:	4628      	mov	r0, r5
   10b16:	f005 ff0f 	bl	16938 <z_impl_k_queue_get>
			if (buf) {
   10b1a:	4604      	mov	r4, r0
   10b1c:	2800      	cmp	r0, #0
   10b1e:	d03f      	beq.n	10ba0 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b20:	4650      	mov	r0, sl
   10b22:	f005 fbf5 	bl	16310 <z_spin_unlock_valid>
   10b26:	b930      	cbnz	r0, 10b36 <net_buf_alloc_len+0x96>
   10b28:	4946      	ldr	r1, [pc, #280]	; (10c44 <net_buf_alloc_len+0x1a4>)
   10b2a:	22c2      	movs	r2, #194	; 0xc2
   10b2c:	4844      	ldr	r0, [pc, #272]	; (10c40 <net_buf_alloc_len+0x1a0>)
   10b2e:	f00a fbef 	bl	1b310 <assert_print>
   10b32:	21c2      	movs	r1, #194	; 0xc2
   10b34:	e7e0      	b.n	10af8 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   10b36:	f38b 8811 	msr	BASEPRI, fp
   10b3a:	f3bf 8f6f 	isb	sy
	if (size) {
   10b3e:	9d03      	ldr	r5, [sp, #12]
   10b40:	2d00      	cmp	r5, #0
   10b42:	d06f      	beq.n	10c24 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   10b44:	ea58 0309 	orrs.w	r3, r8, r9
   10b48:	d010      	beq.n	10b6c <net_buf_alloc_len+0xcc>
   10b4a:	f1b8 3fff 	cmp.w	r8, #4294967295
   10b4e:	bf08      	it	eq
   10b50:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   10b54:	d00a      	beq.n	10b6c <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   10b56:	f007 feff 	bl	18958 <sys_clock_tick_get>
   10b5a:	9b01      	ldr	r3, [sp, #4]
   10b5c:	1a1f      	subs	r7, r3, r0
   10b5e:	9b02      	ldr	r3, [sp, #8]
   10b60:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   10b64:	2e00      	cmp	r6, #0
   10b66:	bfbc      	itt	lt
   10b68:	2700      	movlt	r7, #0
   10b6a:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   10b6c:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10b70:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   10b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10c48 <net_buf_alloc_len+0x1a8>
   10b76:	463a      	mov	r2, r7
   10b78:	fb09 8303 	mla	r3, r9, r3, r8
   10b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10b7e:	4620      	mov	r0, r4
   10b80:	681b      	ldr	r3, [r3, #0]
   10b82:	a903      	add	r1, sp, #12
   10b84:	f8d3 a000 	ldr.w	sl, [r3]
   10b88:	4633      	mov	r3, r6
   10b8a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   10b8c:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   10b8e:	2800      	cmp	r0, #0
   10b90:	d13c      	bne.n	10c0c <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   10b92:	7aa0      	ldrb	r0, [r4, #10]
   10b94:	4621      	mov	r1, r4
   10b96:	fb00 8009 	mla	r0, r0, r9, r8
   10b9a:	f00e fa4b 	bl	1f034 <k_queue_prepend>
}
   10b9e:	e030      	b.n	10c02 <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   10ba0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   10ba2:	4650      	mov	r0, sl
   10ba4:	1e63      	subs	r3, r4, #1
   10ba6:	846b      	strh	r3, [r5, #34]	; 0x22
   10ba8:	f005 fbb2 	bl	16310 <z_spin_unlock_valid>
   10bac:	2800      	cmp	r0, #0
   10bae:	d0bb      	beq.n	10b28 <net_buf_alloc_len+0x88>
   10bb0:	f38b 8811 	msr	BASEPRI, fp
   10bb4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   10bb8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   10bbc:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   10bbe:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   10bc0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   10bc2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   10bc4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   10bc8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   10bcc:	4b1e      	ldr	r3, [pc, #120]	; (10c48 <net_buf_alloc_len+0x1a8>)
   10bce:	4a1f      	ldr	r2, [pc, #124]	; (10c4c <net_buf_alloc_len+0x1ac>)
   10bd0:	1aeb      	subs	r3, r5, r3
   10bd2:	109b      	asrs	r3, r3, #2
   10bd4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   10bd6:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   10bd8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   10bdc:	72e3      	strb	r3, [r4, #11]
		goto success;
   10bde:	e7ae      	b.n	10b3e <net_buf_alloc_len+0x9e>
   10be0:	4650      	mov	r0, sl
   10be2:	f005 fb95 	bl	16310 <z_spin_unlock_valid>
   10be6:	2800      	cmp	r0, #0
   10be8:	d09e      	beq.n	10b28 <net_buf_alloc_len+0x88>
   10bea:	f38b 8811 	msr	BASEPRI, fp
   10bee:	f3bf 8f6f 	isb	sy
   10bf2:	464a      	mov	r2, r9
   10bf4:	4643      	mov	r3, r8
   10bf6:	4628      	mov	r0, r5
   10bf8:	f005 fe9e 	bl	16938 <z_impl_k_queue_get>
	if (!buf) {
   10bfc:	4604      	mov	r4, r0
   10bfe:	2800      	cmp	r0, #0
   10c00:	d19d      	bne.n	10b3e <net_buf_alloc_len+0x9e>
		return NULL;
   10c02:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   10c04:	4620      	mov	r0, r4
   10c06:	b005      	add	sp, #20
   10c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   10c0c:	9b03      	ldr	r3, [sp, #12]
   10c0e:	429d      	cmp	r5, r3
   10c10:	d909      	bls.n	10c26 <net_buf_alloc_len+0x186>
   10c12:	490a      	ldr	r1, [pc, #40]	; (10c3c <net_buf_alloc_len+0x19c>)
   10c14:	f240 1255 	movw	r2, #341	; 0x155
   10c18:	4809      	ldr	r0, [pc, #36]	; (10c40 <net_buf_alloc_len+0x1a0>)
   10c1a:	f00a fb79 	bl	1b310 <assert_print>
   10c1e:	f240 1155 	movw	r1, #341	; 0x155
   10c22:	e753      	b.n	10acc <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   10c24:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   10c26:	2300      	movs	r3, #0
	buf->ref   = 1U;
   10c28:	2201      	movs	r2, #1
	buf->frags = NULL;
   10c2a:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   10c2c:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   10c2e:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   10c30:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   10c32:	6963      	ldr	r3, [r4, #20]
   10c34:	8262      	strh	r2, [r4, #18]
   10c36:	60e3      	str	r3, [r4, #12]
}
   10c38:	e7e4      	b.n	10c04 <net_buf_alloc_len+0x164>
   10c3a:	bf00      	nop
   10c3c:	0002434d 	.word	0x0002434d
   10c40:	000221f8 	.word	0x000221f8
   10c44:	00022232 	.word	0x00022232
   10c48:	20000910 	.word	0x20000910
   10c4c:	c4ec4ec5 	.word	0xc4ec4ec5

00010c50 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   10c50:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   10c52:	b950      	cbnz	r0, 10c6a <net_buf_simple_reserve+0x1a>
   10c54:	490c      	ldr	r1, [pc, #48]	; (10c88 <net_buf_simple_reserve+0x38>)
   10c56:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   10c5a:	480c      	ldr	r0, [pc, #48]	; (10c8c <net_buf_simple_reserve+0x3c>)
   10c5c:	f00a fb58 	bl	1b310 <assert_print>
   10c60:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   10c64:	4808      	ldr	r0, [pc, #32]	; (10c88 <net_buf_simple_reserve+0x38>)
   10c66:	f00a fb4c 	bl	1b302 <assert_post_action>
   10c6a:	8883      	ldrh	r3, [r0, #4]
   10c6c:	b143      	cbz	r3, 10c80 <net_buf_simple_reserve+0x30>
   10c6e:	4906      	ldr	r1, [pc, #24]	; (10c88 <net_buf_simple_reserve+0x38>)
   10c70:	f240 12b9 	movw	r2, #441	; 0x1b9
   10c74:	4805      	ldr	r0, [pc, #20]	; (10c8c <net_buf_simple_reserve+0x3c>)
   10c76:	f00a fb4b 	bl	1b310 <assert_print>
   10c7a:	f240 11b9 	movw	r1, #441	; 0x1b9
   10c7e:	e7f1      	b.n	10c64 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   10c80:	6883      	ldr	r3, [r0, #8]
   10c82:	440b      	add	r3, r1
   10c84:	6003      	str	r3, [r0, #0]
}
   10c86:	bd08      	pop	{r3, pc}
   10c88:	0002434d 	.word	0x0002434d
   10c8c:	000221f8 	.word	0x000221f8

00010c90 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   10c90:	b570      	push	{r4, r5, r6, lr}
   10c92:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   10c94:	4605      	mov	r5, r0
   10c96:	b950      	cbnz	r0, 10cae <net_buf_slist_put+0x1e>
   10c98:	4922      	ldr	r1, [pc, #136]	; (10d24 <net_buf_slist_put+0x94>)
   10c9a:	f240 12c5 	movw	r2, #453	; 0x1c5
   10c9e:	4822      	ldr	r0, [pc, #136]	; (10d28 <net_buf_slist_put+0x98>)
   10ca0:	f00a fb36 	bl	1b310 <assert_print>
   10ca4:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   10ca8:	481e      	ldr	r0, [pc, #120]	; (10d24 <net_buf_slist_put+0x94>)
   10caa:	f00a fb2a 	bl	1b302 <assert_post_action>
   10cae:	b941      	cbnz	r1, 10cc2 <net_buf_slist_put+0x32>
   10cb0:	491c      	ldr	r1, [pc, #112]	; (10d24 <net_buf_slist_put+0x94>)
   10cb2:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   10cb6:	481c      	ldr	r0, [pc, #112]	; (10d28 <net_buf_slist_put+0x98>)
   10cb8:	f00a fb2a 	bl	1b310 <assert_print>
   10cbc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   10cc0:	e7f2      	b.n	10ca8 <net_buf_slist_put+0x18>
	__asm__ volatile(
   10cc2:	f04f 0320 	mov.w	r3, #32
   10cc6:	f3ef 8611 	mrs	r6, BASEPRI
   10cca:	f383 8812 	msr	BASEPRI_MAX, r3
   10cce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10cd2:	4816      	ldr	r0, [pc, #88]	; (10d2c <net_buf_slist_put+0x9c>)
   10cd4:	f005 fb0e 	bl	162f4 <z_spin_lock_valid>
   10cd8:	b938      	cbnz	r0, 10cea <net_buf_slist_put+0x5a>
   10cda:	4915      	ldr	r1, [pc, #84]	; (10d30 <net_buf_slist_put+0xa0>)
   10cdc:	2294      	movs	r2, #148	; 0x94
   10cde:	4812      	ldr	r0, [pc, #72]	; (10d28 <net_buf_slist_put+0x98>)
   10ce0:	f00a fb16 	bl	1b310 <assert_print>
   10ce4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ce6:	4812      	ldr	r0, [pc, #72]	; (10d30 <net_buf_slist_put+0xa0>)
   10ce8:	e7df      	b.n	10caa <net_buf_slist_put+0x1a>
	z_spin_lock_set_owner(l);
   10cea:	4810      	ldr	r0, [pc, #64]	; (10d2c <net_buf_slist_put+0x9c>)
   10cec:	f005 fb1e 	bl	1632c <z_spin_lock_set_owner>
	parent->next = child;
   10cf0:	2300      	movs	r3, #0
   10cf2:	6023      	str	r3, [r4, #0]
	return list->tail;
   10cf4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   10cf6:	b963      	cbnz	r3, 10d12 <net_buf_slist_put+0x82>
	list->head = node;
   10cf8:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10cfc:	480b      	ldr	r0, [pc, #44]	; (10d2c <net_buf_slist_put+0x9c>)
   10cfe:	f005 fb07 	bl	16310 <z_spin_unlock_valid>
   10d02:	b948      	cbnz	r0, 10d18 <net_buf_slist_put+0x88>
   10d04:	490a      	ldr	r1, [pc, #40]	; (10d30 <net_buf_slist_put+0xa0>)
   10d06:	22c2      	movs	r2, #194	; 0xc2
   10d08:	4807      	ldr	r0, [pc, #28]	; (10d28 <net_buf_slist_put+0x98>)
   10d0a:	f00a fb01 	bl	1b310 <assert_print>
   10d0e:	21c2      	movs	r1, #194	; 0xc2
   10d10:	e7e9      	b.n	10ce6 <net_buf_slist_put+0x56>
	parent->next = child;
   10d12:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10d14:	606c      	str	r4, [r5, #4]
}
   10d16:	e7f1      	b.n	10cfc <net_buf_slist_put+0x6c>
	__asm__ volatile(
   10d18:	f386 8811 	msr	BASEPRI, r6
   10d1c:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   10d20:	bd70      	pop	{r4, r5, r6, pc}
   10d22:	bf00      	nop
   10d24:	0002434d 	.word	0x0002434d
   10d28:	000221f8 	.word	0x000221f8
   10d2c:	20006bc4 	.word	0x20006bc4
   10d30:	00022232 	.word	0x00022232

00010d34 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   10d34:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   10d36:	4604      	mov	r4, r0
   10d38:	b950      	cbnz	r0, 10d50 <net_buf_slist_get+0x1c>
   10d3a:	491d      	ldr	r1, [pc, #116]	; (10db0 <net_buf_slist_get+0x7c>)
   10d3c:	481d      	ldr	r0, [pc, #116]	; (10db4 <net_buf_slist_get+0x80>)
   10d3e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   10d42:	f00a fae5 	bl	1b310 <assert_print>
   10d46:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   10d4a:	4819      	ldr	r0, [pc, #100]	; (10db0 <net_buf_slist_get+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10d4c:	f00a fad9 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   10d50:	f04f 0320 	mov.w	r3, #32
   10d54:	f3ef 8611 	mrs	r6, BASEPRI
   10d58:	f383 8812 	msr	BASEPRI_MAX, r3
   10d5c:	f3bf 8f6f 	isb	sy
   10d60:	4815      	ldr	r0, [pc, #84]	; (10db8 <net_buf_slist_get+0x84>)
   10d62:	f005 fac7 	bl	162f4 <z_spin_lock_valid>
   10d66:	b938      	cbnz	r0, 10d78 <net_buf_slist_get+0x44>
   10d68:	4914      	ldr	r1, [pc, #80]	; (10dbc <net_buf_slist_get+0x88>)
   10d6a:	2294      	movs	r2, #148	; 0x94
   10d6c:	4811      	ldr	r0, [pc, #68]	; (10db4 <net_buf_slist_get+0x80>)
   10d6e:	f00a facf 	bl	1b310 <assert_print>
   10d72:	2194      	movs	r1, #148	; 0x94
   10d74:	4811      	ldr	r0, [pc, #68]	; (10dbc <net_buf_slist_get+0x88>)
   10d76:	e7e9      	b.n	10d4c <net_buf_slist_get+0x18>
	z_spin_lock_set_owner(l);
   10d78:	480f      	ldr	r0, [pc, #60]	; (10db8 <net_buf_slist_get+0x84>)
   10d7a:	f005 fad7 	bl	1632c <z_spin_lock_set_owner>
	return list->head;
   10d7e:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   10d80:	b12d      	cbz	r5, 10d8e <net_buf_slist_get+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10d82:	6862      	ldr	r2, [r4, #4]
	return node->next;
   10d84:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10d86:	4295      	cmp	r5, r2
	list->head = node;
   10d88:	6023      	str	r3, [r4, #0]
	list->tail = node;
   10d8a:	bf08      	it	eq
   10d8c:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d8e:	480a      	ldr	r0, [pc, #40]	; (10db8 <net_buf_slist_get+0x84>)
   10d90:	f005 fabe 	bl	16310 <z_spin_unlock_valid>
   10d94:	b930      	cbnz	r0, 10da4 <net_buf_slist_get+0x70>
   10d96:	4909      	ldr	r1, [pc, #36]	; (10dbc <net_buf_slist_get+0x88>)
   10d98:	22c2      	movs	r2, #194	; 0xc2
   10d9a:	4806      	ldr	r0, [pc, #24]	; (10db4 <net_buf_slist_get+0x80>)
   10d9c:	f00a fab8 	bl	1b310 <assert_print>
   10da0:	21c2      	movs	r1, #194	; 0xc2
   10da2:	e7e7      	b.n	10d74 <net_buf_slist_get+0x40>
	__asm__ volatile(
   10da4:	f386 8811 	msr	BASEPRI, r6
   10da8:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   10dac:	4628      	mov	r0, r5
   10dae:	bd70      	pop	{r4, r5, r6, pc}
   10db0:	0002434d 	.word	0x0002434d
   10db4:	000221f8 	.word	0x000221f8
   10db8:	20006bc4 	.word	0x20006bc4
   10dbc:	00022232 	.word	0x00022232

00010dc0 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   10dc0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   10dc2:	b950      	cbnz	r0, 10dda <net_buf_put+0x1a>
   10dc4:	490c      	ldr	r1, [pc, #48]	; (10df8 <net_buf_put+0x38>)
   10dc6:	f240 12df 	movw	r2, #479	; 0x1df
   10dca:	480c      	ldr	r0, [pc, #48]	; (10dfc <net_buf_put+0x3c>)
   10dcc:	f00a faa0 	bl	1b310 <assert_print>
   10dd0:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   10dd4:	4808      	ldr	r0, [pc, #32]	; (10df8 <net_buf_put+0x38>)
   10dd6:	f00a fa94 	bl	1b302 <assert_post_action>
   10dda:	b941      	cbnz	r1, 10dee <net_buf_put+0x2e>
   10ddc:	4906      	ldr	r1, [pc, #24]	; (10df8 <net_buf_put+0x38>)
   10dde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10de2:	4806      	ldr	r0, [pc, #24]	; (10dfc <net_buf_put+0x3c>)
   10de4:	f00a fa94 	bl	1b310 <assert_print>
   10de8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10dec:	e7f2      	b.n	10dd4 <net_buf_put+0x14>

	k_fifo_put(fifo, buf);
}
   10dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   10df2:	f00e b914 	b.w	1f01e <k_queue_append>
   10df6:	bf00      	nop
   10df8:	0002434d 	.word	0x0002434d
   10dfc:	000221f8 	.word	0x000221f8

00010e00 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   10e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   10e04:	4605      	mov	r5, r0
   10e06:	b328      	cbz	r0, 10e54 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   10e08:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   10e0a:	f04f 0834 	mov.w	r8, #52	; 0x34
   10e0e:	4e1a      	ldr	r6, [pc, #104]	; (10e78 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   10e10:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   10e12:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   10e14:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   10e16:	3b01      	subs	r3, #1
   10e18:	b2db      	uxtb	r3, r3
   10e1a:	7223      	strb	r3, [r4, #8]
   10e1c:	b9c3      	cbnz	r3, 10e50 <net_buf_unref+0x50>
		if (buf->__buf) {
   10e1e:	6961      	ldr	r1, [r4, #20]
   10e20:	b159      	cbz	r1, 10e3a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   10e22:	7a63      	ldrb	r3, [r4, #9]
   10e24:	07db      	lsls	r3, r3, #31
   10e26:	d407      	bmi.n	10e38 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10e28:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   10e2a:	4620      	mov	r0, r4
   10e2c:	fb08 6303 	mla	r3, r8, r3, r6
   10e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10e32:	681b      	ldr	r3, [r3, #0]
   10e34:	689b      	ldr	r3, [r3, #8]
   10e36:	4798      	blx	r3
			buf->__buf = NULL;
   10e38:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   10e3a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   10e3c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   10e3e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   10e42:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   10e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e46:	b183      	cbz	r3, 10e6a <net_buf_unref+0x6a>
			pool->destroy(buf);
   10e48:	4620      	mov	r0, r4
   10e4a:	4798      	blx	r3
	while (buf) {
   10e4c:	2d00      	cmp	r5, #0
   10e4e:	d1df      	bne.n	10e10 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   10e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   10e54:	4909      	ldr	r1, [pc, #36]	; (10e7c <net_buf_unref+0x7c>)
   10e56:	480a      	ldr	r0, [pc, #40]	; (10e80 <net_buf_unref+0x80>)
   10e58:	f240 12eb 	movw	r2, #491	; 0x1eb
   10e5c:	f00a fa58 	bl	1b310 <assert_print>
   10e60:	f240 11eb 	movw	r1, #491	; 0x1eb
   10e64:	4805      	ldr	r0, [pc, #20]	; (10e7c <net_buf_unref+0x7c>)
   10e66:	f00a fa4c 	bl	1b302 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   10e6a:	4621      	mov	r1, r4
   10e6c:	fb00 6008 	mla	r0, r0, r8, r6
   10e70:	f00e f8e0 	bl	1f034 <k_queue_prepend>
}
   10e74:	e7ea      	b.n	10e4c <net_buf_unref+0x4c>
   10e76:	bf00      	nop
   10e78:	20000910 	.word	0x20000910
   10e7c:	0002434d 	.word	0x0002434d
   10e80:	000221f8 	.word	0x000221f8

00010e84 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   10e84:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   10e86:	b950      	cbnz	r0, 10e9e <net_buf_ref+0x1a>
   10e88:	4907      	ldr	r1, [pc, #28]	; (10ea8 <net_buf_ref+0x24>)
   10e8a:	4808      	ldr	r0, [pc, #32]	; (10eac <net_buf_ref+0x28>)
   10e8c:	f240 221a 	movw	r2, #538	; 0x21a
   10e90:	f00a fa3e 	bl	1b310 <assert_print>
   10e94:	f240 211a 	movw	r1, #538	; 0x21a
   10e98:	4803      	ldr	r0, [pc, #12]	; (10ea8 <net_buf_ref+0x24>)
   10e9a:	f00a fa32 	bl	1b302 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   10e9e:	7a02      	ldrb	r2, [r0, #8]
   10ea0:	3201      	adds	r2, #1
   10ea2:	7202      	strb	r2, [r0, #8]
	return buf;
}
   10ea4:	bd08      	pop	{r3, pc}
   10ea6:	bf00      	nop
   10ea8:	0002434d 	.word	0x0002434d
   10eac:	000221f8 	.word	0x000221f8

00010eb0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   10eb0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   10eb2:	4603      	mov	r3, r0
   10eb4:	b950      	cbnz	r0, 10ecc <net_buf_frag_last+0x1c>
   10eb6:	4908      	ldr	r1, [pc, #32]	; (10ed8 <net_buf_frag_last+0x28>)
   10eb8:	4808      	ldr	r0, [pc, #32]	; (10edc <net_buf_frag_last+0x2c>)
   10eba:	f240 2257 	movw	r2, #599	; 0x257
   10ebe:	f00a fa27 	bl	1b310 <assert_print>
   10ec2:	f240 2157 	movw	r1, #599	; 0x257
   10ec6:	4804      	ldr	r0, [pc, #16]	; (10ed8 <net_buf_frag_last+0x28>)
   10ec8:	f00a fa1b 	bl	1b302 <assert_post_action>

	while (buf->frags) {
   10ecc:	4618      	mov	r0, r3
   10ece:	685b      	ldr	r3, [r3, #4]
   10ed0:	2b00      	cmp	r3, #0
   10ed2:	d1fb      	bne.n	10ecc <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   10ed4:	bd08      	pop	{r3, pc}
   10ed6:	bf00      	nop
   10ed8:	0002434d 	.word	0x0002434d
   10edc:	000221f8 	.word	0x000221f8

00010ee0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   10ee0:	b570      	push	{r4, r5, r6, lr}
   10ee2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   10ee4:	4604      	mov	r4, r0
   10ee6:	b950      	cbnz	r0, 10efe <net_buf_frag_insert+0x1e>
   10ee8:	490e      	ldr	r1, [pc, #56]	; (10f24 <net_buf_frag_insert+0x44>)
   10eea:	f240 2262 	movw	r2, #610	; 0x262
   10eee:	480e      	ldr	r0, [pc, #56]	; (10f28 <net_buf_frag_insert+0x48>)
   10ef0:	f00a fa0e 	bl	1b310 <assert_print>
   10ef4:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   10ef8:	480a      	ldr	r0, [pc, #40]	; (10f24 <net_buf_frag_insert+0x44>)
   10efa:	f00a fa02 	bl	1b302 <assert_post_action>
   10efe:	b941      	cbnz	r1, 10f12 <net_buf_frag_insert+0x32>
   10f00:	4908      	ldr	r1, [pc, #32]	; (10f24 <net_buf_frag_insert+0x44>)
   10f02:	f240 2263 	movw	r2, #611	; 0x263
   10f06:	4808      	ldr	r0, [pc, #32]	; (10f28 <net_buf_frag_insert+0x48>)
   10f08:	f00a fa02 	bl	1b310 <assert_print>
   10f0c:	f240 2163 	movw	r1, #611	; 0x263
   10f10:	e7f2      	b.n	10ef8 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   10f12:	6846      	ldr	r6, [r0, #4]
   10f14:	b11e      	cbz	r6, 10f1e <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   10f16:	4608      	mov	r0, r1
   10f18:	f7ff ffca 	bl	10eb0 <net_buf_frag_last>
   10f1c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   10f1e:	6065      	str	r5, [r4, #4]
}
   10f20:	bd70      	pop	{r4, r5, r6, pc}
   10f22:	bf00      	nop
   10f24:	0002434d 	.word	0x0002434d
   10f28:	000221f8 	.word	0x000221f8

00010f2c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   10f2c:	b538      	push	{r3, r4, r5, lr}
   10f2e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   10f30:	460c      	mov	r4, r1
   10f32:	b951      	cbnz	r1, 10f4a <net_buf_frag_add+0x1e>
   10f34:	490b      	ldr	r1, [pc, #44]	; (10f64 <net_buf_frag_add+0x38>)
   10f36:	480c      	ldr	r0, [pc, #48]	; (10f68 <net_buf_frag_add+0x3c>)
   10f38:	f240 226e 	movw	r2, #622	; 0x26e
   10f3c:	f00a f9e8 	bl	1b310 <assert_print>
   10f40:	f240 216e 	movw	r1, #622	; 0x26e
   10f44:	4807      	ldr	r0, [pc, #28]	; (10f64 <net_buf_frag_add+0x38>)
   10f46:	f00a f9dc 	bl	1b302 <assert_post_action>

	if (!head) {
   10f4a:	b920      	cbnz	r0, 10f56 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   10f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   10f50:	4608      	mov	r0, r1
   10f52:	f7ff bf97 	b.w	10e84 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   10f56:	f7ff ffab 	bl	10eb0 <net_buf_frag_last>
   10f5a:	4621      	mov	r1, r4
   10f5c:	f7ff ffc0 	bl	10ee0 <net_buf_frag_insert>
}
   10f60:	4628      	mov	r0, r5
   10f62:	bd38      	pop	{r3, r4, r5, pc}
   10f64:	0002434d 	.word	0x0002434d
   10f68:	000221f8 	.word	0x000221f8

00010f6c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   10f6c:	b508      	push	{r3, lr}
   10f6e:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   10f70:	6800      	ldr	r0, [r0, #0]
   10f72:	689a      	ldr	r2, [r3, #8]
   10f74:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   10f76:	4291      	cmp	r1, r2
   10f78:	d90a      	bls.n	10f90 <net_buf_simple_push+0x24>
   10f7a:	4908      	ldr	r1, [pc, #32]	; (10f9c <net_buf_simple_push+0x30>)
   10f7c:	4808      	ldr	r0, [pc, #32]	; (10fa0 <net_buf_simple_push+0x34>)
   10f7e:	f240 32f2 	movw	r2, #1010	; 0x3f2
   10f82:	f00a f9c5 	bl	1b310 <assert_print>
   10f86:	f240 31f2 	movw	r1, #1010	; 0x3f2
   10f8a:	4804      	ldr	r0, [pc, #16]	; (10f9c <net_buf_simple_push+0x30>)
   10f8c:	f00a f9b9 	bl	1b302 <assert_post_action>
	buf->len += len;
   10f90:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   10f92:	1a40      	subs	r0, r0, r1
	buf->len += len;
   10f94:	4411      	add	r1, r2
	buf->data -= len;
   10f96:	6018      	str	r0, [r3, #0]
	buf->len += len;
   10f98:	8099      	strh	r1, [r3, #4]
}
   10f9a:	bd08      	pop	{r3, pc}
   10f9c:	0002434d 	.word	0x0002434d
   10fa0:	000221f8 	.word	0x000221f8

00010fa4 <net_buf_simple_pull>:
{
   10fa4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   10fa6:	8882      	ldrh	r2, [r0, #4]
{
   10fa8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   10faa:	428a      	cmp	r2, r1
   10fac:	d20a      	bcs.n	10fc4 <net_buf_simple_pull+0x20>
   10fae:	4908      	ldr	r1, [pc, #32]	; (10fd0 <net_buf_simple_pull+0x2c>)
   10fb0:	4808      	ldr	r0, [pc, #32]	; (10fd4 <net_buf_simple_pull+0x30>)
   10fb2:	f240 4252 	movw	r2, #1106	; 0x452
   10fb6:	f00a f9ab 	bl	1b310 <assert_print>
   10fba:	f240 4152 	movw	r1, #1106	; 0x452
   10fbe:	4804      	ldr	r0, [pc, #16]	; (10fd0 <net_buf_simple_pull+0x2c>)
   10fc0:	f00a f99f 	bl	1b302 <assert_post_action>
	buf->len -= len;
   10fc4:	1a52      	subs	r2, r2, r1
   10fc6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   10fc8:	6800      	ldr	r0, [r0, #0]
   10fca:	4408      	add	r0, r1
   10fcc:	6018      	str	r0, [r3, #0]
}
   10fce:	bd08      	pop	{r3, pc}
   10fd0:	0002434d 	.word	0x0002434d
   10fd4:	000221f8 	.word	0x000221f8

00010fd8 <net_buf_simple_pull_mem>:
{
   10fd8:	b508      	push	{r3, lr}
   10fda:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   10fdc:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   10fde:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   10fe0:	428a      	cmp	r2, r1
   10fe2:	d20a      	bcs.n	10ffa <net_buf_simple_pull_mem+0x22>
   10fe4:	4907      	ldr	r1, [pc, #28]	; (11004 <net_buf_simple_pull_mem+0x2c>)
   10fe6:	4808      	ldr	r0, [pc, #32]	; (11008 <net_buf_simple_pull_mem+0x30>)
   10fe8:	f240 425e 	movw	r2, #1118	; 0x45e
   10fec:	f00a f990 	bl	1b310 <assert_print>
   10ff0:	f240 415e 	movw	r1, #1118	; 0x45e
   10ff4:	4803      	ldr	r0, [pc, #12]	; (11004 <net_buf_simple_pull_mem+0x2c>)
   10ff6:	f00a f984 	bl	1b302 <assert_post_action>
	buf->len -= len;
   10ffa:	1a52      	subs	r2, r2, r1
	buf->data += len;
   10ffc:	4401      	add	r1, r0
	buf->len -= len;
   10ffe:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   11000:	6019      	str	r1, [r3, #0]
}
   11002:	bd08      	pop	{r3, pc}
   11004:	0002434d 	.word	0x0002434d
   11008:	000221f8 	.word	0x000221f8

0001100c <net_buf_simple_add>:
{
   1100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1100e:	8885      	ldrh	r5, [r0, #4]
   11010:	6803      	ldr	r3, [r0, #0]
   11012:	460e      	mov	r6, r1
   11014:	4604      	mov	r4, r0
   11016:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   11018:	f00c faaf 	bl	1d57a <net_buf_simple_tailroom>
   1101c:	42b0      	cmp	r0, r6
   1101e:	d20a      	bcs.n	11036 <net_buf_simple_add+0x2a>
   11020:	4907      	ldr	r1, [pc, #28]	; (11040 <net_buf_simple_add+0x34>)
   11022:	4808      	ldr	r0, [pc, #32]	; (11044 <net_buf_simple_add+0x38>)
   11024:	f240 3203 	movw	r2, #771	; 0x303
   11028:	f00a f972 	bl	1b310 <assert_print>
   1102c:	f240 3103 	movw	r1, #771	; 0x303
   11030:	4803      	ldr	r0, [pc, #12]	; (11040 <net_buf_simple_add+0x34>)
   11032:	f00a f966 	bl	1b302 <assert_post_action>
	buf->len += len;
   11036:	4435      	add	r5, r6
   11038:	80a5      	strh	r5, [r4, #4]
}
   1103a:	4638      	mov	r0, r7
   1103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1103e:	bf00      	nop
   11040:	0002434d 	.word	0x0002434d
   11044:	000221f8 	.word	0x000221f8

00011048 <z_impl_sys_rand32_get>:
 * different values.
 *
 * @return a 32-bit number
 */
uint32_t z_impl_sys_rand32_get(void)
{
   11048:	b510      	push	{r4, lr}
   1104a:	f00c fbb3 	bl	1d7b4 <sys_clock_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1104e:	4b05      	ldr	r3, [pc, #20]	; (11064 <z_impl_sys_rand32_get+0x1c>)
   11050:	e8d3 2fef 	ldaex	r2, [r3]
   11054:	4904      	ldr	r1, [pc, #16]	; (11068 <z_impl_sys_rand32_get+0x20>)
   11056:	1851      	adds	r1, r2, r1
   11058:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1105c:	2c00      	cmp	r4, #0
   1105e:	d1f7      	bne.n	11050 <z_impl_sys_rand32_get+0x8>
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
}
   11060:	4410      	add	r0, r2
   11062:	bd10      	pop	{r4, pc}
   11064:	20006bc8 	.word	0x20006bc8
   11068:	3b9aca03 	.word	0x3b9aca03

0001106c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1106c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1106e:	2340      	movs	r3, #64	; 0x40
{
   11070:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   11072:	490a      	ldr	r1, [pc, #40]	; (1109c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11074:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   11076:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11078:	1149      	asrs	r1, r1, #5
{
   1107a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1107c:	4623      	mov	r3, r4
   1107e:	4a08      	ldr	r2, [pc, #32]	; (110a0 <onoff_start+0x34>)
   11080:	4808      	ldr	r0, [pc, #32]	; (110a4 <onoff_start+0x38>)
   11082:	f00c fab1 	bl	1d5e8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11086:	1e01      	subs	r1, r0, #0
   11088:	da05      	bge.n	11096 <onoff_start+0x2a>
		notify(mgr, err);
   1108a:	4628      	mov	r0, r5
   1108c:	4623      	mov	r3, r4
	}
}
   1108e:	b003      	add	sp, #12
   11090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   11094:	4718      	bx	r3
}
   11096:	b003      	add	sp, #12
   11098:	bd30      	pop	{r4, r5, pc}
   1109a:	bf00      	nop
   1109c:	20006be0 	.word	0x20006be0
   110a0:	0001d657 	.word	0x0001d657
   110a4:	0001f554 	.word	0x0001f554

000110a8 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   110a8:	b2c9      	uxtb	r1, r1
   110aa:	2903      	cmp	r1, #3
{
   110ac:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   110ae:	d908      	bls.n	110c2 <get_status+0x1a>
   110b0:	4908      	ldr	r1, [pc, #32]	; (110d4 <get_status+0x2c>)
   110b2:	4809      	ldr	r0, [pc, #36]	; (110d8 <get_status+0x30>)
   110b4:	227a      	movs	r2, #122	; 0x7a
   110b6:	f00a f92b 	bl	1b310 <assert_print>
   110ba:	217a      	movs	r1, #122	; 0x7a
   110bc:	4805      	ldr	r0, [pc, #20]	; (110d4 <get_status+0x2c>)
   110be:	f00a f920 	bl	1b302 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   110c2:	220c      	movs	r2, #12
   110c4:	6903      	ldr	r3, [r0, #16]
   110c6:	fb01 3302 	mla	r3, r1, r2, r3
   110ca:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   110ce:	f000 0007 	and.w	r0, r0, #7
   110d2:	bd08      	pop	{r3, pc}
   110d4:	00024379 	.word	0x00024379
   110d8:	000221f8 	.word	0x000221f8

000110dc <stop>:
{
   110dc:	b570      	push	{r4, r5, r6, lr}
   110de:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   110e0:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   110e2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   110e4:	d90a      	bls.n	110fc <stop+0x20>
   110e6:	4919      	ldr	r1, [pc, #100]	; (1114c <stop+0x70>)
   110e8:	4819      	ldr	r0, [pc, #100]	; (11150 <stop+0x74>)
   110ea:	f240 125d 	movw	r2, #349	; 0x15d
   110ee:	f00a f90f 	bl	1b310 <assert_print>
   110f2:	f240 115d 	movw	r1, #349	; 0x15d
   110f6:	4815      	ldr	r0, [pc, #84]	; (1114c <stop+0x70>)
   110f8:	f00a f903 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   110fc:	f04f 0420 	mov.w	r4, #32
   11100:	f3ef 8511 	mrs	r5, BASEPRI
   11104:	f384 8812 	msr	BASEPRI_MAX, r4
   11108:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1110c:	260c      	movs	r6, #12
   1110e:	fb06 3401 	mla	r4, r6, r1, r3
   11112:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11116:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1111a:	d008      	beq.n	1112e <stop+0x52>
   1111c:	42a2      	cmp	r2, r4
   1111e:	d006      	beq.n	1112e <stop+0x52>
	__asm__ volatile(
   11120:	f385 8811 	msr	BASEPRI, r5
   11124:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   11128:	f04f 30ff 	mov.w	r0, #4294967295
}
   1112c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1112e:	2201      	movs	r2, #1
   11130:	4371      	muls	r1, r6
   11132:	440b      	add	r3, r1
   11134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11138:	f385 8811 	msr	BASEPRI, r5
   1113c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   11140:	6843      	ldr	r3, [r0, #4]
   11142:	440b      	add	r3, r1
   11144:	685b      	ldr	r3, [r3, #4]
   11146:	4798      	blx	r3
	return 0;
   11148:	2000      	movs	r0, #0
   1114a:	e7ef      	b.n	1112c <stop+0x50>
   1114c:	00024379 	.word	0x00024379
   11150:	000221f8 	.word	0x000221f8

00011154 <onoff_stop>:
{
   11154:	b570      	push	{r4, r5, r6, lr}
   11156:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   11158:	4906      	ldr	r1, [pc, #24]	; (11174 <onoff_stop+0x20>)
{
   1115a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1115c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1115e:	1149      	asrs	r1, r1, #5
   11160:	2240      	movs	r2, #64	; 0x40
   11162:	4805      	ldr	r0, [pc, #20]	; (11178 <onoff_stop+0x24>)
   11164:	f7ff ffba 	bl	110dc <stop>
	notify(mgr, res);
   11168:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1116a:	4601      	mov	r1, r0
	notify(mgr, res);
   1116c:	4620      	mov	r0, r4
}
   1116e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11172:	4718      	bx	r3
   11174:	20006be0 	.word	0x20006be0
   11178:	0001f554 	.word	0x0001f554

0001117c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11180:	2200      	movs	r2, #0
   11182:	2101      	movs	r1, #1
{
   11184:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11186:	2005      	movs	r0, #5
   11188:	f7f8 fc2c 	bl	99e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1118c:	4811      	ldr	r0, [pc, #68]	; (111d4 <clk_init+0x58>)
   1118e:	f002 f9eb 	bl	13568 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11192:	4b11      	ldr	r3, [pc, #68]	; (111d8 <clk_init+0x5c>)
   11194:	4298      	cmp	r0, r3
   11196:	d119      	bne.n	111cc <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11198:	f002 fa08 	bl	135ac <nrfx_clock_enable>
   1119c:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1119e:	f04f 080c 	mov.w	r8, #12
   111a2:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   111a4:	f8df 9034 	ldr.w	r9, [pc, #52]	; 111dc <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   111a8:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   111aa:	4649      	mov	r1, r9
   111ac:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   111b0:	f00a f83a 	bl	1b228 <onoff_manager_init>
		if (err < 0) {
   111b4:	2800      	cmp	r0, #0
   111b6:	db07      	blt.n	111c8 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   111b8:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   111bc:	3401      	adds	r4, #1
   111be:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   111c0:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   111c4:	d1f0      	bne.n	111a8 <clk_init+0x2c>
	}

	return 0;
   111c6:	2000      	movs	r0, #0
}
   111c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   111cc:	f06f 0004 	mvn.w	r0, #4
   111d0:	e7fa      	b.n	111c8 <clk_init+0x4c>
   111d2:	bf00      	nop
   111d4:	00011219 	.word	0x00011219
   111d8:	0bad0000 	.word	0x0bad0000
   111dc:	000202f8 	.word	0x000202f8

000111e0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   111e0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   111e2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   111e4:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   111e6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   111e8:	434b      	muls	r3, r1
   111ea:	4809      	ldr	r0, [pc, #36]	; (11210 <clkstarted_handle.constprop.0+0x30>)
   111ec:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   111ee:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   111f0:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   111f4:	4418      	add	r0, r3
	sub_data->cb = NULL;
   111f6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   111fa:	f00c f9e2 	bl	1d5c2 <set_on_state>
	if (callback) {
   111fe:	b12d      	cbz	r5, 1120c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11200:	4632      	mov	r2, r6
   11202:	462b      	mov	r3, r5
}
   11204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11208:	4802      	ldr	r0, [pc, #8]	; (11214 <clkstarted_handle.constprop.0+0x34>)
   1120a:	4718      	bx	r3
}
   1120c:	bd70      	pop	{r4, r5, r6, pc}
   1120e:	bf00      	nop
   11210:	20006be0 	.word	0x20006be0
   11214:	0001f554 	.word	0x0001f554

00011218 <clock_event_handler>:
{
   11218:	b508      	push	{r3, lr}
	switch (event) {
   1121a:	2805      	cmp	r0, #5
   1121c:	d81f      	bhi.n	1125e <clock_event_handler+0x46>
   1121e:	e8df f000 	tbb	[pc, r0]
   11222:	1103      	.short	0x1103
   11224:	0d0f131e 	.word	0x0d0f131e
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11228:	4b12      	ldr	r3, [pc, #72]	; (11274 <clock_event_handler+0x5c>)
   1122a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1122e:	f010 0007 	ands.w	r0, r0, #7
   11232:	d11d      	bne.n	11270 <clock_event_handler+0x58>
}
   11234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11238:	f7ff bfd2 	b.w	111e0 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1123c:	2002      	movs	r0, #2
   1123e:	e7f9      	b.n	11234 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   11240:	2003      	movs	r0, #3
   11242:	e7f7      	b.n	11234 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11244:	2001      	movs	r0, #1
   11246:	e7f5      	b.n	11234 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   11248:	490b      	ldr	r1, [pc, #44]	; (11278 <clock_event_handler+0x60>)
   1124a:	f240 226e 	movw	r2, #622	; 0x26e
   1124e:	480b      	ldr	r0, [pc, #44]	; (1127c <clock_event_handler+0x64>)
   11250:	f00a f85e 	bl	1b310 <assert_print>
   11254:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   11258:	4807      	ldr	r0, [pc, #28]	; (11278 <clock_event_handler+0x60>)
   1125a:	f00a f852 	bl	1b302 <assert_post_action>
   1125e:	4906      	ldr	r1, [pc, #24]	; (11278 <clock_event_handler+0x60>)
   11260:	f240 2272 	movw	r2, #626	; 0x272
   11264:	4805      	ldr	r0, [pc, #20]	; (1127c <clock_event_handler+0x64>)
   11266:	f00a f853 	bl	1b310 <assert_print>
   1126a:	f240 2172 	movw	r1, #626	; 0x272
   1126e:	e7f3      	b.n	11258 <clock_event_handler+0x40>
}
   11270:	bd08      	pop	{r3, pc}
   11272:	bf00      	nop
   11274:	20006be0 	.word	0x20006be0
   11278:	00024379 	.word	0x00024379
   1127c:	000221f8 	.word	0x000221f8

00011280 <generic_hfclk_start>:
{
   11280:	b508      	push	{r3, lr}
	__asm__ volatile(
   11282:	f04f 0320 	mov.w	r3, #32
   11286:	f3ef 8111 	mrs	r1, BASEPRI
   1128a:	f383 8812 	msr	BASEPRI_MAX, r3
   1128e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11292:	4a12      	ldr	r2, [pc, #72]	; (112dc <generic_hfclk_start+0x5c>)
   11294:	6813      	ldr	r3, [r2, #0]
   11296:	f043 0002 	orr.w	r0, r3, #2
   1129a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1129c:	07da      	lsls	r2, r3, #31
   1129e:	d408      	bmi.n	112b2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   112a0:	f381 8811 	msr	BASEPRI, r1
   112a4:	f3bf 8f6f 	isb	sy
}
   112a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   112ac:	2001      	movs	r0, #1
   112ae:	f002 b9a3 	b.w	135f8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   112b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   112b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   112ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   112be:	07d3      	lsls	r3, r2, #31
   112c0:	d5ee      	bpl.n	112a0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   112c2:	4807      	ldr	r0, [pc, #28]	; (112e0 <generic_hfclk_start+0x60>)
   112c4:	f00c f97d 	bl	1d5c2 <set_on_state>
   112c8:	f381 8811 	msr	BASEPRI, r1
   112cc:	f3bf 8f6f 	isb	sy
}
   112d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   112d4:	2000      	movs	r0, #0
   112d6:	f7ff bf83 	b.w	111e0 <clkstarted_handle.constprop.0>
   112da:	bf00      	nop
   112dc:	20006c90 	.word	0x20006c90
   112e0:	20006c68 	.word	0x20006c68

000112e4 <api_blocking_start>:
{
   112e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   112e6:	2200      	movs	r2, #0
   112e8:	2301      	movs	r3, #1
   112ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
   112ee:	ab04      	add	r3, sp, #16
   112f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   112f4:	4a09      	ldr	r2, [pc, #36]	; (1131c <api_blocking_start+0x38>)
   112f6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   112f8:	f8cd d000 	str.w	sp, [sp]
   112fc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11300:	f00c f9a2 	bl	1d648 <api_start>
	if (err < 0) {
   11304:	2800      	cmp	r0, #0
   11306:	db05      	blt.n	11314 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   11308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1130c:	2300      	movs	r3, #0
   1130e:	4668      	mov	r0, sp
   11310:	f005 fba6 	bl	16a60 <z_impl_k_sem_take>
}
   11314:	b007      	add	sp, #28
   11316:	f85d fb04 	ldr.w	pc, [sp], #4
   1131a:	bf00      	nop
   1131c:	0001d687 	.word	0x0001d687

00011320 <generic_hfclk_stop>:
{
   11320:	b510      	push	{r4, lr}
	__asm__ volatile(
   11322:	f04f 0320 	mov.w	r3, #32
   11326:	f3ef 8411 	mrs	r4, BASEPRI
   1132a:	f383 8812 	msr	BASEPRI_MAX, r3
   1132e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   11332:	4a07      	ldr	r2, [pc, #28]	; (11350 <generic_hfclk_stop+0x30>)
   11334:	6813      	ldr	r3, [r2, #0]
   11336:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1133a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1133c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1133e:	d402      	bmi.n	11346 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11340:	2001      	movs	r0, #1
   11342:	f002 f9d1 	bl	136e8 <nrfx_clock_stop>
	__asm__ volatile(
   11346:	f384 8811 	msr	BASEPRI, r4
   1134a:	f3bf 8f6f 	isb	sy
}
   1134e:	bd10      	pop	{r4, pc}
   11350:	20006c90 	.word	0x20006c90

00011354 <z_nrf_clock_control_lf_on>:
{
   11354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11358:	2201      	movs	r2, #1
   1135a:	4606      	mov	r6, r0
   1135c:	4942      	ldr	r1, [pc, #264]	; (11468 <z_nrf_clock_control_lf_on+0x114>)
   1135e:	e8d1 3fef 	ldaex	r3, [r1]
   11362:	e8c1 2fe0 	stlex	r0, r2, [r1]
   11366:	2800      	cmp	r0, #0
   11368:	d1f9      	bne.n	1135e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1136a:	b99b      	cbnz	r3, 11394 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1136c:	493f      	ldr	r1, [pc, #252]	; (1146c <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   1136e:	4840      	ldr	r0, [pc, #256]	; (11470 <z_nrf_clock_control_lf_on+0x11c>)
   11370:	604b      	str	r3, [r1, #4]
   11372:	60cb      	str	r3, [r1, #12]
   11374:	608a      	str	r2, [r1, #8]
   11376:	f7f6 fae9 	bl	794c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1137a:	2800      	cmp	r0, #0
   1137c:	da0a      	bge.n	11394 <z_nrf_clock_control_lf_on+0x40>
   1137e:	493d      	ldr	r1, [pc, #244]	; (11474 <z_nrf_clock_control_lf_on+0x120>)
   11380:	f44f 720c 	mov.w	r2, #560	; 0x230
   11384:	483c      	ldr	r0, [pc, #240]	; (11478 <z_nrf_clock_control_lf_on+0x124>)
   11386:	f009 ffc3 	bl	1b310 <assert_print>
   1138a:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1138e:	4839      	ldr	r0, [pc, #228]	; (11474 <z_nrf_clock_control_lf_on+0x120>)
   11390:	f009 ffb7 	bl	1b302 <assert_post_action>
	switch (start_mode) {
   11394:	b376      	cbz	r6, 113f4 <z_nrf_clock_control_lf_on+0xa0>
   11396:	1e73      	subs	r3, r6, #1
   11398:	2b01      	cmp	r3, #1
   1139a:	d85c      	bhi.n	11456 <z_nrf_clock_control_lf_on+0x102>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1139c:	2e01      	cmp	r6, #1
   1139e:	d107      	bne.n	113b0 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   113a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   113a4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   113a8:	f003 0303 	and.w	r3, r3, #3
   113ac:	2b02      	cmp	r3, #2
   113ae:	d021      	beq.n	113f4 <z_nrf_clock_control_lf_on+0xa0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   113b0:	f00d fde5 	bl	1ef7e <k_is_in_isr>
   113b4:	4605      	mov	r5, r0
   113b6:	b9f8      	cbnz	r0, 113f8 <z_nrf_clock_control_lf_on+0xa4>
	return !z_sys_post_kernel;
   113b8:	4b30      	ldr	r3, [pc, #192]	; (1147c <z_nrf_clock_control_lf_on+0x128>)
   113ba:	781b      	ldrb	r3, [r3, #0]
   113bc:	b1e3      	cbz	r3, 113f8 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENCLR = mask;
   113be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   113c2:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   113c4:	4607      	mov	r7, r0
   113c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   113ca:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113ce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11480 <z_nrf_clock_control_lf_on+0x12c>
   113d2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   113d6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   113da:	03d2      	lsls	r2, r2, #15
   113dc:	d516      	bpl.n	1140c <z_nrf_clock_control_lf_on+0xb8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   113de:	f003 0303 	and.w	r3, r3, #3
   113e2:	2b02      	cmp	r3, #2
   113e4:	d001      	beq.n	113ea <z_nrf_clock_control_lf_on+0x96>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   113e6:	2e01      	cmp	r6, #1
   113e8:	d110      	bne.n	1140c <z_nrf_clock_control_lf_on+0xb8>
	if (isr_mode) {
   113ea:	b375      	cbz	r5, 1144a <z_nrf_clock_control_lf_on+0xf6>
   113ec:	f387 8811 	msr	BASEPRI, r7
   113f0:	f3bf 8f6f 	isb	sy
}
   113f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   113f8:	f04f 0320 	mov.w	r3, #32
   113fc:	f3ef 8711 	mrs	r7, BASEPRI
   11400:	f383 8812 	msr	BASEPRI_MAX, r3
   11404:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11408:	2501      	movs	r5, #1
   1140a:	e7de      	b.n	113ca <z_nrf_clock_control_lf_on+0x76>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1140c:	b1c5      	cbz	r5, 11440 <z_nrf_clock_control_lf_on+0xec>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1140e:	4638      	mov	r0, r7
   11410:	f7f8 fa40 	bl	9894 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11414:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11418:	b2db      	uxtb	r3, r3
   1141a:	2b01      	cmp	r3, #1
   1141c:	d1d9      	bne.n	113d2 <z_nrf_clock_control_lf_on+0x7e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1141e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   11422:	2a00      	cmp	r2, #0
   11424:	d0d5      	beq.n	113d2 <z_nrf_clock_control_lf_on+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11426:	2200      	movs	r2, #0
   11428:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1142c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   11430:	2202      	movs	r2, #2
   11432:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   11436:	2220      	movs	r2, #32
   11438:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1143c:	60a3      	str	r3, [r4, #8]
}
   1143e:	e7c8      	b.n	113d2 <z_nrf_clock_control_lf_on+0x7e>
	return z_impl_k_sleep(timeout);
   11440:	2100      	movs	r1, #0
   11442:	2021      	movs	r0, #33	; 0x21
   11444:	f006 ff08 	bl	18258 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11448:	e7e4      	b.n	11414 <z_nrf_clock_control_lf_on+0xc0>
    p_reg->INTENSET = mask;
   1144a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1144e:	2202      	movs	r2, #2
   11450:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11454:	e7ce      	b.n	113f4 <z_nrf_clock_control_lf_on+0xa0>
		__ASSERT_NO_MSG(false);
   11456:	4907      	ldr	r1, [pc, #28]	; (11474 <z_nrf_clock_control_lf_on+0x120>)
   11458:	f240 2242 	movw	r2, #578	; 0x242
   1145c:	4806      	ldr	r0, [pc, #24]	; (11478 <z_nrf_clock_control_lf_on+0x124>)
   1145e:	f009 ff57 	bl	1b310 <assert_print>
   11462:	f240 2142 	movw	r1, #578	; 0x242
   11466:	e792      	b.n	1138e <z_nrf_clock_control_lf_on+0x3a>
   11468:	20006bdc 	.word	0x20006bdc
   1146c:	20006bcc 	.word	0x20006bcc
   11470:	20006c00 	.word	0x20006c00
   11474:	00024379 	.word	0x00024379
   11478:	000221f8 	.word	0x000221f8
   1147c:	20007370 	.word	0x20007370
   11480:	e000e100 	.word	0xe000e100

00011484 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   11484:	b508      	push	{r3, lr}
   11486:	4807      	ldr	r0, [pc, #28]	; (114a4 <uart_console_init+0x20>)
   11488:	f00d fd32 	bl	1eef0 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1148c:	b138      	cbz	r0, 1149e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1148e:	4806      	ldr	r0, [pc, #24]	; (114a8 <uart_console_init+0x24>)
   11490:	f7f9 f8b6 	bl	a600 <__stdout_hook_install>
	__printk_hook_install(console_out);
   11494:	4804      	ldr	r0, [pc, #16]	; (114a8 <uart_console_init+0x24>)
   11496:	f7f5 ff2b 	bl	72f0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1149a:	2000      	movs	r0, #0
}
   1149c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1149e:	f06f 0012 	mvn.w	r0, #18
   114a2:	e7fb      	b.n	1149c <uart_console_init+0x18>
   114a4:	0001f59c 	.word	0x0001f59c
   114a8:	000114ad 	.word	0x000114ad

000114ac <console_out>:
	if ('\n' == c) {
   114ac:	280a      	cmp	r0, #10
{
   114ae:	b538      	push	{r3, r4, r5, lr}
   114b0:	4604      	mov	r4, r0
   114b2:	4d07      	ldr	r5, [pc, #28]	; (114d0 <console_out+0x24>)
	if ('\n' == c) {
   114b4:	d104      	bne.n	114c0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   114b6:	68ab      	ldr	r3, [r5, #8]
   114b8:	210d      	movs	r1, #13
   114ba:	4628      	mov	r0, r5
   114bc:	685b      	ldr	r3, [r3, #4]
   114be:	4798      	blx	r3
   114c0:	68ab      	ldr	r3, [r5, #8]
   114c2:	4803      	ldr	r0, [pc, #12]	; (114d0 <console_out+0x24>)
   114c4:	685b      	ldr	r3, [r3, #4]
   114c6:	b2e1      	uxtb	r1, r4
   114c8:	4798      	blx	r3
}
   114ca:	4620      	mov	r0, r4
   114cc:	bd38      	pop	{r3, r4, r5, pc}
   114ce:	bf00      	nop
   114d0:	0001f59c 	.word	0x0001f59c

000114d4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   114d4:	b510      	push	{r4, lr}
	return port->data;
   114d6:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   114d8:	b941      	cbnz	r1, 114ec <gpio_nrfx_manage_callback+0x18>
   114da:	491c      	ldr	r1, [pc, #112]	; (1154c <gpio_nrfx_manage_callback+0x78>)
   114dc:	222a      	movs	r2, #42	; 0x2a
   114de:	481c      	ldr	r0, [pc, #112]	; (11550 <gpio_nrfx_manage_callback+0x7c>)
   114e0:	f009 ff16 	bl	1b310 <assert_print>
   114e4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   114e6:	4819      	ldr	r0, [pc, #100]	; (1154c <gpio_nrfx_manage_callback+0x78>)
   114e8:	f009 ff0b 	bl	1b302 <assert_post_action>
   114ec:	6848      	ldr	r0, [r1, #4]
   114ee:	b930      	cbnz	r0, 114fe <gpio_nrfx_manage_callback+0x2a>
   114f0:	4916      	ldr	r1, [pc, #88]	; (1154c <gpio_nrfx_manage_callback+0x78>)
   114f2:	222b      	movs	r2, #43	; 0x2b
   114f4:	4816      	ldr	r0, [pc, #88]	; (11550 <gpio_nrfx_manage_callback+0x7c>)
   114f6:	f009 ff0b 	bl	1b310 <assert_print>
   114fa:	212b      	movs	r1, #43	; 0x2b
   114fc:	e7f3      	b.n	114e6 <gpio_nrfx_manage_callback+0x12>
	return list->head;
   114fe:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   11500:	b1f8      	cbz	r0, 11542 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11502:	4288      	cmp	r0, r1
   11504:	d119      	bne.n	1153a <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   11506:	689c      	ldr	r4, [r3, #8]
	return node->next;
   11508:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1150a:	42a1      	cmp	r1, r4
	list->head = node;
   1150c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1150e:	d100      	bne.n	11512 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   11510:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11512:	2000      	movs	r0, #0
   11514:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   11516:	b12a      	cbz	r2, 11524 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   11518:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1151a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1151c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1151e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11520:	b902      	cbnz	r2, 11524 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   11522:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   11524:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11526:	e010      	b.n	1154a <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11528:	4281      	cmp	r1, r0
   1152a:	d106      	bne.n	1153a <gpio_nrfx_manage_callback+0x66>
	return node->next;
   1152c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1152e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11530:	6898      	ldr	r0, [r3, #8]
   11532:	4281      	cmp	r1, r0
   11534:	d1ed      	bne.n	11512 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   11536:	609c      	str	r4, [r3, #8]
}
   11538:	e7eb      	b.n	11512 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   1153a:	4604      	mov	r4, r0
   1153c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1153e:	2800      	cmp	r0, #0
   11540:	d1f2      	bne.n	11528 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   11542:	2a00      	cmp	r2, #0
   11544:	d1e8      	bne.n	11518 <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   11546:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1154a:	bd10      	pop	{r4, pc}
   1154c:	000243f0 	.word	0x000243f0
   11550:	000221f8 	.word	0x000221f8

00011554 <gpio_nrfx_pin_interrupt_configure>:
{
   11554:	b530      	push	{r4, r5, lr}
	return port->config;
   11556:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11558:	f001 041f 	and.w	r4, r1, #31
   1155c:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1155e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   11562:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11564:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   11568:	d105      	bne.n	11576 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1156a:	4620      	mov	r0, r4
   1156c:	f002 fbea 	bl	13d44 <nrfx_gpiote_trigger_disable>
		return 0;
   11570:	2000      	movs	r0, #0
}
   11572:	b005      	add	sp, #20
   11574:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   11576:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   11578:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1157c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   11580:	d114      	bne.n	115ac <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   11582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   11586:	bf0c      	ite	eq
   11588:	2304      	moveq	r3, #4
   1158a:	2305      	movne	r3, #5
   1158c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11590:	2300      	movs	r3, #0
   11592:	4620      	mov	r0, r4
   11594:	4619      	mov	r1, r3
   11596:	aa02      	add	r2, sp, #8
   11598:	f002 f9e4 	bl	13964 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1159c:	4b2a      	ldr	r3, [pc, #168]	; (11648 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1159e:	4298      	cmp	r0, r3
   115a0:	d14e      	bne.n	11640 <gpio_nrfx_pin_interrupt_configure+0xec>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   115a2:	2101      	movs	r1, #1
   115a4:	4620      	mov	r0, r4
   115a6:	f002 fb67 	bl	13c78 <nrfx_gpiote_trigger_enable>
	return 0;
   115aa:	e7e1      	b.n	11570 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   115ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   115b0:	d023      	beq.n	115fa <gpio_nrfx_pin_interrupt_configure+0xa6>
   115b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   115b6:	bf14      	ite	ne
   115b8:	2301      	movne	r3, #1
   115ba:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   115bc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   115c0:	6883      	ldr	r3, [r0, #8]
   115c2:	40cb      	lsrs	r3, r1
   115c4:	07d8      	lsls	r0, r3, #31
   115c6:	d4e3      	bmi.n	11590 <gpio_nrfx_pin_interrupt_configure+0x3c>
   115c8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   115cc:	d1e0      	bne.n	11590 <gpio_nrfx_pin_interrupt_configure+0x3c>
    switch (port)
   115ce:	0962      	lsrs	r2, r4, #5
   115d0:	f004 031f 	and.w	r3, r4, #31
   115d4:	d013      	beq.n	115fe <gpio_nrfx_pin_interrupt_configure+0xaa>
   115d6:	2a01      	cmp	r2, #1
   115d8:	d104      	bne.n	115e4 <gpio_nrfx_pin_interrupt_configure+0x90>
    return (mask & (1UL << pin_number)) ? true : false;
   115da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   115de:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   115e0:	07d1      	lsls	r1, r2, #31
   115e2:	d413      	bmi.n	1160c <gpio_nrfx_pin_interrupt_configure+0xb8>
   115e4:	4919      	ldr	r1, [pc, #100]	; (1164c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   115e6:	481a      	ldr	r0, [pc, #104]	; (11650 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   115e8:	f240 2247 	movw	r2, #583	; 0x247
   115ec:	f009 fe90 	bl	1b310 <assert_print>
   115f0:	f240 2147 	movw	r1, #583	; 0x247
   115f4:	4815      	ldr	r0, [pc, #84]	; (1164c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   115f6:	f009 fe84 	bl	1b302 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   115fa:	2303      	movs	r3, #3
   115fc:	e7de      	b.n	115bc <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   115fe:	f04f 32ff 	mov.w	r2, #4294967295
   11602:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11604:	07d2      	lsls	r2, r2, #31
   11606:	d5ed      	bpl.n	115e4 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   11608:	4a12      	ldr	r2, [pc, #72]	; (11654 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1160a:	e000      	b.n	1160e <gpio_nrfx_pin_interrupt_configure+0xba>
        case 1: return NRF_P1;
   1160c:	4a12      	ldr	r2, [pc, #72]	; (11658 <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1160e:	3380      	adds	r3, #128	; 0x80
   11610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   11614:	07db      	lsls	r3, r3, #31
   11616:	d4bb      	bmi.n	11590 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11618:	f10d 0507 	add.w	r5, sp, #7
   1161c:	4629      	mov	r1, r5
   1161e:	4620      	mov	r0, r4
   11620:	f002 fac6 	bl	13bb0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   11624:	4b0d      	ldr	r3, [pc, #52]	; (1165c <gpio_nrfx_pin_interrupt_configure+0x108>)
   11626:	4298      	cmp	r0, r3
   11628:	d001      	beq.n	1162e <gpio_nrfx_pin_interrupt_configure+0xda>
		trigger_config.p_in_channel = &ch;
   1162a:	9503      	str	r5, [sp, #12]
   1162c:	e7b0      	b.n	11590 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1162e:	4628      	mov	r0, r5
   11630:	f002 fb1c 	bl	13c6c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   11634:	4b04      	ldr	r3, [pc, #16]	; (11648 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   11636:	4298      	cmp	r0, r3
   11638:	d0f7      	beq.n	1162a <gpio_nrfx_pin_interrupt_configure+0xd6>
				return -ENOMEM;
   1163a:	f06f 000b 	mvn.w	r0, #11
   1163e:	e798      	b.n	11572 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   11640:	f06f 0015 	mvn.w	r0, #21
   11644:	e795      	b.n	11572 <gpio_nrfx_pin_interrupt_configure+0x1e>
   11646:	bf00      	nop
   11648:	0bad0000 	.word	0x0bad0000
   1164c:	000222b1 	.word	0x000222b1
   11650:	000221f8 	.word	0x000221f8
   11654:	50842500 	.word	0x50842500
   11658:	50842800 	.word	0x50842800
   1165c:	0bad0004 	.word	0x0bad0004

00011660 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   11660:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   11662:	f002 faf3 	bl	13c4c <nrfx_gpiote_is_init>
   11666:	4604      	mov	r4, r0
   11668:	b968      	cbnz	r0, 11686 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1166a:	f002 fac7 	bl	13bfc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1166e:	4b08      	ldr	r3, [pc, #32]	; (11690 <gpio_nrfx_init+0x30>)
   11670:	4298      	cmp	r0, r3
   11672:	d10a      	bne.n	1168a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   11674:	4621      	mov	r1, r4
   11676:	4807      	ldr	r0, [pc, #28]	; (11694 <gpio_nrfx_init+0x34>)
   11678:	f002 fa94 	bl	13ba4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1167c:	4622      	mov	r2, r4
   1167e:	2105      	movs	r1, #5
   11680:	200d      	movs	r0, #13
   11682:	f7f8 f9af 	bl	99e4 <z_arm_irq_priority_set>
		return 0;
   11686:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   11688:	bd10      	pop	{r4, pc}
		return -EIO;
   1168a:	f06f 0004 	mvn.w	r0, #4
   1168e:	e7fb      	b.n	11688 <gpio_nrfx_init+0x28>
   11690:	0bad0000 	.word	0x0bad0000
   11694:	00011699 	.word	0x00011699

00011698 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11698:	0942      	lsrs	r2, r0, #5
{
   1169a:	4603      	mov	r3, r0
   1169c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1169e:	d002      	beq.n	116a6 <nrfx_gpio_handler+0xe>
   116a0:	2a01      	cmp	r2, #1
   116a2:	d01a      	beq.n	116da <nrfx_gpio_handler+0x42>
}
   116a4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   116a6:	4e12      	ldr	r6, [pc, #72]	; (116f0 <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   116a8:	6932      	ldr	r2, [r6, #16]
   116aa:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   116ac:	2900      	cmp	r1, #0
   116ae:	d0f9      	beq.n	116a4 <nrfx_gpio_handler+0xc>
   116b0:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   116b2:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   116b6:	680c      	ldr	r4, [r1, #0]
   116b8:	409d      	lsls	r5, r3
   116ba:	2900      	cmp	r1, #0
   116bc:	d0f2      	beq.n	116a4 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   116be:	688a      	ldr	r2, [r1, #8]
   116c0:	402a      	ands	r2, r5
   116c2:	d00e      	beq.n	116e2 <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   116c4:	684b      	ldr	r3, [r1, #4]
   116c6:	b953      	cbnz	r3, 116de <nrfx_gpio_handler+0x46>
   116c8:	490a      	ldr	r1, [pc, #40]	; (116f4 <nrfx_gpio_handler+0x5c>)
   116ca:	480b      	ldr	r0, [pc, #44]	; (116f8 <nrfx_gpio_handler+0x60>)
   116cc:	224d      	movs	r2, #77	; 0x4d
   116ce:	f009 fe1f 	bl	1b310 <assert_print>
   116d2:	214d      	movs	r1, #77	; 0x4d
   116d4:	4807      	ldr	r0, [pc, #28]	; (116f4 <nrfx_gpio_handler+0x5c>)
   116d6:	f009 fe14 	bl	1b302 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   116da:	4e08      	ldr	r6, [pc, #32]	; (116fc <nrfx_gpio_handler+0x64>)
   116dc:	e7e4      	b.n	116a8 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   116de:	4630      	mov	r0, r6
   116e0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   116e2:	b11c      	cbz	r4, 116ec <nrfx_gpio_handler+0x54>
   116e4:	6823      	ldr	r3, [r4, #0]
   116e6:	4621      	mov	r1, r4
   116e8:	461c      	mov	r4, r3
   116ea:	e7e6      	b.n	116ba <nrfx_gpio_handler+0x22>
   116ec:	4623      	mov	r3, r4
   116ee:	e7fa      	b.n	116e6 <nrfx_gpio_handler+0x4e>
   116f0:	0001f584 	.word	0x0001f584
   116f4:	000243f0 	.word	0x000243f0
   116f8:	000221f8 	.word	0x000221f8
   116fc:	0001f56c 	.word	0x0001f56c

00011700 <gpio_nrfx_pin_configure>:
{
   11700:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   11704:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11708:	f001 051f 	and.w	r5, r1, #31
   1170c:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   11710:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11712:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   11716:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11718:	4628      	mov	r0, r5
   1171a:	f10d 0103 	add.w	r1, sp, #3
   1171e:	f002 fa47 	bl	13bb0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   11722:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11726:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   11728:	d114      	bne.n	11754 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1172a:	4628      	mov	r0, r5
   1172c:	f002 fb34 	bl	13d98 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   11730:	4b47      	ldr	r3, [pc, #284]	; (11850 <gpio_nrfx_pin_configure+0x150>)
   11732:	429e      	cmp	r6, r3
   11734:	d16e      	bne.n	11814 <gpio_nrfx_pin_configure+0x114>
			err = nrfx_gpiote_channel_free(ch);
   11736:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1173a:	f002 fa91 	bl	13c60 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1173e:	42b0      	cmp	r0, r6
   11740:	d068      	beq.n	11814 <gpio_nrfx_pin_configure+0x114>
   11742:	4944      	ldr	r1, [pc, #272]	; (11854 <gpio_nrfx_pin_configure+0x154>)
   11744:	226a      	movs	r2, #106	; 0x6a
   11746:	4844      	ldr	r0, [pc, #272]	; (11858 <gpio_nrfx_pin_configure+0x158>)
   11748:	f009 fde2 	bl	1b310 <assert_print>
   1174c:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1174e:	4841      	ldr	r0, [pc, #260]	; (11854 <gpio_nrfx_pin_configure+0x154>)
   11750:	f009 fdd7 	bl	1b302 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11754:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11756:	4628      	mov	r0, r5
   11758:	4619      	mov	r1, r3
   1175a:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1175c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11760:	f002 f900 	bl	13964 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11764:	4b3a      	ldr	r3, [pc, #232]	; (11850 <gpio_nrfx_pin_configure+0x150>)
   11766:	4298      	cmp	r0, r3
   11768:	d004      	beq.n	11774 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1176a:	f06f 0015 	mvn.w	r0, #21
}
   1176e:	b004      	add	sp, #16
   11770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   11774:	4286      	cmp	r6, r0
   11776:	d10c      	bne.n	11792 <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   11778:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1177c:	f002 fa70 	bl	13c60 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   11780:	42b0      	cmp	r0, r6
   11782:	d006      	beq.n	11792 <gpio_nrfx_pin_configure+0x92>
   11784:	4933      	ldr	r1, [pc, #204]	; (11854 <gpio_nrfx_pin_configure+0x154>)
   11786:	227c      	movs	r2, #124	; 0x7c
   11788:	4833      	ldr	r0, [pc, #204]	; (11858 <gpio_nrfx_pin_configure+0x158>)
   1178a:	f009 fdc1 	bl	1b310 <assert_print>
   1178e:	217c      	movs	r1, #124	; 0x7c
   11790:	e7dd      	b.n	1174e <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   11792:	03a6      	lsls	r6, r4, #14
   11794:	d54c      	bpl.n	11830 <gpio_nrfx_pin_configure+0x130>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11796:	f240 3306 	movw	r3, #774	; 0x306
   1179a:	4023      	ands	r3, r4
   1179c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   117a0:	d019      	beq.n	117d6 <gpio_nrfx_pin_configure+0xd6>
   117a2:	d80c      	bhi.n	117be <gpio_nrfx_pin_configure+0xbe>
   117a4:	2b06      	cmp	r3, #6
   117a6:	d017      	beq.n	117d8 <gpio_nrfx_pin_configure+0xd8>
   117a8:	d804      	bhi.n	117b4 <gpio_nrfx_pin_configure+0xb4>
   117aa:	b1ab      	cbz	r3, 117d8 <gpio_nrfx_pin_configure+0xd8>
   117ac:	2b02      	cmp	r3, #2
   117ae:	d1dc      	bne.n	1176a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   117b0:	2304      	movs	r3, #4
   117b2:	e011      	b.n	117d8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   117b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   117b8:	d1d7      	bne.n	1176a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   117ba:	2301      	movs	r3, #1
   117bc:	e00c      	b.n	117d8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   117be:	f240 2202 	movw	r2, #514	; 0x202
   117c2:	4293      	cmp	r3, r2
   117c4:	d028      	beq.n	11818 <gpio_nrfx_pin_configure+0x118>
   117c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   117ca:	d027      	beq.n	1181c <gpio_nrfx_pin_configure+0x11c>
   117cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   117d0:	d1cb      	bne.n	1176a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   117d2:	2302      	movs	r3, #2
   117d4:	e000      	b.n	117d8 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   117d6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   117d8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   117dc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   117e0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   117e4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   117e6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   117ea:	bf4c      	ite	mi
   117ec:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   117ee:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   117f2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   117f4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   117f8:	d512      	bpl.n	11820 <gpio_nrfx_pin_configure+0x120>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   117fa:	2301      	movs	r3, #1
   117fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11800:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   11802:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   11804:	2200      	movs	r2, #0
   11806:	4628      	mov	r0, r5
   11808:	a901      	add	r1, sp, #4
   1180a:	f002 f953 	bl	13ab4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1180e:	4b10      	ldr	r3, [pc, #64]	; (11850 <gpio_nrfx_pin_configure+0x150>)
   11810:	4298      	cmp	r0, r3
   11812:	d1aa      	bne.n	1176a <gpio_nrfx_pin_configure+0x6a>
   11814:	2000      	movs	r0, #0
   11816:	e7aa      	b.n	1176e <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   11818:	2305      	movs	r3, #5
   1181a:	e7dd      	b.n	117d8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1181c:	2303      	movs	r3, #3
   1181e:	e7db      	b.n	117d8 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   11820:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   11822:	bf41      	itttt	mi
   11824:	2301      	movmi	r3, #1
   11826:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1182a:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1182c:	60d3      	strmi	r3, [r2, #12]
}
   1182e:	e7e9      	b.n	11804 <gpio_nrfx_pin_configure+0x104>
	if (flags & GPIO_PULL_UP) {
   11830:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   11832:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   11836:	bf4c      	ite	mi
   11838:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1183a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1183e:	461a      	mov	r2, r3
   11840:	4628      	mov	r0, r5
   11842:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   11844:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   11848:	f002 f88c 	bl	13964 <nrfx_gpiote_input_configure>
   1184c:	e7df      	b.n	1180e <gpio_nrfx_pin_configure+0x10e>
   1184e:	bf00      	nop
   11850:	0bad0000 	.word	0x0bad0000
   11854:	0002442c 	.word	0x0002442c
   11858:	000221f8 	.word	0x000221f8

0001185c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1185c:	2100      	movs	r1, #0
   1185e:	4802      	ldr	r0, [pc, #8]	; (11868 <pwm_nrfx_get_cycles_per_sec+0xc>)
   11860:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   11864:	2000      	movs	r0, #0
   11866:	4770      	bx	lr
   11868:	00f42400 	.word	0x00f42400

0001186c <nrf_gpio_pin_port_decode>:
{
   1186c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1186e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   11870:	095a      	lsrs	r2, r3, #5
   11872:	d00c      	beq.n	1188e <nrf_gpio_pin_port_decode+0x22>
   11874:	2a01      	cmp	r2, #1
   11876:	d012      	beq.n	1189e <nrf_gpio_pin_port_decode+0x32>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11878:	490e      	ldr	r1, [pc, #56]	; (118b4 <nrf_gpio_pin_port_decode+0x48>)
   1187a:	480f      	ldr	r0, [pc, #60]	; (118b8 <nrf_gpio_pin_port_decode+0x4c>)
   1187c:	f240 2247 	movw	r2, #583	; 0x247
   11880:	f009 fd46 	bl	1b310 <assert_print>
   11884:	f240 2147 	movw	r1, #583	; 0x247
   11888:	480a      	ldr	r0, [pc, #40]	; (118b4 <nrf_gpio_pin_port_decode+0x48>)
   1188a:	f009 fd3a 	bl	1b302 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1188e:	f04f 32ff 	mov.w	r2, #4294967295
   11892:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   11896:	07d9      	lsls	r1, r3, #31
   11898:	d5ee      	bpl.n	11878 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1189a:	4808      	ldr	r0, [pc, #32]	; (118bc <nrf_gpio_pin_port_decode+0x50>)
   1189c:	e008      	b.n	118b0 <nrf_gpio_pin_port_decode+0x44>
    return (mask & (1UL << pin_number)) ? true : false;
   1189e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   118a2:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   118a6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   118a8:	07d2      	lsls	r2, r2, #31
   118aa:	d5e5      	bpl.n	11878 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   118ac:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   118ae:	4804      	ldr	r0, [pc, #16]	; (118c0 <nrf_gpio_pin_port_decode+0x54>)
}
   118b0:	bd08      	pop	{r3, pc}
   118b2:	bf00      	nop
   118b4:	000222b1 	.word	0x000222b1
   118b8:	000221f8 	.word	0x000221f8
   118bc:	50842500 	.word	0x50842500
   118c0:	50842800 	.word	0x50842800

000118c4 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   118c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct pwm_nrfx_config *config = dev->config;
   118c6:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   118c8:	6906      	ldr	r6, [r0, #16]

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   118ca:	6aaf      	ldr	r7, [r5, #40]	; 0x28
{
   118cc:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   118ce:	2100      	movs	r1, #0
   118d0:	4638      	mov	r0, r7
   118d2:	aa01      	add	r2, sp, #4
   118d4:	f00b ff72 	bl	1d7bc <pinctrl_lookup_state>
	if (ret < 0) {
   118d8:	2800      	cmp	r0, #0
   118da:	db44      	blt.n	11966 <pwm_nrfx_init+0xa2>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   118dc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   118de:	683a      	ldr	r2, [r7, #0]
   118e0:	7919      	ldrb	r1, [r3, #4]
   118e2:	6818      	ldr	r0, [r3, #0]
   118e4:	f00b ff7d 	bl	1d7e2 <pinctrl_configure_pins>

	if (ret < 0) {
   118e8:	2800      	cmp	r0, #0
   118ea:	db3c      	blt.n	11966 <pwm_nrfx_init+0xa2>
		return ret;
	}

	data->initially_inverted = 0;
   118ec:	2700      	movs	r7, #0
   118ee:	73b7      	strb	r7, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   118f0:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
   118f2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   118f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   118fa:	2b00      	cmp	r3, #0
   118fc:	db0f      	blt.n	1191e <pwm_nrfx_init+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   118fe:	a801      	add	r0, sp, #4
   11900:	9301      	str	r3, [sp, #4]
   11902:	f7ff ffb3 	bl	1186c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   11906:	9a01      	ldr	r2, [sp, #4]
    return p_reg->OUT;
   11908:	6843      	ldr	r3, [r0, #4]
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   1190a:	40d3      	lsrs	r3, r2
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   1190c:	f013 0301 	ands.w	r3, r3, #1
   11910:	bf18      	it	ne
   11912:	2301      	movne	r3, #1
			data->initially_inverted |=
   11914:	7bb2      	ldrb	r2, [r6, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   11916:	bf18      	it	ne
   11918:	40bb      	lslne	r3, r7
			data->initially_inverted |=
   1191a:	4313      	orrs	r3, r2
   1191c:	73b3      	strb	r3, [r6, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   1191e:	3701      	adds	r7, #1
   11920:	2f04      	cmp	r7, #4
   11922:	d1e5      	bne.n	118f0 <pwm_nrfx_init+0x2c>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   11924:	2300      	movs	r3, #0
		bool inverted = data->initially_inverted & BIT(i);
   11926:	2001      	movs	r0, #1
   11928:	7bb1      	ldrb	r1, [r6, #14]
   1192a:	3602      	adds	r6, #2
   1192c:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   11930:	420a      	tst	r2, r1
   11932:	bf0c      	ite	eq
   11934:	2201      	moveq	r2, #1
   11936:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   11938:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1193a:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   1193c:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   1193e:	f826 2f02 	strh.w	r2, [r6, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   11942:	d1f3      	bne.n	1192c <pwm_nrfx_init+0x68>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   11944:	2300      	movs	r3, #0
   11946:	4628      	mov	r0, r5
   11948:	461a      	mov	r2, r3
   1194a:	f105 0108 	add.w	r1, r5, #8
   1194e:	f002 fc69 	bl	14224 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   11952:	4b07      	ldr	r3, [pc, #28]	; (11970 <pwm_nrfx_init+0xac>)
   11954:	4298      	cmp	r0, r3
   11956:	d008      	beq.n	1196a <pwm_nrfx_init+0xa6>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   11958:	4806      	ldr	r0, [pc, #24]	; (11974 <pwm_nrfx_init+0xb0>)
   1195a:	2145      	movs	r1, #69	; 0x45
   1195c:	6822      	ldr	r2, [r4, #0]
   1195e:	f009 fceb 	bl	1b338 <z_log_minimal_printk>
		return -EBUSY;
   11962:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   11966:	b003      	add	sp, #12
   11968:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1196a:	2000      	movs	r0, #0
   1196c:	e7fb      	b.n	11966 <pwm_nrfx_init+0xa2>
   1196e:	bf00      	nop
   11970:	0bad0000 	.word	0x0bad0000
   11974:	00024470 	.word	0x00024470

00011978 <pwm_nrfx_set_cycles>:
{
   11978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1197a:	f8bd c020 	ldrh.w	ip, [sp, #32]
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   1197e:	2903      	cmp	r1, #3
	const struct pwm_nrfx_config *config = dev->config;
   11980:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   11982:	6904      	ldr	r4, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
   11984:	f00c 0c01 	and.w	ip, ip, #1
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   11988:	d905      	bls.n	11996 <pwm_nrfx_set_cycles+0x1e>
		LOG_ERR("Invalid channel: %u.", channel);
   1198a:	460a      	mov	r2, r1
   1198c:	2145      	movs	r1, #69	; 0x45
   1198e:	484b      	ldr	r0, [pc, #300]	; (11abc <pwm_nrfx_set_cycles+0x144>)
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   11990:	f009 fcd2 	bl	1b338 <z_log_minimal_printk>
	return false;
   11994:	e014      	b.n	119c0 <pwm_nrfx_set_cycles+0x48>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   11996:	2601      	movs	r6, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   11998:	7ba8      	ldrb	r0, [r5, #14]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   1199a:	408e      	lsls	r6, r1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1199c:	2801      	cmp	r0, #1
		pulse_cycles /= 2;
   1199e:	bf04      	itt	eq
   119a0:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   119a2:	0852      	lsreq	r2, r2, #1
	if (pulse_cycles == 0) {
   119a4:	2b00      	cmp	r3, #0
   119a6:	d064      	beq.n	11a72 <pwm_nrfx_set_cycles+0xfa>
	} else if (pulse_cycles >= period_cycles) {
   119a8:	429a      	cmp	r2, r3
   119aa:	d933      	bls.n	11a14 <pwm_nrfx_set_cycles+0x9c>
	if (period_cycles == data->period_cycles) {
   119ac:	6827      	ldr	r7, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   119ae:	7b20      	ldrb	r0, [r4, #12]
	if (period_cycles == data->period_cycles) {
   119b0:	42ba      	cmp	r2, r7
   119b2:	d018      	beq.n	119e6 <pwm_nrfx_set_cycles+0x6e>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   119b4:	43b0      	bics	r0, r6
   119b6:	d007      	beq.n	119c8 <pwm_nrfx_set_cycles+0x50>
		LOG_ERR("Incompatible period.");
   119b8:	2145      	movs	r1, #69	; 0x45
   119ba:	4841      	ldr	r0, [pc, #260]	; (11ac0 <pwm_nrfx_set_cycles+0x148>)
   119bc:	f009 fcbc 	bl	1b338 <z_log_minimal_printk>
		return -EINVAL;
   119c0:	f06f 0015 	mvn.w	r0, #21
}
   119c4:	b003      	add	sp, #12
   119c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119c8:	4617      	mov	r7, r2
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   119ca:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   119ce:	d219      	bcs.n	11a04 <pwm_nrfx_set_cycles+0x8c>
			data->period_cycles = period_cycles;
   119d0:	6022      	str	r2, [r4, #0]
			data->prescaler     = prescaler;
   119d2:	7360      	strb	r0, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   119d4:	682a      	ldr	r2, [r5, #0]
					  config->initial_config.count_mode,
   119d6:	f895 e00e 	ldrb.w	lr, [r5, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   119da:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->MODE       = mode;
   119de:	f8c2 e504 	str.w	lr, [r2, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   119e2:	f8c2 7508 	str.w	r7, [r2, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   119e6:	7b62      	ldrb	r2, [r4, #13]
   119e8:	40d3      	lsrs	r3, r2
   119ea:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   119ec:	f1bc 0f00 	cmp.w	ip, #0
   119f0:	d101      	bne.n	119f6 <pwm_nrfx_set_cycles+0x7e>
   119f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   119f6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   119fa:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   119fc:	7b23      	ldrb	r3, [r4, #12]
   119fe:	4333      	orrs	r3, r6
   11a00:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   11a02:	e02c      	b.n	11a5e <pwm_nrfx_set_cycles+0xe6>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   11a04:	3001      	adds	r0, #1
   11a06:	2808      	cmp	r0, #8
		countertop >>= 1;
   11a08:	ea4f 0757 	mov.w	r7, r7, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   11a0c:	d1dd      	bne.n	119ca <pwm_nrfx_set_cycles+0x52>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   11a0e:	2145      	movs	r1, #69	; 0x45
   11a10:	482c      	ldr	r0, [pc, #176]	; (11ac4 <pwm_nrfx_set_cycles+0x14c>)
   11a12:	e7bd      	b.n	11990 <pwm_nrfx_set_cycles+0x18>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11a14:	004b      	lsls	r3, r1, #1
   11a16:	4423      	add	r3, r4
   11a18:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   11a1c:	f1bc 0f00 	cmp.w	ip, #0
   11a20:	d010      	beq.n	11a44 <pwm_nrfx_set_cycles+0xcc>
   11a22:	f647 72ff 	movw	r2, #32767	; 0x7fff
   11a26:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   11a28:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   11a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11a2e:	2b00      	cmp	r3, #0
   11a30:	db10      	blt.n	11a54 <pwm_nrfx_set_cycles+0xdc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11a32:	a801      	add	r0, sp, #4
   11a34:	9301      	str	r3, [sp, #4]
   11a36:	f7ff ff19 	bl	1186c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11a3a:	2301      	movs	r3, #1
   11a3c:	9a01      	ldr	r2, [sp, #4]
   11a3e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   11a40:	60c3      	str	r3, [r0, #12]
   11a42:	e007      	b.n	11a54 <pwm_nrfx_set_cycles+0xdc>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a48:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   11a4a:	682b      	ldr	r3, [r5, #0]
   11a4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11a50:	2b00      	cmp	r3, #0
   11a52:	da1b      	bge.n	11a8c <pwm_nrfx_set_cycles+0x114>
		data->pwm_needed &= ~BIT(channel);
   11a54:	7b21      	ldrb	r1, [r4, #12]
   11a56:	ea21 0106 	bic.w	r1, r1, r6
   11a5a:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   11a5c:	b1f9      	cbz	r1, 11a9e <pwm_nrfx_set_cycles+0x126>
		if (data->stop_requested) {
   11a5e:	7be3      	ldrb	r3, [r4, #15]
   11a60:	bb23      	cbnz	r3, 11aac <pwm_nrfx_set_cycles+0x134>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   11a62:	2300      	movs	r3, #0
   11a64:	2201      	movs	r2, #1
   11a66:	4628      	mov	r0, r5
   11a68:	f105 0118 	add.w	r1, r5, #24
   11a6c:	f002 fca2 	bl	143b4 <nrfx_pwm_simple_playback>
   11a70:	e01a      	b.n	11aa8 <pwm_nrfx_set_cycles+0x130>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11a72:	004a      	lsls	r2, r1, #1
   11a74:	4422      	add	r2, r4
   11a76:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   11a7a:	f1bc 0f00 	cmp.w	ip, #0
   11a7e:	d001      	beq.n	11a84 <pwm_nrfx_set_cycles+0x10c>
   11a80:	8093      	strh	r3, [r2, #4]
   11a82:	e7e2      	b.n	11a4a <pwm_nrfx_set_cycles+0xd2>
   11a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11a88:	8093      	strh	r3, [r2, #4]
   11a8a:	e7cd      	b.n	11a28 <pwm_nrfx_set_cycles+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11a8c:	a801      	add	r0, sp, #4
   11a8e:	9301      	str	r3, [sp, #4]
   11a90:	f7ff feec 	bl	1186c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11a94:	2301      	movs	r3, #1
   11a96:	9a01      	ldr	r2, [sp, #4]
   11a98:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   11a9a:	6083      	str	r3, [r0, #8]
   11a9c:	e7da      	b.n	11a54 <pwm_nrfx_set_cycles+0xdc>
		nrfx_pwm_stop(&config->pwm, false);
   11a9e:	4628      	mov	r0, r5
   11aa0:	f002 fd1a 	bl	144d8 <nrfx_pwm_stop>
		data->stop_requested = true;
   11aa4:	2301      	movs	r3, #1
   11aa6:	73e3      	strb	r3, [r4, #15]
	return 0;
   11aa8:	2000      	movs	r0, #0
   11aaa:	e78b      	b.n	119c4 <pwm_nrfx_set_cycles+0x4c>
			data->stop_requested = false;
   11aac:	2300      	movs	r3, #0
   11aae:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   11ab0:	4628      	mov	r0, r5
   11ab2:	f002 fceb 	bl	1448c <nrfx_pwm_is_stopped>
   11ab6:	2800      	cmp	r0, #0
   11ab8:	d0fa      	beq.n	11ab0 <pwm_nrfx_set_cycles+0x138>
   11aba:	e7d2      	b.n	11a62 <pwm_nrfx_set_cycles+0xea>
   11abc:	00024495 	.word	0x00024495
   11ac0:	000244af 	.word	0x000244af
   11ac4:	000244c9 	.word	0x000244c9

00011ac8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   11ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11aca:	794b      	ldrb	r3, [r1, #5]
   11acc:	2b01      	cmp	r3, #1
   11ace:	d029      	beq.n	11b24 <uarte_nrfx_configure+0x5c>
   11ad0:	2b03      	cmp	r3, #3
   11ad2:	d124      	bne.n	11b1e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11ad4:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11ad6:	798b      	ldrb	r3, [r1, #6]
   11ad8:	2b03      	cmp	r3, #3
   11ada:	d120      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11adc:	79ce      	ldrb	r6, [r1, #7]
   11ade:	b10e      	cbz	r6, 11ae4 <uarte_nrfx_configure+0x1c>
   11ae0:	2e01      	cmp	r6, #1
   11ae2:	d11c      	bne.n	11b1e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11ae4:	790a      	ldrb	r2, [r1, #4]
   11ae6:	2a01      	cmp	r2, #1
   11ae8:	d01e      	beq.n	11b28 <uarte_nrfx_configure+0x60>
   11aea:	2a02      	cmp	r2, #2
   11aec:	d020      	beq.n	11b30 <uarte_nrfx_configure+0x68>
   11aee:	b9b2      	cbnz	r2, 11b1e <uarte_nrfx_configure+0x56>
   11af0:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11af2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11af4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   11af6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   11afa:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   11afe:	d06e      	beq.n	11bde <uarte_nrfx_configure+0x116>
   11b00:	d833      	bhi.n	11b6a <uarte_nrfx_configure+0xa2>
   11b02:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11b06:	d06d      	beq.n	11be4 <uarte_nrfx_configure+0x11c>
   11b08:	d81c      	bhi.n	11b44 <uarte_nrfx_configure+0x7c>
   11b0a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11b0e:	d06b      	beq.n	11be8 <uarte_nrfx_configure+0x120>
   11b10:	d810      	bhi.n	11b34 <uarte_nrfx_configure+0x6c>
   11b12:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11b16:	d06a      	beq.n	11bee <uarte_nrfx_configure+0x126>
   11b18:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11b1c:	d06a      	beq.n	11bf4 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   11b1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11b22:	e05b      	b.n	11bdc <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   11b24:	2700      	movs	r7, #0
   11b26:	e7d6      	b.n	11ad6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   11b28:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11b2c:	220e      	movs	r2, #14
   11b2e:	e7e0      	b.n	11af2 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   11b30:	2400      	movs	r4, #0
   11b32:	e7fb      	b.n	11b2c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   11b34:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11b38:	d05f      	beq.n	11bfa <uarte_nrfx_configure+0x132>
   11b3a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11b3e:	d1ee      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11b40:	4b38      	ldr	r3, [pc, #224]	; (11c24 <uarte_nrfx_configure+0x15c>)
   11b42:	e03c      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11b44:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11b48:	d05a      	beq.n	11c00 <uarte_nrfx_configure+0x138>
   11b4a:	d807      	bhi.n	11b5c <uarte_nrfx_configure+0x94>
   11b4c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11b50:	d058      	beq.n	11c04 <uarte_nrfx_configure+0x13c>
   11b52:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11b56:	d1e2      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11b58:	4b33      	ldr	r3, [pc, #204]	; (11c28 <uarte_nrfx_configure+0x160>)
   11b5a:	e030      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11b5c:	f647 2512 	movw	r5, #31250	; 0x7a12
   11b60:	42ab      	cmp	r3, r5
   11b62:	d1dc      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11b64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11b68:	e029      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11b6a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11b6e:	d04b      	beq.n	11c08 <uarte_nrfx_configure+0x140>
   11b70:	d813      	bhi.n	11b9a <uarte_nrfx_configure+0xd2>
   11b72:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11b76:	d04a      	beq.n	11c0e <uarte_nrfx_configure+0x146>
   11b78:	d809      	bhi.n	11b8e <uarte_nrfx_configure+0xc6>
   11b7a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   11b7e:	42ab      	cmp	r3, r5
   11b80:	d047      	beq.n	11c12 <uarte_nrfx_configure+0x14a>
   11b82:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11b86:	d1ca      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11b88:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11b8c:	e017      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11b8e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11b92:	d1c4      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11b94:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11b98:	e011      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11b9a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11b9e:	d03b      	beq.n	11c18 <uarte_nrfx_configure+0x150>
   11ba0:	d808      	bhi.n	11bb4 <uarte_nrfx_configure+0xec>
   11ba2:	4d22      	ldr	r5, [pc, #136]	; (11c2c <uarte_nrfx_configure+0x164>)
   11ba4:	42ab      	cmp	r3, r5
   11ba6:	d03a      	beq.n	11c1e <uarte_nrfx_configure+0x156>
   11ba8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11bac:	d1b7      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11bae:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11bb2:	e004      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11bb4:	4d1e      	ldr	r5, [pc, #120]	; (11c30 <uarte_nrfx_configure+0x168>)
   11bb6:	42ab      	cmp	r3, r5
   11bb8:	d1b1      	bne.n	11b1e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11bba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   11bbe:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11bc0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   11bc4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   11bc6:	433a      	orrs	r2, r7
   11bc8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   11bca:	4334      	orrs	r4, r6
   11bcc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11bce:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   11bd2:	1d2b      	adds	r3, r5, #4
   11bd4:	c903      	ldmia	r1, {r0, r1}
   11bd6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11bda:	2000      	movs	r0, #0
}
   11bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11bde:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11be2:	e7ec      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11be4:	4b13      	ldr	r3, [pc, #76]	; (11c34 <uarte_nrfx_configure+0x16c>)
   11be6:	e7ea      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11be8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11bec:	e7e7      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   11bee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11bf2:	e7e4      	b.n	11bbe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   11bf4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11bf8:	e7e1      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11bfa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11bfe:	e7de      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11c00:	4b0d      	ldr	r3, [pc, #52]	; (11c38 <uarte_nrfx_configure+0x170>)
   11c02:	e7dc      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11c04:	4b0d      	ldr	r3, [pc, #52]	; (11c3c <uarte_nrfx_configure+0x174>)
   11c06:	e7da      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11c08:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11c0c:	e7d7      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11c0e:	4b0c      	ldr	r3, [pc, #48]	; (11c40 <uarte_nrfx_configure+0x178>)
   11c10:	e7d5      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11c12:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11c16:	e7d2      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11c18:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11c1c:	e7cf      	b.n	11bbe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11c1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11c22:	e7cc      	b.n	11bbe <uarte_nrfx_configure+0xf6>
   11c24:	0013b000 	.word	0x0013b000
   11c28:	004ea000 	.word	0x004ea000
   11c2c:	0003d090 	.word	0x0003d090
   11c30:	000f4240 	.word	0x000f4240
   11c34:	00275000 	.word	0x00275000
   11c38:	0075c000 	.word	0x0075c000
   11c3c:	003af000 	.word	0x003af000
   11c40:	013a9000 	.word	0x013a9000

00011c44 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   11c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11c48:	4680      	mov	r8, r0
   11c4a:	2200      	movs	r2, #0
   11c4c:	2101      	movs	r1, #1
   11c4e:	2008      	movs	r0, #8
   11c50:	f7f7 fec8 	bl	99e4 <z_arm_irq_priority_set>
   11c54:	2008      	movs	r0, #8
   11c56:	f7f7 fe95 	bl	9984 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11c5a:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   11c5c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   11c60:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   11c64:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   11c66:	aa01      	add	r2, sp, #4
   11c68:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   11c6c:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   11c70:	f8d7 900c 	ldr.w	r9, [r7, #12]
   11c74:	4648      	mov	r0, r9
   11c76:	f00b fda1 	bl	1d7bc <pinctrl_lookup_state>
	if (ret < 0) {
   11c7a:	1e05      	subs	r5, r0, #0
   11c7c:	db1e      	blt.n	11cbc <uarte_0_init+0x78>
	return pinctrl_apply_state_direct(config, state);
   11c7e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   11c80:	f8d9 2000 	ldr.w	r2, [r9]
   11c84:	7919      	ldrb	r1, [r3, #4]
   11c86:	6818      	ldr	r0, [r3, #0]
   11c88:	f00b fdab 	bl	1d7e2 <pinctrl_configure_pins>
	if (err < 0) {
   11c8c:	1e05      	subs	r5, r0, #0
   11c8e:	db15      	blt.n	11cbc <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   11c90:	4640      	mov	r0, r8
   11c92:	1d31      	adds	r1, r6, #4
   11c94:	f7ff ff18 	bl	11ac8 <uarte_nrfx_configure>
	if (err) {
   11c98:	4605      	mov	r5, r0
   11c9a:	b978      	cbnz	r0, 11cbc <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   11c9c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   11c9e:	0799      	lsls	r1, r3, #30
   11ca0:	d52b      	bpl.n	11cfa <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   11ca2:	f106 0018 	add.w	r0, r6, #24
   11ca6:	f001 fd91 	bl	137cc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   11caa:	4b28      	ldr	r3, [pc, #160]	; (11d4c <uarte_0_init+0x108>)
   11cac:	4298      	cmp	r0, r3
   11cae:	d009      	beq.n	11cc4 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   11cb0:	2145      	movs	r1, #69	; 0x45
   11cb2:	4827      	ldr	r0, [pc, #156]	; (11d50 <uarte_0_init+0x10c>)
   11cb4:	f009 fb40 	bl	1b338 <z_log_minimal_printk>
		return -EIO;
   11cb8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   11cbc:	4628      	mov	r0, r5
   11cbe:	b003      	add	sp, #12
   11cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11cc4:	7e33      	ldrb	r3, [r6, #24]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   11cc6:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11cce:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   11cd2:	d10a      	bne.n	11cea <uarte_0_init+0xa6>
   11cd4:	491f      	ldr	r1, [pc, #124]	; (11d54 <uarte_0_init+0x110>)
   11cd6:	4820      	ldr	r0, [pc, #128]	; (11d58 <uarte_0_init+0x114>)
   11cd8:	f240 224e 	movw	r2, #590	; 0x24e
   11cdc:	f009 fb18 	bl	1b310 <assert_print>
   11ce0:	f240 214e 	movw	r1, #590	; 0x24e
   11ce4:	481b      	ldr	r0, [pc, #108]	; (11d54 <uarte_0_init+0x110>)
   11ce6:	f009 fb0c 	bl	1b302 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11cea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   11cee:	2301      	movs	r3, #1
   11cf0:	7e32      	ldrb	r2, [r6, #24]
   11cf2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   11cf4:	4a19      	ldr	r2, [pc, #100]	; (11d5c <uarte_0_init+0x118>)
   11cf6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11cfa:	2308      	movs	r3, #8
   11cfc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   11d00:	7a3b      	ldrb	r3, [r7, #8]
   11d02:	b953      	cbnz	r3, 11d1a <uarte_0_init+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d04:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   11d08:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11d0c:	6973      	ldr	r3, [r6, #20]
   11d0e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11d12:	2301      	movs	r3, #1
   11d14:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d18:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   11d1a:	687b      	ldr	r3, [r7, #4]
   11d1c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   11d1e:	bf5c      	itt	pl
   11d20:	f44f 7380 	movpl.w	r3, #256	; 0x100
   11d24:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11d28:	687b      	ldr	r3, [r7, #4]
   11d2a:	06db      	lsls	r3, r3, #27
   11d2c:	bf44      	itt	mi
   11d2e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   11d32:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11d36:	6933      	ldr	r3, [r6, #16]
   11d38:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11d3c:	2300      	movs	r3, #0
   11d3e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d42:	2301      	movs	r3, #1
   11d44:	60a3      	str	r3, [r4, #8]
   11d46:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   11d48:	e7b8      	b.n	11cbc <uarte_0_init+0x78>
   11d4a:	bf00      	nop
   11d4c:	0bad0000 	.word	0x0bad0000
   11d50:	0002450b 	.word	0x0002450b
   11d54:	0002452f 	.word	0x0002452f
   11d58:	000221f8 	.word	0x000221f8
   11d5c:	50017000 	.word	0x50017000

00011d60 <uarte_nrfx_poll_out>:
{
   11d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d62:	4604      	mov	r4, r0
   11d64:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   11d66:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11d68:	f00d f909 	bl	1ef7e <k_is_in_isr>
   11d6c:	b9b0      	cbnz	r0, 11d9c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   11d6e:	4b2e      	ldr	r3, [pc, #184]	; (11e28 <uarte_nrfx_poll_out+0xc8>)
   11d70:	781b      	ldrb	r3, [r3, #0]
   11d72:	b19b      	cbz	r3, 11d9c <uarte_nrfx_poll_out+0x3c>
{
   11d74:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   11d76:	6860      	ldr	r0, [r4, #4]
   11d78:	f00b fcd2 	bl	1d720 <is_tx_ready.isra.0>
   11d7c:	bb00      	cbnz	r0, 11dc0 <uarte_nrfx_poll_out+0x60>
   11d7e:	2001      	movs	r0, #1
   11d80:	f00c f9ba 	bl	1e0f8 <nrfx_busy_wait>
   11d84:	3e01      	subs	r6, #1
   11d86:	d1f6      	bne.n	11d76 <uarte_nrfx_poll_out+0x16>
   11d88:	2100      	movs	r1, #0
   11d8a:	2021      	movs	r0, #33	; 0x21
   11d8c:	f006 fa64 	bl	18258 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11d90:	e7f0      	b.n	11d74 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   11d92:	f386 8811 	msr	BASEPRI, r6
   11d96:	f3bf 8f6f 	isb	sy
}
   11d9a:	e7f5      	b.n	11d88 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   11d9c:	f04f 0320 	mov.w	r3, #32
   11da0:	f3ef 8611 	mrs	r6, BASEPRI
   11da4:	f383 8812 	msr	BASEPRI_MAX, r3
   11da8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   11dac:	6860      	ldr	r0, [r4, #4]
   11dae:	4631      	mov	r1, r6
   11db0:	f00b fcb6 	bl	1d720 <is_tx_ready.isra.0>
   11db4:	b990      	cbnz	r0, 11ddc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   11db6:	f386 8811 	msr	BASEPRI, r6
   11dba:	f3bf 8f6f 	isb	sy
}
   11dbe:	e7ed      	b.n	11d9c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   11dc0:	f04f 0320 	mov.w	r3, #32
   11dc4:	f3ef 8611 	mrs	r6, BASEPRI
   11dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   11dcc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   11dd0:	6860      	ldr	r0, [r4, #4]
   11dd2:	4631      	mov	r1, r6
   11dd4:	f00b fca4 	bl	1d720 <is_tx_ready.isra.0>
   11dd8:	2800      	cmp	r0, #0
   11dda:	d0da      	beq.n	11d92 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   11ddc:	693b      	ldr	r3, [r7, #16]
   11dde:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   11de0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11de2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   11de4:	6813      	ldr	r3, [r2, #0]
   11de6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11dea:	2001      	movs	r0, #1
   11dec:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11df0:	2000      	movs	r0, #0
   11df2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   11df6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   11dfa:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11dfe:	6852      	ldr	r2, [r2, #4]
   11e00:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   11e04:	06d2      	lsls	r2, r2, #27
   11e06:	d508      	bpl.n	11e1a <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11e08:	2008      	movs	r0, #8
	return config->uarte_regs;
   11e0a:	6862      	ldr	r2, [r4, #4]
   11e0c:	6812      	ldr	r2, [r2, #0]
   11e0e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   11e12:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   11e16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11e1a:	2201      	movs	r2, #1
   11e1c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   11e1e:	f381 8811 	msr	BASEPRI, r1
   11e22:	f3bf 8f6f 	isb	sy
}
   11e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e28:	20007370 	.word	0x20007370

00011e2c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   11e2c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   11e2e:	4806      	ldr	r0, [pc, #24]	; (11e48 <bt_rpmsg_init+0x1c>)
   11e30:	f7f9 fe34 	bl	ba9c <bt_hci_driver_register>
	if (err < 0) {
   11e34:	1e04      	subs	r4, r0, #0
   11e36:	da04      	bge.n	11e42 <bt_rpmsg_init+0x16>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   11e38:	4622      	mov	r2, r4
   11e3a:	2145      	movs	r1, #69	; 0x45
   11e3c:	4803      	ldr	r0, [pc, #12]	; (11e4c <bt_rpmsg_init+0x20>)
   11e3e:	f009 fa7b 	bl	1b338 <z_log_minimal_printk>
	}

	return err;
}
   11e42:	4620      	mov	r0, r4
   11e44:	bd10      	pop	{r4, pc}
   11e46:	bf00      	nop
   11e48:	00020428 	.word	0x00020428
   11e4c:	00024581 	.word	0x00024581

00011e50 <bt_rpmsg_send>:
{
   11e50:	b510      	push	{r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11e52:	7e02      	ldrb	r2, [r0, #24]
   11e54:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   11e56:	2a02      	cmp	r2, #2
   11e58:	d00c      	beq.n	11e74 <bt_rpmsg_send+0x24>
   11e5a:	2a04      	cmp	r2, #4
   11e5c:	d009      	beq.n	11e72 <bt_rpmsg_send+0x22>
   11e5e:	b1c2      	cbz	r2, 11e92 <bt_rpmsg_send+0x42>
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   11e60:	2145      	movs	r1, #69	; 0x45
   11e62:	480d      	ldr	r0, [pc, #52]	; (11e98 <bt_rpmsg_send+0x48>)
		LOG_ERR("Failed to send (err %d)", err);
   11e64:	f009 fa68 	bl	1b338 <z_log_minimal_printk>
	net_buf_unref(buf);
   11e68:	4620      	mov	r0, r4
   11e6a:	f7fe ffc9 	bl	10e00 <net_buf_unref>
}
   11e6e:	2000      	movs	r0, #0
   11e70:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   11e72:	2205      	movs	r2, #5
	net_buf_simple_push_u8(&buf->b, val);
   11e74:	4611      	mov	r1, r2
   11e76:	f104 000c 	add.w	r0, r4, #12
   11e7a:	f00b fb63 	bl	1d544 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   11e7e:	8a22      	ldrh	r2, [r4, #16]
   11e80:	68e1      	ldr	r1, [r4, #12]
   11e82:	4806      	ldr	r0, [pc, #24]	; (11e9c <bt_rpmsg_send+0x4c>)
   11e84:	f7f5 ffac 	bl	7de0 <ipc_service_send>
	if (err < 0) {
   11e88:	1e02      	subs	r2, r0, #0
   11e8a:	daed      	bge.n	11e68 <bt_rpmsg_send+0x18>
		LOG_ERR("Failed to send (err %d)", err);
   11e8c:	2145      	movs	r1, #69	; 0x45
   11e8e:	4804      	ldr	r0, [pc, #16]	; (11ea0 <bt_rpmsg_send+0x50>)
   11e90:	e7e8      	b.n	11e64 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   11e92:	2201      	movs	r2, #1
   11e94:	e7ee      	b.n	11e74 <bt_rpmsg_send+0x24>
   11e96:	bf00      	nop
   11e98:	000245b0 	.word	0x000245b0
   11e9c:	20006cbc 	.word	0x20006cbc
   11ea0:	000245c5 	.word	0x000245c5

00011ea4 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   11ea4:	4801      	ldr	r0, [pc, #4]	; (11eac <hci_ept_bound+0x8>)
   11ea6:	f004 bd9f 	b.w	169e8 <z_impl_k_sem_give>
   11eaa:	bf00      	nop
   11eac:	200008c0 	.word	0x200008c0

00011eb0 <bt_rpmsg_open>:
{
   11eb0:	b510      	push	{r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   11eb2:	4813      	ldr	r0, [pc, #76]	; (11f00 <bt_rpmsg_open+0x50>)
   11eb4:	f7f5 ff56 	bl	7d64 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   11eb8:	4604      	mov	r4, r0
   11eba:	b148      	cbz	r0, 11ed0 <bt_rpmsg_open+0x20>
   11ebc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11ec0:	d006      	beq.n	11ed0 <bt_rpmsg_open+0x20>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   11ec2:	2145      	movs	r1, #69	; 0x45
   11ec4:	4602      	mov	r2, r0
   11ec6:	480f      	ldr	r0, [pc, #60]	; (11f04 <bt_rpmsg_open+0x54>)
		LOG_ERR("Endpoint binding failed with %d", err);
   11ec8:	f009 fa36 	bl	1b338 <z_log_minimal_printk>
}
   11ecc:	4620      	mov	r0, r4
   11ece:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   11ed0:	4a0d      	ldr	r2, [pc, #52]	; (11f08 <bt_rpmsg_open+0x58>)
   11ed2:	490e      	ldr	r1, [pc, #56]	; (11f0c <bt_rpmsg_open+0x5c>)
   11ed4:	480a      	ldr	r0, [pc, #40]	; (11f00 <bt_rpmsg_open+0x50>)
   11ed6:	f7f5 ff63 	bl	7da0 <ipc_service_register_endpoint>
	if (err) {
   11eda:	4604      	mov	r4, r0
   11edc:	b118      	cbz	r0, 11ee6 <bt_rpmsg_open+0x36>
		LOG_ERR("Registering endpoint failed with %d", err);
   11ede:	4602      	mov	r2, r0
   11ee0:	2145      	movs	r1, #69	; 0x45
   11ee2:	480b      	ldr	r0, [pc, #44]	; (11f10 <bt_rpmsg_open+0x60>)
   11ee4:	e7f0      	b.n	11ec8 <bt_rpmsg_open+0x18>
	return z_impl_k_sem_take(sem, timeout);
   11ee6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11eea:	2300      	movs	r3, #0
   11eec:	4809      	ldr	r0, [pc, #36]	; (11f14 <bt_rpmsg_open+0x64>)
   11eee:	f004 fdb7 	bl	16a60 <z_impl_k_sem_take>
	if (err) {
   11ef2:	4604      	mov	r4, r0
   11ef4:	2800      	cmp	r0, #0
   11ef6:	d0e9      	beq.n	11ecc <bt_rpmsg_open+0x1c>
		LOG_ERR("Endpoint binding failed with %d", err);
   11ef8:	4602      	mov	r2, r0
   11efa:	2145      	movs	r1, #69	; 0x45
   11efc:	4806      	ldr	r0, [pc, #24]	; (11f18 <bt_rpmsg_open+0x68>)
   11efe:	e7e3      	b.n	11ec8 <bt_rpmsg_open+0x18>
   11f00:	0001f5cc 	.word	0x0001f5cc
   11f04:	000245e2 	.word	0x000245e2
   11f08:	20000414 	.word	0x20000414
   11f0c:	20006cbc 	.word	0x20006cbc
   11f10:	00024617 	.word	0x00024617
   11f14:	200008c0 	.word	0x200008c0
   11f18:	00024640 	.word	0x00024640

00011f1c <hci_ept_recv>:
{
   11f1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11f20:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   11f22:	7800      	ldrb	r0, [r0, #0]
{
   11f24:	460f      	mov	r7, r1
	switch (pkt_indicator) {
   11f26:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
   11f28:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   11f2c:	d00a      	beq.n	11f44 <hci_ept_recv+0x28>
   11f2e:	2805      	cmp	r0, #5
   11f30:	f000 808d 	beq.w	1204e <hci_ept_recv+0x132>
   11f34:	2802      	cmp	r0, #2
   11f36:	f040 80b7 	bne.w	120a8 <hci_ept_recv+0x18c>
	if (remaining < sizeof(hdr)) {
   11f3a:	2b03      	cmp	r3, #3
   11f3c:	d865      	bhi.n	1200a <hci_ept_recv+0xee>
		LOG_ERR("Not enough data for ACL header");
   11f3e:	2145      	movs	r1, #69	; 0x45
   11f40:	485d      	ldr	r0, [pc, #372]	; (120b8 <hci_ept_recv+0x19c>)
   11f42:	e003      	b.n	11f4c <hci_ept_recv+0x30>
	if (remaining < sizeof(hdr)) {
   11f44:	2b01      	cmp	r3, #1
   11f46:	d806      	bhi.n	11f56 <hci_ept_recv+0x3a>
		LOG_ERR("Not enough data for event header");
   11f48:	2145      	movs	r1, #69	; 0x45
   11f4a:	485c      	ldr	r0, [pc, #368]	; (120bc <hci_ept_recv+0x1a0>)
}
   11f4c:	b002      	add	sp, #8
   11f4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LOG_ERR("Not enough data for ACL header");
   11f52:	f009 b9f1 	b.w	1b338 <z_log_minimal_printk>
	switch (evt_type) {
   11f56:	7873      	ldrb	r3, [r6, #1]
   11f58:	2b3e      	cmp	r3, #62	; 0x3e
   11f5a:	d138      	bne.n	11fce <hci_ept_recv+0xb2>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   11f5c:	78f3      	ldrb	r3, [r6, #3]
		switch (subevt_type) {
   11f5e:	2b02      	cmp	r3, #2
   11f60:	d033      	beq.n	11fca <hci_ept_recv+0xae>
   11f62:	2b0d      	cmp	r3, #13
   11f64:	d133      	bne.n	11fce <hci_ept_recv+0xb2>
			return (ext_adv->num_reports == 1) &&
   11f66:	7933      	ldrb	r3, [r6, #4]
   11f68:	2b01      	cmp	r3, #1
   11f6a:	d130      	bne.n	11fce <hci_ept_recv+0xb2>
   11f6c:	f8b6 4005 	ldrh.w	r4, [r6, #5]
   11f70:	f3c4 1400 	ubfx	r4, r4, #4, #1
	memcpy((void *)&hdr, data, sizeof(hdr));
   11f74:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   11f78:	3f03      	subs	r7, #3
	if (remaining != hdr.len) {
   11f7a:	ebb7 2f13 	cmp.w	r7, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   11f7e:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (remaining != hdr.len) {
   11f82:	d129      	bne.n	11fd8 <hci_ept_recv+0xbc>
   11f84:	b32c      	cbz	r4, 11fd2 <hci_ept_recv+0xb6>
   11f86:	f04f 0800 	mov.w	r8, #0
   11f8a:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   11f8e:	f8df a150 	ldr.w	sl, [pc, #336]	; 120e0 <hci_ept_recv+0x1c4>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   11f92:	4642      	mov	r2, r8
   11f94:	464b      	mov	r3, r9
   11f96:	4621      	mov	r1, r4
   11f98:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11f9c:	f7f8 fc8a 	bl	a8b4 <bt_buf_get_evt>
		if (!buf) {
   11fa0:	4605      	mov	r5, r0
   11fa2:	b300      	cbz	r0, 11fe6 <hci_ept_recv+0xca>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11fa4:	f100 040c 	add.w	r4, r0, #12
   11fa8:	2202      	movs	r2, #2
   11faa:	a901      	add	r1, sp, #4
   11fac:	4620      	mov	r0, r4
   11fae:	f00b faec 	bl	1d58a <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   11fb2:	4620      	mov	r0, r4
   11fb4:	f00b fae1 	bl	1d57a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   11fb8:	4287      	cmp	r7, r0
   11fba:	4603      	mov	r3, r0
   11fbc:	d91a      	bls.n	11ff4 <hci_ept_recv+0xd8>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   11fbe:	463a      	mov	r2, r7
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   11fc0:	2145      	movs	r1, #69	; 0x45
   11fc2:	483f      	ldr	r0, [pc, #252]	; (120c0 <hci_ept_recv+0x1a4>)
   11fc4:	f009 f9b8 	bl	1b338 <z_log_minimal_printk>
   11fc8:	e03a      	b.n	12040 <hci_ept_recv+0x124>
			return true;
   11fca:	2401      	movs	r4, #1
   11fcc:	e7d2      	b.n	11f74 <hci_ept_recv+0x58>
		switch (subevt_type) {
   11fce:	2400      	movs	r4, #0
   11fd0:	e7d0      	b.n	11f74 <hci_ept_recv+0x58>
   11fd2:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   11fd6:	e7d8      	b.n	11f8a <hci_ept_recv+0x6e>
		LOG_ERR("Event payload length is not correct");
   11fd8:	2145      	movs	r1, #69	; 0x45
   11fda:	483a      	ldr	r0, [pc, #232]	; (120c4 <hci_ept_recv+0x1a8>)
   11fdc:	f009 f9ac 	bl	1b338 <z_log_minimal_printk>
}
   11fe0:	b002      	add	sp, #8
   11fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (discardable) {
   11fe6:	2c00      	cmp	r4, #0
   11fe8:	d1fa      	bne.n	11fe0 <hci_ept_recv+0xc4>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   11fea:	2157      	movs	r1, #87	; 0x57
   11fec:	4650      	mov	r0, sl
   11fee:	f009 f9a3 	bl	1b338 <z_log_minimal_printk>
	} while (!buf);
   11ff2:	e7ce      	b.n	11f92 <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11ff4:	463a      	mov	r2, r7
   11ff6:	4620      	mov	r0, r4
   11ff8:	1cf1      	adds	r1, r6, #3
   11ffa:	f00b fac6 	bl	1d58a <net_buf_simple_add_mem>
		bt_recv(buf);
   11ffe:	4628      	mov	r0, r5
}
   12000:	b002      	add	sp, #8
   12002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_recv(buf);
   12006:	f7f9 bd23 	b.w	ba50 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1200a:	2200      	movs	r2, #0
   1200c:	2300      	movs	r3, #0
   1200e:	2003      	movs	r0, #3
   12010:	f7f8 fc0a 	bl	a828 <bt_buf_get_rx>
	if (buf) {
   12014:	4605      	mov	r5, r0
   12016:	b1b8      	cbz	r0, 12048 <hci_ept_recv+0x12c>
   12018:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1201a:	f8d6 3001 	ldr.w	r3, [r6, #1]
		remaining -= sizeof(hdr);
   1201e:	1f7c      	subs	r4, r7, #5
   12020:	f100 070c 	add.w	r7, r0, #12
   12024:	4638      	mov	r0, r7
   12026:	eb0d 0102 	add.w	r1, sp, r2
		memcpy((void *)&hdr, data, sizeof(hdr));
   1202a:	9301      	str	r3, [sp, #4]
   1202c:	f00b faad 	bl	1d58a <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   12030:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12034:	429c      	cmp	r4, r3
   12036:	d02d      	beq.n	12094 <hci_ept_recv+0x178>
		LOG_ERR("ACL payload length is not correct");
   12038:	2145      	movs	r1, #69	; 0x45
   1203a:	4823      	ldr	r0, [pc, #140]	; (120c8 <hci_ept_recv+0x1ac>)
		LOG_ERR("ISO payload length is not correct");
   1203c:	f009 f97c 	bl	1b338 <z_log_minimal_printk>
		net_buf_unref(buf);
   12040:	4628      	mov	r0, r5
   12042:	f7fe fedd 	bl	10e00 <net_buf_unref>
	if (buf) {
   12046:	e7cb      	b.n	11fe0 <hci_ept_recv+0xc4>
		LOG_ERR("No available ACL buffers!");
   12048:	2145      	movs	r1, #69	; 0x45
   1204a:	4820      	ldr	r0, [pc, #128]	; (120cc <hci_ept_recv+0x1b0>)
   1204c:	e77e      	b.n	11f4c <hci_ept_recv+0x30>
	if (remaining < sizeof(hdr)) {
   1204e:	2b03      	cmp	r3, #3
   12050:	d802      	bhi.n	12058 <hci_ept_recv+0x13c>
		LOG_ERR("Not enough data for ISO header");
   12052:	2145      	movs	r1, #69	; 0x45
   12054:	481e      	ldr	r0, [pc, #120]	; (120d0 <hci_ept_recv+0x1b4>)
   12056:	e779      	b.n	11f4c <hci_ept_recv+0x30>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   12058:	2200      	movs	r2, #0
   1205a:	2300      	movs	r3, #0
   1205c:	f7f8 fbe4 	bl	a828 <bt_buf_get_rx>
	if (buf) {
   12060:	4605      	mov	r5, r0
   12062:	b1a0      	cbz	r0, 1208e <hci_ept_recv+0x172>
   12064:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   12066:	f8d6 3001 	ldr.w	r3, [r6, #1]
		remaining -= sizeof(hdr);
   1206a:	1f7c      	subs	r4, r7, #5
   1206c:	f100 070c 	add.w	r7, r0, #12
   12070:	4638      	mov	r0, r7
   12072:	eb0d 0102 	add.w	r1, sp, r2
		memcpy((void *)&hdr, data, sizeof(hdr));
   12076:	9301      	str	r3, [sp, #4]
   12078:	f00b fa87 	bl	1d58a <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1207c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12080:	f3c3 030d 	ubfx	r3, r3, #0, #14
   12084:	429c      	cmp	r4, r3
   12086:	d005      	beq.n	12094 <hci_ept_recv+0x178>
		LOG_ERR("ISO payload length is not correct");
   12088:	2145      	movs	r1, #69	; 0x45
   1208a:	4812      	ldr	r0, [pc, #72]	; (120d4 <hci_ept_recv+0x1b8>)
   1208c:	e7d6      	b.n	1203c <hci_ept_recv+0x120>
		LOG_ERR("No available ISO buffers!");
   1208e:	2145      	movs	r1, #69	; 0x45
   12090:	4811      	ldr	r0, [pc, #68]	; (120d8 <hci_ept_recv+0x1bc>)
   12092:	e75b      	b.n	11f4c <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   12094:	4638      	mov	r0, r7
   12096:	f00b fa70 	bl	1d57a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1209a:	4284      	cmp	r4, r0
   1209c:	4603      	mov	r3, r0
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1209e:	4622      	mov	r2, r4
	if (buf_tailroom < remaining) {
   120a0:	d88e      	bhi.n	11fc0 <hci_ept_recv+0xa4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   120a2:	4638      	mov	r0, r7
   120a4:	1d71      	adds	r1, r6, #5
   120a6:	e7a8      	b.n	11ffa <hci_ept_recv+0xde>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   120a8:	4602      	mov	r2, r0
   120aa:	2145      	movs	r1, #69	; 0x45
   120ac:	480b      	ldr	r0, [pc, #44]	; (120dc <hci_ept_recv+0x1c0>)
}
   120ae:	b002      	add	sp, #8
   120b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   120b4:	f009 b940 	b.w	1b338 <z_log_minimal_printk>
   120b8:	00024716 	.word	0x00024716
   120bc:	00024665 	.word	0x00024665
   120c0:	000246ee 	.word	0x000246ee
   120c4:	0002468b 	.word	0x0002468b
   120c8:	00024759 	.word	0x00024759
   120cc:	0002473a 	.word	0x0002473a
   120d0:	00024780 	.word	0x00024780
   120d4:	000247c3 	.word	0x000247c3
   120d8:	000247a4 	.word	0x000247a4
   120dc:	000247ea 	.word	0x000247ea
   120e0:	000246b4 	.word	0x000246b4

000120e4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   120e4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   120e6:	490e      	ldr	r1, [pc, #56]	; (12120 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   120e8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   120ec:	e9d1 3400 	ldrd	r3, r4, [r1]
   120f0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   120f2:	18c3      	adds	r3, r0, r3
   120f4:	f144 0400 	adc.w	r4, r4, #0
   120f8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   120fc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   12100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12104:	d209      	bcs.n	1211a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12106:	4b07      	ldr	r3, [pc, #28]	; (12124 <sys_clock_timeout_handler+0x40>)
   12108:	681b      	ldr	r3, [r3, #0]
   1210a:	0a1a      	lsrs	r2, r3, #8
   1210c:	061b      	lsls	r3, r3, #24
   1210e:	199c      	adds	r4, r3, r6
   12110:	4b05      	ldr	r3, [pc, #20]	; (12128 <sys_clock_timeout_handler+0x44>)
   12112:	f142 0500 	adc.w	r5, r2, #0
   12116:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1211a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1211c:	f006 bb8e 	b.w	1883c <sys_clock_announce>
   12120:	20005e90 	.word	0x20005e90
   12124:	20006ccc 	.word	0x20006ccc
   12128:	20005e98 	.word	0x20005e98

0001212c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1212c:	4b0d      	ldr	r3, [pc, #52]	; (12164 <z_nrf_rtc_timer_read+0x38>)
   1212e:	6818      	ldr	r0, [r3, #0]
   12130:	0a01      	lsrs	r1, r0, #8
   12132:	0600      	lsls	r0, r0, #24
   12134:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   12138:	4b0b      	ldr	r3, [pc, #44]	; (12168 <z_nrf_rtc_timer_read+0x3c>)
   1213a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1213e:	1818      	adds	r0, r3, r0
   12140:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   12144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12148:	d20a      	bcs.n	12160 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1214a:	4b08      	ldr	r3, [pc, #32]	; (1216c <z_nrf_rtc_timer_read+0x40>)
   1214c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12150:	4290      	cmp	r0, r2
   12152:	eb71 0303 	sbcs.w	r3, r1, r3
   12156:	d203      	bcs.n	12160 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   12158:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1215c:	f141 0100 	adc.w	r1, r1, #0
}
   12160:	4770      	bx	lr
   12162:	bf00      	nop
   12164:	20006ccc 	.word	0x20006ccc
   12168:	50015000 	.word	0x50015000
   1216c:	20005e98 	.word	0x20005e98

00012170 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   12170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   12174:	4b2e      	ldr	r3, [pc, #184]	; (12230 <rtc_nrf_isr+0xc0>)
   12176:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1217a:	0790      	lsls	r0, r2, #30
   1217c:	d50b      	bpl.n	12196 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1217e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12182:	b142      	cbz	r2, 12196 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12184:	2200      	movs	r2, #0
   12186:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1218a:	4a2a      	ldr	r2, [pc, #168]	; (12234 <rtc_nrf_isr+0xc4>)
   1218c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   12190:	6813      	ldr	r3, [r2, #0]
   12192:	3301      	adds	r3, #1
   12194:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12196:	4a26      	ldr	r2, [pc, #152]	; (12230 <rtc_nrf_isr+0xc0>)
   12198:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1219c:	03d9      	lsls	r1, r3, #15
   1219e:	d527      	bpl.n	121f0 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   121a0:	4b25      	ldr	r3, [pc, #148]	; (12238 <rtc_nrf_isr+0xc8>)
   121a2:	e8d3 1fef 	ldaex	r1, [r3]
   121a6:	f021 0001 	bic.w	r0, r1, #1
   121aa:	e8c3 0fe4 	stlex	r4, r0, [r3]
   121ae:	2c00      	cmp	r4, #0
   121b0:	d1f7      	bne.n	121a2 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   121b2:	07cb      	lsls	r3, r1, #31
   121b4:	d402      	bmi.n	121bc <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   121b6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   121ba:	b1cb      	cbz	r3, 121f0 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   121bc:	2500      	movs	r5, #0
   121be:	4c1c      	ldr	r4, [pc, #112]	; (12230 <rtc_nrf_isr+0xc0>)
   121c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   121c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   121c8:	f7ff ffb0 	bl	1212c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   121cc:	f04f 0320 	mov.w	r3, #32
   121d0:	f3ef 8211 	mrs	r2, BASEPRI
   121d4:	f383 8812 	msr	BASEPRI_MAX, r3
   121d8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   121dc:	4b17      	ldr	r3, [pc, #92]	; (1223c <rtc_nrf_isr+0xcc>)
   121de:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   121e2:	42b0      	cmp	r0, r6
   121e4:	41b9      	sbcs	r1, r7
   121e6:	d206      	bcs.n	121f6 <rtc_nrf_isr+0x86>
	__asm__ volatile(
   121e8:	f382 8811 	msr	BASEPRI, r2
   121ec:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   121f0:	b003      	add	sp, #12
   121f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   121f6:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   121fa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   121fe:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   12202:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   12204:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1220c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12210:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   12214:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12218:	f382 8811 	msr	BASEPRI, r2
   1221c:	f3bf 8f6f 	isb	sy
		if (handler) {
   12220:	2900      	cmp	r1, #0
   12222:	d0e5      	beq.n	121f0 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   12224:	9000      	str	r0, [sp, #0]
   12226:	4632      	mov	r2, r6
   12228:	463b      	mov	r3, r7
   1222a:	4628      	mov	r0, r5
   1222c:	4788      	blx	r1
   1222e:	e7df      	b.n	121f0 <rtc_nrf_isr+0x80>
   12230:	50015000 	.word	0x50015000
   12234:	20006ccc 	.word	0x20006ccc
   12238:	20006cc4 	.word	0x20006cc4
   1223c:	20005e80 	.word	0x20005e80

00012240 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   12240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12244:	4604      	mov	r4, r0
   12246:	460d      	mov	r5, r1
   12248:	4f43      	ldr	r7, [pc, #268]	; (12358 <compare_set.constprop.0.isra.0+0x118>)
   1224a:	e8d7 8fef 	ldaex	r8, [r7]
   1224e:	f028 0301 	bic.w	r3, r8, #1
   12252:	e8c7 3fe2 	stlex	r2, r3, [r7]
   12256:	2a00      	cmp	r2, #0
   12258:	d1f7      	bne.n	1224a <compare_set.constprop.0.isra.0+0xa>
    p_reg->INTENCLR = mask;
   1225a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1225e:	4e3f      	ldr	r6, [pc, #252]	; (1235c <compare_set.constprop.0.isra.0+0x11c>)
   12260:	f8c6 9308 	str.w	r9, [r6, #776]	; 0x308
   12264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12268:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1226c:	f7ff ff5e 	bl	1212c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   12270:	42a0      	cmp	r0, r4
   12272:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   12276:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1227a:	d240      	bcs.n	122fe <compare_set.constprop.0.isra.0+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1227c:	4b38      	ldr	r3, [pc, #224]	; (12360 <compare_set.constprop.0.isra.0+0x120>)
   1227e:	1a20      	subs	r0, r4, r0
   12280:	eb65 0101 	sbc.w	r1, r5, r1
   12284:	4298      	cmp	r0, r3
   12286:	f171 0100 	sbcs.w	r1, r1, #0
   1228a:	d248      	bcs.n	1231e <compare_set.constprop.0.isra.0+0xde>
		if (target_time != cc_data[chan].target_time) {
   1228c:	4b35      	ldr	r3, [pc, #212]	; (12364 <compare_set.constprop.0.isra.0+0x124>)
   1228e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   12292:	429d      	cmp	r5, r3
   12294:	bf08      	it	eq
   12296:	4294      	cmpeq	r4, r2
   12298:	d03a      	beq.n	12310 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1229a:	f04f 0c00 	mov.w	ip, #0
	return absolute_time & COUNTER_MAX;
   1229e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
   122a2:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   122a4:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   122a6:	f06f 0e02 	mvn.w	lr, #2
    p_reg->EVTENCLR = mask;
   122aa:	f8c6 9348 	str.w	r9, [r6, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   122ae:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   122b2:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   122b6:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 12374 <compare_set.constprop.0.isra.0+0x134>
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   122ba:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   122be:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   122c2:	f8c6 9344 	str.w	r9, [r6, #836]	; 0x344
     return p_reg->COUNTER;
   122c6:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   122ca:	ebae 0302 	sub.w	r3, lr, r2
   122ce:	445b      	add	r3, fp
   122d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   122d4:	4553      	cmp	r3, sl
   122d6:	d91b      	bls.n	12310 <compare_set.constprop.0.isra.0+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   122d8:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			if (event_check(chan)) {
   122dc:	b15b      	cbz	r3, 122f6 <compare_set.constprop.0.isra.0+0xb6>
     return p_reg->COUNTER;
   122de:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   122e2:	1a13      	subs	r3, r2, r0
   122e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   122e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   122ec:	d910      	bls.n	12310 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   122ee:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   122f2:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			cc_val = now + cc_inc;
   122f6:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   122fa:	3101      	adds	r1, #1
	for (;;) {
   122fc:	e7dd      	b.n	122ba <compare_set.constprop.0.isra.0+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   122fe:	4b1a      	ldr	r3, [pc, #104]	; (12368 <compare_set.constprop.0.isra.0+0x128>)
   12300:	e8d3 1fef 	ldaex	r1, [r3]
   12304:	f041 0101 	orr.w	r1, r1, #1
   12308:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1230c:	2a00      	cmp	r2, #0
   1230e:	d1f7      	bne.n	12300 <compare_set.constprop.0.isra.0+0xc0>
	cc_data[chan].target_time = target_time;
   12310:	4b14      	ldr	r3, [pc, #80]	; (12364 <compare_set.constprop.0.isra.0+0x124>)
	cc_data[chan].callback = handler;
   12312:	4a16      	ldr	r2, [pc, #88]	; (1236c <compare_set.constprop.0.isra.0+0x12c>)
	cc_data[chan].target_time = target_time;
   12314:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].callback = handler;
   12318:	601a      	str	r2, [r3, #0]
	cc_data[chan].user_context = user_data;
   1231a:	2200      	movs	r2, #0
   1231c:	605a      	str	r2, [r3, #4]
	if (key) {
   1231e:	f1b8 0f00 	cmp.w	r8, #0
   12322:	d016      	beq.n	12352 <compare_set.constprop.0.isra.0+0x112>
   12324:	e8d7 3fef 	ldaex	r3, [r7]
   12328:	f043 0301 	orr.w	r3, r3, #1
   1232c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   12330:	2a00      	cmp	r2, #0
   12332:	d1f7      	bne.n	12324 <compare_set.constprop.0.isra.0+0xe4>
    p_reg->INTENSET = mask;
   12334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12338:	4b08      	ldr	r3, [pc, #32]	; (1235c <compare_set.constprop.0.isra.0+0x11c>)
   1233a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1233e:	4b0a      	ldr	r3, [pc, #40]	; (12368 <compare_set.constprop.0.isra.0+0x128>)
   12340:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   12344:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12346:	bf42      	ittt	mi
   12348:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1234c:	4b08      	ldrmi	r3, [pc, #32]	; (12370 <compare_set.constprop.0.isra.0+0x130>)
   1234e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   12352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12356:	bf00      	nop
   12358:	20006cc8 	.word	0x20006cc8
   1235c:	50015000 	.word	0x50015000
   12360:	00800001 	.word	0x00800001
   12364:	20005e80 	.word	0x20005e80
   12368:	20006cc4 	.word	0x20006cc4
   1236c:	000120e5 	.word	0x000120e5
   12370:	e000e100 	.word	0xe000e100
   12374:	007ffffd 	.word	0x007ffffd

00012378 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   12378:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1237a:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->PRESCALER = val;
   1237e:	2500      	movs	r5, #0
   12380:	f04f 31ff 	mov.w	r1, #4294967295
   12384:	4c13      	ldr	r4, [pc, #76]	; (123d4 <sys_clock_driver_init+0x5c>)
   12386:	4b14      	ldr	r3, [pc, #80]	; (123d8 <sys_clock_driver_init+0x60>)
   12388:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1238c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   12390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12394:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12396:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1239a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1239e:	4b0f      	ldr	r3, [pc, #60]	; (123dc <sys_clock_driver_init+0x64>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   123a0:	2101      	movs	r1, #1
   123a2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   123a6:	2015      	movs	r0, #21
   123a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   123ac:	462a      	mov	r2, r5
   123ae:	f7f7 fb19 	bl	99e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   123b2:	2015      	movs	r0, #21
   123b4:	f7f7 fae6 	bl	9984 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   123b8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   123ba:	4a09      	ldr	r2, [pc, #36]	; (123e0 <sys_clock_driver_init+0x68>)
   123bc:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   123be:	2100      	movs	r1, #0
   123c0:	6023      	str	r3, [r4, #0]
   123c2:	4808      	ldr	r0, [pc, #32]	; (123e4 <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   123c4:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   123c6:	f7ff ff3b 	bl	12240 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   123ca:	4630      	mov	r0, r6
   123cc:	f7fe ffc2 	bl	11354 <z_nrf_clock_control_lf_on>

	return 0;
}
   123d0:	4628      	mov	r0, r5
   123d2:	bd70      	pop	{r4, r5, r6, pc}
   123d4:	50015000 	.word	0x50015000
   123d8:	20005e80 	.word	0x20005e80
   123dc:	e000e100 	.word	0xe000e100
   123e0:	20006cc8 	.word	0x20006cc8
   123e4:	007fffff 	.word	0x007fffff

000123e8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   123e8:	1c43      	adds	r3, r0, #1
{
   123ea:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   123ec:	d01d      	beq.n	1242a <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   123ee:	2801      	cmp	r0, #1
   123f0:	dd1d      	ble.n	1242e <sys_clock_set_timeout+0x46>
   123f2:	4a10      	ldr	r2, [pc, #64]	; (12434 <sys_clock_set_timeout+0x4c>)
   123f4:	4b10      	ldr	r3, [pc, #64]	; (12438 <sys_clock_set_timeout+0x50>)
   123f6:	4290      	cmp	r0, r2
   123f8:	bfd4      	ite	le
   123fa:	4604      	movle	r4, r0
   123fc:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   123fe:	f7ff fe95 	bl	1212c <z_nrf_rtc_timer_read>
   12402:	4a0e      	ldr	r2, [pc, #56]	; (1243c <sys_clock_set_timeout+0x54>)
   12404:	e9d2 3100 	ldrd	r3, r1, [r2]
   12408:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1240a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1240e:	bf28      	it	cs
   12410:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   12412:	4a09      	ldr	r2, [pc, #36]	; (12438 <sys_clock_set_timeout+0x50>)
	cyc += unannounced;
   12414:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   12416:	4294      	cmp	r4, r2
   12418:	bf28      	it	cs
   1241a:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1241c:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1241e:	f141 0100 	adc.w	r1, r1, #0
}
   12422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   12426:	f7ff bf0b 	b.w	12240 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1242a:	4c03      	ldr	r4, [pc, #12]	; (12438 <sys_clock_set_timeout+0x50>)
   1242c:	e7e7      	b.n	123fe <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1242e:	2401      	movs	r4, #1
   12430:	e7e5      	b.n	123fe <sys_clock_set_timeout+0x16>
   12432:	bf00      	nop
   12434:	007ffffe 	.word	0x007ffffe
   12438:	007fffff 	.word	0x007fffff
   1243c:	20005e90 	.word	0x20005e90

00012440 <sys_clock_elapsed>:
{
   12440:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   12442:	f7ff fe73 	bl	1212c <z_nrf_rtc_timer_read>
   12446:	4b02      	ldr	r3, [pc, #8]	; (12450 <sys_clock_elapsed+0x10>)
   12448:	681b      	ldr	r3, [r3, #0]
}
   1244a:	1ac0      	subs	r0, r0, r3
   1244c:	bd08      	pop	{r3, pc}
   1244e:	bf00      	nop
   12450:	20005e90 	.word	0x20005e90

00012454 <nrf_gpio_pin_port_decode>:
{
   12454:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12456:	6803      	ldr	r3, [r0, #0]
    switch (port)
   12458:	095a      	lsrs	r2, r3, #5
   1245a:	d00c      	beq.n	12476 <nrf_gpio_pin_port_decode+0x22>
   1245c:	2a01      	cmp	r2, #1
   1245e:	d012      	beq.n	12486 <nrf_gpio_pin_port_decode+0x32>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12460:	490e      	ldr	r1, [pc, #56]	; (1249c <nrf_gpio_pin_port_decode+0x48>)
   12462:	480f      	ldr	r0, [pc, #60]	; (124a0 <nrf_gpio_pin_port_decode+0x4c>)
   12464:	f240 2247 	movw	r2, #583	; 0x247
   12468:	f008 ff52 	bl	1b310 <assert_print>
   1246c:	f240 2147 	movw	r1, #583	; 0x247
   12470:	480a      	ldr	r0, [pc, #40]	; (1249c <nrf_gpio_pin_port_decode+0x48>)
   12472:	f008 ff46 	bl	1b302 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   12476:	f04f 32ff 	mov.w	r2, #4294967295
   1247a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1247e:	07d9      	lsls	r1, r3, #31
   12480:	d5ee      	bpl.n	12460 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   12482:	4808      	ldr	r0, [pc, #32]	; (124a4 <nrf_gpio_pin_port_decode+0x50>)
   12484:	e008      	b.n	12498 <nrf_gpio_pin_port_decode+0x44>
    return (mask & (1UL << pin_number)) ? true : false;
   12486:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1248a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1248e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12490:	07d2      	lsls	r2, r2, #31
   12492:	d5e5      	bpl.n	12460 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   12494:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   12496:	4804      	ldr	r0, [pc, #16]	; (124a8 <nrf_gpio_pin_port_decode+0x54>)
}
   12498:	bd08      	pop	{r3, pc}
   1249a:	bf00      	nop
   1249c:	000222b1 	.word	0x000222b1
   124a0:	000221f8 	.word	0x000221f8
   124a4:	50842500 	.word	0x50842500
   124a8:	50842800 	.word	0x50842800

000124ac <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   124ac:	b510      	push	{r4, lr}
   124ae:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   124b0:	6902      	ldr	r2, [r0, #16]
{
   124b2:	b0a2      	sub	sp, #136	; 0x88

	data->dev = dev;
   124b4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   124b8:	491e      	ldr	r1, [pc, #120]	; (12534 <mbox_nrf_init+0x88>)
   124ba:	2000      	movs	r0, #0
   124bc:	f001 fd6e 	bl	13f9c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   124c0:	2200      	movs	r2, #0
   124c2:	2101      	movs	r1, #1
   124c4:	202a      	movs	r0, #42	; 0x2a
   124c6:	f7f7 fa8d 	bl	99e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   124ca:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   124cc:	2284      	movs	r2, #132	; 0x84
   124ce:	2100      	movs	r1, #0
   124d0:	a801      	add	r0, sp, #4
   124d2:	f00c ff9e 	bl	1f412 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   124d6:	6863      	ldr	r3, [r4, #4]
   124d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   124dc:	d303      	bcc.n	124e6 <mbox_nrf_init+0x3a>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   124de:	2157      	movs	r1, #87	; 0x57
   124e0:	4815      	ldr	r0, [pc, #84]	; (12538 <mbox_nrf_init+0x8c>)
   124e2:	f008 ff29 	bl	1b338 <z_log_minimal_printk>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   124e6:	6823      	ldr	r3, [r4, #0]
   124e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   124ec:	d303      	bcc.n	124f6 <mbox_nrf_init+0x4a>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   124ee:	2157      	movs	r1, #87	; 0x57
   124f0:	4812      	ldr	r0, [pc, #72]	; (1253c <mbox_nrf_init+0x90>)
   124f2:	f008 ff21 	bl	1b338 <z_log_minimal_printk>
	ch_config.receive_events_enabled = 0;
   124f6:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   124f8:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   124fa:	9321      	str	r3, [sp, #132]	; 0x84
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   124fc:	aa01      	add	r2, sp, #4
		if (conf->tx_mask & BIT(ch)) {
   124fe:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12500:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   12502:	40d9      	lsrs	r1, r3
   12504:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   12506:	bf44      	itt	mi
   12508:	fa00 f103 	lslmi.w	r1, r0, r3
   1250c:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   12510:	6821      	ldr	r1, [r4, #0]
   12512:	40d9      	lsrs	r1, r3
   12514:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   12516:	bf48      	it	mi
   12518:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1251c:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   12520:	bf48      	it	mi
   12522:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12524:	2b10      	cmp	r3, #16
   12526:	d1ea      	bne.n	124fe <mbox_nrf_init+0x52>
	nrfx_ipc_config_load(&ch_config);
   12528:	a801      	add	r0, sp, #4
   1252a:	f001 fd4f 	bl	13fcc <nrfx_ipc_config_load>

	return 0;
}
   1252e:	2000      	movs	r0, #0
   12530:	b022      	add	sp, #136	; 0x88
   12532:	bd10      	pop	{r4, pc}
   12534:	00012609 	.word	0x00012609
   12538:	00024822 	.word	0x00024822
   1253c:	00024853 	.word	0x00024853

00012540 <mbox_nrf_send>:
{
   12540:	b538      	push	{r3, r4, r5, lr}
   12542:	4605      	mov	r5, r0
   12544:	460c      	mov	r4, r1
	if (msg) {
   12546:	b11a      	cbz	r2, 12550 <mbox_nrf_send+0x10>
		LOG_WRN("Sending data not supported");
   12548:	2157      	movs	r1, #87	; 0x57
   1254a:	480b      	ldr	r0, [pc, #44]	; (12578 <mbox_nrf_send+0x38>)
   1254c:	f008 fef4 	bl	1b338 <z_log_minimal_printk>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   12550:	2c0f      	cmp	r4, #15
   12552:	d80e      	bhi.n	12572 <mbox_nrf_send+0x32>
   12554:	686b      	ldr	r3, [r5, #4]
   12556:	685b      	ldr	r3, [r3, #4]
   12558:	40e3      	lsrs	r3, r4
   1255a:	07db      	lsls	r3, r3, #31
   1255c:	d509      	bpl.n	12572 <mbox_nrf_send+0x32>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1255e:	2301      	movs	r3, #1
	return 0;
   12560:	2000      	movs	r0, #0
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   12562:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12564:	b2e4      	uxtb	r4, r4
   12566:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
   1256a:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1256e:	6023      	str	r3, [r4, #0]
}
   12570:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12572:	f06f 0015 	mvn.w	r0, #21
   12576:	e7fb      	b.n	12570 <mbox_nrf_send+0x30>
   12578:	00024884 	.word	0x00024884

0001257c <mbox_nrf_set_enabled>:
{
   1257c:	b538      	push	{r3, r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1257e:	290f      	cmp	r1, #15
{
   12580:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   12582:	6905      	ldr	r5, [r0, #16]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12584:	d83b      	bhi.n	125fe <mbox_nrf_set_enabled+0x82>
   12586:	6843      	ldr	r3, [r0, #4]
   12588:	681b      	ldr	r3, [r3, #0]
   1258a:	40cb      	lsrs	r3, r1
   1258c:	07db      	lsls	r3, r3, #31
   1258e:	d536      	bpl.n	125fe <mbox_nrf_set_enabled+0x82>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   12590:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12594:	40cb      	lsrs	r3, r1
   12596:	f003 0301 	and.w	r3, r3, #1
   1259a:	b91a      	cbnz	r2, 125a4 <mbox_nrf_set_enabled+0x28>
   1259c:	b9e3      	cbnz	r3, 125d8 <mbox_nrf_set_enabled+0x5c>
		return -EALREADY;
   1259e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   125a2:	e02b      	b.n	125fc <mbox_nrf_set_enabled+0x80>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   125a4:	2b00      	cmp	r3, #0
   125a6:	d1fa      	bne.n	1259e <mbox_nrf_set_enabled+0x22>
	if (enable && (data->cb[channel] == NULL)) {
   125a8:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   125ac:	b91b      	cbnz	r3, 125b6 <mbox_nrf_set_enabled+0x3a>
		LOG_WRN("Enabling channel without a registered callback\n");
   125ae:	2157      	movs	r1, #87	; 0x57
   125b0:	4814      	ldr	r0, [pc, #80]	; (12604 <mbox_nrf_set_enabled+0x88>)
   125b2:	f008 fec1 	bl	1b338 <z_log_minimal_printk>
	if (enable && data->enabled_mask == 0) {
   125b6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   125ba:	b913      	cbnz	r3, 125c2 <mbox_nrf_set_enabled+0x46>
		irq_enable(DT_INST_IRQN(0));
   125bc:	202a      	movs	r0, #42	; 0x2a
   125be:	f7f7 f9e1 	bl	9984 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   125c2:	2201      	movs	r2, #1
   125c4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   125c8:	40a2      	lsls	r2, r4
   125ca:	4313      	orrs	r3, r2
   125cc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   125d0:	b2e0      	uxtb	r0, r4
   125d2:	f001 fd37 	bl	14044 <nrfx_ipc_receive_event_enable>
   125d6:	e00a      	b.n	125ee <mbox_nrf_set_enabled+0x72>
		nrfx_ipc_receive_event_disable(channel);
   125d8:	b2c8      	uxtb	r0, r1
   125da:	f001 fd4f 	bl	1407c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   125de:	2201      	movs	r2, #1
   125e0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   125e4:	40a2      	lsls	r2, r4
   125e6:	ea23 0302 	bic.w	r3, r3, r2
   125ea:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   125ee:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   125f2:	b913      	cbnz	r3, 125fa <mbox_nrf_set_enabled+0x7e>
		irq_disable(DT_INST_IRQN(0));
   125f4:	202a      	movs	r0, #42	; 0x2a
   125f6:	f7f7 f9d3 	bl	99a0 <arch_irq_disable>
	return 0;
   125fa:	2000      	movs	r0, #0
}
   125fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   125fe:	f06f 0015 	mvn.w	r0, #21
   12602:	e7fb      	b.n	125fc <mbox_nrf_set_enabled+0x80>
   12604:	000248a4 	.word	0x000248a4

00012608 <mbox_dispatcher>:
{
   12608:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1260a:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1260e:	280f      	cmp	r0, #15
{
   12610:	4604      	mov	r4, r0
   12612:	460d      	mov	r5, r1
   12614:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12616:	d803      	bhi.n	12620 <mbox_dispatcher+0x18>
   12618:	681b      	ldr	r3, [r3, #0]
   1261a:	40c3      	lsrs	r3, r0
   1261c:	07da      	lsls	r2, r3, #31
   1261e:	d403      	bmi.n	12628 <mbox_dispatcher+0x20>
		LOG_WRN("RX event on illegal channel");
   12620:	2157      	movs	r1, #87	; 0x57
   12622:	480d      	ldr	r0, [pc, #52]	; (12658 <mbox_dispatcher+0x50>)
   12624:	f008 fe88 	bl	1b338 <z_log_minimal_printk>
	if (!(data->enabled_mask & BIT(channel))) {
   12628:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1262c:	40e3      	lsrs	r3, r4
   1262e:	07db      	lsls	r3, r3, #31
   12630:	d403      	bmi.n	1263a <mbox_dispatcher+0x32>
		LOG_WRN("RX event on disabled channel");
   12632:	2157      	movs	r1, #87	; 0x57
   12634:	4809      	ldr	r0, [pc, #36]	; (1265c <mbox_dispatcher+0x54>)
   12636:	f008 fe7f 	bl	1b338 <z_log_minimal_printk>
	if (data->cb[channel] != NULL) {
   1263a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1263e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   12642:	b13d      	cbz	r5, 12654 <mbox_dispatcher+0x4c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   12644:	4621      	mov	r1, r4
   12646:	4630      	mov	r0, r6
   12648:	46ac      	mov	ip, r5
}
   1264a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1264e:	2300      	movs	r3, #0
   12650:	6c12      	ldr	r2, [r2, #64]	; 0x40
   12652:	4760      	bx	ip
}
   12654:	bd70      	pop	{r4, r5, r6, pc}
   12656:	bf00      	nop
   12658:	000248d9 	.word	0x000248d9
   1265c:	000248fa 	.word	0x000248fa

00012660 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   12660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   12664:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   12668:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   1266a:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1266e:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   12670:	d00a      	beq.n	12688 <z_impl_gpio_pin_configure+0x28>
   12672:	4935      	ldr	r1, [pc, #212]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   12674:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   12678:	4834      	ldr	r0, [pc, #208]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   1267a:	f008 fe49 	bl	1b310 <assert_print>
   1267e:	f44f 712d 	mov.w	r1, #692	; 0x2b4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   12682:	4831      	ldr	r0, [pc, #196]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   12684:	f008 fe3d 	bl	1b302 <assert_post_action>
   12688:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1268c:	2a30      	cmp	r2, #48	; 0x30
   1268e:	d108      	bne.n	126a2 <z_impl_gpio_pin_configure+0x42>
   12690:	492d      	ldr	r1, [pc, #180]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   12692:	f240 22b7 	movw	r2, #695	; 0x2b7
   12696:	482d      	ldr	r0, [pc, #180]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   12698:	f008 fe3a 	bl	1b310 <assert_print>
   1269c:	f240 21b7 	movw	r1, #695	; 0x2b7
   126a0:	e7ef      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   126a2:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   126a6:	2a02      	cmp	r2, #2
   126a8:	d108      	bne.n	126bc <z_impl_gpio_pin_configure+0x5c>
   126aa:	4927      	ldr	r1, [pc, #156]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   126ac:	f240 22bb 	movw	r2, #699	; 0x2bb
   126b0:	4826      	ldr	r0, [pc, #152]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   126b2:	f008 fe2d 	bl	1b310 <assert_print>
   126b6:	f240 21bb 	movw	r1, #699	; 0x2bb
   126ba:	e7e2      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   126bc:	f003 0206 	and.w	r2, r3, #6
   126c0:	2a04      	cmp	r2, #4
   126c2:	d108      	bne.n	126d6 <z_impl_gpio_pin_configure+0x76>
   126c4:	4920      	ldr	r1, [pc, #128]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   126c6:	f240 22bf 	movw	r2, #703	; 0x2bf
   126ca:	4820      	ldr	r0, [pc, #128]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   126cc:	f008 fe20 	bl	1b310 <assert_print>
   126d0:	f240 21bf 	movw	r1, #703	; 0x2bf
   126d4:	e7d5      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   126d6:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   126da:	d012      	beq.n	12702 <z_impl_gpio_pin_configure+0xa2>
   126dc:	039d      	lsls	r5, r3, #14
   126de:	d408      	bmi.n	126f2 <z_impl_gpio_pin_configure+0x92>
   126e0:	4919      	ldr	r1, [pc, #100]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   126e2:	f240 22c2 	movw	r2, #706	; 0x2c2
   126e6:	4819      	ldr	r0, [pc, #100]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   126e8:	f008 fe12 	bl	1b310 <assert_print>
   126ec:	f240 21c2 	movw	r1, #706	; 0x2c2
   126f0:	e7c7      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   126f2:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   126f6:	d014      	beq.n	12722 <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   126f8:	4a15      	ldr	r2, [pc, #84]	; (12750 <z_impl_gpio_pin_configure+0xf0>)
   126fa:	439a      	bics	r2, r3
   126fc:	d101      	bne.n	12702 <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   126fe:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12702:	2501      	movs	r5, #1
   12704:	6824      	ldr	r4, [r4, #0]
   12706:	408d      	lsls	r5, r1
   12708:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1270a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1270e:	d111      	bne.n	12734 <z_impl_gpio_pin_configure+0xd4>
   12710:	490d      	ldr	r1, [pc, #52]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   12712:	f240 22d2 	movw	r2, #722	; 0x2d2
   12716:	480d      	ldr	r0, [pc, #52]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   12718:	f008 fdfa 	bl	1b310 <assert_print>
   1271c:	f240 21d2 	movw	r1, #722	; 0x2d2
   12720:	e7af      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   12722:	4909      	ldr	r1, [pc, #36]	; (12748 <z_impl_gpio_pin_configure+0xe8>)
   12724:	f240 22c6 	movw	r2, #710	; 0x2c6
   12728:	4808      	ldr	r0, [pc, #32]	; (1274c <z_impl_gpio_pin_configure+0xec>)
   1272a:	f008 fdf1 	bl	1b310 <assert_print>
   1272e:	f240 21c6 	movw	r1, #710	; 0x2c6
   12732:	e7a6      	b.n	12682 <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12734:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12736:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12738:	bf4c      	ite	mi
   1273a:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1273c:	43ac      	bicpl	r4, r5
   1273e:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   12740:	683b      	ldr	r3, [r7, #0]
}
   12742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   12746:	4718      	bx	r3
   12748:	00024935 	.word	0x00024935
   1274c:	000221f8 	.word	0x000221f8
   12750:	00100001 	.word	0x00100001

00012754 <gpio_pin_set>:
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12754:	2301      	movs	r3, #1
{
   12756:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12758:	fa03 f101 	lsl.w	r1, r3, r1
   1275c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1275e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12760:	681b      	ldr	r3, [r3, #0]
   12762:	4219      	tst	r1, r3
   12764:	d10a      	bne.n	1277c <gpio_pin_set+0x28>
   12766:	490c      	ldr	r1, [pc, #48]	; (12798 <gpio_pin_set+0x44>)
   12768:	480c      	ldr	r0, [pc, #48]	; (1279c <gpio_pin_set+0x48>)
   1276a:	f240 523d 	movw	r2, #1341	; 0x53d
   1276e:	f008 fdcf 	bl	1b310 <assert_print>
   12772:	f240 513d 	movw	r1, #1341	; 0x53d
   12776:	4808      	ldr	r0, [pc, #32]	; (12798 <gpio_pin_set+0x44>)
   12778:	f008 fdc3 	bl	1b302 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1277c:	6823      	ldr	r3, [r4, #0]
   1277e:	4219      	tst	r1, r3
   12780:	d003      	beq.n	1278a <gpio_pin_set+0x36>
	if (value != 0)	{
   12782:	b122      	cbz	r2, 1278e <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   12784:	6883      	ldr	r3, [r0, #8]
   12786:	691b      	ldr	r3, [r3, #16]
   12788:	e003      	b.n	12792 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1278a:	2a00      	cmp	r2, #0
   1278c:	d0fa      	beq.n	12784 <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   1278e:	6883      	ldr	r3, [r0, #8]
   12790:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   12792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   12796:	4718      	bx	r3
   12798:	00024935 	.word	0x00024935
   1279c:	000221f8 	.word	0x000221f8

000127a0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   127a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127a4:	4607      	mov	r7, r0
   127a6:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   127a8:	2500      	movs	r5, #0
   127aa:	4e10      	ldr	r6, [pc, #64]	; (127ec <dk_set_leds_state.part.0+0x4c>)
		int val, err;

		if (BIT(i) & leds_on_mask) {
   127ac:	fa27 f205 	lsr.w	r2, r7, r5
   127b0:	f012 0201 	ands.w	r2, r2, #1
   127b4:	d110      	bne.n	127d8 <dk_set_leds_state.part.0+0x38>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   127b6:	fa28 f305 	lsr.w	r3, r8, r5
   127ba:	07db      	lsls	r3, r3, #31
   127bc:	d50e      	bpl.n	127dc <dk_set_leds_state.part.0+0x3c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   127be:	7931      	ldrb	r1, [r6, #4]
   127c0:	6830      	ldr	r0, [r6, #0]
   127c2:	f7ff ffc7 	bl	12754 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   127c6:	4604      	mov	r4, r0
   127c8:	b140      	cbz	r0, 127dc <dk_set_leds_state.part.0+0x3c>
			LOG_ERR("Cannot write LED gpio");
   127ca:	2145      	movs	r1, #69	; 0x45
   127cc:	4808      	ldr	r0, [pc, #32]	; (127f0 <dk_set_leds_state.part.0+0x50>)
   127ce:	f008 fdb3 	bl	1b338 <z_log_minimal_printk>
			return err;
		}
	}

	return 0;
}
   127d2:	4620      	mov	r0, r4
   127d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   127d8:	2201      	movs	r2, #1
   127da:	e7f0      	b.n	127be <dk_set_leds_state.part.0+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   127dc:	3501      	adds	r5, #1
   127de:	2d04      	cmp	r5, #4
   127e0:	f106 0608 	add.w	r6, r6, #8
   127e4:	d1e2      	bne.n	127ac <dk_set_leds_state.part.0+0xc>
	return 0;
   127e6:	2400      	movs	r4, #0
   127e8:	e7f3      	b.n	127d2 <dk_set_leds_state.part.0+0x32>
   127ea:	bf00      	nop
   127ec:	00020454 	.word	0x00020454
   127f0:	00024966 	.word	0x00024966

000127f4 <dk_leds_init>:
{
   127f4:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   127f6:	2600      	movs	r6, #0
   127f8:	4c0c      	ldr	r4, [pc, #48]	; (1282c <dk_leds_init+0x38>)
				  spec->dt_flags | extra_flags);
   127fa:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   127fc:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   127fe:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12800:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   12804:	f7ff ff2c 	bl	12660 <z_impl_gpio_pin_configure>
		if (err) {
   12808:	4605      	mov	r5, r0
   1280a:	b948      	cbnz	r0, 12820 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1280c:	3601      	adds	r6, #1
   1280e:	2e04      	cmp	r6, #4
   12810:	f104 0408 	add.w	r4, r4, #8
   12814:	d1f1      	bne.n	127fa <dk_leds_init+0x6>
}
   12816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1281a:	210f      	movs	r1, #15
   1281c:	f7ff bfc0 	b.w	127a0 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   12820:	2145      	movs	r1, #69	; 0x45
   12822:	4803      	ldr	r0, [pc, #12]	; (12830 <dk_leds_init+0x3c>)
   12824:	f008 fd88 	bl	1b338 <z_log_minimal_printk>
}
   12828:	4628      	mov	r0, r5
   1282a:	bd70      	pop	{r4, r5, r6, pc}
   1282c:	00020454 	.word	0x00020454
   12830:	00024981 	.word	0x00024981

00012834 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   12834:	2803      	cmp	r0, #3
{
   12836:	460a      	mov	r2, r1
   12838:	b510      	push	{r4, lr}
	if (led_idx >= ARRAY_SIZE(leds)) {
   1283a:	d907      	bls.n	1284c <dk_set_led+0x18>
		LOG_ERR("LED index out of the range");
   1283c:	2145      	movs	r1, #69	; 0x45
   1283e:	480b      	ldr	r0, [pc, #44]	; (1286c <dk_set_led+0x38>)
   12840:	f008 fd7a 	bl	1b338 <z_log_minimal_printk>
   12844:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   12848:	4620      	mov	r0, r4
   1284a:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1284c:	4b08      	ldr	r3, [pc, #32]	; (12870 <dk_set_led+0x3c>)
   1284e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   12852:	7909      	ldrb	r1, [r1, #4]
   12854:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   12858:	f7ff ff7c 	bl	12754 <gpio_pin_set>
	if (err) {
   1285c:	4604      	mov	r4, r0
   1285e:	2800      	cmp	r0, #0
   12860:	d0f2      	beq.n	12848 <dk_set_led+0x14>
		LOG_ERR("Cannot write LED gpio");
   12862:	2145      	movs	r1, #69	; 0x45
   12864:	4803      	ldr	r0, [pc, #12]	; (12874 <dk_set_led+0x40>)
   12866:	f008 fd67 	bl	1b338 <z_log_minimal_printk>
   1286a:	e7ed      	b.n	12848 <dk_set_led+0x14>
   1286c:	000249a0 	.word	0x000249a0
   12870:	00020454 	.word	0x00020454
   12874:	00024966 	.word	0x00024966

00012878 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   12878:	4803      	ldr	r0, [pc, #12]	; (12888 <k_sys_fatal_error_handler+0x10>)
   1287a:	2145      	movs	r1, #69	; 0x45
{
   1287c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1287e:	f008 fd5b 	bl	1b338 <z_log_minimal_printk>
		sys_arch_reboot(0);
   12882:	2000      	movs	r0, #0
   12884:	f7f7 fc50 	bl	a128 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   12888:	000249d4 	.word	0x000249d4

0001288c <thread_pool_entry>:
	     "CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE too big");
BUILD_ASSERT(sizeof(uint32_t) == sizeof(atomic_val_t),
	     "Only atomic_val_t is implemented that is the same as uint32_t");

static void thread_pool_entry(void *p1, void *p2, void *p3)
{
   1288c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   1288e:	4d07      	ldr	r5, [pc, #28]	; (128ac <thread_pool_entry+0x20>)
	struct pool_start_msg msg;

	do {
		k_msgq_get(&pool_start_msg, &msg, K_FOREVER);
		thread_pool_callback(msg.data, msg.len);
   12890:	4c07      	ldr	r4, [pc, #28]	; (128b0 <thread_pool_entry+0x24>)
   12892:	f04f 32ff 	mov.w	r2, #4294967295
   12896:	4669      	mov	r1, sp
   12898:	f04f 33ff 	mov.w	r3, #4294967295
   1289c:	4628      	mov	r0, r5
   1289e:	f003 fe07 	bl	164b0 <z_impl_k_msgq_get>
   128a2:	e9dd 0100 	ldrd	r0, r1, [sp]
   128a6:	6823      	ldr	r3, [r4, #0]
   128a8:	4798      	blx	r3
	do {
   128aa:	e7f2      	b.n	12892 <thread_pool_entry+0x6>
   128ac:	20006d74 	.word	0x20006d74
   128b0:	20006db8 	.word	0x20006db8

000128b4 <nrf_rpc_os_init>:
	} while (1);
}

int nrf_rpc_os_init(nrf_rpc_os_work_t callback)
{
   128b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   128b6:	b089      	sub	sp, #36	; 0x24
	int err;
	int i;

	__ASSERT_NO_MSG(callback != NULL);
   128b8:	b940      	cbnz	r0, 128cc <nrf_rpc_os_init+0x18>
   128ba:	4922      	ldr	r1, [pc, #136]	; (12944 <nrf_rpc_os_init+0x90>)
   128bc:	4822      	ldr	r0, [pc, #136]	; (12948 <nrf_rpc_os_init+0x94>)
   128be:	223f      	movs	r2, #63	; 0x3f
   128c0:	f008 fd26 	bl	1b310 <assert_print>
   128c4:	213f      	movs	r1, #63	; 0x3f
   128c6:	481f      	ldr	r0, [pc, #124]	; (12944 <nrf_rpc_os_init+0x90>)
   128c8:	f008 fd1b 	bl	1b302 <assert_post_action>

	thread_pool_callback = callback;
   128cc:	4b1f      	ldr	r3, [pc, #124]	; (1294c <nrf_rpc_os_init+0x98>)
   128ce:	6018      	str	r0, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   128d0:	2208      	movs	r2, #8
   128d2:	481f      	ldr	r0, [pc, #124]	; (12950 <nrf_rpc_os_init+0x9c>)
   128d4:	4611      	mov	r1, r2
   128d6:	f00c fbb7 	bl	1f048 <z_impl_k_sem_init>

	err = k_sem_init(&context_reserved, CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE,
			 CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE);
	if (err < 0) {
   128da:	2800      	cmp	r0, #0
   128dc:	db2f      	blt.n	1293e <nrf_rpc_os_init+0x8a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   128de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
   128e2:	4b1c      	ldr	r3, [pc, #112]	; (12954 <nrf_rpc_os_init+0xa0>)
   128e4:	e8d3 1fef 	ldaex	r1, [r3]
   128e8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   128ec:	2800      	cmp	r0, #0
   128ee:	d1f9      	bne.n	128e4 <nrf_rpc_os_init+0x30>
		return err;
	}

	atomic_set(&context_mask, CONTEXT_MASK_INIT_VALUE);

	k_msgq_init(&pool_start_msg, (char *)pool_start_msg_buf,
   128f0:	2302      	movs	r3, #2
   128f2:	2208      	movs	r2, #8
   128f4:	4918      	ldr	r1, [pc, #96]	; (12958 <nrf_rpc_os_init+0xa4>)
   128f6:	4819      	ldr	r0, [pc, #100]	; (1295c <nrf_rpc_os_init+0xa8>)
   128f8:	f00c fb55 	bl	1efa6 <k_msgq_init>
		    sizeof(struct pool_start_msg),
		    ARRAY_SIZE(pool_start_msg_buf));

	for (i = 0; i < CONFIG_NRF_RPC_THREAD_POOL_SIZE; i++) {
		k_thread_create(&pool_threads[i], pool_stacks[i],
   128fc:	2600      	movs	r6, #0
   128fe:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12900:	2400      	movs	r4, #0
   12902:	2502      	movs	r5, #2
   12904:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12908:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1290c:	e9cd 5403 	strd	r5, r4, [sp, #12]
   12910:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12914:	4b12      	ldr	r3, [pc, #72]	; (12960 <nrf_rpc_os_init+0xac>)
   12916:	4913      	ldr	r1, [pc, #76]	; (12964 <nrf_rpc_os_init+0xb0>)
   12918:	9400      	str	r4, [sp, #0]
   1291a:	4813      	ldr	r0, [pc, #76]	; (12968 <nrf_rpc_os_init+0xb4>)
   1291c:	f003 fc34 	bl	16188 <z_impl_k_thread_create>
   12920:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12924:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12928:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1292c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12930:	4b0b      	ldr	r3, [pc, #44]	; (12960 <nrf_rpc_os_init+0xac>)
   12932:	490e      	ldr	r1, [pc, #56]	; (1296c <nrf_rpc_os_init+0xb8>)
   12934:	480e      	ldr	r0, [pc, #56]	; (12970 <nrf_rpc_os_init+0xbc>)
   12936:	9400      	str	r4, [sp, #0]
   12938:	f003 fc26 	bl	16188 <z_impl_k_thread_create>
			thread_pool_entry,
			NULL, NULL, NULL,
			CONFIG_NRF_RPC_THREAD_PRIORITY, 0, K_NO_WAIT);
	}

	return 0;
   1293c:	4620      	mov	r0, r4
}
   1293e:	b009      	add	sp, #36	; 0x24
   12940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12942:	bf00      	nop
   12944:	000249f6 	.word	0x000249f6
   12948:	000221f8 	.word	0x000221f8
   1294c:	20006db8 	.word	0x20006db8
   12950:	20006d5c 	.word	0x20006d5c
   12954:	20006d58 	.word	0x20006d58
   12958:	20006da8 	.word	0x20006da8
   1295c:	20006d74 	.word	0x20006d74
   12960:	0001288d 	.word	0x0001288d
   12964:	20008fb8 	.word	0x20008fb8
   12968:	20005ea0 	.word	0x20005ea0
   1296c:	200093b8 	.word	0x200093b8
   12970:	20005f78 	.word	0x20005f78

00012974 <nrf_rpc_os_thread_pool_send>:

void nrf_rpc_os_thread_pool_send(const uint8_t *data, size_t len)
{
   12974:	b507      	push	{r0, r1, r2, lr}
	struct pool_start_msg msg;

	msg.data = data;
	msg.len = len;
   12976:	e9cd 0100 	strd	r0, r1, [sp]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1297a:	f04f 32ff 	mov.w	r2, #4294967295
   1297e:	f04f 33ff 	mov.w	r3, #4294967295
   12982:	4669      	mov	r1, sp
   12984:	4802      	ldr	r0, [pc, #8]	; (12990 <nrf_rpc_os_thread_pool_send+0x1c>)
   12986:	f003 fd07 	bl	16398 <z_impl_k_msgq_put>
	k_msgq_put(&pool_start_msg, &msg, K_FOREVER);
}
   1298a:	b003      	add	sp, #12
   1298c:	f85d fb04 	ldr.w	pc, [sp], #4
   12990:	20006d74 	.word	0x20006d74

00012994 <nrf_rpc_os_ctx_pool_reserve>:
	*len = msg->len;
	k_sched_unlock();
}

uint32_t nrf_rpc_os_ctx_pool_reserve(void)
{
   12994:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12996:	4c0f      	ldr	r4, [pc, #60]	; (129d4 <nrf_rpc_os_ctx_pool_reserve+0x40>)
	return z_impl_k_sem_take(sem, timeout);
   12998:	f04f 32ff 	mov.w	r2, #4294967295
   1299c:	f04f 33ff 	mov.w	r3, #4294967295
   129a0:	480d      	ldr	r0, [pc, #52]	; (129d8 <nrf_rpc_os_ctx_pool_reserve+0x44>)
   129a2:	f004 f85d 	bl	16a60 <z_impl_k_sem_take>
	k_sem_take(&context_reserved, K_FOREVER);

	do {
		old_mask = atomic_get(&context_mask);
		number = __CLZ(old_mask);
		new_mask = old_mask & ~(0x80000000u >> number);
   129a6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   129aa:	4621      	mov	r1, r4
   129ac:	e8d4 3faf 	lda	r3, [r4]
  return __builtin_clz(value);
   129b0:	fab3 f083 	clz	r0, r3
   129b4:	fa25 f200 	lsr.w	r2, r5, r0
   129b8:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   129bc:	e8d1 6fef 	ldaex	r6, [r1]
   129c0:	429e      	cmp	r6, r3
   129c2:	d104      	bne.n	129ce <nrf_rpc_os_ctx_pool_reserve+0x3a>
   129c4:	e8c1 2fec 	stlex	ip, r2, [r1]
   129c8:	f1bc 0f00 	cmp.w	ip, #0
   129cc:	d1f6      	bne.n	129bc <nrf_rpc_os_ctx_pool_reserve+0x28>
	} while (!atomic_cas(&context_mask, old_mask, new_mask));
   129ce:	d1ed      	bne.n	129ac <nrf_rpc_os_ctx_pool_reserve+0x18>

	return number;
}
   129d0:	bd70      	pop	{r4, r5, r6, pc}
   129d2:	bf00      	nop
   129d4:	20006d58 	.word	0x20006d58
   129d8:	20006d5c 	.word	0x20006d5c

000129dc <nrf_rpc_os_ctx_pool_release>:

void nrf_rpc_os_ctx_pool_release(uint32_t number)
{
	__ASSERT_NO_MSG(number < CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE);
   129dc:	2807      	cmp	r0, #7
{
   129de:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(number < CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE);
   129e0:	d908      	bls.n	129f4 <nrf_rpc_os_ctx_pool_release+0x18>
   129e2:	490c      	ldr	r1, [pc, #48]	; (12a14 <nrf_rpc_os_ctx_pool_release+0x38>)
   129e4:	480c      	ldr	r0, [pc, #48]	; (12a18 <nrf_rpc_os_ctx_pool_release+0x3c>)
   129e6:	228a      	movs	r2, #138	; 0x8a
   129e8:	f008 fc92 	bl	1b310 <assert_print>
   129ec:	218a      	movs	r1, #138	; 0x8a
   129ee:	4809      	ldr	r0, [pc, #36]	; (12a14 <nrf_rpc_os_ctx_pool_release+0x38>)
   129f0:	f008 fc87 	bl	1b302 <assert_post_action>

	atomic_or(&context_mask, 0x80000000u >> number);
   129f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   129f8:	4a08      	ldr	r2, [pc, #32]	; (12a1c <nrf_rpc_os_ctx_pool_release+0x40>)
   129fa:	40c3      	lsrs	r3, r0
   129fc:	e8d2 0fef 	ldaex	r0, [r2]
   12a00:	4318      	orrs	r0, r3
   12a02:	e8c2 0fe1 	stlex	r1, r0, [r2]
   12a06:	2900      	cmp	r1, #0
   12a08:	d1f8      	bne.n	129fc <nrf_rpc_os_ctx_pool_release+0x20>
	k_sem_give(&context_reserved);
}
   12a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   12a0e:	4804      	ldr	r0, [pc, #16]	; (12a20 <nrf_rpc_os_ctx_pool_release+0x44>)
   12a10:	f003 bfea 	b.w	169e8 <z_impl_k_sem_give>
   12a14:	000249f6 	.word	0x000249f6
   12a18:	000221f8 	.word	0x000221f8
   12a1c:	20006d58 	.word	0x20006d58
   12a20:	20006d5c 	.word	0x20006d5c

00012a24 <ept_error>:
}

static void ept_error(const char *message, void *priv)
{
	LOG_ERR("Endpoint error: \"%s\"", message);
	__ASSERT_NO_MSG(false);
   12a24:	4c07      	ldr	r4, [pc, #28]	; (12a44 <ept_error+0x20>)
{
   12a26:	4602      	mov	r2, r0
	LOG_ERR("Endpoint error: \"%s\"", message);
   12a28:	2145      	movs	r1, #69	; 0x45
{
   12a2a:	b508      	push	{r3, lr}
	LOG_ERR("Endpoint error: \"%s\"", message);
   12a2c:	4806      	ldr	r0, [pc, #24]	; (12a48 <ept_error+0x24>)
   12a2e:	f008 fc83 	bl	1b338 <z_log_minimal_printk>
	__ASSERT_NO_MSG(false);
   12a32:	4621      	mov	r1, r4
   12a34:	4805      	ldr	r0, [pc, #20]	; (12a4c <ept_error+0x28>)
   12a36:	225d      	movs	r2, #93	; 0x5d
   12a38:	f008 fc6a 	bl	1b310 <assert_print>
   12a3c:	215d      	movs	r1, #93	; 0x5d
   12a3e:	4620      	mov	r0, r4
   12a40:	f008 fc5f 	bl	1b302 <assert_post_action>
   12a44:	00024a47 	.word	0x00024a47
   12a48:	00024a2d 	.word	0x00024a2d
   12a4c:	000221f8 	.word	0x000221f8

00012a50 <send>:

	return 0;
}

int send(const struct nrf_rpc_tr *transport, const uint8_t *data, size_t length)
{
   12a50:	b538      	push	{r3, r4, r5, lr}
	int err;
	struct nrf_rpc_ipc *ipc_config = transport->ctx;
   12a52:	6840      	ldr	r0, [r0, #4]
{
   12a54:	460d      	mov	r5, r1
	struct nrf_rpc_ipc_endpoint *endpoint = &ipc_config->endpoint;

	if (!ipc_config->used) {
   12a56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   12a5a:	b19b      	cbz	r3, 12a84 <send+0x34>
	}

	LOG_DBG("Sending %u bytes", length);
	DUMP_LIMITED_DBG(data, length, "Data: ");

	err = ipc_service_send(&endpoint->ept, data, length);
   12a5c:	301c      	adds	r0, #28
   12a5e:	f7f5 f9bf 	bl	7de0 <ipc_service_send>
	if (err < 0) {
   12a62:	1e04      	subs	r4, r0, #0
   12a64:	da0c      	bge.n	12a80 <send+0x30>
		LOG_ERR("ipc_service_send returned err: %d", err);
   12a66:	4622      	mov	r2, r4
   12a68:	2145      	movs	r1, #69	; 0x45
   12a6a:	480a      	ldr	r0, [pc, #40]	; (12a94 <send+0x44>)
   12a6c:	f008 fc64 	bl	1b338 <z_log_minimal_printk>
	} else if (err > 0) {
		LOG_DBG("Sent %u bytes", err);
		err = 0;
	}

	k_free((void *)data);
   12a70:	4628      	mov	r0, r5
   12a72:	f00c fc65 	bl	1f340 <k_free>

	return translate_error(err);
   12a76:	4620      	mov	r0, r4
}
   12a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(err);
   12a7c:	f00a bf9e 	b.w	1d9bc <translate_error>
	err = ipc_service_send(&endpoint->ept, data, length);
   12a80:	2400      	movs	r4, #0
   12a82:	e7f5      	b.n	12a70 <send+0x20>
		LOG_ERR("nRF RPC transport is not initialized");
   12a84:	2145      	movs	r1, #69	; 0x45
   12a86:	4804      	ldr	r0, [pc, #16]	; (12a98 <send+0x48>)
   12a88:	f008 fc56 	bl	1b338 <z_log_minimal_printk>
}
   12a8c:	f06f 000d 	mvn.w	r0, #13
   12a90:	bd38      	pop	{r3, r4, r5, pc}
   12a92:	bf00      	nop
   12a94:	00024a9e 	.word	0x00024a9e
   12a98:	00024a74 	.word	0x00024a74

00012a9c <tx_buf_free>:

void tx_buf_free(const struct nrf_rpc_tr *transport, void *buf)
{
	struct nrf_rpc_ipc *ipc_config = transport->ctx;

	if (!ipc_config->used) {
   12a9c:	6843      	ldr	r3, [r0, #4]
   12a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12aa2:	b91b      	cbnz	r3, 12aac <tx_buf_free+0x10>
		LOG_ERR("nRF RPC transport is not initialized");
   12aa4:	2145      	movs	r1, #69	; 0x45
   12aa6:	4803      	ldr	r0, [pc, #12]	; (12ab4 <tx_buf_free+0x18>)
   12aa8:	f008 bc46 	b.w	1b338 <z_log_minimal_printk>
		return;
	}

	k_free(buf);
   12aac:	4608      	mov	r0, r1
   12aae:	f00c bc47 	b.w	1f340 <k_free>
   12ab2:	bf00      	nop
   12ab4:	00024a74 	.word	0x00024a74

00012ab8 <tx_buf_alloc>:
{
   12ab8:	b510      	push	{r4, lr}
	if (!ipc_config->used) {
   12aba:	6843      	ldr	r3, [r0, #4]
{
   12abc:	460c      	mov	r4, r1
	if (!ipc_config->used) {
   12abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12ac2:	b963      	cbnz	r3, 12ade <tx_buf_alloc+0x26>
		LOG_ERR("nRF RPC transport is not initialized");
   12ac4:	2145      	movs	r1, #69	; 0x45
   12ac6:	480a      	ldr	r0, [pc, #40]	; (12af0 <tx_buf_alloc+0x38>)
		LOG_ERR("Failed to allocate Tx buffer.");
   12ac8:	f008 fc36 	bl	1b338 <z_log_minimal_printk>
	k_oops();
   12acc:	4040      	eors	r0, r0
   12ace:	f380 8811 	msr	BASEPRI, r0
   12ad2:	f04f 0003 	mov.w	r0, #3
   12ad6:	df02      	svc	2
	*size = 0;
   12ad8:	2000      	movs	r0, #0
   12ada:	6020      	str	r0, [r4, #0]
}
   12adc:	bd10      	pop	{r4, pc}
	data = k_malloc(*size);
   12ade:	6808      	ldr	r0, [r1, #0]
   12ae0:	f00c fc35 	bl	1f34e <k_malloc>
	if (!data) {
   12ae4:	2800      	cmp	r0, #0
   12ae6:	d1f9      	bne.n	12adc <tx_buf_alloc+0x24>
		LOG_ERR("Failed to allocate Tx buffer.");
   12ae8:	2145      	movs	r1, #69	; 0x45
   12aea:	4802      	ldr	r0, [pc, #8]	; (12af4 <tx_buf_alloc+0x3c>)
   12aec:	e7ec      	b.n	12ac8 <tx_buf_alloc+0x10>
   12aee:	bf00      	nop
   12af0:	00024a74 	.word	0x00024a74
   12af4:	00024ac5 	.word	0x00024ac5

00012af8 <ept_received>:
{
   12af8:	b570      	push	{r4, r5, r6, lr}
   12afa:	460d      	mov	r5, r1
   12afc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(data != NULL);
   12afe:	4601      	mov	r1, r0
	struct nrf_rpc_ipc *ipc_config = transport->ctx;
   12b00:	6853      	ldr	r3, [r2, #4]
	__ASSERT_NO_MSG(data != NULL);
   12b02:	b940      	cbnz	r0, 12b16 <ept_received+0x1e>
   12b04:	490c      	ldr	r1, [pc, #48]	; (12b38 <ept_received+0x40>)
   12b06:	2252      	movs	r2, #82	; 0x52
   12b08:	480c      	ldr	r0, [pc, #48]	; (12b3c <ept_received+0x44>)
   12b0a:	f008 fc01 	bl	1b310 <assert_print>
   12b0e:	2152      	movs	r1, #82	; 0x52
	__ASSERT_NO_MSG(ipc_config->receive_cb != NULL);
   12b10:	4809      	ldr	r0, [pc, #36]	; (12b38 <ept_received+0x40>)
   12b12:	f008 fbf6 	bl	1b302 <assert_post_action>
   12b16:	6b5e      	ldr	r6, [r3, #52]	; 0x34
   12b18:	b936      	cbnz	r6, 12b28 <ept_received+0x30>
   12b1a:	4907      	ldr	r1, [pc, #28]	; (12b38 <ept_received+0x40>)
   12b1c:	2253      	movs	r2, #83	; 0x53
   12b1e:	4807      	ldr	r0, [pc, #28]	; (12b3c <ept_received+0x44>)
   12b20:	f008 fbf6 	bl	1b310 <assert_print>
   12b24:	2153      	movs	r1, #83	; 0x53
   12b26:	e7f3      	b.n	12b10 <ept_received+0x18>
	ipc_config->receive_cb(transport, data, len, ipc_config->context);
   12b28:	462a      	mov	r2, r5
   12b2a:	4620      	mov	r0, r4
   12b2c:	46b4      	mov	ip, r6
}
   12b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ipc_config->receive_cb(transport, data, len, ipc_config->context);
   12b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   12b34:	4760      	bx	ip
   12b36:	bf00      	nop
   12b38:	00024a47 	.word	0x00024a47
   12b3c:	000221f8 	.word	0x000221f8

00012b40 <init>:
{
   12b40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct nrf_rpc_ipc *ipc_config = transport->ctx;
   12b44:	6844      	ldr	r4, [r0, #4]
{
   12b46:	4606      	mov	r6, r0
	if (ipc_config->used) {
   12b48:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
{
   12b4c:	460f      	mov	r7, r1
   12b4e:	4690      	mov	r8, r2
	if (ipc_config->used) {
   12b50:	b11b      	cbz	r3, 12b5a <init+0x1a>
		return 0;
   12b52:	2000      	movs	r0, #0
}
   12b54:	b002      	add	sp, #8
   12b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (receive_cb == NULL) {
   12b5a:	b931      	cbnz	r1, 12b6a <init+0x2a>
		LOG_ERR("No transport receive callback");
   12b5c:	4825      	ldr	r0, [pc, #148]	; (12bf4 <init+0xb4>)
   12b5e:	2145      	movs	r1, #69	; 0x45
   12b60:	f008 fbea 	bl	1b338 <z_log_minimal_printk>
		return -NRF_EINVAL;
   12b64:	f06f 0015 	mvn.w	r0, #21
   12b68:	e7f4      	b.n	12b54 <init+0x14>
	err = ipc_service_open_instance(ipc_config->ipc);
   12b6a:	6820      	ldr	r0, [r4, #0]
   12b6c:	f7f5 f8fa 	bl	7d64 <ipc_service_open_instance>
	if (err && err != -EALREADY) {
   12b70:	4605      	mov	r5, r0
   12b72:	b168      	cbz	r0, 12b90 <init+0x50>
   12b74:	f110 0f78 	cmn.w	r0, #120	; 0x78
   12b78:	d00a      	beq.n	12b90 <init+0x50>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   12b7a:	2145      	movs	r1, #69	; 0x45
   12b7c:	4602      	mov	r2, r0
   12b7e:	481e      	ldr	r0, [pc, #120]	; (12bf8 <init+0xb8>)
		LOG_ERR("Registering endpoint failed with %d", err);
   12b80:	f008 fbda 	bl	1b338 <z_log_minimal_printk>
		return translate_error(err);
   12b84:	4628      	mov	r0, r5
}
   12b86:	b002      	add	sp, #8
   12b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return translate_error(err);
   12b8c:	f00a bf16 	b.w	1d9bc <translate_error>
	cfg->cb.bound = ept_bound;
   12b90:	4b1a      	ldr	r3, [pc, #104]	; (12bfc <init+0xbc>)
	ipc_config->context = context;
   12b92:	e9c4 780d 	strd	r7, r8, [r4, #52]	; 0x34
	cfg->cb.bound = ept_bound;
   12b96:	60e3      	str	r3, [r4, #12]
	cfg->cb.received = ept_received;
   12b98:	4b19      	ldr	r3, [pc, #100]	; (12c00 <init+0xc0>)
	k_event_init(&endpoint->ept_bond);
   12b9a:	1d25      	adds	r5, r4, #4
	cfg->cb.received = ept_received;
   12b9c:	6123      	str	r3, [r4, #16]
	cfg->cb.error = ept_error;
   12b9e:	4b19      	ldr	r3, [pc, #100]	; (12c04 <init+0xc4>)
	cfg->priv = (void *)transport;
   12ba0:	e9c4 3605 	strd	r3, r6, [r4, #20]
	k_event_init(&endpoint->ept_bond);
   12ba4:	f104 0624 	add.w	r6, r4, #36	; 0x24
	z_impl_k_event_init(event);
   12ba8:	4630      	mov	r0, r6
   12baa:	f00c fbbc 	bl	1f326 <z_impl_k_event_init>
	err = ipc_service_register_endpoint(ipc_config->ipc, &endpoint->ept, cfg);
   12bae:	462a      	mov	r2, r5
   12bb0:	6820      	ldr	r0, [r4, #0]
   12bb2:	f104 011c 	add.w	r1, r4, #28
   12bb6:	f7f5 f8f3 	bl	7da0 <ipc_service_register_endpoint>
	if (err) {
   12bba:	4605      	mov	r5, r0
   12bbc:	b118      	cbz	r0, 12bc6 <init+0x86>
		LOG_ERR("Registering endpoint failed with %d", err);
   12bbe:	4602      	mov	r2, r0
   12bc0:	2145      	movs	r1, #69	; 0x45
   12bc2:	4811      	ldr	r0, [pc, #68]	; (12c08 <init+0xc8>)
   12bc4:	e7dc      	b.n	12b80 <init+0x40>
	ipc_config->used = true;
   12bc6:	2101      	movs	r1, #1
   12bc8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	return z_impl_k_event_wait(event, events, reset, timeout);
   12bcc:	f640 42cd 	movw	r2, #3277	; 0xccd
   12bd0:	2300      	movs	r3, #0
   12bd2:	e9cd 2300 	strd	r2, r3, [sp]
   12bd6:	4602      	mov	r2, r0
   12bd8:	4630      	mov	r0, r6
   12bda:	f00c fbae 	bl	1f33a <z_impl_k_event_wait>
	if (!k_event_wait(&endpoint->ept_bond, 0x01, false,
   12bde:	2800      	cmp	r0, #0
   12be0:	d1b7      	bne.n	12b52 <init+0x12>
		ipc_config->used = false;
   12be2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
		LOG_ERR("IPC endpoint bond timeout");
   12be6:	2145      	movs	r1, #69	; 0x45
   12be8:	4808      	ldr	r0, [pc, #32]	; (12c0c <init+0xcc>)
   12bea:	f008 fba5 	bl	1b338 <z_log_minimal_printk>
		return -NRF_EPIPE;
   12bee:	f06f 001f 	mvn.w	r0, #31
   12bf2:	e7af      	b.n	12b54 <init+0x14>
   12bf4:	00024ae8 	.word	0x00024ae8
   12bf8:	000245e2 	.word	0x000245e2
   12bfc:	0001da19 	.word	0x0001da19
   12c00:	00012af9 	.word	0x00012af9
   12c04:	00012a25 	.word	0x00012a25
   12c08:	00024617 	.word	0x00024617
   12c0c:	00024b0b 	.word	0x00024b0b

00012c10 <arm_mat_cmplx_mult_f32>:
#else
arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
   12c10:	4603      	mov	r3, r0
   12c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sumReal = 0.0f;
        sumImag = 0.0f;
   12c16:	eddf 6a28 	vldr	s13, [pc, #160]	; 12cb8 <arm_mat_cmplx_mult_f32+0xa8>
  uint32_t col, i = 0U, j, row = numRowsA, colCnt; /* loop counters */
   12c1a:	2500      	movs	r5, #0
        colCnt = numColsA % 0x4U;

#else

        /* Initialize blkCnt with number of samples */
        colCnt = numColsA;
   12c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      col = numColsB;
   12c20:	f8b1 c002 	ldrh.w	ip, [r1, #2]
{
   12c24:	b085      	sub	sp, #20

      } while (col > 0U);

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
      pInA = pInA + 2 * numColsA;
   12c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   12c2a:	f8d2 8004 	ldr.w	r8, [r2, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
   12c2e:	6847      	ldr	r7, [r0, #4]
      pInA = pInA + 2 * numColsA;
   12c30:	9302      	str	r3, [sp, #8]
  uint32_t col, i = 0U, j, row = numRowsA, colCnt; /* loop counters */
   12c32:	8800      	ldrh	r0, [r0, #0]
          pIn2 += 2 * numColsB;
   12c34:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   12c38:	9301      	str	r3, [sp, #4]
   12c3a:	f108 0a08 	add.w	sl, r8, #8
      col = numColsB;
   12c3e:	46e6      	mov	lr, ip
   12c40:	00ea      	lsls	r2, r5, #3
      pIn2 = pSrcB->pData;
   12c42:	4252      	negs	r2, r2
   12c44:	eba2 0208 	sub.w	r2, r2, r8
   12c48:	684b      	ldr	r3, [r1, #4]
      j = 0U;
   12c4a:	eb0a 04c5 	add.w	r4, sl, r5, lsl #3
   12c4e:	9203      	str	r2, [sp, #12]
        while (colCnt > 0U)
   12c50:	463e      	mov	r6, r7
        colCnt = numColsA;
   12c52:	46cb      	mov	fp, r9
        sumImag = 0.0f;
   12c54:	eef0 7a66 	vmov.f32	s15, s13
        sumReal = 0.0f;
   12c58:	eeb0 7a66 	vmov.f32	s14, s13
        while (colCnt > 0U)
   12c5c:	3608      	adds	r6, #8
   12c5e:	f1bb 0f00 	cmp.w	fp, #0
   12c62:	d114      	bne.n	12c8e <arm_mat_cmplx_mult_f32+0x7e>
        *px++ = sumReal;
   12c64:	ed04 7a02 	vstr	s14, [r4, #-8]
        *px++ = sumImag;
   12c68:	ed44 7a01 	vstr	s15, [r4, #-4]
        pIn2 = pSrcB->pData + 2U * j;
   12c6c:	9b03      	ldr	r3, [sp, #12]
   12c6e:	684e      	ldr	r6, [r1, #4]
   12c70:	18e3      	adds	r3, r4, r3
      } while (col > 0U);
   12c72:	f1be 0e01 	subs.w	lr, lr, #1
        pIn2 = pSrcB->pData + 2U * j;
   12c76:	4433      	add	r3, r6
      } while (col > 0U);
   12c78:	f104 0408 	add.w	r4, r4, #8
   12c7c:	d1e8      	bne.n	12c50 <arm_mat_cmplx_mult_f32+0x40>
      pInA = pInA + 2 * numColsA;
   12c7e:	9b02      	ldr	r3, [sp, #8]

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
   12c80:	3801      	subs	r0, #1
      i = i + numColsB;
   12c82:	4465      	add	r5, ip
      pInA = pInA + 2 * numColsA;
   12c84:	441f      	add	r7, r3
    } while (row > 0U);
   12c86:	d1da      	bne.n	12c3e <arm_mat_cmplx_mult_f32+0x2e>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   12c88:	b005      	add	sp, #20
   12c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          c1 = *(pIn2     );
   12c8e:	edd3 4a00 	vldr	s9, [r3]
          a1 = *(pIn1     );
   12c92:	ed56 5a02 	vldr	s11, [r6, #-8]
          b1 = *(pIn1 + 1U);
   12c96:	ed16 5a01 	vldr	s10, [r6, #-4]
          d1 = *(pIn2 + 1U);
   12c9a:	ed93 6a01 	vldr	s12, [r3, #4]
          sumReal += a1 * c1;
   12c9e:	ee05 7aa4 	vmla.f32	s14, s11, s9
          sumImag += b1 * c1;
   12ca2:	ee44 7a85 	vmla.f32	s15, s9, s10
          pIn2 += 2 * numColsB;
   12ca6:	9a01      	ldr	r2, [sp, #4]
          sumReal -= b1 * d1;
   12ca8:	ee05 7a46 	vmls.f32	s14, s10, s12
          sumImag += a1 * d1;
   12cac:	ee45 7a86 	vmla.f32	s15, s11, s12
          pIn2 += 2 * numColsB;
   12cb0:	4413      	add	r3, r2
          colCnt--;
   12cb2:	f10b 3bff 	add.w	fp, fp, #4294967295
   12cb6:	e7d1      	b.n	12c5c <arm_mat_cmplx_mult_f32+0x4c>
   12cb8:	00000000 	.word	0x00000000

00012cbc <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
   12cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc0:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
   12cc4:	ed9f 5aaf 	vldr	s10, [pc, #700]	; 12f84 <arm_radix8_butterfly_f32+0x2c8>
{
   12cc8:	b08d      	sub	sp, #52	; 0x34
   12cca:	9102      	str	r1, [sp, #8]
   12ccc:	920b      	str	r2, [sp, #44]	; 0x2c
   12cce:	9303      	str	r3, [sp, #12]
   n2 = fftLen;
   12cd0:	9101      	str	r1, [sp, #4]
      n2 = n2 >> 3;
   12cd2:	9b01      	ldr	r3, [sp, #4]
      i1 = 0;
   12cd4:	f04f 0a00 	mov.w	sl, #0
      n2 = n2 >> 3;
   12cd8:	08d9      	lsrs	r1, r3, #3
      i1 = 0;
   12cda:	00ca      	lsls	r2, r1, #3
   12cdc:	9208      	str	r2, [sp, #32]
   12cde:	f06f 0217 	mvn.w	r2, #23
   12ce2:	fb02 f901 	mul.w	r9, r2, r1
   12ce6:	2228      	movs	r2, #40	; 0x28
   12ce8:	434a      	muls	r2, r1
   12cea:	9207      	str	r2, [sp, #28]
   12cec:	010a      	lsls	r2, r1, #4
   12cee:	9206      	str	r2, [sp, #24]
   12cf0:	2230      	movs	r2, #48	; 0x30
   12cf2:	eb00 1c41 	add.w	ip, r0, r1, lsl #5
   12cf6:	434a      	muls	r2, r1
   12cf8:	eb0c 0709 	add.w	r7, ip, r9
   12cfc:	eb07 1641 	add.w	r6, r7, r1, lsl #5
   12d00:	eb06 0509 	add.w	r5, r6, r9
   12d04:	eb05 1441 	add.w	r4, r5, r1, lsl #5
   12d08:	9205      	str	r2, [sp, #20]
   12d0a:	eb04 0209 	add.w	r2, r4, r9
   12d0e:	9200      	str	r2, [sp, #0]
   12d10:	2238      	movs	r2, #56	; 0x38
   12d12:	434a      	muls	r2, r1
   12d14:	9204      	str	r2, [sp, #16]
   12d16:	9a00      	ldr	r2, [sp, #0]
   12d18:	00db      	lsls	r3, r3, #3
   12d1a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
   12d1e:	eb02 1841 	add.w	r8, r2, r1, lsl #5
   12d22:	f100 0e04 	add.w	lr, r0, #4
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   12d26:	eddc 7a00 	vldr	s15, [ip]
   12d2a:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12d2e:	ed97 6a00 	vldr	s12, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   12d32:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
   12d36:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12d3a:	edd6 7a00 	vldr	s15, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   12d3e:	9a00      	ldr	r2, [sp, #0]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   12d40:	edd4 4a00 	vldr	s9, [r4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   12d44:	ed92 3a00 	vldr	s6, [r2]
   12d48:	edd8 3a00 	vldr	s7, [r8]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12d4c:	ee76 5a27 	vadd.f32	s11, s12, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
   12d50:	ee36 6a67 	vsub.f32	s12, s12, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   12d54:	edd5 7a00 	vldr	s15, [r5]
   12d58:	ee37 4aa4 	vadd.f32	s8, s15, s9
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
   12d5c:	ee77 7ae4 	vsub.f32	s15, s15, s9
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   12d60:	ee73 4a23 	vadd.f32	s9, s6, s7
         t1 = r1 - r3;
   12d64:	ee36 0ac4 	vsub.f32	s0, s13, s8
         r3 = r2 - r4;
   12d68:	ee75 0ae4 	vsub.f32	s1, s11, s9
         r1 = r1 + r3;
   12d6c:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
   12d70:	ee75 5aa4 	vadd.f32	s11, s11, s9
         pSrc[2 * i1] = r1 + r2;
   12d74:	ee76 4aa5 	vadd.f32	s9, s13, s11
         pSrc[2 * i5] = r1 - r2;
   12d78:	ee76 6ae5 	vsub.f32	s13, s13, s11
         pSrc[2 * i1] = r1 + r2;
   12d7c:	ed4e 4a01 	vstr	s9, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
   12d80:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   12d84:	eddc 6a01 	vldr	s13, [ip, #4]
   12d88:	edde 4a00 	vldr	s9, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   12d8c:	ed96 4a01 	vldr	s8, [r6, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   12d90:	ee74 5aa6 	vadd.f32	s11, s9, s13
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   12d94:	ee74 4ae6 	vsub.f32	s9, s9, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   12d98:	edd7 6a01 	vldr	s13, [r7, #4]
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
   12d9c:	ee33 3a63 	vsub.f32	s6, s6, s7
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   12da0:	ee76 2a84 	vadd.f32	s5, s13, s8
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   12da4:	edd4 3a01 	vldr	s7, [r4, #4]
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   12da8:	ee76 6ac4 	vsub.f32	s13, s13, s8
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   12dac:	ed95 4a01 	vldr	s8, [r5, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   12db0:	ed98 2a01 	vldr	s4, [r8, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   12db4:	ee74 1a23 	vadd.f32	s3, s8, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   12db8:	ee34 4a63 	vsub.f32	s8, s8, s7
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   12dbc:	edd2 3a01 	vldr	s7, [r2, #4]
   12dc0:	ee33 1a82 	vadd.f32	s2, s7, s4
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   12dc4:	ee73 3ac2 	vsub.f32	s7, s7, s4
         t2 = r1 - s3;
   12dc8:	ee35 2ae1 	vsub.f32	s4, s11, s3
         r1 = r1 + s3;
   12dcc:	ee75 5aa1 	vadd.f32	s11, s11, s3
         s3 = r2 - r4;
   12dd0:	ee72 1ac1 	vsub.f32	s3, s5, s2
         r2 = r2 + r4;
   12dd4:	ee72 2a81 	vadd.f32	s5, s5, s2
         pSrc[2 * i1 + 1] = r1 + r2;
   12dd8:	ee35 1aa2 	vadd.f32	s2, s11, s5
         pSrc[2 * i5 + 1] = r1 - r2;
   12ddc:	ee75 5ae2 	vsub.f32	s11, s11, s5
         pSrc[2 * i1 + 1] = r1 + r2;
   12de0:	ed8e 1a00 	vstr	s2, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
   12de4:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
   12de8:	ee70 5a21 	vadd.f32	s11, s0, s3
         pSrc[2 * i7]     = t1 - s3;
   12dec:	ee70 2a61 	vsub.f32	s5, s0, s3
         pSrc[2 * i3]     = t1 + s3;
   12df0:	edc5 5a00 	vstr	s11, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
   12df4:	ee72 5a60 	vsub.f32	s11, s4, s1
         pSrc[2 * i7]     = t1 - s3;
   12df8:	edc4 2a00 	vstr	s5, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
   12dfc:	edc5 5a01 	vstr	s11, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
   12e00:	ee70 5a82 	vadd.f32	s11, s1, s4
   12e04:	edc4 5a01 	vstr	s11, [r4, #4]
         r1 = (r6 - r8) * C81;
   12e08:	ee76 5a43 	vsub.f32	s11, s12, s6
         r6 = (r6 + r8) * C81;
   12e0c:	ee36 6a03 	vadd.f32	s12, s12, s6
         r2 = (s6 - s8) * C81;
   12e10:	ee36 3ae3 	vsub.f32	s6, s13, s7
         s6 = (s6 + s8) * C81;
   12e14:	ee76 6aa3 	vadd.f32	s13, s13, s7
         r1 = (r6 - r8) * C81;
   12e18:	ee65 5a85 	vmul.f32	s11, s11, s10
         r6 = (r6 + r8) * C81;
   12e1c:	ee26 6a05 	vmul.f32	s12, s12, s10
         r2 = (s6 - s8) * C81;
   12e20:	ee23 3a05 	vmul.f32	s6, s6, s10
         s6 = (s6 + s8) * C81;
   12e24:	ee66 6a85 	vmul.f32	s13, s13, s10
         t1 = r5 - r1;
   12e28:	ee77 3a65 	vsub.f32	s7, s14, s11
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
   12e2c:	ee74 2ac3 	vsub.f32	s5, s9, s6
         r5 = r5 + r1;
   12e30:	ee37 7a25 	vadd.f32	s14, s14, s11
         r8 = r7 - r6;
   12e34:	ee77 5ac6 	vsub.f32	s11, s15, s12
         r7 = r7 + r6;
   12e38:	ee77 7a86 	vadd.f32	s15, s15, s12
         s5 = s5 + r2;
   12e3c:	ee34 6a83 	vadd.f32	s12, s9, s6
         s8 = s7 - s6;
   12e40:	ee74 4a66 	vsub.f32	s9, s8, s13
         s7 = s7 + s6;
   12e44:	ee74 6a26 	vadd.f32	s13, s8, s13
         pSrc[2 * i2]     = r5 + s7;
   12e48:	ee37 4a26 	vadd.f32	s8, s14, s13
         pSrc[2 * i8]     = r5 - s7;
   12e4c:	ee37 7a66 	vsub.f32	s14, s14, s13
         pSrc[2 * i2]     = r5 + s7;
   12e50:	ed87 4a00 	vstr	s8, [r7]
         pSrc[2 * i8]     = r5 - s7;
   12e54:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
   12e58:	ee33 7aa4 	vadd.f32	s14, s7, s9
         pSrc[2 * i4]     = t1 - s8;
   12e5c:	ee73 3ae4 	vsub.f32	s7, s7, s9
         pSrc[2 * i6]     = t1 + s8;
   12e60:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
   12e64:	ee36 7a67 	vsub.f32	s14, s12, s15
         pSrc[2 * i8 + 1] = s5 + r7;
   12e68:	ee77 7a86 	vadd.f32	s15, s15, s12
         pSrc[2 * i4]     = t1 - s8;
   12e6c:	edc2 3a00 	vstr	s7, [r2]
         pSrc[2 * i2 + 1] = s5 - r7;
   12e70:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
   12e74:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
   12e78:	ee72 7ae5 	vsub.f32	s15, s5, s11
         pSrc[2 * i4 + 1] = t2 + r8;
   12e7c:	ee75 5aa2 	vadd.f32	s11, s11, s5
         pSrc[2 * i6 + 1] = t2 - r8;
   12e80:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
   12e84:	edc2 5a01 	vstr	s11, [r2, #4]

         i1 += n1;
   12e88:	9a01      	ldr	r2, [sp, #4]
      } while (i1 < fftLen);
   12e8a:	449c      	add	ip, r3
         i1 += n1;
   12e8c:	4492      	add	sl, r2
      } while (i1 < fftLen);
   12e8e:	9a00      	ldr	r2, [sp, #0]
   12e90:	441f      	add	r7, r3
   12e92:	441a      	add	r2, r3
   12e94:	9200      	str	r2, [sp, #0]
   12e96:	9a02      	ldr	r2, [sp, #8]
   12e98:	441e      	add	r6, r3
   12e9a:	4552      	cmp	r2, sl
   12e9c:	441d      	add	r5, r3
   12e9e:	441c      	add	r4, r3
   12ea0:	4498      	add	r8, r3
   12ea2:	449e      	add	lr, r3
   12ea4:	f63f af3f 	bhi.w	12d26 <arm_radix8_butterfly_f32+0x6a>

      if (n2 < 8)
   12ea8:	2907      	cmp	r1, #7
   12eaa:	f240 8170 	bls.w	1318e <arm_radix8_butterfly_f32+0x4d2>
   12eae:	eb0b 0200 	add.w	r2, fp, r0
   12eb2:	9209      	str	r2, [sp, #36]	; 0x24
   12eb4:	9a08      	ldr	r2, [sp, #32]
         break;

      ia1 = 0;
      j = 1;
   12eb6:	2401      	movs	r4, #1
   12eb8:	4402      	add	r2, r0
   12eba:	9208      	str	r2, [sp, #32]
   12ebc:	9a07      	ldr	r2, [sp, #28]
   12ebe:	4402      	add	r2, r0
   12ec0:	9207      	str	r2, [sp, #28]
   12ec2:	9a06      	ldr	r2, [sp, #24]
   12ec4:	4402      	add	r2, r0
   12ec6:	9206      	str	r2, [sp, #24]
   12ec8:	9a05      	ldr	r2, [sp, #20]
   12eca:	4402      	add	r2, r0
   12ecc:	9205      	str	r2, [sp, #20]
   12ece:	eba0 0209 	sub.w	r2, r0, r9
   12ed2:	920a      	str	r2, [sp, #40]	; 0x28
   12ed4:	9a04      	ldr	r2, [sp, #16]
   12ed6:	4402      	add	r2, r0
   12ed8:	9204      	str	r2, [sp, #16]
      ia1 = 0;
   12eda:	2200      	movs	r2, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
   12edc:	2630      	movs	r6, #48	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
   12ede:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
   12ee0:	9d03      	ldr	r5, [sp, #12]
   12ee2:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
   12ee6:	442a      	add	r2, r5
         co2 = pCoef[2 * ia1];
   12ee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12eea:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12eee:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
   12ef2:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12ef6:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
   12efa:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12efe:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
   12f02:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12f06:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
   12f0a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12f0e:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
   12f12:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12f16:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
   12f1a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
   12f1e:	fb06 5612 	mls	r6, r6, r2, r5
   12f22:	edd5 2a00 	vldr	s5, [r5]
         si8 = pCoef[2 * ia7 + 1];
   12f26:	ed95 2a01 	vldr	s4, [r5, #4]
   12f2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
         si2 = pCoef[2 * ia1 + 1];
   12f2c:	ed96 1a01 	vldr	s2, [r6, #4]
         si3 = pCoef[2 * ia2 + 1];
   12f30:	eb05 09c4 	add.w	r9, r5, r4, lsl #3
   12f34:	9d08      	ldr	r5, [sp, #32]
   12f36:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
   12f3a:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
   12f3e:	9d07      	ldr	r5, [sp, #28]
   12f40:	edd6 8a01 	vldr	s17, [r6, #4]
         si4 = pCoef[2 * ia3 + 1];
   12f44:	eb05 0ec4 	add.w	lr, r5, r4, lsl #3
   12f48:	9d06      	ldr	r5, [sp, #24]
   12f4a:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
   12f4e:	eb05 0cc4 	add.w	ip, r5, r4, lsl #3
   12f52:	9d05      	ldr	r5, [sp, #20]
   12f54:	ed96 4a01 	vldr	s8, [r6, #4]
         si5 = pCoef[2 * ia4 + 1];
   12f58:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
   12f5c:	edd6 9a01 	vldr	s19, [r6, #4]
         si6 = pCoef[2 * ia5 + 1];
   12f60:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
   12f64:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
   12f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12f6a:	ed96 3a01 	vldr	s6, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
   12f6e:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
   12f72:	ed96 0a01 	vldr	s0, [r6, #4]
         i1 = j;
   12f76:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
   12f7a:	9d04      	ldr	r5, [sp, #16]
   12f7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   12f80:	9500      	str	r5, [sp, #0]
   12f82:	e001      	b.n	12f88 <arm_radix8_butterfly_f32+0x2cc>
   12f84:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   12f88:	ed99 7a00 	vldr	s14, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12f8c:	ed9e 6a00 	vldr	s12, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   12f90:	edda 7a00 	vldr	s15, [sl]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12f94:	edd8 6a00 	vldr	s13, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   12f98:	eddc 5a00 	vldr	s11, [ip]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   12f9c:	ee37 aa87 	vadd.f32	s20, s15, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
   12fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   12fa4:	ee36 7a86 	vadd.f32	s14, s13, s12
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
   12fa8:	ee76 6ac6 	vsub.f32	s13, s13, s12
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   12fac:	ed97 6a00 	vldr	s12, [r7]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   12fb0:	9d00      	ldr	r5, [sp, #0]
   12fb2:	ed96 da00 	vldr	s26, [r6]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   12fb6:	ee35 ba86 	vadd.f32	s22, s11, s12
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
   12fba:	ee75 aac6 	vsub.f32	s21, s11, s12
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   12fbe:	ed95 6a00 	vldr	s12, [r5]
   12fc2:	ee7d 5a06 	vadd.f32	s11, s26, s12
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
   12fc6:	ee3d da46 	vsub.f32	s26, s26, s12
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
   12fca:	ee77 da65 	vsub.f32	s27, s14, s11
            t1 = r1 - r3;
   12fce:	ee3a 6a4b 	vsub.f32	s12, s20, s22
            r2 = r2 + r4;
   12fd2:	ee37 7a25 	vadd.f32	s14, s14, s11
            r1 = r1 + r3;
   12fd6:	ee3a aa0b 	vadd.f32	s20, s20, s22
            pSrc[2 * i1] = r1 + r2;
   12fda:	ee7a 5a07 	vadd.f32	s11, s20, s14
   12fde:	edca 5a00 	vstr	s11, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   12fe2:	edda ba01 	vldr	s23, [sl, #4]
            r2 = r1 - r2;
   12fe6:	ee3a aa47 	vsub.f32	s20, s20, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   12fea:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   12fee:	edde 5a01 	vldr	s11, [lr, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   12ff2:	ee3b fa87 	vadd.f32	s30, s23, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   12ff6:	ee7b bac7 	vsub.f32	s23, s23, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   12ffa:	ed98 7a01 	vldr	s14, [r8, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   12ffe:	edd5 ea01 	vldr	s29, [r5, #4]
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   13002:	ed9c ba01 	vldr	s22, [ip, #4]
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   13006:	edd6 ca01 	vldr	s25, [r6, #4]
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   1300a:	ee37 ea25 	vadd.f32	s28, s14, s11
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   1300e:	ee37 7a65 	vsub.f32	s14, s14, s11
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   13012:	edd7 5a01 	vldr	s11, [r7, #4]
   13016:	ee3b ca25 	vadd.f32	s24, s22, s11
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   1301a:	ee3b ba65 	vsub.f32	s22, s22, s11
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   1301e:	ee7c 5aae 	vadd.f32	s11, s25, s29
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   13022:	ee7c caee 	vsub.f32	s25, s25, s29
            t2 = s1 - s3;
   13026:	ee7f ea4c 	vsub.f32	s29, s30, s24
            s1 = s1 + s3;
   1302a:	ee3f ca0c 	vadd.f32	s24, s30, s24
            s3 = s2 - s4;
   1302e:	ee3e fa65 	vsub.f32	s30, s28, s11
            s2 = s2 + s4;
   13032:	ee3e ea25 	vadd.f32	s28, s28, s11
            r1 = t1 + s3;
   13036:	ee76 5a0f 	vadd.f32	s11, s12, s30
            t1 = t1 - s3;
   1303a:	ee36 6a4f 	vsub.f32	s12, s12, s30
            pSrc[2 * i1 + 1] = s1 + s2;
   1303e:	ee3c fa0e 	vadd.f32	s30, s24, s28
            s2 = s1 - s2;
   13042:	ee3c ca4e 	vsub.f32	s24, s24, s28
            s1 = t2 - r3;
   13046:	ee3e eaed 	vsub.f32	s28, s29, s27
            t2 = t2 + r3;
   1304a:	ee7d daae 	vadd.f32	s27, s27, s29
            p1 = co5 * r2;
            p2 = si5 * s2;
   1304e:	ee69 ea8c 	vmul.f32	s29, s19, s24
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
   13052:	ee49 ea0a 	vmla.f32	s29, s18, s20
            p4 = si5 * r2;
   13056:	ee29 aa8a 	vmul.f32	s20, s19, s20
            pSrc[2 * i5 + 1] = p3 - p4;
   1305a:	ee19 aa0c 	vnmls.f32	s20, s18, s24
            pSrc[2 * i1 + 1] = s1 + s2;
   1305e:	ed8a fa01 	vstr	s30, [sl, #4]
            pSrc[2 * i5 + 1] = p3 - p4;
   13062:	ed89 aa01 	vstr	s20, [r9, #4]
            p1 = co3 * r1;
            p2 = si3 * s1;
   13066:	ee28 aa8e 	vmul.f32	s20, s17, s28
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
   1306a:	ee08 aa25 	vmla.f32	s20, s16, s11
            p4 = si3 * r1;
   1306e:	ee68 5aa5 	vmul.f32	s11, s17, s11
            pSrc[2 * i3 + 1] = p3 - p4;
   13072:	ee58 5a0e 	vnmls.f32	s11, s16, s28
            pSrc[2 * i5]     = p1 + p2;
   13076:	edc9 ea00 	vstr	s29, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
   1307a:	edcc 5a01 	vstr	s11, [ip, #4]
            p1 = co7 * t1;
            p2 = si7 * t2;
   1307e:	ee60 5a2d 	vmul.f32	s11, s0, s27
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
   13082:	ee40 5a86 	vmla.f32	s11, s1, s12
            p4 = si7 * t1;
   13086:	ee20 6a06 	vmul.f32	s12, s0, s12
            pSrc[2 * i7 + 1] = p3 - p4;
   1308a:	ee10 6aad 	vnmls.f32	s12, s1, s27
            pSrc[2 * i3]     = p1 + p2;
   1308e:	ed8c aa00 	vstr	s20, [ip]
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
   13092:	ee37 ca6c 	vsub.f32	s24, s14, s25
            pSrc[2 * i7 + 1] = p3 - p4;
   13096:	ed87 6a01 	vstr	s12, [r7, #4]
            s6 = (s6 + s8) * C81;
   1309a:	ee37 7a2c 	vadd.f32	s14, s14, s25
            r1 = (r6 - r8) * C81;
   1309e:	ee36 6acd 	vsub.f32	s12, s13, s26
            r6 = (r6 + r8) * C81;
   130a2:	ee76 6a8d 	vadd.f32	s13, s13, s26
            r1 = (r6 - r8) * C81;
   130a6:	ee26 6a05 	vmul.f32	s12, s12, s10
            r6 = (r6 + r8) * C81;
   130aa:	ee66 6a85 	vmul.f32	s13, s13, s10
            s1 = (s6 - s8) * C81;
   130ae:	ee2c ca05 	vmul.f32	s24, s24, s10
            s6 = (s6 + s8) * C81;
   130b2:	ee27 7a05 	vmul.f32	s14, s14, s10
            pSrc[2 * i7]     = p1 + p2;
   130b6:	edc7 5a00 	vstr	s11, [r7]
            t1 = r5 - r1;
   130ba:	ee37 aac6 	vsub.f32	s20, s15, s12
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
   130be:	ee7a 5aa6 	vadd.f32	s11, s21, s13
            r5 = r5 + r1;
   130c2:	ee77 7a86 	vadd.f32	s15, s15, s12
            t2 = s5 - s1;
   130c6:	ee3b dacc 	vsub.f32	s26, s23, s24
            s5 = s5 + s1;
   130ca:	ee3b 6a8c 	vadd.f32	s12, s23, s24
            s8 = s7 - s6;
   130ce:	ee7b ba47 	vsub.f32	s23, s22, s14
            r8 = r7 - r6;
   130d2:	ee7a cae6 	vsub.f32	s25, s21, s13
            s7 = s7 + s6;
   130d6:	ee3b 7a07 	vadd.f32	s14, s22, s14
            r1 = r5 + s7;
            r5 = r5 - s7;
            r6 = t1 + s8;
   130da:	ee7a aa2b 	vadd.f32	s21, s20, s23
            t1 = t1 - s8;
   130de:	ee3a aa6b 	vsub.f32	s20, s20, s23
            s1 = s5 - r7;
   130e2:	ee76 ba65 	vsub.f32	s23, s12, s11
            r1 = r5 + s7;
   130e6:	ee77 6a87 	vadd.f32	s13, s15, s14
            s5 = s5 + r7;
            s6 = t2 - r8;
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
   130ea:	ee21 ba2b 	vmul.f32	s22, s2, s23
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
   130ee:	ee01 baa6 	vmla.f32	s22, s3, s13
            p4 = si2 * r1;
   130f2:	ee61 6a26 	vmul.f32	s13, s2, s13
            r5 = r5 - s7;
   130f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
            pSrc[2 * i2 + 1] = p3 - p4;
   130fa:	ee51 6aab 	vnmls.f32	s13, s3, s23
            s5 = s5 + r7;
   130fe:	ee35 7a86 	vadd.f32	s14, s11, s12
            pSrc[2 * i2 + 1] = p3 - p4;
   13102:	edc8 6a01 	vstr	s13, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
   13106:	ee62 6a07 	vmul.f32	s13, s4, s14
            s6 = t2 - r8;
   1310a:	ee7d 5a6c 	vsub.f32	s11, s26, s25
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
   1310e:	ee42 6aa7 	vmla.f32	s13, s5, s15
            pSrc[2 * i2]     = p1 + p2;
   13112:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i8]     = p1 + p2;
   13116:	edc5 6a00 	vstr	s13, [r5]
            p4 = si8 * r5;
   1311a:	ee62 6a27 	vmul.f32	s13, s4, s15
            pSrc[2 * i8 + 1] = p3 - p4;
            p1 = co6 * r6;
            p2 = si6 * s6;
   1311e:	ee63 7a25 	vmul.f32	s15, s6, s11
            t2 = t2 + r8;
   13122:	ee3c 6a8d 	vadd.f32	s12, s25, s26
            pSrc[2 * i8 + 1] = p3 - p4;
   13126:	ee52 6a87 	vnmls.f32	s13, s5, s14
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
   1312a:	ee43 7aaa 	vmla.f32	s15, s7, s21
            pSrc[2 * i8 + 1] = p3 - p4;
   1312e:	edc5 6a01 	vstr	s13, [r5, #4]
            p4 = si6 * r6;
   13132:	ee23 7a2a 	vmul.f32	s14, s6, s21
            pSrc[2 * i6]     = p1 + p2;
   13136:	edce 7a00 	vstr	s15, [lr]
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
            p2 = si4 * t2;
   1313a:	ee64 7a06 	vmul.f32	s15, s8, s12
            pSrc[2 * i6 + 1] = p3 - p4;
   1313e:	ee13 7aa5 	vnmls.f32	s14, s7, s11
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
   13142:	ee44 7a8a 	vmla.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
   13146:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
   1314a:	edc6 7a00 	vstr	s15, [r6]
            p4 = si4 * t1;
   1314e:	ee64 7a0a 	vmul.f32	s15, s8, s20
            pSrc[2 * i4 + 1] = p3 - p4;
   13152:	ee54 7a86 	vnmls.f32	s15, s9, s12
   13156:	edc6 7a01 	vstr	s15, [r6, #4]

            i1 += n1;
   1315a:	9d01      	ldr	r5, [sp, #4]
         } while (i1 < fftLen);
   1315c:	449a      	add	sl, r3
            i1 += n1;
   1315e:	44ab      	add	fp, r5
         } while (i1 < fftLen);
   13160:	9d00      	ldr	r5, [sp, #0]
   13162:	4499      	add	r9, r3
   13164:	441d      	add	r5, r3
   13166:	9500      	str	r5, [sp, #0]
   13168:	9d02      	ldr	r5, [sp, #8]
   1316a:	4498      	add	r8, r3
   1316c:	455d      	cmp	r5, fp
   1316e:	449e      	add	lr, r3
   13170:	449c      	add	ip, r3
   13172:	441f      	add	r7, r3
   13174:	441e      	add	r6, r3
   13176:	f63f af07 	bhi.w	12f88 <arm_radix8_butterfly_f32+0x2cc>

         j++;
   1317a:	3401      	adds	r4, #1
      } while (j < n2);
   1317c:	42a1      	cmp	r1, r4
   1317e:	f47f aead 	bne.w	12edc <arm_radix8_butterfly_f32+0x220>

      twidCoefModifier <<= 3;
   13182:	9b03      	ldr	r3, [sp, #12]
   13184:	9101      	str	r1, [sp, #4]
   13186:	00db      	lsls	r3, r3, #3
   13188:	b29b      	uxth	r3, r3
   1318a:	9303      	str	r3, [sp, #12]
   } while (n2 > 7);
   1318c:	e5a1      	b.n	12cd2 <arm_radix8_butterfly_f32+0x16>
}
   1318e:	b00d      	add	sp, #52	; 0x34
   13190:	ecbd 8b10 	vpop	{d8-d15}
   13194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013198 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   13198:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1319c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   131a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   131a4:	2a07      	cmp	r2, #7
   131a6:	d105      	bne.n	131b4 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
   131a8:	3b02      	subs	r3, #2
   131aa:	2b03      	cmp	r3, #3
   131ac:	d802      	bhi.n	131b4 <nrf53_errata_42+0x1c>
   131ae:	4a02      	ldr	r2, [pc, #8]	; (131b8 <nrf53_errata_42+0x20>)
   131b0:	5cd0      	ldrb	r0, [r2, r3]
   131b2:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
   131b4:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
   131b6:	4770      	bx	lr
   131b8:	00024b3a 	.word	0x00024b3a

000131bc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   131bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   131c0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   131c4:	4b03      	ldr	r3, [pc, #12]	; (131d4 <SystemCoreClockUpdate+0x18>)
   131c6:	f002 0203 	and.w	r2, r2, #3
   131ca:	40d3      	lsrs	r3, r2
   131cc:	4a02      	ldr	r2, [pc, #8]	; (131d8 <SystemCoreClockUpdate+0x1c>)
   131ce:	6013      	str	r3, [r2, #0]
#endif
}
   131d0:	4770      	bx	lr
   131d2:	bf00      	nop
   131d4:	07a12000 	.word	0x07a12000
   131d8:	20000434 	.word	0x20000434

000131dc <SystemInit>:

void SystemInit(void)
{
   131dc:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
   131de:	f7ff ffdb 	bl	13198 <nrf53_errata_42>
   131e2:	b158      	cbz	r0, 131fc <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
   131e4:	4b54      	ldr	r3, [pc, #336]	; (13338 <SystemInit+0x15c>)
   131e6:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
   131ea:	b93a      	cbnz	r2, 131fc <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
   131ec:	210d      	movs	r1, #13
   131ee:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
   131f2:	2101      	movs	r1, #1
   131f4:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
   131f8:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
   131fc:	2200      	movs	r2, #0
   131fe:	00d3      	lsls	r3, r2, #3
   13200:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   13204:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   13208:	3101      	adds	r1, #1
   1320a:	d007      	beq.n	1321c <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   1320c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   13210:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   13212:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   13216:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   13218:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   1321a:	d1f0      	bne.n	131fe <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
   1321c:	f7ff ffbc 	bl	13198 <nrf53_errata_42>
   13220:	2800      	cmp	r0, #0
   13222:	f040 8081 	bne.w	13328 <SystemInit+0x14c>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
   13226:	f7ff ffb7 	bl	13198 <nrf53_errata_42>
   1322a:	b140      	cbz	r0, 1323e <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
   1322c:	4b43      	ldr	r3, [pc, #268]	; (1333c <SystemInit+0x160>)
   1322e:	4a44      	ldr	r2, [pc, #272]	; (13340 <SystemInit+0x164>)
   13230:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
   13234:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13238:	2201      	movs	r2, #1
   1323a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1323e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13242:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   13246:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1324a:	2a07      	cmp	r2, #7
   1324c:	d109      	bne.n	13262 <SystemInit+0x86>
                {
                    switch(var2)
   1324e:	3b02      	subs	r3, #2
   13250:	2b03      	cmp	r3, #3
   13252:	d806      	bhi.n	13262 <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
   13254:	4a3b      	ldr	r2, [pc, #236]	; (13344 <SystemInit+0x168>)
   13256:	5cd3      	ldrb	r3, [r2, r3]
   13258:	b11b      	cbz	r3, 13262 <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
   1325a:	2200      	movs	r2, #0
   1325c:	4b3a      	ldr	r3, [pc, #232]	; (13348 <SystemInit+0x16c>)
   1325e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
   13262:	f7ff ff99 	bl	13198 <nrf53_errata_42>
   13266:	b150      	cbz	r0, 1327e <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
   13268:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1326c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13270:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
   13272:	bf42      	ittt	mi
   13274:	2200      	movmi	r2, #0
   13276:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
   1327a:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1327e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13282:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   13286:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   1328a:	2a07      	cmp	r2, #7
   1328c:	d109      	bne.n	132a2 <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
   1328e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13292:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13296:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
   13298:	bf44      	itt	mi
   1329a:	f06f 0201 	mvnmi.w	r2, #1
   1329e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
   132a2:	f7ff ff79 	bl	13198 <nrf53_errata_42>
   132a6:	b118      	cbz	r0, 132b0 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
   132a8:	2265      	movs	r2, #101	; 0x65
   132aa:	4b23      	ldr	r3, [pc, #140]	; (13338 <SystemInit+0x15c>)
   132ac:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   132b0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   132b4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   132b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
   132bc:	2a07      	cmp	r2, #7
   132be:	d116      	bne.n	132ee <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
   132c0:	4b21      	ldr	r3, [pc, #132]	; (13348 <SystemInit+0x16c>)
   132c2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
   132c6:	2b00      	cmp	r3, #0
   132c8:	da11      	bge.n	132ee <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
   132ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   132ce:	2203      	movs	r2, #3
   132d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
   132d4:	2201      	movs	r2, #1
   132d6:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
   132d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   132dc:	2a00      	cmp	r2, #0
   132de:	d0fb      	beq.n	132d8 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
   132e0:	2200      	movs	r2, #0
   132e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
   132e6:	2201      	movs	r2, #1
   132e8:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
   132ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
   132ee:	4b17      	ldr	r3, [pc, #92]	; (1334c <SystemInit+0x170>)
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
   132f0:	4917      	ldr	r1, [pc, #92]	; (13350 <SystemInit+0x174>)
   132f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   132f6:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   132fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   132fe:	6808      	ldr	r0, [r1, #0]
   13300:	4a14      	ldr	r2, [pc, #80]	; (13354 <SystemInit+0x178>)
   13302:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
   13306:	69c9      	ldr	r1, [r1, #28]
   13308:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1330c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13310:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   13314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   13318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1331c:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
   13320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
   13324:	f7ff bf4a 	b.w	131bc <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
   13328:	2229      	movs	r2, #41	; 0x29
   1332a:	4b03      	ldr	r3, [pc, #12]	; (13338 <SystemInit+0x15c>)
   1332c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
   13330:	2203      	movs	r2, #3
   13332:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
   13336:	e776      	b.n	13226 <SystemInit+0x4a>
   13338:	50004000 	.word	0x50004000
   1333c:	50039000 	.word	0x50039000
   13340:	beef0044 	.word	0xbeef0044
   13344:	00024b36 	.word	0x00024b36
   13348:	50032000 	.word	0x50032000
   1334c:	e000ed00 	.word	0xe000ed00
   13350:	00ff8000 	.word	0x00ff8000
   13354:	50006000 	.word	0x50006000

00013358 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13358:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1335a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1335c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1335e:	fab2 f382 	clz	r3, r2
   13362:	f1c3 031f 	rsb	r3, r3, #31
   13366:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   13368:	fa05 f403 	lsl.w	r4, r5, r3
   1336c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13370:	e8d0 6fef 	ldaex	r6, [r0]
   13374:	4296      	cmp	r6, r2
   13376:	d104      	bne.n	13382 <nrfx_flag32_alloc+0x2a>
   13378:	e8c0 4fec 	stlex	ip, r4, [r0]
   1337c:	f1bc 0f00 	cmp.w	ip, #0
   13380:	d1f6      	bne.n	13370 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13382:	d1eb      	bne.n	1335c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   13384:	4801      	ldr	r0, [pc, #4]	; (1338c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   13386:	700b      	strb	r3, [r1, #0]
}
   13388:	bd70      	pop	{r4, r5, r6, pc}
   1338a:	bf00      	nop
   1338c:	0bad0000 	.word	0x0bad0000

00013390 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   13390:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   13392:	6803      	ldr	r3, [r0, #0]
   13394:	40cb      	lsrs	r3, r1
   13396:	07db      	lsls	r3, r3, #31
   13398:	d410      	bmi.n	133bc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1339a:	2301      	movs	r3, #1
   1339c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1339e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   133a0:	ea43 0102 	orr.w	r1, r3, r2
   133a4:	e8d0 4fef 	ldaex	r4, [r0]
   133a8:	4294      	cmp	r4, r2
   133aa:	d104      	bne.n	133b6 <nrfx_flag32_free+0x26>
   133ac:	e8c0 1fec 	stlex	ip, r1, [r0]
   133b0:	f1bc 0f00 	cmp.w	ip, #0
   133b4:	d1f6      	bne.n	133a4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   133b6:	d1f2      	bne.n	1339e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   133b8:	4801      	ldr	r0, [pc, #4]	; (133c0 <nrfx_flag32_free+0x30>)
}
   133ba:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   133bc:	4801      	ldr	r0, [pc, #4]	; (133c4 <nrfx_flag32_free+0x34>)
   133be:	e7fc      	b.n	133ba <nrfx_flag32_free+0x2a>
   133c0:	0bad0000 	.word	0x0bad0000
   133c4:	0bad0004 	.word	0x0bad0004

000133c8 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   133c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   133cc:	2200      	movs	r2, #0
{
   133ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   133d0:	2803      	cmp	r0, #3
   133d2:	d838      	bhi.n	13446 <clock_stop+0x7e>
   133d4:	e8df f000 	tbb	[pc, r0]
   133d8:	2c210d02 	.word	0x2c210d02
    p_reg->INTENCLR = mask;
   133dc:	2102      	movs	r1, #2
   133de:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   133e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133ea:	2201      	movs	r2, #1
   133ec:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   133ee:	2400      	movs	r4, #0
   133f0:	e009      	b.n	13406 <clock_stop+0x3e>
    p_reg->INTENCLR = mask;
   133f2:	2101      	movs	r1, #1
   133f4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   133fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   13400:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13404:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13406:	2301      	movs	r3, #1
   13408:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1340c:	2803      	cmp	r0, #3
   1340e:	f200 8096 	bhi.w	1353e <clock_stop+0x176>
   13412:	e8df f000 	tbb	[pc, r0]
   13416:	4321      	.short	0x4321
   13418:	8564      	.short	0x8564
    p_reg->INTENCLR = mask;
   1341a:	f44f 7100 	mov.w	r1, #512	; 0x200
   1341e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13422:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13426:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1342a:	2201      	movs	r2, #1
   1342c:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1342e:	e7de      	b.n	133ee <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   13430:	f44f 7180 	mov.w	r1, #256	; 0x100
   13434:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13438:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1343c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13440:	2201      	movs	r2, #1
   13442:	61da      	str	r2, [r3, #28]
   13444:	e7d3      	b.n	133ee <clock_stop+0x26>
            NRFX_ASSERT(0);
   13446:	4945      	ldr	r1, [pc, #276]	; (1355c <clock_stop+0x194>)
   13448:	4845      	ldr	r0, [pc, #276]	; (13560 <clock_stop+0x198>)
   1344a:	22d8      	movs	r2, #216	; 0xd8
   1344c:	f007 ff60 	bl	1b310 <assert_print>
   13450:	21d8      	movs	r1, #216	; 0xd8
   13452:	4842      	ldr	r0, [pc, #264]	; (1355c <clock_stop+0x194>)
            NRFX_ASSERT(0);
   13454:	f007 ff55 	bl	1b302 <assert_post_action>
    switch (domain)
   13458:	f242 7510 	movw	r5, #10000	; 0x2710
   1345c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
   13460:	b194      	cbz	r4, 13488 <clock_stop+0xc0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13462:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13466:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1346a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1346c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13470:	03d9      	lsls	r1, r3, #15
   13472:	d507      	bpl.n	13484 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13474:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13478:	2801      	cmp	r0, #1
   1347a:	d103      	bne.n	13484 <clock_stop+0xbc>
   1347c:	f00a fe3c 	bl	1e0f8 <nrfx_busy_wait>
   13480:	3d01      	subs	r5, #1
   13482:	d1ed      	bne.n	13460 <clock_stop+0x98>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13484:	b002      	add	sp, #8
   13486:	bd70      	pop	{r4, r5, r6, pc}
   13488:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1348c:	03da      	lsls	r2, r3, #15
   1348e:	d5f9      	bpl.n	13484 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13490:	2001      	movs	r0, #1
   13492:	f00a fe31 	bl	1e0f8 <nrfx_busy_wait>
   13496:	3d01      	subs	r5, #1
   13498:	d1f6      	bne.n	13488 <clock_stop+0xc0>
   1349a:	e7f3      	b.n	13484 <clock_stop+0xbc>
    switch (domain)
   1349c:	f242 7510 	movw	r5, #10000	; 0x2710
   134a0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
   134a4:	b18c      	cbz	r4, 134ca <clock_stop+0x102>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   134a6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   134aa:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   134ae:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   134b0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   134b4:	03db      	lsls	r3, r3, #15
   134b6:	d5e5      	bpl.n	13484 <clock_stop+0xbc>
   134b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   134bc:	2801      	cmp	r0, #1
   134be:	d1e1      	bne.n	13484 <clock_stop+0xbc>
   134c0:	f00a fe1a 	bl	1e0f8 <nrfx_busy_wait>
   134c4:	3d01      	subs	r5, #1
   134c6:	d1ed      	bne.n	134a4 <clock_stop+0xdc>
   134c8:	e7dc      	b.n	13484 <clock_stop+0xbc>
   134ca:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   134ce:	03d8      	lsls	r0, r3, #15
   134d0:	d5d8      	bpl.n	13484 <clock_stop+0xbc>
   134d2:	2001      	movs	r0, #1
   134d4:	f00a fe10 	bl	1e0f8 <nrfx_busy_wait>
   134d8:	3d01      	subs	r5, #1
   134da:	d1f6      	bne.n	134ca <clock_stop+0x102>
   134dc:	e7d2      	b.n	13484 <clock_stop+0xbc>
    switch (domain)
   134de:	f242 7510 	movw	r5, #10000	; 0x2710
   134e2:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
   134e6:	b18c      	cbz	r4, 1350c <clock_stop+0x144>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   134e8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   134ec:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   134f0:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   134f2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   134f6:	03d9      	lsls	r1, r3, #15
   134f8:	d5c4      	bpl.n	13484 <clock_stop+0xbc>
   134fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   134fe:	2801      	cmp	r0, #1
   13500:	d1c0      	bne.n	13484 <clock_stop+0xbc>
   13502:	f00a fdf9 	bl	1e0f8 <nrfx_busy_wait>
   13506:	3d01      	subs	r5, #1
   13508:	d1ed      	bne.n	134e6 <clock_stop+0x11e>
   1350a:	e7bb      	b.n	13484 <clock_stop+0xbc>
   1350c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13510:	03da      	lsls	r2, r3, #15
   13512:	d5b7      	bpl.n	13484 <clock_stop+0xbc>
   13514:	2001      	movs	r0, #1
   13516:	f00a fdef 	bl	1e0f8 <nrfx_busy_wait>
   1351a:	3d01      	subs	r5, #1
   1351c:	d1f6      	bne.n	1350c <clock_stop+0x144>
   1351e:	e7b1      	b.n	13484 <clock_stop+0xbc>
    switch (domain)
   13520:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   13524:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
   13528:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1352c:	03db      	lsls	r3, r3, #15
   1352e:	d5a9      	bpl.n	13484 <clock_stop+0xbc>
   13530:	b97c      	cbnz	r4, 13552 <clock_stop+0x18a>
   13532:	2001      	movs	r0, #1
   13534:	f00a fde0 	bl	1e0f8 <nrfx_busy_wait>
   13538:	3d01      	subs	r5, #1
   1353a:	d1f5      	bne.n	13528 <clock_stop+0x160>
   1353c:	e7a2      	b.n	13484 <clock_stop+0xbc>
            NRFX_ASSERT(0);
   1353e:	4909      	ldr	r1, [pc, #36]	; (13564 <clock_stop+0x19c>)
   13540:	4807      	ldr	r0, [pc, #28]	; (13560 <clock_stop+0x198>)
   13542:	f240 3247 	movw	r2, #839	; 0x347
   13546:	f007 fee3 	bl	1b310 <assert_print>
   1354a:	f240 3147 	movw	r1, #839	; 0x347
   1354e:	4805      	ldr	r0, [pc, #20]	; (13564 <clock_stop+0x19c>)
   13550:	e780      	b.n	13454 <clock_stop+0x8c>
   13552:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13556:	2801      	cmp	r0, #1
   13558:	d0ec      	beq.n	13534 <clock_stop+0x16c>
   1355a:	e793      	b.n	13484 <clock_stop+0xbc>
   1355c:	00024b3e 	.word	0x00024b3e
   13560:	000221f8 	.word	0x000221f8
   13564:	00024b7b 	.word	0x00024b7b

00013568 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   13568:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1356a:	b950      	cbnz	r0, 13582 <nrfx_clock_init+0x1a>
   1356c:	490a      	ldr	r1, [pc, #40]	; (13598 <nrfx_clock_init+0x30>)
   1356e:	480b      	ldr	r0, [pc, #44]	; (1359c <nrfx_clock_init+0x34>)
   13570:	f240 1215 	movw	r2, #277	; 0x115
   13574:	f007 fecc 	bl	1b310 <assert_print>
   13578:	f240 1115 	movw	r1, #277	; 0x115
   1357c:	4806      	ldr	r0, [pc, #24]	; (13598 <nrfx_clock_init+0x30>)
   1357e:	f007 fec0 	bl	1b302 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   13582:	4b07      	ldr	r3, [pc, #28]	; (135a0 <nrfx_clock_init+0x38>)
   13584:	791a      	ldrb	r2, [r3, #4]
   13586:	b922      	cbnz	r2, 13592 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   13588:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1358a:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1358c:	4805      	ldr	r0, [pc, #20]	; (135a4 <nrfx_clock_init+0x3c>)
        m_clock_cb.module_initialized = true;
   1358e:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13590:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13592:	4805      	ldr	r0, [pc, #20]	; (135a8 <nrfx_clock_init+0x40>)
    return err_code;
   13594:	e7fc      	b.n	13590 <nrfx_clock_init+0x28>
   13596:	bf00      	nop
   13598:	00024b3e 	.word	0x00024b3e
   1359c:	000221f8 	.word	0x000221f8
   135a0:	20006dbc 	.word	0x20006dbc
   135a4:	0bad0000 	.word	0x0bad0000
   135a8:	0bad000c 	.word	0x0bad000c

000135ac <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   135ac:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   135ae:	4b0f      	ldr	r3, [pc, #60]	; (135ec <nrfx_clock_enable+0x40>)
   135b0:	791b      	ldrb	r3, [r3, #4]
   135b2:	b953      	cbnz	r3, 135ca <nrfx_clock_enable+0x1e>
   135b4:	490e      	ldr	r1, [pc, #56]	; (135f0 <nrfx_clock_enable+0x44>)
   135b6:	480f      	ldr	r0, [pc, #60]	; (135f4 <nrfx_clock_enable+0x48>)
   135b8:	f44f 7297 	mov.w	r2, #302	; 0x12e
   135bc:	f007 fea8 	bl	1b310 <assert_print>
   135c0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   135c4:	480a      	ldr	r0, [pc, #40]	; (135f0 <nrfx_clock_enable+0x44>)
   135c6:	f007 fe9c 	bl	1b302 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   135ca:	2005      	movs	r0, #5
   135cc:	f7f6 f9fc 	bl	99c8 <arch_irq_is_enabled>
   135d0:	b910      	cbnz	r0, 135d8 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   135d2:	2005      	movs	r0, #5
   135d4:	f7f6 f9d6 	bl	9984 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   135d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   135dc:	2201      	movs	r2, #1
   135de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   135e2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   135e6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   135ea:	bd08      	pop	{r3, pc}
   135ec:	20006dbc 	.word	0x20006dbc
   135f0:	00024b3e 	.word	0x00024b3e
   135f4:	000221f8 	.word	0x000221f8

000135f8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   135f8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   135fa:	4b38      	ldr	r3, [pc, #224]	; (136dc <nrfx_clock_start+0xe4>)
   135fc:	791b      	ldrb	r3, [r3, #4]
   135fe:	b953      	cbnz	r3, 13616 <nrfx_clock_start+0x1e>
   13600:	4937      	ldr	r1, [pc, #220]	; (136e0 <nrfx_clock_start+0xe8>)
   13602:	f44f 72b4 	mov.w	r2, #360	; 0x168
   13606:	4837      	ldr	r0, [pc, #220]	; (136e4 <nrfx_clock_start+0xec>)
   13608:	f007 fe82 	bl	1b310 <assert_print>
   1360c:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   13610:	4833      	ldr	r0, [pc, #204]	; (136e0 <nrfx_clock_start+0xe8>)
   13612:	f007 fe76 	bl	1b302 <assert_post_action>
    switch (domain)
   13616:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1361a:	2803      	cmp	r0, #3
   1361c:	d854      	bhi.n	136c8 <nrfx_clock_start+0xd0>
   1361e:	e8df f000 	tbb	[pc, r0]
   13622:	3102      	.short	0x3102
   13624:	473b      	.short	0x473b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13626:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1362a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1362e:	03c9      	lsls	r1, r1, #15
   13630:	d512      	bpl.n	13658 <nrfx_clock_start+0x60>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13632:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13636:	2b02      	cmp	r3, #2
   13638:	d11d      	bne.n	13676 <nrfx_clock_start+0x7e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1363a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1363e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13642:	2300      	movs	r3, #0
   13644:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   13648:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1364c:	2302      	movs	r3, #2
   1364e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13652:	2301      	movs	r3, #1
   13654:	6093      	str	r3, [r2, #8]
}
   13656:	e00d      	b.n	13674 <nrfx_clock_start+0x7c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   13658:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1365c:	07d2      	lsls	r2, r2, #31
   1365e:	d50f      	bpl.n	13680 <nrfx_clock_start+0x88>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13660:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   13664:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13668:	3a01      	subs	r2, #1
   1366a:	2a01      	cmp	r2, #1
   1366c:	d805      	bhi.n	1367a <nrfx_clock_start+0x82>
    p_reg->INTENSET = mask;
   1366e:	2202      	movs	r2, #2
   13670:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   13674:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13676:	2b01      	cmp	r3, #1
   13678:	d002      	beq.n	13680 <nrfx_clock_start+0x88>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1367a:	2000      	movs	r0, #0
   1367c:	f7ff fea4 	bl	133c8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   13680:	2301      	movs	r3, #1
   13682:	e7da      	b.n	1363a <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13684:	2200      	movs	r2, #0
   13686:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1368a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1368e:	2201      	movs	r2, #1
   13690:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13694:	601a      	str	r2, [r3, #0]
}
   13696:	e7ed      	b.n	13674 <nrfx_clock_start+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13698:	2200      	movs	r2, #0
   1369a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1369e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   136a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   136a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   136aa:	2201      	movs	r2, #1
   136ac:	621a      	str	r2, [r3, #32]
}
   136ae:	e7e1      	b.n	13674 <nrfx_clock_start+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   136b0:	2200      	movs	r2, #0
   136b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   136b6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   136ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   136be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   136c2:	2201      	movs	r2, #1
   136c4:	619a      	str	r2, [r3, #24]
}
   136c6:	e7d5      	b.n	13674 <nrfx_clock_start+0x7c>
            NRFX_ASSERT(0);
   136c8:	4905      	ldr	r1, [pc, #20]	; (136e0 <nrfx_clock_start+0xe8>)
   136ca:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   136ce:	4805      	ldr	r0, [pc, #20]	; (136e4 <nrfx_clock_start+0xec>)
   136d0:	f007 fe1e 	bl	1b310 <assert_print>
   136d4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   136d8:	e79a      	b.n	13610 <nrfx_clock_start+0x18>
   136da:	bf00      	nop
   136dc:	20006dbc 	.word	0x20006dbc
   136e0:	00024b3e 	.word	0x00024b3e
   136e4:	000221f8 	.word	0x000221f8

000136e8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   136e8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   136ea:	4b09      	ldr	r3, [pc, #36]	; (13710 <nrfx_clock_stop+0x28>)
   136ec:	791b      	ldrb	r3, [r3, #4]
   136ee:	b953      	cbnz	r3, 13706 <nrfx_clock_stop+0x1e>
   136f0:	4908      	ldr	r1, [pc, #32]	; (13714 <nrfx_clock_stop+0x2c>)
   136f2:	4809      	ldr	r0, [pc, #36]	; (13718 <nrfx_clock_stop+0x30>)
   136f4:	f240 12ad 	movw	r2, #429	; 0x1ad
   136f8:	f007 fe0a 	bl	1b310 <assert_print>
   136fc:	f240 11ad 	movw	r1, #429	; 0x1ad
   13700:	4804      	ldr	r0, [pc, #16]	; (13714 <nrfx_clock_stop+0x2c>)
   13702:	f007 fdfe 	bl	1b302 <assert_post_action>
    clock_stop(domain);
}
   13706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1370a:	f7ff be5d 	b.w	133c8 <clock_stop>
   1370e:	bf00      	nop
   13710:	20006dbc 	.word	0x20006dbc
   13714:	00024b3e 	.word	0x00024b3e
   13718:	000221f8 	.word	0x000221f8

0001371c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1371c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13720:	b510      	push	{r4, lr}
   13722:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   13726:	b152      	cbz	r2, 1373e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13728:	2000      	movs	r0, #0
   1372a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1372e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13732:	2201      	movs	r2, #1
   13734:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13738:	4b23      	ldr	r3, [pc, #140]	; (137c8 <nrfx_power_clock_irq_handler+0xac>)
   1373a:	681b      	ldr	r3, [r3, #0]
   1373c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1373e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13742:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   13746:	b18a      	cbz	r2, 1376c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13748:	2200      	movs	r2, #0
   1374a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1374e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13752:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13756:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1375a:	f002 0203 	and.w	r2, r2, #3
   1375e:	2a01      	cmp	r2, #1
   13760:	f04f 0102 	mov.w	r1, #2
   13764:	d128      	bne.n	137b8 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13766:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1376a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1376c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13770:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   13774:	b162      	cbz	r2, 13790 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13776:	2200      	movs	r2, #0
   13778:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1377c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   13780:	f44f 7280 	mov.w	r2, #256	; 0x100
   13784:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   13788:	4b0f      	ldr	r3, [pc, #60]	; (137c8 <nrfx_power_clock_irq_handler+0xac>)
   1378a:	2004      	movs	r0, #4
   1378c:	681b      	ldr	r3, [r3, #0]
   1378e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13790:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13794:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   13798:	b1aa      	cbz	r2, 137c6 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1379a:	2200      	movs	r2, #0
   1379c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   137a0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   137a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   137a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   137ac:	4b06      	ldr	r3, [pc, #24]	; (137c8 <nrfx_power_clock_irq_handler+0xac>)
   137ae:	2005      	movs	r0, #5
    }
#endif
}
   137b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   137b4:	681b      	ldr	r3, [r3, #0]
   137b6:	4718      	bx	r3
   137b8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   137bc:	4b02      	ldr	r3, [pc, #8]	; (137c8 <nrfx_power_clock_irq_handler+0xac>)
   137be:	2001      	movs	r0, #1
   137c0:	681b      	ldr	r3, [r3, #0]
   137c2:	4798      	blx	r3
   137c4:	e7d2      	b.n	1376c <nrfx_power_clock_irq_handler+0x50>
}
   137c6:	bd10      	pop	{r4, pc}
   137c8:	20006dbc 	.word	0x20006dbc

000137cc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   137cc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   137ce:	4801      	ldr	r0, [pc, #4]	; (137d4 <nrfx_dppi_channel_alloc+0x8>)
   137d0:	f7ff bdc2 	b.w	13358 <nrfx_flag32_alloc>
   137d4:	20000438 	.word	0x20000438

000137d8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   137d8:	4b03      	ldr	r3, [pc, #12]	; (137e8 <pin_in_use_by_te+0x10>)
   137da:	3008      	adds	r0, #8
   137dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   137e0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   137e4:	4770      	bx	lr
   137e6:	bf00      	nop
   137e8:	2000043c 	.word	0x2000043c

000137ec <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   137ec:	4b04      	ldr	r3, [pc, #16]	; (13800 <pin_has_trigger+0x14>)
   137ee:	3008      	adds	r0, #8
   137f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   137f4:	f010 001c 	ands.w	r0, r0, #28
   137f8:	bf18      	it	ne
   137fa:	2001      	movne	r0, #1
   137fc:	4770      	bx	lr
   137fe:	bf00      	nop
   13800:	2000043c 	.word	0x2000043c

00013804 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13804:	4b03      	ldr	r3, [pc, #12]	; (13814 <pin_is_output+0x10>)
   13806:	3008      	adds	r0, #8
   13808:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1380c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13810:	4770      	bx	lr
   13812:	bf00      	nop
   13814:	2000043c 	.word	0x2000043c

00013818 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   13818:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1381a:	4c0d      	ldr	r4, [pc, #52]	; (13850 <call_handler+0x38>)
   1381c:	f100 0308 	add.w	r3, r0, #8
   13820:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   13824:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13826:	05da      	lsls	r2, r3, #23
{
   13828:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1382a:	d507      	bpl.n	1383c <call_handler+0x24>
   1382c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   13830:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   13834:	6852      	ldr	r2, [r2, #4]
   13836:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1383a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1383c:	68a3      	ldr	r3, [r4, #8]
   1383e:	b12b      	cbz	r3, 1384c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13840:	4631      	mov	r1, r6
   13842:	4628      	mov	r0, r5
   13844:	68e2      	ldr	r2, [r4, #12]
    }
}
   13846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1384a:	4718      	bx	r3
}
   1384c:	bd70      	pop	{r4, r5, r6, pc}
   1384e:	bf00      	nop
   13850:	2000043c 	.word	0x2000043c

00013854 <release_handler>:
{
   13854:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13856:	4a18      	ldr	r2, [pc, #96]	; (138b8 <release_handler+0x64>)
   13858:	3008      	adds	r0, #8
   1385a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1385e:	05d9      	lsls	r1, r3, #23
   13860:	d51d      	bpl.n	1389e <release_handler+0x4a>
   13862:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   13866:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1386a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1386e:	2000      	movs	r0, #0
   13870:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   13874:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   13878:	f413 7f80 	tst.w	r3, #256	; 0x100
   1387c:	d003      	beq.n	13886 <release_handler+0x32>
   1387e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   13882:	4299      	cmp	r1, r3
   13884:	d00b      	beq.n	1389e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   13886:	3001      	adds	r0, #1
   13888:	2830      	cmp	r0, #48	; 0x30
   1388a:	d1f3      	bne.n	13874 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1388c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1388e:	480b      	ldr	r0, [pc, #44]	; (138bc <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   13890:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   13894:	f7ff fd7c 	bl	13390 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   13898:	4b09      	ldr	r3, [pc, #36]	; (138c0 <release_handler+0x6c>)
   1389a:	4298      	cmp	r0, r3
   1389c:	d100      	bne.n	138a0 <release_handler+0x4c>
}
   1389e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   138a0:	4908      	ldr	r1, [pc, #32]	; (138c4 <release_handler+0x70>)
   138a2:	4809      	ldr	r0, [pc, #36]	; (138c8 <release_handler+0x74>)
   138a4:	f44f 7299 	mov.w	r2, #306	; 0x132
   138a8:	f007 fd32 	bl	1b310 <assert_print>
   138ac:	f44f 7199 	mov.w	r1, #306	; 0x132
   138b0:	4804      	ldr	r0, [pc, #16]	; (138c4 <release_handler+0x70>)
   138b2:	f007 fd26 	bl	1b302 <assert_post_action>
   138b6:	bf00      	nop
   138b8:	2000043c 	.word	0x2000043c
   138bc:	200004b0 	.word	0x200004b0
   138c0:	0bad0000 	.word	0x0bad0000
   138c4:	00024bc4 	.word	0x00024bc4
   138c8:	000221f8 	.word	0x000221f8

000138cc <pin_handler_trigger_uninit>:
{
   138cc:	b538      	push	{r3, r4, r5, lr}
   138ce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   138d0:	f7ff ff82 	bl	137d8 <pin_in_use_by_te>
   138d4:	4c0b      	ldr	r4, [pc, #44]	; (13904 <pin_handler_trigger_uninit+0x38>)
   138d6:	f102 0508 	add.w	r5, r2, #8
   138da:	b160      	cbz	r0, 138f6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   138dc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   138de:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   138e2:	0b5b      	lsrs	r3, r3, #13
   138e4:	009b      	lsls	r3, r3, #2
   138e6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   138ea:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   138ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   138f2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   138f6:	4610      	mov	r0, r2
   138f8:	f7ff ffac 	bl	13854 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   138fc:	2300      	movs	r3, #0
   138fe:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   13902:	bd38      	pop	{r3, r4, r5, pc}
   13904:	2000043c 	.word	0x2000043c

00013908 <nrf_gpio_pin_port_decode>:
{
   13908:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1390a:	6802      	ldr	r2, [r0, #0]
{
   1390c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1390e:	4610      	mov	r0, r2
   13910:	f00a fbf4 	bl	1e0fc <nrf_gpio_pin_present_check>
   13914:	b950      	cbnz	r0, 1392c <nrf_gpio_pin_port_decode+0x24>
   13916:	490f      	ldr	r1, [pc, #60]	; (13954 <nrf_gpio_pin_port_decode+0x4c>)
   13918:	f240 2247 	movw	r2, #583	; 0x247
   1391c:	480e      	ldr	r0, [pc, #56]	; (13958 <nrf_gpio_pin_port_decode+0x50>)
   1391e:	f007 fcf7 	bl	1b310 <assert_print>
   13922:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   13926:	480b      	ldr	r0, [pc, #44]	; (13954 <nrf_gpio_pin_port_decode+0x4c>)
   13928:	f007 fceb 	bl	1b302 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1392c:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13930:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   13932:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13934:	d00a      	beq.n	1394c <nrf_gpio_pin_port_decode+0x44>
   13936:	2a01      	cmp	r2, #1
   13938:	d00a      	beq.n	13950 <nrf_gpio_pin_port_decode+0x48>
            NRFX_ASSERT(0);
   1393a:	4906      	ldr	r1, [pc, #24]	; (13954 <nrf_gpio_pin_port_decode+0x4c>)
   1393c:	f44f 7213 	mov.w	r2, #588	; 0x24c
   13940:	4805      	ldr	r0, [pc, #20]	; (13958 <nrf_gpio_pin_port_decode+0x50>)
   13942:	f007 fce5 	bl	1b310 <assert_print>
   13946:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1394a:	e7ec      	b.n	13926 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   1394c:	4803      	ldr	r0, [pc, #12]	; (1395c <nrf_gpio_pin_port_decode+0x54>)
}
   1394e:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13950:	4803      	ldr	r0, [pc, #12]	; (13960 <nrf_gpio_pin_port_decode+0x58>)
   13952:	e7fc      	b.n	1394e <nrf_gpio_pin_port_decode+0x46>
   13954:	000222b1 	.word	0x000222b1
   13958:	000221f8 	.word	0x000221f8
   1395c:	50842500 	.word	0x50842500
   13960:	50842800 	.word	0x50842800

00013964 <nrfx_gpiote_input_configure>:
{
   13964:	b5f0      	push	{r4, r5, r6, r7, lr}
   13966:	4604      	mov	r4, r0
   13968:	4617      	mov	r7, r2
   1396a:	461d      	mov	r5, r3
   1396c:	b085      	sub	sp, #20
    if (p_input_config)
   1396e:	b1d9      	cbz	r1, 139a8 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   13970:	f00a fbd5 	bl	1e11e <pin_is_task_output>
   13974:	bb00      	cbnz	r0, 139b8 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13976:	460b      	mov	r3, r1
   13978:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1397c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   13980:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13984:	f10d 020f 	add.w	r2, sp, #15
   13988:	f10d 010e 	add.w	r1, sp, #14
   1398c:	4620      	mov	r0, r4
   1398e:	f00a fbd1 	bl	1e134 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   13992:	4a44      	ldr	r2, [pc, #272]	; (13aa4 <nrfx_gpiote_input_configure+0x140>)
   13994:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   13998:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1399c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   139a0:	f043 0301 	orr.w	r3, r3, #1
   139a4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   139a8:	b36f      	cbz	r7, 13a06 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   139aa:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   139ac:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   139ae:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   139b0:	f7ff ff28 	bl	13804 <pin_is_output>
   139b4:	b110      	cbz	r0, 139bc <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   139b6:	b1da      	cbz	r2, 139f0 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   139b8:	483b      	ldr	r0, [pc, #236]	; (13aa8 <nrfx_gpiote_input_configure+0x144>)
   139ba:	e026      	b.n	13a0a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   139bc:	4839      	ldr	r0, [pc, #228]	; (13aa4 <nrfx_gpiote_input_configure+0x140>)
   139be:	f104 0c08 	add.w	ip, r4, #8
   139c2:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   139c6:	f021 0120 	bic.w	r1, r1, #32
   139ca:	04c9      	lsls	r1, r1, #19
   139cc:	0cc9      	lsrs	r1, r1, #19
   139ce:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   139d2:	b16a      	cbz	r2, 139f0 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   139d4:	2e03      	cmp	r6, #3
   139d6:	d8ef      	bhi.n	139b8 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   139d8:	687b      	ldr	r3, [r7, #4]
   139da:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   139dc:	00ba      	lsls	r2, r7, #2
   139de:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   139e2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
   139e6:	b996      	cbnz	r6, 13a0e <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   139e8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   139ec:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   139f0:	4a2c      	ldr	r2, [pc, #176]	; (13aa4 <nrfx_gpiote_input_configure+0x140>)
   139f2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   139f6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   139fa:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   139fe:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   13a02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   13a06:	bb15      	cbnz	r5, 13a4e <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   13a08:	4828      	ldr	r0, [pc, #160]	; (13aac <nrfx_gpiote_input_configure+0x148>)
}
   13a0a:	b005      	add	sp, #20
   13a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13a0e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13a12:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   13a16:	f023 0303 	bic.w	r3, r3, #3
   13a1a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13a1e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   13a22:	f041 0120 	orr.w	r1, r1, #32
   13a26:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   13a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   13a2e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13a32:	0223      	lsls	r3, r4, #8
   13a34:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   13a38:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   13a3c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13a40:	ea43 030e 	orr.w	r3, r3, lr
   13a44:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   13a48:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   13a4c:	e7d0      	b.n	139f0 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   13a4e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   13a50:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   13a54:	f7ff fefe 	bl	13854 <release_handler>
    if (!handler)
   13a58:	2e00      	cmp	r6, #0
   13a5a:	d0d5      	beq.n	13a08 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13a5c:	4d11      	ldr	r5, [pc, #68]	; (13aa4 <nrfx_gpiote_input_configure+0x140>)
   13a5e:	e9d5 2300 	ldrd	r2, r3, [r5]
   13a62:	4296      	cmp	r6, r2
   13a64:	d101      	bne.n	13a6a <nrfx_gpiote_input_configure+0x106>
   13a66:	429f      	cmp	r7, r3
   13a68:	d019      	beq.n	13a9e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   13a6a:	4811      	ldr	r0, [pc, #68]	; (13ab0 <nrfx_gpiote_input_configure+0x14c>)
   13a6c:	f10d 010f 	add.w	r1, sp, #15
   13a70:	f7ff fc72 	bl	13358 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   13a74:	4b0d      	ldr	r3, [pc, #52]	; (13aac <nrfx_gpiote_input_configure+0x148>)
   13a76:	4298      	cmp	r0, r3
   13a78:	d1c7      	bne.n	13a0a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   13a7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   13a7e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13a82:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   13a86:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13a88:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   13a8c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13a90:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   13a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13a98:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   13a9c:	e7b4      	b.n	13a08 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13a9e:	2200      	movs	r2, #0
   13aa0:	e7ed      	b.n	13a7e <nrfx_gpiote_input_configure+0x11a>
   13aa2:	bf00      	nop
   13aa4:	2000043c 	.word	0x2000043c
   13aa8:	0bad0004 	.word	0x0bad0004
   13aac:	0bad0000 	.word	0x0bad0000
   13ab0:	200004b0 	.word	0x200004b0

00013ab4 <nrfx_gpiote_output_configure>:
{
   13ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ab6:	4604      	mov	r4, r0
   13ab8:	4615      	mov	r5, r2
   13aba:	b085      	sub	sp, #20
    if (p_config)
   13abc:	b321      	cbz	r1, 13b08 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   13abe:	f7ff fea1 	bl	13804 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13ac2:	b920      	cbnz	r0, 13ace <nrfx_gpiote_output_configure+0x1a>
   13ac4:	4620      	mov	r0, r4
   13ac6:	f7ff fe87 	bl	137d8 <pin_in_use_by_te>
   13aca:	2800      	cmp	r0, #0
   13acc:	d161      	bne.n	13b92 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   13ace:	4620      	mov	r0, r4
   13ad0:	f7ff fe8c 	bl	137ec <pin_has_trigger>
   13ad4:	b110      	cbz	r0, 13adc <nrfx_gpiote_output_configure+0x28>
   13ad6:	784b      	ldrb	r3, [r1, #1]
   13ad8:	2b01      	cmp	r3, #1
   13ada:	d05a      	beq.n	13b92 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   13adc:	2301      	movs	r3, #1
   13ade:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   13ae2:	2300      	movs	r3, #0
   13ae4:	1c4a      	adds	r2, r1, #1
   13ae6:	e9cd 1300 	strd	r1, r3, [sp]
   13aea:	4620      	mov	r0, r4
   13aec:	1c8b      	adds	r3, r1, #2
   13aee:	f10d 010f 	add.w	r1, sp, #15
   13af2:	f00a fb1f 	bl	1e134 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   13af6:	4a28      	ldr	r2, [pc, #160]	; (13b98 <nrfx_gpiote_output_configure+0xe4>)
   13af8:	f104 0108 	add.w	r1, r4, #8
   13afc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13b00:	f043 0303 	orr.w	r3, r3, #3
   13b04:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   13b08:	b915      	cbnz	r5, 13b10 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   13b0a:	4824      	ldr	r0, [pc, #144]	; (13b9c <nrfx_gpiote_output_configure+0xe8>)
}
   13b0c:	b005      	add	sp, #20
   13b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   13b10:	4620      	mov	r0, r4
   13b12:	f7ff fe77 	bl	13804 <pin_is_output>
        if (pin_is_input(pin))
   13b16:	2800      	cmp	r0, #0
   13b18:	d03b      	beq.n	13b92 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   13b1a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   13b1e:	2300      	movs	r3, #0
   13b20:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   13b22:	4e1d      	ldr	r6, [pc, #116]	; (13b98 <nrfx_gpiote_output_configure+0xe4>)
   13b24:	f104 0708 	add.w	r7, r4, #8
   13b28:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   13b2c:	0089      	lsls	r1, r1, #2
   13b2e:	f020 0020 	bic.w	r0, r0, #32
   13b32:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
   13b36:	04c0      	lsls	r0, r0, #19
   13b38:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
   13b3c:	0cc0      	lsrs	r0, r0, #19
   13b3e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   13b42:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   13b46:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   13b4a:	786a      	ldrb	r2, [r5, #1]
   13b4c:	2a00      	cmp	r2, #0
   13b4e:	d0dc      	beq.n	13b0a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   13b50:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   13b54:	78ad      	ldrb	r5, [r5, #2]
   13b56:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   13b5a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   13b5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13b62:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   13b66:	0223      	lsls	r3, r4, #8
   13b68:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   13b6c:	0412      	lsls	r2, r2, #16
   13b6e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13b72:	ea43 030e 	orr.w	r3, r3, lr
   13b76:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   13b78:	052a      	lsls	r2, r5, #20
   13b7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13b7e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13b82:	4313      	orrs	r3, r2
   13b84:	f040 0020 	orr.w	r0, r0, #32
   13b88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   13b8c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   13b90:	e7bb      	b.n	13b0a <nrfx_gpiote_output_configure+0x56>
{
   13b92:	4803      	ldr	r0, [pc, #12]	; (13ba0 <nrfx_gpiote_output_configure+0xec>)
   13b94:	e7ba      	b.n	13b0c <nrfx_gpiote_output_configure+0x58>
   13b96:	bf00      	nop
   13b98:	2000043c 	.word	0x2000043c
   13b9c:	0bad0000 	.word	0x0bad0000
   13ba0:	0bad0004 	.word	0x0bad0004

00013ba4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   13ba4:	4b01      	ldr	r3, [pc, #4]	; (13bac <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   13ba6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   13baa:	4770      	bx	lr
   13bac:	2000043c 	.word	0x2000043c

00013bb0 <nrfx_gpiote_channel_get>:
{
   13bb0:	4602      	mov	r2, r0
   13bb2:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   13bb4:	b951      	cbnz	r1, 13bcc <nrfx_gpiote_channel_get+0x1c>
   13bb6:	490c      	ldr	r1, [pc, #48]	; (13be8 <nrfx_gpiote_channel_get+0x38>)
   13bb8:	480c      	ldr	r0, [pc, #48]	; (13bec <nrfx_gpiote_channel_get+0x3c>)
   13bba:	f240 2235 	movw	r2, #565	; 0x235
   13bbe:	f007 fba7 	bl	1b310 <assert_print>
   13bc2:	f240 2135 	movw	r1, #565	; 0x235
   13bc6:	4808      	ldr	r0, [pc, #32]	; (13be8 <nrfx_gpiote_channel_get+0x38>)
   13bc8:	f007 fb9b 	bl	1b302 <assert_post_action>
    if (pin_in_use_by_te(pin))
   13bcc:	f7ff fe04 	bl	137d8 <pin_in_use_by_te>
   13bd0:	b138      	cbz	r0, 13be2 <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13bd2:	4b07      	ldr	r3, [pc, #28]	; (13bf0 <nrfx_gpiote_channel_get+0x40>)
   13bd4:	3208      	adds	r2, #8
   13bd6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   13bda:	4806      	ldr	r0, [pc, #24]	; (13bf4 <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13bdc:	0b5b      	lsrs	r3, r3, #13
   13bde:	700b      	strb	r3, [r1, #0]
}
   13be0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13be2:	4805      	ldr	r0, [pc, #20]	; (13bf8 <nrfx_gpiote_channel_get+0x48>)
   13be4:	e7fc      	b.n	13be0 <nrfx_gpiote_channel_get+0x30>
   13be6:	bf00      	nop
   13be8:	00024bc4 	.word	0x00024bc4
   13bec:	000221f8 	.word	0x000221f8
   13bf0:	2000043c 	.word	0x2000043c
   13bf4:	0bad0000 	.word	0x0bad0000
   13bf8:	0bad0004 	.word	0x0bad0004

00013bfc <nrfx_gpiote_init>:
{
   13bfc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13bfe:	4c0f      	ldr	r4, [pc, #60]	; (13c3c <nrfx_gpiote_init+0x40>)
   13c00:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   13c04:	b9bd      	cbnz	r5, 13c36 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   13c06:	2260      	movs	r2, #96	; 0x60
   13c08:	4629      	mov	r1, r5
   13c0a:	f104 0010 	add.w	r0, r4, #16
   13c0e:	f00b fc00 	bl	1f412 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   13c12:	200d      	movs	r0, #13
   13c14:	f7f5 feb6 	bl	9984 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13c18:	4b09      	ldr	r3, [pc, #36]	; (13c40 <nrfx_gpiote_init+0x44>)
    return err_code;
   13c1a:	480a      	ldr	r0, [pc, #40]	; (13c44 <nrfx_gpiote_init+0x48>)
   13c1c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   13c20:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   13c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13c28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   13c2c:	2301      	movs	r3, #1
   13c2e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   13c32:	6763      	str	r3, [r4, #116]	; 0x74
}
   13c34:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   13c36:	4804      	ldr	r0, [pc, #16]	; (13c48 <nrfx_gpiote_init+0x4c>)
   13c38:	e7fc      	b.n	13c34 <nrfx_gpiote_init+0x38>
   13c3a:	bf00      	nop
   13c3c:	2000043c 	.word	0x2000043c
   13c40:	5000d000 	.word	0x5000d000
   13c44:	0bad0000 	.word	0x0bad0000
   13c48:	0bad0005 	.word	0x0bad0005

00013c4c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   13c4c:	4b03      	ldr	r3, [pc, #12]	; (13c5c <nrfx_gpiote_is_init+0x10>)
   13c4e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   13c52:	3800      	subs	r0, #0
   13c54:	bf18      	it	ne
   13c56:	2001      	movne	r0, #1
   13c58:	4770      	bx	lr
   13c5a:	bf00      	nop
   13c5c:	2000043c 	.word	0x2000043c

00013c60 <nrfx_gpiote_channel_free>:
{
   13c60:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   13c62:	4801      	ldr	r0, [pc, #4]	; (13c68 <nrfx_gpiote_channel_free+0x8>)
   13c64:	f7ff bb94 	b.w	13390 <nrfx_flag32_free>
   13c68:	200004ac 	.word	0x200004ac

00013c6c <nrfx_gpiote_channel_alloc>:
{
   13c6c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   13c6e:	4801      	ldr	r0, [pc, #4]	; (13c74 <nrfx_gpiote_channel_alloc+0x8>)
   13c70:	f7ff bb72 	b.w	13358 <nrfx_flag32_alloc>
   13c74:	200004ac 	.word	0x200004ac

00013c78 <nrfx_gpiote_trigger_enable>:
{
   13c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13c7a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   13c7c:	f7ff fdb6 	bl	137ec <pin_has_trigger>
   13c80:	b950      	cbnz	r0, 13c98 <nrfx_gpiote_trigger_enable+0x20>
   13c82:	492c      	ldr	r1, [pc, #176]	; (13d34 <nrfx_gpiote_trigger_enable+0xbc>)
   13c84:	f240 32df 	movw	r2, #991	; 0x3df
   13c88:	482b      	ldr	r0, [pc, #172]	; (13d38 <nrfx_gpiote_trigger_enable+0xc0>)
   13c8a:	f007 fb41 	bl	1b310 <assert_print>
   13c8e:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   13c92:	4828      	ldr	r0, [pc, #160]	; (13d34 <nrfx_gpiote_trigger_enable+0xbc>)
   13c94:	f007 fb35 	bl	1b302 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13c98:	4620      	mov	r0, r4
   13c9a:	f7ff fd9d 	bl	137d8 <pin_in_use_by_te>
   13c9e:	4a27      	ldr	r2, [pc, #156]	; (13d3c <nrfx_gpiote_trigger_enable+0xc4>)
   13ca0:	f104 0508 	add.w	r5, r4, #8
   13ca4:	b1f8      	cbz	r0, 13ce6 <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   13ca6:	4620      	mov	r0, r4
   13ca8:	f7ff fdac 	bl	13804 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13cac:	b9d8      	cbnz	r0, 13ce6 <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13cae:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   13cb2:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   13cb4:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   13cb6:	f103 44a0 	add.w	r4, r3, #1342177280	; 0x50000000
   13cba:	f504 4451 	add.w	r4, r4, #53504	; 0xd100
   13cbe:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13cc2:	6020      	str	r0, [r4, #0]
   13cc4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   13cc8:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13cca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   13cce:	f040 0001 	orr.w	r0, r0, #1
   13cd2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   13cd6:	b121      	cbz	r1, 13ce2 <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13cd8:	2301      	movs	r3, #1
   13cda:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   13cdc:	4a18      	ldr	r2, [pc, #96]	; (13d40 <nrfx_gpiote_trigger_enable+0xc8>)
   13cde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13ce2:	b003      	add	sp, #12
   13ce4:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   13ce6:	b941      	cbnz	r1, 13cfa <nrfx_gpiote_trigger_enable+0x82>
   13ce8:	4912      	ldr	r1, [pc, #72]	; (13d34 <nrfx_gpiote_trigger_enable+0xbc>)
   13cea:	f240 32ee 	movw	r2, #1006	; 0x3ee
   13cee:	4812      	ldr	r0, [pc, #72]	; (13d38 <nrfx_gpiote_trigger_enable+0xc0>)
   13cf0:	f007 fb0e 	bl	1b310 <assert_print>
   13cf4:	f240 31ee 	movw	r1, #1006	; 0x3ee
   13cf8:	e7cb      	b.n	13c92 <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13cfa:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   13cfe:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   13d02:	2b04      	cmp	r3, #4
   13d04:	d011      	beq.n	13d2a <nrfx_gpiote_trigger_enable+0xb2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   13d06:	2b05      	cmp	r3, #5
   13d08:	d011      	beq.n	13d2e <nrfx_gpiote_trigger_enable+0xb6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13d0a:	a801      	add	r0, sp, #4
   13d0c:	9401      	str	r4, [sp, #4]
   13d0e:	f7ff fdfb 	bl	13908 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13d12:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   13d14:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13d16:	40d9      	lsrs	r1, r3
   13d18:	f001 0101 	and.w	r1, r1, #1
   13d1c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13d1e:	4620      	mov	r0, r4
}
   13d20:	b003      	add	sp, #12
   13d22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13d26:	f00a ba52 	b.w	1e1ce <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   13d2a:	2103      	movs	r1, #3
   13d2c:	e7f7      	b.n	13d1e <nrfx_gpiote_trigger_enable+0xa6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   13d2e:	2102      	movs	r1, #2
   13d30:	e7f5      	b.n	13d1e <nrfx_gpiote_trigger_enable+0xa6>
   13d32:	bf00      	nop
   13d34:	00024bc4 	.word	0x00024bc4
   13d38:	000221f8 	.word	0x000221f8
   13d3c:	2000043c 	.word	0x2000043c
   13d40:	5000d000 	.word	0x5000d000

00013d44 <nrfx_gpiote_trigger_disable>:
{
   13d44:	b508      	push	{r3, lr}
   13d46:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13d48:	f7ff fd46 	bl	137d8 <pin_in_use_by_te>
   13d4c:	b1c8      	cbz	r0, 13d82 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   13d4e:	4610      	mov	r0, r2
   13d50:	f7ff fd58 	bl	13804 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13d54:	b9a8      	cbnz	r0, 13d82 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13d56:	4b0e      	ldr	r3, [pc, #56]	; (13d90 <nrfx_gpiote_trigger_disable+0x4c>)
   13d58:	3208      	adds	r2, #8
   13d5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13d5e:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13d60:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13d62:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   13d64:	490b      	ldr	r1, [pc, #44]	; (13d94 <nrfx_gpiote_trigger_disable+0x50>)
   13d66:	009b      	lsls	r3, r3, #2
   13d68:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   13d6c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13d70:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
   13d74:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   13d78:	f022 0203 	bic.w	r2, r2, #3
   13d7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   13d80:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13d82:	2100      	movs	r1, #0
}
   13d84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13d88:	4610      	mov	r0, r2
   13d8a:	f00a ba20 	b.w	1e1ce <nrf_gpio_cfg_sense_set>
   13d8e:	bf00      	nop
   13d90:	2000043c 	.word	0x2000043c
   13d94:	5000d000 	.word	0x5000d000

00013d98 <nrfx_gpiote_pin_uninit>:
{
   13d98:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13d9a:	4b10      	ldr	r3, [pc, #64]	; (13ddc <nrfx_gpiote_pin_uninit+0x44>)
   13d9c:	f100 0208 	add.w	r2, r0, #8
   13da0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   13da4:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   13da6:	07db      	lsls	r3, r3, #31
   13da8:	d516      	bpl.n	13dd8 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   13daa:	f7ff ffcb 	bl	13d44 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   13dae:	4620      	mov	r0, r4
   13db0:	f7ff fd8c 	bl	138cc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13db4:	a801      	add	r0, sp, #4
   13db6:	9401      	str	r4, [sp, #4]
   13db8:	f7ff fda6 	bl	13908 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   13dbc:	9b01      	ldr	r3, [sp, #4]
   13dbe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13dc2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   13dc6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13dca:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   13dce:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   13dd2:	4803      	ldr	r0, [pc, #12]	; (13de0 <nrfx_gpiote_pin_uninit+0x48>)
}
   13dd4:	b002      	add	sp, #8
   13dd6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13dd8:	4802      	ldr	r0, [pc, #8]	; (13de4 <nrfx_gpiote_pin_uninit+0x4c>)
   13dda:	e7fb      	b.n	13dd4 <nrfx_gpiote_pin_uninit+0x3c>
   13ddc:	2000043c 	.word	0x2000043c
   13de0:	0bad0000 	.word	0x0bad0000
   13de4:	0bad0004 	.word	0x0bad0004

00013de8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   13de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   13dec:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   13dee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13df0:	4634      	mov	r4, r6
{
   13df2:	4b64      	ldr	r3, [pc, #400]	; (13f84 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   13df4:	4864      	ldr	r0, [pc, #400]	; (13f88 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13df6:	4965      	ldr	r1, [pc, #404]	; (13f8c <nrfx_gpiote_irq_handler+0x1a4>)
{
   13df8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13dfa:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13dfc:	b135      	cbz	r5, 13e0c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   13dfe:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   13e02:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e04:	bf1e      	ittt	ne
   13e06:	601c      	strne	r4, [r3, #0]
   13e08:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   13e0a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13e0c:	3304      	adds	r3, #4
   13e0e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   13e10:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13e14:	d1f1      	bne.n	13dfa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13e16:	f8df a170 	ldr.w	sl, [pc, #368]	; 13f88 <nrfx_gpiote_irq_handler+0x1a0>
   13e1a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   13e1e:	2b00      	cmp	r3, #0
   13e20:	f000 8093 	beq.w	13f4a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   13e24:	f8df 8170 	ldr.w	r8, [pc, #368]	; 13f98 <nrfx_gpiote_irq_handler+0x1b0>
   13e28:	f8d8 3020 	ldr.w	r3, [r8, #32]
   13e2c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   13e2e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   13e32:	4b57      	ldr	r3, [pc, #348]	; (13f90 <nrfx_gpiote_irq_handler+0x1a8>)
   13e34:	6a1a      	ldr	r2, [r3, #32]
   13e36:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   13e38:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13e3a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   13e3e:	f10d 0b10 	add.w	fp, sp, #16
   13e42:	ea4f 1349 	mov.w	r3, r9, lsl #5
   13e46:	9300      	str	r3, [sp, #0]
   13e48:	e04a      	b.n	13ee0 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   13e4a:	fa94 f4a4 	rbit	r4, r4
   13e4e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   13e52:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13e54:	4a4f      	ldr	r2, [pc, #316]	; (13f94 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   13e56:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13e58:	f104 0308 	add.w	r3, r4, #8
   13e5c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   13e60:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   13e62:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   13e64:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   13e68:	fa03 f101 	lsl.w	r1, r3, r1
   13e6c:	f81b 3000 	ldrb.w	r3, [fp, r0]
   13e70:	08ba      	lsrs	r2, r7, #2
   13e72:	ea23 0301 	bic.w	r3, r3, r1
   13e76:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13e7a:	a803      	add	r0, sp, #12
   13e7c:	9201      	str	r2, [sp, #4]
   13e7e:	9403      	str	r4, [sp, #12]
   13e80:	f7ff fd42 	bl	13908 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13e84:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   13e86:	9a01      	ldr	r2, [sp, #4]
   13e88:	3380      	adds	r3, #128	; 0x80
   13e8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13e8e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   13e92:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13e94:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   13e96:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   13e9a:	d52b      	bpl.n	13ef4 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   13e9c:	4639      	mov	r1, r7
   13e9e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13ea0:	b2dd      	uxtb	r5, r3
   13ea2:	f7ff fcb9 	bl	13818 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13ea6:	a803      	add	r0, sp, #12
   13ea8:	9403      	str	r4, [sp, #12]
   13eaa:	f7ff fd2d 	bl	13908 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13eae:	9b03      	ldr	r3, [sp, #12]
   13eb0:	3380      	adds	r3, #128	; 0x80
   13eb2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   13eb6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   13eba:	429d      	cmp	r5, r3
   13ebc:	d107      	bne.n	13ece <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13ebe:	2100      	movs	r1, #0
   13ec0:	4620      	mov	r0, r4
   13ec2:	f00a f984 	bl	1e1ce <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   13ec6:	4629      	mov	r1, r5
   13ec8:	4620      	mov	r0, r4
   13eca:	f00a f980 	bl	1e1ce <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13ece:	a803      	add	r0, sp, #12
   13ed0:	9403      	str	r4, [sp, #12]
   13ed2:	f7ff fd19 	bl	13908 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   13ed6:	2201      	movs	r2, #1
   13ed8:	9b03      	ldr	r3, [sp, #12]
   13eda:	fa02 f303 	lsl.w	r3, r2, r3
   13ede:	6203      	str	r3, [r0, #32]
            while (latch[i])
   13ee0:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   13ee4:	2c00      	cmp	r4, #0
   13ee6:	d1b0      	bne.n	13e4a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13ee8:	f1b9 0f00 	cmp.w	r9, #0
   13eec:	d11d      	bne.n	13f2a <nrfx_gpiote_irq_handler+0x142>
   13eee:	f04f 0901 	mov.w	r9, #1
   13ef2:	e7a6      	b.n	13e42 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13ef4:	2b02      	cmp	r3, #2
   13ef6:	d10c      	bne.n	13f12 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   13ef8:	2103      	movs	r1, #3
   13efa:	4620      	mov	r0, r4
   13efc:	f00a f967 	bl	1e1ce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13f00:	f005 0305 	and.w	r3, r5, #5
   13f04:	2b01      	cmp	r3, #1
   13f06:	d1e2      	bne.n	13ece <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   13f08:	4639      	mov	r1, r7
   13f0a:	4620      	mov	r0, r4
   13f0c:	f7ff fc84 	bl	13818 <call_handler>
   13f10:	e7dd      	b.n	13ece <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   13f12:	2102      	movs	r1, #2
   13f14:	4620      	mov	r0, r4
   13f16:	9301      	str	r3, [sp, #4]
   13f18:	f00a f959 	bl	1e1ce <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13f1c:	2d03      	cmp	r5, #3
   13f1e:	d0f3      	beq.n	13f08 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   13f20:	9b01      	ldr	r3, [sp, #4]
   13f22:	2b03      	cmp	r3, #3
   13f24:	d1d3      	bne.n	13ece <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   13f26:	2d02      	cmp	r5, #2
   13f28:	e7ed      	b.n	13f06 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f2a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   13f2e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   13f32:	f8d8 3020 	ldr.w	r3, [r8, #32]
   13f36:	4916      	ldr	r1, [pc, #88]	; (13f90 <nrfx_gpiote_irq_handler+0x1a8>)
   13f38:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   13f3a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   13f3e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   13f40:	4313      	orrs	r3, r2
   13f42:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   13f44:	620a      	str	r2, [r1, #32]
   13f46:	f47f af78 	bne.w	13e3a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   13f4a:	2401      	movs	r4, #1
    while (mask)
   13f4c:	b916      	cbnz	r6, 13f54 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   13f4e:	b007      	add	sp, #28
   13f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   13f54:	fa96 f3a6 	rbit	r3, r6
   13f58:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   13f5c:	fa04 f203 	lsl.w	r2, r4, r3
   13f60:	009b      	lsls	r3, r3, #2
   13f62:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   13f66:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13f6a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   13f6e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13f72:	f3c0 2005 	ubfx	r0, r0, #8, #6
   13f76:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   13f7a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13f7e:	f7ff fc4b 	bl	13818 <call_handler>
   13f82:	e7e3      	b.n	13f4c <nrfx_gpiote_irq_handler+0x164>
   13f84:	5000d100 	.word	0x5000d100
   13f88:	5000d000 	.word	0x5000d000
   13f8c:	5000d120 	.word	0x5000d120
   13f90:	50842800 	.word	0x50842800
   13f94:	2000043c 	.word	0x2000043c
   13f98:	50842500 	.word	0x50842500

00013f9c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   13f9c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13f9e:	4c08      	ldr	r4, [pc, #32]	; (13fc0 <nrfx_ipc_init+0x24>)
{
   13fa0:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13fa2:	7923      	ldrb	r3, [r4, #4]
{
   13fa4:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13fa6:	b943      	cbnz	r3, 13fba <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   13fa8:	202a      	movs	r0, #42	; 0x2a
   13faa:	f7f5 fceb 	bl	9984 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   13fae:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   13fb0:	4804      	ldr	r0, [pc, #16]	; (13fc4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   13fb2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   13fb4:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   13fb6:	60a5      	str	r5, [r4, #8]
}
   13fb8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   13fba:	4803      	ldr	r0, [pc, #12]	; (13fc8 <nrfx_ipc_init+0x2c>)
   13fbc:	e7fc      	b.n	13fb8 <nrfx_ipc_init+0x1c>
   13fbe:	bf00      	nop
   13fc0:	20006dc4 	.word	0x20006dc4
   13fc4:	0bad0000 	.word	0x0bad0000
   13fc8:	0bad000c 	.word	0x0bad000c

00013fcc <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   13fcc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   13fce:	b940      	cbnz	r0, 13fe2 <nrfx_ipc_config_load+0x16>
   13fd0:	4918      	ldr	r1, [pc, #96]	; (14034 <nrfx_ipc_config_load+0x68>)
   13fd2:	2245      	movs	r2, #69	; 0x45
   13fd4:	4818      	ldr	r0, [pc, #96]	; (14038 <nrfx_ipc_config_load+0x6c>)
   13fd6:	f007 f99b 	bl	1b310 <assert_print>
   13fda:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   13fdc:	4815      	ldr	r0, [pc, #84]	; (14034 <nrfx_ipc_config_load+0x68>)
   13fde:	f007 f990 	bl	1b302 <assert_post_action>
   13fe2:	4b16      	ldr	r3, [pc, #88]	; (1403c <nrfx_ipc_config_load+0x70>)
   13fe4:	791b      	ldrb	r3, [r3, #4]
   13fe6:	2b01      	cmp	r3, #1
   13fe8:	d006      	beq.n	13ff8 <nrfx_ipc_config_load+0x2c>
   13fea:	4912      	ldr	r1, [pc, #72]	; (14034 <nrfx_ipc_config_load+0x68>)
   13fec:	2246      	movs	r2, #70	; 0x46
   13fee:	4812      	ldr	r0, [pc, #72]	; (14038 <nrfx_ipc_config_load+0x6c>)
   13ff0:	f007 f98e 	bl	1b310 <assert_print>
   13ff4:	2146      	movs	r1, #70	; 0x46
   13ff6:	e7f1      	b.n	13fdc <nrfx_ipc_config_load+0x10>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   13ff8:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   13ffa:	4a11      	ldr	r2, [pc, #68]	; (14040 <nrfx_ipc_config_load+0x74>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   13ffc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   14000:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14004:	3301      	adds	r3, #1
   14006:	2b10      	cmp	r3, #16
   14008:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1400c:	d1f6      	bne.n	13ffc <nrfx_ipc_config_load+0x30>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1400e:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   14010:	4a0b      	ldr	r2, [pc, #44]	; (14040 <nrfx_ipc_config_load+0x74>)
   14012:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   14016:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1401a:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1401e:	3301      	adds	r3, #1
   14020:	2b10      	cmp	r3, #16
   14022:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   14026:	d1f6      	bne.n	14016 <nrfx_ipc_config_load+0x4a>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   14028:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1402c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14030:	bd38      	pop	{r3, r4, r5, pc}
   14032:	bf00      	nop
   14034:	00024c0e 	.word	0x00024c0e
   14038:	000221f8 	.word	0x000221f8
   1403c:	20006dc4 	.word	0x20006dc4
   14040:	5002a000 	.word	0x5002a000

00014044 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   14044:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   14046:	4b09      	ldr	r3, [pc, #36]	; (1406c <nrfx_ipc_receive_event_enable+0x28>)
   14048:	791b      	ldrb	r3, [r3, #4]
   1404a:	2b01      	cmp	r3, #1
   1404c:	d008      	beq.n	14060 <nrfx_ipc_receive_event_enable+0x1c>
   1404e:	4908      	ldr	r1, [pc, #32]	; (14070 <nrfx_ipc_receive_event_enable+0x2c>)
   14050:	4808      	ldr	r0, [pc, #32]	; (14074 <nrfx_ipc_receive_event_enable+0x30>)
   14052:	226b      	movs	r2, #107	; 0x6b
   14054:	f007 f95c 	bl	1b310 <assert_print>
   14058:	216b      	movs	r1, #107	; 0x6b
   1405a:	4805      	ldr	r0, [pc, #20]	; (14070 <nrfx_ipc_receive_event_enable+0x2c>)
   1405c:	f007 f951 	bl	1b302 <assert_post_action>
   14060:	4a05      	ldr	r2, [pc, #20]	; (14078 <nrfx_ipc_receive_event_enable+0x34>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   14062:	4083      	lsls	r3, r0
   14064:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14068:	bd08      	pop	{r3, pc}
   1406a:	bf00      	nop
   1406c:	20006dc4 	.word	0x20006dc4
   14070:	00024c0e 	.word	0x00024c0e
   14074:	000221f8 	.word	0x000221f8
   14078:	5002a000 	.word	0x5002a000

0001407c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1407c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1407e:	4b09      	ldr	r3, [pc, #36]	; (140a4 <nrfx_ipc_receive_event_disable+0x28>)
   14080:	791b      	ldrb	r3, [r3, #4]
   14082:	2b01      	cmp	r3, #1
   14084:	d008      	beq.n	14098 <nrfx_ipc_receive_event_disable+0x1c>
   14086:	4908      	ldr	r1, [pc, #32]	; (140a8 <nrfx_ipc_receive_event_disable+0x2c>)
   14088:	4808      	ldr	r0, [pc, #32]	; (140ac <nrfx_ipc_receive_event_disable+0x30>)
   1408a:	2271      	movs	r2, #113	; 0x71
   1408c:	f007 f940 	bl	1b310 <assert_print>
   14090:	2171      	movs	r1, #113	; 0x71
   14092:	4805      	ldr	r0, [pc, #20]	; (140a8 <nrfx_ipc_receive_event_disable+0x2c>)
   14094:	f007 f935 	bl	1b302 <assert_post_action>
    p_reg->INTENCLR = mask;
   14098:	4a05      	ldr	r2, [pc, #20]	; (140b0 <nrfx_ipc_receive_event_disable+0x34>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1409a:	4083      	lsls	r3, r0
   1409c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   140a0:	bd08      	pop	{r3, pc}
   140a2:	bf00      	nop
   140a4:	20006dc4 	.word	0x20006dc4
   140a8:	00024c0e 	.word	0x00024c0e
   140ac:	000221f8 	.word	0x000221f8
   140b0:	5002a000 	.word	0x5002a000

000140b4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   140b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   140b6:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140b8:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   140ba:	4b12      	ldr	r3, [pc, #72]	; (14104 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   140bc:	4d12      	ldr	r5, [pc, #72]	; (14108 <nrfx_ipc_irq_handler+0x54>)
   140be:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   140c2:	b904      	cbnz	r4, 140c6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   140c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   140c6:	fa94 f0a4 	rbit	r0, r4
   140ca:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   140ce:	fa06 f300 	lsl.w	r3, r6, r0
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   140d2:	280f      	cmp	r0, #15
   140d4:	ea24 0403 	bic.w	r4, r4, r3
   140d8:	dd0a      	ble.n	140f0 <nrfx_ipc_irq_handler+0x3c>
   140da:	490c      	ldr	r1, [pc, #48]	; (1410c <nrfx_ipc_irq_handler+0x58>)
   140dc:	480c      	ldr	r0, [pc, #48]	; (14110 <nrfx_ipc_irq_handler+0x5c>)
   140de:	f240 12e7 	movw	r2, #487	; 0x1e7
   140e2:	f007 f915 	bl	1b310 <assert_print>
   140e6:	f240 11e7 	movw	r1, #487	; 0x1e7
   140ea:	4808      	ldr	r0, [pc, #32]	; (1410c <nrfx_ipc_irq_handler+0x58>)
   140ec:	f007 f909 	bl	1b302 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140f0:	4b08      	ldr	r3, [pc, #32]	; (14114 <nrfx_ipc_irq_handler+0x60>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   140f2:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140f4:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   140f6:	682b      	ldr	r3, [r5, #0]
   140f8:	2b00      	cmp	r3, #0
   140fa:	d0e2      	beq.n	140c2 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   140fc:	68a9      	ldr	r1, [r5, #8]
   140fe:	4798      	blx	r3
   14100:	e7df      	b.n	140c2 <nrfx_ipc_irq_handler+0xe>
   14102:	bf00      	nop
   14104:	5002a000 	.word	0x5002a000
   14108:	20006dc4 	.word	0x20006dc4
   1410c:	00024c49 	.word	0x00024c49
   14110:	000221f8 	.word	0x000221f8
   14114:	5002a100 	.word	0x5002a100

00014118 <nrf_gpio_pin_port_decode>:
{
   14118:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1411a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1411c:	095a      	lsrs	r2, r3, #5
   1411e:	d00c      	beq.n	1413a <nrf_gpio_pin_port_decode+0x22>
   14120:	2a01      	cmp	r2, #1
   14122:	d012      	beq.n	1414a <nrf_gpio_pin_port_decode+0x32>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14124:	490e      	ldr	r1, [pc, #56]	; (14160 <nrf_gpio_pin_port_decode+0x48>)
   14126:	480f      	ldr	r0, [pc, #60]	; (14164 <nrf_gpio_pin_port_decode+0x4c>)
   14128:	f240 2247 	movw	r2, #583	; 0x247
   1412c:	f007 f8f0 	bl	1b310 <assert_print>
   14130:	f240 2147 	movw	r1, #583	; 0x247
   14134:	480a      	ldr	r0, [pc, #40]	; (14160 <nrf_gpio_pin_port_decode+0x48>)
   14136:	f007 f8e4 	bl	1b302 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1413a:	f04f 32ff 	mov.w	r2, #4294967295
   1413e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14142:	07d9      	lsls	r1, r3, #31
   14144:	d5ee      	bpl.n	14124 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   14146:	4808      	ldr	r0, [pc, #32]	; (14168 <nrf_gpio_pin_port_decode+0x50>)
   14148:	e008      	b.n	1415c <nrf_gpio_pin_port_decode+0x44>
    return (mask & (1UL << pin_number)) ? true : false;
   1414a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1414e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   14152:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14154:	07d2      	lsls	r2, r2, #31
   14156:	d5e5      	bpl.n	14124 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   14158:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1415a:	4804      	ldr	r0, [pc, #16]	; (1416c <nrf_gpio_pin_port_decode+0x54>)
}
   1415c:	bd08      	pop	{r3, pc}
   1415e:	bf00      	nop
   14160:	000222b1 	.word	0x000222b1
   14164:	000221f8 	.word	0x000221f8
   14168:	50842500 	.word	0x50842500
   1416c:	50842800 	.word	0x50842800

00014170 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   14170:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   14172:	b952      	cbnz	r2, 1418a <nrf_pwm_sequence_set+0x1a>
   14174:	4929      	ldr	r1, [pc, #164]	; (1421c <nrf_pwm_sequence_set+0xac>)
   14176:	f44f 722c 	mov.w	r2, #688	; 0x2b0
   1417a:	4829      	ldr	r0, [pc, #164]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   1417c:	f007 f8c8 	bl	1b310 <assert_print>
   14180:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   14184:	4825      	ldr	r0, [pc, #148]	; (1421c <nrf_pwm_sequence_set+0xac>)
   14186:	f007 f8bc 	bl	1b302 <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   1418a:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   1418c:	b943      	cbnz	r3, 141a0 <nrf_pwm_sequence_set+0x30>
   1418e:	4923      	ldr	r1, [pc, #140]	; (1421c <nrf_pwm_sequence_set+0xac>)
   14190:	f240 22bd 	movw	r2, #701	; 0x2bd
   14194:	4822      	ldr	r0, [pc, #136]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   14196:	f007 f8bb 	bl	1b310 <assert_print>
   1419a:	f240 21bd 	movw	r1, #701	; 0x2bd
   1419e:	e7f1      	b.n	14184 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   141a0:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   141a4:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   141a8:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   141aa:	b943      	cbnz	r3, 141be <nrf_pwm_sequence_set+0x4e>
   141ac:	491b      	ldr	r1, [pc, #108]	; (1421c <nrf_pwm_sequence_set+0xac>)
   141ae:	f240 22c6 	movw	r2, #710	; 0x2c6
   141b2:	481b      	ldr	r0, [pc, #108]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   141b4:	f007 f8ac 	bl	1b310 <assert_print>
   141b8:	f240 21c6 	movw	r1, #710	; 0x2c6
   141bc:	e7e2      	b.n	14184 <nrf_pwm_sequence_set+0x14>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   141be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   141c2:	d008      	beq.n	141d6 <nrf_pwm_sequence_set+0x66>
   141c4:	4915      	ldr	r1, [pc, #84]	; (1421c <nrf_pwm_sequence_set+0xac>)
   141c6:	f240 22c7 	movw	r2, #711	; 0x2c7
   141ca:	4815      	ldr	r0, [pc, #84]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   141cc:	f007 f8a0 	bl	1b310 <assert_print>
   141d0:	f240 21c7 	movw	r1, #711	; 0x2c7
   141d4:	e7d6      	b.n	14184 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].CNT = length;
   141d6:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   141da:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   141dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   141e0:	d308      	bcc.n	141f4 <nrf_pwm_sequence_set+0x84>
   141e2:	490e      	ldr	r1, [pc, #56]	; (1421c <nrf_pwm_sequence_set+0xac>)
   141e4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   141e8:	480d      	ldr	r0, [pc, #52]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   141ea:	f007 f891 	bl	1b310 <assert_print>
   141ee:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   141f2:	e7c7      	b.n	14184 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   141f4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   141f8:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   141fc:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   141fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   14202:	d308      	bcc.n	14216 <nrf_pwm_sequence_set+0xa6>
   14204:	4905      	ldr	r1, [pc, #20]	; (1421c <nrf_pwm_sequence_set+0xac>)
   14206:	f240 22d9 	movw	r2, #729	; 0x2d9
   1420a:	4805      	ldr	r0, [pc, #20]	; (14220 <nrf_pwm_sequence_set+0xb0>)
   1420c:	f007 f880 	bl	1b310 <assert_print>
   14210:	f240 21d9 	movw	r1, #729	; 0x2d9
   14214:	e7b6      	b.n	14184 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   14216:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   1421a:	bd10      	pop	{r4, pc}
   1421c:	00024c7b 	.word	0x00024c7b
   14220:	000221f8 	.word	0x000221f8

00014224 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   14224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14228:	4604      	mov	r4, r0
    NRFX_ASSERT(p_config);
   1422a:	460d      	mov	r5, r1
{
   1422c:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   1422e:	b941      	cbnz	r1, 14242 <nrfx_pwm_init+0x1e>
   14230:	495a      	ldr	r1, [pc, #360]	; (1439c <nrfx_pwm_init+0x178>)
   14232:	485b      	ldr	r0, [pc, #364]	; (143a0 <nrfx_pwm_init+0x17c>)
   14234:	228c      	movs	r2, #140	; 0x8c
   14236:	f007 f86b 	bl	1b310 <assert_print>
   1423a:	218c      	movs	r1, #140	; 0x8c
   1423c:	4857      	ldr	r0, [pc, #348]	; (1439c <nrfx_pwm_init+0x178>)
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   1423e:	f007 f860 	bl	1b302 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14242:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14244:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14248:	4e56      	ldr	r6, [pc, #344]	; (143a4 <nrfx_pwm_init+0x180>)
   1424a:	fb01 f108 	mul.w	r1, r1, r8
   1424e:	1870      	adds	r0, r6, r1
   14250:	7a07      	ldrb	r7, [r0, #8]
   14252:	2f00      	cmp	r7, #0
   14254:	f040 809f 	bne.w	14396 <nrfx_pwm_init+0x172>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   14258:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1425a:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
   1425c:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1425e:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   14260:	b1bb      	cbz	r3, 14292 <nrfx_pwm_init+0x6e>
   14262:	7b6b      	ldrb	r3, [r5, #13]
   14264:	b1ab      	cbz	r3, 14292 <nrfx_pwm_init+0x6e>
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   14266:	2201      	movs	r2, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   14268:	6823      	ldr	r3, [r4, #0]
   1426a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   1426e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
   14272:	6823      	ldr	r3, [r4, #0]
   14274:	2f00      	cmp	r7, #0
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   14276:	7968      	ldrb	r0, [r5, #5]
   14278:	79a9      	ldrb	r1, [r5, #6]
   1427a:	892a      	ldrh	r2, [r5, #8]
   1427c:	da53      	bge.n	14326 <nrfx_pwm_init+0x102>
   1427e:	494a      	ldr	r1, [pc, #296]	; (143a8 <nrfx_pwm_init+0x184>)
   14280:	4847      	ldr	r0, [pc, #284]	; (143a0 <nrfx_pwm_init+0x17c>)
   14282:	f240 22a5 	movw	r2, #677	; 0x2a5
   14286:	f007 f843 	bl	1b310 <assert_print>
   1428a:	f240 21a5 	movw	r1, #677	; 0x2a5
   1428e:	4846      	ldr	r0, [pc, #280]	; (143a8 <nrfx_pwm_init+0x184>)
   14290:	e7d5      	b.n	1423e <nrfx_pwm_init+0x1a>
   14292:	f105 39ff 	add.w	r9, r5, #4294967295
   14296:	af02      	add	r7, sp, #8
   14298:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
   1429c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   142a0:	2aff      	cmp	r2, #255	; 0xff
   142a2:	d03c      	beq.n	1431e <nrfx_pwm_init+0xfa>
            if (!p_config->skip_gpio_cfg)
   142a4:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   142a6:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   142aa:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
   142ae:	b9d1      	cbnz	r1, 142e6 <nrfx_pwm_init+0xc2>
    if (value == 0)
   142b0:	0613      	lsls	r3, r2, #24
   142b2:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   142b6:	a801      	add	r0, sp, #4
    if (value == 0)
   142b8:	d42a      	bmi.n	14310 <nrfx_pwm_init+0xec>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   142ba:	f7ff ff2d 	bl	14118 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   142be:	2201      	movs	r2, #1
   142c0:	9901      	ldr	r1, [sp, #4]
   142c2:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   142c4:	60c2      	str	r2, [r0, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   142c6:	a801      	add	r0, sp, #4
   142c8:	f8cd b004 	str.w	fp, [sp, #4]
   142cc:	f7ff ff24 	bl	14118 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   142d0:	9b01      	ldr	r3, [sp, #4]
   142d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   142d6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   142da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   142de:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   142e2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   142e6:	45ca      	cmp	sl, r9
   142e8:	f107 0704 	add.w	r7, r7, #4
   142ec:	d1d6      	bne.n	1429c <nrfx_pwm_init+0x78>
    if (!p_config->skip_psel_cfg)
   142ee:	7b6b      	ldrb	r3, [r5, #13]
   142f0:	2b00      	cmp	r3, #0
   142f2:	d1b8      	bne.n	14266 <nrfx_pwm_init+0x42>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   142f4:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   142f6:	9a02      	ldr	r2, [sp, #8]
   142f8:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
   142fc:	9a03      	ldr	r2, [sp, #12]
   142fe:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   14302:	9a04      	ldr	r2, [sp, #16]
   14304:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
   14308:	9a05      	ldr	r2, [sp, #20]
   1430a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1430e:	e7aa      	b.n	14266 <nrfx_pwm_init+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14310:	f7ff ff02 	bl	14118 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14314:	2201      	movs	r2, #1
   14316:	9901      	ldr	r1, [sp, #4]
   14318:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1431a:	6082      	str	r2, [r0, #8]
   1431c:	e7d3      	b.n	142c6 <nrfx_pwm_init+0xa2>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   1431e:	f04f 33ff 	mov.w	r3, #4294967295
   14322:	603b      	str	r3, [r7, #0]
   14324:	e7df      	b.n	142e6 <nrfx_pwm_init+0xc2>
    p_reg->PRESCALER  = base_clock;
   14326:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1432a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1432e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   14332:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   14334:	896a      	ldrh	r2, [r5, #10]
   14336:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SHORTS = mask;
   1433a:	2300      	movs	r3, #0
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1433c:	6822      	ldr	r2, [r4, #0]
   1433e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   14342:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   14344:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   14348:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1434a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   1434e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   14352:	6822      	ldr	r2, [r4, #0]
   14354:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   14358:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   1435c:	6822      	ldr	r2, [r4, #0]
   1435e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   14362:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   14366:	6822      	ldr	r2, [r4, #0]
   14368:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1436c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   14370:	230c      	movs	r3, #12
   14372:	fb03 f308 	mul.w	r3, r3, r8
   14376:	58f3      	ldr	r3, [r6, r3]
   14378:	b123      	cbz	r3, 14384 <nrfx_pwm_init+0x160>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1437a:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   1437c:	f340 3007 	sbfx	r0, r0, #12, #8
   14380:	f7f5 fb00 	bl	9984 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14384:	230c      	movs	r3, #12
   14386:	fb03 6608 	mla	r6, r3, r8, r6
   1438a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1438c:	4807      	ldr	r0, [pc, #28]	; (143ac <nrfx_pwm_init+0x188>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1438e:	7233      	strb	r3, [r6, #8]
}
   14390:	b007      	add	sp, #28
   14392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   14396:	4806      	ldr	r0, [pc, #24]	; (143b0 <nrfx_pwm_init+0x18c>)
   14398:	e7fa      	b.n	14390 <nrfx_pwm_init+0x16c>
   1439a:	bf00      	nop
   1439c:	00024cad 	.word	0x00024cad
   143a0:	000221f8 	.word	0x000221f8
   143a4:	20006dd0 	.word	0x20006dd0
   143a8:	00024c7b 	.word	0x00024c7b
   143ac:	0bad0000 	.word	0x0bad0000
   143b0:	0bad0005 	.word	0x0bad0005

000143b4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   143b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143b8:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   143ba:	210c      	movs	r1, #12
{
   143bc:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   143be:	7902      	ldrb	r2, [r0, #4]
{
   143c0:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   143c2:	4b2f      	ldr	r3, [pc, #188]	; (14480 <nrfx_pwm_simple_playback+0xcc>)
   143c4:	eb02 0742 	add.w	r7, r2, r2, lsl #1
   143c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   143cc:	fb01 3302 	mla	r3, r1, r2, r3
   143d0:	7a1b      	ldrb	r3, [r3, #8]
{
   143d2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   143d4:	b953      	cbnz	r3, 143ec <nrfx_pwm_simple_playback+0x38>
   143d6:	492b      	ldr	r1, [pc, #172]	; (14484 <nrfx_pwm_simple_playback+0xd0>)
   143d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
   143dc:	482a      	ldr	r0, [pc, #168]	; (14488 <nrfx_pwm_simple_playback+0xd4>)
   143de:	f006 ff97 	bl	1b310 <assert_print>
   143e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
   143e6:	4827      	ldr	r0, [pc, #156]	; (14484 <nrfx_pwm_simple_playback+0xd0>)
   143e8:	f006 ff8b 	bl	1b302 <assert_post_action>
   143ec:	b946      	cbnz	r6, 14400 <nrfx_pwm_simple_playback+0x4c>
   143ee:	4925      	ldr	r1, [pc, #148]	; (14484 <nrfx_pwm_simple_playback+0xd0>)
   143f0:	f240 122d 	movw	r2, #301	; 0x12d
   143f4:	4824      	ldr	r0, [pc, #144]	; (14488 <nrfx_pwm_simple_playback+0xd4>)
   143f6:	f006 ff8b 	bl	1b310 <assert_print>
   143fa:	f240 112d 	movw	r1, #301	; 0x12d
   143fe:	e7f2      	b.n	143e6 <nrfx_pwm_simple_playback+0x32>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14400:	f8d8 3000 	ldr.w	r3, [r8]
   14404:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   14408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1440c:	d008      	beq.n	14420 <nrfx_pwm_simple_playback+0x6c>
   1440e:	491d      	ldr	r1, [pc, #116]	; (14484 <nrfx_pwm_simple_playback+0xd0>)
   14410:	f44f 7297 	mov.w	r2, #302	; 0x12e
   14414:	481c      	ldr	r0, [pc, #112]	; (14488 <nrfx_pwm_simple_playback+0xd4>)
   14416:	f006 ff7b 	bl	1b310 <assert_print>
   1441a:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1441e:	e7e2      	b.n	143e6 <nrfx_pwm_simple_playback+0x32>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   14420:	4642      	mov	r2, r8
   14422:	2100      	movs	r1, #0
   14424:	6800      	ldr	r0, [r0, #0]
   14426:	f7ff fea3 	bl	14170 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   1442a:	4642      	mov	r2, r8
   1442c:	2101      	movs	r1, #1
   1442e:	6820      	ldr	r0, [r4, #0]
   14430:	f7ff fe9e 	bl	14170 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   14434:	6822      	ldr	r2, [r4, #0]
   14436:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   1443a:	eb03 0656 	add.w	r6, r3, r6, lsr #1
   1443e:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   14442:	f015 0f01 	tst.w	r5, #1
   14446:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   14448:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
   1444a:	d112      	bne.n	14472 <nrfx_pwm_simple_playback+0xbe>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   1444c:	f015 0502 	ands.w	r5, r5, #2
   14450:	d010      	beq.n	14474 <nrfx_pwm_simple_playback+0xc0>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   14452:	b94b      	cbnz	r3, 14468 <nrfx_pwm_simple_playback+0xb4>
    p_reg->SHORTS = mask;
   14454:	2304      	movs	r3, #4
   14456:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   1445a:	2308      	movs	r3, #8
   1445c:	4639      	mov	r1, r7
   1445e:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   14460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   14464:	f009 bec2 	b.w	1e1ec <start_playback>
   14468:	2308      	movs	r3, #8
   1446a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   1446e:	230c      	movs	r3, #12
   14470:	e7f4      	b.n	1445c <nrfx_pwm_simple_playback+0xa8>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   14472:	2510      	movs	r5, #16
   14474:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   14478:	2b00      	cmp	r3, #0
   1447a:	d1f8      	bne.n	1446e <nrfx_pwm_simple_playback+0xba>
   1447c:	e7ed      	b.n	1445a <nrfx_pwm_simple_playback+0xa6>
   1447e:	bf00      	nop
   14480:	20006dd0 	.word	0x20006dd0
   14484:	00024cad 	.word	0x00024cad
   14488:	000221f8 	.word	0x000221f8

0001448c <nrfx_pwm_is_stopped>:


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1448c:	210c      	movs	r1, #12
{
   1448e:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   14490:	4a0e      	ldr	r2, [pc, #56]	; (144cc <nrfx_pwm_is_stopped+0x40>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14492:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   14494:	fb01 2203 	mla	r2, r1, r3, r2
   14498:	7a13      	ldrb	r3, [r2, #8]
   1449a:	b953      	cbnz	r3, 144b2 <nrfx_pwm_is_stopped+0x26>
   1449c:	490c      	ldr	r1, [pc, #48]	; (144d0 <nrfx_pwm_is_stopped+0x44>)
   1449e:	480d      	ldr	r0, [pc, #52]	; (144d4 <nrfx_pwm_is_stopped+0x48>)
   144a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   144a4:	f006 ff34 	bl	1b310 <assert_print>
   144a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   144ac:	4808      	ldr	r0, [pc, #32]	; (144d0 <nrfx_pwm_is_stopped+0x44>)
   144ae:	f006 ff28 	bl	1b302 <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   144b2:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   144b4:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144b6:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   144ba:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   144bc:	b919      	cbnz	r1, 144c6 <nrfx_pwm_is_stopped+0x3a>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   144be:	1e98      	subs	r0, r3, #2
   144c0:	bf18      	it	ne
   144c2:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   144c4:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   144c6:	2001      	movs	r0, #1
   144c8:	7210      	strb	r0, [r2, #8]
        ret_val = true;
   144ca:	e7fb      	b.n	144c4 <nrfx_pwm_is_stopped+0x38>
   144cc:	20006dd0 	.word	0x20006dd0
   144d0:	00024cad 	.word	0x00024cad
   144d4:	000221f8 	.word	0x000221f8

000144d8 <nrfx_pwm_stop>:
{
   144d8:	b538      	push	{r3, r4, r5, lr}
   144da:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   144dc:	210c      	movs	r1, #12
   144de:	7902      	ldrb	r2, [r0, #4]
   144e0:	4b12      	ldr	r3, [pc, #72]	; (1452c <nrfx_pwm_stop+0x54>)
{
   144e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   144e4:	fb01 3302 	mla	r3, r1, r2, r3
   144e8:	7a1b      	ldrb	r3, [r3, #8]
   144ea:	b953      	cbnz	r3, 14502 <nrfx_pwm_stop+0x2a>
   144ec:	4910      	ldr	r1, [pc, #64]	; (14530 <nrfx_pwm_stop+0x58>)
   144ee:	4811      	ldr	r0, [pc, #68]	; (14534 <nrfx_pwm_stop+0x5c>)
   144f0:	f240 1285 	movw	r2, #389	; 0x185
   144f4:	f006 ff0c 	bl	1b310 <assert_print>
   144f8:	f240 1185 	movw	r1, #389	; 0x185
   144fc:	480c      	ldr	r0, [pc, #48]	; (14530 <nrfx_pwm_stop+0x58>)
   144fe:	f006 ff00 	bl	1b302 <assert_post_action>
    p_reg->SHORTS = mask;
   14502:	2200      	movs	r2, #0
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   14504:	6803      	ldr	r3, [r0, #0]
   14506:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1450a:	2201      	movs	r2, #1
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   1450c:	6803      	ldr	r3, [r0, #0]
   1450e:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   14510:	f7ff ffbc 	bl	1448c <nrfx_pwm_is_stopped>
   14514:	b938      	cbnz	r0, 14526 <nrfx_pwm_stop+0x4e>
            if (nrfx_pwm_is_stopped(p_instance))
   14516:	4620      	mov	r0, r4
   14518:	f7ff ffb8 	bl	1448c <nrfx_pwm_is_stopped>
   1451c:	b918      	cbnz	r0, 14526 <nrfx_pwm_stop+0x4e>
        } while (wait_until_stopped);
   1451e:	2d00      	cmp	r5, #0
   14520:	d1f9      	bne.n	14516 <nrfx_pwm_stop+0x3e>
}
   14522:	4628      	mov	r0, r5
   14524:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   14526:	2501      	movs	r5, #1
   14528:	e7fb      	b.n	14522 <nrfx_pwm_stop+0x4a>
   1452a:	bf00      	nop
   1452c:	20006dd0 	.word	0x20006dd0
   14530:	00024cad 	.word	0x00024cad
   14534:	000221f8 	.word	0x000221f8

00014538 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   14538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1453c:	460e      	mov	r6, r1
   1453e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   14540:	4d0c      	ldr	r5, [pc, #48]	; (14574 <metal_generic_dev_open+0x3c>)
   14542:	f855 4f18 	ldr.w	r4, [r5, #24]!
   14546:	42ac      	cmp	r4, r5
   14548:	d103      	bne.n	14552 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1454a:	f06f 0012 	mvn.w	r0, #18
   1454e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   14552:	4631      	mov	r1, r6
   14554:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   14558:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1455c:	f7f1 f956 	bl	580c <strcmp>
   14560:	b930      	cbnz	r0, 14570 <metal_generic_dev_open+0x38>
			*device = dev;
   14562:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   14566:	4640      	mov	r0, r8
}
   14568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1456c:	f009 bf5d 	b.w	1e42a <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   14570:	6824      	ldr	r4, [r4, #0]
   14572:	e7e8      	b.n	14546 <metal_generic_dev_open+0xe>
   14574:	20006ddc 	.word	0x20006ddc

00014578 <metal_bus_unregister>:
{
   14578:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1457a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1457e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   14580:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   14582:	f100 0324 	add.w	r3, r0, #36	; 0x24
   14586:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   14588:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1458c:	6843      	ldr	r3, [r0, #4]
{
   1458e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   14590:	b103      	cbz	r3, 14594 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   14592:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   14594:	4b05      	ldr	r3, [pc, #20]	; (145ac <metal_bus_unregister+0x34>)
   14596:	781a      	ldrb	r2, [r3, #0]
   14598:	2a06      	cmp	r2, #6
   1459a:	d905      	bls.n	145a8 <metal_bus_unregister+0x30>
   1459c:	685b      	ldr	r3, [r3, #4]
   1459e:	b11b      	cbz	r3, 145a8 <metal_bus_unregister+0x30>
   145a0:	2007      	movs	r0, #7
   145a2:	6822      	ldr	r2, [r4, #0]
   145a4:	4902      	ldr	r1, [pc, #8]	; (145b0 <metal_bus_unregister+0x38>)
   145a6:	4798      	blx	r3
}
   145a8:	2000      	movs	r0, #0
   145aa:	bd10      	pop	{r4, pc}
   145ac:	20006ddc 	.word	0x20006ddc
   145b0:	00024cf1 	.word	0x00024cf1

000145b4 <metal_bus_find>:
{
   145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b8:	4607      	mov	r7, r0
   145ba:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   145bc:	4e0b      	ldr	r6, [pc, #44]	; (145ec <metal_bus_find+0x38>)
   145be:	f856 4f08 	ldr.w	r4, [r6, #8]!
   145c2:	42b4      	cmp	r4, r6
   145c4:	d102      	bne.n	145cc <metal_bus_find+0x18>
	return -ENOENT;
   145c6:	f06f 0001 	mvn.w	r0, #1
   145ca:	e00a      	b.n	145e2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   145cc:	4639      	mov	r1, r7
   145ce:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   145d2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   145d6:	f7f1 f919 	bl	580c <strcmp>
   145da:	b920      	cbnz	r0, 145e6 <metal_bus_find+0x32>
   145dc:	b11d      	cbz	r5, 145e6 <metal_bus_find+0x32>
			*result = bus;
   145de:	f8c5 8000 	str.w	r8, [r5]
}
   145e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   145e6:	6824      	ldr	r4, [r4, #0]
   145e8:	e7eb      	b.n	145c2 <metal_bus_find+0xe>
   145ea:	bf00      	nop
   145ec:	20006ddc 	.word	0x20006ddc

000145f0 <metal_bus_register>:
{
   145f0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   145f2:	4604      	mov	r4, r0
   145f4:	b910      	cbnz	r0, 145fc <metal_bus_register+0xc>
		return -EINVAL;
   145f6:	f06f 0015 	mvn.w	r0, #21
}
   145fa:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   145fc:	6800      	ldr	r0, [r0, #0]
   145fe:	2800      	cmp	r0, #0
   14600:	d0f9      	beq.n	145f6 <metal_bus_register+0x6>
   14602:	f7f1 f90d 	bl	5820 <strlen>
   14606:	2800      	cmp	r0, #0
   14608:	d0f5      	beq.n	145f6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1460a:	2100      	movs	r1, #0
   1460c:	6820      	ldr	r0, [r4, #0]
   1460e:	f7ff ffd1 	bl	145b4 <metal_bus_find>
   14612:	b1c8      	cbz	r0, 14648 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   14614:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   14618:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1461c:	4b0c      	ldr	r3, [pc, #48]	; (14650 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1461e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   14622:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   14624:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   14628:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1462a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1462c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1462e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   14630:	781a      	ldrb	r2, [r3, #0]
   14632:	2a06      	cmp	r2, #6
   14634:	d901      	bls.n	1463a <metal_bus_register+0x4a>
   14636:	685b      	ldr	r3, [r3, #4]
   14638:	b90b      	cbnz	r3, 1463e <metal_bus_register+0x4e>
	return 0;
   1463a:	2000      	movs	r0, #0
   1463c:	e7dd      	b.n	145fa <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1463e:	2007      	movs	r0, #7
   14640:	6822      	ldr	r2, [r4, #0]
   14642:	4904      	ldr	r1, [pc, #16]	; (14654 <metal_bus_register+0x64>)
   14644:	4798      	blx	r3
   14646:	e7f8      	b.n	1463a <metal_bus_register+0x4a>
		return -EEXIST;
   14648:	f06f 0010 	mvn.w	r0, #16
   1464c:	e7d5      	b.n	145fa <metal_bus_register+0xa>
   1464e:	bf00      	nop
   14650:	20006ddc 	.word	0x20006ddc
   14654:	00024cf3 	.word	0x00024cf3

00014658 <metal_device_close>:
	metal_assert(device && device->bus);
   14658:	4601      	mov	r1, r0
{
   1465a:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1465c:	b108      	cbz	r0, 14662 <metal_device_close+0xa>
   1465e:	6840      	ldr	r0, [r0, #4]
   14660:	b940      	cbnz	r0, 14674 <metal_device_close+0x1c>
   14662:	4907      	ldr	r1, [pc, #28]	; (14680 <metal_device_close+0x28>)
   14664:	4807      	ldr	r0, [pc, #28]	; (14684 <metal_device_close+0x2c>)
   14666:	2251      	movs	r2, #81	; 0x51
   14668:	f006 fe52 	bl	1b310 <assert_print>
   1466c:	2151      	movs	r1, #81	; 0x51
   1466e:	4804      	ldr	r0, [pc, #16]	; (14680 <metal_device_close+0x28>)
   14670:	f006 fe47 	bl	1b302 <assert_post_action>
	if (device->bus->ops.dev_close)
   14674:	68c3      	ldr	r3, [r0, #12]
   14676:	b113      	cbz	r3, 1467e <metal_device_close+0x26>
}
   14678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1467c:	4718      	bx	r3
}
   1467e:	bd10      	pop	{r4, pc}
   14680:	00024d06 	.word	0x00024d06
   14684:	000221f8 	.word	0x000221f8

00014688 <metal_register_generic_device>:
{
   14688:	b510      	push	{r4, lr}
   1468a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1468c:	6800      	ldr	r0, [r0, #0]
   1468e:	b910      	cbnz	r0, 14696 <metal_register_generic_device+0xe>
		return -EINVAL;
   14690:	f06f 0015 	mvn.w	r0, #21
}
   14694:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   14696:	f7f1 f8c3 	bl	5820 <strlen>
   1469a:	2800      	cmp	r0, #0
   1469c:	d0f8      	beq.n	14690 <metal_register_generic_device+0x8>
   1469e:	68a3      	ldr	r3, [r4, #8]
   146a0:	2b01      	cmp	r3, #1
   146a2:	d8f5      	bhi.n	14690 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   146a4:	4b06      	ldr	r3, [pc, #24]	; (146c0 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   146a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   146aa:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   146ac:	4b05      	ldr	r3, [pc, #20]	; (146c4 <metal_register_generic_device+0x3c>)
   146ae:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   146b0:	f103 0018 	add.w	r0, r3, #24
   146b4:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   146b6:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   146b8:	61d9      	str	r1, [r3, #28]
	return 0;
   146ba:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   146bc:	6011      	str	r1, [r2, #0]
}
   146be:	e7e9      	b.n	14694 <metal_register_generic_device+0xc>
   146c0:	200004b8 	.word	0x200004b8
   146c4:	20006ddc 	.word	0x20006ddc

000146c8 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   146c8:	4b0e      	ldr	r3, [pc, #56]	; (14704 <metal_init+0x3c>)
{
   146ca:	b510      	push	{r4, lr}
   146cc:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   146ce:	2220      	movs	r2, #32
   146d0:	2100      	movs	r1, #0
   146d2:	4618      	mov	r0, r3
   146d4:	f00a fe9d 	bl	1f412 <memset>

	_metal.common.log_handler   = params->log_handler;
   146d8:	6822      	ldr	r2, [r4, #0]
   146da:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   146dc:	4602      	mov	r2, r0
   146de:	7921      	ldrb	r1, [r4, #4]
   146e0:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   146e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   146e8:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   146ec:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   146f0:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   146f4:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   146f8:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   146fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   146fe:	f000 b80f 	b.w	14720 <metal_sys_init>
   14702:	bf00      	nop
   14704:	20006ddc 	.word	0x20006ddc

00014708 <metal_finish>:

void metal_finish(void)
{
   14708:	b508      	push	{r3, lr}
	metal_sys_finish();
   1470a:	f000 f811 	bl	14730 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1470e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   14712:	2220      	movs	r2, #32
   14714:	2100      	movs	r1, #0
   14716:	4801      	ldr	r0, [pc, #4]	; (1471c <metal_finish+0x14>)
   14718:	f00a be7b 	b.w	1f412 <memset>
   1471c:	20006ddc 	.word	0x20006ddc

00014720 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   14720:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   14722:	4802      	ldr	r0, [pc, #8]	; (1472c <metal_sys_init+0xc>)
   14724:	f7ff ff64 	bl	145f0 <metal_bus_register>
	return 0;
}
   14728:	2000      	movs	r0, #0
   1472a:	bd08      	pop	{r3, pc}
   1472c:	200004b8 	.word	0x200004b8

00014730 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   14730:	4801      	ldr	r0, [pc, #4]	; (14738 <metal_sys_finish+0x8>)
   14732:	f7ff bf21 	b.w	14578 <metal_bus_unregister>
   14736:	bf00      	nop
   14738:	200004b8 	.word	0x200004b8

0001473c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1473c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1473e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   14740:	2b06      	cmp	r3, #6
{
   14742:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   14744:	bf88      	it	hi
   14746:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   14748:	4b09      	ldr	r3, [pc, #36]	; (14770 <metal_zephyr_log_handler+0x34>)
{
   1474a:	ac05      	add	r4, sp, #20
   1474c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   14750:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   14754:	4807      	ldr	r0, [pc, #28]	; (14774 <metal_zephyr_log_handler+0x38>)
   14756:	f006 fb30 	bl	1adba <printk>

	va_start(args, format);
	vprintk(format, args);
   1475a:	4621      	mov	r1, r4
   1475c:	4628      	mov	r0, r5
	va_start(args, format);
   1475e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   14760:	f7f2 fdcc 	bl	72fc <vprintk>
	va_end(args);
}
   14764:	b002      	add	sp, #8
   14766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1476a:	b003      	add	sp, #12
   1476c:	4770      	bx	lr
   1476e:	bf00      	nop
   14770:	00021498 	.word	0x00021498
   14774:	00024d3d 	.word	0x00024d3d

00014778 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   14778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1477c:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1477e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   14780:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   14782:	4293      	cmp	r3, r2
{
   14784:	4617      	mov	r7, r2
   14786:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   14788:	d341      	bcc.n	1480e <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1478a:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1478c:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   14790:	42bd      	cmp	r5, r7
   14792:	d103      	bne.n	1479c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   14794:	2000      	movs	r0, #0
}
   14796:	b007      	add	sp, #28
   14798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1479c:	fb0b f805 	mul.w	r8, fp, r5
   147a0:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   147a4:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   147a6:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   147aa:	1d23      	adds	r3, r4, #4
   147ac:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   147ae:	b9ca      	cbnz	r2, 147e4 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   147b0:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   147b2:	6861      	ldr	r1, [r4, #4]
   147b4:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   147b6:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   147ba:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   147bc:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   147be:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   147c2:	1e5c      	subs	r4, r3, #1
   147c4:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   147c8:	425b      	negs	r3, r3
   147ca:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   147ce:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   147d0:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   147d4:	6884      	ldr	r4, [r0, #8]
   147d6:	3306      	adds	r3, #6
   147d8:	42a1      	cmp	r1, r4
   147da:	bf28      	it	cs
   147dc:	f04f 31ff 	movcs.w	r1, #4294967295
   147e0:	f009 fdef 	bl	1e3c2 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   147e4:	f859 3008 	ldr.w	r3, [r9, r8]
   147e8:	4630      	mov	r0, r6
   147ea:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   147ec:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   147ee:	b2a9      	uxth	r1, r5
   147f0:	6a1b      	ldr	r3, [r3, #32]
   147f2:	9301      	str	r3, [sp, #4]
   147f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   147f6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   147fa:	9300      	str	r3, [sp, #0]
   147fc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   14800:	9b05      	ldr	r3, [sp, #20]
   14802:	f009 fe59 	bl	1e4b8 <virtqueue_create>
		if (ret)
   14806:	2800      	cmp	r0, #0
   14808:	d1c5      	bne.n	14796 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1480a:	3501      	adds	r5, #1
   1480c:	e7c0      	b.n	14790 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1480e:	4801      	ldr	r0, [pc, #4]	; (14814 <virtio_create_virtqueues+0x9c>)
   14810:	e7c1      	b.n	14796 <virtio_create_virtqueues+0x1e>
   14812:	bf00      	nop
   14814:	fffff440 	.word	0xfffff440

00014818 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   14818:	b510      	push	{r4, lr}
	if (vq) {
   1481a:	4604      	mov	r4, r0
   1481c:	b190      	cbz	r0, 14844 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1481e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   14820:	8943      	ldrh	r3, [r0, #10]
   14822:	429a      	cmp	r2, r3
   14824:	d009      	beq.n	1483a <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   14826:	4b08      	ldr	r3, [pc, #32]	; (14848 <virtqueue_free+0x30>)
   14828:	781a      	ldrb	r2, [r3, #0]
   1482a:	2a03      	cmp	r2, #3
   1482c:	d905      	bls.n	1483a <virtqueue_free+0x22>
   1482e:	685b      	ldr	r3, [r3, #4]
   14830:	b11b      	cbz	r3, 1483a <virtqueue_free+0x22>
   14832:	6842      	ldr	r2, [r0, #4]
   14834:	4905      	ldr	r1, [pc, #20]	; (1484c <virtqueue_free+0x34>)
   14836:	2004      	movs	r0, #4
   14838:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1483a:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14840:	f00a bd7e 	b.w	1f340 <k_free>
   14844:	bd10      	pop	{r4, pc}
   14846:	bf00      	nop
   14848:	20006ddc 	.word	0x20006ddc
   1484c:	00024dd8 	.word	0x00024dd8

00014850 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   14850:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   14852:	8944      	ldrh	r4, [r0, #10]
   14854:	428c      	cmp	r4, r1
   14856:	d912      	bls.n	1487e <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   14858:	6a03      	ldr	r3, [r0, #32]
   1485a:	3c01      	subs	r4, #1
   1485c:	885d      	ldrh	r5, [r3, #2]
   1485e:	402c      	ands	r4, r5
   14860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   14864:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   14866:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   14868:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1486c:	6a02      	ldr	r2, [r0, #32]
   1486e:	8853      	ldrh	r3, [r2, #2]
   14870:	3301      	adds	r3, #1
   14872:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   14874:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   14876:	3301      	adds	r3, #1
   14878:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1487a:	2000      	movs	r0, #0
}
   1487c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1487e:	4801      	ldr	r0, [pc, #4]	; (14884 <virtqueue_add_consumed_buffer+0x34>)
   14880:	e7fc      	b.n	1487c <virtqueue_add_consumed_buffer+0x2c>
   14882:	bf00      	nop
   14884:	fffff441 	.word	0xfffff441

00014888 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   14888:	b470      	push	{r4, r5, r6}
   1488a:	9e03      	ldr	r6, [sp, #12]
   1488c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1488e:	b158      	cbz	r0, 148a8 <rpmsg_send_offchannel_raw+0x20>
   14890:	6a00      	ldr	r0, [r0, #32]
   14892:	b148      	cbz	r0, 148a8 <rpmsg_send_offchannel_raw+0x20>
   14894:	b143      	cbz	r3, 148a8 <rpmsg_send_offchannel_raw+0x20>
   14896:	3401      	adds	r4, #1
   14898:	d006      	beq.n	148a8 <rpmsg_send_offchannel_raw+0x20>
   1489a:	2e00      	cmp	r6, #0
   1489c:	db04      	blt.n	148a8 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1489e:	6f84      	ldr	r4, [r0, #120]	; 0x78
   148a0:	b114      	cbz	r4, 148a8 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   148a2:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   148a4:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   148a6:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   148a8:	4801      	ldr	r0, [pc, #4]	; (148b0 <rpmsg_send_offchannel_raw+0x28>)
}
   148aa:	bc70      	pop	{r4, r5, r6}
   148ac:	4770      	bx	lr
   148ae:	bf00      	nop
   148b0:	fffff82d 	.word	0xfffff82d

000148b4 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   148b4:	b470      	push	{r4, r5, r6}
   148b6:	9e03      	ldr	r6, [sp, #12]
   148b8:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   148ba:	b160      	cbz	r0, 148d6 <rpmsg_send_offchannel_nocopy+0x22>
   148bc:	6a00      	ldr	r0, [r0, #32]
   148be:	b150      	cbz	r0, 148d6 <rpmsg_send_offchannel_nocopy+0x22>
   148c0:	b14b      	cbz	r3, 148d6 <rpmsg_send_offchannel_nocopy+0x22>
   148c2:	3401      	adds	r4, #1
   148c4:	d007      	beq.n	148d6 <rpmsg_send_offchannel_nocopy+0x22>
   148c6:	2e00      	cmp	r6, #0
   148c8:	db05      	blt.n	148d6 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   148ca:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   148ce:	b114      	cbz	r4, 148d6 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   148d0:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   148d2:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   148d4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   148d6:	4801      	ldr	r0, [pc, #4]	; (148dc <rpmsg_send_offchannel_nocopy+0x28>)
}
   148d8:	bc70      	pop	{r4, r5, r6}
   148da:	4770      	bx	lr
   148dc:	fffff82d 	.word	0xfffff82d

000148e0 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   148e0:	b570      	push	{r4, r5, r6, lr}
   148e2:	460c      	mov	r4, r1
   148e4:	4611      	mov	r1, r2
   148e6:	4605      	mov	r5, r0
   148e8:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   148ea:	4b0c      	ldr	r3, [pc, #48]	; (1491c <rpmsg_register_endpoint+0x3c>)
   148ec:	2220      	movs	r2, #32
   148ee:	2900      	cmp	r1, #0
   148f0:	bf08      	it	eq
   148f2:	4619      	moveq	r1, r3
   148f4:	4620      	mov	r0, r4
   148f6:	f00a fdae 	bl	1f456 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   148fa:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   148fc:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   148fe:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   14900:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   14902:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   14904:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   14906:	9b06      	ldr	r3, [sp, #24]
   14908:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1490a:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1490c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   14910:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   14914:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   14916:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14918:	6013      	str	r3, [r2, #0]
}
   1491a:	bd70      	pop	{r4, r5, r6, pc}
   1491c:	00024616 	.word	0x00024616

00014920 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   14920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14924:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   14928:	460d      	mov	r5, r1
   1492a:	4692      	mov	sl, r2
   1492c:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1492e:	4606      	mov	r6, r0
   14930:	2800      	cmp	r0, #0
   14932:	d06c      	beq.n	14a0e <rpmsg_create_ept+0xee>
   14934:	2900      	cmp	r1, #0
   14936:	d06a      	beq.n	14a0e <rpmsg_create_ept+0xee>
   14938:	f1b9 0f00 	cmp.w	r9, #0
   1493c:	d067      	beq.n	14a0e <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1493e:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   14942:	4640      	mov	r0, r8
   14944:	f009 ff21 	bl	1e78a <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   14948:	1c78      	adds	r0, r7, #1
   1494a:	d140      	bne.n	149ce <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1494c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1494e:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   14952:	f014 0401 	ands.w	r4, r4, #1
   14956:	d00b      	beq.n	14970 <rpmsg_create_ept+0x50>
	for (bit = start;
   14958:	2400      	movs	r4, #0
	     bit++)
   1495a:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1495c:	2c80      	cmp	r4, #128	; 0x80
   1495e:	d054      	beq.n	14a0a <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   14960:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   14962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14966:	f004 011f 	and.w	r1, r4, #31
   1496a:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1496c:	07d1      	lsls	r1, r2, #31
   1496e:	d4f4      	bmi.n	1495a <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14970:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   14972:	0960      	lsrs	r0, r4, #5
   14974:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   14978:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1497c:	f004 041f 	and.w	r4, r4, #31
   14980:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   14982:	430a      	orrs	r2, r1
   14984:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   14988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1498a:	4652      	mov	r2, sl
   1498c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   14990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14992:	4631      	mov	r1, r6
   14994:	9300      	str	r3, [sp, #0]
   14996:	4628      	mov	r0, r5
   14998:	463b      	mov	r3, r7
   1499a:	f7ff ffa1 	bl	148e0 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1499e:	4640      	mov	r0, r8
   149a0:	f002 f822 	bl	169e8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   149a4:	7834      	ldrb	r4, [r6, #0]
   149a6:	b174      	cbz	r4, 149c6 <rpmsg_create_ept+0xa6>
   149a8:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   149ac:	b15c      	cbz	r4, 149c6 <rpmsg_create_ept+0xa6>
   149ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   149b0:	3301      	adds	r3, #1
   149b2:	d12e      	bne.n	14a12 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   149b4:	2100      	movs	r1, #0
   149b6:	4630      	mov	r0, r6
   149b8:	f009 ff16 	bl	1e7e8 <rpmsg_send_ns_message>

	if (status)
   149bc:	4604      	mov	r4, r0
   149be:	b110      	cbz	r0, 149c6 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   149c0:	4630      	mov	r0, r6
   149c2:	f009 fee8 	bl	1e796 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   149c6:	4620      	mov	r0, r4
   149c8:	b004      	add	sp, #16
   149ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   149ce:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   149d2:	d3d9      	bcc.n	14988 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   149d4:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   149d8:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   149da:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   149de:	d80f      	bhi.n	14a00 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   149e0:	0958      	lsrs	r0, r3, #5
   149e2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   149e6:	f003 031f 	and.w	r3, r3, #31
   149ea:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   149ee:	07d2      	lsls	r2, r2, #31
   149f0:	d40b      	bmi.n	14a0a <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   149f2:	2201      	movs	r2, #1
   149f4:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   149f8:	4323      	orrs	r3, r4
   149fa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   149fe:	e7c3      	b.n	14988 <rpmsg_create_ept+0x68>
   14a00:	4c05      	ldr	r4, [pc, #20]	; (14a18 <rpmsg_create_ept+0xf8>)
   14a02:	4640      	mov	r0, r8
   14a04:	f001 fff0 	bl	169e8 <z_impl_k_sem_give>
}
   14a08:	e7dd      	b.n	149c6 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   14a0a:	4c04      	ldr	r4, [pc, #16]	; (14a1c <rpmsg_create_ept+0xfc>)
   14a0c:	e7f9      	b.n	14a02 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   14a0e:	4c02      	ldr	r4, [pc, #8]	; (14a18 <rpmsg_create_ept+0xf8>)
   14a10:	e7d9      	b.n	149c6 <rpmsg_create_ept+0xa6>
   14a12:	2400      	movs	r4, #0
   14a14:	e7d7      	b.n	149c6 <rpmsg_create_ept+0xa6>
   14a16:	bf00      	nop
   14a18:	fffff82d 	.word	0xfffff82d
   14a1c:	fffff829 	.word	0xfffff829

00014a20 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   14a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   14a24:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   14a28:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   14a2c:	2300      	movs	r3, #0
{
   14a2e:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   14a30:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   14a32:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   14a36:	2310      	movs	r3, #16
	rp_hdr.src = src;
   14a38:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   14a3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14a3e:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   14a40:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   14a44:	f8ad 501c 	strh.w	r5, [sp, #28]
   14a48:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   14a4a:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   14a4c:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   14a50:	42b1      	cmp	r1, r6
   14a52:	bf28      	it	cs
   14a54:	f04f 31ff 	movcs.w	r1, #4294967295
   14a58:	eb0d 0203 	add.w	r2, sp, r3
   14a5c:	f009 fc77 	bl	1e34e <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   14a60:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   14a62:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   14a64:	d00a      	beq.n	14a7c <rpmsg_virtio_send_offchannel_nocopy+0x5c>
   14a66:	4923      	ldr	r1, [pc, #140]	; (14af4 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   14a68:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   14a6c:	4822      	ldr	r0, [pc, #136]	; (14af8 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   14a6e:	f006 fc4f 	bl	1b310 <assert_print>
   14a72:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   14a76:	481f      	ldr	r0, [pc, #124]	; (14af4 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   14a78:	f006 fc43 	bl	1b302 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   14a7c:	f104 0658 	add.w	r6, r4, #88	; 0x58
   14a80:	4630      	mov	r0, r6
   14a82:	f009 ff41 	bl	1e908 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   14a86:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   14a8a:	699b      	ldr	r3, [r3, #24]
   14a8c:	b9cb      	cbnz	r3, 14ac2 <rpmsg_virtio_send_offchannel_nocopy+0xa2>
		buff_len = rvdev->config.h2r_buf_size;
   14a8e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   14a92:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   14a96:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14a9a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   14a9c:	b9c3      	cbnz	r3, 14ad0 <rpmsg_virtio_send_offchannel_nocopy+0xb0>
		vqbuf.len = len;
   14a9e:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   14aa2:	f8cd 8000 	str.w	r8, [sp]
   14aa6:	2201      	movs	r2, #1
   14aa8:	a902      	add	r1, sp, #8
   14aaa:	f009 fd32 	bl	1e512 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   14aae:	b1a8      	cbz	r0, 14adc <rpmsg_virtio_send_offchannel_nocopy+0xbc>
   14ab0:	4910      	ldr	r1, [pc, #64]	; (14af4 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
   14ab2:	f240 12b9 	movw	r2, #441	; 0x1b9
   14ab6:	4810      	ldr	r0, [pc, #64]	; (14af8 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   14ab8:	f006 fc2a 	bl	1b310 <assert_print>
   14abc:	f240 11b9 	movw	r1, #441	; 0x1b9
   14ac0:	e7d9      	b.n	14a76 <rpmsg_virtio_send_offchannel_nocopy+0x56>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   14ac2:	4639      	mov	r1, r7
   14ac4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14ac8:	f009 fdb9 	bl	1e63e <virtqueue_get_buffer_length>
   14acc:	4602      	mov	r2, r0
   14ace:	e7e0      	b.n	14a92 <rpmsg_virtio_send_offchannel_nocopy+0x72>
	if (role == RPMSG_REMOTE) {
   14ad0:	2b01      	cmp	r3, #1
   14ad2:	d103      	bne.n	14adc <rpmsg_virtio_send_offchannel_nocopy+0xbc>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   14ad4:	4639      	mov	r1, r7
   14ad6:	f7ff febb 	bl	14850 <virtqueue_add_consumed_buffer>
   14ada:	e7e8      	b.n	14aae <rpmsg_virtio_send_offchannel_nocopy+0x8e>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   14adc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14ae0:	f009 fe04 	bl	1e6ec <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   14ae4:	4630      	mov	r0, r6
   14ae6:	f009 ff0d 	bl	1e904 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   14aea:	4628      	mov	r0, r5
   14aec:	b008      	add	sp, #32
   14aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14af2:	bf00      	nop
   14af4:	00024dfa 	.word	0x00024dfa
   14af8:	000221f8 	.word	0x000221f8

00014afc <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   14afc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   14b00:	6803      	ldr	r3, [r0, #0]
   14b02:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   14b04:	f107 0658 	add.w	r6, r7, #88	; 0x58
   14b08:	4630      	mov	r0, r6
   14b0a:	f009 fefd 	bl	1e908 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14b0e:	4638      	mov	r0, r7
   14b10:	f10d 020a 	add.w	r2, sp, #10
   14b14:	a903      	add	r1, sp, #12
   14b16:	f009 ff6a 	bl	1e9ee <rpmsg_virtio_get_rx_buffer>
   14b1a:	4604      	mov	r4, r0
   14b1c:	4630      	mov	r0, r6
   14b1e:	f009 fef1 	bl	1e904 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   14b22:	2c00      	cmp	r4, #0
   14b24:	d04e      	beq.n	14bc4 <rpmsg_virtio_rx_callback+0xc8>
		rp_hdr->reserved = idx;
   14b26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   14b2a:	4630      	mov	r0, r6
   14b2c:	60a3      	str	r3, [r4, #8]
   14b2e:	f009 feeb 	bl	1e908 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   14b32:	f04f 33ff 	mov.w	r3, #4294967295
   14b36:	2100      	movs	r1, #0
   14b38:	4638      	mov	r0, r7
   14b3a:	6862      	ldr	r2, [r4, #4]
   14b3c:	f009 fe88 	bl	1e850 <rpmsg_get_endpoint>
   14b40:	4605      	mov	r5, r0
   14b42:	4630      	mov	r0, r6
   14b44:	f009 fede 	bl	1e904 <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   14b48:	b1e5      	cbz	r5, 14b84 <rpmsg_virtio_rx_callback+0x88>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   14b4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14b4c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   14b4e:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   14b50:	bf08      	it	eq
   14b52:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14b54:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   14b56:	bf08      	it	eq
   14b58:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   14b5a:	6823      	ldr	r3, [r4, #0]
   14b5c:	89a2      	ldrh	r2, [r4, #12]
   14b5e:	9100      	str	r1, [sp, #0]
   14b60:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   14b64:	f104 0110 	add.w	r1, r4, #16
   14b68:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   14b6a:	2800      	cmp	r0, #0
   14b6c:	da0a      	bge.n	14b84 <rpmsg_virtio_rx_callback+0x88>
   14b6e:	4917      	ldr	r1, [pc, #92]	; (14bcc <rpmsg_virtio_rx_callback+0xd0>)
   14b70:	4817      	ldr	r0, [pc, #92]	; (14bd0 <rpmsg_virtio_rx_callback+0xd4>)
   14b72:	f240 2243 	movw	r2, #579	; 0x243
   14b76:	f006 fbcb 	bl	1b310 <assert_print>
   14b7a:	f240 2143 	movw	r1, #579	; 0x243
   14b7e:	4813      	ldr	r0, [pc, #76]	; (14bcc <rpmsg_virtio_rx_callback+0xd0>)
   14b80:	f006 fbbf 	bl	1b302 <assert_post_action>
   14b84:	4630      	mov	r0, r6
   14b86:	f009 febf 	bl	1e908 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   14b8a:	68a3      	ldr	r3, [r4, #8]
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	db06      	blt.n	14b9e <rpmsg_virtio_rx_callback+0xa2>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   14b90:	4621      	mov	r1, r4
   14b92:	4638      	mov	r0, r7
   14b94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   14b98:	9a03      	ldr	r2, [sp, #12]
   14b9a:	f009 ff3f 	bl	1ea1c <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   14b9e:	4638      	mov	r0, r7
   14ba0:	f10d 020a 	add.w	r2, sp, #10
   14ba4:	a903      	add	r1, sp, #12
   14ba6:	f009 ff22 	bl	1e9ee <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   14baa:	4604      	mov	r4, r0
   14bac:	b118      	cbz	r0, 14bb6 <rpmsg_virtio_rx_callback+0xba>
   14bae:	4630      	mov	r0, r6
   14bb0:	f009 fea8 	bl	1e904 <k_sem_give>
	while (rp_hdr) {
   14bb4:	e7b7      	b.n	14b26 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   14bb6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   14bba:	f009 fd97 	bl	1e6ec <virtqueue_kick>
   14bbe:	4630      	mov	r0, r6
   14bc0:	f009 fea0 	bl	1e904 <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   14bc4:	b004      	add	sp, #16
   14bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bca:	bf00      	nop
   14bcc:	00024dfa 	.word	0x00024dfa
   14bd0:	000221f8 	.word	0x000221f8

00014bd4 <rpmsg_virtio_send_offchannel_raw>:
{
   14bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14bd8:	468a      	mov	sl, r1
   14bda:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   14bdc:	a903      	add	r1, sp, #12
   14bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   14be0:	4606      	mov	r6, r0
   14be2:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   14be4:	f009 ff65 	bl	1eab2 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   14be8:	4604      	mov	r4, r0
   14bea:	b340      	cbz	r0, 14c3e <rpmsg_virtio_send_offchannel_raw+0x6a>
	if (len > (int)buff_len)
   14bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14bee:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   14bf0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   14bf4:	429d      	cmp	r5, r3
   14bf6:	bfa8      	it	ge
   14bf8:	461d      	movge	r5, r3
   14bfa:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   14bfc:	6887      	ldr	r7, [r0, #8]
   14bfe:	1a61      	subs	r1, r4, r1
   14c00:	42b9      	cmp	r1, r7
   14c02:	bf28      	it	cs
   14c04:	f04f 31ff 	movcs.w	r1, #4294967295
   14c08:	462b      	mov	r3, r5
   14c0a:	464a      	mov	r2, r9
   14c0c:	f009 fb9f 	bl	1e34e <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   14c10:	4285      	cmp	r5, r0
   14c12:	d00a      	beq.n	14c2a <rpmsg_virtio_send_offchannel_raw+0x56>
   14c14:	490b      	ldr	r1, [pc, #44]	; (14c44 <rpmsg_virtio_send_offchannel_raw+0x70>)
   14c16:	480c      	ldr	r0, [pc, #48]	; (14c48 <rpmsg_virtio_send_offchannel_raw+0x74>)
   14c18:	f240 2203 	movw	r2, #515	; 0x203
   14c1c:	f006 fb78 	bl	1b310 <assert_print>
   14c20:	f240 2103 	movw	r1, #515	; 0x203
   14c24:	4807      	ldr	r0, [pc, #28]	; (14c44 <rpmsg_virtio_send_offchannel_raw+0x70>)
   14c26:	f006 fb6c 	bl	1b302 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   14c2a:	4623      	mov	r3, r4
   14c2c:	4642      	mov	r2, r8
   14c2e:	4651      	mov	r1, sl
   14c30:	4630      	mov	r0, r6
   14c32:	9500      	str	r5, [sp, #0]
   14c34:	f7ff fef4 	bl	14a20 <rpmsg_virtio_send_offchannel_nocopy>
}
   14c38:	b004      	add	sp, #16
   14c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return RPMSG_ERR_NO_BUFF;
   14c3e:	4803      	ldr	r0, [pc, #12]	; (14c4c <rpmsg_virtio_send_offchannel_raw+0x78>)
   14c40:	e7fa      	b.n	14c38 <rpmsg_virtio_send_offchannel_raw+0x64>
   14c42:	bf00      	nop
   14c44:	00024dfa 	.word	0x00024dfa
   14c48:	000221f8 	.word	0x000221f8
   14c4c:	fffff82e 	.word	0xfffff82e

00014c50 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   14c50:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   14c52:	4604      	mov	r4, r0
   14c54:	b1e0      	cbz	r0, 14c90 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   14c56:	f100 0558 	add.w	r5, r0, #88	; 0x58
   14c5a:	4628      	mov	r0, r5
   14c5c:	f009 fe54 	bl	1e908 <__metal_mutex_acquire>
   14c60:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14c64:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   14c66:	b953      	cbnz	r3, 14c7e <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   14c68:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   14c6c:	3c10      	subs	r4, #16
	if (length <= 0) {
   14c6e:	2c00      	cmp	r4, #0
   14c70:	dc00      	bgt.n	14c74 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   14c72:	4c08      	ldr	r4, [pc, #32]	; (14c94 <rpmsg_virtio_get_buffer_size+0x44>)
   14c74:	4628      	mov	r0, r5
   14c76:	f009 fe45 	bl	1e904 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   14c7a:	4620      	mov	r0, r4
   14c7c:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   14c7e:	2b01      	cmp	r3, #1
   14c80:	d1f7      	bne.n	14c72 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   14c82:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14c86:	f009 fd68 	bl	1e75a <virtqueue_get_desc_size>
   14c8a:	f1a0 0410 	sub.w	r4, r0, #16
   14c8e:	e7ee      	b.n	14c6e <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   14c90:	4c01      	ldr	r4, [pc, #4]	; (14c98 <rpmsg_virtio_get_buffer_size+0x48>)
   14c92:	e7f2      	b.n	14c7a <rpmsg_virtio_get_buffer_size+0x2a>
   14c94:	fffff82e 	.word	0xfffff82e
   14c98:	fffff82d 	.word	0xfffff82d

00014c9c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   14c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ca0:	b08a      	sub	sp, #40	; 0x28
   14ca2:	460d      	mov	r5, r1
   14ca4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   14ca8:	4690      	mov	r8, r2
   14caa:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   14cac:	4604      	mov	r4, r0
   14cae:	b920      	cbnz	r0, 14cba <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   14cb0:	4f81      	ldr	r7, [pc, #516]	; (14eb8 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   14cb2:	4638      	mov	r0, r7
   14cb4:	b00a      	add	sp, #40	; 0x28
   14cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   14cba:	2900      	cmp	r1, #0
   14cbc:	d0f8      	beq.n	14cb0 <rpmsg_init_vdev_with_config+0x14>
   14cbe:	2b00      	cmp	r3, #0
   14cc0:	d0f6      	beq.n	14cb0 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   14cc2:	2294      	movs	r2, #148	; 0x94
   14cc4:	2100      	movs	r1, #0
   14cc6:	f00a fba4 	bl	1f412 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14cca:	2201      	movs	r2, #1
   14ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14cd0:	4611      	mov	r1, r2
   14cd2:	f00a f9b9 	bl	1f048 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14cd6:	4b79      	ldr	r3, [pc, #484]	; (14ebc <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   14cd8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   14cdc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   14ce0:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14ce2:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   14ce4:	4b76      	ldr	r3, [pc, #472]	; (14ec0 <rpmsg_init_vdev_with_config+0x224>)
   14ce6:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   14ce8:	4b76      	ldr	r3, [pc, #472]	; (14ec4 <rpmsg_init_vdev_with_config+0x228>)
   14cea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   14cee:	4b76      	ldr	r3, [pc, #472]	; (14ec8 <rpmsg_init_vdev_with_config+0x22c>)
   14cf0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   14cf4:	4b75      	ldr	r3, [pc, #468]	; (14ecc <rpmsg_init_vdev_with_config+0x230>)
   14cf6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   14cfa:	4b75      	ldr	r3, [pc, #468]	; (14ed0 <rpmsg_init_vdev_with_config+0x234>)
   14cfc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   14d00:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14d04:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   14d08:	f1b8 0f00 	cmp.w	r8, #0
   14d0c:	d16e      	bne.n	14dec <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   14d0e:	2f00      	cmp	r7, #0
   14d10:	d0ce      	beq.n	14cb0 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   14d12:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   14d16:	f104 0394 	add.w	r3, r4, #148	; 0x94
   14d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   14d1e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   14d22:	6a03      	ldr	r3, [r0, #32]
   14d24:	689b      	ldr	r3, [r3, #8]
   14d26:	4798      	blx	r3
   14d28:	2300      	movs	r3, #0
   14d2a:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   14d2c:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   14d30:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   14d32:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   14d36:	f1b8 0f00 	cmp.w	r8, #0
   14d3a:	d16d      	bne.n	14e18 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   14d3c:	7a3b      	ldrb	r3, [r7, #8]
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d068      	beq.n	14e14 <rpmsg_init_vdev_with_config+0x178>
   14d42:	f109 030c 	add.w	r3, r9, #12
   14d46:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   14d4a:	f1b9 0f00 	cmp.w	r9, #0
   14d4e:	d0af      	beq.n	14cb0 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   14d50:	f8d9 2008 	ldr.w	r2, [r9, #8]
   14d54:	2a00      	cmp	r2, #0
   14d56:	f000 80ad 	beq.w	14eb4 <rpmsg_init_vdev_with_config+0x218>
   14d5a:	689b      	ldr	r3, [r3, #8]
   14d5c:	2b00      	cmp	r3, #0
   14d5e:	f000 80a9 	beq.w	14eb4 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   14d62:	4b5c      	ldr	r3, [pc, #368]	; (14ed4 <rpmsg_init_vdev_with_config+0x238>)
   14d64:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   14d66:	4b5c      	ldr	r3, [pc, #368]	; (14ed8 <rpmsg_init_vdev_with_config+0x23c>)
   14d68:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   14d6a:	4b5c      	ldr	r3, [pc, #368]	; (14edc <rpmsg_init_vdev_with_config+0x240>)
   14d6c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   14d6e:	4b5c      	ldr	r3, [pc, #368]	; (14ee0 <rpmsg_init_vdev_with_config+0x244>)
   14d70:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   14d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14d74:	681b      	ldr	r3, [r3, #0]
   14d76:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   14d7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14d7c:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   14d7e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   14d82:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   14d86:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   14d8a:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   14d8c:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   14d90:	9300      	str	r3, [sp, #0]
   14d92:	2202      	movs	r2, #2
   14d94:	2100      	movs	r1, #0
   14d96:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   14d9a:	ab04      	add	r3, sp, #16
   14d9c:	f7ff fcec 	bl	14778 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   14da0:	4607      	mov	r7, r0
   14da2:	2800      	cmp	r0, #0
   14da4:	d185      	bne.n	14cb2 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   14da6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14daa:	f009 fc71 	bl	1e690 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   14dae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14db0:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   14db2:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   14db4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14db6:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   14db8:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   14dba:	f1b8 0f00 	cmp.w	r8, #0
   14dbe:	d161      	bne.n	14e84 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14dc0:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   14dc2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14dc6:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14dc8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   14dcc:	895b      	ldrh	r3, [r3, #10]
   14dce:	4553      	cmp	r3, sl
   14dd0:	d834      	bhi.n	14e3c <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   14dd2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14dd6:	e9c4 4400 	strd	r4, r4, [r4]
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d159      	bne.n	14e92 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   14dde:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14de2:	2104      	movs	r1, #4
   14de4:	6a03      	ldr	r3, [r0, #32]
   14de6:	685b      	ldr	r3, [r3, #4]
   14de8:	4798      	blx	r3
}
   14dea:	e762      	b.n	14cb2 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   14dec:	f1b8 0f01 	cmp.w	r8, #1
   14df0:	d195      	bne.n	14d1e <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   14df2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   14df6:	6a03      	ldr	r3, [r0, #32]
   14df8:	681b      	ldr	r3, [r3, #0]
   14dfa:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   14dfc:	0642      	lsls	r2, r0, #25
   14dfe:	d506      	bpl.n	14e0e <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   14e00:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14e04:	2100      	movs	r1, #0
   14e06:	6a03      	ldr	r3, [r0, #32]
   14e08:	685b      	ldr	r3, [r3, #4]
   14e0a:	4798      	blx	r3
}
   14e0c:	e7f1      	b.n	14df2 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   14e0e:	0743      	lsls	r3, r0, #29
   14e10:	d5ef      	bpl.n	14df2 <rpmsg_init_vdev_with_config+0x156>
   14e12:	e784      	b.n	14d1e <rpmsg_init_vdev_with_config+0x82>
   14e14:	464b      	mov	r3, r9
   14e16:	e796      	b.n	14d46 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   14e18:	f1b8 0f01 	cmp.w	r8, #1
   14e1c:	d1b1      	bne.n	14d82 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   14e1e:	4b2e      	ldr	r3, [pc, #184]	; (14ed8 <rpmsg_init_vdev_with_config+0x23c>)
   14e20:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   14e22:	4b2c      	ldr	r3, [pc, #176]	; (14ed4 <rpmsg_init_vdev_with_config+0x238>)
   14e24:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   14e26:	4b2e      	ldr	r3, [pc, #184]	; (14ee0 <rpmsg_init_vdev_with_config+0x244>)
   14e28:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   14e2a:	4b2c      	ldr	r3, [pc, #176]	; (14edc <rpmsg_init_vdev_with_config+0x240>)
   14e2c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   14e2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14e30:	699b      	ldr	r3, [r3, #24]
   14e32:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   14e36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14e38:	681b      	ldr	r3, [r3, #0]
   14e3a:	e7a0      	b.n	14d7e <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   14e3c:	4648      	mov	r0, r9
   14e3e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   14e42:	f009 fe27 	bl	1ea94 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   14e46:	4605      	mov	r5, r0
   14e48:	b1c8      	cbz	r0, 14e7e <rpmsg_init_vdev_with_config+0x1e2>
   14e4a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   14e4c:	9008      	str	r0, [sp, #32]
   14e4e:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   14e50:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   14e52:	2200      	movs	r2, #0
   14e54:	4281      	cmp	r1, r0
   14e56:	bf28      	it	cs
   14e58:	f04f 31ff 	movcs.w	r1, #4294967295
   14e5c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14e60:	4630      	mov	r0, r6
   14e62:	f009 faae 	bl	1e3c2 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   14e66:	9500      	str	r5, [sp, #0]
   14e68:	2301      	movs	r3, #1
   14e6a:	2200      	movs	r2, #0
   14e6c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14e70:	a908      	add	r1, sp, #32
   14e72:	f009 fb4e 	bl	1e512 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   14e76:	b918      	cbnz	r0, 14e80 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14e78:	f10a 0a01 	add.w	sl, sl, #1
   14e7c:	e7a4      	b.n	14dc8 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   14e7e:	4819      	ldr	r0, [pc, #100]	; (14ee4 <rpmsg_init_vdev_with_config+0x248>)
   14e80:	4607      	mov	r7, r0
   14e82:	e716      	b.n	14cb2 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   14e84:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14e88:	e9c4 4400 	strd	r4, r4, [r4]
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	f43f af10 	beq.w	14cb2 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   14e92:	2300      	movs	r3, #0
   14e94:	9302      	str	r3, [sp, #8]
   14e96:	4b14      	ldr	r3, [pc, #80]	; (14ee8 <rpmsg_init_vdev_with_config+0x24c>)
   14e98:	4620      	mov	r0, r4
   14e9a:	9301      	str	r3, [sp, #4]
   14e9c:	2335      	movs	r3, #53	; 0x35
   14e9e:	4a13      	ldr	r2, [pc, #76]	; (14eec <rpmsg_init_vdev_with_config+0x250>)
   14ea0:	9300      	str	r3, [sp, #0]
   14ea2:	f104 0108 	add.w	r1, r4, #8
   14ea6:	f7ff fd1b 	bl	148e0 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   14eaa:	f1b8 0f00 	cmp.w	r8, #0
   14eae:	f47f af00 	bne.w	14cb2 <rpmsg_init_vdev_with_config+0x16>
   14eb2:	e794      	b.n	14dde <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   14eb4:	4f0b      	ldr	r7, [pc, #44]	; (14ee4 <rpmsg_init_vdev_with_config+0x248>)
   14eb6:	e6fc      	b.n	14cb2 <rpmsg_init_vdev_with_config+0x16>
   14eb8:	fffff82d 	.word	0xfffff82d
   14ebc:	00014bd5 	.word	0x00014bd5
   14ec0:	0001e8f5 	.word	0x0001e8f5
   14ec4:	0001ea55 	.word	0x0001ea55
   14ec8:	0001eab3 	.word	0x0001eab3
   14ecc:	00014a21 	.word	0x00014a21
   14ed0:	0001e915 	.word	0x0001e915
   14ed4:	00024e3d 	.word	0x00024e3d
   14ed8:	00024e43 	.word	0x00024e43
   14edc:	00014afd 	.word	0x00014afd
   14ee0:	0001e903 	.word	0x0001e903
   14ee4:	fffff82e 	.word	0xfffff82e
   14ee8:	0001e957 	.word	0x0001e957
   14eec:	00024e49 	.word	0x00024e49

00014ef0 <rpmsg_init_vdev>:
{
   14ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ef2:	4605      	mov	r5, r0
   14ef4:	460e      	mov	r6, r1
   14ef6:	4617      	mov	r7, r2
   14ef8:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   14efa:	4a07      	ldr	r2, [pc, #28]	; (14f18 <rpmsg_init_vdev+0x28>)
   14efc:	ac03      	add	r4, sp, #12
   14efe:	ca07      	ldmia	r2, {r0, r1, r2}
   14f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   14f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14f06:	4631      	mov	r1, r6
   14f08:	9200      	str	r2, [sp, #0]
   14f0a:	4628      	mov	r0, r5
   14f0c:	463a      	mov	r2, r7
   14f0e:	9401      	str	r4, [sp, #4]
   14f10:	f7ff fec4 	bl	14c9c <rpmsg_init_vdev_with_config>
}
   14f14:	b007      	add	sp, #28
   14f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f18:	0001fb18 	.word	0x0001fb18

00014f1c <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
   14f1c:	4603      	mov	r3, r0
   14f1e:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	uint_fast32_t len = max_result_len;

	for (; len > 0; len--) {
   14f20:	b900      	cbnz	r0, 14f24 <get_result_len+0x8>
   14f22:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
   14f24:	1e42      	subs	r2, r0, #1
   14f26:	5c99      	ldrb	r1, [r3, r2]
   14f28:	b909      	cbnz	r1, 14f2e <get_result_len+0x12>
	for (; len > 0; len--) {
   14f2a:	4610      	mov	r0, r2
   14f2c:	e7f8      	b.n	14f20 <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   14f2e:	2802      	cmp	r0, #2
   14f30:	d907      	bls.n	14f42 <get_result_len+0x26>
	switch(val) {
   14f32:	3802      	subs	r0, #2
   14f34:	2806      	cmp	r0, #6
   14f36:	bf96      	itet	ls
   14f38:	4b02      	ldrls	r3, [pc, #8]	; (14f44 <get_result_len+0x28>)
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   14f3a:	2300      	movhi	r3, #0
   14f3c:	5c1b      	ldrbls	r3, [r3, r0]
   14f3e:	2001      	movs	r0, #1
   14f40:	4098      	lsls	r0, r3
}
   14f42:	4770      	bx	lr
   14f44:	00024e4c 	.word	0x00024e4c

00014f48 <value_encode_len>:
{
   14f48:	b570      	push	{r4, r5, r6, lr}
   14f4a:	461c      	mov	r4, r3

static uint_fast32_t get_encoded_len(const void *const result, uint_fast32_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   14f4c:	2c01      	cmp	r4, #1
{
   14f4e:	4605      	mov	r5, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   14f50:	6803      	ldr	r3, [r0, #0]
{
   14f52:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   14f54:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   14f56:	d116      	bne.n	14f86 <value_encode_len+0x3e>
   14f58:	7812      	ldrb	r2, [r2, #0]
   14f5a:	2a17      	cmp	r2, #23
   14f5c:	d904      	bls.n	14f68 <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   14f5e:	3302      	adds	r3, #2
   14f60:	4298      	cmp	r0, r3
   14f62:	d314      	bcc.n	14f8e <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   14f64:	2300      	movs	r3, #0
   14f66:	e020      	b.n	14faa <value_encode_len+0x62>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   14f68:	3301      	adds	r3, #1
   14f6a:	4298      	cmp	r0, r3
   14f6c:	d30f      	bcc.n	14f8e <value_encode_len+0x46>
		return 0;
   14f6e:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
   14f70:	4628      	mov	r0, r5
   14f72:	f009 ff16 	bl	1eda2 <encode_header_byte>
   14f76:	b170      	cbz	r0, 14f96 <value_encode_len+0x4e>
   14f78:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
   14f7a:	42b4      	cmp	r4, r6
   14f7c:	d118      	bne.n	14fb0 <value_encode_len+0x68>
	state->elem_count++;
   14f7e:	68ab      	ldr	r3, [r5, #8]
   14f80:	3301      	adds	r3, #1
   14f82:	60ab      	str	r3, [r5, #8]
	return true;
   14f84:	e008      	b.n	14f98 <value_encode_len+0x50>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   14f86:	1c62      	adds	r2, r4, #1
   14f88:	4413      	add	r3, r2
   14f8a:	4298      	cmp	r0, r3
   14f8c:	d205      	bcs.n	14f9a <value_encode_len+0x52>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   14f8e:	2108      	movs	r1, #8
   14f90:	4628      	mov	r0, r5
   14f92:	f009 fefd 	bl	1ed90 <zcbor_error>
   14f96:	2000      	movs	r0, #0
}
   14f98:	bd70      	pop	{r4, r5, r6, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   14f9a:	b90c      	cbnz	r4, 14fa0 <value_encode_len+0x58>
	if (!encode_header_byte(state, major_type,
   14f9c:	7832      	ldrb	r2, [r6, #0]
   14f9e:	e7e7      	b.n	14f70 <value_encode_len+0x28>
	switch(val) {
   14fa0:	1ea3      	subs	r3, r4, #2
   14fa2:	2b06      	cmp	r3, #6
   14fa4:	d8de      	bhi.n	14f64 <value_encode_len+0x1c>
   14fa6:	4a06      	ldr	r2, [pc, #24]	; (14fc0 <value_encode_len+0x78>)
   14fa8:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   14faa:	3318      	adds	r3, #24
   14fac:	b2da      	uxtb	r2, r3
   14fae:	e7df      	b.n	14f70 <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
   14fb0:	682b      	ldr	r3, [r5, #0]
   14fb2:	1c5a      	adds	r2, r3, #1
   14fb4:	602a      	str	r2, [r5, #0]
   14fb6:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
   14fba:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
   14fbc:	e7dd      	b.n	14f7a <value_encode_len+0x32>
   14fbe:	bf00      	nop
   14fc0:	00024e4c 	.word	0x00024e4c

00014fc4 <send>:
		group->transport->api->rx_buf_free(group->transport, (void *)packet);
	}
}

static int send(const struct nrf_rpc_group *group, const uint8_t *data, size_t length)
{
   14fc4:	b510      	push	{r4, lr}
	if (!group->data->transport_initialized) {
   14fc6:	6883      	ldr	r3, [r0, #8]
   14fc8:	7f1b      	ldrb	r3, [r3, #28]
   14fca:	b17b      	cbz	r3, 14fec <send+0x28>
		NRF_RPC_ERR("Transport is not initialized");
		return -NRF_ENODEV;
	}

	if (!group->transport->api->send) {
   14fcc:	68c0      	ldr	r0, [r0, #12]
   14fce:	6803      	ldr	r3, [r0, #0]
   14fd0:	685b      	ldr	r3, [r3, #4]
   14fd2:	b943      	cbnz	r3, 14fe6 <send+0x22>
		NRF_RPC_ASSERT(false);
   14fd4:	4909      	ldr	r1, [pc, #36]	; (14ffc <send+0x38>)
   14fd6:	480a      	ldr	r0, [pc, #40]	; (15000 <send+0x3c>)
   14fd8:	2285      	movs	r2, #133	; 0x85
   14fda:	f006 f999 	bl	1b310 <assert_print>
   14fde:	2185      	movs	r1, #133	; 0x85
   14fe0:	4806      	ldr	r0, [pc, #24]	; (14ffc <send+0x38>)
   14fe2:	f006 f98e 	bl	1b302 <assert_post_action>
		return -NRF_EIO;
	}

	return group->transport->api->send(group->transport, data, length);
}
   14fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return group->transport->api->send(group->transport, data, length);
   14fea:	4718      	bx	r3
		NRF_RPC_ERR("Transport is not initialized");
   14fec:	2145      	movs	r1, #69	; 0x45
   14fee:	4805      	ldr	r0, [pc, #20]	; (15004 <send+0x40>)
   14ff0:	f006 f9a2 	bl	1b338 <z_log_minimal_printk>
}
   14ff4:	f06f 0012 	mvn.w	r0, #18
   14ff8:	bd10      	pop	{r4, pc}
   14ffa:	bf00      	nop
   14ffc:	00024e75 	.word	0x00024e75
   15000:	000221f8 	.word	0x000221f8
   15004:	00024e53 	.word	0x00024e53

00015008 <cmd_ctx_alloc>:
{
	return (transport->api->rx_buf_free == NULL);
}

static struct nrf_rpc_cmd_ctx *cmd_ctx_alloc(void)
{
   15008:	b510      	push	{r4, lr}
	struct nrf_rpc_cmd_ctx *ctx;
	uint32_t index;

	index = nrf_rpc_os_ctx_pool_reserve();
   1500a:	f7fd fcc3 	bl	12994 <nrf_rpc_os_ctx_pool_reserve>

	NRF_RPC_ASSERT(index < CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE);
   1500e:	2807      	cmp	r0, #7
   15010:	d908      	bls.n	15024 <cmd_ctx_alloc+0x1c>
   15012:	490c      	ldr	r1, [pc, #48]	; (15044 <cmd_ctx_alloc+0x3c>)
   15014:	480c      	ldr	r0, [pc, #48]	; (15048 <cmd_ctx_alloc+0x40>)
   15016:	2298      	movs	r2, #152	; 0x98
   15018:	f006 f97a 	bl	1b310 <assert_print>
   1501c:	2198      	movs	r1, #152	; 0x98
   1501e:	4809      	ldr	r0, [pc, #36]	; (15044 <cmd_ctx_alloc+0x3c>)
   15020:	f006 f96f 	bl	1b302 <assert_post_action>

	ctx = &cmd_ctx_pool[index];
   15024:	232c      	movs	r3, #44	; 0x2c
   15026:	4c09      	ldr	r4, [pc, #36]	; (1504c <cmd_ctx_alloc+0x44>)
   15028:	fb03 4400 	mla	r4, r3, r0, r4
	ctx->handler = NULL;
   1502c:	2300      	movs	r3, #0
   1502e:	6063      	str	r3, [r4, #4]
	ctx->remote_id = NRF_RPC_ID_UNKNOWN;
   15030:	23ff      	movs	r3, #255	; 0xff
   15032:	7063      	strb	r3, [r4, #1]
	ctx->use_count = 1;
   15034:	2301      	movs	r3, #1
   15036:	70a3      	strb	r3, [r4, #2]
	z_impl_k_thread_custom_data_set(value);
   15038:	4620      	mov	r0, r4
   1503a:	f001 f84d 	bl	160d8 <z_impl_k_thread_custom_data_set>
	nrf_rpc_os_tls_set(ctx);

	NRF_RPC_DBG("Command context %d allocated", ctx->id);

	return ctx;
}
   1503e:	4620      	mov	r0, r4
   15040:	bd10      	pop	{r4, pc}
   15042:	bf00      	nop
   15044:	00024e75 	.word	0x00024e75
   15048:	000221f8 	.word	0x000221f8
   1504c:	20006e18 	.word	0x20006e18

00015050 <nrf_rpc_decoding_done>:
			    hdr.type);
	}
}

void nrf_rpc_decoding_done(const struct nrf_rpc_group *group, const uint8_t *packet)
{
   15050:	4603      	mov	r3, r0
	const uint8_t *full_packet = &packet[-NRF_RPC_HEADER_SIZE];

	if (packet != NULL) {
   15052:	b179      	cbz	r1, 15074 <nrf_rpc_decoding_done+0x24>
		if (auto_free_rx_buf(group->transport)) {
   15054:	68c0      	ldr	r0, [r0, #12]
	return (transport->api->rx_buf_free == NULL);
   15056:	689b      	ldr	r3, [r3, #8]
   15058:	6802      	ldr	r2, [r0, #0]
   1505a:	6912      	ldr	r2, [r2, #16]
		if (auto_free_rx_buf(group->transport)) {
   1505c:	b912      	cbnz	r2, 15064 <nrf_rpc_decoding_done+0x14>
	z_impl_k_sem_give(sem);
   1505e:	1d18      	adds	r0, r3, #4
   15060:	f001 bcc2 	b.w	169e8 <z_impl_k_sem_give>
		if (!group->data->transport_initialized) {
   15064:	7f1b      	ldrb	r3, [r3, #28]
   15066:	b91b      	cbnz	r3, 15070 <nrf_rpc_decoding_done+0x20>
			NRF_RPC_ERR("Transport is not initialized");
   15068:	2145      	movs	r1, #69	; 0x45
   1506a:	4803      	ldr	r0, [pc, #12]	; (15078 <nrf_rpc_decoding_done+0x28>)
   1506c:	f006 b964 	b.w	1b338 <z_log_minimal_printk>
		group->transport->api->rx_buf_free(group->transport, (void *)packet);
   15070:	3905      	subs	r1, #5
   15072:	4710      	bx	r2
			nrf_rpc_os_event_set(&group->data->decode_done_event);
		} else {
			free_rx_buf(group, (void *)full_packet);
		}
	}
}
   15074:	4770      	bx	lr
   15076:	bf00      	nop
   15078:	00024e53 	.word	0x00024e53

0001507c <nrf_rpc_alloc_tx_buf>:
void nrf_rpc_alloc_tx_buf(const struct nrf_rpc_group *group, uint8_t **buf, size_t len)
{
	size_t req_size = len + NRF_RPC_HEADER_SIZE;
	uint8_t *packet;

	*buf = NULL;
   1507c:	2300      	movs	r3, #0
{
   1507e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	*buf = NULL;
   15080:	600b      	str	r3, [r1, #0]

	if (!group->data->transport_initialized) {
   15082:	6883      	ldr	r3, [r0, #8]
	size_t req_size = len + NRF_RPC_HEADER_SIZE;
   15084:	1d55      	adds	r5, r2, #5
	if (!group->data->transport_initialized) {
   15086:	7f1b      	ldrb	r3, [r3, #28]
{
   15088:	460c      	mov	r4, r1
	size_t req_size = len + NRF_RPC_HEADER_SIZE;
   1508a:	9501      	str	r5, [sp, #4]
	if (!group->data->transport_initialized) {
   1508c:	b92b      	cbnz	r3, 1509a <nrf_rpc_alloc_tx_buf+0x1e>
		NRF_RPC_ERR("Transport is not initialized");
   1508e:	2145      	movs	r1, #69	; 0x45
   15090:	4817      	ldr	r0, [pc, #92]	; (150f0 <nrf_rpc_alloc_tx_buf+0x74>)
   15092:	f006 f951 	bl	1b338 <z_log_minimal_printk>

		return;
	}

	*buf = packet + NRF_RPC_HEADER_SIZE;
}
   15096:	b003      	add	sp, #12
   15098:	bd30      	pop	{r4, r5, pc}
	if (!group->transport->api->tx_buf_alloc) {
   1509a:	68c0      	ldr	r0, [r0, #12]
   1509c:	6803      	ldr	r3, [r0, #0]
   1509e:	689b      	ldr	r3, [r3, #8]
   150a0:	b953      	cbnz	r3, 150b8 <nrf_rpc_alloc_tx_buf+0x3c>
		NRF_RPC_ASSERT(false);
   150a2:	4914      	ldr	r1, [pc, #80]	; (150f4 <nrf_rpc_alloc_tx_buf+0x78>)
   150a4:	f240 422a 	movw	r2, #1066	; 0x42a
   150a8:	4813      	ldr	r0, [pc, #76]	; (150f8 <nrf_rpc_alloc_tx_buf+0x7c>)
   150aa:	f006 f931 	bl	1b310 <assert_print>
   150ae:	f240 412a 	movw	r1, #1066	; 0x42a
		NRF_RPC_ASSERT(false);
   150b2:	4810      	ldr	r0, [pc, #64]	; (150f4 <nrf_rpc_alloc_tx_buf+0x78>)
   150b4:	f006 f925 	bl	1b302 <assert_post_action>
	packet = group->transport->api->tx_buf_alloc(group->transport, &req_size);
   150b8:	a901      	add	r1, sp, #4
   150ba:	4798      	blx	r3
	if (packet == NULL) {
   150bc:	b940      	cbnz	r0, 150d0 <nrf_rpc_alloc_tx_buf+0x54>
		NRF_RPC_ASSERT(false);
   150be:	490d      	ldr	r1, [pc, #52]	; (150f4 <nrf_rpc_alloc_tx_buf+0x78>)
   150c0:	f240 4231 	movw	r2, #1073	; 0x431
   150c4:	480c      	ldr	r0, [pc, #48]	; (150f8 <nrf_rpc_alloc_tx_buf+0x7c>)
   150c6:	f006 f923 	bl	1b310 <assert_print>
   150ca:	f240 4131 	movw	r1, #1073	; 0x431
   150ce:	e7f0      	b.n	150b2 <nrf_rpc_alloc_tx_buf+0x36>
	if (req_size < (len + NRF_RPC_HEADER_SIZE)) {
   150d0:	9b01      	ldr	r3, [sp, #4]
   150d2:	429d      	cmp	r5, r3
   150d4:	d908      	bls.n	150e8 <nrf_rpc_alloc_tx_buf+0x6c>
		NRF_RPC_ASSERT(false);
   150d6:	4907      	ldr	r1, [pc, #28]	; (150f4 <nrf_rpc_alloc_tx_buf+0x78>)
   150d8:	f240 4237 	movw	r2, #1079	; 0x437
   150dc:	4806      	ldr	r0, [pc, #24]	; (150f8 <nrf_rpc_alloc_tx_buf+0x7c>)
   150de:	f006 f917 	bl	1b310 <assert_print>
   150e2:	f240 4137 	movw	r1, #1079	; 0x437
   150e6:	e7e4      	b.n	150b2 <nrf_rpc_alloc_tx_buf+0x36>
	*buf = packet + NRF_RPC_HEADER_SIZE;
   150e8:	3005      	adds	r0, #5
   150ea:	6020      	str	r0, [r4, #0]
   150ec:	e7d3      	b.n	15096 <nrf_rpc_alloc_tx_buf+0x1a>
   150ee:	bf00      	nop
   150f0:	00024e53 	.word	0x00024e53
   150f4:	00024e75 	.word	0x00024e75
   150f8:	000221f8 	.word	0x000221f8

000150fc <nrf_rpc_err>:
{
   150fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15100:	b088      	sub	sp, #32
   15102:	4607      	mov	r7, r0
   15104:	460d      	mov	r5, r1
   15106:	461e      	mov	r6, r3
	uint8_t src_group_id = (group != NULL) ? group->data->src_group_id :
   15108:	4614      	mov	r4, r2
{
   1510a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
	uint8_t src_group_id = (group != NULL) ? group->data->src_group_id :
   1510e:	2a00      	cmp	r2, #0
   15110:	d03a      	beq.n	15188 <nrf_rpc_err+0x8c>
   15112:	6893      	ldr	r3, [r2, #8]
   15114:	f893 a000 	ldrb.w	sl, [r3]
	uint8_t dst_group_id = (group != NULL) ? group->data->dst_group_id :
   15118:	f893 8001 	ldrb.w	r8, [r3, #1]
	NRF_RPC_ERR("Error %s reported %d, group %s, id 0x%02X, type 0x%02X",
   1511c:	2900      	cmp	r1, #0
   1511e:	d13c      	bne.n	1519a <nrf_rpc_err+0x9e>
   15120:	4a30      	ldr	r2, [pc, #192]	; (151e4 <nrf_rpc_err+0xe8>)
   15122:	69a3      	ldr	r3, [r4, #24]
   15124:	9300      	str	r3, [sp, #0]
   15126:	2145      	movs	r1, #69	; 0x45
   15128:	463b      	mov	r3, r7
   1512a:	e9cd 6901 	strd	r6, r9, [sp, #4]
   1512e:	482e      	ldr	r0, [pc, #184]	; (151e8 <nrf_rpc_err+0xec>)
   15130:	f006 f902 	bl	1b338 <z_log_minimal_printk>
	if ((src == NRF_RPC_ERR_SRC_RECV) && group) {
   15134:	2d00      	cmp	r5, #0
   15136:	d14a      	bne.n	151ce <nrf_rpc_err+0xd2>
   15138:	2c00      	cmp	r4, #0
   1513a:	d038      	beq.n	151ae <nrf_rpc_err+0xb2>
	nrf_rpc_alloc_tx_buf(group, &tx_buf, len);
   1513c:	a905      	add	r1, sp, #20
   1513e:	2204      	movs	r2, #4
   15140:	4620      	mov	r0, r4
   15142:	f7ff ff9b 	bl	1507c <nrf_rpc_alloc_tx_buf>
	if (tx_buf == NULL) {
   15146:	9905      	ldr	r1, [sp, #20]
   15148:	b181      	cbz	r1, 1516c <nrf_rpc_err+0x70>
	packet[0] = hdr->type;
   1514a:	2303      	movs	r3, #3
	packet[1] = hdr->id;
   1514c:	f801 6c04 	strb.w	r6, [r1, #-4]
	packet[0] = hdr->type;
   15150:	f801 3c05 	strb.w	r3, [r1, #-5]
	packet[2] = hdr->dst;
   15154:	f801 9c03 	strb.w	r9, [r1, #-3]
	packet[3] = hdr->src_group_id;
   15158:	f801 ac02 	strb.w	sl, [r1, #-2]
	packet[4] = hdr->dst_group_id;
   1515c:	f801 8c01 	strb.w	r8, [r1, #-1]
	return send(group, tx_buf, NRF_RPC_HEADER_SIZE + len);
   15160:	2209      	movs	r2, #9
   15162:	4620      	mov	r0, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15164:	f841 7905 	str.w	r7, [r1], #-5
   15168:	f7ff ff2c 	bl	14fc4 <send>
	report.src = src;
   1516c:	2300      	movs	r3, #0
	report.code = code;
   1516e:	9705      	str	r7, [sp, #20]
	report.src = src;
   15170:	f88d 301c 	strb.w	r3, [sp, #28]
	report.group = group;
   15174:	9406      	str	r4, [sp, #24]
	report.id = id;
   15176:	f88d 601d 	strb.w	r6, [sp, #29]
	report.packet_type = packet_type;
   1517a:	f88d 901e 	strb.w	r9, [sp, #30]
	if (group != NULL && group->err_handler != NULL) {
   1517e:	69e3      	ldr	r3, [r4, #28]
   15180:	b1eb      	cbz	r3, 151be <nrf_rpc_err+0xc2>
		group->err_handler(&report);
   15182:	a805      	add	r0, sp, #20
   15184:	4798      	blx	r3
   15186:	e01a      	b.n	151be <nrf_rpc_err+0xc2>
	uint8_t dst_group_id = (group != NULL) ? group->data->dst_group_id :
   15188:	f04f 08ff 	mov.w	r8, #255	; 0xff
	NRF_RPC_ERR("Error %s reported %d, group %s, id 0x%02X, type 0x%02X",
   1518c:	b159      	cbz	r1, 151a6 <nrf_rpc_err+0xaa>
   1518e:	2901      	cmp	r1, #1
   15190:	d00b      	beq.n	151aa <nrf_rpc_err+0xae>
   15192:	4a16      	ldr	r2, [pc, #88]	; (151ec <nrf_rpc_err+0xf0>)
	uint8_t src_group_id = (group != NULL) ? group->data->src_group_id :
   15194:	46c2      	mov	sl, r8
	NRF_RPC_ERR("Error %s reported %d, group %s, id 0x%02X, type 0x%02X",
   15196:	4b16      	ldr	r3, [pc, #88]	; (151f0 <nrf_rpc_err+0xf4>)
   15198:	e7c4      	b.n	15124 <nrf_rpc_err+0x28>
   1519a:	4a14      	ldr	r2, [pc, #80]	; (151ec <nrf_rpc_err+0xf0>)
   1519c:	4b15      	ldr	r3, [pc, #84]	; (151f4 <nrf_rpc_err+0xf8>)
   1519e:	2901      	cmp	r1, #1
   151a0:	bf08      	it	eq
   151a2:	461a      	moveq	r2, r3
   151a4:	e7bd      	b.n	15122 <nrf_rpc_err+0x26>
   151a6:	4a0f      	ldr	r2, [pc, #60]	; (151e4 <nrf_rpc_err+0xe8>)
   151a8:	e7f4      	b.n	15194 <nrf_rpc_err+0x98>
   151aa:	4a12      	ldr	r2, [pc, #72]	; (151f4 <nrf_rpc_err+0xf8>)
   151ac:	e7f2      	b.n	15194 <nrf_rpc_err+0x98>
	report.code = code;
   151ae:	9705      	str	r7, [sp, #20]
	report.src = src;
   151b0:	f88d 401c 	strb.w	r4, [sp, #28]
	report.group = group;
   151b4:	9406      	str	r4, [sp, #24]
	report.id = id;
   151b6:	f88d 601d 	strb.w	r6, [sp, #29]
	report.packet_type = packet_type;
   151ba:	f88d 901e 	strb.w	r9, [sp, #30]
	if (global_err_handler != NULL) {
   151be:	4b0e      	ldr	r3, [pc, #56]	; (151f8 <nrf_rpc_err+0xfc>)
   151c0:	681b      	ldr	r3, [r3, #0]
   151c2:	b10b      	cbz	r3, 151c8 <nrf_rpc_err+0xcc>
		global_err_handler(&report);
   151c4:	a805      	add	r0, sp, #20
   151c6:	4798      	blx	r3
}
   151c8:	b008      	add	sp, #32
   151ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	report.code = code;
   151ce:	9705      	str	r7, [sp, #20]
	report.src = src;
   151d0:	f88d 501c 	strb.w	r5, [sp, #28]
	report.group = group;
   151d4:	9406      	str	r4, [sp, #24]
	report.id = id;
   151d6:	f88d 601d 	strb.w	r6, [sp, #29]
	report.packet_type = packet_type;
   151da:	f88d 901e 	strb.w	r9, [sp, #30]
	if (group != NULL && group->err_handler != NULL) {
   151de:	2c00      	cmp	r4, #0
   151e0:	d1cd      	bne.n	1517e <nrf_rpc_err+0x82>
   151e2:	e7ec      	b.n	151be <nrf_rpc_err+0xc2>
   151e4:	00024ea7 	.word	0x00024ea7
   151e8:	00024eba 	.word	0x00024eba
   151ec:	00024e9b 	.word	0x00024e9b
   151f0:	00022e94 	.word	0x00022e94
   151f4:	00024eb2 	.word	0x00024eb2
   151f8:	20006dfc 	.word	0x20006dfc

000151fc <handler_execute>:
{
   151fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15200:	461d      	mov	r5, r3
	return (addr > NRF_RPC_HEADER_SIZE) &&
   15202:	1f8b      	subs	r3, r1, #6
	NRF_RPC_ASSERT(packet_validate(packet));
   15204:	330c      	adds	r3, #12
{
   15206:	4606      	mov	r6, r0
   15208:	9f06      	ldr	r7, [sp, #24]
	NRF_RPC_ASSERT(packet_validate(packet));
   1520a:	d90a      	bls.n	15222 <handler_execute+0x26>
   1520c:	491d      	ldr	r1, [pc, #116]	; (15284 <handler_execute+0x88>)
   1520e:	f240 128b 	movw	r2, #395	; 0x18b
   15212:	481d      	ldr	r0, [pc, #116]	; (15288 <handler_execute+0x8c>)
   15214:	f006 f87c 	bl	1b310 <assert_print>
   15218:	f240 118b 	movw	r1, #395	; 0x18b
	NRF_RPC_ASSERT(array != NULL);
   1521c:	4819      	ldr	r0, [pc, #100]	; (15284 <handler_execute+0x88>)
   1521e:	f006 f870 	bl	1b302 <assert_post_action>
   15222:	b945      	cbnz	r5, 15236 <handler_execute+0x3a>
   15224:	4917      	ldr	r1, [pc, #92]	; (15284 <handler_execute+0x88>)
   15226:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   1522a:	4817      	ldr	r0, [pc, #92]	; (15288 <handler_execute+0x8c>)
   1522c:	f006 f870 	bl	1b310 <assert_print>
   15230:	f44f 71c6 	mov.w	r1, #396	; 0x18c
   15234:	e7f2      	b.n	1521c <handler_execute+0x20>
	for (NRF_RPC_AUTO_ARR_FOR(iter, decoder, array,
   15236:	462c      	mov	r4, r5
   15238:	f854 3b04 	ldr.w	r3, [r4], #4
   1523c:	42a3      	cmp	r3, r4
   1523e:	d815      	bhi.n	1526c <handler_execute+0x70>
	nrf_rpc_decoding_done(group, packet);
   15240:	4638      	mov	r0, r7
   15242:	f7ff ff05 	bl	15050 <nrf_rpc_decoding_done>
	NRF_RPC_ERR("Unknown command or event received");
   15246:	2145      	movs	r1, #69	; 0x45
   15248:	4810      	ldr	r0, [pc, #64]	; (1528c <handler_execute+0x90>)
   1524a:	f006 f875 	bl	1b338 <z_log_minimal_printk>
	nrf_rpc_err(-NRF_ENOENT, NRF_RPC_ERR_SRC_RECV, group, id,
   1524e:	687a      	ldr	r2, [r7, #4]
   15250:	4633      	mov	r3, r6
   15252:	1b52      	subs	r2, r2, r5
   15254:	bf18      	it	ne
   15256:	2201      	movne	r2, #1
   15258:	01d2      	lsls	r2, r2, #7
   1525a:	9206      	str	r2, [sp, #24]
   1525c:	2100      	movs	r1, #0
   1525e:	463a      	mov	r2, r7
}
   15260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	nrf_rpc_err(-NRF_ENOENT, NRF_RPC_ERR_SRC_RECV, group, id,
   15264:	f06f 0001 	mvn.w	r0, #1
   15268:	f7ff bf48 	b.w	150fc <nrf_rpc_err>
		if (id == decoder->id) {
   1526c:	7820      	ldrb	r0, [r4, #0]
   1526e:	42b0      	cmp	r0, r6
   15270:	d106      	bne.n	15280 <handler_execute+0x84>
			decoder->handler(group, packet, len, decoder->handler_data);
   15272:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   15276:	4638      	mov	r0, r7
   15278:	46ac      	mov	ip, r5
}
   1527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			decoder->handler(group, packet, len, decoder->handler_data);
   1527e:	4760      	bx	ip
	for (NRF_RPC_AUTO_ARR_FOR(iter, decoder, array,
   15280:	340c      	adds	r4, #12
   15282:	e7db      	b.n	1523c <handler_execute+0x40>
   15284:	00024e75 	.word	0x00024e75
   15288:	000221f8 	.word	0x000221f8
   1528c:	00024ef6 	.word	0x00024ef6

00015290 <receive_handler>:
{
   15290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len < NRF_RPC_HEADER_SIZE) {
   15294:	2a04      	cmp	r2, #4
{
   15296:	4606      	mov	r6, r0
   15298:	460f      	mov	r7, r1
   1529a:	b085      	sub	sp, #20
	if (len < NRF_RPC_HEADER_SIZE) {
   1529c:	d80f      	bhi.n	152be <receive_handler+0x2e>
		hdr->id = NRF_RPC_ID_UNKNOWN;
   1529e:	f04f 0aff 	mov.w	sl, #255	; 0xff
		hdr->type = NRF_RPC_ID_UNKNOWN;
   152a2:	46d1      	mov	r9, sl
		NRF_RPC_ERR("Packet too small");
   152a4:	2145      	movs	r1, #69	; 0x45
   152a6:	4897      	ldr	r0, [pc, #604]	; (15504 <receive_handler+0x274>)
   152a8:	f006 f846 	bl	1b338 <z_log_minimal_printk>
	return (transport->api->rx_buf_free == NULL);
   152ac:	6833      	ldr	r3, [r6, #0]
   152ae:	691b      	ldr	r3, [r3, #16]
	if (!auto_free_rx_buf(transport)) {
   152b0:	2b00      	cmp	r3, #0
   152b2:	f000 8123 	beq.w	154fc <receive_handler+0x26c>
   152b6:	2400      	movs	r4, #0
			err = -NRF_EBADMSG;
   152b8:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   152bc:	e067      	b.n	1538e <receive_handler+0xfe>
	if (packet[0] & 0x80) {
   152be:	f997 0000 	ldrsb.w	r0, [r7]
   152c2:	f891 9000 	ldrb.w	r9, [r1]
   152c6:	2800      	cmp	r0, #0
	hdr->id = packet[1];
   152c8:	f891 a001 	ldrb.w	sl, [r1, #1]
	hdr->dst_group_id = packet[4];
   152cc:	793b      	ldrb	r3, [r7, #4]
	hdr->dst = packet[2];
   152ce:	7889      	ldrb	r1, [r1, #2]
	if (packet[0] & 0x80) {
   152d0:	da0c      	bge.n	152ec <receive_handler+0x5c>
	if (group_id >= group_count) {
   152d2:	488d      	ldr	r0, [pc, #564]	; (15508 <receive_handler+0x278>)
   152d4:	7800      	ldrb	r0, [r0, #0]
   152d6:	4298      	cmp	r0, r3
   152d8:	d86d      	bhi.n	153b6 <receive_handler+0x126>
		hdr->type = packet[0] & 0x80;
   152da:	f04f 0980 	mov.w	r9, #128	; 0x80
			NRF_RPC_ERR("Invalid group id");
   152de:	2145      	movs	r1, #69	; 0x45
   152e0:	488a      	ldr	r0, [pc, #552]	; (1550c <receive_handler+0x27c>)
		NRF_RPC_ERR("Initialization packet does not contain remote group strid");
   152e2:	f006 f829 	bl	1b338 <z_log_minimal_printk>
	return (transport->api->rx_buf_free == NULL);
   152e6:	6833      	ldr	r3, [r6, #0]
   152e8:	691b      	ldr	r3, [r3, #16]
   152ea:	e7e1      	b.n	152b0 <receive_handler+0x20>
	if (hdr.type == NRF_RPC_PACKET_TYPE_CMD ||
   152ec:	f1b9 0f00 	cmp.w	r9, #0
   152f0:	d053      	beq.n	1539a <receive_handler+0x10a>
	    hdr.type == NRF_RPC_PACKET_TYPE_EVT ||
   152f2:	f1b9 0f02 	cmp.w	r9, #2
	hdr->src_group_id = packet[3];
   152f6:	f897 b003 	ldrb.w	fp, [r7, #3]
	    hdr.type == NRF_RPC_PACKET_TYPE_EVT ||
   152fa:	d038      	beq.n	1536e <receive_handler+0xde>
	    hdr.type == NRF_RPC_PACKET_TYPE_ACK ||
   152fc:	f1b9 0f01 	cmp.w	r9, #1
   15300:	d018      	beq.n	15334 <receive_handler+0xa4>
	    hdr.type == NRF_RPC_PACKET_TYPE_RSP ||
   15302:	f1b9 0f03 	cmp.w	r9, #3
   15306:	d160      	bne.n	153ca <receive_handler+0x13a>
	if (group_id >= group_count) {
   15308:	497f      	ldr	r1, [pc, #508]	; (15508 <receive_handler+0x278>)
   1530a:	7809      	ldrb	r1, [r1, #0]
   1530c:	4299      	cmp	r1, r3
   1530e:	d9e6      	bls.n	152de <receive_handler+0x4e>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   15310:	2404      	movs	r4, #4
   15312:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   15316:	4b7e      	ldr	r3, [pc, #504]	; (15510 <receive_handler+0x280>)
		if (len >= NRF_RPC_HEADER_SIZE + sizeof(int)) {
   15318:	2a08      	cmp	r2, #8
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   1531a:	441c      	add	r4, r3
		if (len >= NRF_RPC_HEADER_SIZE + sizeof(int)) {
   1531c:	f200 8098 	bhi.w	15450 <receive_handler+0x1c0>
		remote_err = -NRF_EBADMSG;
   15320:	f06f 004c 	mvn.w	r0, #76	; 0x4c
		nrf_rpc_err(remote_err, NRF_RPC_ERR_SRC_REMOTE, group, hdr.id,
   15324:	23ff      	movs	r3, #255	; 0xff
   15326:	4622      	mov	r2, r4
   15328:	9300      	str	r3, [sp, #0]
   1532a:	2102      	movs	r1, #2
   1532c:	4653      	mov	r3, sl
   1532e:	f7ff fee5 	bl	150fc <nrf_rpc_err>
   15332:	e086      	b.n	15442 <receive_handler+0x1b2>
	if (group_id >= group_count) {
   15334:	4874      	ldr	r0, [pc, #464]	; (15508 <receive_handler+0x278>)
   15336:	7800      	ldrb	r0, [r0, #0]
   15338:	4298      	cmp	r0, r3
   1533a:	d9d0      	bls.n	152de <receive_handler+0x4e>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   1533c:	2404      	movs	r4, #4
   1533e:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   15342:	4b73      	ldr	r3, [pc, #460]	; (15510 <receive_handler+0x280>)
   15344:	441c      	add	r4, r3
	if (id >= CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE) {
   15346:	2907      	cmp	r1, #7
   15348:	d94a      	bls.n	153e0 <receive_handler+0x150>
			NRF_RPC_ERR("Invalid ctx id in received packet");
   1534a:	2145      	movs	r1, #69	; 0x45
   1534c:	4871      	ldr	r0, [pc, #452]	; (15514 <receive_handler+0x284>)
   1534e:	f005 fff3 	bl	1b338 <z_log_minimal_printk>
	return (transport->api->rx_buf_free == NULL);
   15352:	6833      	ldr	r3, [r6, #0]
			err = -NRF_EBADMSG;
   15354:	f06f 054c 	mvn.w	r5, #76	; 0x4c
	return (transport->api->rx_buf_free == NULL);
   15358:	691b      	ldr	r3, [r3, #16]
	if (!auto_free_rx_buf(transport)) {
   1535a:	b9c3      	cbnz	r3, 1538e <receive_handler+0xfe>
		nrf_rpc_err(err, NRF_RPC_ERR_SRC_RECV, group, hdr.id,
   1535c:	4653      	mov	r3, sl
   1535e:	4622      	mov	r2, r4
   15360:	2100      	movs	r1, #0
   15362:	4628      	mov	r0, r5
   15364:	f8cd 9000 	str.w	r9, [sp]
   15368:	f7ff fec8 	bl	150fc <nrf_rpc_err>
   1536c:	e06d      	b.n	1544a <receive_handler+0x1ba>
	if (group_id >= group_count) {
   1536e:	4a66      	ldr	r2, [pc, #408]	; (15508 <receive_handler+0x278>)
   15370:	7812      	ldrb	r2, [r2, #0]
   15372:	429a      	cmp	r2, r3
   15374:	d9b3      	bls.n	152de <receive_handler+0x4e>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   15376:	2404      	movs	r4, #4
   15378:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   1537c:	4b64      	ldr	r3, [pc, #400]	; (15510 <receive_handler+0x280>)
   1537e:	441c      	add	r4, r3
		if (group->ack_handler != NULL) {
   15380:	6925      	ldr	r5, [r4, #16]
   15382:	2d00      	cmp	r5, #0
   15384:	d15a      	bne.n	1543c <receive_handler+0x1ac>
	return (transport->api->rx_buf_free == NULL);
   15386:	6833      	ldr	r3, [r6, #0]
   15388:	691b      	ldr	r3, [r3, #16]
	if (!auto_free_rx_buf(transport)) {
   1538a:	2b00      	cmp	r3, #0
   1538c:	d05d      	beq.n	1544a <receive_handler+0x1ba>
		transport->api->rx_buf_free(transport, (void *)packet);
   1538e:	4639      	mov	r1, r7
   15390:	4630      	mov	r0, r6
   15392:	4798      	blx	r3
	if (err < 0) {
   15394:	2d00      	cmp	r5, #0
   15396:	d058      	beq.n	1544a <receive_handler+0x1ba>
   15398:	e7e0      	b.n	1535c <receive_handler+0xcc>
	if (group_id >= group_count) {
   1539a:	495b      	ldr	r1, [pc, #364]	; (15508 <receive_handler+0x278>)
   1539c:	7809      	ldrb	r1, [r1, #0]
   1539e:	4299      	cmp	r1, r3
   153a0:	d99d      	bls.n	152de <receive_handler+0x4e>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   153a2:	2404      	movs	r4, #4
   153a4:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   153a8:	4b59      	ldr	r3, [pc, #356]	; (15510 <receive_handler+0x280>)
   153aa:	441c      	add	r4, r3
		nrf_rpc_os_thread_pool_send(packet, len);
   153ac:	4611      	mov	r1, r2
   153ae:	4638      	mov	r0, r7
   153b0:	f7fd fae0 	bl	12974 <nrf_rpc_os_thread_pool_send>
   153b4:	e034      	b.n	15420 <receive_handler+0x190>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   153b6:	2404      	movs	r4, #4
   153b8:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   153bc:	4b54      	ldr	r3, [pc, #336]	; (15510 <receive_handler+0x280>)
	if (hdr.type == NRF_RPC_PACKET_TYPE_CMD &&
   153be:	29ff      	cmp	r1, #255	; 0xff
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   153c0:	441c      	add	r4, r3
	if (hdr.type == NRF_RPC_PACKET_TYPE_CMD &&
   153c2:	d0f3      	beq.n	153ac <receive_handler+0x11c>
	switch (hdr.type) {
   153c4:	f04f 0980 	mov.w	r9, #128	; 0x80
   153c8:	e7bd      	b.n	15346 <receive_handler+0xb6>
   153ca:	f1b9 0f04 	cmp.w	r9, #4
   153ce:	d104      	bne.n	153da <receive_handler+0x14a>
	if (len < (NRF_RPC_HEADER_SIZE + NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE)) {
   153d0:	2a05      	cmp	r2, #5
   153d2:	d140      	bne.n	15456 <receive_handler+0x1c6>
		NRF_RPC_ERR("To small initialization packet");
   153d4:	2145      	movs	r1, #69	; 0x45
   153d6:	4850      	ldr	r0, [pc, #320]	; (15518 <receive_handler+0x288>)
   153d8:	e783      	b.n	152e2 <receive_handler+0x52>
		NRF_RPC_ERR("Invalid type of packet received");
   153da:	2145      	movs	r1, #69	; 0x45
   153dc:	484f      	ldr	r0, [pc, #316]	; (1551c <receive_handler+0x28c>)
   153de:	e780      	b.n	152e2 <receive_handler+0x52>
		if (cmd_ctx->handler != NULL &&
   153e0:	252c      	movs	r5, #44	; 0x2c
   153e2:	4b4f      	ldr	r3, [pc, #316]	; (15520 <receive_handler+0x290>)
   153e4:	fb05 3001 	mla	r0, r5, r1, r3
   153e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			nrf_rpc_os_msg_set(&cmd_ctx->recv_msg,
   153ec:	f100 0b0c 	add.w	fp, r0, #12
		if (cmd_ctx->handler != NULL &&
   153f0:	f1b8 0f00 	cmp.w	r8, #0
   153f4:	d010      	beq.n	15418 <receive_handler+0x188>
   153f6:	f1b9 0f01 	cmp.w	r9, #1
   153fa:	d10d      	bne.n	15418 <receive_handler+0x188>
	return (transport->api->rx_buf_free == NULL);
   153fc:	6833      	ldr	r3, [r6, #0]
		    hdr.type == NRF_RPC_PACKET_TYPE_RSP &&
   153fe:	691d      	ldr	r5, [r3, #16]
   15400:	b955      	cbnz	r5, 15418 <receive_handler+0x188>
			cmd_ctx->handler(group, &packet[NRF_RPC_HEADER_SIZE],
   15402:	6883      	ldr	r3, [r0, #8]
   15404:	1d79      	adds	r1, r7, #5
   15406:	4620      	mov	r0, r4
   15408:	3a05      	subs	r2, #5
   1540a:	47c0      	blx	r8
			nrf_rpc_os_msg_set(&cmd_ctx->recv_msg,
   1540c:	462a      	mov	r2, r5
   1540e:	4649      	mov	r1, r9
   15410:	4658      	mov	r0, fp
   15412:	f008 fab0 	bl	1d976 <nrf_rpc_os_msg_set>
	return (transport->api->rx_buf_free == NULL);
   15416:	e7b6      	b.n	15386 <receive_handler+0xf6>
			nrf_rpc_os_msg_set(&cmd_ctx->recv_msg, packet, len);
   15418:	4639      	mov	r1, r7
   1541a:	4658      	mov	r0, fp
   1541c:	f008 faab 	bl	1d976 <nrf_rpc_os_msg_set>
	return (transport->api->rx_buf_free == NULL);
   15420:	6833      	ldr	r3, [r6, #0]
		if (auto_free_rx_buf(transport)) {
   15422:	691b      	ldr	r3, [r3, #16]
   15424:	b98b      	cbnz	r3, 1544a <receive_handler+0x1ba>

static inline int nrf_rpc_os_event_wait(struct nrf_rpc_os_event *event, int timeout)
{
	int err;

	err = k_sem_take(&event->sem, (timeout == NRF_RPC_OS_WAIT_FOREVER) ?
   15426:	68a0      	ldr	r0, [r4, #8]
   15428:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   1542a:	f04f 32ff 	mov.w	r2, #4294967295
   1542e:	f04f 33ff 	mov.w	r3, #4294967295
}
   15432:	b005      	add	sp, #20
   15434:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15438:	f001 bb12 	b.w	16a60 <z_impl_k_sem_take>
			group->ack_handler(hdr.id, group->ack_handler_data);
   1543c:	4650      	mov	r0, sl
   1543e:	6961      	ldr	r1, [r4, #20]
   15440:	47a8      	blx	r5
	return (transport->api->rx_buf_free == NULL);
   15442:	6833      	ldr	r3, [r6, #0]
   15444:	691b      	ldr	r3, [r3, #16]
	if (!auto_free_rx_buf(transport)) {
   15446:	2b00      	cmp	r3, #0
   15448:	d152      	bne.n	154f0 <receive_handler+0x260>
}
   1544a:	b005      	add	sp, #20
   1544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remote_err = *(int *)(&packet[NRF_RPC_HEADER_SIZE]);
   15450:	f8d7 0005 	ldr.w	r0, [r7, #5]
   15454:	e766      	b.n	15324 <receive_handler+0x94>
	init_data->min_version = protocol_version->min_version;
   15456:	7979      	ldrb	r1, [r7, #5]
	if (init_data->strid_len == 0) {
   15458:	f1b2 0806 	subs.w	r8, r2, #6
	init_data->min_version = protocol_version->min_version;
   1545c:	f001 030f 	and.w	r3, r1, #15
	init_data->max_version = protocol_version->max_version;
   15460:	ea4f 1111 	mov.w	r1, r1, lsr #4
	if (init_data->strid_len == 0) {
   15464:	d102      	bne.n	1546c <receive_handler+0x1dc>
		NRF_RPC_ERR("Initialization packet does not contain remote group strid");
   15466:	2145      	movs	r1, #69	; 0x45
   15468:	482e      	ldr	r0, [pc, #184]	; (15524 <receive_handler+0x294>)
   1546a:	e73a      	b.n	152e2 <receive_handler+0x52>
	if ((protocol_version >= init_data->min_version) &&
   1546c:	b9a3      	cbnz	r3, 15498 <receive_handler+0x208>
	packet += NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE;
   1546e:	1dbb      	adds	r3, r7, #6
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15470:	4c2d      	ldr	r4, [pc, #180]	; (15528 <receive_handler+0x298>)
	packet += NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE;
   15472:	9303      	str	r3, [sp, #12]
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15474:	4b2d      	ldr	r3, [pc, #180]	; (1552c <receive_handler+0x29c>)
   15476:	429c      	cmp	r4, r3
   15478:	d31b      	bcc.n	154b2 <receive_handler+0x222>
	NRF_RPC_ERR("Remote group does not match local group");
   1547a:	2145      	movs	r1, #69	; 0x45
   1547c:	482c      	ldr	r0, [pc, #176]	; (15530 <receive_handler+0x2a0>)
   1547e:	f005 ff5b 	bl	1b338 <z_log_minimal_printk>
		NRF_RPC_ASSERT(false);
   15482:	492c      	ldr	r1, [pc, #176]	; (15534 <receive_handler+0x2a4>)
   15484:	482c      	ldr	r0, [pc, #176]	; (15538 <receive_handler+0x2a8>)
   15486:	f240 2257 	movw	r2, #599	; 0x257
   1548a:	f005 ff41 	bl	1b310 <assert_print>
   1548e:	f240 2157 	movw	r1, #599	; 0x257
   15492:	4828      	ldr	r0, [pc, #160]	; (15534 <receive_handler+0x2a4>)
   15494:	f005 ff35 	bl	1b302 <assert_post_action>
		NRF_RPC_ERR("Unsupported protocol version. Local version: %d, "
   15498:	9100      	str	r1, [sp, #0]
   1549a:	2200      	movs	r2, #0
   1549c:	2145      	movs	r1, #69	; 0x45
   1549e:	4827      	ldr	r0, [pc, #156]	; (1553c <receive_handler+0x2ac>)
   154a0:	f005 ff4a 	bl	1b338 <z_log_minimal_printk>
	return (transport->api->rx_buf_free == NULL);
   154a4:	6833      	ldr	r3, [r6, #0]
   154a6:	691b      	ldr	r3, [r3, #16]
	if (!auto_free_rx_buf(transport)) {
   154a8:	bb23      	cbnz	r3, 154f4 <receive_handler+0x264>
	*group = NULL;
   154aa:	461c      	mov	r4, r3
		return -NRF_EPROTONOSUPPORT;
   154ac:	f06f 052a 	mvn.w	r5, #42	; 0x2a
   154b0:	e754      	b.n	1535c <receive_handler+0xcc>
		if ((strid_len == strlen(group->strid)) &&
   154b2:	69a0      	ldr	r0, [r4, #24]
   154b4:	f7f0 f9b4 	bl	5820 <strlen>
   154b8:	4580      	cmp	r8, r0
   154ba:	d117      	bne.n	154ec <receive_handler+0x25c>
		    (memcmp(strid, group->strid, strid_len) == 0)) {
   154bc:	4642      	mov	r2, r8
   154be:	69a1      	ldr	r1, [r4, #24]
   154c0:	9803      	ldr	r0, [sp, #12]
   154c2:	f009 ff6f 	bl	1f3a4 <memcmp>
		if ((strid_len == strlen(group->strid)) &&
   154c6:	4605      	mov	r5, r0
   154c8:	b980      	cbnz	r0, 154ec <receive_handler+0x25c>
	initialized_group_count++;
   154ca:	4a1d      	ldr	r2, [pc, #116]	; (15540 <receive_handler+0x2b0>)
			group->data->dst_group_id = src_group_id;
   154cc:	68a3      	ldr	r3, [r4, #8]
   154ce:	f883 b001 	strb.w	fp, [r3, #1]
	initialized_group_count++;
   154d2:	7813      	ldrb	r3, [r2, #0]
   154d4:	3301      	adds	r3, #1
   154d6:	b2db      	uxtb	r3, r3
   154d8:	7013      	strb	r3, [r2, #0]
	if (initialized_group_count == group_count) {
   154da:	4a0b      	ldr	r2, [pc, #44]	; (15508 <receive_handler+0x278>)
   154dc:	7812      	ldrb	r2, [r2, #0]
   154de:	429a      	cmp	r2, r3
   154e0:	f47f af51 	bne.w	15386 <receive_handler+0xf6>
	z_impl_k_sem_give(sem);
   154e4:	4817      	ldr	r0, [pc, #92]	; (15544 <receive_handler+0x2b4>)
   154e6:	f001 fa7f 	bl	169e8 <z_impl_k_sem_give>
   154ea:	e74c      	b.n	15386 <receive_handler+0xf6>
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   154ec:	3420      	adds	r4, #32
   154ee:	e7c1      	b.n	15474 <receive_handler+0x1e4>
	return 0;
   154f0:	2500      	movs	r5, #0
   154f2:	e74c      	b.n	1538e <receive_handler+0xfe>
	*group = NULL;
   154f4:	2400      	movs	r4, #0
		return -NRF_EPROTONOSUPPORT;
   154f6:	f06f 052a 	mvn.w	r5, #42	; 0x2a
   154fa:	e748      	b.n	1538e <receive_handler+0xfe>
	if (!auto_free_rx_buf(transport)) {
   154fc:	461c      	mov	r4, r3
   154fe:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   15502:	e72b      	b.n	1535c <receive_handler+0xcc>
   15504:	00024f1d 	.word	0x00024f1d
   15508:	2000736f 	.word	0x2000736f
   1550c:	00024f33 	.word	0x00024f33
   15510:	00026004 	.word	0x00026004
   15514:	00024f6e 	.word	0x00024f6e
   15518:	00024f95 	.word	0x00024f95
   1551c:	00024f49 	.word	0x00024f49
   15520:	20006e18 	.word	0x20006e18
   15524:	00024fb9 	.word	0x00024fb9
   15528:	00026008 	.word	0x00026008
   1552c:	00026028 	.word	0x00026028
   15530:	00025055 	.word	0x00025055
   15534:	00024e75 	.word	0x00024e75
   15538:	000221f8 	.word	0x000221f8
   1553c:	00024ff8 	.word	0x00024ff8
   15540:	2000736e 	.word	0x2000736e
   15544:	20006e00 	.word	0x20006e00

00015548 <nrf_rpc_init>:
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15548:	2200      	movs	r2, #0
{
   1554a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	global_err_handler = err_handler;
   1554e:	4b59      	ldr	r3, [pc, #356]	; (156b4 <nrf_rpc_init+0x16c>)
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15550:	4f59      	ldr	r7, [pc, #356]	; (156b8 <nrf_rpc_init+0x170>)
	global_err_handler = err_handler;
   15552:	6018      	str	r0, [r3, #0]
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15554:	4b59      	ldr	r3, [pc, #356]	; (156bc <nrf_rpc_init+0x174>)
{
   15556:	b085      	sub	sp, #20
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   15558:	42bb      	cmp	r3, r7
   1555a:	b2d1      	uxtb	r1, r2
   1555c:	d33b      	bcc.n	155d6 <nrf_rpc_init+0x8e>
	group_count = group_id;
   1555e:	4b58      	ldr	r3, [pc, #352]	; (156c0 <nrf_rpc_init+0x178>)
	memset(&cmd_ctx_pool, 0, sizeof(cmd_ctx_pool));
   15560:	f44f 72b0 	mov.w	r2, #352	; 0x160
	group_count = group_id;
   15564:	7019      	strb	r1, [r3, #0]
	memset(&cmd_ctx_pool, 0, sizeof(cmd_ctx_pool));
   15566:	4857      	ldr	r0, [pc, #348]	; (156c4 <nrf_rpc_init+0x17c>)
   15568:	2100      	movs	r1, #0
   1556a:	f009 ff52 	bl	1f412 <memset>
	err = nrf_rpc_os_init(execute_packet);
   1556e:	4856      	ldr	r0, [pc, #344]	; (156c8 <nrf_rpc_init+0x180>)
   15570:	f7fd f9a0 	bl	128b4 <nrf_rpc_os_init>
	if (err < 0) {
   15574:	2800      	cmp	r0, #0
   15576:	db2b      	blt.n	155d0 <nrf_rpc_init+0x88>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15578:	2201      	movs	r2, #1
   1557a:	2100      	movs	r1, #0
   1557c:	4853      	ldr	r0, [pc, #332]	; (156cc <nrf_rpc_init+0x184>)
   1557e:	f009 fd63 	bl	1f048 <z_impl_k_sem_init>
	if (err < 0) {
   15582:	2800      	cmp	r0, #0
   15584:	db24      	blt.n	155d0 <nrf_rpc_init+0x88>
	for (i = 0; i < CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE; i++) {
   15586:	2400      	movs	r4, #0
   15588:	4d51      	ldr	r5, [pc, #324]	; (156d0 <nrf_rpc_init+0x188>)
		cmd_ctx_pool[i].id = i;
   1558a:	f805 4c0c 	strb.w	r4, [r5, #-12]
   1558e:	2201      	movs	r2, #1
   15590:	2100      	movs	r1, #0
   15592:	4628      	mov	r0, r5
   15594:	f009 fd58 	bl	1f048 <z_impl_k_sem_init>
		if (err < 0) {
   15598:	2800      	cmp	r0, #0
   1559a:	db19      	blt.n	155d0 <nrf_rpc_init+0x88>
	for (i = 0; i < CONFIG_NRF_RPC_CMD_CTX_POOL_SIZE; i++) {
   1559c:	3401      	adds	r4, #1
   1559e:	2c08      	cmp	r4, #8
   155a0:	f105 052c 	add.w	r5, r5, #44	; 0x2c
   155a4:	d1f1      	bne.n	1558a <nrf_rpc_init+0x42>
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   155a6:	4c45      	ldr	r4, [pc, #276]	; (156bc <nrf_rpc_init+0x174>)
			NRF_RPC_ERR("Failed to send group init packet for group id: %d strid: %s",
   155a8:	f8df a138 	ldr.w	sl, [pc, #312]	; 156e4 <nrf_rpc_init+0x19c>
			NRF_RPC_ERR("Failed to initialize transport, err: %d", err);
   155ac:	f8df b138 	ldr.w	fp, [pc, #312]	; 156e8 <nrf_rpc_init+0x1a0>
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   155b0:	42bc      	cmp	r4, r7
   155b2:	d318      	bcc.n	155e6 <nrf_rpc_init+0x9e>
	return z_impl_k_sem_take(sem, timeout);
   155b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   155b8:	2300      	movs	r3, #0
   155ba:	4844      	ldr	r0, [pc, #272]	; (156cc <nrf_rpc_init+0x184>)
   155bc:	f001 fa50 	bl	16a60 <z_impl_k_sem_take>
							K_FOREVER : K_MSEC(timeout));
	if (err == -EAGAIN) {
   155c0:	300b      	adds	r0, #11
   155c2:	d175      	bne.n	156b0 <nrf_rpc_init+0x168>
		NRF_RPC_ERR("Not all groups are ready to use.");
   155c4:	4843      	ldr	r0, [pc, #268]	; (156d4 <nrf_rpc_init+0x18c>)
   155c6:	2145      	movs	r1, #69	; 0x45
   155c8:	f005 feb6 	bl	1b338 <z_log_minimal_printk>
		return -NRF_EAGAIN;
   155cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   155d0:	b005      	add	sp, #20
   155d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (group_id >= 0xFF) {
   155d6:	3201      	adds	r2, #1
   155d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		struct nrf_rpc_group_data *data = group->data;
   155dc:	6898      	ldr	r0, [r3, #8]
		if (group_id >= 0xFF) {
   155de:	d064      	beq.n	156aa <nrf_rpc_init+0x162>
		data->src_group_id = group_id;
   155e0:	7001      	strb	r1, [r0, #0]
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   155e2:	3320      	adds	r3, #32
   155e4:	e7b8      	b.n	15558 <nrf_rpc_init+0x10>
		struct nrf_rpc_group_data *data = group->data;
   155e6:	e9d4 8502 	ldrd	r8, r5, [r4, #8]
		NRF_RPC_ASSERT(transport != NULL);
   155ea:	b955      	cbnz	r5, 15602 <nrf_rpc_init+0xba>
   155ec:	493a      	ldr	r1, [pc, #232]	; (156d8 <nrf_rpc_init+0x190>)
   155ee:	483b      	ldr	r0, [pc, #236]	; (156dc <nrf_rpc_init+0x194>)
   155f0:	f240 1261 	movw	r2, #353	; 0x161
   155f4:	f005 fe8c 	bl	1b310 <assert_print>
   155f8:	f240 1161 	movw	r1, #353	; 0x161
   155fc:	4836      	ldr	r0, [pc, #216]	; (156d8 <nrf_rpc_init+0x190>)
   155fe:	f005 fe80 	bl	1b302 <assert_post_action>
		err = transport->api->init(transport, receive_cb, NULL);
   15602:	682b      	ldr	r3, [r5, #0]
   15604:	2200      	movs	r2, #0
   15606:	4628      	mov	r0, r5
   15608:	681b      	ldr	r3, [r3, #0]
   1560a:	4935      	ldr	r1, [pc, #212]	; (156e0 <nrf_rpc_init+0x198>)
   1560c:	4798      	blx	r3
		if (err) {
   1560e:	4602      	mov	r2, r0
   15610:	b128      	cbz	r0, 1561e <nrf_rpc_init+0xd6>
			NRF_RPC_ERR("Failed to initialize transport, err: %d", err);
   15612:	2145      	movs	r1, #69	; 0x45
   15614:	4658      	mov	r0, fp
   15616:	f005 fe8f 	bl	1b338 <z_log_minimal_printk>
	for (NRF_RPC_AUTO_ARR_FOR(iter, group, &nrf_rpc_groups_array,
   1561a:	3420      	adds	r4, #32
   1561c:	e7c8      	b.n	155b0 <nrf_rpc_init+0x68>
	return (transport->api->rx_buf_free == NULL);
   1561e:	682b      	ldr	r3, [r5, #0]
		if (auto_free_rx_buf(transport)) {
   15620:	6919      	ldr	r1, [r3, #16]
   15622:	b1c1      	cbz	r1, 15656 <nrf_rpc_init+0x10e>
		group->data->transport_initialized = true;
   15624:	2201      	movs	r2, #1
   15626:	68a3      	ldr	r3, [r4, #8]
   15628:	771a      	strb	r2, [r3, #28]
	hdr.src_group_id = group->data->src_group_id;
   1562a:	68a3      	ldr	r3, [r4, #8]
	len = strlen(group->strid) + NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE;
   1562c:	69a0      	ldr	r0, [r4, #24]
	hdr.src_group_id = group->data->src_group_id;
   1562e:	f893 9000 	ldrb.w	r9, [r3]
	len = strlen(group->strid) + NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE;
   15632:	f7f0 f8f5 	bl	5820 <strlen>
	nrf_rpc_alloc_tx_buf(group, &tx_buf, len);
   15636:	a903      	add	r1, sp, #12
   15638:	1c42      	adds	r2, r0, #1
	len = strlen(group->strid) + NRF_RPC_PROTOCOL_VERSION_FIELD_SIZE;
   1563a:	4606      	mov	r6, r0
	nrf_rpc_alloc_tx_buf(group, &tx_buf, len);
   1563c:	4620      	mov	r0, r4
   1563e:	f7ff fd1d 	bl	1507c <nrf_rpc_alloc_tx_buf>
	if (tx_buf == NULL) {
   15642:	9d03      	ldr	r5, [sp, #12]
   15644:	b97d      	cbnz	r5, 15666 <nrf_rpc_init+0x11e>
			NRF_RPC_ERR("Failed to send group init packet for group id: %d strid: %s",
   15646:	2145      	movs	r1, #69	; 0x45
   15648:	4650      	mov	r0, sl
   1564a:	69a3      	ldr	r3, [r4, #24]
   1564c:	f898 2000 	ldrb.w	r2, [r8]
   15650:	f005 fe72 	bl	1b338 <z_log_minimal_printk>
			continue;
   15654:	e7e1      	b.n	1561a <nrf_rpc_init+0xd2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15656:	2201      	movs	r2, #1
   15658:	f108 0004 	add.w	r0, r8, #4
   1565c:	f009 fcf4 	bl	1f048 <z_impl_k_sem_init>
			if (err < 0) {
   15660:	2800      	cmp	r0, #0
   15662:	dadf      	bge.n	15624 <nrf_rpc_init+0xdc>
   15664:	e7d9      	b.n	1561a <nrf_rpc_init+0xd2>
	packet[0] = hdr->type;
   15666:	2204      	movs	r2, #4
	packet[3] = hdr->src_group_id;
   15668:	f805 9c02 	strb.w	r9, [r5, #-2]
	packet[0] = hdr->type;
   1566c:	f805 2c05 	strb.w	r2, [r5, #-5]
	packet[2] = hdr->dst;
   15670:	21ff      	movs	r1, #255	; 0xff
	packet[1] = hdr->id;
   15672:	2200      	movs	r2, #0
	protocol_version->min_version = NRF_RPC_PROTOCOL_VERSION;
   15674:	46a9      	mov	r9, r5
	packet[1] = hdr->id;
   15676:	f805 2c04 	strb.w	r2, [r5, #-4]
	packet[2] = hdr->dst;
   1567a:	f805 1c03 	strb.w	r1, [r5, #-3]
	packet[4] = hdr->dst_group_id;
   1567e:	f805 1c01 	strb.w	r1, [r5, #-1]
	protocol_version->min_version = NRF_RPC_PROTOCOL_VERSION;
   15682:	f809 2b01 	strb.w	r2, [r9], #1
	memcpy(packet, group->strid, strlen(group->strid));
   15686:	69a1      	ldr	r1, [r4, #24]
   15688:	4608      	mov	r0, r1
   1568a:	9101      	str	r1, [sp, #4]
   1568c:	f7f0 f8c8 	bl	5820 <strlen>
   15690:	9901      	ldr	r1, [sp, #4]
   15692:	4602      	mov	r2, r0
   15694:	4648      	mov	r0, r9
   15696:	f009 fe95 	bl	1f3c4 <memcpy>
	return send(group, tx_buf, NRF_RPC_HEADER_SIZE + len);
   1569a:	4620      	mov	r0, r4
   1569c:	1db2      	adds	r2, r6, #6
   1569e:	1f69      	subs	r1, r5, #5
   156a0:	f7ff fc90 	bl	14fc4 <send>
		if (err) {
   156a4:	2800      	cmp	r0, #0
   156a6:	d0b8      	beq.n	1561a <nrf_rpc_init+0xd2>
   156a8:	e7cd      	b.n	15646 <nrf_rpc_init+0xfe>
			return -NRF_ENOMEM;
   156aa:	f06f 000b 	mvn.w	r0, #11
   156ae:	e78f      	b.n	155d0 <nrf_rpc_init+0x88>
	}

	return 0;
   156b0:	2000      	movs	r0, #0
   156b2:	e78d      	b.n	155d0 <nrf_rpc_init+0x88>
   156b4:	20006dfc 	.word	0x20006dfc
   156b8:	00026028 	.word	0x00026028
   156bc:	00026008 	.word	0x00026008
   156c0:	2000736f 	.word	0x2000736f
   156c4:	20006e18 	.word	0x20006e18
   156c8:	0001eea1 	.word	0x0001eea1
   156cc:	20006e00 	.word	0x20006e00
   156d0:	20006e24 	.word	0x20006e24
   156d4:	000250f0 	.word	0x000250f0
   156d8:	00024e75 	.word	0x00024e75
   156dc:	000221f8 	.word	0x000221f8
   156e0:	00015291 	.word	0x00015291
   156e4:	000250af 	.word	0x000250af
   156e8:	00025082 	.word	0x00025082

000156ec <parse_incoming_packet>:
{
   156ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return (addr > NRF_RPC_HEADER_SIZE) &&
   156f0:	1f8b      	subs	r3, r1, #6
	NRF_RPC_ASSERT(packet_validate(packet));
   156f2:	330c      	adds	r3, #12
{
   156f4:	460d      	mov	r5, r1
   156f6:	4690      	mov	r8, r2
   156f8:	b085      	sub	sp, #20
	NRF_RPC_ASSERT(packet_validate(packet));
   156fa:	d90a      	bls.n	15712 <parse_incoming_packet+0x26>
   156fc:	4955      	ldr	r1, [pc, #340]	; (15854 <parse_incoming_packet+0x168>)
   156fe:	f240 12b5 	movw	r2, #437	; 0x1b5
   15702:	4855      	ldr	r0, [pc, #340]	; (15858 <parse_incoming_packet+0x16c>)
   15704:	f005 fe04 	bl	1b310 <assert_print>
   15708:	f240 11b5 	movw	r1, #437	; 0x1b5
	NRF_RPC_ASSERT(err >= 0);
   1570c:	4851      	ldr	r0, [pc, #324]	; (15854 <parse_incoming_packet+0x168>)
   1570e:	f005 fdf8 	bl	1b302 <assert_post_action>
	if (len < NRF_RPC_HEADER_SIZE) {
   15712:	2a04      	cmp	r2, #4
   15714:	d808      	bhi.n	15728 <parse_incoming_packet+0x3c>
	NRF_RPC_ASSERT(err >= 0);
   15716:	494f      	ldr	r1, [pc, #316]	; (15854 <parse_incoming_packet+0x168>)
   15718:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
   1571c:	484e      	ldr	r0, [pc, #312]	; (15858 <parse_incoming_packet+0x16c>)
   1571e:	f005 fdf7 	bl	1b310 <assert_print>
   15722:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   15726:	e7f1      	b.n	1570c <parse_incoming_packet+0x20>
	if (packet[0] & 0x80) {
   15728:	f991 3000 	ldrsb.w	r3, [r1]
   1572c:	780e      	ldrb	r6, [r1, #0]
   1572e:	2b00      	cmp	r3, #0
	hdr->id = packet[1];
   15730:	784f      	ldrb	r7, [r1, #1]
	hdr->dst_group_id = packet[4];
   15732:	f891 9004 	ldrb.w	r9, [r1, #4]
	if (packet[0] & 0x80) {
   15736:	da0c      	bge.n	15752 <parse_incoming_packet+0x66>
	if (group_id >= group_count) {
   15738:	4b48      	ldr	r3, [pc, #288]	; (1585c <parse_incoming_packet+0x170>)
   1573a:	781b      	ldrb	r3, [r3, #0]
   1573c:	454b      	cmp	r3, r9
   1573e:	d814      	bhi.n	1576a <parse_incoming_packet+0x7e>
	NRF_RPC_ASSERT(group != NULL);
   15740:	4944      	ldr	r1, [pc, #272]	; (15854 <parse_incoming_packet+0x168>)
   15742:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   15746:	4844      	ldr	r0, [pc, #272]	; (15858 <parse_incoming_packet+0x16c>)
   15748:	f005 fde2 	bl	1b310 <assert_print>
   1574c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15750:	e7dc      	b.n	1570c <parse_incoming_packet+0x20>
	if (hdr.type == NRF_RPC_PACKET_TYPE_RSP) {
   15752:	2e01      	cmp	r6, #1
   15754:	d127      	bne.n	157a6 <parse_incoming_packet+0xba>
		NRF_RPC_ASSERT(cmd_ctx != NULL);
   15756:	bb10      	cbnz	r0, 1579e <parse_incoming_packet+0xb2>
   15758:	493e      	ldr	r1, [pc, #248]	; (15854 <parse_incoming_packet+0x168>)
   1575a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1575e:	483e      	ldr	r0, [pc, #248]	; (15858 <parse_incoming_packet+0x16c>)
   15760:	f005 fdd6 	bl	1b310 <assert_print>
   15764:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   15768:	e7d0      	b.n	1570c <parse_incoming_packet+0x20>
		if (cmd_ctx == NULL) {
   1576a:	b378      	cbz	r0, 157cc <parse_incoming_packet+0xe0>
	struct nrf_rpc_cmd_ctx *allocated_ctx = NULL;
   1576c:	2400      	movs	r4, #0
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   1576e:	2304      	movs	r3, #4
   15770:	4a3b      	ldr	r2, [pc, #236]	; (15860 <parse_incoming_packet+0x174>)
   15772:	eb03 1349 	add.w	r3, r3, r9, lsl #5
   15776:	1899      	adds	r1, r3, r2
		hdr->src = packet[0] & 0x7F;
   15778:	f006 067f 	and.w	r6, r6, #127	; 0x7f
		cmd_ctx->remote_id = hdr.src;
   1577c:	7046      	strb	r6, [r0, #1]
		handler_execute(hdr.id, &packet[NRF_RPC_HEADER_SIZE],
   1577e:	9100      	str	r1, [sp, #0]
   15780:	58d3      	ldr	r3, [r2, r3]
   15782:	4638      	mov	r0, r7
   15784:	f1a8 0205 	sub.w	r2, r8, #5
   15788:	1d69      	adds	r1, r5, #5
   1578a:	f7ff fd37 	bl	151fc <handler_execute>
		if (allocated_ctx != NULL) {
   1578e:	b12c      	cbz	r4, 1579c <parse_incoming_packet+0xb0>
	z_impl_k_thread_custom_data_set(value);
   15790:	2000      	movs	r0, #0
   15792:	f000 fca1 	bl	160d8 <z_impl_k_thread_custom_data_set>
	nrf_rpc_os_ctx_pool_release(ctx->id);
   15796:	7820      	ldrb	r0, [r4, #0]
   15798:	f7fd f920 	bl	129dc <nrf_rpc_os_ctx_pool_release>
		return -NRF_ENOMEM;
   1579c:	2680      	movs	r6, #128	; 0x80
}
   1579e:	4630      	mov	r0, r6
   157a0:	b005      	add	sp, #20
   157a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (group_id >= group_count) {
   157a6:	4b2d      	ldr	r3, [pc, #180]	; (1585c <parse_incoming_packet+0x170>)
   157a8:	781b      	ldrb	r3, [r3, #0]
   157aa:	454b      	cmp	r3, r9
   157ac:	d9c8      	bls.n	15740 <parse_incoming_packet+0x54>
	return &NRF_RPC_AUTO_ARR_GET(&nrf_rpc_groups_array, group_id,
   157ae:	2404      	movs	r4, #4
   157b0:	4b2b      	ldr	r3, [pc, #172]	; (15860 <parse_incoming_packet+0x174>)
   157b2:	eb04 1449 	add.w	r4, r4, r9, lsl #5
   157b6:	441c      	add	r4, r3
	} else if (hdr.type == NRF_RPC_PACKET_TYPE_EVT) {
   157b8:	b166      	cbz	r6, 157d4 <parse_incoming_packet+0xe8>
		NRF_RPC_ASSERT(0);
   157ba:	4926      	ldr	r1, [pc, #152]	; (15854 <parse_incoming_packet+0x168>)
   157bc:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   157c0:	4825      	ldr	r0, [pc, #148]	; (15858 <parse_incoming_packet+0x16c>)
   157c2:	f005 fda5 	bl	1b310 <assert_print>
   157c6:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   157ca:	e79f      	b.n	1570c <parse_incoming_packet+0x20>
			allocated_ctx = cmd_ctx_alloc();
   157cc:	f7ff fc1c 	bl	15008 <cmd_ctx_alloc>
   157d0:	4604      	mov	r4, r0
   157d2:	e7cc      	b.n	1576e <parse_incoming_packet+0x82>
		NRF_RPC_ASSERT(cmd_ctx == NULL);
   157d4:	b140      	cbz	r0, 157e8 <parse_incoming_packet+0xfc>
   157d6:	491f      	ldr	r1, [pc, #124]	; (15854 <parse_incoming_packet+0x168>)
   157d8:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
   157dc:	481e      	ldr	r0, [pc, #120]	; (15858 <parse_incoming_packet+0x16c>)
   157de:	f005 fd97 	bl	1b310 <assert_print>
   157e2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
   157e6:	e791      	b.n	1570c <parse_incoming_packet+0x20>
		handler_execute(hdr.id, &packet[NRF_RPC_HEADER_SIZE],
   157e8:	9400      	str	r4, [sp, #0]
   157ea:	4638      	mov	r0, r7
   157ec:	6863      	ldr	r3, [r4, #4]
   157ee:	3a05      	subs	r2, #5
   157f0:	3105      	adds	r1, #5
   157f2:	f7ff fd03 	bl	151fc <handler_execute>
				  hdr.id, group->data->src_group_id, group->data->dst_group_id,
   157f6:	68a3      	ldr	r3, [r4, #8]
	nrf_rpc_alloc_tx_buf(group, &tx_buf, len);
   157f8:	a903      	add	r1, sp, #12
   157fa:	4632      	mov	r2, r6
   157fc:	4620      	mov	r0, r4
		err = simple_send(group, NRF_RPC_ID_UNKNOWN, NRF_RPC_PACKET_TYPE_ACK,
   157fe:	f893 8000 	ldrb.w	r8, [r3]
   15802:	785d      	ldrb	r5, [r3, #1]
	nrf_rpc_alloc_tx_buf(group, &tx_buf, len);
   15804:	f7ff fc3a 	bl	1507c <nrf_rpc_alloc_tx_buf>
	if (tx_buf == NULL) {
   15808:	9903      	ldr	r1, [sp, #12]
   1580a:	b971      	cbnz	r1, 1582a <parse_incoming_packet+0x13e>
		return -NRF_ENOMEM;
   1580c:	f06f 050b 	mvn.w	r5, #11
			NRF_RPC_ERR("ACK send error");
   15810:	2145      	movs	r1, #69	; 0x45
   15812:	4814      	ldr	r0, [pc, #80]	; (15864 <parse_incoming_packet+0x178>)
   15814:	f005 fd90 	bl	1b338 <z_log_minimal_printk>
			nrf_rpc_err(err, NRF_RPC_ERR_SRC_SEND, group, hdr.id,
   15818:	2300      	movs	r3, #0
   1581a:	4622      	mov	r2, r4
   1581c:	9300      	str	r3, [sp, #0]
   1581e:	2101      	movs	r1, #1
   15820:	463b      	mov	r3, r7
   15822:	4628      	mov	r0, r5
   15824:	f7ff fc6a 	bl	150fc <nrf_rpc_err>
   15828:	e7b9      	b.n	1579e <parse_incoming_packet+0xb2>
	packet[0] = hdr->type;
   1582a:	2302      	movs	r3, #2
   1582c:	f801 3c05 	strb.w	r3, [r1, #-5]
	packet[2] = hdr->dst;
   15830:	23ff      	movs	r3, #255	; 0xff
	packet[4] = hdr->dst_group_id;
   15832:	f801 5c01 	strb.w	r5, [r1, #-1]
	packet[1] = hdr->id;
   15836:	f801 7c04 	strb.w	r7, [r1, #-4]
	packet[2] = hdr->dst;
   1583a:	f801 3c03 	strb.w	r3, [r1, #-3]
	packet[3] = hdr->src_group_id;
   1583e:	f801 8c02 	strb.w	r8, [r1, #-2]
	return send(group, tx_buf, NRF_RPC_HEADER_SIZE + len);
   15842:	2205      	movs	r2, #5
   15844:	4620      	mov	r0, r4
   15846:	3905      	subs	r1, #5
   15848:	f7ff fbbc 	bl	14fc4 <send>
		if (err < 0) {
   1584c:	1e05      	subs	r5, r0, #0
   1584e:	daa6      	bge.n	1579e <parse_incoming_packet+0xb2>
   15850:	e7de      	b.n	15810 <parse_incoming_packet+0x124>
   15852:	bf00      	nop
   15854:	00024e75 	.word	0x00024e75
   15858:	000221f8 	.word	0x000221f8
   1585c:	2000736f 	.word	0x2000736f
   15860:	00026004 	.word	0x00026004
   15864:	00025116 	.word	0x00025116

00015868 <nrf_rpc_cmd_common>:
{
   15868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1586c:	b085      	sub	sp, #20
   1586e:	9301      	str	r3, [sp, #4]
	uint8_t *full_packet = &packet[-NRF_RPC_HEADER_SIZE];
   15870:	1f53      	subs	r3, r2, #5
{
   15872:	468b      	mov	fp, r1
   15874:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
   15878:	4692      	mov	sl, r2
	NRF_RPC_ASSERT(group != NULL);
   1587a:	4605      	mov	r5, r0
	uint8_t *full_packet = &packet[-NRF_RPC_HEADER_SIZE];
   1587c:	9300      	str	r3, [sp, #0]
	NRF_RPC_ASSERT(group != NULL);
   1587e:	b950      	cbnz	r0, 15896 <nrf_rpc_cmd_common+0x2e>
   15880:	4961      	ldr	r1, [pc, #388]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   15882:	f44f 724c 	mov.w	r2, #816	; 0x330
   15886:	4861      	ldr	r0, [pc, #388]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   15888:	f005 fd42 	bl	1b310 <assert_print>
   1588c:	f44f 714c 	mov.w	r1, #816	; 0x330
	NRF_RPC_ASSERT((cmd & 0xFF) != NRF_RPC_ID_UNKNOWN);
   15890:	485d      	ldr	r0, [pc, #372]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   15892:	f005 fd36 	bl	1b302 <assert_post_action>
   15896:	b2ca      	uxtb	r2, r1
   15898:	2aff      	cmp	r2, #255	; 0xff
   1589a:	d108      	bne.n	158ae <nrf_rpc_cmd_common+0x46>
   1589c:	495a      	ldr	r1, [pc, #360]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   1589e:	f240 3231 	movw	r2, #817	; 0x331
   158a2:	485a      	ldr	r0, [pc, #360]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   158a4:	f005 fd34 	bl	1b310 <assert_print>
   158a8:	f240 3131 	movw	r1, #817	; 0x331
   158ac:	e7f0      	b.n	15890 <nrf_rpc_cmd_common+0x28>
	return (addr > NRF_RPC_HEADER_SIZE) &&
   158ae:	f1aa 0206 	sub.w	r2, sl, #6
	NRF_RPC_ASSERT(packet_validate(packet));
   158b2:	320c      	adds	r2, #12
   158b4:	d908      	bls.n	158c8 <nrf_rpc_cmd_common+0x60>
   158b6:	4954      	ldr	r1, [pc, #336]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   158b8:	f240 3232 	movw	r2, #818	; 0x332
   158bc:	4853      	ldr	r0, [pc, #332]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   158be:	f005 fd27 	bl	1b310 <assert_print>
   158c2:	f240 3132 	movw	r1, #818	; 0x332
   158c6:	e7e3      	b.n	15890 <nrf_rpc_cmd_common+0x28>
	NRF_RPC_ASSERT(ptr1 != NULL);
   158c8:	b946      	cbnz	r6, 158dc <nrf_rpc_cmd_common+0x74>
   158ca:	494f      	ldr	r1, [pc, #316]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   158cc:	f240 3233 	movw	r2, #819	; 0x333
   158d0:	484e      	ldr	r0, [pc, #312]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   158d2:	f005 fd1d 	bl	1b310 <assert_print>
   158d6:	f240 3133 	movw	r1, #819	; 0x333
   158da:	e7d9      	b.n	15890 <nrf_rpc_cmd_common+0x28>
	if (cmd & 0x10000) {
   158dc:	f411 3180 	ands.w	r1, r1, #65536	; 0x10000
   158e0:	f04f 0200 	mov.w	r2, #0
   158e4:	d04a      	beq.n	1597c <nrf_rpc_cmd_common+0x114>
		NRF_RPC_ASSERT(ptr2 != NULL);
   158e6:	f1b8 0f00 	cmp.w	r8, #0
   158ea:	d108      	bne.n	158fe <nrf_rpc_cmd_common+0x96>
   158ec:	4946      	ldr	r1, [pc, #280]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   158ee:	f240 3236 	movw	r2, #822	; 0x336
   158f2:	4846      	ldr	r0, [pc, #280]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   158f4:	f005 fd0c 	bl	1b310 <assert_print>
   158f8:	f240 3136 	movw	r1, #822	; 0x336
   158fc:	e7c8      	b.n	15890 <nrf_rpc_cmd_common+0x28>
		*rsp_packet = NULL;
   158fe:	4647      	mov	r7, r8
   15900:	6032      	str	r2, [r6, #0]
	nrf_rpc_handler_t handler = NULL;
   15902:	4691      	mov	r9, r2
		*rsp_len = 0;
   15904:	f8c8 2000 	str.w	r2, [r8]
	void *handler_data = NULL;
   15908:	4690      	mov	r8, r2
	return z_impl_k_thread_custom_data_get();
   1590a:	f000 fbeb 	bl	160e4 <z_impl_k_thread_custom_data_get>
	if (ctx == NULL) {
   1590e:	4604      	mov	r4, r0
   15910:	2800      	cmp	r0, #0
   15912:	d137      	bne.n	15984 <nrf_rpc_cmd_common+0x11c>
		return cmd_ctx_alloc();
   15914:	f7ff fb78 	bl	15008 <cmd_ctx_alloc>
   15918:	4604      	mov	r4, r0
	hdr.src_group_id = group->data->src_group_id;
   1591a:	68aa      	ldr	r2, [r5, #8]
	hdr.dst = cmd_ctx->remote_id;
   1591c:	f894 c001 	ldrb.w	ip, [r4, #1]
	hdr.src_group_id = group->data->src_group_id;
   15920:	7810      	ldrb	r0, [r2, #0]
	hdr.dst_group_id = group->data->dst_group_id;
   15922:	7851      	ldrb	r1, [r2, #1]
	packet[0] = NRF_RPC_PACKET_TYPE_CMD | hdr->src;
   15924:	7822      	ldrb	r2, [r4, #0]
	packet[3] = hdr->src_group_id;
   15926:	f80a 0c02 	strb.w	r0, [sl, #-2]
	packet[0] = NRF_RPC_PACKET_TYPE_CMD | hdr->src;
   1592a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1592e:	f80a 2c05 	strb.w	r2, [sl, #-5]
	err = send(group, full_packet, len + NRF_RPC_HEADER_SIZE);
   15932:	9a01      	ldr	r2, [sp, #4]
	packet[4] = hdr->dst_group_id;
   15934:	f80a 1c01 	strb.w	r1, [sl, #-1]
	hdr.id = cmd & 0xFF;
   15938:	f80a bc04 	strb.w	fp, [sl, #-4]
	packet[2] = hdr->dst;
   1593c:	f80a cc03 	strb.w	ip, [sl, #-3]
	old_handler_data = cmd_ctx->handler_data;
   15940:	e9d4 ba01 	ldrd	fp, sl, [r4, #4]
	err = send(group, full_packet, len + NRF_RPC_HEADER_SIZE);
   15944:	4628      	mov	r0, r5
	cmd_ctx->handler_data = handler_data;
   15946:	e9c4 9801 	strd	r9, r8, [r4, #4]
	err = send(group, full_packet, len + NRF_RPC_HEADER_SIZE);
   1594a:	9900      	ldr	r1, [sp, #0]
   1594c:	3205      	adds	r2, #5
   1594e:	f7ff fb39 	bl	14fc4 <send>
	if (err >= 0) {
   15952:	f1b0 0800 	subs.w	r8, r0, #0
   15956:	db32      	blt.n	159be <nrf_rpc_cmd_common+0x156>
		nrf_rpc_os_msg_get(&cmd_ctx->recv_msg, &packet, &len);
   15958:	f104 090c 	add.w	r9, r4, #12
   1595c:	a903      	add	r1, sp, #12
   1595e:	4648      	mov	r0, r9
   15960:	aa02      	add	r2, sp, #8
   15962:	f008 f817 	bl	1d994 <nrf_rpc_os_msg_get>
		NRF_RPC_ASSERT(packet != NULL);
   15966:	9903      	ldr	r1, [sp, #12]
   15968:	b981      	cbnz	r1, 1598c <nrf_rpc_cmd_common+0x124>
   1596a:	4927      	ldr	r1, [pc, #156]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   1596c:	f240 3207 	movw	r2, #775	; 0x307
   15970:	4826      	ldr	r0, [pc, #152]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   15972:	f005 fccd 	bl	1b310 <assert_print>
   15976:	f240 3107 	movw	r1, #775	; 0x307
   1597a:	e789      	b.n	15890 <nrf_rpc_cmd_common+0x28>
		handler = ptr1;
   1597c:	46b1      	mov	r9, r6
	const uint8_t **rsp_packet = NULL;
   1597e:	460f      	mov	r7, r1
	size_t *rsp_len = NULL;
   15980:	460e      	mov	r6, r1
   15982:	e7c2      	b.n	1590a <nrf_rpc_cmd_common+0xa2>
	ctx->use_count++;
   15984:	7882      	ldrb	r2, [r0, #2]
   15986:	3201      	adds	r2, #1
   15988:	7082      	strb	r2, [r0, #2]
	return ctx;
   1598a:	e7c6      	b.n	1591a <nrf_rpc_cmd_common+0xb2>
		if (packet == RESPONSE_HANDLED_PTR) {
   1598c:	2901      	cmp	r1, #1
   1598e:	d016      	beq.n	159be <nrf_rpc_cmd_common+0x156>
		type = parse_incoming_packet(cmd_ctx, packet, len);
   15990:	4620      	mov	r0, r4
   15992:	9a02      	ldr	r2, [sp, #8]
   15994:	f7ff feaa 	bl	156ec <parse_incoming_packet>
	} while (type != NRF_RPC_PACKET_TYPE_RSP);
   15998:	2801      	cmp	r0, #1
   1599a:	d1df      	bne.n	1595c <nrf_rpc_cmd_common+0xf4>
	if (rsp_packet != NULL) {
   1599c:	b1fe      	cbz	r6, 159de <nrf_rpc_cmd_common+0x176>
		NRF_RPC_ASSERT(rsp_len != NULL);
   1599e:	b947      	cbnz	r7, 159b2 <nrf_rpc_cmd_common+0x14a>
   159a0:	4919      	ldr	r1, [pc, #100]	; (15a08 <nrf_rpc_cmd_common+0x1a0>)
   159a2:	f240 3213 	movw	r2, #787	; 0x313
   159a6:	4819      	ldr	r0, [pc, #100]	; (15a0c <nrf_rpc_cmd_common+0x1a4>)
   159a8:	f005 fcb2 	bl	1b310 <assert_print>
   159ac:	f240 3113 	movw	r1, #787	; 0x313
   159b0:	e76e      	b.n	15890 <nrf_rpc_cmd_common+0x28>
		*rsp_packet = &packet[NRF_RPC_HEADER_SIZE];
   159b2:	9b03      	ldr	r3, [sp, #12]
   159b4:	3305      	adds	r3, #5
   159b6:	6033      	str	r3, [r6, #0]
		*rsp_len = len - NRF_RPC_HEADER_SIZE;
   159b8:	9b02      	ldr	r3, [sp, #8]
   159ba:	3b05      	subs	r3, #5
   159bc:	603b      	str	r3, [r7, #0]
	ctx->use_count--;
   159be:	78a0      	ldrb	r0, [r4, #2]
	cmd_ctx->handler_data = old_handler_data;
   159c0:	e9c4 ba01 	strd	fp, sl, [r4, #4]
	ctx->use_count--;
   159c4:	3801      	subs	r0, #1
   159c6:	b2c0      	uxtb	r0, r0
   159c8:	70a0      	strb	r0, [r4, #2]
	if (ctx->use_count == 0) {
   159ca:	b920      	cbnz	r0, 159d6 <nrf_rpc_cmd_common+0x16e>
	z_impl_k_thread_custom_data_set(value);
   159cc:	f000 fb84 	bl	160d8 <z_impl_k_thread_custom_data_set>
	nrf_rpc_os_ctx_pool_release(ctx->id);
   159d0:	7820      	ldrb	r0, [r4, #0]
   159d2:	f7fd f803 	bl	129dc <nrf_rpc_os_ctx_pool_release>
}
   159d6:	4640      	mov	r0, r8
   159d8:	b005      	add	sp, #20
   159da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (transport->api->rx_buf_free == NULL);
   159de:	68eb      	ldr	r3, [r5, #12]
   159e0:	681b      	ldr	r3, [r3, #0]
	} else if (!auto_free_rx_buf(group->transport) && cmd_ctx->handler != NULL) {
   159e2:	691b      	ldr	r3, [r3, #16]
   159e4:	2b00      	cmp	r3, #0
   159e6:	d0ea      	beq.n	159be <nrf_rpc_cmd_common+0x156>
   159e8:	6866      	ldr	r6, [r4, #4]
   159ea:	2e00      	cmp	r6, #0
   159ec:	d0e7      	beq.n	159be <nrf_rpc_cmd_common+0x156>
		cmd_ctx->handler(group,
   159ee:	9a02      	ldr	r2, [sp, #8]
   159f0:	9903      	ldr	r1, [sp, #12]
   159f2:	4628      	mov	r0, r5
   159f4:	68a3      	ldr	r3, [r4, #8]
   159f6:	3a05      	subs	r2, #5
   159f8:	3105      	adds	r1, #5
   159fa:	47b0      	blx	r6
		nrf_rpc_decoding_done(group, &packet[NRF_RPC_HEADER_SIZE]);
   159fc:	9903      	ldr	r1, [sp, #12]
   159fe:	4628      	mov	r0, r5
   15a00:	3105      	adds	r1, #5
   15a02:	f7ff fb25 	bl	15050 <nrf_rpc_decoding_done>
   15a06:	e7da      	b.n	159be <nrf_rpc_cmd_common+0x156>
   15a08:	00024e75 	.word	0x00024e75
   15a0c:	000221f8 	.word	0x000221f8

00015a10 <nrf_rpc_free_tx_buf>:

void nrf_rpc_free_tx_buf(const struct nrf_rpc_group *group, uint8_t *buf)
{
   15a10:	b510      	push	{r4, lr}
   15a12:	4603      	mov	r3, r0
	if (!group->transport->api->tx_buf_free) {
   15a14:	68c0      	ldr	r0, [r0, #12]
   15a16:	6802      	ldr	r2, [r0, #0]
   15a18:	68d2      	ldr	r2, [r2, #12]
   15a1a:	b952      	cbnz	r2, 15a32 <nrf_rpc_free_tx_buf+0x22>
		NRF_RPC_ASSERT(false);
   15a1c:	490b      	ldr	r1, [pc, #44]	; (15a4c <nrf_rpc_free_tx_buf+0x3c>)
   15a1e:	480c      	ldr	r0, [pc, #48]	; (15a50 <nrf_rpc_free_tx_buf+0x40>)
   15a20:	f240 4242 	movw	r2, #1090	; 0x442
   15a24:	f005 fc74 	bl	1b310 <assert_print>
   15a28:	f240 4142 	movw	r1, #1090	; 0x442
   15a2c:	4807      	ldr	r0, [pc, #28]	; (15a4c <nrf_rpc_free_tx_buf+0x3c>)
   15a2e:	f005 fc68 	bl	1b302 <assert_post_action>

		return;
	}

	if (!group->data->transport_initialized) {
   15a32:	689b      	ldr	r3, [r3, #8]
   15a34:	7f1b      	ldrb	r3, [r3, #28]
   15a36:	b92b      	cbnz	r3, 15a44 <nrf_rpc_free_tx_buf+0x34>

	/* We need to subtract packet header placeholder. */
	buf -= NRF_RPC_HEADER_SIZE;

	group->transport->api->tx_buf_free(group->transport, buf);
}
   15a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		NRF_RPC_ERR("Transport is not initialized");
   15a3c:	2145      	movs	r1, #69	; 0x45
   15a3e:	4805      	ldr	r0, [pc, #20]	; (15a54 <nrf_rpc_free_tx_buf+0x44>)
   15a40:	f005 bc7a 	b.w	1b338 <z_log_minimal_printk>
	group->transport->api->tx_buf_free(group->transport, buf);
   15a44:	3905      	subs	r1, #5
}
   15a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	group->transport->api->tx_buf_free(group->transport, buf);
   15a4a:	4710      	bx	r2
   15a4c:	00024e75 	.word	0x00024e75
   15a50:	000221f8 	.word	0x000221f8
   15a54:	00024e53 	.word	0x00024e53

00015a58 <nrf_rpc_cbor_cmd>:
}

int nrf_rpc_cbor_cmd(const struct nrf_rpc_group *group, uint8_t cmd,
		     struct nrf_rpc_cbor_ctx *ctx,
		     nrf_rpc_cbor_handler_t handler, void *handler_data)
{
   15a58:	b570      	push	{r4, r5, r6, lr}
   15a5a:	460e      	mov	r6, r1
	size_t len;
	const struct _nrf_rpc_cbor_decoder cbor_handler = {
   15a5c:	2100      	movs	r1, #0
{
   15a5e:	b086      	sub	sp, #24
	const struct _nrf_rpc_cbor_decoder cbor_handler = {
   15a60:	9303      	str	r3, [sp, #12]
   15a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   15a64:	4605      	mov	r5, r0
		.handler = handler,
		.handler_data = handler_data,
		.decoding_done_required = false,
	};

	if (!zcbor_nil_put(ctx->zs, NULL)) {
   15a66:	4610      	mov	r0, r2
{
   15a68:	4614      	mov	r4, r2
	const struct _nrf_rpc_cbor_decoder cbor_handler = {
   15a6a:	9304      	str	r3, [sp, #16]
   15a6c:	f88d 1014 	strb.w	r1, [sp, #20]
	if (!zcbor_nil_put(ctx->zs, NULL)) {
   15a70:	f009 fa08 	bl	1ee84 <zcbor_nil_put>
   15a74:	b938      	cbnz	r0, 15a86 <nrf_rpc_cbor_cmd+0x2e>
		NRF_RPC_CBOR_DISCARD(group, *ctx);
   15a76:	4628      	mov	r0, r5
   15a78:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15a7a:	f7ff ffc9 	bl	15a10 <nrf_rpc_free_tx_buf>
		return -NRF_ENOMEM;
   15a7e:	f06f 000b 	mvn.w	r0, #11
	len = nrf_rpc_cbor_data_len(ctx);

	return nrf_rpc_cmd(group, cmd, ctx->out_packet, len,
				&_nrf_rpc_cbor_proxy_handler,
				(void *)&cbor_handler);
}
   15a82:	b006      	add	sp, #24
   15a84:	bd70      	pop	{r4, r5, r6, pc}
{
	int nrf_rpc_cmd_common(const struct nrf_rpc_group *group, uint32_t cmd,
			       uint8_t *packet, size_t len, void *ptr1,
			       void *ptr2);

	return nrf_rpc_cmd_common(group, cmd, packet, len, handler,
   15a86:	a903      	add	r1, sp, #12
	return ctx->zs->payload_mut - ctx->out_packet;
   15a88:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15a8a:	6823      	ldr	r3, [r4, #0]
   15a8c:	9101      	str	r1, [sp, #4]
   15a8e:	4904      	ldr	r1, [pc, #16]	; (15aa0 <nrf_rpc_cbor_cmd+0x48>)
   15a90:	4628      	mov	r0, r5
   15a92:	9100      	str	r1, [sp, #0]
   15a94:	1a9b      	subs	r3, r3, r2
   15a96:	4631      	mov	r1, r6
   15a98:	f7ff fee6 	bl	15868 <nrf_rpc_cmd_common>
	return nrf_rpc_cmd(group, cmd, ctx->out_packet, len,
   15a9c:	e7f1      	b.n	15a82 <nrf_rpc_cbor_cmd+0x2a>
   15a9e:	bf00      	nop
   15aa0:	0001eeab 	.word	0x0001eeab

00015aa4 <nrf_rpc_cbor_cmd_no_err>:

void nrf_rpc_cbor_cmd_no_err(const struct nrf_rpc_group *group, uint8_t cmd,
			     struct nrf_rpc_cbor_ctx *ctx,
			     nrf_rpc_cbor_handler_t handler,
			     void *handler_data)
{
   15aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int err;

	err = nrf_rpc_cbor_cmd(group, cmd, ctx, handler, handler_data);
   15aa6:	9c06      	ldr	r4, [sp, #24]
{
   15aa8:	4605      	mov	r5, r0
	err = nrf_rpc_cbor_cmd(group, cmd, ctx, handler, handler_data);
   15aaa:	9400      	str	r4, [sp, #0]
{
   15aac:	460e      	mov	r6, r1
	err = nrf_rpc_cbor_cmd(group, cmd, ctx, handler, handler_data);
   15aae:	f7ff ffd3 	bl	15a58 <nrf_rpc_cbor_cmd>
	if (err < 0) {
   15ab2:	1e04      	subs	r4, r0, #0
   15ab4:	da0f      	bge.n	15ad6 <nrf_rpc_cbor_cmd_no_err+0x32>
		NRF_RPC_ERR("Unhandled command send error %d", err);
   15ab6:	4622      	mov	r2, r4
   15ab8:	2145      	movs	r1, #69	; 0x45
   15aba:	4808      	ldr	r0, [pc, #32]	; (15adc <nrf_rpc_cbor_cmd_no_err+0x38>)
   15abc:	f005 fc3c 	bl	1b338 <z_log_minimal_printk>
		nrf_rpc_err(err, NRF_RPC_ERR_SRC_SEND, group, cmd,
   15ac0:	2380      	movs	r3, #128	; 0x80
   15ac2:	462a      	mov	r2, r5
   15ac4:	9306      	str	r3, [sp, #24]
   15ac6:	2101      	movs	r1, #1
   15ac8:	4633      	mov	r3, r6
   15aca:	4620      	mov	r0, r4
			    NRF_RPC_PACKET_TYPE_CMD);
	}
}
   15acc:	b002      	add	sp, #8
   15ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		nrf_rpc_err(err, NRF_RPC_ERR_SRC_SEND, group, cmd,
   15ad2:	f7ff bb13 	b.w	150fc <nrf_rpc_err>
}
   15ad6:	b002      	add	sp, #8
   15ad8:	bd70      	pop	{r4, r5, r6, pc}
   15ada:	bf00      	nop
   15adc:	00025132 	.word	0x00025132

00015ae0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   15ae0:	4b01      	ldr	r3, [pc, #4]	; (15ae8 <z_impl_z_errno+0x8>)
   15ae2:	6898      	ldr	r0, [r3, #8]
}
   15ae4:	3074      	adds	r0, #116	; 0x74
   15ae6:	4770      	bx	lr
   15ae8:	20006f78 	.word	0x20006f78

00015aec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15aee:	4604      	mov	r4, r0
   15af0:	460e      	mov	r6, r1
	__asm__ volatile(
   15af2:	f04f 0320 	mov.w	r3, #32
   15af6:	f3ef 8711 	mrs	r7, BASEPRI
   15afa:	f383 8812 	msr	BASEPRI_MAX, r3
   15afe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15b02:	f002 fbd5 	bl	182b0 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15b06:	2200      	movs	r2, #0
   15b08:	2c04      	cmp	r4, #4
   15b0a:	bf98      	it	ls
   15b0c:	4b1d      	ldrls	r3, [pc, #116]	; (15b84 <z_fatal_error+0x98>)
   15b0e:	4605      	mov	r5, r0
	switch (reason) {
   15b10:	bf94      	ite	ls
   15b12:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   15b16:	4b1c      	ldrhi	r3, [pc, #112]	; (15b88 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15b18:	9200      	str	r2, [sp, #0]
   15b1a:	2145      	movs	r1, #69	; 0x45
   15b1c:	4622      	mov	r2, r4
   15b1e:	481b      	ldr	r0, [pc, #108]	; (15b8c <z_fatal_error+0xa0>)
   15b20:	f005 fc0a 	bl	1b338 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   15b24:	b13e      	cbz	r6, 15b36 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   15b26:	69f3      	ldr	r3, [r6, #28]
   15b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15b2c:	b11b      	cbz	r3, 15b36 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   15b2e:	2145      	movs	r1, #69	; 0x45
   15b30:	4817      	ldr	r0, [pc, #92]	; (15b90 <z_fatal_error+0xa4>)
   15b32:	f005 fc01 	bl	1b338 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15b36:	b135      	cbz	r5, 15b46 <z_fatal_error+0x5a>
   15b38:	4628      	mov	r0, r5
   15b3a:	f009 fa29 	bl	1ef90 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   15b3e:	4603      	mov	r3, r0
   15b40:	b108      	cbz	r0, 15b46 <z_fatal_error+0x5a>
   15b42:	7802      	ldrb	r2, [r0, #0]
   15b44:	b902      	cbnz	r2, 15b48 <z_fatal_error+0x5c>
		thread_name = "unknown";
   15b46:	4b13      	ldr	r3, [pc, #76]	; (15b94 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15b48:	462a      	mov	r2, r5
   15b4a:	2145      	movs	r1, #69	; 0x45
   15b4c:	4812      	ldr	r0, [pc, #72]	; (15b98 <z_fatal_error+0xac>)
   15b4e:	f005 fbf3 	bl	1b338 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   15b52:	4631      	mov	r1, r6
   15b54:	4620      	mov	r0, r4
   15b56:	f7fc fe8f 	bl	12878 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   15b5a:	2c04      	cmp	r4, #4
   15b5c:	d108      	bne.n	15b70 <z_fatal_error+0x84>
   15b5e:	490f      	ldr	r1, [pc, #60]	; (15b9c <z_fatal_error+0xb0>)
   15b60:	480f      	ldr	r0, [pc, #60]	; (15ba0 <z_fatal_error+0xb4>)
   15b62:	2293      	movs	r2, #147	; 0x93
   15b64:	f005 fbd4 	bl	1b310 <assert_print>
   15b68:	2193      	movs	r1, #147	; 0x93
   15b6a:	480c      	ldr	r0, [pc, #48]	; (15b9c <z_fatal_error+0xb0>)
   15b6c:	f005 fbc9 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   15b70:	f387 8811 	msr	BASEPRI, r7
   15b74:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15b78:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15b7a:	b003      	add	sp, #12
   15b7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15b80:	f7f4 bb1c 	b.w	a1bc <z_impl_k_thread_abort>
   15b84:	000214bc 	.word	0x000214bc
   15b88:	00025164 	.word	0x00025164
   15b8c:	00025172 	.word	0x00025172
   15b90:	0002519f 	.word	0x0002519f
   15b94:	00022e94 	.word	0x00022e94
   15b98:	000251c5 	.word	0x000251c5
   15b9c:	000251e2 	.word	0x000251e2
   15ba0:	000221f8 	.word	0x000221f8

00015ba4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15ba4:	4b0f      	ldr	r3, [pc, #60]	; (15be4 <z_sys_init_run_level+0x40>)
{
   15ba6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15ba8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15bac:	3001      	adds	r0, #1
   15bae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15bb2:	42a6      	cmp	r6, r4
   15bb4:	d800      	bhi.n	15bb8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   15bb6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   15bb8:	e9d4 3500 	ldrd	r3, r5, [r4]
   15bbc:	4628      	mov	r0, r5
   15bbe:	4798      	blx	r3
		if (dev != NULL) {
   15bc0:	b16d      	cbz	r5, 15bde <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   15bc2:	b138      	cbz	r0, 15bd4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15bc4:	2800      	cmp	r0, #0
   15bc6:	bfb8      	it	lt
   15bc8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   15bca:	28ff      	cmp	r0, #255	; 0xff
   15bcc:	bfa8      	it	ge
   15bce:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   15bd0:	68eb      	ldr	r3, [r5, #12]
   15bd2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15bd4:	68ea      	ldr	r2, [r5, #12]
   15bd6:	7853      	ldrb	r3, [r2, #1]
   15bd8:	f043 0301 	orr.w	r3, r3, #1
   15bdc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15bde:	3408      	adds	r4, #8
   15be0:	e7e7      	b.n	15bb2 <z_sys_init_run_level+0xe>
   15be2:	bf00      	nop
   15be4:	000214d0 	.word	0x000214d0

00015be8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   15be8:	2201      	movs	r2, #1
{
   15bea:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15bec:	4b09      	ldr	r3, [pc, #36]	; (15c14 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   15bee:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   15bf0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   15bf2:	f7ff ffd7 	bl	15ba4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   15bf6:	f003 fb99 	bl	1932c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   15bfa:	2004      	movs	r0, #4
   15bfc:	f7ff ffd2 	bl	15ba4 <z_sys_init_run_level>

	z_init_static_threads();
   15c00:	f000 fb00 	bl	16204 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   15c04:	f7f0 fff8 	bl	6bf8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15c08:	4a03      	ldr	r2, [pc, #12]	; (15c18 <bg_thread_main+0x30>)
   15c0a:	7b13      	ldrb	r3, [r2, #12]
   15c0c:	f023 0301 	bic.w	r3, r3, #1
   15c10:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15c12:	bd08      	pop	{r3, pc}
   15c14:	20007370 	.word	0x20007370
   15c18:	20006128 	.word	0x20006128

00015c1c <z_bss_zero>:
{
   15c1c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   15c1e:	4803      	ldr	r0, [pc, #12]	; (15c2c <z_bss_zero+0x10>)
   15c20:	4a03      	ldr	r2, [pc, #12]	; (15c30 <z_bss_zero+0x14>)
   15c22:	2100      	movs	r1, #0
   15c24:	1a12      	subs	r2, r2, r0
   15c26:	f009 f96e 	bl	1ef06 <z_early_memset>
}
   15c2a:	bd08      	pop	{r3, pc}
   15c2c:	20000a80 	.word	0x20000a80
   15c30:	20007374 	.word	0x20007374

00015c34 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   15c34:	23d8      	movs	r3, #216	; 0xd8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   15c36:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   15c38:	4e13      	ldr	r6, [pc, #76]	; (15c88 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   15c3a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   15c3c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   15c40:	2300      	movs	r3, #0
{
   15c42:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   15c44:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15c48:	220f      	movs	r2, #15
   15c4a:	9301      	str	r3, [sp, #4]
   15c4c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c50:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
   15c52:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c56:	4d0d      	ldr	r5, [pc, #52]	; (15c8c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   15c58:	490d      	ldr	r1, [pc, #52]	; (15c90 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c5a:	fb03 5500 	mla	r5, r3, r0, r5
{
   15c5e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   15c60:	fb02 1100 	mla	r1, r2, r0, r1
   15c64:	4b0b      	ldr	r3, [pc, #44]	; (15c94 <z_init_cpu+0x60>)
   15c66:	4630      	mov	r0, r6
   15c68:	9500      	str	r5, [sp, #0]
   15c6a:	f000 fa41 	bl	160f0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15c6e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   15c70:	752c      	strb	r4, [r5, #20]
   15c72:	f023 0304 	bic.w	r3, r3, #4
   15c76:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   15c78:	4b07      	ldr	r3, [pc, #28]	; (15c98 <z_init_cpu+0x64>)
   15c7a:	3401      	adds	r4, #1
   15c7c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   15c80:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   15c82:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   15c84:	b006      	add	sp, #24
   15c86:	bd70      	pop	{r4, r5, r6, pc}
   15c88:	20006050 	.word	0x20006050
   15c8c:	20006f78 	.word	0x20006f78
   15c90:	20009fb8 	.word	0x20009fb8
   15c94:	0001633d 	.word	0x0001633d
   15c98:	200097b8 	.word	0x200097b8

00015c9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   15c9c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15c9e:	2000      	movs	r0, #0
{
   15ca0:	b0bc      	sub	sp, #240	; 0xf0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15ca2:	f7ff ff7f 	bl	15ba4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   15ca6:	4b2e      	ldr	r3, [pc, #184]	; (15d60 <z_cstart+0xc4>)
	uint32_t msp =
   15ca8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15cac:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15cb0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15cb4:	2400      	movs	r4, #0
   15cb6:	23e0      	movs	r3, #224	; 0xe0
   15cb8:	4d2a      	ldr	r5, [pc, #168]	; (15d64 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   15cba:	4e2b      	ldr	r6, [pc, #172]	; (15d68 <z_cstart+0xcc>)
   15cbc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15cc0:	77ec      	strb	r4, [r5, #31]
   15cc2:	762c      	strb	r4, [r5, #24]
   15cc4:	766c      	strb	r4, [r5, #25]
   15cc6:	76ac      	strb	r4, [r5, #26]
   15cc8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15ccc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cce:	4f27      	ldr	r7, [pc, #156]	; (15d6c <z_cstart+0xd0>)
   15cd0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15cd4:	626b      	str	r3, [r5, #36]	; 0x24
   15cd6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15cda:	f7f4 f9d3 	bl	a084 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15cde:	f7f3 fdbf 	bl	9860 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15ce2:	f04f 33ff 	mov.w	r3, #4294967295
   15ce6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15ce8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   15cea:	f7f4 fc2d 	bl	a548 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15cee:	f7f4 fa7b 	bl	a1e8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   15cf2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   15cf6:	ad06      	add	r5, sp, #24
   15cf8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   15cfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   15cfe:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
	k_thread_system_pool_assign(dummy_thread);
   15d02:	f003 faf5 	bl	192f0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   15d06:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15d08:	f009 f8f1 	bl	1eeee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   15d0c:	2001      	movs	r0, #1
   15d0e:	f7ff ff49 	bl	15ba4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   15d12:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   15d14:	4d16      	ldr	r5, [pc, #88]	; (15d70 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   15d16:	f7ff ff45 	bl	15ba4 <z_sys_init_run_level>
	z_sched_init();
   15d1a:	f002 f993 	bl	18044 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15d1e:	4b15      	ldr	r3, [pc, #84]	; (15d74 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   15d20:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15d22:	9305      	str	r3, [sp, #20]
   15d24:	2301      	movs	r3, #1
   15d26:	4914      	ldr	r1, [pc, #80]	; (15d78 <z_cstart+0xdc>)
   15d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15d2c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15d30:	4628      	mov	r0, r5
   15d32:	463b      	mov	r3, r7
   15d34:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15d38:	9400      	str	r4, [sp, #0]
   15d3a:	f000 f9d9 	bl	160f0 <z_setup_new_thread>
   15d3e:	4606      	mov	r6, r0
   15d40:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   15d42:	4628      	mov	r0, r5
   15d44:	f022 0204 	bic.w	r2, r2, #4
   15d48:	736a      	strb	r2, [r5, #13]
   15d4a:	f001 fcb9 	bl	176c0 <z_ready_thread>
	z_init_cpu(0);
   15d4e:	4620      	mov	r0, r4
   15d50:	f7ff ff70 	bl	15c34 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d54:	463a      	mov	r2, r7
   15d56:	4631      	mov	r1, r6
   15d58:	4628      	mov	r0, r5
   15d5a:	f7f3 ff33 	bl	9bc4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d5e:	bf00      	nop
   15d60:	200097b8 	.word	0x200097b8
   15d64:	e000ed00 	.word	0xe000ed00
   15d68:	20006f78 	.word	0x20006f78
   15d6c:	00015be9 	.word	0x00015be9
   15d70:	20006128 	.word	0x20006128
   15d74:	0002524e 	.word	0x0002524e
   15d78:	2000a0f8 	.word	0x2000a0f8

00015d7c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   15d7c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15d7e:	4c0b      	ldr	r4, [pc, #44]	; (15dac <statics_init+0x30>)
   15d80:	4d0b      	ldr	r5, [pc, #44]	; (15db0 <statics_init+0x34>)
   15d82:	42ac      	cmp	r4, r5
   15d84:	d90f      	bls.n	15da6 <statics_init+0x2a>
   15d86:	490b      	ldr	r1, [pc, #44]	; (15db4 <statics_init+0x38>)
   15d88:	480b      	ldr	r0, [pc, #44]	; (15db8 <statics_init+0x3c>)
   15d8a:	2218      	movs	r2, #24
   15d8c:	f005 fac0 	bl	1b310 <assert_print>
   15d90:	2118      	movs	r1, #24
   15d92:	4808      	ldr	r0, [pc, #32]	; (15db4 <statics_init+0x38>)
   15d94:	f005 fab5 	bl	1b302 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15d98:	4620      	mov	r0, r4
   15d9a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15d9e:	f009 f8b6 	bl	1ef0e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15da2:	3418      	adds	r4, #24
   15da4:	e7ed      	b.n	15d82 <statics_init+0x6>
   15da6:	d3f7      	bcc.n	15d98 <statics_init+0x1c>
		}
	}
	return 0;
}
   15da8:	2000      	movs	r0, #0
   15daa:	bd38      	pop	{r3, r4, r5, pc}
   15dac:	200007b8 	.word	0x200007b8
   15db0:	200007e8 	.word	0x200007e8
   15db4:	00025256 	.word	0x00025256
   15db8:	000221f8 	.word	0x000221f8

00015dbc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   15dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dc0:	b085      	sub	sp, #20
   15dc2:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   15dc6:	4680      	mov	r8, r0
   15dc8:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   15dca:	4648      	mov	r0, r9
   15dcc:	4659      	mov	r1, fp
{
   15dce:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   15dd0:	f009 f9e9 	bl	1f1a6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   15dd4:	f1bb 3fff 	cmp.w	fp, #4294967295
   15dd8:	bf08      	it	eq
   15dda:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   15dde:	4605      	mov	r5, r0
   15de0:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   15de2:	bf04      	itt	eq
   15de4:	f04f 35ff 	moveq.w	r5, #4294967295
   15de8:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   15dec:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   15df0:	f04f 0320 	mov.w	r3, #32
   15df4:	f3ef 8411 	mrs	r4, BASEPRI
   15df8:	f383 8812 	msr	BASEPRI_MAX, r3
   15dfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e00:	4630      	mov	r0, r6
   15e02:	f000 fa77 	bl	162f4 <z_spin_lock_valid>
   15e06:	b938      	cbnz	r0, 15e18 <k_heap_aligned_alloc+0x5c>
   15e08:	492c      	ldr	r1, [pc, #176]	; (15ebc <k_heap_aligned_alloc+0x100>)
   15e0a:	2294      	movs	r2, #148	; 0x94
   15e0c:	482c      	ldr	r0, [pc, #176]	; (15ec0 <k_heap_aligned_alloc+0x104>)
   15e0e:	f005 fa7f 	bl	1b310 <assert_print>
   15e12:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15e14:	4829      	ldr	r0, [pc, #164]	; (15ebc <k_heap_aligned_alloc+0x100>)
   15e16:	e027      	b.n	15e68 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   15e18:	4630      	mov	r0, r6
   15e1a:	f000 fa87 	bl	1632c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15e1e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   15e22:	b113      	cbz	r3, 15e2a <k_heap_aligned_alloc+0x6e>
   15e24:	ea5b 0909 	orrs.w	r9, fp, r9
   15e28:	d117      	bne.n	15e5a <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   15e2a:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   15e2e:	4652      	mov	r2, sl
   15e30:	4640      	mov	r0, r8
   15e32:	9903      	ldr	r1, [sp, #12]
   15e34:	f7f1 fac0 	bl	73b8 <sys_heap_aligned_alloc>
   15e38:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   15e3a:	f002 fd8d 	bl	18958 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   15e3e:	f1b9 0f00 	cmp.w	r9, #0
   15e42:	d013      	beq.n	15e6c <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15e44:	4630      	mov	r0, r6
   15e46:	f000 fa63 	bl	16310 <z_spin_unlock_valid>
   15e4a:	bb70      	cbnz	r0, 15eaa <k_heap_aligned_alloc+0xee>
   15e4c:	491b      	ldr	r1, [pc, #108]	; (15ebc <k_heap_aligned_alloc+0x100>)
   15e4e:	22c2      	movs	r2, #194	; 0xc2
   15e50:	481b      	ldr	r0, [pc, #108]	; (15ec0 <k_heap_aligned_alloc+0x104>)
   15e52:	f005 fa5d 	bl	1b310 <assert_print>
   15e56:	21c2      	movs	r1, #194	; 0xc2
   15e58:	e7dc      	b.n	15e14 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   15e5a:	491a      	ldr	r1, [pc, #104]	; (15ec4 <k_heap_aligned_alloc+0x108>)
   15e5c:	4818      	ldr	r0, [pc, #96]	; (15ec0 <k_heap_aligned_alloc+0x104>)
   15e5e:	224c      	movs	r2, #76	; 0x4c
   15e60:	f005 fa56 	bl	1b310 <assert_print>
   15e64:	214c      	movs	r1, #76	; 0x4c
   15e66:	4817      	ldr	r0, [pc, #92]	; (15ec4 <k_heap_aligned_alloc+0x108>)
   15e68:	f005 fa4b 	bl	1b302 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   15e6c:	1a28      	subs	r0, r5, r0
   15e6e:	eb67 0101 	sbc.w	r1, r7, r1
   15e72:	2801      	cmp	r0, #1
   15e74:	f171 0300 	sbcs.w	r3, r1, #0
   15e78:	dbe4      	blt.n	15e44 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   15e7a:	e9cd 0100 	strd	r0, r1, [sp]
   15e7e:	465a      	mov	r2, fp
   15e80:	4621      	mov	r1, r4
   15e82:	4630      	mov	r0, r6
   15e84:	f001 fed8 	bl	17c38 <z_pend_curr>
   15e88:	f04f 0320 	mov.w	r3, #32
   15e8c:	f3ef 8411 	mrs	r4, BASEPRI
   15e90:	f383 8812 	msr	BASEPRI_MAX, r3
   15e94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e98:	4630      	mov	r0, r6
   15e9a:	f000 fa2b 	bl	162f4 <z_spin_lock_valid>
   15e9e:	2800      	cmp	r0, #0
   15ea0:	d0b2      	beq.n	15e08 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   15ea2:	4630      	mov	r0, r6
   15ea4:	f000 fa42 	bl	1632c <z_spin_lock_set_owner>
	return k;
   15ea8:	e7c1      	b.n	15e2e <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   15eaa:	f384 8811 	msr	BASEPRI, r4
   15eae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   15eb2:	4648      	mov	r0, r9
   15eb4:	b005      	add	sp, #20
   15eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eba:	bf00      	nop
   15ebc:	00022232 	.word	0x00022232
   15ec0:	000221f8 	.word	0x000221f8
   15ec4:	00025256 	.word	0x00025256

00015ec8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   15ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eca:	4604      	mov	r4, r0
   15ecc:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   15ece:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   15ed2:	f04f 0320 	mov.w	r3, #32
   15ed6:	f3ef 8711 	mrs	r7, BASEPRI
   15eda:	f383 8812 	msr	BASEPRI_MAX, r3
   15ede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15ee2:	4628      	mov	r0, r5
   15ee4:	f000 fa06 	bl	162f4 <z_spin_lock_valid>
   15ee8:	b940      	cbnz	r0, 15efc <k_heap_free+0x34>
   15eea:	4915      	ldr	r1, [pc, #84]	; (15f40 <k_heap_free+0x78>)
   15eec:	2294      	movs	r2, #148	; 0x94
   15eee:	4815      	ldr	r0, [pc, #84]	; (15f44 <k_heap_free+0x7c>)
   15ef0:	f005 fa0e 	bl	1b310 <assert_print>
   15ef4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15ef6:	4812      	ldr	r0, [pc, #72]	; (15f40 <k_heap_free+0x78>)
   15ef8:	f005 fa03 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   15efc:	4628      	mov	r0, r5
   15efe:	f000 fa15 	bl	1632c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   15f02:	4620      	mov	r0, r4
   15f04:	4631      	mov	r1, r6
   15f06:	f7f1 fa1d 	bl	7344 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   15f0a:	f104 000c 	add.w	r0, r4, #12
   15f0e:	f009 f930 	bl	1f172 <z_unpend_all>
   15f12:	b128      	cbz	r0, 15f20 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   15f14:	4639      	mov	r1, r7
   15f16:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   15f18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   15f1c:	f001 bc38 	b.w	17790 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f20:	4628      	mov	r0, r5
   15f22:	f000 f9f5 	bl	16310 <z_spin_unlock_valid>
   15f26:	b930      	cbnz	r0, 15f36 <k_heap_free+0x6e>
   15f28:	4905      	ldr	r1, [pc, #20]	; (15f40 <k_heap_free+0x78>)
   15f2a:	22c2      	movs	r2, #194	; 0xc2
   15f2c:	4805      	ldr	r0, [pc, #20]	; (15f44 <k_heap_free+0x7c>)
   15f2e:	f005 f9ef 	bl	1b310 <assert_print>
   15f32:	21c2      	movs	r1, #194	; 0xc2
   15f34:	e7df      	b.n	15ef6 <k_heap_free+0x2e>
	__asm__ volatile(
   15f36:	f387 8811 	msr	BASEPRI, r7
   15f3a:	f3bf 8f6f 	isb	sy
}
   15f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f40:	00022232 	.word	0x00022232
   15f44:	000221f8 	.word	0x000221f8

00015f48 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   15f48:	2000      	movs	r0, #0
{
   15f4a:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15f4c:	4c0a      	ldr	r4, [pc, #40]	; (15f78 <init_mem_slab_module+0x30>)
   15f4e:	4d0b      	ldr	r5, [pc, #44]	; (15f7c <init_mem_slab_module+0x34>)
   15f50:	42ac      	cmp	r4, r5
   15f52:	d90f      	bls.n	15f74 <init_mem_slab_module+0x2c>
   15f54:	490a      	ldr	r1, [pc, #40]	; (15f80 <init_mem_slab_module+0x38>)
   15f56:	480b      	ldr	r0, [pc, #44]	; (15f84 <init_mem_slab_module+0x3c>)
   15f58:	223d      	movs	r2, #61	; 0x3d
   15f5a:	f005 f9d9 	bl	1b310 <assert_print>
   15f5e:	213d      	movs	r1, #61	; 0x3d
   15f60:	4807      	ldr	r0, [pc, #28]	; (15f80 <init_mem_slab_module+0x38>)
   15f62:	f005 f9ce 	bl	1b302 <assert_post_action>
		rc = create_free_list(slab);
   15f66:	4620      	mov	r0, r4
   15f68:	f008 ffe4 	bl	1ef34 <create_free_list>
		if (rc < 0) {
   15f6c:	2800      	cmp	r0, #0
   15f6e:	db02      	blt.n	15f76 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15f70:	3420      	adds	r4, #32
   15f72:	e7ed      	b.n	15f50 <init_mem_slab_module+0x8>
   15f74:	d3f7      	bcc.n	15f66 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   15f76:	bd38      	pop	{r3, r4, r5, pc}
   15f78:	20000758 	.word	0x20000758
   15f7c:	200007b8 	.word	0x200007b8
   15f80:	00025278 	.word	0x00025278
   15f84:	000221f8 	.word	0x000221f8

00015f88 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15f8c:	4604      	mov	r4, r0
   15f8e:	460d      	mov	r5, r1
   15f90:	4690      	mov	r8, r2
   15f92:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   15f94:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   15f98:	f04f 0320 	mov.w	r3, #32
   15f9c:	f3ef 8911 	mrs	r9, BASEPRI
   15fa0:	f383 8812 	msr	BASEPRI_MAX, r3
   15fa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15fa8:	4630      	mov	r0, r6
   15faa:	f000 f9a3 	bl	162f4 <z_spin_lock_valid>
   15fae:	b940      	cbnz	r0, 15fc2 <k_mem_slab_alloc+0x3a>
   15fb0:	491e      	ldr	r1, [pc, #120]	; (1602c <k_mem_slab_alloc+0xa4>)
   15fb2:	2294      	movs	r2, #148	; 0x94
   15fb4:	481e      	ldr	r0, [pc, #120]	; (16030 <k_mem_slab_alloc+0xa8>)
   15fb6:	f005 f9ab 	bl	1b310 <assert_print>
   15fba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15fbc:	481b      	ldr	r0, [pc, #108]	; (1602c <k_mem_slab_alloc+0xa4>)
   15fbe:	f005 f9a0 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   15fc2:	4630      	mov	r0, r6
   15fc4:	f000 f9b2 	bl	1632c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15fc8:	69a3      	ldr	r3, [r4, #24]
   15fca:	b18b      	cbz	r3, 15ff0 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   15fcc:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   15fce:	681b      	ldr	r3, [r3, #0]
   15fd0:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   15fd2:	69e3      	ldr	r3, [r4, #28]
   15fd4:	3301      	adds	r3, #1
   15fd6:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15fd8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15fda:	4630      	mov	r0, r6
   15fdc:	f000 f998 	bl	16310 <z_spin_unlock_valid>
   15fe0:	b9f0      	cbnz	r0, 16020 <k_mem_slab_alloc+0x98>
   15fe2:	4912      	ldr	r1, [pc, #72]	; (1602c <k_mem_slab_alloc+0xa4>)
   15fe4:	22c2      	movs	r2, #194	; 0xc2
   15fe6:	4812      	ldr	r0, [pc, #72]	; (16030 <k_mem_slab_alloc+0xa8>)
   15fe8:	f005 f992 	bl	1b310 <assert_print>
   15fec:	21c2      	movs	r1, #194	; 0xc2
   15fee:	e7e5      	b.n	15fbc <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15ff0:	ea58 0207 	orrs.w	r2, r8, r7
   15ff4:	d103      	bne.n	15ffe <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   15ff6:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   15ffa:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   15ffc:	e7ed      	b.n	15fda <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15ffe:	4622      	mov	r2, r4
   16000:	4649      	mov	r1, r9
   16002:	4630      	mov	r0, r6
   16004:	e9cd 8700 	strd	r8, r7, [sp]
   16008:	f001 fe16 	bl	17c38 <z_pend_curr>
		if (result == 0) {
   1600c:	4604      	mov	r4, r0
   1600e:	b918      	cbnz	r0, 16018 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   16010:	4b08      	ldr	r3, [pc, #32]	; (16034 <k_mem_slab_alloc+0xac>)
   16012:	689b      	ldr	r3, [r3, #8]
   16014:	695b      	ldr	r3, [r3, #20]
   16016:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   16018:	4620      	mov	r0, r4
   1601a:	b003      	add	sp, #12
   1601c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   16020:	f389 8811 	msr	BASEPRI, r9
   16024:	f3bf 8f6f 	isb	sy
	return result;
   16028:	e7f6      	b.n	16018 <k_mem_slab_alloc+0x90>
   1602a:	bf00      	nop
   1602c:	00022232 	.word	0x00022232
   16030:	000221f8 	.word	0x000221f8
   16034:	20006f78 	.word	0x20006f78

00016038 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1603c:	4604      	mov	r4, r0
   1603e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   16040:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   16044:	f04f 0320 	mov.w	r3, #32
   16048:	f3ef 8711 	mrs	r7, BASEPRI
   1604c:	f383 8812 	msr	BASEPRI_MAX, r3
   16050:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16054:	4630      	mov	r0, r6
   16056:	f000 f94d 	bl	162f4 <z_spin_lock_valid>
   1605a:	b940      	cbnz	r0, 1606e <k_mem_slab_free+0x36>
   1605c:	491c      	ldr	r1, [pc, #112]	; (160d0 <k_mem_slab_free+0x98>)
   1605e:	2294      	movs	r2, #148	; 0x94
   16060:	481c      	ldr	r0, [pc, #112]	; (160d4 <k_mem_slab_free+0x9c>)
   16062:	f005 f955 	bl	1b310 <assert_print>
   16066:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16068:	4819      	ldr	r0, [pc, #100]	; (160d0 <k_mem_slab_free+0x98>)
   1606a:	f005 f94a 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   1606e:	4630      	mov	r0, r6
   16070:	f000 f95c 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   16074:	f8d4 8018 	ldr.w	r8, [r4, #24]
   16078:	f1b8 0f00 	cmp.w	r8, #0
   1607c:	d10f      	bne.n	1609e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1607e:	4620      	mov	r0, r4
   16080:	f001 ffa2 	bl	17fc8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   16084:	b158      	cbz	r0, 1609e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16086:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16088:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1608c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1608e:	f001 fb17 	bl	176c0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   16092:	4639      	mov	r1, r7
   16094:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   16096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1609a:	f001 bb79 	b.w	17790 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1609e:	682b      	ldr	r3, [r5, #0]
   160a0:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   160a2:	4630      	mov	r0, r6
   160a4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   160a6:	682b      	ldr	r3, [r5, #0]
   160a8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   160aa:	69e3      	ldr	r3, [r4, #28]
   160ac:	3b01      	subs	r3, #1
   160ae:	61e3      	str	r3, [r4, #28]
   160b0:	f000 f92e 	bl	16310 <z_spin_unlock_valid>
   160b4:	b930      	cbnz	r0, 160c4 <k_mem_slab_free+0x8c>
   160b6:	4906      	ldr	r1, [pc, #24]	; (160d0 <k_mem_slab_free+0x98>)
   160b8:	22c2      	movs	r2, #194	; 0xc2
   160ba:	4806      	ldr	r0, [pc, #24]	; (160d4 <k_mem_slab_free+0x9c>)
   160bc:	f005 f928 	bl	1b310 <assert_print>
   160c0:	21c2      	movs	r1, #194	; 0xc2
   160c2:	e7d1      	b.n	16068 <k_mem_slab_free+0x30>
	__asm__ volatile(
   160c4:	f387 8811 	msr	BASEPRI, r7
   160c8:	f3bf 8f6f 	isb	sy
}
   160cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160d0:	00022232 	.word	0x00022232
   160d4:	000221f8 	.word	0x000221f8

000160d8 <z_impl_k_thread_custom_data_set>:
}

#ifdef CONFIG_THREAD_CUSTOM_DATA
void z_impl_k_thread_custom_data_set(void *value)
{
	_current->custom_data = value;
   160d8:	4b01      	ldr	r3, [pc, #4]	; (160e0 <z_impl_k_thread_custom_data_set+0x8>)
   160da:	689b      	ldr	r3, [r3, #8]
   160dc:	6718      	str	r0, [r3, #112]	; 0x70
}
   160de:	4770      	bx	lr
   160e0:	20006f78 	.word	0x20006f78

000160e4 <z_impl_k_thread_custom_data_get>:
#include <syscalls/k_thread_custom_data_set_mrsh.c>
#endif

void *z_impl_k_thread_custom_data_get(void)
{
	return _current->custom_data;
   160e4:	4b01      	ldr	r3, [pc, #4]	; (160ec <z_impl_k_thread_custom_data_get+0x8>)
   160e6:	689b      	ldr	r3, [r3, #8]
}
   160e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   160ea:	4770      	bx	lr
   160ec:	20006f78 	.word	0x20006f78

000160f0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   160f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   160f2:	4604      	mov	r4, r0
   160f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   160f6:	280f      	cmp	r0, #15
   160f8:	d12e      	bne.n	16158 <z_setup_new_thread+0x68>
   160fa:	4d1f      	ldr	r5, [pc, #124]	; (16178 <z_setup_new_thread+0x88>)
   160fc:	42ab      	cmp	r3, r5
   160fe:	d12f      	bne.n	16160 <z_setup_new_thread+0x70>
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   16100:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   16102:	f104 0558 	add.w	r5, r4, #88	; 0x58
   16106:	7326      	strb	r6, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   16108:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1610a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
	thread_base->pended_on = NULL;
   1610e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   16110:	3207      	adds	r2, #7
   16112:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   16116:	e9c4 121e 	strd	r1, r2, [r4, #120]	; 0x78
	thread_base->thread_state = (uint8_t)initial_state;
   1611a:	7366      	strb	r6, [r4, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   1611c:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1611e:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	thread_base->prio = priority;
   16120:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   16122:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   16126:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   16128:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1612a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1612e:	9202      	str	r2, [sp, #8]
   16130:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16132:	4620      	mov	r0, r4
   16134:	9201      	str	r2, [sp, #4]
   16136:	9a08      	ldr	r2, [sp, #32]
   16138:	9200      	str	r2, [sp, #0]
   1613a:	4632      	mov	r2, r6
   1613c:	f7f3 fd22 	bl	9b84 <arch_new_thread>
	if (!_current) {
   16140:	4b0e      	ldr	r3, [pc, #56]	; (1617c <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   16142:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   16144:	689b      	ldr	r3, [r3, #8]
	new_thread->custom_data = NULL;
   16146:	6725      	str	r5, [r4, #112]	; 0x70
	if (!_current) {
   16148:	b10b      	cbz	r3, 1614e <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   1614a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
}
   1614e:	4630      	mov	r0, r6
   16150:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   16154:	b004      	add	sp, #16
   16156:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   16158:	f100 0510 	add.w	r5, r0, #16
   1615c:	2d1e      	cmp	r5, #30
   1615e:	d9cf      	bls.n	16100 <z_setup_new_thread+0x10>
   16160:	4907      	ldr	r1, [pc, #28]	; (16180 <z_setup_new_thread+0x90>)
   16162:	4808      	ldr	r0, [pc, #32]	; (16184 <z_setup_new_thread+0x94>)
   16164:	f44f 7206 	mov.w	r2, #536	; 0x218
   16168:	f005 f8d2 	bl	1b310 <assert_print>
   1616c:	f44f 7106 	mov.w	r1, #536	; 0x218
   16170:	4803      	ldr	r0, [pc, #12]	; (16180 <z_setup_new_thread+0x90>)
   16172:	f005 f8c6 	bl	1b302 <assert_post_action>
   16176:	bf00      	nop
   16178:	0001633d 	.word	0x0001633d
   1617c:	20006f78 	.word	0x20006f78
   16180:	0002529d 	.word	0x0002529d
   16184:	000221f8 	.word	0x000221f8

00016188 <z_impl_k_thread_create>:
{
   16188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1618a:	b087      	sub	sp, #28
   1618c:	4604      	mov	r4, r0
   1618e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   16192:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   16196:	b155      	cbz	r5, 161ae <z_impl_k_thread_create+0x26>
   16198:	4917      	ldr	r1, [pc, #92]	; (161f8 <z_impl_k_thread_create+0x70>)
   1619a:	4818      	ldr	r0, [pc, #96]	; (161fc <z_impl_k_thread_create+0x74>)
   1619c:	f240 2287 	movw	r2, #647	; 0x287
   161a0:	f005 f8b6 	bl	1b310 <assert_print>
   161a4:	f240 2187 	movw	r1, #647	; 0x287
   161a8:	4813      	ldr	r0, [pc, #76]	; (161f8 <z_impl_k_thread_create+0x70>)
   161aa:	f005 f8aa 	bl	1b302 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   161ae:	9505      	str	r5, [sp, #20]
   161b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   161b2:	9504      	str	r5, [sp, #16]
   161b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   161b6:	9503      	str	r5, [sp, #12]
   161b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   161ba:	9502      	str	r5, [sp, #8]
   161bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   161be:	9501      	str	r5, [sp, #4]
   161c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   161c2:	9500      	str	r5, [sp, #0]
   161c4:	f7ff ff94 	bl	160f0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   161c8:	f1b6 3fff 	cmp.w	r6, #4294967295
   161cc:	bf08      	it	eq
   161ce:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   161d2:	d005      	beq.n	161e0 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   161d4:	ea56 0307 	orrs.w	r3, r6, r7
   161d8:	d105      	bne.n	161e6 <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   161da:	4620      	mov	r0, r4
   161dc:	f001 fb0c 	bl	177f8 <z_sched_start>
}
   161e0:	4620      	mov	r0, r4
   161e2:	b007      	add	sp, #28
   161e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   161e6:	463a      	mov	r2, r7
   161e8:	4633      	mov	r3, r6
   161ea:	4905      	ldr	r1, [pc, #20]	; (16200 <z_impl_k_thread_create+0x78>)
   161ec:	f104 0018 	add.w	r0, r4, #24
   161f0:	f002 f9cc 	bl	1858c <z_add_timeout>
   161f4:	e7f4      	b.n	161e0 <z_impl_k_thread_create+0x58>
   161f6:	bf00      	nop
   161f8:	0002529d 	.word	0x0002529d
   161fc:	000221f8 	.word	0x000221f8
   16200:	00017f3d 	.word	0x00017f3d

00016204 <z_init_static_threads>:
{
   16204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16208:	4c35      	ldr	r4, [pc, #212]	; (162e0 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1620a:	4d36      	ldr	r5, [pc, #216]	; (162e4 <z_init_static_threads+0xe0>)
{
   1620c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1620e:	42ac      	cmp	r4, r5
   16210:	4626      	mov	r6, r4
   16212:	d926      	bls.n	16262 <z_init_static_threads+0x5e>
   16214:	4934      	ldr	r1, [pc, #208]	; (162e8 <z_init_static_threads+0xe4>)
   16216:	f240 22ee 	movw	r2, #750	; 0x2ee
   1621a:	4834      	ldr	r0, [pc, #208]	; (162ec <z_init_static_threads+0xe8>)
   1621c:	f005 f878 	bl	1b310 <assert_print>
   16220:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   16224:	4830      	ldr	r0, [pc, #192]	; (162e8 <z_init_static_threads+0xe4>)
   16226:	f005 f86c 	bl	1b302 <assert_post_action>
		z_setup_new_thread(
   1622a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1622e:	9305      	str	r3, [sp, #20]
   16230:	f854 3c10 	ldr.w	r3, [r4, #-16]
   16234:	9304      	str	r3, [sp, #16]
   16236:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1623a:	9303      	str	r3, [sp, #12]
   1623c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   16240:	9302      	str	r3, [sp, #8]
   16242:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   16246:	9301      	str	r3, [sp, #4]
   16248:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1624c:	9300      	str	r3, [sp, #0]
   1624e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   16252:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   16256:	f7ff ff4b 	bl	160f0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1625a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1625e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   16260:	e7d5      	b.n	1620e <z_init_static_threads+0xa>
   16262:	42ae      	cmp	r6, r5
   16264:	f104 0430 	add.w	r4, r4, #48	; 0x30
   16268:	d3df      	bcc.n	1622a <z_init_static_threads+0x26>
	k_sched_lock();
   1626a:	f001 fb05 	bl	17878 <k_sched_lock>
   1626e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16272:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   16276:	4c1a      	ldr	r4, [pc, #104]	; (162e0 <z_init_static_threads+0xdc>)
   16278:	f8df 9074 	ldr.w	r9, [pc, #116]	; 162f0 <z_init_static_threads+0xec>
   1627c:	42ac      	cmp	r4, r5
   1627e:	d928      	bls.n	162d2 <z_init_static_threads+0xce>
   16280:	4919      	ldr	r1, [pc, #100]	; (162e8 <z_init_static_threads+0xe4>)
   16282:	f240 320d 	movw	r2, #781	; 0x30d
   16286:	4819      	ldr	r0, [pc, #100]	; (162ec <z_init_static_threads+0xe8>)
   16288:	f005 f842 	bl	1b310 <assert_print>
   1628c:	f240 310d 	movw	r1, #781	; 0x30d
   16290:	e7c8      	b.n	16224 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16292:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16294:	1c5a      	adds	r2, r3, #1
   16296:	d00d      	beq.n	162b4 <z_init_static_threads+0xb0>
   16298:	2100      	movs	r1, #0
   1629a:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1629c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   162a0:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   162a4:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   162a8:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   162ac:	d104      	bne.n	162b8 <z_init_static_threads+0xb4>
	z_sched_start(thread);
   162ae:	4640      	mov	r0, r8
   162b0:	f001 faa2 	bl	177f8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   162b4:	3430      	adds	r4, #48	; 0x30
   162b6:	e7e1      	b.n	1627c <z_init_static_threads+0x78>
   162b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   162bc:	2300      	movs	r3, #0
   162be:	f7ee feb3 	bl	5028 <__aeabi_uldivmod>
   162c2:	4602      	mov	r2, r0
   162c4:	460b      	mov	r3, r1
   162c6:	f108 0018 	add.w	r0, r8, #24
   162ca:	4649      	mov	r1, r9
   162cc:	f002 f95e 	bl	1858c <z_add_timeout>
   162d0:	e7f0      	b.n	162b4 <z_init_static_threads+0xb0>
   162d2:	d3de      	bcc.n	16292 <z_init_static_threads+0x8e>
}
   162d4:	b007      	add	sp, #28
   162d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   162da:	f001 bb19 	b.w	17910 <k_sched_unlock>
   162de:	bf00      	nop
   162e0:	0001f83c 	.word	0x0001f83c
   162e4:	0001f86c 	.word	0x0001f86c
   162e8:	0002529d 	.word	0x0002529d
   162ec:	000221f8 	.word	0x000221f8
   162f0:	00017f3d 	.word	0x00017f3d

000162f4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   162f4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   162f6:	b138      	cbz	r0, 16308 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   162f8:	4b04      	ldr	r3, [pc, #16]	; (1630c <z_spin_lock_valid+0x18>)
   162fa:	f000 0003 	and.w	r0, r0, #3
   162fe:	7d1b      	ldrb	r3, [r3, #20]
   16300:	1ac0      	subs	r0, r0, r3
   16302:	bf18      	it	ne
   16304:	2001      	movne	r0, #1
   16306:	4770      	bx	lr
			return false;
		}
	}
	return true;
   16308:	2001      	movs	r0, #1
}
   1630a:	4770      	bx	lr
   1630c:	20006f78 	.word	0x20006f78

00016310 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   16310:	4a05      	ldr	r2, [pc, #20]	; (16328 <z_spin_unlock_valid+0x18>)
{
   16312:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   16314:	7d11      	ldrb	r1, [r2, #20]
   16316:	6892      	ldr	r2, [r2, #8]
   16318:	430a      	orrs	r2, r1
   1631a:	6801      	ldr	r1, [r0, #0]
   1631c:	2000      	movs	r0, #0
   1631e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   16320:	bf04      	itt	eq
   16322:	6018      	streq	r0, [r3, #0]
	return true;
   16324:	2001      	moveq	r0, #1
}
   16326:	4770      	bx	lr
   16328:	20006f78 	.word	0x20006f78

0001632c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1632c:	4b02      	ldr	r3, [pc, #8]	; (16338 <z_spin_lock_set_owner+0xc>)
   1632e:	7d1a      	ldrb	r2, [r3, #20]
   16330:	689b      	ldr	r3, [r3, #8]
   16332:	4313      	orrs	r3, r2
   16334:	6003      	str	r3, [r0, #0]
}
   16336:	4770      	bx	lr
   16338:	20006f78 	.word	0x20006f78

0001633c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1633c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1633e:	4c12      	ldr	r4, [pc, #72]	; (16388 <idle+0x4c>)
   16340:	68a3      	ldr	r3, [r4, #8]
   16342:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16346:	2b00      	cmp	r3, #0
   16348:	db10      	blt.n	1636c <idle+0x30>
	return !z_sys_post_kernel;
   1634a:	4d10      	ldr	r5, [pc, #64]	; (1638c <idle+0x50>)
	__asm__ volatile(
   1634c:	f04f 0220 	mov.w	r2, #32
   16350:	f3ef 8311 	mrs	r3, BASEPRI
   16354:	f382 8812 	msr	BASEPRI_MAX, r2
   16358:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1635c:	f002 f9fc 	bl	18758 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   16360:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   16362:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   16364:	b95b      	cbnz	r3, 1637e <idle+0x42>
	arch_cpu_idle();
   16366:	f7f3 fa81 	bl	986c <arch_cpu_idle>
}
   1636a:	e7ef      	b.n	1634c <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1636c:	4908      	ldr	r1, [pc, #32]	; (16390 <idle+0x54>)
   1636e:	4809      	ldr	r0, [pc, #36]	; (16394 <idle+0x58>)
   16370:	2227      	movs	r2, #39	; 0x27
   16372:	f004 ffcd 	bl	1b310 <assert_print>
   16376:	2127      	movs	r1, #39	; 0x27
   16378:	4805      	ldr	r0, [pc, #20]	; (16390 <idle+0x54>)
   1637a:	f004 ffc2 	bl	1b302 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1637e:	f7f2 f98b 	bl	8698 <pm_system_suspend>
   16382:	2800      	cmp	r0, #0
   16384:	d1e2      	bne.n	1634c <idle+0x10>
   16386:	e7ee      	b.n	16366 <idle+0x2a>
   16388:	20006f78 	.word	0x20006f78
   1638c:	20007370 	.word	0x20007370
   16390:	000252c0 	.word	0x000252c0
   16394:	000221f8 	.word	0x000221f8

00016398 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   16398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1639c:	4604      	mov	r4, r0
   1639e:	4689      	mov	r9, r1
   163a0:	4690      	mov	r8, r2
   163a2:	461d      	mov	r5, r3
   163a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   163a8:	b15b      	cbz	r3, 163c2 <z_impl_k_msgq_put+0x2a>
   163aa:	ea52 0305 	orrs.w	r3, r2, r5
   163ae:	d008      	beq.n	163c2 <z_impl_k_msgq_put+0x2a>
   163b0:	493b      	ldr	r1, [pc, #236]	; (164a0 <z_impl_k_msgq_put+0x108>)
   163b2:	483c      	ldr	r0, [pc, #240]	; (164a4 <z_impl_k_msgq_put+0x10c>)
   163b4:	2276      	movs	r2, #118	; 0x76
   163b6:	f004 ffab 	bl	1b310 <assert_print>
   163ba:	2176      	movs	r1, #118	; 0x76
   163bc:	4838      	ldr	r0, [pc, #224]	; (164a0 <z_impl_k_msgq_put+0x108>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   163be:	f004 ffa0 	bl	1b302 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   163c2:	f104 0608 	add.w	r6, r4, #8
   163c6:	f04f 0320 	mov.w	r3, #32
   163ca:	f3ef 8711 	mrs	r7, BASEPRI
   163ce:	f383 8812 	msr	BASEPRI_MAX, r3
   163d2:	f3bf 8f6f 	isb	sy
   163d6:	4630      	mov	r0, r6
   163d8:	f7ff ff8c 	bl	162f4 <z_spin_lock_valid>
   163dc:	b938      	cbnz	r0, 163ee <z_impl_k_msgq_put+0x56>
   163de:	4932      	ldr	r1, [pc, #200]	; (164a8 <z_impl_k_msgq_put+0x110>)
   163e0:	2294      	movs	r2, #148	; 0x94
   163e2:	4830      	ldr	r0, [pc, #192]	; (164a4 <z_impl_k_msgq_put+0x10c>)
   163e4:	f004 ff94 	bl	1b310 <assert_print>
   163e8:	2194      	movs	r1, #148	; 0x94
   163ea:	482f      	ldr	r0, [pc, #188]	; (164a8 <z_impl_k_msgq_put+0x110>)
   163ec:	e7e7      	b.n	163be <z_impl_k_msgq_put+0x26>
	z_spin_lock_set_owner(l);
   163ee:	4630      	mov	r0, r6
   163f0:	f7ff ff9c 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   163f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   163f6:	6923      	ldr	r3, [r4, #16]
   163f8:	429a      	cmp	r2, r3
   163fa:	d239      	bcs.n	16470 <z_impl_k_msgq_put+0xd8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   163fc:	4620      	mov	r0, r4
   163fe:	f001 fde3 	bl	17fc8 <z_unpend_first_thread>
   16402:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   16404:	4605      	mov	r5, r0
   16406:	68e2      	ldr	r2, [r4, #12]
   16408:	b180      	cbz	r0, 1642c <z_impl_k_msgq_put+0x94>
   1640a:	2400      	movs	r4, #0
   1640c:	6940      	ldr	r0, [r0, #20]
   1640e:	f008 ffd9 	bl	1f3c4 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   16412:	4628      	mov	r0, r5
   16414:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
   16418:	f001 f952 	bl	176c0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1641c:	4639      	mov	r1, r7
   1641e:	4630      	mov	r0, r6
   16420:	f001 f9b6 	bl	17790 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   16424:	4620      	mov	r0, r4
   16426:	b003      	add	sp, #12
   16428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1642c:	6a20      	ldr	r0, [r4, #32]
   1642e:	f008 ffc9 	bl	1f3c4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   16432:	6a23      	ldr	r3, [r4, #32]
   16434:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   16436:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   1643a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1643c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   1643e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   16440:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   16442:	bf08      	it	eq
   16444:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   16446:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   1644a:	bf08      	it	eq
   1644c:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   1644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16450:	3301      	adds	r3, #1
   16452:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   16454:	f008 ff54 	bl	1f300 <z_handle_obj_poll_events>
		result = 0;
   16458:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1645a:	4630      	mov	r0, r6
   1645c:	f7ff ff58 	bl	16310 <z_spin_unlock_valid>
   16460:	b9c8      	cbnz	r0, 16496 <z_impl_k_msgq_put+0xfe>
   16462:	4911      	ldr	r1, [pc, #68]	; (164a8 <z_impl_k_msgq_put+0x110>)
   16464:	22c2      	movs	r2, #194	; 0xc2
   16466:	480f      	ldr	r0, [pc, #60]	; (164a4 <z_impl_k_msgq_put+0x10c>)
   16468:	f004 ff52 	bl	1b310 <assert_print>
   1646c:	21c2      	movs	r1, #194	; 0xc2
   1646e:	e7bc      	b.n	163ea <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16470:	ea58 0305 	orrs.w	r3, r8, r5
   16474:	d00c      	beq.n	16490 <z_impl_k_msgq_put+0xf8>
		_current->base.swap_data = (void *) data;
   16476:	4b0d      	ldr	r3, [pc, #52]	; (164ac <z_impl_k_msgq_put+0x114>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16478:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   1647a:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1647c:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   1647e:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16482:	4630      	mov	r0, r6
   16484:	e9cd 8500 	strd	r8, r5, [sp]
   16488:	f001 fbd6 	bl	17c38 <z_pend_curr>
   1648c:	4604      	mov	r4, r0
		return result;
   1648e:	e7c9      	b.n	16424 <z_impl_k_msgq_put+0x8c>
		result = -ENOMSG;
   16490:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16494:	e7e1      	b.n	1645a <z_impl_k_msgq_put+0xc2>
	__asm__ volatile(
   16496:	f387 8811 	msr	BASEPRI, r7
   1649a:	f3bf 8f6f 	isb	sy
	return result;
   1649e:	e7c1      	b.n	16424 <z_impl_k_msgq_put+0x8c>
   164a0:	000252e1 	.word	0x000252e1
   164a4:	000221f8 	.word	0x000221f8
   164a8:	00022232 	.word	0x00022232
   164ac:	20006f78 	.word	0x20006f78

000164b0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   164b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   164b4:	4604      	mov	r4, r0
   164b6:	4688      	mov	r8, r1
   164b8:	4617      	mov	r7, r2
   164ba:	461d      	mov	r5, r3
   164bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   164c0:	b15b      	cbz	r3, 164da <z_impl_k_msgq_get+0x2a>
   164c2:	ea52 0305 	orrs.w	r3, r2, r5
   164c6:	d008      	beq.n	164da <z_impl_k_msgq_get+0x2a>
   164c8:	493e      	ldr	r1, [pc, #248]	; (165c4 <z_impl_k_msgq_get+0x114>)
   164ca:	483f      	ldr	r0, [pc, #252]	; (165c8 <z_impl_k_msgq_get+0x118>)
   164cc:	22d0      	movs	r2, #208	; 0xd0
   164ce:	f004 ff1f 	bl	1b310 <assert_print>
   164d2:	21d0      	movs	r1, #208	; 0xd0
   164d4:	483b      	ldr	r0, [pc, #236]	; (165c4 <z_impl_k_msgq_get+0x114>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   164d6:	f004 ff14 	bl	1b302 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   164da:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   164de:	f04f 0320 	mov.w	r3, #32
   164e2:	f3ef 8911 	mrs	r9, BASEPRI
   164e6:	f383 8812 	msr	BASEPRI_MAX, r3
   164ea:	f3bf 8f6f 	isb	sy
   164ee:	4630      	mov	r0, r6
   164f0:	f7ff ff00 	bl	162f4 <z_spin_lock_valid>
   164f4:	b938      	cbnz	r0, 16506 <z_impl_k_msgq_get+0x56>
   164f6:	4935      	ldr	r1, [pc, #212]	; (165cc <z_impl_k_msgq_get+0x11c>)
   164f8:	2294      	movs	r2, #148	; 0x94
   164fa:	4833      	ldr	r0, [pc, #204]	; (165c8 <z_impl_k_msgq_get+0x118>)
   164fc:	f004 ff08 	bl	1b310 <assert_print>
   16500:	2194      	movs	r1, #148	; 0x94
   16502:	4832      	ldr	r0, [pc, #200]	; (165cc <z_impl_k_msgq_get+0x11c>)
   16504:	e7e7      	b.n	164d6 <z_impl_k_msgq_get+0x26>
	z_spin_lock_set_owner(l);
   16506:	4630      	mov	r0, r6
   16508:	f7ff ff10 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1650c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1650e:	2b00      	cmp	r3, #0
   16510:	d036      	beq.n	16580 <z_impl_k_msgq_get+0xd0>
   16512:	68e2      	ldr	r2, [r4, #12]
   16514:	69e1      	ldr	r1, [r4, #28]
   16516:	4640      	mov	r0, r8
   16518:	f008 ff54 	bl	1f3c4 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1651c:	69e3      	ldr	r3, [r4, #28]
   1651e:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   16520:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   16522:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   16524:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   16526:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   16528:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1652a:	bf04      	itt	eq
   1652c:	6963      	ldreq	r3, [r4, #20]
   1652e:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   16530:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16532:	3b01      	subs	r3, #1
   16534:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   16536:	f001 fd47 	bl	17fc8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1653a:	4605      	mov	r5, r0
   1653c:	2800      	cmp	r0, #0
   1653e:	d031      	beq.n	165a4 <z_impl_k_msgq_get+0xf4>
   16540:	6941      	ldr	r1, [r0, #20]
   16542:	68e2      	ldr	r2, [r4, #12]
   16544:	6a20      	ldr	r0, [r4, #32]
   16546:	f008 ff3d 	bl	1f3c4 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1654a:	6a23      	ldr	r3, [r4, #32]
   1654c:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1654e:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   16550:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   16552:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   16554:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   16556:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   16558:	bf04      	itt	eq
   1655a:	6963      	ldreq	r3, [r4, #20]
   1655c:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   1655e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16560:	3301      	adds	r3, #1
   16562:	6263      	str	r3, [r4, #36]	; 0x24
   16564:	2400      	movs	r4, #0
   16566:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
			z_ready_thread(pending_thread);
   1656a:	f001 f8a9 	bl	176c0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1656e:	4649      	mov	r1, r9
   16570:	4630      	mov	r0, r6
   16572:	f001 f90d 	bl	17790 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   16576:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   16578:	4628      	mov	r0, r5
   1657a:	b003      	add	sp, #12
   1657c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16580:	ea57 0305 	orrs.w	r3, r7, r5
   16584:	d00c      	beq.n	165a0 <z_impl_k_msgq_get+0xf0>
		_current->base.swap_data = data;
   16586:	4b12      	ldr	r3, [pc, #72]	; (165d0 <z_impl_k_msgq_get+0x120>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16588:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1658a:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1658c:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   1658e:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   16592:	4630      	mov	r0, r6
   16594:	e9cd 7500 	strd	r7, r5, [sp]
   16598:	f001 fb4e 	bl	17c38 <z_pend_curr>
   1659c:	4605      	mov	r5, r0
		return result;
   1659e:	e7eb      	b.n	16578 <z_impl_k_msgq_get+0xc8>
		result = -ENOMSG;
   165a0:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   165a4:	4630      	mov	r0, r6
   165a6:	f7ff feb3 	bl	16310 <z_spin_unlock_valid>
   165aa:	b930      	cbnz	r0, 165ba <z_impl_k_msgq_get+0x10a>
   165ac:	4907      	ldr	r1, [pc, #28]	; (165cc <z_impl_k_msgq_get+0x11c>)
   165ae:	22c2      	movs	r2, #194	; 0xc2
   165b0:	4805      	ldr	r0, [pc, #20]	; (165c8 <z_impl_k_msgq_get+0x118>)
   165b2:	f004 fead 	bl	1b310 <assert_print>
   165b6:	21c2      	movs	r1, #194	; 0xc2
   165b8:	e7a3      	b.n	16502 <z_impl_k_msgq_get+0x52>
	__asm__ volatile(
   165ba:	f389 8811 	msr	BASEPRI, r9
   165be:	f3bf 8f6f 	isb	sy
	return result;
   165c2:	e7d9      	b.n	16578 <z_impl_k_msgq_get+0xc8>
   165c4:	000252e1 	.word	0x000252e1
   165c8:	000221f8 	.word	0x000221f8
   165cc:	00022232 	.word	0x00022232
   165d0:	20006f78 	.word	0x20006f78

000165d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   165d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   165d8:	4604      	mov	r4, r0
   165da:	4617      	mov	r7, r2
   165dc:	461e      	mov	r6, r3
   165de:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   165e2:	b145      	cbz	r5, 165f6 <z_impl_k_mutex_lock+0x22>
   165e4:	4951      	ldr	r1, [pc, #324]	; (1672c <z_impl_k_mutex_lock+0x158>)
   165e6:	4852      	ldr	r0, [pc, #328]	; (16730 <z_impl_k_mutex_lock+0x15c>)
   165e8:	2265      	movs	r2, #101	; 0x65
   165ea:	f004 fe91 	bl	1b310 <assert_print>
   165ee:	2165      	movs	r1, #101	; 0x65
   165f0:	484e      	ldr	r0, [pc, #312]	; (1672c <z_impl_k_mutex_lock+0x158>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   165f2:	f004 fe86 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   165f6:	f04f 0320 	mov.w	r3, #32
   165fa:	f3ef 8811 	mrs	r8, BASEPRI
   165fe:	f383 8812 	msr	BASEPRI_MAX, r3
   16602:	f3bf 8f6f 	isb	sy
   16606:	484b      	ldr	r0, [pc, #300]	; (16734 <z_impl_k_mutex_lock+0x160>)
   16608:	f7ff fe74 	bl	162f4 <z_spin_lock_valid>
   1660c:	b938      	cbnz	r0, 1661e <z_impl_k_mutex_lock+0x4a>
   1660e:	494a      	ldr	r1, [pc, #296]	; (16738 <z_impl_k_mutex_lock+0x164>)
   16610:	2294      	movs	r2, #148	; 0x94
   16612:	4847      	ldr	r0, [pc, #284]	; (16730 <z_impl_k_mutex_lock+0x15c>)
   16614:	f004 fe7c 	bl	1b310 <assert_print>
   16618:	2194      	movs	r1, #148	; 0x94
   1661a:	4847      	ldr	r0, [pc, #284]	; (16738 <z_impl_k_mutex_lock+0x164>)
   1661c:	e7e9      	b.n	165f2 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   1661e:	4845      	ldr	r0, [pc, #276]	; (16734 <z_impl_k_mutex_lock+0x160>)
   16620:	f7ff fe84 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16624:	68e3      	ldr	r3, [r4, #12]
   16626:	4a45      	ldr	r2, [pc, #276]	; (1673c <z_impl_k_mutex_lock+0x168>)
   16628:	b19b      	cbz	r3, 16652 <z_impl_k_mutex_lock+0x7e>
   1662a:	68a0      	ldr	r0, [r4, #8]
   1662c:	6891      	ldr	r1, [r2, #8]
   1662e:	4288      	cmp	r0, r1
   16630:	d022      	beq.n	16678 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   16632:	ea57 0306 	orrs.w	r3, r7, r6
   16636:	d127      	bne.n	16688 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16638:	483e      	ldr	r0, [pc, #248]	; (16734 <z_impl_k_mutex_lock+0x160>)
   1663a:	f7ff fe69 	bl	16310 <z_spin_unlock_valid>
   1663e:	b1a0      	cbz	r0, 1666a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   16640:	f388 8811 	msr	BASEPRI, r8
   16644:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   16648:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1664c:	b002      	add	sp, #8
   1664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   16652:	6891      	ldr	r1, [r2, #8]
   16654:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   16658:	3301      	adds	r3, #1
   1665a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1665c:	6893      	ldr	r3, [r2, #8]
   1665e:	4835      	ldr	r0, [pc, #212]	; (16734 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16660:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   16662:	60a3      	str	r3, [r4, #8]
   16664:	f7ff fe54 	bl	16310 <z_spin_unlock_valid>
   16668:	b940      	cbnz	r0, 1667c <z_impl_k_mutex_lock+0xa8>
   1666a:	4933      	ldr	r1, [pc, #204]	; (16738 <z_impl_k_mutex_lock+0x164>)
   1666c:	22c2      	movs	r2, #194	; 0xc2
   1666e:	4830      	ldr	r0, [pc, #192]	; (16730 <z_impl_k_mutex_lock+0x15c>)
   16670:	f004 fe4e 	bl	1b310 <assert_print>
   16674:	21c2      	movs	r1, #194	; 0xc2
   16676:	e7d0      	b.n	1661a <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   16678:	6921      	ldr	r1, [r4, #16]
   1667a:	e7ed      	b.n	16658 <z_impl_k_mutex_lock+0x84>
   1667c:	f388 8811 	msr	BASEPRI, r8
   16680:	f3bf 8f6f 	isb	sy
		return 0;
   16684:	2000      	movs	r0, #0
   16686:	e7e1      	b.n	1664c <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16688:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1668c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   16690:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   16694:	4299      	cmp	r1, r3
   16696:	bfa8      	it	ge
   16698:	4619      	movge	r1, r3
   1669a:	4291      	cmp	r1, r2
   1669c:	bfb8      	it	lt
   1669e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   166a0:	428b      	cmp	r3, r1
   166a2:	dd02      	ble.n	166aa <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   166a4:	f008 fc93 	bl	1efce <adjust_owner_prio.isra.0>
   166a8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   166aa:	4622      	mov	r2, r4
   166ac:	4641      	mov	r1, r8
   166ae:	e9cd 7600 	strd	r7, r6, [sp]
   166b2:	4820      	ldr	r0, [pc, #128]	; (16734 <z_impl_k_mutex_lock+0x160>)
   166b4:	f001 fac0 	bl	17c38 <z_pend_curr>
	if (got_mutex == 0) {
   166b8:	2800      	cmp	r0, #0
   166ba:	d0e3      	beq.n	16684 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   166bc:	f04f 0320 	mov.w	r3, #32
   166c0:	f3ef 8611 	mrs	r6, BASEPRI
   166c4:	f383 8812 	msr	BASEPRI_MAX, r3
   166c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   166cc:	4819      	ldr	r0, [pc, #100]	; (16734 <z_impl_k_mutex_lock+0x160>)
   166ce:	f7ff fe11 	bl	162f4 <z_spin_lock_valid>
   166d2:	2800      	cmp	r0, #0
   166d4:	d09b      	beq.n	1660e <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   166d6:	4817      	ldr	r0, [pc, #92]	; (16734 <z_impl_k_mutex_lock+0x160>)
   166d8:	f7ff fe28 	bl	1632c <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   166dc:	68a0      	ldr	r0, [r4, #8]
   166de:	b1c0      	cbz	r0, 16712 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   166e0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   166e2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   166e4:	429c      	cmp	r4, r3
   166e6:	d00a      	beq.n	166fe <z_impl_k_mutex_lock+0x12a>
   166e8:	b14b      	cbz	r3, 166fe <z_impl_k_mutex_lock+0x12a>
   166ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
   166ee:	4299      	cmp	r1, r3
   166f0:	bfa8      	it	ge
   166f2:	4619      	movge	r1, r3
   166f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   166f8:	4299      	cmp	r1, r3
   166fa:	bfb8      	it	lt
   166fc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   166fe:	f008 fc66 	bl	1efce <adjust_owner_prio.isra.0>
   16702:	b130      	cbz	r0, 16712 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   16704:	4631      	mov	r1, r6
   16706:	480b      	ldr	r0, [pc, #44]	; (16734 <z_impl_k_mutex_lock+0x160>)
   16708:	f001 f842 	bl	17790 <z_reschedule>
	return -EAGAIN;
   1670c:	f06f 000a 	mvn.w	r0, #10
   16710:	e79c      	b.n	1664c <z_impl_k_mutex_lock+0x78>
	if (resched) {
   16712:	2d00      	cmp	r5, #0
   16714:	d1f6      	bne.n	16704 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16716:	4807      	ldr	r0, [pc, #28]	; (16734 <z_impl_k_mutex_lock+0x160>)
   16718:	f7ff fdfa 	bl	16310 <z_spin_unlock_valid>
   1671c:	2800      	cmp	r0, #0
   1671e:	d0a4      	beq.n	1666a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   16720:	f386 8811 	msr	BASEPRI, r6
   16724:	f3bf 8f6f 	isb	sy
   16728:	e7f0      	b.n	1670c <z_impl_k_mutex_lock+0x138>
   1672a:	bf00      	nop
   1672c:	00025303 	.word	0x00025303
   16730:	000221f8 	.word	0x000221f8
   16734:	20006fa8 	.word	0x20006fa8
   16738:	00022232 	.word	0x00022232
   1673c:	20006f78 	.word	0x20006f78

00016740 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   16740:	b570      	push	{r4, r5, r6, lr}
   16742:	4604      	mov	r4, r0
   16744:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   16748:	b146      	cbz	r6, 1675c <z_impl_k_mutex_unlock+0x1c>
   1674a:	4931      	ldr	r1, [pc, #196]	; (16810 <z_impl_k_mutex_unlock+0xd0>)
   1674c:	22cd      	movs	r2, #205	; 0xcd
   1674e:	4831      	ldr	r0, [pc, #196]	; (16814 <z_impl_k_mutex_unlock+0xd4>)
   16750:	f004 fdde 	bl	1b310 <assert_print>
   16754:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   16756:	482e      	ldr	r0, [pc, #184]	; (16810 <z_impl_k_mutex_unlock+0xd0>)
   16758:	f004 fdd3 	bl	1b302 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1675c:	6883      	ldr	r3, [r0, #8]
   1675e:	2b00      	cmp	r3, #0
   16760:	d04f      	beq.n	16802 <z_impl_k_mutex_unlock+0xc2>
	CHECKIF(mutex->owner != _current) {
   16762:	4a2d      	ldr	r2, [pc, #180]	; (16818 <z_impl_k_mutex_unlock+0xd8>)
   16764:	6892      	ldr	r2, [r2, #8]
   16766:	4293      	cmp	r3, r2
   16768:	d14e      	bne.n	16808 <z_impl_k_mutex_unlock+0xc8>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1676a:	68c3      	ldr	r3, [r0, #12]
   1676c:	b933      	cbnz	r3, 1677c <z_impl_k_mutex_unlock+0x3c>
   1676e:	4928      	ldr	r1, [pc, #160]	; (16810 <z_impl_k_mutex_unlock+0xd0>)
   16770:	22e5      	movs	r2, #229	; 0xe5
   16772:	4828      	ldr	r0, [pc, #160]	; (16814 <z_impl_k_mutex_unlock+0xd4>)
   16774:	f004 fdcc 	bl	1b310 <assert_print>
   16778:	21e5      	movs	r1, #229	; 0xe5
   1677a:	e7ec      	b.n	16756 <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1677c:	2b01      	cmp	r3, #1
   1677e:	d003      	beq.n	16788 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   16780:	3b01      	subs	r3, #1
   16782:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   16784:	2000      	movs	r0, #0
}
   16786:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   16788:	f04f 0320 	mov.w	r3, #32
   1678c:	f3ef 8511 	mrs	r5, BASEPRI
   16790:	f383 8812 	msr	BASEPRI_MAX, r3
   16794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16798:	4820      	ldr	r0, [pc, #128]	; (1681c <z_impl_k_mutex_unlock+0xdc>)
   1679a:	f7ff fdab 	bl	162f4 <z_spin_lock_valid>
   1679e:	b938      	cbnz	r0, 167b0 <z_impl_k_mutex_unlock+0x70>
   167a0:	491f      	ldr	r1, [pc, #124]	; (16820 <z_impl_k_mutex_unlock+0xe0>)
   167a2:	2294      	movs	r2, #148	; 0x94
   167a4:	481b      	ldr	r0, [pc, #108]	; (16814 <z_impl_k_mutex_unlock+0xd4>)
   167a6:	f004 fdb3 	bl	1b310 <assert_print>
   167aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   167ac:	481c      	ldr	r0, [pc, #112]	; (16820 <z_impl_k_mutex_unlock+0xe0>)
   167ae:	e7d3      	b.n	16758 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   167b0:	481a      	ldr	r0, [pc, #104]	; (1681c <z_impl_k_mutex_unlock+0xdc>)
   167b2:	f7ff fdbb 	bl	1632c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   167b6:	6921      	ldr	r1, [r4, #16]
   167b8:	68a0      	ldr	r0, [r4, #8]
   167ba:	f008 fc08 	bl	1efce <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   167be:	4620      	mov	r0, r4
   167c0:	f001 fc02 	bl	17fc8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   167c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   167c6:	b158      	cbz	r0, 167e0 <z_impl_k_mutex_unlock+0xa0>
		mutex->owner_orig_prio = new_owner->base.prio;
   167c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   167cc:	6122      	str	r2, [r4, #16]
   167ce:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
		z_ready_thread(new_owner);
   167d2:	f000 ff75 	bl	176c0 <z_ready_thread>
		z_reschedule(&lock, key);
   167d6:	4629      	mov	r1, r5
   167d8:	4810      	ldr	r0, [pc, #64]	; (1681c <z_impl_k_mutex_unlock+0xdc>)
   167da:	f000 ffd9 	bl	17790 <z_reschedule>
   167de:	e7d1      	b.n	16784 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   167e0:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   167e2:	480e      	ldr	r0, [pc, #56]	; (1681c <z_impl_k_mutex_unlock+0xdc>)
   167e4:	f7ff fd94 	bl	16310 <z_spin_unlock_valid>
   167e8:	b930      	cbnz	r0, 167f8 <z_impl_k_mutex_unlock+0xb8>
   167ea:	490d      	ldr	r1, [pc, #52]	; (16820 <z_impl_k_mutex_unlock+0xe0>)
   167ec:	22c2      	movs	r2, #194	; 0xc2
   167ee:	4809      	ldr	r0, [pc, #36]	; (16814 <z_impl_k_mutex_unlock+0xd4>)
   167f0:	f004 fd8e 	bl	1b310 <assert_print>
   167f4:	21c2      	movs	r1, #194	; 0xc2
   167f6:	e7d9      	b.n	167ac <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   167f8:	f385 8811 	msr	BASEPRI, r5
   167fc:	f3bf 8f6f 	isb	sy
   16800:	e7c0      	b.n	16784 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   16802:	f06f 0015 	mvn.w	r0, #21
   16806:	e7be      	b.n	16786 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   16808:	f04f 30ff 	mov.w	r0, #4294967295
   1680c:	e7bb      	b.n	16786 <z_impl_k_mutex_unlock+0x46>
   1680e:	bf00      	nop
   16810:	00025303 	.word	0x00025303
   16814:	000221f8 	.word	0x000221f8
   16818:	20006f78 	.word	0x20006f78
   1681c:	20006fa8 	.word	0x20006fa8
   16820:	00022232 	.word	0x00022232

00016824 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   16824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16828:	4604      	mov	r4, r0
   1682a:	460d      	mov	r5, r1
   1682c:	4690      	mov	r8, r2
   1682e:	4699      	mov	r9, r3
   16830:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16834:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   16838:	f04f 0320 	mov.w	r3, #32
   1683c:	f3ef 8711 	mrs	r7, BASEPRI
   16840:	f383 8812 	msr	BASEPRI_MAX, r3
   16844:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16848:	4630      	mov	r0, r6
   1684a:	f7ff fd53 	bl	162f4 <z_spin_lock_valid>
   1684e:	b940      	cbnz	r0, 16862 <queue_insert+0x3e>
   16850:	4937      	ldr	r1, [pc, #220]	; (16930 <queue_insert+0x10c>)
   16852:	2294      	movs	r2, #148	; 0x94
   16854:	4837      	ldr	r0, [pc, #220]	; (16934 <queue_insert+0x110>)
   16856:	f004 fd5b 	bl	1b310 <assert_print>
   1685a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1685c:	4834      	ldr	r0, [pc, #208]	; (16930 <queue_insert+0x10c>)
   1685e:	f004 fd50 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16862:	4630      	mov	r0, r6
   16864:	f7ff fd62 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   16868:	f1ba 0f00 	cmp.w	sl, #0
   1686c:	d000      	beq.n	16870 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1686e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   16870:	f104 000c 	add.w	r0, r4, #12
   16874:	f001 fba8 	bl	17fc8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   16878:	b160      	cbz	r0, 16894 <queue_insert+0x70>
   1687a:	2300      	movs	r3, #0
   1687c:	f8c0 8014 	str.w	r8, [r0, #20]
   16880:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	z_ready_thread(thread);
   16884:	f000 ff1c 	bl	176c0 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   16888:	4630      	mov	r0, r6
   1688a:	4639      	mov	r1, r7
   1688c:	f000 ff80 	bl	17790 <z_reschedule>
		return 0;
   16890:	2000      	movs	r0, #0
   16892:	e017      	b.n	168c4 <queue_insert+0xa0>
	if (alloc) {
   16894:	f1b9 0f00 	cmp.w	r9, #0
   16898:	d026      	beq.n	168e8 <queue_insert+0xc4>
	return z_thread_aligned_alloc(0, size);
   1689a:	2108      	movs	r1, #8
   1689c:	f002 fd2e 	bl	192fc <z_thread_aligned_alloc>
		if (anode == NULL) {
   168a0:	b990      	cbnz	r0, 168c8 <queue_insert+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   168a2:	4630      	mov	r0, r6
   168a4:	f7ff fd34 	bl	16310 <z_spin_unlock_valid>
   168a8:	b930      	cbnz	r0, 168b8 <queue_insert+0x94>
   168aa:	4921      	ldr	r1, [pc, #132]	; (16930 <queue_insert+0x10c>)
   168ac:	22c2      	movs	r2, #194	; 0xc2
   168ae:	4821      	ldr	r0, [pc, #132]	; (16934 <queue_insert+0x110>)
   168b0:	f004 fd2e 	bl	1b310 <assert_print>
   168b4:	21c2      	movs	r1, #194	; 0xc2
   168b6:	e7d1      	b.n	1685c <queue_insert+0x38>
	__asm__ volatile(
   168b8:	f387 8811 	msr	BASEPRI, r7
   168bc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   168c0:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   168c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   168c8:	2201      	movs	r2, #1
		anode->data = data;
   168ca:	f8c0 8004 	str.w	r8, [r0, #4]
   168ce:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   168d0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   168d2:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   168d6:	b95d      	cbnz	r5, 168f0 <queue_insert+0xcc>
	parent->next_and_flags = cur_flags | (unative_t)child;
   168d8:	6822      	ldr	r2, [r4, #0]
   168da:	430a      	orrs	r2, r1
   168dc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   168de:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   168e0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   168e2:	b96a      	cbnz	r2, 16900 <queue_insert+0xdc>
	list->tail = node;
   168e4:	6060      	str	r0, [r4, #4]
}
   168e6:	e00b      	b.n	16900 <queue_insert+0xdc>
}
   168e8:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   168ea:	f8c8 9000 	str.w	r9, [r8]
}
   168ee:	e7ef      	b.n	168d0 <queue_insert+0xac>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   168f0:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   168f2:	2a03      	cmp	r2, #3
   168f4:	d810      	bhi.n	16918 <queue_insert+0xf4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   168f6:	6001      	str	r1, [r0, #0]
	return list->tail;
   168f8:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   168fa:	b939      	cbnz	r1, 1690c <queue_insert+0xe8>
	list->head = node;
   168fc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   16900:	2104      	movs	r1, #4
   16902:	f104 0014 	add.w	r0, r4, #20
   16906:	f008 fcfb 	bl	1f300 <z_handle_obj_poll_events>
   1690a:	e7bd      	b.n	16888 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1690c:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1690e:	f002 0203 	and.w	r2, r2, #3
   16912:	4302      	orrs	r2, r0
   16914:	600a      	str	r2, [r1, #0]
   16916:	e7e5      	b.n	168e4 <queue_insert+0xc0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16918:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1691c:	430a      	orrs	r2, r1
   1691e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16920:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   16922:	f002 0203 	and.w	r2, r2, #3
   16926:	ea40 0302 	orr.w	r3, r0, r2
   1692a:	602b      	str	r3, [r5, #0]
}
   1692c:	e7e8      	b.n	16900 <queue_insert+0xdc>
   1692e:	bf00      	nop
   16930:	00022232 	.word	0x00022232
   16934:	000221f8 	.word	0x000221f8

00016938 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1693c:	4605      	mov	r5, r0
   1693e:	4691      	mov	r9, r2
   16940:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16942:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   16946:	f04f 0320 	mov.w	r3, #32
   1694a:	f3ef 8811 	mrs	r8, BASEPRI
   1694e:	f383 8812 	msr	BASEPRI_MAX, r3
   16952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16956:	4630      	mov	r0, r6
   16958:	f7ff fccc 	bl	162f4 <z_spin_lock_valid>
   1695c:	b940      	cbnz	r0, 16970 <z_impl_k_queue_get+0x38>
   1695e:	491f      	ldr	r1, [pc, #124]	; (169dc <z_impl_k_queue_get+0xa4>)
   16960:	2294      	movs	r2, #148	; 0x94
   16962:	481f      	ldr	r0, [pc, #124]	; (169e0 <z_impl_k_queue_get+0xa8>)
   16964:	f004 fcd4 	bl	1b310 <assert_print>
   16968:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1696a:	481c      	ldr	r0, [pc, #112]	; (169dc <z_impl_k_queue_get+0xa4>)
   1696c:	f004 fcc9 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16970:	4630      	mov	r0, r6
   16972:	f7ff fcdb 	bl	1632c <z_spin_lock_set_owner>
	return list->head;
   16976:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16978:	b1c4      	cbz	r4, 169ac <z_impl_k_queue_get+0x74>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1697a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1697c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1697e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16982:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16984:	4620      	mov	r0, r4
   16986:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1698a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1698c:	bf08      	it	eq
   1698e:	606b      	streq	r3, [r5, #4]
   16990:	f008 fb2c 	bl	1efec <z_queue_node_peek>
   16994:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16996:	4630      	mov	r0, r6
   16998:	f7ff fcba 	bl	16310 <z_spin_unlock_valid>
   1699c:	b9b0      	cbnz	r0, 169cc <z_impl_k_queue_get+0x94>
   1699e:	490f      	ldr	r1, [pc, #60]	; (169dc <z_impl_k_queue_get+0xa4>)
   169a0:	22c2      	movs	r2, #194	; 0xc2
   169a2:	480f      	ldr	r0, [pc, #60]	; (169e0 <z_impl_k_queue_get+0xa8>)
   169a4:	f004 fcb4 	bl	1b310 <assert_print>
   169a8:	21c2      	movs	r1, #194	; 0xc2
   169aa:	e7de      	b.n	1696a <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   169ac:	ea59 0307 	orrs.w	r3, r9, r7
   169b0:	d0f1      	beq.n	16996 <z_impl_k_queue_get+0x5e>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   169b2:	4641      	mov	r1, r8
   169b4:	4630      	mov	r0, r6
   169b6:	e9cd 9700 	strd	r9, r7, [sp]
   169ba:	f105 020c 	add.w	r2, r5, #12
   169be:	f001 f93b 	bl	17c38 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   169c2:	b938      	cbnz	r0, 169d4 <z_impl_k_queue_get+0x9c>
   169c4:	4b07      	ldr	r3, [pc, #28]	; (169e4 <z_impl_k_queue_get+0xac>)
   169c6:	689b      	ldr	r3, [r3, #8]
   169c8:	695c      	ldr	r4, [r3, #20]
   169ca:	e003      	b.n	169d4 <z_impl_k_queue_get+0x9c>
	__asm__ volatile(
   169cc:	f388 8811 	msr	BASEPRI, r8
   169d0:	f3bf 8f6f 	isb	sy
}
   169d4:	4620      	mov	r0, r4
   169d6:	b003      	add	sp, #12
   169d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   169dc:	00022232 	.word	0x00022232
   169e0:	000221f8 	.word	0x000221f8
   169e4:	20006f78 	.word	0x20006f78

000169e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   169e8:	b538      	push	{r3, r4, r5, lr}
   169ea:	4604      	mov	r4, r0
	__asm__ volatile(
   169ec:	f04f 0320 	mov.w	r3, #32
   169f0:	f3ef 8511 	mrs	r5, BASEPRI
   169f4:	f383 8812 	msr	BASEPRI_MAX, r3
   169f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   169fc:	4815      	ldr	r0, [pc, #84]	; (16a54 <z_impl_k_sem_give+0x6c>)
   169fe:	f7ff fc79 	bl	162f4 <z_spin_lock_valid>
   16a02:	b940      	cbnz	r0, 16a16 <z_impl_k_sem_give+0x2e>
   16a04:	4914      	ldr	r1, [pc, #80]	; (16a58 <z_impl_k_sem_give+0x70>)
   16a06:	4815      	ldr	r0, [pc, #84]	; (16a5c <z_impl_k_sem_give+0x74>)
   16a08:	2294      	movs	r2, #148	; 0x94
   16a0a:	f004 fc81 	bl	1b310 <assert_print>
   16a0e:	2194      	movs	r1, #148	; 0x94
   16a10:	4811      	ldr	r0, [pc, #68]	; (16a58 <z_impl_k_sem_give+0x70>)
   16a12:	f004 fc76 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16a16:	480f      	ldr	r0, [pc, #60]	; (16a54 <z_impl_k_sem_give+0x6c>)
   16a18:	f7ff fc88 	bl	1632c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   16a1c:	4620      	mov	r0, r4
   16a1e:	f001 fad3 	bl	17fc8 <z_unpend_first_thread>

	if (thread != NULL) {
   16a22:	b150      	cbz	r0, 16a3a <z_impl_k_sem_give+0x52>
   16a24:	2200      	movs	r2, #0
   16a26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   16a2a:	f000 fe49 	bl	176c0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   16a2e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   16a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   16a34:	4807      	ldr	r0, [pc, #28]	; (16a54 <z_impl_k_sem_give+0x6c>)
   16a36:	f000 beab 	b.w	17790 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16a3a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   16a3e:	429a      	cmp	r2, r3
   16a40:	bf18      	it	ne
   16a42:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16a44:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16a46:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16a48:	f104 0010 	add.w	r0, r4, #16
   16a4c:	f008 fc58 	bl	1f300 <z_handle_obj_poll_events>
}
   16a50:	e7ed      	b.n	16a2e <z_impl_k_sem_give+0x46>
   16a52:	bf00      	nop
   16a54:	20006fac 	.word	0x20006fac
   16a58:	00022232 	.word	0x00022232
   16a5c:	000221f8 	.word	0x000221f8

00016a60 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   16a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16a62:	4604      	mov	r4, r0
   16a64:	4616      	mov	r6, r2
   16a66:	461d      	mov	r5, r3
   16a68:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   16a6c:	b15b      	cbz	r3, 16a86 <z_impl_k_sem_take+0x26>
   16a6e:	ea52 0305 	orrs.w	r3, r2, r5
   16a72:	d008      	beq.n	16a86 <z_impl_k_sem_take+0x26>
   16a74:	4926      	ldr	r1, [pc, #152]	; (16b10 <z_impl_k_sem_take+0xb0>)
   16a76:	4827      	ldr	r0, [pc, #156]	; (16b14 <z_impl_k_sem_take+0xb4>)
   16a78:	2279      	movs	r2, #121	; 0x79
   16a7a:	f004 fc49 	bl	1b310 <assert_print>
   16a7e:	2179      	movs	r1, #121	; 0x79
   16a80:	4823      	ldr	r0, [pc, #140]	; (16b10 <z_impl_k_sem_take+0xb0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16a82:	f004 fc3e 	bl	1b302 <assert_post_action>
   16a86:	f04f 0320 	mov.w	r3, #32
   16a8a:	f3ef 8711 	mrs	r7, BASEPRI
   16a8e:	f383 8812 	msr	BASEPRI_MAX, r3
   16a92:	f3bf 8f6f 	isb	sy
   16a96:	4820      	ldr	r0, [pc, #128]	; (16b18 <z_impl_k_sem_take+0xb8>)
   16a98:	f7ff fc2c 	bl	162f4 <z_spin_lock_valid>
   16a9c:	b938      	cbnz	r0, 16aae <z_impl_k_sem_take+0x4e>
   16a9e:	491f      	ldr	r1, [pc, #124]	; (16b1c <z_impl_k_sem_take+0xbc>)
   16aa0:	2294      	movs	r2, #148	; 0x94
   16aa2:	481c      	ldr	r0, [pc, #112]	; (16b14 <z_impl_k_sem_take+0xb4>)
   16aa4:	f004 fc34 	bl	1b310 <assert_print>
   16aa8:	2194      	movs	r1, #148	; 0x94
   16aaa:	481c      	ldr	r0, [pc, #112]	; (16b1c <z_impl_k_sem_take+0xbc>)
   16aac:	e7e9      	b.n	16a82 <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   16aae:	481a      	ldr	r0, [pc, #104]	; (16b18 <z_impl_k_sem_take+0xb8>)
   16ab0:	f7ff fc3c 	bl	1632c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   16ab4:	68a3      	ldr	r3, [r4, #8]
   16ab6:	b19b      	cbz	r3, 16ae0 <z_impl_k_sem_take+0x80>
		sem->count--;
   16ab8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16aba:	4817      	ldr	r0, [pc, #92]	; (16b18 <z_impl_k_sem_take+0xb8>)
   16abc:	60a3      	str	r3, [r4, #8]
   16abe:	f7ff fc27 	bl	16310 <z_spin_unlock_valid>
   16ac2:	b930      	cbnz	r0, 16ad2 <z_impl_k_sem_take+0x72>
   16ac4:	4915      	ldr	r1, [pc, #84]	; (16b1c <z_impl_k_sem_take+0xbc>)
   16ac6:	22c2      	movs	r2, #194	; 0xc2
   16ac8:	4812      	ldr	r0, [pc, #72]	; (16b14 <z_impl_k_sem_take+0xb4>)
   16aca:	f004 fc21 	bl	1b310 <assert_print>
   16ace:	21c2      	movs	r1, #194	; 0xc2
   16ad0:	e7eb      	b.n	16aaa <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   16ad2:	f387 8811 	msr	BASEPRI, r7
   16ad6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16ada:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16adc:	b003      	add	sp, #12
   16ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16ae0:	ea56 0305 	orrs.w	r3, r6, r5
   16ae4:	d10b      	bne.n	16afe <z_impl_k_sem_take+0x9e>
   16ae6:	480c      	ldr	r0, [pc, #48]	; (16b18 <z_impl_k_sem_take+0xb8>)
   16ae8:	f7ff fc12 	bl	16310 <z_spin_unlock_valid>
   16aec:	2800      	cmp	r0, #0
   16aee:	d0e9      	beq.n	16ac4 <z_impl_k_sem_take+0x64>
   16af0:	f387 8811 	msr	BASEPRI, r7
   16af4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16af8:	f06f 000f 	mvn.w	r0, #15
   16afc:	e7ee      	b.n	16adc <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16afe:	4622      	mov	r2, r4
   16b00:	4639      	mov	r1, r7
   16b02:	e9cd 6500 	strd	r6, r5, [sp]
   16b06:	4804      	ldr	r0, [pc, #16]	; (16b18 <z_impl_k_sem_take+0xb8>)
   16b08:	f001 f896 	bl	17c38 <z_pend_curr>
	return ret;
   16b0c:	e7e6      	b.n	16adc <z_impl_k_sem_take+0x7c>
   16b0e:	bf00      	nop
   16b10:	00025325 	.word	0x00025325
   16b14:	000221f8 	.word	0x000221f8
   16b18:	20006fac 	.word	0x20006fac
   16b1c:	00022232 	.word	0x00022232

00016b20 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   16b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   16b22:	2400      	movs	r4, #0
   16b24:	4b08      	ldr	r3, [pc, #32]	; (16b48 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   16b26:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	struct k_work_queue_config cfg = {
   16b2a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   16b2c:	ab02      	add	r3, sp, #8
   16b2e:	9300      	str	r3, [sp, #0]
   16b30:	4906      	ldr	r1, [pc, #24]	; (16b4c <k_sys_work_q_init+0x2c>)
   16b32:	f04f 33ff 	mov.w	r3, #4294967295
   16b36:	4806      	ldr	r0, [pc, #24]	; (16b50 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   16b38:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   16b3c:	f000 fa66 	bl	1700c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   16b40:	4620      	mov	r0, r4
   16b42:	b004      	add	sp, #16
   16b44:	bd10      	pop	{r4, pc}
   16b46:	bf00      	nop
   16b48:	00025345 	.word	0x00025345
   16b4c:	2000a4f8 	.word	0x2000a4f8
   16b50:	20006200 	.word	0x20006200

00016b54 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   16b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b58:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16b5a:	4e68      	ldr	r6, [pc, #416]	; (16cfc <work_queue_main+0x1a8>)
	return list->head;
   16b5c:	4f68      	ldr	r7, [pc, #416]	; (16d00 <work_queue_main+0x1ac>)
   16b5e:	b085      	sub	sp, #20
	__asm__ volatile(
   16b60:	f04f 0320 	mov.w	r3, #32
   16b64:	f3ef 8811 	mrs	r8, BASEPRI
   16b68:	f383 8812 	msr	BASEPRI_MAX, r3
   16b6c:	f3bf 8f6f 	isb	sy
   16b70:	4630      	mov	r0, r6
   16b72:	f7ff fbbf 	bl	162f4 <z_spin_lock_valid>
   16b76:	b940      	cbnz	r0, 16b8a <work_queue_main+0x36>
   16b78:	4962      	ldr	r1, [pc, #392]	; (16d04 <work_queue_main+0x1b0>)
   16b7a:	2294      	movs	r2, #148	; 0x94
   16b7c:	4862      	ldr	r0, [pc, #392]	; (16d08 <work_queue_main+0x1b4>)
   16b7e:	f004 fbc7 	bl	1b310 <assert_print>
   16b82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16b84:	485f      	ldr	r0, [pc, #380]	; (16d04 <work_queue_main+0x1b0>)
   16b86:	f004 fbbc 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16b8a:	4630      	mov	r0, r6
   16b8c:	f7ff fbce 	bl	1632c <z_spin_lock_set_owner>
   16b90:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
Z_GENLIST_GET(slist, snode)
   16b94:	b9a5      	cbnz	r5, 16bc0 <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   16b96:	2102      	movs	r1, #2
   16b98:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   16b9c:	f008 fa64 	bl	1f068 <flag_test_and_clear>
   16ba0:	bb80      	cbnz	r0, 16c04 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   16ba2:	2300      	movs	r3, #0
   16ba4:	f04f 32ff 	mov.w	r2, #4294967295
   16ba8:	9302      	str	r3, [sp, #8]
   16baa:	f04f 33ff 	mov.w	r3, #4294967295
   16bae:	4641      	mov	r1, r8
   16bb0:	e9cd 2300 	strd	r2, r3, [sp]
   16bb4:	4630      	mov	r0, r6
   16bb6:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
   16bba:	f001 fc6d 	bl	18498 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   16bbe:	e7cf      	b.n	16b60 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16bc0:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
	return node->next;
   16bc4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16bc6:	4295      	cmp	r5, r2
	list->tail = node;
   16bc8:	bf08      	it	eq
   16bca:	f8c4 30dc 	streq.w	r3, [r4, #220]	; 0xdc
	list->head = node;
   16bce:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	*flagp |= BIT(bit);
   16bd2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16bd6:	4630      	mov	r0, r6
   16bd8:	f043 0302 	orr.w	r3, r3, #2
   16bdc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	*flagp &= ~BIT(bit);
   16be0:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   16be2:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   16be6:	f023 0304 	bic.w	r3, r3, #4
   16bea:	f043 0301 	orr.w	r3, r3, #1
   16bee:	60eb      	str	r3, [r5, #12]
   16bf0:	f7ff fb8e 	bl	16310 <z_spin_unlock_valid>
   16bf4:	b980      	cbnz	r0, 16c18 <work_queue_main+0xc4>
   16bf6:	4943      	ldr	r1, [pc, #268]	; (16d04 <work_queue_main+0x1b0>)
   16bf8:	22c2      	movs	r2, #194	; 0xc2
   16bfa:	4843      	ldr	r0, [pc, #268]	; (16d08 <work_queue_main+0x1b4>)
   16bfc:	f004 fb88 	bl	1b310 <assert_print>
   16c00:	21c2      	movs	r1, #194	; 0xc2
   16c02:	e7bf      	b.n	16b84 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   16c04:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   16c08:	2200      	movs	r2, #0
   16c0a:	2101      	movs	r1, #1
   16c0c:	4628      	mov	r0, r5
   16c0e:	f001 fbf7 	bl	18400 <z_sched_wake>
   16c12:	2800      	cmp	r0, #0
   16c14:	d1f8      	bne.n	16c08 <work_queue_main+0xb4>
   16c16:	e7c4      	b.n	16ba2 <work_queue_main+0x4e>
	__asm__ volatile(
   16c18:	f388 8811 	msr	BASEPRI, r8
   16c1c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   16c20:	f1b9 0f00 	cmp.w	r9, #0
   16c24:	d109      	bne.n	16c3a <work_queue_main+0xe6>
   16c26:	4939      	ldr	r1, [pc, #228]	; (16d0c <work_queue_main+0x1b8>)
   16c28:	4837      	ldr	r0, [pc, #220]	; (16d08 <work_queue_main+0x1b4>)
   16c2a:	f240 229b 	movw	r2, #667	; 0x29b
   16c2e:	f004 fb6f 	bl	1b310 <assert_print>
   16c32:	f240 219b 	movw	r1, #667	; 0x29b
   16c36:	4835      	ldr	r0, [pc, #212]	; (16d0c <work_queue_main+0x1b8>)
   16c38:	e7a5      	b.n	16b86 <work_queue_main+0x32>
		handler(work);
   16c3a:	4628      	mov	r0, r5
   16c3c:	47c8      	blx	r9
	__asm__ volatile(
   16c3e:	f04f 0320 	mov.w	r3, #32
   16c42:	f3ef 8a11 	mrs	sl, BASEPRI
   16c46:	f383 8812 	msr	BASEPRI_MAX, r3
   16c4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16c4e:	4630      	mov	r0, r6
   16c50:	f7ff fb50 	bl	162f4 <z_spin_lock_valid>
   16c54:	2800      	cmp	r0, #0
   16c56:	d08f      	beq.n	16b78 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   16c58:	4630      	mov	r0, r6
   16c5a:	f7ff fb67 	bl	1632c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   16c5e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16c60:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   16c62:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16c66:	d417      	bmi.n	16c98 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   16c68:	60ea      	str	r2, [r5, #12]
   16c6a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16c6e:	4630      	mov	r0, r6
   16c70:	f023 0302 	bic.w	r3, r3, #2
   16c74:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	return (*flagp & BIT(bit)) != 0U;
   16c78:	f3c3 2500 	ubfx	r5, r3, #8, #1
   16c7c:	f7ff fb48 	bl	16310 <z_spin_unlock_valid>
   16c80:	2800      	cmp	r0, #0
   16c82:	d0b8      	beq.n	16bf6 <work_queue_main+0xa2>
	__asm__ volatile(
   16c84:	f38a 8811 	msr	BASEPRI, sl
   16c88:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   16c8c:	2d00      	cmp	r5, #0
   16c8e:	f47f af67 	bne.w	16b60 <work_queue_main+0xc>
	z_impl_k_yield();
   16c92:	f001 f9e3 	bl	1805c <z_impl_k_yield>
}
   16c96:	e763      	b.n	16b60 <work_queue_main+0xc>
	return list->head;
   16c98:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   16c9a:	f023 0303 	bic.w	r3, r3, #3
   16c9e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16ca0:	2800      	cmp	r0, #0
   16ca2:	d0e2      	beq.n	16c6a <work_queue_main+0x116>
	return node->next;
   16ca4:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   16ca8:	46c3      	mov	fp, r8
	return node->next;
   16caa:	f8d0 9000 	ldr.w	r9, [r0]
   16cae:	2800      	cmp	r0, #0
   16cb0:	d0db      	beq.n	16c6a <work_queue_main+0x116>
		if (wc->work == work) {
   16cb2:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   16cb4:	4602      	mov	r2, r0
		if (wc->work == work) {
   16cb6:	429d      	cmp	r5, r3
   16cb8:	d10d      	bne.n	16cd6 <work_queue_main+0x182>
   16cba:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16cbc:	f1b8 0f00 	cmp.w	r8, #0
   16cc0:	d112      	bne.n	16ce8 <work_queue_main+0x194>
   16cc2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   16cc4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   16cc6:	4283      	cmp	r3, r0
   16cc8:	d100      	bne.n	16ccc <work_queue_main+0x178>
	list->tail = node;
   16cca:	607a      	str	r2, [r7, #4]
	parent->next = child;
   16ccc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   16cd0:	f7ff fe8a 	bl	169e8 <z_impl_k_sem_give>
}
   16cd4:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16cd6:	f1b9 0f00 	cmp.w	r9, #0
   16cda:	d00d      	beq.n	16cf8 <work_queue_main+0x1a4>
	return node->next;
   16cdc:	f8d9 3000 	ldr.w	r3, [r9]
   16ce0:	4648      	mov	r0, r9
   16ce2:	4690      	mov	r8, r2
   16ce4:	4699      	mov	r9, r3
   16ce6:	e7e2      	b.n	16cae <work_queue_main+0x15a>
	parent->next = child;
   16ce8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   16cec:	687b      	ldr	r3, [r7, #4]
   16cee:	4283      	cmp	r3, r0
	list->tail = node;
   16cf0:	bf08      	it	eq
   16cf2:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   16cf6:	e7e9      	b.n	16ccc <work_queue_main+0x178>
   16cf8:	464b      	mov	r3, r9
   16cfa:	e7f1      	b.n	16ce0 <work_queue_main+0x18c>
   16cfc:	20006fb8 	.word	0x20006fb8
   16d00:	20006fb0 	.word	0x20006fb0
   16d04:	00022232 	.word	0x00022232
   16d08:	000221f8 	.word	0x000221f8
   16d0c:	0002534e 	.word	0x0002534e

00016d10 <cancel_sync_locked>:
{
   16d10:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   16d12:	68c3      	ldr	r3, [r0, #12]
{
   16d14:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   16d16:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   16d1a:	079b      	lsls	r3, r3, #30
{
   16d1c:	460c      	mov	r4, r1
	if (ret) {
   16d1e:	d50d      	bpl.n	16d3c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16d20:	2201      	movs	r2, #1
   16d22:	2100      	movs	r1, #0
   16d24:	f104 0008 	add.w	r0, r4, #8
   16d28:	f008 f98e 	bl	1f048 <z_impl_k_sem_init>
	parent->next = child;
   16d2c:	2300      	movs	r3, #0
   16d2e:	6023      	str	r3, [r4, #0]
	return list->tail;
   16d30:	4b05      	ldr	r3, [pc, #20]	; (16d48 <cancel_sync_locked+0x38>)
	canceler->work = work;
   16d32:	6065      	str	r5, [r4, #4]
   16d34:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   16d36:	b91a      	cbnz	r2, 16d40 <cancel_sync_locked+0x30>
	list->head = node;
   16d38:	e9c3 4400 	strd	r4, r4, [r3]
}
   16d3c:	4630      	mov	r0, r6
   16d3e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   16d40:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16d42:	605c      	str	r4, [r3, #4]
}
   16d44:	e7fa      	b.n	16d3c <cancel_sync_locked+0x2c>
   16d46:	bf00      	nop
   16d48:	20006fb0 	.word	0x20006fb0

00016d4c <submit_to_queue_locked>:
{
   16d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   16d4e:	68c3      	ldr	r3, [r0, #12]
{
   16d50:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16d52:	079a      	lsls	r2, r3, #30
{
   16d54:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16d56:	f3c3 0640 	ubfx	r6, r3, #1, #1
   16d5a:	d438      	bmi.n	16dce <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   16d5c:	075b      	lsls	r3, r3, #29
   16d5e:	d424      	bmi.n	16daa <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   16d60:	680b      	ldr	r3, [r1, #0]
   16d62:	b90b      	cbnz	r3, 16d68 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   16d64:	6883      	ldr	r3, [r0, #8]
   16d66:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   16d68:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   16d6a:	07dd      	lsls	r5, r3, #31
   16d6c:	d520      	bpl.n	16db0 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   16d6e:	68a3      	ldr	r3, [r4, #8]
   16d70:	b953      	cbnz	r3, 16d88 <submit_to_queue_locked+0x3c>
   16d72:	4928      	ldr	r1, [pc, #160]	; (16e14 <submit_to_queue_locked+0xc8>)
   16d74:	4828      	ldr	r0, [pc, #160]	; (16e18 <submit_to_queue_locked+0xcc>)
   16d76:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   16d7a:	f004 fac9 	bl	1b310 <assert_print>
   16d7e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   16d82:	4824      	ldr	r0, [pc, #144]	; (16e14 <submit_to_queue_locked+0xc8>)
   16d84:	f004 fabd 	bl	1b302 <assert_post_action>
			ret = 2;
   16d88:	2602      	movs	r6, #2
			*queuep = work->queue;
   16d8a:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   16d8c:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   16d8e:	2d00      	cmp	r5, #0
   16d90:	d03c      	beq.n	16e0c <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16d92:	4b22      	ldr	r3, [pc, #136]	; (16e1c <submit_to_queue_locked+0xd0>)
   16d94:	689b      	ldr	r3, [r3, #8]
   16d96:	42ab      	cmp	r3, r5
   16d98:	d00c      	beq.n	16db4 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   16d9a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16d9e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   16da0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16da4:	d416      	bmi.n	16dd4 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   16da6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   16daa:	2300      	movs	r3, #0
   16dac:	603b      	str	r3, [r7, #0]
	return ret;
   16dae:	e027      	b.n	16e00 <submit_to_queue_locked+0xb4>
		ret = 1;
   16db0:	2601      	movs	r6, #1
   16db2:	e7eb      	b.n	16d8c <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16db4:	f008 f8e3 	bl	1ef7e <k_is_in_isr>
   16db8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   16dbc:	2800      	cmp	r0, #0
   16dbe:	d1ee      	bne.n	16d9e <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16dc0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   16dc2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16dc6:	d5ee      	bpl.n	16da6 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   16dc8:	b152      	cbz	r2, 16de0 <submit_to_queue_locked+0x94>
   16dca:	075b      	lsls	r3, r3, #29
   16dcc:	d408      	bmi.n	16de0 <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   16dce:	f06f 060f 	mvn.w	r6, #15
   16dd2:	e7ea      	b.n	16daa <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   16dd4:	2a00      	cmp	r2, #0
   16dd6:	d1fa      	bne.n	16dce <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   16dd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   16ddc:	2b00      	cmp	r3, #0
   16dde:	d1f6      	bne.n	16dce <submit_to_queue_locked+0x82>
	parent->next = child;
   16de0:	2300      	movs	r3, #0
   16de2:	6023      	str	r3, [r4, #0]
	return list->tail;
   16de4:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
Z_GENLIST_APPEND(slist, snode)
   16de8:	b963      	cbnz	r3, 16e04 <submit_to_queue_locked+0xb8>
	list->head = node;
   16dea:	e9c5 4436 	strd	r4, r4, [r5, #216]	; 0xd8
		(void)notify_queue_locked(queue);
   16dee:	4628      	mov	r0, r5
   16df0:	f008 f953 	bl	1f09a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   16df4:	68e3      	ldr	r3, [r4, #12]
   16df6:	f043 0304 	orr.w	r3, r3, #4
   16dfa:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   16dfc:	683b      	ldr	r3, [r7, #0]
   16dfe:	60a3      	str	r3, [r4, #8]
}
   16e00:	4630      	mov	r0, r6
   16e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   16e04:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16e06:	f8c5 40dc 	str.w	r4, [r5, #220]	; 0xdc
}
   16e0a:	e7f0      	b.n	16dee <submit_to_queue_locked+0xa2>
		return -EINVAL;
   16e0c:	f06f 0615 	mvn.w	r6, #21
   16e10:	e7cb      	b.n	16daa <submit_to_queue_locked+0x5e>
   16e12:	bf00      	nop
   16e14:	0002534e 	.word	0x0002534e
   16e18:	000221f8 	.word	0x000221f8
   16e1c:	20006f78 	.word	0x20006f78

00016e20 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   16e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16e22:	4604      	mov	r4, r0
	__asm__ volatile(
   16e24:	f04f 0320 	mov.w	r3, #32
   16e28:	f3ef 8511 	mrs	r5, BASEPRI
   16e2c:	f383 8812 	msr	BASEPRI_MAX, r3
   16e30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16e34:	4817      	ldr	r0, [pc, #92]	; (16e94 <work_timeout+0x74>)
   16e36:	f7ff fa5d 	bl	162f4 <z_spin_lock_valid>
   16e3a:	b940      	cbnz	r0, 16e4e <work_timeout+0x2e>
   16e3c:	4916      	ldr	r1, [pc, #88]	; (16e98 <work_timeout+0x78>)
   16e3e:	2294      	movs	r2, #148	; 0x94
   16e40:	4816      	ldr	r0, [pc, #88]	; (16e9c <work_timeout+0x7c>)
   16e42:	f004 fa65 	bl	1b310 <assert_print>
   16e46:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e48:	4813      	ldr	r0, [pc, #76]	; (16e98 <work_timeout+0x78>)
   16e4a:	f004 fa5a 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16e4e:	4811      	ldr	r0, [pc, #68]	; (16e94 <work_timeout+0x74>)
   16e50:	f7ff fa6c 	bl	1632c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   16e54:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   16e56:	2103      	movs	r1, #3
   16e58:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   16e5a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   16e5c:	f1a4 0610 	sub.w	r6, r4, #16
   16e60:	f008 f902 	bl	1f068 <flag_test_and_clear>
   16e64:	b128      	cbz	r0, 16e72 <work_timeout+0x52>
		queue = dw->queue;
   16e66:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   16e68:	4630      	mov	r0, r6
   16e6a:	a901      	add	r1, sp, #4
		queue = dw->queue;
   16e6c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   16e6e:	f7ff ff6d 	bl	16d4c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e72:	4808      	ldr	r0, [pc, #32]	; (16e94 <work_timeout+0x74>)
   16e74:	f7ff fa4c 	bl	16310 <z_spin_unlock_valid>
   16e78:	b930      	cbnz	r0, 16e88 <work_timeout+0x68>
   16e7a:	4907      	ldr	r1, [pc, #28]	; (16e98 <work_timeout+0x78>)
   16e7c:	22c2      	movs	r2, #194	; 0xc2
   16e7e:	4807      	ldr	r0, [pc, #28]	; (16e9c <work_timeout+0x7c>)
   16e80:	f004 fa46 	bl	1b310 <assert_print>
   16e84:	21c2      	movs	r1, #194	; 0xc2
   16e86:	e7df      	b.n	16e48 <work_timeout+0x28>
	__asm__ volatile(
   16e88:	f385 8811 	msr	BASEPRI, r5
   16e8c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   16e90:	b002      	add	sp, #8
   16e92:	bd70      	pop	{r4, r5, r6, pc}
   16e94:	20006fb8 	.word	0x20006fb8
   16e98:	00022232 	.word	0x00022232
   16e9c:	000221f8 	.word	0x000221f8

00016ea0 <k_work_init>:
{
   16ea0:	b538      	push	{r3, r4, r5, lr}
   16ea2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   16ea4:	4604      	mov	r4, r0
   16ea6:	b940      	cbnz	r0, 16eba <k_work_init+0x1a>
   16ea8:	490b      	ldr	r1, [pc, #44]	; (16ed8 <k_work_init+0x38>)
   16eaa:	2289      	movs	r2, #137	; 0x89
   16eac:	480b      	ldr	r0, [pc, #44]	; (16edc <k_work_init+0x3c>)
   16eae:	f004 fa2f 	bl	1b310 <assert_print>
   16eb2:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   16eb4:	4808      	ldr	r0, [pc, #32]	; (16ed8 <k_work_init+0x38>)
   16eb6:	f004 fa24 	bl	1b302 <assert_post_action>
   16eba:	b931      	cbnz	r1, 16eca <k_work_init+0x2a>
   16ebc:	4906      	ldr	r1, [pc, #24]	; (16ed8 <k_work_init+0x38>)
   16ebe:	228a      	movs	r2, #138	; 0x8a
   16ec0:	4806      	ldr	r0, [pc, #24]	; (16edc <k_work_init+0x3c>)
   16ec2:	f004 fa25 	bl	1b310 <assert_print>
   16ec6:	218a      	movs	r1, #138	; 0x8a
   16ec8:	e7f4      	b.n	16eb4 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16eca:	2210      	movs	r2, #16
   16ecc:	2100      	movs	r1, #0
   16ece:	f008 faa0 	bl	1f412 <memset>
   16ed2:	6065      	str	r5, [r4, #4]
}
   16ed4:	bd38      	pop	{r3, r4, r5, pc}
   16ed6:	bf00      	nop
   16ed8:	0002534e 	.word	0x0002534e
   16edc:	000221f8 	.word	0x000221f8

00016ee0 <k_work_busy_get>:
{
   16ee0:	b538      	push	{r3, r4, r5, lr}
   16ee2:	4604      	mov	r4, r0
	__asm__ volatile(
   16ee4:	f04f 0320 	mov.w	r3, #32
   16ee8:	f3ef 8511 	mrs	r5, BASEPRI
   16eec:	f383 8812 	msr	BASEPRI_MAX, r3
   16ef0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ef4:	4811      	ldr	r0, [pc, #68]	; (16f3c <k_work_busy_get+0x5c>)
   16ef6:	f7ff f9fd 	bl	162f4 <z_spin_lock_valid>
   16efa:	b940      	cbnz	r0, 16f0e <k_work_busy_get+0x2e>
   16efc:	4910      	ldr	r1, [pc, #64]	; (16f40 <k_work_busy_get+0x60>)
   16efe:	2294      	movs	r2, #148	; 0x94
   16f00:	4810      	ldr	r0, [pc, #64]	; (16f44 <k_work_busy_get+0x64>)
   16f02:	f004 fa05 	bl	1b310 <assert_print>
   16f06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f08:	480d      	ldr	r0, [pc, #52]	; (16f40 <k_work_busy_get+0x60>)
   16f0a:	f004 f9fa 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   16f0e:	480b      	ldr	r0, [pc, #44]	; (16f3c <k_work_busy_get+0x5c>)
   16f10:	f7ff fa0c 	bl	1632c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   16f14:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f16:	4809      	ldr	r0, [pc, #36]	; (16f3c <k_work_busy_get+0x5c>)
   16f18:	f004 040f 	and.w	r4, r4, #15
   16f1c:	f7ff f9f8 	bl	16310 <z_spin_unlock_valid>
   16f20:	b930      	cbnz	r0, 16f30 <k_work_busy_get+0x50>
   16f22:	4907      	ldr	r1, [pc, #28]	; (16f40 <k_work_busy_get+0x60>)
   16f24:	22c2      	movs	r2, #194	; 0xc2
   16f26:	4807      	ldr	r0, [pc, #28]	; (16f44 <k_work_busy_get+0x64>)
   16f28:	f004 f9f2 	bl	1b310 <assert_print>
   16f2c:	21c2      	movs	r1, #194	; 0xc2
   16f2e:	e7eb      	b.n	16f08 <k_work_busy_get+0x28>
	__asm__ volatile(
   16f30:	f385 8811 	msr	BASEPRI, r5
   16f34:	f3bf 8f6f 	isb	sy
}
   16f38:	4620      	mov	r0, r4
   16f3a:	bd38      	pop	{r3, r4, r5, pc}
   16f3c:	20006fb8 	.word	0x20006fb8
   16f40:	00022232 	.word	0x00022232
   16f44:	000221f8 	.word	0x000221f8

00016f48 <z_work_submit_to_queue>:
{
   16f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   16f4a:	460c      	mov	r4, r1
{
   16f4c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   16f4e:	b951      	cbnz	r1, 16f66 <z_work_submit_to_queue+0x1e>
   16f50:	491c      	ldr	r1, [pc, #112]	; (16fc4 <z_work_submit_to_queue+0x7c>)
   16f52:	481d      	ldr	r0, [pc, #116]	; (16fc8 <z_work_submit_to_queue+0x80>)
   16f54:	f44f 72ba 	mov.w	r2, #372	; 0x174
   16f58:	f004 f9da 	bl	1b310 <assert_print>
   16f5c:	f44f 71ba 	mov.w	r1, #372	; 0x174
   16f60:	4818      	ldr	r0, [pc, #96]	; (16fc4 <z_work_submit_to_queue+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f62:	f004 f9ce 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   16f66:	f04f 0320 	mov.w	r3, #32
   16f6a:	f3ef 8511 	mrs	r5, BASEPRI
   16f6e:	f383 8812 	msr	BASEPRI_MAX, r3
   16f72:	f3bf 8f6f 	isb	sy
   16f76:	4815      	ldr	r0, [pc, #84]	; (16fcc <z_work_submit_to_queue+0x84>)
   16f78:	f7ff f9bc 	bl	162f4 <z_spin_lock_valid>
   16f7c:	b938      	cbnz	r0, 16f8e <z_work_submit_to_queue+0x46>
   16f7e:	4914      	ldr	r1, [pc, #80]	; (16fd0 <z_work_submit_to_queue+0x88>)
   16f80:	2294      	movs	r2, #148	; 0x94
   16f82:	4811      	ldr	r0, [pc, #68]	; (16fc8 <z_work_submit_to_queue+0x80>)
   16f84:	f004 f9c4 	bl	1b310 <assert_print>
   16f88:	2194      	movs	r1, #148	; 0x94
   16f8a:	4811      	ldr	r0, [pc, #68]	; (16fd0 <z_work_submit_to_queue+0x88>)
   16f8c:	e7e9      	b.n	16f62 <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   16f8e:	480f      	ldr	r0, [pc, #60]	; (16fcc <z_work_submit_to_queue+0x84>)
   16f90:	f7ff f9cc 	bl	1632c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   16f94:	4620      	mov	r0, r4
   16f96:	a901      	add	r1, sp, #4
   16f98:	f7ff fed8 	bl	16d4c <submit_to_queue_locked>
   16f9c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f9e:	480b      	ldr	r0, [pc, #44]	; (16fcc <z_work_submit_to_queue+0x84>)
   16fa0:	f7ff f9b6 	bl	16310 <z_spin_unlock_valid>
   16fa4:	b930      	cbnz	r0, 16fb4 <z_work_submit_to_queue+0x6c>
   16fa6:	490a      	ldr	r1, [pc, #40]	; (16fd0 <z_work_submit_to_queue+0x88>)
   16fa8:	22c2      	movs	r2, #194	; 0xc2
   16faa:	4807      	ldr	r0, [pc, #28]	; (16fc8 <z_work_submit_to_queue+0x80>)
   16fac:	f004 f9b0 	bl	1b310 <assert_print>
   16fb0:	21c2      	movs	r1, #194	; 0xc2
   16fb2:	e7ea      	b.n	16f8a <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   16fb4:	f385 8811 	msr	BASEPRI, r5
   16fb8:	f3bf 8f6f 	isb	sy
}
   16fbc:	4620      	mov	r0, r4
   16fbe:	b003      	add	sp, #12
   16fc0:	bd30      	pop	{r4, r5, pc}
   16fc2:	bf00      	nop
   16fc4:	0002534e 	.word	0x0002534e
   16fc8:	000221f8 	.word	0x000221f8
   16fcc:	20006fb8 	.word	0x20006fb8
   16fd0:	00022232 	.word	0x00022232

00016fd4 <k_work_submit>:
{
   16fd4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   16fd6:	4801      	ldr	r0, [pc, #4]	; (16fdc <k_work_submit+0x8>)
   16fd8:	f008 b899 	b.w	1f10e <k_work_submit_to_queue>
   16fdc:	20006200 	.word	0x20006200

00016fe0 <k_work_queue_init>:
{
   16fe0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   16fe2:	b950      	cbnz	r0, 16ffa <k_work_queue_init+0x1a>
   16fe4:	4907      	ldr	r1, [pc, #28]	; (17004 <k_work_queue_init+0x24>)
   16fe6:	4808      	ldr	r0, [pc, #32]	; (17008 <k_work_queue_init+0x28>)
   16fe8:	f240 22b9 	movw	r2, #697	; 0x2b9
   16fec:	f004 f990 	bl	1b310 <assert_print>
   16ff0:	f240 21b9 	movw	r1, #697	; 0x2b9
   16ff4:	4803      	ldr	r0, [pc, #12]	; (17004 <k_work_queue_init+0x24>)
   16ff6:	f004 f984 	bl	1b302 <assert_post_action>
	*queue = (struct k_work_q) {
   16ffa:	22f8      	movs	r2, #248	; 0xf8
   16ffc:	2100      	movs	r1, #0
   16ffe:	f008 fa08 	bl	1f412 <memset>
}
   17002:	bd08      	pop	{r3, pc}
   17004:	0002534e 	.word	0x0002534e
   17008:	000221f8 	.word	0x000221f8

0001700c <k_work_queue_start>:
{
   1700c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1700e:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   17010:	4604      	mov	r4, r0
{
   17012:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   17014:	b950      	cbnz	r0, 1702c <k_work_queue_start+0x20>
   17016:	492a      	ldr	r1, [pc, #168]	; (170c0 <k_work_queue_start+0xb4>)
   17018:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   1701c:	4829      	ldr	r0, [pc, #164]	; (170c4 <k_work_queue_start+0xb8>)
   1701e:	f004 f977 	bl	1b310 <assert_print>
   17022:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   17026:	4826      	ldr	r0, [pc, #152]	; (170c0 <k_work_queue_start+0xb4>)
   17028:	f004 f96b 	bl	1b302 <assert_post_action>
   1702c:	b941      	cbnz	r1, 17040 <k_work_queue_start+0x34>
   1702e:	4924      	ldr	r1, [pc, #144]	; (170c0 <k_work_queue_start+0xb4>)
   17030:	f240 22c9 	movw	r2, #713	; 0x2c9
   17034:	4823      	ldr	r0, [pc, #140]	; (170c4 <k_work_queue_start+0xb8>)
   17036:	f004 f96b 	bl	1b310 <assert_print>
   1703a:	f240 21c9 	movw	r1, #713	; 0x2c9
   1703e:	e7f2      	b.n	17026 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   17040:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   17044:	f010 0001 	ands.w	r0, r0, #1
   17048:	d008      	beq.n	1705c <k_work_queue_start+0x50>
   1704a:	491d      	ldr	r1, [pc, #116]	; (170c0 <k_work_queue_start+0xb4>)
   1704c:	f240 22ca 	movw	r2, #714	; 0x2ca
   17050:	481c      	ldr	r0, [pc, #112]	; (170c4 <k_work_queue_start+0xb8>)
   17052:	f004 f95d 	bl	1b310 <assert_print>
   17056:	f240 21ca 	movw	r1, #714	; 0x2ca
   1705a:	e7e4      	b.n	17026 <k_work_queue_start+0x1a>
	list->tail = NULL;
   1705c:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8
   17060:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
	list->tail = (sys_dnode_t *)list;
   17064:	e9c4 0038 	strd	r0, r0, [r4, #224]	; 0xe0
   17068:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   1706c:	e9c4 003a 	strd	r0, r0, [r4, #232]	; 0xe8
	if ((cfg != NULL) && cfg->no_yield) {
   17070:	b31d      	cbz	r5, 170ba <k_work_queue_start+0xae>
   17072:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   17074:	2800      	cmp	r0, #0
   17076:	f240 1001 	movw	r0, #257	; 0x101
   1707a:	bf08      	it	eq
   1707c:	2001      	moveq	r0, #1
	*flagp = flags;
   1707e:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17082:	2000      	movs	r0, #0
   17084:	f04f 36ff 	mov.w	r6, #4294967295
   17088:	f04f 37ff 	mov.w	r7, #4294967295
   1708c:	e9cd 3003 	strd	r3, r0, [sp, #12]
   17090:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17094:	e9cd 6706 	strd	r6, r7, [sp, #24]
   17098:	4620      	mov	r0, r4
   1709a:	4b0b      	ldr	r3, [pc, #44]	; (170c8 <k_work_queue_start+0xbc>)
   1709c:	9400      	str	r4, [sp, #0]
   1709e:	f7ff f873 	bl	16188 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   170a2:	b125      	cbz	r5, 170ae <k_work_queue_start+0xa2>
   170a4:	6829      	ldr	r1, [r5, #0]
   170a6:	b111      	cbz	r1, 170ae <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   170a8:	4620      	mov	r0, r4
   170aa:	f007 ff6e 	bl	1ef8a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   170ae:	4620      	mov	r0, r4
}
   170b0:	b009      	add	sp, #36	; 0x24
   170b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   170b6:	f007 bf6d 	b.w	1ef94 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   170ba:	2001      	movs	r0, #1
   170bc:	e7df      	b.n	1707e <k_work_queue_start+0x72>
   170be:	bf00      	nop
   170c0:	0002534e 	.word	0x0002534e
   170c4:	000221f8 	.word	0x000221f8
   170c8:	00016b55 	.word	0x00016b55

000170cc <k_work_queue_drain>:
{
   170cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   170ce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   170d0:	4604      	mov	r4, r0
   170d2:	b950      	cbnz	r0, 170ea <k_work_queue_drain+0x1e>
   170d4:	4934      	ldr	r1, [pc, #208]	; (171a8 <k_work_queue_drain+0xdc>)
   170d6:	f240 22ed 	movw	r2, #749	; 0x2ed
   170da:	4834      	ldr	r0, [pc, #208]	; (171ac <k_work_queue_drain+0xe0>)
   170dc:	f004 f918 	bl	1b310 <assert_print>
   170e0:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   170e4:	4830      	ldr	r0, [pc, #192]	; (171a8 <k_work_queue_drain+0xdc>)
   170e6:	f004 f90c 	bl	1b302 <assert_post_action>
   170ea:	f007 ff48 	bl	1ef7e <k_is_in_isr>
   170ee:	b140      	cbz	r0, 17102 <k_work_queue_drain+0x36>
   170f0:	492d      	ldr	r1, [pc, #180]	; (171a8 <k_work_queue_drain+0xdc>)
   170f2:	f240 22ee 	movw	r2, #750	; 0x2ee
   170f6:	482d      	ldr	r0, [pc, #180]	; (171ac <k_work_queue_drain+0xe0>)
   170f8:	f004 f90a 	bl	1b310 <assert_print>
   170fc:	f240 21ee 	movw	r1, #750	; 0x2ee
   17100:	e7f0      	b.n	170e4 <k_work_queue_drain+0x18>
	__asm__ volatile(
   17102:	f04f 0320 	mov.w	r3, #32
   17106:	f3ef 8611 	mrs	r6, BASEPRI
   1710a:	f383 8812 	msr	BASEPRI_MAX, r3
   1710e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17112:	4827      	ldr	r0, [pc, #156]	; (171b0 <k_work_queue_drain+0xe4>)
   17114:	f7ff f8ee 	bl	162f4 <z_spin_lock_valid>
   17118:	b938      	cbnz	r0, 1712a <k_work_queue_drain+0x5e>
   1711a:	4926      	ldr	r1, [pc, #152]	; (171b4 <k_work_queue_drain+0xe8>)
   1711c:	2294      	movs	r2, #148	; 0x94
   1711e:	4823      	ldr	r0, [pc, #140]	; (171ac <k_work_queue_drain+0xe0>)
   17120:	f004 f8f6 	bl	1b310 <assert_print>
   17124:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17126:	4823      	ldr	r0, [pc, #140]	; (171b4 <k_work_queue_drain+0xe8>)
   17128:	e7dd      	b.n	170e6 <k_work_queue_drain+0x1a>
	z_spin_lock_set_owner(l);
   1712a:	4821      	ldr	r0, [pc, #132]	; (171b0 <k_work_queue_drain+0xe4>)
   1712c:	f7ff f8fe 	bl	1632c <z_spin_lock_set_owner>
	return *flagp;
   17130:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (((flags_get(&queue->flags)
   17134:	f013 0f06 	tst.w	r3, #6
   17138:	d11d      	bne.n	17176 <k_work_queue_drain+0xaa>
	    || plug
   1713a:	b1b5      	cbz	r5, 1716a <k_work_queue_drain+0x9e>
	*flagp |= BIT(bit);
   1713c:	f043 030c 	orr.w	r3, r3, #12
   17140:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		notify_queue_locked(queue);
   17144:	4620      	mov	r0, r4
   17146:	f007 ffa8 	bl	1f09a <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   1714a:	2300      	movs	r3, #0
   1714c:	f04f 32ff 	mov.w	r2, #4294967295
   17150:	9302      	str	r3, [sp, #8]
   17152:	f04f 33ff 	mov.w	r3, #4294967295
   17156:	4631      	mov	r1, r6
   17158:	e9cd 2300 	strd	r2, r3, [sp]
   1715c:	4814      	ldr	r0, [pc, #80]	; (171b0 <k_work_queue_drain+0xe4>)
   1715e:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   17162:	f001 f999 	bl	18498 <z_sched_wait>
}
   17166:	b004      	add	sp, #16
   17168:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   1716a:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
   1716e:	b14d      	cbz	r5, 17184 <k_work_queue_drain+0xb8>
	*flagp |= BIT(bit);
   17170:	f043 0304 	orr.w	r3, r3, #4
   17174:	e7e4      	b.n	17140 <k_work_queue_drain+0x74>
   17176:	f043 0204 	orr.w	r2, r3, #4
   1717a:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
		if (plug) {
   1717e:	2d00      	cmp	r5, #0
   17180:	d0e0      	beq.n	17144 <k_work_queue_drain+0x78>
   17182:	e7db      	b.n	1713c <k_work_queue_drain+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17184:	480a      	ldr	r0, [pc, #40]	; (171b0 <k_work_queue_drain+0xe4>)
   17186:	f7ff f8c3 	bl	16310 <z_spin_unlock_valid>
   1718a:	b930      	cbnz	r0, 1719a <k_work_queue_drain+0xce>
   1718c:	4909      	ldr	r1, [pc, #36]	; (171b4 <k_work_queue_drain+0xe8>)
   1718e:	22c2      	movs	r2, #194	; 0xc2
   17190:	4806      	ldr	r0, [pc, #24]	; (171ac <k_work_queue_drain+0xe0>)
   17192:	f004 f8bd 	bl	1b310 <assert_print>
   17196:	21c2      	movs	r1, #194	; 0xc2
   17198:	e7c5      	b.n	17126 <k_work_queue_drain+0x5a>
	__asm__ volatile(
   1719a:	f386 8811 	msr	BASEPRI, r6
   1719e:	f3bf 8f6f 	isb	sy
	int ret = 0;
   171a2:	4628      	mov	r0, r5
	return ret;
   171a4:	e7df      	b.n	17166 <k_work_queue_drain+0x9a>
   171a6:	bf00      	nop
   171a8:	0002534e 	.word	0x0002534e
   171ac:	000221f8 	.word	0x000221f8
   171b0:	20006fb8 	.word	0x20006fb8
   171b4:	00022232 	.word	0x00022232

000171b8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   171b8:	b538      	push	{r3, r4, r5, lr}
   171ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   171bc:	4604      	mov	r4, r0
   171be:	b950      	cbnz	r0, 171d6 <k_work_init_delayable+0x1e>
   171c0:	490e      	ldr	r1, [pc, #56]	; (171fc <k_work_init_delayable+0x44>)
   171c2:	f44f 7250 	mov.w	r2, #832	; 0x340
   171c6:	480e      	ldr	r0, [pc, #56]	; (17200 <k_work_init_delayable+0x48>)
   171c8:	f004 f8a2 	bl	1b310 <assert_print>
   171cc:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   171d0:	480a      	ldr	r0, [pc, #40]	; (171fc <k_work_init_delayable+0x44>)
   171d2:	f004 f896 	bl	1b302 <assert_post_action>
   171d6:	b941      	cbnz	r1, 171ea <k_work_init_delayable+0x32>
   171d8:	4908      	ldr	r1, [pc, #32]	; (171fc <k_work_init_delayable+0x44>)
   171da:	f240 3241 	movw	r2, #833	; 0x341
   171de:	4808      	ldr	r0, [pc, #32]	; (17200 <k_work_init_delayable+0x48>)
   171e0:	f004 f896 	bl	1b310 <assert_print>
   171e4:	f240 3141 	movw	r1, #833	; 0x341
   171e8:	e7f2      	b.n	171d0 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   171ea:	2230      	movs	r2, #48	; 0x30
   171ec:	2100      	movs	r1, #0
   171ee:	f008 f910 	bl	1f412 <memset>
   171f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   171f6:	6065      	str	r5, [r4, #4]
   171f8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   171fa:	bd38      	pop	{r3, r4, r5, pc}
   171fc:	0002534e 	.word	0x0002534e
   17200:	000221f8 	.word	0x000221f8

00017204 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   17204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17206:	4616      	mov	r6, r2
   17208:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1720a:	460c      	mov	r4, r1
{
   1720c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   1720e:	b951      	cbnz	r1, 17226 <k_work_schedule_for_queue+0x22>
   17210:	4927      	ldr	r1, [pc, #156]	; (172b0 <k_work_schedule_for_queue+0xac>)
   17212:	4828      	ldr	r0, [pc, #160]	; (172b4 <k_work_schedule_for_queue+0xb0>)
   17214:	f240 32b7 	movw	r2, #951	; 0x3b7
   17218:	f004 f87a 	bl	1b310 <assert_print>
   1721c:	f240 31b7 	movw	r1, #951	; 0x3b7
   17220:	4823      	ldr	r0, [pc, #140]	; (172b0 <k_work_schedule_for_queue+0xac>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17222:	f004 f86e 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   17226:	f04f 0320 	mov.w	r3, #32
   1722a:	f3ef 8711 	mrs	r7, BASEPRI
   1722e:	f383 8812 	msr	BASEPRI_MAX, r3
   17232:	f3bf 8f6f 	isb	sy
   17236:	4820      	ldr	r0, [pc, #128]	; (172b8 <k_work_schedule_for_queue+0xb4>)
   17238:	f7ff f85c 	bl	162f4 <z_spin_lock_valid>
   1723c:	b938      	cbnz	r0, 1724e <k_work_schedule_for_queue+0x4a>
   1723e:	491f      	ldr	r1, [pc, #124]	; (172bc <k_work_schedule_for_queue+0xb8>)
   17240:	2294      	movs	r2, #148	; 0x94
   17242:	481c      	ldr	r0, [pc, #112]	; (172b4 <k_work_schedule_for_queue+0xb0>)
   17244:	f004 f864 	bl	1b310 <assert_print>
   17248:	2194      	movs	r1, #148	; 0x94
   1724a:	481c      	ldr	r0, [pc, #112]	; (172bc <k_work_schedule_for_queue+0xb8>)
   1724c:	e7e9      	b.n	17222 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   1724e:	481a      	ldr	r0, [pc, #104]	; (172b8 <k_work_schedule_for_queue+0xb4>)
   17250:	f7ff f86c 	bl	1632c <z_spin_lock_set_owner>
	return *flagp;
   17254:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   17256:	f013 0f0e 	tst.w	r3, #14
   1725a:	d120      	bne.n	1729e <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1725c:	ea55 0206 	orrs.w	r2, r5, r6
   17260:	d10f      	bne.n	17282 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   17262:	4620      	mov	r0, r4
   17264:	a901      	add	r1, sp, #4
   17266:	f7ff fd71 	bl	16d4c <submit_to_queue_locked>
   1726a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1726c:	4812      	ldr	r0, [pc, #72]	; (172b8 <k_work_schedule_for_queue+0xb4>)
   1726e:	f7ff f84f 	bl	16310 <z_spin_unlock_valid>
   17272:	b9b0      	cbnz	r0, 172a2 <k_work_schedule_for_queue+0x9e>
   17274:	4911      	ldr	r1, [pc, #68]	; (172bc <k_work_schedule_for_queue+0xb8>)
   17276:	22c2      	movs	r2, #194	; 0xc2
   17278:	480e      	ldr	r0, [pc, #56]	; (172b4 <k_work_schedule_for_queue+0xb0>)
   1727a:	f004 f849 	bl	1b310 <assert_print>
   1727e:	21c2      	movs	r1, #194	; 0xc2
   17280:	e7e3      	b.n	1724a <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   17282:	f043 0308 	orr.w	r3, r3, #8
   17286:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   17288:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1728a:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   1728e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17290:	4632      	mov	r2, r6
   17292:	462b      	mov	r3, r5
   17294:	490a      	ldr	r1, [pc, #40]	; (172c0 <k_work_schedule_for_queue+0xbc>)
   17296:	f001 f979 	bl	1858c <z_add_timeout>
	return ret;
   1729a:	2401      	movs	r4, #1
   1729c:	e7e6      	b.n	1726c <k_work_schedule_for_queue+0x68>
	int ret = 0;
   1729e:	2400      	movs	r4, #0
   172a0:	e7e4      	b.n	1726c <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   172a2:	f387 8811 	msr	BASEPRI, r7
   172a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   172aa:	4620      	mov	r0, r4
   172ac:	b003      	add	sp, #12
   172ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172b0:	0002534e 	.word	0x0002534e
   172b4:	000221f8 	.word	0x000221f8
   172b8:	20006fb8 	.word	0x20006fb8
   172bc:	00022232 	.word	0x00022232
   172c0:	00016e21 	.word	0x00016e21

000172c4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   172c4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   172c6:	4801      	ldr	r0, [pc, #4]	; (172cc <k_work_schedule+0x8>)
   172c8:	f7ff bf9c 	b.w	17204 <k_work_schedule_for_queue>
   172cc:	20006200 	.word	0x20006200

000172d0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   172d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   172d2:	4616      	mov	r6, r2
   172d4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   172d6:	460c      	mov	r4, r1
{
   172d8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   172da:	b951      	cbnz	r1, 172f2 <k_work_reschedule_for_queue+0x22>
   172dc:	4926      	ldr	r1, [pc, #152]	; (17378 <k_work_reschedule_for_queue+0xa8>)
   172de:	4827      	ldr	r0, [pc, #156]	; (1737c <k_work_reschedule_for_queue+0xac>)
   172e0:	f240 32db 	movw	r2, #987	; 0x3db
   172e4:	f004 f814 	bl	1b310 <assert_print>
   172e8:	f240 31db 	movw	r1, #987	; 0x3db
   172ec:	4822      	ldr	r0, [pc, #136]	; (17378 <k_work_reschedule_for_queue+0xa8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   172ee:	f004 f808 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   172f2:	f04f 0320 	mov.w	r3, #32
   172f6:	f3ef 8711 	mrs	r7, BASEPRI
   172fa:	f383 8812 	msr	BASEPRI_MAX, r3
   172fe:	f3bf 8f6f 	isb	sy
   17302:	481f      	ldr	r0, [pc, #124]	; (17380 <k_work_reschedule_for_queue+0xb0>)
   17304:	f7fe fff6 	bl	162f4 <z_spin_lock_valid>
   17308:	b938      	cbnz	r0, 1731a <k_work_reschedule_for_queue+0x4a>
   1730a:	491e      	ldr	r1, [pc, #120]	; (17384 <k_work_reschedule_for_queue+0xb4>)
   1730c:	2294      	movs	r2, #148	; 0x94
   1730e:	481b      	ldr	r0, [pc, #108]	; (1737c <k_work_reschedule_for_queue+0xac>)
   17310:	f003 fffe 	bl	1b310 <assert_print>
   17314:	2194      	movs	r1, #148	; 0x94
   17316:	481b      	ldr	r0, [pc, #108]	; (17384 <k_work_reschedule_for_queue+0xb4>)
   17318:	e7e9      	b.n	172ee <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   1731a:	4819      	ldr	r0, [pc, #100]	; (17380 <k_work_reschedule_for_queue+0xb0>)
   1731c:	f7ff f806 	bl	1632c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   17320:	4620      	mov	r0, r4
   17322:	f007 feac 	bl	1f07e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17326:	ea55 0306 	orrs.w	r3, r5, r6
   1732a:	d10f      	bne.n	1734c <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   1732c:	4620      	mov	r0, r4
   1732e:	a901      	add	r1, sp, #4
   17330:	f7ff fd0c 	bl	16d4c <submit_to_queue_locked>
   17334:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17336:	4812      	ldr	r0, [pc, #72]	; (17380 <k_work_reschedule_for_queue+0xb0>)
   17338:	f7fe ffea 	bl	16310 <z_spin_unlock_valid>
   1733c:	b9a8      	cbnz	r0, 1736a <k_work_reschedule_for_queue+0x9a>
   1733e:	4911      	ldr	r1, [pc, #68]	; (17384 <k_work_reschedule_for_queue+0xb4>)
   17340:	22c2      	movs	r2, #194	; 0xc2
   17342:	480e      	ldr	r0, [pc, #56]	; (1737c <k_work_reschedule_for_queue+0xac>)
   17344:	f003 ffe4 	bl	1b310 <assert_print>
   17348:	21c2      	movs	r1, #194	; 0xc2
   1734a:	e7e4      	b.n	17316 <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   1734c:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1734e:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   17352:	f043 0308 	orr.w	r3, r3, #8
   17356:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   17358:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1735a:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   1735c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1735e:	490a      	ldr	r1, [pc, #40]	; (17388 <k_work_reschedule_for_queue+0xb8>)
   17360:	462b      	mov	r3, r5
   17362:	f001 f913 	bl	1858c <z_add_timeout>
	return ret;
   17366:	2401      	movs	r4, #1
   17368:	e7e5      	b.n	17336 <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   1736a:	f387 8811 	msr	BASEPRI, r7
   1736e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   17372:	4620      	mov	r0, r4
   17374:	b003      	add	sp, #12
   17376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17378:	0002534e 	.word	0x0002534e
   1737c:	000221f8 	.word	0x000221f8
   17380:	20006fb8 	.word	0x20006fb8
   17384:	00022232 	.word	0x00022232
   17388:	00016e21 	.word	0x00016e21

0001738c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1738c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1738e:	4801      	ldr	r0, [pc, #4]	; (17394 <k_work_reschedule+0x8>)
   17390:	f7ff bf9e 	b.w	172d0 <k_work_reschedule_for_queue>
   17394:	20006200 	.word	0x20006200

00017398 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   17398:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1739a:	4604      	mov	r4, r0
   1739c:	b950      	cbnz	r0, 173b4 <k_work_cancel_delayable+0x1c>
   1739e:	491d      	ldr	r1, [pc, #116]	; (17414 <k_work_cancel_delayable+0x7c>)
   173a0:	481d      	ldr	r0, [pc, #116]	; (17418 <k_work_cancel_delayable+0x80>)
   173a2:	f240 32fd 	movw	r2, #1021	; 0x3fd
   173a6:	f003 ffb3 	bl	1b310 <assert_print>
   173aa:	f240 31fd 	movw	r1, #1021	; 0x3fd
   173ae:	4819      	ldr	r0, [pc, #100]	; (17414 <k_work_cancel_delayable+0x7c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   173b0:	f003 ffa7 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   173b4:	f04f 0320 	mov.w	r3, #32
   173b8:	f3ef 8511 	mrs	r5, BASEPRI
   173bc:	f383 8812 	msr	BASEPRI_MAX, r3
   173c0:	f3bf 8f6f 	isb	sy
   173c4:	4815      	ldr	r0, [pc, #84]	; (1741c <k_work_cancel_delayable+0x84>)
   173c6:	f7fe ff95 	bl	162f4 <z_spin_lock_valid>
   173ca:	b938      	cbnz	r0, 173dc <k_work_cancel_delayable+0x44>
   173cc:	4914      	ldr	r1, [pc, #80]	; (17420 <k_work_cancel_delayable+0x88>)
   173ce:	2294      	movs	r2, #148	; 0x94
   173d0:	4811      	ldr	r0, [pc, #68]	; (17418 <k_work_cancel_delayable+0x80>)
   173d2:	f003 ff9d 	bl	1b310 <assert_print>
   173d6:	2194      	movs	r1, #148	; 0x94
   173d8:	4811      	ldr	r0, [pc, #68]	; (17420 <k_work_cancel_delayable+0x88>)
   173da:	e7e9      	b.n	173b0 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   173dc:	480f      	ldr	r0, [pc, #60]	; (1741c <k_work_cancel_delayable+0x84>)
   173de:	f7fe ffa5 	bl	1632c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   173e2:	4620      	mov	r0, r4
   173e4:	f007 fe4b 	bl	1f07e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   173e8:	4620      	mov	r0, r4
   173ea:	f007 fe5d 	bl	1f0a8 <cancel_async_locked>
   173ee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   173f0:	480a      	ldr	r0, [pc, #40]	; (1741c <k_work_cancel_delayable+0x84>)
   173f2:	f7fe ff8d 	bl	16310 <z_spin_unlock_valid>
   173f6:	b930      	cbnz	r0, 17406 <k_work_cancel_delayable+0x6e>
   173f8:	4909      	ldr	r1, [pc, #36]	; (17420 <k_work_cancel_delayable+0x88>)
   173fa:	22c2      	movs	r2, #194	; 0xc2
   173fc:	4806      	ldr	r0, [pc, #24]	; (17418 <k_work_cancel_delayable+0x80>)
   173fe:	f003 ff87 	bl	1b310 <assert_print>
   17402:	21c2      	movs	r1, #194	; 0xc2
   17404:	e7e8      	b.n	173d8 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   17406:	f385 8811 	msr	BASEPRI, r5
   1740a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1740e:	4620      	mov	r0, r4
   17410:	bd38      	pop	{r3, r4, r5, pc}
   17412:	bf00      	nop
   17414:	0002534e 	.word	0x0002534e
   17418:	000221f8 	.word	0x000221f8
   1741c:	20006fb8 	.word	0x20006fb8
   17420:	00022232 	.word	0x00022232

00017424 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   17424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17428:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1742a:	4605      	mov	r5, r0
   1742c:	b950      	cbnz	r0, 17444 <k_work_cancel_delayable_sync+0x20>
   1742e:	4933      	ldr	r1, [pc, #204]	; (174fc <k_work_cancel_delayable_sync+0xd8>)
   17430:	f240 420e 	movw	r2, #1038	; 0x40e
   17434:	4832      	ldr	r0, [pc, #200]	; (17500 <k_work_cancel_delayable_sync+0xdc>)
   17436:	f003 ff6b 	bl	1b310 <assert_print>
   1743a:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   1743e:	482f      	ldr	r0, [pc, #188]	; (174fc <k_work_cancel_delayable_sync+0xd8>)
   17440:	f003 ff5f 	bl	1b302 <assert_post_action>
   17444:	b941      	cbnz	r1, 17458 <k_work_cancel_delayable_sync+0x34>
   17446:	492d      	ldr	r1, [pc, #180]	; (174fc <k_work_cancel_delayable_sync+0xd8>)
   17448:	f240 420f 	movw	r2, #1039	; 0x40f
   1744c:	482c      	ldr	r0, [pc, #176]	; (17500 <k_work_cancel_delayable_sync+0xdc>)
   1744e:	f003 ff5f 	bl	1b310 <assert_print>
   17452:	f240 410f 	movw	r1, #1039	; 0x40f
   17456:	e7f2      	b.n	1743e <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   17458:	f007 fd91 	bl	1ef7e <k_is_in_isr>
   1745c:	4604      	mov	r4, r0
   1745e:	b140      	cbz	r0, 17472 <k_work_cancel_delayable_sync+0x4e>
   17460:	4926      	ldr	r1, [pc, #152]	; (174fc <k_work_cancel_delayable_sync+0xd8>)
   17462:	f44f 6282 	mov.w	r2, #1040	; 0x410
   17466:	4826      	ldr	r0, [pc, #152]	; (17500 <k_work_cancel_delayable_sync+0xdc>)
   17468:	f003 ff52 	bl	1b310 <assert_print>
   1746c:	f44f 6182 	mov.w	r1, #1040	; 0x410
   17470:	e7e5      	b.n	1743e <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   17472:	f04f 0320 	mov.w	r3, #32
   17476:	f3ef 8811 	mrs	r8, BASEPRI
   1747a:	f383 8812 	msr	BASEPRI_MAX, r3
   1747e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17482:	4820      	ldr	r0, [pc, #128]	; (17504 <k_work_cancel_delayable_sync+0xe0>)
   17484:	f7fe ff36 	bl	162f4 <z_spin_lock_valid>
   17488:	b938      	cbnz	r0, 1749a <k_work_cancel_delayable_sync+0x76>
   1748a:	491f      	ldr	r1, [pc, #124]	; (17508 <k_work_cancel_delayable_sync+0xe4>)
   1748c:	2294      	movs	r2, #148	; 0x94
   1748e:	481c      	ldr	r0, [pc, #112]	; (17500 <k_work_cancel_delayable_sync+0xdc>)
   17490:	f003 ff3e 	bl	1b310 <assert_print>
   17494:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17496:	481c      	ldr	r0, [pc, #112]	; (17508 <k_work_cancel_delayable_sync+0xe4>)
   17498:	e7d2      	b.n	17440 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   1749a:	481a      	ldr	r0, [pc, #104]	; (17504 <k_work_cancel_delayable_sync+0xe0>)
   1749c:	f7fe ff46 	bl	1632c <z_spin_lock_set_owner>
	return *flagp;
   174a0:	68eb      	ldr	r3, [r5, #12]
   174a2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   174a6:	2b00      	cmp	r3, #0
   174a8:	bf14      	ite	ne
   174aa:	2701      	movne	r7, #1
   174ac:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   174ae:	d00a      	beq.n	174c6 <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   174b0:	4628      	mov	r0, r5
   174b2:	f007 fde4 	bl	1f07e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   174b6:	4628      	mov	r0, r5
   174b8:	f007 fdf6 	bl	1f0a8 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   174bc:	4631      	mov	r1, r6
   174be:	4628      	mov	r0, r5
   174c0:	f7ff fc26 	bl	16d10 <cancel_sync_locked>
   174c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   174c6:	480f      	ldr	r0, [pc, #60]	; (17504 <k_work_cancel_delayable_sync+0xe0>)
   174c8:	f7fe ff22 	bl	16310 <z_spin_unlock_valid>
   174cc:	b930      	cbnz	r0, 174dc <k_work_cancel_delayable_sync+0xb8>
   174ce:	490e      	ldr	r1, [pc, #56]	; (17508 <k_work_cancel_delayable_sync+0xe4>)
   174d0:	22c2      	movs	r2, #194	; 0xc2
   174d2:	480b      	ldr	r0, [pc, #44]	; (17500 <k_work_cancel_delayable_sync+0xdc>)
   174d4:	f003 ff1c 	bl	1b310 <assert_print>
   174d8:	21c2      	movs	r1, #194	; 0xc2
   174da:	e7dc      	b.n	17496 <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   174dc:	f388 8811 	msr	BASEPRI, r8
   174e0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   174e4:	b13c      	cbz	r4, 174f6 <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   174e6:	f04f 32ff 	mov.w	r2, #4294967295
   174ea:	f04f 33ff 	mov.w	r3, #4294967295
   174ee:	f106 0008 	add.w	r0, r6, #8
   174f2:	f7ff fab5 	bl	16a60 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   174f6:	4638      	mov	r0, r7
   174f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174fc:	0002534e 	.word	0x0002534e
   17500:	000221f8 	.word	0x000221f8
   17504:	20006fb8 	.word	0x20006fb8
   17508:	00022232 	.word	0x00022232

0001750c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1750c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1750e:	4d07      	ldr	r5, [pc, #28]	; (1752c <z_reset_time_slice+0x20>)
   17510:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   17512:	b154      	cbz	r4, 1752a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   17514:	f7fa ff94 	bl	12440 <sys_clock_elapsed>
   17518:	4b05      	ldr	r3, [pc, #20]	; (17530 <z_reset_time_slice+0x24>)
   1751a:	4404      	add	r4, r0
   1751c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1751e:	6828      	ldr	r0, [r5, #0]
   17520:	2100      	movs	r1, #0
	}
}
   17522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   17526:	f001 b94b 	b.w	187c0 <z_set_timeout_expiry>
}
   1752a:	bd38      	pop	{r3, r4, r5, pc}
   1752c:	20006fc4 	.word	0x20006fc4
   17530:	20006f78 	.word	0x20006f78

00017534 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   17534:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   17536:	4d12      	ldr	r5, [pc, #72]	; (17580 <update_cache+0x4c>)
   17538:	462b      	mov	r3, r5
   1753a:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1753e:	429c      	cmp	r4, r3
   17540:	d000      	beq.n	17544 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17542:	b904      	cbnz	r4, 17546 <update_cache+0x12>
   17544:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   17546:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   17548:	b988      	cbnz	r0, 1756e <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   1754a:	b943      	cbnz	r3, 1755e <update_cache+0x2a>
   1754c:	490d      	ldr	r1, [pc, #52]	; (17584 <update_cache+0x50>)
   1754e:	480e      	ldr	r0, [pc, #56]	; (17588 <update_cache+0x54>)
   17550:	2289      	movs	r2, #137	; 0x89
   17552:	f003 fedd 	bl	1b310 <assert_print>
   17556:	2189      	movs	r1, #137	; 0x89
   17558:	480a      	ldr	r0, [pc, #40]	; (17584 <update_cache+0x50>)
   1755a:	f003 fed2 	bl	1b302 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1755e:	7b5a      	ldrb	r2, [r3, #13]
   17560:	06d2      	lsls	r2, r2, #27
   17562:	d104      	bne.n	1756e <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17564:	69a2      	ldr	r2, [r4, #24]
   17566:	b912      	cbnz	r2, 1756e <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   17568:	89da      	ldrh	r2, [r3, #14]
   1756a:	2a7f      	cmp	r2, #127	; 0x7f
   1756c:	d805      	bhi.n	1757a <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1756e:	429c      	cmp	r4, r3
   17570:	d002      	beq.n	17578 <update_cache+0x44>
			z_reset_time_slice(thread);
   17572:	4620      	mov	r0, r4
   17574:	f7ff ffca 	bl	1750c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   17578:	4623      	mov	r3, r4
   1757a:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1757c:	bd38      	pop	{r3, r4, r5, pc}
   1757e:	bf00      	nop
   17580:	20006f78 	.word	0x20006f78
   17584:	0002536f 	.word	0x0002536f
   17588:	000221f8 	.word	0x000221f8

0001758c <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   1758c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1758e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   17592:	7b42      	ldrb	r2, [r0, #13]
   17594:	2b00      	cmp	r3, #0
   17596:	db37      	blt.n	17608 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17598:	06d3      	lsls	r3, r2, #27
   1759a:	d135      	bne.n	17608 <ready_thread+0x7c>
	return node->next != NULL;
   1759c:	6983      	ldr	r3, [r0, #24]
   1759e:	2b00      	cmp	r3, #0
   175a0:	d132      	bne.n	17608 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   175a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   175a6:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   175a8:	4a18      	ldr	r2, [pc, #96]	; (1760c <ready_thread+0x80>)
   175aa:	4290      	cmp	r0, r2
   175ac:	d108      	bne.n	175c0 <ready_thread+0x34>
   175ae:	4918      	ldr	r1, [pc, #96]	; (17610 <ready_thread+0x84>)
   175b0:	4818      	ldr	r0, [pc, #96]	; (17614 <ready_thread+0x88>)
   175b2:	22ba      	movs	r2, #186	; 0xba
   175b4:	f003 feac 	bl	1b310 <assert_print>
   175b8:	21ba      	movs	r1, #186	; 0xba
   175ba:	4815      	ldr	r0, [pc, #84]	; (17610 <ready_thread+0x84>)
   175bc:	f003 fea1 	bl	1b302 <assert_post_action>
	return list->head == list;
   175c0:	4915      	ldr	r1, [pc, #84]	; (17618 <ready_thread+0x8c>)
   175c2:	460a      	mov	r2, r1
   175c4:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   175c8:	4294      	cmp	r4, r2
   175ca:	bf18      	it	ne
   175cc:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   175ce:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   175d0:	b923      	cbnz	r3, 175dc <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   175d2:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   175d6:	6020      	str	r0, [r4, #0]
	list->tail = node;
   175d8:	6288      	str	r0, [r1, #40]	; 0x28
}
   175da:	e00c      	b.n	175f6 <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   175dc:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   175e0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   175e4:	42b5      	cmp	r5, r6
   175e6:	d00b      	beq.n	17600 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   175e8:	42ae      	cmp	r6, r5
   175ea:	dd09      	ble.n	17600 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   175ec:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   175ee:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   175f2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   175f4:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   175f6:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   175f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   175fc:	f7ff bf9a 	b.w	17534 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17600:	42a3      	cmp	r3, r4
   17602:	d0e6      	beq.n	175d2 <ready_thread+0x46>
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	e7e3      	b.n	175d0 <ready_thread+0x44>
}
   17608:	bd70      	pop	{r4, r5, r6, pc}
   1760a:	bf00      	nop
   1760c:	20006050 	.word	0x20006050
   17610:	0002536f 	.word	0x0002536f
   17614:	000221f8 	.word	0x000221f8
   17618:	20006f78 	.word	0x20006f78

0001761c <k_sched_time_slice_set>:
{
   1761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1761e:	4604      	mov	r4, r0
   17620:	460d      	mov	r5, r1
	__asm__ volatile(
   17622:	f04f 0320 	mov.w	r3, #32
   17626:	f3ef 8711 	mrs	r7, BASEPRI
   1762a:	f383 8812 	msr	BASEPRI_MAX, r3
   1762e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17632:	481d      	ldr	r0, [pc, #116]	; (176a8 <k_sched_time_slice_set+0x8c>)
   17634:	f7fe fe5e 	bl	162f4 <z_spin_lock_valid>
   17638:	b940      	cbnz	r0, 1764c <k_sched_time_slice_set+0x30>
   1763a:	491c      	ldr	r1, [pc, #112]	; (176ac <k_sched_time_slice_set+0x90>)
   1763c:	2294      	movs	r2, #148	; 0x94
   1763e:	481c      	ldr	r0, [pc, #112]	; (176b0 <k_sched_time_slice_set+0x94>)
   17640:	f003 fe66 	bl	1b310 <assert_print>
   17644:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17646:	4819      	ldr	r0, [pc, #100]	; (176ac <k_sched_time_slice_set+0x90>)
   17648:	f003 fe5b 	bl	1b302 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1764c:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   1764e:	4816      	ldr	r0, [pc, #88]	; (176a8 <k_sched_time_slice_set+0x8c>)
   17650:	f7fe fe6c 	bl	1632c <z_spin_lock_set_owner>
   17654:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   17658:	f240 30e7 	movw	r0, #999	; 0x3e7
   1765c:	4631      	mov	r1, r6
   1765e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17662:	2300      	movs	r3, #0
   17664:	fbe4 010c 	umlal	r0, r1, r4, ip
   17668:	f7ed fcde 	bl	5028 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1766c:	42b4      	cmp	r4, r6
   1766e:	dd02      	ble.n	17676 <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   17670:	2802      	cmp	r0, #2
   17672:	bfb8      	it	lt
   17674:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   17676:	4a0f      	ldr	r2, [pc, #60]	; (176b4 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   17678:	4b0f      	ldr	r3, [pc, #60]	; (176b8 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1767a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1767c:	4a0f      	ldr	r2, [pc, #60]	; (176bc <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   1767e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   17680:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   17682:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   17684:	f7ff ff42 	bl	1750c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17688:	4807      	ldr	r0, [pc, #28]	; (176a8 <k_sched_time_slice_set+0x8c>)
   1768a:	f7fe fe41 	bl	16310 <z_spin_unlock_valid>
   1768e:	b930      	cbnz	r0, 1769e <k_sched_time_slice_set+0x82>
   17690:	4906      	ldr	r1, [pc, #24]	; (176ac <k_sched_time_slice_set+0x90>)
   17692:	22c2      	movs	r2, #194	; 0xc2
   17694:	4806      	ldr	r0, [pc, #24]	; (176b0 <k_sched_time_slice_set+0x94>)
   17696:	f003 fe3b 	bl	1b310 <assert_print>
   1769a:	21c2      	movs	r1, #194	; 0xc2
   1769c:	e7d3      	b.n	17646 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   1769e:	f387 8811 	msr	BASEPRI, r7
   176a2:	f3bf 8f6f 	isb	sy
}
   176a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176a8:	20006fc8 	.word	0x20006fc8
   176ac:	00022232 	.word	0x00022232
   176b0:	000221f8 	.word	0x000221f8
   176b4:	20006fc4 	.word	0x20006fc4
   176b8:	20006f78 	.word	0x20006f78
   176bc:	20006fc0 	.word	0x20006fc0

000176c0 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   176c0:	b538      	push	{r3, r4, r5, lr}
   176c2:	4604      	mov	r4, r0
	__asm__ volatile(
   176c4:	f04f 0320 	mov.w	r3, #32
   176c8:	f3ef 8511 	mrs	r5, BASEPRI
   176cc:	f383 8812 	msr	BASEPRI_MAX, r3
   176d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   176d4:	4811      	ldr	r0, [pc, #68]	; (1771c <z_ready_thread+0x5c>)
   176d6:	f7fe fe0d 	bl	162f4 <z_spin_lock_valid>
   176da:	b940      	cbnz	r0, 176ee <z_ready_thread+0x2e>
   176dc:	4910      	ldr	r1, [pc, #64]	; (17720 <z_ready_thread+0x60>)
   176de:	2294      	movs	r2, #148	; 0x94
   176e0:	4810      	ldr	r0, [pc, #64]	; (17724 <z_ready_thread+0x64>)
   176e2:	f003 fe15 	bl	1b310 <assert_print>
   176e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176e8:	480d      	ldr	r0, [pc, #52]	; (17720 <z_ready_thread+0x60>)
   176ea:	f003 fe0a 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   176ee:	480b      	ldr	r0, [pc, #44]	; (1771c <z_ready_thread+0x5c>)
   176f0:	f7fe fe1c 	bl	1632c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   176f4:	4620      	mov	r0, r4
   176f6:	f7ff ff49 	bl	1758c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176fa:	4808      	ldr	r0, [pc, #32]	; (1771c <z_ready_thread+0x5c>)
   176fc:	f7fe fe08 	bl	16310 <z_spin_unlock_valid>
   17700:	b930      	cbnz	r0, 17710 <z_ready_thread+0x50>
   17702:	4907      	ldr	r1, [pc, #28]	; (17720 <z_ready_thread+0x60>)
   17704:	22c2      	movs	r2, #194	; 0xc2
   17706:	4807      	ldr	r0, [pc, #28]	; (17724 <z_ready_thread+0x64>)
   17708:	f003 fe02 	bl	1b310 <assert_print>
   1770c:	21c2      	movs	r1, #194	; 0xc2
   1770e:	e7eb      	b.n	176e8 <z_ready_thread+0x28>
	__asm__ volatile(
   17710:	f385 8811 	msr	BASEPRI, r5
   17714:	f3bf 8f6f 	isb	sy
		}
	}
}
   17718:	bd38      	pop	{r3, r4, r5, pc}
   1771a:	bf00      	nop
   1771c:	20006fc8 	.word	0x20006fc8
   17720:	00022232 	.word	0x00022232
   17724:	000221f8 	.word	0x000221f8

00017728 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   17728:	b538      	push	{r3, r4, r5, lr}
   1772a:	4604      	mov	r4, r0
	__asm__ volatile(
   1772c:	f04f 0320 	mov.w	r3, #32
   17730:	f3ef 8511 	mrs	r5, BASEPRI
   17734:	f383 8812 	msr	BASEPRI_MAX, r3
   17738:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1773c:	4811      	ldr	r0, [pc, #68]	; (17784 <z_unpend_thread_no_timeout+0x5c>)
   1773e:	f7fe fdd9 	bl	162f4 <z_spin_lock_valid>
   17742:	b940      	cbnz	r0, 17756 <z_unpend_thread_no_timeout+0x2e>
   17744:	4910      	ldr	r1, [pc, #64]	; (17788 <z_unpend_thread_no_timeout+0x60>)
   17746:	2294      	movs	r2, #148	; 0x94
   17748:	4810      	ldr	r0, [pc, #64]	; (1778c <z_unpend_thread_no_timeout+0x64>)
   1774a:	f003 fde1 	bl	1b310 <assert_print>
   1774e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17750:	480d      	ldr	r0, [pc, #52]	; (17788 <z_unpend_thread_no_timeout+0x60>)
   17752:	f003 fdd6 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17756:	480b      	ldr	r0, [pc, #44]	; (17784 <z_unpend_thread_no_timeout+0x5c>)
   17758:	f7fe fde8 	bl	1632c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   1775c:	4620      	mov	r0, r4
   1775e:	f000 fb97 	bl	17e90 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17762:	4808      	ldr	r0, [pc, #32]	; (17784 <z_unpend_thread_no_timeout+0x5c>)
   17764:	f7fe fdd4 	bl	16310 <z_spin_unlock_valid>
   17768:	b930      	cbnz	r0, 17778 <z_unpend_thread_no_timeout+0x50>
   1776a:	4907      	ldr	r1, [pc, #28]	; (17788 <z_unpend_thread_no_timeout+0x60>)
   1776c:	22c2      	movs	r2, #194	; 0xc2
   1776e:	4807      	ldr	r0, [pc, #28]	; (1778c <z_unpend_thread_no_timeout+0x64>)
   17770:	f003 fdce 	bl	1b310 <assert_print>
   17774:	21c2      	movs	r1, #194	; 0xc2
   17776:	e7eb      	b.n	17750 <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   17778:	f385 8811 	msr	BASEPRI, r5
   1777c:	f3bf 8f6f 	isb	sy
	}
}
   17780:	bd38      	pop	{r3, r4, r5, pc}
   17782:	bf00      	nop
   17784:	20006fc8 	.word	0x20006fc8
   17788:	00022232 	.word	0x00022232
   1778c:	000221f8 	.word	0x000221f8

00017790 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   17790:	b538      	push	{r3, r4, r5, lr}
   17792:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17794:	460c      	mov	r4, r1
   17796:	b9c1      	cbnz	r1, 177ca <z_reschedule+0x3a>
   17798:	f3ef 8505 	mrs	r5, IPSR
   1779c:	b9ad      	cbnz	r5, 177ca <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   1779e:	4a13      	ldr	r2, [pc, #76]	; (177ec <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   177a0:	6a11      	ldr	r1, [r2, #32]
   177a2:	6892      	ldr	r2, [r2, #8]
   177a4:	4291      	cmp	r1, r2
   177a6:	d010      	beq.n	177ca <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177a8:	f7fe fdb2 	bl	16310 <z_spin_unlock_valid>
   177ac:	b940      	cbnz	r0, 177c0 <z_reschedule+0x30>
   177ae:	4910      	ldr	r1, [pc, #64]	; (177f0 <z_reschedule+0x60>)
   177b0:	22e1      	movs	r2, #225	; 0xe1
   177b2:	4810      	ldr	r0, [pc, #64]	; (177f4 <z_reschedule+0x64>)
   177b4:	f003 fdac 	bl	1b310 <assert_print>
   177b8:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177ba:	480d      	ldr	r0, [pc, #52]	; (177f0 <z_reschedule+0x60>)
   177bc:	f003 fda1 	bl	1b302 <assert_post_action>
	ret = arch_swap(key);
   177c0:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   177c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   177c6:	f7f2 b965 	b.w	9a94 <arch_swap>
   177ca:	4618      	mov	r0, r3
   177cc:	f7fe fda0 	bl	16310 <z_spin_unlock_valid>
   177d0:	b930      	cbnz	r0, 177e0 <z_reschedule+0x50>
   177d2:	4907      	ldr	r1, [pc, #28]	; (177f0 <z_reschedule+0x60>)
   177d4:	22c2      	movs	r2, #194	; 0xc2
   177d6:	4807      	ldr	r0, [pc, #28]	; (177f4 <z_reschedule+0x64>)
   177d8:	f003 fd9a 	bl	1b310 <assert_print>
   177dc:	21c2      	movs	r1, #194	; 0xc2
   177de:	e7ec      	b.n	177ba <z_reschedule+0x2a>
   177e0:	f384 8811 	msr	BASEPRI, r4
   177e4:	f3bf 8f6f 	isb	sy
   177e8:	bd38      	pop	{r3, r4, r5, pc}
   177ea:	bf00      	nop
   177ec:	20006f78 	.word	0x20006f78
   177f0:	00022232 	.word	0x00022232
   177f4:	000221f8 	.word	0x000221f8

000177f8 <z_sched_start>:
{
   177f8:	b538      	push	{r3, r4, r5, lr}
   177fa:	4604      	mov	r4, r0
	__asm__ volatile(
   177fc:	f04f 0320 	mov.w	r3, #32
   17800:	f3ef 8511 	mrs	r5, BASEPRI
   17804:	f383 8812 	msr	BASEPRI_MAX, r3
   17808:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1780c:	4817      	ldr	r0, [pc, #92]	; (1786c <z_sched_start+0x74>)
   1780e:	f7fe fd71 	bl	162f4 <z_spin_lock_valid>
   17812:	b940      	cbnz	r0, 17826 <z_sched_start+0x2e>
   17814:	4916      	ldr	r1, [pc, #88]	; (17870 <z_sched_start+0x78>)
   17816:	2294      	movs	r2, #148	; 0x94
   17818:	4816      	ldr	r0, [pc, #88]	; (17874 <z_sched_start+0x7c>)
   1781a:	f003 fd79 	bl	1b310 <assert_print>
   1781e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17820:	4813      	ldr	r0, [pc, #76]	; (17870 <z_sched_start+0x78>)
   17822:	f003 fd6e 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17826:	4811      	ldr	r0, [pc, #68]	; (1786c <z_sched_start+0x74>)
   17828:	f7fe fd80 	bl	1632c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1782c:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1782e:	075a      	lsls	r2, r3, #29
   17830:	d40f      	bmi.n	17852 <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17832:	480e      	ldr	r0, [pc, #56]	; (1786c <z_sched_start+0x74>)
   17834:	f7fe fd6c 	bl	16310 <z_spin_unlock_valid>
   17838:	b930      	cbnz	r0, 17848 <z_sched_start+0x50>
   1783a:	490d      	ldr	r1, [pc, #52]	; (17870 <z_sched_start+0x78>)
   1783c:	22c2      	movs	r2, #194	; 0xc2
   1783e:	480d      	ldr	r0, [pc, #52]	; (17874 <z_sched_start+0x7c>)
   17840:	f003 fd66 	bl	1b310 <assert_print>
   17844:	21c2      	movs	r1, #194	; 0xc2
   17846:	e7eb      	b.n	17820 <z_sched_start+0x28>
	__asm__ volatile(
   17848:	f385 8811 	msr	BASEPRI, r5
   1784c:	f3bf 8f6f 	isb	sy
}
   17850:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17852:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   17856:	4620      	mov	r0, r4
   17858:	7363      	strb	r3, [r4, #13]
   1785a:	f7ff fe97 	bl	1758c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1785e:	4629      	mov	r1, r5
}
   17860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   17864:	4801      	ldr	r0, [pc, #4]	; (1786c <z_sched_start+0x74>)
   17866:	f7ff bf93 	b.w	17790 <z_reschedule>
   1786a:	bf00      	nop
   1786c:	20006fc8 	.word	0x20006fc8
   17870:	00022232 	.word	0x00022232
   17874:	000221f8 	.word	0x000221f8

00017878 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   17878:	b510      	push	{r4, lr}
	__asm__ volatile(
   1787a:	f04f 0320 	mov.w	r3, #32
   1787e:	f3ef 8411 	mrs	r4, BASEPRI
   17882:	f383 8812 	msr	BASEPRI_MAX, r3
   17886:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1788a:	481c      	ldr	r0, [pc, #112]	; (178fc <k_sched_lock+0x84>)
   1788c:	f7fe fd32 	bl	162f4 <z_spin_lock_valid>
   17890:	b938      	cbnz	r0, 178a2 <k_sched_lock+0x2a>
   17892:	491b      	ldr	r1, [pc, #108]	; (17900 <k_sched_lock+0x88>)
   17894:	2294      	movs	r2, #148	; 0x94
   17896:	481b      	ldr	r0, [pc, #108]	; (17904 <k_sched_lock+0x8c>)
   17898:	f003 fd3a 	bl	1b310 <assert_print>
   1789c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1789e:	4818      	ldr	r0, [pc, #96]	; (17900 <k_sched_lock+0x88>)
   178a0:	e00c      	b.n	178bc <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   178a2:	4816      	ldr	r0, [pc, #88]	; (178fc <k_sched_lock+0x84>)
   178a4:	f7fe fd42 	bl	1632c <z_spin_lock_set_owner>
   178a8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   178ac:	b143      	cbz	r3, 178c0 <k_sched_lock+0x48>
   178ae:	4916      	ldr	r1, [pc, #88]	; (17908 <k_sched_lock+0x90>)
   178b0:	22fd      	movs	r2, #253	; 0xfd
   178b2:	4814      	ldr	r0, [pc, #80]	; (17904 <k_sched_lock+0x8c>)
   178b4:	f003 fd2c 	bl	1b310 <assert_print>
   178b8:	21fd      	movs	r1, #253	; 0xfd
   178ba:	4813      	ldr	r0, [pc, #76]	; (17908 <k_sched_lock+0x90>)
   178bc:	f003 fd21 	bl	1b302 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   178c0:	4b12      	ldr	r3, [pc, #72]	; (1790c <k_sched_lock+0x94>)
   178c2:	689a      	ldr	r2, [r3, #8]
   178c4:	7bd3      	ldrb	r3, [r2, #15]
   178c6:	2b01      	cmp	r3, #1
   178c8:	d106      	bne.n	178d8 <k_sched_lock+0x60>
   178ca:	490f      	ldr	r1, [pc, #60]	; (17908 <k_sched_lock+0x90>)
   178cc:	22fe      	movs	r2, #254	; 0xfe
   178ce:	480d      	ldr	r0, [pc, #52]	; (17904 <k_sched_lock+0x8c>)
   178d0:	f003 fd1e 	bl	1b310 <assert_print>
   178d4:	21fe      	movs	r1, #254	; 0xfe
   178d6:	e7f0      	b.n	178ba <k_sched_lock+0x42>
	--_current->base.sched_locked;
   178d8:	3b01      	subs	r3, #1
   178da:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178dc:	4807      	ldr	r0, [pc, #28]	; (178fc <k_sched_lock+0x84>)
   178de:	f7fe fd17 	bl	16310 <z_spin_unlock_valid>
   178e2:	b930      	cbnz	r0, 178f2 <k_sched_lock+0x7a>
   178e4:	4906      	ldr	r1, [pc, #24]	; (17900 <k_sched_lock+0x88>)
   178e6:	22c2      	movs	r2, #194	; 0xc2
   178e8:	4806      	ldr	r0, [pc, #24]	; (17904 <k_sched_lock+0x8c>)
   178ea:	f003 fd11 	bl	1b310 <assert_print>
   178ee:	21c2      	movs	r1, #194	; 0xc2
   178f0:	e7d5      	b.n	1789e <k_sched_lock+0x26>
	__asm__ volatile(
   178f2:	f384 8811 	msr	BASEPRI, r4
   178f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   178fa:	bd10      	pop	{r4, pc}
   178fc:	20006fc8 	.word	0x20006fc8
   17900:	00022232 	.word	0x00022232
   17904:	000221f8 	.word	0x000221f8
   17908:	00025391 	.word	0x00025391
   1790c:	20006f78 	.word	0x20006f78

00017910 <k_sched_unlock>:

void k_sched_unlock(void)
{
   17910:	b510      	push	{r4, lr}
	__asm__ volatile(
   17912:	f04f 0320 	mov.w	r3, #32
   17916:	f3ef 8411 	mrs	r4, BASEPRI
   1791a:	f383 8812 	msr	BASEPRI_MAX, r3
   1791e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17922:	4820      	ldr	r0, [pc, #128]	; (179a4 <k_sched_unlock+0x94>)
   17924:	f7fe fce6 	bl	162f4 <z_spin_lock_valid>
   17928:	b938      	cbnz	r0, 1793a <k_sched_unlock+0x2a>
   1792a:	491f      	ldr	r1, [pc, #124]	; (179a8 <k_sched_unlock+0x98>)
   1792c:	2294      	movs	r2, #148	; 0x94
   1792e:	481f      	ldr	r0, [pc, #124]	; (179ac <k_sched_unlock+0x9c>)
   17930:	f003 fcee 	bl	1b310 <assert_print>
   17934:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17936:	481c      	ldr	r0, [pc, #112]	; (179a8 <k_sched_unlock+0x98>)
   17938:	e00f      	b.n	1795a <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   1793a:	481a      	ldr	r0, [pc, #104]	; (179a4 <k_sched_unlock+0x94>)
   1793c:	f7fe fcf6 	bl	1632c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   17940:	4b1b      	ldr	r3, [pc, #108]	; (179b0 <k_sched_unlock+0xa0>)
   17942:	689a      	ldr	r2, [r3, #8]
   17944:	7bd3      	ldrb	r3, [r2, #15]
   17946:	b953      	cbnz	r3, 1795e <k_sched_unlock+0x4e>
   17948:	491a      	ldr	r1, [pc, #104]	; (179b4 <k_sched_unlock+0xa4>)
   1794a:	f240 32e7 	movw	r2, #999	; 0x3e7
   1794e:	4817      	ldr	r0, [pc, #92]	; (179ac <k_sched_unlock+0x9c>)
   17950:	f003 fcde 	bl	1b310 <assert_print>
   17954:	f240 31e7 	movw	r1, #999	; 0x3e7
   17958:	4816      	ldr	r0, [pc, #88]	; (179b4 <k_sched_unlock+0xa4>)
   1795a:	f003 fcd2 	bl	1b302 <assert_post_action>
   1795e:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   17962:	b140      	cbz	r0, 17976 <k_sched_unlock+0x66>
   17964:	4913      	ldr	r1, [pc, #76]	; (179b4 <k_sched_unlock+0xa4>)
   17966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1796a:	4810      	ldr	r0, [pc, #64]	; (179ac <k_sched_unlock+0x9c>)
   1796c:	f003 fcd0 	bl	1b310 <assert_print>
   17970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17974:	e7f0      	b.n	17958 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   17976:	3301      	adds	r3, #1
   17978:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1797a:	f7ff fddb 	bl	17534 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1797e:	4809      	ldr	r0, [pc, #36]	; (179a4 <k_sched_unlock+0x94>)
   17980:	f7fe fcc6 	bl	16310 <z_spin_unlock_valid>
   17984:	b930      	cbnz	r0, 17994 <k_sched_unlock+0x84>
   17986:	4908      	ldr	r1, [pc, #32]	; (179a8 <k_sched_unlock+0x98>)
   17988:	22c2      	movs	r2, #194	; 0xc2
   1798a:	4808      	ldr	r0, [pc, #32]	; (179ac <k_sched_unlock+0x9c>)
   1798c:	f003 fcc0 	bl	1b310 <assert_print>
   17990:	21c2      	movs	r1, #194	; 0xc2
   17992:	e7d0      	b.n	17936 <k_sched_unlock+0x26>
	__asm__ volatile(
   17994:	f384 8811 	msr	BASEPRI, r4
   17998:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   179a0:	f007 bbdd 	b.w	1f15e <z_reschedule_unlocked>
   179a4:	20006fc8 	.word	0x20006fc8
   179a8:	00022232 	.word	0x00022232
   179ac:	000221f8 	.word	0x000221f8
   179b0:	20006f78 	.word	0x20006f78
   179b4:	0002536f 	.word	0x0002536f

000179b8 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   179b8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   179ba:	4b0b      	ldr	r3, [pc, #44]	; (179e8 <z_priq_dumb_remove+0x30>)
   179bc:	4299      	cmp	r1, r3
   179be:	d10a      	bne.n	179d6 <z_priq_dumb_remove+0x1e>
   179c0:	490a      	ldr	r1, [pc, #40]	; (179ec <z_priq_dumb_remove+0x34>)
   179c2:	480b      	ldr	r0, [pc, #44]	; (179f0 <z_priq_dumb_remove+0x38>)
   179c4:	f240 4273 	movw	r2, #1139	; 0x473
   179c8:	f003 fca2 	bl	1b310 <assert_print>
   179cc:	f240 4173 	movw	r1, #1139	; 0x473
   179d0:	4806      	ldr	r0, [pc, #24]	; (179ec <z_priq_dumb_remove+0x34>)
   179d2:	f003 fc96 	bl	1b302 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   179d6:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   179da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   179dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   179de:	2300      	movs	r3, #0
	node->prev = NULL;
   179e0:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   179e4:	bd08      	pop	{r3, pc}
   179e6:	bf00      	nop
   179e8:	20006050 	.word	0x20006050
   179ec:	0002536f 	.word	0x0002536f
   179f0:	000221f8 	.word	0x000221f8

000179f4 <move_thread_to_end_of_prio_q>:
{
   179f4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   179f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   179fa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   179fc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   179fe:	7b43      	ldrb	r3, [r0, #13]
   17a00:	da06      	bge.n	17a10 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   17a06:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a08:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17a0a:	481d      	ldr	r0, [pc, #116]	; (17a80 <move_thread_to_end_of_prio_q+0x8c>)
   17a0c:	f7ff ffd4 	bl	179b8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17a10:	7b63      	ldrb	r3, [r4, #13]
   17a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17a16:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17a18:	4b1a      	ldr	r3, [pc, #104]	; (17a84 <move_thread_to_end_of_prio_q+0x90>)
   17a1a:	429c      	cmp	r4, r3
   17a1c:	d108      	bne.n	17a30 <move_thread_to_end_of_prio_q+0x3c>
   17a1e:	491a      	ldr	r1, [pc, #104]	; (17a88 <move_thread_to_end_of_prio_q+0x94>)
   17a20:	481a      	ldr	r0, [pc, #104]	; (17a8c <move_thread_to_end_of_prio_q+0x98>)
   17a22:	22ba      	movs	r2, #186	; 0xba
   17a24:	f003 fc74 	bl	1b310 <assert_print>
   17a28:	21ba      	movs	r1, #186	; 0xba
   17a2a:	4817      	ldr	r0, [pc, #92]	; (17a88 <move_thread_to_end_of_prio_q+0x94>)
   17a2c:	f003 fc69 	bl	1b302 <assert_post_action>
	return list->head == list;
   17a30:	4a17      	ldr	r2, [pc, #92]	; (17a90 <move_thread_to_end_of_prio_q+0x9c>)
   17a32:	4611      	mov	r1, r2
   17a34:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return (node == list->tail) ? NULL : node->next;
   17a38:	6a90      	ldr	r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17a3a:	428b      	cmp	r3, r1
   17a3c:	bf08      	it	eq
   17a3e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17a40:	b923      	cbnz	r3, 17a4c <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   17a42:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   17a46:	6004      	str	r4, [r0, #0]
	list->tail = node;
   17a48:	6294      	str	r4, [r2, #40]	; 0x28
}
   17a4a:	e00c      	b.n	17a66 <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   17a4c:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17a50:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   17a54:	42b5      	cmp	r5, r6
   17a56:	d00e      	beq.n	17a76 <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17a58:	42ae      	cmp	r6, r5
   17a5a:	dd0c      	ble.n	17a76 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   17a5c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17a5e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   17a62:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17a64:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   17a66:	6890      	ldr	r0, [r2, #8]
   17a68:	1b03      	subs	r3, r0, r4
   17a6a:	4258      	negs	r0, r3
   17a6c:	4158      	adcs	r0, r3
}
   17a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17a72:	f7ff bd5f 	b.w	17534 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17a76:	4298      	cmp	r0, r3
   17a78:	d0e3      	beq.n	17a42 <move_thread_to_end_of_prio_q+0x4e>
   17a7a:	681b      	ldr	r3, [r3, #0]
   17a7c:	e7e0      	b.n	17a40 <move_thread_to_end_of_prio_q+0x4c>
   17a7e:	bf00      	nop
   17a80:	20006f9c 	.word	0x20006f9c
   17a84:	20006050 	.word	0x20006050
   17a88:	0002536f 	.word	0x0002536f
   17a8c:	000221f8 	.word	0x000221f8
   17a90:	20006f78 	.word	0x20006f78

00017a94 <z_time_slice>:
{
   17a94:	b570      	push	{r4, r5, r6, lr}
   17a96:	4605      	mov	r5, r0
	__asm__ volatile(
   17a98:	f04f 0320 	mov.w	r3, #32
   17a9c:	f3ef 8611 	mrs	r6, BASEPRI
   17aa0:	f383 8812 	msr	BASEPRI_MAX, r3
   17aa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17aa8:	4824      	ldr	r0, [pc, #144]	; (17b3c <z_time_slice+0xa8>)
   17aaa:	f7fe fc23 	bl	162f4 <z_spin_lock_valid>
   17aae:	b940      	cbnz	r0, 17ac2 <z_time_slice+0x2e>
   17ab0:	4923      	ldr	r1, [pc, #140]	; (17b40 <z_time_slice+0xac>)
   17ab2:	2294      	movs	r2, #148	; 0x94
   17ab4:	4823      	ldr	r0, [pc, #140]	; (17b44 <z_time_slice+0xb0>)
   17ab6:	f003 fc2b 	bl	1b310 <assert_print>
   17aba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17abc:	4820      	ldr	r0, [pc, #128]	; (17b40 <z_time_slice+0xac>)
   17abe:	f003 fc20 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ac2:	481e      	ldr	r0, [pc, #120]	; (17b3c <z_time_slice+0xa8>)
   17ac4:	f7fe fc32 	bl	1632c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17ac8:	4b1f      	ldr	r3, [pc, #124]	; (17b48 <z_time_slice+0xb4>)
   17aca:	4a20      	ldr	r2, [pc, #128]	; (17b4c <z_time_slice+0xb8>)
   17acc:	689c      	ldr	r4, [r3, #8]
   17ace:	6811      	ldr	r1, [r2, #0]
   17ad0:	428c      	cmp	r4, r1
   17ad2:	d10d      	bne.n	17af0 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   17ad4:	4620      	mov	r0, r4
   17ad6:	f7ff fd19 	bl	1750c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ada:	4818      	ldr	r0, [pc, #96]	; (17b3c <z_time_slice+0xa8>)
   17adc:	f7fe fc18 	bl	16310 <z_spin_unlock_valid>
   17ae0:	bb30      	cbnz	r0, 17b30 <z_time_slice+0x9c>
   17ae2:	4917      	ldr	r1, [pc, #92]	; (17b40 <z_time_slice+0xac>)
   17ae4:	22c2      	movs	r2, #194	; 0xc2
   17ae6:	4817      	ldr	r0, [pc, #92]	; (17b44 <z_time_slice+0xb0>)
   17ae8:	f003 fc12 	bl	1b310 <assert_print>
   17aec:	21c2      	movs	r1, #194	; 0xc2
   17aee:	e7e5      	b.n	17abc <z_time_slice+0x28>
	pending_current = NULL;
   17af0:	2100      	movs	r1, #0
   17af2:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   17af4:	4a16      	ldr	r2, [pc, #88]	; (17b50 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   17af6:	6812      	ldr	r2, [r2, #0]
   17af8:	b1c2      	cbz	r2, 17b2c <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   17afa:	89e2      	ldrh	r2, [r4, #14]
   17afc:	2a7f      	cmp	r2, #127	; 0x7f
   17afe:	d815      	bhi.n	17b2c <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   17b00:	7b62      	ldrb	r2, [r4, #13]
   17b02:	06d2      	lsls	r2, r2, #27
   17b04:	d112      	bne.n	17b2c <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17b06:	4a13      	ldr	r2, [pc, #76]	; (17b54 <z_time_slice+0xc0>)
   17b08:	f994 100e 	ldrsb.w	r1, [r4, #14]
   17b0c:	6812      	ldr	r2, [r2, #0]
   17b0e:	4291      	cmp	r1, r2
   17b10:	db0c      	blt.n	17b2c <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   17b12:	4a11      	ldr	r2, [pc, #68]	; (17b58 <z_time_slice+0xc4>)
   17b14:	4294      	cmp	r4, r2
   17b16:	d009      	beq.n	17b2c <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   17b18:	691a      	ldr	r2, [r3, #16]
   17b1a:	42aa      	cmp	r2, r5
   17b1c:	dc03      	bgt.n	17b26 <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   17b1e:	4620      	mov	r0, r4
   17b20:	f7ff ff68 	bl	179f4 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   17b24:	e7d6      	b.n	17ad4 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   17b26:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   17b28:	611a      	str	r2, [r3, #16]
   17b2a:	e7d6      	b.n	17ada <z_time_slice+0x46>
   17b2c:	2200      	movs	r2, #0
   17b2e:	e7fb      	b.n	17b28 <z_time_slice+0x94>
	__asm__ volatile(
   17b30:	f386 8811 	msr	BASEPRI, r6
   17b34:	f3bf 8f6f 	isb	sy
}
   17b38:	bd70      	pop	{r4, r5, r6, pc}
   17b3a:	bf00      	nop
   17b3c:	20006fc8 	.word	0x20006fc8
   17b40:	00022232 	.word	0x00022232
   17b44:	000221f8 	.word	0x000221f8
   17b48:	20006f78 	.word	0x20006f78
   17b4c:	20006fbc 	.word	0x20006fbc
   17b50:	20006fc4 	.word	0x20006fc4
   17b54:	20006fc0 	.word	0x20006fc0
   17b58:	20006050 	.word	0x20006050

00017b5c <unready_thread>:
{
   17b5c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   17b5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17b62:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17b64:	2a00      	cmp	r2, #0
   17b66:	7b43      	ldrb	r3, [r0, #13]
   17b68:	da06      	bge.n	17b78 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   17b6e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17b70:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17b72:	4806      	ldr	r0, [pc, #24]	; (17b8c <unready_thread+0x30>)
   17b74:	f7ff ff20 	bl	179b8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   17b78:	4b05      	ldr	r3, [pc, #20]	; (17b90 <unready_thread+0x34>)
   17b7a:	6898      	ldr	r0, [r3, #8]
   17b7c:	1b03      	subs	r3, r0, r4
   17b7e:	4258      	negs	r0, r3
   17b80:	4158      	adcs	r0, r3
}
   17b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   17b86:	f7ff bcd5 	b.w	17534 <update_cache>
   17b8a:	bf00      	nop
   17b8c:	20006f9c 	.word	0x20006f9c
   17b90:	20006f78 	.word	0x20006f78

00017b94 <add_to_waitq_locked>:
{
   17b94:	b538      	push	{r3, r4, r5, lr}
   17b96:	4604      	mov	r4, r0
   17b98:	460d      	mov	r5, r1
	unready_thread(thread);
   17b9a:	f7ff ffdf 	bl	17b5c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   17b9e:	7b63      	ldrb	r3, [r4, #13]
   17ba0:	f043 0302 	orr.w	r3, r3, #2
   17ba4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   17ba6:	b345      	cbz	r5, 17bfa <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17ba8:	4b14      	ldr	r3, [pc, #80]	; (17bfc <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   17baa:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17bac:	429c      	cmp	r4, r3
   17bae:	d108      	bne.n	17bc2 <add_to_waitq_locked+0x2e>
   17bb0:	4913      	ldr	r1, [pc, #76]	; (17c00 <add_to_waitq_locked+0x6c>)
   17bb2:	4814      	ldr	r0, [pc, #80]	; (17c04 <add_to_waitq_locked+0x70>)
   17bb4:	22ba      	movs	r2, #186	; 0xba
   17bb6:	f003 fbab 	bl	1b310 <assert_print>
   17bba:	21ba      	movs	r1, #186	; 0xba
   17bbc:	4810      	ldr	r0, [pc, #64]	; (17c00 <add_to_waitq_locked+0x6c>)
   17bbe:	f003 fba0 	bl	1b302 <assert_post_action>
	return list->head == list;
   17bc2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17bc4:	429d      	cmp	r5, r3
   17bc6:	d109      	bne.n	17bdc <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   17bc8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   17bca:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   17bce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17bd0:	606c      	str	r4, [r5, #4]
}
   17bd2:	e012      	b.n	17bfa <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   17bd4:	686a      	ldr	r2, [r5, #4]
   17bd6:	4293      	cmp	r3, r2
   17bd8:	d0f6      	beq.n	17bc8 <add_to_waitq_locked+0x34>
   17bda:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d0f3      	beq.n	17bc8 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   17be0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   17be4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   17be8:	428a      	cmp	r2, r1
   17bea:	d0f3      	beq.n	17bd4 <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17bec:	4291      	cmp	r1, r2
   17bee:	ddf1      	ble.n	17bd4 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   17bf0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17bf2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17bf6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17bf8:	605c      	str	r4, [r3, #4]
}
   17bfa:	bd38      	pop	{r3, r4, r5, pc}
   17bfc:	20006050 	.word	0x20006050
   17c00:	0002536f 	.word	0x0002536f
   17c04:	000221f8 	.word	0x000221f8

00017c08 <pend_locked>:
{
   17c08:	b570      	push	{r4, r5, r6, lr}
   17c0a:	4615      	mov	r5, r2
   17c0c:	461c      	mov	r4, r3
   17c0e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   17c10:	f7ff ffc0 	bl	17b94 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17c14:	f1b4 3fff 	cmp.w	r4, #4294967295
   17c18:	bf08      	it	eq
   17c1a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   17c1e:	d008      	beq.n	17c32 <pend_locked+0x2a>
   17c20:	462a      	mov	r2, r5
   17c22:	4623      	mov	r3, r4
   17c24:	f106 0018 	add.w	r0, r6, #24
   17c28:	4902      	ldr	r1, [pc, #8]	; (17c34 <pend_locked+0x2c>)
}
   17c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17c2e:	f000 bcad 	b.w	1858c <z_add_timeout>
   17c32:	bd70      	pop	{r4, r5, r6, pc}
   17c34:	00017f3d 	.word	0x00017f3d

00017c38 <z_pend_curr>:
{
   17c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c3c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   17c40:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 17ce8 <z_pend_curr+0xb0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   17c44:	4c23      	ldr	r4, [pc, #140]	; (17cd4 <z_pend_curr+0x9c>)
{
   17c46:	4617      	mov	r7, r2
	pending_current = _current;
   17c48:	4b23      	ldr	r3, [pc, #140]	; (17cd8 <z_pend_curr+0xa0>)
   17c4a:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   17c4e:	42a0      	cmp	r0, r4
{
   17c50:	4605      	mov	r5, r0
   17c52:	460e      	mov	r6, r1
	pending_current = _current;
   17c54:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   17c56:	d10a      	bne.n	17c6e <z_pend_curr+0x36>
   17c58:	4920      	ldr	r1, [pc, #128]	; (17cdc <z_pend_curr+0xa4>)
   17c5a:	4821      	ldr	r0, [pc, #132]	; (17ce0 <z_pend_curr+0xa8>)
   17c5c:	f240 324e 	movw	r2, #846	; 0x34e
   17c60:	f003 fb56 	bl	1b310 <assert_print>
   17c64:	f240 314e 	movw	r1, #846	; 0x34e
   17c68:	481c      	ldr	r0, [pc, #112]	; (17cdc <z_pend_curr+0xa4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c6a:	f003 fb4a 	bl	1b302 <assert_post_action>
	__asm__ volatile(
   17c6e:	f04f 0220 	mov.w	r2, #32
   17c72:	f3ef 8311 	mrs	r3, BASEPRI
   17c76:	f382 8812 	msr	BASEPRI_MAX, r2
   17c7a:	f3bf 8f6f 	isb	sy
   17c7e:	4620      	mov	r0, r4
   17c80:	f7fe fb38 	bl	162f4 <z_spin_lock_valid>
   17c84:	b938      	cbnz	r0, 17c96 <z_pend_curr+0x5e>
   17c86:	4917      	ldr	r1, [pc, #92]	; (17ce4 <z_pend_curr+0xac>)
   17c88:	2294      	movs	r2, #148	; 0x94
   17c8a:	4815      	ldr	r0, [pc, #84]	; (17ce0 <z_pend_curr+0xa8>)
   17c8c:	f003 fb40 	bl	1b310 <assert_print>
   17c90:	2194      	movs	r1, #148	; 0x94
   17c92:	4814      	ldr	r0, [pc, #80]	; (17ce4 <z_pend_curr+0xac>)
   17c94:	e7e9      	b.n	17c6a <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   17c96:	4620      	mov	r0, r4
   17c98:	f7fe fb48 	bl	1632c <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   17c9c:	f8da 0008 	ldr.w	r0, [sl, #8]
   17ca0:	4642      	mov	r2, r8
   17ca2:	464b      	mov	r3, r9
   17ca4:	4639      	mov	r1, r7
   17ca6:	f7ff ffaf 	bl	17c08 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17caa:	4628      	mov	r0, r5
   17cac:	f7fe fb30 	bl	16310 <z_spin_unlock_valid>
   17cb0:	b930      	cbnz	r0, 17cc0 <z_pend_curr+0x88>
   17cb2:	490c      	ldr	r1, [pc, #48]	; (17ce4 <z_pend_curr+0xac>)
   17cb4:	22e1      	movs	r2, #225	; 0xe1
   17cb6:	480a      	ldr	r0, [pc, #40]	; (17ce0 <z_pend_curr+0xa8>)
   17cb8:	f003 fb2a 	bl	1b310 <assert_print>
   17cbc:	21e1      	movs	r1, #225	; 0xe1
   17cbe:	e7e8      	b.n	17c92 <z_pend_curr+0x5a>
   17cc0:	4620      	mov	r0, r4
   17cc2:	f7fe fb25 	bl	16310 <z_spin_unlock_valid>
   17cc6:	2800      	cmp	r0, #0
   17cc8:	d0f3      	beq.n	17cb2 <z_pend_curr+0x7a>
   17cca:	4630      	mov	r0, r6
}
   17ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cd0:	f7f1 bee0 	b.w	9a94 <arch_swap>
   17cd4:	20006fc8 	.word	0x20006fc8
   17cd8:	20006fbc 	.word	0x20006fbc
   17cdc:	0002536f 	.word	0x0002536f
   17ce0:	000221f8 	.word	0x000221f8
   17ce4:	00022232 	.word	0x00022232
   17ce8:	20006f78 	.word	0x20006f78

00017cec <z_set_prio>:
{
   17cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17cf0:	4604      	mov	r4, r0
   17cf2:	460e      	mov	r6, r1
   17cf4:	f04f 0320 	mov.w	r3, #32
   17cf8:	f3ef 8911 	mrs	r9, BASEPRI
   17cfc:	f383 8812 	msr	BASEPRI_MAX, r3
   17d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d04:	4831      	ldr	r0, [pc, #196]	; (17dcc <z_set_prio+0xe0>)
   17d06:	f7fe faf5 	bl	162f4 <z_spin_lock_valid>
   17d0a:	4607      	mov	r7, r0
   17d0c:	b938      	cbnz	r0, 17d1e <z_set_prio+0x32>
   17d0e:	4930      	ldr	r1, [pc, #192]	; (17dd0 <z_set_prio+0xe4>)
   17d10:	2294      	movs	r2, #148	; 0x94
   17d12:	4830      	ldr	r0, [pc, #192]	; (17dd4 <z_set_prio+0xe8>)
   17d14:	f003 fafc 	bl	1b310 <assert_print>
   17d18:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d1a:	482d      	ldr	r0, [pc, #180]	; (17dd0 <z_set_prio+0xe4>)
   17d1c:	e020      	b.n	17d60 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   17d1e:	482b      	ldr	r0, [pc, #172]	; (17dcc <z_set_prio+0xe0>)
   17d20:	f7fe fb04 	bl	1632c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   17d24:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   17d26:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17d28:	06da      	lsls	r2, r3, #27
   17d2a:	d11b      	bne.n	17d64 <z_set_prio+0x78>
	return node->next != NULL;
   17d2c:	69a5      	ldr	r5, [r4, #24]
   17d2e:	b9cd      	cbnz	r5, 17d64 <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   17d30:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 17de0 <z_set_prio+0xf4>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17d38:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17d3a:	4621      	mov	r1, r4
   17d3c:	4640      	mov	r0, r8
   17d3e:	f7ff fe3b 	bl	179b8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   17d42:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   17d44:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   17d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17d4a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17d4c:	4b22      	ldr	r3, [pc, #136]	; (17dd8 <z_set_prio+0xec>)
   17d4e:	429c      	cmp	r4, r3
   17d50:	d115      	bne.n	17d7e <z_set_prio+0x92>
   17d52:	4922      	ldr	r1, [pc, #136]	; (17ddc <z_set_prio+0xf0>)
   17d54:	481f      	ldr	r0, [pc, #124]	; (17dd4 <z_set_prio+0xe8>)
   17d56:	22ba      	movs	r2, #186	; 0xba
   17d58:	f003 fada 	bl	1b310 <assert_print>
   17d5c:	21ba      	movs	r1, #186	; 0xba
   17d5e:	481f      	ldr	r0, [pc, #124]	; (17ddc <z_set_prio+0xf0>)
   17d60:	f003 facf 	bl	1b302 <assert_post_action>
   17d64:	2700      	movs	r7, #0
			thread->base.prio = prio;
   17d66:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d68:	4818      	ldr	r0, [pc, #96]	; (17dcc <z_set_prio+0xe0>)
   17d6a:	f7fe fad1 	bl	16310 <z_spin_unlock_valid>
   17d6e:	bb30      	cbnz	r0, 17dbe <z_set_prio+0xd2>
   17d70:	4917      	ldr	r1, [pc, #92]	; (17dd0 <z_set_prio+0xe4>)
   17d72:	22c2      	movs	r2, #194	; 0xc2
   17d74:	4817      	ldr	r0, [pc, #92]	; (17dd4 <z_set_prio+0xe8>)
   17d76:	f003 facb 	bl	1b310 <assert_print>
   17d7a:	21c2      	movs	r1, #194	; 0xc2
   17d7c:	e7cd      	b.n	17d1a <z_set_prio+0x2e>
	return list->head == list;
   17d7e:	4643      	mov	r3, r8
   17d80:	f853 2924 	ldr.w	r2, [r3], #-36
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d84:	4542      	cmp	r2, r8
   17d86:	bf18      	it	ne
   17d88:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   17d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17d8c:	b925      	cbnz	r5, 17d98 <z_set_prio+0xac>
	node->prev = tail;
   17d8e:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   17d92:	6014      	str	r4, [r2, #0]
	list->tail = node;
   17d94:	629c      	str	r4, [r3, #40]	; 0x28
}
   17d96:	e00a      	b.n	17dae <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   17d98:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   17d9c:	428e      	cmp	r6, r1
   17d9e:	d00a      	beq.n	17db6 <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   17da0:	42b1      	cmp	r1, r6
   17da2:	dd08      	ble.n	17db6 <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   17da4:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   17da6:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   17daa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17dac:	606c      	str	r4, [r5, #4]
			update_cache(1);
   17dae:	2001      	movs	r0, #1
   17db0:	f7ff fbc0 	bl	17534 <update_cache>
   17db4:	e7d8      	b.n	17d68 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   17db6:	42aa      	cmp	r2, r5
   17db8:	d0e9      	beq.n	17d8e <z_set_prio+0xa2>
   17dba:	682d      	ldr	r5, [r5, #0]
   17dbc:	e7e6      	b.n	17d8c <z_set_prio+0xa0>
	__asm__ volatile(
   17dbe:	f389 8811 	msr	BASEPRI, r9
   17dc2:	f3bf 8f6f 	isb	sy
}
   17dc6:	4638      	mov	r0, r7
   17dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17dcc:	20006fc8 	.word	0x20006fc8
   17dd0:	00022232 	.word	0x00022232
   17dd4:	000221f8 	.word	0x000221f8
   17dd8:	20006050 	.word	0x20006050
   17ddc:	0002536f 	.word	0x0002536f
   17de0:	20006f9c 	.word	0x20006f9c

00017de4 <z_impl_k_thread_suspend>:
{
   17de4:	b570      	push	{r4, r5, r6, lr}
   17de6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17de8:	3018      	adds	r0, #24
   17dea:	f000 fc7b 	bl	186e4 <z_abort_timeout>
	__asm__ volatile(
   17dee:	f04f 0320 	mov.w	r3, #32
   17df2:	f3ef 8611 	mrs	r6, BASEPRI
   17df6:	f383 8812 	msr	BASEPRI_MAX, r3
   17dfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17dfe:	481f      	ldr	r0, [pc, #124]	; (17e7c <z_impl_k_thread_suspend+0x98>)
   17e00:	f7fe fa78 	bl	162f4 <z_spin_lock_valid>
   17e04:	b940      	cbnz	r0, 17e18 <z_impl_k_thread_suspend+0x34>
   17e06:	491e      	ldr	r1, [pc, #120]	; (17e80 <z_impl_k_thread_suspend+0x9c>)
   17e08:	2294      	movs	r2, #148	; 0x94
   17e0a:	481e      	ldr	r0, [pc, #120]	; (17e84 <z_impl_k_thread_suspend+0xa0>)
   17e0c:	f003 fa80 	bl	1b310 <assert_print>
   17e10:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e12:	481b      	ldr	r0, [pc, #108]	; (17e80 <z_impl_k_thread_suspend+0x9c>)
   17e14:	f003 fa75 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e18:	4818      	ldr	r0, [pc, #96]	; (17e7c <z_impl_k_thread_suspend+0x98>)
   17e1a:	f7fe fa87 	bl	1632c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17e1e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   17e22:	7b63      	ldrb	r3, [r4, #13]
   17e24:	2a00      	cmp	r2, #0
   17e26:	da06      	bge.n	17e36 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   17e2c:	4621      	mov	r1, r4
   17e2e:	4816      	ldr	r0, [pc, #88]	; (17e88 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17e30:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   17e32:	f7ff fdc1 	bl	179b8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   17e36:	4d15      	ldr	r5, [pc, #84]	; (17e8c <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17e38:	7b63      	ldrb	r3, [r4, #13]
   17e3a:	68a8      	ldr	r0, [r5, #8]
   17e3c:	f043 0310 	orr.w	r3, r3, #16
   17e40:	7363      	strb	r3, [r4, #13]
   17e42:	1b03      	subs	r3, r0, r4
   17e44:	4258      	negs	r0, r3
   17e46:	4158      	adcs	r0, r3
   17e48:	f7ff fb74 	bl	17534 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e4c:	480b      	ldr	r0, [pc, #44]	; (17e7c <z_impl_k_thread_suspend+0x98>)
   17e4e:	f7fe fa5f 	bl	16310 <z_spin_unlock_valid>
   17e52:	b930      	cbnz	r0, 17e62 <z_impl_k_thread_suspend+0x7e>
   17e54:	490a      	ldr	r1, [pc, #40]	; (17e80 <z_impl_k_thread_suspend+0x9c>)
   17e56:	22c2      	movs	r2, #194	; 0xc2
   17e58:	480a      	ldr	r0, [pc, #40]	; (17e84 <z_impl_k_thread_suspend+0xa0>)
   17e5a:	f003 fa59 	bl	1b310 <assert_print>
   17e5e:	21c2      	movs	r1, #194	; 0xc2
   17e60:	e7d7      	b.n	17e12 <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   17e62:	f386 8811 	msr	BASEPRI, r6
   17e66:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17e6a:	68ab      	ldr	r3, [r5, #8]
   17e6c:	42a3      	cmp	r3, r4
   17e6e:	d103      	bne.n	17e78 <z_impl_k_thread_suspend+0x94>
}
   17e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17e74:	f007 b973 	b.w	1f15e <z_reschedule_unlocked>
}
   17e78:	bd70      	pop	{r4, r5, r6, pc}
   17e7a:	bf00      	nop
   17e7c:	20006fc8 	.word	0x20006fc8
   17e80:	00022232 	.word	0x00022232
   17e84:	000221f8 	.word	0x000221f8
   17e88:	20006f9c 	.word	0x20006f9c
   17e8c:	20006f78 	.word	0x20006f78

00017e90 <unpend_thread_no_timeout>:
{
   17e90:	b510      	push	{r4, lr}
   17e92:	4604      	mov	r4, r0
   17e94:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   17e96:	b950      	cbnz	r0, 17eae <unpend_thread_no_timeout+0x1e>
   17e98:	490a      	ldr	r1, [pc, #40]	; (17ec4 <unpend_thread_no_timeout+0x34>)
   17e9a:	480b      	ldr	r0, [pc, #44]	; (17ec8 <unpend_thread_no_timeout+0x38>)
   17e9c:	f240 22d6 	movw	r2, #726	; 0x2d6
   17ea0:	f003 fa36 	bl	1b310 <assert_print>
   17ea4:	f240 21d6 	movw	r1, #726	; 0x2d6
   17ea8:	4806      	ldr	r0, [pc, #24]	; (17ec4 <unpend_thread_no_timeout+0x34>)
   17eaa:	f003 fa2a 	bl	1b302 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   17eae:	4621      	mov	r1, r4
   17eb0:	f7ff fd82 	bl	179b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17eb4:	7b63      	ldrb	r3, [r4, #13]
   17eb6:	f023 0302 	bic.w	r3, r3, #2
   17eba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   17ebc:	2300      	movs	r3, #0
   17ebe:	60a3      	str	r3, [r4, #8]
}
   17ec0:	bd10      	pop	{r4, pc}
   17ec2:	bf00      	nop
   17ec4:	0002536f 	.word	0x0002536f
   17ec8:	000221f8 	.word	0x000221f8

00017ecc <z_unpend_thread>:
{
   17ecc:	b538      	push	{r3, r4, r5, lr}
   17ece:	4604      	mov	r4, r0
	__asm__ volatile(
   17ed0:	f04f 0320 	mov.w	r3, #32
   17ed4:	f3ef 8511 	mrs	r5, BASEPRI
   17ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   17edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ee0:	4813      	ldr	r0, [pc, #76]	; (17f30 <z_unpend_thread+0x64>)
   17ee2:	f7fe fa07 	bl	162f4 <z_spin_lock_valid>
   17ee6:	b940      	cbnz	r0, 17efa <z_unpend_thread+0x2e>
   17ee8:	4912      	ldr	r1, [pc, #72]	; (17f34 <z_unpend_thread+0x68>)
   17eea:	2294      	movs	r2, #148	; 0x94
   17eec:	4812      	ldr	r0, [pc, #72]	; (17f38 <z_unpend_thread+0x6c>)
   17eee:	f003 fa0f 	bl	1b310 <assert_print>
   17ef2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ef4:	480f      	ldr	r0, [pc, #60]	; (17f34 <z_unpend_thread+0x68>)
   17ef6:	f003 fa04 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17efa:	480d      	ldr	r0, [pc, #52]	; (17f30 <z_unpend_thread+0x64>)
   17efc:	f7fe fa16 	bl	1632c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   17f00:	4620      	mov	r0, r4
   17f02:	f7ff ffc5 	bl	17e90 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f06:	480a      	ldr	r0, [pc, #40]	; (17f30 <z_unpend_thread+0x64>)
   17f08:	f7fe fa02 	bl	16310 <z_spin_unlock_valid>
   17f0c:	b930      	cbnz	r0, 17f1c <z_unpend_thread+0x50>
   17f0e:	4909      	ldr	r1, [pc, #36]	; (17f34 <z_unpend_thread+0x68>)
   17f10:	22c2      	movs	r2, #194	; 0xc2
   17f12:	4809      	ldr	r0, [pc, #36]	; (17f38 <z_unpend_thread+0x6c>)
   17f14:	f003 f9fc 	bl	1b310 <assert_print>
   17f18:	21c2      	movs	r1, #194	; 0xc2
   17f1a:	e7eb      	b.n	17ef4 <z_unpend_thread+0x28>
	__asm__ volatile(
   17f1c:	f385 8811 	msr	BASEPRI, r5
   17f20:	f3bf 8f6f 	isb	sy
   17f24:	f104 0018 	add.w	r0, r4, #24
}
   17f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17f2c:	f000 bbda 	b.w	186e4 <z_abort_timeout>
   17f30:	20006fc8 	.word	0x20006fc8
   17f34:	00022232 	.word	0x00022232
   17f38:	000221f8 	.word	0x000221f8

00017f3c <z_thread_timeout>:
{
   17f3c:	b570      	push	{r4, r5, r6, lr}
   17f3e:	4604      	mov	r4, r0
	__asm__ volatile(
   17f40:	f04f 0320 	mov.w	r3, #32
   17f44:	f3ef 8611 	mrs	r6, BASEPRI
   17f48:	f383 8812 	msr	BASEPRI_MAX, r3
   17f4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f50:	481a      	ldr	r0, [pc, #104]	; (17fbc <z_thread_timeout+0x80>)
   17f52:	f7fe f9cf 	bl	162f4 <z_spin_lock_valid>
   17f56:	b940      	cbnz	r0, 17f6a <z_thread_timeout+0x2e>
   17f58:	4919      	ldr	r1, [pc, #100]	; (17fc0 <z_thread_timeout+0x84>)
   17f5a:	2294      	movs	r2, #148	; 0x94
   17f5c:	4819      	ldr	r0, [pc, #100]	; (17fc4 <z_thread_timeout+0x88>)
   17f5e:	f003 f9d7 	bl	1b310 <assert_print>
   17f62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f64:	4816      	ldr	r0, [pc, #88]	; (17fc0 <z_thread_timeout+0x84>)
   17f66:	f003 f9cc 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f6a:	4814      	ldr	r0, [pc, #80]	; (17fbc <z_thread_timeout+0x80>)
   17f6c:	f7fe f9de 	bl	1632c <z_spin_lock_set_owner>
		if (!killed) {
   17f70:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   17f74:	f013 0f28 	tst.w	r3, #40	; 0x28
   17f78:	d110      	bne.n	17f9c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   17f7a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   17f7e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   17f82:	b113      	cbz	r3, 17f8a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   17f84:	4628      	mov	r0, r5
   17f86:	f7ff ff83 	bl	17e90 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17f8a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   17f8e:	4628      	mov	r0, r5
   17f90:	f023 0314 	bic.w	r3, r3, #20
   17f94:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17f98:	f7ff faf8 	bl	1758c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f9c:	4807      	ldr	r0, [pc, #28]	; (17fbc <z_thread_timeout+0x80>)
   17f9e:	f7fe f9b7 	bl	16310 <z_spin_unlock_valid>
   17fa2:	b930      	cbnz	r0, 17fb2 <z_thread_timeout+0x76>
   17fa4:	4906      	ldr	r1, [pc, #24]	; (17fc0 <z_thread_timeout+0x84>)
   17fa6:	22c2      	movs	r2, #194	; 0xc2
   17fa8:	4806      	ldr	r0, [pc, #24]	; (17fc4 <z_thread_timeout+0x88>)
   17faa:	f003 f9b1 	bl	1b310 <assert_print>
   17fae:	21c2      	movs	r1, #194	; 0xc2
   17fb0:	e7d8      	b.n	17f64 <z_thread_timeout+0x28>
	__asm__ volatile(
   17fb2:	f386 8811 	msr	BASEPRI, r6
   17fb6:	f3bf 8f6f 	isb	sy
}
   17fba:	bd70      	pop	{r4, r5, r6, pc}
   17fbc:	20006fc8 	.word	0x20006fc8
   17fc0:	00022232 	.word	0x00022232
   17fc4:	000221f8 	.word	0x000221f8

00017fc8 <z_unpend_first_thread>:
{
   17fc8:	b570      	push	{r4, r5, r6, lr}
   17fca:	4605      	mov	r5, r0
	__asm__ volatile(
   17fcc:	f04f 0320 	mov.w	r3, #32
   17fd0:	f3ef 8611 	mrs	r6, BASEPRI
   17fd4:	f383 8812 	msr	BASEPRI_MAX, r3
   17fd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17fdc:	4816      	ldr	r0, [pc, #88]	; (18038 <z_unpend_first_thread+0x70>)
   17fde:	f7fe f989 	bl	162f4 <z_spin_lock_valid>
   17fe2:	b940      	cbnz	r0, 17ff6 <z_unpend_first_thread+0x2e>
   17fe4:	4915      	ldr	r1, [pc, #84]	; (1803c <z_unpend_first_thread+0x74>)
   17fe6:	2294      	movs	r2, #148	; 0x94
   17fe8:	4815      	ldr	r0, [pc, #84]	; (18040 <z_unpend_first_thread+0x78>)
   17fea:	f003 f991 	bl	1b310 <assert_print>
   17fee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ff0:	4812      	ldr	r0, [pc, #72]	; (1803c <z_unpend_first_thread+0x74>)
   17ff2:	f003 f986 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ff6:	4810      	ldr	r0, [pc, #64]	; (18038 <z_unpend_first_thread+0x70>)
   17ff8:	f7fe f998 	bl	1632c <z_spin_lock_set_owner>
	return list->head == list;
   17ffc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ffe:	42a5      	cmp	r5, r4
   18000:	d012      	beq.n	18028 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   18002:	b134      	cbz	r4, 18012 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   18004:	4620      	mov	r0, r4
   18006:	f7ff ff43 	bl	17e90 <unpend_thread_no_timeout>
   1800a:	f104 0018 	add.w	r0, r4, #24
   1800e:	f000 fb69 	bl	186e4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18012:	4809      	ldr	r0, [pc, #36]	; (18038 <z_unpend_first_thread+0x70>)
   18014:	f7fe f97c 	bl	16310 <z_spin_unlock_valid>
   18018:	b940      	cbnz	r0, 1802c <z_unpend_first_thread+0x64>
   1801a:	4908      	ldr	r1, [pc, #32]	; (1803c <z_unpend_first_thread+0x74>)
   1801c:	22c2      	movs	r2, #194	; 0xc2
   1801e:	4808      	ldr	r0, [pc, #32]	; (18040 <z_unpend_first_thread+0x78>)
   18020:	f003 f976 	bl	1b310 <assert_print>
   18024:	21c2      	movs	r1, #194	; 0xc2
   18026:	e7e3      	b.n	17ff0 <z_unpend_first_thread+0x28>
   18028:	2400      	movs	r4, #0
   1802a:	e7f2      	b.n	18012 <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   1802c:	f386 8811 	msr	BASEPRI, r6
   18030:	f3bf 8f6f 	isb	sy
}
   18034:	4620      	mov	r0, r4
   18036:	bd70      	pop	{r4, r5, r6, pc}
   18038:	20006fc8 	.word	0x20006fc8
   1803c:	00022232 	.word	0x00022232
   18040:	000221f8 	.word	0x000221f8

00018044 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18044:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   18046:	4b04      	ldr	r3, [pc, #16]	; (18058 <z_sched_init+0x14>)
   18048:	4608      	mov	r0, r1
   1804a:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   1804e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   18052:	f7ff bae3 	b.w	1761c <k_sched_time_slice_set>
   18056:	bf00      	nop
   18058:	20006f78 	.word	0x20006f78

0001805c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1805e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18062:	b14b      	cbz	r3, 18078 <z_impl_k_yield+0x1c>
   18064:	4935      	ldr	r1, [pc, #212]	; (1813c <z_impl_k_yield+0xe0>)
   18066:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   1806a:	4835      	ldr	r0, [pc, #212]	; (18140 <z_impl_k_yield+0xe4>)
   1806c:	f003 f950 	bl	1b310 <assert_print>
   18070:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18074:	4831      	ldr	r0, [pc, #196]	; (1813c <z_impl_k_yield+0xe0>)
   18076:	e012      	b.n	1809e <z_impl_k_yield+0x42>
	__asm__ volatile(
   18078:	f04f 0320 	mov.w	r3, #32
   1807c:	f3ef 8611 	mrs	r6, BASEPRI
   18080:	f383 8812 	msr	BASEPRI_MAX, r3
   18084:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18088:	482e      	ldr	r0, [pc, #184]	; (18144 <z_impl_k_yield+0xe8>)
   1808a:	f7fe f933 	bl	162f4 <z_spin_lock_valid>
   1808e:	b940      	cbnz	r0, 180a2 <z_impl_k_yield+0x46>
   18090:	492d      	ldr	r1, [pc, #180]	; (18148 <z_impl_k_yield+0xec>)
   18092:	2294      	movs	r2, #148	; 0x94
   18094:	482a      	ldr	r0, [pc, #168]	; (18140 <z_impl_k_yield+0xe4>)
   18096:	f003 f93b 	bl	1b310 <assert_print>
   1809a:	2194      	movs	r1, #148	; 0x94
   1809c:	482a      	ldr	r0, [pc, #168]	; (18148 <z_impl_k_yield+0xec>)
   1809e:	f003 f930 	bl	1b302 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   180a2:	4c2a      	ldr	r4, [pc, #168]	; (1814c <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   180a4:	4827      	ldr	r0, [pc, #156]	; (18144 <z_impl_k_yield+0xe8>)
   180a6:	f7fe f941 	bl	1632c <z_spin_lock_set_owner>
   180aa:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   180ac:	f104 0524 	add.w	r5, r4, #36	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
   180b0:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   180b2:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   180b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   180b8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   180ba:	f7ff fc7d 	bl	179b8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   180be:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   180c0:	7b5a      	ldrb	r2, [r3, #13]
   180c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   180c6:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   180c8:	4a21      	ldr	r2, [pc, #132]	; (18150 <z_impl_k_yield+0xf4>)
   180ca:	4293      	cmp	r3, r2
   180cc:	d106      	bne.n	180dc <z_impl_k_yield+0x80>
   180ce:	491b      	ldr	r1, [pc, #108]	; (1813c <z_impl_k_yield+0xe0>)
   180d0:	22ba      	movs	r2, #186	; 0xba
   180d2:	481b      	ldr	r0, [pc, #108]	; (18140 <z_impl_k_yield+0xe4>)
   180d4:	f003 f91c 	bl	1b310 <assert_print>
   180d8:	21ba      	movs	r1, #186	; 0xba
   180da:	e7cb      	b.n	18074 <z_impl_k_yield+0x18>
	return list->head == list;
   180dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return (node == list->tail) ? NULL : node->next;
   180de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   180e0:	42aa      	cmp	r2, r5
   180e2:	bf08      	it	eq
   180e4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   180e6:	b922      	cbnz	r2, 180f2 <z_impl_k_yield+0x96>
	node->prev = tail;
   180e8:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   180ec:	600b      	str	r3, [r1, #0]
	list->tail = node;
   180ee:	62a3      	str	r3, [r4, #40]	; 0x28
}
   180f0:	e00c      	b.n	1810c <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   180f2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   180f6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   180fa:	42b8      	cmp	r0, r7
   180fc:	d014      	beq.n	18128 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   180fe:	4287      	cmp	r7, r0
   18100:	dd12      	ble.n	18128 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   18102:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18104:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   18108:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1810a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1810c:	2001      	movs	r0, #1
   1810e:	f7ff fa11 	bl	17534 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18112:	480c      	ldr	r0, [pc, #48]	; (18144 <z_impl_k_yield+0xe8>)
   18114:	f7fe f8fc 	bl	16310 <z_spin_unlock_valid>
   18118:	b950      	cbnz	r0, 18130 <z_impl_k_yield+0xd4>
   1811a:	490b      	ldr	r1, [pc, #44]	; (18148 <z_impl_k_yield+0xec>)
   1811c:	22e1      	movs	r2, #225	; 0xe1
   1811e:	4808      	ldr	r0, [pc, #32]	; (18140 <z_impl_k_yield+0xe4>)
   18120:	f003 f8f6 	bl	1b310 <assert_print>
   18124:	21e1      	movs	r1, #225	; 0xe1
   18126:	e7b9      	b.n	1809c <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   18128:	428a      	cmp	r2, r1
   1812a:	d0dd      	beq.n	180e8 <z_impl_k_yield+0x8c>
   1812c:	6812      	ldr	r2, [r2, #0]
   1812e:	e7da      	b.n	180e6 <z_impl_k_yield+0x8a>
   18130:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   18132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18136:	f7f1 bcad 	b.w	9a94 <arch_swap>
   1813a:	bf00      	nop
   1813c:	0002536f 	.word	0x0002536f
   18140:	000221f8 	.word	0x000221f8
   18144:	20006fc8 	.word	0x20006fc8
   18148:	00022232 	.word	0x00022232
   1814c:	20006f78 	.word	0x20006f78
   18150:	20006050 	.word	0x20006050

00018154 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   18154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18158:	4605      	mov	r5, r0
   1815a:	460e      	mov	r6, r1
   1815c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18160:	b14b      	cbz	r3, 18176 <z_tick_sleep+0x22>
   18162:	4936      	ldr	r1, [pc, #216]	; (1823c <z_tick_sleep+0xe8>)
   18164:	f240 528c 	movw	r2, #1420	; 0x58c
   18168:	4835      	ldr	r0, [pc, #212]	; (18240 <z_tick_sleep+0xec>)
   1816a:	f003 f8d1 	bl	1b310 <assert_print>
   1816e:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   18172:	4832      	ldr	r0, [pc, #200]	; (1823c <z_tick_sleep+0xe8>)
   18174:	e020      	b.n	181b8 <z_tick_sleep+0x64>
	if (ticks == 0) {
   18176:	ea50 0301 	orrs.w	r3, r0, r1
   1817a:	d103      	bne.n	18184 <z_tick_sleep+0x30>
	z_impl_k_yield();
   1817c:	f7ff ff6e 	bl	1805c <z_impl_k_yield>
		return 0;
   18180:	2000      	movs	r0, #0
   18182:	e058      	b.n	18236 <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   18184:	1c82      	adds	r2, r0, #2
   18186:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1818a:	db17      	blt.n	181bc <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1818c:	f007 f801 	bl	1f192 <sys_clock_tick_get_32>
   18190:	182c      	adds	r4, r5, r0
   18192:	f04f 0320 	mov.w	r3, #32
   18196:	f3ef 8811 	mrs	r8, BASEPRI
   1819a:	f383 8812 	msr	BASEPRI_MAX, r3
   1819e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181a2:	4828      	ldr	r0, [pc, #160]	; (18244 <z_tick_sleep+0xf0>)
   181a4:	f7fe f8a6 	bl	162f4 <z_spin_lock_valid>
   181a8:	b960      	cbnz	r0, 181c4 <z_tick_sleep+0x70>
   181aa:	4927      	ldr	r1, [pc, #156]	; (18248 <z_tick_sleep+0xf4>)
   181ac:	2294      	movs	r2, #148	; 0x94
   181ae:	4824      	ldr	r0, [pc, #144]	; (18240 <z_tick_sleep+0xec>)
   181b0:	f003 f8ae 	bl	1b310 <assert_print>
   181b4:	2194      	movs	r1, #148	; 0x94
   181b6:	4824      	ldr	r0, [pc, #144]	; (18248 <z_tick_sleep+0xf4>)
   181b8:	f003 f8a3 	bl	1b302 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   181bc:	f06f 0401 	mvn.w	r4, #1
   181c0:	1a24      	subs	r4, r4, r0
   181c2:	e7e6      	b.n	18192 <z_tick_sleep+0x3e>
	pending_current = _current;
   181c4:	4f21      	ldr	r7, [pc, #132]	; (1824c <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   181c6:	481f      	ldr	r0, [pc, #124]	; (18244 <z_tick_sleep+0xf0>)
   181c8:	f7fe f8b0 	bl	1632c <z_spin_lock_set_owner>
   181cc:	68b8      	ldr	r0, [r7, #8]
   181ce:	4b20      	ldr	r3, [pc, #128]	; (18250 <z_tick_sleep+0xfc>)
   181d0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   181d2:	f7ff fcc3 	bl	17b5c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   181d6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   181d8:	462a      	mov	r2, r5
   181da:	4633      	mov	r3, r6
   181dc:	3018      	adds	r0, #24
   181de:	491d      	ldr	r1, [pc, #116]	; (18254 <z_tick_sleep+0x100>)
   181e0:	f000 f9d4 	bl	1858c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   181e4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181e6:	4817      	ldr	r0, [pc, #92]	; (18244 <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   181e8:	7b53      	ldrb	r3, [r2, #13]
   181ea:	f043 0310 	orr.w	r3, r3, #16
   181ee:	7353      	strb	r3, [r2, #13]
   181f0:	f7fe f88e 	bl	16310 <z_spin_unlock_valid>
   181f4:	b930      	cbnz	r0, 18204 <z_tick_sleep+0xb0>
   181f6:	4914      	ldr	r1, [pc, #80]	; (18248 <z_tick_sleep+0xf4>)
   181f8:	22e1      	movs	r2, #225	; 0xe1
   181fa:	4811      	ldr	r0, [pc, #68]	; (18240 <z_tick_sleep+0xec>)
   181fc:	f003 f888 	bl	1b310 <assert_print>
   18200:	21e1      	movs	r1, #225	; 0xe1
   18202:	e7d8      	b.n	181b6 <z_tick_sleep+0x62>
   18204:	4640      	mov	r0, r8
   18206:	f7f1 fc45 	bl	9a94 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1820a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1820c:	7b5b      	ldrb	r3, [r3, #13]
   1820e:	06db      	lsls	r3, r3, #27
   18210:	d508      	bpl.n	18224 <z_tick_sleep+0xd0>
   18212:	490a      	ldr	r1, [pc, #40]	; (1823c <z_tick_sleep+0xe8>)
   18214:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
   18218:	4809      	ldr	r0, [pc, #36]	; (18240 <z_tick_sleep+0xec>)
   1821a:	f003 f879 	bl	1b310 <assert_print>
   1821e:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   18222:	e7a6      	b.n	18172 <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   18224:	f006 ffb5 	bl	1f192 <sys_clock_tick_get_32>
   18228:	1a20      	subs	r0, r4, r0
   1822a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1822e:	2801      	cmp	r0, #1
   18230:	f173 0300 	sbcs.w	r3, r3, #0
   18234:	dba4      	blt.n	18180 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   18236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1823a:	bf00      	nop
   1823c:	0002536f 	.word	0x0002536f
   18240:	000221f8 	.word	0x000221f8
   18244:	20006fc8 	.word	0x20006fc8
   18248:	00022232 	.word	0x00022232
   1824c:	20006f78 	.word	0x20006f78
   18250:	20006fbc 	.word	0x20006fbc
   18254:	00017f3d 	.word	0x00017f3d

00018258 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   18258:	b508      	push	{r3, lr}
   1825a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1825e:	b153      	cbz	r3, 18276 <z_impl_k_sleep+0x1e>
   18260:	4910      	ldr	r1, [pc, #64]	; (182a4 <z_impl_k_sleep+0x4c>)
   18262:	4811      	ldr	r0, [pc, #68]	; (182a8 <z_impl_k_sleep+0x50>)
   18264:	f240 52b7 	movw	r2, #1463	; 0x5b7
   18268:	f003 f852 	bl	1b310 <assert_print>
   1826c:	f240 51b7 	movw	r1, #1463	; 0x5b7
   18270:	480c      	ldr	r0, [pc, #48]	; (182a4 <z_impl_k_sleep+0x4c>)
   18272:	f003 f846 	bl	1b302 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18276:	f1b1 3fff 	cmp.w	r1, #4294967295
   1827a:	bf08      	it	eq
   1827c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   18280:	d106      	bne.n	18290 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   18282:	4b0a      	ldr	r3, [pc, #40]	; (182ac <z_impl_k_sleep+0x54>)
   18284:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18286:	f7ff fdad 	bl	17de4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1828a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1828e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   18290:	f7ff ff60 	bl	18154 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   18294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18298:	fb80 0303 	smull	r0, r3, r0, r3
   1829c:	0bc0      	lsrs	r0, r0, #15
   1829e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   182a2:	e7f4      	b.n	1828e <z_impl_k_sleep+0x36>
   182a4:	0002536f 	.word	0x0002536f
   182a8:	000221f8 	.word	0x000221f8
   182ac:	20006f78 	.word	0x20006f78

000182b0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   182b0:	4b01      	ldr	r3, [pc, #4]	; (182b8 <z_impl_z_current_get+0x8>)
   182b2:	6898      	ldr	r0, [r3, #8]
   182b4:	4770      	bx	lr
   182b6:	bf00      	nop
   182b8:	20006f78 	.word	0x20006f78

000182bc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   182bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182c0:	4604      	mov	r4, r0
   182c2:	f04f 0320 	mov.w	r3, #32
   182c6:	f3ef 8611 	mrs	r6, BASEPRI
   182ca:	f383 8812 	msr	BASEPRI_MAX, r3
   182ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   182d2:	4845      	ldr	r0, [pc, #276]	; (183e8 <z_thread_abort+0x12c>)
   182d4:	f7fe f80e 	bl	162f4 <z_spin_lock_valid>
   182d8:	b940      	cbnz	r0, 182ec <z_thread_abort+0x30>
   182da:	4944      	ldr	r1, [pc, #272]	; (183ec <z_thread_abort+0x130>)
   182dc:	2294      	movs	r2, #148	; 0x94
   182de:	4844      	ldr	r0, [pc, #272]	; (183f0 <z_thread_abort+0x134>)
   182e0:	f003 f816 	bl	1b310 <assert_print>
   182e4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182e6:	4841      	ldr	r0, [pc, #260]	; (183ec <z_thread_abort+0x130>)
   182e8:	f003 f80b 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   182ec:	483e      	ldr	r0, [pc, #248]	; (183e8 <z_thread_abort+0x12c>)
   182ee:	f7fe f81d 	bl	1632c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   182f2:	7b23      	ldrb	r3, [r4, #12]
   182f4:	07d9      	lsls	r1, r3, #31
   182f6:	d518      	bpl.n	1832a <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182f8:	483b      	ldr	r0, [pc, #236]	; (183e8 <z_thread_abort+0x12c>)
   182fa:	f7fe f809 	bl	16310 <z_spin_unlock_valid>
   182fe:	b930      	cbnz	r0, 1830e <z_thread_abort+0x52>
   18300:	493a      	ldr	r1, [pc, #232]	; (183ec <z_thread_abort+0x130>)
   18302:	22c2      	movs	r2, #194	; 0xc2
   18304:	483a      	ldr	r0, [pc, #232]	; (183f0 <z_thread_abort+0x134>)
   18306:	f003 f803 	bl	1b310 <assert_print>
   1830a:	21c2      	movs	r1, #194	; 0xc2
   1830c:	e7eb      	b.n	182e6 <z_thread_abort+0x2a>
	__asm__ volatile(
   1830e:	f386 8811 	msr	BASEPRI, r6
   18312:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   18316:	4937      	ldr	r1, [pc, #220]	; (183f4 <z_thread_abort+0x138>)
   18318:	f240 62c3 	movw	r2, #1731	; 0x6c3
   1831c:	4834      	ldr	r0, [pc, #208]	; (183f0 <z_thread_abort+0x134>)
   1831e:	f002 fff7 	bl	1b310 <assert_print>
   18322:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   18326:	4833      	ldr	r0, [pc, #204]	; (183f4 <z_thread_abort+0x138>)
   18328:	e7de      	b.n	182e8 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1832a:	7b63      	ldrb	r3, [r4, #13]
   1832c:	071a      	lsls	r2, r3, #28
   1832e:	d50a      	bpl.n	18346 <z_thread_abort+0x8a>
   18330:	482d      	ldr	r0, [pc, #180]	; (183e8 <z_thread_abort+0x12c>)
   18332:	f7fd ffed 	bl	16310 <z_spin_unlock_valid>
   18336:	2800      	cmp	r0, #0
   18338:	d0e2      	beq.n	18300 <z_thread_abort+0x44>
   1833a:	f386 8811 	msr	BASEPRI, r6
   1833e:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   18342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18346:	f023 0220 	bic.w	r2, r3, #32
   1834a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1834e:	09d2      	lsrs	r2, r2, #7
   18350:	d127      	bne.n	183a2 <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   18352:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   18354:	68a3      	ldr	r3, [r4, #8]
   18356:	b113      	cbz	r3, 1835e <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   18358:	4620      	mov	r0, r4
   1835a:	f7ff fd99 	bl	17e90 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1835e:	f104 0018 	add.w	r0, r4, #24
   18362:	f000 f9bf 	bl	186e4 <z_abort_timeout>
   18366:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1836a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   1836e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18370:	42bd      	cmp	r5, r7
   18372:	d000      	beq.n	18376 <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   18374:	b9fd      	cbnz	r5, 183b6 <z_thread_abort+0xfa>
		update_cache(1);
   18376:	2001      	movs	r0, #1
   18378:	f7ff f8dc 	bl	17534 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1837c:	4b1e      	ldr	r3, [pc, #120]	; (183f8 <z_thread_abort+0x13c>)
   1837e:	689b      	ldr	r3, [r3, #8]
   18380:	42a3      	cmp	r3, r4
   18382:	d1d5      	bne.n	18330 <z_thread_abort+0x74>
   18384:	f3ef 8305 	mrs	r3, IPSR
   18388:	2b00      	cmp	r3, #0
   1838a:	d1d1      	bne.n	18330 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1838c:	4816      	ldr	r0, [pc, #88]	; (183e8 <z_thread_abort+0x12c>)
   1838e:	f7fd ffbf 	bl	16310 <z_spin_unlock_valid>
   18392:	b9e8      	cbnz	r0, 183d0 <z_thread_abort+0x114>
   18394:	4915      	ldr	r1, [pc, #84]	; (183ec <z_thread_abort+0x130>)
   18396:	22e1      	movs	r2, #225	; 0xe1
   18398:	4815      	ldr	r0, [pc, #84]	; (183f0 <z_thread_abort+0x134>)
   1839a:	f002 ffb9 	bl	1b310 <assert_print>
   1839e:	21e1      	movs	r1, #225	; 0xe1
   183a0:	e7a1      	b.n	182e6 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   183a2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   183a6:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   183aa:	4621      	mov	r1, r4
   183ac:	4813      	ldr	r0, [pc, #76]	; (183fc <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   183ae:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   183b0:	f7ff fb02 	bl	179b8 <z_priq_dumb_remove>
}
   183b4:	e7ce      	b.n	18354 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   183b6:	4628      	mov	r0, r5
   183b8:	f7ff fd6a 	bl	17e90 <unpend_thread_no_timeout>
   183bc:	f105 0018 	add.w	r0, r5, #24
   183c0:	f000 f990 	bl	186e4 <z_abort_timeout>
		ready_thread(thread);
   183c4:	4628      	mov	r0, r5
   183c6:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
   183ca:	f7ff f8df 	bl	1758c <ready_thread>
   183ce:	e7ce      	b.n	1836e <z_thread_abort+0xb2>
   183d0:	4630      	mov	r0, r6
   183d2:	f7f1 fb5f 	bl	9a94 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   183d6:	4907      	ldr	r1, [pc, #28]	; (183f4 <z_thread_abort+0x138>)
   183d8:	f240 62f2 	movw	r2, #1778	; 0x6f2
   183dc:	4804      	ldr	r0, [pc, #16]	; (183f0 <z_thread_abort+0x134>)
   183de:	f002 ff97 	bl	1b310 <assert_print>
   183e2:	f240 61f2 	movw	r1, #1778	; 0x6f2
   183e6:	e79e      	b.n	18326 <z_thread_abort+0x6a>
   183e8:	20006fc8 	.word	0x20006fc8
   183ec:	00022232 	.word	0x00022232
   183f0:	000221f8 	.word	0x000221f8
   183f4:	0002536f 	.word	0x0002536f
   183f8:	20006f78 	.word	0x20006f78
   183fc:	20006f9c 	.word	0x20006f9c

00018400 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   18400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18404:	4606      	mov	r6, r0
   18406:	4688      	mov	r8, r1
   18408:	4617      	mov	r7, r2
	__asm__ volatile(
   1840a:	f04f 0320 	mov.w	r3, #32
   1840e:	f3ef 8911 	mrs	r9, BASEPRI
   18412:	f383 8812 	msr	BASEPRI_MAX, r3
   18416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1841a:	481c      	ldr	r0, [pc, #112]	; (1848c <z_sched_wake+0x8c>)
   1841c:	f7fd ff6a 	bl	162f4 <z_spin_lock_valid>
   18420:	4605      	mov	r5, r0
   18422:	b940      	cbnz	r0, 18436 <z_sched_wake+0x36>
   18424:	491a      	ldr	r1, [pc, #104]	; (18490 <z_sched_wake+0x90>)
   18426:	2294      	movs	r2, #148	; 0x94
   18428:	481a      	ldr	r0, [pc, #104]	; (18494 <z_sched_wake+0x94>)
   1842a:	f002 ff71 	bl	1b310 <assert_print>
   1842e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18430:	4817      	ldr	r0, [pc, #92]	; (18490 <z_sched_wake+0x90>)
   18432:	f002 ff66 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   18436:	4815      	ldr	r0, [pc, #84]	; (1848c <z_sched_wake+0x8c>)
   18438:	f7fd ff78 	bl	1632c <z_spin_lock_set_owner>
	return list->head == list;
   1843c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1843e:	42a6      	cmp	r6, r4
   18440:	d018      	beq.n	18474 <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   18442:	b1cc      	cbz	r4, 18478 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   18444:	4620      	mov	r0, r4
   18446:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
	thread->base.swap_data = data;
   1844a:	6167      	str	r7, [r4, #20]
   1844c:	f7ff fd20 	bl	17e90 <unpend_thread_no_timeout>
   18450:	f104 0018 	add.w	r0, r4, #24
   18454:	f000 f946 	bl	186e4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   18458:	4620      	mov	r0, r4
   1845a:	f7ff f897 	bl	1758c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1845e:	480b      	ldr	r0, [pc, #44]	; (1848c <z_sched_wake+0x8c>)
   18460:	f7fd ff56 	bl	16310 <z_spin_unlock_valid>
   18464:	b950      	cbnz	r0, 1847c <z_sched_wake+0x7c>
   18466:	490a      	ldr	r1, [pc, #40]	; (18490 <z_sched_wake+0x90>)
   18468:	22c2      	movs	r2, #194	; 0xc2
   1846a:	480a      	ldr	r0, [pc, #40]	; (18494 <z_sched_wake+0x94>)
   1846c:	f002 ff50 	bl	1b310 <assert_print>
   18470:	21c2      	movs	r1, #194	; 0xc2
   18472:	e7dd      	b.n	18430 <z_sched_wake+0x30>
	bool ret = false;
   18474:	2500      	movs	r5, #0
   18476:	e7f2      	b.n	1845e <z_sched_wake+0x5e>
   18478:	4625      	mov	r5, r4
   1847a:	e7f0      	b.n	1845e <z_sched_wake+0x5e>
	__asm__ volatile(
   1847c:	f389 8811 	msr	BASEPRI, r9
   18480:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   18484:	4628      	mov	r0, r5
   18486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1848a:	bf00      	nop
   1848c:	20006fc8 	.word	0x20006fc8
   18490:	00022232 	.word	0x00022232
   18494:	000221f8 	.word	0x000221f8

00018498 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   18498:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1849a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1849e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   184a0:	e9cd 6700 	strd	r6, r7, [sp]
   184a4:	f7ff fbc8 	bl	17c38 <z_pend_curr>

	if (data != NULL) {
   184a8:	b11c      	cbz	r4, 184b2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   184aa:	4b03      	ldr	r3, [pc, #12]	; (184b8 <z_sched_wait+0x20>)
   184ac:	689b      	ldr	r3, [r3, #8]
   184ae:	695b      	ldr	r3, [r3, #20]
   184b0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   184b2:	b002      	add	sp, #8
   184b4:	bdd0      	pop	{r4, r6, r7, pc}
   184b6:	bf00      	nop
   184b8:	20006f78 	.word	0x20006f78

000184bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   184bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   184be:	4806      	ldr	r0, [pc, #24]	; (184d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   184c0:	4a06      	ldr	r2, [pc, #24]	; (184dc <z_data_copy+0x20>)
   184c2:	4907      	ldr	r1, [pc, #28]	; (184e0 <z_data_copy+0x24>)
   184c4:	1a12      	subs	r2, r2, r0
   184c6:	f006 fd20 	bl	1ef0a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   184ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   184ce:	4a05      	ldr	r2, [pc, #20]	; (184e4 <z_data_copy+0x28>)
   184d0:	4905      	ldr	r1, [pc, #20]	; (184e8 <z_data_copy+0x2c>)
   184d2:	4806      	ldr	r0, [pc, #24]	; (184ec <z_data_copy+0x30>)
   184d4:	f006 bd19 	b.w	1ef0a <z_early_memcpy>
   184d8:	20000000 	.word	0x20000000
   184dc:	20000a7c 	.word	0x20000a7c
   184e0:	00025578 	.word	0x00025578
   184e4:	00000000 	.word	0x00000000
   184e8:	00025578 	.word	0x00025578
   184ec:	20000000 	.word	0x20000000

000184f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   184f0:	4b03      	ldr	r3, [pc, #12]	; (18500 <elapsed+0x10>)
   184f2:	681b      	ldr	r3, [r3, #0]
   184f4:	b90b      	cbnz	r3, 184fa <elapsed+0xa>
   184f6:	f7f9 bfa3 	b.w	12440 <sys_clock_elapsed>
}
   184fa:	2000      	movs	r0, #0
   184fc:	4770      	bx	lr
   184fe:	bf00      	nop
   18500:	20006fcc 	.word	0x20006fcc

00018504 <next_timeout>:

static int32_t next_timeout(void)
{
   18504:	b510      	push	{r4, lr}
	return list->head == list;
   18506:	4b11      	ldr	r3, [pc, #68]	; (1854c <next_timeout+0x48>)
   18508:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1850a:	429c      	cmp	r4, r3
   1850c:	d10a      	bne.n	18524 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1850e:	f7ff ffef 	bl	184f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   18512:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18516:	4b0e      	ldr	r3, [pc, #56]	; (18550 <next_timeout+0x4c>)
   18518:	691b      	ldr	r3, [r3, #16]
   1851a:	b113      	cbz	r3, 18522 <next_timeout+0x1e>
   1851c:	4298      	cmp	r0, r3
   1851e:	bfa8      	it	ge
   18520:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18522:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   18524:	f7ff ffe4 	bl	184f0 <elapsed>
	if ((to == NULL) ||
   18528:	2c00      	cmp	r4, #0
   1852a:	d0f2      	beq.n	18512 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1852c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   18530:	1a1b      	subs	r3, r3, r0
   18532:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   18536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1853a:	f172 0100 	sbcs.w	r1, r2, #0
   1853e:	dae8      	bge.n	18512 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   18540:	2a00      	cmp	r2, #0
   18542:	bfac      	ite	ge
   18544:	4618      	movge	r0, r3
   18546:	2000      	movlt	r0, #0
   18548:	e7e5      	b.n	18516 <next_timeout+0x12>
   1854a:	bf00      	nop
   1854c:	200004e4 	.word	0x200004e4
   18550:	20006f78 	.word	0x20006f78

00018554 <remove_timeout>:
{
   18554:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18556:	b170      	cbz	r0, 18576 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18558:	4b0b      	ldr	r3, [pc, #44]	; (18588 <remove_timeout+0x34>)
   1855a:	685b      	ldr	r3, [r3, #4]
   1855c:	4298      	cmp	r0, r3
   1855e:	d00a      	beq.n	18576 <remove_timeout+0x22>
   18560:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   18562:	b143      	cbz	r3, 18576 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18564:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18568:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1856c:	1912      	adds	r2, r2, r4
   1856e:	eb41 0105 	adc.w	r1, r1, r5
   18572:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   18576:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1857a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1857c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1857e:	2300      	movs	r3, #0
	node->prev = NULL;
   18580:	e9c0 3300 	strd	r3, r3, [r0]
}
   18584:	bd30      	pop	{r4, r5, pc}
   18586:	bf00      	nop
   18588:	200004e4 	.word	0x200004e4

0001858c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1858c:	f1b3 3fff 	cmp.w	r3, #4294967295
   18590:	bf08      	it	eq
   18592:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1859a:	4604      	mov	r4, r0
   1859c:	4692      	mov	sl, r2
   1859e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   185a0:	f000 8090 	beq.w	186c4 <z_add_timeout+0x138>
	return node->next != NULL;
   185a4:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   185a6:	b146      	cbz	r6, 185ba <z_add_timeout+0x2e>
   185a8:	4947      	ldr	r1, [pc, #284]	; (186c8 <z_add_timeout+0x13c>)
   185aa:	4848      	ldr	r0, [pc, #288]	; (186cc <z_add_timeout+0x140>)
   185ac:	2263      	movs	r2, #99	; 0x63
   185ae:	f002 feaf 	bl	1b310 <assert_print>
   185b2:	2163      	movs	r1, #99	; 0x63
   185b4:	4844      	ldr	r0, [pc, #272]	; (186c8 <z_add_timeout+0x13c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185b6:	f002 fea4 	bl	1b302 <assert_post_action>
	to->fn = fn;
   185ba:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   185bc:	f04f 0320 	mov.w	r3, #32
   185c0:	f3ef 8711 	mrs	r7, BASEPRI
   185c4:	f383 8812 	msr	BASEPRI_MAX, r3
   185c8:	f3bf 8f6f 	isb	sy
   185cc:	4840      	ldr	r0, [pc, #256]	; (186d0 <z_add_timeout+0x144>)
   185ce:	f7fd fe91 	bl	162f4 <z_spin_lock_valid>
   185d2:	b938      	cbnz	r0, 185e4 <z_add_timeout+0x58>
   185d4:	493f      	ldr	r1, [pc, #252]	; (186d4 <z_add_timeout+0x148>)
   185d6:	2294      	movs	r2, #148	; 0x94
   185d8:	483c      	ldr	r0, [pc, #240]	; (186cc <z_add_timeout+0x140>)
   185da:	f002 fe99 	bl	1b310 <assert_print>
   185de:	2194      	movs	r1, #148	; 0x94
   185e0:	483c      	ldr	r0, [pc, #240]	; (186d4 <z_add_timeout+0x148>)
   185e2:	e7e8      	b.n	185b6 <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   185e4:	483a      	ldr	r0, [pc, #232]	; (186d0 <z_add_timeout+0x144>)
   185e6:	f7fd fea1 	bl	1632c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   185ea:	f1ba 3fff 	cmp.w	sl, #4294967295
   185ee:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   185f2:	da23      	bge.n	1863c <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   185f4:	f06f 0301 	mvn.w	r3, #1
   185f8:	4937      	ldr	r1, [pc, #220]	; (186d8 <z_add_timeout+0x14c>)
   185fa:	e9d1 2000 	ldrd	r2, r0, [r1]
   185fe:	1a9b      	subs	r3, r3, r2
   18600:	f04f 32ff 	mov.w	r2, #4294967295
   18604:	eb62 0000 	sbc.w	r0, r2, r0
   18608:	ebb3 030a 	subs.w	r3, r3, sl
   1860c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   18610:	2b01      	cmp	r3, #1
   18612:	f170 0200 	sbcs.w	r2, r0, #0
   18616:	da01      	bge.n	1861c <z_add_timeout+0x90>
   18618:	2301      	movs	r3, #1
   1861a:	4630      	mov	r0, r6
   1861c:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   18620:	4b2e      	ldr	r3, [pc, #184]	; (186dc <z_add_timeout+0x150>)
   18622:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   18624:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18628:	429a      	cmp	r2, r3
   1862a:	bf18      	it	ne
   1862c:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1862e:	b986      	cbnz	r6, 18652 <z_add_timeout+0xc6>
	node->prev = tail;
   18630:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   18634:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   18638:	605c      	str	r4, [r3, #4]
}
   1863a:	e01c      	b.n	18676 <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   1863c:	f7ff ff58 	bl	184f0 <elapsed>
   18640:	f11a 0801 	adds.w	r8, sl, #1
   18644:	f145 0500 	adc.w	r5, r5, #0
   18648:	eb18 0300 	adds.w	r3, r8, r0
   1864c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   18650:	e7e4      	b.n	1861c <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   18652:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   18656:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   1865a:	428a      	cmp	r2, r1
   1865c:	eb70 0e05 	sbcs.w	lr, r0, r5
   18660:	da23      	bge.n	186aa <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   18662:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   18664:	6872      	ldr	r2, [r6, #4]
   18666:	eb65 0500 	sbc.w	r5, r5, r0
   1866a:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   1866e:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   18672:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18674:	6074      	str	r4, [r6, #4]
	return list->head == list;
   18676:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18678:	429a      	cmp	r2, r3
   1867a:	d00b      	beq.n	18694 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1867c:	4294      	cmp	r4, r2
   1867e:	d109      	bne.n	18694 <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18680:	f7ff ff40 	bl	18504 <next_timeout>

			if (next_time == 0 ||
   18684:	b118      	cbz	r0, 1868e <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   18686:	4b16      	ldr	r3, [pc, #88]	; (186e0 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   18688:	691b      	ldr	r3, [r3, #16]
   1868a:	4283      	cmp	r3, r0
   1868c:	d002      	beq.n	18694 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   1868e:	2100      	movs	r1, #0
   18690:	f7f9 feaa 	bl	123e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18694:	480e      	ldr	r0, [pc, #56]	; (186d0 <z_add_timeout+0x144>)
   18696:	f7fd fe3b 	bl	16310 <z_spin_unlock_valid>
   1869a:	b978      	cbnz	r0, 186bc <z_add_timeout+0x130>
   1869c:	490d      	ldr	r1, [pc, #52]	; (186d4 <z_add_timeout+0x148>)
   1869e:	22c2      	movs	r2, #194	; 0xc2
   186a0:	480a      	ldr	r0, [pc, #40]	; (186cc <z_add_timeout+0x140>)
   186a2:	f002 fe35 	bl	1b310 <assert_print>
   186a6:	21c2      	movs	r1, #194	; 0xc2
   186a8:	e79a      	b.n	185e0 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   186aa:	1a52      	subs	r2, r2, r1
   186ac:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   186b0:	4566      	cmp	r6, ip
   186b2:	e9c4 2004 	strd	r2, r0, [r4, #16]
   186b6:	d0bb      	beq.n	18630 <z_add_timeout+0xa4>
   186b8:	6836      	ldr	r6, [r6, #0]
   186ba:	e7b8      	b.n	1862e <z_add_timeout+0xa2>
	__asm__ volatile(
   186bc:	f387 8811 	msr	BASEPRI, r7
   186c0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   186c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   186c8:	000253bc 	.word	0x000253bc
   186cc:	000221f8 	.word	0x000221f8
   186d0:	20006fd0 	.word	0x20006fd0
   186d4:	00022232 	.word	0x00022232
   186d8:	200062f8 	.word	0x200062f8
   186dc:	200004e4 	.word	0x200004e4
   186e0:	20006f78 	.word	0x20006f78

000186e4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   186e4:	b538      	push	{r3, r4, r5, lr}
   186e6:	4604      	mov	r4, r0
	__asm__ volatile(
   186e8:	f04f 0320 	mov.w	r3, #32
   186ec:	f3ef 8511 	mrs	r5, BASEPRI
   186f0:	f383 8812 	msr	BASEPRI_MAX, r3
   186f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   186f8:	4814      	ldr	r0, [pc, #80]	; (1874c <z_abort_timeout+0x68>)
   186fa:	f7fd fdfb 	bl	162f4 <z_spin_lock_valid>
   186fe:	b940      	cbnz	r0, 18712 <z_abort_timeout+0x2e>
   18700:	4913      	ldr	r1, [pc, #76]	; (18750 <z_abort_timeout+0x6c>)
   18702:	2294      	movs	r2, #148	; 0x94
   18704:	4813      	ldr	r0, [pc, #76]	; (18754 <z_abort_timeout+0x70>)
   18706:	f002 fe03 	bl	1b310 <assert_print>
   1870a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1870c:	4810      	ldr	r0, [pc, #64]	; (18750 <z_abort_timeout+0x6c>)
   1870e:	f002 fdf8 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   18712:	480e      	ldr	r0, [pc, #56]	; (1874c <z_abort_timeout+0x68>)
   18714:	f7fd fe0a 	bl	1632c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18718:	6823      	ldr	r3, [r4, #0]
   1871a:	b173      	cbz	r3, 1873a <z_abort_timeout+0x56>
			remove_timeout(to);
   1871c:	4620      	mov	r0, r4
   1871e:	f7ff ff19 	bl	18554 <remove_timeout>
			ret = 0;
   18722:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18724:	4809      	ldr	r0, [pc, #36]	; (1874c <z_abort_timeout+0x68>)
   18726:	f7fd fdf3 	bl	16310 <z_spin_unlock_valid>
   1872a:	b948      	cbnz	r0, 18740 <z_abort_timeout+0x5c>
   1872c:	4908      	ldr	r1, [pc, #32]	; (18750 <z_abort_timeout+0x6c>)
   1872e:	22c2      	movs	r2, #194	; 0xc2
   18730:	4808      	ldr	r0, [pc, #32]	; (18754 <z_abort_timeout+0x70>)
   18732:	f002 fded 	bl	1b310 <assert_print>
   18736:	21c2      	movs	r1, #194	; 0xc2
   18738:	e7e8      	b.n	1870c <z_abort_timeout+0x28>
	int ret = -EINVAL;
   1873a:	f06f 0415 	mvn.w	r4, #21
   1873e:	e7f1      	b.n	18724 <z_abort_timeout+0x40>
	__asm__ volatile(
   18740:	f385 8811 	msr	BASEPRI, r5
   18744:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   18748:	4620      	mov	r0, r4
   1874a:	bd38      	pop	{r3, r4, r5, pc}
   1874c:	20006fd0 	.word	0x20006fd0
   18750:	00022232 	.word	0x00022232
   18754:	000221f8 	.word	0x000221f8

00018758 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   18758:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1875a:	f04f 0320 	mov.w	r3, #32
   1875e:	f3ef 8511 	mrs	r5, BASEPRI
   18762:	f383 8812 	msr	BASEPRI_MAX, r3
   18766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1876a:	4812      	ldr	r0, [pc, #72]	; (187b4 <z_get_next_timeout_expiry+0x5c>)
   1876c:	f7fd fdc2 	bl	162f4 <z_spin_lock_valid>
   18770:	b940      	cbnz	r0, 18784 <z_get_next_timeout_expiry+0x2c>
   18772:	4911      	ldr	r1, [pc, #68]	; (187b8 <z_get_next_timeout_expiry+0x60>)
   18774:	2294      	movs	r2, #148	; 0x94
   18776:	4811      	ldr	r0, [pc, #68]	; (187bc <z_get_next_timeout_expiry+0x64>)
   18778:	f002 fdca 	bl	1b310 <assert_print>
   1877c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1877e:	480e      	ldr	r0, [pc, #56]	; (187b8 <z_get_next_timeout_expiry+0x60>)
   18780:	f002 fdbf 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   18784:	480b      	ldr	r0, [pc, #44]	; (187b4 <z_get_next_timeout_expiry+0x5c>)
   18786:	f7fd fdd1 	bl	1632c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1878a:	f7ff febb 	bl	18504 <next_timeout>
   1878e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18790:	4808      	ldr	r0, [pc, #32]	; (187b4 <z_get_next_timeout_expiry+0x5c>)
   18792:	f7fd fdbd 	bl	16310 <z_spin_unlock_valid>
   18796:	b930      	cbnz	r0, 187a6 <z_get_next_timeout_expiry+0x4e>
   18798:	4907      	ldr	r1, [pc, #28]	; (187b8 <z_get_next_timeout_expiry+0x60>)
   1879a:	22c2      	movs	r2, #194	; 0xc2
   1879c:	4807      	ldr	r0, [pc, #28]	; (187bc <z_get_next_timeout_expiry+0x64>)
   1879e:	f002 fdb7 	bl	1b310 <assert_print>
   187a2:	21c2      	movs	r1, #194	; 0xc2
   187a4:	e7eb      	b.n	1877e <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   187a6:	f385 8811 	msr	BASEPRI, r5
   187aa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   187ae:	4620      	mov	r0, r4
   187b0:	bd38      	pop	{r3, r4, r5, pc}
   187b2:	bf00      	nop
   187b4:	20006fd0 	.word	0x20006fd0
   187b8:	00022232 	.word	0x00022232
   187bc:	000221f8 	.word	0x000221f8

000187c0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   187c0:	b570      	push	{r4, r5, r6, lr}
   187c2:	4604      	mov	r4, r0
   187c4:	460d      	mov	r5, r1
	__asm__ volatile(
   187c6:	f04f 0320 	mov.w	r3, #32
   187ca:	f3ef 8611 	mrs	r6, BASEPRI
   187ce:	f383 8812 	msr	BASEPRI_MAX, r3
   187d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187d6:	4816      	ldr	r0, [pc, #88]	; (18830 <z_set_timeout_expiry+0x70>)
   187d8:	f7fd fd8c 	bl	162f4 <z_spin_lock_valid>
   187dc:	b940      	cbnz	r0, 187f0 <z_set_timeout_expiry+0x30>
   187de:	4915      	ldr	r1, [pc, #84]	; (18834 <z_set_timeout_expiry+0x74>)
   187e0:	2294      	movs	r2, #148	; 0x94
   187e2:	4815      	ldr	r0, [pc, #84]	; (18838 <z_set_timeout_expiry+0x78>)
   187e4:	f002 fd94 	bl	1b310 <assert_print>
   187e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187ea:	4812      	ldr	r0, [pc, #72]	; (18834 <z_set_timeout_expiry+0x74>)
   187ec:	f002 fd89 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   187f0:	480f      	ldr	r0, [pc, #60]	; (18830 <z_set_timeout_expiry+0x70>)
   187f2:	f7fd fd9b 	bl	1632c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   187f6:	f7ff fe85 	bl	18504 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   187fa:	2801      	cmp	r0, #1
   187fc:	dd07      	ble.n	1880e <z_set_timeout_expiry+0x4e>
   187fe:	42a0      	cmp	r0, r4
   18800:	db05      	blt.n	1880e <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   18802:	42a0      	cmp	r0, r4
   18804:	4629      	mov	r1, r5
   18806:	bfa8      	it	ge
   18808:	4620      	movge	r0, r4
   1880a:	f7f9 fded 	bl	123e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1880e:	4808      	ldr	r0, [pc, #32]	; (18830 <z_set_timeout_expiry+0x70>)
   18810:	f7fd fd7e 	bl	16310 <z_spin_unlock_valid>
   18814:	b930      	cbnz	r0, 18824 <z_set_timeout_expiry+0x64>
   18816:	4907      	ldr	r1, [pc, #28]	; (18834 <z_set_timeout_expiry+0x74>)
   18818:	22c2      	movs	r2, #194	; 0xc2
   1881a:	4807      	ldr	r0, [pc, #28]	; (18838 <z_set_timeout_expiry+0x78>)
   1881c:	f002 fd78 	bl	1b310 <assert_print>
   18820:	21c2      	movs	r1, #194	; 0xc2
   18822:	e7e2      	b.n	187ea <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   18824:	f386 8811 	msr	BASEPRI, r6
   18828:	f3bf 8f6f 	isb	sy
		}
	}
}
   1882c:	bd70      	pop	{r4, r5, r6, pc}
   1882e:	bf00      	nop
   18830:	20006fd0 	.word	0x20006fd0
   18834:	00022232 	.word	0x00022232
   18838:	000221f8 	.word	0x000221f8

0001883c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18840:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18842:	f7ff f927 	bl	17a94 <z_time_slice>
	__asm__ volatile(
   18846:	f04f 0320 	mov.w	r3, #32
   1884a:	f3ef 8711 	mrs	r7, BASEPRI
   1884e:	f383 8812 	msr	BASEPRI_MAX, r3
   18852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18856:	483a      	ldr	r0, [pc, #232]	; (18940 <sys_clock_announce+0x104>)
   18858:	f7fd fd4c 	bl	162f4 <z_spin_lock_valid>
   1885c:	b940      	cbnz	r0, 18870 <sys_clock_announce+0x34>
   1885e:	4939      	ldr	r1, [pc, #228]	; (18944 <sys_clock_announce+0x108>)
   18860:	2294      	movs	r2, #148	; 0x94
   18862:	4839      	ldr	r0, [pc, #228]	; (18948 <sys_clock_announce+0x10c>)
   18864:	f002 fd54 	bl	1b310 <assert_print>
   18868:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1886a:	4836      	ldr	r0, [pc, #216]	; (18944 <sys_clock_announce+0x108>)
   1886c:	f002 fd49 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   18870:	4833      	ldr	r0, [pc, #204]	; (18940 <sys_clock_announce+0x104>)
   18872:	f7fd fd5b 	bl	1632c <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   18876:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 18950 <sys_clock_announce+0x114>
	return list->head == list;
   1887a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 18954 <sys_clock_announce+0x118>
   1887e:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18882:	4a32      	ldr	r2, [pc, #200]	; (1894c <sys_clock_announce+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18884:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   18886:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   1888a:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   1888e:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18892:	d00b      	beq.n	188ac <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18894:	b155      	cbz	r5, 188ac <sys_clock_announce+0x70>
   18896:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   1889a:	42b4      	cmp	r4, r6
   1889c:	eb71 0e00 	sbcs.w	lr, r1, r0
   188a0:	da1c      	bge.n	188dc <sys_clock_announce+0xa0>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   188a2:	1b36      	subs	r6, r6, r4
   188a4:	eb60 0001 	sbc.w	r0, r0, r1
   188a8:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   188ac:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   188ae:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   188b2:	eb4c 0101 	adc.w	r1, ip, r1
   188b6:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   188ba:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   188be:	f7ff fe21 	bl	18504 <next_timeout>
   188c2:	4621      	mov	r1, r4
   188c4:	f7f9 fd90 	bl	123e8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188c8:	481d      	ldr	r0, [pc, #116]	; (18940 <sys_clock_announce+0x104>)
   188ca:	f7fd fd21 	bl	16310 <z_spin_unlock_valid>
   188ce:	b1a8      	cbz	r0, 188fc <sys_clock_announce+0xc0>
	__asm__ volatile(
   188d0:	f387 8811 	msr	BASEPRI, r7
   188d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   188d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   188dc:	18f3      	adds	r3, r6, r3
   188de:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   188e2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   188e6:	2200      	movs	r2, #0
   188e8:	2300      	movs	r3, #0
		remove_timeout(t);
   188ea:	4628      	mov	r0, r5
		t->dticks = 0;
   188ec:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   188f0:	f7ff fe30 	bl	18554 <remove_timeout>
   188f4:	4812      	ldr	r0, [pc, #72]	; (18940 <sys_clock_announce+0x104>)
   188f6:	f7fd fd0b 	bl	16310 <z_spin_unlock_valid>
   188fa:	b930      	cbnz	r0, 1890a <sys_clock_announce+0xce>
   188fc:	4911      	ldr	r1, [pc, #68]	; (18944 <sys_clock_announce+0x108>)
   188fe:	22c2      	movs	r2, #194	; 0xc2
   18900:	4811      	ldr	r0, [pc, #68]	; (18948 <sys_clock_announce+0x10c>)
   18902:	f002 fd05 	bl	1b310 <assert_print>
   18906:	21c2      	movs	r1, #194	; 0xc2
   18908:	e7af      	b.n	1886a <sys_clock_announce+0x2e>
   1890a:	f387 8811 	msr	BASEPRI, r7
   1890e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18912:	4628      	mov	r0, r5
   18914:	68ab      	ldr	r3, [r5, #8]
   18916:	4798      	blx	r3
	__asm__ volatile(
   18918:	f04f 0320 	mov.w	r3, #32
   1891c:	f3ef 8711 	mrs	r7, BASEPRI
   18920:	f383 8812 	msr	BASEPRI_MAX, r3
   18924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18928:	4805      	ldr	r0, [pc, #20]	; (18940 <sys_clock_announce+0x104>)
   1892a:	f7fd fce3 	bl	162f4 <z_spin_lock_valid>
   1892e:	2800      	cmp	r0, #0
   18930:	d095      	beq.n	1885e <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   18932:	4803      	ldr	r0, [pc, #12]	; (18940 <sys_clock_announce+0x104>)
   18934:	f7fd fcfa 	bl	1632c <z_spin_lock_set_owner>
		announce_remaining -= dt;
   18938:	f8d8 4000 	ldr.w	r4, [r8]
   1893c:	1ba4      	subs	r4, r4, r6
   1893e:	e79e      	b.n	1887e <sys_clock_announce+0x42>
   18940:	20006fd0 	.word	0x20006fd0
   18944:	00022232 	.word	0x00022232
   18948:	000221f8 	.word	0x000221f8
   1894c:	200062f8 	.word	0x200062f8
   18950:	20006fcc 	.word	0x20006fcc
   18954:	200004e4 	.word	0x200004e4

00018958 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   18958:	b570      	push	{r4, r5, r6, lr}
   1895a:	f04f 0320 	mov.w	r3, #32
   1895e:	f3ef 8611 	mrs	r6, BASEPRI
   18962:	f383 8812 	msr	BASEPRI_MAX, r3
   18966:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1896a:	4815      	ldr	r0, [pc, #84]	; (189c0 <sys_clock_tick_get+0x68>)
   1896c:	f7fd fcc2 	bl	162f4 <z_spin_lock_valid>
   18970:	b940      	cbnz	r0, 18984 <sys_clock_tick_get+0x2c>
   18972:	4914      	ldr	r1, [pc, #80]	; (189c4 <sys_clock_tick_get+0x6c>)
   18974:	2294      	movs	r2, #148	; 0x94
   18976:	4814      	ldr	r0, [pc, #80]	; (189c8 <sys_clock_tick_get+0x70>)
   18978:	f002 fcca 	bl	1b310 <assert_print>
   1897c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1897e:	4811      	ldr	r0, [pc, #68]	; (189c4 <sys_clock_tick_get+0x6c>)
   18980:	f002 fcbf 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   18984:	480e      	ldr	r0, [pc, #56]	; (189c0 <sys_clock_tick_get+0x68>)
   18986:	f7fd fcd1 	bl	1632c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1898a:	f7ff fdb1 	bl	184f0 <elapsed>
   1898e:	4a0f      	ldr	r2, [pc, #60]	; (189cc <sys_clock_tick_get+0x74>)
   18990:	e9d2 4500 	ldrd	r4, r5, [r2]
   18994:	1904      	adds	r4, r0, r4
   18996:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1899a:	4809      	ldr	r0, [pc, #36]	; (189c0 <sys_clock_tick_get+0x68>)
   1899c:	f7fd fcb8 	bl	16310 <z_spin_unlock_valid>
   189a0:	b930      	cbnz	r0, 189b0 <sys_clock_tick_get+0x58>
   189a2:	4908      	ldr	r1, [pc, #32]	; (189c4 <sys_clock_tick_get+0x6c>)
   189a4:	22c2      	movs	r2, #194	; 0xc2
   189a6:	4808      	ldr	r0, [pc, #32]	; (189c8 <sys_clock_tick_get+0x70>)
   189a8:	f002 fcb2 	bl	1b310 <assert_print>
   189ac:	21c2      	movs	r1, #194	; 0xc2
   189ae:	e7e6      	b.n	1897e <sys_clock_tick_get+0x26>
	__asm__ volatile(
   189b0:	f386 8811 	msr	BASEPRI, r6
   189b4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   189b8:	4620      	mov	r0, r4
   189ba:	4629      	mov	r1, r5
   189bc:	bd70      	pop	{r4, r5, r6, pc}
   189be:	bf00      	nop
   189c0:	20006fd0 	.word	0x20006fd0
   189c4:	00022232 	.word	0x00022232
   189c8:	000221f8 	.word	0x000221f8
   189cc:	200062f8 	.word	0x200062f8

000189d0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   189d0:	b570      	push	{r4, r5, r6, lr}
   189d2:	4604      	mov	r4, r0
	__asm__ volatile(
   189d4:	f04f 0320 	mov.w	r3, #32
   189d8:	f3ef 8511 	mrs	r5, BASEPRI
   189dc:	f383 8812 	msr	BASEPRI_MAX, r3
   189e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   189e4:	4845      	ldr	r0, [pc, #276]	; (18afc <z_timer_expiration_handler+0x12c>)
   189e6:	f7fd fc85 	bl	162f4 <z_spin_lock_valid>
   189ea:	b940      	cbnz	r0, 189fe <z_timer_expiration_handler+0x2e>
   189ec:	4944      	ldr	r1, [pc, #272]	; (18b00 <z_timer_expiration_handler+0x130>)
   189ee:	2294      	movs	r2, #148	; 0x94
   189f0:	4844      	ldr	r0, [pc, #272]	; (18b04 <z_timer_expiration_handler+0x134>)
   189f2:	f002 fc8d 	bl	1b310 <assert_print>
   189f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189f8:	4841      	ldr	r0, [pc, #260]	; (18b00 <z_timer_expiration_handler+0x130>)
   189fa:	f002 fc82 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   189fe:	483f      	ldr	r0, [pc, #252]	; (18afc <z_timer_expiration_handler+0x12c>)
   18a00:	f7fd fc94 	bl	1632c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18a04:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   18a08:	3301      	adds	r3, #1
   18a0a:	f142 0200 	adc.w	r2, r2, #0
   18a0e:	2b02      	cmp	r3, #2
   18a10:	f172 0200 	sbcs.w	r2, r2, #0
   18a14:	d322      	bcc.n	18a5c <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   18a16:	f006 fbc0 	bl	1f19a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   18a1a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   18a1e:	3001      	adds	r0, #1
   18a20:	f141 0100 	adc.w	r1, r1, #0
   18a24:	18c0      	adds	r0, r0, r3
   18a26:	eb41 0102 	adc.w	r1, r1, r2
   18a2a:	2801      	cmp	r0, #1
   18a2c:	f171 0100 	sbcs.w	r1, r1, #0
   18a30:	db24      	blt.n	18a7c <z_timer_expiration_handler+0xac>
   18a32:	f006 fbb2 	bl	1f19a <z_impl_k_uptime_ticks>
   18a36:	3001      	adds	r0, #1
   18a38:	f141 0300 	adc.w	r3, r1, #0
   18a3c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   18a40:	1880      	adds	r0, r0, r2
   18a42:	f06f 0201 	mvn.w	r2, #1
   18a46:	eb43 0301 	adc.w	r3, r3, r1
   18a4a:	f04f 31ff 	mov.w	r1, #4294967295
   18a4e:	1a12      	subs	r2, r2, r0
   18a50:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18a54:	4620      	mov	r0, r4
   18a56:	492c      	ldr	r1, [pc, #176]	; (18b08 <z_timer_expiration_handler+0x138>)
   18a58:	f7ff fd98 	bl	1858c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   18a5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18a5e:	3301      	adds	r3, #1
   18a60:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18a62:	6a23      	ldr	r3, [r4, #32]
   18a64:	b333      	cbz	r3, 18ab4 <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a66:	4825      	ldr	r0, [pc, #148]	; (18afc <z_timer_expiration_handler+0x12c>)
   18a68:	f7fd fc52 	bl	16310 <z_spin_unlock_valid>
   18a6c:	b958      	cbnz	r0, 18a86 <z_timer_expiration_handler+0xb6>
   18a6e:	4924      	ldr	r1, [pc, #144]	; (18b00 <z_timer_expiration_handler+0x130>)
   18a70:	22c2      	movs	r2, #194	; 0xc2
   18a72:	4824      	ldr	r0, [pc, #144]	; (18b04 <z_timer_expiration_handler+0x134>)
   18a74:	f002 fc4c 	bl	1b310 <assert_print>
   18a78:	21c2      	movs	r1, #194	; 0xc2
   18a7a:	e7bd      	b.n	189f8 <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   18a7c:	f06f 0201 	mvn.w	r2, #1
   18a80:	f04f 33ff 	mov.w	r3, #4294967295
   18a84:	e7e6      	b.n	18a54 <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   18a86:	f385 8811 	msr	BASEPRI, r5
   18a8a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   18a8e:	4620      	mov	r0, r4
   18a90:	6a23      	ldr	r3, [r4, #32]
   18a92:	4798      	blx	r3
	__asm__ volatile(
   18a94:	f04f 0320 	mov.w	r3, #32
   18a98:	f3ef 8511 	mrs	r5, BASEPRI
   18a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   18aa0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18aa4:	4815      	ldr	r0, [pc, #84]	; (18afc <z_timer_expiration_handler+0x12c>)
   18aa6:	f7fd fc25 	bl	162f4 <z_spin_lock_valid>
   18aaa:	2800      	cmp	r0, #0
   18aac:	d09e      	beq.n	189ec <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   18aae:	4813      	ldr	r0, [pc, #76]	; (18afc <z_timer_expiration_handler+0x12c>)
   18ab0:	f7fd fc3c 	bl	1632c <z_spin_lock_set_owner>
	return list->head == list;
   18ab4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ab8:	42a6      	cmp	r6, r4
   18aba:	d000      	beq.n	18abe <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18abc:	b94e      	cbnz	r6, 18ad2 <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18abe:	480f      	ldr	r0, [pc, #60]	; (18afc <z_timer_expiration_handler+0x12c>)
   18ac0:	f7fd fc26 	bl	16310 <z_spin_unlock_valid>
   18ac4:	2800      	cmp	r0, #0
   18ac6:	d0d2      	beq.n	18a6e <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   18ac8:	f385 8811 	msr	BASEPRI, r5
   18acc:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   18ad0:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   18ad2:	4630      	mov	r0, r6
   18ad4:	f7fe fe28 	bl	17728 <z_unpend_thread_no_timeout>
   18ad8:	2300      	movs	r3, #0
   18ada:	4808      	ldr	r0, [pc, #32]	; (18afc <z_timer_expiration_handler+0x12c>)
   18adc:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
   18ae0:	f7fd fc16 	bl	16310 <z_spin_unlock_valid>
   18ae4:	2800      	cmp	r0, #0
   18ae6:	d0c2      	beq.n	18a6e <z_timer_expiration_handler+0x9e>
   18ae8:	f385 8811 	msr	BASEPRI, r5
   18aec:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   18af0:	4630      	mov	r0, r6
}
   18af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   18af6:	f7fe bde3 	b.w	176c0 <z_ready_thread>
   18afa:	bf00      	nop
   18afc:	20006fd4 	.word	0x20006fd4
   18b00:	00022232 	.word	0x00022232
   18b04:	000221f8 	.word	0x000221f8
   18b08:	000189d1 	.word	0x000189d1

00018b0c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
   18b10:	bf08      	it	eq
   18b12:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b1a:	4619      	mov	r1, r3
   18b1c:	4605      	mov	r5, r0
   18b1e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   18b22:	4614      	mov	r4, r2
   18b24:	4691      	mov	r9, r2
   18b26:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18b28:	d037      	beq.n	18b9a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18b2a:	f1b0 3fff 	cmp.w	r0, #4294967295
   18b2e:	bf08      	it	eq
   18b30:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18b34:	4637      	mov	r7, r6
   18b36:	4682      	mov	sl, r0
   18b38:	d011      	beq.n	18b5e <z_impl_k_timer_start+0x52>
   18b3a:	ea50 0306 	orrs.w	r3, r0, r6
   18b3e:	d00e      	beq.n	18b5e <z_impl_k_timer_start+0x52>
   18b40:	1c72      	adds	r2, r6, #1
   18b42:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   18b46:	db0a      	blt.n	18b5e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   18b48:	2e02      	cmp	r6, #2
   18b4a:	4684      	mov	ip, r0
   18b4c:	f170 0000 	sbcs.w	r0, r0, #0
   18b50:	bfbc      	itt	lt
   18b52:	2702      	movlt	r7, #2
   18b54:	f04f 0c00 	movlt.w	ip, #0
   18b58:	3f01      	subs	r7, #1
   18b5a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   18b5e:	1c63      	adds	r3, r4, #1
   18b60:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   18b64:	db0a      	blt.n	18b7c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18b66:	2c01      	cmp	r4, #1
   18b68:	f171 0300 	sbcs.w	r3, r1, #0
   18b6c:	4622      	mov	r2, r4
   18b6e:	bfbc      	itt	lt
   18b70:	2201      	movlt	r2, #1
   18b72:	2100      	movlt	r1, #0
   18b74:	f112 39ff 	adds.w	r9, r2, #4294967295
   18b78:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   18b7c:	4628      	mov	r0, r5
   18b7e:	f7ff fdb1 	bl	186e4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   18b82:	2300      	movs	r3, #0
	timer->period = period;
   18b84:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   18b88:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18b8a:	464a      	mov	r2, r9
   18b8c:	4643      	mov	r3, r8
   18b8e:	4628      	mov	r0, r5
		     duration);
}
   18b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18b94:	4902      	ldr	r1, [pc, #8]	; (18ba0 <z_impl_k_timer_start+0x94>)
   18b96:	f7ff bcf9 	b.w	1858c <z_add_timeout>
}
   18b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18b9e:	bf00      	nop
   18ba0:	000189d1 	.word	0x000189d1

00018ba4 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   18ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   18ba8:	2500      	movs	r5, #0
{
   18baa:	460f      	mov	r7, r1
   18bac:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   18bae:	4680      	mov	r8, r0
	int events_registered = 0;
   18bb0:	462e      	mov	r6, r5
	event->poller = NULL;
   18bb2:	46aa      	mov	sl, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18bb4:	f8df 9194 	ldr.w	r9, [pc, #404]	; 18d4c <register_events+0x1a8>
{
   18bb8:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   18bba:	42bd      	cmp	r5, r7
   18bbc:	db03      	blt.n	18bc6 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   18bbe:	4630      	mov	r0, r6
   18bc0:	b003      	add	sp, #12
   18bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   18bc6:	f04f 0320 	mov.w	r3, #32
   18bca:	f3ef 8b11 	mrs	fp, BASEPRI
   18bce:	f383 8812 	msr	BASEPRI_MAX, r3
   18bd2:	f3bf 8f6f 	isb	sy
   18bd6:	4648      	mov	r0, r9
   18bd8:	f7fd fb8c 	bl	162f4 <z_spin_lock_valid>
   18bdc:	b938      	cbnz	r0, 18bee <register_events+0x4a>
   18bde:	4958      	ldr	r1, [pc, #352]	; (18d40 <register_events+0x19c>)
   18be0:	2294      	movs	r2, #148	; 0x94
   18be2:	4858      	ldr	r0, [pc, #352]	; (18d44 <register_events+0x1a0>)
   18be4:	f002 fb94 	bl	1b310 <assert_print>
   18be8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18bea:	4855      	ldr	r0, [pc, #340]	; (18d40 <register_events+0x19c>)
   18bec:	e05b      	b.n	18ca6 <register_events+0x102>
	z_spin_lock_set_owner(l);
   18bee:	4648      	mov	r0, r9
   18bf0:	f7fd fb9c 	bl	1632c <z_spin_lock_set_owner>
	switch (event->type) {
   18bf4:	f898 300d 	ldrb.w	r3, [r8, #13]
   18bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18bfc:	2b08      	cmp	r3, #8
   18bfe:	d84b      	bhi.n	18c98 <register_events+0xf4>
   18c00:	e8df f003 	tbb	[pc, r3]
   18c04:	4a053c29 	.word	0x4a053c29
   18c08:	4a4a4a25 	.word	0x4a4a4a25
   18c0c:	43          	.byte	0x43
   18c0d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   18c0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18c12:	689b      	ldr	r3, [r3, #8]
   18c14:	b1fb      	cbz	r3, 18c56 <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   18c16:	2302      	movs	r3, #2
	event->state |= state;
   18c18:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   18c1c:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   18c20:	f3c2 3086 	ubfx	r0, r2, #14, #7
   18c24:	4303      	orrs	r3, r0
   18c26:	f363 3294 	bfi	r2, r3, #14, #7
   18c2a:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   18c2e:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c32:	4648      	mov	r0, r9
   18c34:	f7fd fb6c 	bl	16310 <z_spin_unlock_valid>
   18c38:	f108 0814 	add.w	r8, r8, #20
   18c3c:	2800      	cmp	r0, #0
   18c3e:	d179      	bne.n	18d34 <register_events+0x190>
   18c40:	493f      	ldr	r1, [pc, #252]	; (18d40 <register_events+0x19c>)
   18c42:	22c2      	movs	r2, #194	; 0xc2
   18c44:	483f      	ldr	r0, [pc, #252]	; (18d44 <register_events+0x1a0>)
   18c46:	f002 fb63 	bl	1b310 <assert_print>
   18c4a:	21c2      	movs	r1, #194	; 0xc2
   18c4c:	e7cd      	b.n	18bea <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   18c4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18c52:	681b      	ldr	r3, [r3, #0]
   18c54:	bb4b      	cbnz	r3, 18caa <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   18c56:	9b01      	ldr	r3, [sp, #4]
   18c58:	2b00      	cmp	r3, #0
   18c5a:	d1ea      	bne.n	18c32 <register_events+0x8e>
   18c5c:	7823      	ldrb	r3, [r4, #0]
   18c5e:	2b00      	cmp	r3, #0
   18c60:	d0e7      	beq.n	18c32 <register_events+0x8e>
	switch (event->type) {
   18c62:	f898 300d 	ldrb.w	r3, [r8, #13]
   18c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18c6a:	2b08      	cmp	r3, #8
   18c6c:	d85b      	bhi.n	18d26 <register_events+0x182>
   18c6e:	e8df f003 	tbb	[pc, r3]
   18c72:	3f2d      	.short	0x3f2d
   18c74:	5a315a1e 	.word	0x5a315a1e
   18c78:	5a5a      	.short	0x5a5a
   18c7a:	4c          	.byte	0x4c
   18c7b:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   18c7c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18c80:	689b      	ldr	r3, [r3, #8]
   18c82:	2b00      	cmp	r3, #0
   18c84:	d0e7      	beq.n	18c56 <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   18c86:	2301      	movs	r3, #1
   18c88:	e7c6      	b.n	18c18 <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   18c8a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18c90:	2b00      	cmp	r3, #0
   18c92:	d0e0      	beq.n	18c56 <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   18c94:	2310      	movs	r3, #16
   18c96:	e7bf      	b.n	18c18 <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   18c98:	492b      	ldr	r1, [pc, #172]	; (18d48 <register_events+0x1a4>)
   18c9a:	2263      	movs	r2, #99	; 0x63
   18c9c:	4829      	ldr	r0, [pc, #164]	; (18d44 <register_events+0x1a0>)
   18c9e:	f002 fb37 	bl	1b310 <assert_print>
   18ca2:	2163      	movs	r1, #99	; 0x63
   18ca4:	4828      	ldr	r0, [pc, #160]	; (18d48 <register_events+0x1a4>)
   18ca6:	f002 fb2c 	bl	1b302 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   18caa:	2304      	movs	r3, #4
   18cac:	e7b4      	b.n	18c18 <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   18cae:	f8d8 0010 	ldr.w	r0, [r8, #16]
   18cb2:	b930      	cbnz	r0, 18cc2 <register_events+0x11e>
   18cb4:	4924      	ldr	r1, [pc, #144]	; (18d48 <register_events+0x1a4>)
   18cb6:	228d      	movs	r2, #141	; 0x8d
   18cb8:	4822      	ldr	r0, [pc, #136]	; (18d44 <register_events+0x1a0>)
   18cba:	f002 fb29 	bl	1b310 <assert_print>
   18cbe:	218d      	movs	r1, #141	; 0x8d
   18cc0:	e7f0      	b.n	18ca4 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   18cc2:	4622      	mov	r2, r4
   18cc4:	4641      	mov	r1, r8
   18cc6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   18cc8:	f006 fa8f 	bl	1f1ea <add_event>
	event->poller = poller;
   18ccc:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   18cd0:	3601      	adds	r6, #1
   18cd2:	e7ae      	b.n	18c32 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   18cd4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   18cd8:	b930      	cbnz	r0, 18ce8 <register_events+0x144>
   18cda:	491b      	ldr	r1, [pc, #108]	; (18d48 <register_events+0x1a4>)
   18cdc:	2291      	movs	r2, #145	; 0x91
   18cde:	4819      	ldr	r0, [pc, #100]	; (18d44 <register_events+0x1a0>)
   18ce0:	f002 fb16 	bl	1b310 <assert_print>
   18ce4:	2191      	movs	r1, #145	; 0x91
   18ce6:	e7dd      	b.n	18ca4 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   18ce8:	4622      	mov	r2, r4
   18cea:	4641      	mov	r1, r8
   18cec:	3014      	adds	r0, #20
   18cee:	e7eb      	b.n	18cc8 <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   18cf0:	f8d8 0010 	ldr.w	r0, [r8, #16]
   18cf4:	b930      	cbnz	r0, 18d04 <register_events+0x160>
   18cf6:	4914      	ldr	r1, [pc, #80]	; (18d48 <register_events+0x1a4>)
   18cf8:	2295      	movs	r2, #149	; 0x95
   18cfa:	4812      	ldr	r0, [pc, #72]	; (18d44 <register_events+0x1a0>)
   18cfc:	f002 fb08 	bl	1b310 <assert_print>
   18d00:	2195      	movs	r1, #149	; 0x95
   18d02:	e7cf      	b.n	18ca4 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   18d04:	4622      	mov	r2, r4
   18d06:	4641      	mov	r1, r8
   18d08:	e7de      	b.n	18cc8 <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   18d0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   18d0e:	b930      	cbnz	r0, 18d1e <register_events+0x17a>
   18d10:	490d      	ldr	r1, [pc, #52]	; (18d48 <register_events+0x1a4>)
   18d12:	2299      	movs	r2, #153	; 0x99
   18d14:	480b      	ldr	r0, [pc, #44]	; (18d44 <register_events+0x1a0>)
   18d16:	f002 fafb 	bl	1b310 <assert_print>
   18d1a:	2199      	movs	r1, #153	; 0x99
   18d1c:	e7c2      	b.n	18ca4 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   18d1e:	4622      	mov	r2, r4
   18d20:	4641      	mov	r1, r8
   18d22:	3028      	adds	r0, #40	; 0x28
   18d24:	e7d0      	b.n	18cc8 <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   18d26:	4908      	ldr	r1, [pc, #32]	; (18d48 <register_events+0x1a4>)
   18d28:	22a6      	movs	r2, #166	; 0xa6
   18d2a:	4806      	ldr	r0, [pc, #24]	; (18d44 <register_events+0x1a0>)
   18d2c:	f002 faf0 	bl	1b310 <assert_print>
   18d30:	21a6      	movs	r1, #166	; 0xa6
   18d32:	e7b7      	b.n	18ca4 <register_events+0x100>
	__asm__ volatile(
   18d34:	f38b 8811 	msr	BASEPRI, fp
   18d38:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   18d3c:	3501      	adds	r5, #1
   18d3e:	e73c      	b.n	18bba <register_events+0x16>
   18d40:	00022232 	.word	0x00022232
   18d44:	000221f8 	.word	0x000221f8
   18d48:	000253e0 	.word	0x000253e0
   18d4c:	20006fd8 	.word	0x20006fd8

00018d50 <clear_event_registrations>:
{
   18d50:	2314      	movs	r3, #20
   18d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d56:	4615      	mov	r5, r2
	while (num_events--) {
   18d58:	460c      	mov	r4, r1
	event->poller = NULL;
   18d5a:	2600      	movs	r6, #0
   18d5c:	fb03 0001 	mla	r0, r3, r1, r0
   18d60:	4f3b      	ldr	r7, [pc, #236]	; (18e50 <clear_event_registrations+0x100>)
	while (num_events--) {
   18d62:	b90c      	cbnz	r4, 18d68 <clear_event_registrations+0x18>
}
   18d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   18d68:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   18d6c:	f1a0 0814 	sub.w	r8, r0, #20
   18d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   18d74:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   18d78:	2b08      	cmp	r3, #8
   18d7a:	d830      	bhi.n	18dde <clear_event_registrations+0x8e>
   18d7c:	e8df f003 	tbb	[pc, r3]
   18d80:	2f051b3f 	.word	0x2f051b3f
   18d84:	2f2f2f11 	.word	0x2f2f2f11
   18d88:	25          	.byte	0x25
   18d89:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   18d8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   18d8e:	bb6b      	cbnz	r3, 18dec <clear_event_registrations+0x9c>
   18d90:	4930      	ldr	r1, [pc, #192]	; (18e54 <clear_event_registrations+0x104>)
   18d92:	22b6      	movs	r2, #182	; 0xb6
   18d94:	4830      	ldr	r0, [pc, #192]	; (18e58 <clear_event_registrations+0x108>)
   18d96:	f002 fabb 	bl	1b310 <assert_print>
   18d9a:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   18d9c:	482d      	ldr	r0, [pc, #180]	; (18e54 <clear_event_registrations+0x104>)
   18d9e:	f002 fab0 	bl	1b302 <assert_post_action>
   18da2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   18da6:	bb0b      	cbnz	r3, 18dec <clear_event_registrations+0x9c>
   18da8:	492a      	ldr	r1, [pc, #168]	; (18e54 <clear_event_registrations+0x104>)
   18daa:	22ba      	movs	r2, #186	; 0xba
   18dac:	482a      	ldr	r0, [pc, #168]	; (18e58 <clear_event_registrations+0x108>)
   18dae:	f002 faaf 	bl	1b310 <assert_print>
   18db2:	21ba      	movs	r1, #186	; 0xba
   18db4:	e7f2      	b.n	18d9c <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   18db6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   18dba:	b9bb      	cbnz	r3, 18dec <clear_event_registrations+0x9c>
   18dbc:	4925      	ldr	r1, [pc, #148]	; (18e54 <clear_event_registrations+0x104>)
   18dbe:	22be      	movs	r2, #190	; 0xbe
   18dc0:	4825      	ldr	r0, [pc, #148]	; (18e58 <clear_event_registrations+0x108>)
   18dc2:	f002 faa5 	bl	1b310 <assert_print>
   18dc6:	21be      	movs	r1, #190	; 0xbe
   18dc8:	e7e8      	b.n	18d9c <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   18dca:	f850 3c04 	ldr.w	r3, [r0, #-4]
   18dce:	b96b      	cbnz	r3, 18dec <clear_event_registrations+0x9c>
   18dd0:	4920      	ldr	r1, [pc, #128]	; (18e54 <clear_event_registrations+0x104>)
   18dd2:	22c2      	movs	r2, #194	; 0xc2
   18dd4:	4820      	ldr	r0, [pc, #128]	; (18e58 <clear_event_registrations+0x108>)
   18dd6:	f002 fa9b 	bl	1b310 <assert_print>
   18dda:	21c2      	movs	r1, #194	; 0xc2
   18ddc:	e7de      	b.n	18d9c <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   18dde:	491d      	ldr	r1, [pc, #116]	; (18e54 <clear_event_registrations+0x104>)
   18de0:	22cf      	movs	r2, #207	; 0xcf
   18de2:	481d      	ldr	r0, [pc, #116]	; (18e58 <clear_event_registrations+0x108>)
   18de4:	f002 fa94 	bl	1b310 <assert_print>
   18de8:	21cf      	movs	r1, #207	; 0xcf
   18dea:	e7d7      	b.n	18d9c <clear_event_registrations+0x4c>
	return node->next != NULL;
   18dec:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   18df0:	b12b      	cbz	r3, 18dfe <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   18df2:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   18df6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18df8:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   18dfa:	e940 6605 	strd	r6, r6, [r0, #-20]
   18dfe:	4638      	mov	r0, r7
   18e00:	f7fd fa86 	bl	16310 <z_spin_unlock_valid>
   18e04:	b938      	cbnz	r0, 18e16 <clear_event_registrations+0xc6>
   18e06:	4915      	ldr	r1, [pc, #84]	; (18e5c <clear_event_registrations+0x10c>)
   18e08:	22c2      	movs	r2, #194	; 0xc2
   18e0a:	4813      	ldr	r0, [pc, #76]	; (18e58 <clear_event_registrations+0x108>)
   18e0c:	f002 fa80 	bl	1b310 <assert_print>
   18e10:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e12:	4812      	ldr	r0, [pc, #72]	; (18e5c <clear_event_registrations+0x10c>)
   18e14:	e7c3      	b.n	18d9e <clear_event_registrations+0x4e>
   18e16:	f385 8811 	msr	BASEPRI, r5
   18e1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18e1e:	f04f 0320 	mov.w	r3, #32
   18e22:	f3ef 8511 	mrs	r5, BASEPRI
   18e26:	f383 8812 	msr	BASEPRI_MAX, r3
   18e2a:	f3bf 8f6f 	isb	sy
   18e2e:	4638      	mov	r0, r7
   18e30:	f7fd fa60 	bl	162f4 <z_spin_lock_valid>
   18e34:	3c01      	subs	r4, #1
   18e36:	b930      	cbnz	r0, 18e46 <clear_event_registrations+0xf6>
   18e38:	4908      	ldr	r1, [pc, #32]	; (18e5c <clear_event_registrations+0x10c>)
   18e3a:	2294      	movs	r2, #148	; 0x94
   18e3c:	4806      	ldr	r0, [pc, #24]	; (18e58 <clear_event_registrations+0x108>)
   18e3e:	f002 fa67 	bl	1b310 <assert_print>
   18e42:	2194      	movs	r1, #148	; 0x94
   18e44:	e7e5      	b.n	18e12 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   18e46:	4638      	mov	r0, r7
   18e48:	f7fd fa70 	bl	1632c <z_spin_lock_set_owner>
	return k;
   18e4c:	4640      	mov	r0, r8
   18e4e:	e788      	b.n	18d62 <clear_event_registrations+0x12>
   18e50:	20006fd8 	.word	0x20006fd8
   18e54:	000253e0 	.word	0x000253e0
   18e58:	000221f8 	.word	0x000221f8
   18e5c:	00022232 	.word	0x00022232

00018e60 <k_poll_event_init>:
{
   18e60:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   18e62:	b142      	cbz	r2, 18e76 <k_poll_event_init+0x16>
   18e64:	4911      	ldr	r1, [pc, #68]	; (18eac <k_poll_event_init+0x4c>)
   18e66:	222d      	movs	r2, #45	; 0x2d
   18e68:	4811      	ldr	r0, [pc, #68]	; (18eb0 <k_poll_event_init+0x50>)
   18e6a:	f002 fa51 	bl	1b310 <assert_print>
   18e6e:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   18e70:	480e      	ldr	r0, [pc, #56]	; (18eac <k_poll_event_init+0x4c>)
   18e72:	f002 fa46 	bl	1b302 <assert_post_action>
   18e76:	293f      	cmp	r1, #63	; 0x3f
   18e78:	d906      	bls.n	18e88 <k_poll_event_init+0x28>
   18e7a:	490c      	ldr	r1, [pc, #48]	; (18eac <k_poll_event_init+0x4c>)
   18e7c:	222f      	movs	r2, #47	; 0x2f
   18e7e:	480c      	ldr	r0, [pc, #48]	; (18eb0 <k_poll_event_init+0x50>)
   18e80:	f002 fa46 	bl	1b310 <assert_print>
   18e84:	212f      	movs	r1, #47	; 0x2f
   18e86:	e7f3      	b.n	18e70 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   18e88:	b933      	cbnz	r3, 18e98 <k_poll_event_init+0x38>
   18e8a:	4908      	ldr	r1, [pc, #32]	; (18eac <k_poll_event_init+0x4c>)
   18e8c:	2230      	movs	r2, #48	; 0x30
   18e8e:	4808      	ldr	r0, [pc, #32]	; (18eb0 <k_poll_event_init+0x50>)
   18e90:	f002 fa3e 	bl	1b310 <assert_print>
   18e94:	2130      	movs	r1, #48	; 0x30
   18e96:	e7eb      	b.n	18e70 <k_poll_event_init+0x10>
	event->poller = NULL;
   18e98:	6082      	str	r2, [r0, #8]
	event->type = type;
   18e9a:	0209      	lsls	r1, r1, #8
   18e9c:	7b02      	ldrb	r2, [r0, #12]
   18e9e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   18ea2:	4311      	orrs	r1, r2
	event->obj = obj;
   18ea4:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   18ea8:	bd08      	pop	{r3, pc}
   18eaa:	bf00      	nop
   18eac:	000253e0 	.word	0x000253e0
   18eb0:	000221f8 	.word	0x000221f8

00018eb4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   18eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eb8:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   18eba:	4b51      	ldr	r3, [pc, #324]	; (19000 <z_impl_k_poll+0x14c>)
{
   18ebc:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   18ebe:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   18ec2:	2301      	movs	r3, #1
{
   18ec4:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   18ec6:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   18eca:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   18ece:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   18ed2:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   18ed6:	f1bb 0f00 	cmp.w	fp, #0
   18eda:	d00a      	beq.n	18ef2 <z_impl_k_poll+0x3e>
   18edc:	4949      	ldr	r1, [pc, #292]	; (19004 <z_impl_k_poll+0x150>)
   18ede:	f240 122d 	movw	r2, #301	; 0x12d
   18ee2:	4849      	ldr	r0, [pc, #292]	; (19008 <z_impl_k_poll+0x154>)
   18ee4:	f002 fa14 	bl	1b310 <assert_print>
   18ee8:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   18eec:	4845      	ldr	r0, [pc, #276]	; (19004 <z_impl_k_poll+0x150>)
   18eee:	f002 fa08 	bl	1b302 <assert_post_action>
   18ef2:	b940      	cbnz	r0, 18f06 <z_impl_k_poll+0x52>
   18ef4:	4943      	ldr	r1, [pc, #268]	; (19004 <z_impl_k_poll+0x150>)
   18ef6:	f44f 7297 	mov.w	r2, #302	; 0x12e
   18efa:	4843      	ldr	r0, [pc, #268]	; (19008 <z_impl_k_poll+0x154>)
   18efc:	f002 fa08 	bl	1b310 <assert_print>
   18f00:	f44f 7197 	mov.w	r1, #302	; 0x12e
   18f04:	e7f2      	b.n	18eec <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   18f06:	2900      	cmp	r1, #0
   18f08:	da08      	bge.n	18f1c <z_impl_k_poll+0x68>
   18f0a:	493e      	ldr	r1, [pc, #248]	; (19004 <z_impl_k_poll+0x150>)
   18f0c:	f240 122f 	movw	r2, #303	; 0x12f
   18f10:	483d      	ldr	r0, [pc, #244]	; (19008 <z_impl_k_poll+0x154>)
   18f12:	f002 f9fd 	bl	1b310 <assert_print>
   18f16:	f240 112f 	movw	r1, #303	; 0x12f
   18f1a:	e7e7      	b.n	18eec <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   18f1c:	ea57 0306 	orrs.w	r3, r7, r6
   18f20:	bf0c      	ite	eq
   18f22:	2301      	moveq	r3, #1
   18f24:	2300      	movne	r3, #0
   18f26:	f7ff fe3d 	bl	18ba4 <register_events>
   18f2a:	4681      	mov	r9, r0
   18f2c:	f04f 0320 	mov.w	r3, #32
   18f30:	f3ef 8a11 	mrs	sl, BASEPRI
   18f34:	f383 8812 	msr	BASEPRI_MAX, r3
   18f38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f3c:	4833      	ldr	r0, [pc, #204]	; (1900c <z_impl_k_poll+0x158>)
   18f3e:	f7fd f9d9 	bl	162f4 <z_spin_lock_valid>
   18f42:	b938      	cbnz	r0, 18f54 <z_impl_k_poll+0xa0>
   18f44:	4932      	ldr	r1, [pc, #200]	; (19010 <z_impl_k_poll+0x15c>)
   18f46:	2294      	movs	r2, #148	; 0x94
   18f48:	482f      	ldr	r0, [pc, #188]	; (19008 <z_impl_k_poll+0x154>)
   18f4a:	f002 f9e1 	bl	1b310 <assert_print>
   18f4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f50:	482f      	ldr	r0, [pc, #188]	; (19010 <z_impl_k_poll+0x15c>)
   18f52:	e7cc      	b.n	18eee <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   18f54:	482d      	ldr	r0, [pc, #180]	; (1900c <z_impl_k_poll+0x158>)
   18f56:	f7fd f9e9 	bl	1632c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   18f5a:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   18f5e:	b9bc      	cbnz	r4, 18f90 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   18f60:	4628      	mov	r0, r5
   18f62:	4652      	mov	r2, sl
   18f64:	4649      	mov	r1, r9
   18f66:	f7ff fef3 	bl	18d50 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f6a:	4828      	ldr	r0, [pc, #160]	; (1900c <z_impl_k_poll+0x158>)
   18f6c:	f7fd f9d0 	bl	16310 <z_spin_unlock_valid>
   18f70:	b930      	cbnz	r0, 18f80 <z_impl_k_poll+0xcc>
   18f72:	4927      	ldr	r1, [pc, #156]	; (19010 <z_impl_k_poll+0x15c>)
   18f74:	22c2      	movs	r2, #194	; 0xc2
   18f76:	4824      	ldr	r0, [pc, #144]	; (19008 <z_impl_k_poll+0x154>)
   18f78:	f002 f9ca 	bl	1b310 <assert_print>
   18f7c:	21c2      	movs	r1, #194	; 0xc2
   18f7e:	e7e7      	b.n	18f50 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   18f80:	f38a 8811 	msr	BASEPRI, sl
   18f84:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   18f88:	4620      	mov	r0, r4
   18f8a:	b003      	add	sp, #12
   18f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18f90:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   18f94:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18f98:	d10b      	bne.n	18fb2 <z_impl_k_poll+0xfe>
   18f9a:	481c      	ldr	r0, [pc, #112]	; (1900c <z_impl_k_poll+0x158>)
   18f9c:	f7fd f9b8 	bl	16310 <z_spin_unlock_valid>
   18fa0:	2800      	cmp	r0, #0
   18fa2:	d0e6      	beq.n	18f72 <z_impl_k_poll+0xbe>
   18fa4:	f38a 8811 	msr	BASEPRI, sl
   18fa8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   18fac:	f06f 040a 	mvn.w	r4, #10
   18fb0:	e7ea      	b.n	18f88 <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   18fb2:	4651      	mov	r1, sl
   18fb4:	e9cd 7600 	strd	r7, r6, [sp]
   18fb8:	4a16      	ldr	r2, [pc, #88]	; (19014 <z_impl_k_poll+0x160>)
   18fba:	4814      	ldr	r0, [pc, #80]	; (1900c <z_impl_k_poll+0x158>)
   18fbc:	f7fe fe3c 	bl	17c38 <z_pend_curr>
   18fc0:	4604      	mov	r4, r0
	__asm__ volatile(
   18fc2:	f04f 0320 	mov.w	r3, #32
   18fc6:	f3ef 8611 	mrs	r6, BASEPRI
   18fca:	f383 8812 	msr	BASEPRI_MAX, r3
   18fce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fd2:	480e      	ldr	r0, [pc, #56]	; (1900c <z_impl_k_poll+0x158>)
   18fd4:	f7fd f98e 	bl	162f4 <z_spin_lock_valid>
   18fd8:	2800      	cmp	r0, #0
   18fda:	d0b3      	beq.n	18f44 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   18fdc:	480b      	ldr	r0, [pc, #44]	; (1900c <z_impl_k_poll+0x158>)
   18fde:	f7fd f9a5 	bl	1632c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   18fe2:	4628      	mov	r0, r5
   18fe4:	4632      	mov	r2, r6
   18fe6:	4649      	mov	r1, r9
   18fe8:	f7ff feb2 	bl	18d50 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fec:	4807      	ldr	r0, [pc, #28]	; (1900c <z_impl_k_poll+0x158>)
   18fee:	f7fd f98f 	bl	16310 <z_spin_unlock_valid>
   18ff2:	2800      	cmp	r0, #0
   18ff4:	d0bd      	beq.n	18f72 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   18ff6:	f386 8811 	msr	BASEPRI, r6
   18ffa:	f3bf 8f6f 	isb	sy
	return swap_rc;
   18ffe:	e7c3      	b.n	18f88 <z_impl_k_poll+0xd4>
   19000:	20006f78 	.word	0x20006f78
   19004:	000253e0 	.word	0x000253e0
   19008:	000221f8 	.word	0x000221f8
   1900c:	20006fd8 	.word	0x20006fd8
   19010:	00022232 	.word	0x00022232
   19014:	200004ec 	.word	0x200004ec

00019018 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   19018:	b570      	push	{r4, r5, r6, lr}
   1901a:	4604      	mov	r4, r0
   1901c:	460d      	mov	r5, r1
	__asm__ volatile(
   1901e:	f04f 0320 	mov.w	r3, #32
   19022:	f3ef 8611 	mrs	r6, BASEPRI
   19026:	f383 8812 	msr	BASEPRI_MAX, r3
   1902a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1902e:	481b      	ldr	r0, [pc, #108]	; (1909c <z_impl_k_poll_signal_raise+0x84>)
   19030:	f7fd f960 	bl	162f4 <z_spin_lock_valid>
   19034:	b940      	cbnz	r0, 19048 <z_impl_k_poll_signal_raise+0x30>
   19036:	491a      	ldr	r1, [pc, #104]	; (190a0 <z_impl_k_poll_signal_raise+0x88>)
   19038:	2294      	movs	r2, #148	; 0x94
   1903a:	481a      	ldr	r0, [pc, #104]	; (190a4 <z_impl_k_poll_signal_raise+0x8c>)
   1903c:	f002 f968 	bl	1b310 <assert_print>
   19040:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19042:	4817      	ldr	r0, [pc, #92]	; (190a0 <z_impl_k_poll_signal_raise+0x88>)
   19044:	f002 f95d 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   19048:	4814      	ldr	r0, [pc, #80]	; (1909c <z_impl_k_poll_signal_raise+0x84>)
   1904a:	f7fd f96f 	bl	1632c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   1904e:	2101      	movs	r1, #1
	return list->head == list;
   19050:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   19052:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19054:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   19056:	60a1      	str	r1, [r4, #8]
   19058:	d10a      	bne.n	19070 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1905a:	4810      	ldr	r0, [pc, #64]	; (1909c <z_impl_k_poll_signal_raise+0x84>)
   1905c:	f7fd f958 	bl	16310 <z_spin_unlock_valid>
   19060:	b9b0      	cbnz	r0, 19090 <z_impl_k_poll_signal_raise+0x78>
   19062:	490f      	ldr	r1, [pc, #60]	; (190a0 <z_impl_k_poll_signal_raise+0x88>)
   19064:	22c2      	movs	r2, #194	; 0xc2
   19066:	480f      	ldr	r0, [pc, #60]	; (190a4 <z_impl_k_poll_signal_raise+0x8c>)
   19068:	f002 f952 	bl	1b310 <assert_print>
   1906c:	21c2      	movs	r1, #194	; 0xc2
   1906e:	e7e8      	b.n	19042 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   19070:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19074:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19076:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19078:	2300      	movs	r3, #0
	node->prev = NULL;
   1907a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1907e:	f006 f8e5 	bl	1f24c <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   19082:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19084:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19086:	4805      	ldr	r0, [pc, #20]	; (1909c <z_impl_k_poll_signal_raise+0x84>)
   19088:	f7fe fb82 	bl	17790 <z_reschedule>
	return rc;
}
   1908c:	4620      	mov	r0, r4
   1908e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   19090:	f386 8811 	msr	BASEPRI, r6
   19094:	f3bf 8f6f 	isb	sy
		return 0;
   19098:	2400      	movs	r4, #0
   1909a:	e7f7      	b.n	1908c <z_impl_k_poll_signal_raise+0x74>
   1909c:	20006fd8 	.word	0x20006fd8
   190a0:	00022232 	.word	0x00022232
   190a4:	000221f8 	.word	0x000221f8

000190a8 <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  uint32_t events_mask)
{
   190a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   190ac:	4605      	mov	r5, r0
   190ae:	460c      	mov	r4, r1
   190b0:	4691      	mov	r9, r2
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   190b2:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   190b6:	f04f 0320 	mov.w	r3, #32
   190ba:	f3ef 8811 	mrs	r8, BASEPRI
   190be:	f383 8812 	msr	BASEPRI_MAX, r3
   190c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190c6:	4638      	mov	r0, r7
   190c8:	f7fd f914 	bl	162f4 <z_spin_lock_valid>
   190cc:	b940      	cbnz	r0, 190e0 <k_event_post_internal+0x38>
   190ce:	491f      	ldr	r1, [pc, #124]	; (1914c <k_event_post_internal+0xa4>)
   190d0:	481f      	ldr	r0, [pc, #124]	; (19150 <k_event_post_internal+0xa8>)
   190d2:	2294      	movs	r2, #148	; 0x94
   190d4:	f002 f91c 	bl	1b310 <assert_print>
   190d8:	2194      	movs	r1, #148	; 0x94
   190da:	481c      	ldr	r0, [pc, #112]	; (1914c <k_event_post_internal+0xa4>)
   190dc:	f002 f911 	bl	1b302 <assert_post_action>
	z_spin_lock_set_owner(l);
   190e0:	4638      	mov	r0, r7
   190e2:	f7fd f923 	bl	1632c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					events_mask);

	events = (event->events & ~events_mask) |
   190e6:	68ae      	ldr	r6, [r5, #8]
	return list->head == list;
   190e8:	682b      	ldr	r3, [r5, #0]
   190ea:	4074      	eors	r4, r6
   190ec:	ea04 0209 	and.w	r2, r4, r9
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   190f0:	429d      	cmp	r5, r3
   190f2:	bf08      	it	eq
   190f4:	2300      	moveq	r3, #0
   190f6:	2400      	movs	r4, #0
	events = (event->events & ~events_mask) |
   190f8:	4056      	eors	r6, r2
	event->events = events;
   190fa:	60ae      	str	r6, [r5, #8]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   190fc:	b99b      	cbnz	r3, 19126 <k_event_post_internal+0x7e>
			thread->next_event_link = head;
			head = thread;
		}
	}

	if (head != NULL) {
   190fe:	b164      	cbz	r4, 1911a <k_event_post_internal+0x72>
   19100:	2500      	movs	r5, #0
		thread = head;
		do {
			z_unpend_thread(thread);
   19102:	4620      	mov	r0, r4
   19104:	f7fe fee2 	bl	17ecc <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   19108:	4620      	mov	r0, r4
   1910a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
			thread->events = events;
   1910e:	66a6      	str	r6, [r4, #104]	; 0x68
			z_ready_thread(thread);
   19110:	f7fe fad6 	bl	176c0 <z_ready_thread>
			thread = thread->next_event_link;
   19114:	6e64      	ldr	r4, [r4, #100]	; 0x64
		} while (thread != NULL);
   19116:	2c00      	cmp	r4, #0
   19118:	d1f3      	bne.n	19102 <k_event_post_internal+0x5a>
	}

	z_reschedule(&event->lock, key);
   1911a:	4641      	mov	r1, r8
   1911c:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       events_mask);
}
   1911e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	z_reschedule(&event->lock, key);
   19122:	f7fe bb35 	b.w	17790 <z_reschedule>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   19126:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
		if (are_wait_conditions_met(thread->events, events,
   19128:	6e98      	ldr	r0, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   1912a:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   1912c:	ea00 0206 	and.w	r2, r0, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   19130:	d506      	bpl.n	19140 <k_event_post_internal+0x98>
		if (are_wait_conditions_met(thread->events, events,
   19132:	4290      	cmp	r0, r2
   19134:	d006      	beq.n	19144 <k_event_post_internal+0x9c>
	return (node == list->tail) ? NULL : node->next;
   19136:	686a      	ldr	r2, [r5, #4]
   19138:	429a      	cmp	r2, r3
   1913a:	d0e0      	beq.n	190fe <k_event_post_internal+0x56>
   1913c:	681b      	ldr	r3, [r3, #0]
   1913e:	e7dd      	b.n	190fc <k_event_post_internal+0x54>
   19140:	2a00      	cmp	r2, #0
   19142:	d0f8      	beq.n	19136 <k_event_post_internal+0x8e>
			thread->next_event_link = head;
   19144:	665c      	str	r4, [r3, #100]	; 0x64
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   19146:	461c      	mov	r4, r3
   19148:	e7f5      	b.n	19136 <k_event_post_internal+0x8e>
   1914a:	bf00      	nop
   1914c:	00022232 	.word	0x00022232
   19150:	000221f8 	.word	0x000221f8

00019154 <k_event_wait_internal>:
#include <syscalls/k_event_clear_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   19154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19158:	b085      	sub	sp, #20
   1915a:	4690      	mov	r8, r2
   1915c:	e9dd 2b0e 	ldrd	r2, fp, [sp, #56]	; 0x38
   19160:	4605      	mov	r5, r0
   19162:	460c      	mov	r4, r1
   19164:	f3ef 8105 	mrs	r1, IPSR
	uint32_t  rv = 0;
	unsigned int  wait_condition;
	struct k_thread  *thread;

	__ASSERT(((arch_is_in_isr() == false) ||
   19168:	b159      	cbz	r1, 19182 <k_event_wait_internal+0x2e>
   1916a:	ea52 010b 	orrs.w	r1, r2, fp
   1916e:	d008      	beq.n	19182 <k_event_wait_internal+0x2e>
   19170:	4937      	ldr	r1, [pc, #220]	; (19250 <k_event_wait_internal+0xfc>)
   19172:	4838      	ldr	r0, [pc, #224]	; (19254 <k_event_wait_internal+0x100>)
   19174:	22d4      	movs	r2, #212	; 0xd4
   19176:	f002 f8cb 	bl	1b310 <assert_print>
   1917a:	21d4      	movs	r1, #212	; 0xd4
   1917c:	4834      	ldr	r0, [pc, #208]	; (19250 <k_event_wait_internal+0xfc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1917e:	f002 f8c0 	bl	1b302 <assert_post_action>
   19182:	9203      	str	r2, [sp, #12]
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   19184:	2c00      	cmp	r4, #0
   19186:	d050      	beq.n	1922a <k_event_wait_internal+0xd6>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   19188:	f008 0301 	and.w	r3, r8, #1
   1918c:	9302      	str	r3, [sp, #8]
	return z_impl_z_current_get();
   1918e:	f7ff f88f 	bl	182b0 <z_impl_z_current_get>
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   19192:	f105 070c 	add.w	r7, r5, #12
   19196:	4606      	mov	r6, r0
   19198:	f04f 0120 	mov.w	r1, #32
   1919c:	f3ef 8a11 	mrs	sl, BASEPRI
   191a0:	f381 8812 	msr	BASEPRI_MAX, r1
   191a4:	f3bf 8f6f 	isb	sy
   191a8:	4638      	mov	r0, r7
   191aa:	f7fd f8a3 	bl	162f4 <z_spin_lock_valid>
   191ae:	9a03      	ldr	r2, [sp, #12]
   191b0:	b938      	cbnz	r0, 191c2 <k_event_wait_internal+0x6e>
   191b2:	4929      	ldr	r1, [pc, #164]	; (19258 <k_event_wait_internal+0x104>)
   191b4:	2294      	movs	r2, #148	; 0x94
   191b6:	4827      	ldr	r0, [pc, #156]	; (19254 <k_event_wait_internal+0x100>)
   191b8:	f002 f8aa 	bl	1b310 <assert_print>
   191bc:	2194      	movs	r1, #148	; 0x94
   191be:	4826      	ldr	r0, [pc, #152]	; (19258 <k_event_wait_internal+0x104>)
   191c0:	e7dd      	b.n	1917e <k_event_wait_internal+0x2a>
	z_spin_lock_set_owner(l);
   191c2:	4638      	mov	r0, r7
   191c4:	9203      	str	r2, [sp, #12]
   191c6:	f7fd f8b1 	bl	1632c <z_spin_lock_set_owner>

	if (options & K_EVENT_WAIT_RESET) {
   191ca:	f018 0f02 	tst.w	r8, #2
		event->events = 0;
   191ce:	bf1c      	itt	ne
   191d0:	2100      	movne	r1, #0
   191d2:	60a9      	strne	r1, [r5, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   191d4:	f8d5 9008 	ldr.w	r9, [r5, #8]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   191d8:	9b02      	ldr	r3, [sp, #8]
	if (options & K_EVENT_WAIT_RESET) {
   191da:	9a03      	ldr	r2, [sp, #12]
	uint32_t  match = current & desired;
   191dc:	ea09 0104 	and.w	r1, r9, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   191e0:	b163      	cbz	r3, 191fc <k_event_wait_internal+0xa8>
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   191e2:	428c      	cmp	r4, r1
   191e4:	d10c      	bne.n	19200 <k_event_wait_internal+0xac>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191e6:	4638      	mov	r0, r7
   191e8:	f7fd f892 	bl	16310 <z_spin_unlock_valid>
   191ec:	b9b8      	cbnz	r0, 1921e <k_event_wait_internal+0xca>
   191ee:	491a      	ldr	r1, [pc, #104]	; (19258 <k_event_wait_internal+0x104>)
   191f0:	22c2      	movs	r2, #194	; 0xc2
   191f2:	4818      	ldr	r0, [pc, #96]	; (19254 <k_event_wait_internal+0x100>)
   191f4:	f002 f88c 	bl	1b310 <assert_print>
   191f8:	21c2      	movs	r1, #194	; 0xc2
   191fa:	e7e0      	b.n	191be <k_event_wait_internal+0x6a>
   191fc:	2900      	cmp	r1, #0
   191fe:	d1f2      	bne.n	191e6 <k_event_wait_internal+0x92>
		goto out;
	}

	/* Match conditions have not been met. */

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19200:	ea52 010b 	orrs.w	r1, r2, fp
   19204:	d115      	bne.n	19232 <k_event_wait_internal+0xde>
   19206:	4638      	mov	r0, r7
   19208:	f7fd f882 	bl	16310 <z_spin_unlock_valid>
   1920c:	2800      	cmp	r0, #0
   1920e:	d0ee      	beq.n	191ee <k_event_wait_internal+0x9a>
	__asm__ volatile(
   19210:	f38a 8811 	msr	BASEPRI, sl
   19214:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   19218:	f04f 0900 	mov.w	r9, #0
   1921c:	e003      	b.n	19226 <k_event_wait_internal+0xd2>
   1921e:	f38a 8811 	msr	BASEPRI, sl
   19222:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   19226:	ea04 0409 	and.w	r4, r4, r9
}
   1922a:	4620      	mov	r0, r4
   1922c:	b005      	add	sp, #20
   1922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	thread->event_options = options;
   19232:	e9c6 481a 	strd	r4, r8, [r6, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   19236:	4651      	mov	r1, sl
   19238:	e9cd 2b00 	strd	r2, fp, [sp]
   1923c:	4638      	mov	r0, r7
   1923e:	462a      	mov	r2, r5
   19240:	f7fe fcfa 	bl	17c38 <z_pend_curr>
   19244:	2800      	cmp	r0, #0
   19246:	d1e7      	bne.n	19218 <k_event_wait_internal+0xc4>
		rv = thread->events;
   19248:	f8d6 9068 	ldr.w	r9, [r6, #104]	; 0x68
   1924c:	e7eb      	b.n	19226 <k_event_wait_internal+0xd2>
   1924e:	bf00      	nop
   19250:	00025401 	.word	0x00025401
   19254:	000221f8 	.word	0x000221f8
   19258:	00022232 	.word	0x00022232

0001925c <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   1925c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1925e:	3204      	adds	r2, #4
   19260:	4605      	mov	r5, r0
   19262:	460c      	mov	r4, r1
   19264:	d217      	bcs.n	19296 <z_heap_aligned_alloc+0x3a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   19266:	2600      	movs	r6, #0
   19268:	2700      	movs	r7, #0
   1926a:	f041 0104 	orr.w	r1, r1, #4
   1926e:	e9cd 6700 	strd	r6, r7, [sp]
   19272:	f7fc fda3 	bl	15dbc <k_heap_aligned_alloc>
	if (mem == NULL) {
   19276:	b170      	cbz	r0, 19296 <z_heap_aligned_alloc+0x3a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   19278:	f840 5b04 	str.w	r5, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1927c:	b164      	cbz	r4, 19298 <z_heap_aligned_alloc+0x3c>
   1927e:	3c01      	subs	r4, #1
   19280:	4220      	tst	r0, r4
   19282:	d009      	beq.n	19298 <z_heap_aligned_alloc+0x3c>
   19284:	4905      	ldr	r1, [pc, #20]	; (1929c <z_heap_aligned_alloc+0x40>)
   19286:	4806      	ldr	r0, [pc, #24]	; (192a0 <z_heap_aligned_alloc+0x44>)
   19288:	2225      	movs	r2, #37	; 0x25
   1928a:	f002 f841 	bl	1b310 <assert_print>
   1928e:	2125      	movs	r1, #37	; 0x25
   19290:	4802      	ldr	r0, [pc, #8]	; (1929c <z_heap_aligned_alloc+0x40>)
   19292:	f002 f836 	bl	1b302 <assert_post_action>
		return NULL;
   19296:	2000      	movs	r0, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   19298:	b003      	add	sp, #12
   1929a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1929c:	00025424 	.word	0x00025424
   192a0:	000221f8 	.word	0x000221f8

000192a4 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   192a4:	2803      	cmp	r0, #3
{
   192a6:	460a      	mov	r2, r1
   192a8:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   192aa:	d901      	bls.n	192b0 <k_aligned_alloc+0xc>
   192ac:	0783      	lsls	r3, r0, #30
   192ae:	d008      	beq.n	192c2 <k_aligned_alloc+0x1e>
   192b0:	490c      	ldr	r1, [pc, #48]	; (192e4 <k_aligned_alloc+0x40>)
   192b2:	2242      	movs	r2, #66	; 0x42
   192b4:	480c      	ldr	r0, [pc, #48]	; (192e8 <k_aligned_alloc+0x44>)
   192b6:	f002 f82b 	bl	1b310 <assert_print>
   192ba:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   192bc:	4809      	ldr	r0, [pc, #36]	; (192e4 <k_aligned_alloc+0x40>)
   192be:	f002 f820 	bl	1b302 <assert_post_action>
   192c2:	1e43      	subs	r3, r0, #1
   192c4:	4203      	tst	r3, r0
   192c6:	d006      	beq.n	192d6 <k_aligned_alloc+0x32>
   192c8:	4906      	ldr	r1, [pc, #24]	; (192e4 <k_aligned_alloc+0x40>)
   192ca:	2246      	movs	r2, #70	; 0x46
   192cc:	4806      	ldr	r0, [pc, #24]	; (192e8 <k_aligned_alloc+0x44>)
   192ce:	f002 f81f 	bl	1b310 <assert_print>
   192d2:	2146      	movs	r1, #70	; 0x46
   192d4:	e7f2      	b.n	192bc <k_aligned_alloc+0x18>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   192d6:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   192d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   192dc:	4803      	ldr	r0, [pc, #12]	; (192ec <k_aligned_alloc+0x48>)
   192de:	f7ff bfbd 	b.w	1925c <z_heap_aligned_alloc>
   192e2:	bf00      	nop
   192e4:	00025424 	.word	0x00025424
   192e8:	000221f8 	.word	0x000221f8
   192ec:	200007b8 	.word	0x200007b8

000192f0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   192f0:	4b01      	ldr	r3, [pc, #4]	; (192f8 <k_thread_system_pool_assign+0x8>)
   192f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
   192f6:	4770      	bx	lr
   192f8:	200007b8 	.word	0x200007b8

000192fc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   192fc:	b538      	push	{r3, r4, r5, lr}
   192fe:	4604      	mov	r4, r0
   19300:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19302:	f005 fe3c 	bl	1ef7e <k_is_in_isr>
   19306:	b928      	cbnz	r0, 19314 <z_thread_aligned_alloc+0x18>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19308:	4b06      	ldr	r3, [pc, #24]	; (19324 <z_thread_aligned_alloc+0x28>)
   1930a:	689b      	ldr	r3, [r3, #8]
   1930c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	}

	if (heap != NULL) {
   19310:	b90b      	cbnz	r3, 19316 <z_thread_aligned_alloc+0x1a>
	} else {
		ret = NULL;
	}

	return ret;
}
   19312:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   19314:	4b04      	ldr	r3, [pc, #16]	; (19328 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   19316:	462a      	mov	r2, r5
   19318:	4621      	mov	r1, r4
   1931a:	4618      	mov	r0, r3
}
   1931c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   19320:	f7ff bf9c 	b.w	1925c <z_heap_aligned_alloc>
   19324:	20006f78 	.word	0x20006f78
   19328:	200007b8 	.word	0x200007b8

0001932c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1932c:	4801      	ldr	r0, [pc, #4]	; (19334 <boot_banner+0x8>)
   1932e:	f001 bd44 	b.w	1adba <printk>
   19332:	bf00      	nop
   19334:	00025448 	.word	0x00025448

00019338 <cosf>:
   19338:	ee10 3a10 	vmov	r3, s0
   1933c:	b507      	push	{r0, r1, r2, lr}
   1933e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   19342:	4a1d      	ldr	r2, [pc, #116]	; (193b8 <cosf+0x80>)
   19344:	4293      	cmp	r3, r2
   19346:	d806      	bhi.n	19356 <cosf+0x1e>
   19348:	eddf 0a1c 	vldr	s1, [pc, #112]	; 193bc <cosf+0x84>
   1934c:	b003      	add	sp, #12
   1934e:	f85d eb04 	ldr.w	lr, [sp], #4
   19352:	f000 bde7 	b.w	19f24 <__kernel_cosf>
   19356:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1935a:	d304      	bcc.n	19366 <cosf+0x2e>
   1935c:	ee30 0a40 	vsub.f32	s0, s0, s0
   19360:	b003      	add	sp, #12
   19362:	f85d fb04 	ldr.w	pc, [sp], #4
   19366:	4668      	mov	r0, sp
   19368:	f000 fcae 	bl	19cc8 <__ieee754_rem_pio2f>
   1936c:	f000 0003 	and.w	r0, r0, #3
   19370:	2801      	cmp	r0, #1
   19372:	d009      	beq.n	19388 <cosf+0x50>
   19374:	2802      	cmp	r0, #2
   19376:	d010      	beq.n	1939a <cosf+0x62>
   19378:	b9b0      	cbnz	r0, 193a8 <cosf+0x70>
   1937a:	eddd 0a01 	vldr	s1, [sp, #4]
   1937e:	ed9d 0a00 	vldr	s0, [sp]
   19382:	f000 fdcf 	bl	19f24 <__kernel_cosf>
   19386:	e7eb      	b.n	19360 <cosf+0x28>
   19388:	eddd 0a01 	vldr	s1, [sp, #4]
   1938c:	ed9d 0a00 	vldr	s0, [sp]
   19390:	f001 f8a0 	bl	1a4d4 <__kernel_sinf>
   19394:	eeb1 0a40 	vneg.f32	s0, s0
   19398:	e7e2      	b.n	19360 <cosf+0x28>
   1939a:	eddd 0a01 	vldr	s1, [sp, #4]
   1939e:	ed9d 0a00 	vldr	s0, [sp]
   193a2:	f000 fdbf 	bl	19f24 <__kernel_cosf>
   193a6:	e7f5      	b.n	19394 <cosf+0x5c>
   193a8:	2001      	movs	r0, #1
   193aa:	eddd 0a01 	vldr	s1, [sp, #4]
   193ae:	ed9d 0a00 	vldr	s0, [sp]
   193b2:	f001 f88f 	bl	1a4d4 <__kernel_sinf>
   193b6:	e7d3      	b.n	19360 <cosf+0x28>
   193b8:	3f490fd8 	.word	0x3f490fd8
   193bc:	00000000 	.word	0x00000000

000193c0 <sinf>:
   193c0:	ee10 3a10 	vmov	r3, s0
   193c4:	b507      	push	{r0, r1, r2, lr}
   193c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   193ca:	4a1e      	ldr	r2, [pc, #120]	; (19444 <sinf+0x84>)
   193cc:	4293      	cmp	r3, r2
   193ce:	d807      	bhi.n	193e0 <sinf+0x20>
   193d0:	2000      	movs	r0, #0
   193d2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 19448 <sinf+0x88>
   193d6:	b003      	add	sp, #12
   193d8:	f85d eb04 	ldr.w	lr, [sp], #4
   193dc:	f001 b87a 	b.w	1a4d4 <__kernel_sinf>
   193e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   193e4:	d304      	bcc.n	193f0 <sinf+0x30>
   193e6:	ee30 0a40 	vsub.f32	s0, s0, s0
   193ea:	b003      	add	sp, #12
   193ec:	f85d fb04 	ldr.w	pc, [sp], #4
   193f0:	4668      	mov	r0, sp
   193f2:	f000 fc69 	bl	19cc8 <__ieee754_rem_pio2f>
   193f6:	f000 0003 	and.w	r0, r0, #3
   193fa:	2801      	cmp	r0, #1
   193fc:	d00a      	beq.n	19414 <sinf+0x54>
   193fe:	2802      	cmp	r0, #2
   19400:	d00f      	beq.n	19422 <sinf+0x62>
   19402:	b9c0      	cbnz	r0, 19436 <sinf+0x76>
   19404:	2001      	movs	r0, #1
   19406:	eddd 0a01 	vldr	s1, [sp, #4]
   1940a:	ed9d 0a00 	vldr	s0, [sp]
   1940e:	f001 f861 	bl	1a4d4 <__kernel_sinf>
   19412:	e7ea      	b.n	193ea <sinf+0x2a>
   19414:	eddd 0a01 	vldr	s1, [sp, #4]
   19418:	ed9d 0a00 	vldr	s0, [sp]
   1941c:	f000 fd82 	bl	19f24 <__kernel_cosf>
   19420:	e7e3      	b.n	193ea <sinf+0x2a>
   19422:	2001      	movs	r0, #1
   19424:	eddd 0a01 	vldr	s1, [sp, #4]
   19428:	ed9d 0a00 	vldr	s0, [sp]
   1942c:	f001 f852 	bl	1a4d4 <__kernel_sinf>
   19430:	eeb1 0a40 	vneg.f32	s0, s0
   19434:	e7d9      	b.n	193ea <sinf+0x2a>
   19436:	eddd 0a01 	vldr	s1, [sp, #4]
   1943a:	ed9d 0a00 	vldr	s0, [sp]
   1943e:	f000 fd71 	bl	19f24 <__kernel_cosf>
   19442:	e7f5      	b.n	19430 <sinf+0x70>
   19444:	3f490fd8 	.word	0x3f490fd8
   19448:	00000000 	.word	0x00000000

0001944c <powf>:
   1944c:	b508      	push	{r3, lr}
   1944e:	ed2d 8b04 	vpush	{d8-d9}
   19452:	eeb0 9a40 	vmov.f32	s18, s0
   19456:	eef0 8a60 	vmov.f32	s17, s1
   1945a:	f000 f953 	bl	19704 <__ieee754_powf>
   1945e:	4b43      	ldr	r3, [pc, #268]	; (1956c <powf+0x120>)
   19460:	eeb0 8a40 	vmov.f32	s16, s0
   19464:	f993 3000 	ldrsb.w	r3, [r3]
   19468:	3301      	adds	r3, #1
   1946a:	d011      	beq.n	19490 <powf+0x44>
   1946c:	eef4 8a68 	vcmp.f32	s17, s17
   19470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19474:	d60c      	bvs.n	19490 <powf+0x44>
   19476:	eeb4 9a49 	vcmp.f32	s18, s18
   1947a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1947e:	d70c      	bvc.n	1949a <powf+0x4e>
   19480:	eef5 8a40 	vcmp.f32	s17, #0.0
   19484:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   19488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1948c:	fe07 8a80 	vseleq.f32	s16, s15, s0
   19490:	eeb0 0a48 	vmov.f32	s0, s16
   19494:	ecbd 8b04 	vpop	{d8-d9}
   19498:	bd08      	pop	{r3, pc}
   1949a:	eddf 9a35 	vldr	s19, [pc, #212]	; 19570 <powf+0x124>
   1949e:	eeb4 9a69 	vcmp.f32	s18, s19
   194a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194a6:	d116      	bne.n	194d6 <powf+0x8a>
   194a8:	eef4 8a69 	vcmp.f32	s17, s19
   194ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194b0:	d058      	beq.n	19564 <powf+0x118>
   194b2:	eeb0 0a68 	vmov.f32	s0, s17
   194b6:	f005 ff65 	bl	1f384 <finitef>
   194ba:	2800      	cmp	r0, #0
   194bc:	d0e8      	beq.n	19490 <powf+0x44>
   194be:	eef4 8ae9 	vcmpe.f32	s17, s19
   194c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194c6:	d5e3      	bpl.n	19490 <powf+0x44>
   194c8:	f002 fdab 	bl	1c022 <__errno>
   194cc:	2321      	movs	r3, #33	; 0x21
   194ce:	6003      	str	r3, [r0, #0]
   194d0:	ed9f 8a28 	vldr	s16, [pc, #160]	; 19574 <powf+0x128>
   194d4:	e7dc      	b.n	19490 <powf+0x44>
   194d6:	f005 ff55 	bl	1f384 <finitef>
   194da:	bb58      	cbnz	r0, 19534 <powf+0xe8>
   194dc:	eeb0 0a49 	vmov.f32	s0, s18
   194e0:	f005 ff50 	bl	1f384 <finitef>
   194e4:	b330      	cbz	r0, 19534 <powf+0xe8>
   194e6:	eeb0 0a68 	vmov.f32	s0, s17
   194ea:	f005 ff4b 	bl	1f384 <finitef>
   194ee:	b308      	cbz	r0, 19534 <powf+0xe8>
   194f0:	eeb4 8a48 	vcmp.f32	s16, s16
   194f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194f8:	d706      	bvc.n	19508 <powf+0xbc>
   194fa:	f002 fd92 	bl	1c022 <__errno>
   194fe:	2321      	movs	r3, #33	; 0x21
   19500:	ee89 8aa9 	vdiv.f32	s16, s19, s19
   19504:	6003      	str	r3, [r0, #0]
   19506:	e7c3      	b.n	19490 <powf+0x44>
   19508:	f002 fd8b 	bl	1c022 <__errno>
   1950c:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   19510:	2322      	movs	r3, #34	; 0x22
   19512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19516:	6003      	str	r3, [r0, #0]
   19518:	d402      	bmi.n	19520 <powf+0xd4>
   1951a:	ed9f 8a17 	vldr	s16, [pc, #92]	; 19578 <powf+0x12c>
   1951e:	e7b7      	b.n	19490 <powf+0x44>
   19520:	eeb0 0a68 	vmov.f32	s0, s17
   19524:	f005 ff3b 	bl	1f39e <rintf>
   19528:	eeb4 0a68 	vcmp.f32	s0, s17
   1952c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19530:	d0f3      	beq.n	1951a <powf+0xce>
   19532:	e7cd      	b.n	194d0 <powf+0x84>
   19534:	eeb5 8a40 	vcmp.f32	s16, #0.0
   19538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1953c:	d1a8      	bne.n	19490 <powf+0x44>
   1953e:	eeb0 0a49 	vmov.f32	s0, s18
   19542:	f005 ff1f 	bl	1f384 <finitef>
   19546:	2800      	cmp	r0, #0
   19548:	d0a2      	beq.n	19490 <powf+0x44>
   1954a:	eeb0 0a68 	vmov.f32	s0, s17
   1954e:	f005 ff19 	bl	1f384 <finitef>
   19552:	2800      	cmp	r0, #0
   19554:	d09c      	beq.n	19490 <powf+0x44>
   19556:	f002 fd64 	bl	1c022 <__errno>
   1955a:	2322      	movs	r3, #34	; 0x22
   1955c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 19570 <powf+0x124>
   19560:	6003      	str	r3, [r0, #0]
   19562:	e795      	b.n	19490 <powf+0x44>
   19564:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   19568:	e792      	b.n	19490 <powf+0x44>
   1956a:	bf00      	nop
   1956c:	20000709 	.word	0x20000709
   19570:	00000000 	.word	0x00000000
   19574:	ff800000 	.word	0xff800000
   19578:	7f800000 	.word	0x7f800000

0001957c <sqrtf>:
   1957c:	b508      	push	{r3, lr}
   1957e:	ed2d 8b02 	vpush	{d8}
   19582:	eeb0 8a40 	vmov.f32	s16, s0
   19586:	f005 fefa 	bl	1f37e <__ieee754_sqrtf>
   1958a:	4b0d      	ldr	r3, [pc, #52]	; (195c0 <sqrtf+0x44>)
   1958c:	f993 3000 	ldrsb.w	r3, [r3]
   19590:	3301      	adds	r3, #1
   19592:	d011      	beq.n	195b8 <sqrtf+0x3c>
   19594:	eeb4 8a48 	vcmp.f32	s16, s16
   19598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1959c:	d60c      	bvs.n	195b8 <sqrtf+0x3c>
   1959e:	eddf 8a09 	vldr	s17, [pc, #36]	; 195c4 <sqrtf+0x48>
   195a2:	eeb4 8ae8 	vcmpe.f32	s16, s17
   195a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   195aa:	d505      	bpl.n	195b8 <sqrtf+0x3c>
   195ac:	f002 fd39 	bl	1c022 <__errno>
   195b0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   195b4:	2321      	movs	r3, #33	; 0x21
   195b6:	6003      	str	r3, [r0, #0]
   195b8:	ecbd 8b02 	vpop	{d8}
   195bc:	bd08      	pop	{r3, pc}
   195be:	bf00      	nop
   195c0:	20000709 	.word	0x20000709
   195c4:	00000000 	.word	0x00000000

000195c8 <__ieee754_atan2f>:
   195c8:	ee10 2a90 	vmov	r2, s1
   195cc:	eef0 7a40 	vmov.f32	s15, s0
   195d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   195d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   195d8:	b510      	push	{r4, lr}
   195da:	d806      	bhi.n	195ea <__ieee754_atan2f+0x22>
   195dc:	ee10 0a10 	vmov	r0, s0
   195e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
   195e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   195e8:	d904      	bls.n	195f4 <__ieee754_atan2f+0x2c>
   195ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
   195ee:	eeb0 0a67 	vmov.f32	s0, s15
   195f2:	bd10      	pop	{r4, pc}
   195f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
   195f8:	d103      	bne.n	19602 <__ieee754_atan2f+0x3a>
   195fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   195fe:	f000 bfb1 	b.w	1a564 <atanf>
   19602:	1794      	asrs	r4, r2, #30
   19604:	f004 0402 	and.w	r4, r4, #2
   19608:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   1960c:	b93b      	cbnz	r3, 1961e <__ieee754_atan2f+0x56>
   1960e:	2c02      	cmp	r4, #2
   19610:	d05c      	beq.n	196cc <__ieee754_atan2f+0x104>
   19612:	2c03      	cmp	r4, #3
   19614:	ed9f 7a32 	vldr	s14, [pc, #200]	; 196e0 <__ieee754_atan2f+0x118>
   19618:	fe47 7a00 	vseleq.f32	s15, s14, s0
   1961c:	e7e7      	b.n	195ee <__ieee754_atan2f+0x26>
   1961e:	b939      	cbnz	r1, 19630 <__ieee754_atan2f+0x68>
   19620:	2800      	cmp	r0, #0
   19622:	eddf 7a30 	vldr	s15, [pc, #192]	; 196e4 <__ieee754_atan2f+0x11c>
   19626:	ed9f 7a30 	vldr	s14, [pc, #192]	; 196e8 <__ieee754_atan2f+0x120>
   1962a:	fe67 7a87 	vselge.f32	s15, s15, s14
   1962e:	e7de      	b.n	195ee <__ieee754_atan2f+0x26>
   19630:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   19634:	d110      	bne.n	19658 <__ieee754_atan2f+0x90>
   19636:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1963a:	f104 34ff 	add.w	r4, r4, #4294967295
   1963e:	d107      	bne.n	19650 <__ieee754_atan2f+0x88>
   19640:	2c02      	cmp	r4, #2
   19642:	d846      	bhi.n	196d2 <__ieee754_atan2f+0x10a>
   19644:	4b29      	ldr	r3, [pc, #164]	; (196ec <__ieee754_atan2f+0x124>)
   19646:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1964a:	edd3 7a00 	vldr	s15, [r3]
   1964e:	e7ce      	b.n	195ee <__ieee754_atan2f+0x26>
   19650:	2c02      	cmp	r4, #2
   19652:	d841      	bhi.n	196d8 <__ieee754_atan2f+0x110>
   19654:	4b26      	ldr	r3, [pc, #152]	; (196f0 <__ieee754_atan2f+0x128>)
   19656:	e7f6      	b.n	19646 <__ieee754_atan2f+0x7e>
   19658:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1965c:	d0e0      	beq.n	19620 <__ieee754_atan2f+0x58>
   1965e:	1a5b      	subs	r3, r3, r1
   19660:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
   19664:	ea4f 51e3 	mov.w	r1, r3, asr #23
   19668:	da1a      	bge.n	196a0 <__ieee754_atan2f+0xd8>
   1966a:	2a00      	cmp	r2, #0
   1966c:	da01      	bge.n	19672 <__ieee754_atan2f+0xaa>
   1966e:	313c      	adds	r1, #60	; 0x3c
   19670:	db19      	blt.n	196a6 <__ieee754_atan2f+0xde>
   19672:	ee87 0aa0 	vdiv.f32	s0, s15, s1
   19676:	f005 fe77 	bl	1f368 <fabsf>
   1967a:	f000 ff73 	bl	1a564 <atanf>
   1967e:	eef0 7a40 	vmov.f32	s15, s0
   19682:	2c01      	cmp	r4, #1
   19684:	d012      	beq.n	196ac <__ieee754_atan2f+0xe4>
   19686:	2c02      	cmp	r4, #2
   19688:	d017      	beq.n	196ba <__ieee754_atan2f+0xf2>
   1968a:	2c00      	cmp	r4, #0
   1968c:	d0af      	beq.n	195ee <__ieee754_atan2f+0x26>
   1968e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 196f4 <__ieee754_atan2f+0x12c>
   19692:	ee77 7a87 	vadd.f32	s15, s15, s14
   19696:	ed9f 7a18 	vldr	s14, [pc, #96]	; 196f8 <__ieee754_atan2f+0x130>
   1969a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1969e:	e7a6      	b.n	195ee <__ieee754_atan2f+0x26>
   196a0:	eddf 7a10 	vldr	s15, [pc, #64]	; 196e4 <__ieee754_atan2f+0x11c>
   196a4:	e7ed      	b.n	19682 <__ieee754_atan2f+0xba>
   196a6:	eddf 7a15 	vldr	s15, [pc, #84]	; 196fc <__ieee754_atan2f+0x134>
   196aa:	e7ea      	b.n	19682 <__ieee754_atan2f+0xba>
   196ac:	ee17 3a90 	vmov	r3, s15
   196b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   196b4:	ee07 3a90 	vmov	s15, r3
   196b8:	e799      	b.n	195ee <__ieee754_atan2f+0x26>
   196ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 196f4 <__ieee754_atan2f+0x12c>
   196be:	ee77 7a87 	vadd.f32	s15, s15, s14
   196c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 196f8 <__ieee754_atan2f+0x130>
   196c6:	ee77 7a67 	vsub.f32	s15, s14, s15
   196ca:	e790      	b.n	195ee <__ieee754_atan2f+0x26>
   196cc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 196f8 <__ieee754_atan2f+0x130>
   196d0:	e78d      	b.n	195ee <__ieee754_atan2f+0x26>
   196d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 19700 <__ieee754_atan2f+0x138>
   196d6:	e78a      	b.n	195ee <__ieee754_atan2f+0x26>
   196d8:	eddf 7a08 	vldr	s15, [pc, #32]	; 196fc <__ieee754_atan2f+0x134>
   196dc:	e787      	b.n	195ee <__ieee754_atan2f+0x26>
   196de:	bf00      	nop
   196e0:	c0490fdb 	.word	0xc0490fdb
   196e4:	3fc90fdb 	.word	0x3fc90fdb
   196e8:	bfc90fdb 	.word	0xbfc90fdb
   196ec:	000214f4 	.word	0x000214f4
   196f0:	000214e8 	.word	0x000214e8
   196f4:	33bbbd2e 	.word	0x33bbbd2e
   196f8:	40490fdb 	.word	0x40490fdb
   196fc:	00000000 	.word	0x00000000
   19700:	3f490fdb 	.word	0x3f490fdb

00019704 <__ieee754_powf>:
   19704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19708:	ee10 4a90 	vmov	r4, s1
   1970c:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
   19710:	ed2d 8b02 	vpush	{d8}
   19714:	eeb0 8a40 	vmov.f32	s16, s0
   19718:	eef0 8a60 	vmov.f32	s17, s1
   1971c:	f000 8295 	beq.w	19c4a <__ieee754_powf+0x546>
   19720:	ee10 9a10 	vmov	r9, s0
   19724:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   19728:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1972c:	d806      	bhi.n	1973c <__ieee754_powf+0x38>
   1972e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   19732:	d90a      	bls.n	1974a <__ieee754_powf+0x46>
   19734:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   19738:	f000 8287 	beq.w	19c4a <__ieee754_powf+0x546>
   1973c:	4889      	ldr	r0, [pc, #548]	; (19964 <__ieee754_powf+0x260>)
   1973e:	ecbd 8b02 	vpop	{d8}
   19742:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19746:	f000 bfe1 	b.w	1a70c <nanf>
   1974a:	f1b9 0f00 	cmp.w	r9, #0
   1974e:	46b0      	mov	r8, r6
   19750:	da2b      	bge.n	197aa <__ieee754_powf+0xa6>
   19752:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
   19756:	d311      	bcc.n	1977c <__ieee754_powf+0x78>
   19758:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   1975c:	d028      	beq.n	197b0 <__ieee754_powf+0xac>
   1975e:	2502      	movs	r5, #2
   19760:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   19764:	d13f      	bne.n	197e6 <__ieee754_powf+0xe2>
   19766:	f1b9 0f00 	cmp.w	r9, #0
   1976a:	db69      	blt.n	19840 <__ieee754_powf+0x13c>
   1976c:	eeb0 0a48 	vmov.f32	s0, s16
   19770:	ecbd 8b02 	vpop	{d8}
   19774:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19778:	f005 be01 	b.w	1f37e <__ieee754_sqrtf>
   1977c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   19780:	d329      	bcc.n	197d6 <__ieee754_powf+0xd2>
   19782:	15fb      	asrs	r3, r7, #23
   19784:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
   19788:	fa47 f503 	asr.w	r5, r7, r3
   1978c:	fa05 f303 	lsl.w	r3, r5, r3
   19790:	42bb      	cmp	r3, r7
   19792:	d13a      	bne.n	1980a <__ieee754_powf+0x106>
   19794:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   19798:	d13f      	bne.n	1981a <__ieee754_powf+0x116>
   1979a:	2c00      	cmp	r4, #0
   1979c:	f280 825b 	bge.w	19c56 <__ieee754_powf+0x552>
   197a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   197a4:	ee87 0a88 	vdiv.f32	s0, s15, s16
   197a8:	e00c      	b.n	197c4 <__ieee754_powf+0xc0>
   197aa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
   197ae:	d13c      	bne.n	1982a <__ieee754_powf+0x126>
   197b0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   197b4:	f000 8249 	beq.w	19c4a <__ieee754_powf+0x546>
   197b8:	d908      	bls.n	197cc <__ieee754_powf+0xc8>
   197ba:	2c00      	cmp	r4, #0
   197bc:	f280 8248 	bge.w	19c50 <__ieee754_powf+0x54c>
   197c0:	ed9f 0a69 	vldr	s0, [pc, #420]	; 19968 <__ieee754_powf+0x264>
   197c4:	ecbd 8b02 	vpop	{d8}
   197c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   197cc:	2c00      	cmp	r4, #0
   197ce:	daf7      	bge.n	197c0 <__ieee754_powf+0xbc>
   197d0:	eeb1 0a68 	vneg.f32	s0, s17
   197d4:	e7f6      	b.n	197c4 <__ieee754_powf+0xc0>
   197d6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   197da:	d02c      	beq.n	19836 <__ieee754_powf+0x132>
   197dc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   197e0:	f04f 0500 	mov.w	r5, #0
   197e4:	d02c      	beq.n	19840 <__ieee754_powf+0x13c>
   197e6:	eeb0 0a48 	vmov.f32	s0, s16
   197ea:	f005 fdbd 	bl	1f368 <fabsf>
   197ee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   197f2:	d003      	beq.n	197fc <__ieee754_powf+0xf8>
   197f4:	b116      	cbz	r6, 197fc <__ieee754_powf+0xf8>
   197f6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   197fa:	d13b      	bne.n	19874 <__ieee754_powf+0x170>
   197fc:	2c00      	cmp	r4, #0
   197fe:	bfbc      	itt	lt
   19800:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
   19804:	ee87 0a80 	vdivlt.f32	s0, s15, s0
   19808:	e023      	b.n	19852 <__ieee754_powf+0x14e>
   1980a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1980e:	d0c4      	beq.n	1979a <__ieee754_powf+0x96>
   19810:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   19814:	d00f      	beq.n	19836 <__ieee754_powf+0x132>
   19816:	2500      	movs	r5, #0
   19818:	e7e5      	b.n	197e6 <__ieee754_powf+0xe2>
   1981a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1981e:	d00a      	beq.n	19836 <__ieee754_powf+0x132>
   19820:	f005 0501 	and.w	r5, r5, #1
   19824:	f1c5 0502 	rsb	r5, r5, #2
   19828:	e7dd      	b.n	197e6 <__ieee754_powf+0xe2>
   1982a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
   1982e:	d0b4      	beq.n	1979a <__ieee754_powf+0x96>
   19830:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   19834:	d102      	bne.n	1983c <__ieee754_powf+0x138>
   19836:	ee28 0a08 	vmul.f32	s0, s16, s16
   1983a:	e7c3      	b.n	197c4 <__ieee754_powf+0xc0>
   1983c:	2500      	movs	r5, #0
   1983e:	e78f      	b.n	19760 <__ieee754_powf+0x5c>
   19840:	eeb0 0a48 	vmov.f32	s0, s16
   19844:	f005 fd90 	bl	1f368 <fabsf>
   19848:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   1984c:	d001      	beq.n	19852 <__ieee754_powf+0x14e>
   1984e:	2e00      	cmp	r6, #0
   19850:	d1d1      	bne.n	197f6 <__ieee754_powf+0xf2>
   19852:	f1b9 0f00 	cmp.w	r9, #0
   19856:	dab5      	bge.n	197c4 <__ieee754_powf+0xc0>
   19858:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
   1985c:	432e      	orrs	r6, r5
   1985e:	d104      	bne.n	1986a <__ieee754_powf+0x166>
   19860:	ee70 7a40 	vsub.f32	s15, s0, s0
   19864:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   19868:	e7ac      	b.n	197c4 <__ieee754_powf+0xc0>
   1986a:	2d01      	cmp	r5, #1
   1986c:	d1aa      	bne.n	197c4 <__ieee754_powf+0xc0>
   1986e:	eeb1 0a40 	vneg.f32	s0, s0
   19872:	e7a7      	b.n	197c4 <__ieee754_powf+0xc0>
   19874:	ea4f 70d9 	mov.w	r0, r9, lsr #31
   19878:	3801      	subs	r0, #1
   1987a:	ea55 0300 	orrs.w	r3, r5, r0
   1987e:	d104      	bne.n	1988a <__ieee754_powf+0x186>
   19880:	ee38 8a48 	vsub.f32	s16, s16, s16
   19884:	ee88 0a08 	vdiv.f32	s0, s16, s16
   19888:	e79c      	b.n	197c4 <__ieee754_powf+0xc0>
   1988a:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
   1988e:	d97d      	bls.n	1998c <__ieee754_powf+0x288>
   19890:	4b36      	ldr	r3, [pc, #216]	; (1996c <__ieee754_powf+0x268>)
   19892:	429e      	cmp	r6, r3
   19894:	d806      	bhi.n	198a4 <__ieee754_powf+0x1a0>
   19896:	2c00      	cmp	r4, #0
   19898:	da92      	bge.n	197c0 <__ieee754_powf+0xbc>
   1989a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 19970 <__ieee754_powf+0x26c>
   1989e:	ee20 0a00 	vmul.f32	s0, s0, s0
   198a2:	e78f      	b.n	197c4 <__ieee754_powf+0xc0>
   198a4:	4b33      	ldr	r3, [pc, #204]	; (19974 <__ieee754_powf+0x270>)
   198a6:	429e      	cmp	r6, r3
   198a8:	d902      	bls.n	198b0 <__ieee754_powf+0x1ac>
   198aa:	2c00      	cmp	r4, #0
   198ac:	dcf5      	bgt.n	1989a <__ieee754_powf+0x196>
   198ae:	e787      	b.n	197c0 <__ieee754_powf+0xbc>
   198b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   198b4:	eddf 6a30 	vldr	s13, [pc, #192]	; 19978 <__ieee754_powf+0x274>
   198b8:	ee30 0a67 	vsub.f32	s0, s0, s15
   198bc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   198c0:	ee20 7a00 	vmul.f32	s14, s0, s0
   198c4:	eee0 6a67 	vfms.f32	s13, s0, s15
   198c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   198cc:	eee6 7ac0 	vfms.f32	s15, s13, s0
   198d0:	ee27 7a27 	vmul.f32	s14, s14, s15
   198d4:	eddf 7a29 	vldr	s15, [pc, #164]	; 1997c <__ieee754_powf+0x278>
   198d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   198dc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 19980 <__ieee754_powf+0x27c>
   198e0:	eee0 7a07 	vfma.f32	s15, s0, s14
   198e4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 19984 <__ieee754_powf+0x280>
   198e8:	eef0 6a67 	vmov.f32	s13, s15
   198ec:	eee0 6a07 	vfma.f32	s13, s0, s14
   198f0:	ee16 3a90 	vmov	r3, s13
   198f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   198f8:	f023 030f 	bic.w	r3, r3, #15
   198fc:	ee06 3a90 	vmov	s13, r3
   19900:	eee0 6a47 	vfms.f32	s13, s0, s14
   19904:	ee77 7ae6 	vsub.f32	s15, s15, s13
   19908:	3d01      	subs	r5, #1
   1990a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1990e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   19912:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   19916:	4305      	orrs	r5, r0
   19918:	f024 040f 	bic.w	r4, r4, #15
   1991c:	ee67 0aa8 	vmul.f32	s1, s15, s17
   19920:	ee07 3a90 	vmov	s15, r3
   19924:	fe08 8a07 	vseleq.f32	s16, s16, s14
   19928:	ee07 4a10 	vmov	s14, r4
   1992c:	ee38 7ac7 	vsub.f32	s14, s17, s14
   19930:	eee7 0a27 	vfma.f32	s1, s14, s15
   19934:	ee07 4a10 	vmov	s14, r4
   19938:	ee67 7a87 	vmul.f32	s15, s15, s14
   1993c:	ee30 7aa7 	vadd.f32	s14, s1, s15
   19940:	ee17 1a10 	vmov	r1, s14
   19944:	2900      	cmp	r1, #0
   19946:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1994a:	f340 80f0 	ble.w	19b2e <__ieee754_powf+0x42a>
   1994e:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   19952:	f240 80dd 	bls.w	19b10 <__ieee754_powf+0x40c>
   19956:	eddf 7a06 	vldr	s15, [pc, #24]	; 19970 <__ieee754_powf+0x26c>
   1995a:	ee28 0a27 	vmul.f32	s0, s16, s15
   1995e:	ee20 0a27 	vmul.f32	s0, s0, s15
   19962:	e72f      	b.n	197c4 <__ieee754_powf+0xc0>
   19964:	00024616 	.word	0x00024616
   19968:	00000000 	.word	0x00000000
   1996c:	3f7ffff7 	.word	0x3f7ffff7
   19970:	7149f2ca 	.word	0x7149f2ca
   19974:	3f800007 	.word	0x3f800007
   19978:	3eaaaaab 	.word	0x3eaaaaab
   1997c:	3fb8aa3b 	.word	0x3fb8aa3b
   19980:	36eca570 	.word	0x36eca570
   19984:	3fb8aa00 	.word	0x3fb8aa00
   19988:	4b800000 	.word	0x4b800000
   1998c:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
   19990:	bf05      	ittet	eq
   19992:	ed5f 7a03 	vldreq	s15, [pc, #-12]	; 19988 <__ieee754_powf+0x284>
   19996:	f06f 0317 	mvneq.w	r3, #23
   1999a:	2300      	movne	r3, #0
   1999c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
   199a0:	bf08      	it	eq
   199a2:	ee17 8a90 	vmoveq	r8, s15
   199a6:	ea4f 52e8 	mov.w	r2, r8, asr #23
   199aa:	f3c8 0816 	ubfx	r8, r8, #0, #23
   199ae:	3a7f      	subs	r2, #127	; 0x7f
   199b0:	f048 517e 	orr.w	r1, r8, #1065353216	; 0x3f800000
   199b4:	441a      	add	r2, r3
   199b6:	4ba9      	ldr	r3, [pc, #676]	; (19c5c <__ieee754_powf+0x558>)
   199b8:	4598      	cmp	r8, r3
   199ba:	dd06      	ble.n	199ca <__ieee754_powf+0x2c6>
   199bc:	4ba8      	ldr	r3, [pc, #672]	; (19c60 <__ieee754_powf+0x55c>)
   199be:	4598      	cmp	r8, r3
   199c0:	f340 80a4 	ble.w	19b0c <__ieee754_powf+0x408>
   199c4:	3201      	adds	r2, #1
   199c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
   199ca:	2600      	movs	r6, #0
   199cc:	4ba5      	ldr	r3, [pc, #660]	; (19c64 <__ieee754_powf+0x560>)
   199ce:	ee07 1a10 	vmov	s14, r1
   199d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   199d6:	1049      	asrs	r1, r1, #1
   199d8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   199dc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
   199e0:	edd3 5a00 	vldr	s11, [r3]
   199e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   199e8:	4b9f      	ldr	r3, [pc, #636]	; (19c68 <__ieee754_powf+0x564>)
   199ea:	ee75 7a87 	vadd.f32	s15, s11, s14
   199ee:	ee37 6a65 	vsub.f32	s12, s14, s11
   199f2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
   199f6:	eec6 4aa7 	vdiv.f32	s9, s13, s15
   199fa:	ee07 1a90 	vmov	s15, r1
   199fe:	ee77 5ae5 	vsub.f32	s11, s15, s11
   19a02:	ee37 7a65 	vsub.f32	s14, s14, s11
   19a06:	eddf 5a99 	vldr	s11, [pc, #612]	; 19c6c <__ieee754_powf+0x568>
   19a0a:	ee26 5a24 	vmul.f32	s10, s12, s9
   19a0e:	ee15 7a10 	vmov	r7, s10
   19a12:	401f      	ands	r7, r3
   19a14:	ee06 7a90 	vmov	s13, r7
   19a18:	eea6 6ae7 	vfms.f32	s12, s13, s15
   19a1c:	ee65 7a05 	vmul.f32	s15, s10, s10
   19a20:	eea6 6ac7 	vfms.f32	s12, s13, s14
   19a24:	ed9f 7a92 	vldr	s14, [pc, #584]	; 19c70 <__ieee754_powf+0x56c>
   19a28:	eee7 5a87 	vfma.f32	s11, s15, s14
   19a2c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 19c74 <__ieee754_powf+0x570>
   19a30:	ee26 6a24 	vmul.f32	s12, s12, s9
   19a34:	ee67 4aa7 	vmul.f32	s9, s15, s15
   19a38:	eea5 7aa7 	vfma.f32	s14, s11, s15
   19a3c:	eddf 5a8e 	vldr	s11, [pc, #568]	; 19c78 <__ieee754_powf+0x574>
   19a40:	eee7 5a27 	vfma.f32	s11, s14, s15
   19a44:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 19c7c <__ieee754_powf+0x578>
   19a48:	eea5 7aa7 	vfma.f32	s14, s11, s15
   19a4c:	eddf 5a8c 	vldr	s11, [pc, #560]	; 19c80 <__ieee754_powf+0x57c>
   19a50:	eee7 5a27 	vfma.f32	s11, s14, s15
   19a54:	ee35 7a26 	vadd.f32	s14, s10, s13
   19a58:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   19a5c:	ee27 7a06 	vmul.f32	s14, s14, s12
   19a60:	eea4 7aa5 	vfma.f32	s14, s9, s11
   19a64:	eef0 5a67 	vmov.f32	s11, s15
   19a68:	eee6 5aa6 	vfma.f32	s11, s13, s13
   19a6c:	ee75 5a87 	vadd.f32	s11, s11, s14
   19a70:	ee15 1a90 	vmov	r1, s11
   19a74:	4019      	ands	r1, r3
   19a76:	ee05 1a90 	vmov	s11, r1
   19a7a:	ee75 7ae7 	vsub.f32	s15, s11, s15
   19a7e:	eee6 7ae6 	vfms.f32	s15, s13, s13
   19a82:	ee77 7a67 	vsub.f32	s15, s14, s15
   19a86:	ee67 7a85 	vmul.f32	s15, s15, s10
   19a8a:	eee6 7a25 	vfma.f32	s15, s12, s11
   19a8e:	eeb0 6a67 	vmov.f32	s12, s15
   19a92:	eea6 6aa5 	vfma.f32	s12, s13, s11
   19a96:	ee16 1a10 	vmov	r1, s12
   19a9a:	4019      	ands	r1, r3
   19a9c:	ee06 1a10 	vmov	s12, r1
   19aa0:	4978      	ldr	r1, [pc, #480]	; (19c84 <__ieee754_powf+0x580>)
   19aa2:	eeb0 7a46 	vmov.f32	s14, s12
   19aa6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   19aaa:	eea6 7ae5 	vfms.f32	s14, s13, s11
   19aae:	eddf 5a76 	vldr	s11, [pc, #472]	; 19c88 <__ieee754_powf+0x584>
   19ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19ab6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 19c8c <__ieee754_powf+0x588>
   19aba:	ee67 7a87 	vmul.f32	s15, s15, s14
   19abe:	ed9f 7a74 	vldr	s14, [pc, #464]	; 19c90 <__ieee754_powf+0x58c>
   19ac2:	eee6 7a07 	vfma.f32	s15, s12, s14
   19ac6:	ed91 7a00 	vldr	s14, [r1]
   19aca:	ee77 7a87 	vadd.f32	s15, s15, s14
   19ace:	ee07 2a10 	vmov	s14, r2
   19ad2:	4a70      	ldr	r2, [pc, #448]	; (19c94 <__ieee754_powf+0x590>)
   19ad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   19ad8:	eef0 6a67 	vmov.f32	s13, s15
   19adc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   19ae0:	ed92 5a00 	vldr	s10, [r2]
   19ae4:	eee6 6a25 	vfma.f32	s13, s12, s11
   19ae8:	ee76 6a85 	vadd.f32	s13, s13, s10
   19aec:	ee76 6a87 	vadd.f32	s13, s13, s14
   19af0:	ee16 2a90 	vmov	r2, s13
   19af4:	4013      	ands	r3, r2
   19af6:	ee06 3a90 	vmov	s13, r3
   19afa:	ee36 7ac7 	vsub.f32	s14, s13, s14
   19afe:	ee37 7a45 	vsub.f32	s14, s14, s10
   19b02:	eea6 7a65 	vfms.f32	s14, s12, s11
   19b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19b0a:	e6fd      	b.n	19908 <__ieee754_powf+0x204>
   19b0c:	2601      	movs	r6, #1
   19b0e:	e75d      	b.n	199cc <__ieee754_powf+0x2c8>
   19b10:	d11c      	bne.n	19b4c <__ieee754_powf+0x448>
   19b12:	eddf 6a61 	vldr	s13, [pc, #388]	; 19c98 <__ieee754_powf+0x594>
   19b16:	ee37 7a67 	vsub.f32	s14, s14, s15
   19b1a:	ee70 6aa6 	vadd.f32	s13, s1, s13
   19b1e:	eef4 6ac7 	vcmpe.f32	s13, s14
   19b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19b26:	f73f af16 	bgt.w	19956 <__ieee754_powf+0x252>
   19b2a:	2386      	movs	r3, #134	; 0x86
   19b2c:	e012      	b.n	19b54 <__ieee754_powf+0x450>
   19b2e:	4a5b      	ldr	r2, [pc, #364]	; (19c9c <__ieee754_powf+0x598>)
   19b30:	4293      	cmp	r3, r2
   19b32:	d902      	bls.n	19b3a <__ieee754_powf+0x436>
   19b34:	eddf 7a5a 	vldr	s15, [pc, #360]	; 19ca0 <__ieee754_powf+0x59c>
   19b38:	e70f      	b.n	1995a <__ieee754_powf+0x256>
   19b3a:	d107      	bne.n	19b4c <__ieee754_powf+0x448>
   19b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
   19b40:	eeb4 7ae0 	vcmpe.f32	s14, s1
   19b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19b48:	dbef      	blt.n	19b2a <__ieee754_powf+0x426>
   19b4a:	e7f3      	b.n	19b34 <__ieee754_powf+0x430>
   19b4c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   19b50:	d976      	bls.n	19c40 <__ieee754_powf+0x53c>
   19b52:	15db      	asrs	r3, r3, #23
   19b54:	3b7e      	subs	r3, #126	; 0x7e
   19b56:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   19b5a:	4a52      	ldr	r2, [pc, #328]	; (19ca4 <__ieee754_powf+0x5a0>)
   19b5c:	2900      	cmp	r1, #0
   19b5e:	fa40 f003 	asr.w	r0, r0, r3
   19b62:	4408      	add	r0, r1
   19b64:	f3c0 53c7 	ubfx	r3, r0, #23, #8
   19b68:	f1a3 037f 	sub.w	r3, r3, #127	; 0x7f
   19b6c:	fa42 f203 	asr.w	r2, r2, r3
   19b70:	f1c3 0317 	rsb	r3, r3, #23
   19b74:	ea02 0200 	and.w	r2, r2, r0
   19b78:	f3c0 0016 	ubfx	r0, r0, #0, #23
   19b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   19b80:	ee07 2a10 	vmov	s14, r2
   19b84:	fa40 f003 	asr.w	r0, r0, r3
   19b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19b8c:	bfb8      	it	lt
   19b8e:	4240      	neglt	r0, r0
   19b90:	ee37 7aa0 	vadd.f32	s14, s15, s1
   19b94:	eddf 6a44 	vldr	s13, [pc, #272]	; 19ca8 <__ieee754_powf+0x5a4>
   19b98:	ed9f 6a44 	vldr	s12, [pc, #272]	; 19cac <__ieee754_powf+0x5a8>
   19b9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19ba0:	ee17 3a10 	vmov	r3, s14
   19ba4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   19ba8:	f023 030f 	bic.w	r3, r3, #15
   19bac:	ee07 3a10 	vmov	s14, r3
   19bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
   19bb4:	ee70 0ae7 	vsub.f32	s1, s1, s15
   19bb8:	eddf 7a3d 	vldr	s15, [pc, #244]	; 19cb0 <__ieee754_powf+0x5ac>
   19bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
   19bc0:	eee0 7aa6 	vfma.f32	s15, s1, s13
   19bc4:	eef0 6a67 	vmov.f32	s13, s15
   19bc8:	eee7 6a06 	vfma.f32	s13, s14, s12
   19bcc:	eef0 5a66 	vmov.f32	s11, s13
   19bd0:	eee7 5a46 	vfms.f32	s11, s14, s12
   19bd4:	ed9f 6a37 	vldr	s12, [pc, #220]	; 19cb4 <__ieee754_powf+0x5b0>
   19bd8:	ee26 7aa6 	vmul.f32	s14, s13, s13
   19bdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
   19be0:	eddf 5a35 	vldr	s11, [pc, #212]	; 19cb8 <__ieee754_powf+0x5b4>
   19be4:	eea7 6a25 	vfma.f32	s12, s14, s11
   19be8:	eddf 5a34 	vldr	s11, [pc, #208]	; 19cbc <__ieee754_powf+0x5b8>
   19bec:	eee6 7aa7 	vfma.f32	s15, s13, s15
   19bf0:	eee6 5a07 	vfma.f32	s11, s12, s14
   19bf4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 19cc0 <__ieee754_powf+0x5bc>
   19bf8:	eea5 6a87 	vfma.f32	s12, s11, s14
   19bfc:	eddf 5a31 	vldr	s11, [pc, #196]	; 19cc4 <__ieee754_powf+0x5c0>
   19c00:	eee6 5a07 	vfma.f32	s11, s12, s14
   19c04:	eeb0 6a66 	vmov.f32	s12, s13
   19c08:	eea5 6ac7 	vfms.f32	s12, s11, s14
   19c0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   19c10:	ee66 5a86 	vmul.f32	s11, s13, s12
   19c14:	ee36 6a47 	vsub.f32	s12, s12, s14
   19c18:	ee85 7a86 	vdiv.f32	s14, s11, s12
   19c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
   19c20:	ee77 7ae6 	vsub.f32	s15, s15, s13
   19c24:	ee30 0a67 	vsub.f32	s0, s0, s15
   19c28:	ee10 3a10 	vmov	r3, s0
   19c2c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
   19c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   19c34:	da06      	bge.n	19c44 <__ieee754_powf+0x540>
   19c36:	f000 fd6f 	bl	1a718 <scalbnf>
   19c3a:	ee20 0a08 	vmul.f32	s0, s0, s16
   19c3e:	e5c1      	b.n	197c4 <__ieee754_powf+0xc0>
   19c40:	2000      	movs	r0, #0
   19c42:	e7a5      	b.n	19b90 <__ieee754_powf+0x48c>
   19c44:	ee00 3a10 	vmov	s0, r3
   19c48:	e7f7      	b.n	19c3a <__ieee754_powf+0x536>
   19c4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19c4e:	e5b9      	b.n	197c4 <__ieee754_powf+0xc0>
   19c50:	eeb0 0a68 	vmov.f32	s0, s17
   19c54:	e5b6      	b.n	197c4 <__ieee754_powf+0xc0>
   19c56:	eeb0 0a48 	vmov.f32	s0, s16
   19c5a:	e5b3      	b.n	197c4 <__ieee754_powf+0xc0>
   19c5c:	001cc471 	.word	0x001cc471
   19c60:	005db3d6 	.word	0x005db3d6
   19c64:	00021510 	.word	0x00021510
   19c68:	fffff000 	.word	0xfffff000
   19c6c:	3e6c3255 	.word	0x3e6c3255
   19c70:	3e53f142 	.word	0x3e53f142
   19c74:	3e8ba305 	.word	0x3e8ba305
   19c78:	3eaaaaab 	.word	0x3eaaaaab
   19c7c:	3edb6db7 	.word	0x3edb6db7
   19c80:	3f19999a 	.word	0x3f19999a
   19c84:	00021500 	.word	0x00021500
   19c88:	3f763800 	.word	0x3f763800
   19c8c:	3f76384f 	.word	0x3f76384f
   19c90:	369dc3a0 	.word	0x369dc3a0
   19c94:	00021508 	.word	0x00021508
   19c98:	3338aa3c 	.word	0x3338aa3c
   19c9c:	43160000 	.word	0x43160000
   19ca0:	0da24260 	.word	0x0da24260
   19ca4:	ff800000 	.word	0xff800000
   19ca8:	3f317218 	.word	0x3f317218
   19cac:	3f317200 	.word	0x3f317200
   19cb0:	35bfbe8c 	.word	0x35bfbe8c
   19cb4:	b5ddea0e 	.word	0xb5ddea0e
   19cb8:	3331bb4c 	.word	0x3331bb4c
   19cbc:	388ab355 	.word	0x388ab355
   19cc0:	bb360b61 	.word	0xbb360b61
   19cc4:	3e2aaaab 	.word	0x3e2aaaab

00019cc8 <__ieee754_rem_pio2f>:
   19cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cca:	ee10 6a10 	vmov	r6, s0
   19cce:	4b87      	ldr	r3, [pc, #540]	; (19eec <__ieee754_rem_pio2f+0x224>)
   19cd0:	b087      	sub	sp, #28
   19cd2:	4604      	mov	r4, r0
   19cd4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
   19cd8:	429d      	cmp	r5, r3
   19cda:	d805      	bhi.n	19ce8 <__ieee754_rem_pio2f+0x20>
   19cdc:	2300      	movs	r3, #0
   19cde:	ed80 0a00 	vstr	s0, [r0]
   19ce2:	6043      	str	r3, [r0, #4]
   19ce4:	2000      	movs	r0, #0
   19ce6:	e022      	b.n	19d2e <__ieee754_rem_pio2f+0x66>
   19ce8:	4b81      	ldr	r3, [pc, #516]	; (19ef0 <__ieee754_rem_pio2f+0x228>)
   19cea:	429d      	cmp	r5, r3
   19cec:	d83a      	bhi.n	19d64 <__ieee754_rem_pio2f+0x9c>
   19cee:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
   19cf2:	2e00      	cmp	r6, #0
   19cf4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 19ef4 <__ieee754_rem_pio2f+0x22c>
   19cf8:	f023 030f 	bic.w	r3, r3, #15
   19cfc:	4a7e      	ldr	r2, [pc, #504]	; (19ef8 <__ieee754_rem_pio2f+0x230>)
   19cfe:	dd18      	ble.n	19d32 <__ieee754_rem_pio2f+0x6a>
   19d00:	4293      	cmp	r3, r2
   19d02:	ee70 7a47 	vsub.f32	s15, s0, s14
   19d06:	bf09      	itett	eq
   19d08:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 19efc <__ieee754_rem_pio2f+0x234>
   19d0c:	eddf 6a7c 	vldrne	s13, [pc, #496]	; 19f00 <__ieee754_rem_pio2f+0x238>
   19d10:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
   19d14:	eddf 6a7b 	vldreq	s13, [pc, #492]	; 19f04 <__ieee754_rem_pio2f+0x23c>
   19d18:	ee37 7ae6 	vsub.f32	s14, s15, s13
   19d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19d20:	ed80 7a00 	vstr	s14, [r0]
   19d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
   19d28:	edc0 7a01 	vstr	s15, [r0, #4]
   19d2c:	2001      	movs	r0, #1
   19d2e:	b007      	add	sp, #28
   19d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d32:	4293      	cmp	r3, r2
   19d34:	ee70 7a07 	vadd.f32	s15, s0, s14
   19d38:	bf09      	itett	eq
   19d3a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 19efc <__ieee754_rem_pio2f+0x234>
   19d3e:	eddf 6a70 	vldrne	s13, [pc, #448]	; 19f00 <__ieee754_rem_pio2f+0x238>
   19d42:	ee77 7a87 	vaddeq.f32	s15, s15, s14
   19d46:	eddf 6a6f 	vldreq	s13, [pc, #444]	; 19f04 <__ieee754_rem_pio2f+0x23c>
   19d4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
   19d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19d52:	ed80 7a00 	vstr	s14, [r0]
   19d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
   19d5a:	edc0 7a01 	vstr	s15, [r0, #4]
   19d5e:	f04f 30ff 	mov.w	r0, #4294967295
   19d62:	e7e4      	b.n	19d2e <__ieee754_rem_pio2f+0x66>
   19d64:	4b68      	ldr	r3, [pc, #416]	; (19f08 <__ieee754_rem_pio2f+0x240>)
   19d66:	429d      	cmp	r5, r3
   19d68:	d872      	bhi.n	19e50 <__ieee754_rem_pio2f+0x188>
   19d6a:	f005 fafd 	bl	1f368 <fabsf>
   19d6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   19d72:	ed9f 7a66 	vldr	s14, [pc, #408]	; 19f0c <__ieee754_rem_pio2f+0x244>
   19d76:	eee0 7a07 	vfma.f32	s15, s0, s14
   19d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   19d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   19d82:	ee17 0a90 	vmov	r0, s15
   19d86:	eddf 7a5b 	vldr	s15, [pc, #364]	; 19ef4 <__ieee754_rem_pio2f+0x22c>
   19d8a:	281f      	cmp	r0, #31
   19d8c:	eea7 0a67 	vfms.f32	s0, s14, s15
   19d90:	eddf 7a5b 	vldr	s15, [pc, #364]	; 19f00 <__ieee754_rem_pio2f+0x238>
   19d94:	eeb1 6a47 	vneg.f32	s12, s14
   19d98:	ee67 7a27 	vmul.f32	s15, s14, s15
   19d9c:	ee70 6a67 	vsub.f32	s13, s0, s15
   19da0:	ee16 1a90 	vmov	r1, s13
   19da4:	dc09      	bgt.n	19dba <__ieee754_rem_pio2f+0xf2>
   19da6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
   19daa:	1e47      	subs	r7, r0, #1
   19dac:	4a58      	ldr	r2, [pc, #352]	; (19f10 <__ieee754_rem_pio2f+0x248>)
   19dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19db2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
   19db6:	4293      	cmp	r3, r2
   19db8:	d106      	bne.n	19dc8 <__ieee754_rem_pio2f+0x100>
   19dba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
   19dbe:	15eb      	asrs	r3, r5, #23
   19dc0:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
   19dc4:	2a08      	cmp	r2, #8
   19dc6:	dc14      	bgt.n	19df2 <__ieee754_rem_pio2f+0x12a>
   19dc8:	6021      	str	r1, [r4, #0]
   19dca:	ed94 7a00 	vldr	s14, [r4]
   19dce:	2e00      	cmp	r6, #0
   19dd0:	ee30 0a47 	vsub.f32	s0, s0, s14
   19dd4:	ee30 0a67 	vsub.f32	s0, s0, s15
   19dd8:	ed84 0a01 	vstr	s0, [r4, #4]
   19ddc:	daa7      	bge.n	19d2e <__ieee754_rem_pio2f+0x66>
   19dde:	eeb1 7a47 	vneg.f32	s14, s14
   19de2:	eeb1 0a40 	vneg.f32	s0, s0
   19de6:	ed84 7a00 	vstr	s14, [r4]
   19dea:	ed84 0a01 	vstr	s0, [r4, #4]
   19dee:	4240      	negs	r0, r0
   19df0:	e79d      	b.n	19d2e <__ieee754_rem_pio2f+0x66>
   19df2:	eef0 6a40 	vmov.f32	s13, s0
   19df6:	eddf 5a41 	vldr	s11, [pc, #260]	; 19efc <__ieee754_rem_pio2f+0x234>
   19dfa:	eee6 6a25 	vfma.f32	s13, s12, s11
   19dfe:	ee70 7a66 	vsub.f32	s15, s0, s13
   19e02:	eee6 7a25 	vfma.f32	s15, s12, s11
   19e06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 19f04 <__ieee754_rem_pio2f+0x23c>
   19e0a:	eed7 7a25 	vfnms.f32	s15, s14, s11
   19e0e:	ee76 5ae7 	vsub.f32	s11, s13, s15
   19e12:	ee15 2a90 	vmov	r2, s11
   19e16:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   19e1a:	1a5b      	subs	r3, r3, r1
   19e1c:	2b19      	cmp	r3, #25
   19e1e:	dc04      	bgt.n	19e2a <__ieee754_rem_pio2f+0x162>
   19e20:	eeb0 0a66 	vmov.f32	s0, s13
   19e24:	edc4 5a00 	vstr	s11, [r4]
   19e28:	e7cf      	b.n	19dca <__ieee754_rem_pio2f+0x102>
   19e2a:	eeb0 0a66 	vmov.f32	s0, s13
   19e2e:	eddf 5a39 	vldr	s11, [pc, #228]	; 19f14 <__ieee754_rem_pio2f+0x24c>
   19e32:	eea6 0a25 	vfma.f32	s0, s12, s11
   19e36:	ee76 7ac0 	vsub.f32	s15, s13, s0
   19e3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 19f18 <__ieee754_rem_pio2f+0x250>
   19e3e:	eee6 7a25 	vfma.f32	s15, s12, s11
   19e42:	eed7 7a26 	vfnms.f32	s15, s14, s13
   19e46:	ee30 7a67 	vsub.f32	s14, s0, s15
   19e4a:	ed84 7a00 	vstr	s14, [r4]
   19e4e:	e7bc      	b.n	19dca <__ieee754_rem_pio2f+0x102>
   19e50:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
   19e54:	d306      	bcc.n	19e64 <__ieee754_rem_pio2f+0x19c>
   19e56:	ee70 7a40 	vsub.f32	s15, s0, s0
   19e5a:	edc0 7a01 	vstr	s15, [r0, #4]
   19e5e:	edc0 7a00 	vstr	s15, [r0]
   19e62:	e73f      	b.n	19ce4 <__ieee754_rem_pio2f+0x1c>
   19e64:	15ea      	asrs	r2, r5, #23
   19e66:	eddf 6a2d 	vldr	s13, [pc, #180]	; 19f1c <__ieee754_rem_pio2f+0x254>
   19e6a:	3a86      	subs	r2, #134	; 0x86
   19e6c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
   19e70:	ee07 3a90 	vmov	s15, r3
   19e74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   19e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   19e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19e80:	ed8d 7a03 	vstr	s14, [sp, #12]
   19e84:	ee67 7aa6 	vmul.f32	s15, s15, s13
   19e88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   19e8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   19e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19e94:	ed8d 7a04 	vstr	s14, [sp, #16]
   19e98:	ee67 7aa6 	vmul.f32	s15, s15, s13
   19e9c:	eef5 7a40 	vcmp.f32	s15, #0.0
   19ea0:	edcd 7a05 	vstr	s15, [sp, #20]
   19ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19ea8:	d11e      	bne.n	19ee8 <__ieee754_rem_pio2f+0x220>
   19eaa:	eeb5 7a40 	vcmp.f32	s14, #0.0
   19eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19eb2:	bf0c      	ite	eq
   19eb4:	2301      	moveq	r3, #1
   19eb6:	2302      	movne	r3, #2
   19eb8:	4919      	ldr	r1, [pc, #100]	; (19f20 <__ieee754_rem_pio2f+0x258>)
   19eba:	a803      	add	r0, sp, #12
   19ebc:	9101      	str	r1, [sp, #4]
   19ebe:	2102      	movs	r1, #2
   19ec0:	9100      	str	r1, [sp, #0]
   19ec2:	4621      	mov	r1, r4
   19ec4:	f000 f886 	bl	19fd4 <__kernel_rem_pio2f>
   19ec8:	2e00      	cmp	r6, #0
   19eca:	f6bf af30 	bge.w	19d2e <__ieee754_rem_pio2f+0x66>
   19ece:	edd4 7a00 	vldr	s15, [r4]
   19ed2:	eef1 7a67 	vneg.f32	s15, s15
   19ed6:	edc4 7a00 	vstr	s15, [r4]
   19eda:	edd4 7a01 	vldr	s15, [r4, #4]
   19ede:	eef1 7a67 	vneg.f32	s15, s15
   19ee2:	edc4 7a01 	vstr	s15, [r4, #4]
   19ee6:	e782      	b.n	19dee <__ieee754_rem_pio2f+0x126>
   19ee8:	2303      	movs	r3, #3
   19eea:	e7e5      	b.n	19eb8 <__ieee754_rem_pio2f+0x1f0>
   19eec:	3f490fd8 	.word	0x3f490fd8
   19ef0:	4016cbe3 	.word	0x4016cbe3
   19ef4:	3fc90f80 	.word	0x3fc90f80
   19ef8:	3fc90fd0 	.word	0x3fc90fd0
   19efc:	37354400 	.word	0x37354400
   19f00:	37354443 	.word	0x37354443
   19f04:	2e85a308 	.word	0x2e85a308
   19f08:	43490f80 	.word	0x43490f80
   19f0c:	3f22f984 	.word	0x3f22f984
   19f10:	00021518 	.word	0x00021518
   19f14:	2e85a300 	.word	0x2e85a300
   19f18:	248d3132 	.word	0x248d3132
   19f1c:	43800000 	.word	0x43800000
   19f20:	00021598 	.word	0x00021598

00019f24 <__kernel_cosf>:
   19f24:	ee10 3a10 	vmov	r3, s0
   19f28:	eef0 6a40 	vmov.f32	s13, s0
   19f2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   19f34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   19f38:	d204      	bcs.n	19f44 <__kernel_cosf+0x20>
   19f3a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
   19f3e:	ee17 2a90 	vmov	r2, s15
   19f42:	b342      	cbz	r2, 19f96 <__kernel_cosf+0x72>
   19f44:	ee26 7aa6 	vmul.f32	s14, s13, s13
   19f48:	eddf 7a1a 	vldr	s15, [pc, #104]	; 19fb4 <__kernel_cosf+0x90>
   19f4c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 19fb8 <__kernel_cosf+0x94>
   19f50:	ee60 0ae6 	vnmul.f32	s1, s1, s13
   19f54:	4a19      	ldr	r2, [pc, #100]	; (19fbc <__kernel_cosf+0x98>)
   19f56:	eea7 6a27 	vfma.f32	s12, s14, s15
   19f5a:	eddf 7a19 	vldr	s15, [pc, #100]	; 19fc0 <__kernel_cosf+0x9c>
   19f5e:	4293      	cmp	r3, r2
   19f60:	eee6 7a07 	vfma.f32	s15, s12, s14
   19f64:	ed9f 6a17 	vldr	s12, [pc, #92]	; 19fc4 <__kernel_cosf+0xa0>
   19f68:	eea7 6a87 	vfma.f32	s12, s15, s14
   19f6c:	eddf 7a16 	vldr	s15, [pc, #88]	; 19fc8 <__kernel_cosf+0xa4>
   19f70:	eee6 7a07 	vfma.f32	s15, s12, s14
   19f74:	ed9f 6a15 	vldr	s12, [pc, #84]	; 19fcc <__kernel_cosf+0xa8>
   19f78:	eea7 6a87 	vfma.f32	s12, s15, s14
   19f7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   19f80:	ee67 7a27 	vmul.f32	s15, s14, s15
   19f84:	ee26 6a07 	vmul.f32	s12, s12, s14
   19f88:	eee7 0a06 	vfma.f32	s1, s14, s12
   19f8c:	d804      	bhi.n	19f98 <__kernel_cosf+0x74>
   19f8e:	ee77 7ae0 	vsub.f32	s15, s15, s1
   19f92:	ee30 0a67 	vsub.f32	s0, s0, s15
   19f96:	4770      	bx	lr
   19f98:	4a0d      	ldr	r2, [pc, #52]	; (19fd0 <__kernel_cosf+0xac>)
   19f9a:	4293      	cmp	r3, r2
   19f9c:	bf96      	itet	ls
   19f9e:	f103 437f 	addls.w	r3, r3, #4278190080	; 0xff000000
   19fa2:	eeb5 7a02 	vmovhi.f32	s14, #82	; 0x3e900000  0.2812500
   19fa6:	ee07 3a10 	vmovls	s14, r3
   19faa:	ee30 0a47 	vsub.f32	s0, s0, s14
   19fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
   19fb2:	e7ec      	b.n	19f8e <__kernel_cosf+0x6a>
   19fb4:	ad47d74e 	.word	0xad47d74e
   19fb8:	310f74f6 	.word	0x310f74f6
   19fbc:	3e999999 	.word	0x3e999999
   19fc0:	b493f27c 	.word	0xb493f27c
   19fc4:	37d00d01 	.word	0x37d00d01
   19fc8:	bab60b61 	.word	0xbab60b61
   19fcc:	3d2aaaab 	.word	0x3d2aaaab
   19fd0:	3f480000 	.word	0x3f480000

00019fd4 <__kernel_rem_pio2f>:
   19fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd8:	4690      	mov	r8, r2
   19fda:	469b      	mov	fp, r3
   19fdc:	4bc1      	ldr	r3, [pc, #772]	; (1a2e4 <__kernel_rem_pio2f+0x310>)
   19fde:	460f      	mov	r7, r1
   19fe0:	f118 0f04 	cmn.w	r8, #4
   19fe4:	ed2d 8b04 	vpush	{d8-d9}
   19fe8:	b0d9      	sub	sp, #356	; 0x164
   19fea:	9a66      	ldr	r2, [sp, #408]	; 0x198
   19fec:	f8dd c19c 	ldr.w	ip, [sp, #412]	; 0x19c
   19ff0:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
   19ff4:	f10b 33ff 	add.w	r3, fp, #4294967295
   19ff8:	9001      	str	r0, [sp, #4]
   19ffa:	db25      	blt.n	1a048 <__kernel_rem_pio2f+0x74>
   19ffc:	f1b8 0203 	subs.w	r2, r8, #3
   1a000:	bf48      	it	mi
   1a002:	f108 0204 	addmi.w	r2, r8, #4
   1a006:	10d2      	asrs	r2, r2, #3
   1a008:	1c55      	adds	r5, r2, #1
   1a00a:	1ad4      	subs	r4, r2, r3
   1a00c:	eb0a 0603 	add.w	r6, sl, r3
   1a010:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   1a014:	00e9      	lsls	r1, r5, #3
   1a016:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a01a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
   1a01e:	9102      	str	r1, [sp, #8]
   1a020:	eb0c 0e84 	add.w	lr, ip, r4, lsl #2
   1a024:	2100      	movs	r1, #0
   1a026:	42b1      	cmp	r1, r6
   1a028:	dd10      	ble.n	1a04c <__kernel_rem_pio2f+0x78>
   1a02a:	a91c      	add	r1, sp, #112	; 0x70
   1a02c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
   1a030:	2600      	movs	r6, #0
   1a032:	eb01 018b 	add.w	r1, r1, fp, lsl #2
   1a036:	4556      	cmp	r6, sl
   1a038:	dc28      	bgt.n	1a08c <__kernel_rem_pio2f+0xb8>
   1a03a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1a03e:	460c      	mov	r4, r1
   1a040:	eddf 7aac 	vldr	s15, [pc, #688]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a044:	2000      	movs	r0, #0
   1a046:	e018      	b.n	1a07a <__kernel_rem_pio2f+0xa6>
   1a048:	2200      	movs	r2, #0
   1a04a:	e7dd      	b.n	1a008 <__kernel_rem_pio2f+0x34>
   1a04c:	42cc      	cmn	r4, r1
   1a04e:	bf54      	ite	pl
   1a050:	f85e 0021 	ldrpl.w	r0, [lr, r1, lsl #2]
   1a054:	eef0 7a47 	vmovmi.f32	s15, s14
   1a058:	f101 0101 	add.w	r1, r1, #1
   1a05c:	bf5c      	itt	pl
   1a05e:	ee07 0a90 	vmovpl	s15, r0
   1a062:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
   1a066:	ece9 7a01 	vstmia	r9!, {s15}
   1a06a:	e7dc      	b.n	1a026 <__kernel_rem_pio2f+0x52>
   1a06c:	ecfe 6a01 	vldmia	lr!, {s13}
   1a070:	3001      	adds	r0, #1
   1a072:	ed94 7a00 	vldr	s14, [r4]
   1a076:	eee6 7a87 	vfma.f32	s15, s13, s14
   1a07a:	4298      	cmp	r0, r3
   1a07c:	f1a4 0404 	sub.w	r4, r4, #4
   1a080:	ddf4      	ble.n	1a06c <__kernel_rem_pio2f+0x98>
   1a082:	3601      	adds	r6, #1
   1a084:	3104      	adds	r1, #4
   1a086:	ece9 7a01 	vstmia	r9!, {s15}
   1a08a:	e7d4      	b.n	1a036 <__kernel_rem_pio2f+0x62>
   1a08c:	a908      	add	r1, sp, #32
   1a08e:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   1a092:	4654      	mov	r4, sl
   1a094:	eddf 8a96 	vldr	s17, [pc, #600]	; 1a2f0 <__kernel_rem_pio2f+0x31c>
   1a098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1a09c:	ed9f 9a93 	vldr	s18, [pc, #588]	; 1a2ec <__kernel_rem_pio2f+0x318>
   1a0a0:	9203      	str	r2, [sp, #12]
   1a0a2:	9104      	str	r1, [sp, #16]
   1a0a4:	00a2      	lsls	r2, r4, #2
   1a0a6:	a944      	add	r1, sp, #272	; 0x110
   1a0a8:	4620      	mov	r0, r4
   1a0aa:	9205      	str	r2, [sp, #20]
   1a0ac:	aa58      	add	r2, sp, #352	; 0x160
   1a0ae:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1a0b2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1a0b6:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   1a0ba:	aa08      	add	r2, sp, #32
   1a0bc:	4616      	mov	r6, r2
   1a0be:	2800      	cmp	r0, #0
   1a0c0:	f1a1 0104 	sub.w	r1, r1, #4
   1a0c4:	dc4e      	bgt.n	1a164 <__kernel_rem_pio2f+0x190>
   1a0c6:	4628      	mov	r0, r5
   1a0c8:	e9cd 3206 	strd	r3, r2, [sp, #24]
   1a0cc:	f000 fb24 	bl	1a718 <scalbnf>
   1a0d0:	eeb0 8a40 	vmov.f32	s16, s0
   1a0d4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   1a0d8:	ee28 0a00 	vmul.f32	s0, s16, s0
   1a0dc:	f005 f95c 	bl	1f398 <floorf>
   1a0e0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   1a0e4:	2d00      	cmp	r5, #0
   1a0e6:	eea0 8a67 	vfms.f32	s16, s0, s15
   1a0ea:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1a0ee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   1a0f2:	ee17 9a90 	vmov	r9, s15
   1a0f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a0fa:	ee38 8a67 	vsub.f32	s16, s16, s15
   1a0fe:	dd43      	ble.n	1a188 <__kernel_rem_pio2f+0x1b4>
   1a100:	1e60      	subs	r0, r4, #1
   1a102:	a908      	add	r1, sp, #32
   1a104:	f1c5 0c08 	rsb	ip, r5, #8
   1a108:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
   1a10c:	fa46 f10c 	asr.w	r1, r6, ip
   1a110:	4489      	add	r9, r1
   1a112:	fa01 f10c 	lsl.w	r1, r1, ip
   1a116:	1a76      	subs	r6, r6, r1
   1a118:	a908      	add	r1, sp, #32
   1a11a:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
   1a11e:	f1c5 0107 	rsb	r1, r5, #7
   1a122:	410e      	asrs	r6, r1
   1a124:	2e00      	cmp	r6, #0
   1a126:	dd3e      	ble.n	1a1a6 <__kernel_rem_pio2f+0x1d2>
   1a128:	f04f 0c00 	mov.w	ip, #0
   1a12c:	f109 0901 	add.w	r9, r9, #1
   1a130:	4660      	mov	r0, ip
   1a132:	4564      	cmp	r4, ip
   1a134:	dc6a      	bgt.n	1a20c <__kernel_rem_pio2f+0x238>
   1a136:	2d00      	cmp	r5, #0
   1a138:	dd05      	ble.n	1a146 <__kernel_rem_pio2f+0x172>
   1a13a:	2d01      	cmp	r5, #1
   1a13c:	f000 8083 	beq.w	1a246 <__kernel_rem_pio2f+0x272>
   1a140:	2d02      	cmp	r5, #2
   1a142:	f000 808b 	beq.w	1a25c <__kernel_rem_pio2f+0x288>
   1a146:	2e02      	cmp	r6, #2
   1a148:	d12d      	bne.n	1a1a6 <__kernel_rem_pio2f+0x1d2>
   1a14a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1a14e:	ee30 8a48 	vsub.f32	s16, s0, s16
   1a152:	b340      	cbz	r0, 1a1a6 <__kernel_rem_pio2f+0x1d2>
   1a154:	4628      	mov	r0, r5
   1a156:	9306      	str	r3, [sp, #24]
   1a158:	f000 fade 	bl	1a718 <scalbnf>
   1a15c:	9b06      	ldr	r3, [sp, #24]
   1a15e:	ee38 8a40 	vsub.f32	s16, s16, s0
   1a162:	e020      	b.n	1a1a6 <__kernel_rem_pio2f+0x1d2>
   1a164:	ee60 7a28 	vmul.f32	s15, s0, s17
   1a168:	3801      	subs	r0, #1
   1a16a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1a16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a172:	eea7 0ac9 	vfms.f32	s0, s15, s18
   1a176:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1a17a:	eca6 0a01 	vstmia	r6!, {s0}
   1a17e:	ed91 0a00 	vldr	s0, [r1]
   1a182:	ee37 0a80 	vadd.f32	s0, s15, s0
   1a186:	e79a      	b.n	1a0be <__kernel_rem_pio2f+0xea>
   1a188:	d105      	bne.n	1a196 <__kernel_rem_pio2f+0x1c2>
   1a18a:	1e61      	subs	r1, r4, #1
   1a18c:	a808      	add	r0, sp, #32
   1a18e:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   1a192:	1236      	asrs	r6, r6, #8
   1a194:	e7c6      	b.n	1a124 <__kernel_rem_pio2f+0x150>
   1a196:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1a19a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1a19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a1a2:	da31      	bge.n	1a208 <__kernel_rem_pio2f+0x234>
   1a1a4:	2600      	movs	r6, #0
   1a1a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a1ae:	f040 80a3 	bne.w	1a2f8 <__kernel_rem_pio2f+0x324>
   1a1b2:	1e61      	subs	r1, r4, #1
   1a1b4:	2000      	movs	r0, #0
   1a1b6:	4551      	cmp	r1, sl
   1a1b8:	da57      	bge.n	1a26a <__kernel_rem_pio2f+0x296>
   1a1ba:	2800      	cmp	r0, #0
   1a1bc:	d071      	beq.n	1a2a2 <__kernel_rem_pio2f+0x2ce>
   1a1be:	3c01      	subs	r4, #1
   1a1c0:	ab08      	add	r3, sp, #32
   1a1c2:	3d08      	subs	r5, #8
   1a1c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1a1c8:	2b00      	cmp	r3, #0
   1a1ca:	d0f8      	beq.n	1a1be <__kernel_rem_pio2f+0x1ea>
   1a1cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1a1d0:	4628      	mov	r0, r5
   1a1d2:	f000 faa1 	bl	1a718 <scalbnf>
   1a1d6:	1c63      	adds	r3, r4, #1
   1a1d8:	aa44      	add	r2, sp, #272	; 0x110
   1a1da:	ed9f 7a45 	vldr	s14, [pc, #276]	; 1a2f0 <__kernel_rem_pio2f+0x31c>
   1a1de:	0099      	lsls	r1, r3, #2
   1a1e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1a1e4:	4623      	mov	r3, r4
   1a1e6:	2b00      	cmp	r3, #0
   1a1e8:	f280 80b4 	bge.w	1a354 <__kernel_rem_pio2f+0x380>
   1a1ec:	4623      	mov	r3, r4
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	f2c0 80d2 	blt.w	1a398 <__kernel_rem_pio2f+0x3c4>
   1a1f4:	aa44      	add	r2, sp, #272	; 0x110
   1a1f6:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 1a2e8 <__kernel_rem_pio2f+0x314>
   1a1fa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a1fe:	2000      	movs	r0, #0
   1a200:	eb02 0583 	add.w	r5, r2, r3, lsl #2
   1a204:	1ae2      	subs	r2, r4, r3
   1a206:	e0bc      	b.n	1a382 <__kernel_rem_pio2f+0x3ae>
   1a208:	2602      	movs	r6, #2
   1a20a:	e78d      	b.n	1a128 <__kernel_rem_pio2f+0x154>
   1a20c:	4696      	mov	lr, r2
   1a20e:	f85e 1b04 	ldr.w	r1, [lr], #4
   1a212:	b960      	cbnz	r0, 1a22e <__kernel_rem_pio2f+0x25a>
   1a214:	b181      	cbz	r1, 1a238 <__kernel_rem_pio2f+0x264>
   1a216:	f10c 0c01 	add.w	ip, ip, #1
   1a21a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1a21e:	4564      	cmp	r4, ip
   1a220:	f84e 1c04 	str.w	r1, [lr, #-4]
   1a224:	dd0d      	ble.n	1a242 <__kernel_rem_pio2f+0x26e>
   1a226:	f8de 1000 	ldr.w	r1, [lr]
   1a22a:	f102 0e08 	add.w	lr, r2, #8
   1a22e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   1a232:	f84e 1c04 	str.w	r1, [lr, #-4]
   1a236:	2101      	movs	r1, #1
   1a238:	f10c 0c01 	add.w	ip, ip, #1
   1a23c:	4672      	mov	r2, lr
   1a23e:	4608      	mov	r0, r1
   1a240:	e777      	b.n	1a132 <__kernel_rem_pio2f+0x15e>
   1a242:	2001      	movs	r0, #1
   1a244:	e777      	b.n	1a136 <__kernel_rem_pio2f+0x162>
   1a246:	1e61      	subs	r1, r4, #1
   1a248:	aa08      	add	r2, sp, #32
   1a24a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a24e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1a252:	f10d 0c20 	add.w	ip, sp, #32
   1a256:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1a25a:	e774      	b.n	1a146 <__kernel_rem_pio2f+0x172>
   1a25c:	1e61      	subs	r1, r4, #1
   1a25e:	aa08      	add	r2, sp, #32
   1a260:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a264:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1a268:	e7f3      	b.n	1a252 <__kernel_rem_pio2f+0x27e>
   1a26a:	aa08      	add	r2, sp, #32
   1a26c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a270:	3901      	subs	r1, #1
   1a272:	4310      	orrs	r0, r2
   1a274:	e79f      	b.n	1a1b6 <__kernel_rem_pio2f+0x1e2>
   1a276:	3201      	adds	r2, #1
   1a278:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1a27c:	2800      	cmp	r0, #0
   1a27e:	d0fa      	beq.n	1a276 <__kernel_rem_pio2f+0x2a2>
   1a280:	9905      	ldr	r1, [sp, #20]
   1a282:	eb04 000b 	add.w	r0, r4, fp
   1a286:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   1a28a:	1c66      	adds	r6, r4, #1
   1a28c:	f501 71b0 	add.w	r1, r1, #352	; 0x160
   1a290:	4422      	add	r2, r4
   1a292:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1a296:	4469      	add	r1, sp
   1a298:	394c      	subs	r1, #76	; 0x4c
   1a29a:	42b2      	cmp	r2, r6
   1a29c:	da04      	bge.n	1a2a8 <__kernel_rem_pio2f+0x2d4>
   1a29e:	4614      	mov	r4, r2
   1a2a0:	e700      	b.n	1a0a4 <__kernel_rem_pio2f+0xd0>
   1a2a2:	9904      	ldr	r1, [sp, #16]
   1a2a4:	2201      	movs	r2, #1
   1a2a6:	e7e7      	b.n	1a278 <__kernel_rem_pio2f+0x2a4>
   1a2a8:	9c03      	ldr	r4, [sp, #12]
   1a2aa:	f8dd c004 	ldr.w	ip, [sp, #4]
   1a2ae:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   1a2b2:	ee07 4a90 	vmov	s15, r4
   1a2b6:	9405      	str	r4, [sp, #20]
   1a2b8:	2400      	movs	r4, #0
   1a2ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a2be:	ece0 7a01 	vstmia	r0!, {s15}
   1a2c2:	4686      	mov	lr, r0
   1a2c4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a2c8:	429c      	cmp	r4, r3
   1a2ca:	dd03      	ble.n	1a2d4 <__kernel_rem_pio2f+0x300>
   1a2cc:	3601      	adds	r6, #1
   1a2ce:	ece1 7a01 	vstmia	r1!, {s15}
   1a2d2:	e7e2      	b.n	1a29a <__kernel_rem_pio2f+0x2c6>
   1a2d4:	ecfc 6a01 	vldmia	ip!, {s13}
   1a2d8:	3401      	adds	r4, #1
   1a2da:	ed3e 7a01 	vldmdb	lr!, {s14}
   1a2de:	eee6 7a87 	vfma.f32	s15, s13, s14
   1a2e2:	e7f1      	b.n	1a2c8 <__kernel_rem_pio2f+0x2f4>
   1a2e4:	000218dc 	.word	0x000218dc
   1a2e8:	000218b0 	.word	0x000218b0
   1a2ec:	43800000 	.word	0x43800000
   1a2f0:	3b800000 	.word	0x3b800000
   1a2f4:	00000000 	.word	0x00000000
   1a2f8:	9b02      	ldr	r3, [sp, #8]
   1a2fa:	eeb0 0a48 	vmov.f32	s0, s16
   1a2fe:	eba3 0008 	sub.w	r0, r3, r8
   1a302:	f000 fa09 	bl	1a718 <scalbnf>
   1a306:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 1a2ec <__kernel_rem_pio2f+0x318>
   1a30a:	eeb4 0ac7 	vcmpe.f32	s0, s14
   1a30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a312:	db19      	blt.n	1a348 <__kernel_rem_pio2f+0x374>
   1a314:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 1a2f0 <__kernel_rem_pio2f+0x31c>
   1a318:	aa08      	add	r2, sp, #32
   1a31a:	3508      	adds	r5, #8
   1a31c:	ee60 7a27 	vmul.f32	s15, s0, s15
   1a320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1a324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a328:	eea7 0ac7 	vfms.f32	s0, s15, s14
   1a32c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1a330:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1a334:	ee10 3a10 	vmov	r3, s0
   1a338:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
   1a33c:	3401      	adds	r4, #1
   1a33e:	ee17 3a90 	vmov	r3, s15
   1a342:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
   1a346:	e741      	b.n	1a1cc <__kernel_rem_pio2f+0x1f8>
   1a348:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1a34c:	aa08      	add	r2, sp, #32
   1a34e:	ee10 3a10 	vmov	r3, s0
   1a352:	e7f6      	b.n	1a342 <__kernel_rem_pio2f+0x36e>
   1a354:	a808      	add	r0, sp, #32
   1a356:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1a35a:	3b01      	subs	r3, #1
   1a35c:	ee07 0a90 	vmov	s15, r0
   1a360:	9001      	str	r0, [sp, #4]
   1a362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a366:	ee67 7a80 	vmul.f32	s15, s15, s0
   1a36a:	ee20 0a07 	vmul.f32	s0, s0, s14
   1a36e:	ed62 7a01 	vstmdb	r2!, {s15}
   1a372:	e738      	b.n	1a1e6 <__kernel_rem_pio2f+0x212>
   1a374:	ecfc 6a01 	vldmia	ip!, {s13}
   1a378:	3001      	adds	r0, #1
   1a37a:	ecb5 7a01 	vldmia	r5!, {s14}
   1a37e:	eee6 7a87 	vfma.f32	s15, s13, s14
   1a382:	4550      	cmp	r0, sl
   1a384:	dc01      	bgt.n	1a38a <__kernel_rem_pio2f+0x3b6>
   1a386:	4282      	cmp	r2, r0
   1a388:	daf4      	bge.n	1a374 <__kernel_rem_pio2f+0x3a0>
   1a38a:	a858      	add	r0, sp, #352	; 0x160
   1a38c:	3b01      	subs	r3, #1
   1a38e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1a392:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
   1a396:	e72a      	b.n	1a1ee <__kernel_rem_pio2f+0x21a>
   1a398:	9b66      	ldr	r3, [sp, #408]	; 0x198
   1a39a:	2b02      	cmp	r3, #2
   1a39c:	dc09      	bgt.n	1a3b2 <__kernel_rem_pio2f+0x3de>
   1a39e:	2b00      	cmp	r3, #0
   1a3a0:	dc2b      	bgt.n	1a3fa <__kernel_rem_pio2f+0x426>
   1a3a2:	d044      	beq.n	1a42e <__kernel_rem_pio2f+0x45a>
   1a3a4:	f009 0007 	and.w	r0, r9, #7
   1a3a8:	b059      	add	sp, #356	; 0x164
   1a3aa:	ecbd 8b04 	vpop	{d8-d9}
   1a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
   1a3b4:	2b03      	cmp	r3, #3
   1a3b6:	d1f5      	bne.n	1a3a4 <__kernel_rem_pio2f+0x3d0>
   1a3b8:	aa30      	add	r2, sp, #192	; 0xc0
   1a3ba:	1f0b      	subs	r3, r1, #4
   1a3bc:	4620      	mov	r0, r4
   1a3be:	4413      	add	r3, r2
   1a3c0:	461a      	mov	r2, r3
   1a3c2:	2800      	cmp	r0, #0
   1a3c4:	f1a2 0204 	sub.w	r2, r2, #4
   1a3c8:	dc52      	bgt.n	1a470 <__kernel_rem_pio2f+0x49c>
   1a3ca:	4622      	mov	r2, r4
   1a3cc:	2a01      	cmp	r2, #1
   1a3ce:	f1a3 0304 	sub.w	r3, r3, #4
   1a3d2:	dc5d      	bgt.n	1a490 <__kernel_rem_pio2f+0x4bc>
   1a3d4:	ab30      	add	r3, sp, #192	; 0xc0
   1a3d6:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a3da:	440b      	add	r3, r1
   1a3dc:	2c01      	cmp	r4, #1
   1a3de:	dc67      	bgt.n	1a4b0 <__kernel_rem_pio2f+0x4dc>
   1a3e0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
   1a3e4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
   1a3e8:	2e00      	cmp	r6, #0
   1a3ea:	d167      	bne.n	1a4bc <__kernel_rem_pio2f+0x4e8>
   1a3ec:	edc7 6a00 	vstr	s13, [r7]
   1a3f0:	ed87 7a01 	vstr	s14, [r7, #4]
   1a3f4:	edc7 7a02 	vstr	s15, [r7, #8]
   1a3f8:	e7d4      	b.n	1a3a4 <__kernel_rem_pio2f+0x3d0>
   1a3fa:	ab30      	add	r3, sp, #192	; 0xc0
   1a3fc:	4622      	mov	r2, r4
   1a3fe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a402:	440b      	add	r3, r1
   1a404:	2a00      	cmp	r2, #0
   1a406:	da24      	bge.n	1a452 <__kernel_rem_pio2f+0x47e>
   1a408:	b34e      	cbz	r6, 1a45e <__kernel_rem_pio2f+0x48a>
   1a40a:	eef1 7a47 	vneg.f32	s15, s14
   1a40e:	edc7 7a00 	vstr	s15, [r7]
   1a412:	aa31      	add	r2, sp, #196	; 0xc4
   1a414:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
   1a418:	2301      	movs	r3, #1
   1a41a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1a41e:	429c      	cmp	r4, r3
   1a420:	da20      	bge.n	1a464 <__kernel_rem_pio2f+0x490>
   1a422:	b10e      	cbz	r6, 1a428 <__kernel_rem_pio2f+0x454>
   1a424:	eef1 7a67 	vneg.f32	s15, s15
   1a428:	edc7 7a01 	vstr	s15, [r7, #4]
   1a42c:	e7ba      	b.n	1a3a4 <__kernel_rem_pio2f+0x3d0>
   1a42e:	ab30      	add	r3, sp, #192	; 0xc0
   1a430:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 1a2f4 <__kernel_rem_pio2f+0x320>
   1a434:	440b      	add	r3, r1
   1a436:	2c00      	cmp	r4, #0
   1a438:	da05      	bge.n	1a446 <__kernel_rem_pio2f+0x472>
   1a43a:	b10e      	cbz	r6, 1a440 <__kernel_rem_pio2f+0x46c>
   1a43c:	eef1 7a67 	vneg.f32	s15, s15
   1a440:	edc7 7a00 	vstr	s15, [r7]
   1a444:	e7ae      	b.n	1a3a4 <__kernel_rem_pio2f+0x3d0>
   1a446:	ed33 7a01 	vldmdb	r3!, {s14}
   1a44a:	3c01      	subs	r4, #1
   1a44c:	ee77 7a87 	vadd.f32	s15, s15, s14
   1a450:	e7f1      	b.n	1a436 <__kernel_rem_pio2f+0x462>
   1a452:	ed73 7a01 	vldmdb	r3!, {s15}
   1a456:	3a01      	subs	r2, #1
   1a458:	ee37 7a27 	vadd.f32	s14, s14, s15
   1a45c:	e7d2      	b.n	1a404 <__kernel_rem_pio2f+0x430>
   1a45e:	eef0 7a47 	vmov.f32	s15, s14
   1a462:	e7d4      	b.n	1a40e <__kernel_rem_pio2f+0x43a>
   1a464:	ecb2 7a01 	vldmia	r2!, {s14}
   1a468:	3301      	adds	r3, #1
   1a46a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1a46e:	e7d6      	b.n	1a41e <__kernel_rem_pio2f+0x44a>
   1a470:	edd2 7a00 	vldr	s15, [r2]
   1a474:	3801      	subs	r0, #1
   1a476:	edd2 6a01 	vldr	s13, [r2, #4]
   1a47a:	ee37 7aa6 	vadd.f32	s14, s15, s13
   1a47e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1a482:	ed82 7a00 	vstr	s14, [r2]
   1a486:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1a48a:	edc2 7a01 	vstr	s15, [r2, #4]
   1a48e:	e798      	b.n	1a3c2 <__kernel_rem_pio2f+0x3ee>
   1a490:	edd3 7a00 	vldr	s15, [r3]
   1a494:	3a01      	subs	r2, #1
   1a496:	edd3 6a01 	vldr	s13, [r3, #4]
   1a49a:	ee37 7aa6 	vadd.f32	s14, s15, s13
   1a49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1a4a2:	ed83 7a00 	vstr	s14, [r3]
   1a4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1a4aa:	edc3 7a01 	vstr	s15, [r3, #4]
   1a4ae:	e78d      	b.n	1a3cc <__kernel_rem_pio2f+0x3f8>
   1a4b0:	ed33 7a01 	vldmdb	r3!, {s14}
   1a4b4:	3c01      	subs	r4, #1
   1a4b6:	ee77 7a87 	vadd.f32	s15, s15, s14
   1a4ba:	e78f      	b.n	1a3dc <__kernel_rem_pio2f+0x408>
   1a4bc:	eef1 6a66 	vneg.f32	s13, s13
   1a4c0:	eeb1 7a47 	vneg.f32	s14, s14
   1a4c4:	eef1 7a67 	vneg.f32	s15, s15
   1a4c8:	edc7 6a00 	vstr	s13, [r7]
   1a4cc:	ed87 7a01 	vstr	s14, [r7, #4]
   1a4d0:	e790      	b.n	1a3f4 <__kernel_rem_pio2f+0x420>
   1a4d2:	bf00      	nop

0001a4d4 <__kernel_sinf>:
   1a4d4:	ee10 3a10 	vmov	r3, s0
   1a4d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a4dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   1a4e0:	d204      	bcs.n	1a4ec <__kernel_sinf+0x18>
   1a4e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1a4e6:	ee17 3a90 	vmov	r3, s15
   1a4ea:	b35b      	cbz	r3, 1a544 <__kernel_sinf+0x70>
   1a4ec:	ee20 7a00 	vmul.f32	s14, s0, s0
   1a4f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 1a548 <__kernel_sinf+0x74>
   1a4f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 1a54c <__kernel_sinf+0x78>
   1a4f8:	eea7 6a27 	vfma.f32	s12, s14, s15
   1a4fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 1a550 <__kernel_sinf+0x7c>
   1a500:	ee60 6a07 	vmul.f32	s13, s0, s14
   1a504:	eee6 7a07 	vfma.f32	s15, s12, s14
   1a508:	ed9f 6a12 	vldr	s12, [pc, #72]	; 1a554 <__kernel_sinf+0x80>
   1a50c:	eea7 6a87 	vfma.f32	s12, s15, s14
   1a510:	eddf 7a11 	vldr	s15, [pc, #68]	; 1a558 <__kernel_sinf+0x84>
   1a514:	eee6 7a07 	vfma.f32	s15, s12, s14
   1a518:	b930      	cbnz	r0, 1a528 <__kernel_sinf+0x54>
   1a51a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 1a55c <__kernel_sinf+0x88>
   1a51e:	eea7 6a27 	vfma.f32	s12, s14, s15
   1a522:	eea6 0a26 	vfma.f32	s0, s12, s13
   1a526:	4770      	bx	lr
   1a528:	ee67 7ae6 	vnmul.f32	s15, s15, s13
   1a52c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   1a530:	eee0 7a86 	vfma.f32	s15, s1, s12
   1a534:	eed7 0a87 	vfnms.f32	s1, s15, s14
   1a538:	eddf 7a09 	vldr	s15, [pc, #36]	; 1a560 <__kernel_sinf+0x8c>
   1a53c:	eee6 0aa7 	vfma.f32	s1, s13, s15
   1a540:	ee30 0a60 	vsub.f32	s0, s0, s1
   1a544:	4770      	bx	lr
   1a546:	bf00      	nop
   1a548:	2f2ec9d3 	.word	0x2f2ec9d3
   1a54c:	b2d72f34 	.word	0xb2d72f34
   1a550:	3638ef1b 	.word	0x3638ef1b
   1a554:	b9500d01 	.word	0xb9500d01
   1a558:	3c088889 	.word	0x3c088889
   1a55c:	be2aaaab 	.word	0xbe2aaaab
   1a560:	3e2aaaab 	.word	0x3e2aaaab

0001a564 <atanf>:
   1a564:	b538      	push	{r3, r4, r5, lr}
   1a566:	ee10 5a10 	vmov	r5, s0
   1a56a:	eef0 7a40 	vmov.f32	s15, s0
   1a56e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   1a572:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   1a576:	d30f      	bcc.n	1a598 <atanf+0x34>
   1a578:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   1a57c:	d904      	bls.n	1a588 <atanf+0x24>
   1a57e:	ee70 7a00 	vadd.f32	s15, s0, s0
   1a582:	eeb0 0a67 	vmov.f32	s0, s15
   1a586:	bd38      	pop	{r3, r4, r5, pc}
   1a588:	2d00      	cmp	r5, #0
   1a58a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 1a6c0 <atanf+0x15c>
   1a58e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 1a6c4 <atanf+0x160>
   1a592:	fe77 7a27 	vselgt.f32	s15, s14, s15
   1a596:	e7f4      	b.n	1a582 <atanf+0x1e>
   1a598:	4b4b      	ldr	r3, [pc, #300]	; (1a6c8 <atanf+0x164>)
   1a59a:	429c      	cmp	r4, r3
   1a59c:	d810      	bhi.n	1a5c0 <atanf+0x5c>
   1a59e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   1a5a2:	d20a      	bcs.n	1a5ba <atanf+0x56>
   1a5a4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 1a6cc <atanf+0x168>
   1a5a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1a5ac:	ee30 7a07 	vadd.f32	s14, s0, s14
   1a5b0:	eeb4 7ae6 	vcmpe.f32	s14, s13
   1a5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a5b8:	dce3      	bgt.n	1a582 <atanf+0x1e>
   1a5ba:	f04f 33ff 	mov.w	r3, #4294967295
   1a5be:	e013      	b.n	1a5e8 <atanf+0x84>
   1a5c0:	f004 fed2 	bl	1f368 <fabsf>
   1a5c4:	4b42      	ldr	r3, [pc, #264]	; (1a6d0 <atanf+0x16c>)
   1a5c6:	429c      	cmp	r4, r3
   1a5c8:	d84f      	bhi.n	1a66a <atanf+0x106>
   1a5ca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   1a5ce:	429c      	cmp	r4, r3
   1a5d0:	d841      	bhi.n	1a656 <atanf+0xf2>
   1a5d2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1a5d6:	2300      	movs	r3, #0
   1a5d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1a5dc:	eea0 7a27 	vfma.f32	s14, s0, s15
   1a5e0:	ee30 0a27 	vadd.f32	s0, s0, s15
   1a5e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1a5e8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 1a6d4 <atanf+0x170>
   1a5ec:	1c5a      	adds	r2, r3, #1
   1a5ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 1a6d8 <atanf+0x174>
   1a5f2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 1a6dc <atanf+0x178>
   1a5f6:	ee27 6aa7 	vmul.f32	s12, s15, s15
   1a5fa:	ee66 6a06 	vmul.f32	s13, s12, s12
   1a5fe:	eee6 5a87 	vfma.f32	s11, s13, s14
   1a602:	ed9f 7a37 	vldr	s14, [pc, #220]	; 1a6e0 <atanf+0x17c>
   1a606:	eea5 7aa6 	vfma.f32	s14, s11, s13
   1a60a:	eddf 5a36 	vldr	s11, [pc, #216]	; 1a6e4 <atanf+0x180>
   1a60e:	eee7 5a26 	vfma.f32	s11, s14, s13
   1a612:	ed9f 7a35 	vldr	s14, [pc, #212]	; 1a6e8 <atanf+0x184>
   1a616:	eea5 7aa6 	vfma.f32	s14, s11, s13
   1a61a:	eddf 5a34 	vldr	s11, [pc, #208]	; 1a6ec <atanf+0x188>
   1a61e:	eee7 5a26 	vfma.f32	s11, s14, s13
   1a622:	ed9f 7a33 	vldr	s14, [pc, #204]	; 1a6f0 <atanf+0x18c>
   1a626:	eea6 5a87 	vfma.f32	s10, s13, s14
   1a62a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 1a6f4 <atanf+0x190>
   1a62e:	eea5 7a26 	vfma.f32	s14, s10, s13
   1a632:	ed9f 5a31 	vldr	s10, [pc, #196]	; 1a6f8 <atanf+0x194>
   1a636:	eea7 5a26 	vfma.f32	s10, s14, s13
   1a63a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 1a6fc <atanf+0x198>
   1a63e:	eea5 7a26 	vfma.f32	s14, s10, s13
   1a642:	ee27 7a26 	vmul.f32	s14, s14, s13
   1a646:	eea5 7a86 	vfma.f32	s14, s11, s12
   1a64a:	ee27 7a87 	vmul.f32	s14, s15, s14
   1a64e:	d121      	bne.n	1a694 <atanf+0x130>
   1a650:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1a654:	e795      	b.n	1a582 <atanf+0x1e>
   1a656:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1a65a:	2301      	movs	r3, #1
   1a65c:	ee30 7a67 	vsub.f32	s14, s0, s15
   1a660:	ee30 0a27 	vadd.f32	s0, s0, s15
   1a664:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1a668:	e7be      	b.n	1a5e8 <atanf+0x84>
   1a66a:	4b25      	ldr	r3, [pc, #148]	; (1a700 <atanf+0x19c>)
   1a66c:	429c      	cmp	r4, r3
   1a66e:	d80b      	bhi.n	1a688 <atanf+0x124>
   1a670:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   1a674:	2302      	movs	r3, #2
   1a676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1a67a:	ee70 6a67 	vsub.f32	s13, s0, s15
   1a67e:	eea0 7a27 	vfma.f32	s14, s0, s15
   1a682:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1a686:	e7af      	b.n	1a5e8 <atanf+0x84>
   1a688:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1a68c:	2303      	movs	r3, #3
   1a68e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1a692:	e7a9      	b.n	1a5e8 <atanf+0x84>
   1a694:	4a1b      	ldr	r2, [pc, #108]	; (1a704 <atanf+0x1a0>)
   1a696:	2d00      	cmp	r5, #0
   1a698:	491b      	ldr	r1, [pc, #108]	; (1a708 <atanf+0x1a4>)
   1a69a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1a69e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1a6a2:	edd3 6a00 	vldr	s13, [r3]
   1a6a6:	ee37 7a66 	vsub.f32	s14, s14, s13
   1a6aa:	ee37 7a67 	vsub.f32	s14, s14, s15
   1a6ae:	edd2 7a00 	vldr	s15, [r2]
   1a6b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1a6b6:	bfb8      	it	lt
   1a6b8:	eef1 7a67 	vneglt.f32	s15, s15
   1a6bc:	e761      	b.n	1a582 <atanf+0x1e>
   1a6be:	bf00      	nop
   1a6c0:	bfc90fdb 	.word	0xbfc90fdb
   1a6c4:	3fc90fdb 	.word	0x3fc90fdb
   1a6c8:	3edfffff 	.word	0x3edfffff
   1a6cc:	7149f2ca 	.word	0x7149f2ca
   1a6d0:	3f97ffff 	.word	0x3f97ffff
   1a6d4:	3c8569d7 	.word	0x3c8569d7
   1a6d8:	3d4bda59 	.word	0x3d4bda59
   1a6dc:	bd6ef16b 	.word	0xbd6ef16b
   1a6e0:	3d886b35 	.word	0x3d886b35
   1a6e4:	3dba2e6e 	.word	0x3dba2e6e
   1a6e8:	3e124925 	.word	0x3e124925
   1a6ec:	3eaaaaab 	.word	0x3eaaaaab
   1a6f0:	bd15a221 	.word	0xbd15a221
   1a6f4:	bd9d8795 	.word	0xbd9d8795
   1a6f8:	bde38e38 	.word	0xbde38e38
   1a6fc:	be4ccccd 	.word	0xbe4ccccd
   1a700:	401bffff 	.word	0x401bffff
   1a704:	000218f8 	.word	0x000218f8
   1a708:	000218e8 	.word	0x000218e8

0001a70c <nanf>:
   1a70c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1a714 <nanf+0x8>
   1a710:	4770      	bx	lr
   1a712:	bf00      	nop
   1a714:	7fc00000 	.word	0x7fc00000

0001a718 <scalbnf>:
   1a718:	ee10 3a10 	vmov	r3, s0
   1a71c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1a720:	d029      	beq.n	1a776 <scalbnf+0x5e>
   1a722:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1a726:	d302      	bcc.n	1a72e <scalbnf+0x16>
   1a728:	ee30 0a00 	vadd.f32	s0, s0, s0
   1a72c:	4770      	bx	lr
   1a72e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   1a732:	d121      	bne.n	1a778 <scalbnf+0x60>
   1a734:	4b21      	ldr	r3, [pc, #132]	; (1a7bc <scalbnf+0xa4>)
   1a736:	eddf 7a22 	vldr	s15, [pc, #136]	; 1a7c0 <scalbnf+0xa8>
   1a73a:	4298      	cmp	r0, r3
   1a73c:	ee20 0a27 	vmul.f32	s0, s0, s15
   1a740:	db15      	blt.n	1a76e <scalbnf+0x56>
   1a742:	ee10 3a10 	vmov	r3, s0
   1a746:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   1a74a:	3a19      	subs	r2, #25
   1a74c:	4410      	add	r0, r2
   1a74e:	28fe      	cmp	r0, #254	; 0xfe
   1a750:	dd14      	ble.n	1a77c <scalbnf+0x64>
   1a752:	eddf 7a1c 	vldr	s15, [pc, #112]	; 1a7c4 <scalbnf+0xac>
   1a756:	ee10 3a10 	vmov	r3, s0
   1a75a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1a7c8 <scalbnf+0xb0>
   1a75e:	eeb0 7a67 	vmov.f32	s14, s15
   1a762:	2b00      	cmp	r3, #0
   1a764:	fe67 7aa6 	vselge.f32	s15, s15, s13
   1a768:	ee27 0a87 	vmul.f32	s0, s15, s14
   1a76c:	4770      	bx	lr
   1a76e:	eddf 7a17 	vldr	s15, [pc, #92]	; 1a7cc <scalbnf+0xb4>
   1a772:	ee27 0a80 	vmul.f32	s0, s15, s0
   1a776:	4770      	bx	lr
   1a778:	0dd2      	lsrs	r2, r2, #23
   1a77a:	e7e7      	b.n	1a74c <scalbnf+0x34>
   1a77c:	2800      	cmp	r0, #0
   1a77e:	dd06      	ble.n	1a78e <scalbnf+0x76>
   1a780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1a784:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
   1a788:	ee00 3a10 	vmov	s0, r3
   1a78c:	4770      	bx	lr
   1a78e:	f110 0f16 	cmn.w	r0, #22
   1a792:	da09      	bge.n	1a7a8 <scalbnf+0x90>
   1a794:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1a7cc <scalbnf+0xb4>
   1a798:	ee10 3a10 	vmov	r3, s0
   1a79c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 1a7d0 <scalbnf+0xb8>
   1a7a0:	eeb0 7a67 	vmov.f32	s14, s15
   1a7a4:	2b00      	cmp	r3, #0
   1a7a6:	e7dd      	b.n	1a764 <scalbnf+0x4c>
   1a7a8:	3019      	adds	r0, #25
   1a7aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1a7ae:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1a7d4 <scalbnf+0xbc>
   1a7b2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
   1a7b6:	ee07 3a90 	vmov	s15, r3
   1a7ba:	e7da      	b.n	1a772 <scalbnf+0x5a>
   1a7bc:	ffff3cb0 	.word	0xffff3cb0
   1a7c0:	4c000000 	.word	0x4c000000
   1a7c4:	7149f2ca 	.word	0x7149f2ca
   1a7c8:	f149f2ca 	.word	0xf149f2ca
   1a7cc:	0da24260 	.word	0x0da24260
   1a7d0:	8da24260 	.word	0x8da24260
   1a7d4:	33000000 	.word	0x33000000

0001a7d8 <malloc>:
   1a7d8:	4b02      	ldr	r3, [pc, #8]	; (1a7e4 <malloc+0xc>)
   1a7da:	4601      	mov	r1, r0
   1a7dc:	6818      	ldr	r0, [r3, #0]
   1a7de:	f000 b855 	b.w	1a88c <_malloc_r>
   1a7e2:	bf00      	nop
   1a7e4:	200004f4 	.word	0x200004f4

0001a7e8 <free>:
   1a7e8:	4b02      	ldr	r3, [pc, #8]	; (1a7f4 <free+0xc>)
   1a7ea:	4601      	mov	r1, r0
   1a7ec:	6818      	ldr	r0, [r3, #0]
   1a7ee:	f000 b803 	b.w	1a7f8 <_free_r>
   1a7f2:	bf00      	nop
   1a7f4:	200004f4 	.word	0x200004f4

0001a7f8 <_free_r>:
   1a7f8:	b538      	push	{r3, r4, r5, lr}
   1a7fa:	4605      	mov	r5, r0
   1a7fc:	2900      	cmp	r1, #0
   1a7fe:	d041      	beq.n	1a884 <_free_r+0x8c>
   1a800:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1a804:	1f0c      	subs	r4, r1, #4
   1a806:	2b00      	cmp	r3, #0
   1a808:	bfb8      	it	lt
   1a80a:	18e4      	addlt	r4, r4, r3
   1a80c:	f000 f8a8 	bl	1a960 <__malloc_lock>
   1a810:	4a1d      	ldr	r2, [pc, #116]	; (1a888 <_free_r+0x90>)
   1a812:	6813      	ldr	r3, [r2, #0]
   1a814:	b933      	cbnz	r3, 1a824 <_free_r+0x2c>
   1a816:	6063      	str	r3, [r4, #4]
   1a818:	6014      	str	r4, [r2, #0]
   1a81a:	4628      	mov	r0, r5
   1a81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a820:	f000 b8a4 	b.w	1a96c <__malloc_unlock>
   1a824:	42a3      	cmp	r3, r4
   1a826:	d908      	bls.n	1a83a <_free_r+0x42>
   1a828:	6820      	ldr	r0, [r4, #0]
   1a82a:	1821      	adds	r1, r4, r0
   1a82c:	428b      	cmp	r3, r1
   1a82e:	bf01      	itttt	eq
   1a830:	6819      	ldreq	r1, [r3, #0]
   1a832:	685b      	ldreq	r3, [r3, #4]
   1a834:	1809      	addeq	r1, r1, r0
   1a836:	6021      	streq	r1, [r4, #0]
   1a838:	e7ed      	b.n	1a816 <_free_r+0x1e>
   1a83a:	461a      	mov	r2, r3
   1a83c:	685b      	ldr	r3, [r3, #4]
   1a83e:	b10b      	cbz	r3, 1a844 <_free_r+0x4c>
   1a840:	42a3      	cmp	r3, r4
   1a842:	d9fa      	bls.n	1a83a <_free_r+0x42>
   1a844:	6811      	ldr	r1, [r2, #0]
   1a846:	1850      	adds	r0, r2, r1
   1a848:	42a0      	cmp	r0, r4
   1a84a:	d10b      	bne.n	1a864 <_free_r+0x6c>
   1a84c:	6820      	ldr	r0, [r4, #0]
   1a84e:	4401      	add	r1, r0
   1a850:	1850      	adds	r0, r2, r1
   1a852:	6011      	str	r1, [r2, #0]
   1a854:	4283      	cmp	r3, r0
   1a856:	d1e0      	bne.n	1a81a <_free_r+0x22>
   1a858:	6818      	ldr	r0, [r3, #0]
   1a85a:	685b      	ldr	r3, [r3, #4]
   1a85c:	4408      	add	r0, r1
   1a85e:	6053      	str	r3, [r2, #4]
   1a860:	6010      	str	r0, [r2, #0]
   1a862:	e7da      	b.n	1a81a <_free_r+0x22>
   1a864:	d902      	bls.n	1a86c <_free_r+0x74>
   1a866:	230c      	movs	r3, #12
   1a868:	602b      	str	r3, [r5, #0]
   1a86a:	e7d6      	b.n	1a81a <_free_r+0x22>
   1a86c:	6820      	ldr	r0, [r4, #0]
   1a86e:	1821      	adds	r1, r4, r0
   1a870:	428b      	cmp	r3, r1
   1a872:	bf02      	ittt	eq
   1a874:	6819      	ldreq	r1, [r3, #0]
   1a876:	685b      	ldreq	r3, [r3, #4]
   1a878:	1809      	addeq	r1, r1, r0
   1a87a:	6063      	str	r3, [r4, #4]
   1a87c:	bf08      	it	eq
   1a87e:	6021      	streq	r1, [r4, #0]
   1a880:	6054      	str	r4, [r2, #4]
   1a882:	e7ca      	b.n	1a81a <_free_r+0x22>
   1a884:	bd38      	pop	{r3, r4, r5, pc}
   1a886:	bf00      	nop
   1a888:	20006fe0 	.word	0x20006fe0

0001a88c <_malloc_r>:
   1a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a88e:	1ccd      	adds	r5, r1, #3
   1a890:	4606      	mov	r6, r0
   1a892:	f025 0503 	bic.w	r5, r5, #3
   1a896:	3508      	adds	r5, #8
   1a898:	2d0c      	cmp	r5, #12
   1a89a:	bf38      	it	cc
   1a89c:	250c      	movcc	r5, #12
   1a89e:	2d00      	cmp	r5, #0
   1a8a0:	db01      	blt.n	1a8a6 <_malloc_r+0x1a>
   1a8a2:	42a9      	cmp	r1, r5
   1a8a4:	d903      	bls.n	1a8ae <_malloc_r+0x22>
   1a8a6:	230c      	movs	r3, #12
   1a8a8:	6033      	str	r3, [r6, #0]
   1a8aa:	2000      	movs	r0, #0
   1a8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8ae:	f000 f857 	bl	1a960 <__malloc_lock>
   1a8b2:	4921      	ldr	r1, [pc, #132]	; (1a938 <_malloc_r+0xac>)
   1a8b4:	680a      	ldr	r2, [r1, #0]
   1a8b6:	4614      	mov	r4, r2
   1a8b8:	b99c      	cbnz	r4, 1a8e2 <_malloc_r+0x56>
   1a8ba:	4f20      	ldr	r7, [pc, #128]	; (1a93c <_malloc_r+0xb0>)
   1a8bc:	683b      	ldr	r3, [r7, #0]
   1a8be:	b923      	cbnz	r3, 1a8ca <_malloc_r+0x3e>
   1a8c0:	4621      	mov	r1, r4
   1a8c2:	4630      	mov	r0, r6
   1a8c4:	f000 f83c 	bl	1a940 <_sbrk_r>
   1a8c8:	6038      	str	r0, [r7, #0]
   1a8ca:	4629      	mov	r1, r5
   1a8cc:	4630      	mov	r0, r6
   1a8ce:	f000 f837 	bl	1a940 <_sbrk_r>
   1a8d2:	1c43      	adds	r3, r0, #1
   1a8d4:	d123      	bne.n	1a91e <_malloc_r+0x92>
   1a8d6:	230c      	movs	r3, #12
   1a8d8:	4630      	mov	r0, r6
   1a8da:	6033      	str	r3, [r6, #0]
   1a8dc:	f000 f846 	bl	1a96c <__malloc_unlock>
   1a8e0:	e7e3      	b.n	1a8aa <_malloc_r+0x1e>
   1a8e2:	6823      	ldr	r3, [r4, #0]
   1a8e4:	1b5b      	subs	r3, r3, r5
   1a8e6:	d417      	bmi.n	1a918 <_malloc_r+0x8c>
   1a8e8:	2b0b      	cmp	r3, #11
   1a8ea:	d903      	bls.n	1a8f4 <_malloc_r+0x68>
   1a8ec:	6023      	str	r3, [r4, #0]
   1a8ee:	441c      	add	r4, r3
   1a8f0:	6025      	str	r5, [r4, #0]
   1a8f2:	e004      	b.n	1a8fe <_malloc_r+0x72>
   1a8f4:	6863      	ldr	r3, [r4, #4]
   1a8f6:	42a2      	cmp	r2, r4
   1a8f8:	bf0c      	ite	eq
   1a8fa:	600b      	streq	r3, [r1, #0]
   1a8fc:	6053      	strne	r3, [r2, #4]
   1a8fe:	4630      	mov	r0, r6
   1a900:	f000 f834 	bl	1a96c <__malloc_unlock>
   1a904:	f104 000b 	add.w	r0, r4, #11
   1a908:	1d23      	adds	r3, r4, #4
   1a90a:	f020 0007 	bic.w	r0, r0, #7
   1a90e:	1ac2      	subs	r2, r0, r3
   1a910:	bf1c      	itt	ne
   1a912:	1a1b      	subne	r3, r3, r0
   1a914:	50a3      	strne	r3, [r4, r2]
   1a916:	e7c9      	b.n	1a8ac <_malloc_r+0x20>
   1a918:	4622      	mov	r2, r4
   1a91a:	6864      	ldr	r4, [r4, #4]
   1a91c:	e7cc      	b.n	1a8b8 <_malloc_r+0x2c>
   1a91e:	1cc4      	adds	r4, r0, #3
   1a920:	f024 0403 	bic.w	r4, r4, #3
   1a924:	42a0      	cmp	r0, r4
   1a926:	d0e3      	beq.n	1a8f0 <_malloc_r+0x64>
   1a928:	1a21      	subs	r1, r4, r0
   1a92a:	4630      	mov	r0, r6
   1a92c:	f000 f808 	bl	1a940 <_sbrk_r>
   1a930:	3001      	adds	r0, #1
   1a932:	d1dd      	bne.n	1a8f0 <_malloc_r+0x64>
   1a934:	e7cf      	b.n	1a8d6 <_malloc_r+0x4a>
   1a936:	bf00      	nop
   1a938:	20006fe0 	.word	0x20006fe0
   1a93c:	20006fdc 	.word	0x20006fdc

0001a940 <_sbrk_r>:
   1a940:	b538      	push	{r3, r4, r5, lr}
   1a942:	2300      	movs	r3, #0
   1a944:	4d05      	ldr	r5, [pc, #20]	; (1a95c <_sbrk_r+0x1c>)
   1a946:	4604      	mov	r4, r0
   1a948:	4608      	mov	r0, r1
   1a94a:	602b      	str	r3, [r5, #0]
   1a94c:	f7ef fe5e 	bl	a60c <_sbrk>
   1a950:	1c43      	adds	r3, r0, #1
   1a952:	d102      	bne.n	1a95a <_sbrk_r+0x1a>
   1a954:	682b      	ldr	r3, [r5, #0]
   1a956:	b103      	cbz	r3, 1a95a <_sbrk_r+0x1a>
   1a958:	6023      	str	r3, [r4, #0]
   1a95a:	bd38      	pop	{r3, r4, r5, pc}
   1a95c:	20006fe4 	.word	0x20006fe4

0001a960 <__malloc_lock>:
   1a960:	4801      	ldr	r0, [pc, #4]	; (1a968 <__malloc_lock+0x8>)
   1a962:	f7ef be67 	b.w	a634 <__retarget_lock_acquire_recursive>
   1a966:	bf00      	nop
   1a968:	200007e8 	.word	0x200007e8

0001a96c <__malloc_unlock>:
   1a96c:	4801      	ldr	r0, [pc, #4]	; (1a974 <__malloc_unlock+0x8>)
   1a96e:	f7ef be7b 	b.w	a668 <__retarget_lock_release_recursive>
   1a972:	bf00      	nop
   1a974:	200007e8 	.word	0x200007e8

0001a978 <nrf_cc3xx_platform_init_no_rng>:
   1a978:	b510      	push	{r4, lr}
   1a97a:	4c0a      	ldr	r4, [pc, #40]	; (1a9a4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   1a97c:	6823      	ldr	r3, [r4, #0]
   1a97e:	b11b      	cbz	r3, 1a988 <nrf_cc3xx_platform_init_no_rng+0x10>
   1a980:	2301      	movs	r3, #1
   1a982:	2000      	movs	r0, #0
   1a984:	6023      	str	r3, [r4, #0]
   1a986:	bd10      	pop	{r4, pc}
   1a988:	f000 f8f2 	bl	1ab70 <CC_LibInitNoRng>
   1a98c:	2800      	cmp	r0, #0
   1a98e:	d0f7      	beq.n	1a980 <nrf_cc3xx_platform_init_no_rng+0x8>
   1a990:	3801      	subs	r0, #1
   1a992:	2807      	cmp	r0, #7
   1a994:	d803      	bhi.n	1a99e <nrf_cc3xx_platform_init_no_rng+0x26>
   1a996:	4b04      	ldr	r3, [pc, #16]	; (1a9a8 <nrf_cc3xx_platform_init_no_rng+0x30>)
   1a998:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a99c:	bd10      	pop	{r4, pc}
   1a99e:	4803      	ldr	r0, [pc, #12]	; (1a9ac <nrf_cc3xx_platform_init_no_rng+0x34>)
   1a9a0:	bd10      	pop	{r4, pc}
   1a9a2:	bf00      	nop
   1a9a4:	20006fe8 	.word	0x20006fe8
   1a9a8:	00021908 	.word	0x00021908
   1a9ac:	ffff8ffe 	.word	0xffff8ffe

0001a9b0 <nrf_cc3xx_platform_abort>:
   1a9b0:	f3bf 8f4f 	dsb	sy
   1a9b4:	4905      	ldr	r1, [pc, #20]	; (1a9cc <nrf_cc3xx_platform_abort+0x1c>)
   1a9b6:	4b06      	ldr	r3, [pc, #24]	; (1a9d0 <nrf_cc3xx_platform_abort+0x20>)
   1a9b8:	68ca      	ldr	r2, [r1, #12]
   1a9ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a9be:	4313      	orrs	r3, r2
   1a9c0:	60cb      	str	r3, [r1, #12]
   1a9c2:	f3bf 8f4f 	dsb	sy
   1a9c6:	bf00      	nop
   1a9c8:	e7fd      	b.n	1a9c6 <nrf_cc3xx_platform_abort+0x16>
   1a9ca:	bf00      	nop
   1a9cc:	e000ed00 	.word	0xe000ed00
   1a9d0:	05fa0004 	.word	0x05fa0004

0001a9d4 <CC_PalAbort>:
   1a9d4:	b430      	push	{r4, r5}
   1a9d6:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1a9da:	2500      	movs	r5, #0
   1a9dc:	4b0b      	ldr	r3, [pc, #44]	; (1aa0c <CC_PalAbort+0x38>)
   1a9de:	4c0c      	ldr	r4, [pc, #48]	; (1aa10 <CC_PalAbort+0x3c>)
   1a9e0:	490c      	ldr	r1, [pc, #48]	; (1aa14 <CC_PalAbort+0x40>)
   1a9e2:	6849      	ldr	r1, [r1, #4]
   1a9e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1a9e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1a9ec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1a9f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1a9f4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1a9f8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   1a9fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   1aa00:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   1aa04:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   1aa08:	bc30      	pop	{r4, r5}
   1aa0a:	4708      	bx	r1
   1aa0c:	50845000 	.word	0x50845000
   1aa10:	50844000 	.word	0x50844000
   1aa14:	20000558 	.word	0x20000558

0001aa18 <nrf_cc3xx_platform_set_abort>:
   1aa18:	4b02      	ldr	r3, [pc, #8]	; (1aa24 <nrf_cc3xx_platform_set_abort+0xc>)
   1aa1a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1aa1e:	e9c3 1200 	strd	r1, r2, [r3]
   1aa22:	4770      	bx	lr
   1aa24:	20000558 	.word	0x20000558

0001aa28 <mutex_free>:
   1aa28:	b510      	push	{r4, lr}
   1aa2a:	4604      	mov	r4, r0
   1aa2c:	b150      	cbz	r0, 1aa44 <mutex_free+0x1c>
   1aa2e:	6863      	ldr	r3, [r4, #4]
   1aa30:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1aa34:	d005      	beq.n	1aa42 <mutex_free+0x1a>
   1aa36:	4a06      	ldr	r2, [pc, #24]	; (1aa50 <mutex_free+0x28>)
   1aa38:	4293      	cmp	r3, r2
   1aa3a:	d002      	beq.n	1aa42 <mutex_free+0x1a>
   1aa3c:	2300      	movs	r3, #0
   1aa3e:	6062      	str	r2, [r4, #4]
   1aa40:	6023      	str	r3, [r4, #0]
   1aa42:	bd10      	pop	{r4, pc}
   1aa44:	4b03      	ldr	r3, [pc, #12]	; (1aa54 <mutex_free+0x2c>)
   1aa46:	4804      	ldr	r0, [pc, #16]	; (1aa58 <mutex_free+0x30>)
   1aa48:	685b      	ldr	r3, [r3, #4]
   1aa4a:	4798      	blx	r3
   1aa4c:	e7ef      	b.n	1aa2e <mutex_free+0x6>
   1aa4e:	bf00      	nop
   1aa50:	a95c5f2c 	.word	0xa95c5f2c
   1aa54:	20000558 	.word	0x20000558
   1aa58:	00021928 	.word	0x00021928

0001aa5c <mutex_lock>:
   1aa5c:	b1c8      	cbz	r0, 1aa92 <mutex_lock+0x36>
   1aa5e:	6843      	ldr	r3, [r0, #4]
   1aa60:	4a0d      	ldr	r2, [pc, #52]	; (1aa98 <mutex_lock+0x3c>)
   1aa62:	4293      	cmp	r3, r2
   1aa64:	d013      	beq.n	1aa8e <mutex_lock+0x32>
   1aa66:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1aa6a:	d00e      	beq.n	1aa8a <mutex_lock+0x2e>
   1aa6c:	2301      	movs	r3, #1
   1aa6e:	e850 2f00 	ldrex	r2, [r0]
   1aa72:	4619      	mov	r1, r3
   1aa74:	e840 1c00 	strex	ip, r1, [r0]
   1aa78:	f09c 0f00 	teq	ip, #0
   1aa7c:	d1f7      	bne.n	1aa6e <mutex_lock+0x12>
   1aa7e:	2a01      	cmp	r2, #1
   1aa80:	d0f5      	beq.n	1aa6e <mutex_lock+0x12>
   1aa82:	f3bf 8f5f 	dmb	sy
   1aa86:	2000      	movs	r0, #0
   1aa88:	4770      	bx	lr
   1aa8a:	4804      	ldr	r0, [pc, #16]	; (1aa9c <mutex_lock+0x40>)
   1aa8c:	4770      	bx	lr
   1aa8e:	4804      	ldr	r0, [pc, #16]	; (1aaa0 <mutex_lock+0x44>)
   1aa90:	4770      	bx	lr
   1aa92:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1aa96:	4770      	bx	lr
   1aa98:	a95c5f2c 	.word	0xa95c5f2c
   1aa9c:	ffff8fe9 	.word	0xffff8fe9
   1aaa0:	ffff8fea 	.word	0xffff8fea

0001aaa4 <mutex_unlock>:
   1aaa4:	4603      	mov	r3, r0
   1aaa6:	b180      	cbz	r0, 1aaca <mutex_unlock+0x26>
   1aaa8:	6842      	ldr	r2, [r0, #4]
   1aaaa:	4909      	ldr	r1, [pc, #36]	; (1aad0 <mutex_unlock+0x2c>)
   1aaac:	428a      	cmp	r2, r1
   1aaae:	d00a      	beq.n	1aac6 <mutex_unlock+0x22>
   1aab0:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
   1aab4:	d005      	beq.n	1aac2 <mutex_unlock+0x1e>
   1aab6:	f3bf 8f5f 	dmb	sy
   1aaba:	2200      	movs	r2, #0
   1aabc:	4610      	mov	r0, r2
   1aabe:	601a      	str	r2, [r3, #0]
   1aac0:	4770      	bx	lr
   1aac2:	4804      	ldr	r0, [pc, #16]	; (1aad4 <mutex_unlock+0x30>)
   1aac4:	4770      	bx	lr
   1aac6:	4804      	ldr	r0, [pc, #16]	; (1aad8 <mutex_unlock+0x34>)
   1aac8:	4770      	bx	lr
   1aaca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1aace:	4770      	bx	lr
   1aad0:	a95c5f2c 	.word	0xa95c5f2c
   1aad4:	ffff8fe9 	.word	0xffff8fe9
   1aad8:	ffff8fea 	.word	0xffff8fea

0001aadc <mutex_init>:
   1aadc:	b510      	push	{r4, lr}
   1aade:	4604      	mov	r4, r0
   1aae0:	b120      	cbz	r0, 1aaec <mutex_init+0x10>
   1aae2:	2300      	movs	r3, #0
   1aae4:	4a03      	ldr	r2, [pc, #12]	; (1aaf4 <mutex_init+0x18>)
   1aae6:	6023      	str	r3, [r4, #0]
   1aae8:	6062      	str	r2, [r4, #4]
   1aaea:	bd10      	pop	{r4, pc}
   1aaec:	4802      	ldr	r0, [pc, #8]	; (1aaf8 <mutex_init+0x1c>)
   1aaee:	f7ff ff71 	bl	1a9d4 <CC_PalAbort>
   1aaf2:	e7f6      	b.n	1aae2 <mutex_init+0x6>
   1aaf4:	3a00003a 	.word	0x3a00003a
   1aaf8:	00021950 	.word	0x00021950

0001aafc <nrf_cc3xx_platform_set_mutexes>:
   1aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab00:	4c17      	ldr	r4, [pc, #92]	; (1ab60 <nrf_cc3xx_platform_set_mutexes+0x64>)
   1ab02:	6847      	ldr	r7, [r0, #4]
   1ab04:	6806      	ldr	r6, [r0, #0]
   1ab06:	6067      	str	r7, [r4, #4]
   1ab08:	6887      	ldr	r7, [r0, #8]
   1ab0a:	68c0      	ldr	r0, [r0, #12]
   1ab0c:	60a7      	str	r7, [r4, #8]
   1ab0e:	60e0      	str	r0, [r4, #12]
   1ab10:	6026      	str	r6, [r4, #0]
   1ab12:	6808      	ldr	r0, [r1, #0]
   1ab14:	4b13      	ldr	r3, [pc, #76]	; (1ab64 <nrf_cc3xx_platform_set_mutexes+0x68>)
   1ab16:	4d14      	ldr	r5, [pc, #80]	; (1ab68 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   1ab18:	6018      	str	r0, [r3, #0]
   1ab1a:	6848      	ldr	r0, [r1, #4]
   1ab1c:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1ab20:	6058      	str	r0, [r3, #4]
   1ab22:	6888      	ldr	r0, [r1, #8]
   1ab24:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
   1ab28:	6098      	str	r0, [r3, #8]
   1ab2a:	68c8      	ldr	r0, [r1, #12]
   1ab2c:	6909      	ldr	r1, [r1, #16]
   1ab2e:	60d8      	str	r0, [r3, #12]
   1ab30:	6119      	str	r1, [r3, #16]
   1ab32:	d012      	beq.n	1ab5a <nrf_cc3xx_platform_set_mutexes+0x5e>
   1ab34:	2300      	movs	r3, #0
   1ab36:	4a0d      	ldr	r2, [pc, #52]	; (1ab6c <nrf_cc3xx_platform_set_mutexes+0x70>)
   1ab38:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1ab3c:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
   1ab40:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1ab44:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
   1ab48:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
   1ab4c:	47b0      	blx	r6
   1ab4e:	6823      	ldr	r3, [r4, #0]
   1ab50:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1ab54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab58:	4718      	bx	r3
   1ab5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab5e:	bf00      	nop
   1ab60:	20000568 	.word	0x20000568
   1ab64:	20000578 	.word	0x20000578
   1ab68:	20007000 	.word	0x20007000
   1ab6c:	a95c5f2c 	.word	0xa95c5f2c

0001ab70 <CC_LibInitNoRng>:
   1ab70:	b508      	push	{r3, lr}
   1ab72:	f000 f811 	bl	1ab98 <CC_HalInit>
   1ab76:	b930      	cbnz	r0, 1ab86 <CC_LibInitNoRng+0x16>
   1ab78:	f000 f810 	bl	1ab9c <CC_PalInit>
   1ab7c:	b938      	cbnz	r0, 1ab8e <CC_LibInitNoRng+0x1e>
   1ab7e:	4a05      	ldr	r2, [pc, #20]	; (1ab94 <CC_LibInitNoRng+0x24>)
   1ab80:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
   1ab84:	bd08      	pop	{r3, pc}
   1ab86:	f000 f837 	bl	1abf8 <CC_PalTerminate>
   1ab8a:	2003      	movs	r0, #3
   1ab8c:	bd08      	pop	{r3, pc}
   1ab8e:	2004      	movs	r0, #4
   1ab90:	bd08      	pop	{r3, pc}
   1ab92:	bf00      	nop
   1ab94:	50845000 	.word	0x50845000

0001ab98 <CC_HalInit>:
   1ab98:	2000      	movs	r0, #0
   1ab9a:	4770      	bx	lr

0001ab9c <CC_PalInit>:
   1ab9c:	b510      	push	{r4, lr}
   1ab9e:	4811      	ldr	r0, [pc, #68]	; (1abe4 <CC_PalInit+0x48>)
   1aba0:	f000 f848 	bl	1ac34 <CC_PalMutexCreate>
   1aba4:	b100      	cbz	r0, 1aba8 <CC_PalInit+0xc>
   1aba6:	bd10      	pop	{r4, pc}
   1aba8:	480f      	ldr	r0, [pc, #60]	; (1abe8 <CC_PalInit+0x4c>)
   1abaa:	f000 f843 	bl	1ac34 <CC_PalMutexCreate>
   1abae:	2800      	cmp	r0, #0
   1abb0:	d1f9      	bne.n	1aba6 <CC_PalInit+0xa>
   1abb2:	4c0e      	ldr	r4, [pc, #56]	; (1abec <CC_PalInit+0x50>)
   1abb4:	4620      	mov	r0, r4
   1abb6:	f000 f83d 	bl	1ac34 <CC_PalMutexCreate>
   1abba:	2800      	cmp	r0, #0
   1abbc:	d1f3      	bne.n	1aba6 <CC_PalInit+0xa>
   1abbe:	4b0c      	ldr	r3, [pc, #48]	; (1abf0 <CC_PalInit+0x54>)
   1abc0:	480c      	ldr	r0, [pc, #48]	; (1abf4 <CC_PalInit+0x58>)
   1abc2:	601c      	str	r4, [r3, #0]
   1abc4:	f000 f836 	bl	1ac34 <CC_PalMutexCreate>
   1abc8:	4601      	mov	r1, r0
   1abca:	2800      	cmp	r0, #0
   1abcc:	d1eb      	bne.n	1aba6 <CC_PalInit+0xa>
   1abce:	f000 f82d 	bl	1ac2c <CC_PalDmaInit>
   1abd2:	4604      	mov	r4, r0
   1abd4:	b108      	cbz	r0, 1abda <CC_PalInit+0x3e>
   1abd6:	4620      	mov	r0, r4
   1abd8:	bd10      	pop	{r4, pc}
   1abda:	f000 f83f 	bl	1ac5c <CC_PalPowerSaveModeInit>
   1abde:	4620      	mov	r0, r4
   1abe0:	e7fa      	b.n	1abd8 <CC_PalInit+0x3c>
   1abe2:	bf00      	nop
   1abe4:	200005b0 	.word	0x200005b0
   1abe8:	200005a4 	.word	0x200005a4
   1abec:	200005ac 	.word	0x200005ac
   1abf0:	200005b4 	.word	0x200005b4
   1abf4:	200005a8 	.word	0x200005a8

0001abf8 <CC_PalTerminate>:
   1abf8:	b508      	push	{r3, lr}
   1abfa:	4808      	ldr	r0, [pc, #32]	; (1ac1c <CC_PalTerminate+0x24>)
   1abfc:	f000 f824 	bl	1ac48 <CC_PalMutexDestroy>
   1ac00:	4807      	ldr	r0, [pc, #28]	; (1ac20 <CC_PalTerminate+0x28>)
   1ac02:	f000 f821 	bl	1ac48 <CC_PalMutexDestroy>
   1ac06:	4807      	ldr	r0, [pc, #28]	; (1ac24 <CC_PalTerminate+0x2c>)
   1ac08:	f000 f81e 	bl	1ac48 <CC_PalMutexDestroy>
   1ac0c:	4806      	ldr	r0, [pc, #24]	; (1ac28 <CC_PalTerminate+0x30>)
   1ac0e:	f000 f81b 	bl	1ac48 <CC_PalMutexDestroy>
   1ac12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ac16:	f000 b80b 	b.w	1ac30 <CC_PalDmaTerminate>
   1ac1a:	bf00      	nop
   1ac1c:	200005b0 	.word	0x200005b0
   1ac20:	200005a4 	.word	0x200005a4
   1ac24:	200005ac 	.word	0x200005ac
   1ac28:	200005a8 	.word	0x200005a8

0001ac2c <CC_PalDmaInit>:
   1ac2c:	2000      	movs	r0, #0
   1ac2e:	4770      	bx	lr

0001ac30 <CC_PalDmaTerminate>:
   1ac30:	4770      	bx	lr
   1ac32:	bf00      	nop

0001ac34 <CC_PalMutexCreate>:
   1ac34:	b508      	push	{r3, lr}
   1ac36:	4b03      	ldr	r3, [pc, #12]	; (1ac44 <CC_PalMutexCreate+0x10>)
   1ac38:	6802      	ldr	r2, [r0, #0]
   1ac3a:	681b      	ldr	r3, [r3, #0]
   1ac3c:	6810      	ldr	r0, [r2, #0]
   1ac3e:	4798      	blx	r3
   1ac40:	2000      	movs	r0, #0
   1ac42:	bd08      	pop	{r3, pc}
   1ac44:	20000568 	.word	0x20000568

0001ac48 <CC_PalMutexDestroy>:
   1ac48:	b508      	push	{r3, lr}
   1ac4a:	4b03      	ldr	r3, [pc, #12]	; (1ac58 <CC_PalMutexDestroy+0x10>)
   1ac4c:	6802      	ldr	r2, [r0, #0]
   1ac4e:	685b      	ldr	r3, [r3, #4]
   1ac50:	6810      	ldr	r0, [r2, #0]
   1ac52:	4798      	blx	r3
   1ac54:	2000      	movs	r0, #0
   1ac56:	bd08      	pop	{r3, pc}
   1ac58:	20000568 	.word	0x20000568

0001ac5c <CC_PalPowerSaveModeInit>:
   1ac5c:	b570      	push	{r4, r5, r6, lr}
   1ac5e:	4c09      	ldr	r4, [pc, #36]	; (1ac84 <CC_PalPowerSaveModeInit+0x28>)
   1ac60:	4d09      	ldr	r5, [pc, #36]	; (1ac88 <CC_PalPowerSaveModeInit+0x2c>)
   1ac62:	6920      	ldr	r0, [r4, #16]
   1ac64:	68ab      	ldr	r3, [r5, #8]
   1ac66:	4798      	blx	r3
   1ac68:	b118      	cbz	r0, 1ac72 <CC_PalPowerSaveModeInit+0x16>
   1ac6a:	4b08      	ldr	r3, [pc, #32]	; (1ac8c <CC_PalPowerSaveModeInit+0x30>)
   1ac6c:	4808      	ldr	r0, [pc, #32]	; (1ac90 <CC_PalPowerSaveModeInit+0x34>)
   1ac6e:	685b      	ldr	r3, [r3, #4]
   1ac70:	4798      	blx	r3
   1ac72:	2100      	movs	r1, #0
   1ac74:	4a07      	ldr	r2, [pc, #28]	; (1ac94 <CC_PalPowerSaveModeInit+0x38>)
   1ac76:	68eb      	ldr	r3, [r5, #12]
   1ac78:	6011      	str	r1, [r2, #0]
   1ac7a:	6920      	ldr	r0, [r4, #16]
   1ac7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ac80:	4718      	bx	r3
   1ac82:	bf00      	nop
   1ac84:	20000578 	.word	0x20000578
   1ac88:	20000568 	.word	0x20000568
   1ac8c:	20000558 	.word	0x20000558
   1ac90:	00021974 	.word	0x00021974
   1ac94:	20006ffc 	.word	0x20006ffc

0001ac98 <adv_work_handle>:
	adv_start();
   1ac98:	f7eb befc 	b.w	6a94 <adv_start>

0001ac9c <data_ready>:
	if (result->status) {
   1ac9c:	7803      	ldrb	r3, [r0, #0]
   1ac9e:	b10b      	cbz	r3, 1aca4 <data_ready+0x8>
		peer_update(result);
   1aca0:	f7ec ba10 	b.w	70c4 <peer_update>
}
   1aca4:	4770      	bx	lr

0001aca6 <bt_addr_le_copy>:
   1aca6:	680b      	ldr	r3, [r1, #0]
   1aca8:	6003      	str	r3, [r0, #0]
   1acaa:	888b      	ldrh	r3, [r1, #4]
   1acac:	8083      	strh	r3, [r0, #4]
   1acae:	798b      	ldrb	r3, [r1, #6]
   1acb0:	7183      	strb	r3, [r0, #6]
}
   1acb2:	4770      	bx	lr

0001acb4 <data_cb>:
{
   1acb4:	b510      	push	{r4, lr}
	switch (data->type) {
   1acb6:	7803      	ldrb	r3, [r0, #0]
{
   1acb8:	b086      	sub	sp, #24
	switch (data->type) {
   1acba:	2bff      	cmp	r3, #255	; 0xff
   1acbc:	d11a      	bne.n	1acf4 <data_cb+0x40>
		if (sizeof(struct adv_mfg_data) == data->data_len) {
   1acbe:	7843      	ldrb	r3, [r0, #1]
   1acc0:	2b0a      	cmp	r3, #10
   1acc2:	d114      	bne.n	1acee <data_cb+0x3a>
			recv_mfg_data = (struct adv_mfg_data *)data->data;
   1acc4:	6844      	ldr	r4, [r0, #4]
			bt_addr_le_copy(&req.bt_addr, user_data);
   1acc6:	f10d 0001 	add.w	r0, sp, #1
   1acca:	f7ff ffec 	bl	1aca6 <bt_addr_le_copy>
			req.role = DM_ROLE_INITIATOR;
   1acce:	2301      	movs	r3, #1
   1acd0:	f88d 3000 	strb.w	r3, [sp]
			req.ranging_mode = peer_ranging_mode_get();
   1acd4:	f7ec f992 	bl	6ffc <peer_ranging_mode_get>
   1acd8:	f88d 000c 	strb.w	r0, [sp, #12]
			req.rng_seed = sys_le32_to_cpu(recv_mfg_data->rng_seed);
   1acdc:	f8d4 3006 	ldr.w	r3, [r4, #6]
			dm_request_add(&req);
   1ace0:	4668      	mov	r0, sp
			req.rng_seed = sys_le32_to_cpu(recv_mfg_data->rng_seed);
   1ace2:	9302      	str	r3, [sp, #8]
			req.start_delay_us = 0;
   1ace4:	2300      	movs	r3, #0
			req.extra_window_time_us = 0;
   1ace6:	e9cd 3304 	strd	r3, r3, [sp, #16]
			dm_request_add(&req);
   1acea:	f7ee faf1 	bl	92d0 <dm_request_add>
   1acee:	2000      	movs	r0, #0
}
   1acf0:	b006      	add	sp, #24
   1acf2:	bd10      	pop	{r4, pc}
		return true;
   1acf4:	2001      	movs	r0, #1
   1acf6:	e7fb      	b.n	1acf0 <data_cb+0x3c>

0001acf8 <mcpd_min_peer_result>:
	if (!a && !b) {
   1acf8:	b930      	cbnz	r0, 1ad08 <mcpd_min_peer_result+0x10>
   1acfa:	b119      	cbz	r1, 1ad04 <mcpd_min_peer_result+0xc>
		return b->result.ranging_mode == DM_RANGING_MODE_MCPD ? b : NULL;
   1acfc:	7d4b      	ldrb	r3, [r1, #21]
		return NULL;
   1acfe:	2b01      	cmp	r3, #1
   1ad00:	bf18      	it	ne
   1ad02:	2100      	movne	r1, #0
}
   1ad04:	4608      	mov	r0, r1
   1ad06:	4770      	bx	lr
		return a->result.ranging_mode == DM_RANGING_MODE_MCPD ? a : NULL;
   1ad08:	7d43      	ldrb	r3, [r0, #21]
	} else if (a && !b) {
   1ad0a:	b919      	cbnz	r1, 1ad14 <mcpd_min_peer_result+0x1c>
		return a->result.ranging_mode == DM_RANGING_MODE_MCPD ? a : NULL;
   1ad0c:	2b01      	cmp	r3, #1
   1ad0e:	bf08      	it	eq
   1ad10:	4601      	moveq	r1, r0
   1ad12:	e7f7      	b.n	1ad04 <mcpd_min_peer_result+0xc>
	} else if (a->result.ranging_mode == DM_RANGING_MODE_RTT &&
   1ad14:	b9e3      	cbnz	r3, 1ad50 <mcpd_min_peer_result+0x58>
		   b->result.ranging_mode == DM_RANGING_MODE_RTT) {
   1ad16:	7d4b      	ldrb	r3, [r1, #21]
	} else if (a->result.ranging_mode == DM_RANGING_MODE_RTT &&
   1ad18:	b30b      	cbz	r3, 1ad5e <mcpd_min_peer_result+0x66>
	} else if (a->result.ranging_mode == DM_RANGING_MODE_RTT &&
   1ad1a:	2b01      	cmp	r3, #1
   1ad1c:	d0f2      	beq.n	1ad04 <mcpd_min_peer_result+0xc>
	float dist_a = !isnan(a->result.dist_estimates.mcpd.high_precision) ?
   1ad1e:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
	float dist_b = !isnan(b->result.dist_estimates.mcpd.high_precision) ?
   1ad22:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
		  a->result.dist_estimates.mcpd.high_precision : a->result.dist_estimates.mcpd.best;
   1ad26:	eeb4 7a47 	vcmp.f32	s14, s14
   1ad2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  b->result.dist_estimates.mcpd.high_precision : b->result.dist_estimates.mcpd.best;
   1ad2e:	eef4 7a67 	vcmp.f32	s15, s15
		  a->result.dist_estimates.mcpd.high_precision : a->result.dist_estimates.mcpd.best;
   1ad32:	bf68      	it	vs
   1ad34:	ed90 7a09 	vldrvs	s14, [r0, #36]	; 0x24
		  b->result.dist_estimates.mcpd.high_precision : b->result.dist_estimates.mcpd.best;
   1ad38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad3c:	bf68      	it	vs
   1ad3e:	edd1 7a09 	vldrvs	s15, [r1, #36]	; 0x24
	if (dist_a < dist_b) {
   1ad42:	eeb4 7a67 	vcmp.f32	s14, s15
   1ad46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad4a:	bf48      	it	mi
   1ad4c:	4601      	movmi	r1, r0
   1ad4e:	e7d9      	b.n	1ad04 <mcpd_min_peer_result+0xc>
	} else if (a->result.ranging_mode == DM_RANGING_MODE_MCPD &&
   1ad50:	2b01      	cmp	r3, #1
   1ad52:	d1e4      	bne.n	1ad1e <mcpd_min_peer_result+0x26>
   1ad54:	7d4b      	ldrb	r3, [r1, #21]
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d1e1      	bne.n	1ad1e <mcpd_min_peer_result+0x26>
   1ad5a:	4601      	mov	r1, r0
   1ad5c:	e7d2      	b.n	1ad04 <mcpd_min_peer_result+0xc>
		return NULL;
   1ad5e:	4619      	mov	r1, r3
   1ad60:	e7d0      	b.n	1ad04 <mcpd_min_peer_result+0xc>

0001ad62 <dm_config_read>:
{
   1ad62:	b510      	push	{r4, lr}
	if (!config) {
   1ad64:	4604      	mov	r4, r0
   1ad66:	b910      	cbnz	r0, 1ad6e <dm_config_read+0xc>
		return -1;
   1ad68:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ad6c:	bd10      	pop	{r4, pc}
	ranging_mode = peer_ranging_mode_get();
   1ad6e:	f7ec f945 	bl	6ffc <peer_ranging_mode_get>
	if (ranging_mode == DM_RANGING_MODE_RTT) {
   1ad72:	b108      	cbz	r0, 1ad78 <dm_config_read+0x16>
	} else if (ranging_mode == DM_RANGING_MODE_MCPD) {
   1ad74:	2801      	cmp	r0, #1
   1ad76:	d1f7      	bne.n	1ad68 <dm_config_read+0x6>
		config->high_precision = true;
   1ad78:	2301      	movs	r3, #1
		config->mode = BT_DDFS_DM_RANGING_MODE_MCPD;
   1ad7a:	7020      	strb	r0, [r4, #0]
		config->high_precision = true;
   1ad7c:	7063      	strb	r3, [r4, #1]
	return 0;
   1ad7e:	2000      	movs	r0, #0
   1ad80:	e7f4      	b.n	1ad6c <dm_config_read+0xa>

0001ad82 <bt_addr_le_copy>:
   1ad82:	680b      	ldr	r3, [r1, #0]
   1ad84:	6003      	str	r3, [r0, #0]
   1ad86:	888b      	ldrh	r3, [r1, #4]
   1ad88:	8083      	strh	r3, [r0, #4]
   1ad8a:	798b      	ldrb	r3, [r1, #6]
   1ad8c:	7183      	strb	r3, [r0, #6]
   1ad8e:	4770      	bx	lr

0001ad90 <arch_printk_char_out>:
}
   1ad90:	2000      	movs	r0, #0
   1ad92:	4770      	bx	lr

0001ad94 <str_out>:
{
   1ad94:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1ad96:	688a      	ldr	r2, [r1, #8]
   1ad98:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1ad9a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1ad9c:	b114      	cbz	r4, 1ada4 <str_out+0x10>
   1ad9e:	684b      	ldr	r3, [r1, #4]
   1ada0:	4293      	cmp	r3, r2
   1ada2:	dc01      	bgt.n	1ada8 <str_out+0x14>
		ctx->count++;
   1ada4:	608d      	str	r5, [r1, #8]
}
   1ada6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1ada8:	3b01      	subs	r3, #1
   1adaa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1adac:	bf08      	it	eq
   1adae:	2200      	moveq	r2, #0
   1adb0:	608d      	str	r5, [r1, #8]
   1adb2:	bf0c      	ite	eq
   1adb4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1adb6:	54a0      	strbne	r0, [r4, r2]
   1adb8:	e7f5      	b.n	1ada6 <str_out+0x12>

0001adba <printk>:
{
   1adba:	b40f      	push	{r0, r1, r2, r3}
   1adbc:	b507      	push	{r0, r1, r2, lr}
   1adbe:	a904      	add	r1, sp, #16
   1adc0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1adc4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1adc6:	f7ec fa99 	bl	72fc <vprintk>
}
   1adca:	b003      	add	sp, #12
   1adcc:	f85d eb04 	ldr.w	lr, [sp], #4
   1add0:	b004      	add	sp, #16
   1add2:	4770      	bx	lr

0001add4 <snprintk>:
{
   1add4:	b40c      	push	{r2, r3}
   1add6:	b507      	push	{r0, r1, r2, lr}
   1add8:	ab04      	add	r3, sp, #16
   1adda:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1adde:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1ade0:	f7ec fa9a 	bl	7318 <vsnprintk>
}
   1ade4:	b003      	add	sp, #12
   1ade6:	f85d eb04 	ldr.w	lr, [sp], #4
   1adea:	b002      	add	sp, #8
   1adec:	4770      	bx	lr

0001adee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1adee:	4604      	mov	r4, r0
   1adf0:	b508      	push	{r3, lr}
   1adf2:	4608      	mov	r0, r1
   1adf4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1adf6:	461a      	mov	r2, r3
   1adf8:	47a0      	blx	r4
   1adfa:	f7fd fa59 	bl	182b0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1adfe:	f7ef f9dd 	bl	a1bc <z_impl_k_thread_abort>

0001ae02 <chunk_field>:
	if (big_heap(h)) {
   1ae02:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ae04:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ae08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1ae0c:	bf2c      	ite	cs
   1ae0e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1ae12:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1ae16:	4770      	bx	lr

0001ae18 <chunk_set>:
	void *cmem = &buf[c];
   1ae18:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ae1c:	6880      	ldr	r0, [r0, #8]
   1ae1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1ae22:	bf2c      	ite	cs
   1ae24:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1ae28:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1ae2c:	4770      	bx	lr

0001ae2e <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ae2e:	2201      	movs	r2, #1
{
   1ae30:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ae32:	f7ff ffe6 	bl	1ae02 <chunk_field>
}
   1ae36:	40d0      	lsrs	r0, r2
   1ae38:	bd08      	pop	{r3, pc}

0001ae3a <set_chunk_used>:
	if (big_heap(h)) {
   1ae3a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ae3c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ae40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ae44:	d308      	bcc.n	1ae58 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae46:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1ae48:	b11a      	cbz	r2, 1ae52 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae4a:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ae4e:	604b      	str	r3, [r1, #4]
   1ae50:	4770      	bx	lr
   1ae52:	f023 0301 	bic.w	r3, r3, #1
   1ae56:	e7fa      	b.n	1ae4e <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae58:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1ae5a:	b11a      	cbz	r2, 1ae64 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ae5c:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ae60:	804b      	strh	r3, [r1, #2]
}
   1ae62:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ae64:	f023 0301 	bic.w	r3, r3, #1
   1ae68:	e7fa      	b.n	1ae60 <set_chunk_used+0x26>

0001ae6a <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ae6a:	0053      	lsls	r3, r2, #1
   1ae6c:	2201      	movs	r2, #1
   1ae6e:	f7ff bfd3 	b.w	1ae18 <chunk_set>

0001ae72 <mem_to_chunkid>:
	return big_heap(h) ? 8 : 4;
   1ae72:	6883      	ldr	r3, [r0, #8]
   1ae74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ae78:	bf34      	ite	cc
   1ae7a:	2304      	movcc	r3, #4
   1ae7c:	2308      	movcs	r3, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ae7e:	1ac9      	subs	r1, r1, r3
   1ae80:	1a08      	subs	r0, r1, r0
}
   1ae82:	08c0      	lsrs	r0, r0, #3
   1ae84:	4770      	bx	lr

0001ae86 <bytes_to_chunksz.isra.0>:
   1ae86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1ae8a:	bf34      	ite	cc
   1ae8c:	2304      	movcc	r3, #4
   1ae8e:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ae90:	3107      	adds	r1, #7
   1ae92:	18c8      	adds	r0, r1, r3
}
   1ae94:	08c0      	lsrs	r0, r0, #3
   1ae96:	4770      	bx	lr

0001ae98 <bucket_idx.isra.0>:
static inline size_t chunksz_to_bytes(struct z_heap *h, chunksz_t chunksz_in)
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
   1ae98:	460a      	mov	r2, r1
   1ae9a:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   1ae9c:	2101      	movs	r1, #1
   1ae9e:	f7ff fff2 	bl	1ae86 <bytes_to_chunksz.isra.0>
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1aea2:	3201      	adds	r2, #1
   1aea4:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   1aea6:	fab2 f082 	clz	r0, r2
}
   1aeaa:	f1c0 001f 	rsb	r0, r0, #31
   1aeae:	bd08      	pop	{r3, pc}

0001aeb0 <free_list_remove_bidx>:
{
   1aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aeb4:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1aeb6:	2203      	movs	r2, #3
   1aeb8:	460e      	mov	r6, r1
   1aeba:	4604      	mov	r4, r0
   1aebc:	f7ff ffa1 	bl	1ae02 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1aec0:	4286      	cmp	r6, r0
   1aec2:	4605      	mov	r5, r0
   1aec4:	f107 0804 	add.w	r8, r7, #4
   1aec8:	d10a      	bne.n	1aee0 <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~BIT(bidx);
   1aeca:	2201      	movs	r2, #1
   1aecc:	68e3      	ldr	r3, [r4, #12]
   1aece:	40ba      	lsls	r2, r7
   1aed0:	ea23 0302 	bic.w	r3, r3, r2
   1aed4:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1aed6:	2300      	movs	r3, #0
   1aed8:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1aedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1aee0:	4631      	mov	r1, r6
   1aee2:	2202      	movs	r2, #2
   1aee4:	4620      	mov	r0, r4
   1aee6:	f7ff ff8c 	bl	1ae02 <chunk_field>
   1aeea:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1aeec:	462b      	mov	r3, r5
   1aeee:	4601      	mov	r1, r0
   1aef0:	2203      	movs	r2, #3
   1aef2:	4620      	mov	r0, r4
		b->next = second;
   1aef4:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1aef8:	f7ff ff8e 	bl	1ae18 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1aefc:	4633      	mov	r3, r6
   1aefe:	4629      	mov	r1, r5
   1af00:	4620      	mov	r0, r4
}
   1af02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1af06:	2202      	movs	r2, #2
   1af08:	f7ff bf86 	b.w	1ae18 <chunk_set>

0001af0c <free_list_remove>:
{
   1af0c:	b570      	push	{r4, r5, r6, lr}
   1af0e:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   1af10:	6886      	ldr	r6, [r0, #8]
   1af12:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1af14:	f7ff ff8b 	bl	1ae2e <chunk_size>
   1af18:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1af1c:	4601      	mov	r1, r0
   1af1e:	d301      	bcc.n	1af24 <free_list_remove+0x18>
   1af20:	2801      	cmp	r0, #1
   1af22:	d009      	beq.n	1af38 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1af24:	4630      	mov	r0, r6
   1af26:	f7ff ffb7 	bl	1ae98 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1af2a:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1af2c:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1af2e:	4620      	mov	r0, r4
}
   1af30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1af34:	f7ff bfbc 	b.w	1aeb0 <free_list_remove_bidx>
}
   1af38:	bd70      	pop	{r4, r5, r6, pc}

0001af3a <alloc_chunk>:
{
   1af3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af3e:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   1af40:	6880      	ldr	r0, [r0, #8]
{
   1af42:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1af44:	f7ff ffa8 	bl	1ae98 <bucket_idx.isra.0>
   1af48:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	if (b->next) {
   1af4c:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
   1af50:	4606      	mov	r6, r0
	if (b->next) {
   1af52:	f1b9 0f00 	cmp.w	r9, #0
   1af56:	d01b      	beq.n	1af90 <alloc_chunk+0x56>
   1af58:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1af5a:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1af5e:	4628      	mov	r0, r5
   1af60:	4621      	mov	r1, r4
   1af62:	f7ff ff64 	bl	1ae2e <chunk_size>
   1af66:	4540      	cmp	r0, r8
   1af68:	d307      	bcc.n	1af7a <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   1af6a:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   1af6c:	4621      	mov	r1, r4
   1af6e:	4628      	mov	r0, r5
   1af70:	f7ff ff9e 	bl	1aeb0 <free_list_remove_bidx>
}
   1af74:	4620      	mov	r0, r4
   1af76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1af7a:	2203      	movs	r2, #3
   1af7c:	4621      	mov	r1, r4
   1af7e:	4628      	mov	r0, r5
   1af80:	f7ff ff3f 	bl	1ae02 <chunk_field>
		} while (--i && b->next != first);
   1af84:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1af86:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1af8a:	d001      	beq.n	1af90 <alloc_chunk+0x56>
   1af8c:	4581      	cmp	r9, r0
   1af8e:	d1e4      	bne.n	1af5a <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1af90:	f04f 34ff 	mov.w	r4, #4294967295
   1af94:	68eb      	ldr	r3, [r5, #12]
   1af96:	3601      	adds	r6, #1
   1af98:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1af9a:	401c      	ands	r4, r3
   1af9c:	d0ea      	beq.n	1af74 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   1af9e:	fa94 f2a4 	rbit	r2, r4
   1afa2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1afa6:	1d13      	adds	r3, r2, #4
   1afa8:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1afac:	e7de      	b.n	1af6c <alloc_chunk+0x32>

0001afae <split_chunks>:
{
   1afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afb2:	4614      	mov	r4, r2
   1afb4:	460e      	mov	r6, r1
   1afb6:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1afb8:	f7ff ff39 	bl	1ae2e <chunk_size>
	chunksz_t lsz = rc - lc;
   1afbc:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1afc0:	1b37      	subs	r7, r6, r4
   1afc2:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1afc4:	4642      	mov	r2, r8
   1afc6:	4631      	mov	r1, r6
   1afc8:	4628      	mov	r0, r5
   1afca:	f7ff ff4e 	bl	1ae6a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1afce:	463a      	mov	r2, r7
   1afd0:	4621      	mov	r1, r4
   1afd2:	4628      	mov	r0, r5
   1afd4:	f7ff ff49 	bl	1ae6a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1afd8:	4643      	mov	r3, r8
   1afda:	2200      	movs	r2, #0
   1afdc:	4621      	mov	r1, r4
   1afde:	4628      	mov	r0, r5
   1afe0:	f7ff ff1a 	bl	1ae18 <chunk_set>
	return c + chunk_size(h, c);
   1afe4:	4621      	mov	r1, r4
   1afe6:	4628      	mov	r0, r5
   1afe8:	f7ff ff21 	bl	1ae2e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1afec:	463b      	mov	r3, r7
   1afee:	1821      	adds	r1, r4, r0
   1aff0:	2200      	movs	r2, #0
   1aff2:	4628      	mov	r0, r5
}
   1aff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aff8:	f7ff bf0e 	b.w	1ae18 <chunk_set>

0001affc <merge_chunks>:
{
   1affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b000:	4616      	mov	r6, r2
   1b002:	4604      	mov	r4, r0
   1b004:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1b006:	f7ff ff12 	bl	1ae2e <chunk_size>
   1b00a:	4631      	mov	r1, r6
   1b00c:	4605      	mov	r5, r0
   1b00e:	4620      	mov	r0, r4
   1b010:	f7ff ff0d 	bl	1ae2e <chunk_size>
   1b014:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1b016:	462a      	mov	r2, r5
   1b018:	4639      	mov	r1, r7
   1b01a:	4620      	mov	r0, r4
   1b01c:	f7ff ff25 	bl	1ae6a <set_chunk_size>
	return c + chunk_size(h, c);
   1b020:	4631      	mov	r1, r6
   1b022:	4620      	mov	r0, r4
   1b024:	f7ff ff03 	bl	1ae2e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1b028:	462b      	mov	r3, r5
   1b02a:	1831      	adds	r1, r6, r0
   1b02c:	2200      	movs	r2, #0
   1b02e:	4620      	mov	r0, r4
}
   1b030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b034:	f7ff bef0 	b.w	1ae18 <chunk_set>

0001b038 <free_list_add>:
{
   1b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b03c:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   1b03e:	6886      	ldr	r6, [r0, #8]
   1b040:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1b042:	f7ff fef4 	bl	1ae2e <chunk_size>
   1b046:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1b04a:	4601      	mov	r1, r0
   1b04c:	d301      	bcc.n	1b052 <free_list_add+0x1a>
   1b04e:	2801      	cmp	r0, #1
   1b050:	d032      	beq.n	1b0b8 <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b052:	4630      	mov	r0, r6
   1b054:	f7ff ff20 	bl	1ae98 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1b058:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1b05c:	690e      	ldr	r6, [r1, #16]
   1b05e:	b996      	cbnz	r6, 1b086 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
   1b060:	2201      	movs	r2, #1
   1b062:	68e3      	ldr	r3, [r4, #12]
   1b064:	4082      	lsls	r2, r0
   1b066:	4313      	orrs	r3, r2
   1b068:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1b06a:	2202      	movs	r2, #2
		b->next = c;
   1b06c:	610d      	str	r5, [r1, #16]
   1b06e:	462b      	mov	r3, r5
   1b070:	4629      	mov	r1, r5
   1b072:	4620      	mov	r0, r4
   1b074:	f7ff fed0 	bl	1ae18 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1b078:	2203      	movs	r2, #3
   1b07a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1b07c:	4620      	mov	r0, r4
}
   1b07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b082:	f7ff bec9 	b.w	1ae18 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1b086:	2202      	movs	r2, #2
   1b088:	4631      	mov	r1, r6
   1b08a:	4620      	mov	r0, r4
   1b08c:	f7ff feb9 	bl	1ae02 <chunk_field>
   1b090:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1b092:	4603      	mov	r3, r0
   1b094:	4629      	mov	r1, r5
   1b096:	4620      	mov	r0, r4
   1b098:	f7ff febe 	bl	1ae18 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1b09c:	2203      	movs	r2, #3
   1b09e:	4633      	mov	r3, r6
   1b0a0:	4629      	mov	r1, r5
   1b0a2:	4620      	mov	r0, r4
   1b0a4:	f7ff feb8 	bl	1ae18 <chunk_set>
   1b0a8:	4639      	mov	r1, r7
   1b0aa:	462b      	mov	r3, r5
   1b0ac:	4620      	mov	r0, r4
   1b0ae:	f7ff feb3 	bl	1ae18 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1b0b2:	2202      	movs	r2, #2
   1b0b4:	4631      	mov	r1, r6
   1b0b6:	e7e1      	b.n	1b07c <free_list_add+0x44>
   1b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b0bc <free_chunk>:
{
   1b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0be:	460c      	mov	r4, r1
   1b0c0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1b0c2:	f7ff feb4 	bl	1ae2e <chunk_size>
   1b0c6:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b0c8:	2201      	movs	r2, #1
   1b0ca:	4631      	mov	r1, r6
   1b0cc:	4628      	mov	r0, r5
   1b0ce:	f7ff fe98 	bl	1ae02 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1b0d2:	07c3      	lsls	r3, r0, #31
   1b0d4:	d40c      	bmi.n	1b0f0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1b0d6:	4631      	mov	r1, r6
   1b0d8:	4628      	mov	r0, r5
   1b0da:	f7ff ff17 	bl	1af0c <free_list_remove>
	return c + chunk_size(h, c);
   1b0de:	4621      	mov	r1, r4
   1b0e0:	4628      	mov	r0, r5
   1b0e2:	f7ff fea4 	bl	1ae2e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1b0e6:	4621      	mov	r1, r4
   1b0e8:	1822      	adds	r2, r4, r0
   1b0ea:	4628      	mov	r0, r5
   1b0ec:	f7ff ff86 	bl	1affc <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1b0f0:	2200      	movs	r2, #0
   1b0f2:	4621      	mov	r1, r4
   1b0f4:	4628      	mov	r0, r5
   1b0f6:	f7ff fe84 	bl	1ae02 <chunk_field>
   1b0fa:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b0fc:	2201      	movs	r2, #1
   1b0fe:	4639      	mov	r1, r7
   1b100:	4628      	mov	r0, r5
   1b102:	f7ff fe7e 	bl	1ae02 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1b106:	ea10 0602 	ands.w	r6, r0, r2
   1b10a:	d113      	bne.n	1b134 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1b10c:	4639      	mov	r1, r7
   1b10e:	4628      	mov	r0, r5
   1b110:	f7ff fefc 	bl	1af0c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1b114:	4621      	mov	r1, r4
   1b116:	4632      	mov	r2, r6
   1b118:	4628      	mov	r0, r5
   1b11a:	f7ff fe72 	bl	1ae02 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1b11e:	4622      	mov	r2, r4
   1b120:	1a21      	subs	r1, r4, r0
   1b122:	4628      	mov	r0, r5
   1b124:	f7ff ff6a 	bl	1affc <merge_chunks>
   1b128:	4621      	mov	r1, r4
   1b12a:	4632      	mov	r2, r6
   1b12c:	4628      	mov	r0, r5
   1b12e:	f7ff fe68 	bl	1ae02 <chunk_field>
   1b132:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1b134:	4621      	mov	r1, r4
   1b136:	4628      	mov	r0, r5
}
   1b138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1b13c:	f7ff bf7c 	b.w	1b038 <free_list_add>

0001b140 <sys_heap_alloc>:
{
   1b140:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1b142:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b144:	b909      	cbnz	r1, 1b14a <sys_heap_alloc+0xa>
		return NULL;
   1b146:	2000      	movs	r0, #0
}
   1b148:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1b14a:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b14c:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1b150:	d9f9      	bls.n	1b146 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1b152:	f7ff fe98 	bl	1ae86 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b156:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1b158:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b15a:	4630      	mov	r0, r6
   1b15c:	f7ff feed 	bl	1af3a <alloc_chunk>
	if (c == 0U) {
   1b160:	4604      	mov	r4, r0
   1b162:	2800      	cmp	r0, #0
   1b164:	d0ef      	beq.n	1b146 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1b166:	4601      	mov	r1, r0
   1b168:	4630      	mov	r0, r6
   1b16a:	f7ff fe60 	bl	1ae2e <chunk_size>
   1b16e:	42a8      	cmp	r0, r5
   1b170:	d909      	bls.n	1b186 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1b172:	4425      	add	r5, r4
   1b174:	4621      	mov	r1, r4
   1b176:	4630      	mov	r0, r6
   1b178:	462a      	mov	r2, r5
   1b17a:	f7ff ff18 	bl	1afae <split_chunks>
		free_list_add(h, c + chunk_sz);
   1b17e:	4629      	mov	r1, r5
   1b180:	4630      	mov	r0, r6
   1b182:	f7ff ff59 	bl	1b038 <free_list_add>
	set_chunk_used(h, c, true);
   1b186:	4630      	mov	r0, r6
   1b188:	2201      	movs	r2, #1
   1b18a:	4621      	mov	r1, r4
   1b18c:	f7ff fe55 	bl	1ae3a <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1b190:	68b3      	ldr	r3, [r6, #8]
   1b192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1b196:	bf34      	ite	cc
   1b198:	2304      	movcc	r3, #4
   1b19a:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1b19c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b1a0:	4418      	add	r0, r3
	return mem;
   1b1a2:	e7d1      	b.n	1b148 <sys_heap_alloc+0x8>

0001b1a4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b1a4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1b1a6:	f013 0307 	ands.w	r3, r3, #7
   1b1aa:	d105      	bne.n	1b1b8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b1ac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1b1ae:	2b00      	cmp	r3, #0
   1b1b0:	bf0c      	ite	eq
   1b1b2:	2000      	moveq	r0, #0
   1b1b4:	2003      	movne	r0, #3
   1b1b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b1b8:	2b02      	cmp	r3, #2
   1b1ba:	d105      	bne.n	1b1c8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b1bc:	8bc0      	ldrh	r0, [r0, #30]
   1b1be:	fab0 f080 	clz	r0, r0
   1b1c2:	0940      	lsrs	r0, r0, #5
   1b1c4:	0080      	lsls	r0, r0, #2
   1b1c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b1c8:	2b01      	cmp	r3, #1
   1b1ca:	d105      	bne.n	1b1d8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b1cc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1b1ce:	2b00      	cmp	r3, #0
   1b1d0:	bf0c      	ite	eq
   1b1d2:	2000      	moveq	r0, #0
   1b1d4:	2005      	movne	r0, #5
   1b1d6:	4770      	bx	lr
	int evt = EVT_NOP;
   1b1d8:	2000      	movs	r0, #0
}
   1b1da:	4770      	bx	lr

0001b1dc <validate_args>:
{
   1b1dc:	b510      	push	{r4, lr}
   1b1de:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b1e0:	b100      	cbz	r0, 1b1e4 <validate_args+0x8>
   1b1e2:	b911      	cbnz	r1, 1b1ea <validate_args+0xe>
		return -EINVAL;
   1b1e4:	f06f 0015 	mvn.w	r0, #21
}
   1b1e8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1b1ea:	1d08      	adds	r0, r1, #4
   1b1ec:	f000 f82f 	bl	1b24e <sys_notify_validate>
	if ((rv == 0)
   1b1f0:	2800      	cmp	r0, #0
   1b1f2:	d1f9      	bne.n	1b1e8 <validate_args+0xc>
	    && ((cli->notify.flags
   1b1f4:	68a3      	ldr	r3, [r4, #8]
   1b1f6:	2b03      	cmp	r3, #3
   1b1f8:	d9f6      	bls.n	1b1e8 <validate_args+0xc>
   1b1fa:	e7f3      	b.n	1b1e4 <validate_args+0x8>

0001b1fc <notify_one>:
{
   1b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b200:	460d      	mov	r5, r1
   1b202:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b204:	4619      	mov	r1, r3
   1b206:	1d28      	adds	r0, r5, #4
{
   1b208:	4690      	mov	r8, r2
   1b20a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b20c:	f7ec fc20 	bl	7a50 <sys_notify_finalize>
	if (cb) {
   1b210:	4604      	mov	r4, r0
   1b212:	b138      	cbz	r0, 1b224 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b214:	4633      	mov	r3, r6
   1b216:	4642      	mov	r2, r8
   1b218:	4629      	mov	r1, r5
   1b21a:	4638      	mov	r0, r7
   1b21c:	46a4      	mov	ip, r4
}
   1b21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b222:	4760      	bx	ip
}
   1b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b228 <onoff_manager_init>:
{
   1b228:	b538      	push	{r3, r4, r5, lr}
   1b22a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b22c:	4605      	mov	r5, r0
   1b22e:	b158      	cbz	r0, 1b248 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b230:	b151      	cbz	r1, 1b248 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b232:	680b      	ldr	r3, [r1, #0]
   1b234:	b143      	cbz	r3, 1b248 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b236:	684b      	ldr	r3, [r1, #4]
   1b238:	b133      	cbz	r3, 1b248 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b23a:	2220      	movs	r2, #32
   1b23c:	2100      	movs	r1, #0
   1b23e:	f004 f8e8 	bl	1f412 <memset>
	return 0;
   1b242:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b244:	612c      	str	r4, [r5, #16]
}
   1b246:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b248:	f06f 0015 	mvn.w	r0, #21
   1b24c:	e7fb      	b.n	1b246 <onoff_manager_init+0x1e>

0001b24e <sys_notify_validate>:
	if (notify == NULL) {
   1b24e:	4603      	mov	r3, r0
   1b250:	b140      	cbz	r0, 1b264 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b252:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b254:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1b258:	2a02      	cmp	r2, #2
   1b25a:	d006      	beq.n	1b26a <sys_notify_validate+0x1c>
   1b25c:	2a03      	cmp	r2, #3
   1b25e:	d004      	beq.n	1b26a <sys_notify_validate+0x1c>
   1b260:	2a01      	cmp	r2, #1
   1b262:	d005      	beq.n	1b270 <sys_notify_validate+0x22>
   1b264:	f06f 0015 	mvn.w	r0, #21
}
   1b268:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b26a:	681a      	ldr	r2, [r3, #0]
   1b26c:	2a00      	cmp	r2, #0
   1b26e:	d0f9      	beq.n	1b264 <sys_notify_validate+0x16>
		notify->result = 0;
   1b270:	2000      	movs	r0, #0
   1b272:	6098      	str	r0, [r3, #8]
   1b274:	4770      	bx	lr

0001b276 <_ldiv5>:
	uint32_t v_lo = *v;
   1b276:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1b27a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1b27c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1b280:	fba2 2403 	umull	r2, r4, r2, r3
   1b284:	18d5      	adds	r5, r2, r3
   1b286:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1b28a:	fba1 1303 	umull	r1, r3, r1, r3
   1b28e:	1852      	adds	r2, r2, r1
   1b290:	eb44 0403 	adc.w	r4, r4, r3
   1b294:	1952      	adds	r2, r2, r5
   1b296:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1b29a:	1889      	adds	r1, r1, r2
   1b29c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1b2a0:	e9c0 1300 	strd	r1, r3, [r0]
}
   1b2a4:	bd30      	pop	{r4, r5, pc}

0001b2a6 <_get_digit>:
{
   1b2a6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   1b2a8:	680a      	ldr	r2, [r1, #0]
{
   1b2aa:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1b2ac:	2a00      	cmp	r2, #0
   1b2ae:	dd0f      	ble.n	1b2d0 <_get_digit+0x2a>
		--*digit_count;
   1b2b0:	3a01      	subs	r2, #1
   1b2b2:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1b2b4:	6844      	ldr	r4, [r0, #4]
   1b2b6:	200a      	movs	r0, #10
   1b2b8:	681a      	ldr	r2, [r3, #0]
   1b2ba:	fba2 1200 	umull	r1, r2, r2, r0
   1b2be:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1b2c2:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1b2c4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1b2c8:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1b2cc:	3030      	adds	r0, #48	; 0x30
}
   1b2ce:	bd10      	pop	{r4, pc}
		rval = '0';
   1b2d0:	2030      	movs	r0, #48	; 0x30
   1b2d2:	e7fc      	b.n	1b2ce <_get_digit+0x28>

0001b2d4 <outs>:
{
   1b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2d8:	4607      	mov	r7, r0
   1b2da:	4688      	mov	r8, r1
   1b2dc:	4615      	mov	r5, r2
   1b2de:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b2e0:	4614      	mov	r4, r2
   1b2e2:	42b4      	cmp	r4, r6
   1b2e4:	d305      	bcc.n	1b2f2 <outs+0x1e>
   1b2e6:	b10e      	cbz	r6, 1b2ec <outs+0x18>
	return (int)count;
   1b2e8:	1b60      	subs	r0, r4, r5
   1b2ea:	e008      	b.n	1b2fe <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b2ec:	7823      	ldrb	r3, [r4, #0]
   1b2ee:	2b00      	cmp	r3, #0
   1b2f0:	d0fa      	beq.n	1b2e8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1b2f2:	4641      	mov	r1, r8
   1b2f4:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b2f8:	47b8      	blx	r7
		if (rc < 0) {
   1b2fa:	2800      	cmp	r0, #0
   1b2fc:	daf1      	bge.n	1b2e2 <outs+0xe>
}
   1b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b302 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1b302:	4040      	eors	r0, r0
   1b304:	f380 8811 	msr	BASEPRI, r0
   1b308:	f04f 0004 	mov.w	r0, #4
   1b30c:	df02      	svc	2
}
   1b30e:	4770      	bx	lr

0001b310 <assert_print>:

void assert_print(const char *fmt, ...)
{
   1b310:	b40f      	push	{r0, r1, r2, r3}
   1b312:	b507      	push	{r0, r1, r2, lr}
   1b314:	a904      	add	r1, sp, #16
   1b316:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1b31a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1b31c:	f7eb ffee 	bl	72fc <vprintk>

	va_end(ap);
}
   1b320:	b003      	add	sp, #12
   1b322:	f85d eb04 	ldr.w	lr, [sp], #4
   1b326:	b004      	add	sp, #16
   1b328:	4770      	bx	lr

0001b32a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b32a:	4770      	bx	lr

0001b32c <pm_state_exit_post_ops>:
   1b32c:	2300      	movs	r3, #0
   1b32e:	f383 8811 	msr	BASEPRI, r3
   1b332:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b336:	4770      	bx	lr

0001b338 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   1b338:	b40f      	push	{r0, r1, r2, r3}
   1b33a:	b507      	push	{r0, r1, r2, lr}
   1b33c:	a904      	add	r1, sp, #16
   1b33e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1b342:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1b344:	f7eb ffda 	bl	72fc <vprintk>
	va_end(ap);
}
   1b348:	b003      	add	sp, #12
   1b34a:	f85d eb04 	ldr.w	lr, [sp], #4
   1b34e:	b004      	add	sp, #16
   1b350:	4770      	bx	lr

0001b352 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   1b352:	6903      	ldr	r3, [r0, #16]
}
   1b354:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
   1b358:	4770      	bx	lr

0001b35a <drop_tx_buffer>:
}
   1b35a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b35e:	4770      	bx	lr

0001b360 <release_rx_buffer>:
{
   1b360:	4608      	mov	r0, r1
   1b362:	b508      	push	{r3, lr}
   1b364:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1b366:	b118      	cbz	r0, 1b370 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   1b368:	f003 fa5f 	bl	1e82a <rpmsg_release_rx_buffer>
	return 0;
   1b36c:	2000      	movs	r0, #0
}
   1b36e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1b370:	f06f 0001 	mvn.w	r0, #1
   1b374:	e7fb      	b.n	1b36e <release_rx_buffer+0xe>

0001b376 <hold_rx_buffer>:
{
   1b376:	4608      	mov	r0, r1
   1b378:	b508      	push	{r3, lr}
   1b37a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1b37c:	b118      	cbz	r0, 1b386 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1b37e:	f003 fa4c 	bl	1e81a <rpmsg_hold_rx_buffer>
	return 0;
   1b382:	2000      	movs	r0, #0
}
   1b384:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1b386:	f06f 0001 	mvn.w	r0, #1
   1b38a:	e7fb      	b.n	1b384 <hold_rx_buffer+0xe>

0001b38c <send_nocopy>:
{
   1b38c:	b513      	push	{r0, r1, r4, lr}
   1b38e:	4604      	mov	r4, r0
   1b390:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b392:	6921      	ldr	r1, [r4, #16]
   1b394:	f501 716f 	add.w	r1, r1, #956	; 0x3bc
   1b398:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1b39c:	2902      	cmp	r1, #2
   1b39e:	d109      	bne.n	1b3b4 <send_nocopy+0x28>
	if (len == 0) {
   1b3a0:	b15b      	cbz	r3, 1b3ba <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   1b3a2:	b168      	cbz	r0, 1b3c0 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   1b3a4:	9300      	str	r3, [sp, #0]
   1b3a6:	4613      	mov	r3, r2
   1b3a8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1b3ac:	f7f9 fa82 	bl	148b4 <rpmsg_send_offchannel_nocopy>
}
   1b3b0:	b002      	add	sp, #8
   1b3b2:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1b3b4:	f06f 000f 	mvn.w	r0, #15
   1b3b8:	e7fa      	b.n	1b3b0 <send_nocopy+0x24>
		return -EBADMSG;
   1b3ba:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1b3be:	e7f7      	b.n	1b3b0 <send_nocopy+0x24>
		return -ENOENT;
   1b3c0:	f06f 0001 	mvn.w	r0, #1
   1b3c4:	e7f4      	b.n	1b3b0 <send_nocopy+0x24>

0001b3c6 <get_tx_buffer>:
{
   1b3c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b3ca:	461c      	mov	r4, r3
   1b3cc:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   1b3d0:	4616      	mov	r6, r2
   1b3d2:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   1b3d4:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   1b3d6:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   1b3d8:	b339      	cbz	r1, 1b42a <get_tx_buffer+0x64>
	if (!r_data || !size) {
   1b3da:	b34a      	cbz	r2, 1b430 <get_tx_buffer+0x6a>
   1b3dc:	b344      	cbz	r4, 1b430 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   1b3de:	1c6a      	adds	r2, r5, #1
   1b3e0:	f143 0300 	adc.w	r3, r3, #0
   1b3e4:	2a02      	cmp	r2, #2
   1b3e6:	f173 0300 	sbcs.w	r3, r3, #0
   1b3ea:	d224      	bcs.n	1b436 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   1b3ec:	6822      	ldr	r2, [r4, #0]
   1b3ee:	b142      	cbz	r2, 1b402 <get_tx_buffer+0x3c>
   1b3f0:	f8d0 33c0 	ldr.w	r3, [r0, #960]	; 0x3c0
   1b3f4:	429a      	cmp	r2, r3
   1b3f6:	d904      	bls.n	1b402 <get_tx_buffer+0x3c>
		return -ENOMEM;
   1b3f8:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   1b3fc:	6023      	str	r3, [r4, #0]
}
   1b3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   1b402:	ea05 0908 	and.w	r9, r5, r8
   1b406:	f109 0301 	add.w	r3, r9, #1
   1b40a:	425a      	negs	r2, r3
   1b40c:	415a      	adcs	r2, r3
   1b40e:	4621      	mov	r1, r4
   1b410:	4638      	mov	r0, r7
   1b412:	f003 fa13 	bl	1e83c <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   1b416:	b988      	cbnz	r0, 1b43c <get_tx_buffer+0x76>
   1b418:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b41c:	bf08      	it	eq
   1b41e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b422:	d0f0      	beq.n	1b406 <get_tx_buffer+0x40>
		return -ENOBUFS;
   1b424:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b428:	e7e9      	b.n	1b3fe <get_tx_buffer+0x38>
		return -ENOENT;
   1b42a:	f06f 0001 	mvn.w	r0, #1
   1b42e:	e7e6      	b.n	1b3fe <get_tx_buffer+0x38>
		return -EINVAL;
   1b430:	f06f 0015 	mvn.w	r0, #21
   1b434:	e7e3      	b.n	1b3fe <get_tx_buffer+0x38>
		return -ENOTSUP;
   1b436:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b43a:	e7e0      	b.n	1b3fe <get_tx_buffer+0x38>
	(*r_data) = payload;
   1b43c:	6030      	str	r0, [r6, #0]
	return 0;
   1b43e:	2000      	movs	r0, #0
   1b440:	e7dd      	b.n	1b3fe <get_tx_buffer+0x38>

0001b442 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b442:	f003 ba40 	b.w	1e8c6 <rpmsg_destroy_ept>

0001b446 <get_ept_slot_with_name>:
{
   1b446:	b538      	push	{r3, r4, r5, lr}
   1b448:	460d      	mov	r5, r1
   1b44a:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1b44c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1b450:	4628      	mov	r0, r5
   1b452:	f7ea f9db 	bl	580c <strcmp>
   1b456:	b130      	cbz	r0, 1b466 <get_ept_slot_with_name+0x20>
   1b458:	4628      	mov	r0, r5
   1b45a:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b45e:	f7ea f9d5 	bl	580c <strcmp>
   1b462:	b920      	cbnz	r0, 1b46e <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1b464:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   1b466:	2370      	movs	r3, #112	; 0x70
   1b468:	fb03 4000 	mla	r0, r3, r0, r4
}
   1b46c:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1b46e:	2000      	movs	r0, #0
   1b470:	e7fc      	b.n	1b46c <get_ept_slot_with_name+0x26>

0001b472 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1b472:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   1b476:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   1b47a:	f003 be48 	b.w	1f10e <k_work_submit_to_queue>

0001b47e <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1b47e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
	virtqueue_notification(data->vr.vq[vq_id]);
   1b482:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1b486:	3b00      	subs	r3, #0
   1b488:	bf18      	it	ne
   1b48a:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1b48c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1b490:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   1b494:	f003 b973 	b.w	1e77e <virtqueue_notification>

0001b498 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   1b498:	68cb      	ldr	r3, [r1, #12]
   1b49a:	b133      	cbz	r3, 1b4aa <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1b49c:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1b49e:	6883      	ldr	r3, [r0, #8]
   1b4a0:	681b      	ldr	r3, [r3, #0]
   1b4a2:	b113      	cbz	r3, 1b4aa <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   1b4a4:	2200      	movs	r2, #0
   1b4a6:	6909      	ldr	r1, [r1, #16]
   1b4a8:	4718      	bx	r3
}
   1b4aa:	4770      	bx	lr

0001b4ac <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1b4ac:	f7fb b948 	b.w	16740 <z_impl_k_mutex_unlock>

0001b4b0 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b4b0:	e8d0 3fef 	ldaex	r3, [r0]
   1b4b4:	e8c0 1fe2 	stlex	r2, r1, [r0]
   1b4b8:	2a00      	cmp	r2, #0
   1b4ba:	d1f9      	bne.n	1b4b0 <atomic_set.isra.0>
}
   1b4bc:	4770      	bx	lr

0001b4be <backend_init>:
{
   1b4be:	b510      	push	{r4, lr}
	data->role = conf->role;
   1b4c0:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   1b4c2:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   1b4c4:	681b      	ldr	r3, [r3, #0]
   1b4c6:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
	return z_impl_k_mutex_init(mutex);
   1b4ca:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1b4ce:	f003 fd86 	bl	1efde <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   1b4d2:	2100      	movs	r1, #0
   1b4d4:	f504 706f 	add.w	r0, r4, #956	; 0x3bc
   1b4d8:	f7ff ffea 	bl	1b4b0 <atomic_set.isra.0>
}
   1b4dc:	4608      	mov	r0, r1
   1b4de:	bd10      	pop	{r4, pc}

0001b4e0 <ns_bind_cb>:
{
   1b4e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b4e4:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   1b4e6:	460d      	mov	r5, r1
   1b4e8:	b379      	cbz	r1, 1b54a <ns_bind_cb+0x6a>
   1b4ea:	780b      	ldrb	r3, [r1, #0]
   1b4ec:	b36b      	cbz	r3, 1b54a <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   1b4ee:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   1b4f2:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   1b4f6:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1b4f8:	f04f 32ff 	mov.w	r2, #4294967295
   1b4fc:	f04f 33ff 	mov.w	r3, #4294967295
   1b500:	4620      	mov	r0, r4
   1b502:	f7fb f867 	bl	165d4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   1b506:	462a      	mov	r2, r5
   1b508:	4640      	mov	r0, r8
   1b50a:	a901      	add	r1, sp, #4
   1b50c:	f7ec fd30 	bl	7f70 <get_ept>
	if (rpmsg_ept == NULL) {
   1b510:	9e01      	ldr	r6, [sp, #4]
   1b512:	b92e      	cbnz	r6, 1b520 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b514:	4620      	mov	r0, r4
}
   1b516:	b002      	add	sp, #8
   1b518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b51c:	f7ff bfc6 	b.w	1b4ac <k_mutex_unlock.isra.0>
	if (ept_cached) {
   1b520:	b158      	cbz	r0, 1b53a <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   1b522:	4620      	mov	r0, r4
   1b524:	f7ff ffc2 	bl	1b4ac <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1b528:	463b      	mov	r3, r7
   1b52a:	462a      	mov	r2, r5
   1b52c:	4631      	mov	r1, r6
   1b52e:	4640      	mov	r0, r8
}
   1b530:	b002      	add	sp, #8
   1b532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1b536:	f7ec bcf9 	b.w	7f2c <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1b53a:	2220      	movs	r2, #32
   1b53c:	4629      	mov	r1, r5
   1b53e:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1b542:	f003 ff88 	bl	1f456 <strncpy>
		rpmsg_ept->dest = dest;
   1b546:	6637      	str	r7, [r6, #96]	; 0x60
   1b548:	e7e4      	b.n	1b514 <ns_bind_cb+0x34>
}
   1b54a:	b002      	add	sp, #8
   1b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b550 <ept_cb>:
{
   1b550:	b510      	push	{r4, lr}
   1b552:	4608      	mov	r0, r1
   1b554:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   1b556:	4611      	mov	r1, r2
   1b558:	b952      	cbnz	r2, 1b570 <ept_cb+0x20>
		if (!ept->bound) {
   1b55a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1b55e:	b92a      	cbnz	r2, 1b56c <ept_cb+0x1c>
			ept->bound = true;
   1b560:	2201      	movs	r2, #1
			bound_cb(ept);
   1b562:	4618      	mov	r0, r3
			ept->bound = true;
   1b564:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   1b568:	f7ec fe54 	bl	8214 <bound_cb>
}
   1b56c:	2000      	movs	r0, #0
   1b56e:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   1b570:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1b572:	6854      	ldr	r4, [r2, #4]
   1b574:	2c00      	cmp	r4, #0
   1b576:	d0f9      	beq.n	1b56c <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   1b578:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1b57a:	47a0      	blx	r4
   1b57c:	e7f6      	b.n	1b56c <ept_cb+0x1c>

0001b57e <deregister_ept>:
{
   1b57e:	b510      	push	{r4, lr}
   1b580:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b582:	6903      	ldr	r3, [r0, #16]
   1b584:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
   1b588:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1b58c:	2b02      	cmp	r3, #2
   1b58e:	d10a      	bne.n	1b5a6 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   1b590:	b161      	cbz	r1, 1b5ac <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   1b592:	4608      	mov	r0, r1
   1b594:	f003 f997 	bl	1e8c6 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   1b598:	2270      	movs	r2, #112	; 0x70
   1b59a:	2100      	movs	r1, #0
   1b59c:	4620      	mov	r0, r4
   1b59e:	f003 ff38 	bl	1f412 <memset>
	return 0;
   1b5a2:	2000      	movs	r0, #0
}
   1b5a4:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1b5a6:	f06f 000f 	mvn.w	r0, #15
   1b5aa:	e7fb      	b.n	1b5a4 <deregister_ept+0x26>
		return -ENOENT;
   1b5ac:	f06f 0001 	mvn.w	r0, #1
   1b5b0:	e7f8      	b.n	1b5a4 <deregister_ept+0x26>

0001b5b2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b5b2:	f003 b988 	b.w	1e8c6 <rpmsg_destroy_ept>

0001b5b6 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   1b5b6:	b538      	push	{r3, r4, r5, lr}
   1b5b8:	460d      	mov	r5, r1
	if (!instance) {
   1b5ba:	4604      	mov	r4, r0
   1b5bc:	b160      	cbz	r0, 1b5d8 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   1b5be:	30e0      	adds	r0, #224	; 0xe0
   1b5c0:	f003 fb02 	bl	1ebc8 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   1b5c4:	b10d      	cbz	r5, 1b5ca <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   1b5c6:	2000      	movs	r0, #0
}
   1b5c8:	bd38      	pop	{r3, r4, r5, pc}
   1b5ca:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   1b5ce:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   1b5d2:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   1b5d6:	e7f6      	b.n	1b5c6 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   1b5d8:	f06f 0015 	mvn.w	r0, #21
   1b5dc:	e7f4      	b.n	1b5c8 <ipc_rpmsg_deinit+0x12>

0001b5de <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   1b5de:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   1b5e0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1b5e4:	b113      	cbz	r3, 1b5ec <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   1b5e6:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   1b5ea:	4718      	bx	r3
}
   1b5ec:	4770      	bx	lr

0001b5ee <virtio_set_features>:
}
   1b5ee:	4770      	bx	lr

0001b5f0 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1b5f0:	6983      	ldr	r3, [r0, #24]
   1b5f2:	b913      	cbnz	r3, 1b5fa <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   1b5f4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1b5f8:	7019      	strb	r1, [r3, #0]
}
   1b5fa:	4770      	bx	lr

0001b5fc <virtio_get_features>:
}
   1b5fc:	2001      	movs	r0, #1
   1b5fe:	4770      	bx	lr

0001b600 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1b600:	6983      	ldr	r3, [r0, #24]
   1b602:	2b01      	cmp	r3, #1
   1b604:	d104      	bne.n	1b610 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   1b606:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1b60a:	7818      	ldrb	r0, [r3, #0]
   1b60c:	b2c0      	uxtb	r0, r0
   1b60e:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   1b610:	2004      	movs	r0, #4
}
   1b612:	4770      	bx	lr

0001b614 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   1b614:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   1b616:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   1b618:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1b61a:	4620      	mov	r0, r4
   1b61c:	f003 fe97 	bl	1f34e <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1b620:	4605      	mov	r5, r0
   1b622:	b118      	cbz	r0, 1b62c <virtqueue_allocate+0x18>
   1b624:	4622      	mov	r2, r4
   1b626:	2100      	movs	r1, #0
   1b628:	f003 fef3 	bl	1f412 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   1b62c:	4628      	mov	r0, r5
   1b62e:	bd38      	pop	{r3, r4, r5, pc}

0001b630 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   1b630:	b538      	push	{r3, r4, r5, lr}
   1b632:	4604      	mov	r4, r0
   1b634:	2230      	movs	r2, #48	; 0x30
   1b636:	2100      	movs	r1, #0
   1b638:	f003 feeb 	bl	1f412 <memset>
   1b63c:	2218      	movs	r2, #24
   1b63e:	2100      	movs	r1, #0
   1b640:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1b644:	f003 fee5 	bl	1f412 <memset>
   1b648:	2218      	movs	r2, #24
   1b64a:	2100      	movs	r1, #0
   1b64c:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1b650:	f003 fedf 	bl	1f412 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   1b654:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1b658:	f7f9 f8de 	bl	14818 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1b65c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   1b660:	f7f9 f8da 	bl	14818 <virtqueue_free>
	vr->shm_io = 0;
   1b664:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1b666:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1b66a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1b66e:	f7f8 fff3 	bl	14658 <metal_device_close>
	metal_finish();
   1b672:	f7f9 f849 	bl	14708 <metal_finish>
	if (io->ops.close)
   1b676:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1b678:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1b67c:	b10b      	cbz	r3, 1b682 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1b67e:	4628      	mov	r0, r5
   1b680:	4798      	blx	r3
   1b682:	2238      	movs	r2, #56	; 0x38
   1b684:	2100      	movs	r1, #0
   1b686:	4628      	mov	r0, r5
   1b688:	f003 fec3 	bl	1f412 <memset>

	return 0;
}
   1b68c:	2000      	movs	r0, #0
   1b68e:	bd38      	pop	{r3, r4, r5, pc}

0001b690 <bt_scan_stop>:
	return bt_le_scan_stop();
   1b690:	f7f2 b86a 	b.w	d768 <bt_le_scan_stop>

0001b694 <indicate_cb>:
}
   1b694:	4770      	bx	lr

0001b696 <bt_gatt_notify>:
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
   1b696:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b698:	4604      	mov	r4, r0
   1b69a:	461d      	mov	r5, r3
   1b69c:	460f      	mov	r7, r1
   1b69e:	4616      	mov	r6, r2
   1b6a0:	b087      	sub	sp, #28
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   1b6a2:	2218      	movs	r2, #24
   1b6a4:	2100      	movs	r1, #0
   1b6a6:	4668      	mov	r0, sp
   1b6a8:	f003 feb3 	bl	1f412 <memset>
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   1b6ac:	4669      	mov	r1, sp
   1b6ae:	4620      	mov	r0, r4
	params.data = data;
   1b6b0:	e9cd 7601 	strd	r7, r6, [sp, #4]
	params.len = len;
   1b6b4:	f8ad 500c 	strh.w	r5, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   1b6b8:	f7f5 f84e 	bl	10758 <bt_gatt_notify_cb>
}
   1b6bc:	b007      	add	sp, #28
   1b6be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b6c0 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b6c0:	680b      	ldr	r3, [r1, #0]
   1b6c2:	6003      	str	r3, [r0, #0]
   1b6c4:	888b      	ldrh	r3, [r1, #4]
   1b6c6:	8083      	strh	r3, [r0, #4]
}
   1b6c8:	4770      	bx	lr

0001b6ca <is_decoder_invalid>:
#include <string.h>
#include "serialize.h"

static inline bool is_decoder_invalid(const struct nrf_rpc_cbor_ctx *ctx)
{
	return !zcbor_check_error(ctx->zs);
   1b6ca:	6943      	ldr	r3, [r0, #20]
#ifdef ZCBOR_STOP_ON_ERROR
/** Check stored error and fail if present, but only if stop_on_error is true. */
static inline bool zcbor_check_error(const zcbor_state_t *state)
{
	struct zcbor_state_constant  *cs = state->constant_state;
	return !(cs && cs->stop_on_error && cs->error);
   1b6cc:	b143      	cbz	r3, 1b6e0 <is_decoder_invalid+0x16>
   1b6ce:	7c1a      	ldrb	r2, [r3, #16]
   1b6d0:	b132      	cbz	r2, 1b6e0 <is_decoder_invalid+0x16>
   1b6d2:	68d8      	ldr	r0, [r3, #12]
   1b6d4:	fab0 f080 	clz	r0, r0
   1b6d8:	0940      	lsrs	r0, r0, #5
}
   1b6da:	f080 0001 	eor.w	r0, r0, #1
   1b6de:	4770      	bx	lr
   1b6e0:	2001      	movs	r0, #1
   1b6e2:	e7fa      	b.n	1b6da <is_decoder_invalid+0x10>

0001b6e4 <ser_encode_uint>:
	}
}

void ser_encode_uint(struct nrf_rpc_cbor_ctx *ctx, uint32_t value)
{
	zcbor_uint32_put(ctx->zs, value);
   1b6e4:	f003 bbbf 	b.w	1ee66 <zcbor_uint32_put>

0001b6e8 <ser_encode_buffer>:
{
	zcbor_int32_put(ctx->zs, value);
}

void ser_encode_buffer(struct nrf_rpc_cbor_ctx *ctx, const void *data, size_t size)
{
   1b6e8:	b507      	push	{r0, r1, r2, lr}
	if (!data) {
   1b6ea:	b921      	cbnz	r1, 1b6f6 <ser_encode_buffer+0xe>
		zcbor_nil_put(ctx->zs, NULL);
	} else {
		zcbor_bstr_encode_ptr(ctx->zs, data, size);
	}
}
   1b6ec:	b003      	add	sp, #12
   1b6ee:	f85d eb04 	ldr.w	lr, [sp], #4
		zcbor_nil_put(ctx->zs, NULL);
   1b6f2:	f003 bbc7 	b.w	1ee84 <zcbor_nil_put>
 * @param[in]    string  The value to encode. A pointer to the string
 * @param[in]    len     The length of the string pointed to by @p string.
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, const char *ptr, size_t len)
{
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   1b6f6:	e9cd 1200 	strd	r1, r2, [sp]

	return zcbor_bstr_encode(state, &zs);
   1b6fa:	4669      	mov	r1, sp
   1b6fc:	f003 fbbf 	bl	1ee7e <zcbor_bstr_encode>
}
   1b700:	b003      	add	sp, #12
   1b702:	f85d fb04 	ldr.w	pc, [sp], #4

0001b706 <ser_decode_int>:

	return 0;
}

int32_t ser_decode_int(struct nrf_rpc_cbor_ctx *ctx)
{
   1b706:	b507      	push	{r0, r1, r2, lr}
	int32_t result;

	if (zcbor_int32_decode(ctx->zs, &result)) {
   1b708:	a901      	add	r1, sp, #4
   1b70a:	f003 fb32 	bl	1ed72 <zcbor_int32_decode>
   1b70e:	b100      	cbz	r0, 1b712 <ser_decode_int+0xc>
		return result;
   1b710:	9801      	ldr	r0, [sp, #4]
	}

	return 0;
}
   1b712:	b003      	add	sp, #12
   1b714:	f85d fb04 	ldr.w	pc, [sp], #4

0001b718 <ser_rsp_decode_i32>:
	return !is_decoder_invalid(ctx);
}

void ser_rsp_decode_i32(const struct nrf_rpc_group *group, struct nrf_rpc_cbor_ctx *ctx,
			 void *handler_data)
{
   1b718:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b71a:	4605      	mov	r5, r0
	*(int32_t *)handler_data = ser_decode_int(ctx);
   1b71c:	4608      	mov	r0, r1
{
   1b71e:	460c      	mov	r4, r1
   1b720:	4616      	mov	r6, r2
	*(int32_t *)handler_data = ser_decode_int(ctx);
   1b722:	f7ff fff0 	bl	1b706 <ser_decode_int>
   1b726:	6030      	str	r0, [r6, #0]
	if (is_decoder_invalid(ctx)) {
   1b728:	4620      	mov	r0, r4
   1b72a:	f7ff ffce 	bl	1b6ca <is_decoder_invalid>
   1b72e:	b140      	cbz	r0, 1b742 <ser_rsp_decode_i32+0x2a>
		nrf_rpc_err(-EBADMSG, NRF_RPC_ERR_SRC_RECV, group,
   1b730:	2301      	movs	r3, #1
   1b732:	462a      	mov	r2, r5
   1b734:	9300      	str	r3, [sp, #0]
   1b736:	2100      	movs	r1, #0
   1b738:	23ff      	movs	r3, #255	; 0xff
   1b73a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1b73e:	f7f9 fcdd 	bl	150fc <nrf_rpc_err>
	check_final_decode_valid(group, ctx);
}
   1b742:	b002      	add	sp, #8
   1b744:	bd70      	pop	{r4, r5, r6, pc}

0001b746 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b746:	b538      	push	{r3, r4, r5, lr}
   1b748:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b74a:	42ab      	cmp	r3, r5
{
   1b74c:	4611      	mov	r1, r2
   1b74e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b750:	d804      	bhi.n	1b75c <_copy+0x16>
   1b752:	461a      	mov	r2, r3
   1b754:	f003 fe36 	bl	1f3c4 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b758:	4620      	mov	r0, r4
   1b75a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b75c:	2400      	movs	r4, #0
   1b75e:	e7fb      	b.n	1b758 <_copy+0x12>

0001b760 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1b760:	f003 be57 	b.w	1f412 <memset>

0001b764 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b764:	09c3      	lsrs	r3, r0, #7
   1b766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b76a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b76e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b772:	b2c0      	uxtb	r0, r0
   1b774:	4770      	bx	lr

0001b776 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b776:	78cb      	ldrb	r3, [r1, #3]
   1b778:	7802      	ldrb	r2, [r0, #0]
   1b77a:	4053      	eors	r3, r2
   1b77c:	7003      	strb	r3, [r0, #0]
   1b77e:	884b      	ldrh	r3, [r1, #2]
   1b780:	7842      	ldrb	r2, [r0, #1]
   1b782:	4053      	eors	r3, r2
   1b784:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b786:	680a      	ldr	r2, [r1, #0]
   1b788:	7883      	ldrb	r3, [r0, #2]
   1b78a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b78e:	7083      	strb	r3, [r0, #2]
   1b790:	680a      	ldr	r2, [r1, #0]
   1b792:	78c3      	ldrb	r3, [r0, #3]
   1b794:	4053      	eors	r3, r2
   1b796:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b798:	79cb      	ldrb	r3, [r1, #7]
   1b79a:	7902      	ldrb	r2, [r0, #4]
   1b79c:	4053      	eors	r3, r2
   1b79e:	7103      	strb	r3, [r0, #4]
   1b7a0:	88cb      	ldrh	r3, [r1, #6]
   1b7a2:	7942      	ldrb	r2, [r0, #5]
   1b7a4:	4053      	eors	r3, r2
   1b7a6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b7a8:	684a      	ldr	r2, [r1, #4]
   1b7aa:	7983      	ldrb	r3, [r0, #6]
   1b7ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b7b0:	7183      	strb	r3, [r0, #6]
   1b7b2:	684a      	ldr	r2, [r1, #4]
   1b7b4:	79c3      	ldrb	r3, [r0, #7]
   1b7b6:	4053      	eors	r3, r2
   1b7b8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b7ba:	7acb      	ldrb	r3, [r1, #11]
   1b7bc:	7a02      	ldrb	r2, [r0, #8]
   1b7be:	4053      	eors	r3, r2
   1b7c0:	7203      	strb	r3, [r0, #8]
   1b7c2:	7a42      	ldrb	r2, [r0, #9]
   1b7c4:	894b      	ldrh	r3, [r1, #10]
   1b7c6:	4053      	eors	r3, r2
   1b7c8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b7ca:	688a      	ldr	r2, [r1, #8]
   1b7cc:	7a83      	ldrb	r3, [r0, #10]
   1b7ce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b7d2:	7283      	strb	r3, [r0, #10]
   1b7d4:	688a      	ldr	r2, [r1, #8]
   1b7d6:	7ac3      	ldrb	r3, [r0, #11]
   1b7d8:	4053      	eors	r3, r2
   1b7da:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b7dc:	7bcb      	ldrb	r3, [r1, #15]
   1b7de:	7b02      	ldrb	r2, [r0, #12]
   1b7e0:	4053      	eors	r3, r2
   1b7e2:	7303      	strb	r3, [r0, #12]
   1b7e4:	89cb      	ldrh	r3, [r1, #14]
   1b7e6:	7b42      	ldrb	r2, [r0, #13]
   1b7e8:	4053      	eors	r3, r2
   1b7ea:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b7ec:	68ca      	ldr	r2, [r1, #12]
   1b7ee:	7b83      	ldrb	r3, [r0, #14]
   1b7f0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b7f4:	7383      	strb	r3, [r0, #14]
   1b7f6:	68ca      	ldr	r2, [r1, #12]
   1b7f8:	7bc3      	ldrb	r3, [r0, #15]
   1b7fa:	4053      	eors	r3, r2
   1b7fc:	73c3      	strb	r3, [r0, #15]
}
   1b7fe:	4770      	bx	lr

0001b800 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b802:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b804:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b806:	f88d 2000 	strb.w	r2, [sp]
   1b80a:	7942      	ldrb	r2, [r0, #5]
   1b80c:	f88d 2001 	strb.w	r2, [sp, #1]
   1b810:	7a82      	ldrb	r2, [r0, #10]
   1b812:	f88d 2002 	strb.w	r2, [sp, #2]
   1b816:	7bc2      	ldrb	r2, [r0, #15]
   1b818:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b81c:	7902      	ldrb	r2, [r0, #4]
   1b81e:	f88d 2004 	strb.w	r2, [sp, #4]
   1b822:	7a42      	ldrb	r2, [r0, #9]
   1b824:	f88d 2005 	strb.w	r2, [sp, #5]
   1b828:	7b82      	ldrb	r2, [r0, #14]
   1b82a:	f88d 2006 	strb.w	r2, [sp, #6]
   1b82e:	78c2      	ldrb	r2, [r0, #3]
   1b830:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b834:	7a02      	ldrb	r2, [r0, #8]
   1b836:	f88d 2008 	strb.w	r2, [sp, #8]
   1b83a:	7b42      	ldrb	r2, [r0, #13]
   1b83c:	f88d 2009 	strb.w	r2, [sp, #9]
   1b840:	7882      	ldrb	r2, [r0, #2]
   1b842:	f88d 200a 	strb.w	r2, [sp, #10]
   1b846:	79c2      	ldrb	r2, [r0, #7]
   1b848:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b84c:	7b02      	ldrb	r2, [r0, #12]
   1b84e:	f88d 200c 	strb.w	r2, [sp, #12]
   1b852:	7842      	ldrb	r2, [r0, #1]
   1b854:	f88d 200d 	strb.w	r2, [sp, #13]
   1b858:	7982      	ldrb	r2, [r0, #6]
   1b85a:	f88d 200e 	strb.w	r2, [sp, #14]
   1b85e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b862:	2310      	movs	r3, #16
   1b864:	466a      	mov	r2, sp
   1b866:	4619      	mov	r1, r3
   1b868:	f7ff ff6d 	bl	1b746 <_copy>
}
   1b86c:	b005      	add	sp, #20
   1b86e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b872 <mult_row_column>:
{
   1b872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b874:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b876:	7808      	ldrb	r0, [r1, #0]
{
   1b878:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b87a:	f7ff ff73 	bl	1b764 <_double_byte>
   1b87e:	4605      	mov	r5, r0
   1b880:	7860      	ldrb	r0, [r4, #1]
   1b882:	f7ff ff6f 	bl	1b764 <_double_byte>
   1b886:	78a2      	ldrb	r2, [r4, #2]
   1b888:	7863      	ldrb	r3, [r4, #1]
   1b88a:	4053      	eors	r3, r2
   1b88c:	78e2      	ldrb	r2, [r4, #3]
   1b88e:	4053      	eors	r3, r2
   1b890:	405d      	eors	r5, r3
   1b892:	4068      	eors	r0, r5
   1b894:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b896:	7860      	ldrb	r0, [r4, #1]
   1b898:	7827      	ldrb	r7, [r4, #0]
   1b89a:	f7ff ff63 	bl	1b764 <_double_byte>
   1b89e:	4605      	mov	r5, r0
   1b8a0:	78a0      	ldrb	r0, [r4, #2]
   1b8a2:	f7ff ff5f 	bl	1b764 <_double_byte>
   1b8a6:	78a3      	ldrb	r3, [r4, #2]
   1b8a8:	405f      	eors	r7, r3
   1b8aa:	78e3      	ldrb	r3, [r4, #3]
   1b8ac:	405f      	eors	r7, r3
   1b8ae:	407d      	eors	r5, r7
   1b8b0:	4068      	eors	r0, r5
   1b8b2:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b8b4:	7863      	ldrb	r3, [r4, #1]
   1b8b6:	7827      	ldrb	r7, [r4, #0]
   1b8b8:	78a0      	ldrb	r0, [r4, #2]
   1b8ba:	405f      	eors	r7, r3
   1b8bc:	f7ff ff52 	bl	1b764 <_double_byte>
   1b8c0:	4605      	mov	r5, r0
   1b8c2:	78e0      	ldrb	r0, [r4, #3]
   1b8c4:	f7ff ff4e 	bl	1b764 <_double_byte>
   1b8c8:	78e3      	ldrb	r3, [r4, #3]
   1b8ca:	405f      	eors	r7, r3
   1b8cc:	407d      	eors	r5, r7
   1b8ce:	4068      	eors	r0, r5
   1b8d0:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b8d2:	7820      	ldrb	r0, [r4, #0]
   1b8d4:	f7ff ff46 	bl	1b764 <_double_byte>
   1b8d8:	7862      	ldrb	r2, [r4, #1]
   1b8da:	7823      	ldrb	r3, [r4, #0]
   1b8dc:	4053      	eors	r3, r2
   1b8de:	78a2      	ldrb	r2, [r4, #2]
   1b8e0:	4053      	eors	r3, r2
   1b8e2:	ea80 0503 	eor.w	r5, r0, r3
   1b8e6:	78e0      	ldrb	r0, [r4, #3]
   1b8e8:	f7ff ff3c 	bl	1b764 <_double_byte>
   1b8ec:	b2ed      	uxtb	r5, r5
   1b8ee:	4045      	eors	r5, r0
   1b8f0:	70f5      	strb	r5, [r6, #3]
}
   1b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b8f4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b8f4:	b570      	push	{r4, r5, r6, lr}
   1b8f6:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b8f8:	4605      	mov	r5, r0
{
   1b8fa:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b8fc:	2800      	cmp	r0, #0
   1b8fe:	d049      	beq.n	1b994 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b900:	2900      	cmp	r1, #0
   1b902:	d049      	beq.n	1b998 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b904:	2a00      	cmp	r2, #0
   1b906:	d049      	beq.n	1b99c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b908:	2310      	movs	r3, #16
   1b90a:	460a      	mov	r2, r1
   1b90c:	4668      	mov	r0, sp
   1b90e:	4619      	mov	r1, r3
   1b910:	f7ff ff19 	bl	1b746 <_copy>
	add_round_key(state, s->words);
   1b914:	4621      	mov	r1, r4
   1b916:	4668      	mov	r0, sp
   1b918:	f7ff ff2d 	bl	1b776 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b91c:	3410      	adds	r4, #16
   1b91e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b922:	4668      	mov	r0, sp
   1b924:	f7ed fd30 	bl	9388 <sub_bytes>
		shift_rows(state);
   1b928:	4668      	mov	r0, sp
   1b92a:	f7ff ff69 	bl	1b800 <shift_rows>
	mult_row_column(t, s);
   1b92e:	4669      	mov	r1, sp
   1b930:	a804      	add	r0, sp, #16
   1b932:	f7ff ff9e 	bl	1b872 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b936:	a901      	add	r1, sp, #4
   1b938:	a805      	add	r0, sp, #20
   1b93a:	f7ff ff9a 	bl	1b872 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b93e:	a902      	add	r1, sp, #8
   1b940:	a806      	add	r0, sp, #24
   1b942:	f7ff ff96 	bl	1b872 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b946:	a903      	add	r1, sp, #12
   1b948:	a807      	add	r0, sp, #28
   1b94a:	f7ff ff92 	bl	1b872 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b94e:	2310      	movs	r3, #16
   1b950:	4668      	mov	r0, sp
   1b952:	4619      	mov	r1, r3
   1b954:	eb0d 0203 	add.w	r2, sp, r3
   1b958:	f7ff fef5 	bl	1b746 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b95c:	4621      	mov	r1, r4
   1b95e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b960:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b962:	f7ff ff08 	bl	1b776 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b966:	42b4      	cmp	r4, r6
   1b968:	d1db      	bne.n	1b922 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b96a:	f7ed fd0d 	bl	9388 <sub_bytes>
	shift_rows(state);
   1b96e:	4668      	mov	r0, sp
   1b970:	f7ff ff46 	bl	1b800 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b974:	4621      	mov	r1, r4
   1b976:	4668      	mov	r0, sp
   1b978:	f7ff fefd 	bl	1b776 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b97c:	2310      	movs	r3, #16
   1b97e:	466a      	mov	r2, sp
   1b980:	4619      	mov	r1, r3
   1b982:	4628      	mov	r0, r5
   1b984:	f7ff fedf 	bl	1b746 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b988:	4668      	mov	r0, sp
   1b98a:	2210      	movs	r2, #16
   1b98c:	2100      	movs	r1, #0
   1b98e:	f7ff fee7 	bl	1b760 <_set>

	return TC_CRYPTO_SUCCESS;
   1b992:	2001      	movs	r0, #1
}
   1b994:	b008      	add	sp, #32
   1b996:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b998:	4608      	mov	r0, r1
   1b99a:	e7fb      	b.n	1b994 <tc_aes_encrypt+0xa0>
   1b99c:	4610      	mov	r0, r2
   1b99e:	e7f9      	b.n	1b994 <tc_aes_encrypt+0xa0>

0001b9a0 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b9a0:	460a      	mov	r2, r1
{
   1b9a2:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b9a4:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b9a8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	bfac      	ite	ge
   1b9ae:	2300      	movge	r3, #0
   1b9b0:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b9b2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b9b6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b9ba:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1b9bc:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b9c0:	d002      	beq.n	1b9c8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b9c2:	7813      	ldrb	r3, [r2, #0]
   1b9c4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b9c6:	e7f4      	b.n	1b9b2 <gf_double+0x12>
	}
}
   1b9c8:	bd10      	pop	{r4, pc}

0001b9ca <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b9ca:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b9cc:	b120      	cbz	r0, 1b9d8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b9ce:	2258      	movs	r2, #88	; 0x58
   1b9d0:	2100      	movs	r1, #0
   1b9d2:	f7ff fec5 	bl	1b760 <_set>
   1b9d6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b9d8:	bd08      	pop	{r3, pc}

0001b9da <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b9da:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b9dc:	4604      	mov	r4, r0
   1b9de:	b188      	cbz	r0, 1ba04 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b9e0:	2210      	movs	r2, #16
   1b9e2:	2100      	movs	r1, #0
   1b9e4:	f7ff febc 	bl	1b760 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b9e8:	2210      	movs	r2, #16
   1b9ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b9ee:	2100      	movs	r1, #0
   1b9f0:	f7ff feb6 	bl	1b760 <_set>
	s->leftover_offset = 0;
   1b9f4:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b9f6:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b9f8:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b9fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b9fe:	2001      	movs	r0, #1
   1ba00:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1ba04:	bd10      	pop	{r4, pc}

0001ba06 <tc_cmac_setup>:
{
   1ba06:	b570      	push	{r4, r5, r6, lr}
   1ba08:	4604      	mov	r4, r0
   1ba0a:	460d      	mov	r5, r1
   1ba0c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1ba0e:	b310      	cbz	r0, 1ba56 <tc_cmac_setup+0x50>
   1ba10:	b311      	cbz	r1, 1ba58 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1ba12:	2258      	movs	r2, #88	; 0x58
   1ba14:	2100      	movs	r1, #0
   1ba16:	f7ff fea3 	bl	1b760 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1ba1a:	4629      	mov	r1, r5
   1ba1c:	4630      	mov	r0, r6
	s->sched = sched;
   1ba1e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1ba20:	f7ed fcbe 	bl	93a0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ba24:	2210      	movs	r2, #16
   1ba26:	2100      	movs	r1, #0
   1ba28:	4620      	mov	r0, r4
   1ba2a:	f7ff fe99 	bl	1b760 <_set>
	gf_double (s->K1, s->iv);
   1ba2e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ba32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ba34:	4621      	mov	r1, r4
   1ba36:	4620      	mov	r0, r4
   1ba38:	f7ff ff5c 	bl	1b8f4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1ba3c:	4621      	mov	r1, r4
   1ba3e:	4628      	mov	r0, r5
   1ba40:	f7ff ffae 	bl	1b9a0 <gf_double>
	gf_double (s->K2, s->K1);
   1ba44:	4629      	mov	r1, r5
   1ba46:	f104 0020 	add.w	r0, r4, #32
   1ba4a:	f7ff ffa9 	bl	1b9a0 <gf_double>
	tc_cmac_init(s);
   1ba4e:	4620      	mov	r0, r4
   1ba50:	f7ff ffc3 	bl	1b9da <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1ba54:	2001      	movs	r0, #1
}
   1ba56:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ba58:	4608      	mov	r0, r1
   1ba5a:	e7fc      	b.n	1ba56 <tc_cmac_setup+0x50>

0001ba5c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba60:	460e      	mov	r6, r1
   1ba62:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ba64:	4604      	mov	r4, r0
   1ba66:	2800      	cmp	r0, #0
   1ba68:	d060      	beq.n	1bb2c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1ba6a:	b1fa      	cbz	r2, 1baac <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1ba6c:	2900      	cmp	r1, #0
   1ba6e:	d05d      	beq.n	1bb2c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1ba70:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1ba74:	ea53 0102 	orrs.w	r1, r3, r2
   1ba78:	d058      	beq.n	1bb2c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1ba7a:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1ba7c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1ba80:	f142 32ff 	adc.w	r2, r2, #4294967295
   1ba84:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1ba88:	f1b8 0f00 	cmp.w	r8, #0
   1ba8c:	d02c      	beq.n	1bae8 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1ba8e:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ba92:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1ba96:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ba98:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1ba9a:	d20a      	bcs.n	1bab2 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ba9c:	462b      	mov	r3, r5
   1ba9e:	4632      	mov	r2, r6
   1baa0:	4629      	mov	r1, r5
   1baa2:	f7ff fe50 	bl	1b746 <_copy>
			s->leftover_offset += data_length;
   1baa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1baa8:	442b      	add	r3, r5
   1baaa:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1baac:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1baae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1bab2:	463b      	mov	r3, r7
   1bab4:	4632      	mov	r2, r6
   1bab6:	4639      	mov	r1, r7
   1bab8:	f7ff fe45 	bl	1b746 <_copy>
		s->leftover_offset = 0;
   1babc:	2300      	movs	r3, #0
   1babe:	3d10      	subs	r5, #16
   1bac0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1bac2:	4445      	add	r5, r8
		data += remaining_space;
   1bac4:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bac6:	1e63      	subs	r3, r4, #1
   1bac8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1bacc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bad0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bad4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1bad6:	ea82 0200 	eor.w	r2, r2, r0
   1bada:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1badc:	d1f6      	bne.n	1bacc <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bade:	4621      	mov	r1, r4
   1bae0:	4620      	mov	r0, r4
   1bae2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bae4:	f7ff ff06 	bl	1b8f4 <tc_aes_encrypt>
   1bae8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1baec:	2d10      	cmp	r5, #16
   1baee:	d80a      	bhi.n	1bb06 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1baf0:	2d00      	cmp	r5, #0
   1baf2:	d0db      	beq.n	1baac <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1baf4:	462b      	mov	r3, r5
   1baf6:	4632      	mov	r2, r6
   1baf8:	4629      	mov	r1, r5
   1bafa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1bafe:	f7ff fe22 	bl	1b746 <_copy>
		s->leftover_offset = data_length;
   1bb02:	6465      	str	r5, [r4, #68]	; 0x44
   1bb04:	e7d2      	b.n	1baac <tc_cmac_update+0x50>
   1bb06:	1e63      	subs	r3, r4, #1
   1bb08:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1bb0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bb0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bb12:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1bb14:	ea82 0200 	eor.w	r2, r2, r0
   1bb18:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bb1a:	d1f6      	bne.n	1bb0a <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bb1c:	4621      	mov	r1, r4
   1bb1e:	4620      	mov	r0, r4
   1bb20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bb22:	f7ff fee7 	bl	1b8f4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1bb26:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1bb28:	3d10      	subs	r5, #16
   1bb2a:	e7df      	b.n	1baec <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1bb2c:	2000      	movs	r0, #0
   1bb2e:	e7be      	b.n	1baae <tc_cmac_update+0x52>

0001bb30 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1bb30:	b570      	push	{r4, r5, r6, lr}
   1bb32:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bb34:	4605      	mov	r5, r0
   1bb36:	b1f0      	cbz	r0, 1bb76 <tc_cmac_final+0x46>
   1bb38:	b371      	cbz	r1, 1bb98 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1bb3a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1bb3c:	2a10      	cmp	r2, #16
   1bb3e:	d11b      	bne.n	1bb78 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1bb40:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bb42:	1e63      	subs	r3, r4, #1
   1bb44:	3901      	subs	r1, #1
   1bb46:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bb4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bb4e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bb52:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bb54:	ea82 0206 	eor.w	r2, r2, r6
   1bb58:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1bb5c:	ea82 0206 	eor.w	r2, r2, r6
   1bb60:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bb62:	d1f2      	bne.n	1bb4a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1bb64:	4621      	mov	r1, r4
   1bb66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bb68:	4628      	mov	r0, r5
   1bb6a:	f7ff fec3 	bl	1b8f4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1bb6e:	4620      	mov	r0, r4
   1bb70:	f7ff ff2b 	bl	1b9ca <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1bb74:	2001      	movs	r0, #1
}
   1bb76:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1bb78:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1bb7c:	2100      	movs	r1, #0
   1bb7e:	f1c2 0210 	rsb	r2, r2, #16
   1bb82:	4420      	add	r0, r4
   1bb84:	f7ff fdec 	bl	1b760 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1bb88:	2280      	movs	r2, #128	; 0x80
   1bb8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1bb8c:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1bb90:	4423      	add	r3, r4
   1bb92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1bb96:	e7d4      	b.n	1bb42 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1bb98:	4608      	mov	r0, r1
   1bb9a:	e7ec      	b.n	1bb76 <tc_cmac_final+0x46>

0001bb9c <tc_sha256_update>:
{
   1bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb9e:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1bba0:	b110      	cbz	r0, 1bba8 <tc_sha256_update+0xc>
   1bba2:	b1f9      	cbz	r1, 1bbe4 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1bba4:	b90a      	cbnz	r2, 1bbaa <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1bba6:	2001      	movs	r0, #1
}
   1bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1bbaa:	2700      	movs	r7, #0
   1bbac:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1bbae:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   1bbb2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1bbb4:	1c5a      	adds	r2, r3, #1
   1bbb6:	6682      	str	r2, [r0, #104]	; 0x68
   1bbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bbbc:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1bbbe:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1bbc0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1bbc4:	d90b      	bls.n	1bbde <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   1bbc6:	4631      	mov	r1, r6
   1bbc8:	f7ed fc3e 	bl	9448 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1bbcc:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1bbd0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1bbd4:	f142 0200 	adc.w	r2, r2, #0
   1bbd8:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1bbdc:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   1bbde:	42a5      	cmp	r5, r4
   1bbe0:	d1e7      	bne.n	1bbb2 <tc_sha256_update+0x16>
   1bbe2:	e7e0      	b.n	1bba6 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1bbe4:	4608      	mov	r0, r1
   1bbe6:	e7df      	b.n	1bba8 <tc_sha256_update+0xc>

0001bbe8 <tc_sha256_final>:
{
   1bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbea:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1bbec:	4605      	mov	r5, r0
   1bbee:	2800      	cmp	r0, #0
   1bbf0:	d054      	beq.n	1bc9c <tc_sha256_final+0xb4>
   1bbf2:	2900      	cmp	r1, #0
   1bbf4:	d053      	beq.n	1bc9e <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   1bbf6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1bbf8:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1bbfc:	00d8      	lsls	r0, r3, #3
   1bbfe:	1812      	adds	r2, r2, r0
   1bc00:	f141 0100 	adc.w	r1, r1, #0
   1bc04:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bc08:	2280      	movs	r2, #128	; 0x80
   1bc0a:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1bc0c:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bc0e:	4423      	add	r3, r4
   1bc10:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1bc12:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1bc16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1bc1a:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1bc1e:	d90a      	bls.n	1bc36 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1bc20:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1bc24:	4639      	mov	r1, r7
   1bc26:	4430      	add	r0, r6
   1bc28:	f7ff fd9a 	bl	1b760 <_set>
		compress(s->iv, s->leftover);
   1bc2c:	4631      	mov	r1, r6
   1bc2e:	4620      	mov	r0, r4
   1bc30:	f7ed fc0a 	bl	9448 <compress>
		s->leftover_offset = 0;
   1bc34:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1bc36:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1bc38:	2100      	movs	r1, #0
   1bc3a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1bc3e:	4430      	add	r0, r6
   1bc40:	f7ff fd8e 	bl	1b760 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1bc44:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1bc46:	4631      	mov	r1, r6
   1bc48:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1bc4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1bc4c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1bc4e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1bc50:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1bc54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1bc58:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1bc5a:	0e1b      	lsrs	r3, r3, #24
   1bc5c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1bc60:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1bc62:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1bc66:	f7ed fbef 	bl	9448 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bc6a:	1d2b      	adds	r3, r5, #4
   1bc6c:	1f21      	subs	r1, r4, #4
   1bc6e:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1bc70:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bc74:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1bc76:	0e10      	lsrs	r0, r2, #24
   1bc78:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1bc7c:	0c10      	lsrs	r0, r2, #16
   1bc7e:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1bc82:	0a10      	lsrs	r0, r2, #8
   1bc84:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1bc88:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1bc8c:	42ab      	cmp	r3, r5
   1bc8e:	d1ef      	bne.n	1bc70 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   1bc90:	4620      	mov	r0, r4
   1bc92:	2270      	movs	r2, #112	; 0x70
   1bc94:	2100      	movs	r1, #0
   1bc96:	f7ff fd63 	bl	1b760 <_set>
	return TC_CRYPTO_SUCCESS;
   1bc9a:	2001      	movs	r0, #1
}
   1bc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bc9e:	4608      	mov	r0, r1
   1bca0:	e7fc      	b.n	1bc9c <tc_sha256_final+0xb4>

0001bca2 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1bca2:	b530      	push	{r4, r5, lr}
   1bca4:	1e43      	subs	r3, r0, #1
   1bca6:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1bca8:	42a9      	cmp	r1, r5
   1bcaa:	d106      	bne.n	1bcba <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1bcac:	2136      	movs	r1, #54	; 0x36
   1bcae:	245c      	movs	r4, #92	; 0x5c
   1bcb0:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1bcb2:	1a13      	subs	r3, r2, r0
   1bcb4:	2b3f      	cmp	r3, #63	; 0x3f
   1bcb6:	d90c      	bls.n	1bcd2 <rekey+0x30>
	}
}
   1bcb8:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1bcba:	780c      	ldrb	r4, [r1, #0]
   1bcbc:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1bcc0:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1bcc4:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bcc8:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1bccc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1bcd0:	e7ea      	b.n	1bca8 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1bcd2:	f802 1b01 	strb.w	r1, [r2], #1
   1bcd6:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1bcda:	e7ea      	b.n	1bcb2 <rekey+0x10>

0001bcdc <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcde:	460e      	mov	r6, r1
   1bce0:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1bce2:	4605      	mov	r5, r0
{
   1bce4:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1bce6:	b1b8      	cbz	r0, 1bd18 <tc_hmac_set_key+0x3c>
   1bce8:	b341      	cbz	r1, 1bd3c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1bcea:	b34a      	cbz	r2, 1bd40 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1bcec:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1bcee:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1bcf2:	d813      	bhi.n	1bd1c <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1bcf4:	a810      	add	r0, sp, #64	; 0x40
   1bcf6:	f7ed fc89 	bl	960c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1bcfa:	4622      	mov	r2, r4
   1bcfc:	4669      	mov	r1, sp
   1bcfe:	a810      	add	r0, sp, #64	; 0x40
   1bd00:	f7ff ff4c 	bl	1bb9c <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1bd04:	a910      	add	r1, sp, #64	; 0x40
   1bd06:	a834      	add	r0, sp, #208	; 0xd0
   1bd08:	f7ff ff6e 	bl	1bbe8 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1bd0c:	4622      	mov	r2, r4
   1bd0e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1bd10:	4638      	mov	r0, r7
   1bd12:	f7ff ffc6 	bl	1bca2 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1bd16:	2001      	movs	r0, #1
}
   1bd18:	b04d      	add	sp, #308	; 0x134
   1bd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1bd1c:	f7ed fc76 	bl	960c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1bd20:	4622      	mov	r2, r4
   1bd22:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1bd24:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1bd28:	4628      	mov	r0, r5
   1bd2a:	f7ff ff37 	bl	1bb9c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1bd2e:	4629      	mov	r1, r5
   1bd30:	4620      	mov	r0, r4
   1bd32:	f7ff ff59 	bl	1bbe8 <tc_sha256_final>
		rekey(ctx->key,
   1bd36:	2220      	movs	r2, #32
   1bd38:	4621      	mov	r1, r4
   1bd3a:	e7e9      	b.n	1bd10 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1bd3c:	4608      	mov	r0, r1
   1bd3e:	e7eb      	b.n	1bd18 <tc_hmac_set_key+0x3c>
   1bd40:	4610      	mov	r0, r2
   1bd42:	e7e9      	b.n	1bd18 <tc_hmac_set_key+0x3c>

0001bd44 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1bd44:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1bd46:	4604      	mov	r4, r0
   1bd48:	b140      	cbz	r0, 1bd5c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1bd4a:	f7ed fc5f 	bl	960c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1bd4e:	2240      	movs	r2, #64	; 0x40
   1bd50:	4620      	mov	r0, r4
   1bd52:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1bd56:	f7ff ff21 	bl	1bb9c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1bd5a:	2001      	movs	r0, #1
}
   1bd5c:	bd10      	pop	{r4, pc}

0001bd5e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1bd5e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1bd60:	b110      	cbz	r0, 1bd68 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1bd62:	f7ff ff1b 	bl	1bb9c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1bd66:	2001      	movs	r0, #1
}
   1bd68:	bd08      	pop	{r3, pc}

0001bd6a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1bd6a:	b570      	push	{r4, r5, r6, lr}
   1bd6c:	460e      	mov	r6, r1
   1bd6e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bd70:	4605      	mov	r5, r0
   1bd72:	b1f0      	cbz	r0, 1bdb2 <tc_hmac_final+0x48>
   1bd74:	2920      	cmp	r1, #32
   1bd76:	d11c      	bne.n	1bdb2 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1bd78:	b1ea      	cbz	r2, 1bdb6 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1bd7a:	4611      	mov	r1, r2
   1bd7c:	f7ff ff34 	bl	1bbe8 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1bd80:	4620      	mov	r0, r4
   1bd82:	f7ed fc43 	bl	960c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1bd86:	2240      	movs	r2, #64	; 0x40
   1bd88:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1bd8c:	4620      	mov	r0, r4
   1bd8e:	f7ff ff05 	bl	1bb9c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1bd92:	4632      	mov	r2, r6
   1bd94:	4629      	mov	r1, r5
   1bd96:	4620      	mov	r0, r4
   1bd98:	f7ff ff00 	bl	1bb9c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1bd9c:	4621      	mov	r1, r4
   1bd9e:	4628      	mov	r0, r5
   1bda0:	f7ff ff22 	bl	1bbe8 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1bda4:	4620      	mov	r0, r4
   1bda6:	22f0      	movs	r2, #240	; 0xf0
   1bda8:	2100      	movs	r1, #0
   1bdaa:	f7ff fcd9 	bl	1b760 <_set>

	return TC_CRYPTO_SUCCESS;
   1bdae:	2001      	movs	r0, #1
}
   1bdb0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bdb2:	2000      	movs	r0, #0
   1bdb4:	e7fc      	b.n	1bdb0 <tc_hmac_final+0x46>
   1bdb6:	4610      	mov	r0, r2
   1bdb8:	e7fa      	b.n	1bdb0 <tc_hmac_final+0x46>

0001bdba <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1bdba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdbe:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1bdc0:	f04f 0b01 	mov.w	fp, #1
{
   1bdc4:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1bdc6:	2300      	movs	r3, #0
{
   1bdc8:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bdca:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1bdce:	4631      	mov	r1, r6
{
   1bdd0:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bdd2:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1bdd4:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1bdd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1bddc:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bde0:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bde4:	f7ff ff7a 	bl	1bcdc <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1bde8:	4620      	mov	r0, r4
   1bdea:	f7ff ffab 	bl	1bd44 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bdee:	2220      	movs	r2, #32
   1bdf0:	4629      	mov	r1, r5
   1bdf2:	4620      	mov	r0, r4
   1bdf4:	f7ff ffb3 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1bdf8:	465a      	mov	r2, fp
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	f10d 0106 	add.w	r1, sp, #6
   1be00:	f7ff ffad 	bl	1bd5e <tc_hmac_update>

	if (data && datalen)
   1be04:	f1b8 0f00 	cmp.w	r8, #0
   1be08:	d007      	beq.n	1be1a <update+0x60>
   1be0a:	f1b9 0f00 	cmp.w	r9, #0
   1be0e:	d004      	beq.n	1be1a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1be10:	464a      	mov	r2, r9
   1be12:	4641      	mov	r1, r8
   1be14:	4620      	mov	r0, r4
   1be16:	f7ff ffa2 	bl	1bd5e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1be1a:	b13f      	cbz	r7, 1be2c <update+0x72>
   1be1c:	f1ba 0f00 	cmp.w	sl, #0
   1be20:	d004      	beq.n	1be2c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1be22:	4652      	mov	r2, sl
   1be24:	4639      	mov	r1, r7
   1be26:	4620      	mov	r0, r4
   1be28:	f7ff ff99 	bl	1bd5e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1be2c:	4622      	mov	r2, r4
   1be2e:	2120      	movs	r1, #32
   1be30:	4630      	mov	r0, r6
   1be32:	f7ff ff9a 	bl	1bd6a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1be36:	2220      	movs	r2, #32
   1be38:	4631      	mov	r1, r6
   1be3a:	4620      	mov	r0, r4
   1be3c:	f7ff ff4e 	bl	1bcdc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1be40:	4620      	mov	r0, r4
   1be42:	f7ff ff7f 	bl	1bd44 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1be46:	2220      	movs	r2, #32
   1be48:	4629      	mov	r1, r5
   1be4a:	4620      	mov	r0, r4
   1be4c:	f7ff ff87 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1be50:	4622      	mov	r2, r4
   1be52:	2120      	movs	r1, #32
   1be54:	4628      	mov	r0, r5
   1be56:	f7ff ff88 	bl	1bd6a <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1be5a:	f1b8 0f00 	cmp.w	r8, #0
   1be5e:	d03a      	beq.n	1bed6 <update+0x11c>
   1be60:	f1b9 0f00 	cmp.w	r9, #0
   1be64:	d037      	beq.n	1bed6 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1be66:	2220      	movs	r2, #32
   1be68:	4631      	mov	r1, r6
   1be6a:	4620      	mov	r0, r4
   1be6c:	f7ff ff36 	bl	1bcdc <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1be70:	4620      	mov	r0, r4
   1be72:	f7ff ff67 	bl	1bd44 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1be76:	2220      	movs	r2, #32
   1be78:	4629      	mov	r1, r5
   1be7a:	4620      	mov	r0, r4
   1be7c:	f7ff ff6f 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1be80:	2201      	movs	r2, #1
   1be82:	f10d 0107 	add.w	r1, sp, #7
   1be86:	4620      	mov	r0, r4
   1be88:	f7ff ff69 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1be8c:	464a      	mov	r2, r9
   1be8e:	4641      	mov	r1, r8
   1be90:	4620      	mov	r0, r4
   1be92:	f7ff ff64 	bl	1bd5e <tc_hmac_update>
	if (additional_data && additional_datalen)
   1be96:	b13f      	cbz	r7, 1bea8 <update+0xee>
   1be98:	f1ba 0f00 	cmp.w	sl, #0
   1be9c:	d004      	beq.n	1bea8 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1be9e:	4652      	mov	r2, sl
   1bea0:	4639      	mov	r1, r7
   1bea2:	4620      	mov	r0, r4
   1bea4:	f7ff ff5b 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bea8:	4622      	mov	r2, r4
   1beaa:	2120      	movs	r1, #32
   1beac:	4630      	mov	r0, r6
   1beae:	f7ff ff5c 	bl	1bd6a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1beb2:	2220      	movs	r2, #32
   1beb4:	4631      	mov	r1, r6
   1beb6:	4620      	mov	r0, r4
   1beb8:	f7ff ff10 	bl	1bcdc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bebc:	4620      	mov	r0, r4
   1bebe:	f7ff ff41 	bl	1bd44 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bec2:	2220      	movs	r2, #32
   1bec4:	4629      	mov	r1, r5
   1bec6:	4620      	mov	r0, r4
   1bec8:	f7ff ff49 	bl	1bd5e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1becc:	4622      	mov	r2, r4
   1bece:	2120      	movs	r1, #32
   1bed0:	4628      	mov	r0, r5
   1bed2:	f7ff ff4a 	bl	1bd6a <tc_hmac_final>
}
   1bed6:	b003      	add	sp, #12
   1bed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bedc <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1bedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bede:	460c      	mov	r4, r1
   1bee0:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bee2:	4605      	mov	r5, r0
   1bee4:	b1b0      	cbz	r0, 1bf14 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1bee6:	b1b9      	cbz	r1, 1bf18 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1bee8:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1beea:	2220      	movs	r2, #32
   1beec:	2100      	movs	r1, #0
   1beee:	30f0      	adds	r0, #240	; 0xf0
   1bef0:	f7ff fc36 	bl	1b760 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1bef4:	2220      	movs	r2, #32
   1bef6:	2101      	movs	r1, #1
   1bef8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1befc:	f7ff fc30 	bl	1b760 <_set>
	update(prng, personalization, plen, 0, 0);
   1bf00:	4628      	mov	r0, r5
   1bf02:	4633      	mov	r3, r6
   1bf04:	463a      	mov	r2, r7
   1bf06:	4621      	mov	r1, r4
   1bf08:	9600      	str	r6, [sp, #0]
   1bf0a:	f7ff ff56 	bl	1bdba <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1bf0e:	2001      	movs	r0, #1
	prng->countdown = 0;
   1bf10:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1bf14:	b003      	add	sp, #12
   1bf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bf18:	4608      	mov	r0, r1
   1bf1a:	e7fb      	b.n	1bf14 <tc_hmac_prng_init+0x38>

0001bf1c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1bf1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf1e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bf20:	4605      	mov	r5, r0
   1bf22:	b180      	cbz	r0, 1bf46 <tc_hmac_prng_reseed+0x2a>
   1bf24:	b179      	cbz	r1, 1bf46 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1bf26:	2a1f      	cmp	r2, #31
   1bf28:	d90d      	bls.n	1bf46 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1bf2a:	b153      	cbz	r3, 1bf42 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1bf2c:	b16c      	cbz	r4, 1bf4a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1bf2e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1bf30:	f7ff ff43 	bl	1bdba <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1bf34:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1bf38:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1bf3a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1bf3e:	b003      	add	sp, #12
   1bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1bf42:	9300      	str	r3, [sp, #0]
   1bf44:	e7f4      	b.n	1bf30 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1bf46:	2000      	movs	r0, #0
   1bf48:	e7f9      	b.n	1bf3e <tc_hmac_prng_reseed+0x22>
   1bf4a:	4620      	mov	r0, r4
   1bf4c:	e7f7      	b.n	1bf3e <tc_hmac_prng_reseed+0x22>

0001bf4e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1bf4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bf52:	460d      	mov	r5, r1
   1bf54:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1bf56:	4680      	mov	r8, r0
   1bf58:	b3d8      	cbz	r0, 1bfd2 <tc_hmac_prng_generate+0x84>
   1bf5a:	b3d2      	cbz	r2, 1bfd2 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1bf5c:	1e4b      	subs	r3, r1, #1
   1bf5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1bf62:	d236      	bcs.n	1bfd2 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1bf64:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1bf68:	b3ab      	cbz	r3, 1bfd6 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1bf6a:	3b01      	subs	r3, #1
   1bf6c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf70:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bf74:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bf78:	2220      	movs	r2, #32
   1bf7a:	4649      	mov	r1, r9
   1bf7c:	4620      	mov	r0, r4
   1bf7e:	f7ff fead 	bl	1bcdc <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1bf82:	4620      	mov	r0, r4
   1bf84:	f7ff fede 	bl	1bd44 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bf88:	2220      	movs	r2, #32
   1bf8a:	4639      	mov	r1, r7
   1bf8c:	4620      	mov	r0, r4
   1bf8e:	f7ff fee6 	bl	1bd5e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bf92:	4622      	mov	r2, r4
   1bf94:	2120      	movs	r1, #32
   1bf96:	4638      	mov	r0, r7
   1bf98:	f7ff fee7 	bl	1bd6a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1bf9c:	2d20      	cmp	r5, #32
   1bf9e:	462e      	mov	r6, r5
   1bfa0:	bf28      	it	cs
   1bfa2:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1bfa4:	4640      	mov	r0, r8
   1bfa6:	4633      	mov	r3, r6
   1bfa8:	463a      	mov	r2, r7
   1bfaa:	4631      	mov	r1, r6
   1bfac:	f7ff fbcb 	bl	1b746 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1bfb0:	2d20      	cmp	r5, #32
   1bfb2:	bf38      	it	cc
   1bfb4:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1bfb6:	3d20      	subs	r5, #32
		out += bufferlen;
   1bfb8:	44b0      	add	r8, r6
	while (outlen != 0) {
   1bfba:	d1dd      	bne.n	1bf78 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1bfbc:	4620      	mov	r0, r4
   1bfbe:	462b      	mov	r3, r5
   1bfc0:	462a      	mov	r2, r5
   1bfc2:	4629      	mov	r1, r5
   1bfc4:	9500      	str	r5, [sp, #0]
   1bfc6:	f7ff fef8 	bl	1bdba <update>

	return TC_CRYPTO_SUCCESS;
   1bfca:	2001      	movs	r0, #1
}
   1bfcc:	b003      	add	sp, #12
   1bfce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1bfd2:	2000      	movs	r0, #0
   1bfd4:	e7fa      	b.n	1bfcc <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1bfd6:	f04f 30ff 	mov.w	r0, #4294967295
   1bfda:	e7f7      	b.n	1bfcc <tc_hmac_prng_generate+0x7e>

0001bfdc <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1bfdc:	2000      	movs	r0, #0
{
   1bfde:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1bfe0:	f7eb fdc2 	bl	7b68 <sys_reboot>

0001bfe4 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1bfe4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1bfe6:	6800      	ldr	r0, [r0, #0]
   1bfe8:	f7ed bc66 	b.w	98b8 <z_arm_fatal_error>

0001bfec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bfec:	2100      	movs	r1, #0
   1bfee:	2001      	movs	r0, #1
   1bff0:	f7ed bc62 	b.w	98b8 <z_arm_fatal_error>

0001bff4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1bff4:	b508      	push	{r3, lr}
	handler();
   1bff6:	f7ed fd1b 	bl	9a30 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bffe:	f7ed be23 	b.w	9c48 <z_arm_exc_exit>

0001c002 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1c002:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1c004:	f383 880b 	msr	PSPLIM, r3
}
   1c008:	4770      	bx	lr

0001c00a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1c00a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1c00e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1c012:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1c014:	bf08      	it	eq
   1c016:	f06f 0015 	mvneq.w	r0, #21
   1c01a:	4770      	bx	lr

0001c01c <_stdout_hook_default>:
}
   1c01c:	f04f 30ff 	mov.w	r0, #4294967295
   1c020:	4770      	bx	lr

0001c022 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1c022:	f7f9 bd5d 	b.w	15ae0 <z_impl_z_errno>

0001c026 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1c026:	b510      	push	{r4, lr}
   1c028:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1c02a:	7801      	ldrb	r1, [r0, #0]
   1c02c:	7822      	ldrb	r2, [r4, #0]
{
   1c02e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1c030:	428a      	cmp	r2, r1
   1c032:	d00f      	beq.n	1c054 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1c034:	4669      	mov	r1, sp
   1c036:	f7ee fbbb 	bl	a7b0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1c03a:	4620      	mov	r0, r4
   1c03c:	a905      	add	r1, sp, #20
   1c03e:	f7ee fbb7 	bl	a7b0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1c042:	2210      	movs	r2, #16
   1c044:	f10d 0115 	add.w	r1, sp, #21
   1c048:	f10d 0001 	add.w	r0, sp, #1
   1c04c:	f003 f9aa 	bl	1f3a4 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1c050:	b00a      	add	sp, #40	; 0x28
   1c052:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1c054:	2a01      	cmp	r2, #1
   1c056:	d006      	beq.n	1c066 <bt_uuid_cmp+0x40>
   1c058:	2a02      	cmp	r2, #2
   1c05a:	d007      	beq.n	1c06c <bt_uuid_cmp+0x46>
   1c05c:	b972      	cbnz	r2, 1c07c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1c05e:	8840      	ldrh	r0, [r0, #2]
   1c060:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1c062:	1ac0      	subs	r0, r0, r3
   1c064:	e7f4      	b.n	1c050 <bt_uuid_cmp+0x2a>
   1c066:	6840      	ldr	r0, [r0, #4]
   1c068:	6863      	ldr	r3, [r4, #4]
   1c06a:	e7fa      	b.n	1c062 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c06c:	2210      	movs	r2, #16
   1c06e:	1c61      	adds	r1, r4, #1
   1c070:	3001      	adds	r0, #1
}
   1c072:	b00a      	add	sp, #40	; 0x28
   1c074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c078:	f003 b994 	b.w	1f3a4 <memcmp>
	switch (u1->type) {
   1c07c:	f06f 0015 	mvn.w	r0, #21
   1c080:	e7e6      	b.n	1c050 <bt_uuid_cmp+0x2a>

0001c082 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1c082:	2a04      	cmp	r2, #4
   1c084:	d00a      	beq.n	1c09c <bt_uuid_create+0x1a>
   1c086:	2a10      	cmp	r2, #16
   1c088:	d00d      	beq.n	1c0a6 <bt_uuid_create+0x24>
   1c08a:	2a02      	cmp	r2, #2
   1c08c:	f04f 0300 	mov.w	r3, #0
   1c090:	d115      	bne.n	1c0be <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1c092:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1c094:	880b      	ldrh	r3, [r1, #0]
   1c096:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1c098:	2001      	movs	r0, #1
   1c09a:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   1c09c:	2301      	movs	r3, #1
   1c09e:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1c0a0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1c0a2:	6043      	str	r3, [r0, #4]
		break;
   1c0a4:	e7f8      	b.n	1c098 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   1c0a6:	2302      	movs	r3, #2
   1c0a8:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c0ac:	f101 0310 	add.w	r3, r1, #16
   1c0b0:	f851 2b04 	ldr.w	r2, [r1], #4
   1c0b4:	4299      	cmp	r1, r3
   1c0b6:	f840 2b04 	str.w	r2, [r0], #4
   1c0ba:	d1f9      	bne.n	1c0b0 <bt_uuid_create+0x2e>
   1c0bc:	e7ec      	b.n	1c098 <bt_uuid_create+0x16>
	switch (data_len) {
   1c0be:	4618      	mov	r0, r3
}
   1c0c0:	4770      	bx	lr

0001c0c2 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1c0c2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1c0c4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1c0c6:	2106      	movs	r1, #6
{
   1c0c8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1c0ca:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1c0ce:	f7f1 fbc3 	bl	d858 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1c0d2:	b918      	cbnz	r0, 1c0dc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1c0d4:	79a3      	ldrb	r3, [r4, #6]
   1c0d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c0da:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1c0dc:	bd10      	pop	{r4, pc}

0001c0de <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1c0de:	280f      	cmp	r0, #15
   1c0e0:	d807      	bhi.n	1c0f2 <bt_hci_evt_get_flags+0x14>
   1c0e2:	280d      	cmp	r0, #13
   1c0e4:	d80b      	bhi.n	1c0fe <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1c0e6:	2805      	cmp	r0, #5
   1c0e8:	bf08      	it	eq
   1c0ea:	2003      	moveq	r0, #3
   1c0ec:	bf18      	it	ne
   1c0ee:	2002      	movne	r0, #2
   1c0f0:	4770      	bx	lr
	switch (evt) {
   1c0f2:	2813      	cmp	r0, #19
   1c0f4:	d003      	beq.n	1c0fe <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1c0f6:	281a      	cmp	r0, #26
   1c0f8:	bf08      	it	eq
   1c0fa:	2001      	moveq	r0, #1
   1c0fc:	e7f6      	b.n	1c0ec <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1c0fe:	2001      	movs	r0, #1
	}
}
   1c100:	4770      	bx	lr

0001c102 <hci_vendor_event>:
}
   1c102:	4770      	bx	lr

0001c104 <atomic_or>:
{
   1c104:	4603      	mov	r3, r0
   1c106:	b510      	push	{r4, lr}
}
   1c108:	e8d3 0fef 	ldaex	r0, [r3]
   1c10c:	ea40 0201 	orr.w	r2, r0, r1
   1c110:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c114:	2c00      	cmp	r4, #0
   1c116:	d1f7      	bne.n	1c108 <atomic_or+0x4>
   1c118:	bd10      	pop	{r4, pc}

0001c11a <bt_addr_le_copy>:
   1c11a:	680b      	ldr	r3, [r1, #0]
   1c11c:	6003      	str	r3, [r0, #0]
   1c11e:	888b      	ldrh	r3, [r1, #4]
   1c120:	8083      	strh	r3, [r0, #4]
   1c122:	798b      	ldrb	r3, [r1, #6]
   1c124:	7183      	strb	r3, [r0, #6]
}
   1c126:	4770      	bx	lr

0001c128 <bt_addr_copy>:
   1c128:	680b      	ldr	r3, [r1, #0]
   1c12a:	6003      	str	r3, [r0, #0]
   1c12c:	888b      	ldrh	r3, [r1, #4]
   1c12e:	8083      	strh	r3, [r0, #4]
}
   1c130:	4770      	bx	lr

0001c132 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c132:	e8d0 3fef 	ldaex	r3, [r0]
   1c136:	400b      	ands	r3, r1
   1c138:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c13c:	2a00      	cmp	r2, #0
   1c13e:	d1f8      	bne.n	1c132 <atomic_and.isra.0>
}
   1c140:	4770      	bx	lr

0001c142 <bt_le_create_conn>:
		return bt_le_create_conn_ext(conn);
   1c142:	f7ef b841 	b.w	b1c8 <bt_le_create_conn_ext>

0001c146 <bt_hci_disconnect>:
{
   1c146:	b570      	push	{r4, r5, r6, lr}
   1c148:	4606      	mov	r6, r0
   1c14a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c14c:	f240 4006 	movw	r0, #1030	; 0x406
   1c150:	2103      	movs	r1, #3
   1c152:	f7ee ff39 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c156:	4604      	mov	r4, r0
   1c158:	b168      	cbz	r0, 1c176 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c15a:	2103      	movs	r1, #3
   1c15c:	300c      	adds	r0, #12
   1c15e:	f7f4 ff55 	bl	1100c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1c162:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1c164:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c166:	4621      	mov	r1, r4
}
   1c168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c16c:	2200      	movs	r2, #0
   1c16e:	f240 4006 	movw	r0, #1030	; 0x406
   1c172:	f7ee bf73 	b.w	b05c <bt_hci_cmd_send_sync>
}
   1c176:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c17a:	bd70      	pop	{r4, r5, r6, pc}

0001c17c <bt_le_set_data_len>:
{
   1c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c17e:	4607      	mov	r7, r0
   1c180:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c182:	f242 0022 	movw	r0, #8226	; 0x2022
   1c186:	2106      	movs	r1, #6
{
   1c188:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c18a:	f7ee ff1d 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c18e:	4604      	mov	r4, r0
   1c190:	b178      	cbz	r0, 1c1b2 <bt_le_set_data_len+0x36>
   1c192:	2106      	movs	r1, #6
   1c194:	300c      	adds	r0, #12
   1c196:	f7f4 ff39 	bl	1100c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c19a:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c19c:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c19e:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c1a0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1c1a2:	4621      	mov	r1, r4
}
   1c1a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1c1a8:	2200      	movs	r2, #0
   1c1aa:	f242 0022 	movw	r0, #8226	; 0x2022
   1c1ae:	f7ee bf55 	b.w	b05c <bt_hci_cmd_send_sync>
}
   1c1b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c1b8 <bt_le_set_phy>:
{
   1c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c1bc:	4681      	mov	r9, r0
   1c1be:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c1c0:	f242 0032 	movw	r0, #8242	; 0x2032
   1c1c4:	2107      	movs	r1, #7
{
   1c1c6:	4617      	mov	r7, r2
   1c1c8:	461e      	mov	r6, r3
   1c1ca:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c1ce:	f7ee fefb 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c1d2:	4605      	mov	r5, r0
   1c1d4:	b1a0      	cbz	r0, 1c200 <bt_le_set_phy+0x48>
   1c1d6:	2107      	movs	r1, #7
   1c1d8:	300c      	adds	r0, #12
   1c1da:	f7f4 ff17 	bl	1100c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c1de:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1c1e2:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c1e6:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1c1e8:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c1ea:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1c1ec:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1c1f0:	4629      	mov	r1, r5
}
   1c1f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1c1f6:	2200      	movs	r2, #0
   1c1f8:	f242 0032 	movw	r0, #8242	; 0x2032
   1c1fc:	f7ee bf2e 	b.w	b05c <bt_hci_cmd_send_sync>
}
   1c200:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c208 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1c208:	68c0      	ldr	r0, [r0, #12]
   1c20a:	f7ef b899 	b.w	b340 <bt_hci_le_enh_conn_complete>

0001c20e <bt_le_conn_params_valid>:
{
   1c20e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c210:	8803      	ldrh	r3, [r0, #0]
   1c212:	8842      	ldrh	r2, [r0, #2]
   1c214:	4293      	cmp	r3, r2
   1c216:	d819      	bhi.n	1c24c <bt_le_conn_params_valid+0x3e>
   1c218:	2b05      	cmp	r3, #5
   1c21a:	d917      	bls.n	1c24c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c21c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c220:	d814      	bhi.n	1c24c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c222:	8883      	ldrh	r3, [r0, #4]
   1c224:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c228:	d210      	bcs.n	1c24c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c22a:	f640 4476 	movw	r4, #3190	; 0xc76
   1c22e:	88c0      	ldrh	r0, [r0, #6]
   1c230:	f1a0 010a 	sub.w	r1, r0, #10
   1c234:	b289      	uxth	r1, r1
   1c236:	42a1      	cmp	r1, r4
   1c238:	d808      	bhi.n	1c24c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c23a:	3301      	adds	r3, #1
   1c23c:	b29b      	uxth	r3, r3
   1c23e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c240:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c244:	bf34      	ite	cc
   1c246:	2001      	movcc	r0, #1
   1c248:	2000      	movcs	r0, #0
}
   1c24a:	bd10      	pop	{r4, pc}
		return false;
   1c24c:	2000      	movs	r0, #0
   1c24e:	e7fc      	b.n	1c24a <bt_le_conn_params_valid+0x3c>

0001c250 <bt_get_appearance>:
}
   1c250:	2000      	movs	r0, #0
   1c252:	4770      	bx	lr

0001c254 <bt_addr_le_is_bonded>:
}
   1c254:	2000      	movs	r0, #0
   1c256:	4770      	bx	lr

0001c258 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   1c258:	2207      	movs	r2, #7
{
   1c25a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1c25c:	f003 f8a2 	bl	1f3a4 <memcmp>
}
   1c260:	fab0 f080 	clz	r0, r0
   1c264:	0940      	lsrs	r0, r0, #5
   1c266:	bd08      	pop	{r3, pc}

0001c268 <bt_addr_copy>:
   1c268:	680b      	ldr	r3, [r1, #0]
   1c26a:	6003      	str	r3, [r0, #0]
   1c26c:	888b      	ldrh	r3, [r1, #4]
   1c26e:	8083      	strh	r3, [r0, #4]
}
   1c270:	4770      	bx	lr

0001c272 <bt_addr_le_copy>:
   1c272:	680b      	ldr	r3, [r1, #0]
   1c274:	6003      	str	r3, [r0, #0]
   1c276:	888b      	ldrh	r3, [r1, #4]
   1c278:	8083      	strh	r3, [r0, #4]
   1c27a:	798b      	ldrb	r3, [r1, #6]
   1c27c:	7183      	strb	r3, [r0, #6]
}
   1c27e:	4770      	bx	lr

0001c280 <bt_lookup_id_addr>:
	return addr;
   1c280:	2800      	cmp	r0, #0
}
   1c282:	bf0c      	ite	eq
   1c284:	4608      	moveq	r0, r1
   1c286:	2000      	movne	r0, #0
   1c288:	4770      	bx	lr

0001c28a <bt_id_set_adv_random_addr>:
{
   1c28a:	b570      	push	{r4, r5, r6, lr}
   1c28c:	460d      	mov	r5, r1
	CHECKIF(adv == NULL || addr == NULL) {
   1c28e:	4604      	mov	r4, r0
   1c290:	b3b8      	cbz	r0, 1c302 <bt_id_set_adv_random_addr+0x78>
   1c292:	b3b1      	cbz	r1, 1c302 <bt_id_set_adv_random_addr+0x78>
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   1c294:	f100 0210 	add.w	r2, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c298:	e8d2 3faf 	lda	r3, [r2]
   1c29c:	079b      	lsls	r3, r3, #30
   1c29e:	d40e      	bmi.n	1c2be <bt_id_set_adv_random_addr+0x34>
		bt_addr_copy(&adv->random_addr.a, addr);
   1c2a0:	3003      	adds	r0, #3
   1c2a2:	f7ff ffe1 	bl	1c268 <bt_addr_copy>
		adv->random_addr.type = BT_ADDR_LE_RANDOM;
   1c2a6:	2301      	movs	r3, #1
   1c2a8:	70a3      	strb	r3, [r4, #2]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c2aa:	e8d2 3fef 	ldaex	r3, [r2]
   1c2ae:	f043 0308 	orr.w	r3, r3, #8
   1c2b2:	e8c2 3fe1 	stlex	r1, r3, [r2]
   1c2b6:	2900      	cmp	r1, #0
   1c2b8:	d1f7      	bne.n	1c2aa <bt_id_set_adv_random_addr+0x20>
	return 0;
   1c2ba:	2000      	movs	r0, #0
}
   1c2bc:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR,
   1c2be:	2107      	movs	r1, #7
   1c2c0:	f242 0035 	movw	r0, #8245	; 0x2035
   1c2c4:	f7ee fe80 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c2c8:	4606      	mov	r6, r0
   1c2ca:	b1e8      	cbz	r0, 1c308 <bt_id_set_adv_random_addr+0x7e>
   1c2cc:	2107      	movs	r1, #7
   1c2ce:	300c      	adds	r0, #12
   1c2d0:	f7f4 fe9c 	bl	1100c <net_buf_simple_add>
	cp->handle = adv->handle;
   1c2d4:	7863      	ldrb	r3, [r4, #1]
	bt_addr_copy(&cp->bdaddr, addr);
   1c2d6:	4629      	mov	r1, r5
	cp->handle = adv->handle;
   1c2d8:	f800 3b01 	strb.w	r3, [r0], #1
	bt_addr_copy(&cp->bdaddr, addr);
   1c2dc:	f7ff ffc4 	bl	1c268 <bt_addr_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR, buf,
   1c2e0:	2200      	movs	r2, #0
   1c2e2:	4631      	mov	r1, r6
   1c2e4:	f242 0035 	movw	r0, #8245	; 0x2035
   1c2e8:	f7ee feb8 	bl	b05c <bt_hci_cmd_send_sync>
	if (err) {
   1c2ec:	2800      	cmp	r0, #0
   1c2ee:	d1e5      	bne.n	1c2bc <bt_id_set_adv_random_addr+0x32>
	if (&adv->random_addr.a != addr) {
   1c2f0:	1ce0      	adds	r0, r4, #3
   1c2f2:	4285      	cmp	r5, r0
   1c2f4:	d002      	beq.n	1c2fc <bt_id_set_adv_random_addr+0x72>
		bt_addr_copy(&adv->random_addr.a, addr);
   1c2f6:	4629      	mov	r1, r5
   1c2f8:	f7ff ffb6 	bl	1c268 <bt_addr_copy>
	adv->random_addr.type = BT_ADDR_LE_RANDOM;
   1c2fc:	2301      	movs	r3, #1
   1c2fe:	70a3      	strb	r3, [r4, #2]
	return 0;
   1c300:	e7db      	b.n	1c2ba <bt_id_set_adv_random_addr+0x30>
		return -EINVAL;
   1c302:	f06f 0015 	mvn.w	r0, #21
   1c306:	e7d9      	b.n	1c2bc <bt_id_set_adv_random_addr+0x32>
		return -ENOBUFS;
   1c308:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c30c:	e7d6      	b.n	1c2bc <bt_id_set_adv_random_addr+0x32>

0001c30e <bt_id_set_adv_private_addr>:
{
   1c30e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1c310:	4604      	mov	r4, r0
   1c312:	b180      	cbz	r0, 1c336 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c314:	2106      	movs	r1, #6
   1c316:	4668      	mov	r0, sp
   1c318:	f7f1 fa9e 	bl	d858 <bt_rand>
	if (err) {
   1c31c:	b948      	cbnz	r0, 1c332 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1c31e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c322:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c328:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1c32a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1c32e:	f7ff ffac 	bl	1c28a <bt_id_set_adv_random_addr>
}
   1c332:	b002      	add	sp, #8
   1c334:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c336:	f06f 0015 	mvn.w	r0, #21
   1c33a:	e7fa      	b.n	1c332 <bt_id_set_adv_private_addr+0x24>

0001c33c <bt_id_scan_random_addr_check>:
}
   1c33c:	2001      	movs	r0, #1
   1c33e:	4770      	bx	lr

0001c340 <bt_id_adv_limited_stopped>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c340:	3010      	adds	r0, #16
   1c342:	e8d0 3fef 	ldaex	r3, [r0]
   1c346:	f023 0310 	bic.w	r3, r3, #16
   1c34a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c34e:	2a00      	cmp	r2, #0
   1c350:	d1f7      	bne.n	1c342 <bt_id_adv_limited_stopped+0x2>
}
   1c352:	4770      	bx	lr

0001c354 <get_adv_channel_map>:
{
   1c354:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1c356:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1c35a:	bf0c      	ite	eq
   1c35c:	2007      	moveq	r0, #7
   1c35e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1c360:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1c362:	bf48      	it	mi
   1c364:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c368:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c36a:	bf48      	it	mi
   1c36c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c370:	4770      	bx	lr

0001c372 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c372:	e8d0 0faf 	lda	r0, [r0]
}
   1c376:	4770      	bx	lr

0001c378 <atomic_test_bit>:
{
   1c378:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c37a:	f7ff fffa 	bl	1c372 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c37e:	4108      	asrs	r0, r1
}
   1c380:	f000 0001 	and.w	r0, r0, #1
   1c384:	bd08      	pop	{r3, pc}

0001c386 <atomic_and>:
{
   1c386:	4603      	mov	r3, r0
   1c388:	b510      	push	{r4, lr}
}
   1c38a:	e8d3 0fef 	ldaex	r0, [r3]
   1c38e:	ea00 0201 	and.w	r2, r0, r1
   1c392:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c396:	2c00      	cmp	r4, #0
   1c398:	d1f7      	bne.n	1c38a <atomic_and+0x4>
   1c39a:	bd10      	pop	{r4, pc}

0001c39c <bt_addr_le_copy>:
   1c39c:	680b      	ldr	r3, [r1, #0]
   1c39e:	6003      	str	r3, [r0, #0]
   1c3a0:	888b      	ldrh	r3, [r1, #4]
   1c3a2:	8083      	strh	r3, [r0, #4]
   1c3a4:	798b      	ldrb	r3, [r1, #6]
   1c3a6:	7183      	strb	r3, [r0, #6]
   1c3a8:	4770      	bx	lr

0001c3aa <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c3aa:	2301      	movs	r3, #1
{
   1c3ac:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c3ae:	fa03 f101 	lsl.w	r1, r3, r1
{
   1c3b2:	4604      	mov	r4, r0
	if (val) {
   1c3b4:	b14a      	cbz	r2, 1c3ca <atomic_set_bit_to+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c3b6:	e8d4 3fef 	ldaex	r3, [r4]
   1c3ba:	430b      	orrs	r3, r1
   1c3bc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c3c0:	2a00      	cmp	r2, #0
   1c3c2:	d1f8      	bne.n	1c3b6 <atomic_set_bit_to+0xc>
	}
}
   1c3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c3c8:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c3ca:	43c9      	mvns	r1, r1
}
   1c3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c3d0:	f7ff bfd9 	b.w	1c386 <atomic_and>

0001c3d4 <le_adv_update>:
{
   1c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3d8:	b087      	sub	sp, #28
   1c3da:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   1c3de:	4604      	mov	r4, r0
   1c3e0:	460f      	mov	r7, r1
   1c3e2:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   1c3e4:	2100      	movs	r1, #0
   1c3e6:	2210      	movs	r2, #16
   1c3e8:	a802      	add	r0, sp, #8
{
   1c3ea:	461e      	mov	r6, r3
   1c3ec:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1c3f0:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
	struct bt_ad d[2] = {};
   1c3f4:	f003 f80d 	bl	1f412 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1c3f8:	bb65      	cbnz	r5, 1c454 <le_adv_update+0x80>
	if (!(ext_adv && scannable)) {
   1c3fa:	f1bb 0f00 	cmp.w	fp, #0
   1c3fe:	d002      	beq.n	1c406 <le_adv_update+0x32>
   1c400:	f1b8 0f00 	cmp.w	r8, #0
   1c404:	d119      	bne.n	1c43a <le_adv_update+0x66>
		d[0].len = ad_len;
   1c406:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		d_len = 1;
   1c40a:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   1c40c:	f242 0137 	movw	r1, #8247	; 0x2037
   1c410:	4620      	mov	r0, r4
   1c412:	aa02      	add	r2, sp, #8
   1c414:	f7f0 f8f6 	bl	c604 <hci_set_ad_ext>
		if (err) {
   1c418:	b960      	cbnz	r0, 1c434 <le_adv_update+0x60>
	if (scannable) {
   1c41a:	f1b8 0f00 	cmp.w	r8, #0
   1c41e:	d12e      	bne.n	1c47e <le_adv_update+0xaa>
   1c420:	3410      	adds	r4, #16
   1c422:	e8d4 3fef 	ldaex	r3, [r4]
   1c426:	f043 0304 	orr.w	r3, r3, #4
   1c42a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c42e:	2a00      	cmp	r2, #0
   1c430:	d1f7      	bne.n	1c422 <le_adv_update+0x4e>
	return 0;
   1c432:	2000      	movs	r0, #0
}
   1c434:	b007      	add	sp, #28
   1c436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d[0].len = sd_len;
   1c43a:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1c43c:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1c43e:	9303      	str	r3, [sp, #12]
		d_len = 1;
   1c440:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA,
   1c442:	f242 0138 	movw	r1, #8248	; 0x2038
   1c446:	4620      	mov	r0, r4
   1c448:	aa02      	add	r2, sp, #8
   1c44a:	f7f0 f8db 	bl	c604 <hci_set_ad_ext>
		if (err) {
   1c44e:	2800      	cmp	r0, #0
   1c450:	d0e6      	beq.n	1c420 <le_adv_update+0x4c>
   1c452:	e7ef      	b.n	1c434 <le_adv_update+0x60>
		const char *name = bt_get_name();
   1c454:	f7ef fe82 	bl	c15c <bt_get_name>
   1c458:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1c45a:	bb27      	cbnz	r7, 1c4a6 <le_adv_update+0xd2>
   1c45c:	bb7e      	cbnz	r6, 1c4be <le_adv_update+0xea>
		data = (struct bt_data)BT_DATA(
   1c45e:	4648      	mov	r0, r9
   1c460:	f7e9 f9de 	bl	5820 <strlen>
   1c464:	2209      	movs	r2, #9
   1c466:	f88d 0001 	strb.w	r0, [sp, #1]
   1c46a:	f88d 2000 	strb.w	r2, [sp]
   1c46e:	f8cd 9004 	str.w	r9, [sp, #4]
	if (!(ext_adv && scannable)) {
   1c472:	f1bb 0f00 	cmp.w	fp, #0
   1c476:	d024      	beq.n	1c4c2 <le_adv_update+0xee>
   1c478:	f1b8 0f00 	cmp.w	r8, #0
   1c47c:	d021      	beq.n	1c4c2 <le_adv_update+0xee>
		d[0].len = sd_len;
   1c47e:	9b10      	ldr	r3, [sp, #64]	; 0x40
		if (name_type == ADV_NAME_TYPE_SD) {
   1c480:	2d02      	cmp	r5, #2
		d[0].data = sd;
   1c482:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1c484:	9303      	str	r3, [sp, #12]
		if (name_type == ADV_NAME_TYPE_SD) {
   1c486:	d1db      	bne.n	1c440 <le_adv_update+0x6c>
			d[1].len = 1;
   1c488:	2301      	movs	r3, #1
			d[1].data = &data;
   1c48a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1c48e:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1c490:	462b      	mov	r3, r5
   1c492:	e7d6      	b.n	1c442 <le_adv_update+0x6e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c494:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   1c498:	3908      	subs	r1, #8
   1c49a:	2901      	cmp	r1, #1
   1c49c:	d91a      	bls.n	1c4d4 <le_adv_update+0x100>
	for (i = 0; i < ad_len; i++) {
   1c49e:	3201      	adds	r2, #1
   1c4a0:	4592      	cmp	sl, r2
   1c4a2:	d1f7      	bne.n	1c494 <le_adv_update+0xc0>
   1c4a4:	e7da      	b.n	1c45c <le_adv_update+0x88>
   1c4a6:	2200      	movs	r2, #0
   1c4a8:	e7fa      	b.n	1c4a0 <le_adv_update+0xcc>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c4aa:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1c4ae:	3908      	subs	r1, #8
   1c4b0:	2901      	cmp	r1, #1
   1c4b2:	d90f      	bls.n	1c4d4 <le_adv_update+0x100>
	for (i = 0; i < ad_len; i++) {
   1c4b4:	3201      	adds	r2, #1
   1c4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c4b8:	4293      	cmp	r3, r2
   1c4ba:	d1f6      	bne.n	1c4aa <le_adv_update+0xd6>
   1c4bc:	e7cf      	b.n	1c45e <le_adv_update+0x8a>
   1c4be:	2200      	movs	r2, #0
   1c4c0:	e7f9      	b.n	1c4b6 <le_adv_update+0xe2>
		if (name_type == ADV_NAME_TYPE_AD) {
   1c4c2:	2d01      	cmp	r5, #1
		d[0].len = ad_len;
   1c4c4:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		if (name_type == ADV_NAME_TYPE_AD) {
   1c4c8:	d19f      	bne.n	1c40a <le_adv_update+0x36>
			d_len = 2;
   1c4ca:	2302      	movs	r3, #2
			d[1].data = &data;
   1c4cc:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1c4d0:	9505      	str	r5, [sp, #20]
			d_len = 2;
   1c4d2:	e79b      	b.n	1c40c <le_adv_update+0x38>
			return -EINVAL;
   1c4d4:	f06f 0015 	mvn.w	r0, #21
   1c4d8:	e7ac      	b.n	1c434 <le_adv_update+0x60>

0001c4da <get_adv_name_type>:
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   1c4da:	f100 0210 	add.w	r2, r0, #16
{
   1c4de:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   1c4e0:	2109      	movs	r1, #9
   1c4e2:	4610      	mov	r0, r2
   1c4e4:	f7ff ff48 	bl	1c378 <atomic_test_bit>
   1c4e8:	b928      	cbnz	r0, 1c4f6 <get_adv_name_type+0x1c>
}
   1c4ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   1c4ee:	2108      	movs	r1, #8
   1c4f0:	4610      	mov	r0, r2
   1c4f2:	f7ff bf41 	b.w	1c378 <atomic_test_bit>
}
   1c4f6:	2002      	movs	r0, #2
   1c4f8:	bd08      	pop	{r3, pc}

0001c4fa <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1c4fa:	6843      	ldr	r3, [r0, #4]
   1c4fc:	f013 0008 	ands.w	r0, r3, #8
   1c500:	d00a      	beq.n	1c518 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1c502:	035a      	lsls	r2, r3, #13
   1c504:	d407      	bmi.n	1c516 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1c506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1c50a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1c50e:	bf14      	ite	ne
   1c510:	2002      	movne	r0, #2
   1c512:	2001      	moveq	r0, #1
   1c514:	4770      	bx	lr
   1c516:	2001      	movs	r0, #1
}
   1c518:	4770      	bx	lr

0001c51a <bt_le_adv_set_enable_ext>:
{
   1c51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c51e:	4680      	mov	r8, r0
   1c520:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   1c522:	f242 0039 	movw	r0, #8249	; 0x2039
   1c526:	2106      	movs	r1, #6
{
   1c528:	b086      	sub	sp, #24
   1c52a:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   1c52c:	f7ee fd4c 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c530:	4606      	mov	r6, r0
   1c532:	b388      	cbz	r0, 1c598 <bt_le_adv_set_enable_ext+0x7e>
	return net_buf_simple_add_u8(&buf->b, val);
   1c534:	f100 050c 	add.w	r5, r0, #12
	if (enable) {
   1c538:	b337      	cbz	r7, 1c588 <bt_le_adv_set_enable_ext+0x6e>
   1c53a:	2101      	movs	r1, #1
   1c53c:	4628      	mov	r0, r5
   1c53e:	f001 f830 	bl	1d5a2 <net_buf_simple_add_u8>
   1c542:	2101      	movs	r1, #1
   1c544:	4628      	mov	r0, r5
   1c546:	f001 f82c 	bl	1d5a2 <net_buf_simple_add_u8>
   1c54a:	4628      	mov	r0, r5
   1c54c:	f898 1001 	ldrb.w	r1, [r8, #1]
   1c550:	f001 f827 	bl	1d5a2 <net_buf_simple_add_u8>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   1c554:	b1d4      	cbz	r4, 1c58c <bt_le_adv_set_enable_ext+0x72>
	net_buf_simple_add_le16(&buf->b, val);
   1c556:	8821      	ldrh	r1, [r4, #0]
   1c558:	4628      	mov	r0, r5
   1c55a:	f001 f829 	bl	1d5b0 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   1c55e:	78a1      	ldrb	r1, [r4, #2]
	return net_buf_simple_add_u8(&buf->b, val);
   1c560:	4628      	mov	r0, r5
   1c562:	f001 f81e 	bl	1d5a2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1c566:	4630      	mov	r0, r6
   1c568:	f108 0210 	add.w	r2, r8, #16
   1c56c:	a903      	add	r1, sp, #12
   1c56e:	2307      	movs	r3, #7
   1c570:	9700      	str	r7, [sp, #0]
   1c572:	f7ee fd17 	bl	afa4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
   1c576:	2200      	movs	r2, #0
   1c578:	4631      	mov	r1, r6
   1c57a:	f242 0039 	movw	r0, #8249	; 0x2039
   1c57e:	f7ee fd6d 	bl	b05c <bt_hci_cmd_send_sync>
}
   1c582:	b006      	add	sp, #24
   1c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c588:	4639      	mov	r1, r7
   1c58a:	e7d7      	b.n	1c53c <bt_le_adv_set_enable_ext+0x22>
	net_buf_simple_add_le16(&buf->b, val);
   1c58c:	4621      	mov	r1, r4
   1c58e:	4628      	mov	r0, r5
   1c590:	f001 f80e 	bl	1d5b0 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   1c594:	4621      	mov	r1, r4
   1c596:	e7e3      	b.n	1c560 <bt_le_adv_set_enable_ext+0x46>
		return -ENOBUFS;
   1c598:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c59c:	e7f1      	b.n	1c582 <bt_le_adv_set_enable_ext+0x68>

0001c59e <bt_le_adv_set_enable>:
		return bt_le_adv_set_enable_ext(adv, enable, NULL);
   1c59e:	2200      	movs	r2, #0
   1c5a0:	f7ff bfbb 	b.w	1c51a <bt_le_adv_set_enable_ext>

0001c5a4 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1c5a4:	3020      	adds	r0, #32
   1c5a6:	f7fa bef7 	b.w	17398 <k_work_cancel_delayable>

0001c5aa <bt_le_ext_adv_stop>:
{
   1c5aa:	b538      	push	{r3, r4, r5, lr}
   1c5ac:	4604      	mov	r4, r0
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1c5ae:	f104 0510 	add.w	r5, r4, #16
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1c5b2:	f7ff fff7 	bl	1c5a4 <bt_le_lim_adv_cancel_timeout>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c5b6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1c5ba:	4628      	mov	r0, r5
   1c5bc:	f7ff fee3 	bl	1c386 <atomic_and>
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c5c0:	2107      	movs	r1, #7
   1c5c2:	4628      	mov	r0, r5
   1c5c4:	f7ff fed8 	bl	1c378 <atomic_test_bit>
   1c5c8:	b1c8      	cbz	r0, 1c5fe <bt_le_ext_adv_stop+0x54>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c5ca:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1c5ce:	4628      	mov	r0, r5
   1c5d0:	f7ff fed9 	bl	1c386 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   1c5d4:	0643      	lsls	r3, r0, #25
   1c5d6:	d502      	bpl.n	1c5de <bt_le_ext_adv_stop+0x34>
		bt_id_adv_limited_stopped(adv);
   1c5d8:	4620      	mov	r0, r4
   1c5da:	f7ff feb1 	bl	1c340 <bt_id_adv_limited_stopped>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1c5de:	210a      	movs	r1, #10
   1c5e0:	4628      	mov	r0, r5
   1c5e2:	f7ff fec9 	bl	1c378 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c5e6:	b118      	cbz	r0, 1c5f0 <bt_le_ext_adv_stop+0x46>
		le_adv_stop_free_conn(adv, 0);
   1c5e8:	2100      	movs	r1, #0
   1c5ea:	4620      	mov	r0, r4
   1c5ec:	f7f0 f976 	bl	c8dc <le_adv_stop_free_conn>
	return bt_le_adv_set_enable_ext(adv, false, NULL);
   1c5f0:	2200      	movs	r2, #0
   1c5f2:	4620      	mov	r0, r4
}
   1c5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_le_adv_set_enable_ext(adv, false, NULL);
   1c5f8:	4611      	mov	r1, r2
   1c5fa:	f7ff bf8e 	b.w	1c51a <bt_le_adv_set_enable_ext>
}
   1c5fe:	bd38      	pop	{r3, r4, r5, pc}

0001c600 <bt_le_ext_adv_set_data>:
{
   1c600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1c604:	4615      	mov	r5, r2
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   1c606:	f100 0210 	add.w	r2, r0, #16
{
   1c60a:	4604      	mov	r4, r0
   1c60c:	4688      	mov	r8, r1
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   1c60e:	4610      	mov	r0, r2
   1c610:	210c      	movs	r1, #12
{
   1c612:	4699      	mov	r9, r3
   1c614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   1c618:	f7ff feae 	bl	1c378 <atomic_test_bit>
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   1c61c:	210b      	movs	r1, #11
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   1c61e:	4606      	mov	r6, r0
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   1c620:	4610      	mov	r0, r2
   1c622:	f7ff fea9 	bl	1c378 <atomic_test_bit>
   1c626:	4607      	mov	r7, r0
	if (ext_adv) {
   1c628:	b146      	cbz	r6, 1c63c <bt_le_ext_adv_set_data+0x3c>
		if ((scannable && ad_len) ||
   1c62a:	b928      	cbnz	r0, 1c638 <bt_le_ext_adv_set_data+0x38>
		    (!scannable && sd_len)) {
   1c62c:	f1ba 0f00 	cmp.w	sl, #0
   1c630:	d004      	beq.n	1c63c <bt_le_ext_adv_set_data+0x3c>
			return -ENOTSUP;
   1c632:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c636:	e00e      	b.n	1c656 <bt_le_ext_adv_set_data+0x56>
		if ((scannable && ad_len) ||
   1c638:	2d00      	cmp	r5, #0
   1c63a:	d1fa      	bne.n	1c632 <bt_le_ext_adv_set_data+0x32>
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
   1c63c:	4620      	mov	r0, r4
   1c63e:	f7ff ff4c 	bl	1c4da <get_adv_name_type>
   1c642:	464b      	mov	r3, r9
   1c644:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1c648:	462a      	mov	r2, r5
   1c64a:	4641      	mov	r1, r8
   1c64c:	4620      	mov	r0, r4
   1c64e:	e9cd a600 	strd	sl, r6, [sp]
   1c652:	f7ff febf 	bl	1c3d4 <le_adv_update>
}
   1c656:	b004      	add	sp, #16
   1c658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c65c <atomic_or>:
{
   1c65c:	4603      	mov	r3, r0
   1c65e:	b510      	push	{r4, lr}
}
   1c660:	e8d3 0fef 	ldaex	r0, [r3]
   1c664:	ea40 0201 	orr.w	r2, r0, r1
   1c668:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c66c:	2c00      	cmp	r4, #0
   1c66e:	d1f7      	bne.n	1c660 <atomic_or+0x4>
   1c670:	bd10      	pop	{r4, pc}

0001c672 <atomic_and>:
{
   1c672:	4603      	mov	r3, r0
   1c674:	b510      	push	{r4, lr}
}
   1c676:	e8d3 0fef 	ldaex	r0, [r3]
   1c67a:	ea00 0201 	and.w	r2, r0, r1
   1c67e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1c682:	2c00      	cmp	r4, #0
   1c684:	d1f7      	bne.n	1c676 <atomic_and+0x4>
   1c686:	bd10      	pop	{r4, pc}

0001c688 <bt_addr_le_copy>:
   1c688:	680b      	ldr	r3, [r1, #0]
   1c68a:	6003      	str	r3, [r0, #0]
   1c68c:	888b      	ldrh	r3, [r1, #4]
   1c68e:	8083      	strh	r3, [r0, #4]
   1c690:	798b      	ldrb	r3, [r1, #6]
   1c692:	7183      	strb	r3, [r0, #6]
   1c694:	4770      	bx	lr

0001c696 <bt_le_scan_set_enable>:
		return set_le_ext_scan_enable(enable, 0);
   1c696:	2100      	movs	r1, #0
   1c698:	f7f0 bd12 	b.w	d0c0 <set_le_ext_scan_enable>

0001c69c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c69c:	e8d0 0faf 	lda	r0, [r0]
}
   1c6a0:	4770      	bx	lr

0001c6a2 <bt_addr_le_copy>:
   1c6a2:	680b      	ldr	r3, [r1, #0]
   1c6a4:	6003      	str	r3, [r0, #0]
   1c6a6:	888b      	ldrh	r3, [r1, #4]
   1c6a8:	8083      	strh	r3, [r0, #4]
   1c6aa:	798b      	ldrb	r3, [r1, #6]
   1c6ac:	7183      	strb	r3, [r0, #6]
   1c6ae:	4770      	bx	lr

0001c6b0 <tx_complete_work>:
	tx_notify(conn);
   1c6b0:	3828      	subs	r0, #40	; 0x28
   1c6b2:	f7f1 b91d 	b.w	d8f0 <tx_notify>

0001c6b6 <bt_conn_reset_rx_state>:
{
   1c6b6:	b510      	push	{r4, lr}
   1c6b8:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c6ba:	6900      	ldr	r0, [r0, #16]
   1c6bc:	b118      	cbz	r0, 1c6c6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c6be:	f7f4 fb9f 	bl	10e00 <net_buf_unref>
	conn->rx = NULL;
   1c6c2:	2300      	movs	r3, #0
   1c6c4:	6123      	str	r3, [r4, #16]
}
   1c6c6:	bd10      	pop	{r4, pc}

0001c6c8 <conn_lookup_handle>:
{
   1c6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c6cc:	4607      	mov	r7, r0
   1c6ce:	460e      	mov	r6, r1
   1c6d0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c6d2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c6d4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1c6d8:	42b4      	cmp	r4, r6
   1c6da:	d103      	bne.n	1c6e4 <conn_lookup_handle+0x1c>
	return NULL;
   1c6dc:	2300      	movs	r3, #0
}
   1c6de:	4618      	mov	r0, r3
   1c6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c6e4:	fb09 7004 	mla	r0, r9, r4, r7
   1c6e8:	f7f1 fb76 	bl	ddd8 <bt_conn_ref>
   1c6ec:	4603      	mov	r3, r0
		if (!conn) {
   1c6ee:	b158      	cbz	r0, 1c708 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c6f0:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1c6f2:	2d01      	cmp	r5, #1
   1c6f4:	d002      	beq.n	1c6fc <conn_lookup_handle+0x34>
   1c6f6:	3d07      	subs	r5, #7
   1c6f8:	2d01      	cmp	r5, #1
   1c6fa:	d803      	bhi.n	1c704 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c6fc:	881a      	ldrh	r2, [r3, #0]
   1c6fe:	4542      	cmp	r2, r8
   1c700:	d0ed      	beq.n	1c6de <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c702:	4618      	mov	r0, r3
   1c704:	f7f1 fb90 	bl	de28 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c708:	3401      	adds	r4, #1
   1c70a:	e7e5      	b.n	1c6d8 <conn_lookup_handle+0x10>

0001c70c <bt_conn_connected>:
{
   1c70c:	b510      	push	{r4, lr}
   1c70e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1c710:	f7f2 f88c 	bl	e82c <bt_l2cap_connected>
	notify_connected(conn);
   1c714:	4620      	mov	r0, r4
}
   1c716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1c71a:	f7f1 b8bb 	b.w	d894 <notify_connected>

0001c71e <bt_conn_get_security>:
}
   1c71e:	2001      	movs	r0, #1
   1c720:	4770      	bx	lr

0001c722 <bt_conn_is_peer_addr_le>:
{
   1c722:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c724:	7a03      	ldrb	r3, [r0, #8]
{
   1c726:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c728:	428b      	cmp	r3, r1
{
   1c72a:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c72c:	d115      	bne.n	1c75a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c72e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1c732:	2207      	movs	r2, #7
   1c734:	4628      	mov	r0, r5
   1c736:	f002 fe35 	bl	1f3a4 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1c73a:	b180      	cbz	r0, 1c75e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c73c:	78e3      	ldrb	r3, [r4, #3]
   1c73e:	2207      	movs	r2, #7
   1c740:	b943      	cbnz	r3, 1c754 <bt_conn_is_peer_addr_le+0x32>
   1c742:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1c746:	4628      	mov	r0, r5
   1c748:	f002 fe2c 	bl	1f3a4 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1c74c:	fab0 f080 	clz	r0, r0
   1c750:	0940      	lsrs	r0, r0, #5
}
   1c752:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1c754:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1c758:	e7f5      	b.n	1c746 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c75a:	2000      	movs	r0, #0
   1c75c:	e7f9      	b.n	1c752 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c75e:	2001      	movs	r0, #1
   1c760:	e7f7      	b.n	1c752 <bt_conn_is_peer_addr_le+0x30>

0001c762 <bt_conn_le_conn_update>:
{
   1c762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c764:	4607      	mov	r7, r0
   1c766:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c768:	f242 0013 	movw	r0, #8211	; 0x2013
   1c76c:	210e      	movs	r1, #14
   1c76e:	f7ee fc2b 	bl	afc8 <bt_hci_cmd_create>
	if (!buf) {
   1c772:	4606      	mov	r6, r0
   1c774:	b1d0      	cbz	r0, 1c7ac <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1c776:	210e      	movs	r1, #14
   1c778:	300c      	adds	r0, #12
   1c77a:	f7f4 fc47 	bl	1100c <net_buf_simple_add>
   1c77e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1c780:	220e      	movs	r2, #14
   1c782:	2100      	movs	r1, #0
   1c784:	f002 fe45 	bl	1f412 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c788:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c78a:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c78c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c78e:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c790:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c792:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c794:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c796:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c79a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c79c:	88ab      	ldrh	r3, [r5, #4]
   1c79e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c7a0:	88eb      	ldrh	r3, [r5, #6]
   1c7a2:	8123      	strh	r3, [r4, #8]
}
   1c7a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c7a8:	f7ee bc58 	b.w	b05c <bt_hci_cmd_send_sync>
}
   1c7ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c7b2 <l2cap_connected>:
}
   1c7b2:	4770      	bx	lr

0001c7b4 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1c7b4:	4770      	bx	lr

0001c7b6 <bt_l2cap_chan_del>:
{
   1c7b6:	b570      	push	{r4, r5, r6, lr}
   1c7b8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c7ba:	e9d0 3500 	ldrd	r3, r5, [r0]
   1c7be:	b123      	cbz	r3, 1c7ca <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c7c0:	686b      	ldr	r3, [r5, #4]
   1c7c2:	b103      	cbz	r3, 1c7c6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c7c4:	4798      	blx	r3
	chan->conn = NULL;
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c7ca:	68e3      	ldr	r3, [r4, #12]
   1c7cc:	b10b      	cbz	r3, 1c7d2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c7ce:	4620      	mov	r0, r4
   1c7d0:	4798      	blx	r3
	if (ops->released) {
   1c7d2:	6a2b      	ldr	r3, [r5, #32]
   1c7d4:	b11b      	cbz	r3, 1c7de <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c7d6:	4620      	mov	r0, r4
}
   1c7d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c7dc:	4718      	bx	r3
}
   1c7de:	bd70      	pop	{r4, r5, r6, pc}

0001c7e0 <bt_l2cap_disconnected>:
{
   1c7e0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1c7e2:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c7e4:	b130      	cbz	r0, 1c7f4 <bt_l2cap_disconnected+0x14>
	return node->next;
   1c7e6:	f850 4908 	ldr.w	r4, [r0], #-8
   1c7ea:	b104      	cbz	r4, 1c7ee <bt_l2cap_disconnected+0xe>
   1c7ec:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c7ee:	f7ff ffe2 	bl	1c7b6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c7f2:	b904      	cbnz	r4, 1c7f6 <bt_l2cap_disconnected+0x16>
}
   1c7f4:	bd38      	pop	{r3, r4, r5, pc}
   1c7f6:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c7f8:	b12d      	cbz	r5, 1c806 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1c7fa:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c7fc:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1c7fe:	f7ff ffda 	bl	1c7b6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c802:	462c      	mov	r4, r5
   1c804:	e7f7      	b.n	1c7f6 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1c806:	4620      	mov	r0, r4
}
   1c808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1c80c:	f7ff bfd3 	b.w	1c7b6 <bt_l2cap_chan_del>

0001c810 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c810:	3104      	adds	r1, #4
   1c812:	f7f1 bc5d 	b.w	e0d0 <bt_conn_create_pdu_timeout>

0001c816 <bt_l2cap_send_cb>:
{
   1c816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c81a:	4614      	mov	r4, r2
   1c81c:	4605      	mov	r5, r0
   1c81e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c820:	f102 000c 	add.w	r0, r2, #12
   1c824:	2104      	movs	r1, #4
   1c826:	461e      	mov	r6, r3
   1c828:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c82c:	f7f4 fb9e 	bl	10f6c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c830:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   1c832:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c834:	3a04      	subs	r2, #4
   1c836:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c838:	4643      	mov	r3, r8
   1c83a:	4632      	mov	r2, r6
   1c83c:	4621      	mov	r1, r4
   1c83e:	4628      	mov	r0, r5
}
   1c840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c844:	f7f1 ba3a 	b.w	dcbc <bt_conn_send_cb>

0001c848 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c848:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c84a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c84c:	2202      	movs	r2, #2
   1c84e:	2001      	movs	r0, #1
   1c850:	f7f1 ffce 	bl	e7f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c854:	4604      	mov	r4, r0
   1c856:	b198      	cbz	r0, 1c880 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1c858:	2102      	movs	r1, #2
   1c85a:	300c      	adds	r0, #12
   1c85c:	f7f4 fbd6 	bl	1100c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c860:	2300      	movs	r3, #0
   1c862:	4622      	mov	r2, r4
   1c864:	7003      	strb	r3, [r0, #0]
   1c866:	7043      	strb	r3, [r0, #1]
   1c868:	2105      	movs	r1, #5
   1c86a:	4628      	mov	r0, r5
   1c86c:	9300      	str	r3, [sp, #0]
   1c86e:	f7ff ffd2 	bl	1c816 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1c872:	b128      	cbz	r0, 1c880 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1c874:	4620      	mov	r0, r4
}
   1c876:	b003      	add	sp, #12
   1c878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1c87c:	f7f4 bac0 	b.w	10e00 <net_buf_unref>
}
   1c880:	b003      	add	sp, #12
   1c882:	bd30      	pop	{r4, r5, pc}

0001c884 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c884:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c886:	b128      	cbz	r0, 1c894 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c888:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c88a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c88c:	428b      	cmp	r3, r1
   1c88e:	d001      	beq.n	1c894 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   1c890:	6880      	ldr	r0, [r0, #8]
   1c892:	e7f8      	b.n	1c886 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1c894:	4770      	bx	lr

0001c896 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1c896:	4770      	bx	lr

0001c898 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c898:	4603      	mov	r3, r0
	return list->head;
   1c89a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c89c:	b128      	cbz	r0, 1c8aa <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c89e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c8a0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c8a2:	4288      	cmp	r0, r1
	list->head = node;
   1c8a4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c8a6:	bf08      	it	eq
   1c8a8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c8aa:	4770      	bx	lr

0001c8ac <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c8ac:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c8ae:	2000      	movs	r0, #0

	while (buf) {
   1c8b0:	b903      	cbnz	r3, 1c8b4 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c8b2:	4770      	bx	lr
		bytes += buf->len;
   1c8b4:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1c8b6:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1c8b8:	4410      	add	r0, r2
		buf = buf->frags;
   1c8ba:	e7f9      	b.n	1c8b0 <net_buf_frags_len+0x4>

0001c8bc <attr_read_type_cb>:
{
   1c8bc:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c8be:	68d4      	ldr	r4, [r2, #12]
   1c8c0:	3102      	adds	r1, #2
   1c8c2:	7823      	ldrb	r3, [r4, #0]
   1c8c4:	b913      	cbnz	r3, 1c8cc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c8c6:	7021      	strb	r1, [r4, #0]
	return true;
   1c8c8:	2001      	movs	r0, #1
}
   1c8ca:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c8cc:	428b      	cmp	r3, r1
   1c8ce:	d0fb      	beq.n	1c8c8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c8d0:	8a03      	ldrh	r3, [r0, #16]
   1c8d2:	3b02      	subs	r3, #2
   1c8d4:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   1c8d6:	2000      	movs	r0, #0
   1c8d8:	6110      	str	r0, [r2, #16]
		return false;
   1c8da:	e7f6      	b.n	1c8ca <attr_read_type_cb+0xe>

0001c8dc <att_prepare_write_req>:
}
   1c8dc:	2006      	movs	r0, #6
   1c8de:	4770      	bx	lr

0001c8e0 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c8e0:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c8e4:	4108      	asrs	r0, r1
}
   1c8e6:	f000 0001 	and.w	r0, r0, #1
   1c8ea:	4770      	bx	lr

0001c8ec <write_cb>:
{
   1c8ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c8ee:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c8f0:	4601      	mov	r1, r0
{
   1c8f2:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c8f4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c8f8:	6820      	ldr	r0, [r4, #0]
   1c8fa:	f000 fd8b 	bl	1d414 <bt_gatt_check_perm>
   1c8fe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c900:	bb00      	cbnz	r0, 1c944 <write_cb+0x58>
	if (!data->req) {
   1c902:	7a23      	ldrb	r3, [r4, #8]
   1c904:	b1b3      	cbz	r3, 1c934 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1c906:	f1a3 0218 	sub.w	r2, r3, #24
   1c90a:	4253      	negs	r3, r2
   1c90c:	4153      	adcs	r3, r2
   1c90e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c910:	9301      	str	r3, [sp, #4]
   1c912:	8a63      	ldrh	r3, [r4, #18]
   1c914:	4629      	mov	r1, r5
   1c916:	9300      	str	r3, [sp, #0]
   1c918:	68ae      	ldr	r6, [r5, #8]
   1c91a:	8a23      	ldrh	r3, [r4, #16]
   1c91c:	68e2      	ldr	r2, [r4, #12]
   1c91e:	6820      	ldr	r0, [r4, #0]
   1c920:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1c922:	2800      	cmp	r0, #0
   1c924:	db08      	blt.n	1c938 <write_cb+0x4c>
   1c926:	8a23      	ldrh	r3, [r4, #16]
   1c928:	4298      	cmp	r0, r3
   1c92a:	d10e      	bne.n	1c94a <write_cb+0x5e>
	data->err = 0U;
   1c92c:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   1c92e:	2001      	movs	r0, #1
	data->err = 0U;
   1c930:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c932:	e008      	b.n	1c946 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c934:	2302      	movs	r3, #2
   1c936:	e7eb      	b.n	1c910 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1c938:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1c93c:	d305      	bcc.n	1c94a <write_cb+0x5e>
		return -err;
   1c93e:	4240      	negs	r0, r0
   1c940:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1c942:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1c944:	2000      	movs	r0, #0
}
   1c946:	b002      	add	sp, #8
   1c948:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c94a:	200e      	movs	r0, #14
   1c94c:	e7f9      	b.n	1c942 <write_cb+0x56>

0001c94e <bt_gatt_foreach_attr>:
{
   1c94e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c950:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c954:	2300      	movs	r3, #0
   1c956:	461a      	mov	r2, r3
   1c958:	9300      	str	r3, [sp, #0]
   1c95a:	f7f3 fb47 	bl	ffec <bt_gatt_foreach_attr_type>
}
   1c95e:	b005      	add	sp, #20
   1c960:	f85d fb04 	ldr.w	pc, [sp], #4

0001c964 <att_chan_mtu_updated>:
{
   1c964:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1c966:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1c968:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c96a:	b352      	cbz	r2, 1c9c2 <att_chan_mtu_updated+0x5e>
	return node->next;
   1c96c:	6813      	ldr	r3, [r2, #0]
   1c96e:	b103      	cbz	r3, 1c972 <att_chan_mtu_updated+0xe>
   1c970:	3bf0      	subs	r3, #240	; 0xf0
   1c972:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   1c976:	2200      	movs	r2, #0
   1c978:	4611      	mov	r1, r2
   1c97a:	e000      	b.n	1c97e <att_chan_mtu_updated+0x1a>
   1c97c:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   1c97e:	4284      	cmp	r4, r0
   1c980:	d007      	beq.n	1c992 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1c982:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1c984:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1c986:	42b1      	cmp	r1, r6
   1c988:	bf38      	it	cc
   1c98a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1c98c:	42a2      	cmp	r2, r4
   1c98e:	bf38      	it	cc
   1c990:	4622      	movcc	r2, r4
   1c992:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c994:	b12b      	cbz	r3, 1c9a2 <att_chan_mtu_updated+0x3e>
   1c996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1c99a:	2b00      	cmp	r3, #0
   1c99c:	d1ee      	bne.n	1c97c <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1c99e:	4284      	cmp	r4, r0
   1c9a0:	d1ef      	bne.n	1c982 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c9a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1c9a4:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1c9a6:	428b      	cmp	r3, r1
   1c9a8:	d801      	bhi.n	1c9ae <att_chan_mtu_updated+0x4a>
   1c9aa:	4290      	cmp	r0, r2
   1c9ac:	d90b      	bls.n	1c9c6 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c9ae:	4282      	cmp	r2, r0
   1c9b0:	bf38      	it	cc
   1c9b2:	4602      	movcc	r2, r0
   1c9b4:	4299      	cmp	r1, r3
   1c9b6:	6828      	ldr	r0, [r5, #0]
   1c9b8:	bf38      	it	cc
   1c9ba:	4619      	movcc	r1, r3
}
   1c9bc:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1c9be:	f7f3 bfed 	b.w	1099c <bt_gatt_att_max_mtu_changed>
   1c9c2:	4611      	mov	r1, r2
   1c9c4:	e7ed      	b.n	1c9a2 <att_chan_mtu_updated+0x3e>
}
   1c9c6:	bc70      	pop	{r4, r5, r6}
   1c9c8:	4770      	bx	lr

0001c9ca <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c9ca:	68d0      	ldr	r0, [r2, #12]
   1c9cc:	3104      	adds	r1, #4
   1c9ce:	7803      	ldrb	r3, [r0, #0]
   1c9d0:	b913      	cbnz	r3, 1c9d8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c9d2:	7001      	strb	r1, [r0, #0]
	return true;
   1c9d4:	2001      	movs	r0, #1
   1c9d6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c9d8:	428b      	cmp	r3, r1
   1c9da:	d0fb      	beq.n	1c9d4 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c9dc:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c9de:	6891      	ldr	r1, [r2, #8]
   1c9e0:	8a0b      	ldrh	r3, [r1, #16]
   1c9e2:	3b04      	subs	r3, #4
   1c9e4:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   1c9e6:	6110      	str	r0, [r2, #16]
}
   1c9e8:	4770      	bx	lr

0001c9ea <chan_req_send>:
{
   1c9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9ec:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c9ee:	6888      	ldr	r0, [r1, #8]
   1c9f0:	f7ff ff5c 	bl	1c8ac <net_buf_frags_len>
   1c9f4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1c9f6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c9f8:	4283      	cmp	r3, r0
   1c9fa:	d30d      	bcc.n	1ca18 <chan_req_send+0x2e>
	req->buf = NULL;
   1c9fc:	2600      	movs	r6, #0
	chan->req = req;
   1c9fe:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   1ca02:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   1ca04:	4628      	mov	r0, r5
	req->buf = NULL;
   1ca06:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1ca08:	4639      	mov	r1, r7
   1ca0a:	f7f2 f97b 	bl	ed04 <chan_send>
	if (err) {
   1ca0e:	b110      	cbz	r0, 1ca16 <chan_req_send+0x2c>
		req->buf = buf;
   1ca10:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1ca12:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   1ca16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1ca18:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ca1c:	e7fb      	b.n	1ca16 <chan_req_send+0x2c>

0001ca1e <bt_att_chan_send_rsp>:
{
   1ca1e:	b538      	push	{r3, r4, r5, lr}
   1ca20:	4604      	mov	r4, r0
   1ca22:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1ca24:	f7f2 f96e 	bl	ed04 <chan_send>
	if (err) {
   1ca28:	b130      	cbz	r0, 1ca38 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1ca2a:	4629      	mov	r1, r5
   1ca2c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   1ca30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1ca34:	f7f4 b9c4 	b.w	10dc0 <net_buf_put>
}
   1ca38:	bd38      	pop	{r3, r4, r5, pc}

0001ca3a <find_info_cb>:
{
   1ca3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ca3c:	6893      	ldr	r3, [r2, #8]
{
   1ca3e:	4605      	mov	r5, r0
   1ca40:	460f      	mov	r7, r1
   1ca42:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1ca44:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   1ca46:	b963      	cbnz	r3, 1ca62 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ca48:	6850      	ldr	r0, [r2, #4]
   1ca4a:	2101      	movs	r1, #1
   1ca4c:	300c      	adds	r0, #12
   1ca4e:	f7f4 fadd 	bl	1100c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ca52:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ca54:	682b      	ldr	r3, [r5, #0]
   1ca56:	781b      	ldrb	r3, [r3, #0]
   1ca58:	2b00      	cmp	r3, #0
   1ca5a:	bf14      	ite	ne
   1ca5c:	2302      	movne	r3, #2
   1ca5e:	2301      	moveq	r3, #1
   1ca60:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ca62:	68a3      	ldr	r3, [r4, #8]
   1ca64:	781b      	ldrb	r3, [r3, #0]
   1ca66:	2b01      	cmp	r3, #1
   1ca68:	d003      	beq.n	1ca72 <find_info_cb+0x38>
   1ca6a:	2b02      	cmp	r3, #2
   1ca6c:	d019      	beq.n	1caa2 <find_info_cb+0x68>
   1ca6e:	2000      	movs	r0, #0
   1ca70:	e016      	b.n	1caa0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ca72:	682b      	ldr	r3, [r5, #0]
   1ca74:	781b      	ldrb	r3, [r3, #0]
   1ca76:	2b00      	cmp	r3, #0
   1ca78:	d1f9      	bne.n	1ca6e <find_info_cb+0x34>
   1ca7a:	6860      	ldr	r0, [r4, #4]
   1ca7c:	2104      	movs	r1, #4
   1ca7e:	300c      	adds	r0, #12
   1ca80:	f7f4 fac4 	bl	1100c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ca84:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1ca86:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ca88:	682a      	ldr	r2, [r5, #0]
   1ca8a:	68e3      	ldr	r3, [r4, #12]
   1ca8c:	8852      	ldrh	r2, [r2, #2]
   1ca8e:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1ca90:	6863      	ldr	r3, [r4, #4]
   1ca92:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1ca94:	8a1b      	ldrh	r3, [r3, #16]
   1ca96:	1ac0      	subs	r0, r0, r3
   1ca98:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1ca9a:	bf94      	ite	ls
   1ca9c:	2000      	movls	r0, #0
   1ca9e:	2001      	movhi	r0, #1
}
   1caa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1caa2:	682b      	ldr	r3, [r5, #0]
   1caa4:	781b      	ldrb	r3, [r3, #0]
   1caa6:	2b02      	cmp	r3, #2
   1caa8:	d1e1      	bne.n	1ca6e <find_info_cb+0x34>
   1caaa:	6860      	ldr	r0, [r4, #4]
   1caac:	2112      	movs	r1, #18
   1caae:	300c      	adds	r0, #12
   1cab0:	f7f4 faac 	bl	1100c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1cab4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1cab6:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1cab8:	682b      	ldr	r3, [r5, #0]
   1caba:	68e2      	ldr	r2, [r4, #12]
   1cabc:	1c59      	adds	r1, r3, #1
   1cabe:	3202      	adds	r2, #2
   1cac0:	3311      	adds	r3, #17
   1cac2:	f851 0b04 	ldr.w	r0, [r1], #4
   1cac6:	4299      	cmp	r1, r3
   1cac8:	f842 0b04 	str.w	r0, [r2], #4
   1cacc:	d1f9      	bne.n	1cac2 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1cace:	6863      	ldr	r3, [r4, #4]
   1cad0:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1cad2:	8a1b      	ldrh	r3, [r3, #16]
   1cad4:	1ac0      	subs	r0, r0, r3
   1cad6:	2812      	cmp	r0, #18
   1cad8:	e7df      	b.n	1ca9a <find_info_cb+0x60>

0001cada <process_queue>:
{
   1cada:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1cadc:	2200      	movs	r2, #0
{
   1cade:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1cae0:	2300      	movs	r3, #0
   1cae2:	4608      	mov	r0, r1
{
   1cae4:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1cae6:	f000 fd2b 	bl	1d540 <net_buf_get>
	if (buf) {
   1caea:	4605      	mov	r5, r0
   1caec:	b158      	cbz	r0, 1cb06 <process_queue+0x2c>
	return chan_send(chan, buf);
   1caee:	4601      	mov	r1, r0
   1caf0:	4620      	mov	r0, r4
   1caf2:	f7f2 f907 	bl	ed04 <chan_send>
		if (err) {
   1caf6:	4604      	mov	r4, r0
   1caf8:	b118      	cbz	r0, 1cb02 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1cafa:	4629      	mov	r1, r5
   1cafc:	4630      	mov	r0, r6
   1cafe:	f002 fa99 	bl	1f034 <k_queue_prepend>
}
   1cb02:	4620      	mov	r0, r4
   1cb04:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1cb06:	f06f 0401 	mvn.w	r4, #1
   1cb0a:	e7fa      	b.n	1cb02 <process_queue+0x28>

0001cb0c <att_chan_read>:
{
   1cb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb10:	4680      	mov	r8, r0
   1cb12:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb14:	4610      	mov	r0, r2
{
   1cb16:	4699      	mov	r9, r3
   1cb18:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb1a:	f7ff fec7 	bl	1c8ac <net_buf_frags_len>
   1cb1e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   1cb22:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb24:	4283      	cmp	r3, r0
   1cb26:	d97a      	bls.n	1cc1e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb28:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1cb2c:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb2e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1cb30:	f7f4 f9be 	bl	10eb0 <net_buf_frag_last>
	size_t len, total = 0;
   1cb34:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1cb38:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb3a:	4630      	mov	r0, r6
   1cb3c:	f7ff feb6 	bl	1c8ac <net_buf_frags_len>
   1cb40:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1cb44:	f105 070c 	add.w	r7, r5, #12
   1cb48:	1a24      	subs	r4, r4, r0
   1cb4a:	4638      	mov	r0, r7
   1cb4c:	f000 fd15 	bl	1d57a <net_buf_simple_tailroom>
   1cb50:	4284      	cmp	r4, r0
   1cb52:	d211      	bcs.n	1cb78 <att_chan_read+0x6c>
   1cb54:	4630      	mov	r0, r6
   1cb56:	f7ff fea9 	bl	1c8ac <net_buf_frags_len>
   1cb5a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cb5e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1cb60:	bb34      	cbnz	r4, 1cbb0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1cb62:	7ab0      	ldrb	r0, [r6, #10]
   1cb64:	f7f3 ff6a 	bl	10a3c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1cb68:	2200      	movs	r2, #0
   1cb6a:	2300      	movs	r3, #0
   1cb6c:	f000 fce3 	bl	1d536 <net_buf_alloc_fixed>
			if (!frag) {
   1cb70:	4605      	mov	r5, r0
   1cb72:	b930      	cbnz	r0, 1cb82 <att_chan_read+0x76>
	return total;
   1cb74:	4657      	mov	r7, sl
   1cb76:	e02c      	b.n	1cbd2 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1cb78:	4638      	mov	r0, r7
   1cb7a:	f000 fcfe 	bl	1d57a <net_buf_simple_tailroom>
   1cb7e:	4604      	mov	r4, r0
   1cb80:	e7ee      	b.n	1cb60 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1cb82:	4601      	mov	r1, r0
   1cb84:	4630      	mov	r0, r6
   1cb86:	f7f4 f9d1 	bl	10f2c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb8a:	4630      	mov	r0, r6
   1cb8c:	f7ff fe8e 	bl	1c8ac <net_buf_frags_len>
   1cb90:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cb94:	f105 070c 	add.w	r7, r5, #12
   1cb98:	1a24      	subs	r4, r4, r0
   1cb9a:	4638      	mov	r0, r7
   1cb9c:	f000 fced 	bl	1d57a <net_buf_simple_tailroom>
   1cba0:	4284      	cmp	r4, r0
   1cba2:	d21a      	bcs.n	1cbda <att_chan_read+0xce>
   1cba4:	4630      	mov	r0, r6
   1cba6:	f7ff fe81 	bl	1c8ac <net_buf_frags_len>
   1cbaa:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1cbae:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1cbb0:	68e9      	ldr	r1, [r5, #12]
   1cbb2:	8a2a      	ldrh	r2, [r5, #16]
   1cbb4:	f8cd 9000 	str.w	r9, [sp]
   1cbb8:	f8db 7004 	ldr.w	r7, [fp, #4]
   1cbbc:	440a      	add	r2, r1
   1cbbe:	9803      	ldr	r0, [sp, #12]
   1cbc0:	4659      	mov	r1, fp
   1cbc2:	b2a3      	uxth	r3, r4
   1cbc4:	47b8      	blx	r7
		if (read < 0) {
   1cbc6:	1e07      	subs	r7, r0, #0
   1cbc8:	da0c      	bge.n	1cbe4 <att_chan_read+0xd8>
				return total;
   1cbca:	f1ba 0f00 	cmp.w	sl, #0
   1cbce:	bf18      	it	ne
   1cbd0:	4657      	movne	r7, sl
}
   1cbd2:	4638      	mov	r0, r7
   1cbd4:	b005      	add	sp, #20
   1cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbda:	4638      	mov	r0, r7
   1cbdc:	f000 fccd 	bl	1d57a <net_buf_simple_tailroom>
   1cbe0:	4604      	mov	r4, r0
   1cbe2:	e7e5      	b.n	1cbb0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1cbe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cbe6:	b993      	cbnz	r3, 1cc0e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1cbe8:	4639      	mov	r1, r7
   1cbea:	f105 000c 	add.w	r0, r5, #12
   1cbee:	f7f4 fa0d 	bl	1100c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cbf2:	4630      	mov	r0, r6
   1cbf4:	f7ff fe5a 	bl	1c8ac <net_buf_frags_len>
   1cbf8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1cbfc:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cbfe:	4283      	cmp	r3, r0
		total += read;
   1cc00:	44ba      	add	sl, r7
		offset += read;
   1cc02:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc06:	d9b5      	bls.n	1cb74 <att_chan_read+0x68>
   1cc08:	42a7      	cmp	r7, r4
   1cc0a:	d096      	beq.n	1cb3a <att_chan_read+0x2e>
   1cc0c:	e7b2      	b.n	1cb74 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1cc0e:	4639      	mov	r1, r7
   1cc10:	4628      	mov	r0, r5
   1cc12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc16:	4798      	blx	r3
   1cc18:	2800      	cmp	r0, #0
   1cc1a:	d1e5      	bne.n	1cbe8 <att_chan_read+0xdc>
   1cc1c:	e7aa      	b.n	1cb74 <att_chan_read+0x68>
		return 0;
   1cc1e:	2700      	movs	r7, #0
   1cc20:	e7d7      	b.n	1cbd2 <att_chan_read+0xc6>

0001cc22 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc22:	2200      	movs	r2, #0
	return list->head;
   1cc24:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc26:	b903      	cbnz	r3, 1cc2a <sys_slist_find_and_remove.isra.0+0x8>
   1cc28:	4770      	bx	lr
   1cc2a:	428b      	cmp	r3, r1
   1cc2c:	d10f      	bne.n	1cc4e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1cc2e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc30:	b93a      	cbnz	r2, 1cc42 <sys_slist_find_and_remove.isra.0+0x20>
   1cc32:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1cc34:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc36:	4291      	cmp	r1, r2
   1cc38:	d100      	bne.n	1cc3c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1cc3a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1cc3c:	2300      	movs	r3, #0
   1cc3e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc40:	4770      	bx	lr
	parent->next = child;
   1cc42:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cc44:	6843      	ldr	r3, [r0, #4]
   1cc46:	4299      	cmp	r1, r3
	list->tail = node;
   1cc48:	bf08      	it	eq
   1cc4a:	6042      	streq	r2, [r0, #4]
}
   1cc4c:	e7f6      	b.n	1cc3c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1cc4e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cc50:	681b      	ldr	r3, [r3, #0]
   1cc52:	e7e8      	b.n	1cc26 <sys_slist_find_and_remove.isra.0+0x4>

0001cc54 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1cc54:	2006      	movs	r0, #6
   1cc56:	4770      	bx	lr

0001cc58 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cc58:	2301      	movs	r3, #1
{
   1cc5a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1cc5c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cc60:	e8d0 3fef 	ldaex	r3, [r0]
   1cc64:	ea43 0201 	orr.w	r2, r3, r1
   1cc68:	e8c0 2fe4 	stlex	r4, r2, [r0]
   1cc6c:	2c00      	cmp	r4, #0
   1cc6e:	d1f7      	bne.n	1cc60 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   1cc70:	4219      	tst	r1, r3
}
   1cc72:	bf14      	ite	ne
   1cc74:	2001      	movne	r0, #1
   1cc76:	2000      	moveq	r0, #0
   1cc78:	bd10      	pop	{r4, pc}

0001cc7a <read_cb>:
{
   1cc7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   1cc7c:	2300      	movs	r3, #0
{
   1cc7e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   1cc80:	6816      	ldr	r6, [r2, #0]
{
   1cc82:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1cc84:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1cc86:	4629      	mov	r1, r5
	data->err = 0x00;
   1cc88:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1cc8a:	2295      	movs	r2, #149	; 0x95
   1cc8c:	f000 fbc2 	bl	1d414 <bt_gatt_check_perm>
   1cc90:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1cc92:	b980      	cbnz	r0, 1ccb6 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1cc94:	e9cd 0000 	strd	r0, r0, [sp]
   1cc98:	4629      	mov	r1, r5
   1cc9a:	4630      	mov	r0, r6
   1cc9c:	88a3      	ldrh	r3, [r4, #4]
   1cc9e:	68a2      	ldr	r2, [r4, #8]
   1cca0:	f7ff ff34 	bl	1cb0c <att_chan_read>
	if (ret < 0) {
   1cca4:	2800      	cmp	r0, #0
   1cca6:	da09      	bge.n	1ccbc <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1cca8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1ccac:	bf32      	itee	cc
   1ccae:	200e      	movcc	r0, #14
		return -err;
   1ccb0:	4240      	negcs	r0, r0
   1ccb2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   1ccb4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1ccb6:	2000      	movs	r0, #0
}
   1ccb8:	b002      	add	sp, #8
   1ccba:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1ccbc:	2001      	movs	r0, #1
   1ccbe:	e7fb      	b.n	1ccb8 <read_cb+0x3e>

0001ccc0 <read_vl_cb>:
{
   1ccc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   1ccc4:	2300      	movs	r3, #0
{
   1ccc6:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   1ccc8:	f8d2 8000 	ldr.w	r8, [r2]
{
   1cccc:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ccce:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ccd2:	4631      	mov	r1, r6
	data->err = 0x00;
   1ccd4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ccd6:	2295      	movs	r2, #149	; 0x95
   1ccd8:	f000 fb9c 	bl	1d414 <bt_gatt_check_perm>
   1ccdc:	4605      	mov	r5, r0
   1ccde:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1cce0:	b9e0      	cbnz	r0, 1cd1c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1cce2:	68a0      	ldr	r0, [r4, #8]
   1cce4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1cce8:	8a02      	ldrh	r2, [r0, #16]
   1ccea:	1a9b      	subs	r3, r3, r2
   1ccec:	2b01      	cmp	r3, #1
   1ccee:	dd15      	ble.n	1cd1c <read_vl_cb+0x5c>
   1ccf0:	2102      	movs	r1, #2
   1ccf2:	300c      	adds	r0, #12
   1ccf4:	f7f4 f98a 	bl	1100c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ccf8:	e9cd 5500 	strd	r5, r5, [sp]
   1ccfc:	4607      	mov	r7, r0
   1ccfe:	88a3      	ldrh	r3, [r4, #4]
   1cd00:	4631      	mov	r1, r6
   1cd02:	4640      	mov	r0, r8
   1cd04:	68a2      	ldr	r2, [r4, #8]
   1cd06:	f7ff ff01 	bl	1cb0c <att_chan_read>
	if (read < 0) {
   1cd0a:	1e03      	subs	r3, r0, #0
   1cd0c:	da0a      	bge.n	1cd24 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1cd0e:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1cd12:	bf32      	itee	cc
   1cd14:	230e      	movcc	r3, #14
		return -err;
   1cd16:	425b      	negcs	r3, r3
   1cd18:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   1cd1a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1cd1c:	2000      	movs	r0, #0
}
   1cd1e:	b002      	add	sp, #8
   1cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1cd24:	2001      	movs	r0, #1
	rsp->len = read;
   1cd26:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1cd28:	e7f9      	b.n	1cd1e <read_vl_cb+0x5e>

0001cd2a <bt_att_sent>:
{
   1cd2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd2c:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   1cd2e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cd32:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd34:	f100 0394 	add.w	r3, r0, #148	; 0x94
   1cd38:	e8d3 1fef 	ldaex	r1, [r3]
   1cd3c:	f021 0110 	bic.w	r1, r1, #16
   1cd40:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cd44:	2a00      	cmp	r2, #0
   1cd46:	d1f7      	bne.n	1cd38 <bt_att_sent+0xe>
	if (!att) {
   1cd48:	b30c      	cbz	r4, 1cd8e <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1cd4a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1cd4e:	b98b      	cbnz	r3, 1cd74 <bt_att_sent+0x4a>
   1cd50:	6863      	ldr	r3, [r4, #4]
   1cd52:	b17b      	cbz	r3, 1cd74 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cd54:	1d20      	adds	r0, r4, #4
   1cd56:	f7ff fd9f 	bl	1c898 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cd5a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cd5c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cd5e:	4638      	mov	r0, r7
   1cd60:	f7ff fe43 	bl	1c9ea <chan_req_send>
   1cd64:	2800      	cmp	r0, #0
   1cd66:	da12      	bge.n	1cd8e <bt_att_sent+0x64>
	return list->head;
   1cd68:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1cd6a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cd6c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1cd6e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cd70:	b903      	cbnz	r3, 1cd74 <bt_att_sent+0x4a>
	list->tail = node;
   1cd72:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1cd74:	4638      	mov	r0, r7
   1cd76:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   1cd7a:	f7ff feae 	bl	1cada <process_queue>
	if (!err) {
   1cd7e:	b130      	cbz	r0, 1cd8e <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   1cd80:	4638      	mov	r0, r7
   1cd82:	f104 010c 	add.w	r1, r4, #12
}
   1cd86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1cd8a:	f7ff bea6 	b.w	1cada <process_queue>
}
   1cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cd90 <att_req_send_process>:
{
   1cd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1cd94:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1cd96:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cd98:	2c00      	cmp	r4, #0
   1cd9a:	d03b      	beq.n	1ce14 <att_req_send_process+0x84>
	return node->next;
   1cd9c:	f854 69f0 	ldr.w	r6, [r4], #-240
   1cda0:	b106      	cbz	r6, 1cda4 <att_req_send_process+0x14>
   1cda2:	3ef0      	subs	r6, #240	; 0xf0
{
   1cda4:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1cda6:	f108 0704 	add.w	r7, r8, #4
{
   1cdaa:	461d      	mov	r5, r3
   1cdac:	e013      	b.n	1cdd6 <att_req_send_process+0x46>
		if (!req && prev &&
   1cdae:	b1c3      	cbz	r3, 1cde2 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1cdb0:	2103      	movs	r1, #3
   1cdb2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1cdb6:	f7ff fd93 	bl	1c8e0 <atomic_test_bit>
   1cdba:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1cdbc:	f103 0098 	add.w	r0, r3, #152	; 0x98
   1cdc0:	f7ff fd8e 	bl	1c8e0 <atomic_test_bit>
		if (!req && prev &&
   1cdc4:	4282      	cmp	r2, r0
   1cdc6:	d10c      	bne.n	1cde2 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cdc8:	b326      	cbz	r6, 1ce14 <att_req_send_process+0x84>
   1cdca:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   1cdce:	b102      	cbz	r2, 1cdd2 <att_req_send_process+0x42>
   1cdd0:	3af0      	subs	r2, #240	; 0xf0
{
   1cdd2:	4634      	mov	r4, r6
   1cdd4:	4616      	mov	r6, r2
		if (chan->req) {
   1cdd6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   1cdda:	2a00      	cmp	r2, #0
   1cddc:	d1f4      	bne.n	1cdc8 <att_req_send_process+0x38>
		if (!req && prev &&
   1cdde:	2d00      	cmp	r5, #0
   1cde0:	d0e5      	beq.n	1cdae <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1cde2:	4638      	mov	r0, r7
   1cde4:	f7ff fd58 	bl	1c898 <sys_slist_get>
	if (node) {
   1cde8:	4605      	mov	r5, r0
   1cdea:	b908      	cbnz	r0, 1cdf0 <att_req_send_process+0x60>
   1cdec:	4623      	mov	r3, r4
   1cdee:	e7eb      	b.n	1cdc8 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1cdf0:	4601      	mov	r1, r0
   1cdf2:	4620      	mov	r0, r4
   1cdf4:	f7f1 ffe6 	bl	edc4 <bt_att_chan_req_send>
   1cdf8:	2800      	cmp	r0, #0
   1cdfa:	da0b      	bge.n	1ce14 <att_req_send_process+0x84>
	return list->head;
   1cdfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1ce00:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ce02:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1ce06:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	d1ee      	bne.n	1cdec <att_req_send_process+0x5c>
	list->tail = node;
   1ce0e:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1ce12:	e7eb      	b.n	1cdec <att_req_send_process+0x5c>
}
   1ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce18 <bt_att_status>:
{
   1ce18:	b538      	push	{r3, r4, r5, lr}
   1ce1a:	4605      	mov	r5, r0
   1ce1c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ce1e:	2100      	movs	r1, #0
   1ce20:	f7ff fd5e 	bl	1c8e0 <atomic_test_bit>
   1ce24:	b1c0      	cbz	r0, 1ce58 <bt_att_status+0x40>
	if (!chan->att) {
   1ce26:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1ce2a:	b1a8      	cbz	r0, 1ce58 <bt_att_status+0x40>
	if (chan->req) {
   1ce2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1ce30:	b993      	cbnz	r3, 1ce58 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1ce32:	3004      	adds	r0, #4
   1ce34:	f7ff fd30 	bl	1c898 <sys_slist_get>
	if (!node) {
   1ce38:	4604      	mov	r4, r0
   1ce3a:	b168      	cbz	r0, 1ce58 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ce3c:	4601      	mov	r1, r0
   1ce3e:	1f28      	subs	r0, r5, #4
   1ce40:	f7f1 ffc0 	bl	edc4 <bt_att_chan_req_send>
   1ce44:	2800      	cmp	r0, #0
   1ce46:	da07      	bge.n	1ce58 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1ce48:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1ce4c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ce4e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ce50:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ce52:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ce54:	b902      	cbnz	r2, 1ce58 <bt_att_status+0x40>
	list->tail = node;
   1ce56:	609c      	str	r4, [r3, #8]
}
   1ce58:	bd38      	pop	{r3, r4, r5, pc}

0001ce5a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1ce5a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1ce5c:	6883      	ldr	r3, [r0, #8]
   1ce5e:	699b      	ldr	r3, [r3, #24]
   1ce60:	b10b      	cbz	r3, 1ce66 <att_sent+0xc>
		chan->ops->sent(chan);
   1ce62:	3004      	adds	r0, #4
   1ce64:	4718      	bx	r3
}
   1ce66:	4770      	bx	lr

0001ce68 <att_tx_complete>:
{
   1ce68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce6c:	4606      	mov	r6, r0
   1ce6e:	460d      	mov	r5, r1
	if (!err) {
   1ce70:	4614      	mov	r4, r2
   1ce72:	b122      	cbz	r2, 1ce7e <att_tx_complete+0x16>
}
   1ce74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1ce78:	4608      	mov	r0, r1
   1ce7a:	f7f1 bf27 	b.w	eccc <tx_meta_data_free>
		att_sent(conn, user_data);
   1ce7e:	f7ff ffec 	bl	1ce5a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1ce82:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1ce84:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1ce86:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1ce8a:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1ce8e:	f7f1 ff1d 	bl	eccc <tx_meta_data_free>
	if (!err && func) {
   1ce92:	b92f      	cbnz	r7, 1cea0 <att_tx_complete+0x38>
}
   1ce94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1ce98:	4649      	mov	r1, r9
   1ce9a:	4630      	mov	r0, r6
   1ce9c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1ce9e:	3401      	adds	r4, #1
   1cea0:	b2a3      	uxth	r3, r4
   1cea2:	4543      	cmp	r3, r8
   1cea4:	d3f8      	bcc.n	1ce98 <att_tx_complete+0x30>
   1cea6:	e7f5      	b.n	1ce94 <att_tx_complete+0x2c>

0001cea8 <att_req_sent>:
{
   1cea8:	b510      	push	{r4, lr}
   1ceaa:	460c      	mov	r4, r1
	if (!err) {
   1ceac:	b90a      	cbnz	r2, 1ceb2 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1ceae:	f7ff ffd4 	bl	1ce5a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1ceb2:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1ceb4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1ceb8:	b12b      	cbz	r3, 1cec6 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ceba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1cebe:	2300      	movs	r3, #0
   1cec0:	30c0      	adds	r0, #192	; 0xc0
   1cec2:	f7fa fa63 	bl	1738c <k_work_reschedule>
	tx_meta_data_free(user_data);
   1cec6:	4620      	mov	r0, r4
}
   1cec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1cecc:	f7f1 befe 	b.w	eccc <tx_meta_data_free>

0001ced0 <att_cfm_sent>:
{
   1ced0:	b510      	push	{r4, lr}
   1ced2:	460c      	mov	r4, r1
	if (!err) {
   1ced4:	b90a      	cbnz	r2, 1ceda <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1ced6:	f7ff ffc0 	bl	1ce5a <att_sent>
   1ceda:	6823      	ldr	r3, [r4, #0]
   1cedc:	3398      	adds	r3, #152	; 0x98
   1cede:	e8d3 1fef 	ldaex	r1, [r3]
   1cee2:	f021 0102 	bic.w	r1, r1, #2
   1cee6:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1ceea:	2a00      	cmp	r2, #0
   1ceec:	d1f7      	bne.n	1cede <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   1ceee:	4620      	mov	r0, r4
}
   1cef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1cef4:	f7f1 beea 	b.w	eccc <tx_meta_data_free>

0001cef8 <att_rsp_sent>:
{
   1cef8:	b510      	push	{r4, lr}
   1cefa:	460c      	mov	r4, r1
	if (!err) {
   1cefc:	b90a      	cbnz	r2, 1cf02 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1cefe:	f7ff ffac 	bl	1ce5a <att_sent>
   1cf02:	6823      	ldr	r3, [r4, #0]
   1cf04:	3398      	adds	r3, #152	; 0x98
   1cf06:	e8d3 1fef 	ldaex	r1, [r3]
   1cf0a:	f021 0101 	bic.w	r1, r1, #1
   1cf0e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cf12:	2a00      	cmp	r2, #0
   1cf14:	d1f7      	bne.n	1cf06 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   1cf16:	4620      	mov	r0, r4
}
   1cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1cf1c:	f7f1 bed6 	b.w	eccc <tx_meta_data_free>

0001cf20 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf24:	4688      	mov	r8, r1
   1cf26:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1cf28:	2101      	movs	r1, #1
   1cf2a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1cf2c:	4605      	mov	r5, r0
   1cf2e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1cf30:	f7f2 f8ac 	bl	f08c <bt_att_chan_create_pdu>
	if (!buf) {
   1cf34:	4604      	mov	r4, r0
   1cf36:	b170      	cbz	r0, 1cf56 <send_err_rsp.part.0+0x36>
   1cf38:	2104      	movs	r1, #4
   1cf3a:	300c      	adds	r0, #12
   1cf3c:	f7f4 f866 	bl	1100c <net_buf_simple_add>
	rsp->request = req;
   1cf40:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1cf44:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1cf48:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1cf4a:	4621      	mov	r1, r4
   1cf4c:	4628      	mov	r0, r5
}
   1cf4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1cf52:	f7ff bd64 	b.w	1ca1e <bt_att_chan_send_rsp>
}
   1cf56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf5a <att_write_req>:
{
   1cf5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cf5c:	460c      	mov	r4, r1
   1cf5e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1cf60:	f101 000c 	add.w	r0, r1, #12
   1cf64:	f000 fafd 	bl	1d562 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1cf68:	8a22      	ldrh	r2, [r4, #16]
   1cf6a:	4603      	mov	r3, r0
   1cf6c:	9201      	str	r2, [sp, #4]
   1cf6e:	68e2      	ldr	r2, [r4, #12]
   1cf70:	2112      	movs	r1, #18
   1cf72:	9200      	str	r2, [sp, #0]
   1cf74:	4628      	mov	r0, r5
   1cf76:	2213      	movs	r2, #19
   1cf78:	f7f2 f94e 	bl	f218 <att_write_rsp.constprop.0>
}
   1cf7c:	b003      	add	sp, #12
   1cf7e:	bd30      	pop	{r4, r5, pc}

0001cf80 <att_write_cmd>:
{
   1cf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cf82:	460c      	mov	r4, r1
   1cf84:	4605      	mov	r5, r0
   1cf86:	f101 000c 	add.w	r0, r1, #12
   1cf8a:	f000 faea 	bl	1d562 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cf8e:	8a22      	ldrh	r2, [r4, #16]
   1cf90:	4603      	mov	r3, r0
   1cf92:	9201      	str	r2, [sp, #4]
   1cf94:	68e2      	ldr	r2, [r4, #12]
   1cf96:	4628      	mov	r0, r5
   1cf98:	9200      	str	r2, [sp, #0]
   1cf9a:	2200      	movs	r2, #0
   1cf9c:	4611      	mov	r1, r2
   1cf9e:	f7f2 f93b 	bl	f218 <att_write_rsp.constprop.0>
}
   1cfa2:	b003      	add	sp, #12
   1cfa4:	bd30      	pop	{r4, r5, pc}

0001cfa6 <att_read_blob_req>:
{
   1cfa6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cfa8:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cfaa:	210c      	movs	r1, #12
   1cfac:	8813      	ldrh	r3, [r2, #0]
   1cfae:	8852      	ldrh	r2, [r2, #2]
   1cfb0:	9200      	str	r2, [sp, #0]
   1cfb2:	220d      	movs	r2, #13
   1cfb4:	f7f2 fae8 	bl	f588 <att_read_rsp>
}
   1cfb8:	b003      	add	sp, #12
   1cfba:	f85d fb04 	ldr.w	pc, [sp], #4

0001cfbe <att_read_req>:
{
   1cfbe:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cfc0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cfc2:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cfc4:	210a      	movs	r1, #10
   1cfc6:	881b      	ldrh	r3, [r3, #0]
   1cfc8:	9200      	str	r2, [sp, #0]
   1cfca:	220b      	movs	r2, #11
   1cfcc:	f7f2 fadc 	bl	f588 <att_read_rsp>
}
   1cfd0:	b003      	add	sp, #12
   1cfd2:	f85d fb04 	ldr.w	pc, [sp], #4

0001cfd6 <att_mtu_req>:
{
   1cfd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cfd8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1cfda:	f850 2b98 	ldr.w	r2, [r0], #152
{
   1cfde:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1cfe0:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1cfe2:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1cfe4:	f7ff fc7c 	bl	1c8e0 <atomic_test_bit>
   1cfe8:	4604      	mov	r4, r0
   1cfea:	b9d8      	cbnz	r0, 1d024 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1cfec:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1cfee:	881b      	ldrh	r3, [r3, #0]
   1cff0:	2b16      	cmp	r3, #22
   1cff2:	d919      	bls.n	1d028 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1cff4:	4630      	mov	r0, r6
   1cff6:	2202      	movs	r2, #2
   1cff8:	f7f2 f972 	bl	f2e0 <bt_att_create_pdu>
	if (!pdu) {
   1cffc:	4606      	mov	r6, r0
   1cffe:	b1a8      	cbz	r0, 1d02c <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1d000:	2102      	movs	r1, #2
   1d002:	300c      	adds	r0, #12
   1d004:	f7f4 f802 	bl	1100c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1d008:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   1d00a:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1d00c:	7007      	strb	r7, [r0, #0]
   1d00e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1d010:	4628      	mov	r0, r5
   1d012:	f7ff fd04 	bl	1ca1e <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1d016:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1d018:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1d01a:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1d01c:	f7ff fca2 	bl	1c964 <att_chan_mtu_updated>
	return 0;
   1d020:	4620      	mov	r0, r4
}
   1d022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1d024:	2006      	movs	r0, #6
   1d026:	e7fc      	b.n	1d022 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1d028:	2004      	movs	r0, #4
   1d02a:	e7fa      	b.n	1d022 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1d02c:	200e      	movs	r0, #14
   1d02e:	e7f8      	b.n	1d022 <att_mtu_req+0x4c>

0001d030 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1d030:	8a0a      	ldrh	r2, [r1, #16]
   1d032:	2300      	movs	r3, #0
   1d034:	68c9      	ldr	r1, [r1, #12]
   1d036:	f7f2 bc55 	b.w	f8e4 <att_handle_rsp>

0001d03a <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1d03a:	2001      	movs	r0, #1
   1d03c:	4770      	bx	lr

0001d03e <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1d03e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1d040:	f7f1 fd68 	bl	eb14 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1d044:	b178      	cbz	r0, 1d066 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   1d046:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d048:	b16b      	cbz	r3, 1d066 <bt_att_clear_out_of_sync_sent+0x28>
   1d04a:	3bf0      	subs	r3, #240	; 0xf0
   1d04c:	f103 0298 	add.w	r2, r3, #152	; 0x98
   1d050:	e8d2 0fef 	ldaex	r0, [r2]
   1d054:	f020 0020 	bic.w	r0, r0, #32
   1d058:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d05c:	2900      	cmp	r1, #0
   1d05e:	d1f7      	bne.n	1d050 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   1d060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1d064:	e7f0      	b.n	1d048 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1d066:	bd08      	pop	{r3, pc}

0001d068 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1d068:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1d06a:	2104      	movs	r1, #4
   1d06c:	f7ff fc0a 	bl	1c884 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1d070:	b128      	cbz	r0, 1d07e <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1d072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1d076:	2105      	movs	r1, #5
   1d078:	3094      	adds	r0, #148	; 0x94
   1d07a:	f7ff bc31 	b.w	1c8e0 <atomic_test_bit>
}
   1d07e:	bd08      	pop	{r3, pc}

0001d080 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1d080:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1d082:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1d086:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   1d088:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   1d08a:	8082      	strh	r2, [r0, #4]
}
   1d08c:	4770      	bx	lr

0001d08e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1d08e:	6010      	str	r0, [r2, #0]
}
   1d090:	2000      	movs	r0, #0
   1d092:	4770      	bx	lr

0001d094 <gatt_ccc_changed>:
{
   1d094:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1d096:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1d098:	895a      	ldrh	r2, [r3, #10]
   1d09a:	428a      	cmp	r2, r1
   1d09c:	d003      	beq.n	1d0a6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1d09e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1d0a0:	68db      	ldr	r3, [r3, #12]
   1d0a2:	b103      	cbz	r3, 1d0a6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1d0a4:	4718      	bx	r3
}
   1d0a6:	4770      	bx	lr

0001d0a8 <gatt_indicate_rsp>:
{
   1d0a8:	b510      	push	{r4, lr}
   1d0aa:	9c02      	ldr	r4, [sp, #8]
   1d0ac:	460a      	mov	r2, r1
	if (params->func) {
   1d0ae:	68a3      	ldr	r3, [r4, #8]
   1d0b0:	b10b      	cbz	r3, 1d0b6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1d0b2:	4621      	mov	r1, r4
   1d0b4:	4798      	blx	r3
	params->_ref--;
   1d0b6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d0b8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1d0ba:	3b01      	subs	r3, #1
   1d0bc:	b2db      	uxtb	r3, r3
   1d0be:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d0c0:	b122      	cbz	r2, 1d0cc <gatt_indicate_rsp+0x24>
   1d0c2:	b91b      	cbnz	r3, 1d0cc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1d0c4:	4620      	mov	r0, r4
}
   1d0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1d0ca:	4710      	bx	r2
}
   1d0cc:	bd10      	pop	{r4, pc}

0001d0ce <match_uuid>:
	data->attr = attr;
   1d0ce:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1d0d0:	8091      	strh	r1, [r2, #4]
}
   1d0d2:	2000      	movs	r0, #0
   1d0d4:	4770      	bx	lr

0001d0d6 <gen_hash_m>:
{
   1d0d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d0d8:	6807      	ldr	r7, [r0, #0]
{
   1d0da:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d0dc:	783d      	ldrb	r5, [r7, #0]
{
   1d0de:	4614      	mov	r4, r2
   1d0e0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d0e2:	b9dd      	cbnz	r5, 1d11c <gen_hash_m+0x46>
	switch (u16->val) {
   1d0e4:	887b      	ldrh	r3, [r7, #2]
   1d0e6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1d0ea:	d004      	beq.n	1d0f6 <gen_hash_m+0x20>
   1d0ec:	d810      	bhi.n	1d110 <gen_hash_m+0x3a>
   1d0ee:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1d0f2:	2b03      	cmp	r3, #3
   1d0f4:	d812      	bhi.n	1d11c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1d0f6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d0fa:	2202      	movs	r2, #2
   1d0fc:	4620      	mov	r0, r4
   1d0fe:	f10d 010a 	add.w	r1, sp, #10
   1d102:	f7fe fcab 	bl	1ba5c <tc_cmac_update>
   1d106:	b968      	cbnz	r0, 1d124 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1d108:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1d10c:	65a2      	str	r2, [r4, #88]	; 0x58
   1d10e:	e006      	b.n	1d11e <gen_hash_m+0x48>
	switch (u16->val) {
   1d110:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1d114:	33ff      	adds	r3, #255	; 0xff
   1d116:	b29b      	uxth	r3, r3
   1d118:	2b04      	cmp	r3, #4
   1d11a:	d91e      	bls.n	1d15a <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1d11c:	2501      	movs	r5, #1
}
   1d11e:	4628      	mov	r0, r5
   1d120:	b009      	add	sp, #36	; 0x24
   1d122:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1d124:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d126:	2202      	movs	r2, #2
   1d128:	4620      	mov	r0, r4
   1d12a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   1d12e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d132:	f7fe fc93 	bl	1ba5c <tc_cmac_update>
   1d136:	2800      	cmp	r0, #0
   1d138:	d0e6      	beq.n	1d108 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1d13a:	2000      	movs	r0, #0
   1d13c:	9000      	str	r0, [sp, #0]
   1d13e:	aa03      	add	r2, sp, #12
   1d140:	2313      	movs	r3, #19
   1d142:	4631      	mov	r1, r6
   1d144:	6877      	ldr	r7, [r6, #4]
   1d146:	47b8      	blx	r7
		if (len < 0) {
   1d148:	1e02      	subs	r2, r0, #0
   1d14a:	dbdf      	blt.n	1d10c <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1d14c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d14e:	4620      	mov	r0, r4
   1d150:	f7fe fc84 	bl	1ba5c <tc_cmac_update>
   1d154:	2800      	cmp	r0, #0
   1d156:	d1e1      	bne.n	1d11c <gen_hash_m+0x46>
   1d158:	e7d6      	b.n	1d108 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1d15a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d15e:	2202      	movs	r2, #2
   1d160:	4620      	mov	r0, r4
   1d162:	f10d 010a 	add.w	r1, sp, #10
   1d166:	f7fe fc79 	bl	1ba5c <tc_cmac_update>
   1d16a:	2800      	cmp	r0, #0
   1d16c:	d0cc      	beq.n	1d108 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1d16e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d170:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1d172:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d176:	f10d 010a 	add.w	r1, sp, #10
   1d17a:	e7e8      	b.n	1d14e <gen_hash_m+0x78>

0001d17c <bt_addr_le_eq>:
   1d17c:	2207      	movs	r2, #7
{
   1d17e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1d180:	f002 f910 	bl	1f3a4 <memcmp>
}
   1d184:	fab0 f080 	clz	r0, r0
   1d188:	0940      	lsrs	r0, r0, #5
   1d18a:	bd08      	pop	{r3, pc}

0001d18c <bt_addr_le_copy>:
   1d18c:	680b      	ldr	r3, [r1, #0]
   1d18e:	6003      	str	r3, [r0, #0]
   1d190:	888b      	ldrh	r3, [r1, #4]
   1d192:	8083      	strh	r3, [r0, #4]
   1d194:	798b      	ldrb	r3, [r1, #6]
   1d196:	7183      	strb	r3, [r0, #6]
}
   1d198:	4770      	bx	lr

0001d19a <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1d19a:	2300      	movs	r3, #0
   1d19c:	6003      	str	r3, [r0, #0]
   1d19e:	6043      	str	r3, [r0, #4]
   1d1a0:	6083      	str	r3, [r0, #8]
}
   1d1a2:	4770      	bx	lr

0001d1a4 <sc_clear>:
{
   1d1a4:	b538      	push	{r3, r4, r5, lr}
   1d1a6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d1a8:	f100 0590 	add.w	r5, r0, #144	; 0x90
   1d1ac:	4629      	mov	r1, r5
   1d1ae:	7a00      	ldrb	r0, [r0, #8]
   1d1b0:	f7ff f850 	bl	1c254 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1d1b4:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d1b6:	7a20      	ldrb	r0, [r4, #8]
   1d1b8:	f7f2 fce4 	bl	fb84 <find_sc_cfg>
		if (cfg) {
   1d1bc:	b118      	cbz	r0, 1d1c6 <sc_clear+0x22>
}
   1d1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1d1c2:	f7ff bfea 	b.w	1d19a <clear_sc_cfg>
}
   1d1c6:	bd38      	pop	{r3, r4, r5, pc}

0001d1c8 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1d1c8:	b538      	push	{r3, r4, r5, lr}
   1d1ca:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1d1ce:	4615      	mov	r5, r2
	if (offset > value_len) {
   1d1d0:	4294      	cmp	r4, r2
   1d1d2:	d30a      	bcc.n	1d1ea <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   1d1d4:	1aa4      	subs	r4, r4, r2
   1d1d6:	428c      	cmp	r4, r1
   1d1d8:	bfa8      	it	ge
   1d1da:	460c      	movge	r4, r1
   1d1dc:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d1de:	4622      	mov	r2, r4
   1d1e0:	1959      	adds	r1, r3, r5
   1d1e2:	f002 f8ef 	bl	1f3c4 <memcpy>
}
   1d1e6:	4620      	mov	r0, r4
   1d1e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1ea:	f06f 0406 	mvn.w	r4, #6
   1d1ee:	e7fa      	b.n	1d1e6 <bt_gatt_attr_read.constprop.0+0x1e>

0001d1f0 <bt_gatt_attr_read_ccc>:
{
   1d1f0:	b530      	push	{r4, r5, lr}
   1d1f2:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   1d1f4:	68c9      	ldr	r1, [r1, #12]
{
   1d1f6:	4614      	mov	r4, r2
   1d1f8:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1d1fa:	f7f2 fcd3 	bl	fba4 <find_ccc_cfg>
	if (cfg) {
   1d1fe:	b100      	cbz	r0, 1d202 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1d200:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d202:	2302      	movs	r3, #2
   1d204:	f8ad 000e 	strh.w	r0, [sp, #14]
   1d208:	9300      	str	r3, [sp, #0]
   1d20a:	4629      	mov	r1, r5
   1d20c:	4620      	mov	r0, r4
   1d20e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1d212:	f10d 030e 	add.w	r3, sp, #14
   1d216:	f7ff ffd7 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
   1d21a:	b005      	add	sp, #20
   1d21c:	bd30      	pop	{r4, r5, pc}

0001d21e <bt_gatt_attr_read_service>:
{
   1d21e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1d220:	460c      	mov	r4, r1
   1d222:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1d224:	68e3      	ldr	r3, [r4, #12]
{
   1d226:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1d228:	781c      	ldrb	r4, [r3, #0]
{
   1d22a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1d22e:	b13c      	cbz	r4, 1d240 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1d230:	2410      	movs	r4, #16
   1d232:	3301      	adds	r3, #1
   1d234:	9406      	str	r4, [sp, #24]
}
   1d236:	b004      	add	sp, #16
   1d238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1d23c:	f7ff bfc4 	b.w	1d1c8 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d240:	885b      	ldrh	r3, [r3, #2]
   1d242:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1d246:	2302      	movs	r3, #2
   1d248:	9300      	str	r3, [sp, #0]
   1d24a:	f10d 030e 	add.w	r3, sp, #14
   1d24e:	f7ff ffbb 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
   1d252:	b004      	add	sp, #16
   1d254:	bd10      	pop	{r4, pc}

0001d256 <cf_read>:
{
   1d256:	b530      	push	{r4, r5, lr}
   1d258:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1d25a:	2300      	movs	r3, #0
{
   1d25c:	b085      	sub	sp, #20
   1d25e:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1d260:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1d264:	f7f2 fc76 	bl	fb54 <find_cf_cfg>
	if (cfg) {
   1d268:	b110      	cbz	r0, 1d270 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1d26a:	7a03      	ldrb	r3, [r0, #8]
   1d26c:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d270:	2301      	movs	r3, #1
   1d272:	4629      	mov	r1, r5
   1d274:	9300      	str	r3, [sp, #0]
   1d276:	4620      	mov	r0, r4
   1d278:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1d27c:	ab03      	add	r3, sp, #12
   1d27e:	f7ff ffa3 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
   1d282:	b005      	add	sp, #20
   1d284:	bd30      	pop	{r4, r5, pc}

0001d286 <read_name>:
{
   1d286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d28a:	4614      	mov	r4, r2
   1d28c:	461d      	mov	r5, r3
   1d28e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1d292:	f7ee ff63 	bl	c15c <bt_get_name>
   1d296:	4606      	mov	r6, r0
				 strlen(name));
   1d298:	f7e8 fac2 	bl	5820 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d29c:	b280      	uxth	r0, r0
   1d29e:	9006      	str	r0, [sp, #24]
   1d2a0:	4633      	mov	r3, r6
   1d2a2:	463a      	mov	r2, r7
   1d2a4:	4629      	mov	r1, r5
   1d2a6:	4620      	mov	r0, r4
}
   1d2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d2ac:	f7ff bf8c 	b.w	1d1c8 <bt_gatt_attr_read.constprop.0>

0001d2b0 <read_appearance>:
{
   1d2b0:	b530      	push	{r4, r5, lr}
   1d2b2:	b085      	sub	sp, #20
   1d2b4:	4614      	mov	r4, r2
   1d2b6:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1d2b8:	f7fe ffca 	bl	1c250 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d2bc:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1d2be:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d2c2:	9300      	str	r3, [sp, #0]
   1d2c4:	4629      	mov	r1, r5
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1d2cc:	f10d 030e 	add.w	r3, sp, #14
   1d2d0:	f7ff ff7a 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
   1d2d4:	b005      	add	sp, #20
   1d2d6:	bd30      	pop	{r4, r5, pc}

0001d2d8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1d2d8:	2a02      	cmp	r2, #2
{
   1d2da:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1d2dc:	d108      	bne.n	1d2f0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1d2de:	2300      	movs	r3, #0
   1d2e0:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1d2e4:	461a      	mov	r2, r3
   1d2e6:	7a00      	ldrb	r0, [r0, #8]
   1d2e8:	f7f2 fcf2 	bl	fcd0 <sc_save>
}
   1d2ec:	2002      	movs	r0, #2
   1d2ee:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1d2f0:	f7ff ff58 	bl	1d1a4 <sc_clear>
   1d2f4:	e7fa      	b.n	1d2ec <sc_ccc_cfg_write+0x14>

0001d2f6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d2f6:	2301      	movs	r3, #1
   1d2f8:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2fa:	e8d0 2fef 	ldaex	r2, [r0]
   1d2fe:	431a      	orrs	r2, r3
   1d300:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1d304:	2900      	cmp	r1, #0
   1d306:	d1f8      	bne.n	1d2fa <atomic_set_bit+0x4>
}
   1d308:	4770      	bx	lr

0001d30a <sc_restore_rsp>:
{
   1d30a:	b538      	push	{r3, r4, r5, lr}
   1d30c:	4604      	mov	r4, r0
   1d30e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1d310:	f7ff fe93 	bl	1d03a <bt_att_fixed_chan_only>
   1d314:	b150      	cbz	r0, 1d32c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1d316:	4620      	mov	r0, r4
   1d318:	f7f2 fc1c 	bl	fb54 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d31c:	b130      	cbz	r0, 1d32c <sc_restore_rsp+0x22>
   1d31e:	7a03      	ldrb	r3, [r0, #8]
   1d320:	07db      	lsls	r3, r3, #31
   1d322:	d503      	bpl.n	1d32c <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d324:	2100      	movs	r1, #0
   1d326:	300c      	adds	r0, #12
   1d328:	f7ff ffe5 	bl	1d2f6 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1d32c:	b935      	cbnz	r5, 1d33c <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d32e:	7a20      	ldrb	r0, [r4, #8]
   1d330:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1d334:	f7f2 fc26 	bl	fb84 <find_sc_cfg>
		if (sc_cfg) {
   1d338:	b100      	cbz	r0, 1d33c <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   1d33a:	6085      	str	r5, [r0, #8]
}
   1d33c:	bd38      	pop	{r3, r4, r5, pc}

0001d33e <bt_gatt_attr_read>:
{
   1d33e:	b510      	push	{r4, lr}
   1d340:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1d344:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1d348:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d34a:	428c      	cmp	r4, r1
   1d34c:	d30b      	bcc.n	1d366 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d34e:	1a64      	subs	r4, r4, r1
   1d350:	429c      	cmp	r4, r3
   1d352:	bfa8      	it	ge
   1d354:	461c      	movge	r4, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d356:	9b03      	ldr	r3, [sp, #12]
   1d358:	b2a4      	uxth	r4, r4
   1d35a:	4622      	mov	r2, r4
   1d35c:	4419      	add	r1, r3
   1d35e:	f002 f831 	bl	1f3c4 <memcpy>
}
   1d362:	4620      	mov	r0, r4
   1d364:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d366:	f06f 0406 	mvn.w	r4, #6
   1d36a:	e7fa      	b.n	1d362 <bt_gatt_attr_read+0x24>

0001d36c <bt_gatt_attr_value_handle>:
{
   1d36c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d36e:	4604      	mov	r4, r0
   1d370:	b910      	cbnz	r0, 1d378 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d372:	2000      	movs	r0, #0
}
   1d374:	b002      	add	sp, #8
   1d376:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d378:	2300      	movs	r3, #0
   1d37a:	f88d 3004 	strb.w	r3, [sp, #4]
   1d37e:	f642 0303 	movw	r3, #10243	; 0x2803
   1d382:	6800      	ldr	r0, [r0, #0]
   1d384:	a901      	add	r1, sp, #4
   1d386:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d38a:	f7fe fe4c 	bl	1c026 <bt_uuid_cmp>
   1d38e:	2800      	cmp	r0, #0
   1d390:	d1ef      	bne.n	1d372 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d392:	68e3      	ldr	r3, [r4, #12]
   1d394:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d396:	2800      	cmp	r0, #0
   1d398:	d1ec      	bne.n	1d374 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d39a:	4620      	mov	r0, r4
   1d39c:	f7f2 fde6 	bl	ff6c <bt_gatt_attr_get_handle>
   1d3a0:	3001      	adds	r0, #1
   1d3a2:	b280      	uxth	r0, r0
	return handle;
   1d3a4:	e7e6      	b.n	1d374 <bt_gatt_attr_value_handle+0x8>

0001d3a6 <bt_gatt_attr_read_chrc>:
{
   1d3a6:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d3a8:	68cc      	ldr	r4, [r1, #12]
{
   1d3aa:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   1d3ac:	79a3      	ldrb	r3, [r4, #6]
{
   1d3ae:	b088      	sub	sp, #32
   1d3b0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d3b2:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1d3b6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d3b8:	f7ff ffd8 	bl	1d36c <bt_gatt_attr_value_handle>
   1d3bc:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d3c0:	6824      	ldr	r4, [r4, #0]
   1d3c2:	7823      	ldrb	r3, [r4, #0]
   1d3c4:	b96b      	cbnz	r3, 1d3e2 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d3c6:	8863      	ldrh	r3, [r4, #2]
   1d3c8:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1d3cc:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d3ce:	9300      	str	r3, [sp, #0]
   1d3d0:	4631      	mov	r1, r6
   1d3d2:	4628      	mov	r0, r5
   1d3d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1d3d8:	ab03      	add	r3, sp, #12
   1d3da:	f7ff fef5 	bl	1d1c8 <bt_gatt_attr_read.constprop.0>
}
   1d3de:	b008      	add	sp, #32
   1d3e0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d3e2:	1c63      	adds	r3, r4, #1
   1d3e4:	f10d 020f 	add.w	r2, sp, #15
   1d3e8:	3411      	adds	r4, #17
   1d3ea:	f853 1b04 	ldr.w	r1, [r3], #4
   1d3ee:	42a3      	cmp	r3, r4
   1d3f0:	f842 1b04 	str.w	r1, [r2], #4
   1d3f4:	d1f9      	bne.n	1d3ea <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1d3f6:	2313      	movs	r3, #19
   1d3f8:	e7e9      	b.n	1d3ce <bt_gatt_attr_read_chrc+0x28>

0001d3fa <bt_gatt_foreach_attr>:
{
   1d3fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d3fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d400:	2300      	movs	r3, #0
   1d402:	461a      	mov	r2, r3
   1d404:	9300      	str	r3, [sp, #0]
   1d406:	f7f2 fdf1 	bl	ffec <bt_gatt_foreach_attr_type>
}
   1d40a:	b005      	add	sp, #20
   1d40c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d410 <db_hash_process>:
	db_hash_gen(true);
   1d410:	f7f2 be54 	b.w	100bc <db_hash_gen.constprop.0>

0001d414 <bt_gatt_check_perm>:
{
   1d414:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1d416:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d418:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d41a:	d504      	bpl.n	1d426 <bt_gatt_check_perm+0x12>
   1d41c:	f013 0f95 	tst.w	r3, #149	; 0x95
   1d420:	d01d      	beq.n	1d45e <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d422:	684c      	ldr	r4, [r1, #4]
   1d424:	b1dc      	cbz	r4, 1d45e <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d426:	0794      	lsls	r4, r2, #30
   1d428:	d504      	bpl.n	1d434 <bt_gatt_check_perm+0x20>
   1d42a:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1d42e:	d018      	beq.n	1d462 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d430:	6889      	ldr	r1, [r1, #8]
   1d432:	b1b1      	cbz	r1, 1d462 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1d434:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1d438:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1d43c:	d001      	beq.n	1d442 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1d43e:	2005      	movs	r0, #5
}
   1d440:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d442:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d446:	d105      	bne.n	1d454 <bt_gatt_check_perm+0x40>
	return 0;
   1d448:	f014 0f0c 	tst.w	r4, #12
   1d44c:	bf14      	ite	ne
   1d44e:	200f      	movne	r0, #15
   1d450:	2000      	moveq	r0, #0
   1d452:	e7f5      	b.n	1d440 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d454:	f7ff f963 	bl	1c71e <bt_conn_get_security>
   1d458:	2802      	cmp	r0, #2
   1d45a:	d8f5      	bhi.n	1d448 <bt_gatt_check_perm+0x34>
   1d45c:	e7ef      	b.n	1d43e <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d45e:	2002      	movs	r0, #2
   1d460:	e7ee      	b.n	1d440 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d462:	2003      	movs	r0, #3
   1d464:	e7ec      	b.n	1d440 <bt_gatt_check_perm+0x2c>

0001d466 <bt_gatt_change_aware>:
{
   1d466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d468:	4606      	mov	r6, r0
   1d46a:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1d46c:	f7f2 fb72 	bl	fb54 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d470:	b1e0      	cbz	r0, 1d4ac <bt_gatt_change_aware+0x46>
   1d472:	7a03      	ldrb	r3, [r0, #8]
   1d474:	07db      	lsls	r3, r3, #31
   1d476:	d519      	bpl.n	1d4ac <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d478:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d47c:	e8d4 5faf 	lda	r5, [r4]
   1d480:	f015 0501 	ands.w	r5, r5, #1
   1d484:	d112      	bne.n	1d4ac <bt_gatt_change_aware+0x46>
	if (!req) {
   1d486:	b197      	cbz	r7, 1d4ae <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d488:	e8d4 1fef 	ldaex	r1, [r4]
   1d48c:	f021 0302 	bic.w	r3, r1, #2
   1d490:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d494:	2a00      	cmp	r2, #0
   1d496:	d1f7      	bne.n	1d488 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d498:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1d49c:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1d49e:	d008      	beq.n	1d4b2 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   1d4a0:	f7ff fdcd 	bl	1d03e <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d4a4:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d4a6:	4620      	mov	r0, r4
   1d4a8:	f7ff ff25 	bl	1d2f6 <atomic_set_bit>
		return true;
   1d4ac:	2501      	movs	r5, #1
}
   1d4ae:	4628      	mov	r0, r5
   1d4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1d4b2:	f7ff fdc2 	bl	1d03a <bt_att_fixed_chan_only>
   1d4b6:	2800      	cmp	r0, #0
   1d4b8:	d0f9      	beq.n	1d4ae <bt_gatt_change_aware+0x48>
   1d4ba:	4630      	mov	r0, r6
   1d4bc:	f7ff fdd4 	bl	1d068 <bt_att_out_of_sync_sent_on_fixed>
   1d4c0:	2800      	cmp	r0, #0
   1d4c2:	d0f4      	beq.n	1d4ae <bt_gatt_change_aware+0x48>
   1d4c4:	e8d4 3fef 	ldaex	r3, [r4]
   1d4c8:	f023 0302 	bic.w	r3, r3, #2
   1d4cc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d4d0:	2a00      	cmp	r2, #0
   1d4d2:	d1f7      	bne.n	1d4c4 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   1d4d4:	4630      	mov	r0, r6
   1d4d6:	f7ff fdb2 	bl	1d03e <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d4da:	4639      	mov	r1, r7
   1d4dc:	e7e3      	b.n	1d4a6 <bt_gatt_change_aware+0x40>

0001d4de <bt_smp_recv>:
{
   1d4de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d4e0:	2100      	movs	r1, #0
   1d4e2:	f04f 32ff 	mov.w	r2, #4294967295
   1d4e6:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d4ea:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d4ec:	4608      	mov	r0, r1
   1d4ee:	f7ff f98f 	bl	1c810 <bt_l2cap_create_pdu_timeout>
   1d4f2:	f100 060c 	add.w	r6, r0, #12
   1d4f6:	4604      	mov	r4, r0
   1d4f8:	2101      	movs	r1, #1
   1d4fa:	4630      	mov	r0, r6
   1d4fc:	f7f3 fd86 	bl	1100c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d500:	2505      	movs	r5, #5
   1d502:	2101      	movs	r1, #1
   1d504:	7005      	strb	r5, [r0, #0]
   1d506:	4630      	mov	r0, r6
   1d508:	f7f3 fd80 	bl	1100c <net_buf_simple_add>
   1d50c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d50e:	7005      	strb	r5, [r0, #0]
   1d510:	4622      	mov	r2, r4
   1d512:	2106      	movs	r1, #6
   1d514:	4638      	mov	r0, r7
   1d516:	9300      	str	r3, [sp, #0]
   1d518:	f7ff f97d 	bl	1c816 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1d51c:	b110      	cbz	r0, 1d524 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1d51e:	4620      	mov	r0, r4
   1d520:	f7f3 fc6e 	bl	10e00 <net_buf_unref>
}
   1d524:	2000      	movs	r0, #0
   1d526:	b003      	add	sp, #12
   1d528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d52a <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1d52a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d52e:	4770      	bx	lr

0001d530 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d530:	2000      	movs	r0, #0
   1d532:	4770      	bx	lr

0001d534 <fixed_data_unref>:
}
   1d534:	4770      	bx	lr

0001d536 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d536:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d538:	6849      	ldr	r1, [r1, #4]
   1d53a:	6809      	ldr	r1, [r1, #0]
   1d53c:	f7f3 bab0 	b.w	10aa0 <net_buf_alloc_len>

0001d540 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1d540:	f7f9 b9fa 	b.w	16938 <z_impl_k_queue_get>

0001d544 <net_buf_simple_push_u8>:
{
   1d544:	b510      	push	{r4, lr}
   1d546:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d548:	2101      	movs	r1, #1
   1d54a:	f7f3 fd0f 	bl	10f6c <net_buf_simple_push>
	*data = val;
   1d54e:	7004      	strb	r4, [r0, #0]
}
   1d550:	bd10      	pop	{r4, pc}

0001d552 <net_buf_simple_pull_u8>:
{
   1d552:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d554:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d556:	2101      	movs	r1, #1
	val = buf->data[0];
   1d558:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d55a:	f7f3 fd23 	bl	10fa4 <net_buf_simple_pull>
}
   1d55e:	4620      	mov	r0, r4
   1d560:	bd10      	pop	{r4, pc}

0001d562 <net_buf_simple_pull_le16>:
{
   1d562:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d564:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d566:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d568:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d56a:	f7f3 fd1b 	bl	10fa4 <net_buf_simple_pull>
}
   1d56e:	4620      	mov	r0, r4
   1d570:	bd10      	pop	{r4, pc}

0001d572 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d572:	6802      	ldr	r2, [r0, #0]
   1d574:	6880      	ldr	r0, [r0, #8]
}
   1d576:	1a10      	subs	r0, r2, r0
   1d578:	4770      	bx	lr

0001d57a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d57a:	8883      	ldrh	r3, [r0, #4]
   1d57c:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1d57e:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d580:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d582:	6803      	ldr	r3, [r0, #0]
   1d584:	1a5b      	subs	r3, r3, r1
}
   1d586:	1ad0      	subs	r0, r2, r3
   1d588:	4770      	bx	lr

0001d58a <net_buf_simple_add_mem>:
{
   1d58a:	b538      	push	{r3, r4, r5, lr}
   1d58c:	460d      	mov	r5, r1
   1d58e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d590:	4611      	mov	r1, r2
   1d592:	f7f3 fd3b 	bl	1100c <net_buf_simple_add>
   1d596:	4622      	mov	r2, r4
   1d598:	4629      	mov	r1, r5
}
   1d59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d59e:	f001 bf11 	b.w	1f3c4 <memcpy>

0001d5a2 <net_buf_simple_add_u8>:
{
   1d5a2:	b510      	push	{r4, lr}
   1d5a4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d5a6:	2101      	movs	r1, #1
   1d5a8:	f7f3 fd30 	bl	1100c <net_buf_simple_add>
	*u8 = val;
   1d5ac:	7004      	strb	r4, [r0, #0]
}
   1d5ae:	bd10      	pop	{r4, pc}

0001d5b0 <net_buf_simple_add_le16>:
{
   1d5b0:	b510      	push	{r4, lr}
   1d5b2:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d5b4:	2102      	movs	r1, #2
   1d5b6:	f7f3 fd29 	bl	1100c <net_buf_simple_add>
	dst[0] = val;
   1d5ba:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d5bc:	0a24      	lsrs	r4, r4, #8
   1d5be:	7044      	strb	r4, [r0, #1]
}
   1d5c0:	bd10      	pop	{r4, pc}

0001d5c2 <set_on_state>:
	__asm__ volatile(
   1d5c2:	f04f 0320 	mov.w	r3, #32
   1d5c6:	f3ef 8211 	mrs	r2, BASEPRI
   1d5ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5ce:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d5d2:	6803      	ldr	r3, [r0, #0]
   1d5d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d5d8:	f043 0302 	orr.w	r3, r3, #2
   1d5dc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d5de:	f382 8811 	msr	BASEPRI, r2
   1d5e2:	f3bf 8f6f 	isb	sy
}
   1d5e6:	4770      	bx	lr

0001d5e8 <async_start>:
{
   1d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5ea:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1d5ec:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1d5ee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1d5f0:	f04f 0520 	mov.w	r5, #32
   1d5f4:	f3ef 8611 	mrs	r6, BASEPRI
   1d5f8:	f385 8812 	msr	BASEPRI_MAX, r5
   1d5fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d600:	250c      	movs	r5, #12
   1d602:	4369      	muls	r1, r5
   1d604:	440c      	add	r4, r1
   1d606:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d60a:	f005 0c07 	and.w	ip, r5, #7
   1d60e:	f1bc 0f01 	cmp.w	ip, #1
   1d612:	d10c      	bne.n	1d62e <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d614:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   1d618:	f386 8811 	msr	BASEPRI, r6
   1d61c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1d620:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1d624:	6843      	ldr	r3, [r0, #4]
   1d626:	585b      	ldr	r3, [r3, r1]
   1d628:	4798      	blx	r3
	return 0;
   1d62a:	2000      	movs	r0, #0
}
   1d62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d62e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d632:	42af      	cmp	r7, r5
   1d634:	f386 8811 	msr	BASEPRI, r6
   1d638:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1d63c:	bf0c      	ite	eq
   1d63e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1d642:	f04f 30ff 	movne.w	r0, #4294967295
   1d646:	e7f1      	b.n	1d62c <async_start+0x44>

0001d648 <api_start>:
{
   1d648:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1d64a:	2480      	movs	r4, #128	; 0x80
   1d64c:	9400      	str	r4, [sp, #0]
   1d64e:	f7ff ffcb 	bl	1d5e8 <async_start>
}
   1d652:	b002      	add	sp, #8
   1d654:	bd10      	pop	{r4, pc}

0001d656 <onoff_started_callback>:
	return &data->mgr[type];
   1d656:	6900      	ldr	r0, [r0, #16]
   1d658:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d65a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1d65e:	2100      	movs	r1, #0
   1d660:	4710      	bx	r2

0001d662 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d662:	2003      	movs	r0, #3
   1d664:	f7f5 bfc8 	b.w	135f8 <nrfx_clock_start>

0001d668 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d668:	2002      	movs	r0, #2
   1d66a:	f7f5 bfc5 	b.w	135f8 <nrfx_clock_start>

0001d66e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d66e:	2000      	movs	r0, #0
   1d670:	f7f5 bfc2 	b.w	135f8 <nrfx_clock_start>

0001d674 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1d674:	2003      	movs	r0, #3
   1d676:	f7f6 b837 	b.w	136e8 <nrfx_clock_stop>

0001d67a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1d67a:	2002      	movs	r0, #2
   1d67c:	f7f6 b834 	b.w	136e8 <nrfx_clock_stop>

0001d680 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d680:	2000      	movs	r0, #0
   1d682:	f7f6 b831 	b.w	136e8 <nrfx_clock_stop>

0001d686 <blocking_start_callback>:
{
   1d686:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d688:	f7f9 b9ae 	b.w	169e8 <z_impl_k_sem_give>

0001d68c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1d68c:	2280      	movs	r2, #128	; 0x80
   1d68e:	f7f3 bd25 	b.w	110dc <stop>

0001d692 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d692:	6843      	ldr	r3, [r0, #4]
}
   1d694:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d696:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d698:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d69a:	600b      	str	r3, [r1, #0]
}
   1d69c:	4770      	bx	lr

0001d69e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d69e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   1d6a0:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6a4:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   1d6a6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1d6aa:	6098      	str	r0, [r3, #8]
}
   1d6ac:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d6ae:	60d9      	str	r1, [r3, #12]
   1d6b0:	4770      	bx	lr

0001d6b2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6b2:	6843      	ldr	r3, [r0, #4]
}
   1d6b4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6b6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d6b8:	6099      	str	r1, [r3, #8]
}
   1d6ba:	4770      	bx	lr

0001d6bc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6bc:	6843      	ldr	r3, [r0, #4]
}
   1d6be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d6c2:	60d9      	str	r1, [r3, #12]
}
   1d6c4:	4770      	bx	lr

0001d6c6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d6c6:	6843      	ldr	r3, [r0, #4]
   1d6c8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d6ca:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1d6cc:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1d6d0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1d6d2:	6090      	str	r0, [r2, #8]
}
   1d6d4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d6d6:	60d3      	str	r3, [r2, #12]
   1d6d8:	4770      	bx	lr

0001d6da <uarte_nrfx_config_get>:
{
   1d6da:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   1d6dc:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   1d6de:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d6e2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d6e6:	2000      	movs	r0, #0
   1d6e8:	4770      	bx	lr

0001d6ea <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d6ea:	6843      	ldr	r3, [r0, #4]
   1d6ec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d6ee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d6f2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d6f6:	4770      	bx	lr

0001d6f8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d6f8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1d6fa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1d6fc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6fe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d702:	b150      	cbz	r0, 1d71a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d704:	2000      	movs	r0, #0
	*c = *data->rx_data;
   1d706:	6952      	ldr	r2, [r2, #20]
   1d708:	7812      	ldrb	r2, [r2, #0]
   1d70a:	700a      	strb	r2, [r1, #0]
   1d70c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d710:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d714:	2201      	movs	r2, #1
   1d716:	601a      	str	r2, [r3, #0]
	return 0;
   1d718:	4770      	bx	lr
		return -1;
   1d71a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d71e:	4770      	bx	lr

0001d720 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d720:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d722:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d724:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d728:	b940      	cbnz	r0, 1d73c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d72a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d72c:	079b      	lsls	r3, r3, #30
   1d72e:	d406      	bmi.n	1d73e <is_tx_ready.isra.0+0x1e>
   1d730:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d734:	3800      	subs	r0, #0
   1d736:	bf18      	it	ne
   1d738:	2001      	movne	r0, #1
   1d73a:	4770      	bx	lr
   1d73c:	2001      	movs	r0, #1
}
   1d73e:	4770      	bx	lr

0001d740 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1d740:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1d742:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d744:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d748:	05c9      	lsls	r1, r1, #23
   1d74a:	d518      	bpl.n	1d77e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d74c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d750:	b1a9      	cbz	r1, 1d77e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1d752:	f04f 0020 	mov.w	r0, #32
   1d756:	f3ef 8111 	mrs	r1, BASEPRI
   1d75a:	f380 8812 	msr	BASEPRI_MAX, r0
   1d75e:	f3bf 8f6f 	isb	sy
   1d762:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d766:	b130      	cbz	r0, 1d776 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d768:	2000      	movs	r0, #0
   1d76a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1d76e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d772:	2001      	movs	r0, #1
   1d774:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1d776:	f381 8811 	msr	BASEPRI, r1
   1d77a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d77e:	6852      	ldr	r2, [r2, #4]
   1d780:	06d2      	lsls	r2, r2, #27
   1d782:	d515      	bpl.n	1d7b0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1d784:	f04f 0120 	mov.w	r1, #32
   1d788:	f3ef 8211 	mrs	r2, BASEPRI
   1d78c:	f381 8812 	msr	BASEPRI_MAX, r1
   1d790:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d794:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d798:	b111      	cbz	r1, 1d7a0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d79a:	2100      	movs	r1, #0
   1d79c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1d7a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d7a4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1d7a8:	f382 8811 	msr	BASEPRI, r2
   1d7ac:	f3bf 8f6f 	isb	sy
}
   1d7b0:	4770      	bx	lr

0001d7b2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d7b2:	4770      	bx	lr

0001d7b4 <sys_clock_cycle_get_32>:
{
   1d7b4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1d7b6:	f7f4 fcb9 	bl	1212c <z_nrf_rtc_timer_read>
}
   1d7ba:	bd08      	pop	{r3, pc}

0001d7bc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1d7bc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1d7be:	6843      	ldr	r3, [r0, #4]
   1d7c0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1d7c2:	7a05      	ldrb	r5, [r0, #8]
   1d7c4:	6844      	ldr	r4, [r0, #4]
   1d7c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1d7ca:	42a3      	cmp	r3, r4
   1d7cc:	d302      	bcc.n	1d7d4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1d7ce:	f06f 0001 	mvn.w	r0, #1
}
   1d7d2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1d7d4:	795c      	ldrb	r4, [r3, #5]
   1d7d6:	428c      	cmp	r4, r1
   1d7d8:	d001      	beq.n	1d7de <pinctrl_lookup_state+0x22>
		(*state)++;
   1d7da:	3308      	adds	r3, #8
   1d7dc:	e7f0      	b.n	1d7c0 <pinctrl_lookup_state+0x4>
			return 0;
   1d7de:	2000      	movs	r0, #0
   1d7e0:	e7f7      	b.n	1d7d2 <pinctrl_lookup_state+0x16>

0001d7e2 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1d7e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7e6:	4615      	mov	r5, r2
   1d7e8:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d7ea:	f04f 0901 	mov.w	r9, #1
   1d7ee:	b085      	sub	sp, #20
   1d7f0:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d7f4:	45d0      	cmp	r8, sl
   1d7f6:	d103      	bne.n	1d800 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1d7f8:	2000      	movs	r0, #0
}
   1d7fa:	b005      	add	sp, #20
   1d7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d800:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1d804:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d808:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   1d80c:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1d80e:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1d812:	bf08      	it	eq
   1d814:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1d818:	2b22      	cmp	r3, #34	; 0x22
   1d81a:	f200 8091 	bhi.w	1d940 <pinctrl_configure_pins+0x15e>
   1d81e:	e8df f003 	tbb	[pc, r3]
   1d822:	1e12      	.short	0x1e12
   1d824:	34263823 	.word	0x34263823
   1d828:	8f8f8f38 	.word	0x8f8f8f38
   1d82c:	8f653b8f 	.word	0x8f653b8f
   1d830:	8f8f8f8f 	.word	0x8f8f8f8f
   1d834:	8f8f8f8f 	.word	0x8f8f8f8f
   1d838:	77747168 	.word	0x77747168
   1d83c:	7a8f8f8f 	.word	0x7a8f8f8f
   1d840:	89868380 	.word	0x89868380
   1d844:	8c          	.byte	0x8c
   1d845:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1d846:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d84a:	a803      	add	r0, sp, #12
   1d84c:	9403      	str	r4, [sp, #12]
   1d84e:	f7f4 fe01 	bl	12454 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d852:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   1d854:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d856:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   1d85a:	6083      	str	r3, [r0, #8]
   1d85c:	e002      	b.n	1d864 <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   1d85e:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d862:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   1d864:	46b3      	mov	fp, r6
   1d866:	e01e      	b.n	1d8a6 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   1d868:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   1d86c:	e7ed      	b.n	1d84a <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d86e:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1d870:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d874:	a803      	add	r0, sp, #12
   1d876:	9403      	str	r4, [sp, #12]
   1d878:	f7f4 fdec 	bl	12454 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1d87c:	9b03      	ldr	r3, [sp, #12]
   1d87e:	f04f 0b01 	mov.w	fp, #1
   1d882:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   1d886:	60c3      	str	r3, [r0, #12]
   1d888:	e00d      	b.n	1d8a6 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1d88a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1d88e:	2601      	movs	r6, #1
   1d890:	e7f0      	b.n	1d874 <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1d892:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   1d896:	e7e4      	b.n	1d862 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1d898:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1d89c:	2f00      	cmp	r7, #0
   1d89e:	d1e0      	bne.n	1d862 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1d8a0:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   1d8a2:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1d8a4:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1d8a6:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d8aa:	a803      	add	r0, sp, #12
   1d8ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d8b0:	2a00      	cmp	r2, #0
   1d8b2:	bf1c      	itt	ne
   1d8b4:	2601      	movne	r6, #1
   1d8b6:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1d8ba:	9301      	str	r3, [sp, #4]
   1d8bc:	9403      	str	r4, [sp, #12]
   1d8be:	f7f4 fdc9 	bl	12454 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d8c2:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d8c4:	9b01      	ldr	r3, [sp, #4]
   1d8c6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d8ca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d8ce:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1d8d2:	023b      	lsls	r3, r7, #8
   1d8d4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   1d8d8:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d8dc:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   1d8e0:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d8e2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1d8e6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d8ea:	e783      	b.n	1d7f4 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1d8ec:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1d8f0:	e7d4      	b.n	1d89c <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1d8f2:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1d8f6:	f8da 3000 	ldr.w	r3, [sl]
   1d8fa:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   1d8fe:	2b00      	cmp	r3, #0
   1d900:	d0c5      	beq.n	1d88e <pinctrl_configure_pins+0xac>
   1d902:	e7a2      	b.n	1d84a <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1d904:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1d908:	e7f5      	b.n	1d8f6 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1d90a:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1d90e:	e7f2      	b.n	1d8f6 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1d910:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   1d914:	e7ef      	b.n	1d8f6 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1d916:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d91a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1d91c:	f04f 0b00 	mov.w	fp, #0
   1d920:	e7c1      	b.n	1d8a6 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1d922:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   1d926:	e790      	b.n	1d84a <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1d928:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   1d92c:	e7f5      	b.n	1d91a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1d92e:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   1d932:	e7f2      	b.n	1d91a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1d934:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   1d938:	e7ef      	b.n	1d91a <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1d93a:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1d93e:	e7ec      	b.n	1d91a <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   1d940:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d944:	e759      	b.n	1d7fa <pinctrl_configure_pins+0x18>

0001d946 <mbox_nrf_register_callback>:
{
   1d946:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1d948:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1d94a:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   1d94c:	bf9f      	itttt	ls
   1d94e:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   1d952:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1d956:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1d958:	2000      	movls	r0, #0
		return -EINVAL;
   1d95a:	bf88      	it	hi
   1d95c:	f06f 0015 	mvnhi.w	r0, #21
}
   1d960:	bd10      	pop	{r4, pc}

0001d962 <mbox_nrf_mtu_get>:
}
   1d962:	2000      	movs	r0, #0
   1d964:	4770      	bx	lr

0001d966 <mbox_nrf_max_channels_get>:
}
   1d966:	2010      	movs	r0, #16
   1d968:	4770      	bx	lr

0001d96a <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d96a:	2101      	movs	r1, #1
   1d96c:	f7f4 bf62 	b.w	12834 <dk_set_led>

0001d970 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d970:	2100      	movs	r1, #0
   1d972:	f7f4 bf5f 	b.w	12834 <dk_set_led>

0001d976 <nrf_rpc_os_msg_set>:
{
   1d976:	b570      	push	{r4, r5, r6, lr}
   1d978:	4604      	mov	r4, r0
   1d97a:	460e      	mov	r6, r1
   1d97c:	4615      	mov	r5, r2
	k_sched_lock();
   1d97e:	f7f9 ff7b 	bl	17878 <k_sched_lock>
	msg->len = len;
   1d982:	e9c4 6506 	strd	r6, r5, [r4, #24]
   1d986:	4620      	mov	r0, r4
   1d988:	f7f9 f82e 	bl	169e8 <z_impl_k_sem_give>
}
   1d98c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   1d990:	f7f9 bfbe 	b.w	17910 <k_sched_unlock>

0001d994 <nrf_rpc_os_msg_get>:
{
   1d994:	b570      	push	{r4, r5, r6, lr}
   1d996:	4604      	mov	r4, r0
   1d998:	460e      	mov	r6, r1
   1d99a:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
   1d99c:	f04f 33ff 	mov.w	r3, #4294967295
   1d9a0:	f04f 32ff 	mov.w	r2, #4294967295
   1d9a4:	f7f9 f85c 	bl	16a60 <z_impl_k_sem_take>
	k_sched_lock();
   1d9a8:	f7f9 ff66 	bl	17878 <k_sched_lock>
	*data = msg->data;
   1d9ac:	69a3      	ldr	r3, [r4, #24]
   1d9ae:	6033      	str	r3, [r6, #0]
	*len = msg->len;
   1d9b0:	69e3      	ldr	r3, [r4, #28]
   1d9b2:	602b      	str	r3, [r5, #0]
}
   1d9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   1d9b8:	f7f9 bfaa 	b.w	17910 <k_sched_unlock>

0001d9bc <translate_error>:
	switch (ll_err) {
   1d9bc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1d9c0:	d021      	beq.n	1da06 <translate_error+0x4a>
   1d9c2:	f110 0f77 	cmn.w	r0, #119	; 0x77
   1d9c6:	da0f      	bge.n	1d9e8 <translate_error+0x2c>
   1d9c8:	f200 73d7 	addw	r3, r0, #2007	; 0x7d7
   1d9cc:	2b06      	cmp	r3, #6
   1d9ce:	d820      	bhi.n	1da12 <translate_error+0x56>
   1d9d0:	f200 70d5 	addw	r0, r0, #2005	; 0x7d5
   1d9d4:	2804      	cmp	r0, #4
   1d9d6:	d81c      	bhi.n	1da12 <translate_error+0x56>
   1d9d8:	e8df f000 	tbb	[pc, r0]
   1d9dc:	18031b18 	.word	0x18031b18
   1d9e0:	18          	.byte	0x18
   1d9e1:	00          	.byte	0x00
		return -NRF_EINVAL;
   1d9e2:	f06f 0015 	mvn.w	r0, #21
   1d9e6:	4770      	bx	lr
	switch (ll_err) {
   1d9e8:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   1d9ec:	d013      	beq.n	1da16 <translate_error+0x5a>
   1d9ee:	db10      	blt.n	1da12 <translate_error+0x56>
   1d9f0:	f110 0f16 	cmn.w	r0, #22
   1d9f4:	d00f      	beq.n	1da16 <translate_error+0x5a>
   1d9f6:	1d43      	adds	r3, r0, #5
   1d9f8:	d00d      	beq.n	1da16 <translate_error+0x5a>
		return -NRF_EIO;
   1d9fa:	2800      	cmp	r0, #0
   1d9fc:	bfac      	ite	ge
   1d9fe:	2000      	movge	r0, #0
   1da00:	f06f 0004 	mvnlt.w	r0, #4
   1da04:	4770      	bx	lr
	switch (ll_err) {
   1da06:	f06f 0071 	mvn.w	r0, #113	; 0x71
   1da0a:	4770      	bx	lr
		return -NRF_ENOMEM;
   1da0c:	f06f 000b 	mvn.w	r0, #11
   1da10:	4770      	bx	lr
		return -NRF_EIO;
   1da12:	f06f 0004 	mvn.w	r0, #4
}
   1da16:	4770      	bx	lr

0001da18 <ept_bound>:
	k_event_set(&ipc_config->endpoint.ept_bond, 0x01);
   1da18:	6840      	ldr	r0, [r0, #4]
   1da1a:	3024      	adds	r0, #36	; 0x24
	z_impl_k_event_set(event, events);
   1da1c:	2101      	movs	r1, #1
   1da1e:	f001 bc88 	b.w	1f332 <z_impl_k_event_set>

0001da22 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1da22:	f7fc bfa9 	b.w	1a978 <nrf_cc3xx_platform_init_no_rng>

0001da26 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1da26:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1da28:	f7eb fe1c 	bl	9664 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1da2c:	f7eb ff02 	bl	9834 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1da30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1da34:	f7fc bfa0 	b.w	1a978 <nrf_cc3xx_platform_init_no_rng>

0001da38 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
   1da38:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   1da3a:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   1da3e:	2401      	movs	r4, #1
  outIndex = 0U;
   1da40:	2500      	movs	r5, #0
  while (blkCnt > 0U)
   1da42:	42a1      	cmp	r1, r4
   1da44:	d103      	bne.n	1da4e <arm_max_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
   1da46:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   1da4a:	601d      	str	r5, [r3, #0]
}
   1da4c:	bd30      	pop	{r4, r5, pc}
    maxVal = *pSrc++;
   1da4e:	ecb0 7a01 	vldmia	r0!, {s14}
      out = maxVal;
   1da52:	eef4 7ac7 	vcmpe.f32	s15, s14
   1da56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1da5a:	bf48      	it	mi
   1da5c:	4625      	movmi	r5, r4
   1da5e:	bf48      	it	mi
   1da60:	eef0 7a47 	vmovmi.f32	s15, s14
    blkCnt--;
   1da64:	3401      	adds	r4, #1
   1da66:	e7ec      	b.n	1da42 <arm_max_f32+0xa>

0001da68 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
   1da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   1da6c:	2300      	movs	r3, #0
{
   1da6e:	4688      	mov	r8, r1
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
   1da70:	f102 0c02 	add.w	ip, r2, #2
  for (i = 0; i < bitRevLen; )
   1da74:	4598      	cmp	r8, r3
   1da76:	d801      	bhi.n	1da7c <arm_bitreversal_32+0x14>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
   1da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a = pBitRevTab[i    ] >> 2;
   1da7c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   1da80:	f83c 4013 	ldrh.w	r4, [ip, r3, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   1da84:	08ad      	lsrs	r5, r5, #2
     b = pBitRevTab[i + 1] >> 2;
   1da86:	08a4      	lsrs	r4, r4, #2
     tmp = pSrc[a];
   1da88:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
     pSrc[a] = pSrc[b];
   1da8c:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
     tmp = pSrc[a];
   1da90:	00af      	lsls	r7, r5, #2
     pSrc[a] = pSrc[b];
   1da92:	00a6      	lsls	r6, r4, #2
   1da94:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
     pSrc[b] = tmp;
   1da98:	f840 e024 	str.w	lr, [r0, r4, lsl #2]
     tmp = pSrc[a+1];
   1da9c:	1d3d      	adds	r5, r7, #4
     pSrc[a+1] = pSrc[b+1];
   1da9e:	1d34      	adds	r4, r6, #4
     tmp = pSrc[a+1];
   1daa0:	5947      	ldr	r7, [r0, r5]
     pSrc[a+1] = pSrc[b+1];
   1daa2:	5906      	ldr	r6, [r0, r4]
    i += 2;
   1daa4:	3302      	adds	r3, #2
     pSrc[a+1] = pSrc[b+1];
   1daa6:	5146      	str	r6, [r0, r5]
     pSrc[b+1] = tmp;
   1daa8:	5107      	str	r7, [r0, r4]
    i += 2;
   1daaa:	e7e3      	b.n	1da74 <arm_bitreversal_32+0xc>

0001daac <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   1daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dab0:	4680      	mov	r8, r0
   1dab2:	ed2d 8b02 	vpush	{d8}
   1dab6:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
   1dab8:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
   1dabc:	4605      	mov	r5, r0
   1dabe:	eb01 0987 	add.w	r9, r1, r7, lsl #2
  const float32_t * tw = (float32_t *) S->pTwiddle;
   1dac2:	464b      	mov	r3, r9
   1dac4:	f8d8 6004 	ldr.w	r6, [r8, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   1dac8:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   1daca:	08ff      	lsrs	r7, r7, #3
  pMid1 = p1 + L;
   1dacc:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  pMid2 = p2 + L;
   1dad0:	eb09 0281 	add.w	r2, r9, r1, lsl #2
   1dad4:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  for (l = L >> 2; l > 0; l-- )
   1dad8:	42be      	cmp	r6, r7
   1dada:	f105 0510 	add.w	r5, r5, #16
   1dade:	f104 0410 	add.w	r4, r4, #16
   1dae2:	f102 0210 	add.w	r2, r2, #16
   1dae6:	f103 0310 	add.w	r3, r3, #16
   1daea:	d111      	bne.n	1db10 <arm_cfft_radix8by2_f32+0x64>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   1daec:	b28c      	uxth	r4, r1
   1daee:	4621      	mov	r1, r4
   1daf0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1daf4:	2302      	movs	r3, #2
   1daf6:	f7f5 f8e1 	bl	12cbc <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
}
   1dafa:	ecbd 8b02 	vpop	{d8}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   1dafe:	4621      	mov	r1, r4
   1db00:	4648      	mov	r0, r9
   1db02:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1db06:	2302      	movs	r3, #2
}
   1db08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   1db0c:	f7f5 b8d6 	b.w	12cbc <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
   1db10:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
   1db14:	ed15 6a04 	vldr	s12, [r5, #-16]
    t2[1] = p2[1];
   1db18:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
   1db1c:	ed15 4a03 	vldr	s8, [r5, #-12]
    *p1++ = t1[0] + t2[0];
   1db20:	ee36 8a00 	vadd.f32	s16, s12, s0
    t2[3] = p2[3];
   1db24:	ed53 1a01 	vldr	s3, [r3, #-4]
    t4[0] = pMid2[0];
   1db28:	ed52 6a04 	vldr	s13, [r2, #-16]
    t4[1] = pMid2[1];
   1db2c:	ed52 4a03 	vldr	s9, [r2, #-12]
    t2[2] = p2[2];
   1db30:	ed13 1a02 	vldr	s2, [r3, #-8]
    t3[1] = pMid1[1];
   1db34:	ed54 2a03 	vldr	s5, [r4, #-12]
    t3[2] = pMid1[2];
   1db38:	ed14 3a02 	vldr	s6, [r4, #-8]
    t3[3] = pMid1[3];
   1db3c:	ed54 3a01 	vldr	s7, [r4, #-4]
    t4[2] = pMid2[2];
   1db40:	ed52 7a02 	vldr	s15, [r2, #-8]
    t4[3] = pMid2[3];
   1db44:	ed52 5a01 	vldr	s11, [r2, #-4]
    t1[2] = p1[2];
   1db48:	ed15 7a02 	vldr	s14, [r5, #-8]
    t3[0] = pMid1[0];
   1db4c:	ed14 2a04 	vldr	s4, [r4, #-16]
    *p1++ = t1[0] + t2[0];
   1db50:	ed05 8a04 	vstr	s16, [r5, #-16]
    *p1++ = t1[1] + t2[1];
   1db54:	ee34 8a20 	vadd.f32	s16, s8, s1
    t1[3] = p1[3];
   1db58:	ed15 5a01 	vldr	s10, [r5, #-4]
    *p1++ = t1[1] + t2[1];
   1db5c:	ed05 8a03 	vstr	s16, [r5, #-12]
    *p1++ = t1[2] + t2[2];
   1db60:	ee37 8a01 	vadd.f32	s16, s14, s2
   1db64:	ed05 8a02 	vstr	s16, [r5, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   1db68:	ee35 8a21 	vadd.f32	s16, s10, s3
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   1db6c:	ee35 5a61 	vsub.f32	s10, s10, s3
    *pMid1++ = t3[0] + t4[0];
   1db70:	ee72 1a26 	vadd.f32	s3, s4, s13
    *p1++ = t1[3] + t2[3];    /* col 1 */
   1db74:	ed05 8a01 	vstr	s16, [r5, #-4]
    *pMid1++ = t3[0] + t4[0];
   1db78:	ed44 1a04 	vstr	s3, [r4, #-16]
    *pMid1++ = t3[1] + t4[1];
   1db7c:	ee72 1aa4 	vadd.f32	s3, s5, s9
   1db80:	ed44 1a03 	vstr	s3, [r4, #-12]
    *pMid1++ = t3[2] + t4[2];
   1db84:	ee73 1a27 	vadd.f32	s3, s6, s15
   1db88:	ed44 1a02 	vstr	s3, [r4, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   1db8c:	ee73 1aa5 	vadd.f32	s3, s7, s11
   1db90:	ed44 1a01 	vstr	s3, [r4, #-4]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   1db94:	ee75 5ae3 	vsub.f32	s11, s11, s7
    t2[1] = t1[1] - t2[1];
   1db98:	ee34 4a60 	vsub.f32	s8, s8, s1
    twI = *tw++;
   1db9c:	edd6 3a01 	vldr	s7, [r6, #4]
    t4[1] = t4[1] - t3[1];
   1dba0:	ee74 4ae2 	vsub.f32	s9, s9, s5
    t4[2] = t4[2] - t3[2];
   1dba4:	ee77 7ac3 	vsub.f32	s15, s15, s6
    t2[0] = t1[0] - t2[0];
   1dba8:	ee36 6a40 	vsub.f32	s12, s12, s0
    twR = *tw++;
   1dbac:	ed96 3a00 	vldr	s6, [r6]
    m1 = t2[1] * twI;
   1dbb0:	ee64 2a23 	vmul.f32	s5, s8, s7
    *p2++ = m0 + m1;
   1dbb4:	ee46 2a03 	vmla.f32	s5, s12, s6
    m3 = t2[0] * twI;
   1dbb8:	ee26 6a23 	vmul.f32	s12, s12, s7
    *p2++ = m2 - m3;
   1dbbc:	ee14 6a03 	vnmls.f32	s12, s8, s6
    t4[0] = t4[0] - t3[0];
   1dbc0:	ee76 6ac2 	vsub.f32	s13, s13, s4
    *p2++ = m2 - m3;
   1dbc4:	ed03 6a03 	vstr	s12, [r3, #-12]
    m1 = t4[1] * twR;
   1dbc8:	ee24 6a83 	vmul.f32	s12, s9, s6
    *pMid2++ = m0 - m1;
   1dbcc:	ee16 6aa3 	vnmls.f32	s12, s13, s7
    m3 = t4[0] * twR;
   1dbd0:	ee66 6a83 	vmul.f32	s13, s13, s6
    *pMid2++ = m2 + m3;
   1dbd4:	ee44 6aa3 	vmla.f32	s13, s9, s7
    *p2++ = m0 + m1;
   1dbd8:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
   1dbdc:	ed02 6a04 	vstr	s12, [r2, #-16]
    *pMid2++ = m2 + m3;
   1dbe0:	ed42 6a03 	vstr	s13, [r2, #-12]
    twI = *tw++;
   1dbe4:	3610      	adds	r6, #16
    twR = *tw++;
   1dbe6:	ed16 6a02 	vldr	s12, [r6, #-8]
    twI = *tw++;
   1dbea:	ed56 6a01 	vldr	s13, [r6, #-4]
    t2[2] = t1[2] - t2[2];
   1dbee:	ee37 7a41 	vsub.f32	s14, s14, s2
    m1 = t2[3] * twI;
   1dbf2:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
   1dbf6:	ee47 4a06 	vmla.f32	s9, s14, s12
    m3 = t2[2] * twI;
   1dbfa:	ee27 7a26 	vmul.f32	s14, s14, s13
    *p2++ = m2 - m3;
   1dbfe:	ee15 7a06 	vnmls.f32	s14, s10, s12
    *p2++ = m0 + m1;
   1dc02:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
   1dc06:	ed03 7a01 	vstr	s14, [r3, #-4]
    m1 = t4[3] * twR;
   1dc0a:	ee25 7a86 	vmul.f32	s14, s11, s12
    *pMid2++ = m0 - m1;
   1dc0e:	ee17 7aa6 	vnmls.f32	s14, s15, s13
    m3 = t4[2] * twR;
   1dc12:	ee67 7a86 	vmul.f32	s15, s15, s12
    *pMid2++ = m2 + m3;
   1dc16:	ee45 7aa6 	vmla.f32	s15, s11, s13
    *pMid2++ = m0 - m1;
   1dc1a:	ed02 7a02 	vstr	s14, [r2, #-8]
    *pMid2++ = m2 + m3;
   1dc1e:	ed42 7a01 	vstr	s15, [r2, #-4]
  for (l = L >> 2; l > 0; l-- )
   1dc22:	e759      	b.n	1dad8 <arm_cfft_radix8by2_f32+0x2c>

0001dc24 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   1dc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc28:	4683      	mov	fp, r0
   1dc2a:	ed2d 8b04 	vpush	{d8-d9}
   1dc2e:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen >> 1;
   1dc30:	f8bb 3000 	ldrh.w	r3, [fp]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   1dc34:	edd0 7a00 	vldr	s15, [r0]
    uint32_t    L  = S->fftLen >> 1;
   1dc38:	085b      	lsrs	r3, r3, #1
    float32_t * p3 = p2 + L;
   1dc3a:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    p1ap3_0 = p1[0] + p3[0];
   1dc3e:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   1dc42:	edd0 5a01 	vldr	s11, [r0, #4]
    p1ap3_0 = p1[0] + p3[0];
   1dc46:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
   1dc4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
   1dc4e:	ed95 7a01 	vldr	s14, [r5, #4]
    float32_t * p2 = p1 + L;
   1dc52:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
   1dc56:	ee75 6a87 	vadd.f32	s13, s11, s14
    p1sp3_1 = p1[1] - p3[1];
   1dc5a:	ee75 5ac7 	vsub.f32	s11, s11, s14

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dc5e:	ed96 7a00 	vldr	s14, [r6]
    float32_t * p4 = p3 + L;
   1dc62:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dc66:	edd4 4a00 	vldr	s9, [r4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1dc6a:	ee37 5a06 	vadd.f32	s10, s14, s12
   1dc6e:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   1dc72:	f8db 2004 	ldr.w	r2, [fp, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dc76:	edd6 3a01 	vldr	s7, [r6, #4]
   1dc7a:	ed94 4a01 	vldr	s8, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1dc7e:	ed80 5a00 	vstr	s10, [r0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   1dc82:	ed96 5a01 	vldr	s10, [r6, #4]
   1dc86:	ed94 3a01 	vldr	s6, [r4, #4]
   1dc8a:	ee36 5a85 	vadd.f32	s10, s13, s10
   1dc8e:	ee35 5a03 	vadd.f32	s10, s10, s6
   1dc92:	ed80 5a01 	vstr	s10, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dc96:	ee33 5aa7 	vadd.f32	s10, s7, s15
   1dc9a:	ee35 5a44 	vsub.f32	s10, s10, s8
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   1dc9e:	ee36 6a47 	vsub.f32	s12, s12, s14

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   1dca2:	ed86 5a00 	vstr	s10, [r6]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   1dca6:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dcaa:	ee35 5ac7 	vsub.f32	s10, s11, s14
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   1dcae:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   1dcb2:	ee37 7a25 	vadd.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dcb6:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   1dcba:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   1dcbe:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   1dcc2:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   1dcc6:	ee37 7a64 	vsub.f32	s14, s14, s9
{
   1dcca:	b08b      	sub	sp, #44	; 0x2c
    L >>= 1;
   1dccc:	0859      	lsrs	r1, r3, #1
   1dcce:	9109      	str	r1, [sp, #36]	; 0x24
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
   1dcd0:	f102 0108 	add.w	r1, r2, #8
   1dcd4:	9106      	str	r1, [sp, #24]
    tw3 += twMod3;
   1dcd6:	f102 0110 	add.w	r1, r2, #16
    tw4 += twMod4;
   1dcda:	3218      	adds	r2, #24
   1dcdc:	9208      	str	r2, [sp, #32]
   1dcde:	f1a4 0804 	sub.w	r8, r4, #4

    for (l = (L - 2) >> 1; l > 0; l-- )
   1dce2:	085a      	lsrs	r2, r3, #1
   1dce4:	3a02      	subs	r2, #2
    pEnd4 = pEnd3 + L;
   1dce6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dcea:	0852      	lsrs	r2, r2, #1
    pEnd4 = pEnd3 + L;
   1dcec:	9301      	str	r3, [sp, #4]
   1dcee:	9b08      	ldr	r3, [sp, #32]
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dcf0:	9203      	str	r2, [sp, #12]
    *p2++ = t2[1];
   1dcf2:	ed86 5a01 	vstr	s10, [r6, #4]
    tw3 += twMod3;
   1dcf6:	9107      	str	r1, [sp, #28]
    *p3++ = t3[0];
   1dcf8:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
   1dcfc:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
   1dd00:	9104      	str	r1, [sp, #16]
   1dd02:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   1dd06:	ed84 7a01 	vstr	s14, [r4, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dd0a:	f8dd a018 	ldr.w	sl, [sp, #24]
   1dd0e:	9302      	str	r3, [sp, #8]
   1dd10:	9b03      	ldr	r3, [sp, #12]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
   1dd12:	f1a6 0904 	sub.w	r9, r6, #4
    pEnd2 = p3 - 1;
   1dd16:	1f2f      	subs	r7, r5, #4
   1dd18:	f100 0e10 	add.w	lr, r0, #16
   1dd1c:	f106 0110 	add.w	r1, r6, #16
   1dd20:	f105 0c10 	add.w	ip, r5, #16
   1dd24:	f104 0210 	add.w	r2, r4, #16
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
   1dd28:	ed1c 3a02 	vldr	s6, [ip, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
   1dd2c:	ed5c 3a01 	vldr	s7, [ip, #-4]
      p1ap3_0 = p1[0] + p3[0];
   1dd30:	ed1e 6a02 	vldr	s12, [lr, #-8]
      p1ap3_1 = p1[1] + p3[1];
   1dd34:	ed5e 7a01 	vldr	s15, [lr, #-4]
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dd38:	ed51 6a02 	vldr	s13, [r1, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dd3c:	ed11 4a01 	vldr	s8, [r1, #-4]
      p1sp3_0 = p1[0] - p3[0];
   1dd40:	ee36 7a43 	vsub.f32	s14, s12, s6
      p1sp3_1 = p1[1] - p3[1];
   1dd44:	ee77 5ae3 	vsub.f32	s11, s15, s7
      p1ap3_0 = p1[0] + p3[0];
   1dd48:	ee36 6a03 	vadd.f32	s12, s12, s6
      p1ap3_1 = p1[1] + p3[1];
   1dd4c:	ee77 7aa3 	vadd.f32	s15, s15, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dd50:	ed12 5a02 	vldr	s10, [r2, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dd54:	ed52 4a01 	vldr	s9, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dd58:	ee75 2ae6 	vsub.f32	s5, s11, s13
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dd5c:	ee34 2a07 	vadd.f32	s4, s8, s14
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   1dd60:	ee36 3a66 	vsub.f32	s6, s12, s13
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   1dd64:	ee76 5aa5 	vadd.f32	s11, s13, s11
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   1dd68:	ee77 3ac4 	vsub.f32	s7, s15, s8
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   1dd6c:	ee37 7a44 	vsub.f32	s14, s14, s8
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   1dd70:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dd74:	9305      	str	r3, [sp, #20]
   1dd76:	9b01      	ldr	r3, [sp, #4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1dd78:	ee32 2a64 	vsub.f32	s4, s4, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dd7c:	3b08      	subs	r3, #8
   1dd7e:	9301      	str	r3, [sp, #4]
   1dd80:	9b04      	ldr	r3, [sp, #16]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   1dd82:	ee72 2a85 	vadd.f32	s5, s5, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dd86:	3310      	adds	r3, #16
   1dd88:	9304      	str	r3, [sp, #16]
   1dd8a:	9b02      	ldr	r3, [sp, #8]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   1dd8c:	ee33 3a45 	vsub.f32	s6, s6, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dd90:	3318      	adds	r3, #24
   1dd92:	9302      	str	r3, [sp, #8]
   1dd94:	9b05      	ldr	r3, [sp, #20]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   1dd96:	ee73 3ae4 	vsub.f32	s7, s7, s9
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   1dd9a:	ee37 7a24 	vadd.f32	s14, s14, s9
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   1dd9e:	ee75 5ac5 	vsub.f32	s11, s11, s10
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   1dda2:	ee76 6a85 	vadd.f32	s13, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dda6:	f1a9 0908 	sub.w	r9, r9, #8
   1ddaa:	3f08      	subs	r7, #8
   1ddac:	f1a8 0808 	sub.w	r8, r8, #8
   1ddb0:	f10a 0a08 	add.w	sl, sl, #8
   1ddb4:	f10e 0e08 	add.w	lr, lr, #8
   1ddb8:	3108      	adds	r1, #8
   1ddba:	f10c 0c08 	add.w	ip, ip, #8
   1ddbe:	3208      	adds	r2, #8
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d174      	bne.n	1deae <arm_cfft_radix8by4_f32+0x28a>
   1ddc4:	9b03      	ldr	r3, [sp, #12]
   1ddc6:	9a06      	ldr	r2, [sp, #24]
   1ddc8:	00df      	lsls	r7, r3, #3
   1ddca:	f107 0308 	add.w	r3, r7, #8
   1ddce:	eb00 0a03 	add.w	sl, r0, r3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1ddd2:	edca 6a00 	vstr	s13, [sl]
   1ddd6:	eb06 0e03 	add.w	lr, r6, r3
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   1ddda:	edde 6a01 	vldr	s13, [lr, #4]
   1ddde:	eb05 0803 	add.w	r8, r5, r3
   1dde2:	4423      	add	r3, r4
   1dde4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1dde8:	edd3 6a01 	vldr	s13, [r3, #4]
   1ddec:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1ddf0:	443a      	add	r2, r7
   1ddf2:	edca 7a01 	vstr	s15, [sl, #4]

    /* COL 2 */
    twR = tw2[0];
   1ddf6:	4691      	mov	r9, r2
    twI = tw2[1];
   1ddf8:	edd9 7a01 	vldr	s15, [r9, #4]
    twR = tw2[0];
   1ddfc:	ed99 6a00 	vldr	s12, [r9]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
   1de00:	ee67 6aa2 	vmul.f32	s13, s15, s5
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;
   1de04:	ee67 7a82 	vmul.f32	s15, s15, s4

    *p2++ = m0 + m1;
   1de08:	ee46 6a02 	vmla.f32	s13, s12, s4
    *p2++ = m2 - m3;
   1de0c:	ee56 7a22 	vnmls.f32	s15, s12, s5
    *p2++ = m0 + m1;
   1de10:	edce 6a00 	vstr	s13, [lr]
    *p2++ = m2 - m3;
   1de14:	edce 7a01 	vstr	s15, [lr, #4]
    /* COL 3 */
    twR = tw3[0];
   1de18:	9a07      	ldr	r2, [sp, #28]
   1de1a:	9903      	ldr	r1, [sp, #12]
   1de1c:	9f03      	ldr	r7, [sp, #12]
   1de1e:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
    twI = tw3[1];
   1de22:	eddc 7a01 	vldr	s15, [ip, #4]
    twR = tw3[0];
   1de26:	ed9c 6a00 	vldr	s12, [ip]

    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
   1de2a:	ee67 6aa3 	vmul.f32	s13, s15, s7
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;
   1de2e:	ee67 7a83 	vmul.f32	s15, s15, s6

    *p3++ = m0 + m1;
   1de32:	ee46 6a03 	vmla.f32	s13, s12, s6
    *p3++ = m2 - m3;
   1de36:	ee56 7a23 	vnmls.f32	s15, s12, s7
   1de3a:	2218      	movs	r2, #24
    *p3++ = m0 + m1;
   1de3c:	edc8 6a00 	vstr	s13, [r8]
    *p3++ = m2 - m3;
   1de40:	edc8 7a01 	vstr	s15, [r8, #4]
    /* COL 4 */
    twR = tw4[0];
   1de44:	9908      	ldr	r1, [sp, #32]
   1de46:	fb02 1207 	mla	r2, r2, r7, r1
    twI = tw4[1];
   1de4a:	edd2 7a01 	vldr	s15, [r2, #4]
    twR = tw4[0];
   1de4e:	ed92 6a00 	vldr	s12, [r2]

    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
   1de52:	ee67 6aa5 	vmul.f32	s13, s15, s11
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;
   1de56:	ee67 7a87 	vmul.f32	s15, s15, s14

    *p4++ = m0 + m1;
   1de5a:	ee46 6a07 	vmla.f32	s13, s12, s14
    *p4++ = m2 - m3;
   1de5e:	ee56 7a25 	vnmls.f32	s15, s12, s11
    *p4++ = m0 + m1;
   1de62:	edc3 6a00 	vstr	s13, [r3]
    *p4++ = m2 - m3;
   1de66:	edc3 7a01 	vstr	s15, [r3, #4]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   1de6a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   1de6e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1de72:	4639      	mov	r1, r7
   1de74:	2304      	movs	r3, #4
   1de76:	f7f4 ff21 	bl	12cbc <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   1de7a:	4639      	mov	r1, r7
   1de7c:	4630      	mov	r0, r6
   1de7e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1de82:	2304      	movs	r3, #4
   1de84:	f7f4 ff1a 	bl	12cbc <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   1de88:	4639      	mov	r1, r7
   1de8a:	4628      	mov	r0, r5
   1de8c:	f8db 2004 	ldr.w	r2, [fp, #4]
   1de90:	2304      	movs	r3, #4
   1de92:	f7f4 ff13 	bl	12cbc <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   1de96:	2304      	movs	r3, #4
   1de98:	4639      	mov	r1, r7
   1de9a:	4620      	mov	r0, r4
   1de9c:	f8db 2004 	ldr.w	r2, [fp, #4]
}
   1dea0:	b00b      	add	sp, #44	; 0x2c
   1dea2:	ecbd 8b04 	vpop	{d8-d9}
   1dea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   1deaa:	f7f4 bf07 	b.w	12cbc <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   1deae:	ed4e 6a04 	vstr	s13, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   1deb2:	ed51 6a03 	vldr	s13, [r1, #-12]
   1deb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1deba:	ed52 6a03 	vldr	s13, [r2, #-12]
   1debe:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1dec2:	ed4e 7a03 	vstr	s15, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   1dec6:	edd8 7a01 	vldr	s15, [r8, #4]
   1deca:	ed99 1a01 	vldr	s2, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   1dece:	edd9 4a02 	vldr	s9, [r9, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   1ded2:	ee31 5a27 	vadd.f32	s10, s2, s15
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   1ded6:	ee31 1a67 	vsub.f32	s2, s2, s15
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   1deda:	edd8 7a02 	vldr	s15, [r8, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   1dede:	9b01      	ldr	r3, [sp, #4]
   1dee0:	ed97 6a02 	vldr	s12, [r7, #8]
   1dee4:	ed93 8a02 	vldr	s16, [r3, #8]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   1dee8:	ee34 9aa7 	vadd.f32	s18, s9, s15
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   1deec:	ee76 1a48 	vsub.f32	s3, s12, s16
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   1def0:	ee79 0a46 	vsub.f32	s1, s18, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   1def4:	ee36 6a09 	vadd.f32	s12, s12, s18
   1def8:	ee36 6a08 	vadd.f32	s12, s12, s16
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   1defc:	ed93 4a01 	vldr	s8, [r3, #4]
   1df00:	edd7 8a01 	vldr	s17, [r7, #4]
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   1df04:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   1df08:	ed97 6a01 	vldr	s12, [r7, #4]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   1df0c:	ee74 4ae7 	vsub.f32	s9, s9, s15
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   1df10:	ee75 7a68 	vsub.f32	s15, s10, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   1df14:	ee35 5a06 	vadd.f32	s10, s10, s12
   1df18:	ed93 6a01 	vldr	s12, [r3, #4]
   1df1c:	ee35 5a06 	vadd.f32	s10, s10, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   1df20:	ee74 6ae8 	vsub.f32	s13, s9, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   1df24:	ed89 5a01 	vstr	s10, [r9, #4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   1df28:	ee77 7ac4 	vsub.f32	s15, s15, s8
      twI = *tw2++;
   1df2c:	ed1a 6a01 	vldr	s12, [sl, #-4]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   1df30:	ee76 6a84 	vadd.f32	s13, s13, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   1df34:	ee34 4a68 	vsub.f32	s8, s8, s17
      twR = *tw2++;
   1df38:	ed1a 5a02 	vldr	s10, [sl, #-8]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   1df3c:	ee34 4a64 	vsub.f32	s8, s8, s9
      m1 = t2[1] * twI;
   1df40:	ee66 4a22 	vmul.f32	s9, s12, s5
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   1df44:	ee31 0a81 	vadd.f32	s0, s3, s2
      *p2++ = m0 + m1;
   1df48:	ee45 4a02 	vmla.f32	s9, s10, s4
   1df4c:	ed41 4a04 	vstr	s9, [r1, #-16]
      m1 = t2[2] * twR;
   1df50:	ee60 4a05 	vmul.f32	s9, s0, s10
      m3 = t2[0] * twI;
   1df54:	ee26 2a02 	vmul.f32	s4, s12, s4
      *pEnd2-- = m0 - m1;
   1df58:	ee56 4a86 	vnmls.f32	s9, s13, s12
      m3 = t2[3] * twR;
   1df5c:	ee66 6a85 	vmul.f32	s13, s13, s10
      *p2++ = m2 - m3;
   1df60:	ee15 2a22 	vnmls.f32	s4, s10, s5
      *pEnd2-- = m2 + m3;
   1df64:	ee40 6a06 	vmla.f32	s13, s0, s12
      *p2++ = m2 - m3;
   1df68:	ed01 2a03 	vstr	s4, [r1, #-12]
      *pEnd2-- = m0 - m1;
   1df6c:	edc7 4a02 	vstr	s9, [r7, #8]
      *pEnd2-- = m2 + m3;
   1df70:	edc7 6a01 	vstr	s13, [r7, #4]
      twR = tw3[0];
   1df74:	9b04      	ldr	r3, [sp, #16]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   1df76:	ee70 0ac8 	vsub.f32	s1, s1, s16
      twI = tw3[1];
   1df7a:	ed13 6a03 	vldr	s12, [r3, #-12]
      twR = tw3[0];
   1df7e:	ed53 6a04 	vldr	s13, [r3, #-16]
      m1 = t3[1] * twI;
   1df82:	ee26 5a23 	vmul.f32	s10, s12, s7
      *p3++ = m0 + m1;
   1df86:	ee06 5a83 	vmla.f32	s10, s13, s6
      m3 = t3[0] * twI;
   1df8a:	ee26 3a03 	vmul.f32	s6, s12, s6
      *p3++ = m0 + m1;
   1df8e:	ed0c 5a04 	vstr	s10, [ip, #-16]
      m1 =  t3[2] * twI;
   1df92:	ee27 5a86 	vmul.f32	s10, s15, s12
      *p3++ = m2 - m3;
   1df96:	ee16 3aa3 	vnmls.f32	s6, s13, s7
      *pEnd3-- = m0 - m1;
   1df9a:	ee10 5ae6 	vnmla.f32	s10, s1, s13
      m2 =  t3[2] * twR;
   1df9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
      *pEnd3-- = m3 - m2;
   1dfa2:	ee50 6a86 	vnmls.f32	s13, s1, s12
      *p3++ = m2 - m3;
   1dfa6:	ed0c 3a03 	vstr	s6, [ip, #-12]
      *pEnd3-- = m0 - m1;
   1dfaa:	ed88 5a02 	vstr	s10, [r8, #8]
      *pEnd3-- = m3 - m2;
   1dfae:	edc8 6a01 	vstr	s13, [r8, #4]
      twR = tw4[0];
   1dfb2:	9b02      	ldr	r3, [sp, #8]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   1dfb4:	ee71 1ac1 	vsub.f32	s3, s3, s2
      twR = tw4[0];
   1dfb8:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
      twI = tw4[1];
   1dfbc:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
      m1 = t4[1] * twI;
   1dfc0:	ee26 6aa5 	vmul.f32	s12, s13, s11
      *p4++ = m0 + m1;
   1dfc4:	ee07 6a87 	vmla.f32	s12, s15, s14
      m3 = t4[0] * twI;
   1dfc8:	ee26 7a87 	vmul.f32	s14, s13, s14
      *p4++ = m2 - m3;
   1dfcc:	ee17 7aa5 	vnmls.f32	s14, s15, s11
   1dfd0:	ed02 7a03 	vstr	s14, [r2, #-12]
      m1 = t4[2] * twR;
   1dfd4:	ee21 7aa7 	vmul.f32	s14, s3, s15
      m3 = t4[3] * twR;
   1dfd8:	ee64 7a27 	vmul.f32	s15, s8, s15
      *pEnd4-- = m0 - m1;
   1dfdc:	ee14 7a26 	vnmls.f32	s14, s8, s13
      *pEnd4-- = m2 + m3;
   1dfe0:	ee41 7aa6 	vmla.f32	s15, s3, s13
      *pEnd4-- = m0 - m1;
   1dfe4:	9b01      	ldr	r3, [sp, #4]
      *p4++ = m0 + m1;
   1dfe6:	ed02 6a04 	vstr	s12, [r2, #-16]
      *pEnd4-- = m0 - m1;
   1dfea:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
   1dfee:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   1dff2:	9b05      	ldr	r3, [sp, #20]
   1dff4:	3b01      	subs	r3, #1
   1dff6:	e697      	b.n	1dd28 <arm_cfft_radix8by4_f32+0x104>

0001dff8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
   1dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   1dffc:	2a01      	cmp	r2, #1
{
   1dffe:	4606      	mov	r6, r0
   1e000:	460c      	mov	r4, r1
   1e002:	4690      	mov	r8, r2
   1e004:	461f      	mov	r7, r3
  uint32_t  L = S->fftLen, l;
   1e006:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
   1e008:	d028      	beq.n	1e05c <arm_cfft_f32+0x64>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   1e00a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1e00e:	d12e      	bne.n	1e06e <arm_cfft_f32+0x76>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
    break;
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   1e010:	f7ff fe08 	bl	1dc24 <arm_cfft_radix8by4_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   1e014:	2f00      	cmp	r7, #0
   1e016:	d045      	beq.n	1e0a4 <arm_cfft_f32+0xac>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   1e018:	4620      	mov	r0, r4
   1e01a:	68b2      	ldr	r2, [r6, #8]
   1e01c:	89b1      	ldrh	r1, [r6, #12]
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   1e01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   1e022:	f7ff bd21 	b.w	1da68 <arm_bitreversal_32>
  switch (L)
   1e026:	2d80      	cmp	r5, #128	; 0x80
   1e028:	d12b      	bne.n	1e082 <arm_cfft_f32+0x8a>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   1e02a:	4621      	mov	r1, r4
   1e02c:	4630      	mov	r0, r6
   1e02e:	f7ff fd3d 	bl	1daac <arm_cfft_radix8by2_f32>
    break;
   1e032:	e026      	b.n	1e082 <arm_cfft_f32+0x8a>
  switch (L)
   1e034:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   1e038:	d04a      	beq.n	1e0d0 <arm_cfft_f32+0xd8>
   1e03a:	d805      	bhi.n	1e048 <arm_cfft_f32+0x50>
   1e03c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1e040:	d005      	beq.n	1e04e <arm_cfft_f32+0x56>
   1e042:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1e046:	e7ef      	b.n	1e028 <arm_cfft_f32+0x30>
   1e048:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1e04c:	d119      	bne.n	1e082 <arm_cfft_f32+0x8a>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   1e04e:	2301      	movs	r3, #1
   1e050:	4629      	mov	r1, r5
   1e052:	4620      	mov	r0, r4
   1e054:	6872      	ldr	r2, [r6, #4]
   1e056:	f7f4 fe31 	bl	12cbc <arm_radix8_butterfly_f32>
    break;
   1e05a:	e012      	b.n	1e082 <arm_cfft_f32+0x8a>
    for (l = 0; l < L; l++)
   1e05c:	2200      	movs	r2, #0
    pSrc = p1 + 1;
   1e05e:	1d0b      	adds	r3, r1, #4
    for (l = 0; l < L; l++)
   1e060:	42aa      	cmp	r2, r5
   1e062:	f103 0308 	add.w	r3, r3, #8
   1e066:	d31f      	bcc.n	1e0a8 <arm_cfft_f32+0xb0>
  switch (L)
   1e068:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1e06c:	d024      	beq.n	1e0b8 <arm_cfft_f32+0xc0>
   1e06e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1e072:	d8df      	bhi.n	1e034 <arm_cfft_f32+0x3c>
   1e074:	2d40      	cmp	r5, #64	; 0x40
   1e076:	d0ea      	beq.n	1e04e <arm_cfft_f32+0x56>
   1e078:	d8d5      	bhi.n	1e026 <arm_cfft_f32+0x2e>
   1e07a:	2d10      	cmp	r5, #16
   1e07c:	d0d5      	beq.n	1e02a <arm_cfft_f32+0x32>
   1e07e:	2d20      	cmp	r5, #32
   1e080:	d026      	beq.n	1e0d0 <arm_cfft_f32+0xd8>
  if ( bitReverseFlag )
   1e082:	b9ff      	cbnz	r7, 1e0c4 <arm_cfft_f32+0xcc>
  if (ifftFlag == 1U)
   1e084:	f1b8 0f01 	cmp.w	r8, #1
   1e088:	d10c      	bne.n	1e0a4 <arm_cfft_f32+0xac>
    invL = 1.0f / (float32_t)L;
   1e08a:	ee07 5a90 	vmov	s15, r5
   1e08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1e092:	eef8 7a67 	vcvt.f32.u32	s15, s15
    for (l= 0; l < L; l++)
   1e096:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
   1e098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
   1e09c:	42ab      	cmp	r3, r5
   1e09e:	f104 0408 	add.w	r4, r4, #8
   1e0a2:	d31a      	bcc.n	1e0da <arm_cfft_f32+0xe2>
}
   1e0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *pSrc = -*pSrc;
   1e0a8:	ed53 7a02 	vldr	s15, [r3, #-8]
   1e0ac:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
   1e0b0:	3201      	adds	r2, #1
      *pSrc = -*pSrc;
   1e0b2:	ed43 7a02 	vstr	s15, [r3, #-8]
    for (l = 0; l < L; l++)
   1e0b6:	e7d3      	b.n	1e060 <arm_cfft_f32+0x68>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   1e0b8:	4621      	mov	r1, r4
   1e0ba:	4630      	mov	r0, r6
   1e0bc:	f7ff fdb2 	bl	1dc24 <arm_cfft_radix8by4_f32>
  if ( bitReverseFlag )
   1e0c0:	2f00      	cmp	r7, #0
   1e0c2:	d0e2      	beq.n	1e08a <arm_cfft_f32+0x92>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   1e0c4:	4620      	mov	r0, r4
   1e0c6:	68b2      	ldr	r2, [r6, #8]
   1e0c8:	89b1      	ldrh	r1, [r6, #12]
   1e0ca:	f7ff fccd 	bl	1da68 <arm_bitreversal_32>
   1e0ce:	e7d9      	b.n	1e084 <arm_cfft_f32+0x8c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   1e0d0:	4621      	mov	r1, r4
   1e0d2:	4630      	mov	r0, r6
   1e0d4:	f7ff fda6 	bl	1dc24 <arm_cfft_radix8by4_f32>
    break;
   1e0d8:	e7d3      	b.n	1e082 <arm_cfft_f32+0x8a>
      *pSrc++ *=   invL ;
   1e0da:	ed54 7a02 	vldr	s15, [r4, #-8]
   1e0de:	ee67 7a87 	vmul.f32	s15, s15, s14
   1e0e2:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
   1e0e6:	ed54 7a01 	vldr	s15, [r4, #-4]
   1e0ea:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
   1e0ee:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
   1e0f0:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
   1e0f4:	e7d2      	b.n	1e09c <arm_cfft_f32+0xa4>

0001e0f6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e0f6:	4700      	bx	r0

0001e0f8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e0f8:	f001 b851 	b.w	1f19e <z_impl_k_busy_wait>

0001e0fc <nrf_gpio_pin_present_check>:
    switch (port)
   1e0fc:	0943      	lsrs	r3, r0, #5
   1e0fe:	d00b      	beq.n	1e118 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   1e100:	2b01      	cmp	r3, #1
   1e102:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e106:	bf18      	it	ne
   1e108:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1e10a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e10e:	fa23 f000 	lsr.w	r0, r3, r0
}
   1e112:	f000 0001 	and.w	r0, r0, #1
   1e116:	4770      	bx	lr
    switch (port)
   1e118:	f04f 33ff 	mov.w	r3, #4294967295
   1e11c:	e7f5      	b.n	1e10a <nrf_gpio_pin_present_check+0xe>

0001e11e <pin_is_task_output>:
{
   1e11e:	b508      	push	{r3, lr}
   1e120:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e122:	f7f5 fb6f 	bl	13804 <pin_is_output>
   1e126:	b110      	cbz	r0, 1e12e <pin_is_task_output+0x10>
   1e128:	4610      	mov	r0, r2
   1e12a:	f7f5 fb55 	bl	137d8 <pin_in_use_by_te>
}
   1e12e:	f000 0001 	and.w	r0, r0, #1
   1e132:	bd08      	pop	{r3, pc}

0001e134 <nrf_gpio_reconfigure>:
{
   1e134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e138:	4617      	mov	r7, r2
   1e13a:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   1e13e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e140:	a801      	add	r0, sp, #4
{
   1e142:	460c      	mov	r4, r1
   1e144:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e146:	f7f5 fbdf 	bl	13908 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e14a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e14c:	1e39      	subs	r1, r7, #0
   1e14e:	bf18      	it	ne
   1e150:	2101      	movne	r1, #1
   1e152:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e156:	1e23      	subs	r3, r4, #0
   1e158:	bf18      	it	ne
   1e15a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e15c:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e15e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e162:	bf14      	ite	ne
   1e164:	210c      	movne	r1, #12
   1e166:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e168:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1e16a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1e16e:	bf14      	ite	ne
   1e170:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   1e174:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e176:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1e17a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1e17e:	bf14      	ite	ne
   1e180:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   1e184:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1e186:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1e18a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   1e18c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e190:	b104      	cbz	r4, 1e194 <nrf_gpio_reconfigure+0x60>
   1e192:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1e194:	b10f      	cbz	r7, 1e19a <nrf_gpio_reconfigure+0x66>
   1e196:	783f      	ldrb	r7, [r7, #0]
   1e198:	007f      	lsls	r7, r7, #1
   1e19a:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1e19c:	b10e      	cbz	r6, 1e1a2 <nrf_gpio_reconfigure+0x6e>
   1e19e:	7836      	ldrb	r6, [r6, #0]
   1e1a0:	00b6      	lsls	r6, r6, #2
   1e1a2:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e1a4:	b18d      	cbz	r5, 1e1ca <nrf_gpio_reconfigure+0x96>
   1e1a6:	7829      	ldrb	r1, [r5, #0]
   1e1a8:	0209      	lsls	r1, r1, #8
   1e1aa:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1e1ac:	f1b8 0f00 	cmp.w	r8, #0
   1e1b0:	d003      	beq.n	1e1ba <nrf_gpio_reconfigure+0x86>
   1e1b2:	f898 8000 	ldrb.w	r8, [r8]
   1e1b6:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1e1ba:	4321      	orrs	r1, r4
   1e1bc:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   1e1c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1e1c4:	b002      	add	sp, #8
   1e1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1e1ca:	4629      	mov	r1, r5
   1e1cc:	e7ed      	b.n	1e1aa <nrf_gpio_reconfigure+0x76>

0001e1ce <nrf_gpio_cfg_sense_set>:
{
   1e1ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e1d0:	f10d 030f 	add.w	r3, sp, #15
   1e1d4:	9301      	str	r3, [sp, #4]
   1e1d6:	2300      	movs	r3, #0
{
   1e1d8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1e1dc:	461a      	mov	r2, r3
   1e1de:	4619      	mov	r1, r3
   1e1e0:	9300      	str	r3, [sp, #0]
   1e1e2:	f7ff ffa7 	bl	1e134 <nrf_gpio_reconfigure>
}
   1e1e6:	b005      	add	sp, #20
   1e1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001e1ec <start_playback>:
{
   1e1ec:	b510      	push	{r4, lr}
   1e1ee:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1e1f0:	2002      	movs	r0, #2
    p_cb->flags = flags;
   1e1f2:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1e1f4:	7208      	strb	r0, [r1, #8]
    if (p_cb->handler)
   1e1f6:	6809      	ldr	r1, [r1, #0]
   1e1f8:	b179      	cbz	r1, 1e21a <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1e1fa:	f012 0f04 	tst.w	r2, #4
   1e1fe:	bf0c      	ite	eq
   1e200:	2182      	moveq	r1, #130	; 0x82
   1e202:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1e204:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1e206:	bf48      	it	mi
   1e208:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1e20c:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   1e20e:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1e210:	bf48      	it	mi
   1e212:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1e216:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e21a:	2000      	movs	r0, #0
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1e21c:	6821      	ldr	r1, [r4, #0]
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1e21e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e222:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   1e226:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e22a:	bf08      	it	eq
   1e22c:	2101      	moveq	r1, #1
   1e22e:	6822      	ldr	r2, [r4, #0]
   1e230:	bf0c      	ite	eq
   1e232:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1e234:	18d0      	addne	r0, r2, r3
}
   1e236:	bd10      	pop	{r4, pc}

0001e238 <metal_device_open>:
{
   1e238:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e23a:	460c      	mov	r4, r1
   1e23c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1e23e:	4606      	mov	r6, r0
   1e240:	b918      	cbnz	r0, 1e24a <metal_device_open+0x12>
		return -EINVAL;
   1e242:	f06f 0015 	mvn.w	r0, #21
}
   1e246:	b002      	add	sp, #8
   1e248:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1e24a:	f7e7 fae9 	bl	5820 <strlen>
   1e24e:	2800      	cmp	r0, #0
   1e250:	d0f7      	beq.n	1e242 <metal_device_open+0xa>
   1e252:	2c00      	cmp	r4, #0
   1e254:	d0f5      	beq.n	1e242 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1e256:	4620      	mov	r0, r4
   1e258:	f7e7 fae2 	bl	5820 <strlen>
   1e25c:	2800      	cmp	r0, #0
   1e25e:	d0f0      	beq.n	1e242 <metal_device_open+0xa>
   1e260:	2d00      	cmp	r5, #0
   1e262:	d0ee      	beq.n	1e242 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1e264:	4630      	mov	r0, r6
   1e266:	a901      	add	r1, sp, #4
   1e268:	f7f6 f9a4 	bl	145b4 <metal_bus_find>
	if (error)
   1e26c:	2800      	cmp	r0, #0
   1e26e:	d1ea      	bne.n	1e246 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1e270:	9801      	ldr	r0, [sp, #4]
   1e272:	6883      	ldr	r3, [r0, #8]
   1e274:	b12b      	cbz	r3, 1e282 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e276:	462a      	mov	r2, r5
   1e278:	4621      	mov	r1, r4
}
   1e27a:	b002      	add	sp, #8
   1e27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e280:	4718      	bx	r3
		return -ENODEV;
   1e282:	f06f 0012 	mvn.w	r0, #18
   1e286:	e7de      	b.n	1e246 <metal_device_open+0xe>

0001e288 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1e288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e28c:	b089      	sub	sp, #36	; 0x24
   1e28e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1e290:	4604      	mov	r4, r0
   1e292:	4689      	mov	r9, r1
   1e294:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   1e296:	2100      	movs	r1, #0
   1e298:	2220      	movs	r2, #32
   1e29a:	4668      	mov	r0, sp
{
   1e29c:	461f      	mov	r7, r3
   1e29e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1e2a0:	f001 f8b7 	bl	1f412 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1e2a4:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   1e2a6:	bf97      	itett	ls
   1e2a8:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   1e2aa:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   1e2ae:	40b3      	lslls	r3, r6
   1e2b0:	f103 33ff 	addls.w	r3, r3, #4294967295
   1e2b4:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   1e2b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   1e2b8:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   1e2bc:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   1e2c0:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1e2c2:	3418      	adds	r4, #24
   1e2c4:	b145      	cbz	r5, 1e2d8 <metal_io_init+0x50>
   1e2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e2ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e2ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1e2d2:	b009      	add	sp, #36	; 0x24
   1e2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   1e2d8:	466d      	mov	r5, sp
   1e2da:	e7f4      	b.n	1e2c6 <metal_io_init+0x3e>

0001e2dc <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1e2dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e2de:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e2e0:	1c66      	adds	r6, r4, #1
   1e2e2:	d031      	beq.n	1e348 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e2e4:	6885      	ldr	r5, [r0, #8]
   1e2e6:	42a9      	cmp	r1, r5
   1e2e8:	d22e      	bcs.n	1e348 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1e2ea:	1864      	adds	r4, r4, r1
   1e2ec:	d02c      	beq.n	1e348 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e2ee:	185e      	adds	r6, r3, r1
   1e2f0:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e2f2:	bf88      	it	hi
   1e2f4:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1e2f6:	6a05      	ldr	r5, [r0, #32]
   1e2f8:	b135      	cbz	r5, 1e308 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   1e2fa:	9300      	str	r3, [sp, #0]
   1e2fc:	2305      	movs	r3, #5
   1e2fe:	47a8      	blx	r5
   1e300:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1e302:	4618      	mov	r0, r3
   1e304:	b002      	add	sp, #8
   1e306:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1e308:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1e30c:	4619      	mov	r1, r3
   1e30e:	1aa4      	subs	r4, r4, r2
   1e310:	1910      	adds	r0, r2, r4
   1e312:	b119      	cbz	r1, 1e31c <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   1e314:	ea40 0502 	orr.w	r5, r0, r2
   1e318:	07ad      	lsls	r5, r5, #30
   1e31a:	d10a      	bne.n	1e332 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1e31c:	2903      	cmp	r1, #3
   1e31e:	dc0d      	bgt.n	1e33c <metal_io_block_read+0x60>
   1e320:	3801      	subs	r0, #1
   1e322:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1e324:	428a      	cmp	r2, r1
   1e326:	d0ec      	beq.n	1e302 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   1e328:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   1e32c:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1e330:	e7f8      	b.n	1e324 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1e332:	7800      	ldrb	r0, [r0, #0]
			len--;
   1e334:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   1e336:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1e33a:	e7e9      	b.n	1e310 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1e33c:	f850 4b04 	ldr.w	r4, [r0], #4
   1e340:	3904      	subs	r1, #4
   1e342:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   1e346:	e7e9      	b.n	1e31c <metal_io_block_read+0x40>
		return -ERANGE;
   1e348:	f06f 0321 	mvn.w	r3, #33	; 0x21
   1e34c:	e7d9      	b.n	1e302 <metal_io_block_read+0x26>

0001e34e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1e34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e350:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e352:	1c65      	adds	r5, r4, #1
   1e354:	d032      	beq.n	1e3bc <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e356:	6885      	ldr	r5, [r0, #8]
   1e358:	42a9      	cmp	r1, r5
   1e35a:	d22f      	bcs.n	1e3bc <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1e35c:	1864      	adds	r4, r4, r1
   1e35e:	d02d      	beq.n	1e3bc <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e360:	185e      	adds	r6, r3, r1
   1e362:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1e364:	bf88      	it	hi
   1e366:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1e368:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e36a:	b1cd      	cbz	r5, 1e3a0 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   1e36c:	9300      	str	r3, [sp, #0]
   1e36e:	2305      	movs	r3, #5
   1e370:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1e372:	b002      	add	sp, #8
   1e374:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1e376:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   1e37a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1e37c:	7005      	strb	r5, [r0, #0]
			len--;
   1e37e:	4615      	mov	r5, r2
   1e380:	18a0      	adds	r0, r4, r2
		while ( len && (
   1e382:	b119      	cbz	r1, 1e38c <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1e384:	ea40 0602 	orr.w	r6, r0, r2
   1e388:	07b6      	lsls	r6, r6, #30
   1e38a:	d1f4      	bne.n	1e376 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e38c:	2903      	cmp	r1, #3
   1e38e:	dc0a      	bgt.n	1e3a6 <metal_io_block_write+0x58>
   1e390:	3d01      	subs	r5, #1
   1e392:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1e394:	4288      	cmp	r0, r1
   1e396:	d10c      	bne.n	1e3b2 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1e398:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1e39c:	4618      	mov	r0, r3
   1e39e:	e7e8      	b.n	1e372 <metal_io_block_write+0x24>
   1e3a0:	4619      	mov	r1, r3
   1e3a2:	1aa4      	subs	r4, r4, r2
   1e3a4:	e7eb      	b.n	1e37e <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1e3a6:	f855 2b04 	ldr.w	r2, [r5], #4
   1e3aa:	3904      	subs	r1, #4
   1e3ac:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1e3b0:	e7ec      	b.n	1e38c <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1e3b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   1e3b6:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   1e3ba:	e7eb      	b.n	1e394 <metal_io_block_write+0x46>
		return -ERANGE;
   1e3bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e3c0:	e7d7      	b.n	1e372 <metal_io_block_write+0x24>

0001e3c2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1e3c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e3c4:	6804      	ldr	r4, [r0, #0]
   1e3c6:	461d      	mov	r5, r3
		: NULL);
   1e3c8:	1c66      	adds	r6, r4, #1
   1e3ca:	d02b      	beq.n	1e424 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e3cc:	6883      	ldr	r3, [r0, #8]
   1e3ce:	4299      	cmp	r1, r3
   1e3d0:	d228      	bcs.n	1e424 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1e3d2:	1864      	adds	r4, r4, r1
   1e3d4:	d026      	beq.n	1e424 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e3d6:	186e      	adds	r6, r5, r1
   1e3d8:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1e3da:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1e3dc:	bf88      	it	hi
   1e3de:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1e3e0:	b12e      	cbz	r6, 1e3ee <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   1e3e2:	2305      	movs	r3, #5
   1e3e4:	9500      	str	r5, [sp, #0]
   1e3e6:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1e3e8:	4628      	mov	r0, r5
}
   1e3ea:	b002      	add	sp, #8
   1e3ec:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   1e3ee:	4621      	mov	r1, r4
   1e3f0:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e3f2:	b94b      	cbnz	r3, 1e408 <metal_io_block_set+0x46>
   1e3f4:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   1e3f6:	4299      	cmp	r1, r3
   1e3f8:	d111      	bne.n	1e41e <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   1e3fa:	f3bf 8f5b 	dmb	ish
   1e3fe:	e7f3      	b.n	1e3e8 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   1e400:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e404:	3b01      	subs	r3, #1
   1e406:	e7f4      	b.n	1e3f2 <metal_io_block_set+0x30>
   1e408:	0788      	lsls	r0, r1, #30
   1e40a:	d1f9      	bne.n	1e400 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1e40c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   1e410:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e412:	2b03      	cmp	r3, #3
   1e414:	ddee      	ble.n	1e3f4 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   1e416:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e41a:	3b04      	subs	r3, #4
   1e41c:	e7f9      	b.n	1e412 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   1e41e:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1e422:	e7e8      	b.n	1e3f6 <metal_io_block_set+0x34>
		return -ERANGE;
   1e424:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e428:	e7df      	b.n	1e3ea <metal_io_block_set+0x28>

0001e42a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1e42a:	2000      	movs	r0, #0
   1e42c:	4770      	bx	lr

0001e42e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1e42e:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1e430:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1e432:	4602      	mov	r2, r0
   1e434:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1e436:	b98c      	cbnz	r4, 1e45c <metal_io_phys+0x2e>
		unsigned long page = (io->page_shift >=
   1e438:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1e43a:	291f      	cmp	r1, #31
   1e43c:	bf98      	it	ls
   1e43e:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1e442:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1e444:	b171      	cbz	r1, 1e464 <metal_io_phys+0x36>
		return (io->physmap && offset < io->size
   1e446:	6880      	ldr	r0, [r0, #8]
   1e448:	4283      	cmp	r3, r0
   1e44a:	d20b      	bcs.n	1e464 <metal_io_phys+0x36>
			? io->physmap[page] + (offset & io->page_mask)
   1e44c:	6910      	ldr	r0, [r2, #16]
   1e44e:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1e450:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1e454:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1e456:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e45a:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1e45c:	4623      	mov	r3, r4
}
   1e45e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return io->ops.offset_to_phys(io, offset);
   1e462:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1e464:	f04f 30ff 	mov.w	r0, #4294967295
   1e468:	e7f5      	b.n	1e456 <metal_io_phys+0x28>

0001e46a <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   1e46a:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   1e46c:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   1e46e:	4605      	mov	r5, r0
   1e470:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   1e472:	b9e3      	cbnz	r3, 1e4ae <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1e474:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1e476:	1c62      	adds	r2, r4, #1
   1e478:	bf09      	itett	eq
   1e47a:	6843      	ldreq	r3, [r0, #4]
   1e47c:	400c      	andne	r4, r1
   1e47e:	681c      	ldreq	r4, [r3, #0]
   1e480:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   1e482:	4621      	mov	r1, r4
   1e484:	4628      	mov	r0, r5
   1e486:	f7ff ffd2 	bl	1e42e <metal_io_phys>
   1e48a:	4286      	cmp	r6, r0
   1e48c:	d007      	beq.n	1e49e <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   1e48e:	692b      	ldr	r3, [r5, #16]
   1e490:	3301      	adds	r3, #1
   1e492:	441c      	add	r4, r3
		} while (offset < io->size);
   1e494:	68ab      	ldr	r3, [r5, #8]
   1e496:	429c      	cmp	r4, r3
   1e498:	d3f3      	bcc.n	1e482 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   1e49a:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e49e:	6828      	ldr	r0, [r5, #0]
		: NULL);
   1e4a0:	1c43      	adds	r3, r0, #1
   1e4a2:	d007      	beq.n	1e4b4 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e4a4:	68ab      	ldr	r3, [r5, #8]
   1e4a6:	42a3      	cmp	r3, r4
   1e4a8:	d904      	bls.n	1e4b4 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   1e4aa:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   1e4ac:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1e4ae:	4798      	blx	r3
   1e4b0:	4604      	mov	r4, r0
   1e4b2:	e7f4      	b.n	1e49e <metal_io_phys_to_virt+0x34>
		: NULL);
   1e4b4:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   1e4b6:	e7f9      	b.n	1e4ac <metal_io_phys_to_virt+0x42>

0001e4b8 <virtqueue_create>:
{
   1e4b8:	b530      	push	{r4, r5, lr}
   1e4ba:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1e4bc:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1e4c0:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1e4c2:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1e4c4:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1e4c6:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1e4c8:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1e4ca:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1e4cc:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1e4ce:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1e4d0:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e4d4:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1e4d8:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e4dc:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e4de:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e4e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1e4e4:	1c6a      	adds	r2, r5, #1
   1e4e6:	4413      	add	r3, r2
   1e4e8:	426d      	negs	r5, r5
   1e4ea:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1e4ec:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e4ee:	6983      	ldr	r3, [r0, #24]
   1e4f0:	b953      	cbnz	r3, 1e508 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1e4f2:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1e4f4:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1e4f6:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1e4f8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1e4fc:	db06      	blt.n	1e50c <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1e4fe:	2300      	movs	r3, #0
   1e500:	7393      	strb	r3, [r2, #14]
   1e502:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e506:	73d3      	strb	r3, [r2, #15]
}
   1e508:	2000      	movs	r0, #0
   1e50a:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1e50c:	3301      	adds	r3, #1
   1e50e:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1e510:	e7f0      	b.n	1e4f4 <virtqueue_create+0x3c>

0001e512 <virtqueue_add_buffer>:
{
   1e512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1e516:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1e51a:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e51c:	4655      	mov	r5, sl
   1e51e:	2600      	movs	r6, #0
{
   1e520:	b085      	sub	sp, #20
	needed = readable + writable;
   1e522:	eb02 0803 	add.w	r8, r2, r3
{
   1e526:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1e528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e52a:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1e52e:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1e532:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1e534:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1e538:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1e53c:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e53e:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1e540:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e542:	45b0      	cmp	r8, r6
   1e544:	dc1a      	bgt.n	1e57c <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1e546:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1e548:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1e54a:	eba3 030b 	sub.w	r3, r3, fp
   1e54e:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1e550:	69e3      	ldr	r3, [r4, #28]
   1e552:	8961      	ldrh	r1, [r4, #10]
   1e554:	885a      	ldrh	r2, [r3, #2]
   1e556:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1e558:	400a      	ands	r2, r1
   1e55a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1e55e:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e562:	f3bf 8f5b 	dmb	ish
}
   1e566:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1e568:	69e2      	ldr	r2, [r4, #28]
   1e56a:	8853      	ldrh	r3, [r2, #2]
   1e56c:	3301      	adds	r3, #1
   1e56e:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e570:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1e572:	3301      	adds	r3, #1
   1e574:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e576:	b005      	add	sp, #20
   1e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1e57c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1e57e:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e580:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1e584:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1e588:	9302      	str	r3, [sp, #8]
   1e58a:	6803      	ldr	r3, [r0, #0]
   1e58c:	9203      	str	r2, [sp, #12]
   1e58e:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1e590:	6883      	ldr	r3, [r0, #8]
   1e592:	3708      	adds	r7, #8
   1e594:	4299      	cmp	r1, r3
   1e596:	bf28      	it	cs
   1e598:	f04f 31ff 	movcs.w	r1, #4294967295
   1e59c:	f7ff ff47 	bl	1e42e <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1e5a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e5a4:	5098      	str	r0, [r3, r2]
   1e5a6:	2200      	movs	r2, #0
   1e5a8:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1e5aa:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1e5ae:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1e5b0:	9a01      	ldr	r2, [sp, #4]
   1e5b2:	4296      	cmp	r6, r2
   1e5b4:	bfac      	ite	ge
   1e5b6:	2200      	movge	r2, #0
   1e5b8:	2201      	movlt	r2, #1
		if (i >= readable)
   1e5ba:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1e5bc:	bfd8      	it	le
   1e5be:	f042 0202 	orrle.w	r2, r2, #2
   1e5c2:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e5c4:	3601      	adds	r6, #1
   1e5c6:	89ed      	ldrh	r5, [r5, #14]
   1e5c8:	e7bb      	b.n	1e542 <virtqueue_add_buffer+0x30>

0001e5ca <virtqueue_get_buffer>:
{
   1e5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1e5cc:	b350      	cbz	r0, 1e624 <virtqueue_get_buffer+0x5a>
   1e5ce:	6a05      	ldr	r5, [r0, #32]
   1e5d0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1e5d2:	886b      	ldrh	r3, [r5, #2]
   1e5d4:	42a3      	cmp	r3, r4
   1e5d6:	d030      	beq.n	1e63a <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1e5d8:	1c63      	adds	r3, r4, #1
   1e5da:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1e5dc:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1e5de:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1e5e2:	3b01      	subs	r3, #1
   1e5e4:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1e5e6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1e5ea:	686b      	ldr	r3, [r5, #4]
   1e5ec:	b29e      	uxth	r6, r3
	if (len)
   1e5ee:	b109      	cbz	r1, 1e5f4 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1e5f0:	68ad      	ldr	r5, [r5, #8]
   1e5f2:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1e5f4:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1e5f8:	b29b      	uxth	r3, r3
   1e5fa:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1e5fe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1e602:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1e604:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1e606:	442f      	add	r7, r5
	dxp->ndescs--;
   1e608:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1e60a:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1e60c:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1e60e:	898d      	ldrh	r5, [r1, #12]
   1e610:	076f      	lsls	r7, r5, #29
   1e612:	d50e      	bpl.n	1e632 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1e614:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1e616:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1e618:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1e61a:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1e61c:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1e61e:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1e620:	b102      	cbz	r2, 1e624 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1e622:	8014      	strh	r4, [r2, #0]
}
   1e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1e626:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1e628:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1e62a:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1e62c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1e630:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1e632:	898d      	ldrh	r5, [r1, #12]
   1e634:	07ed      	lsls	r5, r5, #31
   1e636:	d4f6      	bmi.n	1e626 <virtqueue_get_buffer+0x5c>
   1e638:	e7ec      	b.n	1e614 <virtqueue_get_buffer+0x4a>
		return NULL;
   1e63a:	2000      	movs	r0, #0
   1e63c:	e7f2      	b.n	1e624 <virtqueue_get_buffer+0x5a>

0001e63e <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1e63e:	6983      	ldr	r3, [r0, #24]
   1e640:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1e644:	6898      	ldr	r0, [r3, #8]
   1e646:	4770      	bx	lr

0001e648 <virtqueue_get_available_buffer>:
{
   1e648:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1e64a:	f3bf 8f5b 	dmb	ish
{
   1e64e:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e650:	69c1      	ldr	r1, [r0, #28]
{
   1e652:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e654:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1e656:	884a      	ldrh	r2, [r1, #2]
{
   1e658:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e65a:	429a      	cmp	r2, r3
   1e65c:	d016      	beq.n	1e68c <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1e65e:	1c5a      	adds	r2, r3, #1
   1e660:	8602      	strh	r2, [r0, #48]	; 0x30
   1e662:	8942      	ldrh	r2, [r0, #10]
   1e664:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1e666:	4013      	ands	r3, r2
   1e668:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   1e66c:	888a      	ldrh	r2, [r1, #4]
   1e66e:	802a      	strh	r2, [r5, #0]
   1e670:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1e672:	6982      	ldr	r2, [r0, #24]
   1e674:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   1e676:	58d1      	ldr	r1, [r2, r3]
   1e678:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1e67a:	f7ff fef6 	bl	1e46a <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   1e67e:	882a      	ldrh	r2, [r5, #0]
   1e680:	69a3      	ldr	r3, [r4, #24]
   1e682:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e686:	689b      	ldr	r3, [r3, #8]
   1e688:	6033      	str	r3, [r6, #0]
}
   1e68a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e68c:	2000      	movs	r0, #0
   1e68e:	e7fc      	b.n	1e68a <virtqueue_get_available_buffer+0x42>

0001e690 <virtqueue_disable_cb>:
{
   1e690:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e692:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e694:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e696:	6912      	ldr	r2, [r2, #16]
   1e698:	0092      	lsls	r2, r2, #2
   1e69a:	d517      	bpl.n	1e6cc <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e69c:	b943      	cbnz	r3, 1e6b0 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e69e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1e6a0:	69c2      	ldr	r2, [r0, #28]
   1e6a2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1e6a4:	8944      	ldrh	r4, [r0, #10]
   1e6a6:	3b01      	subs	r3, #1
   1e6a8:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1e6aa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e6ae:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e6b0:	6803      	ldr	r3, [r0, #0]
   1e6b2:	699b      	ldr	r3, [r3, #24]
   1e6b4:	2b01      	cmp	r3, #1
   1e6b6:	d108      	bne.n	1e6ca <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e6b8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1e6ba:	6a02      	ldr	r2, [r0, #32]
   1e6bc:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1e6be:	8940      	ldrh	r0, [r0, #10]
   1e6c0:	3b01      	subs	r3, #1
   1e6c2:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1e6c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1e6c8:	8093      	strh	r3, [r2, #4]
}
   1e6ca:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e6cc:	b923      	cbnz	r3, 1e6d8 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1e6ce:	69c2      	ldr	r2, [r0, #28]
   1e6d0:	8813      	ldrh	r3, [r2, #0]
   1e6d2:	f043 0301 	orr.w	r3, r3, #1
   1e6d6:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e6d8:	6803      	ldr	r3, [r0, #0]
   1e6da:	699b      	ldr	r3, [r3, #24]
   1e6dc:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1e6de:	bf01      	itttt	eq
   1e6e0:	6a02      	ldreq	r2, [r0, #32]
   1e6e2:	8813      	ldrheq	r3, [r2, #0]
   1e6e4:	f043 0301 	orreq.w	r3, r3, #1
   1e6e8:	8013      	strheq	r3, [r2, #0]
}
   1e6ea:	e7ee      	b.n	1e6ca <virtqueue_disable_cb+0x3a>

0001e6ec <virtqueue_kick>:
{
   1e6ec:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1e6ee:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e6f2:	6803      	ldr	r3, [r0, #0]
{
   1e6f4:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e6f6:	691a      	ldr	r2, [r3, #16]
   1e6f8:	699b      	ldr	r3, [r3, #24]
   1e6fa:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1e6fe:	d01a      	beq.n	1e736 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e700:	b97b      	cbnz	r3, 1e722 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1e702:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1e704:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1e706:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1e708:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1e70a:	3b01      	subs	r3, #1
   1e70c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1e710:	8892      	ldrh	r2, [r2, #4]
   1e712:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1e714:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1e716:	b29b      	uxth	r3, r3
   1e718:	429a      	cmp	r2, r3
   1e71a:	d814      	bhi.n	1e746 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1e71c:	2300      	movs	r3, #0
   1e71e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1e720:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e722:	2b01      	cmp	r3, #1
   1e724:	d1fa      	bne.n	1e71c <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1e726:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1e728:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1e72a:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1e72c:	6941      	ldr	r1, [r0, #20]
   1e72e:	3b01      	subs	r3, #1
   1e730:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1e734:	e7ec      	b.n	1e710 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e736:	b963      	cbnz	r3, 1e752 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1e738:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1e73a:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1e73c:	43db      	mvns	r3, r3
   1e73e:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1e742:	2b00      	cmp	r3, #0
   1e744:	d0ea      	beq.n	1e71c <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1e746:	6923      	ldr	r3, [r4, #16]
   1e748:	2b00      	cmp	r3, #0
   1e74a:	d0e7      	beq.n	1e71c <virtqueue_kick+0x30>
		vq->notify(vq);
   1e74c:	4620      	mov	r0, r4
   1e74e:	4798      	blx	r3
   1e750:	e7e4      	b.n	1e71c <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e752:	2b01      	cmp	r3, #1
   1e754:	d1e2      	bne.n	1e71c <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1e756:	69c3      	ldr	r3, [r0, #28]
   1e758:	e7ef      	b.n	1e73a <virtqueue_kick+0x4e>

0001e75a <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1e75a:	69c3      	ldr	r3, [r0, #28]
   1e75c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1e75e:	8859      	ldrh	r1, [r3, #2]
   1e760:	4291      	cmp	r1, r2
   1e762:	d00a      	beq.n	1e77a <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1e764:	8941      	ldrh	r1, [r0, #10]
   1e766:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1e768:	400a      	ands	r2, r1
   1e76a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1e76e:	889a      	ldrh	r2, [r3, #4]
   1e770:	6983      	ldr	r3, [r0, #24]
   1e772:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1e776:	6898      	ldr	r0, [r3, #8]
	return len;
   1e778:	4770      	bx	lr
		return 0;
   1e77a:	2000      	movs	r0, #0
}
   1e77c:	4770      	bx	lr

0001e77e <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1e77e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1e782:	68c3      	ldr	r3, [r0, #12]
   1e784:	b103      	cbz	r3, 1e788 <virtqueue_notification+0xa>
		vq->callback(vq);
   1e786:	4718      	bx	r3
}
   1e788:	4770      	bx	lr

0001e78a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e78a:	f04f 32ff 	mov.w	r2, #4294967295
   1e78e:	f04f 33ff 	mov.w	r3, #4294967295
   1e792:	f7f8 b965 	b.w	16a60 <z_impl_k_sem_take>

0001e796 <rpmsg_unregister_endpoint>:
{
   1e796:	b570      	push	{r4, r5, r6, lr}
   1e798:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1e79a:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1e79c:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1e7a0:	4630      	mov	r0, r6
   1e7a2:	f7ff fff2 	bl	1e78a <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1e7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e7a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1e7ac:	2b7f      	cmp	r3, #127	; 0x7f
   1e7ae:	d80b      	bhi.n	1e7c8 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e7b0:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e7b2:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1e7b4:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e7b6:	f003 031f 	and.w	r3, r3, #31
   1e7ba:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1e7bc:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e7c0:	ea23 0302 	bic.w	r3, r3, r2
   1e7c4:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1e7c8:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1e7cc:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1e7d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1e7d4:	6011      	str	r1, [r2, #0]
	node->next = node;
   1e7d6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1e7da:	2300      	movs	r3, #0
   1e7dc:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1e7de:	4630      	mov	r0, r6
}
   1e7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e7e4:	f7f8 b900 	b.w	169e8 <z_impl_k_sem_give>

0001e7e8 <rpmsg_send_ns_message>:
{
   1e7e8:	b530      	push	{r4, r5, lr}
   1e7ea:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   1e7ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   1e7ee:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1e7f0:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e7f2:	2220      	movs	r2, #32
   1e7f4:	4601      	mov	r1, r0
   1e7f6:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1e7f8:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1e7fa:	f000 fe2c 	bl	1f456 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1e7fe:	2328      	movs	r3, #40	; 0x28
   1e800:	2201      	movs	r2, #1
   1e802:	4629      	mov	r1, r5
   1e804:	e9cd 3200 	strd	r3, r2, [sp]
   1e808:	4620      	mov	r0, r4
   1e80a:	2235      	movs	r2, #53	; 0x35
   1e80c:	ab02      	add	r3, sp, #8
   1e80e:	f7f6 f83b 	bl	14888 <rpmsg_send_offchannel_raw>
}
   1e812:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1e816:	b00d      	add	sp, #52	; 0x34
   1e818:	bd30      	pop	{r4, r5, pc}

0001e81a <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e81a:	b128      	cbz	r0, 1e828 <rpmsg_hold_rx_buffer+0xe>
   1e81c:	6a00      	ldr	r0, [r0, #32]
   1e81e:	b118      	cbz	r0, 1e828 <rpmsg_hold_rx_buffer+0xe>
   1e820:	b111      	cbz	r1, 1e828 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1e822:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e824:	b103      	cbz	r3, 1e828 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1e826:	4718      	bx	r3
}
   1e828:	4770      	bx	lr

0001e82a <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1e82a:	b130      	cbz	r0, 1e83a <rpmsg_release_rx_buffer+0x10>
   1e82c:	6a00      	ldr	r0, [r0, #32]
   1e82e:	b120      	cbz	r0, 1e83a <rpmsg_release_rx_buffer+0x10>
   1e830:	b119      	cbz	r1, 1e83a <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   1e832:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1e836:	b103      	cbz	r3, 1e83a <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1e838:	4718      	bx	r3
}
   1e83a:	4770      	bx	lr

0001e83c <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1e83c:	b130      	cbz	r0, 1e84c <rpmsg_get_tx_payload_buffer+0x10>
   1e83e:	6a00      	ldr	r0, [r0, #32]
   1e840:	b120      	cbz	r0, 1e84c <rpmsg_get_tx_payload_buffer+0x10>
   1e842:	b119      	cbz	r1, 1e84c <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1e844:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   1e848:	b103      	cbz	r3, 1e84c <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1e84a:	4718      	bx	r3
}
   1e84c:	2000      	movs	r0, #0
   1e84e:	4770      	bx	lr

0001e850 <rpmsg_get_endpoint>:
{
   1e850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e854:	4606      	mov	r6, r0
   1e856:	4688      	mov	r8, r1
   1e858:	4617      	mov	r7, r2
   1e85a:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1e85c:	6804      	ldr	r4, [r0, #0]
   1e85e:	42a6      	cmp	r6, r4
   1e860:	d101      	bne.n	1e866 <rpmsg_get_endpoint+0x16>
	return NULL;
   1e862:	2500      	movs	r5, #0
   1e864:	e023      	b.n	1e8ae <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e866:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e868:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e86c:	d002      	beq.n	1e874 <rpmsg_get_endpoint+0x24>
   1e86e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e870:	42bb      	cmp	r3, r7
   1e872:	d01c      	beq.n	1e8ae <rpmsg_get_endpoint+0x5e>
		if (name)
   1e874:	f1b8 0f00 	cmp.w	r8, #0
   1e878:	d101      	bne.n	1e87e <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e87a:	6824      	ldr	r4, [r4, #0]
   1e87c:	e7ef      	b.n	1e85e <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1e87e:	2220      	movs	r2, #32
   1e880:	4641      	mov	r1, r8
   1e882:	4628      	mov	r0, r5
   1e884:	f000 fdd5 	bl	1f432 <strncmp>
		if (!name || !name_match)
   1e888:	2800      	cmp	r0, #0
   1e88a:	d1f6      	bne.n	1e87a <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1e88c:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e890:	d002      	beq.n	1e898 <rpmsg_get_endpoint+0x48>
   1e892:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e894:	454b      	cmp	r3, r9
   1e896:	d00a      	beq.n	1e8ae <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e898:	1c7b      	adds	r3, r7, #1
   1e89a:	d00b      	beq.n	1e8b4 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1e89c:	6824      	ldr	r4, [r4, #0]
   1e89e:	42b4      	cmp	r4, r6
   1e8a0:	d0df      	beq.n	1e862 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e8a2:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e8a6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e8aa:	429f      	cmp	r7, r3
   1e8ac:	d1e7      	bne.n	1e87e <rpmsg_get_endpoint+0x2e>
}
   1e8ae:	4628      	mov	r0, r5
   1e8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1e8b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e8b6:	3301      	adds	r3, #1
   1e8b8:	d0f9      	beq.n	1e8ae <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1e8ba:	6824      	ldr	r4, [r4, #0]
   1e8bc:	42b4      	cmp	r4, r6
   1e8be:	d0d0      	beq.n	1e862 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1e8c0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1e8c4:	e7d6      	b.n	1e874 <rpmsg_get_endpoint+0x24>

0001e8c6 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1e8c6:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   1e8c8:	4604      	mov	r4, r0
   1e8ca:	b190      	cbz	r0, 1e8f2 <rpmsg_destroy_ept+0x2c>
   1e8cc:	6a03      	ldr	r3, [r0, #32]
   1e8ce:	b183      	cbz	r3, 1e8f2 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   1e8d0:	7802      	ldrb	r2, [r0, #0]
   1e8d2:	b14a      	cbz	r2, 1e8e8 <rpmsg_destroy_ept+0x22>
   1e8d4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1e8d8:	b133      	cbz	r3, 1e8e8 <rpmsg_destroy_ept+0x22>
   1e8da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e8dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e8e0:	d302      	bcc.n	1e8e8 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1e8e2:	2101      	movs	r1, #1
   1e8e4:	f7ff ff80 	bl	1e7e8 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1e8e8:	4620      	mov	r0, r4
}
   1e8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1e8ee:	f7ff bf52 	b.w	1e796 <rpmsg_unregister_endpoint>
}
   1e8f2:	bd10      	pop	{r4, pc}

0001e8f4 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1e8f4:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1e8f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e8fc:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1e900:	4770      	bx	lr

0001e902 <rpmsg_virtio_tx_callback>:
}
   1e902:	4770      	bx	lr

0001e904 <k_sem_give>:
   1e904:	f7f8 b870 	b.w	169e8 <z_impl_k_sem_give>

0001e908 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1e908:	f04f 32ff 	mov.w	r2, #4294967295
   1e90c:	f04f 33ff 	mov.w	r3, #4294967295
   1e910:	f7f8 b8a6 	b.w	16a60 <z_impl_k_sem_take>

0001e914 <rpmsg_virtio_release_tx_buffer>:
{
   1e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e916:	460c      	mov	r4, r1
   1e918:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   1e91a:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1e91e:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1e922:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   1e924:	b2b6      	uxth	r6, r6
   1e926:	f7ff ffef 	bl	1e908 <__metal_mutex_acquire>
	r_desc->idx = idx;
   1e92a:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   1e92e:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   1e932:	f1a4 0310 	sub.w	r3, r4, #16
   1e936:	f844 2c0c 	str.w	r2, [r4, #-12]
   1e93a:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   1e93e:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   1e942:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   1e946:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1e94a:	4638      	mov	r0, r7
   1e94c:	6013      	str	r3, [r2, #0]
   1e94e:	f7ff ffd9 	bl	1e904 <k_sem_give>
}
   1e952:	2000      	movs	r0, #0
   1e954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e956 <rpmsg_virtio_ns_callback>:
{
   1e956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1e95a:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   1e95c:	2a28      	cmp	r2, #40	; 0x28
{
   1e95e:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1e960:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   1e964:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1e966:	d126      	bne.n	1e9b6 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e968:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e96a:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e96c:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1e96e:	42a1      	cmp	r1, r4
   1e970:	bf28      	it	cs
   1e972:	f04f 31ff 	movcs.w	r1, #4294967295
   1e976:	2320      	movs	r3, #32
   1e978:	466a      	mov	r2, sp
   1e97a:	f7ff fcaf 	bl	1e2dc <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1e97e:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   1e982:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1e986:	4630      	mov	r0, r6
   1e988:	f7ff ffbe 	bl	1e908 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e98c:	4643      	mov	r3, r8
   1e98e:	f04f 32ff 	mov.w	r2, #4294967295
   1e992:	4669      	mov	r1, sp
   1e994:	4628      	mov	r0, r5
   1e996:	f7ff ff5b 	bl	1e850 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e99c:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e99e:	07db      	lsls	r3, r3, #31
   1e9a0:	d519      	bpl.n	1e9d6 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   1e9a2:	b960      	cbnz	r0, 1e9be <rpmsg_virtio_ns_callback+0x68>
   1e9a4:	4630      	mov	r0, r6
   1e9a6:	f7ff ffad 	bl	1e904 <k_sem_give>
		if (rdev->ns_unbind_cb)
   1e9aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   1e9ac:	b11b      	cbz	r3, 1e9b6 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   1e9ae:	4642      	mov	r2, r8
   1e9b0:	4669      	mov	r1, sp
   1e9b2:	4628      	mov	r0, r5
   1e9b4:	4798      	blx	r3
}
   1e9b6:	2000      	movs	r0, #0
   1e9b8:	b008      	add	sp, #32
   1e9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1e9be:	f04f 33ff 	mov.w	r3, #4294967295
   1e9c2:	6283      	str	r3, [r0, #40]	; 0x28
   1e9c4:	4630      	mov	r0, r6
   1e9c6:	f7ff ff9d 	bl	1e904 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1e9ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e9cc:	2b00      	cmp	r3, #0
   1e9ce:	d0ec      	beq.n	1e9aa <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   1e9d0:	4620      	mov	r0, r4
   1e9d2:	4798      	blx	r3
   1e9d4:	e7e9      	b.n	1e9aa <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   1e9d6:	b920      	cbnz	r0, 1e9e2 <rpmsg_virtio_ns_callback+0x8c>
   1e9d8:	4630      	mov	r0, r6
   1e9da:	f7ff ff93 	bl	1e904 <k_sem_give>
			if (rdev->ns_bind_cb)
   1e9de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1e9e0:	e7e4      	b.n	1e9ac <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   1e9e2:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1e9e6:	4630      	mov	r0, r6
   1e9e8:	f7ff ff8c 	bl	1e904 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1e9ec:	e7e3      	b.n	1e9b6 <rpmsg_virtio_ns_callback+0x60>

0001e9ee <rpmsg_virtio_get_rx_buffer>:
{
   1e9ee:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1e9f0:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   1e9f4:	4613      	mov	r3, r2
   1e9f6:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1e9f8:	b925      	cbnz	r5, 1ea04 <rpmsg_virtio_get_rx_buffer+0x16>
}
   1e9fa:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1e9fc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1ea00:	f7ff bde3 	b.w	1e5ca <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1ea04:	2d01      	cmp	r5, #1
   1ea06:	d106      	bne.n	1ea16 <rpmsg_virtio_get_rx_buffer+0x28>
}
   1ea08:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1ea0a:	460a      	mov	r2, r1
   1ea0c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1ea10:	4619      	mov	r1, r3
   1ea12:	f7ff be19 	b.w	1e648 <virtqueue_get_available_buffer>
}
   1ea16:	2000      	movs	r0, #0
   1ea18:	bc30      	pop	{r4, r5}
   1ea1a:	4770      	bx	lr

0001ea1c <rpmsg_virtio_return_buffer>:
{
   1ea1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ea1e:	460c      	mov	r4, r1
   1ea20:	4619      	mov	r1, r3
   1ea22:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   1ea26:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1ea28:	b95d      	cbnz	r5, 1ea42 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1ea2a:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1ea2c:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1ea30:	2301      	movs	r3, #1
   1ea32:	462a      	mov	r2, r5
   1ea34:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1ea38:	a902      	add	r1, sp, #8
   1ea3a:	f7ff fd6a 	bl	1e512 <virtqueue_add_buffer>
}
   1ea3e:	b004      	add	sp, #16
   1ea40:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1ea42:	2d01      	cmp	r5, #1
   1ea44:	d1fb      	bne.n	1ea3e <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1ea46:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   1ea4a:	b004      	add	sp, #16
   1ea4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1ea50:	f7f5 befe 	b.w	14850 <virtqueue_add_consumed_buffer>

0001ea54 <rpmsg_virtio_release_rx_buffer>:
{
   1ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea56:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1ea58:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1ea5c:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1ea60:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1ea62:	b2b6      	uxth	r6, r6
{
   1ea64:	460d      	mov	r5, r1
   1ea66:	f7ff ff4f 	bl	1e908 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1ea6a:	4631      	mov	r1, r6
   1ea6c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1ea70:	f7ff fde5 	bl	1e63e <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1ea74:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1ea76:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1ea78:	f1a5 0110 	sub.w	r1, r5, #16
   1ea7c:	4620      	mov	r0, r4
   1ea7e:	f7ff ffcd 	bl	1ea1c <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   1ea82:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1ea86:	f7ff fe31 	bl	1e6ec <virtqueue_kick>
   1ea8a:	4638      	mov	r0, r7
}
   1ea8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ea90:	f7ff bf38 	b.w	1e904 <k_sem_give>

0001ea94 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1ea94:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   1ea96:	b148      	cbz	r0, 1eaac <rpmsg_virtio_shm_pool_get_buffer+0x18>
   1ea98:	b149      	cbz	r1, 1eaae <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   1ea9a:	6843      	ldr	r3, [r0, #4]
   1ea9c:	428b      	cmp	r3, r1
   1ea9e:	d306      	bcc.n	1eaae <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1eaa0:	6882      	ldr	r2, [r0, #8]
   1eaa2:	6804      	ldr	r4, [r0, #0]
   1eaa4:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   1eaa6:	1a5b      	subs	r3, r3, r1
   1eaa8:	6043      	str	r3, [r0, #4]
	return buffer;
   1eaaa:	18a0      	adds	r0, r4, r2
}
   1eaac:	bd10      	pop	{r4, pc}
		return NULL;
   1eaae:	2000      	movs	r0, #0
   1eab0:	e7fc      	b.n	1eaac <rpmsg_virtio_shm_pool_get_buffer+0x18>

0001eab2 <rpmsg_virtio_get_tx_payload_buffer>:
{
   1eab2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1eab6:	4605      	mov	r5, r0
   1eab8:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1eabc:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1eabe:	6a03      	ldr	r3, [r0, #32]
   1eac0:	4617      	mov	r7, r2
   1eac2:	681b      	ldr	r3, [r3, #0]
   1eac4:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1eac6:	0743      	lsls	r3, r0, #29
   1eac8:	d403      	bmi.n	1ead2 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1eaca:	2000      	movs	r0, #0
}
   1eacc:	b002      	add	sp, #8
   1eace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1ead2:	f643 2398 	movw	r3, #15000	; 0x3a98
   1ead6:	2f00      	cmp	r7, #0
   1ead8:	bf18      	it	ne
   1eada:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   1eadc:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   1eae0:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   1eae4:	4640      	mov	r0, r8
   1eae6:	f7ff ff0f 	bl	1e908 <__metal_mutex_acquire>
	return list->next == list;
   1eaea:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   1eaee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   1eaf2:	4554      	cmp	r4, sl
   1eaf4:	f8d3 9018 	ldr.w	r9, [r3, #24]
   1eaf8:	d025      	beq.n	1eb46 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   1eafa:	b324      	cbz	r4, 1eb46 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   1eafc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1eb00:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   1eb02:	6822      	ldr	r2, [r4, #0]
   1eb04:	601a      	str	r2, [r3, #0]
	node->next = node;
   1eb06:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   1eb0a:	f1b9 0f00 	cmp.w	r9, #0
   1eb0e:	d10e      	bne.n	1eb2e <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   1eb10:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1eb14:	6033      	str	r3, [r6, #0]
   1eb16:	4640      	mov	r0, r8
   1eb18:	f7ff fef4 	bl	1e904 <k_sem_give>
	rp_hdr->reserved = idx;
   1eb1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1eb20:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1eb24:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1eb26:	6833      	ldr	r3, [r6, #0]
   1eb28:	3b10      	subs	r3, #16
   1eb2a:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1eb2c:	e7ce      	b.n	1eacc <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   1eb2e:	f1b9 0f01 	cmp.w	r9, #1
   1eb32:	d1f0      	bne.n	1eb16 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   1eb34:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1eb36:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   1eb3a:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1eb3e:	f7ff fd7e 	bl	1e63e <virtqueue_get_buffer_length>
   1eb42:	6030      	str	r0, [r6, #0]
   1eb44:	e7e7      	b.n	1eb16 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   1eb46:	f1b9 0f00 	cmp.w	r9, #0
   1eb4a:	d12a      	bne.n	1eba2 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1eb4c:	4631      	mov	r1, r6
   1eb4e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1eb52:	f10d 0206 	add.w	r2, sp, #6
   1eb56:	f7ff fd38 	bl	1e5ca <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1eb5a:	4604      	mov	r4, r0
   1eb5c:	2800      	cmp	r0, #0
   1eb5e:	d1da      	bne.n	1eb16 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   1eb60:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1eb64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1eb66:	b953      	cbnz	r3, 1eb7e <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   1eb68:	4640      	mov	r0, r8
   1eb6a:	f7ff fecb 	bl	1e904 <k_sem_give>
		if (rp_hdr || !tick_count)
   1eb6e:	2f00      	cmp	r7, #0
   1eb70:	d0ab      	beq.n	1eaca <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1eb72:	2021      	movs	r0, #33	; 0x21
   1eb74:	2100      	movs	r1, #0
   1eb76:	f7f9 fb6f 	bl	18258 <z_impl_k_sleep>
		tick_count--;
   1eb7a:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   1eb7c:	e7b2      	b.n	1eae4 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1eb7e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   1eb82:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   1eb86:	f7ff ff85 	bl	1ea94 <rpmsg_virtio_shm_pool_get_buffer>
   1eb8a:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1eb8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   1eb90:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1eb94:	6033      	str	r3, [r6, #0]
   1eb96:	4640      	mov	r0, r8
   1eb98:	f7ff feb4 	bl	1e904 <k_sem_give>
		if (rp_hdr || !tick_count)
   1eb9c:	2c00      	cmp	r4, #0
   1eb9e:	d0e6      	beq.n	1eb6e <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   1eba0:	e7bc      	b.n	1eb1c <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   1eba2:	f1b9 0f01 	cmp.w	r9, #1
   1eba6:	d1df      	bne.n	1eb68 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1eba8:	4632      	mov	r2, r6
   1ebaa:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1ebae:	f10d 0106 	add.w	r1, sp, #6
   1ebb2:	f7ff fd49 	bl	1e648 <virtqueue_get_available_buffer>
   1ebb6:	4604      	mov	r4, r0
   1ebb8:	e7ed      	b.n	1eb96 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0001ebba <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   1ebba:	b120      	cbz	r0, 1ebc6 <rpmsg_virtio_init_shm_pool+0xc>
   1ebbc:	b119      	cbz	r1, 1ebc6 <rpmsg_virtio_init_shm_pool+0xc>
   1ebbe:	b112      	cbz	r2, 1ebc6 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   1ebc0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1ebc4:	6001      	str	r1, [r0, #0]
}
   1ebc6:	4770      	bx	lr

0001ebc8 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1ebc8:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   1ebca:	4604      	mov	r4, r0
   1ebcc:	b918      	cbnz	r0, 1ebd6 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   1ebce:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   1ebd0:	3834      	subs	r0, #52	; 0x34
   1ebd2:	f7ff fe78 	bl	1e8c6 <rpmsg_destroy_ept>
	return list->next == list;
   1ebd6:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   1ebd8:	4284      	cmp	r4, r0
   1ebda:	d1f9      	bne.n	1ebd0 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   1ebdc:	2300      	movs	r3, #0
		rvdev->svq = 0;
   1ebde:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   1ebe2:	e7f4      	b.n	1ebce <rpmsg_deinit_vdev+0x6>

0001ebe4 <zcbor_new_state>:
	return true;
}

void zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
   1ebe4:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
   1ebe6:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
   1ebe8:	441a      	add	r2, r3
	state_array[0].elem_count = elem_count;
   1ebea:	9b02      	ldr	r3, [sp, #8]
	state_array[0].indefinite_length_array = false;
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
   1ebec:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
   1ebee:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
   1ebf0:	f04f 0300 	mov.w	r3, #0
	state_array[0].payload_end = payload + payload_len;
   1ebf4:	60c2      	str	r2, [r0, #12]
	state_array[0].indefinite_length_array = false;
   1ebf6:	8203      	strh	r3, [r0, #16]
	if(n_states < 2) {
   1ebf8:	d801      	bhi.n	1ebfe <zcbor_new_state+0x1a>
	state_array[0].constant_state = NULL;
   1ebfa:	6143      	str	r3, [r0, #20]
	state_array[0].constant_state->stop_on_error = false;
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
}
   1ebfc:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
   1ebfe:	2218      	movs	r2, #24
   1ec00:	434a      	muls	r2, r1
   1ec02:	3a18      	subs	r2, #24
   1ec04:	1884      	adds	r4, r0, r2
   1ec06:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
   1ec08:	5083      	str	r3, [r0, r2]
	state_array[0].constant_state->num_backups = n_states - 2;
   1ec0a:	6942      	ldr	r2, [r0, #20]
   1ec0c:	1e8c      	subs	r4, r1, #2
   1ec0e:	6094      	str	r4, [r2, #8]
	state_array[0].constant_state->current_backup = 0;
   1ec10:	6942      	ldr	r2, [r0, #20]
	if (n_states > 2) {
   1ec12:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
   1ec14:	6053      	str	r3, [r2, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
   1ec16:	6942      	ldr	r2, [r0, #20]
   1ec18:	60d3      	str	r3, [r2, #12]
	state_array[0].constant_state->stop_on_error = false;
   1ec1a:	6942      	ldr	r2, [r0, #20]
   1ec1c:	7413      	strb	r3, [r2, #16]
		state_array[0].constant_state->backup_list = &state_array[1];
   1ec1e:	bf1e      	ittt	ne
   1ec20:	6943      	ldrne	r3, [r0, #20]
   1ec22:	3018      	addne	r0, #24
   1ec24:	6018      	strne	r0, [r3, #0]
   1ec26:	e7e9      	b.n	1ebfc <zcbor_new_state+0x18>

0001ec28 <zcbor_check_error.isra.0>:
   1ec28:	b130      	cbz	r0, 1ec38 <zcbor_check_error.isra.0+0x10>
   1ec2a:	7c03      	ldrb	r3, [r0, #16]
   1ec2c:	b123      	cbz	r3, 1ec38 <zcbor_check_error.isra.0+0x10>
   1ec2e:	68c0      	ldr	r0, [r0, #12]
   1ec30:	fab0 f080 	clz	r0, r0
   1ec34:	0940      	lsrs	r0, r0, #5
   1ec36:	4770      	bx	lr
   1ec38:	2001      	movs	r0, #1
}
   1ec3a:	4770      	bx	lr

0001ec3c <zcbor_error>:
	}
}

/** Write the provided error to the error state. */
static inline void zcbor_error(zcbor_state_t *state, int err)
{
   1ec3c:	b508      	push	{r3, lr}
   1ec3e:	6942      	ldr	r2, [r0, #20]
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
   1ec40:	4610      	mov	r0, r2
   1ec42:	f7ff fff1 	bl	1ec28 <zcbor_check_error.isra.0>
   1ec46:	b108      	cbz	r0, 1ec4c <zcbor_error+0x10>
#endif
	{
		if (state->constant_state) {
   1ec48:	b102      	cbz	r2, 1ec4c <zcbor_error+0x10>
			state->constant_state->error = err;
   1ec4a:	60d1      	str	r1, [r2, #12]
		}
	}
}
   1ec4c:	bd08      	pop	{r3, pc}

0001ec4e <initial_checks>:
		ZCBOR_ERR(err); \
	} \
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
   1ec4e:	b508      	push	{r3, lr}
   1ec50:	4602      	mov	r2, r0
	ZCBOR_CHECK_ERROR();
   1ec52:	6940      	ldr	r0, [r0, #20]
   1ec54:	f7ff ffe8 	bl	1ec28 <zcbor_check_error.isra.0>
   1ec58:	b138      	cbz	r0, 1ec6a <initial_checks+0x1c>
	ZCBOR_CHECK_PAYLOAD();
   1ec5a:	6811      	ldr	r1, [r2, #0]
   1ec5c:	68d3      	ldr	r3, [r2, #12]
   1ec5e:	4299      	cmp	r1, r3
   1ec60:	d304      	bcc.n	1ec6c <initial_checks+0x1e>
   1ec62:	2108      	movs	r1, #8
   1ec64:	4610      	mov	r0, r2
   1ec66:	f7ff ffe9 	bl	1ec3c <zcbor_error>
	ZCBOR_CHECK_ERROR();
   1ec6a:	2000      	movs	r0, #0
	return true;
}
   1ec6c:	bd08      	pop	{r3, pc}

0001ec6e <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(zcbor_state_t *state,
		void *const result, uint_fast32_t result_len)
{
   1ec6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec72:	4604      	mov	r4, r0
   1ec74:	460d      	mov	r5, r1
	zcbor_trace();
	zcbor_assert_state(result_len != 0, "0-length result not supported.\r\n");
   1ec76:	4690      	mov	r8, r2
   1ec78:	b922      	cbnz	r2, 1ec84 <value_extract+0x16>
   1ec7a:	210e      	movs	r1, #14
#endif /* CONFIG_BIG_ENDIAN */
	} else {
		uint_fast32_t len = additional_len(additional);

		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
   1ec7c:	4620      	mov	r0, r4
   1ec7e:	f7ff ffdd 	bl	1ec3c <zcbor_error>
   1ec82:	e005      	b.n	1ec90 <value_extract+0x22>
	zcbor_assert_state(result != NULL, NULL);
   1ec84:	2900      	cmp	r1, #0
   1ec86:	d0f8      	beq.n	1ec7a <value_extract+0xc>
	INITIAL_CHECKS();
   1ec88:	f7ff ffe1 	bl	1ec4e <initial_checks>
   1ec8c:	4607      	mov	r7, r0
   1ec8e:	b918      	cbnz	r0, 1ec98 <value_extract+0x2a>
	zcbor_assert_state(result_len != 0, "0-length result not supported.\r\n");
   1ec90:	2700      	movs	r7, #0
		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
}
   1ec92:	4638      	mov	r0, r7
   1ec94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
   1ec98:	68a3      	ldr	r3, [r4, #8]
   1ec9a:	b90b      	cbnz	r3, 1eca0 <value_extract+0x32>
   1ec9c:	2103      	movs	r1, #3
   1ec9e:	e7ed      	b.n	1ec7c <value_extract+0xe>
	uint8_t additional = ADDITIONAL(*state->payload);
   1eca0:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   1eca2:	4642      	mov	r2, r8
   1eca4:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
   1eca6:	6063      	str	r3, [r4, #4]
	(state->payload)++;
   1eca8:	3301      	adds	r3, #1
   1ecaa:	2100      	movs	r1, #0
   1ecac:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
   1ecae:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
   1ecb2:	6023      	str	r3, [r4, #0]
   1ecb4:	f000 fbad 	bl	1f412 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
   1ecb8:	2e17      	cmp	r6, #23
   1ecba:	d804      	bhi.n	1ecc6 <value_extract+0x58>
		u8_result[0] = additional;
   1ecbc:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
   1ecbe:	68a3      	ldr	r3, [r4, #8]
   1ecc0:	3b01      	subs	r3, #1
   1ecc2:	60a3      	str	r3, [r4, #8]
	return true;
   1ecc4:	e7e5      	b.n	1ec92 <value_extract+0x24>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
   1ecc6:	3e18      	subs	r6, #24
   1ecc8:	b2f2      	uxtb	r2, r6
   1ecca:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
   1eccc:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
   1ecce:	d807      	bhi.n	1ece0 <value_extract+0x72>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
   1ecd0:	2101      	movs	r1, #1
   1ecd2:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
   1ecd4:	4588      	cmp	r8, r1
   1ecd6:	d207      	bcs.n	1ece8 <value_extract+0x7a>
   1ecd8:	3b01      	subs	r3, #1
   1ecda:	2105      	movs	r1, #5
   1ecdc:	6023      	str	r3, [r4, #0]
   1ecde:	e7cd      	b.n	1ec7c <value_extract+0xe>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
   1ece0:	3b01      	subs	r3, #1
   1ece2:	2107      	movs	r1, #7
   1ece4:	6023      	str	r3, [r4, #0]
   1ece6:	e7c9      	b.n	1ec7c <value_extract+0xe>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
   1ece8:	68e0      	ldr	r0, [r4, #12]
   1ecea:	185a      	adds	r2, r3, r1
   1ecec:	4290      	cmp	r0, r2
   1ecee:	d203      	bcs.n	1ecf8 <value_extract+0x8a>
   1ecf0:	3b01      	subs	r3, #1
   1ecf2:	2108      	movs	r1, #8
   1ecf4:	6023      	str	r3, [r4, #0]
   1ecf6:	e7c1      	b.n	1ec7c <value_extract+0xe>
   1ecf8:	1e4b      	subs	r3, r1, #1
   1ecfa:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
   1ecfc:	6822      	ldr	r2, [r4, #0]
   1ecfe:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
   1ed00:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
   1ed02:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
   1ed06:	d2f9      	bcs.n	1ecfc <value_extract+0x8e>
		(state->payload) += len;
   1ed08:	6823      	ldr	r3, [r4, #0]
   1ed0a:	440b      	add	r3, r1
   1ed0c:	6023      	str	r3, [r4, #0]
   1ed0e:	e7d6      	b.n	1ecbe <value_extract+0x50>

0001ed10 <zcbor_int_decode>:


bool zcbor_int_decode(zcbor_state_t *state, void *result_int, size_t int_size)
{
   1ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed12:	4605      	mov	r5, r0
   1ed14:	460c      	mov	r4, r1
   1ed16:	4616      	mov	r6, r2
	INITIAL_CHECKS();
   1ed18:	f7ff ff99 	bl	1ec4e <initial_checks>
   1ed1c:	b148      	cbz	r0, 1ed32 <zcbor_int_decode+0x22>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   1ed1e:	682b      	ldr	r3, [r5, #0]
   1ed20:	781b      	ldrb	r3, [r3, #0]
	uint8_t *result_uint8 = (uint8_t *)result_int;
	int8_t *result_int8 = (int8_t *)result_int;

	if (major_type != ZCBOR_MAJOR_TYPE_PINT
   1ed22:	2b3f      	cmp	r3, #63	; 0x3f
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   1ed24:	ea4f 1753 	mov.w	r7, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
   1ed28:	d905      	bls.n	1ed36 <zcbor_int_decode+0x26>
		&& major_type != ZCBOR_MAJOR_TYPE_NINT) {
		/* Value to be read doesn't have the right type. */
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
   1ed2a:	210a      	movs	r1, #10
	if (result_int8[0] < 0) {
#else
	if (result_int8[int_size - 1] < 0) {
#endif
		/* Value is too large to fit in a signed integer. */
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
   1ed2c:	4628      	mov	r0, r5
   1ed2e:	f7ff ff85 	bl	1ec3c <zcbor_error>
	INITIAL_CHECKS();
   1ed32:	2000      	movs	r0, #0
   1ed34:	e017      	b.n	1ed66 <zcbor_int_decode+0x56>
	if (!value_extract(state, result_int, int_size)) {
   1ed36:	4632      	mov	r2, r6
   1ed38:	4621      	mov	r1, r4
   1ed3a:	4628      	mov	r0, r5
   1ed3c:	f7ff ff97 	bl	1ec6e <value_extract>
   1ed40:	2800      	cmp	r0, #0
   1ed42:	d0f6      	beq.n	1ed32 <zcbor_int_decode+0x22>
	if (result_int8[int_size - 1] < 0) {
   1ed44:	4426      	add	r6, r4
   1ed46:	f916 3c01 	ldrsb.w	r3, [r6, #-1]
   1ed4a:	2b00      	cmp	r3, #0
   1ed4c:	da06      	bge.n	1ed5c <zcbor_int_decode+0x4c>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
   1ed4e:	686b      	ldr	r3, [r5, #4]
   1ed50:	2105      	movs	r1, #5
   1ed52:	602b      	str	r3, [r5, #0]
   1ed54:	68ab      	ldr	r3, [r5, #8]
   1ed56:	3301      	adds	r3, #1
   1ed58:	60ab      	str	r3, [r5, #8]
   1ed5a:	e7e7      	b.n	1ed2c <zcbor_int_decode+0x1c>
	}

	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
   1ed5c:	2f01      	cmp	r7, #1
   1ed5e:	d102      	bne.n	1ed66 <zcbor_int_decode+0x56>
   1ed60:	4621      	mov	r1, r4
		/* Convert from CBOR's representation by flipping all bits. */
		for (int i = 0; i < int_size; i++) {
   1ed62:	42b1      	cmp	r1, r6
   1ed64:	d100      	bne.n	1ed68 <zcbor_int_decode+0x58>
			result_uint8[i] = (uint8_t)~result_uint8[i];
		}
	}

	return true;
}
   1ed66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result_uint8[i] = (uint8_t)~result_uint8[i];
   1ed68:	780b      	ldrb	r3, [r1, #0]
   1ed6a:	43db      	mvns	r3, r3
   1ed6c:	f801 3b01 	strb.w	r3, [r1], #1
		for (int i = 0; i < int_size; i++) {
   1ed70:	e7f7      	b.n	1ed62 <zcbor_int_decode+0x52>

0001ed72 <zcbor_int32_decode>:


bool zcbor_int32_decode(zcbor_state_t *state, int32_t *result)
{
	return zcbor_int_decode(state, result, sizeof(*result));
   1ed72:	2204      	movs	r2, #4
   1ed74:	f7ff bfcc 	b.w	1ed10 <zcbor_int_decode>

0001ed78 <zcbor_new_decode_state>:


void zcbor_new_decode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
   1ed78:	f7ff bf34 	b.w	1ebe4 <zcbor_new_state>

0001ed7c <zcbor_check_error.isra.0>:
	return !(cs && cs->stop_on_error && cs->error);
   1ed7c:	b130      	cbz	r0, 1ed8c <zcbor_check_error.isra.0+0x10>
   1ed7e:	7c03      	ldrb	r3, [r0, #16]
   1ed80:	b123      	cbz	r3, 1ed8c <zcbor_check_error.isra.0+0x10>
   1ed82:	68c0      	ldr	r0, [r0, #12]
   1ed84:	fab0 f080 	clz	r0, r0
   1ed88:	0940      	lsrs	r0, r0, #5
   1ed8a:	4770      	bx	lr
   1ed8c:	2001      	movs	r0, #1
}
   1ed8e:	4770      	bx	lr

0001ed90 <zcbor_error>:
{
   1ed90:	b508      	push	{r3, lr}
   1ed92:	6942      	ldr	r2, [r0, #20]
	if (zcbor_check_error(state))
   1ed94:	4610      	mov	r0, r2
   1ed96:	f7ff fff1 	bl	1ed7c <zcbor_check_error.isra.0>
   1ed9a:	b108      	cbz	r0, 1eda0 <zcbor_error+0x10>
		if (state->constant_state) {
   1ed9c:	b102      	cbz	r2, 1eda0 <zcbor_error+0x10>
			state->constant_state->error = err;
   1ed9e:	60d1      	str	r1, [r2, #12]
}
   1eda0:	bd08      	pop	{r3, pc}

0001eda2 <encode_header_byte>:
{
   1eda2:	b538      	push	{r3, r4, r5, lr}
   1eda4:	4604      	mov	r4, r0
	ZCBOR_CHECK_ERROR();
   1eda6:	6940      	ldr	r0, [r0, #20]
   1eda8:	f7ff ffe8 	bl	1ed7c <zcbor_check_error.isra.0>
   1edac:	b138      	cbz	r0, 1edbe <encode_header_byte+0x1c>
	ZCBOR_CHECK_PAYLOAD();
   1edae:	6823      	ldr	r3, [r4, #0]
   1edb0:	68e5      	ldr	r5, [r4, #12]
   1edb2:	42ab      	cmp	r3, r5
   1edb4:	d305      	bcc.n	1edc2 <encode_header_byte+0x20>
   1edb6:	2108      	movs	r1, #8
   1edb8:	4620      	mov	r0, r4
   1edba:	f7ff ffe9 	bl	1ed90 <zcbor_error>
	ZCBOR_CHECK_ERROR();
   1edbe:	2000      	movs	r0, #0
}
   1edc0:	bd38      	pop	{r3, r4, r5, pc}
	zcbor_assert_state(additional < 32, NULL);
   1edc2:	2a1f      	cmp	r2, #31
   1edc4:	d901      	bls.n	1edca <encode_header_byte+0x28>
   1edc6:	210e      	movs	r1, #14
   1edc8:	e7f6      	b.n	1edb8 <encode_header_byte+0x16>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
   1edca:	1c5d      	adds	r5, r3, #1
   1edcc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   1edd0:	6025      	str	r5, [r4, #0]
   1edd2:	701a      	strb	r2, [r3, #0]
	return true;
   1edd4:	e7f4      	b.n	1edc0 <encode_header_byte+0x1e>

0001edd6 <value_encode.part.0>:
	}
	return result_len;
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   1edd6:	b570      	push	{r4, r5, r6, lr}
   1edd8:	4605      	mov	r5, r0
   1edda:	460e      	mov	r6, r1
		const void *const input, uint_fast32_t max_result_len)
{
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
   1eddc:	4610      	mov	r0, r2
   1edde:	4619      	mov	r1, r3
static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   1ede0:	4614      	mov	r4, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   1ede2:	f7f6 f89b 	bl	14f1c <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
   1ede6:	4622      	mov	r2, r4
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   1ede8:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
   1edea:	4631      	mov	r1, r6
   1edec:	4628      	mov	r0, r5
}
   1edee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
   1edf2:	f7f6 b8a9 	b.w	14f48 <value_encode_len>

0001edf6 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
   1edf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
   1edfa:	f8d0 900c 	ldr.w	r9, [r0, #12]
   1edfe:	6805      	ldr	r5, [r0, #0]
   1ee00:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1ee04:	eba9 0305 	sub.w	r3, r9, r5
   1ee08:	459a      	cmp	sl, r3
{
   1ee0a:	4604      	mov	r4, r0
   1ee0c:	460e      	mov	r6, r1
   1ee0e:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
   1ee10:	d907      	bls.n	1ee22 <str_encode+0x2c>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   1ee12:	2108      	movs	r1, #8
   1ee14:	4620      	mov	r0, r4
   1ee16:	f7ff ffbb 	bl	1ed90 <zcbor_error>
   1ee1a:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
   1ee1c:	4628      	mov	r0, r5
   1ee1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   1ee22:	460f      	mov	r7, r1
   1ee24:	f857 3b04 	ldr.w	r3, [r7], #4
   1ee28:	b143      	cbz	r3, 1ee3c <str_encode+0x46>
   1ee2a:	2104      	movs	r1, #4
   1ee2c:	4638      	mov	r0, r7
   1ee2e:	f7f6 f875 	bl	14f1c <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
   1ee32:	4455      	add	r5, sl
   1ee34:	3501      	adds	r5, #1
   1ee36:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   1ee38:	45a9      	cmp	r9, r5
   1ee3a:	d3ea      	bcc.n	1ee12 <str_encode+0x1c>
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   1ee3c:	2304      	movs	r3, #4
   1ee3e:	463a      	mov	r2, r7
   1ee40:	4641      	mov	r1, r8
   1ee42:	4620      	mov	r0, r4
   1ee44:	f7ff ffc7 	bl	1edd6 <value_encode.part.0>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
   1ee48:	4605      	mov	r5, r0
   1ee4a:	2800      	cmp	r0, #0
   1ee4c:	d0e5      	beq.n	1ee1a <str_encode+0x24>
	if (state->payload_mut != input->value) {
   1ee4e:	6820      	ldr	r0, [r4, #0]
   1ee50:	6831      	ldr	r1, [r6, #0]
   1ee52:	4288      	cmp	r0, r1
   1ee54:	d002      	beq.n	1ee5c <str_encode+0x66>
__ssp_bos_icheck3(memmove, void *, const void *)
   1ee56:	6872      	ldr	r2, [r6, #4]
   1ee58:	f000 fac1 	bl	1f3de <memmove>
	state->payload += input->len;
   1ee5c:	6823      	ldr	r3, [r4, #0]
   1ee5e:	6872      	ldr	r2, [r6, #4]
   1ee60:	4413      	add	r3, r2
   1ee62:	6023      	str	r3, [r4, #0]
	return true;
   1ee64:	e7da      	b.n	1ee1c <str_encode+0x26>

0001ee66 <zcbor_uint32_put>:
{
   1ee66:	b507      	push	{r0, r1, r2, lr}
   1ee68:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
   1ee6a:	2100      	movs	r1, #0
   1ee6c:	466a      	mov	r2, sp
   1ee6e:	e9cd 3100 	strd	r3, r1, [sp]
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   1ee72:	2308      	movs	r3, #8
   1ee74:	f7ff ffaf 	bl	1edd6 <value_encode.part.0>
}
   1ee78:	b003      	add	sp, #12
   1ee7a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee7e <zcbor_bstr_encode>:


bool zcbor_bstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_BSTR);
   1ee7e:	2202      	movs	r2, #2
   1ee80:	f7ff bfb9 	b.w	1edf6 <str_encode>

0001ee84 <zcbor_nil_put>:


bool zcbor_nil_put(zcbor_state_t *state, const void *unused)
{
	(void)unused;
	return primitive_put(state, 22);
   1ee84:	2316      	movs	r3, #22
{
   1ee86:	b507      	push	{r0, r1, r2, lr}
   1ee88:	9301      	str	r3, [sp, #4]
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   1ee8a:	2304      	movs	r3, #4
   1ee8c:	2107      	movs	r1, #7
   1ee8e:	eb0d 0203 	add.w	r2, sp, r3
   1ee92:	f7ff ffa0 	bl	1edd6 <value_encode.part.0>
}
   1ee96:	b003      	add	sp, #12
   1ee98:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee9c <zcbor_new_encode_state>:


void zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
   1ee9c:	f7ff bea2 	b.w	1ebe4 <zcbor_new_state>

0001eea0 <execute_packet>:
{
   1eea0:	460a      	mov	r2, r1
	parse_incoming_packet(NULL, packet, len);
   1eea2:	4601      	mov	r1, r0
   1eea4:	2000      	movs	r0, #0
   1eea6:	f7f6 bc21 	b.w	156ec <parse_incoming_packet>

0001eeaa <_nrf_rpc_cbor_proxy_handler>:
	nrf_rpc_decoding_done(group, ctx->out_packet);
}

void _nrf_rpc_cbor_proxy_handler(const struct nrf_rpc_group *group, const uint8_t *packet,
				 size_t len, void *handler_data)
{
   1eeaa:	b530      	push	{r4, r5, lr}
   1eeac:	461c      	mov	r4, r3
	ctx.in_packet = packet;

	struct _nrf_rpc_cbor_decoder *cbor_handler =
		(struct _nrf_rpc_cbor_decoder *)handler_data;

	zcbor_new_decode_state(ctx.zs, ARRAY_SIZE(ctx.zs), ctx.out_packet, len,
   1eeae:	23ff      	movs	r3, #255	; 0xff
{
   1eeb0:	4605      	mov	r5, r0
   1eeb2:	b091      	sub	sp, #68	; 0x44
	ctx.in_packet = packet;
   1eeb4:	910f      	str	r1, [sp, #60]	; 0x3c
	zcbor_new_decode_state(ctx.zs, ARRAY_SIZE(ctx.zs), ctx.out_packet, len,
   1eeb6:	9300      	str	r3, [sp, #0]
   1eeb8:	a803      	add	r0, sp, #12
   1eeba:	4613      	mov	r3, r2
   1eebc:	460a      	mov	r2, r1
   1eebe:	2102      	movs	r1, #2
   1eec0:	f7ff ff5a 	bl	1ed78 <zcbor_new_decode_state>
			       NRF_RPC_MAX_PARAMETERS);

	return cbor_handler->handler(group, &ctx, cbor_handler->handler_data);
   1eec4:	e9d4 3200 	ldrd	r3, r2, [r4]
   1eec8:	4628      	mov	r0, r5
   1eeca:	a903      	add	r1, sp, #12
   1eecc:	4798      	blx	r3
}
   1eece:	b011      	add	sp, #68	; 0x44
   1eed0:	bd30      	pop	{r4, r5, pc}

0001eed2 <_nrf_rpc_cbor_prepare>:

void _nrf_rpc_cbor_prepare(struct nrf_rpc_cbor_ctx *ctx, size_t len)
{
	zcbor_new_encode_state(ctx->zs, ARRAY_SIZE(ctx->zs), ctx->out_packet,
   1eed2:	2200      	movs	r2, #0
{
   1eed4:	b513      	push	{r0, r1, r4, lr}
   1eed6:	4604      	mov	r4, r0
   1eed8:	460b      	mov	r3, r1
	zcbor_new_encode_state(ctx->zs, ARRAY_SIZE(ctx->zs), ctx->out_packet,
   1eeda:	9200      	str	r2, [sp, #0]
   1eedc:	2102      	movs	r1, #2
   1eede:	6b02      	ldr	r2, [r0, #48]	; 0x30
   1eee0:	f7ff ffdc 	bl	1ee9c <zcbor_new_encode_state>
			       len, 0);
	ctx->zs->constant_state->stop_on_error = true;
   1eee4:	2201      	movs	r2, #1
   1eee6:	6963      	ldr	r3, [r4, #20]
   1eee8:	741a      	strb	r2, [r3, #16]
}
   1eeea:	b002      	add	sp, #8
   1eeec:	bd10      	pop	{r4, pc}

0001eeee <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1eeee:	4770      	bx	lr

0001eef0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1eef0:	b140      	cbz	r0, 1ef04 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1eef2:	68c3      	ldr	r3, [r0, #12]
   1eef4:	7858      	ldrb	r0, [r3, #1]
   1eef6:	f010 0001 	ands.w	r0, r0, #1
   1eefa:	bf1e      	ittt	ne
   1eefc:	7818      	ldrbne	r0, [r3, #0]
   1eefe:	fab0 f080 	clzne	r0, r0
   1ef02:	0940      	lsrne	r0, r0, #5
}
   1ef04:	4770      	bx	lr

0001ef06 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   1ef06:	f000 ba84 	b.w	1f412 <memset>

0001ef0a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ef0a:	f000 ba5b 	b.w	1f3c4 <memcpy>

0001ef0e <k_heap_init>:
{
   1ef0e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1ef10:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1ef14:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1ef18:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   1ef1c:	f7e8 bad0 	b.w	74c0 <sys_heap_init>

0001ef20 <k_heap_alloc>:
{
   1ef20:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   1ef22:	e9cd 2300 	strd	r2, r3, [sp]
   1ef26:	460a      	mov	r2, r1
   1ef28:	2104      	movs	r1, #4
   1ef2a:	f7f6 ff47 	bl	15dbc <k_heap_aligned_alloc>
}
   1ef2e:	b003      	add	sp, #12
   1ef30:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef34 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ef34:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   1ef38:	4313      	orrs	r3, r2
   1ef3a:	f013 0303 	ands.w	r3, r3, #3
   1ef3e:	d10c      	bne.n	1ef5a <create_free_list+0x26>
	slab->free_list = NULL;
   1ef40:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ef42:	68c1      	ldr	r1, [r0, #12]
   1ef44:	4299      	cmp	r1, r3
   1ef46:	d801      	bhi.n	1ef4c <create_free_list+0x18>
	return 0;
   1ef48:	2000      	movs	r0, #0
   1ef4a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1ef4c:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ef4e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1ef50:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1ef52:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   1ef54:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   1ef56:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1ef58:	e7f3      	b.n	1ef42 <create_free_list+0xe>
		return -EINVAL;
   1ef5a:	f06f 0015 	mvn.w	r0, #21
}
   1ef5e:	4770      	bx	lr

0001ef60 <k_mem_slab_init>:
{
   1ef60:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   1ef62:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   1ef66:	2300      	movs	r3, #0
	slab->buffer = buffer;
   1ef68:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   1ef6a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1ef6c:	6083      	str	r3, [r0, #8]
{
   1ef6e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   1ef70:	f7ff ffe0 	bl	1ef34 <create_free_list>
	if (rc < 0) {
   1ef74:	2800      	cmp	r0, #0
   1ef76:	bfa8      	it	ge
   1ef78:	e9c4 4400 	strdge	r4, r4, [r4]
}
   1ef7c:	bd10      	pop	{r4, pc}

0001ef7e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ef7e:	f3ef 8005 	mrs	r0, IPSR
}
   1ef82:	3800      	subs	r0, #0
   1ef84:	bf18      	it	ne
   1ef86:	2001      	movne	r0, #1
   1ef88:	4770      	bx	lr

0001ef8a <z_impl_k_thread_name_set>:
}
   1ef8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ef8e:	4770      	bx	lr

0001ef90 <k_thread_name_get>:
}
   1ef90:	2000      	movs	r0, #0
   1ef92:	4770      	bx	lr

0001ef94 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1ef94:	f7f8 bc30 	b.w	177f8 <z_sched_start>

0001ef98 <z_pm_save_idle_exit>:
{
   1ef98:	b508      	push	{r3, lr}
	pm_system_resume();
   1ef9a:	f7e9 fb45 	bl	8628 <pm_system_resume>
}
   1ef9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1efa2:	f7fe bc06 	b.w	1d7b2 <sys_clock_idle_exit>

0001efa6 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   1efa6:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   1efaa:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   1efae:	2300      	movs	r3, #0
   1efb0:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
   1efb2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	msgq->lock = (struct k_spinlock) {};
   1efb6:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&msgq->poll_events);
   1efb8:	f100 0328 	add.w	r3, r0, #40	; 0x28
	msgq->read_ptr = buffer;
   1efbc:	e9c0 2106 	strd	r2, r1, [r0, #24]
   1efc0:	e9c0 0000 	strd	r0, r0, [r0]
   1efc4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
	msgq->buffer_start = buffer;
   1efc8:	6141      	str	r1, [r0, #20]
	msgq->write_ptr = buffer;
   1efca:	6201      	str	r1, [r0, #32]
}
   1efcc:	4770      	bx	lr

0001efce <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1efce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1efd2:	428b      	cmp	r3, r1
   1efd4:	d001      	beq.n	1efda <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1efd6:	f7f8 be89 	b.w	17cec <z_set_prio>
}
   1efda:	2000      	movs	r0, #0
   1efdc:	4770      	bx	lr

0001efde <z_impl_k_mutex_init>:
{
   1efde:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1efe0:	2000      	movs	r0, #0
   1efe2:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1efe6:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1efea:	4770      	bx	lr

0001efec <z_queue_node_peek>:
{
   1efec:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1efee:	4604      	mov	r4, r0
   1eff0:	b130      	cbz	r0, 1f000 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1eff2:	6802      	ldr	r2, [r0, #0]
   1eff4:	0793      	lsls	r3, r2, #30
   1eff6:	d003      	beq.n	1f000 <z_queue_node_peek+0x14>
		ret = anode->data;
   1eff8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1effa:	b109      	cbz	r1, 1f000 <z_queue_node_peek+0x14>
			k_free(anode);
   1effc:	f000 f9a0 	bl	1f340 <k_free>
}
   1f000:	4620      	mov	r0, r4
   1f002:	bd10      	pop	{r4, pc}

0001f004 <z_impl_k_queue_init>:
	list->head = NULL;
   1f004:	2300      	movs	r3, #0
	list->tail = NULL;
   1f006:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1f00a:	6083      	str	r3, [r0, #8]
   1f00c:	f100 030c 	add.w	r3, r0, #12
   1f010:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1f014:	f100 0314 	add.w	r3, r0, #20
   1f018:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1f01c:	4770      	bx	lr

0001f01e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1f01e:	2301      	movs	r3, #1
{
   1f020:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f022:	9300      	str	r3, [sp, #0]
   1f024:	2300      	movs	r3, #0
{
   1f026:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f028:	4619      	mov	r1, r3
   1f02a:	f7f7 fbfb 	bl	16824 <queue_insert>
}
   1f02e:	b003      	add	sp, #12
   1f030:	f85d fb04 	ldr.w	pc, [sp], #4

0001f034 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1f034:	2300      	movs	r3, #0
{
   1f036:	b507      	push	{r0, r1, r2, lr}
   1f038:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f03a:	9300      	str	r3, [sp, #0]
   1f03c:	4619      	mov	r1, r3
   1f03e:	f7f7 fbf1 	bl	16824 <queue_insert>
}
   1f042:	b003      	add	sp, #12
   1f044:	f85d fb04 	ldr.w	pc, [sp], #4

0001f048 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f048:	b15a      	cbz	r2, 1f062 <z_impl_k_sem_init+0x1a>
   1f04a:	428a      	cmp	r2, r1
   1f04c:	d309      	bcc.n	1f062 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1f04e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f052:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1f056:	e9c0 0000 	strd	r0, r0, [r0]
   1f05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1f05e:	2000      	movs	r0, #0
   1f060:	4770      	bx	lr
		return -EINVAL;
   1f062:	f06f 0015 	mvn.w	r0, #21
}
   1f066:	4770      	bx	lr

0001f068 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1f068:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1f06a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1f06c:	408b      	lsls	r3, r1
   1f06e:	ea22 0303 	bic.w	r3, r2, r3
   1f072:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f074:	fa22 f001 	lsr.w	r0, r2, r1
}
   1f078:	f000 0001 	and.w	r0, r0, #1
   1f07c:	4770      	bx	lr

0001f07e <unschedule_locked>:
{
   1f07e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f080:	2103      	movs	r1, #3
{
   1f082:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f084:	300c      	adds	r0, #12
   1f086:	f7ff ffef 	bl	1f068 <flag_test_and_clear>
   1f08a:	4604      	mov	r4, r0
   1f08c:	b118      	cbz	r0, 1f096 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1f08e:	f105 0010 	add.w	r0, r5, #16
   1f092:	f7f9 fb27 	bl	186e4 <z_abort_timeout>
}
   1f096:	4620      	mov	r0, r4
   1f098:	bd38      	pop	{r3, r4, r5, pc}

0001f09a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1f09a:	b120      	cbz	r0, 1f0a6 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f09c:	2200      	movs	r2, #0
   1f09e:	30e0      	adds	r0, #224	; 0xe0
   1f0a0:	4611      	mov	r1, r2
   1f0a2:	f7f9 b9ad 	b.w	18400 <z_sched_wake>
}
   1f0a6:	4770      	bx	lr

0001f0a8 <cancel_async_locked>:
{
   1f0a8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f0aa:	68c3      	ldr	r3, [r0, #12]
{
   1f0ac:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f0ae:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1f0b2:	079b      	lsls	r3, r3, #30
   1f0b4:	d416      	bmi.n	1f0e4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1f0b6:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f0b8:	2102      	movs	r1, #2
   1f0ba:	300c      	adds	r0, #12
   1f0bc:	f7ff ffd4 	bl	1f068 <flag_test_and_clear>
   1f0c0:	b180      	cbz	r0, 1f0e4 <cancel_async_locked+0x3c>
	return list->head;
   1f0c2:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f0c6:	b16a      	cbz	r2, 1f0e4 <cancel_async_locked+0x3c>
   1f0c8:	4294      	cmp	r4, r2
   1f0ca:	d11d      	bne.n	1f108 <cancel_async_locked+0x60>
	return node->next;
   1f0cc:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f0ce:	b99e      	cbnz	r6, 1f0f8 <cancel_async_locked+0x50>
   1f0d0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
	list->head = node;
   1f0d4:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
Z_GENLIST_REMOVE(slist, snode)
   1f0d8:	429c      	cmp	r4, r3
   1f0da:	d101      	bne.n	1f0e0 <cancel_async_locked+0x38>
	list->tail = node;
   1f0dc:	f8c5 20dc 	str.w	r2, [r5, #220]	; 0xdc
	parent->next = child;
   1f0e0:	2300      	movs	r3, #0
   1f0e2:	6023      	str	r3, [r4, #0]
	return *flagp;
   1f0e4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1f0e6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1f0ea:	bf1e      	ittt	ne
   1f0ec:	f043 0302 	orrne.w	r3, r3, #2
   1f0f0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f0f2:	f040 0002 	orrne.w	r0, r0, #2
}
   1f0f6:	bd70      	pop	{r4, r5, r6, pc}
   1f0f8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f0fa:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
   1f0fe:	4294      	cmp	r4, r2
	list->tail = node;
   1f100:	bf08      	it	eq
   1f102:	f8c5 60dc 	streq.w	r6, [r5, #220]	; 0xdc
}
   1f106:	e7eb      	b.n	1f0e0 <cancel_async_locked+0x38>
	return node->next;
   1f108:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f10a:	6812      	ldr	r2, [r2, #0]
   1f10c:	e7db      	b.n	1f0c6 <cancel_async_locked+0x1e>

0001f10e <k_work_submit_to_queue>:
{
   1f10e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1f110:	f7f7 ff1a 	bl	16f48 <z_work_submit_to_queue>
	if (ret > 0) {
   1f114:	1e04      	subs	r4, r0, #0
   1f116:	dd09      	ble.n	1f12c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1f118:	f04f 0320 	mov.w	r3, #32
   1f11c:	f3ef 8011 	mrs	r0, BASEPRI
   1f120:	f383 8812 	msr	BASEPRI_MAX, r3
   1f124:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f128:	f000 f80d 	bl	1f146 <z_reschedule_irqlock>
}
   1f12c:	4620      	mov	r0, r4
   1f12e:	bd10      	pop	{r4, pc}

0001f130 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1f130:	f7f7 bed6 	b.w	16ee0 <k_work_busy_get>

0001f134 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f134:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f138:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f13c:	4283      	cmp	r3, r0
		return b2 - b1;
   1f13e:	bf14      	ite	ne
   1f140:	1ac0      	subne	r0, r0, r3
	return 0;
   1f142:	2000      	moveq	r0, #0
}
   1f144:	4770      	bx	lr

0001f146 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f146:	4603      	mov	r3, r0
   1f148:	b920      	cbnz	r0, 1f154 <z_reschedule_irqlock+0xe>
   1f14a:	f3ef 8205 	mrs	r2, IPSR
   1f14e:	b90a      	cbnz	r2, 1f154 <z_reschedule_irqlock+0xe>
   1f150:	f7ea bca0 	b.w	9a94 <arch_swap>
	__asm__ volatile(
   1f154:	f383 8811 	msr	BASEPRI, r3
   1f158:	f3bf 8f6f 	isb	sy
}
   1f15c:	4770      	bx	lr

0001f15e <z_reschedule_unlocked>:
	__asm__ volatile(
   1f15e:	f04f 0320 	mov.w	r3, #32
   1f162:	f3ef 8011 	mrs	r0, BASEPRI
   1f166:	f383 8812 	msr	BASEPRI_MAX, r3
   1f16a:	f3bf 8f6f 	isb	sy
   1f16e:	f7ff bfea 	b.w	1f146 <z_reschedule_irqlock>

0001f172 <z_unpend_all>:
{
   1f172:	b538      	push	{r3, r4, r5, lr}
   1f174:	4605      	mov	r5, r0
	int need_sched = 0;
   1f176:	2000      	movs	r0, #0
	return list->head == list;
   1f178:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f17a:	42a5      	cmp	r5, r4
   1f17c:	d000      	beq.n	1f180 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f17e:	b904      	cbnz	r4, 1f182 <z_unpend_all+0x10>
}
   1f180:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f182:	4620      	mov	r0, r4
   1f184:	f7f8 fea2 	bl	17ecc <z_unpend_thread>
		z_ready_thread(thread);
   1f188:	4620      	mov	r0, r4
   1f18a:	f7f8 fa99 	bl	176c0 <z_ready_thread>
		need_sched = 1;
   1f18e:	2001      	movs	r0, #1
   1f190:	e7f2      	b.n	1f178 <z_unpend_all+0x6>

0001f192 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f192:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f194:	f7f9 fbe0 	bl	18958 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f198:	bd08      	pop	{r3, pc}

0001f19a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1f19a:	f7f9 bbdd 	b.w	18958 <sys_clock_tick_get>

0001f19e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f19e:	b108      	cbz	r0, 1f1a4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f1a0:	f7e8 bdbe 	b.w	7d20 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f1a4:	4770      	bx	lr

0001f1a6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f1a6:	f1b1 3fff 	cmp.w	r1, #4294967295
   1f1aa:	bf08      	it	eq
   1f1ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1f1b0:	b538      	push	{r3, r4, r5, lr}
   1f1b2:	460c      	mov	r4, r1
   1f1b4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f1b6:	d014      	beq.n	1f1e2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f1b8:	4308      	orrs	r0, r1
   1f1ba:	d103      	bne.n	1f1c4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1f1c0:	f7f9 bbca 	b.w	18958 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f1c4:	f06f 0001 	mvn.w	r0, #1
   1f1c8:	f04f 33ff 	mov.w	r3, #4294967295
   1f1cc:	1b40      	subs	r0, r0, r5
   1f1ce:	eb63 0101 	sbc.w	r1, r3, r1
   1f1d2:	2900      	cmp	r1, #0
   1f1d4:	da04      	bge.n	1f1e0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1f1d6:	f7f9 fbbf 	bl	18958 <sys_clock_tick_get>
   1f1da:	1940      	adds	r0, r0, r5
   1f1dc:	eb41 0104 	adc.w	r1, r1, r4
}
   1f1e0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1f1e2:	f04f 30ff 	mov.w	r0, #4294967295
   1f1e6:	4601      	mov	r1, r0
   1f1e8:	e7fa      	b.n	1f1e0 <sys_clock_timeout_end_calc+0x3a>

0001f1ea <add_event>:
{
   1f1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f1ec:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f1ee:	e9d0 1300 	ldrd	r1, r3, [r0]
   1f1f2:	4288      	cmp	r0, r1
   1f1f4:	4604      	mov	r4, r0
   1f1f6:	d105      	bne.n	1f204 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1f1f8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1f1fa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1f1fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f200:	6065      	str	r5, [r4, #4]
   1f202:	e01d      	b.n	1f240 <add_event+0x56>
	if ((pending == NULL) ||
   1f204:	2b00      	cmp	r3, #0
   1f206:	d0f7      	beq.n	1f1f8 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f208:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f20a:	b100      	cbz	r0, 1f20e <add_event+0x24>
   1f20c:	3860      	subs	r0, #96	; 0x60
   1f20e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f212:	4639      	mov	r1, r7
   1f214:	f7ff ff8e 	bl	1f134 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1f218:	2800      	cmp	r0, #0
   1f21a:	dced      	bgt.n	1f1f8 <add_event+0xe>
	return list->head == list;
   1f21c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f21e:	42b4      	cmp	r4, r6
   1f220:	d0ea      	beq.n	1f1f8 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f222:	2e00      	cmp	r6, #0
   1f224:	d0e8      	beq.n	1f1f8 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1f226:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f228:	b101      	cbz	r1, 1f22c <add_event+0x42>
   1f22a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1f22c:	4638      	mov	r0, r7
   1f22e:	f7ff ff81 	bl	1f134 <z_sched_prio_cmp>
   1f232:	2800      	cmp	r0, #0
   1f234:	dd05      	ble.n	1f242 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1f236:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f238:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1f23c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f23e:	6075      	str	r5, [r6, #4]
}
   1f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f242:	6863      	ldr	r3, [r4, #4]
   1f244:	429e      	cmp	r6, r3
   1f246:	d0d7      	beq.n	1f1f8 <add_event+0xe>
   1f248:	6836      	ldr	r6, [r6, #0]
   1f24a:	e7ea      	b.n	1f222 <add_event+0x38>

0001f24c <signal_poll_event>:
{
   1f24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1f250:	6884      	ldr	r4, [r0, #8]
{
   1f252:	4605      	mov	r5, r0
   1f254:	460e      	mov	r6, r1
	if (poller != NULL) {
   1f256:	b144      	cbz	r4, 1f26a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1f258:	7863      	ldrb	r3, [r4, #1]
   1f25a:	2b01      	cmp	r3, #1
   1f25c:	d12e      	bne.n	1f2bc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1f25e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f262:	f013 0302 	ands.w	r3, r3, #2
   1f266:	d10a      	bne.n	1f27e <signal_poll_event+0x32>
		poller->is_polling = false;
   1f268:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1f26a:	2000      	movs	r0, #0
	event->state |= state;
   1f26c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1f26e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1f270:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1f274:	4316      	orrs	r6, r2
   1f276:	f366 3394 	bfi	r3, r6, #14, #7
   1f27a:	60eb      	str	r3, [r5, #12]
	return retcode;
   1f27c:	e03e      	b.n	1f2fc <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1f27e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1f282:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f286:	bf08      	it	eq
   1f288:	f112 0f02 	cmneq.w	r2, #2
   1f28c:	d032      	beq.n	1f2f4 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f28e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1f292:	4640      	mov	r0, r8
   1f294:	f7f8 fe1a 	bl	17ecc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1f298:	2e08      	cmp	r6, #8
   1f29a:	bf0c      	ite	eq
   1f29c:	f06f 0303 	mvneq.w	r3, #3
   1f2a0:	2300      	movne	r3, #0
   1f2a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f2a4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f2a8:	06db      	lsls	r3, r3, #27
   1f2aa:	d109      	bne.n	1f2c0 <signal_poll_event+0x74>
   1f2ac:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1f2b0:	b937      	cbnz	r7, 1f2c0 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1f2b2:	4640      	mov	r0, r8
   1f2b4:	f7f8 fa04 	bl	176c0 <z_ready_thread>
		poller->is_polling = false;
   1f2b8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1f2ba:	e7d6      	b.n	1f26a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1f2bc:	2b02      	cmp	r3, #2
   1f2be:	d001      	beq.n	1f2c4 <signal_poll_event+0x78>
		poller->is_polling = false;
   1f2c0:	2300      	movs	r3, #0
   1f2c2:	e7d1      	b.n	1f268 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1f2c4:	7823      	ldrb	r3, [r4, #0]
   1f2c6:	2b00      	cmp	r3, #0
   1f2c8:	d0cf      	beq.n	1f26a <signal_poll_event+0x1e>
   1f2ca:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1f2ce:	2f00      	cmp	r7, #0
   1f2d0:	d0f2      	beq.n	1f2b8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1f2d2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1f2d6:	f1a4 0914 	sub.w	r9, r4, #20
   1f2da:	f104 0014 	add.w	r0, r4, #20
   1f2de:	f7f9 fa01 	bl	186e4 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1f2e2:	4649      	mov	r1, r9
   1f2e4:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1f2e6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1f2ea:	f7f7 fe2d 	bl	16f48 <z_work_submit_to_queue>
		poller->is_polling = false;
   1f2ee:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1f2f2:	e7ba      	b.n	1f26a <signal_poll_event+0x1e>
		poller->is_polling = false;
   1f2f4:	2300      	movs	r3, #0
		return -EAGAIN;
   1f2f6:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1f2fa:	7023      	strb	r3, [r4, #0]
}
   1f2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f300 <z_handle_obj_poll_events>:
{
   1f300:	4603      	mov	r3, r0
	return list->head == list;
   1f302:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f304:	4283      	cmp	r3, r0
   1f306:	d008      	beq.n	1f31a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1f308:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f30c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f30e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f310:	2300      	movs	r3, #0
	node->prev = NULL;
   1f312:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f316:	f7ff bf99 	b.w	1f24c <signal_poll_event>
}
   1f31a:	4770      	bx	lr

0001f31c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1f31c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1f31e:	e9c0 0000 	strd	r0, r0, [r0]
   1f322:	6083      	str	r3, [r0, #8]
}
   1f324:	4770      	bx	lr

0001f326 <z_impl_k_event_init>:
	event->events = 0;
   1f326:	2300      	movs	r3, #0
   1f328:	e9c0 0000 	strd	r0, r0, [r0]
	event->lock = (struct k_spinlock) {};
   1f32c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1f330:	4770      	bx	lr

0001f332 <z_impl_k_event_set>:
	k_event_post_internal(event, events, ~0);
   1f332:	f04f 32ff 	mov.w	r2, #4294967295
   1f336:	f7f9 beb7 	b.w	190a8 <k_event_post_internal>

0001f33a <z_impl_k_event_wait>:
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;

	return k_event_wait_internal(event, events, options, timeout);
   1f33a:	0052      	lsls	r2, r2, #1
   1f33c:	f7f9 bf0a 	b.w	19154 <k_event_wait_internal>

0001f340 <k_free>:
	if (ptr != NULL) {
   1f340:	b120      	cbz	r0, 1f34c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1f342:	1f01      	subs	r1, r0, #4
   1f344:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1f348:	f7f6 bdbe 	b.w	15ec8 <k_heap_free>
}
   1f34c:	4770      	bx	lr

0001f34e <k_malloc>:
{
   1f34e:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1f350:	2004      	movs	r0, #4
   1f352:	f7f9 bfa7 	b.w	192a4 <k_aligned_alloc>

0001f356 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1f356:	4770      	bx	lr

0001f358 <fabs>:
   1f358:	ec51 0b10 	vmov	r0, r1, d0
   1f35c:	4602      	mov	r2, r0
   1f35e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f362:	ec43 2b10 	vmov	d0, r2, r3
   1f366:	4770      	bx	lr

0001f368 <fabsf>:
   1f368:	ee10 3a10 	vmov	r3, s0
   1f36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f370:	ee00 3a10 	vmov	s0, r3
   1f374:	4770      	bx	lr

0001f376 <atan2>:
   1f376:	f7e7 b91b 	b.w	65b0 <__ieee754_atan2>

0001f37a <atan2f>:
   1f37a:	f7fa b925 	b.w	195c8 <__ieee754_atan2f>

0001f37e <__ieee754_sqrtf>:
   1f37e:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1f382:	4770      	bx	lr

0001f384 <finitef>:
   1f384:	ee10 3a10 	vmov	r3, s0
   1f388:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1f38c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1f390:	bfac      	ite	ge
   1f392:	2000      	movge	r0, #0
   1f394:	2001      	movlt	r0, #1
   1f396:	4770      	bx	lr

0001f398 <floorf>:
   1f398:	febb 0a40 	vrintm.f32	s0, s0
   1f39c:	4770      	bx	lr

0001f39e <rintf>:
   1f39e:	eeb7 0a40 	vrintx.f32	s0, s0
   1f3a2:	4770      	bx	lr

0001f3a4 <memcmp>:
   1f3a4:	3901      	subs	r1, #1
   1f3a6:	4402      	add	r2, r0
   1f3a8:	b510      	push	{r4, lr}
   1f3aa:	4290      	cmp	r0, r2
   1f3ac:	d101      	bne.n	1f3b2 <memcmp+0xe>
   1f3ae:	2000      	movs	r0, #0
   1f3b0:	e005      	b.n	1f3be <memcmp+0x1a>
   1f3b2:	7803      	ldrb	r3, [r0, #0]
   1f3b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f3b8:	42a3      	cmp	r3, r4
   1f3ba:	d001      	beq.n	1f3c0 <memcmp+0x1c>
   1f3bc:	1b18      	subs	r0, r3, r4
   1f3be:	bd10      	pop	{r4, pc}
   1f3c0:	3001      	adds	r0, #1
   1f3c2:	e7f2      	b.n	1f3aa <memcmp+0x6>

0001f3c4 <memcpy>:
   1f3c4:	440a      	add	r2, r1
   1f3c6:	1e43      	subs	r3, r0, #1
   1f3c8:	4291      	cmp	r1, r2
   1f3ca:	d100      	bne.n	1f3ce <memcpy+0xa>
   1f3cc:	4770      	bx	lr
   1f3ce:	b510      	push	{r4, lr}
   1f3d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f3d4:	4291      	cmp	r1, r2
   1f3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f3da:	d1f9      	bne.n	1f3d0 <memcpy+0xc>
   1f3dc:	bd10      	pop	{r4, pc}

0001f3de <memmove>:
   1f3de:	4288      	cmp	r0, r1
   1f3e0:	b510      	push	{r4, lr}
   1f3e2:	eb01 0402 	add.w	r4, r1, r2
   1f3e6:	d902      	bls.n	1f3ee <memmove+0x10>
   1f3e8:	4284      	cmp	r4, r0
   1f3ea:	4623      	mov	r3, r4
   1f3ec:	d807      	bhi.n	1f3fe <memmove+0x20>
   1f3ee:	1e43      	subs	r3, r0, #1
   1f3f0:	42a1      	cmp	r1, r4
   1f3f2:	d008      	beq.n	1f406 <memmove+0x28>
   1f3f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f3f8:	f803 2f01 	strb.w	r2, [r3, #1]!
   1f3fc:	e7f8      	b.n	1f3f0 <memmove+0x12>
   1f3fe:	4402      	add	r2, r0
   1f400:	4601      	mov	r1, r0
   1f402:	428a      	cmp	r2, r1
   1f404:	d100      	bne.n	1f408 <memmove+0x2a>
   1f406:	bd10      	pop	{r4, pc}
   1f408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1f40c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1f410:	e7f7      	b.n	1f402 <memmove+0x24>

0001f412 <memset>:
   1f412:	4402      	add	r2, r0
   1f414:	4603      	mov	r3, r0
   1f416:	4293      	cmp	r3, r2
   1f418:	d100      	bne.n	1f41c <memset+0xa>
   1f41a:	4770      	bx	lr
   1f41c:	f803 1b01 	strb.w	r1, [r3], #1
   1f420:	e7f9      	b.n	1f416 <memset+0x4>

0001f422 <strcpy>:
   1f422:	4603      	mov	r3, r0
   1f424:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f428:	f803 2b01 	strb.w	r2, [r3], #1
   1f42c:	2a00      	cmp	r2, #0
   1f42e:	d1f9      	bne.n	1f424 <strcpy+0x2>
   1f430:	4770      	bx	lr

0001f432 <strncmp>:
   1f432:	b510      	push	{r4, lr}
   1f434:	b16a      	cbz	r2, 1f452 <strncmp+0x20>
   1f436:	3901      	subs	r1, #1
   1f438:	1884      	adds	r4, r0, r2
   1f43a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f43e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f442:	429a      	cmp	r2, r3
   1f444:	d103      	bne.n	1f44e <strncmp+0x1c>
   1f446:	42a0      	cmp	r0, r4
   1f448:	d001      	beq.n	1f44e <strncmp+0x1c>
   1f44a:	2a00      	cmp	r2, #0
   1f44c:	d1f5      	bne.n	1f43a <strncmp+0x8>
   1f44e:	1ad0      	subs	r0, r2, r3
   1f450:	bd10      	pop	{r4, pc}
   1f452:	4610      	mov	r0, r2
   1f454:	e7fc      	b.n	1f450 <strncmp+0x1e>

0001f456 <strncpy>:
   1f456:	3901      	subs	r1, #1
   1f458:	4603      	mov	r3, r0
   1f45a:	b510      	push	{r4, lr}
   1f45c:	b132      	cbz	r2, 1f46c <strncpy+0x16>
   1f45e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f462:	3a01      	subs	r2, #1
   1f464:	f803 4b01 	strb.w	r4, [r3], #1
   1f468:	2c00      	cmp	r4, #0
   1f46a:	d1f7      	bne.n	1f45c <strncpy+0x6>
   1f46c:	441a      	add	r2, r3
   1f46e:	2100      	movs	r1, #0
   1f470:	4293      	cmp	r3, r2
   1f472:	d100      	bne.n	1f476 <strncpy+0x20>
   1f474:	bd10      	pop	{r4, pc}
   1f476:	f803 1b01 	strb.w	r1, [r3], #1
   1f47a:	e7f9      	b.n	1f470 <strncpy+0x1a>

0001f47c <strnlen>:
   1f47c:	4602      	mov	r2, r0
   1f47e:	4401      	add	r1, r0
   1f480:	b510      	push	{r4, lr}
   1f482:	428a      	cmp	r2, r1
   1f484:	4613      	mov	r3, r2
   1f486:	d003      	beq.n	1f490 <strnlen+0x14>
   1f488:	781c      	ldrb	r4, [r3, #0]
   1f48a:	3201      	adds	r2, #1
   1f48c:	2c00      	cmp	r4, #0
   1f48e:	d1f8      	bne.n	1f482 <strnlen+0x6>
   1f490:	1a18      	subs	r0, r3, r0
   1f492:	bd10      	pop	{r4, pc}
